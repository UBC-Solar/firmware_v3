
telemetry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a18  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08008b28  08008b28  00018b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d60  08008d60  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08008d60  08008d60  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d60  08008d60  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d60  08008d60  00018d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d64  08008d64  00018d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002478  20000074  08008ddc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200024ec  08008ddc  000224ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001caf8  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f07  00000000  00000000  0003cb95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001848  00000000  00000000  00040aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016e8  00000000  00000000  000422e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad67  00000000  00000000  000439d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b883  00000000  00000000  0005e737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009986e  00000000  00000000  00079fba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00113828  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006aa0  00000000  00000000  00113878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08008b10 	.word	0x08008b10

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08008b10 	.word	0x08008b10

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	; 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <CanFilterSetup>:
 * @brief Initialize CAN node for sending and receiving
 * @param: CAN filter structure
 * @retval: nothing
 */
void CanFilterSetup(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	// Use mask and list mode to filter IDs from the CAN ID BOM

	// Filter for 0x500 and 0x600 IDs
    CAN_filter0.FilterIdHigh = (uint16_t) (0x501 << 5);
 8000bfc:	4b23      	ldr	r3, [pc, #140]	; (8000c8c <CanFilterSetup+0x94>)
 8000bfe:	f24a 0220 	movw	r2, #40992	; 0xa020
 8000c02:	601a      	str	r2, [r3, #0]
    CAN_filter0.FilterMaskIdHigh = (uint16_t) (0x7F5 << 5);
 8000c04:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <CanFilterSetup+0x94>)
 8000c06:	f64f 62a0 	movw	r2, #65184	; 0xfea0
 8000c0a:	609a      	str	r2, [r3, #8]

    CAN_filter0.FilterIdLow = (uint16_t) (0x620 << 5);
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <CanFilterSetup+0x94>)
 8000c0e:	f44f 4244 	mov.w	r2, #50176	; 0xc400
 8000c12:	605a      	str	r2, [r3, #4]
    CAN_filter0.FilterMaskIdLow = (uint16_t) (0x7F8 << 5);
 8000c14:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <CanFilterSetup+0x94>)
 8000c16:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000c1a:	60da      	str	r2, [r3, #12]

    CAN_filter0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <CanFilterSetup+0x94>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
    CAN_filter0.FilterBank = (uint32_t) 0;
 8000c22:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <CanFilterSetup+0x94>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	615a      	str	r2, [r3, #20]
    CAN_filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 8000c28:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <CanFilterSetup+0x94>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
    CAN_filter0.FilterScale = CAN_FILTERSCALE_16BIT;
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <CanFilterSetup+0x94>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	61da      	str	r2, [r3, #28]
    CAN_filter0.FilterActivation = CAN_FILTER_ENABLE;
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <CanFilterSetup+0x94>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	621a      	str	r2, [r3, #32]

    // Remaining IDs filtered with list mode
    CAN_filter1.FilterIdHigh = (uint16_t) (0x502 << 5);
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <CanFilterSetup+0x98>)
 8000c3c:	f24a 0240 	movw	r2, #41024	; 0xa040
 8000c40:	601a      	str	r2, [r3, #0]
    CAN_filter1.FilterMaskIdHigh = (uint16_t) (0x401 << 5);
 8000c42:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <CanFilterSetup+0x98>)
 8000c44:	f248 0220 	movw	r2, #32800	; 0x8020
 8000c48:	609a      	str	r2, [r3, #8]

    CAN_filter1.FilterIdLow = (uint16_t) (0x401 << 5);
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <CanFilterSetup+0x98>)
 8000c4c:	f248 0220 	movw	r2, #32800	; 0x8020
 8000c50:	605a      	str	r2, [r3, #4]
    CAN_filter1.FilterMaskIdLow = (uint16_t) (0x401 << 5);
 8000c52:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <CanFilterSetup+0x98>)
 8000c54:	f248 0220 	movw	r2, #32800	; 0x8020
 8000c58:	60da      	str	r2, [r3, #12]

    CAN_filter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <CanFilterSetup+0x98>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
    CAN_filter1.FilterBank = (uint32_t) 1;
 8000c60:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <CanFilterSetup+0x98>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	615a      	str	r2, [r3, #20]
    CAN_filter1.FilterMode = CAN_FILTERMODE_IDLIST;
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <CanFilterSetup+0x98>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	619a      	str	r2, [r3, #24]
    CAN_filter1.FilterScale = CAN_FILTERSCALE_16BIT;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <CanFilterSetup+0x98>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
    CAN_filter1.FilterActivation = CAN_FILTER_ENABLE;
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <CanFilterSetup+0x98>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	621a      	str	r2, [r3, #32]

	// Configure reception filters
    HAL_CAN_ConfigFilter(&hcan, &CAN_filter0);
 8000c78:	4904      	ldr	r1, [pc, #16]	; (8000c8c <CanFilterSetup+0x94>)
 8000c7a:	4806      	ldr	r0, [pc, #24]	; (8000c94 <CanFilterSetup+0x9c>)
 8000c7c:	f001 f84f 	bl	8001d1e <HAL_CAN_ConfigFilter>
    HAL_CAN_ConfigFilter(&hcan, &CAN_filter1);
 8000c80:	4903      	ldr	r1, [pc, #12]	; (8000c90 <CanFilterSetup+0x98>)
 8000c82:	4804      	ldr	r0, [pc, #16]	; (8000c94 <CanFilterSetup+0x9c>)
 8000c84:	f001 f84b 	bl	8001d1e <HAL_CAN_ConfigFilter>

}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000170 	.word	0x20000170
 8000c90:	20000198 	.word	0x20000198
 8000c94:	20000090 	.word	0x20000090

08000c98 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000c9c:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_CAN_Init+0x64>)
 8000c9e:	4a18      	ldr	r2, [pc, #96]	; (8000d00 <MX_CAN_Init+0x68>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <MX_CAN_Init+0x64>)
 8000ca4:	2204      	movs	r2, #4
 8000ca6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_CAN_Init+0x64>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000cae:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <MX_CAN_Init+0x64>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_CAN_Init+0x64>)
 8000cb6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000cba:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <MX_CAN_Init+0x64>)
 8000cbe:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000cc2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <MX_CAN_Init+0x64>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <MX_CAN_Init+0x64>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <MX_CAN_Init+0x64>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <MX_CAN_Init+0x64>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <MX_CAN_Init+0x64>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <MX_CAN_Init+0x64>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <MX_CAN_Init+0x64>)
 8000cea:	f000 ff1d 	bl	8001b28 <HAL_CAN_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000cf4:	f000 fcfc 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000090 	.word	0x20000090
 8000d00:	40006400 	.word	0x40006400

08000d04 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a29      	ldr	r2, [pc, #164]	; (8000dc4 <HAL_CAN_MspInit+0xc0>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d14b      	bne.n	8000dbc <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d24:	4b28      	ldr	r3, [pc, #160]	; (8000dc8 <HAL_CAN_MspInit+0xc4>)
 8000d26:	69db      	ldr	r3, [r3, #28]
 8000d28:	4a27      	ldr	r2, [pc, #156]	; (8000dc8 <HAL_CAN_MspInit+0xc4>)
 8000d2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d2e:	61d3      	str	r3, [r2, #28]
 8000d30:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <HAL_CAN_MspInit+0xc4>)
 8000d32:	69db      	ldr	r3, [r3, #28]
 8000d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3c:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <HAL_CAN_MspInit+0xc4>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a21      	ldr	r2, [pc, #132]	; (8000dc8 <HAL_CAN_MspInit+0xc4>)
 8000d42:	f043 0308 	orr.w	r3, r3, #8
 8000d46:	6193      	str	r3, [r2, #24]
 8000d48:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <HAL_CAN_MspInit+0xc4>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f003 0308 	and.w	r3, r3, #8
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	4818      	ldr	r0, [pc, #96]	; (8000dcc <HAL_CAN_MspInit+0xc8>)
 8000d6a:	f001 fe1b 	bl	80029a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	4812      	ldr	r0, [pc, #72]	; (8000dcc <HAL_CAN_MspInit+0xc8>)
 8000d84:	f001 fe0e 	bl	80029a4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HAL_CAN_MspInit+0xcc>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d90:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <HAL_CAN_MspInit+0xcc>)
 8000da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000daa:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2105      	movs	r1, #5
 8000db0:	2014      	movs	r0, #20
 8000db2:	f001 fd1c 	bl	80027ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000db6:	2014      	movs	r0, #20
 8000db8:	f001 fd35 	bl	8002826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	3728      	adds	r7, #40	; 0x28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40006400 	.word	0x40006400
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40010c00 	.word	0x40010c00
 8000dd0:	40010000 	.word	0x40010000

08000dd4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  }
}

/* USER CODE BEGIN 1 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_CAN_DeactivateNotification(hcan,
 8000ddc:	2102      	movs	r1, #2
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f001 fa07 	bl	80021f2 <HAL_CAN_DeactivateNotification>
 8000de4:	4603      	mov	r3, r0
 8000de6:	73fb      	strb	r3, [r7, #15]
    CAN_IT_RX_FIFO0_MSG_PENDING);
    assert_param(status == HAL_OK);

    // osThreadFlagsClear(canReadMessagesTaskHandle);
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000de8:	2120      	movs	r1, #32
 8000dea:	4806      	ldr	r0, [pc, #24]	; (8000e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000dec:	f001 ff76 	bl	8002cdc <HAL_GPIO_TogglePin>
    osThreadFlagsSet(readCANTaskHandle, CAN_READY);
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2101      	movs	r1, #1
 8000df6:	4618      	mov	r0, r3
 8000df8:	f004 fc38 	bl	800566c <osThreadFlagsSet>
}
 8000dfc:	bf00      	nop
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40010800 	.word	0x40010800
 8000e08:	200000c0 	.word	0x200000c0
 8000e0c:	00000000 	.word	0x00000000

08000e10 <gyro>:
	HAL_UART_Transmit(&huart3, data, size, UART_TIMEOUT);
	HAL_Delay(1000);
}

float gyro(enum GyroType type)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af04      	add	r7, sp, #16
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]

	int16_t gyro;
	uint8_t OUT_H_G, OUT_L_G;

	// goes sequential
	uint16_t addL = 0x22 + (type * 2);
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	3311      	adds	r3, #17
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	81fb      	strh	r3, [r7, #14]
	uint16_t addH = 0x23 + (type * 2);
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	3323      	adds	r3, #35	; 0x23
 8000e2e:	81bb      	strh	r3, [r7, #12]

	HAL_I2C_Mem_Read(&hi2c1, DEVICE_ADDRESS, addL, 1, &OUT_L_G, 1, 100);
 8000e30:	89fa      	ldrh	r2, [r7, #14]
 8000e32:	2364      	movs	r3, #100	; 0x64
 8000e34:	9302      	str	r3, [sp, #8]
 8000e36:	2301      	movs	r3, #1
 8000e38:	9301      	str	r3, [sp, #4]
 8000e3a:	f107 0308 	add.w	r3, r7, #8
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	2301      	movs	r3, #1
 8000e42:	21d4      	movs	r1, #212	; 0xd4
 8000e44:	4824      	ldr	r0, [pc, #144]	; (8000ed8 <gyro+0xc8>)
 8000e46:	f002 f9a1 	bl	800318c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, DEVICE_ADDRESS, addH, 1, &OUT_H_G, 1, 100);
 8000e4a:	89ba      	ldrh	r2, [r7, #12]
 8000e4c:	2364      	movs	r3, #100	; 0x64
 8000e4e:	9302      	str	r3, [sp, #8]
 8000e50:	2301      	movs	r3, #1
 8000e52:	9301      	str	r3, [sp, #4]
 8000e54:	f107 0309 	add.w	r3, r7, #9
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	21d4      	movs	r1, #212	; 0xd4
 8000e5e:	481e      	ldr	r0, [pc, #120]	; (8000ed8 <gyro+0xc8>)
 8000e60:	f002 f994 	bl	800318c <HAL_I2C_Mem_Read>

	// The value is expressed as a 16-bit word in two’s complement.
	gyro = (OUT_H_G << 8) | (OUT_L_G);
 8000e64:	7a7b      	ldrb	r3, [r7, #9]
 8000e66:	021b      	lsls	r3, r3, #8
 8000e68:	b21a      	sxth	r2, r3
 8000e6a:	7a3b      	ldrb	r3, [r7, #8]
 8000e6c:	b21b      	sxth	r3, r3
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	817b      	strh	r3, [r7, #10]

	gyro = (float) gyro / 8.75; // datasheet pg10
 8000e72:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fe6a 	bl	8000b50 <__aeabi_i2f>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff faca 	bl	8000418 <__aeabi_f2d>
 8000e84:	f04f 0200 	mov.w	r2, #0
 8000e88:	4b14      	ldr	r3, [pc, #80]	; (8000edc <gyro+0xcc>)
 8000e8a:	f7ff fc47 	bl	800071c <__aeabi_ddiv>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	460b      	mov	r3, r1
 8000e92:	4610      	mov	r0, r2
 8000e94:	4619      	mov	r1, r3
 8000e96:	f7ff fd29 	bl	80008ec <__aeabi_d2iz>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	817b      	strh	r3, [r7, #10]

	return (float) gyro * 0.02;
 8000e9e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fe54 	bl	8000b50 <__aeabi_i2f>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fab4 	bl	8000418 <__aeabi_f2d>
 8000eb0:	a307      	add	r3, pc, #28	; (adr r3, 8000ed0 <gyro+0xc0>)
 8000eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb6:	f7ff fb07 	bl	80004c8 <__aeabi_dmul>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f7ff fd3b 	bl	800093c <__aeabi_d2f>
 8000ec6:	4603      	mov	r3, r0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	47ae147b 	.word	0x47ae147b
 8000ed4:	3f947ae1 	.word	0x3f947ae1
 8000ed8:	2000011c 	.word	0x2000011c
 8000edc:	40218000 	.word	0x40218000

08000ee0 <accel>:

float accel(enum AccelType type)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af04      	add	r7, sp, #16
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]

	int16_t accel;
	uint8_t OUT_H_A, OUT_L_A;

	// goes sequential
	uint16_t addL = 0x28 + (type * 2);
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	3314      	adds	r3, #20
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	81fb      	strh	r3, [r7, #14]
	uint16_t addH = 0x29 + (type * 2);
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	3329      	adds	r3, #41	; 0x29
 8000efe:	81bb      	strh	r3, [r7, #12]

	HAL_I2C_Mem_Read(&hi2c1, DEVICE_ADDRESS, addL, 1, &OUT_L_A, 1, 100);
 8000f00:	89fa      	ldrh	r2, [r7, #14]
 8000f02:	2364      	movs	r3, #100	; 0x64
 8000f04:	9302      	str	r3, [sp, #8]
 8000f06:	2301      	movs	r3, #1
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	f107 0308 	add.w	r3, r7, #8
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2301      	movs	r3, #1
 8000f12:	21d4      	movs	r1, #212	; 0xd4
 8000f14:	481e      	ldr	r0, [pc, #120]	; (8000f90 <accel+0xb0>)
 8000f16:	f002 f939 	bl	800318c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, DEVICE_ADDRESS, addH, 1, &OUT_H_A, 1, 100);
 8000f1a:	89ba      	ldrh	r2, [r7, #12]
 8000f1c:	2364      	movs	r3, #100	; 0x64
 8000f1e:	9302      	str	r3, [sp, #8]
 8000f20:	2301      	movs	r3, #1
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	f107 0309 	add.w	r3, r7, #9
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	21d4      	movs	r1, #212	; 0xd4
 8000f2e:	4818      	ldr	r0, [pc, #96]	; (8000f90 <accel+0xb0>)
 8000f30:	f002 f92c 	bl	800318c <HAL_I2C_Mem_Read>

	// The value is expressed as a 16-bit word in two’s complement.
	accel = (OUT_H_A << 8) | (OUT_L_A);
 8000f34:	7a7b      	ldrb	r3, [r7, #9]
 8000f36:	021b      	lsls	r3, r3, #8
 8000f38:	b21a      	sxth	r2, r3
 8000f3a:	7a3b      	ldrb	r3, [r7, #8]
 8000f3c:	b21b      	sxth	r3, r3
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	817b      	strh	r3, [r7, #10]

	accel = (float) accel * 0.061; // datasheet pg10
 8000f42:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fe02 	bl	8000b50 <__aeabi_i2f>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fa62 	bl	8000418 <__aeabi_f2d>
 8000f54:	a30c      	add	r3, pc, #48	; (adr r3, 8000f88 <accel+0xa8>)
 8000f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5a:	f7ff fab5 	bl	80004c8 <__aeabi_dmul>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	4610      	mov	r0, r2
 8000f64:	4619      	mov	r1, r3
 8000f66:	f7ff fcc1 	bl	80008ec <__aeabi_d2iz>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	817b      	strh	r3, [r7, #10]

	return (float) accel;
 8000f6e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fdec 	bl	8000b50 <__aeabi_i2f>
 8000f78:	4603      	mov	r3, r0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	f3af 8000 	nop.w
 8000f88:	5a1cac08 	.word	0x5a1cac08
 8000f8c:	3faf3b64 	.word	0x3faf3b64
 8000f90:	2000011c 	.word	0x2000011c

08000f94 <initIMU>:

/*
	Set up for gyro/accel modes
*/
void initIMU(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af04      	add	r7, sp, #16
	uint8_t data;

	data = 0x80; // 0b10000000
 8000f9a:	2380      	movs	r3, #128	; 0x80
 8000f9c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, DEVICE_ADDRESS, 0x10, 1, &data, 1, 100);
 8000f9e:	2364      	movs	r3, #100	; 0x64
 8000fa0:	9302      	str	r3, [sp, #8]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2301      	movs	r3, #1
 8000fac:	2210      	movs	r2, #16
 8000fae:	21d4      	movs	r1, #212	; 0xd4
 8000fb0:	4811      	ldr	r0, [pc, #68]	; (8000ff8 <initIMU+0x64>)
 8000fb2:	f001 fff1 	bl	8002f98 <HAL_I2C_Mem_Write>

	data = 0x80; // 0b10000000
 8000fb6:	2380      	movs	r3, #128	; 0x80
 8000fb8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, DEVICE_ADDRESS, 0x11, 1, &data, 1, 100);
 8000fba:	2364      	movs	r3, #100	; 0x64
 8000fbc:	9302      	str	r3, [sp, #8]
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	1dfb      	adds	r3, r7, #7
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	2211      	movs	r2, #17
 8000fca:	21d4      	movs	r1, #212	; 0xd4
 8000fcc:	480a      	ldr	r0, [pc, #40]	; (8000ff8 <initIMU+0x64>)
 8000fce:	f001 ffe3 	bl	8002f98 <HAL_I2C_Mem_Write>

	data = 0x04; // 0b00000100
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, DEVICE_ADDRESS, 0x12, 1, &data, 1, 100);
 8000fd6:	2364      	movs	r3, #100	; 0x64
 8000fd8:	9302      	str	r3, [sp, #8]
 8000fda:	2301      	movs	r3, #1
 8000fdc:	9301      	str	r3, [sp, #4]
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	2212      	movs	r2, #18
 8000fe6:	21d4      	movs	r1, #212	; 0xd4
 8000fe8:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <initIMU+0x64>)
 8000fea:	f001 ffd5 	bl	8002f98 <HAL_I2C_Mem_Write>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000011c 	.word	0x2000011c

08000ffc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  // Initialize IMU
  initIMU();
 8001000:	f7ff ffc8 	bl	8000f94 <initIMU>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */

  canMessageQueueHandle = osMessageQueueNew(CAN_MESSAGE_QUEUE_SIZE, sizeof(CAN_msg_t), &canMessageQueue_attributes);
 8001004:	4a18      	ldr	r2, [pc, #96]	; (8001068 <MX_FREERTOS_Init+0x6c>)
 8001006:	2124      	movs	r1, #36	; 0x24
 8001008:	200a      	movs	r0, #10
 800100a:	f004 fc51 	bl	80058b0 <osMessageQueueNew>
 800100e:	4603      	mov	r3, r0
 8001010:	4a16      	ldr	r2, [pc, #88]	; (800106c <MX_FREERTOS_Init+0x70>)
 8001012:	6013      	str	r3, [r2, #0]
  imuMessageQueueHandle = osMessageQueueNew(IMU_QUEUE_SIZE, sizeof(IMU_msg_t), &imuMessageQueue_attributes);
 8001014:	4a16      	ldr	r2, [pc, #88]	; (8001070 <MX_FREERTOS_Init+0x74>)
 8001016:	2106      	movs	r1, #6
 8001018:	200a      	movs	r0, #10
 800101a:	f004 fc49 	bl	80058b0 <osMessageQueueNew>
 800101e:	4603      	mov	r3, r0
 8001020:	4a14      	ldr	r2, [pc, #80]	; (8001074 <MX_FREERTOS_Init+0x78>)
 8001022:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  // kernelLEDTaskHandle = osThreadNew(kernelLEDTask, NULL, &kernelLEDTask_attributes);
  
  readCANTaskHandle = osThreadNew(readCANTask, NULL, &readCANTask_attributes);
 8001024:	4a14      	ldr	r2, [pc, #80]	; (8001078 <MX_FREERTOS_Init+0x7c>)
 8001026:	2100      	movs	r1, #0
 8001028:	4814      	ldr	r0, [pc, #80]	; (800107c <MX_FREERTOS_Init+0x80>)
 800102a:	f004 fa43 	bl	80054b4 <osThreadNew>
 800102e:	4603      	mov	r3, r0
 8001030:	4a13      	ldr	r2, [pc, #76]	; (8001080 <MX_FREERTOS_Init+0x84>)
 8001032:	6013      	str	r3, [r2, #0]
  transmitMessageTaskHandle = osThreadNew(transmitMessageTask, NULL, &transmitMessageTask_attributes);
 8001034:	4a13      	ldr	r2, [pc, #76]	; (8001084 <MX_FREERTOS_Init+0x88>)
 8001036:	2100      	movs	r1, #0
 8001038:	4813      	ldr	r0, [pc, #76]	; (8001088 <MX_FREERTOS_Init+0x8c>)
 800103a:	f004 fa3b 	bl	80054b4 <osThreadNew>
 800103e:	4603      	mov	r3, r0
 8001040:	4a12      	ldr	r2, [pc, #72]	; (800108c <MX_FREERTOS_Init+0x90>)
 8001042:	6013      	str	r3, [r2, #0]

  readimuHandle = osThreadNew(StartReadIMU, NULL, &readimu_attributes);
 8001044:	4a12      	ldr	r2, [pc, #72]	; (8001090 <MX_FREERTOS_Init+0x94>)
 8001046:	2100      	movs	r1, #0
 8001048:	4812      	ldr	r0, [pc, #72]	; (8001094 <MX_FREERTOS_Init+0x98>)
 800104a:	f004 fa33 	bl	80054b4 <osThreadNew>
 800104e:	4603      	mov	r3, r0
 8001050:	4a11      	ldr	r2, [pc, #68]	; (8001098 <MX_FREERTOS_Init+0x9c>)
 8001052:	6013      	str	r3, [r2, #0]
  transmitIMUHandle = osThreadNew(StartTransmitIMU, NULL, &transmitIMU_attributes);
 8001054:	4a11      	ldr	r2, [pc, #68]	; (800109c <MX_FREERTOS_Init+0xa0>)
 8001056:	2100      	movs	r1, #0
 8001058:	4811      	ldr	r0, [pc, #68]	; (80010a0 <MX_FREERTOS_Init+0xa4>)
 800105a:	f004 fa2b 	bl	80054b4 <osThreadNew>
 800105e:	4603      	mov	r3, r0
 8001060:	4a10      	ldr	r2, [pc, #64]	; (80010a4 <MX_FREERTOS_Init+0xa8>)
 8001062:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	08008c70 	.word	0x08008c70
 800106c:	200000c8 	.word	0x200000c8
 8001070:	08008c88 	.word	0x08008c88
 8001074:	200000cc 	.word	0x200000cc
 8001078:	08008c28 	.word	0x08008c28
 800107c:	080010a9 	.word	0x080010a9
 8001080:	200000c0 	.word	0x200000c0
 8001084:	08008c4c 	.word	0x08008c4c
 8001088:	08001155 	.word	0x08001155
 800108c:	200000c4 	.word	0x200000c4
 8001090:	08008ca0 	.word	0x08008ca0
 8001094:	08001261 	.word	0x08001261
 8001098:	200000b8 	.word	0x200000b8
 800109c:	08008cc4 	.word	0x08008cc4
 80010a0:	08001359 	.word	0x08001359
 80010a4:	200000bc 	.word	0x200000bc

080010a8 <readCANTask>:

    osDelay(KERNEL_LED_DELAY);
  }
}

__NO_RETURN void readCANTask(void *argument) {
 80010a8:	b5b0      	push	{r4, r5, r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  static HAL_StatusTypeDef rx_status;
  static CAN_msg_t current_can_message;

  while (1) {
    // wait for thread flags to be set
    osThreadFlagsWait(CAN_READY, osFlagsWaitAll, osWaitForever);
 80010b0:	f04f 32ff 	mov.w	r2, #4294967295
 80010b4:	2101      	movs	r1, #1
 80010b6:	2001      	movs	r0, #1
 80010b8:	f004 fb38 	bl	800572c <osThreadFlagsWait>

    if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) != 0) {
 80010bc:	2100      	movs	r1, #0
 80010be:	481e      	ldr	r0, [pc, #120]	; (8001138 <readCANTask+0x90>)
 80010c0:	f001 f84b 	bl	800215a <HAL_CAN_GetRxFifoFillLevel>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d030      	beq.n	800112c <readCANTask+0x84>
      // there are multiple CAN IDs being passed through the filter, pull out the current message
      rx_status = HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &can_rx_header, current_can_data);
 80010ca:	4b1c      	ldr	r3, [pc, #112]	; (800113c <readCANTask+0x94>)
 80010cc:	4a1c      	ldr	r2, [pc, #112]	; (8001140 <readCANTask+0x98>)
 80010ce:	2100      	movs	r1, #0
 80010d0:	4819      	ldr	r0, [pc, #100]	; (8001138 <readCANTask+0x90>)
 80010d2:	f000 ff31 	bl	8001f38 <HAL_CAN_GetRxMessage>
 80010d6:	4603      	mov	r3, r0
 80010d8:	461a      	mov	r2, r3
 80010da:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <readCANTask+0x9c>)
 80010dc:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_TogglePin(KERNEL_LED_GPIO_Port, KERNEL_LED_Pin);
 80010de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e2:	4819      	ldr	r0, [pc, #100]	; (8001148 <readCANTask+0xa0>)
 80010e4:	f001 fdfa 	bl	8002cdc <HAL_GPIO_TogglePin>

      // package into CAN_msg_t
      current_can_message.header = can_rx_header;
 80010e8:	4a18      	ldr	r2, [pc, #96]	; (800114c <readCANTask+0xa4>)
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <readCANTask+0x98>)
 80010ec:	4614      	mov	r4, r2
 80010ee:	461d      	mov	r5, r3
 80010f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}


      for (uint8_t i=0; i<8; i++) {
 80010fc:	2300      	movs	r3, #0
 80010fe:	73fb      	strb	r3, [r7, #15]
 8001100:	e00a      	b.n	8001118 <readCANTask+0x70>
        current_can_message.data[i] = current_can_data[i];
 8001102:	7bfa      	ldrb	r2, [r7, #15]
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	490d      	ldr	r1, [pc, #52]	; (800113c <readCANTask+0x94>)
 8001108:	5c89      	ldrb	r1, [r1, r2]
 800110a:	4a10      	ldr	r2, [pc, #64]	; (800114c <readCANTask+0xa4>)
 800110c:	4413      	add	r3, r2
 800110e:	460a      	mov	r2, r1
 8001110:	771a      	strb	r2, [r3, #28]
      for (uint8_t i=0; i<8; i++) {
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	3301      	adds	r3, #1
 8001116:	73fb      	strb	r3, [r7, #15]
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	2b07      	cmp	r3, #7
 800111c:	d9f1      	bls.n	8001102 <readCANTask+0x5a>
      }

      // priority=0, timeout=0
      osMessageQueuePut(canMessageQueueHandle, &current_can_message, 0U, 0U);
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <readCANTask+0xa8>)
 8001120:	6818      	ldr	r0, [r3, #0]
 8001122:	2300      	movs	r3, #0
 8001124:	2200      	movs	r2, #0
 8001126:	4909      	ldr	r1, [pc, #36]	; (800114c <readCANTask+0xa4>)
 8001128:	f004 fc48 	bl	80059bc <osMessageQueuePut>
    }

    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800112c:	2102      	movs	r1, #2
 800112e:	4802      	ldr	r0, [pc, #8]	; (8001138 <readCANTask+0x90>)
 8001130:	f001 f83a 	bl	80021a8 <HAL_CAN_ActivateNotification>
    osThreadFlagsWait(CAN_READY, osFlagsWaitAll, osWaitForever);
 8001134:	e7bc      	b.n	80010b0 <readCANTask+0x8>
 8001136:	bf00      	nop
 8001138:	20000090 	.word	0x20000090
 800113c:	200001e0 	.word	0x200001e0
 8001140:	200001c0 	.word	0x200001c0
 8001144:	200000d0 	.word	0x200000d0
 8001148:	40011000 	.word	0x40011000
 800114c:	200000d4 	.word	0x200000d4
 8001150:	200000c8 	.word	0x200000c8

08001154 <transmitMessageTask>:

  }
}

__NO_RETURN void transmitMessageTask(void *argument) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b08c      	sub	sp, #48	; 0x30
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  static CAN_msg_t can_message;
  osStatus_t queue_status;

  while (1) {
    // retrieve CAN message from queue
    queue_status = osMessageQueueGet(canMessageQueueHandle, &can_message, NULL, osWaitForever);
 800115c:	4b3b      	ldr	r3, [pc, #236]	; (800124c <transmitMessageTask+0xf8>)
 800115e:	6818      	ldr	r0, [r3, #0]
 8001160:	f04f 33ff 	mov.w	r3, #4294967295
 8001164:	2200      	movs	r2, #0
 8001166:	493a      	ldr	r1, [pc, #232]	; (8001250 <transmitMessageTask+0xfc>)
 8001168:	f004 fc9c 	bl	8005aa4 <osMessageQueueGet>
 800116c:	62b8      	str	r0, [r7, #40]	; 0x28

    if (queue_status != osOK){
 800116e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <transmitMessageTask+0x24>
      osThreadYield();
 8001174:	f004 fa48 	bl	8005608 <osThreadYield>
    }

    uint8_t can_buffer[22] = {0};
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	f107 0310 	add.w	r3, r7, #16
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	821a      	strh	r2, [r3, #16]

    // TIMESTAMP: 8 ASCII characters
    for (uint8_t i=0; i<8; i++) {
 800118c:	2300      	movs	r3, #0
 800118e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001192:	e00b      	b.n	80011ac <transmitMessageTask+0x58>
      // send 'D' as placeholder
        can_buffer[i] = 'D';
 8001194:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001198:	3330      	adds	r3, #48	; 0x30
 800119a:	443b      	add	r3, r7
 800119c:	2244      	movs	r2, #68	; 0x44
 800119e:	f803 2c24 	strb.w	r2, [r3, #-36]
    for (uint8_t i=0; i<8; i++) {
 80011a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011a6:	3301      	adds	r3, #1
 80011a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80011ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011b0:	2b07      	cmp	r3, #7
 80011b2:	d9ef      	bls.n	8001194 <transmitMessageTask+0x40>
    }

    // CAN MESSAGE IDENTIFIER
    can_buffer[8] = '#';
 80011b4:	2323      	movs	r3, #35	; 0x23
 80011b6:	753b      	strb	r3, [r7, #20]

    // CAN ID: 4 ASCII characters
    uint8_t id_h = 0xFFUL & (can_message.header.StdId >> 8);
 80011b8:	4b25      	ldr	r3, [pc, #148]	; (8001250 <transmitMessageTask+0xfc>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t id_l = 0xFFUL & (can_message.header.StdId);
 80011c2:	4b23      	ldr	r3, [pc, #140]	; (8001250 <transmitMessageTask+0xfc>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    can_buffer[9] = id_h;
 80011ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011ce:	757b      	strb	r3, [r7, #21]
    can_buffer[10] = id_l;
 80011d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011d4:	75bb      	strb	r3, [r7, #22]


    // CAN DATA: 16 ASCII characters
    for (uint8_t i=0; i<8; i++) {
 80011d6:	2300      	movs	r3, #0
 80011d8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80011dc:	e010      	b.n	8001200 <transmitMessageTask+0xac>
      // can_stream[2+i] = 0xFFUL & (can_message.data[i]);
        can_buffer[i + 11]= can_message.data[i];
 80011de:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80011e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80011e6:	330b      	adds	r3, #11
 80011e8:	4919      	ldr	r1, [pc, #100]	; (8001250 <transmitMessageTask+0xfc>)
 80011ea:	440a      	add	r2, r1
 80011ec:	7f12      	ldrb	r2, [r2, #28]
 80011ee:	3330      	adds	r3, #48	; 0x30
 80011f0:	443b      	add	r3, r7
 80011f2:	f803 2c24 	strb.w	r2, [r3, #-36]
    for (uint8_t i=0; i<8; i++) {
 80011f6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80011fa:	3301      	adds	r3, #1
 80011fc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001200:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001204:	2b07      	cmp	r3, #7
 8001206:	d9ea      	bls.n	80011de <transmitMessageTask+0x8a>
    }

    // CAN DATA LENGTH: 1 ASCII character
    uint8_t length = "0123456789ABCDEF"[ can_message.header.DLC & 0xFUL];
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <transmitMessageTask+0xfc>)
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	f003 030f 	and.w	r3, r3, #15
 8001210:	4a10      	ldr	r2, [pc, #64]	; (8001254 <transmitMessageTask+0x100>)
 8001212:	5cd3      	ldrb	r3, [r2, r3]
 8001214:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    can_buffer[19] = length;
 8001218:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800121c:	77fb      	strb	r3, [r7, #31]

    // NEW LINE: 1 ASCII character
    can_buffer[20] = '\n';
 800121e:	230a      	movs	r3, #10
 8001220:	f887 3020 	strb.w	r3, [r7, #32]

    // CARRIAGE RETURN: 1 ASCII character
    can_buffer[21] = '\r';
 8001224:	230d      	movs	r3, #13
 8001226:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    HAL_UART_Transmit(&huart3, can_buffer, sizeof(can_buffer), 1000);
 800122a:	f107 010c 	add.w	r1, r7, #12
 800122e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001232:	2216      	movs	r2, #22
 8001234:	4808      	ldr	r0, [pc, #32]	; (8001258 <transmitMessageTask+0x104>)
 8001236:	f003 fc4c 	bl	8004ad2 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, can_buffer, sizeof(can_buffer), 1000);
 800123a:	f107 010c 	add.w	r1, r7, #12
 800123e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001242:	2216      	movs	r2, #22
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <transmitMessageTask+0x108>)
 8001246:	f003 fc44 	bl	8004ad2 <HAL_UART_Transmit>
  while (1) {
 800124a:	e787      	b.n	800115c <transmitMessageTask+0x8>
 800124c:	200000c8 	.word	0x200000c8
 8001250:	200000f8 	.word	0x200000f8
 8001254:	08008bac 	.word	0x08008bac
 8001258:	20000274 	.word	0x20000274
 800125c:	20000230 	.word	0x20000230

08001260 <StartReadIMU>:

  uart_tx_status = HAL_UART_Transmit(&huart3, &c_H, 1, 1000);
  uart_tx_status = HAL_UART_Transmit(&huart3, &c_L, 1, 1000);
}

__NO_RETURN void StartReadIMU(void *argument){
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  union FloatBytes gy_x, gy_y, gy_z, ax_x, ax_y, ax_z;
  /* Infinite loop */
  while(1)
  {
    gy_x.float_value = gyro(GYRO_X);
 8001268:	2000      	movs	r0, #0
 800126a:	f7ff fdd1 	bl	8000e10 <gyro>
 800126e:	4603      	mov	r3, r0
 8001270:	61fb      	str	r3, [r7, #28]
    gy_y.float_value = gyro(GYRO_Y);
 8001272:	2001      	movs	r0, #1
 8001274:	f7ff fdcc 	bl	8000e10 <gyro>
 8001278:	4603      	mov	r3, r0
 800127a:	61bb      	str	r3, [r7, #24]
    gy_z.float_value = gyro(GYRO_Z);
 800127c:	2002      	movs	r0, #2
 800127e:	f7ff fdc7 	bl	8000e10 <gyro>
 8001282:	4603      	mov	r3, r0
 8001284:	617b      	str	r3, [r7, #20]
    ax_x.float_value = accel(ACCEL_X);
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff fe2a 	bl	8000ee0 <accel>
 800128c:	4603      	mov	r3, r0
 800128e:	613b      	str	r3, [r7, #16]
    ax_y.float_value = accel(ACCEL_Y);
 8001290:	2001      	movs	r0, #1
 8001292:	f7ff fe25 	bl	8000ee0 <accel>
 8001296:	4603      	mov	r3, r0
 8001298:	60fb      	str	r3, [r7, #12]
    ax_z.float_value = accel(ACCEL_Z);
 800129a:	2002      	movs	r0, #2
 800129c:	f7ff fe20 	bl	8000ee0 <accel>
 80012a0:	4603      	mov	r3, r0
 80012a2:	60bb      	str	r3, [r7, #8]

    // IMU DATA
    addtoIMUQueue("G", "X", gy_x);
 80012a4:	69fa      	ldr	r2, [r7, #28]
 80012a6:	4910      	ldr	r1, [pc, #64]	; (80012e8 <StartReadIMU+0x88>)
 80012a8:	4810      	ldr	r0, [pc, #64]	; (80012ec <StartReadIMU+0x8c>)
 80012aa:	f000 f827 	bl	80012fc <addtoIMUQueue>
    addtoIMUQueue("G", "Y", gy_y);
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	490f      	ldr	r1, [pc, #60]	; (80012f0 <StartReadIMU+0x90>)
 80012b2:	480e      	ldr	r0, [pc, #56]	; (80012ec <StartReadIMU+0x8c>)
 80012b4:	f000 f822 	bl	80012fc <addtoIMUQueue>
    addtoIMUQueue("G", "Z", gy_z);
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	490e      	ldr	r1, [pc, #56]	; (80012f4 <StartReadIMU+0x94>)
 80012bc:	480b      	ldr	r0, [pc, #44]	; (80012ec <StartReadIMU+0x8c>)
 80012be:	f000 f81d 	bl	80012fc <addtoIMUQueue>
    addtoIMUQueue("A", "X", ax_x);
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4908      	ldr	r1, [pc, #32]	; (80012e8 <StartReadIMU+0x88>)
 80012c6:	480c      	ldr	r0, [pc, #48]	; (80012f8 <StartReadIMU+0x98>)
 80012c8:	f000 f818 	bl	80012fc <addtoIMUQueue>
    addtoIMUQueue("A", "Y", ax_y);
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	4908      	ldr	r1, [pc, #32]	; (80012f0 <StartReadIMU+0x90>)
 80012d0:	4809      	ldr	r0, [pc, #36]	; (80012f8 <StartReadIMU+0x98>)
 80012d2:	f000 f813 	bl	80012fc <addtoIMUQueue>
    addtoIMUQueue("A", "Z", ax_z);
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	4906      	ldr	r1, [pc, #24]	; (80012f4 <StartReadIMU+0x94>)
 80012da:	4807      	ldr	r0, [pc, #28]	; (80012f8 <StartReadIMU+0x98>)
 80012dc:	f000 f80e 	bl	80012fc <addtoIMUQueue>

    osDelay(100);
 80012e0:	2064      	movs	r0, #100	; 0x64
 80012e2:	f004 fab7 	bl	8005854 <osDelay>
    gy_x.float_value = gyro(GYRO_X);
 80012e6:	e7bf      	b.n	8001268 <StartReadIMU+0x8>
 80012e8:	08008bec 	.word	0x08008bec
 80012ec:	08008bf0 	.word	0x08008bf0
 80012f0:	08008bf4 	.word	0x08008bf4
 80012f4:	08008bf8 	.word	0x08008bf8
 80012f8:	08008bfc 	.word	0x08008bfc

080012fc <addtoIMUQueue>:
  // In case we accidentally exit from task loop
  osThreadTerminate(NULL);

}

void addtoIMUQueue(char* type, char* dimension, union FloatBytes data){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
    IMU_msg_t imu_message;

    imu_message.imu_type = type[0];
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	753b      	strb	r3, [r7, #20]
    imu_message.dimension = dimension[0];
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	757b      	strb	r3, [r7, #21]
    for (int i = 0; i < 4; i++) {
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	e00c      	b.n	8001334 <addtoIMUQueue+0x38>
        imu_message.data[i] = data.bytes[i];
 800131a:	1d3a      	adds	r2, r7, #4
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	4413      	add	r3, r2
 8001320:	7819      	ldrb	r1, [r3, #0]
 8001322:	f107 0216 	add.w	r2, r7, #22
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	4413      	add	r3, r2
 800132a:	460a      	mov	r2, r1
 800132c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3301      	adds	r3, #1
 8001332:	61fb      	str	r3, [r7, #28]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	2b03      	cmp	r3, #3
 8001338:	ddef      	ble.n	800131a <addtoIMUQueue+0x1e>
    }

    osMessageQueuePut(imuMessageQueueHandle, &imu_message, 0U, 0U);
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <addtoIMUQueue+0x58>)
 800133c:	6818      	ldr	r0, [r3, #0]
 800133e:	f107 0114 	add.w	r1, r7, #20
 8001342:	2300      	movs	r3, #0
 8001344:	2200      	movs	r2, #0
 8001346:	f004 fb39 	bl	80059bc <osMessageQueuePut>
}
 800134a:	bf00      	nop
 800134c:	3720      	adds	r7, #32
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200000cc 	.word	0x200000cc

08001358 <StartTransmitIMU>:

__NO_RETURN void StartTransmitIMU(void *argument){
 8001358:	b580      	push	{r7, lr}
 800135a:	b08c      	sub	sp, #48	; 0x30
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  IMU_msg_t imu_message;

  while(1)
  {
    // Check if there are messages in the queue
    if (osMessageQueueGetCount(imuMessageQueueHandle) == 0) {
 8001360:	4b32      	ldr	r3, [pc, #200]	; (800142c <StartTransmitIMU+0xd4>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f004 fc0f 	bl	8005b88 <osMessageQueueGetCount>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d101      	bne.n	8001374 <StartTransmitIMU+0x1c>
        osThreadYield();
 8001370:	f004 f94a 	bl	8005608 <osThreadYield>
    }

    imu_queue_status = osMessageQueueGet(imuMessageQueueHandle, &imu_message, NULL, osWaitForever);
 8001374:	4b2d      	ldr	r3, [pc, #180]	; (800142c <StartTransmitIMU+0xd4>)
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	f107 011c 	add.w	r1, r7, #28
 800137c:	f04f 33ff 	mov.w	r3, #4294967295
 8001380:	2200      	movs	r2, #0
 8001382:	f004 fb8f 	bl	8005aa4 <osMessageQueueGet>
 8001386:	6278      	str	r0, [r7, #36]	; 0x24

    if (imu_queue_status != osOK){
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <StartTransmitIMU+0x3a>
      osThreadYield();
 800138e:	f004 f93b 	bl	8005608 <osThreadYield>
    }
    uint8_t imu_buffer[17] = {0};
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	731a      	strb	r2, [r3, #12]

    // TIMESTAMP
    for (uint8_t i=0; i<8; i++) {
 80013a4:	2300      	movs	r3, #0
 80013a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80013aa:	e00b      	b.n	80013c4 <StartTransmitIMU+0x6c>
      // send 'D' as placeholder
        imu_buffer[i] = 'D';
 80013ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013b0:	3330      	adds	r3, #48	; 0x30
 80013b2:	443b      	add	r3, r7
 80013b4:	2244      	movs	r2, #68	; 0x44
 80013b6:	f803 2c28 	strb.w	r2, [r3, #-40]
    for (uint8_t i=0; i<8; i++) {
 80013ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013be:	3301      	adds	r3, #1
 80013c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80013c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013c8:	2b07      	cmp	r3, #7
 80013ca:	d9ef      	bls.n	80013ac <StartTransmitIMU+0x54>
    }

    // IMU ID
    imu_buffer[8] = '@';
 80013cc:	2340      	movs	r3, #64	; 0x40
 80013ce:	743b      	strb	r3, [r7, #16]

    // IMU Data from queue
    imu_buffer[9] = imu_message.imu_type;
 80013d0:	7f3b      	ldrb	r3, [r7, #28]
 80013d2:	747b      	strb	r3, [r7, #17]
    imu_buffer[10] = imu_message.dimension;
 80013d4:	7f7b      	ldrb	r3, [r7, #29]
 80013d6:	74bb      	strb	r3, [r7, #18]
    for (int i = 0; i < 4; i++) {
 80013d8:	2300      	movs	r3, #0
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
 80013dc:	e00d      	b.n	80013fa <StartTransmitIMU+0xa2>
        imu_buffer[i + 11] = imu_message.data[i];
 80013de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e0:	330b      	adds	r3, #11
 80013e2:	f107 011e 	add.w	r1, r7, #30
 80013e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013e8:	440a      	add	r2, r1
 80013ea:	7812      	ldrb	r2, [r2, #0]
 80013ec:	3330      	adds	r3, #48	; 0x30
 80013ee:	443b      	add	r3, r7
 80013f0:	f803 2c28 	strb.w	r2, [r3, #-40]
    for (int i = 0; i < 4; i++) {
 80013f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f6:	3301      	adds	r3, #1
 80013f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80013fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fc:	2b03      	cmp	r3, #3
 80013fe:	ddee      	ble.n	80013de <StartTransmitIMU+0x86>
    }

    // NEW LINE
    imu_buffer[15] = '\n';
 8001400:	230a      	movs	r3, #10
 8001402:	75fb      	strb	r3, [r7, #23]

    // CARRIAGE RETURN
    imu_buffer[16] = '\r';
 8001404:	230d      	movs	r3, #13
 8001406:	763b      	strb	r3, [r7, #24]

    HAL_UART_Transmit(&huart3, imu_buffer, sizeof(imu_buffer), 1000);
 8001408:	f107 0108 	add.w	r1, r7, #8
 800140c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001410:	2211      	movs	r2, #17
 8001412:	4807      	ldr	r0, [pc, #28]	; (8001430 <StartTransmitIMU+0xd8>)
 8001414:	f003 fb5d 	bl	8004ad2 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, imu_buffer, sizeof(imu_buffer), 1000);
 8001418:	f107 0108 	add.w	r1, r7, #8
 800141c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001420:	2211      	movs	r2, #17
 8001422:	4804      	ldr	r0, [pc, #16]	; (8001434 <StartTransmitIMU+0xdc>)
 8001424:	f003 fb55 	bl	8004ad2 <HAL_UART_Transmit>
  {
 8001428:	e79a      	b.n	8001360 <StartTransmitIMU+0x8>
 800142a:	bf00      	nop
 800142c:	200000cc 	.word	0x200000cc
 8001430:	20000274 	.word	0x20000274
 8001434:	20000230 	.word	0x20000230

08001438 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143e:	f107 0310 	add.w	r3, r7, #16
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800144c:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <MX_GPIO_Init+0xcc>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	4a2c      	ldr	r2, [pc, #176]	; (8001504 <MX_GPIO_Init+0xcc>)
 8001452:	f043 0310 	orr.w	r3, r3, #16
 8001456:	6193      	str	r3, [r2, #24]
 8001458:	4b2a      	ldr	r3, [pc, #168]	; (8001504 <MX_GPIO_Init+0xcc>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	f003 0310 	and.w	r3, r3, #16
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001464:	4b27      	ldr	r3, [pc, #156]	; (8001504 <MX_GPIO_Init+0xcc>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	4a26      	ldr	r2, [pc, #152]	; (8001504 <MX_GPIO_Init+0xcc>)
 800146a:	f043 0320 	orr.w	r3, r3, #32
 800146e:	6193      	str	r3, [r2, #24]
 8001470:	4b24      	ldr	r3, [pc, #144]	; (8001504 <MX_GPIO_Init+0xcc>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	f003 0320 	and.w	r3, r3, #32
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147c:	4b21      	ldr	r3, [pc, #132]	; (8001504 <MX_GPIO_Init+0xcc>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	4a20      	ldr	r2, [pc, #128]	; (8001504 <MX_GPIO_Init+0xcc>)
 8001482:	f043 0304 	orr.w	r3, r3, #4
 8001486:	6193      	str	r3, [r2, #24]
 8001488:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <MX_GPIO_Init+0xcc>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <MX_GPIO_Init+0xcc>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	4a1a      	ldr	r2, [pc, #104]	; (8001504 <MX_GPIO_Init+0xcc>)
 800149a:	f043 0308 	orr.w	r3, r3, #8
 800149e:	6193      	str	r3, [r2, #24]
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <MX_GPIO_Init+0xcc>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KERNEL_LED_GPIO_Port, KERNEL_LED_Pin, GPIO_PIN_RESET);
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014b2:	4815      	ldr	r0, [pc, #84]	; (8001508 <MX_GPIO_Init+0xd0>)
 80014b4:	f001 fbfa 	bl	8002cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2120      	movs	r1, #32
 80014bc:	4813      	ldr	r0, [pc, #76]	; (800150c <MX_GPIO_Init+0xd4>)
 80014be:	f001 fbf5 	bl	8002cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KERNEL_LED_Pin;
 80014c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2302      	movs	r3, #2
 80014d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KERNEL_LED_GPIO_Port, &GPIO_InitStruct);
 80014d4:	f107 0310 	add.w	r3, r7, #16
 80014d8:	4619      	mov	r1, r3
 80014da:	480b      	ldr	r0, [pc, #44]	; (8001508 <MX_GPIO_Init+0xd0>)
 80014dc:	f001 fa62 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014e0:	2320      	movs	r3, #32
 80014e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e4:	2301      	movs	r3, #1
 80014e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2302      	movs	r3, #2
 80014ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f0:	f107 0310 	add.w	r3, r7, #16
 80014f4:	4619      	mov	r1, r3
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <MX_GPIO_Init+0xd4>)
 80014f8:	f001 fa54 	bl	80029a4 <HAL_GPIO_Init>

}
 80014fc:	bf00      	nop
 80014fe:	3720      	adds	r7, #32
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40021000 	.word	0x40021000
 8001508:	40011000 	.word	0x40011000
 800150c:	40010800 	.word	0x40010800

08001510 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <MX_I2C1_Init+0x50>)
 8001516:	4a13      	ldr	r2, [pc, #76]	; (8001564 <MX_I2C1_Init+0x54>)
 8001518:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800151a:	4b11      	ldr	r3, [pc, #68]	; (8001560 <MX_I2C1_Init+0x50>)
 800151c:	4a12      	ldr	r2, [pc, #72]	; (8001568 <MX_I2C1_Init+0x58>)
 800151e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <MX_I2C1_Init+0x50>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <MX_I2C1_Init+0x50>)
 8001528:	2200      	movs	r2, #0
 800152a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <MX_I2C1_Init+0x50>)
 800152e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001532:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001534:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <MX_I2C1_Init+0x50>)
 8001536:	2200      	movs	r2, #0
 8001538:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <MX_I2C1_Init+0x50>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <MX_I2C1_Init+0x50>)
 8001542:	2200      	movs	r2, #0
 8001544:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <MX_I2C1_Init+0x50>)
 8001548:	2200      	movs	r2, #0
 800154a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800154c:	4804      	ldr	r0, [pc, #16]	; (8001560 <MX_I2C1_Init+0x50>)
 800154e:	f001 fbdf 	bl	8002d10 <HAL_I2C_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001558:	f000 f8ca 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	2000011c 	.word	0x2000011c
 8001564:	40005400 	.word	0x40005400
 8001568:	000186a0 	.word	0x000186a0

0800156c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0310 	add.w	r3, r7, #16
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a15      	ldr	r2, [pc, #84]	; (80015dc <HAL_I2C_MspInit+0x70>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d123      	bne.n	80015d4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <HAL_I2C_MspInit+0x74>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	4a13      	ldr	r2, [pc, #76]	; (80015e0 <HAL_I2C_MspInit+0x74>)
 8001592:	f043 0308 	orr.w	r3, r3, #8
 8001596:	6193      	str	r3, [r2, #24]
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <HAL_I2C_MspInit+0x74>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	f003 0308 	and.w	r3, r3, #8
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015a4:	23c0      	movs	r3, #192	; 0xc0
 80015a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a8:	2312      	movs	r3, #18
 80015aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ac:	2303      	movs	r3, #3
 80015ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	4619      	mov	r1, r3
 80015b6:	480b      	ldr	r0, [pc, #44]	; (80015e4 <HAL_I2C_MspInit+0x78>)
 80015b8:	f001 f9f4 	bl	80029a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <HAL_I2C_MspInit+0x74>)
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	4a07      	ldr	r2, [pc, #28]	; (80015e0 <HAL_I2C_MspInit+0x74>)
 80015c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015c6:	61d3      	str	r3, [r2, #28]
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <HAL_I2C_MspInit+0x74>)
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015d4:	bf00      	nop
 80015d6:	3720      	adds	r7, #32
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40005400 	.word	0x40005400
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40010c00 	.word	0x40010c00

080015e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ee:	f000 fa69 	bl	8001ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015f2:	f000 f825 	bl	8001640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015f6:	f7ff ff1f 	bl	8001438 <MX_GPIO_Init>
  MX_CAN_Init();
 80015fa:	f7ff fb4d 	bl	8000c98 <MX_CAN_Init>
  MX_USART3_UART_Init();
 80015fe:	f000 f979 	bl	80018f4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001602:	f7ff ff85 	bl	8001510 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001606:	f000 f94b 	bl	80018a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // <----- CAN set-up ------>
  CanFilterSetup();
 800160a:	f7ff faf5 	bl	8000bf8 <CanFilterSetup>
  can_start = HAL_CAN_Start(&hcan);
 800160e:	480a      	ldr	r0, [pc, #40]	; (8001638 <main+0x50>)
 8001610:	f000 fc4e 	bl	8001eb0 <HAL_CAN_Start>
 8001614:	4603      	mov	r3, r0
 8001616:	461a      	mov	r2, r3
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <main+0x54>)
 800161a:	701a      	strb	r2, [r3, #0]
  assert_param(can_start == HAL_OK);

  HAL_StatusTypeDef can_notification_status = HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800161c:	2102      	movs	r1, #2
 800161e:	4806      	ldr	r0, [pc, #24]	; (8001638 <main+0x50>)
 8001620:	f000 fdc2 	bl	80021a8 <HAL_CAN_ActivateNotification>
 8001624:	4603      	mov	r3, r0
 8001626:	71fb      	strb	r3, [r7, #7]
  assert_param(can_notification_status == HAL_OK);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001628:	f003 fede 	bl	80053e8 <osKernelInitialize>
  MX_FREERTOS_Init();
 800162c:	f7ff fce6 	bl	8000ffc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001630:	f003 ff0c 	bl	800544c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001634:	e7fe      	b.n	8001634 <main+0x4c>
 8001636:	bf00      	nop
 8001638:	20000090 	.word	0x20000090
 800163c:	200001dc 	.word	0x200001dc

08001640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b090      	sub	sp, #64	; 0x40
 8001644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001646:	f107 0318 	add.w	r3, r7, #24
 800164a:	2228      	movs	r2, #40	; 0x28
 800164c:	2100      	movs	r1, #0
 800164e:	4618      	mov	r0, r3
 8001650:	f007 f998 	bl	8008984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001662:	2301      	movs	r3, #1
 8001664:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001666:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800166a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800166c:	2300      	movs	r3, #0
 800166e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001670:	2301      	movs	r3, #1
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001674:	2302      	movs	r3, #2
 8001676:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001678:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800167c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800167e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001682:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001684:	f107 0318 	add.w	r3, r7, #24
 8001688:	4618      	mov	r0, r3
 800168a:	f002 fb41 	bl	8003d10 <HAL_RCC_OscConfig>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001694:	f000 f82c 	bl	80016f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001698:	230f      	movs	r3, #15
 800169a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800169c:	2302      	movs	r3, #2
 800169e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	2102      	movs	r1, #2
 80016b2:	4618      	mov	r0, r3
 80016b4:	f002 fdae 	bl	8004214 <HAL_RCC_ClockConfig>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80016be:	f000 f817 	bl	80016f0 <Error_Handler>
  }
}
 80016c2:	bf00      	nop
 80016c4:	3740      	adds	r7, #64	; 0x40
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a04      	ldr	r2, [pc, #16]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d101      	bne.n	80016e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016de:	f000 fa07 	bl	8001af0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40012c00 	.word	0x40012c00

080016f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f4:	b672      	cpsid	i
}
 80016f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <Error_Handler+0x8>
	...

080016fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001702:	4b18      	ldr	r3, [pc, #96]	; (8001764 <HAL_MspInit+0x68>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	4a17      	ldr	r2, [pc, #92]	; (8001764 <HAL_MspInit+0x68>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6193      	str	r3, [r2, #24]
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <HAL_MspInit+0x68>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_MspInit+0x68>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	4a11      	ldr	r2, [pc, #68]	; (8001764 <HAL_MspInit+0x68>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001724:	61d3      	str	r3, [r2, #28]
 8001726:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <HAL_MspInit+0x68>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	210f      	movs	r1, #15
 8001736:	f06f 0001 	mvn.w	r0, #1
 800173a:	f001 f858 	bl	80027ee <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <HAL_MspInit+0x6c>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	4a04      	ldr	r2, [pc, #16]	; (8001768 <HAL_MspInit+0x6c>)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40021000 	.word	0x40021000
 8001768:	40010000 	.word	0x40010000

0800176c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800177c:	2200      	movs	r2, #0
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	2019      	movs	r0, #25
 8001782:	f001 f834 	bl	80027ee <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001786:	2019      	movs	r0, #25
 8001788:	f001 f84d 	bl	8002826 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800178c:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <HAL_InitTick+0x9c>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4a1d      	ldr	r2, [pc, #116]	; (8001808 <HAL_InitTick+0x9c>)
 8001792:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001796:	6193      	str	r3, [r2, #24]
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <HAL_InitTick+0x9c>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017a4:	f107 0210 	add.w	r2, r7, #16
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	4611      	mov	r1, r2
 80017ae:	4618      	mov	r0, r3
 80017b0:	f002 feaa 	bl	8004508 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80017b4:	f002 fe94 	bl	80044e0 <HAL_RCC_GetPCLK2Freq>
 80017b8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017bc:	4a13      	ldr	r2, [pc, #76]	; (800180c <HAL_InitTick+0xa0>)
 80017be:	fba2 2303 	umull	r2, r3, r2, r3
 80017c2:	0c9b      	lsrs	r3, r3, #18
 80017c4:	3b01      	subs	r3, #1
 80017c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <HAL_InitTick+0xa4>)
 80017ca:	4a12      	ldr	r2, [pc, #72]	; (8001814 <HAL_InitTick+0xa8>)
 80017cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <HAL_InitTick+0xa4>)
 80017d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017d4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80017d6:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <HAL_InitTick+0xa4>)
 80017d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017da:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <HAL_InitTick+0xa4>)
 80017de:	2200      	movs	r2, #0
 80017e0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_InitTick+0xa4>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80017e8:	4809      	ldr	r0, [pc, #36]	; (8001810 <HAL_InitTick+0xa4>)
 80017ea:	f002 fedb 	bl	80045a4 <HAL_TIM_Base_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d104      	bne.n	80017fe <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80017f4:	4806      	ldr	r0, [pc, #24]	; (8001810 <HAL_InitTick+0xa4>)
 80017f6:	f002 ff2d 	bl	8004654 <HAL_TIM_Base_Start_IT>
 80017fa:	4603      	mov	r3, r0
 80017fc:	e000      	b.n	8001800 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
}
 8001800:	4618      	mov	r0, r3
 8001802:	3730      	adds	r7, #48	; 0x30
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40021000 	.word	0x40021000
 800180c:	431bde83 	.word	0x431bde83
 8001810:	200001e8 	.word	0x200001e8
 8001814:	40012c00 	.word	0x40012c00

08001818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800181c:	e7fe      	b.n	800181c <NMI_Handler+0x4>

0800181e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001822:	e7fe      	b.n	8001822 <HardFault_Handler+0x4>

08001824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001828:	e7fe      	b.n	8001828 <MemManage_Handler+0x4>

0800182a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800182e:	e7fe      	b.n	800182e <BusFault_Handler+0x4>

08001830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <UsageFault_Handler+0x4>

08001836 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr
	...

08001844 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800184a:	f000 fcf8 	bl	800223e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000090 	.word	0x20000090

08001858 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800185c:	4802      	ldr	r0, [pc, #8]	; (8001868 <TIM1_UP_IRQHandler+0x10>)
 800185e:	f002 ff4b 	bl	80046f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200001e8 	.word	0x200001e8

0800186c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <USART1_IRQHandler+0x10>)
 8001872:	f003 f9c1 	bl	8004bf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000230 	.word	0x20000230

08001880 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <USART3_IRQHandler+0x10>)
 8001886:	f003 f9b7 	bl	8004bf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000274 	.word	0x20000274

08001894 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018a6:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <MX_USART1_UART_Init+0x50>)
 80018a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018ac:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80018b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018c6:	220c      	movs	r2, #12
 80018c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018d8:	f003 f8ae 	bl	8004a38 <HAL_UART_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018e2:	f7ff ff05 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000230 	.word	0x20000230
 80018f0:	40013800 	.word	0x40013800

080018f4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018f8:	4b11      	ldr	r3, [pc, #68]	; (8001940 <MX_USART3_UART_Init+0x4c>)
 80018fa:	4a12      	ldr	r2, [pc, #72]	; (8001944 <MX_USART3_UART_Init+0x50>)
 80018fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <MX_USART3_UART_Init+0x4c>)
 8001900:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001904:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <MX_USART3_UART_Init+0x4c>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <MX_USART3_UART_Init+0x4c>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <MX_USART3_UART_Init+0x4c>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001918:	4b09      	ldr	r3, [pc, #36]	; (8001940 <MX_USART3_UART_Init+0x4c>)
 800191a:	220c      	movs	r2, #12
 800191c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <MX_USART3_UART_Init+0x4c>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <MX_USART3_UART_Init+0x4c>)
 8001926:	2200      	movs	r2, #0
 8001928:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800192a:	4805      	ldr	r0, [pc, #20]	; (8001940 <MX_USART3_UART_Init+0x4c>)
 800192c:	f003 f884 	bl	8004a38 <HAL_UART_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001936:	f7ff fedb 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000274 	.word	0x20000274
 8001944:	40004800 	.word	0x40004800

08001948 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	; 0x28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 0318 	add.w	r3, r7, #24
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a40      	ldr	r2, [pc, #256]	; (8001a64 <HAL_UART_MspInit+0x11c>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d13a      	bne.n	80019de <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001968:	4b3f      	ldr	r3, [pc, #252]	; (8001a68 <HAL_UART_MspInit+0x120>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	4a3e      	ldr	r2, [pc, #248]	; (8001a68 <HAL_UART_MspInit+0x120>)
 800196e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001972:	6193      	str	r3, [r2, #24]
 8001974:	4b3c      	ldr	r3, [pc, #240]	; (8001a68 <HAL_UART_MspInit+0x120>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001980:	4b39      	ldr	r3, [pc, #228]	; (8001a68 <HAL_UART_MspInit+0x120>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	4a38      	ldr	r2, [pc, #224]	; (8001a68 <HAL_UART_MspInit+0x120>)
 8001986:	f043 0304 	orr.w	r3, r3, #4
 800198a:	6193      	str	r3, [r2, #24]
 800198c:	4b36      	ldr	r3, [pc, #216]	; (8001a68 <HAL_UART_MspInit+0x120>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001998:	f44f 7300 	mov.w	r3, #512	; 0x200
 800199c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019a2:	2303      	movs	r3, #3
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a6:	f107 0318 	add.w	r3, r7, #24
 80019aa:	4619      	mov	r1, r3
 80019ac:	482f      	ldr	r0, [pc, #188]	; (8001a6c <HAL_UART_MspInit+0x124>)
 80019ae:	f000 fff9 	bl	80029a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c0:	f107 0318 	add.w	r3, r7, #24
 80019c4:	4619      	mov	r1, r3
 80019c6:	4829      	ldr	r0, [pc, #164]	; (8001a6c <HAL_UART_MspInit+0x124>)
 80019c8:	f000 ffec 	bl	80029a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2105      	movs	r1, #5
 80019d0:	2025      	movs	r0, #37	; 0x25
 80019d2:	f000 ff0c 	bl	80027ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019d6:	2025      	movs	r0, #37	; 0x25
 80019d8:	f000 ff25 	bl	8002826 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80019dc:	e03e      	b.n	8001a5c <HAL_UART_MspInit+0x114>
  else if(uartHandle->Instance==USART3)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a23      	ldr	r2, [pc, #140]	; (8001a70 <HAL_UART_MspInit+0x128>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d139      	bne.n	8001a5c <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019e8:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <HAL_UART_MspInit+0x120>)
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	4a1e      	ldr	r2, [pc, #120]	; (8001a68 <HAL_UART_MspInit+0x120>)
 80019ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f2:	61d3      	str	r3, [r2, #28]
 80019f4:	4b1c      	ldr	r3, [pc, #112]	; (8001a68 <HAL_UART_MspInit+0x120>)
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a00:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <HAL_UART_MspInit+0x120>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	4a18      	ldr	r2, [pc, #96]	; (8001a68 <HAL_UART_MspInit+0x120>)
 8001a06:	f043 0308 	orr.w	r3, r3, #8
 8001a0a:	6193      	str	r3, [r2, #24]
 8001a0c:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <HAL_UART_MspInit+0x120>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a22:	2303      	movs	r3, #3
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a26:	f107 0318 	add.w	r3, r7, #24
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4811      	ldr	r0, [pc, #68]	; (8001a74 <HAL_UART_MspInit+0x12c>)
 8001a2e:	f000 ffb9 	bl	80029a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a40:	f107 0318 	add.w	r3, r7, #24
 8001a44:	4619      	mov	r1, r3
 8001a46:	480b      	ldr	r0, [pc, #44]	; (8001a74 <HAL_UART_MspInit+0x12c>)
 8001a48:	f000 ffac 	bl	80029a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2105      	movs	r1, #5
 8001a50:	2027      	movs	r0, #39	; 0x27
 8001a52:	f000 fecc 	bl	80027ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a56:	2027      	movs	r0, #39	; 0x27
 8001a58:	f000 fee5 	bl	8002826 <HAL_NVIC_EnableIRQ>
}
 8001a5c:	bf00      	nop
 8001a5e:	3728      	adds	r7, #40	; 0x28
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40013800 	.word	0x40013800
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40010800 	.word	0x40010800
 8001a70:	40004800 	.word	0x40004800
 8001a74:	40010c00 	.word	0x40010c00

08001a78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a78:	480c      	ldr	r0, [pc, #48]	; (8001aac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a7a:	490d      	ldr	r1, [pc, #52]	; (8001ab0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	; (8001ab4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a80:	e002      	b.n	8001a88 <LoopCopyDataInit>

08001a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a86:	3304      	adds	r3, #4

08001a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a8c:	d3f9      	bcc.n	8001a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a90:	4c0a      	ldr	r4, [pc, #40]	; (8001abc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a94:	e001      	b.n	8001a9a <LoopFillZerobss>

08001a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a98:	3204      	adds	r2, #4

08001a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a9c:	d3fb      	bcc.n	8001a96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a9e:	f7ff fef9 	bl	8001894 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aa2:	f006 ff3b 	bl	800891c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aa6:	f7ff fd9f 	bl	80015e8 <main>
  bx lr
 8001aaa:	4770      	bx	lr
  ldr r0, =_sdata
 8001aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001ab4:	08008d68 	.word	0x08008d68
  ldr r2, =_sbss
 8001ab8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001abc:	200024ec 	.word	0x200024ec

08001ac0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ac0:	e7fe      	b.n	8001ac0 <ADC1_2_IRQHandler>
	...

08001ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <HAL_Init+0x28>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a07      	ldr	r2, [pc, #28]	; (8001aec <HAL_Init+0x28>)
 8001ace:	f043 0310 	orr.w	r3, r3, #16
 8001ad2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad4:	2003      	movs	r0, #3
 8001ad6:	f000 fe7f 	bl	80027d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ada:	200f      	movs	r0, #15
 8001adc:	f7ff fe46 	bl	800176c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae0:	f7ff fe0c 	bl	80016fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40022000 	.word	0x40022000

08001af0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_IncTick+0x1c>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	461a      	mov	r2, r3
 8001afa:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_IncTick+0x20>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4413      	add	r3, r2
 8001b00:	4a03      	ldr	r2, [pc, #12]	; (8001b10 <HAL_IncTick+0x20>)
 8001b02:	6013      	str	r3, [r2, #0]
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	20000008 	.word	0x20000008
 8001b10:	200002b8 	.word	0x200002b8

08001b14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return uwTick;
 8001b18:	4b02      	ldr	r3, [pc, #8]	; (8001b24 <HAL_GetTick+0x10>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr
 8001b24:	200002b8 	.word	0x200002b8

08001b28 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e0ed      	b.n	8001d16 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d102      	bne.n	8001b4c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff f8dc 	bl	8000d04 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0201 	orr.w	r2, r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b5c:	f7ff ffda 	bl	8001b14 <HAL_GetTick>
 8001b60:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b62:	e012      	b.n	8001b8a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b64:	f7ff ffd6 	bl	8001b14 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b0a      	cmp	r3, #10
 8001b70:	d90b      	bls.n	8001b8a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2205      	movs	r2, #5
 8001b82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e0c5      	b.n	8001d16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0e5      	beq.n	8001b64 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0202 	bic.w	r2, r2, #2
 8001ba6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ba8:	f7ff ffb4 	bl	8001b14 <HAL_GetTick>
 8001bac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bae:	e012      	b.n	8001bd6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bb0:	f7ff ffb0 	bl	8001b14 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b0a      	cmp	r3, #10
 8001bbc:	d90b      	bls.n	8001bd6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2205      	movs	r2, #5
 8001bce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e09f      	b.n	8001d16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1e5      	bne.n	8001bb0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	7e1b      	ldrb	r3, [r3, #24]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d108      	bne.n	8001bfe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	e007      	b.n	8001c0e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	7e5b      	ldrb	r3, [r3, #25]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d108      	bne.n	8001c28 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	e007      	b.n	8001c38 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c36:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	7e9b      	ldrb	r3, [r3, #26]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d108      	bne.n	8001c52 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0220 	orr.w	r2, r2, #32
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	e007      	b.n	8001c62 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0220 	bic.w	r2, r2, #32
 8001c60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	7edb      	ldrb	r3, [r3, #27]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d108      	bne.n	8001c7c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0210 	bic.w	r2, r2, #16
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	e007      	b.n	8001c8c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 0210 	orr.w	r2, r2, #16
 8001c8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	7f1b      	ldrb	r3, [r3, #28]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d108      	bne.n	8001ca6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 0208 	orr.w	r2, r2, #8
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	e007      	b.n	8001cb6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0208 	bic.w	r2, r2, #8
 8001cb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	7f5b      	ldrb	r3, [r3, #29]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d108      	bne.n	8001cd0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f042 0204 	orr.w	r2, r2, #4
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	e007      	b.n	8001ce0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0204 	bic.w	r2, r2, #4
 8001cde:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	ea42 0103 	orr.w	r1, r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	1e5a      	subs	r2, r3, #1
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b087      	sub	sp, #28
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d34:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001d36:	7cfb      	ldrb	r3, [r7, #19]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d003      	beq.n	8001d44 <HAL_CAN_ConfigFilter+0x26>
 8001d3c:	7cfb      	ldrb	r3, [r7, #19]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	f040 80aa 	bne.w	8001e98 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d4a:	f043 0201 	orr.w	r2, r3, #1
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	f003 031f 	and.w	r3, r3, #31
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	401a      	ands	r2, r3
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d123      	bne.n	8001dc6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	401a      	ands	r2, r3
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001da0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	3248      	adds	r2, #72	; 0x48
 8001da6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001dba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001dbc:	6979      	ldr	r1, [r7, #20]
 8001dbe:	3348      	adds	r3, #72	; 0x48
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	440b      	add	r3, r1
 8001dc4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d122      	bne.n	8001e14 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001dee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	3248      	adds	r2, #72	; 0x48
 8001df4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e08:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e0a:	6979      	ldr	r1, [r7, #20]
 8001e0c:	3348      	adds	r3, #72	; 0x48
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	440b      	add	r3, r1
 8001e12:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d109      	bne.n	8001e30 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	401a      	ands	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001e2e:	e007      	b.n	8001e40 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d109      	bne.n	8001e5c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	401a      	ands	r2, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001e5a:	e007      	b.n	8001e6c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	431a      	orrs	r2, r3
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d107      	bne.n	8001e84 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e8a:	f023 0201 	bic.w	r2, r3, #1
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001e94:	2300      	movs	r3, #0
 8001e96:	e006      	b.n	8001ea6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
  }
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	371c      	adds	r7, #28
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr

08001eb0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d12e      	bne.n	8001f22 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0201 	bic.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001edc:	f7ff fe1a 	bl	8001b14 <HAL_GetTick>
 8001ee0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ee2:	e012      	b.n	8001f0a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ee4:	f7ff fe16 	bl	8001b14 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b0a      	cmp	r3, #10
 8001ef0:	d90b      	bls.n	8001f0a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2205      	movs	r2, #5
 8001f02:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e012      	b.n	8001f30 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1e5      	bne.n	8001ee4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e006      	b.n	8001f30 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
  }
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b087      	sub	sp, #28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f4c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f4e:	7dfb      	ldrb	r3, [r7, #23]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d003      	beq.n	8001f5c <HAL_CAN_GetRxMessage+0x24>
 8001f54:	7dfb      	ldrb	r3, [r7, #23]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	f040 80f3 	bne.w	8002142 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10e      	bne.n	8001f80 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d116      	bne.n	8001f9e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0e7      	b.n	8002150 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d107      	bne.n	8001f9e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e0d8      	b.n	8002150 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	331b      	adds	r3, #27
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	4413      	add	r3, r2
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0204 	and.w	r2, r3, #4
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10c      	bne.n	8001fd6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	331b      	adds	r3, #27
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	4413      	add	r3, r2
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	0d5b      	lsrs	r3, r3, #21
 8001fcc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	e00b      	b.n	8001fee <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	331b      	adds	r3, #27
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	4413      	add	r3, r2
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	08db      	lsrs	r3, r3, #3
 8001fe6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	331b      	adds	r3, #27
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	4413      	add	r3, r2
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0202 	and.w	r2, r3, #2
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	331b      	adds	r3, #27
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	4413      	add	r3, r2
 8002010:	3304      	adds	r3, #4
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 020f 	and.w	r2, r3, #15
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	331b      	adds	r3, #27
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	4413      	add	r3, r2
 8002028:	3304      	adds	r3, #4
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	0a1b      	lsrs	r3, r3, #8
 800202e:	b2da      	uxtb	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	331b      	adds	r3, #27
 800203c:	011b      	lsls	r3, r3, #4
 800203e:	4413      	add	r3, r2
 8002040:	3304      	adds	r3, #4
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	0c1b      	lsrs	r3, r3, #16
 8002046:	b29a      	uxth	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	4413      	add	r3, r2
 8002056:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	b2da      	uxtb	r2, r3
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	4413      	add	r3, r2
 800206c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	0a1a      	lsrs	r2, r3, #8
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	3301      	adds	r3, #1
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	4413      	add	r3, r2
 8002086:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	0c1a      	lsrs	r2, r3, #16
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	3302      	adds	r3, #2
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	4413      	add	r3, r2
 80020a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	0e1a      	lsrs	r2, r3, #24
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	3303      	adds	r3, #3
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	3304      	adds	r3, #4
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	4413      	add	r3, r2
 80020d2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	0a1a      	lsrs	r2, r3, #8
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	3305      	adds	r3, #5
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	0c1a      	lsrs	r2, r3, #16
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	3306      	adds	r3, #6
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	4413      	add	r3, r2
 8002106:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	0e1a      	lsrs	r2, r3, #24
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	3307      	adds	r3, #7
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d108      	bne.n	800212e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0220 	orr.w	r2, r2, #32
 800212a:	60da      	str	r2, [r3, #12]
 800212c:	e007      	b.n	800213e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 0220 	orr.w	r2, r2, #32
 800213c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	e006      	b.n	8002150 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
  }
}
 8002150:	4618      	mov	r0, r3
 8002152:	371c      	adds	r7, #28
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr

0800215a <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800215a:	b480      	push	{r7}
 800215c:	b085      	sub	sp, #20
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002164:	2300      	movs	r3, #0
 8002166:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800216e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002170:	7afb      	ldrb	r3, [r7, #11]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d002      	beq.n	800217c <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002176:	7afb      	ldrb	r3, [r7, #11]
 8002178:	2b02      	cmp	r3, #2
 800217a:	d10f      	bne.n	800219c <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	e005      	b.n	800219c <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800219c:	68fb      	ldr	r3, [r7, #12]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr

080021a8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021b8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d002      	beq.n	80021c6 <HAL_CAN_ActivateNotification+0x1e>
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d109      	bne.n	80021da <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6959      	ldr	r1, [r3, #20]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	e006      	b.n	80021e8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
  }
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr

080021f2 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b085      	sub	sp, #20
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002202:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d002      	beq.n	8002210 <HAL_CAN_DeactivateNotification+0x1e>
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d10a      	bne.n	8002226 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6959      	ldr	r1, [r3, #20]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	43da      	mvns	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	400a      	ands	r2, r1
 8002220:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	e006      	b.n	8002234 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
  }
}
 8002234:	4618      	mov	r0, r3
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr

0800223e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b08a      	sub	sp, #40	; 0x28
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002246:	2300      	movs	r3, #0
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	d07c      	beq.n	800237e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d023      	beq.n	80022d6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2201      	movs	r2, #1
 8002294:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f983 	bl	80025ac <HAL_CAN_TxMailbox0CompleteCallback>
 80022a6:	e016      	b.n	80022d6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d004      	beq.n	80022bc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ba:	e00c      	b.n	80022d6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d004      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
 80022ce:	e002      	b.n	80022d6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f986 	bl	80025e2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d024      	beq.n	800232a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f962 	bl	80025be <HAL_CAN_TxMailbox1CompleteCallback>
 80022fa:	e016      	b.n	800232a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002302:	2b00      	cmp	r3, #0
 8002304:	d004      	beq.n	8002310 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
 800230e:	e00c      	b.n	800232a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002316:	2b00      	cmp	r3, #0
 8002318:	d004      	beq.n	8002324 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
 8002322:	e002      	b.n	800232a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 f965 	bl	80025f4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d024      	beq.n	800237e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800233c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 f941 	bl	80025d0 <HAL_CAN_TxMailbox2CompleteCallback>
 800234e:	e016      	b.n	800237e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d004      	beq.n	8002364 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
 8002362:	e00c      	b.n	800237e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d004      	beq.n	8002378 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
 8002376:	e002      	b.n	800237e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 f944 	bl	8002606 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00c      	beq.n	80023a2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f003 0310 	and.w	r3, r3, #16
 800238e:	2b00      	cmp	r3, #0
 8002390:	d007      	beq.n	80023a2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002398:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2210      	movs	r2, #16
 80023a0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00b      	beq.n	80023c4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f003 0308 	and.w	r3, r3, #8
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d006      	beq.n	80023c4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2208      	movs	r2, #8
 80023bc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f92a 	bl	8002618 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d009      	beq.n	80023e2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7fe fcf9 	bl	8000dd4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00c      	beq.n	8002406 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	f003 0310 	and.w	r3, r3, #16
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d007      	beq.n	8002406 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2210      	movs	r2, #16
 8002404:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	f003 0320 	and.w	r3, r3, #32
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00b      	beq.n	8002428 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d006      	beq.n	8002428 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2208      	movs	r2, #8
 8002420:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f90a 	bl	800263c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	f003 0310 	and.w	r3, r3, #16
 800242e:	2b00      	cmp	r3, #0
 8002430:	d009      	beq.n	8002446 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d002      	beq.n	8002446 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 f8f2 	bl	800262a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00b      	beq.n	8002468 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f003 0310 	and.w	r3, r3, #16
 8002456:	2b00      	cmp	r3, #0
 8002458:	d006      	beq.n	8002468 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2210      	movs	r2, #16
 8002460:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f8f3 	bl	800264e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00b      	beq.n	800248a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	2b00      	cmp	r3, #0
 800247a:	d006      	beq.n	800248a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2208      	movs	r2, #8
 8002482:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f8eb 	bl	8002660 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d07b      	beq.n	800258c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b00      	cmp	r3, #0
 800249c:	d072      	beq.n	8002584 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	f043 0302 	orr.w	r3, r3, #2
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	f043 0304 	orr.w	r3, r3, #4
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d043      	beq.n	8002584 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002502:	2b00      	cmp	r3, #0
 8002504:	d03e      	beq.n	8002584 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800250c:	2b60      	cmp	r3, #96	; 0x60
 800250e:	d02b      	beq.n	8002568 <HAL_CAN_IRQHandler+0x32a>
 8002510:	2b60      	cmp	r3, #96	; 0x60
 8002512:	d82e      	bhi.n	8002572 <HAL_CAN_IRQHandler+0x334>
 8002514:	2b50      	cmp	r3, #80	; 0x50
 8002516:	d022      	beq.n	800255e <HAL_CAN_IRQHandler+0x320>
 8002518:	2b50      	cmp	r3, #80	; 0x50
 800251a:	d82a      	bhi.n	8002572 <HAL_CAN_IRQHandler+0x334>
 800251c:	2b40      	cmp	r3, #64	; 0x40
 800251e:	d019      	beq.n	8002554 <HAL_CAN_IRQHandler+0x316>
 8002520:	2b40      	cmp	r3, #64	; 0x40
 8002522:	d826      	bhi.n	8002572 <HAL_CAN_IRQHandler+0x334>
 8002524:	2b30      	cmp	r3, #48	; 0x30
 8002526:	d010      	beq.n	800254a <HAL_CAN_IRQHandler+0x30c>
 8002528:	2b30      	cmp	r3, #48	; 0x30
 800252a:	d822      	bhi.n	8002572 <HAL_CAN_IRQHandler+0x334>
 800252c:	2b10      	cmp	r3, #16
 800252e:	d002      	beq.n	8002536 <HAL_CAN_IRQHandler+0x2f8>
 8002530:	2b20      	cmp	r3, #32
 8002532:	d005      	beq.n	8002540 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002534:	e01d      	b.n	8002572 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	f043 0308 	orr.w	r3, r3, #8
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800253e:	e019      	b.n	8002574 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	f043 0310 	orr.w	r3, r3, #16
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002548:	e014      	b.n	8002574 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	f043 0320 	orr.w	r3, r3, #32
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002552:	e00f      	b.n	8002574 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800255c:	e00a      	b.n	8002574 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002566:	e005      	b.n	8002574 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002570:	e000      	b.n	8002574 <HAL_CAN_IRQHandler+0x336>
            break;
 8002572:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	699a      	ldr	r2, [r3, #24]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002582:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2204      	movs	r2, #4
 800258a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	2b00      	cmp	r3, #0
 8002590:	d008      	beq.n	80025a4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	431a      	orrs	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f867 	bl	8002672 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80025a4:	bf00      	nop
 80025a6:	3728      	adds	r7, #40	; 0x28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr

080025be <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr

080025e2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr

08002606 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr

0800262a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr

0800263c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr

0800264e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr

08002672 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr

08002684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026a0:	4013      	ands	r3, r2
 80026a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026b6:	4a04      	ldr	r2, [pc, #16]	; (80026c8 <__NVIC_SetPriorityGrouping+0x44>)
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	60d3      	str	r3, [r2, #12]
}
 80026bc:	bf00      	nop
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026d0:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <__NVIC_GetPriorityGrouping+0x18>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	0a1b      	lsrs	r3, r3, #8
 80026d6:	f003 0307 	and.w	r3, r3, #7
}
 80026da:	4618      	mov	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	db0b      	blt.n	8002712 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	f003 021f 	and.w	r2, r3, #31
 8002700:	4906      	ldr	r1, [pc, #24]	; (800271c <__NVIC_EnableIRQ+0x34>)
 8002702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002706:	095b      	lsrs	r3, r3, #5
 8002708:	2001      	movs	r0, #1
 800270a:	fa00 f202 	lsl.w	r2, r0, r2
 800270e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr
 800271c:	e000e100 	.word	0xe000e100

08002720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	6039      	str	r1, [r7, #0]
 800272a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800272c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002730:	2b00      	cmp	r3, #0
 8002732:	db0a      	blt.n	800274a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	b2da      	uxtb	r2, r3
 8002738:	490c      	ldr	r1, [pc, #48]	; (800276c <__NVIC_SetPriority+0x4c>)
 800273a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273e:	0112      	lsls	r2, r2, #4
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	440b      	add	r3, r1
 8002744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002748:	e00a      	b.n	8002760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	b2da      	uxtb	r2, r3
 800274e:	4908      	ldr	r1, [pc, #32]	; (8002770 <__NVIC_SetPriority+0x50>)
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	3b04      	subs	r3, #4
 8002758:	0112      	lsls	r2, r2, #4
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	440b      	add	r3, r1
 800275e:	761a      	strb	r2, [r3, #24]
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	e000e100 	.word	0xe000e100
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002774:	b480      	push	{r7}
 8002776:	b089      	sub	sp, #36	; 0x24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f1c3 0307 	rsb	r3, r3, #7
 800278e:	2b04      	cmp	r3, #4
 8002790:	bf28      	it	cs
 8002792:	2304      	movcs	r3, #4
 8002794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3304      	adds	r3, #4
 800279a:	2b06      	cmp	r3, #6
 800279c:	d902      	bls.n	80027a4 <NVIC_EncodePriority+0x30>
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3b03      	subs	r3, #3
 80027a2:	e000      	b.n	80027a6 <NVIC_EncodePriority+0x32>
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43da      	mvns	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	401a      	ands	r2, r3
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027bc:	f04f 31ff 	mov.w	r1, #4294967295
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	fa01 f303 	lsl.w	r3, r1, r3
 80027c6:	43d9      	mvns	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	4313      	orrs	r3, r2
         );
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3724      	adds	r7, #36	; 0x24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr

080027d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7ff ff4f 	bl	8002684 <__NVIC_SetPriorityGrouping>
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b086      	sub	sp, #24
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	4603      	mov	r3, r0
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
 80027fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002800:	f7ff ff64 	bl	80026cc <__NVIC_GetPriorityGrouping>
 8002804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68b9      	ldr	r1, [r7, #8]
 800280a:	6978      	ldr	r0, [r7, #20]
 800280c:	f7ff ffb2 	bl	8002774 <NVIC_EncodePriority>
 8002810:	4602      	mov	r2, r0
 8002812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002816:	4611      	mov	r1, r2
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ff81 	bl	8002720 <__NVIC_SetPriority>
}
 800281e:	bf00      	nop
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	4603      	mov	r3, r0
 800282e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff57 	bl	80026e8 <__NVIC_EnableIRQ>
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002842:	b480      	push	{r7}
 8002844:	b085      	sub	sp, #20
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002854:	2b02      	cmp	r3, #2
 8002856:	d008      	beq.n	800286a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2204      	movs	r2, #4
 800285c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e020      	b.n	80028ac <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 020e 	bic.w	r2, r2, #14
 8002878:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0201 	bic.w	r2, r2, #1
 8002888:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002892:	2101      	movs	r1, #1
 8002894:	fa01 f202 	lsl.w	r2, r1, r2
 8002898:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr
	...

080028b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d005      	beq.n	80028da <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2204      	movs	r2, #4
 80028d2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	73fb      	strb	r3, [r7, #15]
 80028d8:	e051      	b.n	800297e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 020e 	bic.w	r2, r2, #14
 80028e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 0201 	bic.w	r2, r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a22      	ldr	r2, [pc, #136]	; (8002988 <HAL_DMA_Abort_IT+0xd0>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d029      	beq.n	8002958 <HAL_DMA_Abort_IT+0xa0>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a20      	ldr	r2, [pc, #128]	; (800298c <HAL_DMA_Abort_IT+0xd4>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d022      	beq.n	8002954 <HAL_DMA_Abort_IT+0x9c>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a1f      	ldr	r2, [pc, #124]	; (8002990 <HAL_DMA_Abort_IT+0xd8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d01a      	beq.n	800294e <HAL_DMA_Abort_IT+0x96>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a1d      	ldr	r2, [pc, #116]	; (8002994 <HAL_DMA_Abort_IT+0xdc>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d012      	beq.n	8002948 <HAL_DMA_Abort_IT+0x90>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a1c      	ldr	r2, [pc, #112]	; (8002998 <HAL_DMA_Abort_IT+0xe0>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d00a      	beq.n	8002942 <HAL_DMA_Abort_IT+0x8a>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a1a      	ldr	r2, [pc, #104]	; (800299c <HAL_DMA_Abort_IT+0xe4>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d102      	bne.n	800293c <HAL_DMA_Abort_IT+0x84>
 8002936:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800293a:	e00e      	b.n	800295a <HAL_DMA_Abort_IT+0xa2>
 800293c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002940:	e00b      	b.n	800295a <HAL_DMA_Abort_IT+0xa2>
 8002942:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002946:	e008      	b.n	800295a <HAL_DMA_Abort_IT+0xa2>
 8002948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800294c:	e005      	b.n	800295a <HAL_DMA_Abort_IT+0xa2>
 800294e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002952:	e002      	b.n	800295a <HAL_DMA_Abort_IT+0xa2>
 8002954:	2310      	movs	r3, #16
 8002956:	e000      	b.n	800295a <HAL_DMA_Abort_IT+0xa2>
 8002958:	2301      	movs	r3, #1
 800295a:	4a11      	ldr	r2, [pc, #68]	; (80029a0 <HAL_DMA_Abort_IT+0xe8>)
 800295c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	4798      	blx	r3
    } 
  }
  return status;
 800297e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40020008 	.word	0x40020008
 800298c:	4002001c 	.word	0x4002001c
 8002990:	40020030 	.word	0x40020030
 8002994:	40020044 	.word	0x40020044
 8002998:	40020058 	.word	0x40020058
 800299c:	4002006c 	.word	0x4002006c
 80029a0:	40020000 	.word	0x40020000

080029a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b08b      	sub	sp, #44	; 0x2c
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029ae:	2300      	movs	r3, #0
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029b2:	2300      	movs	r3, #0
 80029b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029b6:	e169      	b.n	8002c8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029b8:	2201      	movs	r2, #1
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	69fa      	ldr	r2, [r7, #28]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	f040 8158 	bne.w	8002c86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	4a9a      	ldr	r2, [pc, #616]	; (8002c44 <HAL_GPIO_Init+0x2a0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d05e      	beq.n	8002a9e <HAL_GPIO_Init+0xfa>
 80029e0:	4a98      	ldr	r2, [pc, #608]	; (8002c44 <HAL_GPIO_Init+0x2a0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d875      	bhi.n	8002ad2 <HAL_GPIO_Init+0x12e>
 80029e6:	4a98      	ldr	r2, [pc, #608]	; (8002c48 <HAL_GPIO_Init+0x2a4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d058      	beq.n	8002a9e <HAL_GPIO_Init+0xfa>
 80029ec:	4a96      	ldr	r2, [pc, #600]	; (8002c48 <HAL_GPIO_Init+0x2a4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d86f      	bhi.n	8002ad2 <HAL_GPIO_Init+0x12e>
 80029f2:	4a96      	ldr	r2, [pc, #600]	; (8002c4c <HAL_GPIO_Init+0x2a8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d052      	beq.n	8002a9e <HAL_GPIO_Init+0xfa>
 80029f8:	4a94      	ldr	r2, [pc, #592]	; (8002c4c <HAL_GPIO_Init+0x2a8>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d869      	bhi.n	8002ad2 <HAL_GPIO_Init+0x12e>
 80029fe:	4a94      	ldr	r2, [pc, #592]	; (8002c50 <HAL_GPIO_Init+0x2ac>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d04c      	beq.n	8002a9e <HAL_GPIO_Init+0xfa>
 8002a04:	4a92      	ldr	r2, [pc, #584]	; (8002c50 <HAL_GPIO_Init+0x2ac>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d863      	bhi.n	8002ad2 <HAL_GPIO_Init+0x12e>
 8002a0a:	4a92      	ldr	r2, [pc, #584]	; (8002c54 <HAL_GPIO_Init+0x2b0>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d046      	beq.n	8002a9e <HAL_GPIO_Init+0xfa>
 8002a10:	4a90      	ldr	r2, [pc, #576]	; (8002c54 <HAL_GPIO_Init+0x2b0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d85d      	bhi.n	8002ad2 <HAL_GPIO_Init+0x12e>
 8002a16:	2b12      	cmp	r3, #18
 8002a18:	d82a      	bhi.n	8002a70 <HAL_GPIO_Init+0xcc>
 8002a1a:	2b12      	cmp	r3, #18
 8002a1c:	d859      	bhi.n	8002ad2 <HAL_GPIO_Init+0x12e>
 8002a1e:	a201      	add	r2, pc, #4	; (adr r2, 8002a24 <HAL_GPIO_Init+0x80>)
 8002a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a24:	08002a9f 	.word	0x08002a9f
 8002a28:	08002a79 	.word	0x08002a79
 8002a2c:	08002a8b 	.word	0x08002a8b
 8002a30:	08002acd 	.word	0x08002acd
 8002a34:	08002ad3 	.word	0x08002ad3
 8002a38:	08002ad3 	.word	0x08002ad3
 8002a3c:	08002ad3 	.word	0x08002ad3
 8002a40:	08002ad3 	.word	0x08002ad3
 8002a44:	08002ad3 	.word	0x08002ad3
 8002a48:	08002ad3 	.word	0x08002ad3
 8002a4c:	08002ad3 	.word	0x08002ad3
 8002a50:	08002ad3 	.word	0x08002ad3
 8002a54:	08002ad3 	.word	0x08002ad3
 8002a58:	08002ad3 	.word	0x08002ad3
 8002a5c:	08002ad3 	.word	0x08002ad3
 8002a60:	08002ad3 	.word	0x08002ad3
 8002a64:	08002ad3 	.word	0x08002ad3
 8002a68:	08002a81 	.word	0x08002a81
 8002a6c:	08002a95 	.word	0x08002a95
 8002a70:	4a79      	ldr	r2, [pc, #484]	; (8002c58 <HAL_GPIO_Init+0x2b4>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d013      	beq.n	8002a9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a76:	e02c      	b.n	8002ad2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	623b      	str	r3, [r7, #32]
          break;
 8002a7e:	e029      	b.n	8002ad4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	3304      	adds	r3, #4
 8002a86:	623b      	str	r3, [r7, #32]
          break;
 8002a88:	e024      	b.n	8002ad4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	3308      	adds	r3, #8
 8002a90:	623b      	str	r3, [r7, #32]
          break;
 8002a92:	e01f      	b.n	8002ad4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	330c      	adds	r3, #12
 8002a9a:	623b      	str	r3, [r7, #32]
          break;
 8002a9c:	e01a      	b.n	8002ad4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d102      	bne.n	8002aac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002aa6:	2304      	movs	r3, #4
 8002aa8:	623b      	str	r3, [r7, #32]
          break;
 8002aaa:	e013      	b.n	8002ad4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d105      	bne.n	8002ac0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ab4:	2308      	movs	r3, #8
 8002ab6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69fa      	ldr	r2, [r7, #28]
 8002abc:	611a      	str	r2, [r3, #16]
          break;
 8002abe:	e009      	b.n	8002ad4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ac0:	2308      	movs	r3, #8
 8002ac2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	69fa      	ldr	r2, [r7, #28]
 8002ac8:	615a      	str	r2, [r3, #20]
          break;
 8002aca:	e003      	b.n	8002ad4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002acc:	2300      	movs	r3, #0
 8002ace:	623b      	str	r3, [r7, #32]
          break;
 8002ad0:	e000      	b.n	8002ad4 <HAL_GPIO_Init+0x130>
          break;
 8002ad2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	2bff      	cmp	r3, #255	; 0xff
 8002ad8:	d801      	bhi.n	8002ade <HAL_GPIO_Init+0x13a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	e001      	b.n	8002ae2 <HAL_GPIO_Init+0x13e>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	2bff      	cmp	r3, #255	; 0xff
 8002ae8:	d802      	bhi.n	8002af0 <HAL_GPIO_Init+0x14c>
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	e002      	b.n	8002af6 <HAL_GPIO_Init+0x152>
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	3b08      	subs	r3, #8
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	210f      	movs	r1, #15
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	fa01 f303 	lsl.w	r3, r1, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	401a      	ands	r2, r3
 8002b08:	6a39      	ldr	r1, [r7, #32]
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b10:	431a      	orrs	r2, r3
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 80b1 	beq.w	8002c86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b24:	4b4d      	ldr	r3, [pc, #308]	; (8002c5c <HAL_GPIO_Init+0x2b8>)
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	4a4c      	ldr	r2, [pc, #304]	; (8002c5c <HAL_GPIO_Init+0x2b8>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	6193      	str	r3, [r2, #24]
 8002b30:	4b4a      	ldr	r3, [pc, #296]	; (8002c5c <HAL_GPIO_Init+0x2b8>)
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b3c:	4a48      	ldr	r2, [pc, #288]	; (8002c60 <HAL_GPIO_Init+0x2bc>)
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	089b      	lsrs	r3, r3, #2
 8002b42:	3302      	adds	r3, #2
 8002b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	f003 0303 	and.w	r3, r3, #3
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	220f      	movs	r2, #15
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a40      	ldr	r2, [pc, #256]	; (8002c64 <HAL_GPIO_Init+0x2c0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d013      	beq.n	8002b90 <HAL_GPIO_Init+0x1ec>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a3f      	ldr	r2, [pc, #252]	; (8002c68 <HAL_GPIO_Init+0x2c4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d00d      	beq.n	8002b8c <HAL_GPIO_Init+0x1e8>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a3e      	ldr	r2, [pc, #248]	; (8002c6c <HAL_GPIO_Init+0x2c8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d007      	beq.n	8002b88 <HAL_GPIO_Init+0x1e4>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a3d      	ldr	r2, [pc, #244]	; (8002c70 <HAL_GPIO_Init+0x2cc>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d101      	bne.n	8002b84 <HAL_GPIO_Init+0x1e0>
 8002b80:	2303      	movs	r3, #3
 8002b82:	e006      	b.n	8002b92 <HAL_GPIO_Init+0x1ee>
 8002b84:	2304      	movs	r3, #4
 8002b86:	e004      	b.n	8002b92 <HAL_GPIO_Init+0x1ee>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	e002      	b.n	8002b92 <HAL_GPIO_Init+0x1ee>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e000      	b.n	8002b92 <HAL_GPIO_Init+0x1ee>
 8002b90:	2300      	movs	r3, #0
 8002b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b94:	f002 0203 	and.w	r2, r2, #3
 8002b98:	0092      	lsls	r2, r2, #2
 8002b9a:	4093      	lsls	r3, r2
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ba2:	492f      	ldr	r1, [pc, #188]	; (8002c60 <HAL_GPIO_Init+0x2bc>)
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	089b      	lsrs	r3, r3, #2
 8002ba8:	3302      	adds	r3, #2
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d006      	beq.n	8002bca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002bbc:	4b2d      	ldr	r3, [pc, #180]	; (8002c74 <HAL_GPIO_Init+0x2d0>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	492c      	ldr	r1, [pc, #176]	; (8002c74 <HAL_GPIO_Init+0x2d0>)
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	600b      	str	r3, [r1, #0]
 8002bc8:	e006      	b.n	8002bd8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002bca:	4b2a      	ldr	r3, [pc, #168]	; (8002c74 <HAL_GPIO_Init+0x2d0>)
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	4928      	ldr	r1, [pc, #160]	; (8002c74 <HAL_GPIO_Init+0x2d0>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d006      	beq.n	8002bf2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002be4:	4b23      	ldr	r3, [pc, #140]	; (8002c74 <HAL_GPIO_Init+0x2d0>)
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	4922      	ldr	r1, [pc, #136]	; (8002c74 <HAL_GPIO_Init+0x2d0>)
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	604b      	str	r3, [r1, #4]
 8002bf0:	e006      	b.n	8002c00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bf2:	4b20      	ldr	r3, [pc, #128]	; (8002c74 <HAL_GPIO_Init+0x2d0>)
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	491e      	ldr	r1, [pc, #120]	; (8002c74 <HAL_GPIO_Init+0x2d0>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d006      	beq.n	8002c1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c0c:	4b19      	ldr	r3, [pc, #100]	; (8002c74 <HAL_GPIO_Init+0x2d0>)
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	4918      	ldr	r1, [pc, #96]	; (8002c74 <HAL_GPIO_Init+0x2d0>)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	608b      	str	r3, [r1, #8]
 8002c18:	e006      	b.n	8002c28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c1a:	4b16      	ldr	r3, [pc, #88]	; (8002c74 <HAL_GPIO_Init+0x2d0>)
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	43db      	mvns	r3, r3
 8002c22:	4914      	ldr	r1, [pc, #80]	; (8002c74 <HAL_GPIO_Init+0x2d0>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d021      	beq.n	8002c78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c34:	4b0f      	ldr	r3, [pc, #60]	; (8002c74 <HAL_GPIO_Init+0x2d0>)
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	490e      	ldr	r1, [pc, #56]	; (8002c74 <HAL_GPIO_Init+0x2d0>)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	60cb      	str	r3, [r1, #12]
 8002c40:	e021      	b.n	8002c86 <HAL_GPIO_Init+0x2e2>
 8002c42:	bf00      	nop
 8002c44:	10320000 	.word	0x10320000
 8002c48:	10310000 	.word	0x10310000
 8002c4c:	10220000 	.word	0x10220000
 8002c50:	10210000 	.word	0x10210000
 8002c54:	10120000 	.word	0x10120000
 8002c58:	10110000 	.word	0x10110000
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	40010000 	.word	0x40010000
 8002c64:	40010800 	.word	0x40010800
 8002c68:	40010c00 	.word	0x40010c00
 8002c6c:	40011000 	.word	0x40011000
 8002c70:	40011400 	.word	0x40011400
 8002c74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c78:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_GPIO_Init+0x304>)
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	4909      	ldr	r1, [pc, #36]	; (8002ca8 <HAL_GPIO_Init+0x304>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	3301      	adds	r3, #1
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	fa22 f303 	lsr.w	r3, r2, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f47f ae8e 	bne.w	80029b8 <HAL_GPIO_Init+0x14>
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	bf00      	nop
 8002ca0:	372c      	adds	r7, #44	; 0x2c
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr
 8002ca8:	40010400 	.word	0x40010400

08002cac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	807b      	strh	r3, [r7, #2]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cbc:	787b      	ldrb	r3, [r7, #1]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cc2:	887a      	ldrh	r2, [r7, #2]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002cc8:	e003      	b.n	8002cd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cca:	887b      	ldrh	r3, [r7, #2]
 8002ccc:	041a      	lsls	r2, r3, #16
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	611a      	str	r2, [r3, #16]
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cee:	887a      	ldrh	r2, [r7, #2]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	041a      	lsls	r2, r3, #16
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	43d9      	mvns	r1, r3
 8002cfa:	887b      	ldrh	r3, [r7, #2]
 8002cfc:	400b      	ands	r3, r1
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	611a      	str	r2, [r3, #16]
}
 8002d04:	bf00      	nop
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr
	...

08002d10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e12b      	b.n	8002f7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fe fc18 	bl	800156c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2224      	movs	r2, #36	; 0x24
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0201 	bic.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d74:	f001 fba0 	bl	80044b8 <HAL_RCC_GetPCLK1Freq>
 8002d78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	4a81      	ldr	r2, [pc, #516]	; (8002f84 <HAL_I2C_Init+0x274>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d807      	bhi.n	8002d94 <HAL_I2C_Init+0x84>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4a80      	ldr	r2, [pc, #512]	; (8002f88 <HAL_I2C_Init+0x278>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	bf94      	ite	ls
 8002d8c:	2301      	movls	r3, #1
 8002d8e:	2300      	movhi	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	e006      	b.n	8002da2 <HAL_I2C_Init+0x92>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4a7d      	ldr	r2, [pc, #500]	; (8002f8c <HAL_I2C_Init+0x27c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	bf94      	ite	ls
 8002d9c:	2301      	movls	r3, #1
 8002d9e:	2300      	movhi	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e0e7      	b.n	8002f7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4a78      	ldr	r2, [pc, #480]	; (8002f90 <HAL_I2C_Init+0x280>)
 8002dae:	fba2 2303 	umull	r2, r3, r2, r3
 8002db2:	0c9b      	lsrs	r3, r3, #18
 8002db4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	4a6a      	ldr	r2, [pc, #424]	; (8002f84 <HAL_I2C_Init+0x274>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d802      	bhi.n	8002de4 <HAL_I2C_Init+0xd4>
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	3301      	adds	r3, #1
 8002de2:	e009      	b.n	8002df8 <HAL_I2C_Init+0xe8>
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dea:	fb02 f303 	mul.w	r3, r2, r3
 8002dee:	4a69      	ldr	r2, [pc, #420]	; (8002f94 <HAL_I2C_Init+0x284>)
 8002df0:	fba2 2303 	umull	r2, r3, r2, r3
 8002df4:	099b      	lsrs	r3, r3, #6
 8002df6:	3301      	adds	r3, #1
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	495c      	ldr	r1, [pc, #368]	; (8002f84 <HAL_I2C_Init+0x274>)
 8002e14:	428b      	cmp	r3, r1
 8002e16:	d819      	bhi.n	8002e4c <HAL_I2C_Init+0x13c>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	1e59      	subs	r1, r3, #1
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e26:	1c59      	adds	r1, r3, #1
 8002e28:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e2c:	400b      	ands	r3, r1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <HAL_I2C_Init+0x138>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1e59      	subs	r1, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e40:	3301      	adds	r3, #1
 8002e42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e46:	e051      	b.n	8002eec <HAL_I2C_Init+0x1dc>
 8002e48:	2304      	movs	r3, #4
 8002e4a:	e04f      	b.n	8002eec <HAL_I2C_Init+0x1dc>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d111      	bne.n	8002e78 <HAL_I2C_Init+0x168>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	1e58      	subs	r0, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6859      	ldr	r1, [r3, #4]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	440b      	add	r3, r1
 8002e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e66:	3301      	adds	r3, #1
 8002e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	bf0c      	ite	eq
 8002e70:	2301      	moveq	r3, #1
 8002e72:	2300      	movne	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	e012      	b.n	8002e9e <HAL_I2C_Init+0x18e>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	1e58      	subs	r0, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6859      	ldr	r1, [r3, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	0099      	lsls	r1, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e8e:	3301      	adds	r3, #1
 8002e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	bf0c      	ite	eq
 8002e98:	2301      	moveq	r3, #1
 8002e9a:	2300      	movne	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_I2C_Init+0x196>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e022      	b.n	8002eec <HAL_I2C_Init+0x1dc>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10e      	bne.n	8002ecc <HAL_I2C_Init+0x1bc>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1e58      	subs	r0, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6859      	ldr	r1, [r3, #4]
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	440b      	add	r3, r1
 8002ebc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eca:	e00f      	b.n	8002eec <HAL_I2C_Init+0x1dc>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	1e58      	subs	r0, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6859      	ldr	r1, [r3, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	0099      	lsls	r1, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	6809      	ldr	r1, [r1, #0]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69da      	ldr	r2, [r3, #28]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6911      	ldr	r1, [r2, #16]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	68d2      	ldr	r2, [r2, #12]
 8002f26:	4311      	orrs	r1, r2
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	000186a0 	.word	0x000186a0
 8002f88:	001e847f 	.word	0x001e847f
 8002f8c:	003d08ff 	.word	0x003d08ff
 8002f90:	431bde83 	.word	0x431bde83
 8002f94:	10624dd3 	.word	0x10624dd3

08002f98 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b088      	sub	sp, #32
 8002f9c:	af02      	add	r7, sp, #8
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	4608      	mov	r0, r1
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	817b      	strh	r3, [r7, #10]
 8002faa:	460b      	mov	r3, r1
 8002fac:	813b      	strh	r3, [r7, #8]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fb2:	f7fe fdaf 	bl	8001b14 <HAL_GetTick>
 8002fb6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b20      	cmp	r3, #32
 8002fc2:	f040 80d9 	bne.w	8003178 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	2319      	movs	r3, #25
 8002fcc:	2201      	movs	r2, #1
 8002fce:	496d      	ldr	r1, [pc, #436]	; (8003184 <HAL_I2C_Mem_Write+0x1ec>)
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 fcc1 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e0cc      	b.n	800317a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d101      	bne.n	8002fee <HAL_I2C_Mem_Write+0x56>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e0c5      	b.n	800317a <HAL_I2C_Mem_Write+0x1e2>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b01      	cmp	r3, #1
 8003002:	d007      	beq.n	8003014 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003022:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2221      	movs	r2, #33	; 0x21
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2240      	movs	r2, #64	; 0x40
 8003030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6a3a      	ldr	r2, [r7, #32]
 800303e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003044:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4a4d      	ldr	r2, [pc, #308]	; (8003188 <HAL_I2C_Mem_Write+0x1f0>)
 8003054:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003056:	88f8      	ldrh	r0, [r7, #6]
 8003058:	893a      	ldrh	r2, [r7, #8]
 800305a:	8979      	ldrh	r1, [r7, #10]
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	9301      	str	r3, [sp, #4]
 8003060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	4603      	mov	r3, r0
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 faf8 	bl	800365c <I2C_RequestMemoryWrite>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d052      	beq.n	8003118 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e081      	b.n	800317a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 fd42 	bl	8003b04 <I2C_WaitOnTXEFlagUntilTimeout>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00d      	beq.n	80030a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	2b04      	cmp	r3, #4
 800308c:	d107      	bne.n	800309e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800309c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e06b      	b.n	800317a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	781a      	ldrb	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030bc:	3b01      	subs	r3, #1
 80030be:	b29a      	uxth	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d11b      	bne.n	8003118 <HAL_I2C_Mem_Write+0x180>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d017      	beq.n	8003118 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	781a      	ldrb	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310e:	b29b      	uxth	r3, r3
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1aa      	bne.n	8003076 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 fd2e 	bl	8003b86 <I2C_WaitOnBTFFlagUntilTimeout>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00d      	beq.n	800314c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	2b04      	cmp	r3, #4
 8003136:	d107      	bne.n	8003148 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003146:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e016      	b.n	800317a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	e000      	b.n	800317a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003178:	2302      	movs	r3, #2
  }
}
 800317a:	4618      	mov	r0, r3
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	00100002 	.word	0x00100002
 8003188:	ffff0000 	.word	0xffff0000

0800318c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08c      	sub	sp, #48	; 0x30
 8003190:	af02      	add	r7, sp, #8
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	4608      	mov	r0, r1
 8003196:	4611      	mov	r1, r2
 8003198:	461a      	mov	r2, r3
 800319a:	4603      	mov	r3, r0
 800319c:	817b      	strh	r3, [r7, #10]
 800319e:	460b      	mov	r3, r1
 80031a0:	813b      	strh	r3, [r7, #8]
 80031a2:	4613      	mov	r3, r2
 80031a4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031aa:	f7fe fcb3 	bl	8001b14 <HAL_GetTick>
 80031ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	f040 8244 	bne.w	8003646 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	2319      	movs	r3, #25
 80031c4:	2201      	movs	r2, #1
 80031c6:	4982      	ldr	r1, [pc, #520]	; (80033d0 <HAL_I2C_Mem_Read+0x244>)
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 fbc5 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80031d4:	2302      	movs	r3, #2
 80031d6:	e237      	b.n	8003648 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_I2C_Mem_Read+0x5a>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e230      	b.n	8003648 <HAL_I2C_Mem_Read+0x4bc>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d007      	beq.n	800320c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0201 	orr.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800321a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2222      	movs	r2, #34	; 0x22
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2240      	movs	r2, #64	; 0x40
 8003228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003236:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800323c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4a62      	ldr	r2, [pc, #392]	; (80033d4 <HAL_I2C_Mem_Read+0x248>)
 800324c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800324e:	88f8      	ldrh	r0, [r7, #6]
 8003250:	893a      	ldrh	r2, [r7, #8]
 8003252:	8979      	ldrh	r1, [r7, #10]
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	4603      	mov	r3, r0
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 fa92 	bl	8003788 <I2C_RequestMemoryRead>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e1ec      	b.n	8003648 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003272:	2b00      	cmp	r3, #0
 8003274:	d113      	bne.n	800329e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	61fb      	str	r3, [r7, #28]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	61fb      	str	r3, [r7, #28]
 800328a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	e1c0      	b.n	8003620 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d11e      	bne.n	80032e4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80032b6:	b672      	cpsid	i
}
 80032b8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ba:	2300      	movs	r3, #0
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	61bb      	str	r3, [r7, #24]
 80032ce:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80032e0:	b662      	cpsie	i
}
 80032e2:	e035      	b.n	8003350 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d11e      	bne.n	800332a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80032fc:	b672      	cpsid	i
}
 80032fe:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003324:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003326:	b662      	cpsie	i
}
 8003328:	e012      	b.n	8003350 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003338:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800333a:	2300      	movs	r3, #0
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003350:	e166      	b.n	8003620 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003356:	2b03      	cmp	r3, #3
 8003358:	f200 811f 	bhi.w	800359a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003360:	2b01      	cmp	r3, #1
 8003362:	d123      	bne.n	80033ac <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003366:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 fc4d 	bl	8003c08 <I2C_WaitOnRXNEFlagUntilTimeout>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e167      	b.n	8003648 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691a      	ldr	r2, [r3, #16]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033aa:	e139      	b.n	8003620 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d152      	bne.n	800345a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ba:	2200      	movs	r2, #0
 80033bc:	4906      	ldr	r1, [pc, #24]	; (80033d8 <HAL_I2C_Mem_Read+0x24c>)
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 faca 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d008      	beq.n	80033dc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e13c      	b.n	8003648 <HAL_I2C_Mem_Read+0x4bc>
 80033ce:	bf00      	nop
 80033d0:	00100002 	.word	0x00100002
 80033d4:	ffff0000 	.word	0xffff0000
 80033d8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80033dc:	b672      	cpsid	i
}
 80033de:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	691a      	ldr	r2, [r3, #16]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340c:	3b01      	subs	r3, #1
 800340e:	b29a      	uxth	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003418:	b29b      	uxth	r3, r3
 800341a:	3b01      	subs	r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003422:	b662      	cpsie	i
}
 8003424:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344e:	b29b      	uxth	r3, r3
 8003450:	3b01      	subs	r3, #1
 8003452:	b29a      	uxth	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003458:	e0e2      	b.n	8003620 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003460:	2200      	movs	r2, #0
 8003462:	497b      	ldr	r1, [pc, #492]	; (8003650 <HAL_I2C_Mem_Read+0x4c4>)
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 fa77 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e0e9      	b.n	8003648 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003482:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003484:	b672      	cpsid	i
}
 8003486:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691a      	ldr	r2, [r3, #16]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80034ba:	4b66      	ldr	r3, [pc, #408]	; (8003654 <HAL_I2C_Mem_Read+0x4c8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	08db      	lsrs	r3, r3, #3
 80034c0:	4a65      	ldr	r2, [pc, #404]	; (8003658 <HAL_I2C_Mem_Read+0x4cc>)
 80034c2:	fba2 2303 	umull	r2, r3, r2, r3
 80034c6:	0a1a      	lsrs	r2, r3, #8
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	00da      	lsls	r2, r3, #3
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d118      	bne.n	8003512 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2220      	movs	r2, #32
 80034ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f043 0220 	orr.w	r2, r3, #32
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003502:	b662      	cpsie	i
}
 8003504:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e09a      	b.n	8003648 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b04      	cmp	r3, #4
 800351e:	d1d9      	bne.n	80034d4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800352e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691a      	ldr	r2, [r3, #16]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354c:	3b01      	subs	r3, #1
 800354e:	b29a      	uxth	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003558:	b29b      	uxth	r3, r3
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003562:	b662      	cpsie	i
}
 8003564:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003582:	3b01      	subs	r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358e:	b29b      	uxth	r3, r3
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003598:	e042      	b.n	8003620 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800359a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 fb32 	bl	8003c08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e04c      	b.n	8003648 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	691a      	ldr	r2, [r3, #16]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	d118      	bne.n	8003620 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360a:	3b01      	subs	r3, #1
 800360c:	b29a      	uxth	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003616:	b29b      	uxth	r3, r3
 8003618:	3b01      	subs	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003624:	2b00      	cmp	r3, #0
 8003626:	f47f ae94 	bne.w	8003352 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2220      	movs	r2, #32
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	e000      	b.n	8003648 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003646:	2302      	movs	r3, #2
  }
}
 8003648:	4618      	mov	r0, r3
 800364a:	3728      	adds	r7, #40	; 0x28
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	00010004 	.word	0x00010004
 8003654:	20000000 	.word	0x20000000
 8003658:	14f8b589 	.word	0x14f8b589

0800365c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af02      	add	r7, sp, #8
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	4608      	mov	r0, r1
 8003666:	4611      	mov	r1, r2
 8003668:	461a      	mov	r2, r3
 800366a:	4603      	mov	r3, r0
 800366c:	817b      	strh	r3, [r7, #10]
 800366e:	460b      	mov	r3, r1
 8003670:	813b      	strh	r3, [r7, #8]
 8003672:	4613      	mov	r3, r2
 8003674:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003684:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	2200      	movs	r2, #0
 800368e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 f960 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00d      	beq.n	80036ba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ac:	d103      	bne.n	80036b6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e05f      	b.n	800377a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036ba:	897b      	ldrh	r3, [r7, #10]
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	461a      	mov	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	6a3a      	ldr	r2, [r7, #32]
 80036ce:	492d      	ldr	r1, [pc, #180]	; (8003784 <I2C_RequestMemoryWrite+0x128>)
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 f998 	bl	8003a06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e04c      	b.n	800377a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036e0:	2300      	movs	r3, #0
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f8:	6a39      	ldr	r1, [r7, #32]
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 fa02 	bl	8003b04 <I2C_WaitOnTXEFlagUntilTimeout>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00d      	beq.n	8003722 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	2b04      	cmp	r3, #4
 800370c:	d107      	bne.n	800371e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800371c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e02b      	b.n	800377a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003722:	88fb      	ldrh	r3, [r7, #6]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d105      	bne.n	8003734 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003728:	893b      	ldrh	r3, [r7, #8]
 800372a:	b2da      	uxtb	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	611a      	str	r2, [r3, #16]
 8003732:	e021      	b.n	8003778 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003734:	893b      	ldrh	r3, [r7, #8]
 8003736:	0a1b      	lsrs	r3, r3, #8
 8003738:	b29b      	uxth	r3, r3
 800373a:	b2da      	uxtb	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003744:	6a39      	ldr	r1, [r7, #32]
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 f9dc 	bl	8003b04 <I2C_WaitOnTXEFlagUntilTimeout>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00d      	beq.n	800376e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	2b04      	cmp	r3, #4
 8003758:	d107      	bne.n	800376a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003768:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e005      	b.n	800377a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800376e:	893b      	ldrh	r3, [r7, #8]
 8003770:	b2da      	uxtb	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	00010002 	.word	0x00010002

08003788 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b088      	sub	sp, #32
 800378c:	af02      	add	r7, sp, #8
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	4608      	mov	r0, r1
 8003792:	4611      	mov	r1, r2
 8003794:	461a      	mov	r2, r3
 8003796:	4603      	mov	r3, r0
 8003798:	817b      	strh	r3, [r7, #10]
 800379a:	460b      	mov	r3, r1
 800379c:	813b      	strh	r3, [r7, #8]
 800379e:	4613      	mov	r3, r2
 80037a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 f8c2 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00d      	beq.n	80037f6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037e8:	d103      	bne.n	80037f2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e0aa      	b.n	800394c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037f6:	897b      	ldrh	r3, [r7, #10]
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	461a      	mov	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003804:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	6a3a      	ldr	r2, [r7, #32]
 800380a:	4952      	ldr	r1, [pc, #328]	; (8003954 <I2C_RequestMemoryRead+0x1cc>)
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f8fa 	bl	8003a06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e097      	b.n	800394c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003834:	6a39      	ldr	r1, [r7, #32]
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 f964 	bl	8003b04 <I2C_WaitOnTXEFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00d      	beq.n	800385e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	2b04      	cmp	r3, #4
 8003848:	d107      	bne.n	800385a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003858:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e076      	b.n	800394c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800385e:	88fb      	ldrh	r3, [r7, #6]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d105      	bne.n	8003870 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003864:	893b      	ldrh	r3, [r7, #8]
 8003866:	b2da      	uxtb	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	611a      	str	r2, [r3, #16]
 800386e:	e021      	b.n	80038b4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003870:	893b      	ldrh	r3, [r7, #8]
 8003872:	0a1b      	lsrs	r3, r3, #8
 8003874:	b29b      	uxth	r3, r3
 8003876:	b2da      	uxtb	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800387e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003880:	6a39      	ldr	r1, [r7, #32]
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f93e 	bl	8003b04 <I2C_WaitOnTXEFlagUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00d      	beq.n	80038aa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	2b04      	cmp	r3, #4
 8003894:	d107      	bne.n	80038a6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e050      	b.n	800394c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038aa:	893b      	ldrh	r3, [r7, #8]
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b6:	6a39      	ldr	r1, [r7, #32]
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 f923 	bl	8003b04 <I2C_WaitOnTXEFlagUntilTimeout>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00d      	beq.n	80038e0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d107      	bne.n	80038dc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038da:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e035      	b.n	800394c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f82b 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00d      	beq.n	8003924 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003916:	d103      	bne.n	8003920 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800391e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e013      	b.n	800394c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003924:	897b      	ldrh	r3, [r7, #10]
 8003926:	b2db      	uxtb	r3, r3
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	b2da      	uxtb	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	6a3a      	ldr	r2, [r7, #32]
 8003938:	4906      	ldr	r1, [pc, #24]	; (8003954 <I2C_RequestMemoryRead+0x1cc>)
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 f863 	bl	8003a06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	00010002 	.word	0x00010002

08003958 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	4613      	mov	r3, r2
 8003966:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003968:	e025      	b.n	80039b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003970:	d021      	beq.n	80039b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003972:	f7fe f8cf 	bl	8001b14 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d302      	bcc.n	8003988 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d116      	bne.n	80039b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f043 0220 	orr.w	r2, r3, #32
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e023      	b.n	80039fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	0c1b      	lsrs	r3, r3, #16
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d10d      	bne.n	80039dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	43da      	mvns	r2, r3
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	4013      	ands	r3, r2
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	bf0c      	ite	eq
 80039d2:	2301      	moveq	r3, #1
 80039d4:	2300      	movne	r3, #0
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	461a      	mov	r2, r3
 80039da:	e00c      	b.n	80039f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	43da      	mvns	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	4013      	ands	r3, r2
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	bf0c      	ite	eq
 80039ee:	2301      	moveq	r3, #1
 80039f0:	2300      	movne	r3, #0
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	461a      	mov	r2, r3
 80039f6:	79fb      	ldrb	r3, [r7, #7]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d0b6      	beq.n	800396a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
 8003a12:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a14:	e051      	b.n	8003aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a24:	d123      	bne.n	8003a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a34:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a3e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f043 0204 	orr.w	r2, r3, #4
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e046      	b.n	8003afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a74:	d021      	beq.n	8003aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a76:	f7fe f84d 	bl	8001b14 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d302      	bcc.n	8003a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d116      	bne.n	8003aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	f043 0220 	orr.w	r2, r3, #32
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e020      	b.n	8003afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	0c1b      	lsrs	r3, r3, #16
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d10c      	bne.n	8003ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	43da      	mvns	r2, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	bf14      	ite	ne
 8003ad6:	2301      	movne	r3, #1
 8003ad8:	2300      	moveq	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	e00b      	b.n	8003af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	43da      	mvns	r2, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	bf14      	ite	ne
 8003af0:	2301      	movne	r3, #1
 8003af2:	2300      	moveq	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d18d      	bne.n	8003a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b10:	e02d      	b.n	8003b6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 f8ce 	bl	8003cb4 <I2C_IsAcknowledgeFailed>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e02d      	b.n	8003b7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b28:	d021      	beq.n	8003b6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b2a:	f7fd fff3 	bl	8001b14 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d302      	bcc.n	8003b40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d116      	bne.n	8003b6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	f043 0220 	orr.w	r2, r3, #32
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e007      	b.n	8003b7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b78:	2b80      	cmp	r3, #128	; 0x80
 8003b7a:	d1ca      	bne.n	8003b12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b92:	e02d      	b.n	8003bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 f88d 	bl	8003cb4 <I2C_IsAcknowledgeFailed>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e02d      	b.n	8003c00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003baa:	d021      	beq.n	8003bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bac:	f7fd ffb2 	bl	8001b14 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d302      	bcc.n	8003bc2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d116      	bne.n	8003bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	f043 0220 	orr.w	r2, r3, #32
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e007      	b.n	8003c00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d1ca      	bne.n	8003b94 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c14:	e042      	b.n	8003c9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	f003 0310 	and.w	r3, r3, #16
 8003c20:	2b10      	cmp	r3, #16
 8003c22:	d119      	bne.n	8003c58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0210 	mvn.w	r2, #16
 8003c2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e029      	b.n	8003cac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c58:	f7fd ff5c 	bl	8001b14 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d302      	bcc.n	8003c6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d116      	bne.n	8003c9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c88:	f043 0220 	orr.w	r2, r3, #32
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e007      	b.n	8003cac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca6:	2b40      	cmp	r3, #64	; 0x40
 8003ca8:	d1b5      	bne.n	8003c16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cca:	d11b      	bne.n	8003d04 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cd4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	f043 0204 	orr.w	r2, r3, #4
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr

08003d10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e272      	b.n	8004208 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 8087 	beq.w	8003e3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d30:	4b92      	ldr	r3, [pc, #584]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f003 030c 	and.w	r3, r3, #12
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d00c      	beq.n	8003d56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d3c:	4b8f      	ldr	r3, [pc, #572]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f003 030c 	and.w	r3, r3, #12
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d112      	bne.n	8003d6e <HAL_RCC_OscConfig+0x5e>
 8003d48:	4b8c      	ldr	r3, [pc, #560]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d54:	d10b      	bne.n	8003d6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d56:	4b89      	ldr	r3, [pc, #548]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d06c      	beq.n	8003e3c <HAL_RCC_OscConfig+0x12c>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d168      	bne.n	8003e3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e24c      	b.n	8004208 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d76:	d106      	bne.n	8003d86 <HAL_RCC_OscConfig+0x76>
 8003d78:	4b80      	ldr	r3, [pc, #512]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a7f      	ldr	r2, [pc, #508]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d82:	6013      	str	r3, [r2, #0]
 8003d84:	e02e      	b.n	8003de4 <HAL_RCC_OscConfig+0xd4>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10c      	bne.n	8003da8 <HAL_RCC_OscConfig+0x98>
 8003d8e:	4b7b      	ldr	r3, [pc, #492]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a7a      	ldr	r2, [pc, #488]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	4b78      	ldr	r3, [pc, #480]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a77      	ldr	r2, [pc, #476]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003da0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003da4:	6013      	str	r3, [r2, #0]
 8003da6:	e01d      	b.n	8003de4 <HAL_RCC_OscConfig+0xd4>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003db0:	d10c      	bne.n	8003dcc <HAL_RCC_OscConfig+0xbc>
 8003db2:	4b72      	ldr	r3, [pc, #456]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a71      	ldr	r2, [pc, #452]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	4b6f      	ldr	r3, [pc, #444]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a6e      	ldr	r2, [pc, #440]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc8:	6013      	str	r3, [r2, #0]
 8003dca:	e00b      	b.n	8003de4 <HAL_RCC_OscConfig+0xd4>
 8003dcc:	4b6b      	ldr	r3, [pc, #428]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a6a      	ldr	r2, [pc, #424]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd6:	6013      	str	r3, [r2, #0]
 8003dd8:	4b68      	ldr	r3, [pc, #416]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a67      	ldr	r2, [pc, #412]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003de2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d013      	beq.n	8003e14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dec:	f7fd fe92 	bl	8001b14 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003df4:	f7fd fe8e 	bl	8001b14 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b64      	cmp	r3, #100	; 0x64
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e200      	b.n	8004208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e06:	4b5d      	ldr	r3, [pc, #372]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0f0      	beq.n	8003df4 <HAL_RCC_OscConfig+0xe4>
 8003e12:	e014      	b.n	8003e3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e14:	f7fd fe7e 	bl	8001b14 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e1c:	f7fd fe7a 	bl	8001b14 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b64      	cmp	r3, #100	; 0x64
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e1ec      	b.n	8004208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e2e:	4b53      	ldr	r3, [pc, #332]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1f0      	bne.n	8003e1c <HAL_RCC_OscConfig+0x10c>
 8003e3a:	e000      	b.n	8003e3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d063      	beq.n	8003f12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e4a:	4b4c      	ldr	r3, [pc, #304]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f003 030c 	and.w	r3, r3, #12
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00b      	beq.n	8003e6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e56:	4b49      	ldr	r3, [pc, #292]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f003 030c 	and.w	r3, r3, #12
 8003e5e:	2b08      	cmp	r3, #8
 8003e60:	d11c      	bne.n	8003e9c <HAL_RCC_OscConfig+0x18c>
 8003e62:	4b46      	ldr	r3, [pc, #280]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d116      	bne.n	8003e9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e6e:	4b43      	ldr	r3, [pc, #268]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d005      	beq.n	8003e86 <HAL_RCC_OscConfig+0x176>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d001      	beq.n	8003e86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e1c0      	b.n	8004208 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e86:	4b3d      	ldr	r3, [pc, #244]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	4939      	ldr	r1, [pc, #228]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e9a:	e03a      	b.n	8003f12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d020      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ea4:	4b36      	ldr	r3, [pc, #216]	; (8003f80 <HAL_RCC_OscConfig+0x270>)
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eaa:	f7fd fe33 	bl	8001b14 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb2:	f7fd fe2f 	bl	8001b14 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e1a1      	b.n	8004208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec4:	4b2d      	ldr	r3, [pc, #180]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0f0      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed0:	4b2a      	ldr	r3, [pc, #168]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	4927      	ldr	r1, [pc, #156]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	600b      	str	r3, [r1, #0]
 8003ee4:	e015      	b.n	8003f12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ee6:	4b26      	ldr	r3, [pc, #152]	; (8003f80 <HAL_RCC_OscConfig+0x270>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eec:	f7fd fe12 	bl	8001b14 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ef4:	f7fd fe0e 	bl	8001b14 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e180      	b.n	8004208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f06:	4b1d      	ldr	r3, [pc, #116]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1f0      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d03a      	beq.n	8003f94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d019      	beq.n	8003f5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f26:	4b17      	ldr	r3, [pc, #92]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003f28:	2201      	movs	r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f2c:	f7fd fdf2 	bl	8001b14 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f34:	f7fd fdee 	bl	8001b14 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e160      	b.n	8004208 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f46:	4b0d      	ldr	r3, [pc, #52]	; (8003f7c <HAL_RCC_OscConfig+0x26c>)
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0f0      	beq.n	8003f34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f52:	2001      	movs	r0, #1
 8003f54:	f000 fb08 	bl	8004568 <RCC_Delay>
 8003f58:	e01c      	b.n	8003f94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f5a:	4b0a      	ldr	r3, [pc, #40]	; (8003f84 <HAL_RCC_OscConfig+0x274>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f60:	f7fd fdd8 	bl	8001b14 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f66:	e00f      	b.n	8003f88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f68:	f7fd fdd4 	bl	8001b14 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d908      	bls.n	8003f88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e146      	b.n	8004208 <HAL_RCC_OscConfig+0x4f8>
 8003f7a:	bf00      	nop
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	42420000 	.word	0x42420000
 8003f84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f88:	4b92      	ldr	r3, [pc, #584]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1e9      	bne.n	8003f68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 80a6 	beq.w	80040ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fa6:	4b8b      	ldr	r3, [pc, #556]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10d      	bne.n	8003fce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fb2:	4b88      	ldr	r3, [pc, #544]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	4a87      	ldr	r2, [pc, #540]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 8003fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fbc:	61d3      	str	r3, [r2, #28]
 8003fbe:	4b85      	ldr	r3, [pc, #532]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc6:	60bb      	str	r3, [r7, #8]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fce:	4b82      	ldr	r3, [pc, #520]	; (80041d8 <HAL_RCC_OscConfig+0x4c8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d118      	bne.n	800400c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fda:	4b7f      	ldr	r3, [pc, #508]	; (80041d8 <HAL_RCC_OscConfig+0x4c8>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a7e      	ldr	r2, [pc, #504]	; (80041d8 <HAL_RCC_OscConfig+0x4c8>)
 8003fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fe6:	f7fd fd95 	bl	8001b14 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fee:	f7fd fd91 	bl	8001b14 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b64      	cmp	r3, #100	; 0x64
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e103      	b.n	8004208 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004000:	4b75      	ldr	r3, [pc, #468]	; (80041d8 <HAL_RCC_OscConfig+0x4c8>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0f0      	beq.n	8003fee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d106      	bne.n	8004022 <HAL_RCC_OscConfig+0x312>
 8004014:	4b6f      	ldr	r3, [pc, #444]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	4a6e      	ldr	r2, [pc, #440]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	6213      	str	r3, [r2, #32]
 8004020:	e02d      	b.n	800407e <HAL_RCC_OscConfig+0x36e>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10c      	bne.n	8004044 <HAL_RCC_OscConfig+0x334>
 800402a:	4b6a      	ldr	r3, [pc, #424]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	4a69      	ldr	r2, [pc, #420]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 8004030:	f023 0301 	bic.w	r3, r3, #1
 8004034:	6213      	str	r3, [r2, #32]
 8004036:	4b67      	ldr	r3, [pc, #412]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	4a66      	ldr	r2, [pc, #408]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 800403c:	f023 0304 	bic.w	r3, r3, #4
 8004040:	6213      	str	r3, [r2, #32]
 8004042:	e01c      	b.n	800407e <HAL_RCC_OscConfig+0x36e>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	2b05      	cmp	r3, #5
 800404a:	d10c      	bne.n	8004066 <HAL_RCC_OscConfig+0x356>
 800404c:	4b61      	ldr	r3, [pc, #388]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	4a60      	ldr	r2, [pc, #384]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 8004052:	f043 0304 	orr.w	r3, r3, #4
 8004056:	6213      	str	r3, [r2, #32]
 8004058:	4b5e      	ldr	r3, [pc, #376]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	4a5d      	ldr	r2, [pc, #372]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	6213      	str	r3, [r2, #32]
 8004064:	e00b      	b.n	800407e <HAL_RCC_OscConfig+0x36e>
 8004066:	4b5b      	ldr	r3, [pc, #364]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	4a5a      	ldr	r2, [pc, #360]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 800406c:	f023 0301 	bic.w	r3, r3, #1
 8004070:	6213      	str	r3, [r2, #32]
 8004072:	4b58      	ldr	r3, [pc, #352]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	4a57      	ldr	r2, [pc, #348]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 8004078:	f023 0304 	bic.w	r3, r3, #4
 800407c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d015      	beq.n	80040b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004086:	f7fd fd45 	bl	8001b14 <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800408c:	e00a      	b.n	80040a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800408e:	f7fd fd41 	bl	8001b14 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	f241 3288 	movw	r2, #5000	; 0x1388
 800409c:	4293      	cmp	r3, r2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e0b1      	b.n	8004208 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a4:	4b4b      	ldr	r3, [pc, #300]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0ee      	beq.n	800408e <HAL_RCC_OscConfig+0x37e>
 80040b0:	e014      	b.n	80040dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040b2:	f7fd fd2f 	bl	8001b14 <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b8:	e00a      	b.n	80040d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ba:	f7fd fd2b 	bl	8001b14 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e09b      	b.n	8004208 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d0:	4b40      	ldr	r3, [pc, #256]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1ee      	bne.n	80040ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040dc:	7dfb      	ldrb	r3, [r7, #23]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d105      	bne.n	80040ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040e2:	4b3c      	ldr	r3, [pc, #240]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	4a3b      	ldr	r2, [pc, #236]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 80040e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 8087 	beq.w	8004206 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040f8:	4b36      	ldr	r3, [pc, #216]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f003 030c 	and.w	r3, r3, #12
 8004100:	2b08      	cmp	r3, #8
 8004102:	d061      	beq.n	80041c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	2b02      	cmp	r3, #2
 800410a:	d146      	bne.n	800419a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800410c:	4b33      	ldr	r3, [pc, #204]	; (80041dc <HAL_RCC_OscConfig+0x4cc>)
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004112:	f7fd fcff 	bl	8001b14 <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004118:	e008      	b.n	800412c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800411a:	f7fd fcfb 	bl	8001b14 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e06d      	b.n	8004208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800412c:	4b29      	ldr	r3, [pc, #164]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1f0      	bne.n	800411a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004140:	d108      	bne.n	8004154 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004142:	4b24      	ldr	r3, [pc, #144]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	4921      	ldr	r1, [pc, #132]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 8004150:	4313      	orrs	r3, r2
 8004152:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004154:	4b1f      	ldr	r3, [pc, #124]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a19      	ldr	r1, [r3, #32]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	430b      	orrs	r3, r1
 8004166:	491b      	ldr	r1, [pc, #108]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 8004168:	4313      	orrs	r3, r2
 800416a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800416c:	4b1b      	ldr	r3, [pc, #108]	; (80041dc <HAL_RCC_OscConfig+0x4cc>)
 800416e:	2201      	movs	r2, #1
 8004170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004172:	f7fd fccf 	bl	8001b14 <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800417a:	f7fd fccb 	bl	8001b14 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e03d      	b.n	8004208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800418c:	4b11      	ldr	r3, [pc, #68]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0f0      	beq.n	800417a <HAL_RCC_OscConfig+0x46a>
 8004198:	e035      	b.n	8004206 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800419a:	4b10      	ldr	r3, [pc, #64]	; (80041dc <HAL_RCC_OscConfig+0x4cc>)
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a0:	f7fd fcb8 	bl	8001b14 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a8:	f7fd fcb4 	bl	8001b14 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e026      	b.n	8004208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041ba:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <HAL_RCC_OscConfig+0x4c4>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1f0      	bne.n	80041a8 <HAL_RCC_OscConfig+0x498>
 80041c6:	e01e      	b.n	8004206 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d107      	bne.n	80041e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e019      	b.n	8004208 <HAL_RCC_OscConfig+0x4f8>
 80041d4:	40021000 	.word	0x40021000
 80041d8:	40007000 	.word	0x40007000
 80041dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041e0:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <HAL_RCC_OscConfig+0x500>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d106      	bne.n	8004202 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041fe:	429a      	cmp	r2, r3
 8004200:	d001      	beq.n	8004206 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e000      	b.n	8004208 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40021000 	.word	0x40021000

08004214 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e0d0      	b.n	80043ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004228:	4b6a      	ldr	r3, [pc, #424]	; (80043d4 <HAL_RCC_ClockConfig+0x1c0>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d910      	bls.n	8004258 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004236:	4b67      	ldr	r3, [pc, #412]	; (80043d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f023 0207 	bic.w	r2, r3, #7
 800423e:	4965      	ldr	r1, [pc, #404]	; (80043d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	4313      	orrs	r3, r2
 8004244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004246:	4b63      	ldr	r3, [pc, #396]	; (80043d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	429a      	cmp	r2, r3
 8004252:	d001      	beq.n	8004258 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e0b8      	b.n	80043ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d020      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b00      	cmp	r3, #0
 800426e:	d005      	beq.n	800427c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004270:	4b59      	ldr	r3, [pc, #356]	; (80043d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	4a58      	ldr	r2, [pc, #352]	; (80043d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004276:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800427a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0308 	and.w	r3, r3, #8
 8004284:	2b00      	cmp	r3, #0
 8004286:	d005      	beq.n	8004294 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004288:	4b53      	ldr	r3, [pc, #332]	; (80043d8 <HAL_RCC_ClockConfig+0x1c4>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	4a52      	ldr	r2, [pc, #328]	; (80043d8 <HAL_RCC_ClockConfig+0x1c4>)
 800428e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004292:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004294:	4b50      	ldr	r3, [pc, #320]	; (80043d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	494d      	ldr	r1, [pc, #308]	; (80043d8 <HAL_RCC_ClockConfig+0x1c4>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d040      	beq.n	8004334 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d107      	bne.n	80042ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ba:	4b47      	ldr	r3, [pc, #284]	; (80043d8 <HAL_RCC_ClockConfig+0x1c4>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d115      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e07f      	b.n	80043ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d107      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d2:	4b41      	ldr	r3, [pc, #260]	; (80043d8 <HAL_RCC_ClockConfig+0x1c4>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e073      	b.n	80043ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e2:	4b3d      	ldr	r3, [pc, #244]	; (80043d8 <HAL_RCC_ClockConfig+0x1c4>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e06b      	b.n	80043ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042f2:	4b39      	ldr	r3, [pc, #228]	; (80043d8 <HAL_RCC_ClockConfig+0x1c4>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f023 0203 	bic.w	r2, r3, #3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	4936      	ldr	r1, [pc, #216]	; (80043d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004300:	4313      	orrs	r3, r2
 8004302:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004304:	f7fd fc06 	bl	8001b14 <HAL_GetTick>
 8004308:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430a:	e00a      	b.n	8004322 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800430c:	f7fd fc02 	bl	8001b14 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	f241 3288 	movw	r2, #5000	; 0x1388
 800431a:	4293      	cmp	r3, r2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e053      	b.n	80043ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004322:	4b2d      	ldr	r3, [pc, #180]	; (80043d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f003 020c 	and.w	r2, r3, #12
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	429a      	cmp	r2, r3
 8004332:	d1eb      	bne.n	800430c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004334:	4b27      	ldr	r3, [pc, #156]	; (80043d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d210      	bcs.n	8004364 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004342:	4b24      	ldr	r3, [pc, #144]	; (80043d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f023 0207 	bic.w	r2, r3, #7
 800434a:	4922      	ldr	r1, [pc, #136]	; (80043d4 <HAL_RCC_ClockConfig+0x1c0>)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	4313      	orrs	r3, r2
 8004350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004352:	4b20      	ldr	r3, [pc, #128]	; (80043d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	429a      	cmp	r2, r3
 800435e:	d001      	beq.n	8004364 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e032      	b.n	80043ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	d008      	beq.n	8004382 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004370:	4b19      	ldr	r3, [pc, #100]	; (80043d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	4916      	ldr	r1, [pc, #88]	; (80043d8 <HAL_RCC_ClockConfig+0x1c4>)
 800437e:	4313      	orrs	r3, r2
 8004380:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0308 	and.w	r3, r3, #8
 800438a:	2b00      	cmp	r3, #0
 800438c:	d009      	beq.n	80043a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800438e:	4b12      	ldr	r3, [pc, #72]	; (80043d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	490e      	ldr	r1, [pc, #56]	; (80043d8 <HAL_RCC_ClockConfig+0x1c4>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043a2:	f000 f821 	bl	80043e8 <HAL_RCC_GetSysClockFreq>
 80043a6:	4602      	mov	r2, r0
 80043a8:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <HAL_RCC_ClockConfig+0x1c4>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	091b      	lsrs	r3, r3, #4
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	490a      	ldr	r1, [pc, #40]	; (80043dc <HAL_RCC_ClockConfig+0x1c8>)
 80043b4:	5ccb      	ldrb	r3, [r1, r3]
 80043b6:	fa22 f303 	lsr.w	r3, r2, r3
 80043ba:	4a09      	ldr	r2, [pc, #36]	; (80043e0 <HAL_RCC_ClockConfig+0x1cc>)
 80043bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043be:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <HAL_RCC_ClockConfig+0x1d0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fd f9d2 	bl	800176c <HAL_InitTick>

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	40022000 	.word	0x40022000
 80043d8:	40021000 	.word	0x40021000
 80043dc:	08008ce8 	.word	0x08008ce8
 80043e0:	20000000 	.word	0x20000000
 80043e4:	20000004 	.word	0x20000004

080043e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043e8:	b490      	push	{r4, r7}
 80043ea:	b08a      	sub	sp, #40	; 0x28
 80043ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80043ee:	4b29      	ldr	r3, [pc, #164]	; (8004494 <HAL_RCC_GetSysClockFreq+0xac>)
 80043f0:	1d3c      	adds	r4, r7, #4
 80043f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80043f8:	f240 2301 	movw	r3, #513	; 0x201
 80043fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043fe:	2300      	movs	r3, #0
 8004400:	61fb      	str	r3, [r7, #28]
 8004402:	2300      	movs	r3, #0
 8004404:	61bb      	str	r3, [r7, #24]
 8004406:	2300      	movs	r3, #0
 8004408:	627b      	str	r3, [r7, #36]	; 0x24
 800440a:	2300      	movs	r3, #0
 800440c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800440e:	2300      	movs	r3, #0
 8004410:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004412:	4b21      	ldr	r3, [pc, #132]	; (8004498 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f003 030c 	and.w	r3, r3, #12
 800441e:	2b04      	cmp	r3, #4
 8004420:	d002      	beq.n	8004428 <HAL_RCC_GetSysClockFreq+0x40>
 8004422:	2b08      	cmp	r3, #8
 8004424:	d003      	beq.n	800442e <HAL_RCC_GetSysClockFreq+0x46>
 8004426:	e02b      	b.n	8004480 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004428:	4b1c      	ldr	r3, [pc, #112]	; (800449c <HAL_RCC_GetSysClockFreq+0xb4>)
 800442a:	623b      	str	r3, [r7, #32]
      break;
 800442c:	e02b      	b.n	8004486 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	0c9b      	lsrs	r3, r3, #18
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	3328      	adds	r3, #40	; 0x28
 8004438:	443b      	add	r3, r7
 800443a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800443e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d012      	beq.n	8004470 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800444a:	4b13      	ldr	r3, [pc, #76]	; (8004498 <HAL_RCC_GetSysClockFreq+0xb0>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	0c5b      	lsrs	r3, r3, #17
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	3328      	adds	r3, #40	; 0x28
 8004456:	443b      	add	r3, r7
 8004458:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800445c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	4a0e      	ldr	r2, [pc, #56]	; (800449c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004462:	fb03 f202 	mul.w	r2, r3, r2
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	fbb2 f3f3 	udiv	r3, r2, r3
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
 800446e:	e004      	b.n	800447a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	4a0b      	ldr	r2, [pc, #44]	; (80044a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004474:	fb02 f303 	mul.w	r3, r2, r3
 8004478:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	623b      	str	r3, [r7, #32]
      break;
 800447e:	e002      	b.n	8004486 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004480:	4b06      	ldr	r3, [pc, #24]	; (800449c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004482:	623b      	str	r3, [r7, #32]
      break;
 8004484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004486:	6a3b      	ldr	r3, [r7, #32]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3728      	adds	r7, #40	; 0x28
 800448c:	46bd      	mov	sp, r7
 800448e:	bc90      	pop	{r4, r7}
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	08008c00 	.word	0x08008c00
 8004498:	40021000 	.word	0x40021000
 800449c:	007a1200 	.word	0x007a1200
 80044a0:	003d0900 	.word	0x003d0900

080044a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044a8:	4b02      	ldr	r3, [pc, #8]	; (80044b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80044aa:	681b      	ldr	r3, [r3, #0]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr
 80044b4:	20000000 	.word	0x20000000

080044b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044bc:	f7ff fff2 	bl	80044a4 <HAL_RCC_GetHCLKFreq>
 80044c0:	4602      	mov	r2, r0
 80044c2:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	0a1b      	lsrs	r3, r3, #8
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	4903      	ldr	r1, [pc, #12]	; (80044dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ce:	5ccb      	ldrb	r3, [r1, r3]
 80044d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40021000 	.word	0x40021000
 80044dc:	08008cf8 	.word	0x08008cf8

080044e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044e4:	f7ff ffde 	bl	80044a4 <HAL_RCC_GetHCLKFreq>
 80044e8:	4602      	mov	r2, r0
 80044ea:	4b05      	ldr	r3, [pc, #20]	; (8004500 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	0adb      	lsrs	r3, r3, #11
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	4903      	ldr	r1, [pc, #12]	; (8004504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044f6:	5ccb      	ldrb	r3, [r1, r3]
 80044f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	40021000 	.word	0x40021000
 8004504:	08008cf8 	.word	0x08008cf8

08004508 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	220f      	movs	r2, #15
 8004516:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004518:	4b11      	ldr	r3, [pc, #68]	; (8004560 <HAL_RCC_GetClockConfig+0x58>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f003 0203 	and.w	r2, r3, #3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004524:	4b0e      	ldr	r3, [pc, #56]	; (8004560 <HAL_RCC_GetClockConfig+0x58>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004530:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <HAL_RCC_GetClockConfig+0x58>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800453c:	4b08      	ldr	r3, [pc, #32]	; (8004560 <HAL_RCC_GetClockConfig+0x58>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	08db      	lsrs	r3, r3, #3
 8004542:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800454a:	4b06      	ldr	r3, [pc, #24]	; (8004564 <HAL_RCC_GetClockConfig+0x5c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0207 	and.w	r2, r3, #7
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr
 8004560:	40021000 	.word	0x40021000
 8004564:	40022000 	.word	0x40022000

08004568 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004570:	4b0a      	ldr	r3, [pc, #40]	; (800459c <RCC_Delay+0x34>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a0a      	ldr	r2, [pc, #40]	; (80045a0 <RCC_Delay+0x38>)
 8004576:	fba2 2303 	umull	r2, r3, r2, r3
 800457a:	0a5b      	lsrs	r3, r3, #9
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	fb02 f303 	mul.w	r3, r2, r3
 8004582:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004584:	bf00      	nop
  }
  while (Delay --);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	1e5a      	subs	r2, r3, #1
 800458a:	60fa      	str	r2, [r7, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1f9      	bne.n	8004584 <RCC_Delay+0x1c>
}
 8004590:	bf00      	nop
 8004592:	bf00      	nop
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr
 800459c:	20000000 	.word	0x20000000
 80045a0:	10624dd3 	.word	0x10624dd3

080045a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e041      	b.n	800463a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d106      	bne.n	80045d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f839 	bl	8004642 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3304      	adds	r3, #4
 80045e0:	4619      	mov	r1, r3
 80045e2:	4610      	mov	r0, r2
 80045e4:	f000 f9b4 	bl	8004950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800464a:	bf00      	nop
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr

08004654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b01      	cmp	r3, #1
 8004666:	d001      	beq.n	800466c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e03a      	b.n	80046e2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a18      	ldr	r2, [pc, #96]	; (80046ec <HAL_TIM_Base_Start_IT+0x98>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00e      	beq.n	80046ac <HAL_TIM_Base_Start_IT+0x58>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004696:	d009      	beq.n	80046ac <HAL_TIM_Base_Start_IT+0x58>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a14      	ldr	r2, [pc, #80]	; (80046f0 <HAL_TIM_Base_Start_IT+0x9c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d004      	beq.n	80046ac <HAL_TIM_Base_Start_IT+0x58>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a13      	ldr	r2, [pc, #76]	; (80046f4 <HAL_TIM_Base_Start_IT+0xa0>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d111      	bne.n	80046d0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b06      	cmp	r3, #6
 80046bc:	d010      	beq.n	80046e0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f042 0201 	orr.w	r2, r2, #1
 80046cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ce:	e007      	b.n	80046e0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0201 	orr.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bc80      	pop	{r7}
 80046ea:	4770      	bx	lr
 80046ec:	40012c00 	.word	0x40012c00
 80046f0:	40000400 	.word	0x40000400
 80046f4:	40000800 	.word	0x40000800

080046f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b02      	cmp	r3, #2
 800470c:	d122      	bne.n	8004754 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b02      	cmp	r3, #2
 800471a:	d11b      	bne.n	8004754 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0202 	mvn.w	r2, #2
 8004724:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f8ed 	bl	800491a <HAL_TIM_IC_CaptureCallback>
 8004740:	e005      	b.n	800474e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f8e0 	bl	8004908 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f8ef 	bl	800492c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	2b04      	cmp	r3, #4
 8004760:	d122      	bne.n	80047a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b04      	cmp	r3, #4
 800476e:	d11b      	bne.n	80047a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f06f 0204 	mvn.w	r2, #4
 8004778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2202      	movs	r2, #2
 800477e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f8c3 	bl	800491a <HAL_TIM_IC_CaptureCallback>
 8004794:	e005      	b.n	80047a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f8b6 	bl	8004908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 f8c5 	bl	800492c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d122      	bne.n	80047fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f003 0308 	and.w	r3, r3, #8
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d11b      	bne.n	80047fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f06f 0208 	mvn.w	r2, #8
 80047cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2204      	movs	r2, #4
 80047d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f003 0303 	and.w	r3, r3, #3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f899 	bl	800491a <HAL_TIM_IC_CaptureCallback>
 80047e8:	e005      	b.n	80047f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f88c 	bl	8004908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f89b 	bl	800492c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f003 0310 	and.w	r3, r3, #16
 8004806:	2b10      	cmp	r3, #16
 8004808:	d122      	bne.n	8004850 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f003 0310 	and.w	r3, r3, #16
 8004814:	2b10      	cmp	r3, #16
 8004816:	d11b      	bne.n	8004850 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f06f 0210 	mvn.w	r2, #16
 8004820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2208      	movs	r2, #8
 8004826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f86f 	bl	800491a <HAL_TIM_IC_CaptureCallback>
 800483c:	e005      	b.n	800484a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f862 	bl	8004908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f871 	bl	800492c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b01      	cmp	r3, #1
 800485c:	d10e      	bne.n	800487c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	2b01      	cmp	r3, #1
 800486a:	d107      	bne.n	800487c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0201 	mvn.w	r2, #1
 8004874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fc ff28 	bl	80016cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004886:	2b80      	cmp	r3, #128	; 0x80
 8004888:	d10e      	bne.n	80048a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004894:	2b80      	cmp	r3, #128	; 0x80
 8004896:	d107      	bne.n	80048a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f8bf 	bl	8004a26 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b2:	2b40      	cmp	r3, #64	; 0x40
 80048b4:	d10e      	bne.n	80048d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c0:	2b40      	cmp	r3, #64	; 0x40
 80048c2:	d107      	bne.n	80048d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f835 	bl	800493e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f003 0320 	and.w	r3, r3, #32
 80048de:	2b20      	cmp	r3, #32
 80048e0:	d10e      	bne.n	8004900 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f003 0320 	and.w	r3, r3, #32
 80048ec:	2b20      	cmp	r3, #32
 80048ee:	d107      	bne.n	8004900 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0220 	mvn.w	r2, #32
 80048f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f88a 	bl	8004a14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004900:	bf00      	nop
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr

0800491a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr

0800492c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	bc80      	pop	{r7}
 800493c:	4770      	bx	lr

0800493e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	bc80      	pop	{r7}
 800494e:	4770      	bx	lr

08004950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a29      	ldr	r2, [pc, #164]	; (8004a08 <TIM_Base_SetConfig+0xb8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d00b      	beq.n	8004980 <TIM_Base_SetConfig+0x30>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496e:	d007      	beq.n	8004980 <TIM_Base_SetConfig+0x30>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a26      	ldr	r2, [pc, #152]	; (8004a0c <TIM_Base_SetConfig+0xbc>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d003      	beq.n	8004980 <TIM_Base_SetConfig+0x30>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a25      	ldr	r2, [pc, #148]	; (8004a10 <TIM_Base_SetConfig+0xc0>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d108      	bne.n	8004992 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a1c      	ldr	r2, [pc, #112]	; (8004a08 <TIM_Base_SetConfig+0xb8>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d00b      	beq.n	80049b2 <TIM_Base_SetConfig+0x62>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a0:	d007      	beq.n	80049b2 <TIM_Base_SetConfig+0x62>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a19      	ldr	r2, [pc, #100]	; (8004a0c <TIM_Base_SetConfig+0xbc>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d003      	beq.n	80049b2 <TIM_Base_SetConfig+0x62>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a18      	ldr	r2, [pc, #96]	; (8004a10 <TIM_Base_SetConfig+0xc0>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d108      	bne.n	80049c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a07      	ldr	r2, [pc, #28]	; (8004a08 <TIM_Base_SetConfig+0xb8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d103      	bne.n	80049f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	615a      	str	r2, [r3, #20]
}
 80049fe:	bf00      	nop
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bc80      	pop	{r7}
 8004a06:	4770      	bx	lr
 8004a08:	40012c00 	.word	0x40012c00
 8004a0c:	40000400 	.word	0x40000400
 8004a10:	40000800 	.word	0x40000800

08004a14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bc80      	pop	{r7}
 8004a24:	4770      	bx	lr

08004a26 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b083      	sub	sp, #12
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a2e:	bf00      	nop
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bc80      	pop	{r7}
 8004a36:	4770      	bx	lr

08004a38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e03f      	b.n	8004aca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d106      	bne.n	8004a64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fc ff72 	bl	8001948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2224      	movs	r2, #36	; 0x24
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 fc25 	bl	80052cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	691a      	ldr	r2, [r3, #16]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	695a      	ldr	r2, [r3, #20]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004aa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68da      	ldr	r2, [r3, #12]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ab0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2220      	movs	r2, #32
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b08a      	sub	sp, #40	; 0x28
 8004ad6:	af02      	add	r7, sp, #8
 8004ad8:	60f8      	str	r0, [r7, #12]
 8004ada:	60b9      	str	r1, [r7, #8]
 8004adc:	603b      	str	r3, [r7, #0]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b20      	cmp	r3, #32
 8004af0:	d17c      	bne.n	8004bec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <HAL_UART_Transmit+0x2c>
 8004af8:	88fb      	ldrh	r3, [r7, #6]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e075      	b.n	8004bee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d101      	bne.n	8004b10 <HAL_UART_Transmit+0x3e>
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	e06e      	b.n	8004bee <HAL_UART_Transmit+0x11c>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2221      	movs	r2, #33	; 0x21
 8004b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b26:	f7fc fff5 	bl	8001b14 <HAL_GetTick>
 8004b2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	88fa      	ldrh	r2, [r7, #6]
 8004b30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	88fa      	ldrh	r2, [r7, #6]
 8004b36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b40:	d108      	bne.n	8004b54 <HAL_UART_Transmit+0x82>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d104      	bne.n	8004b54 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	61bb      	str	r3, [r7, #24]
 8004b52:	e003      	b.n	8004b5c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b64:	e02a      	b.n	8004bbc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	2180      	movs	r1, #128	; 0x80
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 fa11 	bl	8004f98 <UART_WaitOnFlagUntilTimeout>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e036      	b.n	8004bee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10b      	bne.n	8004b9e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	3302      	adds	r3, #2
 8004b9a:	61bb      	str	r3, [r7, #24]
 8004b9c:	e007      	b.n	8004bae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	781a      	ldrb	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	3301      	adds	r3, #1
 8004bac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1cf      	bne.n	8004b66 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	2140      	movs	r1, #64	; 0x40
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 f9e1 	bl	8004f98 <UART_WaitOnFlagUntilTimeout>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e006      	b.n	8004bee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	e000      	b.n	8004bee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004bec:	2302      	movs	r3, #2
  }
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3720      	adds	r7, #32
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
	...

08004bf8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08a      	sub	sp, #40	; 0x28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10d      	bne.n	8004c4a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	f003 0320 	and.w	r3, r3, #32
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d008      	beq.n	8004c4a <HAL_UART_IRQHandler+0x52>
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fa99 	bl	800517a <UART_Receive_IT>
      return;
 8004c48:	e17b      	b.n	8004f42 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 80b1 	beq.w	8004db4 <HAL_UART_IRQHandler+0x1bc>
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d105      	bne.n	8004c68 <HAL_UART_IRQHandler+0x70>
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 80a6 	beq.w	8004db4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <HAL_UART_IRQHandler+0x90>
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	f043 0201 	orr.w	r2, r3, #1
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	f003 0304 	and.w	r3, r3, #4
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <HAL_UART_IRQHandler+0xb0>
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d005      	beq.n	8004ca8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca0:	f043 0202 	orr.w	r2, r3, #2
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <HAL_UART_IRQHandler+0xd0>
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d005      	beq.n	8004cc8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc0:	f043 0204 	orr.w	r2, r3, #4
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00f      	beq.n	8004cf2 <HAL_UART_IRQHandler+0xfa>
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	f003 0320 	and.w	r3, r3, #32
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d104      	bne.n	8004ce6 <HAL_UART_IRQHandler+0xee>
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d005      	beq.n	8004cf2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	f043 0208 	orr.w	r2, r3, #8
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 811e 	beq.w	8004f38 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	f003 0320 	and.w	r3, r3, #32
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d007      	beq.n	8004d16 <HAL_UART_IRQHandler+0x11e>
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	f003 0320 	and.w	r3, r3, #32
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d002      	beq.n	8004d16 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 fa32 	bl	800517a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	bf14      	ite	ne
 8004d24:	2301      	movne	r3, #1
 8004d26:	2300      	moveq	r3, #0
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d30:	f003 0308 	and.w	r3, r3, #8
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d102      	bne.n	8004d3e <HAL_UART_IRQHandler+0x146>
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d031      	beq.n	8004da2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f974 	bl	800502c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d023      	beq.n	8004d9a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	695a      	ldr	r2, [r3, #20]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d60:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d013      	beq.n	8004d92 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6e:	4a76      	ldr	r2, [pc, #472]	; (8004f48 <HAL_UART_IRQHandler+0x350>)
 8004d70:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fd fd9e 	bl	80028b8 <HAL_DMA_Abort_IT>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d016      	beq.n	8004db0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d90:	e00e      	b.n	8004db0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f8ec 	bl	8004f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d98:	e00a      	b.n	8004db0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f8e8 	bl	8004f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da0:	e006      	b.n	8004db0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f8e4 	bl	8004f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004dae:	e0c3      	b.n	8004f38 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db0:	bf00      	nop
    return;
 8004db2:	e0c1      	b.n	8004f38 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	f040 80a1 	bne.w	8004f00 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	f003 0310 	and.w	r3, r3, #16
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 809b 	beq.w	8004f00 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	f003 0310 	and.w	r3, r3, #16
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 8095 	beq.w	8004f00 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	60fb      	str	r3, [r7, #12]
 8004dea:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d04e      	beq.n	8004e98 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004e04:	8a3b      	ldrh	r3, [r7, #16]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 8098 	beq.w	8004f3c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e10:	8a3a      	ldrh	r2, [r7, #16]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	f080 8092 	bcs.w	8004f3c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	8a3a      	ldrh	r2, [r7, #16]
 8004e1c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	2b20      	cmp	r3, #32
 8004e26:	d02b      	beq.n	8004e80 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e36:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695a      	ldr	r2, [r3, #20]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0201 	bic.w	r2, r2, #1
 8004e46:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	695a      	ldr	r2, [r3, #20]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e56:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68da      	ldr	r2, [r3, #12]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 0210 	bic.w	r2, r2, #16
 8004e74:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fd fce1 	bl	8002842 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	4619      	mov	r1, r3
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f876 	bl	8004f82 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e96:	e051      	b.n	8004f3c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d047      	beq.n	8004f40 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004eb0:	8a7b      	ldrh	r3, [r7, #18]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d044      	beq.n	8004f40 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ec4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	695a      	ldr	r2, [r3, #20]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0201 	bic.w	r2, r2, #1
 8004ed4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0210 	bic.w	r2, r2, #16
 8004ef2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ef4:	8a7b      	ldrh	r3, [r7, #18]
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 f842 	bl	8004f82 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004efe:	e01f      	b.n	8004f40 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d008      	beq.n	8004f1c <HAL_UART_IRQHandler+0x324>
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d003      	beq.n	8004f1c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f8c9 	bl	80050ac <UART_Transmit_IT>
    return;
 8004f1a:	e012      	b.n	8004f42 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00d      	beq.n	8004f42 <HAL_UART_IRQHandler+0x34a>
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d008      	beq.n	8004f42 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f90a 	bl	800514a <UART_EndTransmit_IT>
    return;
 8004f36:	e004      	b.n	8004f42 <HAL_UART_IRQHandler+0x34a>
    return;
 8004f38:	bf00      	nop
 8004f3a:	e002      	b.n	8004f42 <HAL_UART_IRQHandler+0x34a>
      return;
 8004f3c:	bf00      	nop
 8004f3e:	e000      	b.n	8004f42 <HAL_UART_IRQHandler+0x34a>
      return;
 8004f40:	bf00      	nop
  }
}
 8004f42:	3728      	adds	r7, #40	; 0x28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	08005085 	.word	0x08005085

08004f4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bc80      	pop	{r7}
 8004f5c:	4770      	bx	lr

08004f5e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bc80      	pop	{r7}
 8004f6e:	4770      	bx	lr

08004f70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bc80      	pop	{r7}
 8004f80:	4770      	bx	lr

08004f82 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bc80      	pop	{r7}
 8004f96:	4770      	bx	lr

08004f98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	603b      	str	r3, [r7, #0]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fa8:	e02c      	b.n	8005004 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb0:	d028      	beq.n	8005004 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d007      	beq.n	8004fc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fb8:	f7fc fdac 	bl	8001b14 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d21d      	bcs.n	8005004 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68da      	ldr	r2, [r3, #12]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004fd6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695a      	ldr	r2, [r3, #20]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0201 	bic.w	r2, r2, #1
 8004fe6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2220      	movs	r2, #32
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e00f      	b.n	8005024 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	4013      	ands	r3, r2
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	429a      	cmp	r2, r3
 8005012:	bf0c      	ite	eq
 8005014:	2301      	moveq	r3, #1
 8005016:	2300      	movne	r3, #0
 8005018:	b2db      	uxtb	r3, r3
 800501a:	461a      	mov	r2, r3
 800501c:	79fb      	ldrb	r3, [r7, #7]
 800501e:	429a      	cmp	r2, r3
 8005020:	d0c3      	beq.n	8004faa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005042:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695a      	ldr	r2, [r3, #20]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 0201 	bic.w	r2, r2, #1
 8005052:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005058:	2b01      	cmp	r3, #1
 800505a:	d107      	bne.n	800506c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68da      	ldr	r2, [r3, #12]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 0210 	bic.w	r2, r2, #16
 800506a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2220      	movs	r2, #32
 8005070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	631a      	str	r2, [r3, #48]	; 0x30
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	bc80      	pop	{r7}
 8005082:	4770      	bx	lr

08005084 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f7ff ff66 	bl	8004f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050a4:	bf00      	nop
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b21      	cmp	r3, #33	; 0x21
 80050be:	d13e      	bne.n	800513e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c8:	d114      	bne.n	80050f4 <UART_Transmit_IT+0x48>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d110      	bne.n	80050f4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	881b      	ldrh	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050e6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	1c9a      	adds	r2, r3, #2
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	621a      	str	r2, [r3, #32]
 80050f2:	e008      	b.n	8005106 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	1c59      	adds	r1, r3, #1
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	6211      	str	r1, [r2, #32]
 80050fe:	781a      	ldrb	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800510a:	b29b      	uxth	r3, r3
 800510c:	3b01      	subs	r3, #1
 800510e:	b29b      	uxth	r3, r3
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	4619      	mov	r1, r3
 8005114:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10f      	bne.n	800513a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68da      	ldr	r2, [r3, #12]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005128:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68da      	ldr	r2, [r3, #12]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005138:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	e000      	b.n	8005140 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800513e:	2302      	movs	r3, #2
  }
}
 8005140:	4618      	mov	r0, r3
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	bc80      	pop	{r7}
 8005148:	4770      	bx	lr

0800514a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b082      	sub	sp, #8
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68da      	ldr	r2, [r3, #12]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005160:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2220      	movs	r2, #32
 8005166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7ff feee 	bl	8004f4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b086      	sub	sp, #24
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b22      	cmp	r3, #34	; 0x22
 800518c:	f040 8099 	bne.w	80052c2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005198:	d117      	bne.n	80051ca <UART_Receive_IT+0x50>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d113      	bne.n	80051ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051aa:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c2:	1c9a      	adds	r2, r3, #2
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	629a      	str	r2, [r3, #40]	; 0x28
 80051c8:	e026      	b.n	8005218 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ce:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80051d0:	2300      	movs	r3, #0
 80051d2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051dc:	d007      	beq.n	80051ee <UART_Receive_IT+0x74>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10a      	bne.n	80051fc <UART_Receive_IT+0x82>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	701a      	strb	r2, [r3, #0]
 80051fa:	e008      	b.n	800520e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005208:	b2da      	uxtb	r2, r3
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800521c:	b29b      	uxth	r3, r3
 800521e:	3b01      	subs	r3, #1
 8005220:	b29b      	uxth	r3, r3
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	4619      	mov	r1, r3
 8005226:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005228:	2b00      	cmp	r3, #0
 800522a:	d148      	bne.n	80052be <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0220 	bic.w	r2, r2, #32
 800523a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800524a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	695a      	ldr	r2, [r3, #20]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0201 	bic.w	r2, r2, #1
 800525a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2220      	movs	r2, #32
 8005260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005268:	2b01      	cmp	r3, #1
 800526a:	d123      	bne.n	80052b4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0210 	bic.w	r2, r2, #16
 8005280:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	2b10      	cmp	r3, #16
 800528e:	d10a      	bne.n	80052a6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005290:	2300      	movs	r3, #0
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052aa:	4619      	mov	r1, r3
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7ff fe68 	bl	8004f82 <HAL_UARTEx_RxEventCallback>
 80052b2:	e002      	b.n	80052ba <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7ff fe52 	bl	8004f5e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	e002      	b.n	80052c4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80052be:	2300      	movs	r3, #0
 80052c0:	e000      	b.n	80052c4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80052c2:	2302      	movs	r3, #2
  }
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3718      	adds	r7, #24
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68da      	ldr	r2, [r3, #12]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689a      	ldr	r2, [r3, #8]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	431a      	orrs	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005306:	f023 030c 	bic.w	r3, r3, #12
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	6812      	ldr	r2, [r2, #0]
 800530e:	68b9      	ldr	r1, [r7, #8]
 8005310:	430b      	orrs	r3, r1
 8005312:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	699a      	ldr	r2, [r3, #24]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a2c      	ldr	r2, [pc, #176]	; (80053e0 <UART_SetConfig+0x114>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d103      	bne.n	800533c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005334:	f7ff f8d4 	bl	80044e0 <HAL_RCC_GetPCLK2Freq>
 8005338:	60f8      	str	r0, [r7, #12]
 800533a:	e002      	b.n	8005342 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800533c:	f7ff f8bc 	bl	80044b8 <HAL_RCC_GetPCLK1Freq>
 8005340:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4613      	mov	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	009a      	lsls	r2, r3, #2
 800534c:	441a      	add	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	fbb2 f3f3 	udiv	r3, r2, r3
 8005358:	4a22      	ldr	r2, [pc, #136]	; (80053e4 <UART_SetConfig+0x118>)
 800535a:	fba2 2303 	umull	r2, r3, r2, r3
 800535e:	095b      	lsrs	r3, r3, #5
 8005360:	0119      	lsls	r1, r3, #4
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	4613      	mov	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	009a      	lsls	r2, r3, #2
 800536c:	441a      	add	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	fbb2 f2f3 	udiv	r2, r2, r3
 8005378:	4b1a      	ldr	r3, [pc, #104]	; (80053e4 <UART_SetConfig+0x118>)
 800537a:	fba3 0302 	umull	r0, r3, r3, r2
 800537e:	095b      	lsrs	r3, r3, #5
 8005380:	2064      	movs	r0, #100	; 0x64
 8005382:	fb00 f303 	mul.w	r3, r0, r3
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	3332      	adds	r3, #50	; 0x32
 800538c:	4a15      	ldr	r2, [pc, #84]	; (80053e4 <UART_SetConfig+0x118>)
 800538e:	fba2 2303 	umull	r2, r3, r2, r3
 8005392:	095b      	lsrs	r3, r3, #5
 8005394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005398:	4419      	add	r1, r3
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	4613      	mov	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	009a      	lsls	r2, r3, #2
 80053a4:	441a      	add	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80053b0:	4b0c      	ldr	r3, [pc, #48]	; (80053e4 <UART_SetConfig+0x118>)
 80053b2:	fba3 0302 	umull	r0, r3, r3, r2
 80053b6:	095b      	lsrs	r3, r3, #5
 80053b8:	2064      	movs	r0, #100	; 0x64
 80053ba:	fb00 f303 	mul.w	r3, r0, r3
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	011b      	lsls	r3, r3, #4
 80053c2:	3332      	adds	r3, #50	; 0x32
 80053c4:	4a07      	ldr	r2, [pc, #28]	; (80053e4 <UART_SetConfig+0x118>)
 80053c6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ca:	095b      	lsrs	r3, r3, #5
 80053cc:	f003 020f 	and.w	r2, r3, #15
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	440a      	add	r2, r1
 80053d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80053d8:	bf00      	nop
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	40013800 	.word	0x40013800
 80053e4:	51eb851f 	.word	0x51eb851f

080053e8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053ee:	f3ef 8305 	mrs	r3, IPSR
 80053f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80053f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10f      	bne.n	800541a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053fa:	f3ef 8310 	mrs	r3, PRIMASK
 80053fe:	607b      	str	r3, [r7, #4]
  return(result);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d109      	bne.n	800541a <osKernelInitialize+0x32>
 8005406:	4b10      	ldr	r3, [pc, #64]	; (8005448 <osKernelInitialize+0x60>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d109      	bne.n	8005422 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800540e:	f3ef 8311 	mrs	r3, BASEPRI
 8005412:	603b      	str	r3, [r7, #0]
  return(result);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800541a:	f06f 0305 	mvn.w	r3, #5
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	e00c      	b.n	800543c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005422:	4b09      	ldr	r3, [pc, #36]	; (8005448 <osKernelInitialize+0x60>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d105      	bne.n	8005436 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800542a:	4b07      	ldr	r3, [pc, #28]	; (8005448 <osKernelInitialize+0x60>)
 800542c:	2201      	movs	r2, #1
 800542e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005430:	2300      	movs	r3, #0
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	e002      	b.n	800543c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005436:	f04f 33ff 	mov.w	r3, #4294967295
 800543a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800543c:	68fb      	ldr	r3, [r7, #12]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr
 8005448:	200002bc 	.word	0x200002bc

0800544c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005452:	f3ef 8305 	mrs	r3, IPSR
 8005456:	60bb      	str	r3, [r7, #8]
  return(result);
 8005458:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10f      	bne.n	800547e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800545e:	f3ef 8310 	mrs	r3, PRIMASK
 8005462:	607b      	str	r3, [r7, #4]
  return(result);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d109      	bne.n	800547e <osKernelStart+0x32>
 800546a:	4b11      	ldr	r3, [pc, #68]	; (80054b0 <osKernelStart+0x64>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b02      	cmp	r3, #2
 8005470:	d109      	bne.n	8005486 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005472:	f3ef 8311 	mrs	r3, BASEPRI
 8005476:	603b      	str	r3, [r7, #0]
  return(result);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <osKernelStart+0x3a>
    stat = osErrorISR;
 800547e:	f06f 0305 	mvn.w	r3, #5
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	e00e      	b.n	80054a4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005486:	4b0a      	ldr	r3, [pc, #40]	; (80054b0 <osKernelStart+0x64>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d107      	bne.n	800549e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800548e:	4b08      	ldr	r3, [pc, #32]	; (80054b0 <osKernelStart+0x64>)
 8005490:	2202      	movs	r2, #2
 8005492:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005494:	f001 fc4c 	bl	8006d30 <vTaskStartScheduler>
      stat = osOK;
 8005498:	2300      	movs	r3, #0
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	e002      	b.n	80054a4 <osKernelStart+0x58>
    } else {
      stat = osError;
 800549e:	f04f 33ff 	mov.w	r3, #4294967295
 80054a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80054a4:	68fb      	ldr	r3, [r7, #12]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	200002bc 	.word	0x200002bc

080054b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b092      	sub	sp, #72	; 0x48
 80054b8:	af04      	add	r7, sp, #16
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80054c0:	2300      	movs	r3, #0
 80054c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054c4:	f3ef 8305 	mrs	r3, IPSR
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f040 8094 	bne.w	80055fa <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054d2:	f3ef 8310 	mrs	r3, PRIMASK
 80054d6:	623b      	str	r3, [r7, #32]
  return(result);
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f040 808d 	bne.w	80055fa <osThreadNew+0x146>
 80054e0:	4b48      	ldr	r3, [pc, #288]	; (8005604 <osThreadNew+0x150>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d106      	bne.n	80054f6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80054e8:	f3ef 8311 	mrs	r3, BASEPRI
 80054ec:	61fb      	str	r3, [r7, #28]
  return(result);
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f040 8082 	bne.w	80055fa <osThreadNew+0x146>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d07e      	beq.n	80055fa <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80054fc:	2380      	movs	r3, #128	; 0x80
 80054fe:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005500:	2318      	movs	r3, #24
 8005502:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005504:	2300      	movs	r3, #0
 8005506:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005508:	f107 031b 	add.w	r3, r7, #27
 800550c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800550e:	f04f 33ff 	mov.w	r3, #4294967295
 8005512:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d045      	beq.n	80055a6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d002      	beq.n	8005528 <osThreadNew+0x74>
        name = attr->name;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d002      	beq.n	8005536 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005538:	2b00      	cmp	r3, #0
 800553a:	d008      	beq.n	800554e <osThreadNew+0x9a>
 800553c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553e:	2b38      	cmp	r3, #56	; 0x38
 8005540:	d805      	bhi.n	800554e <osThreadNew+0x9a>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <osThreadNew+0x9e>
        return (NULL);
 800554e:	2300      	movs	r3, #0
 8005550:	e054      	b.n	80055fc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	089b      	lsrs	r3, r3, #2
 8005560:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00e      	beq.n	8005588 <osThreadNew+0xd4>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	2bcb      	cmp	r3, #203	; 0xcb
 8005570:	d90a      	bls.n	8005588 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005576:	2b00      	cmp	r3, #0
 8005578:	d006      	beq.n	8005588 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <osThreadNew+0xd4>
        mem = 1;
 8005582:	2301      	movs	r3, #1
 8005584:	62bb      	str	r3, [r7, #40]	; 0x28
 8005586:	e010      	b.n	80055aa <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10c      	bne.n	80055aa <osThreadNew+0xf6>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d108      	bne.n	80055aa <osThreadNew+0xf6>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d104      	bne.n	80055aa <osThreadNew+0xf6>
          mem = 0;
 80055a0:	2300      	movs	r3, #0
 80055a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80055a4:	e001      	b.n	80055aa <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80055a6:	2300      	movs	r3, #0
 80055a8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80055aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d110      	bne.n	80055d2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055b8:	9202      	str	r2, [sp, #8]
 80055ba:	9301      	str	r3, [sp, #4]
 80055bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f001 f9ce 	bl	8006968 <xTaskCreateStatic>
 80055cc:	4603      	mov	r3, r0
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	e013      	b.n	80055fa <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80055d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d110      	bne.n	80055fa <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055da:	b29a      	uxth	r2, r3
 80055dc:	f107 0314 	add.w	r3, r7, #20
 80055e0:	9301      	str	r3, [sp, #4]
 80055e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f001 fa18 	bl	8006a20 <xTaskCreate>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d001      	beq.n	80055fa <osThreadNew+0x146>
          hTask = NULL;
 80055f6:	2300      	movs	r3, #0
 80055f8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80055fa:	697b      	ldr	r3, [r7, #20]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3738      	adds	r7, #56	; 0x38
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	200002bc 	.word	0x200002bc

08005608 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800560e:	f3ef 8305 	mrs	r3, IPSR
 8005612:	60bb      	str	r3, [r7, #8]
  return(result);
 8005614:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10f      	bne.n	800563a <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800561a:	f3ef 8310 	mrs	r3, PRIMASK
 800561e:	607b      	str	r3, [r7, #4]
  return(result);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d109      	bne.n	800563a <osThreadYield+0x32>
 8005626:	4b0f      	ldr	r3, [pc, #60]	; (8005664 <osThreadYield+0x5c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b02      	cmp	r3, #2
 800562c:	d109      	bne.n	8005642 <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800562e:	f3ef 8311 	mrs	r3, BASEPRI
 8005632:	603b      	str	r3, [r7, #0]
  return(result);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <osThreadYield+0x3a>
    stat = osErrorISR;
 800563a:	f06f 0305 	mvn.w	r3, #5
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	e009      	b.n	8005656 <osThreadYield+0x4e>
  } else {
    stat = osOK;
 8005642:	2300      	movs	r3, #0
 8005644:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 8005646:	4b08      	ldr	r3, [pc, #32]	; (8005668 <osThreadYield+0x60>)
 8005648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8005656:	68fb      	ldr	r3, [r7, #12]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	bc80      	pop	{r7}
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	200002bc 	.word	0x200002bc
 8005668:	e000ed04 	.word	0xe000ed04

0800566c <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800566c:	b580      	push	{r7, lr}
 800566e:	b08a      	sub	sp, #40	; 0x28
 8005670:	af02      	add	r7, sp, #8
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <osThreadFlagsSet+0x1a>
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	da03      	bge.n	800568e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8005686:	f06f 0303 	mvn.w	r3, #3
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	e045      	b.n	800571a <osThreadFlagsSet+0xae>
  }
  else {
    rflags = (uint32_t)osError;
 800568e:	f04f 33ff 	mov.w	r3, #4294967295
 8005692:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005694:	f3ef 8305 	mrs	r3, IPSR
 8005698:	61bb      	str	r3, [r7, #24]
  return(result);
 800569a:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10f      	bne.n	80056c0 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056a0:	f3ef 8310 	mrs	r3, PRIMASK
 80056a4:	617b      	str	r3, [r7, #20]
  return(result);
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d109      	bne.n	80056c0 <osThreadFlagsSet+0x54>
 80056ac:	4b1d      	ldr	r3, [pc, #116]	; (8005724 <osThreadFlagsSet+0xb8>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d125      	bne.n	8005700 <osThreadFlagsSet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056b4:	f3ef 8311 	mrs	r3, BASEPRI
 80056b8:	613b      	str	r3, [r7, #16]
  return(result);
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d01f      	beq.n	8005700 <osThreadFlagsSet+0x94>
      yield = pdFALSE;
 80056c0:	2300      	movs	r3, #0
 80056c2:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80056c4:	f107 0308 	add.w	r3, r7, #8
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	2300      	movs	r3, #0
 80056cc:	2201      	movs	r2, #1
 80056ce:	6839      	ldr	r1, [r7, #0]
 80056d0:	69f8      	ldr	r0, [r7, #28]
 80056d2:	f002 f925 	bl	8007920 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80056d6:	f107 030c 	add.w	r3, r7, #12
 80056da:	2200      	movs	r2, #0
 80056dc:	9200      	str	r2, [sp, #0]
 80056de:	2200      	movs	r2, #0
 80056e0:	2100      	movs	r1, #0
 80056e2:	69f8      	ldr	r0, [r7, #28]
 80056e4:	f002 f91c 	bl	8007920 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d015      	beq.n	800571a <osThreadFlagsSet+0xae>
 80056ee:	4b0e      	ldr	r3, [pc, #56]	; (8005728 <osThreadFlagsSet+0xbc>)
 80056f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	e00c      	b.n	800571a <osThreadFlagsSet+0xae>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8005700:	2300      	movs	r3, #0
 8005702:	2201      	movs	r2, #1
 8005704:	6839      	ldr	r1, [r7, #0]
 8005706:	69f8      	ldr	r0, [r7, #28]
 8005708:	f002 f860 	bl	80077cc <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800570c:	f107 030c 	add.w	r3, r7, #12
 8005710:	2200      	movs	r2, #0
 8005712:	2100      	movs	r1, #0
 8005714:	69f8      	ldr	r0, [r7, #28]
 8005716:	f002 f859 	bl	80077cc <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800571a:	68fb      	ldr	r3, [r7, #12]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3720      	adds	r7, #32
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	200002bc 	.word	0x200002bc
 8005728:	e000ed04 	.word	0xe000ed04

0800572c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800572c:	b580      	push	{r7, lr}
 800572e:	b08e      	sub	sp, #56	; 0x38
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005738:	f3ef 8305 	mrs	r3, IPSR
 800573c:	61fb      	str	r3, [r7, #28]
  return(result);
 800573e:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10f      	bne.n	8005764 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005744:	f3ef 8310 	mrs	r3, PRIMASK
 8005748:	61bb      	str	r3, [r7, #24]
  return(result);
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d109      	bne.n	8005764 <osThreadFlagsWait+0x38>
 8005750:	4b3f      	ldr	r3, [pc, #252]	; (8005850 <osThreadFlagsWait+0x124>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b02      	cmp	r3, #2
 8005756:	d109      	bne.n	800576c <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005758:	f3ef 8311 	mrs	r3, BASEPRI
 800575c:	617b      	str	r3, [r7, #20]
  return(result);
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d003      	beq.n	800576c <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 8005764:	f06f 0305 	mvn.w	r3, #5
 8005768:	637b      	str	r3, [r7, #52]	; 0x34
 800576a:	e06b      	b.n	8005844 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	da03      	bge.n	800577a <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 8005772:	f06f 0303 	mvn.w	r3, #3
 8005776:	637b      	str	r3, [r7, #52]	; 0x34
 8005778:	e064      	b.n	8005844 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	f003 0302 	and.w	r3, r3, #2
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <osThreadFlagsWait+0x5e>
      clear = 0U;
 8005784:	2300      	movs	r3, #0
 8005786:	633b      	str	r3, [r7, #48]	; 0x30
 8005788:	e001      	b.n	800578e <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 8005796:	f001 fbe7 	bl	8006f68 <xTaskGetTickCount>
 800579a:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800579c:	f107 0210 	add.w	r2, r7, #16
 80057a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057a4:	2000      	movs	r0, #0
 80057a6:	f001 ffb1 	bl	800770c <xTaskNotifyWait>
 80057aa:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d137      	bne.n	8005822 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 80057b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4013      	ands	r3, r2
 80057b8:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057be:	4313      	orrs	r3, r2
 80057c0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00c      	beq.n	80057e6 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d0:	4013      	ands	r3, r2
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d032      	beq.n	800583e <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10f      	bne.n	80057fe <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 80057de:	f06f 0302 	mvn.w	r3, #2
 80057e2:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80057e4:	e02e      	b.n	8005844 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ea:	4013      	ands	r3, r2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d128      	bne.n	8005842 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d103      	bne.n	80057fe <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 80057f6:	f06f 0302 	mvn.w	r3, #2
 80057fa:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80057fc:	e022      	b.n	8005844 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80057fe:	f001 fbb3 	bl	8006f68 <xTaskGetTickCount>
 8005802:	4602      	mov	r2, r0
 8005804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800580a:	6a3a      	ldr	r2, [r7, #32]
 800580c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580e:	429a      	cmp	r2, r3
 8005810:	d902      	bls.n	8005818 <osThreadFlagsWait+0xec>
          tout  = 0;
 8005812:	2300      	movs	r3, #0
 8005814:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005816:	e00e      	b.n	8005836 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 8005818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005820:	e009      	b.n	8005836 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d103      	bne.n	8005830 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 8005828:	f06f 0302 	mvn.w	r3, #2
 800582c:	637b      	str	r3, [r7, #52]	; 0x34
 800582e:	e002      	b.n	8005836 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8005830:	f06f 0301 	mvn.w	r3, #1
 8005834:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1af      	bne.n	800579c <osThreadFlagsWait+0x70>
 800583c:	e002      	b.n	8005844 <osThreadFlagsWait+0x118>
            break;
 800583e:	bf00      	nop
 8005840:	e000      	b.n	8005844 <osThreadFlagsWait+0x118>
            break;
 8005842:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8005844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005846:	4618      	mov	r0, r3
 8005848:	3738      	adds	r7, #56	; 0x38
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	200002bc 	.word	0x200002bc

08005854 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800585c:	f3ef 8305 	mrs	r3, IPSR
 8005860:	613b      	str	r3, [r7, #16]
  return(result);
 8005862:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10f      	bne.n	8005888 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005868:	f3ef 8310 	mrs	r3, PRIMASK
 800586c:	60fb      	str	r3, [r7, #12]
  return(result);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d109      	bne.n	8005888 <osDelay+0x34>
 8005874:	4b0d      	ldr	r3, [pc, #52]	; (80058ac <osDelay+0x58>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b02      	cmp	r3, #2
 800587a:	d109      	bne.n	8005890 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800587c:	f3ef 8311 	mrs	r3, BASEPRI
 8005880:	60bb      	str	r3, [r7, #8]
  return(result);
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d003      	beq.n	8005890 <osDelay+0x3c>
    stat = osErrorISR;
 8005888:	f06f 0305 	mvn.w	r3, #5
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	e007      	b.n	80058a0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005890:	2300      	movs	r3, #0
 8005892:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f001 fa14 	bl	8006cc8 <vTaskDelay>
    }
  }

  return (stat);
 80058a0:	697b      	ldr	r3, [r7, #20]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3718      	adds	r7, #24
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	200002bc 	.word	0x200002bc

080058b0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08c      	sub	sp, #48	; 0x30
 80058b4:	af02      	add	r7, sp, #8
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80058bc:	2300      	movs	r3, #0
 80058be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058c0:	f3ef 8305 	mrs	r3, IPSR
 80058c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80058c6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d16f      	bne.n	80059ac <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058cc:	f3ef 8310 	mrs	r3, PRIMASK
 80058d0:	617b      	str	r3, [r7, #20]
  return(result);
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d169      	bne.n	80059ac <osMessageQueueNew+0xfc>
 80058d8:	4b37      	ldr	r3, [pc, #220]	; (80059b8 <osMessageQueueNew+0x108>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d105      	bne.n	80058ec <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80058e0:	f3ef 8311 	mrs	r3, BASEPRI
 80058e4:	613b      	str	r3, [r7, #16]
  return(result);
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d15f      	bne.n	80059ac <osMessageQueueNew+0xfc>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d05c      	beq.n	80059ac <osMessageQueueNew+0xfc>
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d059      	beq.n	80059ac <osMessageQueueNew+0xfc>
    mem = -1;
 80058f8:	f04f 33ff 	mov.w	r3, #4294967295
 80058fc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d029      	beq.n	8005958 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d012      	beq.n	8005932 <osMessageQueueNew+0x82>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	2b4f      	cmp	r3, #79	; 0x4f
 8005912:	d90e      	bls.n	8005932 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00a      	beq.n	8005932 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	695a      	ldr	r2, [r3, #20]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	68b9      	ldr	r1, [r7, #8]
 8005924:	fb01 f303 	mul.w	r3, r1, r3
 8005928:	429a      	cmp	r2, r3
 800592a:	d302      	bcc.n	8005932 <osMessageQueueNew+0x82>
        mem = 1;
 800592c:	2301      	movs	r3, #1
 800592e:	623b      	str	r3, [r7, #32]
 8005930:	e014      	b.n	800595c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d110      	bne.n	800595c <osMessageQueueNew+0xac>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10c      	bne.n	800595c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005946:	2b00      	cmp	r3, #0
 8005948:	d108      	bne.n	800595c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d104      	bne.n	800595c <osMessageQueueNew+0xac>
          mem = 0;
 8005952:	2300      	movs	r3, #0
 8005954:	623b      	str	r3, [r7, #32]
 8005956:	e001      	b.n	800595c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005958:	2300      	movs	r3, #0
 800595a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d10b      	bne.n	800597a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691a      	ldr	r2, [r3, #16]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	2100      	movs	r1, #0
 800596c:	9100      	str	r1, [sp, #0]
 800596e:	68b9      	ldr	r1, [r7, #8]
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 fa85 	bl	8005e80 <xQueueGenericCreateStatic>
 8005976:	6278      	str	r0, [r7, #36]	; 0x24
 8005978:	e008      	b.n	800598c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d105      	bne.n	800598c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005980:	2200      	movs	r2, #0
 8005982:	68b9      	ldr	r1, [r7, #8]
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f000 faf2 	bl	8005f6e <xQueueGenericCreate>
 800598a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00c      	beq.n	80059ac <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <osMessageQueueNew+0xf0>
        name = attr->name;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	61fb      	str	r3, [r7, #28]
 800599e:	e001      	b.n	80059a4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80059a0:	2300      	movs	r3, #0
 80059a2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80059a4:	69f9      	ldr	r1, [r7, #28]
 80059a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059a8:	f000 ff82 	bl	80068b0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3728      	adds	r7, #40	; 0x28
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	200002bc 	.word	0x200002bc

080059bc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80059bc:	b580      	push	{r7, lr}
 80059be:	b08a      	sub	sp, #40	; 0x28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	603b      	str	r3, [r7, #0]
 80059c8:	4613      	mov	r3, r2
 80059ca:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80059d0:	2300      	movs	r3, #0
 80059d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059d4:	f3ef 8305 	mrs	r3, IPSR
 80059d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80059da:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10f      	bne.n	8005a00 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059e0:	f3ef 8310 	mrs	r3, PRIMASK
 80059e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d109      	bne.n	8005a00 <osMessageQueuePut+0x44>
 80059ec:	4b2b      	ldr	r3, [pc, #172]	; (8005a9c <osMessageQueuePut+0xe0>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d12e      	bne.n	8005a52 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80059f4:	f3ef 8311 	mrs	r3, BASEPRI
 80059f8:	617b      	str	r3, [r7, #20]
  return(result);
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d028      	beq.n	8005a52 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d005      	beq.n	8005a12 <osMessageQueuePut+0x56>
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <osMessageQueuePut+0x56>
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8005a12:	f06f 0303 	mvn.w	r3, #3
 8005a16:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005a18:	e039      	b.n	8005a8e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005a1e:	f107 0210 	add.w	r2, r7, #16
 8005a22:	2300      	movs	r3, #0
 8005a24:	68b9      	ldr	r1, [r7, #8]
 8005a26:	6a38      	ldr	r0, [r7, #32]
 8005a28:	f000 fc00 	bl	800622c <xQueueGenericSendFromISR>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d003      	beq.n	8005a3a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8005a32:	f06f 0302 	mvn.w	r3, #2
 8005a36:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005a38:	e029      	b.n	8005a8e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d026      	beq.n	8005a8e <osMessageQueuePut+0xd2>
 8005a40:	4b17      	ldr	r3, [pc, #92]	; (8005aa0 <osMessageQueuePut+0xe4>)
 8005a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a46:	601a      	str	r2, [r3, #0]
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005a50:	e01d      	b.n	8005a8e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <osMessageQueuePut+0xa2>
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d103      	bne.n	8005a66 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8005a5e:	f06f 0303 	mvn.w	r3, #3
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24
 8005a64:	e014      	b.n	8005a90 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005a66:	2300      	movs	r3, #0
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	68b9      	ldr	r1, [r7, #8]
 8005a6c:	6a38      	ldr	r0, [r7, #32]
 8005a6e:	f000 fadf 	bl	8006030 <xQueueGenericSend>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d00b      	beq.n	8005a90 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8005a7e:	f06f 0301 	mvn.w	r3, #1
 8005a82:	627b      	str	r3, [r7, #36]	; 0x24
 8005a84:	e004      	b.n	8005a90 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8005a86:	f06f 0302 	mvn.w	r3, #2
 8005a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a8c:	e000      	b.n	8005a90 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005a8e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3728      	adds	r7, #40	; 0x28
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	200002bc 	.word	0x200002bc
 8005aa0:	e000ed04 	.word	0xe000ed04

08005aa4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b08a      	sub	sp, #40	; 0x28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
 8005ab0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005aba:	f3ef 8305 	mrs	r3, IPSR
 8005abe:	61fb      	str	r3, [r7, #28]
  return(result);
 8005ac0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10f      	bne.n	8005ae6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8005aca:	61bb      	str	r3, [r7, #24]
  return(result);
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d109      	bne.n	8005ae6 <osMessageQueueGet+0x42>
 8005ad2:	4b2b      	ldr	r3, [pc, #172]	; (8005b80 <osMessageQueueGet+0xdc>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d12e      	bne.n	8005b38 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ada:	f3ef 8311 	mrs	r3, BASEPRI
 8005ade:	617b      	str	r3, [r7, #20]
  return(result);
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d028      	beq.n	8005b38 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d005      	beq.n	8005af8 <osMessageQueueGet+0x54>
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d002      	beq.n	8005af8 <osMessageQueueGet+0x54>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8005af8:	f06f 0303 	mvn.w	r3, #3
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005afe:	e038      	b.n	8005b72 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8005b00:	2300      	movs	r3, #0
 8005b02:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005b04:	f107 0310 	add.w	r3, r7, #16
 8005b08:	461a      	mov	r2, r3
 8005b0a:	68b9      	ldr	r1, [r7, #8]
 8005b0c:	6a38      	ldr	r0, [r7, #32]
 8005b0e:	f000 fd05 	bl	800651c <xQueueReceiveFromISR>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d003      	beq.n	8005b20 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8005b18:	f06f 0302 	mvn.w	r3, #2
 8005b1c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b1e:	e028      	b.n	8005b72 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d025      	beq.n	8005b72 <osMessageQueueGet+0xce>
 8005b26:	4b17      	ldr	r3, [pc, #92]	; (8005b84 <osMessageQueueGet+0xe0>)
 8005b28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b36:	e01c      	b.n	8005b72 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d002      	beq.n	8005b44 <osMessageQueueGet+0xa0>
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d103      	bne.n	8005b4c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8005b44:	f06f 0303 	mvn.w	r3, #3
 8005b48:	627b      	str	r3, [r7, #36]	; 0x24
 8005b4a:	e013      	b.n	8005b74 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	68b9      	ldr	r1, [r7, #8]
 8005b50:	6a38      	ldr	r0, [r7, #32]
 8005b52:	f000 fc03 	bl	800635c <xQueueReceive>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d00b      	beq.n	8005b74 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8005b62:	f06f 0301 	mvn.w	r3, #1
 8005b66:	627b      	str	r3, [r7, #36]	; 0x24
 8005b68:	e004      	b.n	8005b74 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8005b6a:	f06f 0302 	mvn.w	r3, #2
 8005b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b70:	e000      	b.n	8005b74 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b72:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3728      	adds	r7, #40	; 0x28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	200002bc 	.word	0x200002bc
 8005b84:	e000ed04 	.word	0xe000ed04

08005b88 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b088      	sub	sp, #32
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d102      	bne.n	8005ba0 <osMessageQueueGetCount+0x18>
    count = 0U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	61fb      	str	r3, [r7, #28]
 8005b9e:	e01e      	b.n	8005bde <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ba0:	f3ef 8305 	mrs	r3, IPSR
 8005ba4:	617b      	str	r3, [r7, #20]
  return(result);
 8005ba6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10f      	bne.n	8005bcc <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bac:	f3ef 8310 	mrs	r3, PRIMASK
 8005bb0:	613b      	str	r3, [r7, #16]
  return(result);
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d109      	bne.n	8005bcc <osMessageQueueGetCount+0x44>
 8005bb8:	4b0b      	ldr	r3, [pc, #44]	; (8005be8 <osMessageQueueGetCount+0x60>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d10a      	bne.n	8005bd6 <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005bc0:	f3ef 8311 	mrs	r3, BASEPRI
 8005bc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d004      	beq.n	8005bd6 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8005bcc:	69b8      	ldr	r0, [r7, #24]
 8005bce:	f000 fd43 	bl	8006658 <uxQueueMessagesWaitingFromISR>
 8005bd2:	61f8      	str	r0, [r7, #28]
 8005bd4:	e003      	b.n	8005bde <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8005bd6:	69b8      	ldr	r0, [r7, #24]
 8005bd8:	f000 fd20 	bl	800661c <uxQueueMessagesWaiting>
 8005bdc:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8005bde:	69fb      	ldr	r3, [r7, #28]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3720      	adds	r7, #32
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	200002bc 	.word	0x200002bc

08005bec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4a06      	ldr	r2, [pc, #24]	; (8005c14 <vApplicationGetIdleTaskMemory+0x28>)
 8005bfc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	4a05      	ldr	r2, [pc, #20]	; (8005c18 <vApplicationGetIdleTaskMemory+0x2c>)
 8005c02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2280      	movs	r2, #128	; 0x80
 8005c08:	601a      	str	r2, [r3, #0]
}
 8005c0a:	bf00      	nop
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bc80      	pop	{r7}
 8005c12:	4770      	bx	lr
 8005c14:	200002c0 	.word	0x200002c0
 8005c18:	2000038c 	.word	0x2000038c

08005c1c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4a07      	ldr	r2, [pc, #28]	; (8005c48 <vApplicationGetTimerTaskMemory+0x2c>)
 8005c2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	4a06      	ldr	r2, [pc, #24]	; (8005c4c <vApplicationGetTimerTaskMemory+0x30>)
 8005c32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c3a:	601a      	str	r2, [r3, #0]
}
 8005c3c:	bf00      	nop
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bc80      	pop	{r7}
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	2000058c 	.word	0x2000058c
 8005c4c:	20000658 	.word	0x20000658

08005c50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f103 0208 	add.w	r2, r3, #8
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f04f 32ff 	mov.w	r2, #4294967295
 8005c68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f103 0208 	add.w	r2, r3, #8
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f103 0208 	add.w	r2, r3, #8
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bc80      	pop	{r7}
 8005c8c:	4770      	bx	lr

08005c8e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bc80      	pop	{r7}
 8005ca4:	4770      	bx	lr

08005ca6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b085      	sub	sp, #20
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	689a      	ldr	r2, [r3, #8]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	1c5a      	adds	r2, r3, #1
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	601a      	str	r2, [r3, #0]
}
 8005ce2:	bf00      	nop
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bc80      	pop	{r7}
 8005cea:	4770      	bx	lr

08005cec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d02:	d103      	bne.n	8005d0c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	e00c      	b.n	8005d26 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	3308      	adds	r3, #8
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	e002      	b.n	8005d1a <vListInsert+0x2e>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	60fb      	str	r3, [r7, #12]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d2f6      	bcs.n	8005d14 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	1c5a      	adds	r2, r3, #1
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	601a      	str	r2, [r3, #0]
}
 8005d52:	bf00      	nop
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bc80      	pop	{r7}
 8005d5a:	4770      	bx	lr

08005d5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6892      	ldr	r2, [r2, #8]
 8005d72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6852      	ldr	r2, [r2, #4]
 8005d7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d103      	bne.n	8005d90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	1e5a      	subs	r2, r3, #1
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bc80      	pop	{r7}
 8005dac:	4770      	bx	lr
	...

08005db0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10a      	bne.n	8005dda <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005dd6:	bf00      	nop
 8005dd8:	e7fe      	b.n	8005dd8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005dda:	f002 fac7 	bl	800836c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de6:	68f9      	ldr	r1, [r7, #12]
 8005de8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005dea:	fb01 f303 	mul.w	r3, r1, r3
 8005dee:	441a      	add	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	68f9      	ldr	r1, [r7, #12]
 8005e0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e10:	fb01 f303 	mul.w	r3, r1, r3
 8005e14:	441a      	add	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	22ff      	movs	r2, #255	; 0xff
 8005e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	22ff      	movs	r2, #255	; 0xff
 8005e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d114      	bne.n	8005e5a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d01a      	beq.n	8005e6e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	3310      	adds	r3, #16
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f001 fa13 	bl	8007268 <xTaskRemoveFromEventList>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d012      	beq.n	8005e6e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e48:	4b0c      	ldr	r3, [pc, #48]	; (8005e7c <xQueueGenericReset+0xcc>)
 8005e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	e009      	b.n	8005e6e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	3310      	adds	r3, #16
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7ff fef6 	bl	8005c50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	3324      	adds	r3, #36	; 0x24
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7ff fef1 	bl	8005c50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e6e:	f002 faad 	bl	80083cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e72:	2301      	movs	r3, #1
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	e000ed04 	.word	0xe000ed04

08005e80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b08e      	sub	sp, #56	; 0x38
 8005e84:	af02      	add	r7, sp, #8
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
 8005e8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10a      	bne.n	8005eaa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ea6:	bf00      	nop
 8005ea8:	e7fe      	b.n	8005ea8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10a      	bne.n	8005ec6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ec2:	bf00      	nop
 8005ec4:	e7fe      	b.n	8005ec4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <xQueueGenericCreateStatic+0x52>
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <xQueueGenericCreateStatic+0x56>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e000      	b.n	8005ed8 <xQueueGenericCreateStatic+0x58>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10a      	bne.n	8005ef2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee0:	f383 8811 	msr	BASEPRI, r3
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	623b      	str	r3, [r7, #32]
}
 8005eee:	bf00      	nop
 8005ef0:	e7fe      	b.n	8005ef0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d102      	bne.n	8005efe <xQueueGenericCreateStatic+0x7e>
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <xQueueGenericCreateStatic+0x82>
 8005efe:	2301      	movs	r3, #1
 8005f00:	e000      	b.n	8005f04 <xQueueGenericCreateStatic+0x84>
 8005f02:	2300      	movs	r3, #0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d10a      	bne.n	8005f1e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0c:	f383 8811 	msr	BASEPRI, r3
 8005f10:	f3bf 8f6f 	isb	sy
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	61fb      	str	r3, [r7, #28]
}
 8005f1a:	bf00      	nop
 8005f1c:	e7fe      	b.n	8005f1c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f1e:	2350      	movs	r3, #80	; 0x50
 8005f20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2b50      	cmp	r3, #80	; 0x50
 8005f26:	d00a      	beq.n	8005f3e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2c:	f383 8811 	msr	BASEPRI, r3
 8005f30:	f3bf 8f6f 	isb	sy
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	61bb      	str	r3, [r7, #24]
}
 8005f3a:	bf00      	nop
 8005f3c:	e7fe      	b.n	8005f3c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00d      	beq.n	8005f64 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f50:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	68b9      	ldr	r1, [r7, #8]
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f000 f843 	bl	8005fea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3730      	adds	r7, #48	; 0x30
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b08a      	sub	sp, #40	; 0x28
 8005f72:	af02      	add	r7, sp, #8
 8005f74:	60f8      	str	r0, [r7, #12]
 8005f76:	60b9      	str	r1, [r7, #8]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10a      	bne.n	8005f98 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	613b      	str	r3, [r7, #16]
}
 8005f94:	bf00      	nop
 8005f96:	e7fe      	b.n	8005f96 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d102      	bne.n	8005fa4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	61fb      	str	r3, [r7, #28]
 8005fa2:	e004      	b.n	8005fae <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	fb02 f303 	mul.w	r3, r2, r3
 8005fac:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	3350      	adds	r3, #80	; 0x50
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f002 fada 	bl	800856c <pvPortMalloc>
 8005fb8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00f      	beq.n	8005fe0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	3350      	adds	r3, #80	; 0x50
 8005fc4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fce:	79fa      	ldrb	r2, [r7, #7]
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	68b9      	ldr	r1, [r7, #8]
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 f805 	bl	8005fea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005fe0:	69bb      	ldr	r3, [r7, #24]
	}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3720      	adds	r7, #32
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b084      	sub	sp, #16
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	60f8      	str	r0, [r7, #12]
 8005ff2:	60b9      	str	r1, [r7, #8]
 8005ff4:	607a      	str	r2, [r7, #4]
 8005ff6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d103      	bne.n	8006006 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	e002      	b.n	800600c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006018:	2101      	movs	r1, #1
 800601a:	69b8      	ldr	r0, [r7, #24]
 800601c:	f7ff fec8 	bl	8005db0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	78fa      	ldrb	r2, [r7, #3]
 8006024:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006028:	bf00      	nop
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b08e      	sub	sp, #56	; 0x38
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
 800603c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800603e:	2300      	movs	r3, #0
 8006040:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10a      	bne.n	8006062 <xQueueGenericSend+0x32>
	__asm volatile
 800604c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800605e:	bf00      	nop
 8006060:	e7fe      	b.n	8006060 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d103      	bne.n	8006070 <xQueueGenericSend+0x40>
 8006068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <xQueueGenericSend+0x44>
 8006070:	2301      	movs	r3, #1
 8006072:	e000      	b.n	8006076 <xQueueGenericSend+0x46>
 8006074:	2300      	movs	r3, #0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10a      	bne.n	8006090 <xQueueGenericSend+0x60>
	__asm volatile
 800607a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607e:	f383 8811 	msr	BASEPRI, r3
 8006082:	f3bf 8f6f 	isb	sy
 8006086:	f3bf 8f4f 	dsb	sy
 800608a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800608c:	bf00      	nop
 800608e:	e7fe      	b.n	800608e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2b02      	cmp	r3, #2
 8006094:	d103      	bne.n	800609e <xQueueGenericSend+0x6e>
 8006096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800609a:	2b01      	cmp	r3, #1
 800609c:	d101      	bne.n	80060a2 <xQueueGenericSend+0x72>
 800609e:	2301      	movs	r3, #1
 80060a0:	e000      	b.n	80060a4 <xQueueGenericSend+0x74>
 80060a2:	2300      	movs	r3, #0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10a      	bne.n	80060be <xQueueGenericSend+0x8e>
	__asm volatile
 80060a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ac:	f383 8811 	msr	BASEPRI, r3
 80060b0:	f3bf 8f6f 	isb	sy
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	623b      	str	r3, [r7, #32]
}
 80060ba:	bf00      	nop
 80060bc:	e7fe      	b.n	80060bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060be:	f001 fa99 	bl	80075f4 <xTaskGetSchedulerState>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d102      	bne.n	80060ce <xQueueGenericSend+0x9e>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <xQueueGenericSend+0xa2>
 80060ce:	2301      	movs	r3, #1
 80060d0:	e000      	b.n	80060d4 <xQueueGenericSend+0xa4>
 80060d2:	2300      	movs	r3, #0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10a      	bne.n	80060ee <xQueueGenericSend+0xbe>
	__asm volatile
 80060d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	61fb      	str	r3, [r7, #28]
}
 80060ea:	bf00      	nop
 80060ec:	e7fe      	b.n	80060ec <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060ee:	f002 f93d 	bl	800836c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d302      	bcc.n	8006104 <xQueueGenericSend+0xd4>
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b02      	cmp	r3, #2
 8006102:	d129      	bne.n	8006158 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	68b9      	ldr	r1, [r7, #8]
 8006108:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800610a:	f000 fac0 	bl	800668e <prvCopyDataToQueue>
 800610e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006114:	2b00      	cmp	r3, #0
 8006116:	d010      	beq.n	800613a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611a:	3324      	adds	r3, #36	; 0x24
 800611c:	4618      	mov	r0, r3
 800611e:	f001 f8a3 	bl	8007268 <xTaskRemoveFromEventList>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d013      	beq.n	8006150 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006128:	4b3f      	ldr	r3, [pc, #252]	; (8006228 <xQueueGenericSend+0x1f8>)
 800612a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	e00a      	b.n	8006150 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800613a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613c:	2b00      	cmp	r3, #0
 800613e:	d007      	beq.n	8006150 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006140:	4b39      	ldr	r3, [pc, #228]	; (8006228 <xQueueGenericSend+0x1f8>)
 8006142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006146:	601a      	str	r2, [r3, #0]
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006150:	f002 f93c 	bl	80083cc <vPortExitCritical>
				return pdPASS;
 8006154:	2301      	movs	r3, #1
 8006156:	e063      	b.n	8006220 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d103      	bne.n	8006166 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800615e:	f002 f935 	bl	80083cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006162:	2300      	movs	r3, #0
 8006164:	e05c      	b.n	8006220 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006168:	2b00      	cmp	r3, #0
 800616a:	d106      	bne.n	800617a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800616c:	f107 0314 	add.w	r3, r7, #20
 8006170:	4618      	mov	r0, r3
 8006172:	f001 f8dd 	bl	8007330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006176:	2301      	movs	r3, #1
 8006178:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800617a:	f002 f927 	bl	80083cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800617e:	f000 fe47 	bl	8006e10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006182:	f002 f8f3 	bl	800836c <vPortEnterCritical>
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800618c:	b25b      	sxtb	r3, r3
 800618e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006192:	d103      	bne.n	800619c <xQueueGenericSend+0x16c>
 8006194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061a2:	b25b      	sxtb	r3, r3
 80061a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a8:	d103      	bne.n	80061b2 <xQueueGenericSend+0x182>
 80061aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061b2:	f002 f90b 	bl	80083cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061b6:	1d3a      	adds	r2, r7, #4
 80061b8:	f107 0314 	add.w	r3, r7, #20
 80061bc:	4611      	mov	r1, r2
 80061be:	4618      	mov	r0, r3
 80061c0:	f001 f8cc 	bl	800735c <xTaskCheckForTimeOut>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d124      	bne.n	8006214 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80061ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061cc:	f000 fb57 	bl	800687e <prvIsQueueFull>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d018      	beq.n	8006208 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	3310      	adds	r3, #16
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	4611      	mov	r1, r2
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 fff2 	bl	80071c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80061e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061e6:	f000 fae2 	bl	80067ae <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80061ea:	f000 fe1f 	bl	8006e2c <xTaskResumeAll>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f47f af7c 	bne.w	80060ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80061f6:	4b0c      	ldr	r3, [pc, #48]	; (8006228 <xQueueGenericSend+0x1f8>)
 80061f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061fc:	601a      	str	r2, [r3, #0]
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	e772      	b.n	80060ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006208:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800620a:	f000 fad0 	bl	80067ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800620e:	f000 fe0d 	bl	8006e2c <xTaskResumeAll>
 8006212:	e76c      	b.n	80060ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006214:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006216:	f000 faca 	bl	80067ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800621a:	f000 fe07 	bl	8006e2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800621e:	2300      	movs	r3, #0
		}
	}
}
 8006220:	4618      	mov	r0, r3
 8006222:	3738      	adds	r7, #56	; 0x38
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	e000ed04 	.word	0xe000ed04

0800622c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b08e      	sub	sp, #56	; 0x38
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
 8006238:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10a      	bne.n	800625a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006256:	bf00      	nop
 8006258:	e7fe      	b.n	8006258 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d103      	bne.n	8006268 <xQueueGenericSendFromISR+0x3c>
 8006260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <xQueueGenericSendFromISR+0x40>
 8006268:	2301      	movs	r3, #1
 800626a:	e000      	b.n	800626e <xQueueGenericSendFromISR+0x42>
 800626c:	2300      	movs	r3, #0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10a      	bne.n	8006288 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	623b      	str	r3, [r7, #32]
}
 8006284:	bf00      	nop
 8006286:	e7fe      	b.n	8006286 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	2b02      	cmp	r3, #2
 800628c:	d103      	bne.n	8006296 <xQueueGenericSendFromISR+0x6a>
 800628e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006292:	2b01      	cmp	r3, #1
 8006294:	d101      	bne.n	800629a <xQueueGenericSendFromISR+0x6e>
 8006296:	2301      	movs	r3, #1
 8006298:	e000      	b.n	800629c <xQueueGenericSendFromISR+0x70>
 800629a:	2300      	movs	r3, #0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10a      	bne.n	80062b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	61fb      	str	r3, [r7, #28]
}
 80062b2:	bf00      	nop
 80062b4:	e7fe      	b.n	80062b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062b6:	f002 f91b 	bl	80084f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80062ba:	f3ef 8211 	mrs	r2, BASEPRI
 80062be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	61ba      	str	r2, [r7, #24]
 80062d0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80062d2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062de:	429a      	cmp	r2, r3
 80062e0:	d302      	bcc.n	80062e8 <xQueueGenericSendFromISR+0xbc>
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d12c      	bne.n	8006342 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80062e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	68b9      	ldr	r1, [r7, #8]
 80062f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062f8:	f000 f9c9 	bl	800668e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80062fc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006304:	d112      	bne.n	800632c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	2b00      	cmp	r3, #0
 800630c:	d016      	beq.n	800633c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800630e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006310:	3324      	adds	r3, #36	; 0x24
 8006312:	4618      	mov	r0, r3
 8006314:	f000 ffa8 	bl	8007268 <xTaskRemoveFromEventList>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00e      	beq.n	800633c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00b      	beq.n	800633c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	601a      	str	r2, [r3, #0]
 800632a:	e007      	b.n	800633c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800632c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006330:	3301      	adds	r3, #1
 8006332:	b2db      	uxtb	r3, r3
 8006334:	b25a      	sxtb	r2, r3
 8006336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800633c:	2301      	movs	r3, #1
 800633e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006340:	e001      	b.n	8006346 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006342:	2300      	movs	r3, #0
 8006344:	637b      	str	r3, [r7, #52]	; 0x34
 8006346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006348:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006350:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006354:	4618      	mov	r0, r3
 8006356:	3738      	adds	r7, #56	; 0x38
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b08c      	sub	sp, #48	; 0x30
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006368:	2300      	movs	r3, #0
 800636a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10a      	bne.n	800638c <xQueueReceive+0x30>
	__asm volatile
 8006376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637a:	f383 8811 	msr	BASEPRI, r3
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	623b      	str	r3, [r7, #32]
}
 8006388:	bf00      	nop
 800638a:	e7fe      	b.n	800638a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d103      	bne.n	800639a <xQueueReceive+0x3e>
 8006392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <xQueueReceive+0x42>
 800639a:	2301      	movs	r3, #1
 800639c:	e000      	b.n	80063a0 <xQueueReceive+0x44>
 800639e:	2300      	movs	r3, #0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10a      	bne.n	80063ba <xQueueReceive+0x5e>
	__asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	61fb      	str	r3, [r7, #28]
}
 80063b6:	bf00      	nop
 80063b8:	e7fe      	b.n	80063b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063ba:	f001 f91b 	bl	80075f4 <xTaskGetSchedulerState>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d102      	bne.n	80063ca <xQueueReceive+0x6e>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <xQueueReceive+0x72>
 80063ca:	2301      	movs	r3, #1
 80063cc:	e000      	b.n	80063d0 <xQueueReceive+0x74>
 80063ce:	2300      	movs	r3, #0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10a      	bne.n	80063ea <xQueueReceive+0x8e>
	__asm volatile
 80063d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	61bb      	str	r3, [r7, #24]
}
 80063e6:	bf00      	nop
 80063e8:	e7fe      	b.n	80063e8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80063ea:	f001 ffbf 	bl	800836c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d01f      	beq.n	800643a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80063fa:	68b9      	ldr	r1, [r7, #8]
 80063fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063fe:	f000 f9b0 	bl	8006762 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006404:	1e5a      	subs	r2, r3, #1
 8006406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006408:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800640a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00f      	beq.n	8006432 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006414:	3310      	adds	r3, #16
 8006416:	4618      	mov	r0, r3
 8006418:	f000 ff26 	bl	8007268 <xTaskRemoveFromEventList>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d007      	beq.n	8006432 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006422:	4b3d      	ldr	r3, [pc, #244]	; (8006518 <xQueueReceive+0x1bc>)
 8006424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006428:	601a      	str	r2, [r3, #0]
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006432:	f001 ffcb 	bl	80083cc <vPortExitCritical>
				return pdPASS;
 8006436:	2301      	movs	r3, #1
 8006438:	e069      	b.n	800650e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d103      	bne.n	8006448 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006440:	f001 ffc4 	bl	80083cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006444:	2300      	movs	r3, #0
 8006446:	e062      	b.n	800650e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644a:	2b00      	cmp	r3, #0
 800644c:	d106      	bne.n	800645c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800644e:	f107 0310 	add.w	r3, r7, #16
 8006452:	4618      	mov	r0, r3
 8006454:	f000 ff6c 	bl	8007330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006458:	2301      	movs	r3, #1
 800645a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800645c:	f001 ffb6 	bl	80083cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006460:	f000 fcd6 	bl	8006e10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006464:	f001 ff82 	bl	800836c <vPortEnterCritical>
 8006468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800646e:	b25b      	sxtb	r3, r3
 8006470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006474:	d103      	bne.n	800647e <xQueueReceive+0x122>
 8006476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800647e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006480:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006484:	b25b      	sxtb	r3, r3
 8006486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648a:	d103      	bne.n	8006494 <xQueueReceive+0x138>
 800648c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006494:	f001 ff9a 	bl	80083cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006498:	1d3a      	adds	r2, r7, #4
 800649a:	f107 0310 	add.w	r3, r7, #16
 800649e:	4611      	mov	r1, r2
 80064a0:	4618      	mov	r0, r3
 80064a2:	f000 ff5b 	bl	800735c <xTaskCheckForTimeOut>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d123      	bne.n	80064f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064ae:	f000 f9d0 	bl	8006852 <prvIsQueueEmpty>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d017      	beq.n	80064e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ba:	3324      	adds	r3, #36	; 0x24
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	4611      	mov	r1, r2
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 fe81 	bl	80071c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064c8:	f000 f971 	bl	80067ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064cc:	f000 fcae 	bl	8006e2c <xTaskResumeAll>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d189      	bne.n	80063ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80064d6:	4b10      	ldr	r3, [pc, #64]	; (8006518 <xQueueReceive+0x1bc>)
 80064d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	e780      	b.n	80063ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80064e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064ea:	f000 f960 	bl	80067ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064ee:	f000 fc9d 	bl	8006e2c <xTaskResumeAll>
 80064f2:	e77a      	b.n	80063ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80064f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064f6:	f000 f95a 	bl	80067ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064fa:	f000 fc97 	bl	8006e2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006500:	f000 f9a7 	bl	8006852 <prvIsQueueEmpty>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	f43f af6f 	beq.w	80063ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800650c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800650e:	4618      	mov	r0, r3
 8006510:	3730      	adds	r7, #48	; 0x30
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	e000ed04 	.word	0xe000ed04

0800651c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b08e      	sub	sp, #56	; 0x38
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800652c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10a      	bne.n	8006548 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	623b      	str	r3, [r7, #32]
}
 8006544:	bf00      	nop
 8006546:	e7fe      	b.n	8006546 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d103      	bne.n	8006556 <xQueueReceiveFromISR+0x3a>
 800654e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <xQueueReceiveFromISR+0x3e>
 8006556:	2301      	movs	r3, #1
 8006558:	e000      	b.n	800655c <xQueueReceiveFromISR+0x40>
 800655a:	2300      	movs	r3, #0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10a      	bne.n	8006576 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006564:	f383 8811 	msr	BASEPRI, r3
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	61fb      	str	r3, [r7, #28]
}
 8006572:	bf00      	nop
 8006574:	e7fe      	b.n	8006574 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006576:	f001 ffbb 	bl	80084f0 <vPortValidateInterruptPriority>
	__asm volatile
 800657a:	f3ef 8211 	mrs	r2, BASEPRI
 800657e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	61ba      	str	r2, [r7, #24]
 8006590:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006592:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006594:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800659c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d02f      	beq.n	8006602 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80065a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065ac:	68b9      	ldr	r1, [r7, #8]
 80065ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065b0:	f000 f8d7 	bl	8006762 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b6:	1e5a      	subs	r2, r3, #1
 80065b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80065bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80065c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c4:	d112      	bne.n	80065ec <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d016      	beq.n	80065fc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d0:	3310      	adds	r3, #16
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 fe48 	bl	8007268 <xTaskRemoveFromEventList>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00e      	beq.n	80065fc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00b      	beq.n	80065fc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	e007      	b.n	80065fc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80065ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065f0:	3301      	adds	r3, #1
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	b25a      	sxtb	r2, r3
 80065f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80065fc:	2301      	movs	r3, #1
 80065fe:	637b      	str	r3, [r7, #52]	; 0x34
 8006600:	e001      	b.n	8006606 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006602:	2300      	movs	r3, #0
 8006604:	637b      	str	r3, [r7, #52]	; 0x34
 8006606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006608:	613b      	str	r3, [r7, #16]
	__asm volatile
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	f383 8811 	msr	BASEPRI, r3
}
 8006610:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006614:	4618      	mov	r0, r3
 8006616:	3738      	adds	r7, #56	; 0x38
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10a      	bne.n	8006640 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	60bb      	str	r3, [r7, #8]
}
 800663c:	bf00      	nop
 800663e:	e7fe      	b.n	800663e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006640:	f001 fe94 	bl	800836c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006648:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800664a:	f001 febf 	bl	80083cc <vPortExitCritical>

	return uxReturn;
 800664e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10a      	bne.n	800667c <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 8006666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666a:	f383 8811 	msr	BASEPRI, r3
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	60bb      	str	r3, [r7, #8]
}
 8006678:	bf00      	nop
 800667a:	e7fe      	b.n	800667a <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006680:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8006682:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006684:	4618      	mov	r0, r3
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	bc80      	pop	{r7}
 800668c:	4770      	bx	lr

0800668e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b086      	sub	sp, #24
 8006692:	af00      	add	r7, sp, #0
 8006694:	60f8      	str	r0, [r7, #12]
 8006696:	60b9      	str	r1, [r7, #8]
 8006698:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800669a:	2300      	movs	r3, #0
 800669c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10d      	bne.n	80066c8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d14d      	bne.n	8006750 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	4618      	mov	r0, r3
 80066ba:	f000 ffb9 	bl	8007630 <xTaskPriorityDisinherit>
 80066be:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	605a      	str	r2, [r3, #4]
 80066c6:	e043      	b.n	8006750 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d119      	bne.n	8006702 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6898      	ldr	r0, [r3, #8]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d6:	461a      	mov	r2, r3
 80066d8:	68b9      	ldr	r1, [r7, #8]
 80066da:	f002 f945 	bl	8008968 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	689a      	ldr	r2, [r3, #8]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	441a      	add	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	689a      	ldr	r2, [r3, #8]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d32b      	bcc.n	8006750 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	609a      	str	r2, [r3, #8]
 8006700:	e026      	b.n	8006750 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	68d8      	ldr	r0, [r3, #12]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670a:	461a      	mov	r2, r3
 800670c:	68b9      	ldr	r1, [r7, #8]
 800670e:	f002 f92b 	bl	8008968 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	68da      	ldr	r2, [r3, #12]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671a:	425b      	negs	r3, r3
 800671c:	441a      	add	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	68da      	ldr	r2, [r3, #12]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	429a      	cmp	r2, r3
 800672c:	d207      	bcs.n	800673e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006736:	425b      	negs	r3, r3
 8006738:	441a      	add	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2b02      	cmp	r3, #2
 8006742:	d105      	bne.n	8006750 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d002      	beq.n	8006750 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	3b01      	subs	r3, #1
 800674e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006758:	697b      	ldr	r3, [r7, #20]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b082      	sub	sp, #8
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006770:	2b00      	cmp	r3, #0
 8006772:	d018      	beq.n	80067a6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	68da      	ldr	r2, [r3, #12]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677c:	441a      	add	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68da      	ldr	r2, [r3, #12]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	429a      	cmp	r2, r3
 800678c:	d303      	bcc.n	8006796 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	68d9      	ldr	r1, [r3, #12]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679e:	461a      	mov	r2, r3
 80067a0:	6838      	ldr	r0, [r7, #0]
 80067a2:	f002 f8e1 	bl	8008968 <memcpy>
	}
}
 80067a6:	bf00      	nop
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b084      	sub	sp, #16
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067b6:	f001 fdd9 	bl	800836c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067c0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067c2:	e011      	b.n	80067e8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d012      	beq.n	80067f2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	3324      	adds	r3, #36	; 0x24
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 fd49 	bl	8007268 <xTaskRemoveFromEventList>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d001      	beq.n	80067e0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80067dc:	f000 fe20 	bl	8007420 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80067e0:	7bfb      	ldrb	r3, [r7, #15]
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	dce9      	bgt.n	80067c4 <prvUnlockQueue+0x16>
 80067f0:	e000      	b.n	80067f4 <prvUnlockQueue+0x46>
					break;
 80067f2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	22ff      	movs	r2, #255	; 0xff
 80067f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80067fc:	f001 fde6 	bl	80083cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006800:	f001 fdb4 	bl	800836c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800680a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800680c:	e011      	b.n	8006832 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d012      	beq.n	800683c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	3310      	adds	r3, #16
 800681a:	4618      	mov	r0, r3
 800681c:	f000 fd24 	bl	8007268 <xTaskRemoveFromEventList>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006826:	f000 fdfb 	bl	8007420 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800682a:	7bbb      	ldrb	r3, [r7, #14]
 800682c:	3b01      	subs	r3, #1
 800682e:	b2db      	uxtb	r3, r3
 8006830:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006832:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006836:	2b00      	cmp	r3, #0
 8006838:	dce9      	bgt.n	800680e <prvUnlockQueue+0x60>
 800683a:	e000      	b.n	800683e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800683c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	22ff      	movs	r2, #255	; 0xff
 8006842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006846:	f001 fdc1 	bl	80083cc <vPortExitCritical>
}
 800684a:	bf00      	nop
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b084      	sub	sp, #16
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800685a:	f001 fd87 	bl	800836c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006862:	2b00      	cmp	r3, #0
 8006864:	d102      	bne.n	800686c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006866:	2301      	movs	r3, #1
 8006868:	60fb      	str	r3, [r7, #12]
 800686a:	e001      	b.n	8006870 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800686c:	2300      	movs	r3, #0
 800686e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006870:	f001 fdac 	bl	80083cc <vPortExitCritical>

	return xReturn;
 8006874:	68fb      	ldr	r3, [r7, #12]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b084      	sub	sp, #16
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006886:	f001 fd71 	bl	800836c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006892:	429a      	cmp	r2, r3
 8006894:	d102      	bne.n	800689c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006896:	2301      	movs	r3, #1
 8006898:	60fb      	str	r3, [r7, #12]
 800689a:	e001      	b.n	80068a0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800689c:	2300      	movs	r3, #0
 800689e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068a0:	f001 fd94 	bl	80083cc <vPortExitCritical>

	return xReturn;
 80068a4:	68fb      	ldr	r3, [r7, #12]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
	...

080068b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068ba:	2300      	movs	r3, #0
 80068bc:	60fb      	str	r3, [r7, #12]
 80068be:	e014      	b.n	80068ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80068c0:	4a0e      	ldr	r2, [pc, #56]	; (80068fc <vQueueAddToRegistry+0x4c>)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10b      	bne.n	80068e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80068cc:	490b      	ldr	r1, [pc, #44]	; (80068fc <vQueueAddToRegistry+0x4c>)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	683a      	ldr	r2, [r7, #0]
 80068d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80068d6:	4a09      	ldr	r2, [pc, #36]	; (80068fc <vQueueAddToRegistry+0x4c>)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	4413      	add	r3, r2
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80068e2:	e006      	b.n	80068f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	3301      	adds	r3, #1
 80068e8:	60fb      	str	r3, [r7, #12]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2b07      	cmp	r3, #7
 80068ee:	d9e7      	bls.n	80068c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80068f0:	bf00      	nop
 80068f2:	bf00      	nop
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bc80      	pop	{r7}
 80068fa:	4770      	bx	lr
 80068fc:	20000a58 	.word	0x20000a58

08006900 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006910:	f001 fd2c 	bl	800836c <vPortEnterCritical>
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800691a:	b25b      	sxtb	r3, r3
 800691c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006920:	d103      	bne.n	800692a <vQueueWaitForMessageRestricted+0x2a>
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006930:	b25b      	sxtb	r3, r3
 8006932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006936:	d103      	bne.n	8006940 <vQueueWaitForMessageRestricted+0x40>
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006940:	f001 fd44 	bl	80083cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006948:	2b00      	cmp	r3, #0
 800694a:	d106      	bne.n	800695a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	3324      	adds	r3, #36	; 0x24
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	68b9      	ldr	r1, [r7, #8]
 8006954:	4618      	mov	r0, r3
 8006956:	f000 fc5b 	bl	8007210 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800695a:	6978      	ldr	r0, [r7, #20]
 800695c:	f7ff ff27 	bl	80067ae <prvUnlockQueue>
	}
 8006960:	bf00      	nop
 8006962:	3718      	adds	r7, #24
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006968:	b580      	push	{r7, lr}
 800696a:	b08e      	sub	sp, #56	; 0x38
 800696c:	af04      	add	r7, sp, #16
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
 8006974:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10a      	bne.n	8006992 <xTaskCreateStatic+0x2a>
	__asm volatile
 800697c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	623b      	str	r3, [r7, #32]
}
 800698e:	bf00      	nop
 8006990:	e7fe      	b.n	8006990 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10a      	bne.n	80069ae <xTaskCreateStatic+0x46>
	__asm volatile
 8006998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699c:	f383 8811 	msr	BASEPRI, r3
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	61fb      	str	r3, [r7, #28]
}
 80069aa:	bf00      	nop
 80069ac:	e7fe      	b.n	80069ac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069ae:	23cc      	movs	r3, #204	; 0xcc
 80069b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	2bcc      	cmp	r3, #204	; 0xcc
 80069b6:	d00a      	beq.n	80069ce <xTaskCreateStatic+0x66>
	__asm volatile
 80069b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	61bb      	str	r3, [r7, #24]
}
 80069ca:	bf00      	nop
 80069cc:	e7fe      	b.n	80069cc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d01e      	beq.n	8006a12 <xTaskCreateStatic+0xaa>
 80069d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d01b      	beq.n	8006a12 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069dc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069e2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	2202      	movs	r2, #2
 80069e8:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069ec:	2300      	movs	r3, #0
 80069ee:	9303      	str	r3, [sp, #12]
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	9302      	str	r3, [sp, #8]
 80069f4:	f107 0314 	add.w	r3, r7, #20
 80069f8:	9301      	str	r3, [sp, #4]
 80069fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	68b9      	ldr	r1, [r7, #8]
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 f851 	bl	8006aac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a0c:	f000 f8ec 	bl	8006be8 <prvAddNewTaskToReadyList>
 8006a10:	e001      	b.n	8006a16 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006a12:	2300      	movs	r3, #0
 8006a14:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a16:	697b      	ldr	r3, [r7, #20]
	}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3728      	adds	r7, #40	; 0x28
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b08c      	sub	sp, #48	; 0x30
 8006a24:	af04      	add	r7, sp, #16
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	603b      	str	r3, [r7, #0]
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a30:	88fb      	ldrh	r3, [r7, #6]
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4618      	mov	r0, r3
 8006a36:	f001 fd99 	bl	800856c <pvPortMalloc>
 8006a3a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00e      	beq.n	8006a60 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006a42:	20cc      	movs	r0, #204	; 0xcc
 8006a44:	f001 fd92 	bl	800856c <pvPortMalloc>
 8006a48:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	631a      	str	r2, [r3, #48]	; 0x30
 8006a56:	e005      	b.n	8006a64 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a58:	6978      	ldr	r0, [r7, #20]
 8006a5a:	f001 fe4b 	bl	80086f4 <vPortFree>
 8006a5e:	e001      	b.n	8006a64 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a60:	2300      	movs	r3, #0
 8006a62:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d017      	beq.n	8006a9a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a72:	88fa      	ldrh	r2, [r7, #6]
 8006a74:	2300      	movs	r3, #0
 8006a76:	9303      	str	r3, [sp, #12]
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	9302      	str	r3, [sp, #8]
 8006a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7e:	9301      	str	r3, [sp, #4]
 8006a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	68b9      	ldr	r1, [r7, #8]
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f000 f80f 	bl	8006aac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a8e:	69f8      	ldr	r0, [r7, #28]
 8006a90:	f000 f8aa 	bl	8006be8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a94:	2301      	movs	r3, #1
 8006a96:	61bb      	str	r3, [r7, #24]
 8006a98:	e002      	b.n	8006aa0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a9e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006aa0:	69bb      	ldr	r3, [r7, #24]
	}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3720      	adds	r7, #32
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
	...

08006aac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b088      	sub	sp, #32
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
 8006ab8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	21a5      	movs	r1, #165	; 0xa5
 8006ac6:	f001 ff5d 	bl	8008984 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006acc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	f023 0307 	bic.w	r3, r3, #7
 8006ae2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	f003 0307 	and.w	r3, r3, #7
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00a      	beq.n	8006b04 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	617b      	str	r3, [r7, #20]
}
 8006b00:	bf00      	nop
 8006b02:	e7fe      	b.n	8006b02 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b04:	2300      	movs	r3, #0
 8006b06:	61fb      	str	r3, [r7, #28]
 8006b08:	e012      	b.n	8006b30 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	4413      	add	r3, r2
 8006b10:	7819      	ldrb	r1, [r3, #0]
 8006b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	4413      	add	r3, r2
 8006b18:	3334      	adds	r3, #52	; 0x34
 8006b1a:	460a      	mov	r2, r1
 8006b1c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	4413      	add	r3, r2
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d006      	beq.n	8006b38 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	61fb      	str	r3, [r7, #28]
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	2b1f      	cmp	r3, #31
 8006b34:	d9e9      	bls.n	8006b0a <prvInitialiseNewTask+0x5e>
 8006b36:	e000      	b.n	8006b3a <prvInitialiseNewTask+0x8e>
		{
			break;
 8006b38:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b44:	2b37      	cmp	r3, #55	; 0x37
 8006b46:	d901      	bls.n	8006b4c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b48:	2337      	movs	r3, #55	; 0x37
 8006b4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b56:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8006b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b60:	3304      	adds	r3, #4
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7ff f893 	bl	8005c8e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6a:	3318      	adds	r3, #24
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7ff f88e 	bl	8005c8e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b86:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9a:	3364      	adds	r3, #100	; 0x64
 8006b9c:	2260      	movs	r2, #96	; 0x60
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f001 feef 	bl	8008984 <memset>
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba8:	4a0c      	ldr	r2, [pc, #48]	; (8006bdc <prvInitialiseNewTask+0x130>)
 8006baa:	669a      	str	r2, [r3, #104]	; 0x68
 8006bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bae:	4a0c      	ldr	r2, [pc, #48]	; (8006be0 <prvInitialiseNewTask+0x134>)
 8006bb0:	66da      	str	r2, [r3, #108]	; 0x6c
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb4:	4a0b      	ldr	r2, [pc, #44]	; (8006be4 <prvInitialiseNewTask+0x138>)
 8006bb6:	671a      	str	r2, [r3, #112]	; 0x70
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	68f9      	ldr	r1, [r7, #12]
 8006bbc:	69b8      	ldr	r0, [r7, #24]
 8006bbe:	f001 fae7 	bl	8008190 <pxPortInitialiseStack>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d002      	beq.n	8006bd4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bd2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bd4:	bf00      	nop
 8006bd6:	3720      	adds	r7, #32
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	08008d20 	.word	0x08008d20
 8006be0:	08008d40 	.word	0x08008d40
 8006be4:	08008d00 	.word	0x08008d00

08006be8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006bf0:	f001 fbbc 	bl	800836c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006bf4:	4b2d      	ldr	r3, [pc, #180]	; (8006cac <prvAddNewTaskToReadyList+0xc4>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	4a2c      	ldr	r2, [pc, #176]	; (8006cac <prvAddNewTaskToReadyList+0xc4>)
 8006bfc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006bfe:	4b2c      	ldr	r3, [pc, #176]	; (8006cb0 <prvAddNewTaskToReadyList+0xc8>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d109      	bne.n	8006c1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c06:	4a2a      	ldr	r2, [pc, #168]	; (8006cb0 <prvAddNewTaskToReadyList+0xc8>)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c0c:	4b27      	ldr	r3, [pc, #156]	; (8006cac <prvAddNewTaskToReadyList+0xc4>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d110      	bne.n	8006c36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c14:	f000 fc28 	bl	8007468 <prvInitialiseTaskLists>
 8006c18:	e00d      	b.n	8006c36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c1a:	4b26      	ldr	r3, [pc, #152]	; (8006cb4 <prvAddNewTaskToReadyList+0xcc>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d109      	bne.n	8006c36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c22:	4b23      	ldr	r3, [pc, #140]	; (8006cb0 <prvAddNewTaskToReadyList+0xc8>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d802      	bhi.n	8006c36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c30:	4a1f      	ldr	r2, [pc, #124]	; (8006cb0 <prvAddNewTaskToReadyList+0xc8>)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c36:	4b20      	ldr	r3, [pc, #128]	; (8006cb8 <prvAddNewTaskToReadyList+0xd0>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	4a1e      	ldr	r2, [pc, #120]	; (8006cb8 <prvAddNewTaskToReadyList+0xd0>)
 8006c3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c40:	4b1d      	ldr	r3, [pc, #116]	; (8006cb8 <prvAddNewTaskToReadyList+0xd0>)
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c4c:	4b1b      	ldr	r3, [pc, #108]	; (8006cbc <prvAddNewTaskToReadyList+0xd4>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d903      	bls.n	8006c5c <prvAddNewTaskToReadyList+0x74>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c58:	4a18      	ldr	r2, [pc, #96]	; (8006cbc <prvAddNewTaskToReadyList+0xd4>)
 8006c5a:	6013      	str	r3, [r2, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c60:	4613      	mov	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4a15      	ldr	r2, [pc, #84]	; (8006cc0 <prvAddNewTaskToReadyList+0xd8>)
 8006c6a:	441a      	add	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	3304      	adds	r3, #4
 8006c70:	4619      	mov	r1, r3
 8006c72:	4610      	mov	r0, r2
 8006c74:	f7ff f817 	bl	8005ca6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c78:	f001 fba8 	bl	80083cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c7c:	4b0d      	ldr	r3, [pc, #52]	; (8006cb4 <prvAddNewTaskToReadyList+0xcc>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00e      	beq.n	8006ca2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c84:	4b0a      	ldr	r3, [pc, #40]	; (8006cb0 <prvAddNewTaskToReadyList+0xc8>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d207      	bcs.n	8006ca2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c92:	4b0c      	ldr	r3, [pc, #48]	; (8006cc4 <prvAddNewTaskToReadyList+0xdc>)
 8006c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c98:	601a      	str	r2, [r3, #0]
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ca2:	bf00      	nop
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	20000f6c 	.word	0x20000f6c
 8006cb0:	20000a98 	.word	0x20000a98
 8006cb4:	20000f78 	.word	0x20000f78
 8006cb8:	20000f88 	.word	0x20000f88
 8006cbc:	20000f74 	.word	0x20000f74
 8006cc0:	20000a9c 	.word	0x20000a9c
 8006cc4:	e000ed04 	.word	0xe000ed04

08006cc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d017      	beq.n	8006d0a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006cda:	4b13      	ldr	r3, [pc, #76]	; (8006d28 <vTaskDelay+0x60>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00a      	beq.n	8006cf8 <vTaskDelay+0x30>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	60bb      	str	r3, [r7, #8]
}
 8006cf4:	bf00      	nop
 8006cf6:	e7fe      	b.n	8006cf6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006cf8:	f000 f88a 	bl	8006e10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fee0 	bl	8007ac4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d04:	f000 f892 	bl	8006e2c <xTaskResumeAll>
 8006d08:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d107      	bne.n	8006d20 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006d10:	4b06      	ldr	r3, [pc, #24]	; (8006d2c <vTaskDelay+0x64>)
 8006d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d16:	601a      	str	r2, [r3, #0]
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d20:	bf00      	nop
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	20000f94 	.word	0x20000f94
 8006d2c:	e000ed04 	.word	0xe000ed04

08006d30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b08a      	sub	sp, #40	; 0x28
 8006d34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d36:	2300      	movs	r3, #0
 8006d38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d3e:	463a      	mov	r2, r7
 8006d40:	1d39      	adds	r1, r7, #4
 8006d42:	f107 0308 	add.w	r3, r7, #8
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fe ff50 	bl	8005bec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d4c:	6839      	ldr	r1, [r7, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	9202      	str	r2, [sp, #8]
 8006d54:	9301      	str	r3, [sp, #4]
 8006d56:	2300      	movs	r3, #0
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	460a      	mov	r2, r1
 8006d5e:	4924      	ldr	r1, [pc, #144]	; (8006df0 <vTaskStartScheduler+0xc0>)
 8006d60:	4824      	ldr	r0, [pc, #144]	; (8006df4 <vTaskStartScheduler+0xc4>)
 8006d62:	f7ff fe01 	bl	8006968 <xTaskCreateStatic>
 8006d66:	4603      	mov	r3, r0
 8006d68:	4a23      	ldr	r2, [pc, #140]	; (8006df8 <vTaskStartScheduler+0xc8>)
 8006d6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d6c:	4b22      	ldr	r3, [pc, #136]	; (8006df8 <vTaskStartScheduler+0xc8>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d002      	beq.n	8006d7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d74:	2301      	movs	r3, #1
 8006d76:	617b      	str	r3, [r7, #20]
 8006d78:	e001      	b.n	8006d7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d102      	bne.n	8006d8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006d84:	f000 fef2 	bl	8007b6c <xTimerCreateTimerTask>
 8006d88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d11b      	bne.n	8006dc8 <vTaskStartScheduler+0x98>
	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	613b      	str	r3, [r7, #16]
}
 8006da2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006da4:	4b15      	ldr	r3, [pc, #84]	; (8006dfc <vTaskStartScheduler+0xcc>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	3364      	adds	r3, #100	; 0x64
 8006daa:	4a15      	ldr	r2, [pc, #84]	; (8006e00 <vTaskStartScheduler+0xd0>)
 8006dac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006dae:	4b15      	ldr	r3, [pc, #84]	; (8006e04 <vTaskStartScheduler+0xd4>)
 8006db0:	f04f 32ff 	mov.w	r2, #4294967295
 8006db4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006db6:	4b14      	ldr	r3, [pc, #80]	; (8006e08 <vTaskStartScheduler+0xd8>)
 8006db8:	2201      	movs	r2, #1
 8006dba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006dbc:	4b13      	ldr	r3, [pc, #76]	; (8006e0c <vTaskStartScheduler+0xdc>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006dc2:	f001 fa61 	bl	8008288 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006dc6:	e00e      	b.n	8006de6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dce:	d10a      	bne.n	8006de6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	60fb      	str	r3, [r7, #12]
}
 8006de2:	bf00      	nop
 8006de4:	e7fe      	b.n	8006de4 <vTaskStartScheduler+0xb4>
}
 8006de6:	bf00      	nop
 8006de8:	3718      	adds	r7, #24
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	08008c10 	.word	0x08008c10
 8006df4:	08007439 	.word	0x08007439
 8006df8:	20000f90 	.word	0x20000f90
 8006dfc:	20000a98 	.word	0x20000a98
 8006e00:	20000010 	.word	0x20000010
 8006e04:	20000f8c 	.word	0x20000f8c
 8006e08:	20000f78 	.word	0x20000f78
 8006e0c:	20000f70 	.word	0x20000f70

08006e10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e10:	b480      	push	{r7}
 8006e12:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006e14:	4b04      	ldr	r3, [pc, #16]	; (8006e28 <vTaskSuspendAll+0x18>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	4a03      	ldr	r2, [pc, #12]	; (8006e28 <vTaskSuspendAll+0x18>)
 8006e1c:	6013      	str	r3, [r2, #0]
}
 8006e1e:	bf00      	nop
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bc80      	pop	{r7}
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	20000f94 	.word	0x20000f94

08006e2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e32:	2300      	movs	r3, #0
 8006e34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e36:	2300      	movs	r3, #0
 8006e38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e3a:	4b42      	ldr	r3, [pc, #264]	; (8006f44 <xTaskResumeAll+0x118>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10a      	bne.n	8006e58 <xTaskResumeAll+0x2c>
	__asm volatile
 8006e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e46:	f383 8811 	msr	BASEPRI, r3
 8006e4a:	f3bf 8f6f 	isb	sy
 8006e4e:	f3bf 8f4f 	dsb	sy
 8006e52:	603b      	str	r3, [r7, #0]
}
 8006e54:	bf00      	nop
 8006e56:	e7fe      	b.n	8006e56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e58:	f001 fa88 	bl	800836c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e5c:	4b39      	ldr	r3, [pc, #228]	; (8006f44 <xTaskResumeAll+0x118>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3b01      	subs	r3, #1
 8006e62:	4a38      	ldr	r2, [pc, #224]	; (8006f44 <xTaskResumeAll+0x118>)
 8006e64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e66:	4b37      	ldr	r3, [pc, #220]	; (8006f44 <xTaskResumeAll+0x118>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d162      	bne.n	8006f34 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e6e:	4b36      	ldr	r3, [pc, #216]	; (8006f48 <xTaskResumeAll+0x11c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d05e      	beq.n	8006f34 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e76:	e02f      	b.n	8006ed8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006e78:	4b34      	ldr	r3, [pc, #208]	; (8006f4c <xTaskResumeAll+0x120>)
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	3318      	adds	r3, #24
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7fe ff69 	bl	8005d5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fe ff64 	bl	8005d5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e98:	4b2d      	ldr	r3, [pc, #180]	; (8006f50 <xTaskResumeAll+0x124>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d903      	bls.n	8006ea8 <xTaskResumeAll+0x7c>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea4:	4a2a      	ldr	r2, [pc, #168]	; (8006f50 <xTaskResumeAll+0x124>)
 8006ea6:	6013      	str	r3, [r2, #0]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eac:	4613      	mov	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4a27      	ldr	r2, [pc, #156]	; (8006f54 <xTaskResumeAll+0x128>)
 8006eb6:	441a      	add	r2, r3
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	3304      	adds	r3, #4
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	4610      	mov	r0, r2
 8006ec0:	f7fe fef1 	bl	8005ca6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec8:	4b23      	ldr	r3, [pc, #140]	; (8006f58 <xTaskResumeAll+0x12c>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d302      	bcc.n	8006ed8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006ed2:	4b22      	ldr	r3, [pc, #136]	; (8006f5c <xTaskResumeAll+0x130>)
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ed8:	4b1c      	ldr	r3, [pc, #112]	; (8006f4c <xTaskResumeAll+0x120>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1cb      	bne.n	8006e78 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ee6:	f000 fb61 	bl	80075ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006eea:	4b1d      	ldr	r3, [pc, #116]	; (8006f60 <xTaskResumeAll+0x134>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d010      	beq.n	8006f18 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006ef6:	f000 f845 	bl	8006f84 <xTaskIncrementTick>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d002      	beq.n	8006f06 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f00:	4b16      	ldr	r3, [pc, #88]	; (8006f5c <xTaskResumeAll+0x130>)
 8006f02:	2201      	movs	r2, #1
 8006f04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1f1      	bne.n	8006ef6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006f12:	4b13      	ldr	r3, [pc, #76]	; (8006f60 <xTaskResumeAll+0x134>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f18:	4b10      	ldr	r3, [pc, #64]	; (8006f5c <xTaskResumeAll+0x130>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d009      	beq.n	8006f34 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f20:	2301      	movs	r3, #1
 8006f22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f24:	4b0f      	ldr	r3, [pc, #60]	; (8006f64 <xTaskResumeAll+0x138>)
 8006f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f2a:	601a      	str	r2, [r3, #0]
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f34:	f001 fa4a 	bl	80083cc <vPortExitCritical>

	return xAlreadyYielded;
 8006f38:	68bb      	ldr	r3, [r7, #8]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	20000f94 	.word	0x20000f94
 8006f48:	20000f6c 	.word	0x20000f6c
 8006f4c:	20000f2c 	.word	0x20000f2c
 8006f50:	20000f74 	.word	0x20000f74
 8006f54:	20000a9c 	.word	0x20000a9c
 8006f58:	20000a98 	.word	0x20000a98
 8006f5c:	20000f80 	.word	0x20000f80
 8006f60:	20000f7c 	.word	0x20000f7c
 8006f64:	e000ed04 	.word	0xe000ed04

08006f68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f6e:	4b04      	ldr	r3, [pc, #16]	; (8006f80 <xTaskGetTickCount+0x18>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f74:	687b      	ldr	r3, [r7, #4]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bc80      	pop	{r7}
 8006f7e:	4770      	bx	lr
 8006f80:	20000f70 	.word	0x20000f70

08006f84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f8e:	4b51      	ldr	r3, [pc, #324]	; (80070d4 <xTaskIncrementTick+0x150>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f040 808e 	bne.w	80070b4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f98:	4b4f      	ldr	r3, [pc, #316]	; (80070d8 <xTaskIncrementTick+0x154>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006fa0:	4a4d      	ldr	r2, [pc, #308]	; (80070d8 <xTaskIncrementTick+0x154>)
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d120      	bne.n	8006fee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006fac:	4b4b      	ldr	r3, [pc, #300]	; (80070dc <xTaskIncrementTick+0x158>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00a      	beq.n	8006fcc <xTaskIncrementTick+0x48>
	__asm volatile
 8006fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fba:	f383 8811 	msr	BASEPRI, r3
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f3bf 8f4f 	dsb	sy
 8006fc6:	603b      	str	r3, [r7, #0]
}
 8006fc8:	bf00      	nop
 8006fca:	e7fe      	b.n	8006fca <xTaskIncrementTick+0x46>
 8006fcc:	4b43      	ldr	r3, [pc, #268]	; (80070dc <xTaskIncrementTick+0x158>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	60fb      	str	r3, [r7, #12]
 8006fd2:	4b43      	ldr	r3, [pc, #268]	; (80070e0 <xTaskIncrementTick+0x15c>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a41      	ldr	r2, [pc, #260]	; (80070dc <xTaskIncrementTick+0x158>)
 8006fd8:	6013      	str	r3, [r2, #0]
 8006fda:	4a41      	ldr	r2, [pc, #260]	; (80070e0 <xTaskIncrementTick+0x15c>)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6013      	str	r3, [r2, #0]
 8006fe0:	4b40      	ldr	r3, [pc, #256]	; (80070e4 <xTaskIncrementTick+0x160>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	4a3f      	ldr	r2, [pc, #252]	; (80070e4 <xTaskIncrementTick+0x160>)
 8006fe8:	6013      	str	r3, [r2, #0]
 8006fea:	f000 fadf 	bl	80075ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006fee:	4b3e      	ldr	r3, [pc, #248]	; (80070e8 <xTaskIncrementTick+0x164>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d34e      	bcc.n	8007096 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ff8:	4b38      	ldr	r3, [pc, #224]	; (80070dc <xTaskIncrementTick+0x158>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d101      	bne.n	8007006 <xTaskIncrementTick+0x82>
 8007002:	2301      	movs	r3, #1
 8007004:	e000      	b.n	8007008 <xTaskIncrementTick+0x84>
 8007006:	2300      	movs	r3, #0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d004      	beq.n	8007016 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800700c:	4b36      	ldr	r3, [pc, #216]	; (80070e8 <xTaskIncrementTick+0x164>)
 800700e:	f04f 32ff 	mov.w	r2, #4294967295
 8007012:	601a      	str	r2, [r3, #0]
					break;
 8007014:	e03f      	b.n	8007096 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007016:	4b31      	ldr	r3, [pc, #196]	; (80070dc <xTaskIncrementTick+0x158>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	429a      	cmp	r2, r3
 800702c:	d203      	bcs.n	8007036 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800702e:	4a2e      	ldr	r2, [pc, #184]	; (80070e8 <xTaskIncrementTick+0x164>)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6013      	str	r3, [r2, #0]
						break;
 8007034:	e02f      	b.n	8007096 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	3304      	adds	r3, #4
 800703a:	4618      	mov	r0, r3
 800703c:	f7fe fe8e 	bl	8005d5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007044:	2b00      	cmp	r3, #0
 8007046:	d004      	beq.n	8007052 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	3318      	adds	r3, #24
 800704c:	4618      	mov	r0, r3
 800704e:	f7fe fe85 	bl	8005d5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007056:	4b25      	ldr	r3, [pc, #148]	; (80070ec <xTaskIncrementTick+0x168>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	429a      	cmp	r2, r3
 800705c:	d903      	bls.n	8007066 <xTaskIncrementTick+0xe2>
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007062:	4a22      	ldr	r2, [pc, #136]	; (80070ec <xTaskIncrementTick+0x168>)
 8007064:	6013      	str	r3, [r2, #0]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800706a:	4613      	mov	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4a1f      	ldr	r2, [pc, #124]	; (80070f0 <xTaskIncrementTick+0x16c>)
 8007074:	441a      	add	r2, r3
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	3304      	adds	r3, #4
 800707a:	4619      	mov	r1, r3
 800707c:	4610      	mov	r0, r2
 800707e:	f7fe fe12 	bl	8005ca6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007086:	4b1b      	ldr	r3, [pc, #108]	; (80070f4 <xTaskIncrementTick+0x170>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708c:	429a      	cmp	r2, r3
 800708e:	d3b3      	bcc.n	8006ff8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007090:	2301      	movs	r3, #1
 8007092:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007094:	e7b0      	b.n	8006ff8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007096:	4b17      	ldr	r3, [pc, #92]	; (80070f4 <xTaskIncrementTick+0x170>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800709c:	4914      	ldr	r1, [pc, #80]	; (80070f0 <xTaskIncrementTick+0x16c>)
 800709e:	4613      	mov	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4413      	add	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	440b      	add	r3, r1
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d907      	bls.n	80070be <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80070ae:	2301      	movs	r3, #1
 80070b0:	617b      	str	r3, [r7, #20]
 80070b2:	e004      	b.n	80070be <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80070b4:	4b10      	ldr	r3, [pc, #64]	; (80070f8 <xTaskIncrementTick+0x174>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	3301      	adds	r3, #1
 80070ba:	4a0f      	ldr	r2, [pc, #60]	; (80070f8 <xTaskIncrementTick+0x174>)
 80070bc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80070be:	4b0f      	ldr	r3, [pc, #60]	; (80070fc <xTaskIncrementTick+0x178>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80070c6:	2301      	movs	r3, #1
 80070c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80070ca:	697b      	ldr	r3, [r7, #20]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3718      	adds	r7, #24
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	20000f94 	.word	0x20000f94
 80070d8:	20000f70 	.word	0x20000f70
 80070dc:	20000f24 	.word	0x20000f24
 80070e0:	20000f28 	.word	0x20000f28
 80070e4:	20000f84 	.word	0x20000f84
 80070e8:	20000f8c 	.word	0x20000f8c
 80070ec:	20000f74 	.word	0x20000f74
 80070f0:	20000a9c 	.word	0x20000a9c
 80070f4:	20000a98 	.word	0x20000a98
 80070f8:	20000f7c 	.word	0x20000f7c
 80070fc:	20000f80 	.word	0x20000f80

08007100 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007106:	4b2a      	ldr	r3, [pc, #168]	; (80071b0 <vTaskSwitchContext+0xb0>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d003      	beq.n	8007116 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800710e:	4b29      	ldr	r3, [pc, #164]	; (80071b4 <vTaskSwitchContext+0xb4>)
 8007110:	2201      	movs	r2, #1
 8007112:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007114:	e046      	b.n	80071a4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007116:	4b27      	ldr	r3, [pc, #156]	; (80071b4 <vTaskSwitchContext+0xb4>)
 8007118:	2200      	movs	r2, #0
 800711a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800711c:	4b26      	ldr	r3, [pc, #152]	; (80071b8 <vTaskSwitchContext+0xb8>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	60fb      	str	r3, [r7, #12]
 8007122:	e010      	b.n	8007146 <vTaskSwitchContext+0x46>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10a      	bne.n	8007140 <vTaskSwitchContext+0x40>
	__asm volatile
 800712a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	607b      	str	r3, [r7, #4]
}
 800713c:	bf00      	nop
 800713e:	e7fe      	b.n	800713e <vTaskSwitchContext+0x3e>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	3b01      	subs	r3, #1
 8007144:	60fb      	str	r3, [r7, #12]
 8007146:	491d      	ldr	r1, [pc, #116]	; (80071bc <vTaskSwitchContext+0xbc>)
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	4613      	mov	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	4413      	add	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	440b      	add	r3, r1
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d0e4      	beq.n	8007124 <vTaskSwitchContext+0x24>
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	4613      	mov	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4413      	add	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4a15      	ldr	r2, [pc, #84]	; (80071bc <vTaskSwitchContext+0xbc>)
 8007166:	4413      	add	r3, r2
 8007168:	60bb      	str	r3, [r7, #8]
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	685a      	ldr	r2, [r3, #4]
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	605a      	str	r2, [r3, #4]
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	3308      	adds	r3, #8
 800717c:	429a      	cmp	r2, r3
 800717e:	d104      	bne.n	800718a <vTaskSwitchContext+0x8a>
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	605a      	str	r2, [r3, #4]
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	4a0b      	ldr	r2, [pc, #44]	; (80071c0 <vTaskSwitchContext+0xc0>)
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	4a08      	ldr	r2, [pc, #32]	; (80071b8 <vTaskSwitchContext+0xb8>)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800719a:	4b09      	ldr	r3, [pc, #36]	; (80071c0 <vTaskSwitchContext+0xc0>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	3364      	adds	r3, #100	; 0x64
 80071a0:	4a08      	ldr	r2, [pc, #32]	; (80071c4 <vTaskSwitchContext+0xc4>)
 80071a2:	6013      	str	r3, [r2, #0]
}
 80071a4:	bf00      	nop
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bc80      	pop	{r7}
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	20000f94 	.word	0x20000f94
 80071b4:	20000f80 	.word	0x20000f80
 80071b8:	20000f74 	.word	0x20000f74
 80071bc:	20000a9c 	.word	0x20000a9c
 80071c0:	20000a98 	.word	0x20000a98
 80071c4:	20000010 	.word	0x20000010

080071c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10a      	bne.n	80071ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80071d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071dc:	f383 8811 	msr	BASEPRI, r3
 80071e0:	f3bf 8f6f 	isb	sy
 80071e4:	f3bf 8f4f 	dsb	sy
 80071e8:	60fb      	str	r3, [r7, #12]
}
 80071ea:	bf00      	nop
 80071ec:	e7fe      	b.n	80071ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071ee:	4b07      	ldr	r3, [pc, #28]	; (800720c <vTaskPlaceOnEventList+0x44>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3318      	adds	r3, #24
 80071f4:	4619      	mov	r1, r3
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f7fe fd78 	bl	8005cec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80071fc:	2101      	movs	r1, #1
 80071fe:	6838      	ldr	r0, [r7, #0]
 8007200:	f000 fc60 	bl	8007ac4 <prvAddCurrentTaskToDelayedList>
}
 8007204:	bf00      	nop
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	20000a98 	.word	0x20000a98

08007210 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007210:	b580      	push	{r7, lr}
 8007212:	b086      	sub	sp, #24
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10a      	bne.n	8007238 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007226:	f383 8811 	msr	BASEPRI, r3
 800722a:	f3bf 8f6f 	isb	sy
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	617b      	str	r3, [r7, #20]
}
 8007234:	bf00      	nop
 8007236:	e7fe      	b.n	8007236 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007238:	4b0a      	ldr	r3, [pc, #40]	; (8007264 <vTaskPlaceOnEventListRestricted+0x54>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3318      	adds	r3, #24
 800723e:	4619      	mov	r1, r3
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f7fe fd30 	bl	8005ca6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d002      	beq.n	8007252 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800724c:	f04f 33ff 	mov.w	r3, #4294967295
 8007250:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007252:	6879      	ldr	r1, [r7, #4]
 8007254:	68b8      	ldr	r0, [r7, #8]
 8007256:	f000 fc35 	bl	8007ac4 <prvAddCurrentTaskToDelayedList>
	}
 800725a:	bf00      	nop
 800725c:	3718      	adds	r7, #24
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	20000a98 	.word	0x20000a98

08007268 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10a      	bne.n	8007294 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	60fb      	str	r3, [r7, #12]
}
 8007290:	bf00      	nop
 8007292:	e7fe      	b.n	8007292 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	3318      	adds	r3, #24
 8007298:	4618      	mov	r0, r3
 800729a:	f7fe fd5f 	bl	8005d5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800729e:	4b1e      	ldr	r3, [pc, #120]	; (8007318 <xTaskRemoveFromEventList+0xb0>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d11d      	bne.n	80072e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	3304      	adds	r3, #4
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fe fd56 	bl	8005d5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b4:	4b19      	ldr	r3, [pc, #100]	; (800731c <xTaskRemoveFromEventList+0xb4>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d903      	bls.n	80072c4 <xTaskRemoveFromEventList+0x5c>
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c0:	4a16      	ldr	r2, [pc, #88]	; (800731c <xTaskRemoveFromEventList+0xb4>)
 80072c2:	6013      	str	r3, [r2, #0]
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c8:	4613      	mov	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4413      	add	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4a13      	ldr	r2, [pc, #76]	; (8007320 <xTaskRemoveFromEventList+0xb8>)
 80072d2:	441a      	add	r2, r3
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	3304      	adds	r3, #4
 80072d8:	4619      	mov	r1, r3
 80072da:	4610      	mov	r0, r2
 80072dc:	f7fe fce3 	bl	8005ca6 <vListInsertEnd>
 80072e0:	e005      	b.n	80072ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	3318      	adds	r3, #24
 80072e6:	4619      	mov	r1, r3
 80072e8:	480e      	ldr	r0, [pc, #56]	; (8007324 <xTaskRemoveFromEventList+0xbc>)
 80072ea:	f7fe fcdc 	bl	8005ca6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f2:	4b0d      	ldr	r3, [pc, #52]	; (8007328 <xTaskRemoveFromEventList+0xc0>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d905      	bls.n	8007308 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80072fc:	2301      	movs	r3, #1
 80072fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007300:	4b0a      	ldr	r3, [pc, #40]	; (800732c <xTaskRemoveFromEventList+0xc4>)
 8007302:	2201      	movs	r2, #1
 8007304:	601a      	str	r2, [r3, #0]
 8007306:	e001      	b.n	800730c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007308:	2300      	movs	r3, #0
 800730a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800730c:	697b      	ldr	r3, [r7, #20]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3718      	adds	r7, #24
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	20000f94 	.word	0x20000f94
 800731c:	20000f74 	.word	0x20000f74
 8007320:	20000a9c 	.word	0x20000a9c
 8007324:	20000f2c 	.word	0x20000f2c
 8007328:	20000a98 	.word	0x20000a98
 800732c:	20000f80 	.word	0x20000f80

08007330 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007338:	4b06      	ldr	r3, [pc, #24]	; (8007354 <vTaskInternalSetTimeOutState+0x24>)
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007340:	4b05      	ldr	r3, [pc, #20]	; (8007358 <vTaskInternalSetTimeOutState+0x28>)
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	605a      	str	r2, [r3, #4]
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	bc80      	pop	{r7}
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	20000f84 	.word	0x20000f84
 8007358:	20000f70 	.word	0x20000f70

0800735c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b088      	sub	sp, #32
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10a      	bne.n	8007382 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800736c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	613b      	str	r3, [r7, #16]
}
 800737e:	bf00      	nop
 8007380:	e7fe      	b.n	8007380 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10a      	bne.n	800739e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738c:	f383 8811 	msr	BASEPRI, r3
 8007390:	f3bf 8f6f 	isb	sy
 8007394:	f3bf 8f4f 	dsb	sy
 8007398:	60fb      	str	r3, [r7, #12]
}
 800739a:	bf00      	nop
 800739c:	e7fe      	b.n	800739c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800739e:	f000 ffe5 	bl	800836c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80073a2:	4b1d      	ldr	r3, [pc, #116]	; (8007418 <xTaskCheckForTimeOut+0xbc>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ba:	d102      	bne.n	80073c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80073bc:	2300      	movs	r3, #0
 80073be:	61fb      	str	r3, [r7, #28]
 80073c0:	e023      	b.n	800740a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	4b15      	ldr	r3, [pc, #84]	; (800741c <xTaskCheckForTimeOut+0xc0>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d007      	beq.n	80073de <xTaskCheckForTimeOut+0x82>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	69ba      	ldr	r2, [r7, #24]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d302      	bcc.n	80073de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80073d8:	2301      	movs	r3, #1
 80073da:	61fb      	str	r3, [r7, #28]
 80073dc:	e015      	b.n	800740a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d20b      	bcs.n	8007400 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	1ad2      	subs	r2, r2, r3
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f7ff ff9b 	bl	8007330 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80073fa:	2300      	movs	r3, #0
 80073fc:	61fb      	str	r3, [r7, #28]
 80073fe:	e004      	b.n	800740a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	2200      	movs	r2, #0
 8007404:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007406:	2301      	movs	r3, #1
 8007408:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800740a:	f000 ffdf 	bl	80083cc <vPortExitCritical>

	return xReturn;
 800740e:	69fb      	ldr	r3, [r7, #28]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3720      	adds	r7, #32
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	20000f70 	.word	0x20000f70
 800741c:	20000f84 	.word	0x20000f84

08007420 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007420:	b480      	push	{r7}
 8007422:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007424:	4b03      	ldr	r3, [pc, #12]	; (8007434 <vTaskMissedYield+0x14>)
 8007426:	2201      	movs	r2, #1
 8007428:	601a      	str	r2, [r3, #0]
}
 800742a:	bf00      	nop
 800742c:	46bd      	mov	sp, r7
 800742e:	bc80      	pop	{r7}
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	20000f80 	.word	0x20000f80

08007438 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007440:	f000 f852 	bl	80074e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007444:	4b06      	ldr	r3, [pc, #24]	; (8007460 <prvIdleTask+0x28>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d9f9      	bls.n	8007440 <prvIdleTask+0x8>
			{
				taskYIELD();
 800744c:	4b05      	ldr	r3, [pc, #20]	; (8007464 <prvIdleTask+0x2c>)
 800744e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800745c:	e7f0      	b.n	8007440 <prvIdleTask+0x8>
 800745e:	bf00      	nop
 8007460:	20000a9c 	.word	0x20000a9c
 8007464:	e000ed04 	.word	0xe000ed04

08007468 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800746e:	2300      	movs	r3, #0
 8007470:	607b      	str	r3, [r7, #4]
 8007472:	e00c      	b.n	800748e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	4613      	mov	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	4a12      	ldr	r2, [pc, #72]	; (80074c8 <prvInitialiseTaskLists+0x60>)
 8007480:	4413      	add	r3, r2
 8007482:	4618      	mov	r0, r3
 8007484:	f7fe fbe4 	bl	8005c50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3301      	adds	r3, #1
 800748c:	607b      	str	r3, [r7, #4]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2b37      	cmp	r3, #55	; 0x37
 8007492:	d9ef      	bls.n	8007474 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007494:	480d      	ldr	r0, [pc, #52]	; (80074cc <prvInitialiseTaskLists+0x64>)
 8007496:	f7fe fbdb 	bl	8005c50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800749a:	480d      	ldr	r0, [pc, #52]	; (80074d0 <prvInitialiseTaskLists+0x68>)
 800749c:	f7fe fbd8 	bl	8005c50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80074a0:	480c      	ldr	r0, [pc, #48]	; (80074d4 <prvInitialiseTaskLists+0x6c>)
 80074a2:	f7fe fbd5 	bl	8005c50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80074a6:	480c      	ldr	r0, [pc, #48]	; (80074d8 <prvInitialiseTaskLists+0x70>)
 80074a8:	f7fe fbd2 	bl	8005c50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80074ac:	480b      	ldr	r0, [pc, #44]	; (80074dc <prvInitialiseTaskLists+0x74>)
 80074ae:	f7fe fbcf 	bl	8005c50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80074b2:	4b0b      	ldr	r3, [pc, #44]	; (80074e0 <prvInitialiseTaskLists+0x78>)
 80074b4:	4a05      	ldr	r2, [pc, #20]	; (80074cc <prvInitialiseTaskLists+0x64>)
 80074b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80074b8:	4b0a      	ldr	r3, [pc, #40]	; (80074e4 <prvInitialiseTaskLists+0x7c>)
 80074ba:	4a05      	ldr	r2, [pc, #20]	; (80074d0 <prvInitialiseTaskLists+0x68>)
 80074bc:	601a      	str	r2, [r3, #0]
}
 80074be:	bf00      	nop
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	20000a9c 	.word	0x20000a9c
 80074cc:	20000efc 	.word	0x20000efc
 80074d0:	20000f10 	.word	0x20000f10
 80074d4:	20000f2c 	.word	0x20000f2c
 80074d8:	20000f40 	.word	0x20000f40
 80074dc:	20000f58 	.word	0x20000f58
 80074e0:	20000f24 	.word	0x20000f24
 80074e4:	20000f28 	.word	0x20000f28

080074e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074ee:	e019      	b.n	8007524 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074f0:	f000 ff3c 	bl	800836c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80074f4:	4b10      	ldr	r3, [pc, #64]	; (8007538 <prvCheckTasksWaitingTermination+0x50>)
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	3304      	adds	r3, #4
 8007500:	4618      	mov	r0, r3
 8007502:	f7fe fc2b 	bl	8005d5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007506:	4b0d      	ldr	r3, [pc, #52]	; (800753c <prvCheckTasksWaitingTermination+0x54>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	3b01      	subs	r3, #1
 800750c:	4a0b      	ldr	r2, [pc, #44]	; (800753c <prvCheckTasksWaitingTermination+0x54>)
 800750e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007510:	4b0b      	ldr	r3, [pc, #44]	; (8007540 <prvCheckTasksWaitingTermination+0x58>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	3b01      	subs	r3, #1
 8007516:	4a0a      	ldr	r2, [pc, #40]	; (8007540 <prvCheckTasksWaitingTermination+0x58>)
 8007518:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800751a:	f000 ff57 	bl	80083cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f810 	bl	8007544 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007524:	4b06      	ldr	r3, [pc, #24]	; (8007540 <prvCheckTasksWaitingTermination+0x58>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1e1      	bne.n	80074f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800752c:	bf00      	nop
 800752e:	bf00      	nop
 8007530:	3708      	adds	r7, #8
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	20000f40 	.word	0x20000f40
 800753c:	20000f6c 	.word	0x20000f6c
 8007540:	20000f54 	.word	0x20000f54

08007544 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	3364      	adds	r3, #100	; 0x64
 8007550:	4618      	mov	r0, r3
 8007552:	f001 fa2d 	bl	80089b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800755c:	2b00      	cmp	r3, #0
 800755e:	d108      	bne.n	8007572 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007564:	4618      	mov	r0, r3
 8007566:	f001 f8c5 	bl	80086f4 <vPortFree>
				vPortFree( pxTCB );
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f001 f8c2 	bl	80086f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007570:	e018      	b.n	80075a4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8007578:	2b01      	cmp	r3, #1
 800757a:	d103      	bne.n	8007584 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f001 f8b9 	bl	80086f4 <vPortFree>
	}
 8007582:	e00f      	b.n	80075a4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800758a:	2b02      	cmp	r3, #2
 800758c:	d00a      	beq.n	80075a4 <prvDeleteTCB+0x60>
	__asm volatile
 800758e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	60fb      	str	r3, [r7, #12]
}
 80075a0:	bf00      	nop
 80075a2:	e7fe      	b.n	80075a2 <prvDeleteTCB+0x5e>
	}
 80075a4:	bf00      	nop
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075b2:	4b0e      	ldr	r3, [pc, #56]	; (80075ec <prvResetNextTaskUnblockTime+0x40>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d101      	bne.n	80075c0 <prvResetNextTaskUnblockTime+0x14>
 80075bc:	2301      	movs	r3, #1
 80075be:	e000      	b.n	80075c2 <prvResetNextTaskUnblockTime+0x16>
 80075c0:	2300      	movs	r3, #0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d004      	beq.n	80075d0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80075c6:	4b0a      	ldr	r3, [pc, #40]	; (80075f0 <prvResetNextTaskUnblockTime+0x44>)
 80075c8:	f04f 32ff 	mov.w	r2, #4294967295
 80075cc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80075ce:	e008      	b.n	80075e2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80075d0:	4b06      	ldr	r3, [pc, #24]	; (80075ec <prvResetNextTaskUnblockTime+0x40>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	4a04      	ldr	r2, [pc, #16]	; (80075f0 <prvResetNextTaskUnblockTime+0x44>)
 80075e0:	6013      	str	r3, [r2, #0]
}
 80075e2:	bf00      	nop
 80075e4:	370c      	adds	r7, #12
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bc80      	pop	{r7}
 80075ea:	4770      	bx	lr
 80075ec:	20000f24 	.word	0x20000f24
 80075f0:	20000f8c 	.word	0x20000f8c

080075f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80075fa:	4b0b      	ldr	r3, [pc, #44]	; (8007628 <xTaskGetSchedulerState+0x34>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d102      	bne.n	8007608 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007602:	2301      	movs	r3, #1
 8007604:	607b      	str	r3, [r7, #4]
 8007606:	e008      	b.n	800761a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007608:	4b08      	ldr	r3, [pc, #32]	; (800762c <xTaskGetSchedulerState+0x38>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d102      	bne.n	8007616 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007610:	2302      	movs	r3, #2
 8007612:	607b      	str	r3, [r7, #4]
 8007614:	e001      	b.n	800761a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007616:	2300      	movs	r3, #0
 8007618:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800761a:	687b      	ldr	r3, [r7, #4]
	}
 800761c:	4618      	mov	r0, r3
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	bc80      	pop	{r7}
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	20000f78 	.word	0x20000f78
 800762c:	20000f94 	.word	0x20000f94

08007630 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007630:	b580      	push	{r7, lr}
 8007632:	b086      	sub	sp, #24
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800763c:	2300      	movs	r3, #0
 800763e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d056      	beq.n	80076f4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007646:	4b2e      	ldr	r3, [pc, #184]	; (8007700 <xTaskPriorityDisinherit+0xd0>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	693a      	ldr	r2, [r7, #16]
 800764c:	429a      	cmp	r2, r3
 800764e:	d00a      	beq.n	8007666 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007654:	f383 8811 	msr	BASEPRI, r3
 8007658:	f3bf 8f6f 	isb	sy
 800765c:	f3bf 8f4f 	dsb	sy
 8007660:	60fb      	str	r3, [r7, #12]
}
 8007662:	bf00      	nop
 8007664:	e7fe      	b.n	8007664 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10a      	bne.n	8007684 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800766e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	60bb      	str	r3, [r7, #8]
}
 8007680:	bf00      	nop
 8007682:	e7fe      	b.n	8007682 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007688:	1e5a      	subs	r2, r3, #1
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007696:	429a      	cmp	r2, r3
 8007698:	d02c      	beq.n	80076f4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d128      	bne.n	80076f4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	3304      	adds	r3, #4
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7fe fb58 	bl	8005d5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c4:	4b0f      	ldr	r3, [pc, #60]	; (8007704 <xTaskPriorityDisinherit+0xd4>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d903      	bls.n	80076d4 <xTaskPriorityDisinherit+0xa4>
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d0:	4a0c      	ldr	r2, [pc, #48]	; (8007704 <xTaskPriorityDisinherit+0xd4>)
 80076d2:	6013      	str	r3, [r2, #0]
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d8:	4613      	mov	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4a09      	ldr	r2, [pc, #36]	; (8007708 <xTaskPriorityDisinherit+0xd8>)
 80076e2:	441a      	add	r2, r3
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	3304      	adds	r3, #4
 80076e8:	4619      	mov	r1, r3
 80076ea:	4610      	mov	r0, r2
 80076ec:	f7fe fadb 	bl	8005ca6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80076f0:	2301      	movs	r3, #1
 80076f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076f4:	697b      	ldr	r3, [r7, #20]
	}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3718      	adds	r7, #24
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	20000a98 	.word	0x20000a98
 8007704:	20000f74 	.word	0x20000f74
 8007708:	20000a9c 	.word	0x20000a9c

0800770c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800770c:	b580      	push	{r7, lr}
 800770e:	b086      	sub	sp, #24
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	607a      	str	r2, [r7, #4]
 8007718:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800771a:	f000 fe27 	bl	800836c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800771e:	4b29      	ldr	r3, [pc, #164]	; (80077c4 <xTaskNotifyWait+0xb8>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8007726:	b2db      	uxtb	r3, r3
 8007728:	2b02      	cmp	r3, #2
 800772a:	d01c      	beq.n	8007766 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800772c:	4b25      	ldr	r3, [pc, #148]	; (80077c4 <xTaskNotifyWait+0xb8>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	43d2      	mvns	r2, r2
 8007738:	400a      	ands	r2, r1
 800773a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800773e:	4b21      	ldr	r3, [pc, #132]	; (80077c4 <xTaskNotifyWait+0xb8>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

				if( xTicksToWait > ( TickType_t ) 0 )
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00b      	beq.n	8007766 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800774e:	2101      	movs	r1, #1
 8007750:	6838      	ldr	r0, [r7, #0]
 8007752:	f000 f9b7 	bl	8007ac4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007756:	4b1c      	ldr	r3, [pc, #112]	; (80077c8 <xTaskNotifyWait+0xbc>)
 8007758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007766:	f000 fe31 	bl	80083cc <vPortExitCritical>

		taskENTER_CRITICAL();
 800776a:	f000 fdff 	bl	800836c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d005      	beq.n	8007780 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007774:	4b13      	ldr	r3, [pc, #76]	; (80077c4 <xTaskNotifyWait+0xb8>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007780:	4b10      	ldr	r3, [pc, #64]	; (80077c4 <xTaskNotifyWait+0xb8>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b02      	cmp	r3, #2
 800778c:	d002      	beq.n	8007794 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800778e:	2300      	movs	r3, #0
 8007790:	617b      	str	r3, [r7, #20]
 8007792:	e00a      	b.n	80077aa <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8007794:	4b0b      	ldr	r3, [pc, #44]	; (80077c4 <xTaskNotifyWait+0xb8>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	43d2      	mvns	r2, r2
 80077a0:	400a      	ands	r2, r1
 80077a2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
				xReturn = pdTRUE;
 80077a6:	2301      	movs	r3, #1
 80077a8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80077aa:	4b06      	ldr	r3, [pc, #24]	; (80077c4 <xTaskNotifyWait+0xb8>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		}
		taskEXIT_CRITICAL();
 80077b4:	f000 fe0a 	bl	80083cc <vPortExitCritical>

		return xReturn;
 80077b8:	697b      	ldr	r3, [r7, #20]
	}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3718      	adds	r7, #24
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	20000a98 	.word	0x20000a98
 80077c8:	e000ed04 	.word	0xe000ed04

080077cc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b08a      	sub	sp, #40	; 0x28
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	603b      	str	r3, [r7, #0]
 80077d8:	4613      	mov	r3, r2
 80077da:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80077dc:	2301      	movs	r3, #1
 80077de:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d10a      	bne.n	80077fc <xTaskGenericNotify+0x30>
	__asm volatile
 80077e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	61bb      	str	r3, [r7, #24]
}
 80077f8:	bf00      	nop
 80077fa:	e7fe      	b.n	80077fa <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8007800:	f000 fdb4 	bl	800836c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d004      	beq.n	8007814 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800781a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800781c:	6a3b      	ldr	r3, [r7, #32]
 800781e:	2202      	movs	r2, #2
 8007820:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

			switch( eAction )
 8007824:	79fb      	ldrb	r3, [r7, #7]
 8007826:	2b04      	cmp	r3, #4
 8007828:	d82d      	bhi.n	8007886 <xTaskGenericNotify+0xba>
 800782a:	a201      	add	r2, pc, #4	; (adr r2, 8007830 <xTaskGenericNotify+0x64>)
 800782c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007830:	08007887 	.word	0x08007887
 8007834:	08007845 	.word	0x08007845
 8007838:	08007857 	.word	0x08007857
 800783c:	08007867 	.word	0x08007867
 8007840:	08007871 	.word	0x08007871
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007844:	6a3b      	ldr	r3, [r7, #32]
 8007846:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	431a      	orrs	r2, r3
 800784e:	6a3b      	ldr	r3, [r7, #32]
 8007850:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 8007854:	e017      	b.n	8007886 <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800785c:	1c5a      	adds	r2, r3, #1
 800785e:	6a3b      	ldr	r3, [r7, #32]
 8007860:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 8007864:	e00f      	b.n	8007886 <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800786e:	e00a      	b.n	8007886 <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007870:	7ffb      	ldrb	r3, [r7, #31]
 8007872:	2b02      	cmp	r3, #2
 8007874:	d004      	beq.n	8007880 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800787e:	e001      	b.n	8007884 <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 8007880:	2300      	movs	r3, #0
 8007882:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8007884:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007886:	7ffb      	ldrb	r3, [r7, #31]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d13a      	bne.n	8007902 <xTaskGenericNotify+0x136>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800788c:	6a3b      	ldr	r3, [r7, #32]
 800788e:	3304      	adds	r3, #4
 8007890:	4618      	mov	r0, r3
 8007892:	f7fe fa63 	bl	8005d5c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007896:	6a3b      	ldr	r3, [r7, #32]
 8007898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800789a:	4b1d      	ldr	r3, [pc, #116]	; (8007910 <xTaskGenericNotify+0x144>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d903      	bls.n	80078aa <xTaskGenericNotify+0xde>
 80078a2:	6a3b      	ldr	r3, [r7, #32]
 80078a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a6:	4a1a      	ldr	r2, [pc, #104]	; (8007910 <xTaskGenericNotify+0x144>)
 80078a8:	6013      	str	r3, [r2, #0]
 80078aa:	6a3b      	ldr	r3, [r7, #32]
 80078ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ae:	4613      	mov	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	4413      	add	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4a17      	ldr	r2, [pc, #92]	; (8007914 <xTaskGenericNotify+0x148>)
 80078b8:	441a      	add	r2, r3
 80078ba:	6a3b      	ldr	r3, [r7, #32]
 80078bc:	3304      	adds	r3, #4
 80078be:	4619      	mov	r1, r3
 80078c0:	4610      	mov	r0, r2
 80078c2:	f7fe f9f0 	bl	8005ca6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80078c6:	6a3b      	ldr	r3, [r7, #32]
 80078c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00a      	beq.n	80078e4 <xTaskGenericNotify+0x118>
	__asm volatile
 80078ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	617b      	str	r3, [r7, #20]
}
 80078e0:	bf00      	nop
 80078e2:	e7fe      	b.n	80078e2 <xTaskGenericNotify+0x116>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e8:	4b0b      	ldr	r3, [pc, #44]	; (8007918 <xTaskGenericNotify+0x14c>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d907      	bls.n	8007902 <xTaskGenericNotify+0x136>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80078f2:	4b0a      	ldr	r3, [pc, #40]	; (800791c <xTaskGenericNotify+0x150>)
 80078f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078f8:	601a      	str	r2, [r3, #0]
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007902:	f000 fd63 	bl	80083cc <vPortExitCritical>

		return xReturn;
 8007906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007908:	4618      	mov	r0, r3
 800790a:	3728      	adds	r7, #40	; 0x28
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	20000f74 	.word	0x20000f74
 8007914:	20000a9c 	.word	0x20000a9c
 8007918:	20000a98 	.word	0x20000a98
 800791c:	e000ed04 	.word	0xe000ed04

08007920 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007920:	b580      	push	{r7, lr}
 8007922:	b08e      	sub	sp, #56	; 0x38
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	603b      	str	r3, [r7, #0]
 800792c:	4613      	mov	r3, r2
 800792e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007930:	2301      	movs	r3, #1
 8007932:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10a      	bne.n	8007950 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800793a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800794c:	bf00      	nop
 800794e:	e7fe      	b.n	800794e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007950:	f000 fdce 	bl	80084f0 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8007958:	f3ef 8211 	mrs	r2, BASEPRI
 800795c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007960:	f383 8811 	msr	BASEPRI, r3
 8007964:	f3bf 8f6f 	isb	sy
 8007968:	f3bf 8f4f 	dsb	sy
 800796c:	623a      	str	r2, [r7, #32]
 800796e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8007970:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007972:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d004      	beq.n	8007984 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800797a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007986:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800798a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800798e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007990:	2202      	movs	r2, #2
 8007992:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

			switch( eAction )
 8007996:	79fb      	ldrb	r3, [r7, #7]
 8007998:	2b04      	cmp	r3, #4
 800799a:	d82f      	bhi.n	80079fc <xTaskGenericNotifyFromISR+0xdc>
 800799c:	a201      	add	r2, pc, #4	; (adr r2, 80079a4 <xTaskGenericNotifyFromISR+0x84>)
 800799e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a2:	bf00      	nop
 80079a4:	080079fd 	.word	0x080079fd
 80079a8:	080079b9 	.word	0x080079b9
 80079ac:	080079cb 	.word	0x080079cb
 80079b0:	080079db 	.word	0x080079db
 80079b4:	080079e5 	.word	0x080079e5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80079b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ba:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	431a      	orrs	r2, r3
 80079c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 80079c8:	e018      	b.n	80079fc <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80079ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079cc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80079d0:	1c5a      	adds	r2, r3, #1
 80079d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 80079d8:	e010      	b.n	80079fc <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80079da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 80079e2:	e00b      	b.n	80079fc <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80079e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d004      	beq.n	80079f6 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80079ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80079f4:	e001      	b.n	80079fa <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 80079f6:	2300      	movs	r3, #0
 80079f8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80079fa:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80079fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d147      	bne.n	8007a94 <xTaskGenericNotifyFromISR+0x174>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00a      	beq.n	8007a22 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8007a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a10:	f383 8811 	msr	BASEPRI, r3
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	61bb      	str	r3, [r7, #24]
}
 8007a1e:	bf00      	nop
 8007a20:	e7fe      	b.n	8007a20 <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a22:	4b22      	ldr	r3, [pc, #136]	; (8007aac <xTaskGenericNotifyFromISR+0x18c>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d11d      	bne.n	8007a66 <xTaskGenericNotifyFromISR+0x146>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2c:	3304      	adds	r3, #4
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fe f994 	bl	8005d5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a38:	4b1d      	ldr	r3, [pc, #116]	; (8007ab0 <xTaskGenericNotifyFromISR+0x190>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d903      	bls.n	8007a48 <xTaskGenericNotifyFromISR+0x128>
 8007a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a44:	4a1a      	ldr	r2, [pc, #104]	; (8007ab0 <xTaskGenericNotifyFromISR+0x190>)
 8007a46:	6013      	str	r3, [r2, #0]
 8007a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	4413      	add	r3, r2
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	4a17      	ldr	r2, [pc, #92]	; (8007ab4 <xTaskGenericNotifyFromISR+0x194>)
 8007a56:	441a      	add	r2, r3
 8007a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5a:	3304      	adds	r3, #4
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	4610      	mov	r0, r2
 8007a60:	f7fe f921 	bl	8005ca6 <vListInsertEnd>
 8007a64:	e005      	b.n	8007a72 <xTaskGenericNotifyFromISR+0x152>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a68:	3318      	adds	r3, #24
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	4812      	ldr	r0, [pc, #72]	; (8007ab8 <xTaskGenericNotifyFromISR+0x198>)
 8007a6e:	f7fe f91a 	bl	8005ca6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a76:	4b11      	ldr	r3, [pc, #68]	; (8007abc <xTaskGenericNotifyFromISR+0x19c>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d909      	bls.n	8007a94 <xTaskGenericNotifyFromISR+0x174>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <xTaskGenericNotifyFromISR+0x16e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a88:	2201      	movs	r2, #1
 8007a8a:	601a      	str	r2, [r3, #0]
 8007a8c:	e002      	b.n	8007a94 <xTaskGenericNotifyFromISR+0x174>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8007a8e:	4b0c      	ldr	r3, [pc, #48]	; (8007ac0 <xTaskGenericNotifyFromISR+0x1a0>)
 8007a90:	2201      	movs	r2, #1
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a96:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	f383 8811 	msr	BASEPRI, r3
}
 8007a9e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3738      	adds	r7, #56	; 0x38
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	20000f94 	.word	0x20000f94
 8007ab0:	20000f74 	.word	0x20000f74
 8007ab4:	20000a9c 	.word	0x20000a9c
 8007ab8:	20000f2c 	.word	0x20000f2c
 8007abc:	20000a98 	.word	0x20000a98
 8007ac0:	20000f80 	.word	0x20000f80

08007ac4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ace:	4b21      	ldr	r3, [pc, #132]	; (8007b54 <prvAddCurrentTaskToDelayedList+0x90>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ad4:	4b20      	ldr	r3, [pc, #128]	; (8007b58 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3304      	adds	r3, #4
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fe f93e 	bl	8005d5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae6:	d10a      	bne.n	8007afe <prvAddCurrentTaskToDelayedList+0x3a>
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d007      	beq.n	8007afe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007aee:	4b1a      	ldr	r3, [pc, #104]	; (8007b58 <prvAddCurrentTaskToDelayedList+0x94>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	3304      	adds	r3, #4
 8007af4:	4619      	mov	r1, r3
 8007af6:	4819      	ldr	r0, [pc, #100]	; (8007b5c <prvAddCurrentTaskToDelayedList+0x98>)
 8007af8:	f7fe f8d5 	bl	8005ca6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007afc:	e026      	b.n	8007b4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4413      	add	r3, r2
 8007b04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b06:	4b14      	ldr	r3, [pc, #80]	; (8007b58 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d209      	bcs.n	8007b2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b16:	4b12      	ldr	r3, [pc, #72]	; (8007b60 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	4b0f      	ldr	r3, [pc, #60]	; (8007b58 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	3304      	adds	r3, #4
 8007b20:	4619      	mov	r1, r3
 8007b22:	4610      	mov	r0, r2
 8007b24:	f7fe f8e2 	bl	8005cec <vListInsert>
}
 8007b28:	e010      	b.n	8007b4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b2a:	4b0e      	ldr	r3, [pc, #56]	; (8007b64 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	4b0a      	ldr	r3, [pc, #40]	; (8007b58 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3304      	adds	r3, #4
 8007b34:	4619      	mov	r1, r3
 8007b36:	4610      	mov	r0, r2
 8007b38:	f7fe f8d8 	bl	8005cec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b3c:	4b0a      	ldr	r3, [pc, #40]	; (8007b68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d202      	bcs.n	8007b4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007b46:	4a08      	ldr	r2, [pc, #32]	; (8007b68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	6013      	str	r3, [r2, #0]
}
 8007b4c:	bf00      	nop
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	20000f70 	.word	0x20000f70
 8007b58:	20000a98 	.word	0x20000a98
 8007b5c:	20000f58 	.word	0x20000f58
 8007b60:	20000f28 	.word	0x20000f28
 8007b64:	20000f24 	.word	0x20000f24
 8007b68:	20000f8c 	.word	0x20000f8c

08007b6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b08a      	sub	sp, #40	; 0x28
 8007b70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007b72:	2300      	movs	r3, #0
 8007b74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007b76:	f000 facb 	bl	8008110 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007b7a:	4b1c      	ldr	r3, [pc, #112]	; (8007bec <xTimerCreateTimerTask+0x80>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d021      	beq.n	8007bc6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007b82:	2300      	movs	r3, #0
 8007b84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007b86:	2300      	movs	r3, #0
 8007b88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007b8a:	1d3a      	adds	r2, r7, #4
 8007b8c:	f107 0108 	add.w	r1, r7, #8
 8007b90:	f107 030c 	add.w	r3, r7, #12
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7fe f841 	bl	8005c1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007b9a:	6879      	ldr	r1, [r7, #4]
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	9202      	str	r2, [sp, #8]
 8007ba2:	9301      	str	r3, [sp, #4]
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	2300      	movs	r3, #0
 8007baa:	460a      	mov	r2, r1
 8007bac:	4910      	ldr	r1, [pc, #64]	; (8007bf0 <xTimerCreateTimerTask+0x84>)
 8007bae:	4811      	ldr	r0, [pc, #68]	; (8007bf4 <xTimerCreateTimerTask+0x88>)
 8007bb0:	f7fe feda 	bl	8006968 <xTaskCreateStatic>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	4a10      	ldr	r2, [pc, #64]	; (8007bf8 <xTimerCreateTimerTask+0x8c>)
 8007bb8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007bba:	4b0f      	ldr	r3, [pc, #60]	; (8007bf8 <xTimerCreateTimerTask+0x8c>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d001      	beq.n	8007bc6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10a      	bne.n	8007be2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd0:	f383 8811 	msr	BASEPRI, r3
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	613b      	str	r3, [r7, #16]
}
 8007bde:	bf00      	nop
 8007be0:	e7fe      	b.n	8007be0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007be2:	697b      	ldr	r3, [r7, #20]
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3718      	adds	r7, #24
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	20000fc8 	.word	0x20000fc8
 8007bf0:	08008c18 	.word	0x08008c18
 8007bf4:	08007d19 	.word	0x08007d19
 8007bf8:	20000fcc 	.word	0x20000fcc

08007bfc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b08a      	sub	sp, #40	; 0x28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
 8007c08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10a      	bne.n	8007c2a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	623b      	str	r3, [r7, #32]
}
 8007c26:	bf00      	nop
 8007c28:	e7fe      	b.n	8007c28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007c2a:	4b1a      	ldr	r3, [pc, #104]	; (8007c94 <xTimerGenericCommand+0x98>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d02a      	beq.n	8007c88 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	2b05      	cmp	r3, #5
 8007c42:	dc18      	bgt.n	8007c76 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007c44:	f7ff fcd6 	bl	80075f4 <xTaskGetSchedulerState>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d109      	bne.n	8007c62 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007c4e:	4b11      	ldr	r3, [pc, #68]	; (8007c94 <xTimerGenericCommand+0x98>)
 8007c50:	6818      	ldr	r0, [r3, #0]
 8007c52:	f107 0110 	add.w	r1, r7, #16
 8007c56:	2300      	movs	r3, #0
 8007c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c5a:	f7fe f9e9 	bl	8006030 <xQueueGenericSend>
 8007c5e:	6278      	str	r0, [r7, #36]	; 0x24
 8007c60:	e012      	b.n	8007c88 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007c62:	4b0c      	ldr	r3, [pc, #48]	; (8007c94 <xTimerGenericCommand+0x98>)
 8007c64:	6818      	ldr	r0, [r3, #0]
 8007c66:	f107 0110 	add.w	r1, r7, #16
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f7fe f9df 	bl	8006030 <xQueueGenericSend>
 8007c72:	6278      	str	r0, [r7, #36]	; 0x24
 8007c74:	e008      	b.n	8007c88 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c76:	4b07      	ldr	r3, [pc, #28]	; (8007c94 <xTimerGenericCommand+0x98>)
 8007c78:	6818      	ldr	r0, [r3, #0]
 8007c7a:	f107 0110 	add.w	r1, r7, #16
 8007c7e:	2300      	movs	r3, #0
 8007c80:	683a      	ldr	r2, [r7, #0]
 8007c82:	f7fe fad3 	bl	800622c <xQueueGenericSendFromISR>
 8007c86:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3728      	adds	r7, #40	; 0x28
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	20000fc8 	.word	0x20000fc8

08007c98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b088      	sub	sp, #32
 8007c9c:	af02      	add	r7, sp, #8
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ca2:	4b1c      	ldr	r3, [pc, #112]	; (8007d14 <prvProcessExpiredTimer+0x7c>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	3304      	adds	r3, #4
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7fe f853 	bl	8005d5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	69db      	ldr	r3, [r3, #28]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d122      	bne.n	8007d04 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	699a      	ldr	r2, [r3, #24]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	18d1      	adds	r1, r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	683a      	ldr	r2, [r7, #0]
 8007cca:	6978      	ldr	r0, [r7, #20]
 8007ccc:	f000 f8c8 	bl	8007e60 <prvInsertTimerInActiveList>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d016      	beq.n	8007d04 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	2300      	movs	r3, #0
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	2100      	movs	r1, #0
 8007ce0:	6978      	ldr	r0, [r7, #20]
 8007ce2:	f7ff ff8b 	bl	8007bfc <xTimerGenericCommand>
 8007ce6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d10a      	bne.n	8007d04 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf2:	f383 8811 	msr	BASEPRI, r3
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	60fb      	str	r3, [r7, #12]
}
 8007d00:	bf00      	nop
 8007d02:	e7fe      	b.n	8007d02 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d08:	6978      	ldr	r0, [r7, #20]
 8007d0a:	4798      	blx	r3
}
 8007d0c:	bf00      	nop
 8007d0e:	3718      	adds	r7, #24
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	20000fc0 	.word	0x20000fc0

08007d18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d20:	f107 0308 	add.w	r3, r7, #8
 8007d24:	4618      	mov	r0, r3
 8007d26:	f000 f857 	bl	8007dd8 <prvGetNextExpireTime>
 8007d2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	4619      	mov	r1, r3
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f000 f803 	bl	8007d3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007d36:	f000 f8d5 	bl	8007ee4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d3a:	e7f1      	b.n	8007d20 <prvTimerTask+0x8>

08007d3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007d46:	f7ff f863 	bl	8006e10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d4a:	f107 0308 	add.w	r3, r7, #8
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f000 f866 	bl	8007e20 <prvSampleTimeNow>
 8007d54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d130      	bne.n	8007dbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10a      	bne.n	8007d78 <prvProcessTimerOrBlockTask+0x3c>
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d806      	bhi.n	8007d78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007d6a:	f7ff f85f 	bl	8006e2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007d6e:	68f9      	ldr	r1, [r7, #12]
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f7ff ff91 	bl	8007c98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007d76:	e024      	b.n	8007dc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d008      	beq.n	8007d90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007d7e:	4b13      	ldr	r3, [pc, #76]	; (8007dcc <prvProcessTimerOrBlockTask+0x90>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	bf0c      	ite	eq
 8007d88:	2301      	moveq	r3, #1
 8007d8a:	2300      	movne	r3, #0
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007d90:	4b0f      	ldr	r3, [pc, #60]	; (8007dd0 <prvProcessTimerOrBlockTask+0x94>)
 8007d92:	6818      	ldr	r0, [r3, #0]
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	683a      	ldr	r2, [r7, #0]
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	f7fe fdaf 	bl	8006900 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007da2:	f7ff f843 	bl	8006e2c <xTaskResumeAll>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10a      	bne.n	8007dc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007dac:	4b09      	ldr	r3, [pc, #36]	; (8007dd4 <prvProcessTimerOrBlockTask+0x98>)
 8007dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007db2:	601a      	str	r2, [r3, #0]
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	f3bf 8f6f 	isb	sy
}
 8007dbc:	e001      	b.n	8007dc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007dbe:	f7ff f835 	bl	8006e2c <xTaskResumeAll>
}
 8007dc2:	bf00      	nop
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	20000fc4 	.word	0x20000fc4
 8007dd0:	20000fc8 	.word	0x20000fc8
 8007dd4:	e000ed04 	.word	0xe000ed04

08007dd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007de0:	4b0e      	ldr	r3, [pc, #56]	; (8007e1c <prvGetNextExpireTime+0x44>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	bf0c      	ite	eq
 8007dea:	2301      	moveq	r3, #1
 8007dec:	2300      	movne	r3, #0
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	461a      	mov	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d105      	bne.n	8007e0a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007dfe:	4b07      	ldr	r3, [pc, #28]	; (8007e1c <prvGetNextExpireTime+0x44>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	60fb      	str	r3, [r7, #12]
 8007e08:	e001      	b.n	8007e0e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3714      	adds	r7, #20
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bc80      	pop	{r7}
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	20000fc0 	.word	0x20000fc0

08007e20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007e28:	f7ff f89e 	bl	8006f68 <xTaskGetTickCount>
 8007e2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007e2e:	4b0b      	ldr	r3, [pc, #44]	; (8007e5c <prvSampleTimeNow+0x3c>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d205      	bcs.n	8007e44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007e38:	f000 f908 	bl	800804c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	601a      	str	r2, [r3, #0]
 8007e42:	e002      	b.n	8007e4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007e4a:	4a04      	ldr	r2, [pc, #16]	; (8007e5c <prvSampleTimeNow+0x3c>)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007e50:	68fb      	ldr	r3, [r7, #12]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	20000fd0 	.word	0x20000fd0

08007e60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
 8007e6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d812      	bhi.n	8007eac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	1ad2      	subs	r2, r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d302      	bcc.n	8007e9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007e94:	2301      	movs	r3, #1
 8007e96:	617b      	str	r3, [r7, #20]
 8007e98:	e01b      	b.n	8007ed2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007e9a:	4b10      	ldr	r3, [pc, #64]	; (8007edc <prvInsertTimerInActiveList+0x7c>)
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	f7fd ff21 	bl	8005cec <vListInsert>
 8007eaa:	e012      	b.n	8007ed2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d206      	bcs.n	8007ec2 <prvInsertTimerInActiveList+0x62>
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d302      	bcc.n	8007ec2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	617b      	str	r3, [r7, #20]
 8007ec0:	e007      	b.n	8007ed2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ec2:	4b07      	ldr	r3, [pc, #28]	; (8007ee0 <prvInsertTimerInActiveList+0x80>)
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	3304      	adds	r3, #4
 8007eca:	4619      	mov	r1, r3
 8007ecc:	4610      	mov	r0, r2
 8007ece:	f7fd ff0d 	bl	8005cec <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007ed2:	697b      	ldr	r3, [r7, #20]
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3718      	adds	r7, #24
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	20000fc4 	.word	0x20000fc4
 8007ee0:	20000fc0 	.word	0x20000fc0

08007ee4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b08e      	sub	sp, #56	; 0x38
 8007ee8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007eea:	e09d      	b.n	8008028 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	da18      	bge.n	8007f24 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007ef2:	1d3b      	adds	r3, r7, #4
 8007ef4:	3304      	adds	r3, #4
 8007ef6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10a      	bne.n	8007f14 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f02:	f383 8811 	msr	BASEPRI, r3
 8007f06:	f3bf 8f6f 	isb	sy
 8007f0a:	f3bf 8f4f 	dsb	sy
 8007f0e:	61fb      	str	r3, [r7, #28]
}
 8007f10:	bf00      	nop
 8007f12:	e7fe      	b.n	8007f12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f1a:	6850      	ldr	r0, [r2, #4]
 8007f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f1e:	6892      	ldr	r2, [r2, #8]
 8007f20:	4611      	mov	r1, r2
 8007f22:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	db7d      	blt.n	8008026 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f30:	695b      	ldr	r3, [r3, #20]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d004      	beq.n	8007f40 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f38:	3304      	adds	r3, #4
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fd ff0e 	bl	8005d5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f40:	463b      	mov	r3, r7
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7ff ff6c 	bl	8007e20 <prvSampleTimeNow>
 8007f48:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2b09      	cmp	r3, #9
 8007f4e:	d86b      	bhi.n	8008028 <prvProcessReceivedCommands+0x144>
 8007f50:	a201      	add	r2, pc, #4	; (adr r2, 8007f58 <prvProcessReceivedCommands+0x74>)
 8007f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f56:	bf00      	nop
 8007f58:	08007f81 	.word	0x08007f81
 8007f5c:	08007f81 	.word	0x08007f81
 8007f60:	08007f81 	.word	0x08007f81
 8007f64:	08008029 	.word	0x08008029
 8007f68:	08007fdd 	.word	0x08007fdd
 8007f6c:	08008015 	.word	0x08008015
 8007f70:	08007f81 	.word	0x08007f81
 8007f74:	08007f81 	.word	0x08007f81
 8007f78:	08008029 	.word	0x08008029
 8007f7c:	08007fdd 	.word	0x08007fdd
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f84:	699b      	ldr	r3, [r3, #24]
 8007f86:	18d1      	adds	r1, r2, r3
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f8e:	f7ff ff67 	bl	8007e60 <prvInsertTimerInActiveList>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d047      	beq.n	8008028 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f9e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa2:	69db      	ldr	r3, [r3, #28]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d13f      	bne.n	8008028 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007fa8:	68ba      	ldr	r2, [r7, #8]
 8007faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fac:	699b      	ldr	r3, [r3, #24]
 8007fae:	441a      	add	r2, r3
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	9300      	str	r3, [sp, #0]
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fba:	f7ff fe1f 	bl	8007bfc <xTimerGenericCommand>
 8007fbe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007fc0:	6a3b      	ldr	r3, [r7, #32]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d130      	bne.n	8008028 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fca:	f383 8811 	msr	BASEPRI, r3
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	61bb      	str	r3, [r7, #24]
}
 8007fd8:	bf00      	nop
 8007fda:	e7fe      	b.n	8007fda <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007fdc:	68ba      	ldr	r2, [r7, #8]
 8007fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d10a      	bne.n	8008000 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fee:	f383 8811 	msr	BASEPRI, r3
 8007ff2:	f3bf 8f6f 	isb	sy
 8007ff6:	f3bf 8f4f 	dsb	sy
 8007ffa:	617b      	str	r3, [r7, #20]
}
 8007ffc:	bf00      	nop
 8007ffe:	e7fe      	b.n	8007ffe <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008002:	699a      	ldr	r2, [r3, #24]
 8008004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008006:	18d1      	adds	r1, r2, r3
 8008008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800800c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800800e:	f7ff ff27 	bl	8007e60 <prvInsertTimerInActiveList>
					break;
 8008012:	e009      	b.n	8008028 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008016:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800801a:	2b00      	cmp	r3, #0
 800801c:	d104      	bne.n	8008028 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800801e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008020:	f000 fb68 	bl	80086f4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008024:	e000      	b.n	8008028 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008026:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008028:	4b07      	ldr	r3, [pc, #28]	; (8008048 <prvProcessReceivedCommands+0x164>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	1d39      	adds	r1, r7, #4
 800802e:	2200      	movs	r2, #0
 8008030:	4618      	mov	r0, r3
 8008032:	f7fe f993 	bl	800635c <xQueueReceive>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	f47f af57 	bne.w	8007eec <prvProcessReceivedCommands+0x8>
	}
}
 800803e:	bf00      	nop
 8008040:	bf00      	nop
 8008042:	3730      	adds	r7, #48	; 0x30
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	20000fc8 	.word	0x20000fc8

0800804c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b088      	sub	sp, #32
 8008050:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008052:	e045      	b.n	80080e0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008054:	4b2c      	ldr	r3, [pc, #176]	; (8008108 <prvSwitchTimerLists+0xbc>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800805e:	4b2a      	ldr	r3, [pc, #168]	; (8008108 <prvSwitchTimerLists+0xbc>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	3304      	adds	r3, #4
 800806c:	4618      	mov	r0, r3
 800806e:	f7fd fe75 	bl	8005d5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	69db      	ldr	r3, [r3, #28]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d12e      	bne.n	80080e0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	699b      	ldr	r3, [r3, #24]
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	4413      	add	r3, r2
 800808a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	429a      	cmp	r2, r3
 8008092:	d90e      	bls.n	80080b2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080a0:	4b19      	ldr	r3, [pc, #100]	; (8008108 <prvSwitchTimerLists+0xbc>)
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	3304      	adds	r3, #4
 80080a8:	4619      	mov	r1, r3
 80080aa:	4610      	mov	r0, r2
 80080ac:	f7fd fe1e 	bl	8005cec <vListInsert>
 80080b0:	e016      	b.n	80080e0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080b2:	2300      	movs	r3, #0
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	2300      	movs	r3, #0
 80080b8:	693a      	ldr	r2, [r7, #16]
 80080ba:	2100      	movs	r1, #0
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f7ff fd9d 	bl	8007bfc <xTimerGenericCommand>
 80080c2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10a      	bne.n	80080e0 <prvSwitchTimerLists+0x94>
	__asm volatile
 80080ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	603b      	str	r3, [r7, #0]
}
 80080dc:	bf00      	nop
 80080de:	e7fe      	b.n	80080de <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80080e0:	4b09      	ldr	r3, [pc, #36]	; (8008108 <prvSwitchTimerLists+0xbc>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1b4      	bne.n	8008054 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80080ea:	4b07      	ldr	r3, [pc, #28]	; (8008108 <prvSwitchTimerLists+0xbc>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80080f0:	4b06      	ldr	r3, [pc, #24]	; (800810c <prvSwitchTimerLists+0xc0>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a04      	ldr	r2, [pc, #16]	; (8008108 <prvSwitchTimerLists+0xbc>)
 80080f6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80080f8:	4a04      	ldr	r2, [pc, #16]	; (800810c <prvSwitchTimerLists+0xc0>)
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	6013      	str	r3, [r2, #0]
}
 80080fe:	bf00      	nop
 8008100:	3718      	adds	r7, #24
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	20000fc0 	.word	0x20000fc0
 800810c:	20000fc4 	.word	0x20000fc4

08008110 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008116:	f000 f929 	bl	800836c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800811a:	4b15      	ldr	r3, [pc, #84]	; (8008170 <prvCheckForValidListAndQueue+0x60>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d120      	bne.n	8008164 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008122:	4814      	ldr	r0, [pc, #80]	; (8008174 <prvCheckForValidListAndQueue+0x64>)
 8008124:	f7fd fd94 	bl	8005c50 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008128:	4813      	ldr	r0, [pc, #76]	; (8008178 <prvCheckForValidListAndQueue+0x68>)
 800812a:	f7fd fd91 	bl	8005c50 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800812e:	4b13      	ldr	r3, [pc, #76]	; (800817c <prvCheckForValidListAndQueue+0x6c>)
 8008130:	4a10      	ldr	r2, [pc, #64]	; (8008174 <prvCheckForValidListAndQueue+0x64>)
 8008132:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008134:	4b12      	ldr	r3, [pc, #72]	; (8008180 <prvCheckForValidListAndQueue+0x70>)
 8008136:	4a10      	ldr	r2, [pc, #64]	; (8008178 <prvCheckForValidListAndQueue+0x68>)
 8008138:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800813a:	2300      	movs	r3, #0
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	4b11      	ldr	r3, [pc, #68]	; (8008184 <prvCheckForValidListAndQueue+0x74>)
 8008140:	4a11      	ldr	r2, [pc, #68]	; (8008188 <prvCheckForValidListAndQueue+0x78>)
 8008142:	2110      	movs	r1, #16
 8008144:	200a      	movs	r0, #10
 8008146:	f7fd fe9b 	bl	8005e80 <xQueueGenericCreateStatic>
 800814a:	4603      	mov	r3, r0
 800814c:	4a08      	ldr	r2, [pc, #32]	; (8008170 <prvCheckForValidListAndQueue+0x60>)
 800814e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008150:	4b07      	ldr	r3, [pc, #28]	; (8008170 <prvCheckForValidListAndQueue+0x60>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d005      	beq.n	8008164 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008158:	4b05      	ldr	r3, [pc, #20]	; (8008170 <prvCheckForValidListAndQueue+0x60>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	490b      	ldr	r1, [pc, #44]	; (800818c <prvCheckForValidListAndQueue+0x7c>)
 800815e:	4618      	mov	r0, r3
 8008160:	f7fe fba6 	bl	80068b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008164:	f000 f932 	bl	80083cc <vPortExitCritical>
}
 8008168:	bf00      	nop
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	20000fc8 	.word	0x20000fc8
 8008174:	20000f98 	.word	0x20000f98
 8008178:	20000fac 	.word	0x20000fac
 800817c:	20000fc0 	.word	0x20000fc0
 8008180:	20000fc4 	.word	0x20000fc4
 8008184:	20001074 	.word	0x20001074
 8008188:	20000fd4 	.word	0x20000fd4
 800818c:	08008c20 	.word	0x08008c20

08008190 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	3b04      	subs	r3, #4
 80081a0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80081a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	3b04      	subs	r3, #4
 80081ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	f023 0201 	bic.w	r2, r3, #1
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	3b04      	subs	r3, #4
 80081be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80081c0:	4a08      	ldr	r2, [pc, #32]	; (80081e4 <pxPortInitialiseStack+0x54>)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	3b14      	subs	r3, #20
 80081ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	3b20      	subs	r3, #32
 80081d6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80081d8:	68fb      	ldr	r3, [r7, #12]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	bc80      	pop	{r7}
 80081e2:	4770      	bx	lr
 80081e4:	080081e9 	.word	0x080081e9

080081e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80081ee:	2300      	movs	r3, #0
 80081f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80081f2:	4b12      	ldr	r3, [pc, #72]	; (800823c <prvTaskExitError+0x54>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081fa:	d00a      	beq.n	8008212 <prvTaskExitError+0x2a>
	__asm volatile
 80081fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	60fb      	str	r3, [r7, #12]
}
 800820e:	bf00      	nop
 8008210:	e7fe      	b.n	8008210 <prvTaskExitError+0x28>
	__asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	60bb      	str	r3, [r7, #8]
}
 8008224:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008226:	bf00      	nop
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d0fc      	beq.n	8008228 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800822e:	bf00      	nop
 8008230:	bf00      	nop
 8008232:	3714      	adds	r7, #20
 8008234:	46bd      	mov	sp, r7
 8008236:	bc80      	pop	{r7}
 8008238:	4770      	bx	lr
 800823a:	bf00      	nop
 800823c:	2000000c 	.word	0x2000000c

08008240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008240:	4b07      	ldr	r3, [pc, #28]	; (8008260 <pxCurrentTCBConst2>)
 8008242:	6819      	ldr	r1, [r3, #0]
 8008244:	6808      	ldr	r0, [r1, #0]
 8008246:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800824a:	f380 8809 	msr	PSP, r0
 800824e:	f3bf 8f6f 	isb	sy
 8008252:	f04f 0000 	mov.w	r0, #0
 8008256:	f380 8811 	msr	BASEPRI, r0
 800825a:	f04e 0e0d 	orr.w	lr, lr, #13
 800825e:	4770      	bx	lr

08008260 <pxCurrentTCBConst2>:
 8008260:	20000a98 	.word	0x20000a98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008264:	bf00      	nop
 8008266:	bf00      	nop

08008268 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008268:	4806      	ldr	r0, [pc, #24]	; (8008284 <prvPortStartFirstTask+0x1c>)
 800826a:	6800      	ldr	r0, [r0, #0]
 800826c:	6800      	ldr	r0, [r0, #0]
 800826e:	f380 8808 	msr	MSP, r0
 8008272:	b662      	cpsie	i
 8008274:	b661      	cpsie	f
 8008276:	f3bf 8f4f 	dsb	sy
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	df00      	svc	0
 8008280:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008282:	bf00      	nop
 8008284:	e000ed08 	.word	0xe000ed08

08008288 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800828e:	4b32      	ldr	r3, [pc, #200]	; (8008358 <xPortStartScheduler+0xd0>)
 8008290:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	b2db      	uxtb	r3, r3
 8008298:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	22ff      	movs	r2, #255	; 0xff
 800829e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80082a8:	78fb      	ldrb	r3, [r7, #3]
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80082b0:	b2da      	uxtb	r2, r3
 80082b2:	4b2a      	ldr	r3, [pc, #168]	; (800835c <xPortStartScheduler+0xd4>)
 80082b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80082b6:	4b2a      	ldr	r3, [pc, #168]	; (8008360 <xPortStartScheduler+0xd8>)
 80082b8:	2207      	movs	r2, #7
 80082ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082bc:	e009      	b.n	80082d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80082be:	4b28      	ldr	r3, [pc, #160]	; (8008360 <xPortStartScheduler+0xd8>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	3b01      	subs	r3, #1
 80082c4:	4a26      	ldr	r2, [pc, #152]	; (8008360 <xPortStartScheduler+0xd8>)
 80082c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80082c8:	78fb      	ldrb	r3, [r7, #3]
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	005b      	lsls	r3, r3, #1
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082d2:	78fb      	ldrb	r3, [r7, #3]
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082da:	2b80      	cmp	r3, #128	; 0x80
 80082dc:	d0ef      	beq.n	80082be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80082de:	4b20      	ldr	r3, [pc, #128]	; (8008360 <xPortStartScheduler+0xd8>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f1c3 0307 	rsb	r3, r3, #7
 80082e6:	2b04      	cmp	r3, #4
 80082e8:	d00a      	beq.n	8008300 <xPortStartScheduler+0x78>
	__asm volatile
 80082ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	60bb      	str	r3, [r7, #8]
}
 80082fc:	bf00      	nop
 80082fe:	e7fe      	b.n	80082fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008300:	4b17      	ldr	r3, [pc, #92]	; (8008360 <xPortStartScheduler+0xd8>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	021b      	lsls	r3, r3, #8
 8008306:	4a16      	ldr	r2, [pc, #88]	; (8008360 <xPortStartScheduler+0xd8>)
 8008308:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800830a:	4b15      	ldr	r3, [pc, #84]	; (8008360 <xPortStartScheduler+0xd8>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008312:	4a13      	ldr	r2, [pc, #76]	; (8008360 <xPortStartScheduler+0xd8>)
 8008314:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	b2da      	uxtb	r2, r3
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800831e:	4b11      	ldr	r3, [pc, #68]	; (8008364 <xPortStartScheduler+0xdc>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a10      	ldr	r2, [pc, #64]	; (8008364 <xPortStartScheduler+0xdc>)
 8008324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008328:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800832a:	4b0e      	ldr	r3, [pc, #56]	; (8008364 <xPortStartScheduler+0xdc>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a0d      	ldr	r2, [pc, #52]	; (8008364 <xPortStartScheduler+0xdc>)
 8008330:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008334:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008336:	f000 f8b9 	bl	80084ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800833a:	4b0b      	ldr	r3, [pc, #44]	; (8008368 <xPortStartScheduler+0xe0>)
 800833c:	2200      	movs	r2, #0
 800833e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008340:	f7ff ff92 	bl	8008268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008344:	f7fe fedc 	bl	8007100 <vTaskSwitchContext>
	prvTaskExitError();
 8008348:	f7ff ff4e 	bl	80081e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	e000e400 	.word	0xe000e400
 800835c:	200010c4 	.word	0x200010c4
 8008360:	200010c8 	.word	0x200010c8
 8008364:	e000ed20 	.word	0xe000ed20
 8008368:	2000000c 	.word	0x2000000c

0800836c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
	__asm volatile
 8008372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008376:	f383 8811 	msr	BASEPRI, r3
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	607b      	str	r3, [r7, #4]
}
 8008384:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008386:	4b0f      	ldr	r3, [pc, #60]	; (80083c4 <vPortEnterCritical+0x58>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	3301      	adds	r3, #1
 800838c:	4a0d      	ldr	r2, [pc, #52]	; (80083c4 <vPortEnterCritical+0x58>)
 800838e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008390:	4b0c      	ldr	r3, [pc, #48]	; (80083c4 <vPortEnterCritical+0x58>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d10f      	bne.n	80083b8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008398:	4b0b      	ldr	r3, [pc, #44]	; (80083c8 <vPortEnterCritical+0x5c>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	b2db      	uxtb	r3, r3
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00a      	beq.n	80083b8 <vPortEnterCritical+0x4c>
	__asm volatile
 80083a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a6:	f383 8811 	msr	BASEPRI, r3
 80083aa:	f3bf 8f6f 	isb	sy
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	603b      	str	r3, [r7, #0]
}
 80083b4:	bf00      	nop
 80083b6:	e7fe      	b.n	80083b6 <vPortEnterCritical+0x4a>
	}
}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	bc80      	pop	{r7}
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	2000000c 	.word	0x2000000c
 80083c8:	e000ed04 	.word	0xe000ed04

080083cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80083d2:	4b11      	ldr	r3, [pc, #68]	; (8008418 <vPortExitCritical+0x4c>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10a      	bne.n	80083f0 <vPortExitCritical+0x24>
	__asm volatile
 80083da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083de:	f383 8811 	msr	BASEPRI, r3
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	607b      	str	r3, [r7, #4]
}
 80083ec:	bf00      	nop
 80083ee:	e7fe      	b.n	80083ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80083f0:	4b09      	ldr	r3, [pc, #36]	; (8008418 <vPortExitCritical+0x4c>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	3b01      	subs	r3, #1
 80083f6:	4a08      	ldr	r2, [pc, #32]	; (8008418 <vPortExitCritical+0x4c>)
 80083f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80083fa:	4b07      	ldr	r3, [pc, #28]	; (8008418 <vPortExitCritical+0x4c>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d105      	bne.n	800840e <vPortExitCritical+0x42>
 8008402:	2300      	movs	r3, #0
 8008404:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	f383 8811 	msr	BASEPRI, r3
}
 800840c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800840e:	bf00      	nop
 8008410:	370c      	adds	r7, #12
 8008412:	46bd      	mov	sp, r7
 8008414:	bc80      	pop	{r7}
 8008416:	4770      	bx	lr
 8008418:	2000000c 	.word	0x2000000c
 800841c:	00000000 	.word	0x00000000

08008420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008420:	f3ef 8009 	mrs	r0, PSP
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	4b0d      	ldr	r3, [pc, #52]	; (8008460 <pxCurrentTCBConst>)
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008430:	6010      	str	r0, [r2, #0]
 8008432:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008436:	f04f 0050 	mov.w	r0, #80	; 0x50
 800843a:	f380 8811 	msr	BASEPRI, r0
 800843e:	f7fe fe5f 	bl	8007100 <vTaskSwitchContext>
 8008442:	f04f 0000 	mov.w	r0, #0
 8008446:	f380 8811 	msr	BASEPRI, r0
 800844a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800844e:	6819      	ldr	r1, [r3, #0]
 8008450:	6808      	ldr	r0, [r1, #0]
 8008452:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008456:	f380 8809 	msr	PSP, r0
 800845a:	f3bf 8f6f 	isb	sy
 800845e:	4770      	bx	lr

08008460 <pxCurrentTCBConst>:
 8008460:	20000a98 	.word	0x20000a98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008464:	bf00      	nop
 8008466:	bf00      	nop

08008468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
	__asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	607b      	str	r3, [r7, #4]
}
 8008480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008482:	f7fe fd7f 	bl	8006f84 <xTaskIncrementTick>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d003      	beq.n	8008494 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800848c:	4b06      	ldr	r3, [pc, #24]	; (80084a8 <SysTick_Handler+0x40>)
 800848e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008492:	601a      	str	r2, [r3, #0]
 8008494:	2300      	movs	r3, #0
 8008496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	f383 8811 	msr	BASEPRI, r3
}
 800849e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80084a0:	bf00      	nop
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	e000ed04 	.word	0xe000ed04

080084ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80084ac:	b480      	push	{r7}
 80084ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80084b0:	4b0a      	ldr	r3, [pc, #40]	; (80084dc <vPortSetupTimerInterrupt+0x30>)
 80084b2:	2200      	movs	r2, #0
 80084b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80084b6:	4b0a      	ldr	r3, [pc, #40]	; (80084e0 <vPortSetupTimerInterrupt+0x34>)
 80084b8:	2200      	movs	r2, #0
 80084ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80084bc:	4b09      	ldr	r3, [pc, #36]	; (80084e4 <vPortSetupTimerInterrupt+0x38>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a09      	ldr	r2, [pc, #36]	; (80084e8 <vPortSetupTimerInterrupt+0x3c>)
 80084c2:	fba2 2303 	umull	r2, r3, r2, r3
 80084c6:	099b      	lsrs	r3, r3, #6
 80084c8:	4a08      	ldr	r2, [pc, #32]	; (80084ec <vPortSetupTimerInterrupt+0x40>)
 80084ca:	3b01      	subs	r3, #1
 80084cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80084ce:	4b03      	ldr	r3, [pc, #12]	; (80084dc <vPortSetupTimerInterrupt+0x30>)
 80084d0:	2207      	movs	r2, #7
 80084d2:	601a      	str	r2, [r3, #0]
}
 80084d4:	bf00      	nop
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bc80      	pop	{r7}
 80084da:	4770      	bx	lr
 80084dc:	e000e010 	.word	0xe000e010
 80084e0:	e000e018 	.word	0xe000e018
 80084e4:	20000000 	.word	0x20000000
 80084e8:	10624dd3 	.word	0x10624dd3
 80084ec:	e000e014 	.word	0xe000e014

080084f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80084f6:	f3ef 8305 	mrs	r3, IPSR
 80084fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2b0f      	cmp	r3, #15
 8008500:	d914      	bls.n	800852c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008502:	4a16      	ldr	r2, [pc, #88]	; (800855c <vPortValidateInterruptPriority+0x6c>)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	4413      	add	r3, r2
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800850c:	4b14      	ldr	r3, [pc, #80]	; (8008560 <vPortValidateInterruptPriority+0x70>)
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	7afa      	ldrb	r2, [r7, #11]
 8008512:	429a      	cmp	r2, r3
 8008514:	d20a      	bcs.n	800852c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851a:	f383 8811 	msr	BASEPRI, r3
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	607b      	str	r3, [r7, #4]
}
 8008528:	bf00      	nop
 800852a:	e7fe      	b.n	800852a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800852c:	4b0d      	ldr	r3, [pc, #52]	; (8008564 <vPortValidateInterruptPriority+0x74>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008534:	4b0c      	ldr	r3, [pc, #48]	; (8008568 <vPortValidateInterruptPriority+0x78>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	429a      	cmp	r2, r3
 800853a:	d90a      	bls.n	8008552 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800853c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008540:	f383 8811 	msr	BASEPRI, r3
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	603b      	str	r3, [r7, #0]
}
 800854e:	bf00      	nop
 8008550:	e7fe      	b.n	8008550 <vPortValidateInterruptPriority+0x60>
	}
 8008552:	bf00      	nop
 8008554:	3714      	adds	r7, #20
 8008556:	46bd      	mov	sp, r7
 8008558:	bc80      	pop	{r7}
 800855a:	4770      	bx	lr
 800855c:	e000e3f0 	.word	0xe000e3f0
 8008560:	200010c4 	.word	0x200010c4
 8008564:	e000ed0c 	.word	0xe000ed0c
 8008568:	200010c8 	.word	0x200010c8

0800856c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b08a      	sub	sp, #40	; 0x28
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008574:	2300      	movs	r3, #0
 8008576:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008578:	f7fe fc4a 	bl	8006e10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800857c:	4b58      	ldr	r3, [pc, #352]	; (80086e0 <pvPortMalloc+0x174>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d101      	bne.n	8008588 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008584:	f000 f910 	bl	80087a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008588:	4b56      	ldr	r3, [pc, #344]	; (80086e4 <pvPortMalloc+0x178>)
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4013      	ands	r3, r2
 8008590:	2b00      	cmp	r3, #0
 8008592:	f040 808e 	bne.w	80086b2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d01d      	beq.n	80085d8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800859c:	2208      	movs	r2, #8
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4413      	add	r3, r2
 80085a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f003 0307 	and.w	r3, r3, #7
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d014      	beq.n	80085d8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f023 0307 	bic.w	r3, r3, #7
 80085b4:	3308      	adds	r3, #8
 80085b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f003 0307 	and.w	r3, r3, #7
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00a      	beq.n	80085d8 <pvPortMalloc+0x6c>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c6:	f383 8811 	msr	BASEPRI, r3
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	617b      	str	r3, [r7, #20]
}
 80085d4:	bf00      	nop
 80085d6:	e7fe      	b.n	80085d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d069      	beq.n	80086b2 <pvPortMalloc+0x146>
 80085de:	4b42      	ldr	r3, [pc, #264]	; (80086e8 <pvPortMalloc+0x17c>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d864      	bhi.n	80086b2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80085e8:	4b40      	ldr	r3, [pc, #256]	; (80086ec <pvPortMalloc+0x180>)
 80085ea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80085ec:	4b3f      	ldr	r3, [pc, #252]	; (80086ec <pvPortMalloc+0x180>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085f2:	e004      	b.n	80085fe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80085f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80085f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	429a      	cmp	r2, r3
 8008606:	d903      	bls.n	8008610 <pvPortMalloc+0xa4>
 8008608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1f1      	bne.n	80085f4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008610:	4b33      	ldr	r3, [pc, #204]	; (80086e0 <pvPortMalloc+0x174>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008616:	429a      	cmp	r2, r3
 8008618:	d04b      	beq.n	80086b2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800861a:	6a3b      	ldr	r3, [r7, #32]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2208      	movs	r2, #8
 8008620:	4413      	add	r3, r2
 8008622:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	6a3b      	ldr	r3, [r7, #32]
 800862a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800862c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862e:	685a      	ldr	r2, [r3, #4]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	1ad2      	subs	r2, r2, r3
 8008634:	2308      	movs	r3, #8
 8008636:	005b      	lsls	r3, r3, #1
 8008638:	429a      	cmp	r2, r3
 800863a:	d91f      	bls.n	800867c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800863c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4413      	add	r3, r2
 8008642:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	f003 0307 	and.w	r3, r3, #7
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00a      	beq.n	8008664 <pvPortMalloc+0xf8>
	__asm volatile
 800864e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008652:	f383 8811 	msr	BASEPRI, r3
 8008656:	f3bf 8f6f 	isb	sy
 800865a:	f3bf 8f4f 	dsb	sy
 800865e:	613b      	str	r3, [r7, #16]
}
 8008660:	bf00      	nop
 8008662:	e7fe      	b.n	8008662 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008666:	685a      	ldr	r2, [r3, #4]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	1ad2      	subs	r2, r2, r3
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008676:	69b8      	ldr	r0, [r7, #24]
 8008678:	f000 f8f8 	bl	800886c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800867c:	4b1a      	ldr	r3, [pc, #104]	; (80086e8 <pvPortMalloc+0x17c>)
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	4a18      	ldr	r2, [pc, #96]	; (80086e8 <pvPortMalloc+0x17c>)
 8008688:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800868a:	4b17      	ldr	r3, [pc, #92]	; (80086e8 <pvPortMalloc+0x17c>)
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	4b18      	ldr	r3, [pc, #96]	; (80086f0 <pvPortMalloc+0x184>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	429a      	cmp	r2, r3
 8008694:	d203      	bcs.n	800869e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008696:	4b14      	ldr	r3, [pc, #80]	; (80086e8 <pvPortMalloc+0x17c>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a15      	ldr	r2, [pc, #84]	; (80086f0 <pvPortMalloc+0x184>)
 800869c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a0:	685a      	ldr	r2, [r3, #4]
 80086a2:	4b10      	ldr	r3, [pc, #64]	; (80086e4 <pvPortMalloc+0x178>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	431a      	orrs	r2, r3
 80086a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80086ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ae:	2200      	movs	r2, #0
 80086b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80086b2:	f7fe fbbb 	bl	8006e2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	f003 0307 	and.w	r3, r3, #7
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d00a      	beq.n	80086d6 <pvPortMalloc+0x16a>
	__asm volatile
 80086c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c4:	f383 8811 	msr	BASEPRI, r3
 80086c8:	f3bf 8f6f 	isb	sy
 80086cc:	f3bf 8f4f 	dsb	sy
 80086d0:	60fb      	str	r3, [r7, #12]
}
 80086d2:	bf00      	nop
 80086d4:	e7fe      	b.n	80086d4 <pvPortMalloc+0x168>
	return pvReturn;
 80086d6:	69fb      	ldr	r3, [r7, #28]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3728      	adds	r7, #40	; 0x28
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	200024d4 	.word	0x200024d4
 80086e4:	200024e0 	.word	0x200024e0
 80086e8:	200024d8 	.word	0x200024d8
 80086ec:	200024cc 	.word	0x200024cc
 80086f0:	200024dc 	.word	0x200024dc

080086f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b086      	sub	sp, #24
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d048      	beq.n	8008798 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008706:	2308      	movs	r3, #8
 8008708:	425b      	negs	r3, r3
 800870a:	697a      	ldr	r2, [r7, #20]
 800870c:	4413      	add	r3, r2
 800870e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	685a      	ldr	r2, [r3, #4]
 8008718:	4b21      	ldr	r3, [pc, #132]	; (80087a0 <vPortFree+0xac>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4013      	ands	r3, r2
 800871e:	2b00      	cmp	r3, #0
 8008720:	d10a      	bne.n	8008738 <vPortFree+0x44>
	__asm volatile
 8008722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	60fb      	str	r3, [r7, #12]
}
 8008734:	bf00      	nop
 8008736:	e7fe      	b.n	8008736 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00a      	beq.n	8008756 <vPortFree+0x62>
	__asm volatile
 8008740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008744:	f383 8811 	msr	BASEPRI, r3
 8008748:	f3bf 8f6f 	isb	sy
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	60bb      	str	r3, [r7, #8]
}
 8008752:	bf00      	nop
 8008754:	e7fe      	b.n	8008754 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	685a      	ldr	r2, [r3, #4]
 800875a:	4b11      	ldr	r3, [pc, #68]	; (80087a0 <vPortFree+0xac>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4013      	ands	r3, r2
 8008760:	2b00      	cmp	r3, #0
 8008762:	d019      	beq.n	8008798 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d115      	bne.n	8008798 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	4b0b      	ldr	r3, [pc, #44]	; (80087a0 <vPortFree+0xac>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	43db      	mvns	r3, r3
 8008776:	401a      	ands	r2, r3
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800877c:	f7fe fb48 	bl	8006e10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	685a      	ldr	r2, [r3, #4]
 8008784:	4b07      	ldr	r3, [pc, #28]	; (80087a4 <vPortFree+0xb0>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4413      	add	r3, r2
 800878a:	4a06      	ldr	r2, [pc, #24]	; (80087a4 <vPortFree+0xb0>)
 800878c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800878e:	6938      	ldr	r0, [r7, #16]
 8008790:	f000 f86c 	bl	800886c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008794:	f7fe fb4a 	bl	8006e2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008798:	bf00      	nop
 800879a:	3718      	adds	r7, #24
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	200024e0 	.word	0x200024e0
 80087a4:	200024d8 	.word	0x200024d8

080087a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80087b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80087b4:	4b27      	ldr	r3, [pc, #156]	; (8008854 <prvHeapInit+0xac>)
 80087b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f003 0307 	and.w	r3, r3, #7
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00c      	beq.n	80087dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	3307      	adds	r3, #7
 80087c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f023 0307 	bic.w	r3, r3, #7
 80087ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	4a1f      	ldr	r2, [pc, #124]	; (8008854 <prvHeapInit+0xac>)
 80087d8:	4413      	add	r3, r2
 80087da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80087e0:	4a1d      	ldr	r2, [pc, #116]	; (8008858 <prvHeapInit+0xb0>)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80087e6:	4b1c      	ldr	r3, [pc, #112]	; (8008858 <prvHeapInit+0xb0>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	4413      	add	r3, r2
 80087f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80087f4:	2208      	movs	r2, #8
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	1a9b      	subs	r3, r3, r2
 80087fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f023 0307 	bic.w	r3, r3, #7
 8008802:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	4a15      	ldr	r2, [pc, #84]	; (800885c <prvHeapInit+0xb4>)
 8008808:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800880a:	4b14      	ldr	r3, [pc, #80]	; (800885c <prvHeapInit+0xb4>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2200      	movs	r2, #0
 8008810:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008812:	4b12      	ldr	r3, [pc, #72]	; (800885c <prvHeapInit+0xb4>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2200      	movs	r2, #0
 8008818:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	1ad2      	subs	r2, r2, r3
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008828:	4b0c      	ldr	r3, [pc, #48]	; (800885c <prvHeapInit+0xb4>)
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	4a0a      	ldr	r2, [pc, #40]	; (8008860 <prvHeapInit+0xb8>)
 8008836:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	4a09      	ldr	r2, [pc, #36]	; (8008864 <prvHeapInit+0xbc>)
 800883e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008840:	4b09      	ldr	r3, [pc, #36]	; (8008868 <prvHeapInit+0xc0>)
 8008842:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008846:	601a      	str	r2, [r3, #0]
}
 8008848:	bf00      	nop
 800884a:	3714      	adds	r7, #20
 800884c:	46bd      	mov	sp, r7
 800884e:	bc80      	pop	{r7}
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	200010cc 	.word	0x200010cc
 8008858:	200024cc 	.word	0x200024cc
 800885c:	200024d4 	.word	0x200024d4
 8008860:	200024dc 	.word	0x200024dc
 8008864:	200024d8 	.word	0x200024d8
 8008868:	200024e0 	.word	0x200024e0

0800886c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800886c:	b480      	push	{r7}
 800886e:	b085      	sub	sp, #20
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008874:	4b27      	ldr	r3, [pc, #156]	; (8008914 <prvInsertBlockIntoFreeList+0xa8>)
 8008876:	60fb      	str	r3, [r7, #12]
 8008878:	e002      	b.n	8008880 <prvInsertBlockIntoFreeList+0x14>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	60fb      	str	r3, [r7, #12]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	429a      	cmp	r2, r3
 8008888:	d8f7      	bhi.n	800887a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	4413      	add	r3, r2
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	429a      	cmp	r2, r3
 800889a:	d108      	bne.n	80088ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	685a      	ldr	r2, [r3, #4]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	441a      	add	r2, r3
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	441a      	add	r2, r3
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d118      	bne.n	80088f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	4b14      	ldr	r3, [pc, #80]	; (8008918 <prvInsertBlockIntoFreeList+0xac>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d00d      	beq.n	80088ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	685a      	ldr	r2, [r3, #4]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	441a      	add	r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	601a      	str	r2, [r3, #0]
 80088e8:	e008      	b.n	80088fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80088ea:	4b0b      	ldr	r3, [pc, #44]	; (8008918 <prvInsertBlockIntoFreeList+0xac>)
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	601a      	str	r2, [r3, #0]
 80088f2:	e003      	b.n	80088fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	429a      	cmp	r2, r3
 8008902:	d002      	beq.n	800890a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800890a:	bf00      	nop
 800890c:	3714      	adds	r7, #20
 800890e:	46bd      	mov	sp, r7
 8008910:	bc80      	pop	{r7}
 8008912:	4770      	bx	lr
 8008914:	200024cc 	.word	0x200024cc
 8008918:	200024d4 	.word	0x200024d4

0800891c <__libc_init_array>:
 800891c:	b570      	push	{r4, r5, r6, lr}
 800891e:	2600      	movs	r6, #0
 8008920:	4d0c      	ldr	r5, [pc, #48]	; (8008954 <__libc_init_array+0x38>)
 8008922:	4c0d      	ldr	r4, [pc, #52]	; (8008958 <__libc_init_array+0x3c>)
 8008924:	1b64      	subs	r4, r4, r5
 8008926:	10a4      	asrs	r4, r4, #2
 8008928:	42a6      	cmp	r6, r4
 800892a:	d109      	bne.n	8008940 <__libc_init_array+0x24>
 800892c:	f000 f8f0 	bl	8008b10 <_init>
 8008930:	2600      	movs	r6, #0
 8008932:	4d0a      	ldr	r5, [pc, #40]	; (800895c <__libc_init_array+0x40>)
 8008934:	4c0a      	ldr	r4, [pc, #40]	; (8008960 <__libc_init_array+0x44>)
 8008936:	1b64      	subs	r4, r4, r5
 8008938:	10a4      	asrs	r4, r4, #2
 800893a:	42a6      	cmp	r6, r4
 800893c:	d105      	bne.n	800894a <__libc_init_array+0x2e>
 800893e:	bd70      	pop	{r4, r5, r6, pc}
 8008940:	f855 3b04 	ldr.w	r3, [r5], #4
 8008944:	4798      	blx	r3
 8008946:	3601      	adds	r6, #1
 8008948:	e7ee      	b.n	8008928 <__libc_init_array+0xc>
 800894a:	f855 3b04 	ldr.w	r3, [r5], #4
 800894e:	4798      	blx	r3
 8008950:	3601      	adds	r6, #1
 8008952:	e7f2      	b.n	800893a <__libc_init_array+0x1e>
 8008954:	08008d60 	.word	0x08008d60
 8008958:	08008d60 	.word	0x08008d60
 800895c:	08008d60 	.word	0x08008d60
 8008960:	08008d64 	.word	0x08008d64

08008964 <__retarget_lock_acquire_recursive>:
 8008964:	4770      	bx	lr

08008966 <__retarget_lock_release_recursive>:
 8008966:	4770      	bx	lr

08008968 <memcpy>:
 8008968:	440a      	add	r2, r1
 800896a:	4291      	cmp	r1, r2
 800896c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008970:	d100      	bne.n	8008974 <memcpy+0xc>
 8008972:	4770      	bx	lr
 8008974:	b510      	push	{r4, lr}
 8008976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800897a:	4291      	cmp	r1, r2
 800897c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008980:	d1f9      	bne.n	8008976 <memcpy+0xe>
 8008982:	bd10      	pop	{r4, pc}

08008984 <memset>:
 8008984:	4603      	mov	r3, r0
 8008986:	4402      	add	r2, r0
 8008988:	4293      	cmp	r3, r2
 800898a:	d100      	bne.n	800898e <memset+0xa>
 800898c:	4770      	bx	lr
 800898e:	f803 1b01 	strb.w	r1, [r3], #1
 8008992:	e7f9      	b.n	8008988 <memset+0x4>

08008994 <cleanup_glue>:
 8008994:	b538      	push	{r3, r4, r5, lr}
 8008996:	460c      	mov	r4, r1
 8008998:	6809      	ldr	r1, [r1, #0]
 800899a:	4605      	mov	r5, r0
 800899c:	b109      	cbz	r1, 80089a2 <cleanup_glue+0xe>
 800899e:	f7ff fff9 	bl	8008994 <cleanup_glue>
 80089a2:	4621      	mov	r1, r4
 80089a4:	4628      	mov	r0, r5
 80089a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089aa:	f000 b869 	b.w	8008a80 <_free_r>
	...

080089b0 <_reclaim_reent>:
 80089b0:	4b2c      	ldr	r3, [pc, #176]	; (8008a64 <_reclaim_reent+0xb4>)
 80089b2:	b570      	push	{r4, r5, r6, lr}
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4604      	mov	r4, r0
 80089b8:	4283      	cmp	r3, r0
 80089ba:	d051      	beq.n	8008a60 <_reclaim_reent+0xb0>
 80089bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80089be:	b143      	cbz	r3, 80089d2 <_reclaim_reent+0x22>
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d14a      	bne.n	8008a5c <_reclaim_reent+0xac>
 80089c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089c8:	6819      	ldr	r1, [r3, #0]
 80089ca:	b111      	cbz	r1, 80089d2 <_reclaim_reent+0x22>
 80089cc:	4620      	mov	r0, r4
 80089ce:	f000 f857 	bl	8008a80 <_free_r>
 80089d2:	6961      	ldr	r1, [r4, #20]
 80089d4:	b111      	cbz	r1, 80089dc <_reclaim_reent+0x2c>
 80089d6:	4620      	mov	r0, r4
 80089d8:	f000 f852 	bl	8008a80 <_free_r>
 80089dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80089de:	b111      	cbz	r1, 80089e6 <_reclaim_reent+0x36>
 80089e0:	4620      	mov	r0, r4
 80089e2:	f000 f84d 	bl	8008a80 <_free_r>
 80089e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80089e8:	b111      	cbz	r1, 80089f0 <_reclaim_reent+0x40>
 80089ea:	4620      	mov	r0, r4
 80089ec:	f000 f848 	bl	8008a80 <_free_r>
 80089f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80089f2:	b111      	cbz	r1, 80089fa <_reclaim_reent+0x4a>
 80089f4:	4620      	mov	r0, r4
 80089f6:	f000 f843 	bl	8008a80 <_free_r>
 80089fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80089fc:	b111      	cbz	r1, 8008a04 <_reclaim_reent+0x54>
 80089fe:	4620      	mov	r0, r4
 8008a00:	f000 f83e 	bl	8008a80 <_free_r>
 8008a04:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008a06:	b111      	cbz	r1, 8008a0e <_reclaim_reent+0x5e>
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f000 f839 	bl	8008a80 <_free_r>
 8008a0e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008a10:	b111      	cbz	r1, 8008a18 <_reclaim_reent+0x68>
 8008a12:	4620      	mov	r0, r4
 8008a14:	f000 f834 	bl	8008a80 <_free_r>
 8008a18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a1a:	b111      	cbz	r1, 8008a22 <_reclaim_reent+0x72>
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f000 f82f 	bl	8008a80 <_free_r>
 8008a22:	69a3      	ldr	r3, [r4, #24]
 8008a24:	b1e3      	cbz	r3, 8008a60 <_reclaim_reent+0xb0>
 8008a26:	4620      	mov	r0, r4
 8008a28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008a2a:	4798      	blx	r3
 8008a2c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008a2e:	b1b9      	cbz	r1, 8008a60 <_reclaim_reent+0xb0>
 8008a30:	4620      	mov	r0, r4
 8008a32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a36:	f7ff bfad 	b.w	8008994 <cleanup_glue>
 8008a3a:	5949      	ldr	r1, [r1, r5]
 8008a3c:	b941      	cbnz	r1, 8008a50 <_reclaim_reent+0xa0>
 8008a3e:	3504      	adds	r5, #4
 8008a40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a42:	2d80      	cmp	r5, #128	; 0x80
 8008a44:	68d9      	ldr	r1, [r3, #12]
 8008a46:	d1f8      	bne.n	8008a3a <_reclaim_reent+0x8a>
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f000 f819 	bl	8008a80 <_free_r>
 8008a4e:	e7ba      	b.n	80089c6 <_reclaim_reent+0x16>
 8008a50:	680e      	ldr	r6, [r1, #0]
 8008a52:	4620      	mov	r0, r4
 8008a54:	f000 f814 	bl	8008a80 <_free_r>
 8008a58:	4631      	mov	r1, r6
 8008a5a:	e7ef      	b.n	8008a3c <_reclaim_reent+0x8c>
 8008a5c:	2500      	movs	r5, #0
 8008a5e:	e7ef      	b.n	8008a40 <_reclaim_reent+0x90>
 8008a60:	bd70      	pop	{r4, r5, r6, pc}
 8008a62:	bf00      	nop
 8008a64:	20000010 	.word	0x20000010

08008a68 <__malloc_lock>:
 8008a68:	4801      	ldr	r0, [pc, #4]	; (8008a70 <__malloc_lock+0x8>)
 8008a6a:	f7ff bf7b 	b.w	8008964 <__retarget_lock_acquire_recursive>
 8008a6e:	bf00      	nop
 8008a70:	200024e4 	.word	0x200024e4

08008a74 <__malloc_unlock>:
 8008a74:	4801      	ldr	r0, [pc, #4]	; (8008a7c <__malloc_unlock+0x8>)
 8008a76:	f7ff bf76 	b.w	8008966 <__retarget_lock_release_recursive>
 8008a7a:	bf00      	nop
 8008a7c:	200024e4 	.word	0x200024e4

08008a80 <_free_r>:
 8008a80:	b538      	push	{r3, r4, r5, lr}
 8008a82:	4605      	mov	r5, r0
 8008a84:	2900      	cmp	r1, #0
 8008a86:	d040      	beq.n	8008b0a <_free_r+0x8a>
 8008a88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a8c:	1f0c      	subs	r4, r1, #4
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	bfb8      	it	lt
 8008a92:	18e4      	addlt	r4, r4, r3
 8008a94:	f7ff ffe8 	bl	8008a68 <__malloc_lock>
 8008a98:	4a1c      	ldr	r2, [pc, #112]	; (8008b0c <_free_r+0x8c>)
 8008a9a:	6813      	ldr	r3, [r2, #0]
 8008a9c:	b933      	cbnz	r3, 8008aac <_free_r+0x2c>
 8008a9e:	6063      	str	r3, [r4, #4]
 8008aa0:	6014      	str	r4, [r2, #0]
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008aa8:	f7ff bfe4 	b.w	8008a74 <__malloc_unlock>
 8008aac:	42a3      	cmp	r3, r4
 8008aae:	d908      	bls.n	8008ac2 <_free_r+0x42>
 8008ab0:	6820      	ldr	r0, [r4, #0]
 8008ab2:	1821      	adds	r1, r4, r0
 8008ab4:	428b      	cmp	r3, r1
 8008ab6:	bf01      	itttt	eq
 8008ab8:	6819      	ldreq	r1, [r3, #0]
 8008aba:	685b      	ldreq	r3, [r3, #4]
 8008abc:	1809      	addeq	r1, r1, r0
 8008abe:	6021      	streq	r1, [r4, #0]
 8008ac0:	e7ed      	b.n	8008a9e <_free_r+0x1e>
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	b10b      	cbz	r3, 8008acc <_free_r+0x4c>
 8008ac8:	42a3      	cmp	r3, r4
 8008aca:	d9fa      	bls.n	8008ac2 <_free_r+0x42>
 8008acc:	6811      	ldr	r1, [r2, #0]
 8008ace:	1850      	adds	r0, r2, r1
 8008ad0:	42a0      	cmp	r0, r4
 8008ad2:	d10b      	bne.n	8008aec <_free_r+0x6c>
 8008ad4:	6820      	ldr	r0, [r4, #0]
 8008ad6:	4401      	add	r1, r0
 8008ad8:	1850      	adds	r0, r2, r1
 8008ada:	4283      	cmp	r3, r0
 8008adc:	6011      	str	r1, [r2, #0]
 8008ade:	d1e0      	bne.n	8008aa2 <_free_r+0x22>
 8008ae0:	6818      	ldr	r0, [r3, #0]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	4401      	add	r1, r0
 8008ae6:	6011      	str	r1, [r2, #0]
 8008ae8:	6053      	str	r3, [r2, #4]
 8008aea:	e7da      	b.n	8008aa2 <_free_r+0x22>
 8008aec:	d902      	bls.n	8008af4 <_free_r+0x74>
 8008aee:	230c      	movs	r3, #12
 8008af0:	602b      	str	r3, [r5, #0]
 8008af2:	e7d6      	b.n	8008aa2 <_free_r+0x22>
 8008af4:	6820      	ldr	r0, [r4, #0]
 8008af6:	1821      	adds	r1, r4, r0
 8008af8:	428b      	cmp	r3, r1
 8008afa:	bf01      	itttt	eq
 8008afc:	6819      	ldreq	r1, [r3, #0]
 8008afe:	685b      	ldreq	r3, [r3, #4]
 8008b00:	1809      	addeq	r1, r1, r0
 8008b02:	6021      	streq	r1, [r4, #0]
 8008b04:	6063      	str	r3, [r4, #4]
 8008b06:	6054      	str	r4, [r2, #4]
 8008b08:	e7cb      	b.n	8008aa2 <_free_r+0x22>
 8008b0a:	bd38      	pop	{r3, r4, r5, pc}
 8008b0c:	200024e8 	.word	0x200024e8

08008b10 <_init>:
 8008b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b12:	bf00      	nop
 8008b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b16:	bc08      	pop	{r3}
 8008b18:	469e      	mov	lr, r3
 8008b1a:	4770      	bx	lr

08008b1c <_fini>:
 8008b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b1e:	bf00      	nop
 8008b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b22:	bc08      	pop	{r3}
 8008b24:	469e      	mov	lr, r3
 8008b26:	4770      	bx	lr
