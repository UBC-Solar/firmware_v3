
tel_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011d74  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000840  08011f68  08011f68  00012f68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080127a8  080127a8  00014318  2**0
                  CONTENTS
  4 .ARM          00000008  080127a8  080127a8  000137a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080127b0  080127b0  00014318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080127b0  080127b0  000137b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080127b4  080127b4  000137b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000318  20000000  080127b8  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000585c  20000318  08012ad0  00014318  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005b74  08012ad0  00014b74  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00014318  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021723  00000000  00000000  00014341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000583a  00000000  00000000  00035a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cc8  00000000  00000000  0003b2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000163a  00000000  00000000  0003cf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020cf5  00000000  00000000  0003e5a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000263f5  00000000  00000000  0005f297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae0c2  00000000  00000000  0008568c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013374e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009228  00000000  00000000  00133794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0013c9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000318 	.word	0x20000318
 800020c:	00000000 	.word	0x00000000
 8000210:	08011f4c 	.word	0x08011f4c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000031c 	.word	0x2000031c
 800022c:	08011f4c 	.word	0x08011f4c

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <strlen>:
 8000244:	4603      	mov	r3, r0
 8000246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800024a:	2a00      	cmp	r2, #0
 800024c:	d1fb      	bne.n	8000246 <strlen+0x2>
 800024e:	1a18      	subs	r0, r3, r0
 8000250:	3801      	subs	r0, #1
 8000252:	4770      	bx	lr

08000254 <__aeabi_drsub>:
 8000254:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000258:	e002      	b.n	8000260 <__adddf3>
 800025a:	bf00      	nop

0800025c <__aeabi_dsub>:
 800025c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000260 <__adddf3>:
 8000260:	b530      	push	{r4, r5, lr}
 8000262:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000266:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800026a:	ea94 0f05 	teq	r4, r5
 800026e:	bf08      	it	eq
 8000270:	ea90 0f02 	teqeq	r0, r2
 8000274:	bf1f      	itttt	ne
 8000276:	ea54 0c00 	orrsne.w	ip, r4, r0
 800027a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000282:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000286:	f000 80e2 	beq.w	800044e <__adddf3+0x1ee>
 800028a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000292:	bfb8      	it	lt
 8000294:	426d      	neglt	r5, r5
 8000296:	dd0c      	ble.n	80002b2 <__adddf3+0x52>
 8000298:	442c      	add	r4, r5
 800029a:	ea80 0202 	eor.w	r2, r0, r2
 800029e:	ea81 0303 	eor.w	r3, r1, r3
 80002a2:	ea82 0000 	eor.w	r0, r2, r0
 80002a6:	ea83 0101 	eor.w	r1, r3, r1
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	2d36      	cmp	r5, #54	@ 0x36
 80002b4:	bf88      	it	hi
 80002b6:	bd30      	pophi	{r4, r5, pc}
 80002b8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002c0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x70>
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002dc:	d002      	beq.n	80002e4 <__adddf3+0x84>
 80002de:	4252      	negs	r2, r2
 80002e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e4:	ea94 0f05 	teq	r4, r5
 80002e8:	f000 80a7 	beq.w	800043a <__adddf3+0x1da>
 80002ec:	f1a4 0401 	sub.w	r4, r4, #1
 80002f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f4:	db0d      	blt.n	8000312 <__adddf3+0xb2>
 80002f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002fa:	fa22 f205 	lsr.w	r2, r2, r5
 80002fe:	1880      	adds	r0, r0, r2
 8000300:	f141 0100 	adc.w	r1, r1, #0
 8000304:	fa03 f20e 	lsl.w	r2, r3, lr
 8000308:	1880      	adds	r0, r0, r2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	4159      	adcs	r1, r3
 8000310:	e00e      	b.n	8000330 <__adddf3+0xd0>
 8000312:	f1a5 0520 	sub.w	r5, r5, #32
 8000316:	f10e 0e20 	add.w	lr, lr, #32
 800031a:	2a01      	cmp	r2, #1
 800031c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000320:	bf28      	it	cs
 8000322:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	18c0      	adds	r0, r0, r3
 800032c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000330:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000334:	d507      	bpl.n	8000346 <__adddf3+0xe6>
 8000336:	f04f 0e00 	mov.w	lr, #0
 800033a:	f1dc 0c00 	rsbs	ip, ip, #0
 800033e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000342:	eb6e 0101 	sbc.w	r1, lr, r1
 8000346:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800034a:	d31b      	bcc.n	8000384 <__adddf3+0x124>
 800034c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000350:	d30c      	bcc.n	800036c <__adddf3+0x10c>
 8000352:	0849      	lsrs	r1, r1, #1
 8000354:	ea5f 0030 	movs.w	r0, r0, rrx
 8000358:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800035c:	f104 0401 	add.w	r4, r4, #1
 8000360:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000364:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000368:	f080 809a 	bcs.w	80004a0 <__adddf3+0x240>
 800036c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000370:	bf08      	it	eq
 8000372:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000376:	f150 0000 	adcs.w	r0, r0, #0
 800037a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037e:	ea41 0105 	orr.w	r1, r1, r5
 8000382:	bd30      	pop	{r4, r5, pc}
 8000384:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000388:	4140      	adcs	r0, r0
 800038a:	eb41 0101 	adc.w	r1, r1, r1
 800038e:	3c01      	subs	r4, #1
 8000390:	bf28      	it	cs
 8000392:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000396:	d2e9      	bcs.n	800036c <__adddf3+0x10c>
 8000398:	f091 0f00 	teq	r1, #0
 800039c:	bf04      	itt	eq
 800039e:	4601      	moveq	r1, r0
 80003a0:	2000      	moveq	r0, #0
 80003a2:	fab1 f381 	clz	r3, r1
 80003a6:	bf08      	it	eq
 80003a8:	3320      	addeq	r3, #32
 80003aa:	f1a3 030b 	sub.w	r3, r3, #11
 80003ae:	f1b3 0220 	subs.w	r2, r3, #32
 80003b2:	da0c      	bge.n	80003ce <__adddf3+0x16e>
 80003b4:	320c      	adds	r2, #12
 80003b6:	dd08      	ble.n	80003ca <__adddf3+0x16a>
 80003b8:	f102 0c14 	add.w	ip, r2, #20
 80003bc:	f1c2 020c 	rsb	r2, r2, #12
 80003c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c4:	fa21 f102 	lsr.w	r1, r1, r2
 80003c8:	e00c      	b.n	80003e4 <__adddf3+0x184>
 80003ca:	f102 0214 	add.w	r2, r2, #20
 80003ce:	bfd8      	it	le
 80003d0:	f1c2 0c20 	rsble	ip, r2, #32
 80003d4:	fa01 f102 	lsl.w	r1, r1, r2
 80003d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003dc:	bfdc      	itt	le
 80003de:	ea41 010c 	orrle.w	r1, r1, ip
 80003e2:	4090      	lslle	r0, r2
 80003e4:	1ae4      	subs	r4, r4, r3
 80003e6:	bfa2      	ittt	ge
 80003e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003ec:	4329      	orrge	r1, r5
 80003ee:	bd30      	popge	{r4, r5, pc}
 80003f0:	ea6f 0404 	mvn.w	r4, r4
 80003f4:	3c1f      	subs	r4, #31
 80003f6:	da1c      	bge.n	8000432 <__adddf3+0x1d2>
 80003f8:	340c      	adds	r4, #12
 80003fa:	dc0e      	bgt.n	800041a <__adddf3+0x1ba>
 80003fc:	f104 0414 	add.w	r4, r4, #20
 8000400:	f1c4 0220 	rsb	r2, r4, #32
 8000404:	fa20 f004 	lsr.w	r0, r0, r4
 8000408:	fa01 f302 	lsl.w	r3, r1, r2
 800040c:	ea40 0003 	orr.w	r0, r0, r3
 8000410:	fa21 f304 	lsr.w	r3, r1, r4
 8000414:	ea45 0103 	orr.w	r1, r5, r3
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	f1c4 040c 	rsb	r4, r4, #12
 800041e:	f1c4 0220 	rsb	r2, r4, #32
 8000422:	fa20 f002 	lsr.w	r0, r0, r2
 8000426:	fa01 f304 	lsl.w	r3, r1, r4
 800042a:	ea40 0003 	orr.w	r0, r0, r3
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	fa21 f004 	lsr.w	r0, r1, r4
 8000436:	4629      	mov	r1, r5
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	f094 0f00 	teq	r4, #0
 800043e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000442:	bf06      	itte	eq
 8000444:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000448:	3401      	addeq	r4, #1
 800044a:	3d01      	subne	r5, #1
 800044c:	e74e      	b.n	80002ec <__adddf3+0x8c>
 800044e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000452:	bf18      	it	ne
 8000454:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000458:	d029      	beq.n	80004ae <__adddf3+0x24e>
 800045a:	ea94 0f05 	teq	r4, r5
 800045e:	bf08      	it	eq
 8000460:	ea90 0f02 	teqeq	r0, r2
 8000464:	d005      	beq.n	8000472 <__adddf3+0x212>
 8000466:	ea54 0c00 	orrs.w	ip, r4, r0
 800046a:	bf04      	itt	eq
 800046c:	4619      	moveq	r1, r3
 800046e:	4610      	moveq	r0, r2
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea91 0f03 	teq	r1, r3
 8000476:	bf1e      	ittt	ne
 8000478:	2100      	movne	r1, #0
 800047a:	2000      	movne	r0, #0
 800047c:	bd30      	popne	{r4, r5, pc}
 800047e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000482:	d105      	bne.n	8000490 <__adddf3+0x230>
 8000484:	0040      	lsls	r0, r0, #1
 8000486:	4149      	adcs	r1, r1
 8000488:	bf28      	it	cs
 800048a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000494:	bf3c      	itt	cc
 8000496:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800049a:	bd30      	popcc	{r4, r5, pc}
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a8:	f04f 0000 	mov.w	r0, #0
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf1a      	itte	ne
 80004b4:	4619      	movne	r1, r3
 80004b6:	4610      	movne	r0, r2
 80004b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004bc:	bf1c      	itt	ne
 80004be:	460b      	movne	r3, r1
 80004c0:	4602      	movne	r2, r0
 80004c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c6:	bf06      	itte	eq
 80004c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004cc:	ea91 0f03 	teqeq	r1, r3
 80004d0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	bf00      	nop

080004d8 <__aeabi_ui2d>:
 80004d8:	f090 0f00 	teq	r0, #0
 80004dc:	bf04      	itt	eq
 80004de:	2100      	moveq	r1, #0
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ec:	f04f 0500 	mov.w	r5, #0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e750      	b.n	8000398 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_i2d>:
 80004f8:	f090 0f00 	teq	r0, #0
 80004fc:	bf04      	itt	eq
 80004fe:	2100      	moveq	r1, #0
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000508:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000510:	bf48      	it	mi
 8000512:	4240      	negmi	r0, r0
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	e73e      	b.n	8000398 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_f2d>:
 800051c:	0042      	lsls	r2, r0, #1
 800051e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000522:	ea4f 0131 	mov.w	r1, r1, rrx
 8000526:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800052a:	bf1f      	itttt	ne
 800052c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000530:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000534:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000538:	4770      	bxne	lr
 800053a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053e:	bf08      	it	eq
 8000540:	4770      	bxeq	lr
 8000542:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000546:	bf04      	itt	eq
 8000548:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000554:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000558:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800055c:	e71c      	b.n	8000398 <__adddf3+0x138>
 800055e:	bf00      	nop

08000560 <__aeabi_ul2d>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	f04f 0500 	mov.w	r5, #0
 800056e:	e00a      	b.n	8000586 <__aeabi_l2d+0x16>

08000570 <__aeabi_l2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057e:	d502      	bpl.n	8000586 <__aeabi_l2d+0x16>
 8000580:	4240      	negs	r0, r0
 8000582:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000586:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800058a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000592:	f43f aed8 	beq.w	8000346 <__adddf3+0xe6>
 8000596:	f04f 0203 	mov.w	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a6:	bf18      	it	ne
 80005a8:	3203      	addne	r2, #3
 80005aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ae:	f1c2 0320 	rsb	r3, r2, #32
 80005b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80005be:	ea40 000e 	orr.w	r0, r0, lr
 80005c2:	fa21 f102 	lsr.w	r1, r1, r2
 80005c6:	4414      	add	r4, r2
 80005c8:	e6bd      	b.n	8000346 <__adddf3+0xe6>
 80005ca:	bf00      	nop

080005cc <__aeabi_dmul>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005d2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005da:	bf1d      	ittte	ne
 80005dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005e0:	ea94 0f0c 	teqne	r4, ip
 80005e4:	ea95 0f0c 	teqne	r5, ip
 80005e8:	f000 f8de 	bleq	80007a8 <__aeabi_dmul+0x1dc>
 80005ec:	442c      	add	r4, r5
 80005ee:	ea81 0603 	eor.w	r6, r1, r3
 80005f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fe:	bf18      	it	ne
 8000600:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000604:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000608:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800060c:	d038      	beq.n	8000680 <__aeabi_dmul+0xb4>
 800060e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000612:	f04f 0500 	mov.w	r5, #0
 8000616:	fbe1 e502 	umlal	lr, r5, r1, r2
 800061a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000622:	f04f 0600 	mov.w	r6, #0
 8000626:	fbe1 5603 	umlal	r5, r6, r1, r3
 800062a:	f09c 0f00 	teq	ip, #0
 800062e:	bf18      	it	ne
 8000630:	f04e 0e01 	orrne.w	lr, lr, #1
 8000634:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000638:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800063c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000640:	d204      	bcs.n	800064c <__aeabi_dmul+0x80>
 8000642:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000646:	416d      	adcs	r5, r5
 8000648:	eb46 0606 	adc.w	r6, r6, r6
 800064c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000650:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000654:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000658:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800065c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000660:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000664:	bf88      	it	hi
 8000666:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800066a:	d81e      	bhi.n	80006aa <__aeabi_dmul+0xde>
 800066c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000670:	bf08      	it	eq
 8000672:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000676:	f150 0000 	adcs.w	r0, r0, #0
 800067a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000684:	ea46 0101 	orr.w	r1, r6, r1
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	ea81 0103 	eor.w	r1, r1, r3
 8000690:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000694:	bfc2      	ittt	gt
 8000696:	ebd4 050c 	rsbsgt	r5, r4, ip
 800069a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069e:	bd70      	popgt	{r4, r5, r6, pc}
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f04f 0e00 	mov.w	lr, #0
 80006a8:	3c01      	subs	r4, #1
 80006aa:	f300 80ab 	bgt.w	8000804 <__aeabi_dmul+0x238>
 80006ae:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006b2:	bfde      	ittt	le
 80006b4:	2000      	movle	r0, #0
 80006b6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ba:	bd70      	pople	{r4, r5, r6, pc}
 80006bc:	f1c4 0400 	rsb	r4, r4, #0
 80006c0:	3c20      	subs	r4, #32
 80006c2:	da35      	bge.n	8000730 <__aeabi_dmul+0x164>
 80006c4:	340c      	adds	r4, #12
 80006c6:	dc1b      	bgt.n	8000700 <__aeabi_dmul+0x134>
 80006c8:	f104 0414 	add.w	r4, r4, #20
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f305 	lsl.w	r3, r0, r5
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	fa21 f604 	lsr.w	r6, r1, r4
 80006f0:	eb42 0106 	adc.w	r1, r2, r6
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f1c4 040c 	rsb	r4, r4, #12
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f304 	lsl.w	r3, r0, r4
 800070c:	fa20 f005 	lsr.w	r0, r0, r5
 8000710:	fa01 f204 	lsl.w	r2, r1, r4
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	f141 0100 	adc.w	r1, r1, #0
 8000724:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000728:	bf08      	it	eq
 800072a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072e:	bd70      	pop	{r4, r5, r6, pc}
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f205 	lsl.w	r2, r0, r5
 8000738:	ea4e 0e02 	orr.w	lr, lr, r2
 800073c:	fa20 f304 	lsr.w	r3, r0, r4
 8000740:	fa01 f205 	lsl.w	r2, r1, r5
 8000744:	ea43 0302 	orr.w	r3, r3, r2
 8000748:	fa21 f004 	lsr.w	r0, r1, r4
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	fa21 f204 	lsr.w	r2, r1, r4
 8000754:	ea20 0002 	bic.w	r0, r0, r2
 8000758:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800075c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000760:	bf08      	it	eq
 8000762:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000766:	bd70      	pop	{r4, r5, r6, pc}
 8000768:	f094 0f00 	teq	r4, #0
 800076c:	d10f      	bne.n	800078e <__aeabi_dmul+0x1c2>
 800076e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000772:	0040      	lsls	r0, r0, #1
 8000774:	eb41 0101 	adc.w	r1, r1, r1
 8000778:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800077c:	bf08      	it	eq
 800077e:	3c01      	subeq	r4, #1
 8000780:	d0f7      	beq.n	8000772 <__aeabi_dmul+0x1a6>
 8000782:	ea41 0106 	orr.w	r1, r1, r6
 8000786:	f095 0f00 	teq	r5, #0
 800078a:	bf18      	it	ne
 800078c:	4770      	bxne	lr
 800078e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000792:	0052      	lsls	r2, r2, #1
 8000794:	eb43 0303 	adc.w	r3, r3, r3
 8000798:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800079c:	bf08      	it	eq
 800079e:	3d01      	subeq	r5, #1
 80007a0:	d0f7      	beq.n	8000792 <__aeabi_dmul+0x1c6>
 80007a2:	ea43 0306 	orr.w	r3, r3, r6
 80007a6:	4770      	bx	lr
 80007a8:	ea94 0f0c 	teq	r4, ip
 80007ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007b0:	bf18      	it	ne
 80007b2:	ea95 0f0c 	teqne	r5, ip
 80007b6:	d00c      	beq.n	80007d2 <__aeabi_dmul+0x206>
 80007b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007bc:	bf18      	it	ne
 80007be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c2:	d1d1      	bne.n	8000768 <__aeabi_dmul+0x19c>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d6:	bf06      	itte	eq
 80007d8:	4610      	moveq	r0, r2
 80007da:	4619      	moveq	r1, r3
 80007dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e0:	d019      	beq.n	8000816 <__aeabi_dmul+0x24a>
 80007e2:	ea94 0f0c 	teq	r4, ip
 80007e6:	d102      	bne.n	80007ee <__aeabi_dmul+0x222>
 80007e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007ec:	d113      	bne.n	8000816 <__aeabi_dmul+0x24a>
 80007ee:	ea95 0f0c 	teq	r5, ip
 80007f2:	d105      	bne.n	8000800 <__aeabi_dmul+0x234>
 80007f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f8:	bf1c      	itt	ne
 80007fa:	4610      	movne	r0, r2
 80007fc:	4619      	movne	r1, r3
 80007fe:	d10a      	bne.n	8000816 <__aeabi_dmul+0x24a>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800080c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800081a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081e:	bd70      	pop	{r4, r5, r6, pc}

08000820 <__aeabi_ddiv>:
 8000820:	b570      	push	{r4, r5, r6, lr}
 8000822:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000826:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800082a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082e:	bf1d      	ittte	ne
 8000830:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000834:	ea94 0f0c 	teqne	r4, ip
 8000838:	ea95 0f0c 	teqne	r5, ip
 800083c:	f000 f8a7 	bleq	800098e <__aeabi_ddiv+0x16e>
 8000840:	eba4 0405 	sub.w	r4, r4, r5
 8000844:	ea81 0e03 	eor.w	lr, r1, r3
 8000848:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800084c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000850:	f000 8088 	beq.w	8000964 <__aeabi_ddiv+0x144>
 8000854:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000858:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800085c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000860:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000864:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000868:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800086c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000870:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000874:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000878:	429d      	cmp	r5, r3
 800087a:	bf08      	it	eq
 800087c:	4296      	cmpeq	r6, r2
 800087e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000882:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000886:	d202      	bcs.n	800088e <__aeabi_ddiv+0x6e>
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	1ab6      	subs	r6, r6, r2
 8000890:	eb65 0503 	sbc.w	r5, r5, r3
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008aa:	bf22      	ittt	cs
 80008ac:	1ab6      	subcs	r6, r6, r2
 80008ae:	4675      	movcs	r5, lr
 80008b0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80008be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c2:	bf22      	ittt	cs
 80008c4:	1ab6      	subcs	r6, r6, r2
 80008c6:	4675      	movcs	r5, lr
 80008c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008da:	bf22      	ittt	cs
 80008dc:	1ab6      	subcs	r6, r6, r2
 80008de:	4675      	movcs	r5, lr
 80008e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f2:	bf22      	ittt	cs
 80008f4:	1ab6      	subcs	r6, r6, r2
 80008f6:	4675      	movcs	r5, lr
 80008f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008fc:	ea55 0e06 	orrs.w	lr, r5, r6
 8000900:	d018      	beq.n	8000934 <__aeabi_ddiv+0x114>
 8000902:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000906:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800090a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000912:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000916:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800091a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091e:	d1c0      	bne.n	80008a2 <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000924:	d10b      	bne.n	800093e <__aeabi_ddiv+0x11e>
 8000926:	ea41 0100 	orr.w	r1, r1, r0
 800092a:	f04f 0000 	mov.w	r0, #0
 800092e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000932:	e7b6      	b.n	80008a2 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000938:	bf04      	itt	eq
 800093a:	4301      	orreq	r1, r0
 800093c:	2000      	moveq	r0, #0
 800093e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000942:	bf88      	it	hi
 8000944:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000948:	f63f aeaf 	bhi.w	80006aa <__aeabi_dmul+0xde>
 800094c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000950:	bf04      	itt	eq
 8000952:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000956:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800095a:	f150 0000 	adcs.w	r0, r0, #0
 800095e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000962:	bd70      	pop	{r4, r5, r6, pc}
 8000964:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000968:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800096c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000970:	bfc2      	ittt	gt
 8000972:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000976:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800097a:	bd70      	popgt	{r4, r5, r6, pc}
 800097c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000980:	f04f 0e00 	mov.w	lr, #0
 8000984:	3c01      	subs	r4, #1
 8000986:	e690      	b.n	80006aa <__aeabi_dmul+0xde>
 8000988:	ea45 0e06 	orr.w	lr, r5, r6
 800098c:	e68d      	b.n	80006aa <__aeabi_dmul+0xde>
 800098e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000992:	ea94 0f0c 	teq	r4, ip
 8000996:	bf08      	it	eq
 8000998:	ea95 0f0c 	teqeq	r5, ip
 800099c:	f43f af3b 	beq.w	8000816 <__aeabi_dmul+0x24a>
 80009a0:	ea94 0f0c 	teq	r4, ip
 80009a4:	d10a      	bne.n	80009bc <__aeabi_ddiv+0x19c>
 80009a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009aa:	f47f af34 	bne.w	8000816 <__aeabi_dmul+0x24a>
 80009ae:	ea95 0f0c 	teq	r5, ip
 80009b2:	f47f af25 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e72c      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009bc:	ea95 0f0c 	teq	r5, ip
 80009c0:	d106      	bne.n	80009d0 <__aeabi_ddiv+0x1b0>
 80009c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c6:	f43f aefd 	beq.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e722      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d4:	bf18      	it	ne
 80009d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009da:	f47f aec5 	bne.w	8000768 <__aeabi_dmul+0x19c>
 80009de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009e2:	f47f af0d 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ea:	f47f aeeb 	bne.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ee:	e712      	b.n	8000816 <__aeabi_dmul+0x24a>

080009f0 <__gedf2>:
 80009f0:	f04f 3cff 	mov.w	ip, #4294967295
 80009f4:	e006      	b.n	8000a04 <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__ledf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	e002      	b.n	8000a04 <__cmpdf2+0x4>
 80009fe:	bf00      	nop

08000a00 <__cmpdf2>:
 8000a00:	f04f 0c01 	mov.w	ip, #1
 8000a04:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a1a:	d01b      	beq.n	8000a54 <__cmpdf2+0x54>
 8000a1c:	b001      	add	sp, #4
 8000a1e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a22:	bf0c      	ite	eq
 8000a24:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a28:	ea91 0f03 	teqne	r1, r3
 8000a2c:	bf02      	ittt	eq
 8000a2e:	ea90 0f02 	teqeq	r0, r2
 8000a32:	2000      	moveq	r0, #0
 8000a34:	4770      	bxeq	lr
 8000a36:	f110 0f00 	cmn.w	r0, #0
 8000a3a:	ea91 0f03 	teq	r1, r3
 8000a3e:	bf58      	it	pl
 8000a40:	4299      	cmppl	r1, r3
 8000a42:	bf08      	it	eq
 8000a44:	4290      	cmpeq	r0, r2
 8000a46:	bf2c      	ite	cs
 8000a48:	17d8      	asrcs	r0, r3, #31
 8000a4a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4e:	f040 0001 	orr.w	r0, r0, #1
 8000a52:	4770      	bx	lr
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	d102      	bne.n	8000a64 <__cmpdf2+0x64>
 8000a5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a62:	d107      	bne.n	8000a74 <__cmpdf2+0x74>
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d1d6      	bne.n	8000a1c <__cmpdf2+0x1c>
 8000a6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a72:	d0d3      	beq.n	8000a1c <__cmpdf2+0x1c>
 8000a74:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_cdrcmple>:
 8000a7c:	4684      	mov	ip, r0
 8000a7e:	4610      	mov	r0, r2
 8000a80:	4662      	mov	r2, ip
 8000a82:	468c      	mov	ip, r1
 8000a84:	4619      	mov	r1, r3
 8000a86:	4663      	mov	r3, ip
 8000a88:	e000      	b.n	8000a8c <__aeabi_cdcmpeq>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdcmpeq>:
 8000a8c:	b501      	push	{r0, lr}
 8000a8e:	f7ff ffb7 	bl	8000a00 <__cmpdf2>
 8000a92:	2800      	cmp	r0, #0
 8000a94:	bf48      	it	mi
 8000a96:	f110 0f00 	cmnmi.w	r0, #0
 8000a9a:	bd01      	pop	{r0, pc}

08000a9c <__aeabi_dcmpeq>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff fff4 	bl	8000a8c <__aeabi_cdcmpeq>
 8000aa4:	bf0c      	ite	eq
 8000aa6:	2001      	moveq	r0, #1
 8000aa8:	2000      	movne	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmplt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffea 	bl	8000a8c <__aeabi_cdcmpeq>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmple>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffe0 	bl	8000a8c <__aeabi_cdcmpeq>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpge>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffce 	bl	8000a7c <__aeabi_cdrcmple>
 8000ae0:	bf94      	ite	ls
 8000ae2:	2001      	movls	r0, #1
 8000ae4:	2000      	movhi	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpgt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffc4 	bl	8000a7c <__aeabi_cdrcmple>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmpun>:
 8000b00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d102      	bne.n	8000b10 <__aeabi_dcmpun+0x10>
 8000b0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0e:	d10a      	bne.n	8000b26 <__aeabi_dcmpun+0x26>
 8000b10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x20>
 8000b1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_dcmpun+0x26>
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0001 	mov.w	r0, #1
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_frsub>:
 8000c5c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c60:	e002      	b.n	8000c68 <__addsf3>
 8000c62:	bf00      	nop

08000c64 <__aeabi_fsub>:
 8000c64:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c68 <__addsf3>:
 8000c68:	0042      	lsls	r2, r0, #1
 8000c6a:	bf1f      	itttt	ne
 8000c6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c70:	ea92 0f03 	teqne	r2, r3
 8000c74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7c:	d06a      	beq.n	8000d54 <__addsf3+0xec>
 8000c7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c86:	bfc1      	itttt	gt
 8000c88:	18d2      	addgt	r2, r2, r3
 8000c8a:	4041      	eorgt	r1, r0
 8000c8c:	4048      	eorgt	r0, r1
 8000c8e:	4041      	eorgt	r1, r0
 8000c90:	bfb8      	it	lt
 8000c92:	425b      	neglt	r3, r3
 8000c94:	2b19      	cmp	r3, #25
 8000c96:	bf88      	it	hi
 8000c98:	4770      	bxhi	lr
 8000c9a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ca6:	bf18      	it	ne
 8000ca8:	4240      	negne	r0, r0
 8000caa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cb2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cb6:	bf18      	it	ne
 8000cb8:	4249      	negne	r1, r1
 8000cba:	ea92 0f03 	teq	r2, r3
 8000cbe:	d03f      	beq.n	8000d40 <__addsf3+0xd8>
 8000cc0:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc4:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc8:	eb10 000c 	adds.w	r0, r0, ip
 8000ccc:	f1c3 0320 	rsb	r3, r3, #32
 8000cd0:	fa01 f103 	lsl.w	r1, r1, r3
 8000cd4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__addsf3+0x78>
 8000cda:	4249      	negs	r1, r1
 8000cdc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ce0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000ce4:	d313      	bcc.n	8000d0e <__addsf3+0xa6>
 8000ce6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cea:	d306      	bcc.n	8000cfa <__addsf3+0x92>
 8000cec:	0840      	lsrs	r0, r0, #1
 8000cee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cf2:	f102 0201 	add.w	r2, r2, #1
 8000cf6:	2afe      	cmp	r2, #254	@ 0xfe
 8000cf8:	d251      	bcs.n	8000d9e <__addsf3+0x136>
 8000cfa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	ea40 0003 	orr.w	r0, r0, r3
 8000d0c:	4770      	bx	lr
 8000d0e:	0049      	lsls	r1, r1, #1
 8000d10:	eb40 0000 	adc.w	r0, r0, r0
 8000d14:	3a01      	subs	r2, #1
 8000d16:	bf28      	it	cs
 8000d18:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d1c:	d2ed      	bcs.n	8000cfa <__addsf3+0x92>
 8000d1e:	fab0 fc80 	clz	ip, r0
 8000d22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d26:	ebb2 020c 	subs.w	r2, r2, ip
 8000d2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d2e:	bfaa      	itet	ge
 8000d30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d34:	4252      	neglt	r2, r2
 8000d36:	4318      	orrge	r0, r3
 8000d38:	bfbc      	itt	lt
 8000d3a:	40d0      	lsrlt	r0, r2
 8000d3c:	4318      	orrlt	r0, r3
 8000d3e:	4770      	bx	lr
 8000d40:	f092 0f00 	teq	r2, #0
 8000d44:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d48:	bf06      	itte	eq
 8000d4a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d4e:	3201      	addeq	r2, #1
 8000d50:	3b01      	subne	r3, #1
 8000d52:	e7b5      	b.n	8000cc0 <__addsf3+0x58>
 8000d54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d5c:	bf18      	it	ne
 8000d5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d62:	d021      	beq.n	8000da8 <__addsf3+0x140>
 8000d64:	ea92 0f03 	teq	r2, r3
 8000d68:	d004      	beq.n	8000d74 <__addsf3+0x10c>
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	bf08      	it	eq
 8000d70:	4608      	moveq	r0, r1
 8000d72:	4770      	bx	lr
 8000d74:	ea90 0f01 	teq	r0, r1
 8000d78:	bf1c      	itt	ne
 8000d7a:	2000      	movne	r0, #0
 8000d7c:	4770      	bxne	lr
 8000d7e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d82:	d104      	bne.n	8000d8e <__addsf3+0x126>
 8000d84:	0040      	lsls	r0, r0, #1
 8000d86:	bf28      	it	cs
 8000d88:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d8c:	4770      	bx	lr
 8000d8e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d92:	bf3c      	itt	cc
 8000d94:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d98:	4770      	bxcc	lr
 8000d9a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d9e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000da2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000da6:	4770      	bx	lr
 8000da8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dac:	bf16      	itet	ne
 8000dae:	4608      	movne	r0, r1
 8000db0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000db4:	4601      	movne	r1, r0
 8000db6:	0242      	lsls	r2, r0, #9
 8000db8:	bf06      	itte	eq
 8000dba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dbe:	ea90 0f01 	teqeq	r0, r1
 8000dc2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000dc6:	4770      	bx	lr

08000dc8 <__aeabi_ui2f>:
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	e004      	b.n	8000dd8 <__aeabi_i2f+0x8>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_i2f>:
 8000dd0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000dd4:	bf48      	it	mi
 8000dd6:	4240      	negmi	r0, r0
 8000dd8:	ea5f 0c00 	movs.w	ip, r0
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000de4:	4601      	mov	r1, r0
 8000de6:	f04f 0000 	mov.w	r0, #0
 8000dea:	e01c      	b.n	8000e26 <__aeabi_l2f+0x2a>

08000dec <__aeabi_ul2f>:
 8000dec:	ea50 0201 	orrs.w	r2, r0, r1
 8000df0:	bf08      	it	eq
 8000df2:	4770      	bxeq	lr
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e00a      	b.n	8000e10 <__aeabi_l2f+0x14>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_l2f>:
 8000dfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000e00:	bf08      	it	eq
 8000e02:	4770      	bxeq	lr
 8000e04:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e08:	d502      	bpl.n	8000e10 <__aeabi_l2f+0x14>
 8000e0a:	4240      	negs	r0, r0
 8000e0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e10:	ea5f 0c01 	movs.w	ip, r1
 8000e14:	bf02      	ittt	eq
 8000e16:	4684      	moveq	ip, r0
 8000e18:	4601      	moveq	r1, r0
 8000e1a:	2000      	moveq	r0, #0
 8000e1c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e20:	bf08      	it	eq
 8000e22:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e26:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e2a:	fabc f28c 	clz	r2, ip
 8000e2e:	3a08      	subs	r2, #8
 8000e30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e34:	db10      	blt.n	8000e58 <__aeabi_l2f+0x5c>
 8000e36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e40:	f1c2 0220 	rsb	r2, r2, #32
 8000e44:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e48:	fa20 f202 	lsr.w	r2, r0, r2
 8000e4c:	eb43 0002 	adc.w	r0, r3, r2
 8000e50:	bf08      	it	eq
 8000e52:	f020 0001 	biceq.w	r0, r0, #1
 8000e56:	4770      	bx	lr
 8000e58:	f102 0220 	add.w	r2, r2, #32
 8000e5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e60:	f1c2 0220 	rsb	r2, r2, #32
 8000e64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e68:	fa21 f202 	lsr.w	r2, r1, r2
 8000e6c:	eb43 0002 	adc.w	r0, r3, r2
 8000e70:	bf08      	it	eq
 8000e72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e76:	4770      	bx	lr

08000e78 <__aeabi_fmul>:
 8000e78:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e80:	bf1e      	ittt	ne
 8000e82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e86:	ea92 0f0c 	teqne	r2, ip
 8000e8a:	ea93 0f0c 	teqne	r3, ip
 8000e8e:	d06f      	beq.n	8000f70 <__aeabi_fmul+0xf8>
 8000e90:	441a      	add	r2, r3
 8000e92:	ea80 0c01 	eor.w	ip, r0, r1
 8000e96:	0240      	lsls	r0, r0, #9
 8000e98:	bf18      	it	ne
 8000e9a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e9e:	d01e      	beq.n	8000ede <__aeabi_fmul+0x66>
 8000ea0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ea4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ea8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000eac:	fba0 3101 	umull	r3, r1, r0, r1
 8000eb0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000eb4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000eb8:	bf3e      	ittt	cc
 8000eba:	0049      	lslcc	r1, r1, #1
 8000ebc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ec0:	005b      	lslcc	r3, r3, #1
 8000ec2:	ea40 0001 	orr.w	r0, r0, r1
 8000ec6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000eca:	2afd      	cmp	r2, #253	@ 0xfd
 8000ecc:	d81d      	bhi.n	8000f0a <__aeabi_fmul+0x92>
 8000ece:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000ed2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ed6:	bf08      	it	eq
 8000ed8:	f020 0001 	biceq.w	r0, r0, #1
 8000edc:	4770      	bx	lr
 8000ede:	f090 0f00 	teq	r0, #0
 8000ee2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ee6:	bf08      	it	eq
 8000ee8:	0249      	lsleq	r1, r1, #9
 8000eea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ef2:	3a7f      	subs	r2, #127	@ 0x7f
 8000ef4:	bfc2      	ittt	gt
 8000ef6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000efa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000efe:	4770      	bxgt	lr
 8000f00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f04:	f04f 0300 	mov.w	r3, #0
 8000f08:	3a01      	subs	r2, #1
 8000f0a:	dc5d      	bgt.n	8000fc8 <__aeabi_fmul+0x150>
 8000f0c:	f112 0f19 	cmn.w	r2, #25
 8000f10:	bfdc      	itt	le
 8000f12:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000f16:	4770      	bxle	lr
 8000f18:	f1c2 0200 	rsb	r2, r2, #0
 8000f1c:	0041      	lsls	r1, r0, #1
 8000f1e:	fa21 f102 	lsr.w	r1, r1, r2
 8000f22:	f1c2 0220 	rsb	r2, r2, #32
 8000f26:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f2a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f2e:	f140 0000 	adc.w	r0, r0, #0
 8000f32:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f36:	bf08      	it	eq
 8000f38:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f3c:	4770      	bx	lr
 8000f3e:	f092 0f00 	teq	r2, #0
 8000f42:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f46:	bf02      	ittt	eq
 8000f48:	0040      	lsleq	r0, r0, #1
 8000f4a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f4e:	3a01      	subeq	r2, #1
 8000f50:	d0f9      	beq.n	8000f46 <__aeabi_fmul+0xce>
 8000f52:	ea40 000c 	orr.w	r0, r0, ip
 8000f56:	f093 0f00 	teq	r3, #0
 8000f5a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0049      	lsleq	r1, r1, #1
 8000f62:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f66:	3b01      	subeq	r3, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fmul+0xe6>
 8000f6a:	ea41 010c 	orr.w	r1, r1, ip
 8000f6e:	e78f      	b.n	8000e90 <__aeabi_fmul+0x18>
 8000f70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f74:	ea92 0f0c 	teq	r2, ip
 8000f78:	bf18      	it	ne
 8000f7a:	ea93 0f0c 	teqne	r3, ip
 8000f7e:	d00a      	beq.n	8000f96 <__aeabi_fmul+0x11e>
 8000f80:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f84:	bf18      	it	ne
 8000f86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f8a:	d1d8      	bne.n	8000f3e <__aeabi_fmul+0xc6>
 8000f8c:	ea80 0001 	eor.w	r0, r0, r1
 8000f90:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f94:	4770      	bx	lr
 8000f96:	f090 0f00 	teq	r0, #0
 8000f9a:	bf17      	itett	ne
 8000f9c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000fa0:	4608      	moveq	r0, r1
 8000fa2:	f091 0f00 	teqne	r1, #0
 8000fa6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000faa:	d014      	beq.n	8000fd6 <__aeabi_fmul+0x15e>
 8000fac:	ea92 0f0c 	teq	r2, ip
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_fmul+0x13e>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	d10f      	bne.n	8000fd6 <__aeabi_fmul+0x15e>
 8000fb6:	ea93 0f0c 	teq	r3, ip
 8000fba:	d103      	bne.n	8000fc4 <__aeabi_fmul+0x14c>
 8000fbc:	024b      	lsls	r3, r1, #9
 8000fbe:	bf18      	it	ne
 8000fc0:	4608      	movne	r0, r1
 8000fc2:	d108      	bne.n	8000fd6 <__aeabi_fmul+0x15e>
 8000fc4:	ea80 0001 	eor.w	r0, r0, r1
 8000fc8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000fcc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fd4:	4770      	bx	lr
 8000fd6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fda:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000fde:	4770      	bx	lr

08000fe0 <__aeabi_fdiv>:
 8000fe0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000fe4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fe8:	bf1e      	ittt	ne
 8000fea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fee:	ea92 0f0c 	teqne	r2, ip
 8000ff2:	ea93 0f0c 	teqne	r3, ip
 8000ff6:	d069      	beq.n	80010cc <__aeabi_fdiv+0xec>
 8000ff8:	eba2 0203 	sub.w	r2, r2, r3
 8000ffc:	ea80 0c01 	eor.w	ip, r0, r1
 8001000:	0249      	lsls	r1, r1, #9
 8001002:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8001006:	d037      	beq.n	8001078 <__aeabi_fdiv+0x98>
 8001008:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800100c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8001010:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001014:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8001018:	428b      	cmp	r3, r1
 800101a:	bf38      	it	cc
 800101c:	005b      	lslcc	r3, r3, #1
 800101e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8001022:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8001026:	428b      	cmp	r3, r1
 8001028:	bf24      	itt	cs
 800102a:	1a5b      	subcs	r3, r3, r1
 800102c:	ea40 000c 	orrcs.w	r0, r0, ip
 8001030:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001034:	bf24      	itt	cs
 8001036:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800103a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800103e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001042:	bf24      	itt	cs
 8001044:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001048:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800104c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001050:	bf24      	itt	cs
 8001052:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001056:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	bf18      	it	ne
 800105e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001062:	d1e0      	bne.n	8001026 <__aeabi_fdiv+0x46>
 8001064:	2afd      	cmp	r2, #253	@ 0xfd
 8001066:	f63f af50 	bhi.w	8000f0a <__aeabi_fmul+0x92>
 800106a:	428b      	cmp	r3, r1
 800106c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001070:	bf08      	it	eq
 8001072:	f020 0001 	biceq.w	r0, r0, #1
 8001076:	4770      	bx	lr
 8001078:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800107c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001080:	327f      	adds	r2, #127	@ 0x7f
 8001082:	bfc2      	ittt	gt
 8001084:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8001088:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800108c:	4770      	bxgt	lr
 800108e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	3a01      	subs	r2, #1
 8001098:	e737      	b.n	8000f0a <__aeabi_fmul+0x92>
 800109a:	f092 0f00 	teq	r2, #0
 800109e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80010a2:	bf02      	ittt	eq
 80010a4:	0040      	lsleq	r0, r0, #1
 80010a6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80010aa:	3a01      	subeq	r2, #1
 80010ac:	d0f9      	beq.n	80010a2 <__aeabi_fdiv+0xc2>
 80010ae:	ea40 000c 	orr.w	r0, r0, ip
 80010b2:	f093 0f00 	teq	r3, #0
 80010b6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80010ba:	bf02      	ittt	eq
 80010bc:	0049      	lsleq	r1, r1, #1
 80010be:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80010c2:	3b01      	subeq	r3, #1
 80010c4:	d0f9      	beq.n	80010ba <__aeabi_fdiv+0xda>
 80010c6:	ea41 010c 	orr.w	r1, r1, ip
 80010ca:	e795      	b.n	8000ff8 <__aeabi_fdiv+0x18>
 80010cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010d0:	ea92 0f0c 	teq	r2, ip
 80010d4:	d108      	bne.n	80010e8 <__aeabi_fdiv+0x108>
 80010d6:	0242      	lsls	r2, r0, #9
 80010d8:	f47f af7d 	bne.w	8000fd6 <__aeabi_fmul+0x15e>
 80010dc:	ea93 0f0c 	teq	r3, ip
 80010e0:	f47f af70 	bne.w	8000fc4 <__aeabi_fmul+0x14c>
 80010e4:	4608      	mov	r0, r1
 80010e6:	e776      	b.n	8000fd6 <__aeabi_fmul+0x15e>
 80010e8:	ea93 0f0c 	teq	r3, ip
 80010ec:	d104      	bne.n	80010f8 <__aeabi_fdiv+0x118>
 80010ee:	024b      	lsls	r3, r1, #9
 80010f0:	f43f af4c 	beq.w	8000f8c <__aeabi_fmul+0x114>
 80010f4:	4608      	mov	r0, r1
 80010f6:	e76e      	b.n	8000fd6 <__aeabi_fmul+0x15e>
 80010f8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80010fc:	bf18      	it	ne
 80010fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001102:	d1ca      	bne.n	800109a <__aeabi_fdiv+0xba>
 8001104:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001108:	f47f af5c 	bne.w	8000fc4 <__aeabi_fmul+0x14c>
 800110c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001110:	f47f af3c 	bne.w	8000f8c <__aeabi_fmul+0x114>
 8001114:	e75f      	b.n	8000fd6 <__aeabi_fmul+0x15e>
 8001116:	bf00      	nop

08001118 <__gesf2>:
 8001118:	f04f 3cff 	mov.w	ip, #4294967295
 800111c:	e006      	b.n	800112c <__cmpsf2+0x4>
 800111e:	bf00      	nop

08001120 <__lesf2>:
 8001120:	f04f 0c01 	mov.w	ip, #1
 8001124:	e002      	b.n	800112c <__cmpsf2+0x4>
 8001126:	bf00      	nop

08001128 <__cmpsf2>:
 8001128:	f04f 0c01 	mov.w	ip, #1
 800112c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001130:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001134:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001138:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800113c:	bf18      	it	ne
 800113e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001142:	d011      	beq.n	8001168 <__cmpsf2+0x40>
 8001144:	b001      	add	sp, #4
 8001146:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800114a:	bf18      	it	ne
 800114c:	ea90 0f01 	teqne	r0, r1
 8001150:	bf58      	it	pl
 8001152:	ebb2 0003 	subspl.w	r0, r2, r3
 8001156:	bf88      	it	hi
 8001158:	17c8      	asrhi	r0, r1, #31
 800115a:	bf38      	it	cc
 800115c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001160:	bf18      	it	ne
 8001162:	f040 0001 	orrne.w	r0, r0, #1
 8001166:	4770      	bx	lr
 8001168:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800116c:	d102      	bne.n	8001174 <__cmpsf2+0x4c>
 800116e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001172:	d105      	bne.n	8001180 <__cmpsf2+0x58>
 8001174:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001178:	d1e4      	bne.n	8001144 <__cmpsf2+0x1c>
 800117a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800117e:	d0e1      	beq.n	8001144 <__cmpsf2+0x1c>
 8001180:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <__aeabi_cfrcmple>:
 8001188:	4684      	mov	ip, r0
 800118a:	4608      	mov	r0, r1
 800118c:	4661      	mov	r1, ip
 800118e:	e7ff      	b.n	8001190 <__aeabi_cfcmpeq>

08001190 <__aeabi_cfcmpeq>:
 8001190:	b50f      	push	{r0, r1, r2, r3, lr}
 8001192:	f7ff ffc9 	bl	8001128 <__cmpsf2>
 8001196:	2800      	cmp	r0, #0
 8001198:	bf48      	it	mi
 800119a:	f110 0f00 	cmnmi.w	r0, #0
 800119e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080011a0 <__aeabi_fcmpeq>:
 80011a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011a4:	f7ff fff4 	bl	8001190 <__aeabi_cfcmpeq>
 80011a8:	bf0c      	ite	eq
 80011aa:	2001      	moveq	r0, #1
 80011ac:	2000      	movne	r0, #0
 80011ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80011b2:	bf00      	nop

080011b4 <__aeabi_fcmplt>:
 80011b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b8:	f7ff ffea 	bl	8001190 <__aeabi_cfcmpeq>
 80011bc:	bf34      	ite	cc
 80011be:	2001      	movcc	r0, #1
 80011c0:	2000      	movcs	r0, #0
 80011c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011c6:	bf00      	nop

080011c8 <__aeabi_fcmple>:
 80011c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011cc:	f7ff ffe0 	bl	8001190 <__aeabi_cfcmpeq>
 80011d0:	bf94      	ite	ls
 80011d2:	2001      	movls	r0, #1
 80011d4:	2000      	movhi	r0, #0
 80011d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011da:	bf00      	nop

080011dc <__aeabi_fcmpge>:
 80011dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011e0:	f7ff ffd2 	bl	8001188 <__aeabi_cfrcmple>
 80011e4:	bf94      	ite	ls
 80011e6:	2001      	movls	r0, #1
 80011e8:	2000      	movhi	r0, #0
 80011ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ee:	bf00      	nop

080011f0 <__aeabi_fcmpgt>:
 80011f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011f4:	f7ff ffc8 	bl	8001188 <__aeabi_cfrcmple>
 80011f8:	bf34      	ite	cc
 80011fa:	2001      	movcc	r0, #1
 80011fc:	2000      	movcs	r0, #0
 80011fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001202:	bf00      	nop

08001204 <__aeabi_fcmpun>:
 8001204:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001208:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800120c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001210:	d102      	bne.n	8001218 <__aeabi_fcmpun+0x14>
 8001212:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001216:	d108      	bne.n	800122a <__aeabi_fcmpun+0x26>
 8001218:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800121c:	d102      	bne.n	8001224 <__aeabi_fcmpun+0x20>
 800121e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001222:	d102      	bne.n	800122a <__aeabi_fcmpun+0x26>
 8001224:	f04f 0000 	mov.w	r0, #0
 8001228:	4770      	bx	lr
 800122a:	f04f 0001 	mov.w	r0, #1
 800122e:	4770      	bx	lr

08001230 <__aeabi_d2lz>:
 8001230:	b538      	push	{r3, r4, r5, lr}
 8001232:	2200      	movs	r2, #0
 8001234:	2300      	movs	r3, #0
 8001236:	4604      	mov	r4, r0
 8001238:	460d      	mov	r5, r1
 800123a:	f7ff fc39 	bl	8000ab0 <__aeabi_dcmplt>
 800123e:	b928      	cbnz	r0, 800124c <__aeabi_d2lz+0x1c>
 8001240:	4620      	mov	r0, r4
 8001242:	4629      	mov	r1, r5
 8001244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001248:	f000 b80a 	b.w	8001260 <__aeabi_d2ulz>
 800124c:	4620      	mov	r0, r4
 800124e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001252:	f000 f805 	bl	8001260 <__aeabi_d2ulz>
 8001256:	4240      	negs	r0, r0
 8001258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800125c:	bd38      	pop	{r3, r4, r5, pc}
 800125e:	bf00      	nop

08001260 <__aeabi_d2ulz>:
 8001260:	b5d0      	push	{r4, r6, r7, lr}
 8001262:	2200      	movs	r2, #0
 8001264:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <__aeabi_d2ulz+0x34>)
 8001266:	4606      	mov	r6, r0
 8001268:	460f      	mov	r7, r1
 800126a:	f7ff f9af 	bl	80005cc <__aeabi_dmul>
 800126e:	f7ff fc85 	bl	8000b7c <__aeabi_d2uiz>
 8001272:	4604      	mov	r4, r0
 8001274:	f7ff f930 	bl	80004d8 <__aeabi_ui2d>
 8001278:	2200      	movs	r2, #0
 800127a:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <__aeabi_d2ulz+0x38>)
 800127c:	f7ff f9a6 	bl	80005cc <__aeabi_dmul>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4630      	mov	r0, r6
 8001286:	4639      	mov	r1, r7
 8001288:	f7fe ffe8 	bl	800025c <__aeabi_dsub>
 800128c:	f7ff fc76 	bl	8000b7c <__aeabi_d2uiz>
 8001290:	4621      	mov	r1, r4
 8001292:	bdd0      	pop	{r4, r6, r7, pc}
 8001294:	3df00000 	.word	0x3df00000
 8001298:	41f00000 	.word	0x41f00000

0800129c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80012a0:	4b17      	ldr	r3, [pc, #92]	@ (8001300 <MX_CAN_Init+0x64>)
 80012a2:	4a18      	ldr	r2, [pc, #96]	@ (8001304 <MX_CAN_Init+0x68>)
 80012a4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 80012a6:	4b16      	ldr	r3, [pc, #88]	@ (8001300 <MX_CAN_Init+0x64>)
 80012a8:	2208      	movs	r2, #8
 80012aa:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80012ac:	4b14      	ldr	r3, [pc, #80]	@ (8001300 <MX_CAN_Init+0x64>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012b2:	4b13      	ldr	r3, [pc, #76]	@ (8001300 <MX_CAN_Init+0x64>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 80012b8:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <MX_CAN_Init+0x64>)
 80012ba:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80012be:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001300 <MX_CAN_Init+0x64>)
 80012c2:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80012c6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80012c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001300 <MX_CAN_Init+0x64>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80012ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <MX_CAN_Init+0x64>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80012d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001300 <MX_CAN_Init+0x64>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <MX_CAN_Init+0x64>)
 80012dc:	2200      	movs	r2, #0
 80012de:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80012e0:	4b07      	ldr	r3, [pc, #28]	@ (8001300 <MX_CAN_Init+0x64>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80012e6:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <MX_CAN_Init+0x64>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80012ec:	4804      	ldr	r0, [pc, #16]	@ (8001300 <MX_CAN_Init+0x64>)
 80012ee:	f003 f973 	bl	80045d8 <HAL_CAN_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80012f8:	f001 fe8c 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	2000033c 	.word	0x2000033c
 8001304:	40006400 	.word	0x40006400

08001308 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	@ 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a29      	ldr	r2, [pc, #164]	@ (80013c8 <HAL_CAN_MspInit+0xc0>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d14b      	bne.n	80013c0 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001328:	4b28      	ldr	r3, [pc, #160]	@ (80013cc <HAL_CAN_MspInit+0xc4>)
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	4a27      	ldr	r2, [pc, #156]	@ (80013cc <HAL_CAN_MspInit+0xc4>)
 800132e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001332:	61d3      	str	r3, [r2, #28]
 8001334:	4b25      	ldr	r3, [pc, #148]	@ (80013cc <HAL_CAN_MspInit+0xc4>)
 8001336:	69db      	ldr	r3, [r3, #28]
 8001338:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001340:	4b22      	ldr	r3, [pc, #136]	@ (80013cc <HAL_CAN_MspInit+0xc4>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a21      	ldr	r2, [pc, #132]	@ (80013cc <HAL_CAN_MspInit+0xc4>)
 8001346:	f043 0308 	orr.w	r3, r3, #8
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b1f      	ldr	r3, [pc, #124]	@ (80013cc <HAL_CAN_MspInit+0xc4>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0308 	and.w	r3, r3, #8
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001358:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800135c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	4818      	ldr	r0, [pc, #96]	@ (80013d0 <HAL_CAN_MspInit+0xc8>)
 800136e:	f004 f853 	bl	8005418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001372:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800137c:	2303      	movs	r3, #3
 800137e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	4812      	ldr	r0, [pc, #72]	@ (80013d0 <HAL_CAN_MspInit+0xc8>)
 8001388:	f004 f846 	bl	8005418 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800138c:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <HAL_CAN_MspInit+0xcc>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
 8001392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001394:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24
 800139a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80013a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80013aa:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <HAL_CAN_MspInit+0xcc>)
 80013ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ae:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2105      	movs	r1, #5
 80013b4:	2014      	movs	r0, #20
 80013b6:	f004 f804 	bl	80053c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80013ba:	2014      	movs	r0, #20
 80013bc:	f004 f81d 	bl	80053fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80013c0:	bf00      	nop
 80013c2:	3728      	adds	r7, #40	@ 0x28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40006400 	.word	0x40006400
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40010c00 	.word	0x40010c00
 80013d4:	40010000 	.word	0x40010000

080013d8 <CanFilterSetup>:
}

/* USER CODE BEGIN 1 */

void CanFilterSetup(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* TODO: Review Filter Implementation */
  // Use mask and list mode to filter IDs from the CAN ID BOM

  // Filter for 0x500 and 0x600 IDs
  CAN_filter0.FilterIdHigh = 0x0000;
 80013dc:	4b10      	ldr	r3, [pc, #64]	@ (8001420 <CanFilterSetup+0x48>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
  CAN_filter0.FilterMaskIdHigh = 0x0000;
 80013e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <CanFilterSetup+0x48>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]

  CAN_filter0.FilterIdLow = 0x0000;
 80013e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001420 <CanFilterSetup+0x48>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	605a      	str	r2, [r3, #4]
  CAN_filter0.FilterMaskIdLow = 0x0000;
 80013ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <CanFilterSetup+0x48>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]

  CAN_filter0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80013f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <CanFilterSetup+0x48>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
  CAN_filter0.FilterBank = (uint32_t) 0;
 80013fa:	4b09      	ldr	r3, [pc, #36]	@ (8001420 <CanFilterSetup+0x48>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	615a      	str	r2, [r3, #20]
  CAN_filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 8001400:	4b07      	ldr	r3, [pc, #28]	@ (8001420 <CanFilterSetup+0x48>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]
  CAN_filter0.FilterScale = CAN_FILTERSCALE_16BIT;
 8001406:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <CanFilterSetup+0x48>)
 8001408:	2200      	movs	r2, #0
 800140a:	61da      	str	r2, [r3, #28]
  CAN_filter0.FilterActivation = CAN_FILTER_ENABLE;
 800140c:	4b04      	ldr	r3, [pc, #16]	@ (8001420 <CanFilterSetup+0x48>)
 800140e:	2201      	movs	r2, #1
 8001410:	621a      	str	r2, [r3, #32]

  // Configure reception filters
  HAL_CAN_ConfigFilter(&hcan, &CAN_filter0);
 8001412:	4903      	ldr	r1, [pc, #12]	@ (8001420 <CanFilterSetup+0x48>)
 8001414:	4803      	ldr	r0, [pc, #12]	@ (8001424 <CanFilterSetup+0x4c>)
 8001416:	f003 f9da 	bl	80047ce <HAL_CAN_ConfigFilter>
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200006f0 	.word	0x200006f0
 8001424:	2000033c 	.word	0x2000033c

08001428 <Can_Init>:

/*
 * CAN set-up: Sets up the filters, Starts CAN with HAL, and Activates notifications for interrupts.
 */
void Can_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
  CanFilterSetup();
 800142e:	f7ff ffd3 	bl	80013d8 <CanFilterSetup>
  can_start = HAL_CAN_Start(&hcan);
 8001432:	4808      	ldr	r0, [pc, #32]	@ (8001454 <Can_Init+0x2c>)
 8001434:	f003 fa94 	bl	8004960 <HAL_CAN_Start>
 8001438:	4603      	mov	r3, r0
 800143a:	461a      	mov	r2, r3
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <Can_Init+0x30>)
 800143e:	701a      	strb	r2, [r3, #0]
  assert_param(can_start == HAL_OK);

  HAL_StatusTypeDef can_notification_status = HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001440:	2102      	movs	r1, #2
 8001442:	4804      	ldr	r0, [pc, #16]	@ (8001454 <Can_Init+0x2c>)
 8001444:	f003 fcc0 	bl	8004dc8 <HAL_CAN_ActivateNotification>
 8001448:	4603      	mov	r3, r0
 800144a:	71fb      	strb	r3, [r7, #7]
  assert_param(can_notification_status == HAL_OK);

  /* To avoid warning of unused variable */
  (void) can_notification_status;
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2000033c 	.word	0x2000033c
 8001458:	20000334 	.word	0x20000334

0800145c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800145c:	b5b0      	push	{r4, r5, r7, lr}
 800145e:	b08e      	sub	sp, #56	@ 0x38
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint8_t can_data[8];


  /* Get CAN message */
//  while(HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO0) != 0) {
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_data);  // TODO: Put can_rx_header and can_data into a data structure able to be accessed in the freertos task
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	f107 0214 	add.w	r2, r7, #20
 800146c:	2100      	movs	r1, #0
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f003 fb89 	bl	8004b86 <HAL_CAN_GetRxMessage>
  //  printf("%d\n\r", HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO0));
    /* Put CAN message in the Queue */
    CAN_msg_t *new_CAN_msg;
    new_CAN_msg = osPoolAlloc(CAN_MSG_memory_pool);
 8001474:	4b20      	ldr	r3, [pc, #128]	@ (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f008 fc88 	bl	8009d8e <osPoolAlloc>
 800147e:	6338      	str	r0, [r7, #48]	@ 0x30
    new_CAN_msg->header = can_rx_header;
 8001480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001482:	461d      	mov	r5, r3
 8001484:	f107 0414 	add.w	r4, r7, #20
 8001488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800148a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800148c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001490:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    for(int i = 0; i < 8; i++) {
 8001494:	2300      	movs	r3, #0
 8001496:	637b      	str	r3, [r7, #52]	@ 0x34
 8001498:	e00d      	b.n	80014b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
      new_CAN_msg->data[i] = can_data[i];
 800149a:	f107 020c 	add.w	r2, r7, #12
 800149e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014a0:	4413      	add	r3, r2
 80014a2:	7819      	ldrb	r1, [r3, #0]
 80014a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80014a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014a8:	4413      	add	r3, r2
 80014aa:	331c      	adds	r3, #28
 80014ac:	460a      	mov	r2, r1
 80014ae:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 8; i++) {
 80014b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014b2:	3301      	adds	r3, #1
 80014b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80014b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014b8:	2b07      	cmp	r3, #7
 80014ba:	ddee      	ble.n	800149a <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
    }
    new_CAN_msg->timestamp.double_value = get_current_timestamp();
 80014bc:	f002 fcd2 	bl	8003e64 <get_current_timestamp>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff f818 	bl	80004f8 <__aeabi_i2d>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80014ce:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    osMessagePut(CAN_MSG_Rx_Queue, new_CAN_msg, osWaitForever);
 80014d2:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014da:	f04f 32ff 	mov.w	r2, #4294967295
 80014de:	4619      	mov	r1, r3
 80014e0:	f008 fd20 	bl	8009f24 <osMessagePut>
//  }

  /* Set the Flag to CAN_READY */
  osSignalSet(readCANTaskHandle, CAN_READY);
 80014e4:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2101      	movs	r1, #1
 80014ea:	4618      	mov	r0, r3
 80014ec:	f008 fb66 	bl	8009bbc <osSignalSet>

  /* To avoid warning of unused variable */
  //(void) status;
}
 80014f0:	bf00      	nop
 80014f2:	3738      	adds	r7, #56	@ 0x38
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bdb0      	pop	{r4, r5, r7, pc}
 80014f8:	20000374 	.word	0x20000374
 80014fc:	20000378 	.word	0x20000378
 8001500:	20000380 	.word	0x20000380

08001504 <DebugIO_Init>:
 * Configure a UART peripheral assignment for printf debugging
 *
 * @param huart HAL handle for the UART to use for printf debugging
*/
void DebugIO_Init(UART_HandleTypeDef *huart)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
    io_huart = huart;
 800150c:	4a03      	ldr	r2, [pc, #12]	@ (800151c <DebugIO_Init+0x18>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	20000364 	.word	0x20000364

08001520 <__io_putchar>:

// Configure where printf() and putchar() output goes
int __io_putchar(int ch)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
#ifdef USE_UART
    // Output on UART
    HAL_UART_Transmit(io_huart, (uint8_t *)&ch, 1, 0xFFFF);
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <__io_putchar+0x24>)
 800152a:	6818      	ldr	r0, [r3, #0]
 800152c:	1d39      	adds	r1, r7, #4
 800152e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001532:	2201      	movs	r2, #1
 8001534:	f008 f86e 	bl	8009614 <HAL_UART_Transmit>
#ifdef USE_SWO
    // Output on Serial Wire Output (SWO)
    ITM_SendChar(ch);
#endif // USE_SWO

    return ch;
 8001538:	687b      	ldr	r3, [r7, #4]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000364 	.word	0x20000364

08001548 <__io_getchar>:

int __io_getchar()
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
    // Implement if needed
    return 0;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr

08001556 <_read>:

#ifdef NO_SYSCALL
int _read(int file, char *ptr, int len)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af00      	add	r7, sp, #0
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	e00a      	b.n	800157e <_read+0x28>
    {
        *ptr++ = __io_getchar();
 8001568:	f7ff ffee 	bl	8001548 <__io_getchar>
 800156c:	4601      	mov	r1, r0
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	1c5a      	adds	r2, r3, #1
 8001572:	60ba      	str	r2, [r7, #8]
 8001574:	b2ca      	uxtb	r2, r1
 8001576:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3301      	adds	r3, #1
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	429a      	cmp	r2, r3
 8001584:	dbf0      	blt.n	8001568 <_read+0x12>
    }

    return len;
 8001586:	687b      	ldr	r3, [r7, #4]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <_write>:

int _write(int file, char *ptr, int len)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	e009      	b.n	80015b6 <_write+0x26>
    {
        __io_putchar(*ptr++);
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	1c5a      	adds	r2, r3, #1
 80015a6:	60ba      	str	r2, [r7, #8]
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff ffb8 	bl	8001520 <__io_putchar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	3301      	adds	r3, #1
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	dbf1      	blt.n	80015a2 <_write+0x12>
    }
    return len;
 80015be:	687b      	ldr	r3, [r7, #4]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2140      	movs	r1, #64	@ 0x40
 80015d0:	4803      	ldr	r0, [pc, #12]	@ (80015e0 <SELECT+0x18>)
 80015d2:	f004 f8cc 	bl	800576e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015d6:	2001      	movs	r0, #1
 80015d8:	f002 ffda 	bl	8004590 <HAL_Delay>
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40010c00 	.word	0x40010c00

080015e4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80015e8:	2201      	movs	r2, #1
 80015ea:	2140      	movs	r1, #64	@ 0x40
 80015ec:	4803      	ldr	r0, [pc, #12]	@ (80015fc <DESELECT+0x18>)
 80015ee:	f004 f8be 	bl	800576e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015f2:	2001      	movs	r0, #1
 80015f4:	f002 ffcc 	bl	8004590 <HAL_Delay>
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40010c00 	.word	0x40010c00

08001600 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800160a:	bf00      	nop
 800160c:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <SPI_TxByte+0x30>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b02      	cmp	r3, #2
 8001618:	d1f8      	bne.n	800160c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800161a:	1df9      	adds	r1, r7, #7
 800161c:	2364      	movs	r3, #100	@ 0x64
 800161e:	2201      	movs	r2, #1
 8001620:	4803      	ldr	r0, [pc, #12]	@ (8001630 <SPI_TxByte+0x30>)
 8001622:	f007 f99d 	bl	8008960 <HAL_SPI_Transmit>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000768 	.word	0x20000768

08001634 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001640:	bf00      	nop
 8001642:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <SPI_TxBuffer+0x30>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b02      	cmp	r3, #2
 800164e:	d1f8      	bne.n	8001642 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001650:	887a      	ldrh	r2, [r7, #2]
 8001652:	2364      	movs	r3, #100	@ 0x64
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	4803      	ldr	r0, [pc, #12]	@ (8001664 <SPI_TxBuffer+0x30>)
 8001658:	f007 f982 	bl	8008960 <HAL_SPI_Transmit>
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000768 	.word	0x20000768

08001668 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800166e:	23ff      	movs	r3, #255	@ 0xff
 8001670:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001672:	bf00      	nop
 8001674:	4b09      	ldr	r3, [pc, #36]	@ (800169c <SPI_RxByte+0x34>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b02      	cmp	r3, #2
 8001680:	d1f8      	bne.n	8001674 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001682:	1dba      	adds	r2, r7, #6
 8001684:	1df9      	adds	r1, r7, #7
 8001686:	2364      	movs	r3, #100	@ 0x64
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	2301      	movs	r3, #1
 800168c:	4803      	ldr	r0, [pc, #12]	@ (800169c <SPI_RxByte+0x34>)
 800168e:	f007 faaa 	bl	8008be6 <HAL_SPI_TransmitReceive>

	return data;
 8001692:	79bb      	ldrb	r3, [r7, #6]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000768 	.word	0x20000768

080016a0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80016a8:	f7ff ffde 	bl	8001668 <SPI_RxByte>
 80016ac:	4603      	mov	r3, r0
 80016ae:	461a      	mov	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	701a      	strb	r2, [r3, #0]
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80016c2:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <SD_ReadyWait+0x30>)
 80016c4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80016c8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80016ca:	f7ff ffcd 	bl	8001668 <SPI_RxByte>
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	2bff      	cmp	r3, #255	@ 0xff
 80016d6:	d003      	beq.n	80016e0 <SD_ReadyWait+0x24>
 80016d8:	4b04      	ldr	r3, [pc, #16]	@ (80016ec <SD_ReadyWait+0x30>)
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1f4      	bne.n	80016ca <SD_ReadyWait+0xe>

	return res;
 80016e0:	79fb      	ldrb	r3, [r7, #7]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	2000036a 	.word	0x2000036a

080016f0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80016f6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80016fa:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80016fc:	f7ff ff72 	bl	80015e4 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001700:	2300      	movs	r3, #0
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	e005      	b.n	8001712 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001706:	20ff      	movs	r0, #255	@ 0xff
 8001708:	f7ff ff7a 	bl	8001600 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	3301      	adds	r3, #1
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	2b09      	cmp	r3, #9
 8001716:	ddf6      	ble.n	8001706 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001718:	f7ff ff56 	bl	80015c8 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800171c:	2340      	movs	r3, #64	@ 0x40
 800171e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001730:	2395      	movs	r3, #149	@ 0x95
 8001732:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001734:	463b      	mov	r3, r7
 8001736:	2106      	movs	r1, #6
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff7b 	bl	8001634 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800173e:	e002      	b.n	8001746 <SD_PowerOn+0x56>
	{
		cnt--;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	3b01      	subs	r3, #1
 8001744:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001746:	f7ff ff8f 	bl	8001668 <SPI_RxByte>
 800174a:	4603      	mov	r3, r0
 800174c:	2b01      	cmp	r3, #1
 800174e:	d002      	beq.n	8001756 <SD_PowerOn+0x66>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f4      	bne.n	8001740 <SD_PowerOn+0x50>
	}

	DESELECT();
 8001756:	f7ff ff45 	bl	80015e4 <DESELECT>
	SPI_TxByte(0XFF);
 800175a:	20ff      	movs	r0, #255	@ 0xff
 800175c:	f7ff ff50 	bl	8001600 <SPI_TxByte>

	PowerFlag = 1;
 8001760:	4b03      	ldr	r3, [pc, #12]	@ (8001770 <SD_PowerOn+0x80>)
 8001762:	2201      	movs	r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	2000036d 	.word	0x2000036d

08001774 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001778:	4b03      	ldr	r3, [pc, #12]	@ (8001788 <SD_PowerOff+0x14>)
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	2000036d 	.word	0x2000036d

0800178c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001790:	4b02      	ldr	r3, [pc, #8]	@ (800179c <SD_CheckPower+0x10>)
 8001792:	781b      	ldrb	r3, [r3, #0]
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	2000036d 	.word	0x2000036d

080017a0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80017aa:	4b13      	ldr	r3, [pc, #76]	@ (80017f8 <SD_RxDataBlock+0x58>)
 80017ac:	22c8      	movs	r2, #200	@ 0xc8
 80017ae:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80017b0:	f7ff ff5a 	bl	8001668 <SPI_RxByte>
 80017b4:	4603      	mov	r3, r0
 80017b6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	2bff      	cmp	r3, #255	@ 0xff
 80017bc:	d103      	bne.n	80017c6 <SD_RxDataBlock+0x26>
 80017be:	4b0e      	ldr	r3, [pc, #56]	@ (80017f8 <SD_RxDataBlock+0x58>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f4      	bne.n	80017b0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	2bfe      	cmp	r3, #254	@ 0xfe
 80017ca:	d001      	beq.n	80017d0 <SD_RxDataBlock+0x30>
 80017cc:	2300      	movs	r3, #0
 80017ce:	e00f      	b.n	80017f0 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff ff62 	bl	80016a0 <SPI_RxBytePtr>
	} while(len--);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	1e5a      	subs	r2, r3, #1
 80017e0:	603a      	str	r2, [r7, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f4      	bne.n	80017d0 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80017e6:	f7ff ff3f 	bl	8001668 <SPI_RxByte>
	SPI_RxByte();
 80017ea:	f7ff ff3d 	bl	8001668 <SPI_RxByte>

	return TRUE;
 80017ee:	2301      	movs	r3, #1
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000368 	.word	0x20000368

080017fc <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800180c:	f7ff ff56 	bl	80016bc <SD_ReadyWait>
 8001810:	4603      	mov	r3, r0
 8001812:	2bff      	cmp	r3, #255	@ 0xff
 8001814:	d001      	beq.n	800181a <SD_TxDataBlock+0x1e>
 8001816:	2300      	movs	r3, #0
 8001818:	e02f      	b.n	800187a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff feef 	bl	8001600 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001822:	78fb      	ldrb	r3, [r7, #3]
 8001824:	2bfd      	cmp	r3, #253	@ 0xfd
 8001826:	d020      	beq.n	800186a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001828:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff ff01 	bl	8001634 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001832:	f7ff ff19 	bl	8001668 <SPI_RxByte>
		SPI_RxByte();
 8001836:	f7ff ff17 	bl	8001668 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800183a:	e00b      	b.n	8001854 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800183c:	f7ff ff14 	bl	8001668 <SPI_RxByte>
 8001840:	4603      	mov	r3, r0
 8001842:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	f003 031f 	and.w	r3, r3, #31
 800184a:	2b05      	cmp	r3, #5
 800184c:	d006      	beq.n	800185c <SD_TxDataBlock+0x60>
			i++;
 800184e:	7bbb      	ldrb	r3, [r7, #14]
 8001850:	3301      	adds	r3, #1
 8001852:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001854:	7bbb      	ldrb	r3, [r7, #14]
 8001856:	2b40      	cmp	r3, #64	@ 0x40
 8001858:	d9f0      	bls.n	800183c <SD_TxDataBlock+0x40>
 800185a:	e000      	b.n	800185e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800185c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800185e:	bf00      	nop
 8001860:	f7ff ff02 	bl	8001668 <SPI_RxByte>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0fa      	beq.n	8001860 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	f003 031f 	and.w	r3, r3, #31
 8001870:	2b05      	cmp	r3, #5
 8001872:	d101      	bne.n	8001878 <SD_TxDataBlock+0x7c>
 8001874:	2301      	movs	r3, #1
 8001876:	e000      	b.n	800187a <SD_TxDataBlock+0x7e>

	return FALSE;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b084      	sub	sp, #16
 8001886:	af00      	add	r7, sp, #0
 8001888:	4603      	mov	r3, r0
 800188a:	6039      	str	r1, [r7, #0]
 800188c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800188e:	f7ff ff15 	bl	80016bc <SD_ReadyWait>
 8001892:	4603      	mov	r3, r0
 8001894:	2bff      	cmp	r3, #255	@ 0xff
 8001896:	d001      	beq.n	800189c <SD_SendCmd+0x1a>
 8001898:	23ff      	movs	r3, #255	@ 0xff
 800189a:	e042      	b.n	8001922 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff feae 	bl	8001600 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	0e1b      	lsrs	r3, r3, #24
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fea8 	bl	8001600 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	0c1b      	lsrs	r3, r3, #16
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fea2 	bl	8001600 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	0a1b      	lsrs	r3, r3, #8
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fe9c 	bl	8001600 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fe97 	bl	8001600 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	2b40      	cmp	r3, #64	@ 0x40
 80018d6:	d102      	bne.n	80018de <SD_SendCmd+0x5c>
 80018d8:	2395      	movs	r3, #149	@ 0x95
 80018da:	73fb      	strb	r3, [r7, #15]
 80018dc:	e007      	b.n	80018ee <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	2b48      	cmp	r3, #72	@ 0x48
 80018e2:	d102      	bne.n	80018ea <SD_SendCmd+0x68>
 80018e4:	2387      	movs	r3, #135	@ 0x87
 80018e6:	73fb      	strb	r3, [r7, #15]
 80018e8:	e001      	b.n	80018ee <SD_SendCmd+0x6c>
	else crc = 1;
 80018ea:	2301      	movs	r3, #1
 80018ec:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fe85 	bl	8001600 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	2b4c      	cmp	r3, #76	@ 0x4c
 80018fa:	d101      	bne.n	8001900 <SD_SendCmd+0x7e>
 80018fc:	f7ff feb4 	bl	8001668 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001900:	230a      	movs	r3, #10
 8001902:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001904:	f7ff feb0 	bl	8001668 <SPI_RxByte>
 8001908:	4603      	mov	r3, r0
 800190a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800190c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001910:	2b00      	cmp	r3, #0
 8001912:	da05      	bge.n	8001920 <SD_SendCmd+0x9e>
 8001914:	7bbb      	ldrb	r3, [r7, #14]
 8001916:	3b01      	subs	r3, #1
 8001918:	73bb      	strb	r3, [r7, #14]
 800191a:	7bbb      	ldrb	r3, [r7, #14]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1f1      	bne.n	8001904 <SD_SendCmd+0x82>

	return res;
 8001920:	7b7b      	ldrb	r3, [r7, #13]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800192c:	b590      	push	{r4, r7, lr}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <SD_disk_initialize+0x14>
 800193c:	2301      	movs	r3, #1
 800193e:	e0d1      	b.n	8001ae4 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001940:	4b6a      	ldr	r3, [pc, #424]	@ (8001aec <SD_disk_initialize+0x1c0>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <SD_disk_initialize+0x2a>
 800194e:	4b67      	ldr	r3, [pc, #412]	@ (8001aec <SD_disk_initialize+0x1c0>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	b2db      	uxtb	r3, r3
 8001954:	e0c6      	b.n	8001ae4 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001956:	f7ff fecb 	bl	80016f0 <SD_PowerOn>

	/* slave select */
	SELECT();
 800195a:	f7ff fe35 	bl	80015c8 <SELECT>

	/* check disk type */
	type = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001962:	2100      	movs	r1, #0
 8001964:	2040      	movs	r0, #64	@ 0x40
 8001966:	f7ff ff8c 	bl	8001882 <SD_SendCmd>
 800196a:	4603      	mov	r3, r0
 800196c:	2b01      	cmp	r3, #1
 800196e:	f040 80a1 	bne.w	8001ab4 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001972:	4b5f      	ldr	r3, [pc, #380]	@ (8001af0 <SD_disk_initialize+0x1c4>)
 8001974:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001978:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800197a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800197e:	2048      	movs	r0, #72	@ 0x48
 8001980:	f7ff ff7f 	bl	8001882 <SD_SendCmd>
 8001984:	4603      	mov	r3, r0
 8001986:	2b01      	cmp	r3, #1
 8001988:	d155      	bne.n	8001a36 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800198a:	2300      	movs	r3, #0
 800198c:	73fb      	strb	r3, [r7, #15]
 800198e:	e00c      	b.n	80019aa <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001990:	7bfc      	ldrb	r4, [r7, #15]
 8001992:	f7ff fe69 	bl	8001668 <SPI_RxByte>
 8001996:	4603      	mov	r3, r0
 8001998:	461a      	mov	r2, r3
 800199a:	f104 0310 	add.w	r3, r4, #16
 800199e:	443b      	add	r3, r7
 80019a0:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	3301      	adds	r3, #1
 80019a8:	73fb      	strb	r3, [r7, #15]
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d9ef      	bls.n	8001990 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80019b0:	7abb      	ldrb	r3, [r7, #10]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d17e      	bne.n	8001ab4 <SD_disk_initialize+0x188>
 80019b6:	7afb      	ldrb	r3, [r7, #11]
 80019b8:	2baa      	cmp	r3, #170	@ 0xaa
 80019ba:	d17b      	bne.n	8001ab4 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80019bc:	2100      	movs	r1, #0
 80019be:	2077      	movs	r0, #119	@ 0x77
 80019c0:	f7ff ff5f 	bl	8001882 <SD_SendCmd>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d807      	bhi.n	80019da <SD_disk_initialize+0xae>
 80019ca:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80019ce:	2069      	movs	r0, #105	@ 0x69
 80019d0:	f7ff ff57 	bl	8001882 <SD_SendCmd>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d004      	beq.n	80019e4 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80019da:	4b45      	ldr	r3, [pc, #276]	@ (8001af0 <SD_disk_initialize+0x1c4>)
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1ec      	bne.n	80019bc <SD_disk_initialize+0x90>
 80019e2:	e000      	b.n	80019e6 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80019e4:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80019e6:	4b42      	ldr	r3, [pc, #264]	@ (8001af0 <SD_disk_initialize+0x1c4>)
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d062      	beq.n	8001ab4 <SD_disk_initialize+0x188>
 80019ee:	2100      	movs	r1, #0
 80019f0:	207a      	movs	r0, #122	@ 0x7a
 80019f2:	f7ff ff46 	bl	8001882 <SD_SendCmd>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d15b      	bne.n	8001ab4 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80019fc:	2300      	movs	r3, #0
 80019fe:	73fb      	strb	r3, [r7, #15]
 8001a00:	e00c      	b.n	8001a1c <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001a02:	7bfc      	ldrb	r4, [r7, #15]
 8001a04:	f7ff fe30 	bl	8001668 <SPI_RxByte>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	f104 0310 	add.w	r3, r4, #16
 8001a10:	443b      	add	r3, r7
 8001a12:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d9ef      	bls.n	8001a02 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001a22:	7a3b      	ldrb	r3, [r7, #8]
 8001a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <SD_disk_initialize+0x104>
 8001a2c:	230c      	movs	r3, #12
 8001a2e:	e000      	b.n	8001a32 <SD_disk_initialize+0x106>
 8001a30:	2304      	movs	r3, #4
 8001a32:	73bb      	strb	r3, [r7, #14]
 8001a34:	e03e      	b.n	8001ab4 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001a36:	2100      	movs	r1, #0
 8001a38:	2077      	movs	r0, #119	@ 0x77
 8001a3a:	f7ff ff22 	bl	8001882 <SD_SendCmd>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d808      	bhi.n	8001a56 <SD_disk_initialize+0x12a>
 8001a44:	2100      	movs	r1, #0
 8001a46:	2069      	movs	r0, #105	@ 0x69
 8001a48:	f7ff ff1b 	bl	8001882 <SD_SendCmd>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d801      	bhi.n	8001a56 <SD_disk_initialize+0x12a>
 8001a52:	2302      	movs	r3, #2
 8001a54:	e000      	b.n	8001a58 <SD_disk_initialize+0x12c>
 8001a56:	2301      	movs	r3, #1
 8001a58:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001a5a:	7bbb      	ldrb	r3, [r7, #14]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d10e      	bne.n	8001a7e <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001a60:	2100      	movs	r1, #0
 8001a62:	2077      	movs	r0, #119	@ 0x77
 8001a64:	f7ff ff0d 	bl	8001882 <SD_SendCmd>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d80e      	bhi.n	8001a8c <SD_disk_initialize+0x160>
 8001a6e:	2100      	movs	r1, #0
 8001a70:	2069      	movs	r0, #105	@ 0x69
 8001a72:	f7ff ff06 	bl	8001882 <SD_SendCmd>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d107      	bne.n	8001a8c <SD_disk_initialize+0x160>
 8001a7c:	e00c      	b.n	8001a98 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2041      	movs	r0, #65	@ 0x41
 8001a82:	f7ff fefe 	bl	8001882 <SD_SendCmd>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d004      	beq.n	8001a96 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001a8c:	4b18      	ldr	r3, [pc, #96]	@ (8001af0 <SD_disk_initialize+0x1c4>)
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1e2      	bne.n	8001a5a <SD_disk_initialize+0x12e>
 8001a94:	e000      	b.n	8001a98 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001a96:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001a98:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <SD_disk_initialize+0x1c4>)
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d007      	beq.n	8001ab0 <SD_disk_initialize+0x184>
 8001aa0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001aa4:	2050      	movs	r0, #80	@ 0x50
 8001aa6:	f7ff feec 	bl	8001882 <SD_SendCmd>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <SD_disk_initialize+0x188>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001ab4:	4a0f      	ldr	r2, [pc, #60]	@ (8001af4 <SD_disk_initialize+0x1c8>)
 8001ab6:	7bbb      	ldrb	r3, [r7, #14]
 8001ab8:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001aba:	f7ff fd93 	bl	80015e4 <DESELECT>
	SPI_RxByte();
 8001abe:	f7ff fdd3 	bl	8001668 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001ac2:	7bbb      	ldrb	r3, [r7, #14]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d008      	beq.n	8001ada <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001ac8:	4b08      	ldr	r3, [pc, #32]	@ (8001aec <SD_disk_initialize+0x1c0>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	f023 0301 	bic.w	r3, r3, #1
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <SD_disk_initialize+0x1c0>)
 8001ad6:	701a      	strb	r2, [r3, #0]
 8001ad8:	e001      	b.n	8001ade <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001ada:	f7ff fe4b 	bl	8001774 <SD_PowerOff>
	}

	return Stat;
 8001ade:	4b03      	ldr	r3, [pc, #12]	@ (8001aec <SD_disk_initialize+0x1c0>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	b2db      	uxtb	r3, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd90      	pop	{r4, r7, pc}
 8001aec:	200000c0 	.word	0x200000c0
 8001af0:	20000368 	.word	0x20000368
 8001af4:	2000036c 	.word	0x2000036c

08001af8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <SD_disk_status+0x14>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e002      	b.n	8001b12 <SD_disk_status+0x1a>
	return Stat;
 8001b0c:	4b03      	ldr	r3, [pc, #12]	@ (8001b1c <SD_disk_status+0x24>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	b2db      	uxtb	r3, r3
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	200000c0 	.word	0x200000c0

08001b20 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	607a      	str	r2, [r7, #4]
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d102      	bne.n	8001b3c <SD_disk_read+0x1c>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <SD_disk_read+0x20>
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	e051      	b.n	8001be4 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001b40:	4b2a      	ldr	r3, [pc, #168]	@ (8001bec <SD_disk_read+0xcc>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <SD_disk_read+0x32>
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e048      	b.n	8001be4 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001b52:	4b27      	ldr	r3, [pc, #156]	@ (8001bf0 <SD_disk_read+0xd0>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d102      	bne.n	8001b64 <SD_disk_read+0x44>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	025b      	lsls	r3, r3, #9
 8001b62:	607b      	str	r3, [r7, #4]

	SELECT();
 8001b64:	f7ff fd30 	bl	80015c8 <SELECT>

	if (count == 1)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d111      	bne.n	8001b92 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	2051      	movs	r0, #81	@ 0x51
 8001b72:	f7ff fe86 	bl	8001882 <SD_SendCmd>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d129      	bne.n	8001bd0 <SD_disk_read+0xb0>
 8001b7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b80:	68b8      	ldr	r0, [r7, #8]
 8001b82:	f7ff fe0d 	bl	80017a0 <SD_RxDataBlock>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d021      	beq.n	8001bd0 <SD_disk_read+0xb0>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	e01e      	b.n	8001bd0 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	2052      	movs	r0, #82	@ 0x52
 8001b96:	f7ff fe74 	bl	8001882 <SD_SendCmd>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d117      	bne.n	8001bd0 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001ba0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ba4:	68b8      	ldr	r0, [r7, #8]
 8001ba6:	f7ff fdfb 	bl	80017a0 <SD_RxDataBlock>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00a      	beq.n	8001bc6 <SD_disk_read+0xa6>
				buff += 512;
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001bb6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	603b      	str	r3, [r7, #0]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1ed      	bne.n	8001ba0 <SD_disk_read+0x80>
 8001bc4:	e000      	b.n	8001bc8 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001bc6:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001bc8:	2100      	movs	r1, #0
 8001bca:	204c      	movs	r0, #76	@ 0x4c
 8001bcc:	f7ff fe59 	bl	8001882 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001bd0:	f7ff fd08 	bl	80015e4 <DESELECT>
	SPI_RxByte();
 8001bd4:	f7ff fd48 	bl	8001668 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	bf14      	ite	ne
 8001bde:	2301      	movne	r3, #1
 8001be0:	2300      	moveq	r3, #0
 8001be2:	b2db      	uxtb	r3, r3
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	200000c0 	.word	0x200000c0
 8001bf0:	2000036c 	.word	0x2000036c

08001bf4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	4603      	mov	r3, r0
 8001c02:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d102      	bne.n	8001c10 <SD_disk_write+0x1c>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <SD_disk_write+0x20>
 8001c10:	2304      	movs	r3, #4
 8001c12:	e06b      	b.n	8001cec <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001c14:	4b37      	ldr	r3, [pc, #220]	@ (8001cf4 <SD_disk_write+0x100>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <SD_disk_write+0x32>
 8001c22:	2303      	movs	r3, #3
 8001c24:	e062      	b.n	8001cec <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001c26:	4b33      	ldr	r3, [pc, #204]	@ (8001cf4 <SD_disk_write+0x100>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <SD_disk_write+0x44>
 8001c34:	2302      	movs	r3, #2
 8001c36:	e059      	b.n	8001cec <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001c38:	4b2f      	ldr	r3, [pc, #188]	@ (8001cf8 <SD_disk_write+0x104>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d102      	bne.n	8001c4a <SD_disk_write+0x56>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	025b      	lsls	r3, r3, #9
 8001c48:	607b      	str	r3, [r7, #4]

	SELECT();
 8001c4a:	f7ff fcbd 	bl	80015c8 <SELECT>

	if (count == 1)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d110      	bne.n	8001c76 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	2058      	movs	r0, #88	@ 0x58
 8001c58:	f7ff fe13 	bl	8001882 <SD_SendCmd>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d13a      	bne.n	8001cd8 <SD_disk_write+0xe4>
 8001c62:	21fe      	movs	r1, #254	@ 0xfe
 8001c64:	68b8      	ldr	r0, [r7, #8]
 8001c66:	f7ff fdc9 	bl	80017fc <SD_TxDataBlock>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d033      	beq.n	8001cd8 <SD_disk_write+0xe4>
			count = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	e030      	b.n	8001cd8 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001c76:	4b20      	ldr	r3, [pc, #128]	@ (8001cf8 <SD_disk_write+0x104>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d007      	beq.n	8001c92 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001c82:	2100      	movs	r1, #0
 8001c84:	2077      	movs	r0, #119	@ 0x77
 8001c86:	f7ff fdfc 	bl	8001882 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001c8a:	6839      	ldr	r1, [r7, #0]
 8001c8c:	2057      	movs	r0, #87	@ 0x57
 8001c8e:	f7ff fdf8 	bl	8001882 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	2059      	movs	r0, #89	@ 0x59
 8001c96:	f7ff fdf4 	bl	8001882 <SD_SendCmd>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d11b      	bne.n	8001cd8 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001ca0:	21fc      	movs	r1, #252	@ 0xfc
 8001ca2:	68b8      	ldr	r0, [r7, #8]
 8001ca4:	f7ff fdaa 	bl	80017fc <SD_TxDataBlock>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00a      	beq.n	8001cc4 <SD_disk_write+0xd0>
				buff += 512;
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001cb4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	603b      	str	r3, [r7, #0]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1ee      	bne.n	8001ca0 <SD_disk_write+0xac>
 8001cc2:	e000      	b.n	8001cc6 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001cc4:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001cc6:	21fd      	movs	r1, #253	@ 0xfd
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f7ff fd97 	bl	80017fc <SD_TxDataBlock>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <SD_disk_write+0xe4>
			{
				count = 1;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001cd8:	f7ff fc84 	bl	80015e4 <DESELECT>
	SPI_RxByte();
 8001cdc:	f7ff fcc4 	bl	8001668 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	bf14      	ite	ne
 8001ce6:	2301      	movne	r3, #1
 8001ce8:	2300      	moveq	r3, #0
 8001cea:	b2db      	uxtb	r3, r3
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	200000c0 	.word	0x200000c0
 8001cf8:	2000036c 	.word	0x2000036c

08001cfc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001cfc:	b590      	push	{r4, r7, lr}
 8001cfe:	b08b      	sub	sp, #44	@ 0x2c
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	603a      	str	r2, [r7, #0]
 8001d06:	71fb      	strb	r3, [r7, #7]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <SD_disk_ioctl+0x1e>
 8001d16:	2304      	movs	r3, #4
 8001d18:	e113      	b.n	8001f42 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8001d20:	79bb      	ldrb	r3, [r7, #6]
 8001d22:	2b05      	cmp	r3, #5
 8001d24:	d124      	bne.n	8001d70 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001d26:	6a3b      	ldr	r3, [r7, #32]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d012      	beq.n	8001d54 <SD_disk_ioctl+0x58>
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	dc1a      	bgt.n	8001d68 <SD_disk_ioctl+0x6c>
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d002      	beq.n	8001d3c <SD_disk_ioctl+0x40>
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d006      	beq.n	8001d48 <SD_disk_ioctl+0x4c>
 8001d3a:	e015      	b.n	8001d68 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001d3c:	f7ff fd1a 	bl	8001774 <SD_PowerOff>
			res = RES_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001d46:	e0fa      	b.n	8001f3e <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8001d48:	f7ff fcd2 	bl	80016f0 <SD_PowerOn>
			res = RES_OK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001d52:	e0f4      	b.n	8001f3e <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	1c5c      	adds	r4, r3, #1
 8001d58:	f7ff fd18 	bl	800178c <SD_CheckPower>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001d60:	2300      	movs	r3, #0
 8001d62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001d66:	e0ea      	b.n	8001f3e <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8001d68:	2304      	movs	r3, #4
 8001d6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001d6e:	e0e6      	b.n	8001f3e <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001d70:	4b76      	ldr	r3, [pc, #472]	@ (8001f4c <SD_disk_ioctl+0x250>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <SD_disk_ioctl+0x86>
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e0df      	b.n	8001f42 <SD_disk_ioctl+0x246>

		SELECT();
 8001d82:	f7ff fc21 	bl	80015c8 <SELECT>

		switch (ctrl)
 8001d86:	79bb      	ldrb	r3, [r7, #6]
 8001d88:	2b0d      	cmp	r3, #13
 8001d8a:	f200 80c9 	bhi.w	8001f20 <SD_disk_ioctl+0x224>
 8001d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8001d94 <SD_disk_ioctl+0x98>)
 8001d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d94:	08001e8b 	.word	0x08001e8b
 8001d98:	08001dcd 	.word	0x08001dcd
 8001d9c:	08001e7b 	.word	0x08001e7b
 8001da0:	08001f21 	.word	0x08001f21
 8001da4:	08001f21 	.word	0x08001f21
 8001da8:	08001f21 	.word	0x08001f21
 8001dac:	08001f21 	.word	0x08001f21
 8001db0:	08001f21 	.word	0x08001f21
 8001db4:	08001f21 	.word	0x08001f21
 8001db8:	08001f21 	.word	0x08001f21
 8001dbc:	08001f21 	.word	0x08001f21
 8001dc0:	08001e9d 	.word	0x08001e9d
 8001dc4:	08001ec1 	.word	0x08001ec1
 8001dc8:	08001ee5 	.word	0x08001ee5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2049      	movs	r0, #73	@ 0x49
 8001dd0:	f7ff fd57 	bl	8001882 <SD_SendCmd>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f040 80a6 	bne.w	8001f28 <SD_disk_ioctl+0x22c>
 8001ddc:	f107 030c 	add.w	r3, r7, #12
 8001de0:	2110      	movs	r1, #16
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fcdc 	bl	80017a0 <SD_RxDataBlock>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 809c 	beq.w	8001f28 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8001df0:	7b3b      	ldrb	r3, [r7, #12]
 8001df2:	099b      	lsrs	r3, r3, #6
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d10d      	bne.n	8001e16 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001dfa:	7d7b      	ldrb	r3, [r7, #21]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	7d3b      	ldrb	r3, [r7, #20]
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	4413      	add	r3, r2
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	3301      	adds	r3, #1
 8001e0a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001e0c:	8bfb      	ldrh	r3, [r7, #30]
 8001e0e:	029a      	lsls	r2, r3, #10
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	e02d      	b.n	8001e72 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001e16:	7c7b      	ldrb	r3, [r7, #17]
 8001e18:	f003 030f 	and.w	r3, r3, #15
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	7dbb      	ldrb	r3, [r7, #22]
 8001e20:	09db      	lsrs	r3, r3, #7
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	4413      	add	r3, r2
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	7d7b      	ldrb	r3, [r7, #21]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	f003 0306 	and.w	r3, r3, #6
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	4413      	add	r3, r2
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	3302      	adds	r3, #2
 8001e3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001e3e:	7d3b      	ldrb	r3, [r7, #20]
 8001e40:	099b      	lsrs	r3, r3, #6
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	7cfb      	ldrb	r3, [r7, #19]
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	7cbb      	ldrb	r3, [r7, #18]
 8001e52:	029b      	lsls	r3, r3, #10
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	3301      	adds	r3, #1
 8001e62:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001e64:	8bfa      	ldrh	r2, [r7, #30]
 8001e66:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001e6a:	3b09      	subs	r3, #9
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8001e78:	e056      	b.n	8001f28 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e80:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001e88:	e055      	b.n	8001f36 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001e8a:	f7ff fc17 	bl	80016bc <SD_ReadyWait>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2bff      	cmp	r3, #255	@ 0xff
 8001e92:	d14b      	bne.n	8001f2c <SD_disk_ioctl+0x230>
 8001e94:	2300      	movs	r3, #0
 8001e96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001e9a:	e047      	b.n	8001f2c <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2049      	movs	r0, #73	@ 0x49
 8001ea0:	f7ff fcef 	bl	8001882 <SD_SendCmd>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d142      	bne.n	8001f30 <SD_disk_ioctl+0x234>
 8001eaa:	2110      	movs	r1, #16
 8001eac:	6a38      	ldr	r0, [r7, #32]
 8001eae:	f7ff fc77 	bl	80017a0 <SD_RxDataBlock>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d03b      	beq.n	8001f30 <SD_disk_ioctl+0x234>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001ebe:	e037      	b.n	8001f30 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	204a      	movs	r0, #74	@ 0x4a
 8001ec4:	f7ff fcdd 	bl	8001882 <SD_SendCmd>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d132      	bne.n	8001f34 <SD_disk_ioctl+0x238>
 8001ece:	2110      	movs	r1, #16
 8001ed0:	6a38      	ldr	r0, [r7, #32]
 8001ed2:	f7ff fc65 	bl	80017a0 <SD_RxDataBlock>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d02b      	beq.n	8001f34 <SD_disk_ioctl+0x238>
 8001edc:	2300      	movs	r3, #0
 8001ede:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001ee2:	e027      	b.n	8001f34 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	207a      	movs	r0, #122	@ 0x7a
 8001ee8:	f7ff fccb 	bl	8001882 <SD_SendCmd>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d116      	bne.n	8001f20 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001ef8:	e00b      	b.n	8001f12 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8001efa:	6a3c      	ldr	r4, [r7, #32]
 8001efc:	1c63      	adds	r3, r4, #1
 8001efe:	623b      	str	r3, [r7, #32]
 8001f00:	f7ff fbb2 	bl	8001668 <SPI_RxByte>
 8001f04:	4603      	mov	r3, r0
 8001f06:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001f08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001f12:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	d9ef      	bls.n	8001efa <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8001f20:	2304      	movs	r3, #4
 8001f22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001f26:	e006      	b.n	8001f36 <SD_disk_ioctl+0x23a>
			break;
 8001f28:	bf00      	nop
 8001f2a:	e004      	b.n	8001f36 <SD_disk_ioctl+0x23a>
			break;
 8001f2c:	bf00      	nop
 8001f2e:	e002      	b.n	8001f36 <SD_disk_ioctl+0x23a>
			break;
 8001f30:	bf00      	nop
 8001f32:	e000      	b.n	8001f36 <SD_disk_ioctl+0x23a>
			break;
 8001f34:	bf00      	nop
		}

		DESELECT();
 8001f36:	f7ff fb55 	bl	80015e4 <DESELECT>
		SPI_RxByte();
 8001f3a:	f7ff fb95 	bl	8001668 <SPI_RxByte>
	}

	return res;
 8001f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	372c      	adds	r7, #44	@ 0x2c
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd90      	pop	{r4, r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200000c0 	.word	0x200000c0

08001f50 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4a06      	ldr	r2, [pc, #24]	@ (8001f78 <vApplicationGetIdleTaskMemory+0x28>)
 8001f60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	4a05      	ldr	r2, [pc, #20]	@ (8001f7c <vApplicationGetIdleTaskMemory+0x2c>)
 8001f66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2280      	movs	r2, #128	@ 0x80
 8001f6c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001f6e:	bf00      	nop
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr
 8001f78:	20000390 	.word	0x20000390
 8001f7c:	20000440 	.word	0x20000440

08001f80 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001f80:	b5b0      	push	{r4, r5, r7, lr}
 8001f82:	b0a4      	sub	sp, #144	@ 0x90
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  drive_cmd_count = 0;
 8001f86:	4b38      	ldr	r3, [pc, #224]	@ (8002068 <MX_FREERTOS_Init+0xe8>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  CAN_MSG_memory_pool = osPoolCreate(osPool(CAN_MSG_memory_pool));                 // create memory pool
 8001f8c:	4837      	ldr	r0, [pc, #220]	@ (800206c <MX_FREERTOS_Init+0xec>)
 8001f8e:	f007 fea1 	bl	8009cd4 <osPoolCreate>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4a36      	ldr	r2, [pc, #216]	@ (8002070 <MX_FREERTOS_Init+0xf0>)
 8001f96:	6013      	str	r3, [r2, #0]
  CAN_MSG_Rx_Queue = osMessageCreate(osMessageQ(CAN_MSG_Rx_Queue), NULL);  // create msg queue
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4836      	ldr	r0, [pc, #216]	@ (8002074 <MX_FREERTOS_Init+0xf4>)
 8001f9c:	f007 ff99 	bl	8009ed2 <osMessageCreate>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	4a35      	ldr	r2, [pc, #212]	@ (8002078 <MX_FREERTOS_Init+0xf8>)
 8001fa4:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of StartDefaultTask */
  osThreadDef(StartDefaultTask, startDefaultTask, osPriorityLow, 0, 128);
 8001fa6:	4b35      	ldr	r3, [pc, #212]	@ (800207c <MX_FREERTOS_Init+0xfc>)
 8001fa8:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8001fac:	461d      	mov	r5, r3
 8001fae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fb2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StartDefaultTaskHandle = osThreadCreate(osThread(StartDefaultTask), NULL);
 8001fba:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f007 fd9b 	bl	8009afc <osThreadCreate>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4a2d      	ldr	r2, [pc, #180]	@ (8002080 <MX_FREERTOS_Init+0x100>)
 8001fca:	6013      	str	r3, [r2, #0]

  /* definition and creation of readCANTask */
  osThreadDef(readCANTask, read_CAN_task, osPriorityNormal, 0, 512);
 8001fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8002084 <MX_FREERTOS_Init+0x104>)
 8001fce:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8001fd2:	461d      	mov	r5, r3
 8001fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fd8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fdc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readCANTaskHandle = osThreadCreate(osThread(readCANTask), NULL);
 8001fe0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f007 fd88 	bl	8009afc <osThreadCreate>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4a26      	ldr	r2, [pc, #152]	@ (8002088 <MX_FREERTOS_Init+0x108>)
 8001ff0:	6013      	str	r3, [r2, #0]

  /* definition and creation of readIMUTask */
  osThreadDef(readIMUTask, read_IMU_task, osPriorityNormal, 0, 512);
 8001ff2:	4b26      	ldr	r3, [pc, #152]	@ (800208c <MX_FREERTOS_Init+0x10c>)
 8001ff4:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001ff8:	461d      	mov	r5, r3
 8001ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ffc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ffe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002002:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readIMUTaskHandle = osThreadCreate(osThread(readIMUTask), NULL);
 8002006:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800200a:	2100      	movs	r1, #0
 800200c:	4618      	mov	r0, r3
 800200e:	f007 fd75 	bl	8009afc <osThreadCreate>
 8002012:	4603      	mov	r3, r0
 8002014:	4a1e      	ldr	r2, [pc, #120]	@ (8002090 <MX_FREERTOS_Init+0x110>)
 8002016:	6013      	str	r3, [r2, #0]

  /* definition and creation of readGPSTask */
  osThreadDef(readGPSTask, read_GPS_task, osPriorityNormal, 0, 1536);
 8002018:	4b1e      	ldr	r3, [pc, #120]	@ (8002094 <MX_FREERTOS_Init+0x114>)
 800201a:	f107 0420 	add.w	r4, r7, #32
 800201e:	461d      	mov	r5, r3
 8002020:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002024:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002028:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readGPSTaskHandle = osThreadCreate(osThread(readGPSTask), NULL);
 800202c:	f107 0320 	add.w	r3, r7, #32
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f007 fd62 	bl	8009afc <osThreadCreate>
 8002038:	4603      	mov	r3, r0
 800203a:	4a17      	ldr	r2, [pc, #92]	@ (8002098 <MX_FREERTOS_Init+0x118>)
 800203c:	6013      	str	r3, [r2, #0]

  /* definition and creation of transmitRTCTask */
  osThreadDef(transmitRTCTask, transmit_RTC_task, osPriorityNormal, 0, 512);
 800203e:	4b17      	ldr	r3, [pc, #92]	@ (800209c <MX_FREERTOS_Init+0x11c>)
 8002040:	1d3c      	adds	r4, r7, #4
 8002042:	461d      	mov	r5, r3
 8002044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002048:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800204c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  transmitRTCTaskHandle = osThreadCreate(osThread(transmitRTCTask), NULL);
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f007 fd51 	bl	8009afc <osThreadCreate>
 800205a:	4603      	mov	r3, r0
 800205c:	4a10      	ldr	r2, [pc, #64]	@ (80020a0 <MX_FREERTOS_Init+0x120>)
 800205e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002060:	bf00      	nop
 8002062:	3790      	adds	r7, #144	@ 0x90
 8002064:	46bd      	mov	sp, r7
 8002066:	bdb0      	pop	{r4, r5, r7, pc}
 8002068:	20000370 	.word	0x20000370
 800206c:	080121a0 	.word	0x080121a0
 8002070:	20000374 	.word	0x20000374
 8002074:	080121ac 	.word	0x080121ac
 8002078:	20000378 	.word	0x20000378
 800207c:	08011f7c 	.word	0x08011f7c
 8002080:	2000037c 	.word	0x2000037c
 8002084:	08011fa4 	.word	0x08011fa4
 8002088:	20000380 	.word	0x20000380
 800208c:	08011fcc 	.word	0x08011fcc
 8002090:	20000384 	.word	0x20000384
 8002094:	08011ff4 	.word	0x08011ff4
 8002098:	20000388 	.word	0x20000388
 800209c:	08012020 	.word	0x08012020
 80020a0:	2000038c 	.word	0x2000038c

080020a4 <startDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startDefaultTask */
void startDefaultTask(void const * argument)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startDefaultTask */
  Can_Init();
 80020ac:	f7ff f9bc 	bl	8001428 <Can_Init>
  /* Infinite loop */
  for(;;)
  {
    //printf("startDefaultTask()\n\r");
//    HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
    osDelay(DEFAULT_TASK_DELAY);
 80020b0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80020b4:	f007 fd6e 	bl	8009b94 <osDelay>
 80020b8:	e7fa      	b.n	80020b0 <startDefaultTask+0xc>
	...

080020bc <read_CAN_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_CAN_task */
void read_CAN_task(void const * argument)
{
 80020bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020be:	b093      	sub	sp, #76	@ 0x4c
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6178      	str	r0, [r7, #20]

  /* Infinite loop */
  while (1) {
    //printf("read_CAN_task()\n\r");
    /* Wait for thread flags to be set in the CAN Rx FIFO0 Interrupt Callback */
    osSignalWait(CAN_READY, osWaitForever);
 80020c4:	463b      	mov	r3, r7
 80020c6:	f04f 32ff 	mov.w	r2, #4294967295
 80020ca:	2101      	movs	r1, #1
 80020cc:	4618      	mov	r0, r3
 80020ce:	f007 fdb5 	bl	8009c3c <osSignalWait>
     * Once empty, wait for flag again.
     */

    /* Get CAN Message from Queue */
    while(1) {
      uint8_t radio_buffer[CAN_BUFFER_LEN] = {0};
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	f107 0320 	add.w	r3, r7, #32
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	60da      	str	r2, [r3, #12]
 80020e4:	611a      	str	r2, [r3, #16]
      evt = osMessageGet(CAN_MSG_Rx_Queue, osWaitForever);
 80020e6:	4b50      	ldr	r3, [pc, #320]	@ (8002228 <read_CAN_task+0x16c>)
 80020e8:	6819      	ldr	r1, [r3, #0]
 80020ea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020ee:	f04f 32ff 	mov.w	r2, #4294967295
 80020f2:	4618      	mov	r0, r3
 80020f4:	f007 ff56 	bl	8009fa4 <osMessageGet>
      if (evt.status == osEventMessage) {
 80020f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020fa:	2b10      	cmp	r3, #16
 80020fc:	d1e2      	bne.n	80020c4 <read_CAN_task+0x8>
	  HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 80020fe:	2102      	movs	r1, #2
 8002100:	484a      	ldr	r0, [pc, #296]	@ (800222c <read_CAN_task+0x170>)
 8002102:	f003 fb4c 	bl	800579e <HAL_GPIO_TogglePin>
	  rx_CAN_msg = evt.value.p; // Get pointer from the queue union
 8002106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002108:	643b      	str	r3, [r7, #64]	@ 0x40
	 // 22: '\r'             // TODO: Do we need this? maybe just use \0 instead?
	 // 23: '\n'

	 /* TIMESTAMP */

	 for (uint8_t i = 0; i < 8; i++) {
 800210a:	2300      	movs	r3, #0
 800210c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002110:	e021      	b.n	8002156 <read_CAN_task+0x9a>
//	   radio_buffer[7 - i] = GET_BYTE_FROM_WORD(i, current_timestamp.double_as_int);
	   radio_buffer[7 - i] = (char) GET_BYTE_FROM_WORD(i, rx_CAN_msg->timestamp.double_as_int);
 8002112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002114:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002118:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800211c:	00c9      	lsls	r1, r1, #3
 800211e:	f1c1 0620 	rsb	r6, r1, #32
 8002122:	f1a1 0020 	sub.w	r0, r1, #32
 8002126:	fa22 f401 	lsr.w	r4, r2, r1
 800212a:	fa03 f606 	lsl.w	r6, r3, r6
 800212e:	4334      	orrs	r4, r6
 8002130:	fa23 f000 	lsr.w	r0, r3, r0
 8002134:	4304      	orrs	r4, r0
 8002136:	fa23 f501 	lsr.w	r5, r3, r1
 800213a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800213e:	f1c3 0307 	rsb	r3, r3, #7
 8002142:	b2e2      	uxtb	r2, r4
 8002144:	3348      	adds	r3, #72	@ 0x48
 8002146:	443b      	add	r3, r7
 8002148:	f803 2c2c 	strb.w	r2, [r3, #-44]
	 for (uint8_t i = 0; i < 8; i++) {
 800214c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002150:	3301      	adds	r3, #1
 8002152:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002156:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800215a:	2b07      	cmp	r3, #7
 800215c:	d9d9      	bls.n	8002112 <read_CAN_task+0x56>
	 }

	 /* CAN MESSAGE IDENTIFIER */
	 radio_buffer[8] = '#';
 800215e:	2323      	movs	r3, #35	@ 0x23
 8002160:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	 /* CAN ID */ // TODO: Check if this is correct. Are the 0 bytes in the STD in the correct spot?
	 if (rx_CAN_msg->header.IDE == CAN_ID_STD)
 8002164:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10b      	bne.n	8002184 <read_CAN_task+0xc8>
	 {
	   radio_buffer[12]  = 0xFF & (rx_CAN_msg->header.StdId);
 800216c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	   radio_buffer[11] = 0xFF & (rx_CAN_msg->header.StdId >> 8);
 8002176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	0a1b      	lsrs	r3, r3, #8
 800217c:	b2db      	uxtb	r3, r3
 800217e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002182:	e01a      	b.n	80021ba <read_CAN_task+0xfe>
	 }
	 else if (rx_CAN_msg->header.IDE == CAN_ID_EXT)
 8002184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2b04      	cmp	r3, #4
 800218a:	d116      	bne.n	80021ba <read_CAN_task+0xfe>
	 {
	   radio_buffer[12]  = 0xFF & (rx_CAN_msg->header.ExtId);
 800218c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	   radio_buffer[11] = 0xFF & (rx_CAN_msg->header.ExtId >> 8);
 8002196:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	0a1b      	lsrs	r3, r3, #8
 800219c:	b2db      	uxtb	r3, r3
 800219e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	   radio_buffer[10] = 0xFF & (rx_CAN_msg->header.ExtId >> 16);
 80021a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	0c1b      	lsrs	r3, r3, #16
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	   radio_buffer[9] = 0xFF & (rx_CAN_msg->header.ExtId >> 24);
 80021ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	0e1b      	lsrs	r3, r3, #24
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	 }

	 /* CAN DATA */
	 for (uint8_t i = 0; i < 8; i++) {
 80021ba:	2300      	movs	r3, #0
 80021bc:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80021c0:	e010      	b.n	80021e4 <read_CAN_task+0x128>
	   radio_buffer[13 + i] = rx_CAN_msg->data[i];
 80021c2:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80021c6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80021ca:	330d      	adds	r3, #13
 80021cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80021ce:	440a      	add	r2, r1
 80021d0:	7f12      	ldrb	r2, [r2, #28]
 80021d2:	3348      	adds	r3, #72	@ 0x48
 80021d4:	443b      	add	r3, r7
 80021d6:	f803 2c2c 	strb.w	r2, [r3, #-44]
	 for (uint8_t i = 0; i < 8; i++) {
 80021da:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80021de:	3301      	adds	r3, #1
 80021e0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80021e4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80021e8:	2b07      	cmp	r3, #7
 80021ea:	d9ea      	bls.n	80021c2 <read_CAN_task+0x106>
	 }

	 /* CAN DATA LENGTH */
	 radio_buffer[21] = rx_CAN_msg->header.DLC & 0xF;
 80021ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

	 /* CARRIAGE RETURN */
	 radio_buffer[CAN_BUFFER_LEN - 2] = '\r';
 80021fc:	230d      	movs	r3, #13
 80021fe:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

	 /* NEW LINE */
	 radio_buffer[CAN_BUFFER_LEN - 1] = '\n';
 8002202:	230a      	movs	r3, #10
 8002204:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

//	 sd_append_as_hexnums(logfile, radio_buffer, CAN_BUFFER_LEN);

	 /* Transmit over Radio */
	 HAL_UART_Transmit(&huart1, radio_buffer, sizeof(radio_buffer), 1000);
 8002208:	f107 011c 	add.w	r1, r7, #28
 800220c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002210:	2218      	movs	r2, #24
 8002212:	4807      	ldr	r0, [pc, #28]	@ (8002230 <read_CAN_task+0x174>)
 8002214:	f007 f9fe 	bl	8009614 <HAL_UART_Transmit>
//	   /* Convert radio_buffer to hex_string so it can be logged. MUST NOT USE strlen */
//	   sd_append_as_hexnums(logfile, radio_buffer, CAN_BUFFER_LEN);
//	 }

	/* Free the memory allocated for this message */
	osPoolFree(CAN_MSG_memory_pool, rx_CAN_msg);
 8002218:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <read_CAN_task+0x178>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800221e:	4618      	mov	r0, r3
 8002220:	f007 fe17 	bl	8009e52 <osPoolFree>
    while(1) {
 8002224:	e755      	b.n	80020d2 <read_CAN_task+0x16>
 8002226:	bf00      	nop
 8002228:	20000378 	.word	0x20000378
 800222c:	40010800 	.word	0x40010800
 8002230:	20000858 	.word	0x20000858
 8002234:	20000374 	.word	0x20000374

08002238 <read_IMU_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_IMU_task */
void read_IMU_task(void const * argument)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b0a0      	sub	sp, #128	@ 0x80
 800223c:	af04      	add	r7, sp, #16
 800223e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  while(1)
  {
    //printf("read_IMU_task()\n\r");
    /* Initialize a IMU buffer */
    uint8_t imu_buffer[IMU_MESSAGE_LEN] = {0};
 8002240:	2300      	movs	r3, #0
 8002242:	647b      	str	r3, [r7, #68]	@ 0x44
 8002244:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	731a      	strb	r2, [r3, #12]
    union FloatBytes ax_x, ax_y, ax_z, gy_x, gy_y, gy_z;

    /* Read accelerator data */
    uint8_t accel_data[NUM_ACCEL_BYTES];

    HAL_I2C_Mem_Read(&hi2c2, IMU_DEVICE_ADDRESS, ACCEL_XOUT_H_REG, 1, accel_data, NUM_ACCEL_BYTES, 1000);
 8002252:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002256:	9302      	str	r3, [sp, #8]
 8002258:	2306      	movs	r3, #6
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	2301      	movs	r3, #1
 8002264:	223b      	movs	r2, #59	@ 0x3b
 8002266:	21d0      	movs	r1, #208	@ 0xd0
 8002268:	48c1      	ldr	r0, [pc, #772]	@ (8002570 <read_IMU_task+0x338>)
 800226a:	f003 ff5b 	bl	8006124 <HAL_I2C_Mem_Read>

    uint16_t Accel_X_RAW = (uint16_t)(accel_data[0] << 8 | accel_data[1]);
 800226e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002272:	021b      	lsls	r3, r3, #8
 8002274:	b21a      	sxth	r2, r3
 8002276:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800227a:	b21b      	sxth	r3, r3
 800227c:	4313      	orrs	r3, r2
 800227e:	b21b      	sxth	r3, r3
 8002280:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
    uint16_t Accel_Y_RAW = (uint16_t)(accel_data[2] << 8 | accel_data[3]);
 8002284:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002288:	021b      	lsls	r3, r3, #8
 800228a:	b21a      	sxth	r2, r3
 800228c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002290:	b21b      	sxth	r3, r3
 8002292:	4313      	orrs	r3, r2
 8002294:	b21b      	sxth	r3, r3
 8002296:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
    uint16_t Accel_Z_RAW = (uint16_t)(accel_data[4] << 8 | accel_data[5]);
 800229a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800229e:	021b      	lsls	r3, r3, #8
 80022a0:	b21a      	sxth	r2, r3
 80022a2:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80022a6:	b21b      	sxth	r3, r3
 80022a8:	4313      	orrs	r3, r2
 80022aa:	b21b      	sxth	r3, r3
 80022ac:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    printf("Raw Accel X: %d\n\r", Accel_X_RAW);
 80022b0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80022b4:	4619      	mov	r1, r3
 80022b6:	48af      	ldr	r0, [pc, #700]	@ (8002574 <read_IMU_task+0x33c>)
 80022b8:	f00b fe5e 	bl	800df78 <iprintf>
    /*
     * Convert the RAW values into acceleration in 'g' we have to divide according to the Full scale value
     * set in FS_SEL. Have configured FS_SEL = 0. So I am dividing by 16384.0
     * For more details check ACCEL_CONFIG Register.
     */
    ax_x.float_value = Accel_X_RAW / 16384.0;  // get the float g
 80022bc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fe f919 	bl	80004f8 <__aeabi_i2d>
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	4bab      	ldr	r3, [pc, #684]	@ (8002578 <read_IMU_task+0x340>)
 80022cc:	f7fe faa8 	bl	8000820 <__aeabi_ddiv>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4610      	mov	r0, r2
 80022d6:	4619      	mov	r1, r3
 80022d8:	f7fe fc70 	bl	8000bbc <__aeabi_d2f>
 80022dc:	4603      	mov	r3, r0
 80022de:	643b      	str	r3, [r7, #64]	@ 0x40
    ax_y.float_value = Accel_Y_RAW / 16384.0;
 80022e0:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe f907 	bl	80004f8 <__aeabi_i2d>
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	4ba2      	ldr	r3, [pc, #648]	@ (8002578 <read_IMU_task+0x340>)
 80022f0:	f7fe fa96 	bl	8000820 <__aeabi_ddiv>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4610      	mov	r0, r2
 80022fa:	4619      	mov	r1, r3
 80022fc:	f7fe fc5e 	bl	8000bbc <__aeabi_d2f>
 8002300:	4603      	mov	r3, r0
 8002302:	63fb      	str	r3, [r7, #60]	@ 0x3c
    ax_z.float_value = Accel_Z_RAW / 16384.0;
 8002304:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8002308:	4618      	mov	r0, r3
 800230a:	f7fe f8f5 	bl	80004f8 <__aeabi_i2d>
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	4b99      	ldr	r3, [pc, #612]	@ (8002578 <read_IMU_task+0x340>)
 8002314:	f7fe fa84 	bl	8000820 <__aeabi_ddiv>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4610      	mov	r0, r2
 800231e:	4619      	mov	r1, r3
 8002320:	f7fe fc4c 	bl	8000bbc <__aeabi_d2f>
 8002324:	4603      	mov	r3, r0
 8002326:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Read gyroscope data */
    uint8_t gyro_data[NUM_GYRO_BYTES];

    HAL_I2C_Mem_Read(&hi2c2, IMU_DEVICE_ADDRESS, GYRO_XOUT_H_REG, 1, gyro_data, NUM_GYRO_BYTES, 1000);
 8002328:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800232c:	9302      	str	r3, [sp, #8]
 800232e:	2306      	movs	r3, #6
 8002330:	9301      	str	r3, [sp, #4]
 8002332:	f107 031c 	add.w	r3, r7, #28
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	2301      	movs	r3, #1
 800233a:	2243      	movs	r2, #67	@ 0x43
 800233c:	21d0      	movs	r1, #208	@ 0xd0
 800233e:	488c      	ldr	r0, [pc, #560]	@ (8002570 <read_IMU_task+0x338>)
 8002340:	f003 fef0 	bl	8006124 <HAL_I2C_Mem_Read>

    uint16_t Gyro_X_RAW = (uint16_t)(gyro_data[0] << 8 | gyro_data[1]);
 8002344:	7f3b      	ldrb	r3, [r7, #28]
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	b21a      	sxth	r2, r3
 800234a:	7f7b      	ldrb	r3, [r7, #29]
 800234c:	b21b      	sxth	r3, r3
 800234e:	4313      	orrs	r3, r2
 8002350:	b21b      	sxth	r3, r3
 8002352:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    printf("Raw Gyro X: %d\n\r", Gyro_X_RAW);
 8002356:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800235a:	4619      	mov	r1, r3
 800235c:	4887      	ldr	r0, [pc, #540]	@ (800257c <read_IMU_task+0x344>)
 800235e:	f00b fe0b 	bl	800df78 <iprintf>
    uint16_t Gyro_Y_RAW = (uint16_t)(gyro_data[2] << 8 | gyro_data[3]);
 8002362:	7fbb      	ldrb	r3, [r7, #30]
 8002364:	021b      	lsls	r3, r3, #8
 8002366:	b21a      	sxth	r2, r3
 8002368:	7ffb      	ldrb	r3, [r7, #31]
 800236a:	b21b      	sxth	r3, r3
 800236c:	4313      	orrs	r3, r2
 800236e:	b21b      	sxth	r3, r3
 8002370:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    uint16_t Gyro_Z_RAW = (uint16_t)(gyro_data[4] << 8 | gyro_data[5]);
 8002374:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002378:	021b      	lsls	r3, r3, #8
 800237a:	b21a      	sxth	r2, r3
 800237c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002380:	b21b      	sxth	r3, r3
 8002382:	4313      	orrs	r3, r2
 8002384:	b21b      	sxth	r3, r3
 8002386:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
    /*
     * Convert the RAW values into dps (degrees/s) we have to divide according to the
     * Full scale value set in FS_SEL. Have configured FS_SEL = 0.
     * So I am dividing by 131.0. For more details check GYRO_CONFIG Register
     */
    gy_x.float_value = Gyro_X_RAW / 131.0;  // get the float g
 800238a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe f8b2 	bl	80004f8 <__aeabi_i2d>
 8002394:	a374      	add	r3, pc, #464	@ (adr r3, 8002568 <read_IMU_task+0x330>)
 8002396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239a:	f7fe fa41 	bl	8000820 <__aeabi_ddiv>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4610      	mov	r0, r2
 80023a4:	4619      	mov	r1, r3
 80023a6:	f7fe fc09 	bl	8000bbc <__aeabi_d2f>
 80023aa:	4603      	mov	r3, r0
 80023ac:	637b      	str	r3, [r7, #52]	@ 0x34
    gy_y.float_value = Gyro_Y_RAW / 131.0;
 80023ae:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe f8a0 	bl	80004f8 <__aeabi_i2d>
 80023b8:	a36b      	add	r3, pc, #428	@ (adr r3, 8002568 <read_IMU_task+0x330>)
 80023ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023be:	f7fe fa2f 	bl	8000820 <__aeabi_ddiv>
 80023c2:	4602      	mov	r2, r0
 80023c4:	460b      	mov	r3, r1
 80023c6:	4610      	mov	r0, r2
 80023c8:	4619      	mov	r1, r3
 80023ca:	f7fe fbf7 	bl	8000bbc <__aeabi_d2f>
 80023ce:	4603      	mov	r3, r0
 80023d0:	633b      	str	r3, [r7, #48]	@ 0x30
    gy_z.float_value = Gyro_Z_RAW / 131.0;
 80023d2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe f88e 	bl	80004f8 <__aeabi_i2d>
 80023dc:	a362      	add	r3, pc, #392	@ (adr r3, 8002568 <read_IMU_task+0x330>)
 80023de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e2:	f7fe fa1d 	bl	8000820 <__aeabi_ddiv>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	4610      	mov	r0, r2
 80023ec:	4619      	mov	r1, r3
 80023ee:	f7fe fbe5 	bl	8000bbc <__aeabi_d2f>
 80023f2:	4603      	mov	r3, r0
 80023f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Verify IMU is connected */
    // check_IMU_result(ax_x, ax_y, ax_z, gy_x, gy_y, gy_z); // TODO set flag

    /* Get current epoch Time Stamp */
    union DoubleBytes current_timestamp;
    current_timestamp.double_value = get_current_timestamp();
 80023f6:	f001 fd35 	bl	8003e64 <get_current_timestamp>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	e9c7 2304 	strd	r2, r3, [r7, #16]

    uint8_t data_send[8];

    /* Transmit IMU data */
    transmit_imu_data(current_timestamp.double_as_int, ax_x.bytes, 'A', 'X');
 8002402:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002406:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800240a:	2358      	movs	r3, #88	@ 0x58
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	2341      	movs	r3, #65	@ 0x41
 8002410:	f000 fce6 	bl	8002de0 <transmit_imu_data>
    transmit_imu_data(current_timestamp.double_as_int, ax_y.bytes, 'A', 'Y');
 8002414:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002418:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800241c:	2359      	movs	r3, #89	@ 0x59
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	2341      	movs	r3, #65	@ 0x41
 8002422:	f000 fcdd 	bl	8002de0 <transmit_imu_data>
    transmit_imu_data(current_timestamp.double_as_int, ax_z.bytes, 'A', 'Z');
 8002426:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800242a:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800242e:	235a      	movs	r3, #90	@ 0x5a
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	2341      	movs	r3, #65	@ 0x41
 8002434:	f000 fcd4 	bl	8002de0 <transmit_imu_data>
    transmit_imu_data(current_timestamp.double_as_int, gy_x.bytes, 'G', 'X');
 8002438:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800243c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002440:	2358      	movs	r3, #88	@ 0x58
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	2347      	movs	r3, #71	@ 0x47
 8002446:	f000 fccb 	bl	8002de0 <transmit_imu_data>
    transmit_imu_data(current_timestamp.double_as_int, gy_y.bytes, 'G', 'Y');
 800244a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800244e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8002452:	2359      	movs	r3, #89	@ 0x59
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	2347      	movs	r3, #71	@ 0x47
 8002458:	f000 fcc2 	bl	8002de0 <transmit_imu_data>
    transmit_imu_data(current_timestamp.double_as_int, gy_z.bytes, 'G', 'Z');
 800245c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002460:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002464:	235a      	movs	r3, #90	@ 0x5a
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	2347      	movs	r3, #71	@ 0x47
 800246a:	f000 fcb9 	bl	8002de0 <transmit_imu_data>

    // X-axis data
    for (int i = 0; i < 4; i++) {
 800246e:	2300      	movs	r3, #0
 8002470:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002472:	e01a      	b.n	80024aa <read_IMU_task+0x272>
	data_send[3-i] = ax_x.bytes[i];
 8002474:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002476:	f1c3 0303 	rsb	r3, r3, #3
 800247a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800247e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002480:	440a      	add	r2, r1
 8002482:	7812      	ldrb	r2, [r2, #0]
 8002484:	3370      	adds	r3, #112	@ 0x70
 8002486:	443b      	add	r3, r7
 8002488:	f803 2c68 	strb.w	r2, [r3, #-104]
	data_send[7-i] = gy_x.bytes[i];
 800248c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800248e:	f1c3 0307 	rsb	r3, r3, #7
 8002492:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8002496:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002498:	440a      	add	r2, r1
 800249a:	7812      	ldrb	r2, [r2, #0]
 800249c:	3370      	adds	r3, #112	@ 0x70
 800249e:	443b      	add	r3, r7
 80024a0:	f803 2c68 	strb.w	r2, [r3, #-104]
    for (int i = 0; i < 4; i++) {
 80024a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024a6:	3301      	adds	r3, #1
 80024a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80024aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	dde1      	ble.n	8002474 <read_IMU_task+0x23c>
    }
    HAL_CAN_AddTxMessage(&hcan, &IMU_x_axis_header, data_send, &can_mailbox);
 80024b0:	f107 0208 	add.w	r2, r7, #8
 80024b4:	4b32      	ldr	r3, [pc, #200]	@ (8002580 <read_IMU_task+0x348>)
 80024b6:	4933      	ldr	r1, [pc, #204]	@ (8002584 <read_IMU_task+0x34c>)
 80024b8:	4833      	ldr	r0, [pc, #204]	@ (8002588 <read_IMU_task+0x350>)
 80024ba:	f002 fa95 	bl	80049e8 <HAL_CAN_AddTxMessage>

    // Y-axis data
    for (int i = 0; i < 4; i++) {
 80024be:	2300      	movs	r3, #0
 80024c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80024c2:	e01a      	b.n	80024fa <read_IMU_task+0x2c2>
	data_send[3-i] = ax_y.bytes[i];
 80024c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024c6:	f1c3 0303 	rsb	r3, r3, #3
 80024ca:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80024ce:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80024d0:	440a      	add	r2, r1
 80024d2:	7812      	ldrb	r2, [r2, #0]
 80024d4:	3370      	adds	r3, #112	@ 0x70
 80024d6:	443b      	add	r3, r7
 80024d8:	f803 2c68 	strb.w	r2, [r3, #-104]
	data_send[7-i] = gy_y.bytes[i];
 80024dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024de:	f1c3 0307 	rsb	r3, r3, #7
 80024e2:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80024e6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80024e8:	440a      	add	r2, r1
 80024ea:	7812      	ldrb	r2, [r2, #0]
 80024ec:	3370      	adds	r3, #112	@ 0x70
 80024ee:	443b      	add	r3, r7
 80024f0:	f803 2c68 	strb.w	r2, [r3, #-104]
    for (int i = 0; i < 4; i++) {
 80024f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024f6:	3301      	adds	r3, #1
 80024f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80024fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	dde1      	ble.n	80024c4 <read_IMU_task+0x28c>
    }
    HAL_CAN_AddTxMessage(&hcan, &IMU_y_axis_header, data_send, &can_mailbox);
 8002500:	f107 0208 	add.w	r2, r7, #8
 8002504:	4b1e      	ldr	r3, [pc, #120]	@ (8002580 <read_IMU_task+0x348>)
 8002506:	4921      	ldr	r1, [pc, #132]	@ (800258c <read_IMU_task+0x354>)
 8002508:	481f      	ldr	r0, [pc, #124]	@ (8002588 <read_IMU_task+0x350>)
 800250a:	f002 fa6d 	bl	80049e8 <HAL_CAN_AddTxMessage>

    // Z-axis data
    for (int i = 0; i < 4; i++) {
 800250e:	2300      	movs	r3, #0
 8002510:	667b      	str	r3, [r7, #100]	@ 0x64
 8002512:	e01a      	b.n	800254a <read_IMU_task+0x312>
	data_send[3-i] = ax_z.bytes[i];
 8002514:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002516:	f1c3 0303 	rsb	r3, r3, #3
 800251a:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800251e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002520:	440a      	add	r2, r1
 8002522:	7812      	ldrb	r2, [r2, #0]
 8002524:	3370      	adds	r3, #112	@ 0x70
 8002526:	443b      	add	r3, r7
 8002528:	f803 2c68 	strb.w	r2, [r3, #-104]
	data_send[7-i] = gy_z.bytes[i];
 800252c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800252e:	f1c3 0307 	rsb	r3, r3, #7
 8002532:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8002536:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002538:	440a      	add	r2, r1
 800253a:	7812      	ldrb	r2, [r2, #0]
 800253c:	3370      	adds	r3, #112	@ 0x70
 800253e:	443b      	add	r3, r7
 8002540:	f803 2c68 	strb.w	r2, [r3, #-104]
    for (int i = 0; i < 4; i++) {
 8002544:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002546:	3301      	adds	r3, #1
 8002548:	667b      	str	r3, [r7, #100]	@ 0x64
 800254a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800254c:	2b03      	cmp	r3, #3
 800254e:	dde1      	ble.n	8002514 <read_IMU_task+0x2dc>
    }
    HAL_CAN_AddTxMessage(&hcan, &IMU_z_axis_header, data_send, &can_mailbox);
 8002550:	f107 0208 	add.w	r2, r7, #8
 8002554:	4b0a      	ldr	r3, [pc, #40]	@ (8002580 <read_IMU_task+0x348>)
 8002556:	490e      	ldr	r1, [pc, #56]	@ (8002590 <read_IMU_task+0x358>)
 8002558:	480b      	ldr	r0, [pc, #44]	@ (8002588 <read_IMU_task+0x350>)
 800255a:	f002 fa45 	bl	80049e8 <HAL_CAN_AddTxMessage>

    /* Delay */
    osDelay(READ_IMU_DELAY * 5);
 800255e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002562:	f007 fb17 	bl	8009b94 <osDelay>
  {
 8002566:	e66b      	b.n	8002240 <read_IMU_task+0x8>
 8002568:	00000000 	.word	0x00000000
 800256c:	40606000 	.word	0x40606000
 8002570:	20000694 	.word	0x20000694
 8002574:	0801203c 	.word	0x0801203c
 8002578:	40d00000 	.word	0x40d00000
 800257c:	08012050 	.word	0x08012050
 8002580:	20000338 	.word	0x20000338
 8002584:	20000018 	.word	0x20000018
 8002588:	2000033c 	.word	0x2000033c
 800258c:	20000030 	.word	0x20000030
 8002590:	20000048 	.word	0x20000048

08002594 <read_GPS_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_GPS_task */
void read_GPS_task(void const * argument)
{
 8002594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002598:	f2ad 4d4c 	subw	sp, sp, #1100	@ 0x44c
 800259c:	af0e      	add	r7, sp, #56	@ 0x38
 800259e:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80025a2:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 80025a6:	6018      	str	r0, [r3, #0]
    /* Initialize buffers */
    //printf("read_GPS_task()\n\r");
    uint8_t receive_buffer[GPS_RCV_BUFFER_SIZE];
    GPS gps_data;
    GPS_msg_t gps_message;
    uint8_t gps_buffer[GPS_MESSAGE_LEN] = {0};
 80025a8:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80025ac:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	3304      	adds	r3, #4
 80025b6:	22c4      	movs	r2, #196	@ 0xc4
 80025b8:	2100      	movs	r1, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f00b fd53 	bl	800e066 <memset>

    /* Read in an NMEA message into the buffer */
    if(HAL_I2C_IsDeviceReady(&hi2c1, GPS_DEVICE_ADDRESS, 1, HAL_MAX_DELAY) == HAL_OK) {
 80025c0:	f04f 33ff 	mov.w	r3, #4294967295
 80025c4:	2201      	movs	r2, #1
 80025c6:	2184      	movs	r1, #132	@ 0x84
 80025c8:	48a9      	ldr	r0, [pc, #676]	@ (8002870 <read_GPS_task+0x2dc>)
 80025ca:	f004 f813 	bl	80065f4 <HAL_I2C_IsDeviceReady>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10a      	bne.n	80025ea <read_GPS_task+0x56>
	    HAL_I2C_Master_Receive(&hi2c1, GPS_DEVICE_ADDRESS, receive_buffer, sizeof(receive_buffer), HAL_MAX_DELAY);
 80025d4:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 80025d8:	f04f 33ff 	mov.w	r3, #4294967295
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025e2:	2184      	movs	r1, #132	@ 0x84
 80025e4:	48a2      	ldr	r0, [pc, #648]	@ (8002870 <read_GPS_task+0x2dc>)
 80025e6:	f003 fa37 	bl	8005a58 <HAL_I2C_Master_Receive>
    }

    /* Parse the buffer data --> gets stored in gps_data; */
    nmea_parse(&gps_data, &receive_buffer);
 80025ea:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 80025ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025f2:	4611      	mov	r1, r2
 80025f4:	4618      	mov	r0, r3
 80025f6:	f001 f9a1 	bl	800393c <nmea_parse>

    /* Create string */
    sprintf(gps_message.data,
 80025fa:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80025fe:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002602:	cb18      	ldmia	r3, {r3, r4}
 8002604:	e9c7 3406 	strd	r3, r4, [r7, #24]
	    "Latitude: %.6f %c, Longitude: %.6f %c, Altitude: %.2f meters, HDOP: %.2f, Satellites: %d, Fix: %d, Time: %s",
	    gps_data.latitude, gps_data.latSide,
 8002608:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800260c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002610:	7a1b      	ldrb	r3, [r3, #8]
    sprintf(gps_message.data,
 8002612:	623b      	str	r3, [r7, #32]
 8002614:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8002618:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800261c:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8002620:	e9c7 1204 	strd	r1, r2, [r7, #16]
	    gps_data.longitude, gps_data.lonSide,
 8002624:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8002628:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800262c:	7e1b      	ldrb	r3, [r3, #24]
    sprintf(gps_message.data,
 800262e:	60fb      	str	r3, [r7, #12]
	    gps_data.altitude, gps_data.hdop,
 8002630:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8002634:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002638:	69db      	ldr	r3, [r3, #28]
    sprintf(gps_message.data,
 800263a:	4618      	mov	r0, r3
 800263c:	f7fd ff6e 	bl	800051c <__aeabi_f2d>
 8002640:	e9c7 0100 	strd	r0, r1, [r7]
	    gps_data.altitude, gps_data.hdop,
 8002644:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8002648:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800264c:	6a1b      	ldr	r3, [r3, #32]
    sprintf(gps_message.data,
 800264e:	4618      	mov	r0, r3
 8002650:	f7fd ff64 	bl	800051c <__aeabi_f2d>
 8002654:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8002658:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800265c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800265e:	60bc      	str	r4, [r7, #8]
 8002660:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8002664:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002668:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800266a:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 800266e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002672:	332c      	adds	r3, #44	@ 0x2c
 8002674:	930c      	str	r3, [sp, #48]	@ 0x30
 8002676:	920b      	str	r2, [sp, #44]	@ 0x2c
 8002678:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800267c:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 8002680:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002684:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002688:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	9004      	str	r0, [sp, #16]
 8002690:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002694:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8002698:	6a39      	ldr	r1, [r7, #32]
 800269a:	9100      	str	r1, [sp, #0]
 800269c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026a0:	4974      	ldr	r1, [pc, #464]	@ (8002874 <read_GPS_task+0x2e0>)
 80026a2:	4620      	mov	r0, r4
 80026a4:	f00b fc7a 	bl	800df9c <siprintf>
	    gps_data.satelliteCount, gps_data.fix,
	    gps_data.lastMeasure);

    /* Null Terminate */
    gps_message.data[sizeof(gps_message.data) - 1] = '\0';
 80026a8:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80026ac:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95

    /* Get current epoch Time Stamp */
    union DoubleBytes current_timestamp;
    current_timestamp.double_value = get_current_timestamp();
 80026b6:	f001 fbd5 	bl	8003e64 <get_current_timestamp>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	f507 6180 	add.w	r1, r7, #1024	@ 0x400
 80026c2:	e9c1 2300 	strd	r2, r3, [r1]

    /* TIMESTAMP: 8 Bytes */
    for (uint8_t i = 0; i < 8; i++) {
 80026c6:	2300      	movs	r3, #0
 80026c8:	f887 340f 	strb.w	r3, [r7, #1039]	@ 0x40f
 80026cc:	e026      	b.n	800271c <read_GPS_task+0x188>
      gps_buffer[7 - i] = GET_BYTE_FROM_WORD(i, current_timestamp.double_as_int);
 80026ce:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 80026d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d6:	f897 140f 	ldrb.w	r1, [r7, #1039]	@ 0x40f
 80026da:	00c9      	lsls	r1, r1, #3
 80026dc:	f1c1 0420 	rsb	r4, r1, #32
 80026e0:	f1a1 0020 	sub.w	r0, r1, #32
 80026e4:	fa22 f801 	lsr.w	r8, r2, r1
 80026e8:	fa03 f404 	lsl.w	r4, r3, r4
 80026ec:	ea48 0804 	orr.w	r8, r8, r4
 80026f0:	fa23 f000 	lsr.w	r0, r3, r0
 80026f4:	ea48 0800 	orr.w	r8, r8, r0
 80026f8:	fa23 f901 	lsr.w	r9, r3, r1
 80026fc:	f897 340f 	ldrb.w	r3, [r7, #1039]	@ 0x40f
 8002700:	f1c3 0307 	rsb	r3, r3, #7
 8002704:	fa5f f188 	uxtb.w	r1, r8
 8002708:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 800270c:	f5a2 7244 	sub.w	r2, r2, #784	@ 0x310
 8002710:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < 8; i++) {
 8002712:	f897 340f 	ldrb.w	r3, [r7, #1039]	@ 0x40f
 8002716:	3301      	adds	r3, #1
 8002718:	f887 340f 	strb.w	r3, [r7, #1039]	@ 0x40f
 800271c:	f897 340f 	ldrb.w	r3, [r7, #1039]	@ 0x40f
 8002720:	2b07      	cmp	r3, #7
 8002722:	d9d4      	bls.n	80026ce <read_GPS_task+0x13a>

    /*
     * Copy the NMEA data into the buffer, ensuring not to exceed the buffer size
     * Adds 8 to the start to skip the time stamp
     */
    strncpy(gps_buffer + 8, gps_message.data, 150); // Save space for CR+LF
 8002724:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8002728:	3308      	adds	r3, #8
 800272a:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 800272e:	2296      	movs	r2, #150	@ 0x96
 8002730:	4618      	mov	r0, r3
 8002732:	f00b fcbf 	bl	800e0b4 <strncpy>

    gps_buffer[GPS_MESSAGE_LEN - 2] = '\r'; // Carriage return
 8002736:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800273a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800273e:	220d      	movs	r2, #13
 8002740:	f883 20c6 	strb.w	r2, [r3, #198]	@ 0xc6
    gps_buffer[GPS_MESSAGE_LEN - 1] = '\n'; // Line feed
 8002744:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8002748:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800274c:	220a      	movs	r2, #10
 800274e:	f883 20c7 	strb.w	r2, [r3, #199]	@ 0xc7

    /* Transmit the NMEA message over UART to radio */
    HAL_UART_Transmit(&huart1, gps_buffer, sizeof(gps_buffer), 1000);
 8002752:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8002756:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800275a:	22c8      	movs	r2, #200	@ 0xc8
 800275c:	4846      	ldr	r0, [pc, #280]	@ (8002878 <read_GPS_task+0x2e4>)
 800275e:	f006 ff59 	bl	8009614 <HAL_UART_Transmit>
    union DoubleBytes latitude_bytes;
    union DoubleBytes longitude_bytes;
    uint8_t latitude_send[8];
    uint8_t longitude_send[8];

    latitude_bytes.double_value = gps_data.latitude;
 8002762:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8002766:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800276a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276e:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	@ 0x3f8
    longitude_bytes.double_value = gps_data.longitude;
 8002772:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8002776:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800277a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800277e:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	@ 0x3f0

    for  (uint8_t i=0; i < 8; i++) {
 8002782:	2300      	movs	r3, #0
 8002784:	f887 340e 	strb.w	r3, [r7, #1038]	@ 0x40e
 8002788:	e045      	b.n	8002816 <read_GPS_task+0x282>
	latitude_send[7 - i] = GET_BYTE_FROM_WORD(i, latitude_bytes.double_as_int);
 800278a:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	@ 0x3f8
 800278e:	f897 140e 	ldrb.w	r1, [r7, #1038]	@ 0x40e
 8002792:	00c9      	lsls	r1, r1, #3
 8002794:	f1c1 0420 	rsb	r4, r1, #32
 8002798:	f1a1 0020 	sub.w	r0, r1, #32
 800279c:	fa22 fa01 	lsr.w	sl, r2, r1
 80027a0:	fa03 f404 	lsl.w	r4, r3, r4
 80027a4:	ea4a 0a04 	orr.w	sl, sl, r4
 80027a8:	fa23 f000 	lsr.w	r0, r3, r0
 80027ac:	ea4a 0a00 	orr.w	sl, sl, r0
 80027b0:	fa23 fb01 	lsr.w	fp, r3, r1
 80027b4:	f897 340e 	ldrb.w	r3, [r7, #1038]	@ 0x40e
 80027b8:	f1c3 0307 	rsb	r3, r3, #7
 80027bc:	fa5f f28a 	uxtb.w	r2, sl
 80027c0:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 80027c4:	f107 0120 	add.w	r1, r7, #32
 80027c8:	440b      	add	r3, r1
 80027ca:	f803 2c28 	strb.w	r2, [r3, #-40]
	longitude_send[7 - i] = GET_BYTE_FROM_WORD(i, longitude_bytes.double_as_int);
 80027ce:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	@ 0x3f0
 80027d2:	f897 140e 	ldrb.w	r1, [r7, #1038]	@ 0x40e
 80027d6:	00c9      	lsls	r1, r1, #3
 80027d8:	f1c1 0420 	rsb	r4, r1, #32
 80027dc:	f1a1 0020 	sub.w	r0, r1, #32
 80027e0:	fa22 f501 	lsr.w	r5, r2, r1
 80027e4:	fa03 f404 	lsl.w	r4, r3, r4
 80027e8:	4325      	orrs	r5, r4
 80027ea:	fa23 f000 	lsr.w	r0, r3, r0
 80027ee:	4305      	orrs	r5, r0
 80027f0:	fa23 f601 	lsr.w	r6, r3, r1
 80027f4:	f897 340e 	ldrb.w	r3, [r7, #1038]	@ 0x40e
 80027f8:	f1c3 0307 	rsb	r3, r3, #7
 80027fc:	b2ea      	uxtb	r2, r5
 80027fe:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 8002802:	f107 0120 	add.w	r1, r7, #32
 8002806:	440b      	add	r3, r1
 8002808:	f803 2c30 	strb.w	r2, [r3, #-48]
    for  (uint8_t i=0; i < 8; i++) {
 800280c:	f897 340e 	ldrb.w	r3, [r7, #1038]	@ 0x40e
 8002810:	3301      	adds	r3, #1
 8002812:	f887 340e 	strb.w	r3, [r7, #1038]	@ 0x40e
 8002816:	f897 340e 	ldrb.w	r3, [r7, #1038]	@ 0x40e
 800281a:	2b07      	cmp	r3, #7
 800281c:	d9b5      	bls.n	800278a <read_GPS_task+0x1f6>
    }

    HAL_CAN_AddTxMessage(&hcan, &GPS_latitude, latitude_send, &can_mailbox);
 800281e:	f507 727a 	add.w	r2, r7, #1000	@ 0x3e8
 8002822:	4b16      	ldr	r3, [pc, #88]	@ (800287c <read_GPS_task+0x2e8>)
 8002824:	4916      	ldr	r1, [pc, #88]	@ (8002880 <read_GPS_task+0x2ec>)
 8002826:	4817      	ldr	r0, [pc, #92]	@ (8002884 <read_GPS_task+0x2f0>)
 8002828:	f002 f8de 	bl	80049e8 <HAL_CAN_AddTxMessage>
    osDelay(2000);
 800282c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002830:	f007 f9b0 	bl	8009b94 <osDelay>

    HAL_CAN_AddTxMessage(&hcan, &GPS_longitude, longitude_send, &can_mailbox);
 8002834:	f507 7278 	add.w	r2, r7, #992	@ 0x3e0
 8002838:	4b10      	ldr	r3, [pc, #64]	@ (800287c <read_GPS_task+0x2e8>)
 800283a:	4913      	ldr	r1, [pc, #76]	@ (8002888 <read_GPS_task+0x2f4>)
 800283c:	4811      	ldr	r0, [pc, #68]	@ (8002884 <read_GPS_task+0x2f0>)
 800283e:	f002 f8d3 	bl	80049e8 <HAL_CAN_AddTxMessage>
    osDelay(2000);
 8002842:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002846:	f007 f9a5 	bl	8009b94 <osDelay>

    union FloatBytes altitude_bytes;
    union FloatBytes hdop_bytes;
    uint8_t altitude_hdop_send[8];

    altitude_bytes.float_value = gps_data.altitude;
 800284a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800284e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
    hdop_bytes.float_value = gps_data.hdop;
 8002858:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800285c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8

    for  (uint8_t i=0; i < 8; i++) {
 8002866:	2300      	movs	r3, #0
 8002868:	f887 340d 	strb.w	r3, [r7, #1037]	@ 0x40d
 800286c:	e03b      	b.n	80028e6 <read_GPS_task+0x352>
 800286e:	bf00      	nop
 8002870:	20000640 	.word	0x20000640
 8002874:	08012064 	.word	0x08012064
 8002878:	20000858 	.word	0x20000858
 800287c:	20000338 	.word	0x20000338
 8002880:	20000060 	.word	0x20000060
 8002884:	2000033c 	.word	0x2000033c
 8002888:	20000078 	.word	0x20000078
	altitude_hdop_send[3 - i] = altitude_bytes.bytes[i];
 800288c:	f897 240d 	ldrb.w	r2, [r7, #1037]	@ 0x40d
 8002890:	f897 340d 	ldrb.w	r3, [r7, #1037]	@ 0x40d
 8002894:	f1c3 0303 	rsb	r3, r3, #3
 8002898:	f502 727c 	add.w	r2, r2, #1008	@ 0x3f0
 800289c:	f107 0120 	add.w	r1, r7, #32
 80028a0:	440a      	add	r2, r1
 80028a2:	f812 2c34 	ldrb.w	r2, [r2, #-52]
 80028a6:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 80028aa:	f107 0120 	add.w	r1, r7, #32
 80028ae:	440b      	add	r3, r1
 80028b0:	f803 2c40 	strb.w	r2, [r3, #-64]
	altitude_hdop_send[7 - i] = hdop_bytes.bytes[i];
 80028b4:	f897 240d 	ldrb.w	r2, [r7, #1037]	@ 0x40d
 80028b8:	f897 340d 	ldrb.w	r3, [r7, #1037]	@ 0x40d
 80028bc:	f1c3 0307 	rsb	r3, r3, #7
 80028c0:	f502 727c 	add.w	r2, r2, #1008	@ 0x3f0
 80028c4:	f107 0120 	add.w	r1, r7, #32
 80028c8:	440a      	add	r2, r1
 80028ca:	f812 2c38 	ldrb.w	r2, [r2, #-56]
 80028ce:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 80028d2:	f107 0120 	add.w	r1, r7, #32
 80028d6:	440b      	add	r3, r1
 80028d8:	f803 2c40 	strb.w	r2, [r3, #-64]
    for  (uint8_t i=0; i < 8; i++) {
 80028dc:	f897 340d 	ldrb.w	r3, [r7, #1037]	@ 0x40d
 80028e0:	3301      	adds	r3, #1
 80028e2:	f887 340d 	strb.w	r3, [r7, #1037]	@ 0x40d
 80028e6:	f897 340d 	ldrb.w	r3, [r7, #1037]	@ 0x40d
 80028ea:	2b07      	cmp	r3, #7
 80028ec:	d9ce      	bls.n	800288c <read_GPS_task+0x2f8>
    }

    HAL_CAN_AddTxMessage(&hcan, &GPS_altitude_hdop, altitude_hdop_send, &can_mailbox);
 80028ee:	f507 7274 	add.w	r2, r7, #976	@ 0x3d0
 80028f2:	4b2a      	ldr	r3, [pc, #168]	@ (800299c <read_GPS_task+0x408>)
 80028f4:	492a      	ldr	r1, [pc, #168]	@ (80029a0 <read_GPS_task+0x40c>)
 80028f6:	482b      	ldr	r0, [pc, #172]	@ (80029a4 <read_GPS_task+0x410>)
 80028f8:	f002 f876 	bl	80049e8 <HAL_CAN_AddTxMessage>
    osDelay(2000);
 80028fc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002900:	f007 f948 	bl	8009b94 <osDelay>

    uint8_t side_and_count[8];
    uint32_t sat_count = (uint32_t) gps_data.satelliteCount;
 8002904:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8002908:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800290c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290e:	f8c7 3408 	str.w	r3, [r7, #1032]	@ 0x408
    side_and_count[0] = gps_data.latSide;
 8002912:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8002916:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800291a:	7a1b      	ldrb	r3, [r3, #8]
 800291c:	f887 33c8 	strb.w	r3, [r7, #968]	@ 0x3c8
    side_and_count[1] = gps_data.lonSide;
 8002920:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8002924:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002928:	7e1b      	ldrb	r3, [r3, #24]
 800292a:	f887 33c9 	strb.w	r3, [r7, #969]	@ 0x3c9
    for  (uint8_t i=0; i < 4; i++) {
 800292e:	2300      	movs	r3, #0
 8002930:	f887 340c 	strb.w	r3, [r7, #1036]	@ 0x40c
 8002934:	e01b      	b.n	800296e <read_GPS_task+0x3da>
	side_and_count[5 - i] = ((sat_count >> (4 * i)) && 0xFF);
 8002936:	f897 340c 	ldrb.w	r3, [r7, #1036]	@ 0x40c
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	f8d7 2408 	ldr.w	r2, [r7, #1032]	@ 0x408
 8002940:	fa22 f303 	lsr.w	r3, r2, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	bf14      	ite	ne
 8002948:	2301      	movne	r3, #1
 800294a:	2300      	moveq	r3, #0
 800294c:	b2da      	uxtb	r2, r3
 800294e:	f897 340c 	ldrb.w	r3, [r7, #1036]	@ 0x40c
 8002952:	f1c3 0305 	rsb	r3, r3, #5
 8002956:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 800295a:	f107 0120 	add.w	r1, r7, #32
 800295e:	440b      	add	r3, r1
 8002960:	f803 2c48 	strb.w	r2, [r3, #-72]
    for  (uint8_t i=0; i < 4; i++) {
 8002964:	f897 340c 	ldrb.w	r3, [r7, #1036]	@ 0x40c
 8002968:	3301      	adds	r3, #1
 800296a:	f887 340c 	strb.w	r3, [r7, #1036]	@ 0x40c
 800296e:	f897 340c 	ldrb.w	r3, [r7, #1036]	@ 0x40c
 8002972:	2b03      	cmp	r3, #3
 8002974:	d9df      	bls.n	8002936 <read_GPS_task+0x3a2>
    }
    side_and_count[6] = 0;
 8002976:	2300      	movs	r3, #0
 8002978:	f887 33ce 	strb.w	r3, [r7, #974]	@ 0x3ce
    side_and_count[7] = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	f887 33cf 	strb.w	r3, [r7, #975]	@ 0x3cf

    HAL_CAN_AddTxMessage(&hcan, &GPS_side_count, side_and_count, &can_mailbox);
 8002982:	f507 7272 	add.w	r2, r7, #968	@ 0x3c8
 8002986:	4b05      	ldr	r3, [pc, #20]	@ (800299c <read_GPS_task+0x408>)
 8002988:	4907      	ldr	r1, [pc, #28]	@ (80029a8 <read_GPS_task+0x414>)
 800298a:	4806      	ldr	r0, [pc, #24]	@ (80029a4 <read_GPS_task+0x410>)
 800298c:	f002 f82c 	bl	80049e8 <HAL_CAN_AddTxMessage>
    osDelay(4000);
 8002990:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8002994:	f007 f8fe 	bl	8009b94 <osDelay>
  while(1) {
 8002998:	e606      	b.n	80025a8 <read_GPS_task+0x14>
 800299a:	bf00      	nop
 800299c:	20000338 	.word	0x20000338
 80029a0:	20000090 	.word	0x20000090
 80029a4:	2000033c 	.word	0x2000033c
 80029a8:	200000a8 	.word	0x200000a8

080029ac <transmit_RTC_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_RTC_task */
void transmit_RTC_task(void const * argument)
{
 80029ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ae:	b08b      	sub	sp, #44	@ 0x2c
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN transmit_RTC_task */
  /* Infinite loop */
  for(;;)
  {
    printf("transmit_RTC_task()\n\r");
 80029b4:	481c      	ldr	r0, [pc, #112]	@ (8002a28 <transmit_RTC_task+0x7c>)
 80029b6:	f00b fadf 	bl	800df78 <iprintf>
    // Get rtc timestamp
    double timestamp = get_current_timestamp();
 80029ba:	f001 fa53 	bl	8003e64 <get_current_timestamp>
 80029be:	e9c7 0106 	strd	r0, r1, [r7, #24]
    union DoubleBytes timestamp_bytes;
    timestamp_bytes.double_value = timestamp;
 80029c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    uint8_t data_send[8];

    // Populate data_send array
    for (int i = 0; i < 8; i++) {
 80029ca:	2300      	movs	r3, #0
 80029cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ce:	e01b      	b.n	8002a08 <transmit_RTC_task+0x5c>
        data_send[i] = (timestamp_bytes.double_as_int >> (8 * i)) & 0xFF;
 80029d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80029d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029d6:	00c9      	lsls	r1, r1, #3
 80029d8:	f1c1 0620 	rsb	r6, r1, #32
 80029dc:	f1a1 0020 	sub.w	r0, r1, #32
 80029e0:	fa22 f401 	lsr.w	r4, r2, r1
 80029e4:	fa03 f606 	lsl.w	r6, r3, r6
 80029e8:	4334      	orrs	r4, r6
 80029ea:	fa23 f000 	lsr.w	r0, r3, r0
 80029ee:	4304      	orrs	r4, r0
 80029f0:	fa23 f501 	lsr.w	r5, r3, r1
 80029f4:	b2e1      	uxtb	r1, r4
 80029f6:	f107 0208 	add.w	r2, r7, #8
 80029fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fc:	4413      	add	r3, r2
 80029fe:	460a      	mov	r2, r1
 8002a00:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	3301      	adds	r3, #1
 8002a06:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0a:	2b07      	cmp	r3, #7
 8002a0c:	dde0      	ble.n	80029d0 <transmit_RTC_task+0x24>
    }
    
    // Transmit message on CAN
    HAL_CAN_AddTxMessage(&hcan, &rtc_timestamp_header, data_send, &can_mailbox);
 8002a0e:	f107 0208 	add.w	r2, r7, #8
 8002a12:	4b06      	ldr	r3, [pc, #24]	@ (8002a2c <transmit_RTC_task+0x80>)
 8002a14:	4906      	ldr	r1, [pc, #24]	@ (8002a30 <transmit_RTC_task+0x84>)
 8002a16:	4807      	ldr	r0, [pc, #28]	@ (8002a34 <transmit_RTC_task+0x88>)
 8002a18:	f001 ffe6 	bl	80049e8 <HAL_CAN_AddTxMessage>
    
    osDelay(TRANSMIT_RTC_DELAY);
 8002a1c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002a20:	f007 f8b8 	bl	8009b94 <osDelay>
  {
 8002a24:	e7c6      	b.n	80029b4 <transmit_RTC_task+0x8>
 8002a26:	bf00      	nop
 8002a28:	080120d0 	.word	0x080120d0
 8002a2c:	20000338 	.word	0x20000338
 8002a30:	20000000 	.word	0x20000000
 8002a34:	2000033c 	.word	0x2000033c

08002a38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3e:	f107 0310 	add.w	r3, r7, #16
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	605a      	str	r2, [r3, #4]
 8002a48:	609a      	str	r2, [r3, #8]
 8002a4a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a4c:	4b49      	ldr	r3, [pc, #292]	@ (8002b74 <MX_GPIO_Init+0x13c>)
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	4a48      	ldr	r2, [pc, #288]	@ (8002b74 <MX_GPIO_Init+0x13c>)
 8002a52:	f043 0310 	orr.w	r3, r3, #16
 8002a56:	6193      	str	r3, [r2, #24]
 8002a58:	4b46      	ldr	r3, [pc, #280]	@ (8002b74 <MX_GPIO_Init+0x13c>)
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	f003 0310 	and.w	r3, r3, #16
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a64:	4b43      	ldr	r3, [pc, #268]	@ (8002b74 <MX_GPIO_Init+0x13c>)
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	4a42      	ldr	r2, [pc, #264]	@ (8002b74 <MX_GPIO_Init+0x13c>)
 8002a6a:	f043 0320 	orr.w	r3, r3, #32
 8002a6e:	6193      	str	r3, [r2, #24]
 8002a70:	4b40      	ldr	r3, [pc, #256]	@ (8002b74 <MX_GPIO_Init+0x13c>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	f003 0320 	and.w	r3, r3, #32
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7c:	4b3d      	ldr	r3, [pc, #244]	@ (8002b74 <MX_GPIO_Init+0x13c>)
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	4a3c      	ldr	r2, [pc, #240]	@ (8002b74 <MX_GPIO_Init+0x13c>)
 8002a82:	f043 0304 	orr.w	r3, r3, #4
 8002a86:	6193      	str	r3, [r2, #24]
 8002a88:	4b3a      	ldr	r3, [pc, #232]	@ (8002b74 <MX_GPIO_Init+0x13c>)
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	607b      	str	r3, [r7, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a94:	4b37      	ldr	r3, [pc, #220]	@ (8002b74 <MX_GPIO_Init+0x13c>)
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	4a36      	ldr	r2, [pc, #216]	@ (8002b74 <MX_GPIO_Init+0x13c>)
 8002a9a:	f043 0308 	orr.w	r3, r3, #8
 8002a9e:	6193      	str	r3, [r2, #24]
 8002aa0:	4b34      	ldr	r3, [pc, #208]	@ (8002b74 <MX_GPIO_Init+0x13c>)
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	f003 0308 	and.w	r3, r3, #8
 8002aa8:	603b      	str	r3, [r7, #0]
 8002aaa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_GPIO_DIO7_Pin|RADIO_GPIO_DIO9_SLEEP_Pin|RADIO_GPIO_DIO11_Pin|RADIO_GPIO_DIO10_Pin, GPIO_PIN_RESET);
 8002aac:	2200      	movs	r2, #0
 8002aae:	2178      	movs	r1, #120	@ 0x78
 8002ab0:	4831      	ldr	r0, [pc, #196]	@ (8002b78 <MX_GPIO_Init+0x140>)
 8002ab2:	f002 fe5c 	bl	800576e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USER_LED_Pin|SDL_CS_Pin, GPIO_PIN_RESET);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2112      	movs	r1, #18
 8002aba:	4830      	ldr	r0, [pc, #192]	@ (8002b7c <MX_GPIO_Init+0x144>)
 8002abc:	f002 fe57 	bl	800576e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RADIO_GPIO_DIO4_Pin|RADIO_GPIO_DIO3_Pin|RADIO_GPIO_DIO2_Pin, GPIO_PIN_SET);
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f24a 0101 	movw	r1, #40961	@ 0xa001
 8002ac6:	482e      	ldr	r0, [pc, #184]	@ (8002b80 <MX_GPIO_Init+0x148>)
 8002ac8:	f002 fe51 	bl	800576e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RADIO_GPIO_DIO12_Pin|RADIO_GPIO_DIO6_Pin|RADIO_DIO8_SLEEP_CONTROL_Pin, GPIO_PIN_RESET);
 8002acc:	2200      	movs	r2, #0
 8002ace:	f245 0102 	movw	r1, #20482	@ 0x5002
 8002ad2:	482b      	ldr	r0, [pc, #172]	@ (8002b80 <MX_GPIO_Init+0x148>)
 8002ad4:	f002 fe4b 	bl	800576e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_GPIO_DIO1_Pin|RADIO_GPIO_DIO0_Pin, GPIO_PIN_SET);
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8002ade:	4826      	ldr	r0, [pc, #152]	@ (8002b78 <MX_GPIO_Init+0x140>)
 8002ae0:	f002 fe45 	bl	800576e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = RADIO_GPIO_DIO7_Pin|RADIO_GPIO_DIO9_SLEEP_Pin|RADIO_GPIO_DIO11_Pin|RADIO_GPIO_DIO10_Pin
 8002ae4:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 8002ae8:	613b      	str	r3, [r7, #16]
                          |RADIO_GPIO_DIO1_Pin|RADIO_GPIO_DIO0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aea:	2301      	movs	r3, #1
 8002aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af2:	2302      	movs	r3, #2
 8002af4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002af6:	f107 0310 	add.w	r3, r7, #16
 8002afa:	4619      	mov	r1, r3
 8002afc:	481e      	ldr	r0, [pc, #120]	@ (8002b78 <MX_GPIO_Init+0x140>)
 8002afe:	f002 fc8b 	bl	8005418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USER_LED_Pin|SDL_CS_Pin;
 8002b02:	2312      	movs	r3, #18
 8002b04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b06:	2301      	movs	r3, #1
 8002b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b12:	f107 0310 	add.w	r3, r7, #16
 8002b16:	4619      	mov	r1, r3
 8002b18:	4818      	ldr	r0, [pc, #96]	@ (8002b7c <MX_GPIO_Init+0x144>)
 8002b1a:	f002 fc7d 	bl	8005418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RTC_SYNC_Pin|SDL_CD_Pin;
 8002b1e:	230c      	movs	r3, #12
 8002b20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2a:	f107 0310 	add.w	r3, r7, #16
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4812      	ldr	r0, [pc, #72]	@ (8002b7c <MX_GPIO_Init+0x144>)
 8002b32:	f002 fc71 	bl	8005418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = RADIO_GPIO_DIO4_Pin|RADIO_GPIO_DIO12_Pin|RADIO_GPIO_DIO6_Pin|RADIO_GPIO_DIO3_Pin
 8002b36:	f24f 0303 	movw	r3, #61443	@ 0xf003
 8002b3a:	613b      	str	r3, [r7, #16]
                          |RADIO_DIO8_SLEEP_CONTROL_Pin|RADIO_GPIO_DIO2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b44:	2302      	movs	r3, #2
 8002b46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b48:	f107 0310 	add.w	r3, r7, #16
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	480c      	ldr	r0, [pc, #48]	@ (8002b80 <MX_GPIO_Init+0x148>)
 8002b50:	f002 fc62 	bl	8005418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002b54:	2304      	movs	r3, #4
 8002b56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002b60:	f107 0310 	add.w	r3, r7, #16
 8002b64:	4619      	mov	r1, r3
 8002b66:	4806      	ldr	r0, [pc, #24]	@ (8002b80 <MX_GPIO_Init+0x148>)
 8002b68:	f002 fc56 	bl	8005418 <HAL_GPIO_Init>

}
 8002b6c:	bf00      	nop
 8002b6e:	3720      	adds	r7, #32
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40021000 	.word	0x40021000
 8002b78:	40011000 	.word	0x40011000
 8002b7c:	40010800 	.word	0x40010800
 8002b80:	40010c00 	.word	0x40010c00

08002b84 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b88:	4b12      	ldr	r3, [pc, #72]	@ (8002bd4 <MX_I2C1_Init+0x50>)
 8002b8a:	4a13      	ldr	r2, [pc, #76]	@ (8002bd8 <MX_I2C1_Init+0x54>)
 8002b8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002b8e:	4b11      	ldr	r3, [pc, #68]	@ (8002bd4 <MX_I2C1_Init+0x50>)
 8002b90:	4a12      	ldr	r2, [pc, #72]	@ (8002bdc <MX_I2C1_Init+0x58>)
 8002b92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b94:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd4 <MX_I2C1_Init+0x50>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd4 <MX_I2C1_Init+0x50>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd4 <MX_I2C1_Init+0x50>)
 8002ba2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ba6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd4 <MX_I2C1_Init+0x50>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002bae:	4b09      	ldr	r3, [pc, #36]	@ (8002bd4 <MX_I2C1_Init+0x50>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bb4:	4b07      	ldr	r3, [pc, #28]	@ (8002bd4 <MX_I2C1_Init+0x50>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bba:	4b06      	ldr	r3, [pc, #24]	@ (8002bd4 <MX_I2C1_Init+0x50>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bc0:	4804      	ldr	r0, [pc, #16]	@ (8002bd4 <MX_I2C1_Init+0x50>)
 8002bc2:	f002 fe05 	bl	80057d0 <HAL_I2C_Init>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002bcc:	f000 fa22 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002bd0:	bf00      	nop
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	20000640 	.word	0x20000640
 8002bd8:	40005400 	.word	0x40005400
 8002bdc:	000186a0 	.word	0x000186a0

08002be0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002be4:	4b12      	ldr	r3, [pc, #72]	@ (8002c30 <MX_I2C2_Init+0x50>)
 8002be6:	4a13      	ldr	r2, [pc, #76]	@ (8002c34 <MX_I2C2_Init+0x54>)
 8002be8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002bea:	4b11      	ldr	r3, [pc, #68]	@ (8002c30 <MX_I2C2_Init+0x50>)
 8002bec:	4a12      	ldr	r2, [pc, #72]	@ (8002c38 <MX_I2C2_Init+0x58>)
 8002bee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c30 <MX_I2C2_Init+0x50>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c30 <MX_I2C2_Init+0x50>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c30 <MX_I2C2_Init+0x50>)
 8002bfe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c02:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c04:	4b0a      	ldr	r3, [pc, #40]	@ (8002c30 <MX_I2C2_Init+0x50>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002c0a:	4b09      	ldr	r3, [pc, #36]	@ (8002c30 <MX_I2C2_Init+0x50>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c10:	4b07      	ldr	r3, [pc, #28]	@ (8002c30 <MX_I2C2_Init+0x50>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c16:	4b06      	ldr	r3, [pc, #24]	@ (8002c30 <MX_I2C2_Init+0x50>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002c1c:	4804      	ldr	r0, [pc, #16]	@ (8002c30 <MX_I2C2_Init+0x50>)
 8002c1e:	f002 fdd7 	bl	80057d0 <HAL_I2C_Init>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002c28:	f000 f9f4 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002c2c:	bf00      	nop
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	20000694 	.word	0x20000694
 8002c34:	40005800 	.word	0x40005800
 8002c38:	000186a0 	.word	0x000186a0

08002c3c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08a      	sub	sp, #40	@ 0x28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	f107 0318 	add.w	r3, r7, #24
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a2b      	ldr	r2, [pc, #172]	@ (8002d04 <HAL_I2C_MspInit+0xc8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d124      	bne.n	8002ca6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5c:	4b2a      	ldr	r3, [pc, #168]	@ (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	4a29      	ldr	r2, [pc, #164]	@ (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002c62:	f043 0308 	orr.w	r3, r3, #8
 8002c66:	6193      	str	r3, [r2, #24]
 8002c68:	4b27      	ldr	r3, [pc, #156]	@ (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPS_SCL_Pin|GPS_SDA_Pin;
 8002c74:	23c0      	movs	r3, #192	@ 0xc0
 8002c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c78:	2312      	movs	r3, #18
 8002c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c80:	f107 0318 	add.w	r3, r7, #24
 8002c84:	4619      	mov	r1, r3
 8002c86:	4821      	ldr	r0, [pc, #132]	@ (8002d0c <HAL_I2C_MspInit+0xd0>)
 8002c88:	f002 fbc6 	bl	8005418 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	4a1d      	ldr	r2, [pc, #116]	@ (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002c92:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c96:	61d3      	str	r3, [r2, #28]
 8002c98:	4b1b      	ldr	r3, [pc, #108]	@ (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002ca4:	e029      	b.n	8002cfa <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a19      	ldr	r2, [pc, #100]	@ (8002d10 <HAL_I2C_MspInit+0xd4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d124      	bne.n	8002cfa <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb0:	4b15      	ldr	r3, [pc, #84]	@ (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	4a14      	ldr	r2, [pc, #80]	@ (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002cb6:	f043 0308 	orr.w	r3, r3, #8
 8002cba:	6193      	str	r3, [r2, #24]
 8002cbc:	4b12      	ldr	r3, [pc, #72]	@ (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8002cc8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cce:	2312      	movs	r3, #18
 8002cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd6:	f107 0318 	add.w	r3, r7, #24
 8002cda:	4619      	mov	r1, r3
 8002cdc:	480b      	ldr	r0, [pc, #44]	@ (8002d0c <HAL_I2C_MspInit+0xd0>)
 8002cde:	f002 fb9b 	bl	8005418 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002ce2:	4b09      	ldr	r3, [pc, #36]	@ (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	4a08      	ldr	r2, [pc, #32]	@ (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002ce8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002cec:	61d3      	str	r3, [r2, #28]
 8002cee:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
}
 8002cfa:	bf00      	nop
 8002cfc:	3728      	adds	r7, #40	@ 0x28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40005400 	.word	0x40005400
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40010c00 	.word	0x40010c00
 8002d10:	40005800 	.word	0x40005800

08002d14 <initIMU>:

/*
 * Documentation: https://controllerstech.com/how-to-interface-mpu6050-gy-521-with-stm32/
 */
void initIMU(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af04      	add	r7, sp, #16

  /*
   * We need to check if the sensor is responding by reading the “WHO_AM_I (0x75)�? Register.
   * If the sensor responds with 0x68, this means it’s available and good to go.
   */
  for(int i = 0; i < 5; i++) {
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	e01a      	b.n	8002d56 <initIMU+0x42>
    if(HAL_I2C_IsDeviceReady(&hi2c2, IMU_DEVICE_ADDRESS, 1, HAL_MAX_DELAY) == HAL_OK) {
 8002d20:	f04f 33ff 	mov.w	r3, #4294967295
 8002d24:	2201      	movs	r2, #1
 8002d26:	21d0      	movs	r1, #208	@ 0xd0
 8002d28:	482c      	ldr	r0, [pc, #176]	@ (8002ddc <initIMU+0xc8>)
 8002d2a:	f003 fc63 	bl	80065f4 <HAL_I2C_IsDeviceReady>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10d      	bne.n	8002d50 <initIMU+0x3c>
	    HAL_I2C_Mem_Read (&hi2c2, IMU_DEVICE_ADDRESS, WHO_AM_I_REG, 1, &data, 1, 1000);
 8002d34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d38:	9302      	str	r3, [sp, #8]
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	9301      	str	r3, [sp, #4]
 8002d3e:	1cfb      	adds	r3, r7, #3
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	2301      	movs	r3, #1
 8002d44:	2275      	movs	r2, #117	@ 0x75
 8002d46:	21d0      	movs	r1, #208	@ 0xd0
 8002d48:	4824      	ldr	r0, [pc, #144]	@ (8002ddc <initIMU+0xc8>)
 8002d4a:	f003 f9eb 	bl	8006124 <HAL_I2C_Mem_Read>
	    //printf("Read a value from WHOAMI register: %x\n\r", data);
	    break; // Break when initialized
 8002d4e:	e005      	b.n	8002d5c <initIMU+0x48>
  for(int i = 0; i < 5; i++) {
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3301      	adds	r3, #1
 8002d54:	607b      	str	r3, [r7, #4]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	dde1      	ble.n	8002d20 <initIMU+0xc>
  /*
   * Next we will wake the sensor up and in order to do that we will write to the
   * “PWR_MGMT_1 (0x6B)�? Register. See below the register content.
   * On writing (0x00) to the PWR_MGMT_1 Register, sensor wakes up and the Clock sets up to 8 MHz.
   */
  data = 0;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Mem_Write(&hi2c2, IMU_DEVICE_ADDRESS, PWR_MGMT_1_REG, 1, &data, 1, 1000);
 8002d60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d64:	9302      	str	r3, [sp, #8]
 8002d66:	2301      	movs	r3, #1
 8002d68:	9301      	str	r3, [sp, #4]
 8002d6a:	1cfb      	adds	r3, r7, #3
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	2301      	movs	r3, #1
 8002d70:	226b      	movs	r2, #107	@ 0x6b
 8002d72:	21d0      	movs	r1, #208	@ 0xd0
 8002d74:	4819      	ldr	r0, [pc, #100]	@ (8002ddc <initIMU+0xc8>)
 8002d76:	f003 f8db 	bl	8005f30 <HAL_I2C_Mem_Write>
   * rate used to generate the Sample Rate for the MPU6050.
   * As the formula says Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV).
   * Where Gyroscope Output Rate is 8KHz, To get the sample rate of 1KHz,
   * we need to use the SMPLRT_DIV as ‘7’.
   */
  data = 0x07;
 8002d7a:	2307      	movs	r3, #7
 8002d7c:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Mem_Write(&hi2c2, IMU_DEVICE_ADDRESS, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 8002d7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d82:	9302      	str	r3, [sp, #8]
 8002d84:	2301      	movs	r3, #1
 8002d86:	9301      	str	r3, [sp, #4]
 8002d88:	1cfb      	adds	r3, r7, #3
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	2219      	movs	r2, #25
 8002d90:	21d0      	movs	r1, #208	@ 0xd0
 8002d92:	4812      	ldr	r0, [pc, #72]	@ (8002ddc <initIMU+0xc8>)
 8002d94:	f003 f8cc 	bl	8005f30 <HAL_I2C_Mem_Write>
   * Now configure the Accelerometer and Gyroscope registers and to do so, we need to modify
   * “GYRO_CONFIG (0x1B)�? and “ACCEL_CONFIG (0x1C)�?Registers.
   * Writing (0x00) to both of these registers would set the Full scale range of ± 2g in ACCEL_CONFIG
   * Register and a Full scale range of ± 250 °/s in GYRO_CONFIG Register along with Self-test disabled.
   */
  data = 0x00;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Mem_Write(&hi2c2, IMU_DEVICE_ADDRESS, GYRO_CONFIG_REG, 1, &data, 1, 1000);
 8002d9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002da0:	9302      	str	r3, [sp, #8]
 8002da2:	2301      	movs	r3, #1
 8002da4:	9301      	str	r3, [sp, #4]
 8002da6:	1cfb      	adds	r3, r7, #3
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	2301      	movs	r3, #1
 8002dac:	221b      	movs	r2, #27
 8002dae:	21d0      	movs	r1, #208	@ 0xd0
 8002db0:	480a      	ldr	r0, [pc, #40]	@ (8002ddc <initIMU+0xc8>)
 8002db2:	f003 f8bd 	bl	8005f30 <HAL_I2C_Mem_Write>
  data = 0x00;
 8002db6:	2300      	movs	r3, #0
 8002db8:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Mem_Write(&hi2c2, IMU_DEVICE_ADDRESS, ACCEL_CONFIG_REG, 1, &data, 1, 1000);
 8002dba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dbe:	9302      	str	r3, [sp, #8]
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	9301      	str	r3, [sp, #4]
 8002dc4:	1cfb      	adds	r3, r7, #3
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	2301      	movs	r3, #1
 8002dca:	221c      	movs	r2, #28
 8002dcc:	21d0      	movs	r1, #208	@ 0xd0
 8002dce:	4803      	ldr	r0, [pc, #12]	@ (8002ddc <initIMU+0xc8>)
 8002dd0:	f003 f8ae 	bl	8005f30 <HAL_I2C_Mem_Write>


  //printf("IMU Initialized\n\r");


}
 8002dd4:	bf00      	nop
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	20000694 	.word	0x20000694

08002de0 <transmit_imu_data>:
 * @param imu_data The IMU data to be transmitted.
 * @param imu_type The type of IMU.
 * @param dimension The dimension of the IMU data.
 */
void transmit_imu_data(uint64_t current_timestamp, uint8_t* imu_data, char imu_type, char dimension)
{
 8002de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002de2:	b08d      	sub	sp, #52	@ 0x34
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
 8002dec:	70fb      	strb	r3, [r7, #3]
    char imu_buffer[IMU_MESSAGE_LEN];

    /* Timestamp */
    for (uint8_t i = 0; i < 8; i++) {
 8002dee:	2300      	movs	r3, #0
 8002df0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002df4:	e020      	b.n	8002e38 <transmit_imu_data+0x58>
      imu_buffer[7 - i] = (char) TIMESTAMP_BYTE(i, current_timestamp);
 8002df6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002dfa:	00d9      	lsls	r1, r3, #3
 8002dfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e00:	f1c1 0620 	rsb	r6, r1, #32
 8002e04:	f1a1 0020 	sub.w	r0, r1, #32
 8002e08:	fa22 f401 	lsr.w	r4, r2, r1
 8002e0c:	fa03 f606 	lsl.w	r6, r3, r6
 8002e10:	4334      	orrs	r4, r6
 8002e12:	fa23 f000 	lsr.w	r0, r3, r0
 8002e16:	4304      	orrs	r4, r0
 8002e18:	fa23 f501 	lsr.w	r5, r3, r1
 8002e1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002e20:	f1c3 0307 	rsb	r3, r3, #7
 8002e24:	b2e2      	uxtb	r2, r4
 8002e26:	3330      	adds	r3, #48	@ 0x30
 8002e28:	443b      	add	r3, r7
 8002e2a:	f803 2c1c 	strb.w	r2, [r3, #-28]
    for (uint8_t i = 0; i < 8; i++) {
 8002e2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002e32:	3301      	adds	r3, #1
 8002e34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002e38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002e3c:	2b07      	cmp	r3, #7
 8002e3e:	d9da      	bls.n	8002df6 <transmit_imu_data+0x16>
    }

    /* IMU ID */
    imu_buffer[8] = '@';
 8002e40:	2340      	movs	r3, #64	@ 0x40
 8002e42:	773b      	strb	r3, [r7, #28]

    /* IMU type and dimension */
    imu_buffer[9] = imu_type;
 8002e44:	78fb      	ldrb	r3, [r7, #3]
 8002e46:	777b      	strb	r3, [r7, #29]

    imu_buffer[10] = dimension;
 8002e48:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002e4c:	77bb      	strb	r3, [r7, #30]

    /* IMU data */
    for (int i = 0; i < 4; i++) {
 8002e4e:	2300      	movs	r3, #0
 8002e50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e52:	e00d      	b.n	8002e70 <transmit_imu_data+0x90>
	    imu_buffer[14 - i] = imu_data[i];
 8002e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	441a      	add	r2, r3
 8002e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e5c:	f1c3 030e 	rsb	r3, r3, #14
 8002e60:	7812      	ldrb	r2, [r2, #0]
 8002e62:	3330      	adds	r3, #48	@ 0x30
 8002e64:	443b      	add	r3, r7
 8002e66:	f803 2c1c 	strb.w	r2, [r3, #-28]
    for (int i = 0; i < 4; i++) {
 8002e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	ddee      	ble.n	8002e54 <transmit_imu_data+0x74>
    }

    /* New line and carriage return */
    imu_buffer[15] = '\r';
 8002e76:	230d      	movs	r3, #13
 8002e78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    imu_buffer[16] = '\n';
 8002e7c:	230a      	movs	r3, #10
 8002e7e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    HAL_UART_Transmit(&huart1, imu_buffer, sizeof(imu_buffer), 1000);
 8002e82:	f107 0114 	add.w	r1, r7, #20
 8002e86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e8a:	2211      	movs	r2, #17
 8002e8c:	4803      	ldr	r0, [pc, #12]	@ (8002e9c <transmit_imu_data+0xbc>)
 8002e8e:	f006 fbc1 	bl	8009614 <HAL_UART_Transmit>

    /* Convert imu_buffer to hex_string so it can be logged. MUST NOT USE strlen */
//    sd_append_as_hexnums(logfile, imu_buffer, IMU_MESSAGE_LEN);
}
 8002e92:	bf00      	nop
 8002e94:	3734      	adds	r7, #52	@ 0x34
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000858 	.word	0x20000858

08002ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ea6:	f001 fb41 	bl	800452c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002eaa:	f000 f841 	bl	8002f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002eae:	f7ff fdc3 	bl	8002a38 <MX_GPIO_Init>
  MX_CAN_Init();
 8002eb2:	f7fe f9f3 	bl	800129c <MX_CAN_Init>
  MX_SPI1_Init();
 8002eb6:	f001 f843 	bl	8003f40 <MX_SPI1_Init>
  MX_UART5_Init();
 8002eba:	f001 fa27 	bl	800430c <MX_UART5_Init>
  MX_I2C1_Init();
 8002ebe:	f7ff fe61 	bl	8002b84 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002ec2:	f7ff fe8d 	bl	8002be0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8002ec6:	f001 fa4b 	bl	8004360 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8002eca:	f000 fe0d 	bl	8003ae8 <MX_RTC_Init>
  MX_FATFS_Init();
 8002ece:	f006 fd21 	bl	8009914 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  DebugIO_Init(&huart5);
 8002ed2:	4813      	ldr	r0, [pc, #76]	@ (8002f20 <main+0x80>)
 8002ed4:	f7fe fb16 	bl	8001504 <DebugIO_Init>
  initIMU();
 8002ed8:	f7ff ff1c 	bl	8002d14 <initIMU>

  // Sync with RTC if date = Jan 1 2000 or GPIO is set to high
  RTC_DateTypeDef curr_date;
  RTC_TimeTypeDef curr_time;
  HAL_RTC_GetDate(&hrtc, &curr_date, RTC_FORMAT_BIN);
 8002edc:	1d3b      	adds	r3, r7, #4
 8002ede:	2200      	movs	r2, #0
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4810      	ldr	r0, [pc, #64]	@ (8002f24 <main+0x84>)
 8002ee4:	f005 f9c2 	bl	800826c <HAL_RTC_GetDate>
  /* Sync the RTC with GPS if date is Jan 1, 2000 */
  if ((curr_date.Month == RTC_MONTH_JANUARY && curr_date.Date == 1 && curr_date.Year == 0) || HAL_GPIO_ReadPin(RTC_SYNC_GPIO_Port, RTC_SYNC_Pin) == GPIO_PIN_SET) {
 8002ee8:	797b      	ldrb	r3, [r7, #5]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d105      	bne.n	8002efa <main+0x5a>
 8002eee:	79bb      	ldrb	r3, [r7, #6]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d102      	bne.n	8002efa <main+0x5a>
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d006      	beq.n	8002f08 <main+0x68>
 8002efa:	2104      	movs	r1, #4
 8002efc:	480a      	ldr	r0, [pc, #40]	@ (8002f28 <main+0x88>)
 8002efe:	f002 fc1f 	bl	8005740 <HAL_GPIO_ReadPin>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d104      	bne.n	8002f12 <main+0x72>
      Sync_RTC_With_GPS();
 8002f08:	f000 fe5c 	bl	8003bc4 <Sync_RTC_With_GPS>
      g_tel_diagnostics.rtc_reset = true;
 8002f0c:	4b07      	ldr	r3, [pc, #28]	@ (8002f2c <main+0x8c>)
 8002f0e:	2201      	movs	r2, #1
 8002f10:	701a      	strb	r2, [r3, #0]
//  sd_append(logfile, startup_message);

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002f12:	f7ff f835 	bl	8001f80 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002f16:	f006 fdea 	bl	8009aee <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002f1a:	bf00      	nop
 8002f1c:	e7fd      	b.n	8002f1a <main+0x7a>
 8002f1e:	bf00      	nop
 8002f20:	20000810 	.word	0x20000810
 8002f24:	20000754 	.word	0x20000754
 8002f28:	40010800 	.word	0x40010800
 8002f2c:	200006e8 	.word	0x200006e8

08002f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b096      	sub	sp, #88	@ 0x58
 8002f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f36:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f3a:	2228      	movs	r2, #40	@ 0x28
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f00b f891 	bl	800e066 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f44:	f107 031c 	add.w	r3, r7, #28
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f54:	1d3b      	adds	r3, r7, #4
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	605a      	str	r2, [r3, #4]
 8002f5c:	609a      	str	r2, [r3, #8]
 8002f5e:	60da      	str	r2, [r3, #12]
 8002f60:	611a      	str	r2, [r3, #16]
 8002f62:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002f64:	2305      	movs	r3, #5
 8002f66:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f68:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f6c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002f72:	2301      	movs	r3, #1
 8002f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f76:	2301      	movs	r3, #1
 8002f78:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f82:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002f84:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002f88:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f8a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f004 f8ec 	bl	800716c <HAL_RCC_OscConfig>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002f9a:	f000 f83b 	bl	8003014 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f9e:	230f      	movs	r3, #15
 8002fa0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002faa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002fae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002fb4:	f107 031c 	add.w	r3, r7, #28
 8002fb8:	2102      	movs	r1, #2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f004 fb58 	bl	8007670 <HAL_RCC_ClockConfig>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002fc6:	f000 f825 	bl	8003014 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002fce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fd2:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fd4:	1d3b      	adds	r3, r7, #4
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f004 fd08 	bl	80079ec <HAL_RCCEx_PeriphCLKConfig>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002fe2:	f000 f817 	bl	8003014 <Error_Handler>
  }
}
 8002fe6:	bf00      	nop
 8002fe8:	3758      	adds	r7, #88	@ 0x58
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a04      	ldr	r2, [pc, #16]	@ (8003010 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d101      	bne.n	8003006 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003002:	f001 faa9 	bl	8004558 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40012c00 	.word	0x40012c00

08003014 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003018:	b672      	cpsid	i
}
 800301a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800301c:	bf00      	nop
 800301e:	e7fd      	b.n	800301c <Error_Handler+0x8>

08003020 <nmea_GPGGA>:
    else{
        return 0;
    }
}

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8003020:	b590      	push	{r4, r7, lr}
 8003022:	b0b7      	sub	sp, #220	@ 0xdc
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 800302a:	2300      	movs	r3, #0
 800302c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    memset(values, 0, sizeof(values));
 8003030:	f107 0320 	add.w	r3, r7, #32
 8003034:	2264      	movs	r2, #100	@ 0x64
 8003036:	2100      	movs	r1, #0
 8003038:	4618      	mov	r0, r3
 800303a:	f00b f814 	bl	800e066 <memset>
    char *marker = strtok(inputString, ",");
 800303e:	49c5      	ldr	r1, [pc, #788]	@ (8003354 <nmea_GPGGA+0x334>)
 8003040:	6838      	ldr	r0, [r7, #0]
 8003042:	f00b f84b 	bl	800e0dc <strtok>
 8003046:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 800304a:	e027      	b.n	800309c <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 800304c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8003050:	f7fd f8f8 	bl	8000244 <strlen>
 8003054:	4603      	mov	r3, r0
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	f8d7 40d4 	ldr.w	r4, [r7, #212]	@ 0xd4
 800305c:	1c63      	adds	r3, r4, #1
 800305e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003062:	4610      	mov	r0, r2
 8003064:	f009 fad2 	bl	800c60c <malloc>
 8003068:	4603      	mov	r3, r0
 800306a:	461a      	mov	r2, r3
 800306c:	00a3      	lsls	r3, r4, #2
 800306e:	33d8      	adds	r3, #216	@ 0xd8
 8003070:	443b      	add	r3, r7
 8003072:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8003076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800307a:	3b01      	subs	r3, #1
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	33d8      	adds	r3, #216	@ 0xd8
 8003080:	443b      	add	r3, r7
 8003082:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8003086:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800308a:	4618      	mov	r0, r3
 800308c:	f00b fed9 	bl	800ee42 <strcpy>
        marker = strtok(NULL, ",");
 8003090:	49b0      	ldr	r1, [pc, #704]	@ (8003354 <nmea_GPGGA+0x334>)
 8003092:	2000      	movs	r0, #0
 8003094:	f00b f822 	bl	800e0dc <strtok>
 8003098:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 800309c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1d3      	bne.n	800304c <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 80030a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    char latSide = values[3][0];
 80030ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	332c      	adds	r3, #44	@ 0x2c
 80030b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ba:	4611      	mov	r1, r2
 80030bc:	4618      	mov	r0, r3
 80030be:	f00b fec0 	bl	800ee42 <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 80030c2:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 80030c6:	2b53      	cmp	r3, #83	@ 0x53
 80030c8:	d004      	beq.n	80030d4 <nmea_GPGGA+0xb4>
 80030ca:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 80030ce:	2b4e      	cmp	r3, #78	@ 0x4e
 80030d0:	f040 815f 	bne.w	8003392 <nmea_GPGGA+0x372>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 80030d4:	2300      	movs	r3, #0
 80030d6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80030da:	e010      	b.n	80030fe <nmea_GPGGA+0xde>
 80030dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80030e2:	4413      	add	r3, r2
 80030e4:	7819      	ldrb	r1, [r3, #0]
 80030e6:	f107 021c 	add.w	r2, r7, #28
 80030ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80030ee:	4413      	add	r3, r2
 80030f0:	460a      	mov	r2, r1
 80030f2:	701a      	strb	r2, [r3, #0]
 80030f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80030f8:	3301      	adds	r3, #1
 80030fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80030fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003102:	2b01      	cmp	r3, #1
 8003104:	ddea      	ble.n	80030dc <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8003106:	2300      	movs	r3, #0
 8003108:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800310c:	e011      	b.n	8003132 <nmea_GPGGA+0x112>
 800310e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003110:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003114:	3302      	adds	r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	7819      	ldrb	r1, [r3, #0]
 800311a:	f107 0214 	add.w	r2, r7, #20
 800311e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003122:	4413      	add	r3, r2
 8003124:	460a      	mov	r2, r1
 8003126:	701a      	strb	r2, [r3, #0]
 8003128:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800312c:	3301      	adds	r3, #1
 800312e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003132:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003136:	2b05      	cmp	r3, #5
 8003138:	dde9      	ble.n	800310e <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 800313a:	f107 031c 	add.w	r3, r7, #28
 800313e:	220a      	movs	r2, #10
 8003140:	2100      	movs	r1, #0
 8003142:	4618      	mov	r0, r3
 8003144:	f00a f9f0 	bl	800d528 <strtol>
 8003148:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 800314c:	f107 0314 	add.w	r3, r7, #20
 8003150:	2100      	movs	r1, #0
 8003152:	4618      	mov	r0, r3
 8003154:	f00a f914 	bl	800d380 <strtof>
 8003158:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 800315c:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8003160:	f7fd fe36 	bl	8000dd0 <__aeabi_i2f>
 8003164:	4604      	mov	r4, r0
 8003166:	497c      	ldr	r1, [pc, #496]	@ (8003358 <nmea_GPGGA+0x338>)
 8003168:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800316c:	f7fd ff38 	bl	8000fe0 <__aeabi_fdiv>
 8003170:	4603      	mov	r3, r0
 8003172:	4619      	mov	r1, r3
 8003174:	4620      	mov	r0, r4
 8003176:	f7fd fd77 	bl	8000c68 <__addsf3>
 800317a:	4603      	mov	r3, r0
 800317c:	4618      	mov	r0, r3
 800317e:	f7fd f9cd 	bl	800051c <__aeabi_f2d>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 800318a:	2300      	movs	r3, #0
 800318c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003190:	e010      	b.n	80031b4 <nmea_GPGGA+0x194>
 8003192:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003194:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003198:	4413      	add	r3, r2
 800319a:	7819      	ldrb	r1, [r3, #0]
 800319c:	f107 0210 	add.w	r2, r7, #16
 80031a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031a4:	4413      	add	r3, r2
 80031a6:	460a      	mov	r2, r1
 80031a8:	701a      	strb	r2, [r3, #0]
 80031aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031ae:	3301      	adds	r3, #1
 80031b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80031b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	ddea      	ble.n	8003192 <nmea_GPGGA+0x172>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 80031bc:	2300      	movs	r3, #0
 80031be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031c2:	e011      	b.n	80031e8 <nmea_GPGGA+0x1c8>
 80031c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031ca:	3303      	adds	r3, #3
 80031cc:	4413      	add	r3, r2
 80031ce:	7819      	ldrb	r1, [r3, #0]
 80031d0:	f107 0208 	add.w	r2, r7, #8
 80031d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031d8:	4413      	add	r3, r2
 80031da:	460a      	mov	r2, r1
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031e2:	3301      	adds	r3, #1
 80031e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031ec:	2b05      	cmp	r3, #5
 80031ee:	dde9      	ble.n	80031c4 <nmea_GPGGA+0x1a4>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 80031f0:	f107 0310 	add.w	r3, r7, #16
 80031f4:	220a      	movs	r2, #10
 80031f6:	2100      	movs	r1, #0
 80031f8:	4618      	mov	r0, r3
 80031fa:	f00a f995 	bl	800d528 <strtol>
 80031fe:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8003202:	f107 0308 	add.w	r3, r7, #8
 8003206:	2100      	movs	r1, #0
 8003208:	4618      	mov	r0, r3
 800320a:	f00a f8b9 	bl	800d380 <strtof>
 800320e:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8003212:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003216:	f7fd fddb 	bl	8000dd0 <__aeabi_i2f>
 800321a:	4604      	mov	r4, r0
 800321c:	494e      	ldr	r1, [pc, #312]	@ (8003358 <nmea_GPGGA+0x338>)
 800321e:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8003222:	f7fd fedd 	bl	8000fe0 <__aeabi_fdiv>
 8003226:	4603      	mov	r3, r0
 8003228:	4619      	mov	r1, r3
 800322a:	4620      	mov	r0, r4
 800322c:	f7fd fd1c 	bl	8000c68 <__addsf3>
 8003230:	4603      	mov	r3, r0
 8003232:	4618      	mov	r0, r3
 8003234:	f7fd f972 	bl	800051c <__aeabi_f2d>
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800324c:	f7fd fc26 	bl	8000a9c <__aeabi_dcmpeq>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d17a      	bne.n	800334c <nmea_GPGGA+0x32c>
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8003262:	f7fd fc1b 	bl	8000a9c <__aeabi_dcmpeq>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d16f      	bne.n	800334c <nmea_GPGGA+0x32c>
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	4b3a      	ldr	r3, [pc, #232]	@ (800335c <nmea_GPGGA+0x33c>)
 8003272:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8003276:	f7fd fc1b 	bl	8000ab0 <__aeabi_dcmplt>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d065      	beq.n	800334c <nmea_GPGGA+0x32c>
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	4b36      	ldr	r3, [pc, #216]	@ (8003360 <nmea_GPGGA+0x340>)
 8003286:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800328a:	f7fd fc11 	bl	8000ab0 <__aeabi_dcmplt>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d05b      	beq.n	800334c <nmea_GPGGA+0x32c>
            gps_data->latitude = lat_deg;
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800329a:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f897 20b6 	ldrb.w	r2, [r7, #182]	@ 0xb6
 80032a4:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80032ac:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 80032b6:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 80032b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032ba:	2100      	movs	r1, #0
 80032bc:	4618      	mov	r0, r3
 80032be:	f00a f85f 	bl	800d380 <strtof>
 80032c2:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 80032c6:	f04f 0100 	mov.w	r1, #0
 80032ca:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80032ce:	f7fd ff67 	bl	80011a0 <__aeabi_fcmpeq>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d002      	beq.n	80032de <nmea_GPGGA+0x2be>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	e001      	b.n	80032e2 <nmea_GPGGA+0x2c2>
 80032de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 80032e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032e8:	220a      	movs	r2, #10
 80032ea:	2100      	movs	r1, #0
 80032ec:	4618      	mov	r0, r3
 80032ee:	f00a f91b 	bl	800d528 <strtol>
 80032f2:	4602      	mov	r2, r0
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	625a      	str	r2, [r3, #36]	@ 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 80032f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032fa:	220a      	movs	r2, #10
 80032fc:	2100      	movs	r1, #0
 80032fe:	4618      	mov	r0, r3
 8003300:	f00a f912 	bl	800d528 <strtol>
 8003304:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8003308:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800330c:	2b00      	cmp	r3, #0
 800330e:	bfcc      	ite	gt
 8003310:	2301      	movgt	r3, #1
 8003312:	2300      	movle	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	461a      	mov	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	629a      	str	r2, [r3, #40]	@ 0x28

            float hdop = strtof(values[8], NULL);
 800331c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800331e:	2100      	movs	r1, #0
 8003320:	4618      	mov	r0, r3
 8003322:	f00a f82d 	bl	800d380 <strtof>
 8003326:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 800332a:	f04f 0100 	mov.w	r1, #0
 800332e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8003332:	f7fd ff35 	bl	80011a0 <__aeabi_fcmpeq>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <nmea_GPGGA+0x322>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	e001      	b.n	8003346 <nmea_GPGGA+0x326>
 8003342:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 800334a:	e022      	b.n	8003392 <nmea_GPGGA+0x372>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 800334c:	2300      	movs	r3, #0
 800334e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003352:	e016      	b.n	8003382 <nmea_GPGGA+0x362>
 8003354:	080120e8 	.word	0x080120e8
 8003358:	42700000 	.word	0x42700000
 800335c:	40568000 	.word	0x40568000
 8003360:	40668000 	.word	0x40668000
 8003364:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	33d8      	adds	r3, #216	@ 0xd8
 800336c:	443b      	add	r3, r7
 800336e:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8003372:	4618      	mov	r0, r3
 8003374:	f009 f952 	bl	800c61c <free>
 8003378:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800337c:	3301      	adds	r3, #1
 800337e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003382:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003386:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800338a:	429a      	cmp	r2, r3
 800338c:	dbea      	blt.n	8003364 <nmea_GPGGA+0x344>
            return 0;
 800338e:	2300      	movs	r3, #0
 8003390:	e019      	b.n	80033c6 <nmea_GPGGA+0x3a6>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 8003392:	2300      	movs	r3, #0
 8003394:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003398:	e00e      	b.n	80033b8 <nmea_GPGGA+0x398>
 800339a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	33d8      	adds	r3, #216	@ 0xd8
 80033a2:	443b      	add	r3, r7
 80033a4:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f009 f937 	bl	800c61c <free>
 80033ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80033b2:	3301      	adds	r3, #1
 80033b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80033bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033c0:	429a      	cmp	r2, r3
 80033c2:	dbea      	blt.n	800339a <nmea_GPGGA+0x37a>
    return 1;
 80033c4:	2301      	movs	r3, #1
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	37dc      	adds	r7, #220	@ 0xdc
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd90      	pop	{r4, r7, pc}
 80033ce:	bf00      	nop

080033d0 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 80033d0:	b590      	push	{r4, r7, lr}
 80033d2:	b0a3      	sub	sp, #140	@ 0x8c
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80033da:	2300      	movs	r3, #0
 80033dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    memset(values, 0, sizeof(values));
 80033e0:	f107 030c 	add.w	r3, r7, #12
 80033e4:	2264      	movs	r2, #100	@ 0x64
 80033e6:	2100      	movs	r1, #0
 80033e8:	4618      	mov	r0, r3
 80033ea:	f00a fe3c 	bl	800e066 <memset>
    char *marker = strtok(inputString, ",");
 80033ee:	493b      	ldr	r1, [pc, #236]	@ (80034dc <nmea_GPGSA+0x10c>)
 80033f0:	6838      	ldr	r0, [r7, #0]
 80033f2:	f00a fe73 	bl	800e0dc <strtok>
 80033f6:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while (marker != NULL) {
 80033fa:	e027      	b.n	800344c <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 80033fc:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003400:	f7fc ff20 	bl	8000244 <strlen>
 8003404:	4603      	mov	r3, r0
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 800340c:	1c63      	adds	r3, r4, #1
 800340e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003412:	4610      	mov	r0, r2
 8003414:	f009 f8fa 	bl	800c60c <malloc>
 8003418:	4603      	mov	r3, r0
 800341a:	461a      	mov	r2, r3
 800341c:	00a3      	lsls	r3, r4, #2
 800341e:	3388      	adds	r3, #136	@ 0x88
 8003420:	443b      	add	r3, r7
 8003422:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 8003426:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800342a:	3b01      	subs	r3, #1
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	3388      	adds	r3, #136	@ 0x88
 8003430:	443b      	add	r3, r7
 8003432:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8003436:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800343a:	4618      	mov	r0, r3
 800343c:	f00b fd01 	bl	800ee42 <strcpy>
        marker = strtok(NULL, ",");
 8003440:	4926      	ldr	r1, [pc, #152]	@ (80034dc <nmea_GPGSA+0x10c>)
 8003442:	2000      	movs	r0, #0
 8003444:	f00a fe4a 	bl	800e0dc <strtok>
 8003448:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while (marker != NULL) {
 800344c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1d3      	bne.n	80033fc <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	220a      	movs	r2, #10
 8003458:	2100      	movs	r1, #0
 800345a:	4618      	mov	r0, r3
 800345c:	f00a f864 	bl	800d528 <strtol>
 8003460:	6738      	str	r0, [r7, #112]	@ 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 8003462:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003464:	2b01      	cmp	r3, #1
 8003466:	bfcc      	ite	gt
 8003468:	2301      	movgt	r3, #1
 800346a:	2300      	movle	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	461a      	mov	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	629a      	str	r2, [r3, #40]	@ 0x28
    int satelliteCount = 0;
 8003474:	2300      	movs	r3, #0
 8003476:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for(int i=3; i<15; i++){
 8003478:	2303      	movs	r3, #3
 800347a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800347c:	e00e      	b.n	800349c <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 800347e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	3388      	adds	r3, #136	@ 0x88
 8003484:	443b      	add	r3, r7
 8003486:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <nmea_GPGSA+0xc6>
            satelliteCount++;
 8003490:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003492:	3301      	adds	r3, #1
 8003494:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for(int i=3; i<15; i++){
 8003496:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003498:	3301      	adds	r3, #1
 800349a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800349c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800349e:	2b0e      	cmp	r3, #14
 80034a0:	dded      	ble.n	800347e <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80034a6:	625a      	str	r2, [r3, #36]	@ 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 80034a8:	2300      	movs	r3, #0
 80034aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80034ac:	e00b      	b.n	80034c6 <nmea_GPGSA+0xf6>
 80034ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	3388      	adds	r3, #136	@ 0x88
 80034b4:	443b      	add	r3, r7
 80034b6:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f009 f8ae 	bl	800c61c <free>
 80034c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034c2:	3301      	adds	r3, #1
 80034c4:	677b      	str	r3, [r7, #116]	@ 0x74
 80034c6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80034c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034cc:	429a      	cmp	r2, r3
 80034ce:	dbee      	blt.n	80034ae <nmea_GPGSA+0xde>
    return 1;
 80034d0:	2301      	movs	r3, #1
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	378c      	adds	r7, #140	@ 0x8c
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd90      	pop	{r4, r7, pc}
 80034da:	bf00      	nop
 80034dc:	080120e8 	.word	0x080120e8

080034e0 <nmea_GPGLL>:



int nmea_GPGLL(GPS *gps_data, char*inputString) {
 80034e0:	b590      	push	{r4, r7, lr}
 80034e2:	b0b7      	sub	sp, #220	@ 0xdc
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]

    char *values[25];
    int counter = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    memset(values, 0, sizeof(values));
 80034f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034f4:	2264      	movs	r2, #100	@ 0x64
 80034f6:	2100      	movs	r1, #0
 80034f8:	4618      	mov	r0, r3
 80034fa:	f00a fdb4 	bl	800e066 <memset>
    char *marker = strtok(inputString, ",");
 80034fe:	49b0      	ldr	r1, [pc, #704]	@ (80037c0 <nmea_GPGLL+0x2e0>)
 8003500:	6838      	ldr	r0, [r7, #0]
 8003502:	f00a fdeb 	bl	800e0dc <strtok>
 8003506:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 800350a:	e027      	b.n	800355c <nmea_GPGLL+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 800350c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8003510:	f7fc fe98 	bl	8000244 <strlen>
 8003514:	4603      	mov	r3, r0
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	f8d7 40d4 	ldr.w	r4, [r7, #212]	@ 0xd4
 800351c:	1c63      	adds	r3, r4, #1
 800351e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003522:	4610      	mov	r0, r2
 8003524:	f009 f872 	bl	800c60c <malloc>
 8003528:	4603      	mov	r3, r0
 800352a:	461a      	mov	r2, r3
 800352c:	00a3      	lsls	r3, r4, #2
 800352e:	33d8      	adds	r3, #216	@ 0xd8
 8003530:	443b      	add	r3, r7
 8003532:	f843 2cb4 	str.w	r2, [r3, #-180]
        strcpy(values[counter - 1], marker);
 8003536:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800353a:	3b01      	subs	r3, #1
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	33d8      	adds	r3, #216	@ 0xd8
 8003540:	443b      	add	r3, r7
 8003542:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8003546:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800354a:	4618      	mov	r0, r3
 800354c:	f00b fc79 	bl	800ee42 <strcpy>
        marker = strtok(NULL, ",");
 8003550:	499b      	ldr	r1, [pc, #620]	@ (80037c0 <nmea_GPGLL+0x2e0>)
 8003552:	2000      	movs	r0, #0
 8003554:	f00a fdc2 	bl	800e0dc <strtok>
 8003558:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 800355c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1d3      	bne.n	800350c <nmea_GPGLL+0x2c>
    }
    char latSide = values[2][0];
 8003564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    if (latSide == 'S' || latSide == 'N') { //check if data is sorta intact
 800356c:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8003570:	2b53      	cmp	r3, #83	@ 0x53
 8003572:	d004      	beq.n	800357e <nmea_GPGLL+0x9e>
 8003574:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8003578:	2b4e      	cmp	r3, #78	@ 0x4e
 800357a:	f040 811c 	bne.w	80037b6 <nmea_GPGLL+0x2d6>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[1][z];
 800357e:	2300      	movs	r3, #0
 8003580:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003584:	e010      	b.n	80035a8 <nmea_GPGLL+0xc8>
 8003586:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003588:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800358c:	4413      	add	r3, r2
 800358e:	7819      	ldrb	r1, [r3, #0]
 8003590:	f107 0220 	add.w	r2, r7, #32
 8003594:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003598:	4413      	add	r3, r2
 800359a:	460a      	mov	r2, r1
 800359c:	701a      	strb	r2, [r3, #0]
 800359e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80035a2:	3301      	adds	r3, #1
 80035a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80035a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	ddea      	ble.n	8003586 <nmea_GPGLL+0xa6>
        for (int z = 0; z < 6; z++) lat_m[z] = values[1][z + 2];
 80035b0:	2300      	movs	r3, #0
 80035b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035b6:	e011      	b.n	80035dc <nmea_GPGLL+0xfc>
 80035b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80035be:	3302      	adds	r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	7819      	ldrb	r1, [r3, #0]
 80035c4:	f107 0218 	add.w	r2, r7, #24
 80035c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80035cc:	4413      	add	r3, r2
 80035ce:	460a      	mov	r2, r1
 80035d0:	701a      	strb	r2, [r3, #0]
 80035d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80035d6:	3301      	adds	r3, #1
 80035d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80035e0:	2b05      	cmp	r3, #5
 80035e2:	dde9      	ble.n	80035b8 <nmea_GPGLL+0xd8>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 80035e4:	f107 0320 	add.w	r3, r7, #32
 80035e8:	220a      	movs	r2, #10
 80035ea:	2100      	movs	r1, #0
 80035ec:	4618      	mov	r0, r3
 80035ee:	f009 ff9b 	bl	800d528 <strtol>
 80035f2:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 80035f6:	f107 0318 	add.w	r3, r7, #24
 80035fa:	2100      	movs	r1, #0
 80035fc:	4618      	mov	r0, r3
 80035fe:	f009 febf 	bl	800d380 <strtof>
 8003602:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8003606:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800360a:	f7fd fbe1 	bl	8000dd0 <__aeabi_i2f>
 800360e:	4604      	mov	r4, r0
 8003610:	496c      	ldr	r1, [pc, #432]	@ (80037c4 <nmea_GPGLL+0x2e4>)
 8003612:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8003616:	f7fd fce3 	bl	8000fe0 <__aeabi_fdiv>
 800361a:	4603      	mov	r3, r0
 800361c:	4619      	mov	r1, r3
 800361e:	4620      	mov	r0, r4
 8003620:	f7fd fb22 	bl	8000c68 <__addsf3>
 8003624:	4603      	mov	r3, r0
 8003626:	4618      	mov	r0, r3
 8003628:	f7fc ff78 	bl	800051c <__aeabi_f2d>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

        char lon_d[3];
        char lon_m[7];
        char lonSide = values[4][0];
 8003634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
        for (int z = 0; z < 3; z++) lon_d[z] = values[3][z];
 800363c:	2300      	movs	r3, #0
 800363e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003642:	e010      	b.n	8003666 <nmea_GPGLL+0x186>
 8003644:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003646:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800364a:	4413      	add	r3, r2
 800364c:	7819      	ldrb	r1, [r3, #0]
 800364e:	f107 0214 	add.w	r2, r7, #20
 8003652:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003656:	4413      	add	r3, r2
 8003658:	460a      	mov	r2, r1
 800365a:	701a      	strb	r2, [r3, #0]
 800365c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003660:	3301      	adds	r3, #1
 8003662:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003666:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800366a:	2b02      	cmp	r3, #2
 800366c:	ddea      	ble.n	8003644 <nmea_GPGLL+0x164>
        for (int z = 0; z < 6; z++) lon_m[z] = values[3][z + 3];
 800366e:	2300      	movs	r3, #0
 8003670:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003674:	e011      	b.n	800369a <nmea_GPGLL+0x1ba>
 8003676:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003678:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800367c:	3303      	adds	r3, #3
 800367e:	4413      	add	r3, r2
 8003680:	7819      	ldrb	r1, [r3, #0]
 8003682:	f107 020c 	add.w	r2, r7, #12
 8003686:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800368a:	4413      	add	r3, r2
 800368c:	460a      	mov	r2, r1
 800368e:	701a      	strb	r2, [r3, #0]
 8003690:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003694:	3301      	adds	r3, #1
 8003696:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800369a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800369e:	2b05      	cmp	r3, #5
 80036a0:	dde9      	ble.n	8003676 <nmea_GPGLL+0x196>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 80036a2:	f107 0314 	add.w	r3, r7, #20
 80036a6:	220a      	movs	r2, #10
 80036a8:	2100      	movs	r1, #0
 80036aa:	4618      	mov	r0, r3
 80036ac:	f009 ff3c 	bl	800d528 <strtol>
 80036b0:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
        float lon_min_strtof = strtof(lon_m, NULL);
 80036b4:	f107 030c 	add.w	r3, r7, #12
 80036b8:	2100      	movs	r1, #0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f009 fe60 	bl	800d380 <strtof>
 80036c0:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 80036c4:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 80036c8:	f7fd fb82 	bl	8000dd0 <__aeabi_i2f>
 80036cc:	4604      	mov	r4, r0
 80036ce:	493d      	ldr	r1, [pc, #244]	@ (80037c4 <nmea_GPGLL+0x2e4>)
 80036d0:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80036d4:	f7fd fc84 	bl	8000fe0 <__aeabi_fdiv>
 80036d8:	4603      	mov	r3, r0
 80036da:	4619      	mov	r1, r3
 80036dc:	4620      	mov	r0, r4
 80036de:	f7fd fac3 	bl	8000c68 <__addsf3>
 80036e2:	4603      	mov	r3, r0
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fc ff19 	bl	800051c <__aeabi_f2d>
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
        //confirm that we aren't on null island
        if(lon_deg_strtol == 0 || lon_min_strtof == 0 || lat_deg_strtol == 0 || lat_min_strtof == 0) {
 80036f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d015      	beq.n	8003726 <nmea_GPGLL+0x246>
 80036fa:	f04f 0100 	mov.w	r1, #0
 80036fe:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8003702:	f7fd fd4d 	bl	80011a0 <__aeabi_fcmpeq>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10c      	bne.n	8003726 <nmea_GPGLL+0x246>
 800370c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d008      	beq.n	8003726 <nmea_GPGLL+0x246>
 8003714:	f04f 0100 	mov.w	r1, #0
 8003718:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800371c:	f7fd fd40 	bl	80011a0 <__aeabi_fcmpeq>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d01a      	beq.n	800375c <nmea_GPGLL+0x27c>
            for(int i = 0; i<counter; i++) free(values[i]);
 8003726:	2300      	movs	r3, #0
 8003728:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800372c:	e00e      	b.n	800374c <nmea_GPGLL+0x26c>
 800372e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	33d8      	adds	r3, #216	@ 0xd8
 8003736:	443b      	add	r3, r7
 8003738:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 800373c:	4618      	mov	r0, r3
 800373e:	f008 ff6d 	bl	800c61c <free>
 8003742:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003746:	3301      	adds	r3, #1
 8003748:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800374c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003750:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003754:	429a      	cmp	r2, r3
 8003756:	dbea      	blt.n	800372e <nmea_GPGLL+0x24e>
            return 0;
 8003758:	2300      	movs	r3, #0
 800375a:	e02d      	b.n	80037b8 <nmea_GPGLL+0x2d8>
        }
        else{
            gps_data->latitude = lat_deg;
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8003762:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->longitude = lon_deg;
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800376c:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->latSide = latSide;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 8003776:	721a      	strb	r2, [r3, #8]
            gps_data->lonSide = lonSide;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 800377e:	761a      	strb	r2, [r3, #24]
            for(int i = 0; i<counter; i++) free(values[i]);
 8003780:	2300      	movs	r3, #0
 8003782:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003786:	e00e      	b.n	80037a6 <nmea_GPGLL+0x2c6>
 8003788:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	33d8      	adds	r3, #216	@ 0xd8
 8003790:	443b      	add	r3, r7
 8003792:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8003796:	4618      	mov	r0, r3
 8003798:	f008 ff40 	bl	800c61c <free>
 800379c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80037a0:	3301      	adds	r3, #1
 80037a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80037aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037ae:	429a      	cmp	r2, r3
 80037b0:	dbea      	blt.n	8003788 <nmea_GPGLL+0x2a8>
            return 1;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <nmea_GPGLL+0x2d8>
        }
    }
    else return 0;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	37dc      	adds	r7, #220	@ 0xdc
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd90      	pop	{r4, r7, pc}
 80037c0:	080120e8 	.word	0x080120e8
 80037c4:	42700000 	.word	0x42700000

080037c8 <nmea_GPRMC>:


int nmea_GPRMC(GPS *gps_data, char* inputString) {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b0a0      	sub	sp, #128	@ 0x80
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]

    char *values[25];
    int counter = 0;
 80037d2:	2300      	movs	r3, #0
 80037d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    memset(values, 0, sizeof(values));
 80037d6:	f107 0308 	add.w	r3, r7, #8
 80037da:	2264      	movs	r2, #100	@ 0x64
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f00a fc41 	bl	800e066 <memset>
    char *start = inputString;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	67bb      	str	r3, [r7, #120]	@ 0x78
    char *end;

    // Loop until the end of the string is reached.
    while (start != NULL && *start != '\0') {
 80037e8:	e058      	b.n	800389c <nmea_GPRMC+0xd4>
        end = strchr(start, ',');
 80037ea:	212c      	movs	r1, #44	@ 0x2c
 80037ec:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80037ee:	f00a fc42 	bl	800e076 <strchr>
 80037f2:	6778      	str	r0, [r7, #116]	@ 0x74
        if (end == NULL) {
 80037f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <nmea_GPRMC+0x40>
            // Last token reached.
            end = start + strlen(start);
 80037fa:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80037fc:	f7fc fd22 	bl	8000244 <strlen>
 8003800:	4602      	mov	r2, r0
 8003802:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003804:	4413      	add	r3, r2
 8003806:	677b      	str	r3, [r7, #116]	@ 0x74
        }

        if (end == start) {
 8003808:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800380a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800380c:	429a      	cmp	r2, r3
 800380e:	d113      	bne.n	8003838 <nmea_GPRMC+0x70>
            // Empty field found.
            values[counter] = malloc(1); // Allocate space for a single character
 8003810:	2001      	movs	r0, #1
 8003812:	f008 fefb 	bl	800c60c <malloc>
 8003816:	4603      	mov	r3, r0
 8003818:	461a      	mov	r2, r3
 800381a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	3380      	adds	r3, #128	@ 0x80
 8003820:	443b      	add	r3, r7
 8003822:	f843 2c78 	str.w	r2, [r3, #-120]
            values[counter][0] = '\0';   // Set it to the empty string
 8003826:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	3380      	adds	r3, #128	@ 0x80
 800382c:	443b      	add	r3, r7
 800382e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003832:	2200      	movs	r2, #0
 8003834:	701a      	strb	r2, [r3, #0]
 8003836:	e027      	b.n	8003888 <nmea_GPRMC+0xc0>
        } else {
            // Non-empty field found.
            values[counter] = malloc(end - start + 1); // Allocate space for the token
 8003838:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800383a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	3301      	adds	r3, #1
 8003840:	4618      	mov	r0, r3
 8003842:	f008 fee3 	bl	800c60c <malloc>
 8003846:	4603      	mov	r3, r0
 8003848:	461a      	mov	r2, r3
 800384a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	3380      	adds	r3, #128	@ 0x80
 8003850:	443b      	add	r3, r7
 8003852:	f843 2c78 	str.w	r2, [r3, #-120]
            strncpy(values[counter], start, end - start); // Copy the token
 8003856:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	3380      	adds	r3, #128	@ 0x80
 800385c:	443b      	add	r3, r7
 800385e:	f853 0c78 	ldr.w	r0, [r3, #-120]
 8003862:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003864:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	461a      	mov	r2, r3
 800386a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800386c:	f00a fc22 	bl	800e0b4 <strncpy>
            values[counter][end - start] = '\0'; // Null-terminate it
 8003870:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	3380      	adds	r3, #128	@ 0x80
 8003876:	443b      	add	r3, r7
 8003878:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800387c:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800387e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003880:	1a8a      	subs	r2, r1, r2
 8003882:	4413      	add	r3, r2
 8003884:	2200      	movs	r2, #0
 8003886:	701a      	strb	r2, [r3, #0]
        }

        counter++;
 8003888:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800388a:	3301      	adds	r3, #1
 800388c:	67fb      	str	r3, [r7, #124]	@ 0x7c
        if (*end == '\0') {
 800388e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <nmea_GPRMC+0xe4>
            // End of the string reached.
            break;
        }
        start = end + 1; // Move to the start of the next token.
 8003896:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003898:	3301      	adds	r3, #1
 800389a:	67bb      	str	r3, [r7, #120]	@ 0x78
    while (start != NULL && *start != '\0') {
 800389c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d005      	beq.n	80038ae <nmea_GPRMC+0xe6>
 80038a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d19f      	bne.n	80037ea <nmea_GPRMC+0x22>
 80038aa:	e000      	b.n	80038ae <nmea_GPRMC+0xe6>
            break;
 80038ac:	bf00      	nop
    }

    // ... (Rest of your code for checking and handling the date and freeing memory)

    // Make sure to check if the date was successfully extracted
    if (counter > 9 && strlen(values[9]) == 6) {
 80038ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038b0:	2b09      	cmp	r3, #9
 80038b2:	dd2a      	ble.n	800390a <nmea_GPRMC+0x142>
 80038b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fc fcc4 	bl	8000244 <strlen>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b06      	cmp	r3, #6
 80038c0:	d123      	bne.n	800390a <nmea_GPRMC+0x142>
        strncpy(gps_data->date, values[9], 6);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3336      	adds	r3, #54	@ 0x36
 80038c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038c8:	2206      	movs	r2, #6
 80038ca:	4618      	mov	r0, r3
 80038cc:	f00a fbf2 	bl	800e0b4 <strncpy>
        gps_data->date[6] = '\0';
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        // Free allocated memory
        for (int i = 0; i < counter; i++) free(values[i]);
 80038d8:	2300      	movs	r3, #0
 80038da:	673b      	str	r3, [r7, #112]	@ 0x70
 80038dc:	e00b      	b.n	80038f6 <nmea_GPRMC+0x12e>
 80038de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	3380      	adds	r3, #128	@ 0x80
 80038e4:	443b      	add	r3, r7
 80038e6:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f008 fe96 	bl	800c61c <free>
 80038f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038f2:	3301      	adds	r3, #1
 80038f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80038f6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80038f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038fa:	429a      	cmp	r2, r3
 80038fc:	dbef      	blt.n	80038de <nmea_GPRMC+0x116>
        gps_data->RMC_Flag = 1;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        return 1; // Success
 8003906:	2301      	movs	r3, #1
 8003908:	e013      	b.n	8003932 <nmea_GPRMC+0x16a>
    } else {
        // Free allocated memory before returning
        for (int i = 0; i < counter; i++) free(values[i]);
 800390a:	2300      	movs	r3, #0
 800390c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800390e:	e00b      	b.n	8003928 <nmea_GPRMC+0x160>
 8003910:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	3380      	adds	r3, #128	@ 0x80
 8003916:	443b      	add	r3, r7
 8003918:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800391c:	4618      	mov	r0, r3
 800391e:	f008 fe7d 	bl	800c61c <free>
 8003922:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003924:	3301      	adds	r3, #1
 8003926:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003928:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800392a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800392c:	429a      	cmp	r2, r3
 800392e:	dbef      	blt.n	8003910 <nmea_GPRMC+0x148>
        return 0; // Failure
 8003930:	2300      	movs	r3, #0
    }
}
 8003932:	4618      	mov	r0, r3
 8003934:	3780      	adds	r7, #128	@ 0x80
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 800393c:	b590      	push	{r4, r7, lr}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8003946:	223c      	movs	r2, #60	@ 0x3c
 8003948:	2100      	movs	r1, #0
 800394a:	485e      	ldr	r0, [pc, #376]	@ (8003ac4 <nmea_parse+0x188>)
 800394c:	f00a fb8b 	bl	800e066 <memset>
    char * token = strtok(buffer, "$"); // TODO: Check if buffer can be casted to a char * for strtok argument
 8003950:	495d      	ldr	r1, [pc, #372]	@ (8003ac8 <nmea_parse+0x18c>)
 8003952:	6838      	ldr	r0, [r7, #0]
 8003954:	f00a fbc2 	bl	800e0dc <strtok>
 8003958:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 800395a:	2300      	movs	r3, #0
 800395c:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 800395e:	e01d      	b.n	800399c <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8003960:	6978      	ldr	r0, [r7, #20]
 8003962:	f7fc fc6f 	bl	8000244 <strlen>
 8003966:	4603      	mov	r3, r0
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	693c      	ldr	r4, [r7, #16]
 800396c:	1c63      	adds	r3, r4, #1
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	4610      	mov	r0, r2
 8003972:	f008 fe4b 	bl	800c60c <malloc>
 8003976:	4603      	mov	r3, r0
 8003978:	461a      	mov	r2, r3
 800397a:	4b52      	ldr	r3, [pc, #328]	@ (8003ac4 <nmea_parse+0x188>)
 800397c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	3b01      	subs	r3, #1
 8003984:	4a4f      	ldr	r2, [pc, #316]	@ (8003ac4 <nmea_parse+0x188>)
 8003986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800398a:	6979      	ldr	r1, [r7, #20]
 800398c:	4618      	mov	r0, r3
 800398e:	f00b fa58 	bl	800ee42 <strcpy>
        token = strtok(NULL, "$");
 8003992:	494d      	ldr	r1, [pc, #308]	@ (8003ac8 <nmea_parse+0x18c>)
 8003994:	2000      	movs	r0, #0
 8003996:	f00a fba1 	bl	800e0dc <strtok>
 800399a:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1de      	bne.n	8003960 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 80039a2:	2300      	movs	r3, #0
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	e072      	b.n	8003a8e <nmea_parse+0x152>
       if(strstr(data[i], "\r\n")!=NULL){
 80039a8:	4a46      	ldr	r2, [pc, #280]	@ (8003ac4 <nmea_parse+0x188>)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b0:	4946      	ldr	r1, [pc, #280]	@ (8003acc <nmea_parse+0x190>)
 80039b2:	4618      	mov	r0, r3
 80039b4:	f00a fbee 	bl	800e194 <strstr>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d064      	beq.n	8003a88 <nmea_parse+0x14c>
           if(strstr(data[i], "GPGLL")!=NULL){
 80039be:	4a41      	ldr	r2, [pc, #260]	@ (8003ac4 <nmea_parse+0x188>)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c6:	4942      	ldr	r1, [pc, #264]	@ (8003ad0 <nmea_parse+0x194>)
 80039c8:	4618      	mov	r0, r3
 80039ca:	f00a fbe3 	bl	800e194 <strstr>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <nmea_parse+0xaa>
               nmea_GPGLL(gps_data, data[i]);
 80039d4:	4a3b      	ldr	r2, [pc, #236]	@ (8003ac4 <nmea_parse+0x188>)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039dc:	4619      	mov	r1, r3
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7ff fd7e 	bl	80034e0 <nmea_GPGLL>
 80039e4:	e050      	b.n	8003a88 <nmea_parse+0x14c>
           }
           else if(strstr(data[i], "GPGSA")!=NULL){
 80039e6:	4a37      	ldr	r2, [pc, #220]	@ (8003ac4 <nmea_parse+0x188>)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ee:	4939      	ldr	r1, [pc, #228]	@ (8003ad4 <nmea_parse+0x198>)
 80039f0:	4618      	mov	r0, r3
 80039f2:	f00a fbcf 	bl	800e194 <strstr>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d008      	beq.n	8003a0e <nmea_parse+0xd2>
               nmea_GPGSA(gps_data, data[i]);
 80039fc:	4a31      	ldr	r2, [pc, #196]	@ (8003ac4 <nmea_parse+0x188>)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a04:	4619      	mov	r1, r3
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7ff fce2 	bl	80033d0 <nmea_GPGSA>
 8003a0c:	e03c      	b.n	8003a88 <nmea_parse+0x14c>
           }
           else if(strstr(data[i], "GNGGA") != NULL || (strstr(data[i], "GPGGA"))!=NULL){
 8003a0e:	4a2d      	ldr	r2, [pc, #180]	@ (8003ac4 <nmea_parse+0x188>)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a16:	4930      	ldr	r1, [pc, #192]	@ (8003ad8 <nmea_parse+0x19c>)
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f00a fbbb 	bl	800e194 <strstr>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <nmea_parse+0xfe>
 8003a24:	4a27      	ldr	r2, [pc, #156]	@ (8003ac4 <nmea_parse+0x188>)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a2c:	492b      	ldr	r1, [pc, #172]	@ (8003adc <nmea_parse+0x1a0>)
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f00a fbb0 	bl	800e194 <strstr>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d008      	beq.n	8003a4c <nmea_parse+0x110>
               nmea_GPGGA(gps_data, data[i]);
 8003a3a:	4a22      	ldr	r2, [pc, #136]	@ (8003ac4 <nmea_parse+0x188>)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a42:	4619      	mov	r1, r3
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7ff faeb 	bl	8003020 <nmea_GPGGA>
 8003a4a:	e01d      	b.n	8003a88 <nmea_parse+0x14c>
           }
           else if(strstr(data[i], "GNRMC") != NULL || (strstr(data[i], "GPRMC"))!=NULL){
 8003a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac4 <nmea_parse+0x188>)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a54:	4922      	ldr	r1, [pc, #136]	@ (8003ae0 <nmea_parse+0x1a4>)
 8003a56:	4618      	mov	r0, r3
 8003a58:	f00a fb9c 	bl	800e194 <strstr>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10a      	bne.n	8003a78 <nmea_parse+0x13c>
 8003a62:	4a18      	ldr	r2, [pc, #96]	@ (8003ac4 <nmea_parse+0x188>)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a6a:	491e      	ldr	r1, [pc, #120]	@ (8003ae4 <nmea_parse+0x1a8>)
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f00a fb91 	bl	800e194 <strstr>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d007      	beq.n	8003a88 <nmea_parse+0x14c>
	       nmea_GPRMC(gps_data, data[i]);
 8003a78:	4a12      	ldr	r2, [pc, #72]	@ (8003ac4 <nmea_parse+0x188>)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a80:	4619      	mov	r1, r3
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff fea0 	bl	80037c8 <nmea_GPRMC>
    for(int i = 0; i<cnt; i++){
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	db88      	blt.n	80039a8 <nmea_parse+0x6c>
	   }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 8003a96:	2300      	movs	r3, #0
 8003a98:	60bb      	str	r3, [r7, #8]
 8003a9a:	e009      	b.n	8003ab0 <nmea_parse+0x174>
 8003a9c:	4a09      	ldr	r2, [pc, #36]	@ (8003ac4 <nmea_parse+0x188>)
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f008 fdb9 	bl	800c61c <free>
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	3301      	adds	r3, #1
 8003aae:	60bb      	str	r3, [r7, #8]
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	dbf1      	blt.n	8003a9c <nmea_parse+0x160>


}
 8003ab8:	bf00      	nop
 8003aba:	bf00      	nop
 8003abc:	371c      	adds	r7, #28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd90      	pop	{r4, r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000718 	.word	0x20000718
 8003ac8:	080120ec 	.word	0x080120ec
 8003acc:	080120f0 	.word	0x080120f0
 8003ad0:	080120f4 	.word	0x080120f4
 8003ad4:	080120fc 	.word	0x080120fc
 8003ad8:	08012104 	.word	0x08012104
 8003adc:	0801210c 	.word	0x0801210c
 8003ae0:	08012114 	.word	0x08012114
 8003ae4:	0801211c 	.word	0x0801211c

08003ae8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003aee:	1d3b      	adds	r3, r7, #4
 8003af0:	2100      	movs	r1, #0
 8003af2:	460a      	mov	r2, r1
 8003af4:	801a      	strh	r2, [r3, #0]
 8003af6:	460a      	mov	r2, r1
 8003af8:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8003afa:	2300      	movs	r3, #0
 8003afc:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003afe:	4b1d      	ldr	r3, [pc, #116]	@ (8003b74 <MX_RTC_Init+0x8c>)
 8003b00:	4a1d      	ldr	r2, [pc, #116]	@ (8003b78 <MX_RTC_Init+0x90>)
 8003b02:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8003b04:	4b1b      	ldr	r3, [pc, #108]	@ (8003b74 <MX_RTC_Init+0x8c>)
 8003b06:	f04f 32ff 	mov.w	r2, #4294967295
 8003b0a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8003b0c:	4b19      	ldr	r3, [pc, #100]	@ (8003b74 <MX_RTC_Init+0x8c>)
 8003b0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b12:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003b14:	4817      	ldr	r0, [pc, #92]	@ (8003b74 <MX_RTC_Init+0x8c>)
 8003b16:	f004 f8f7 	bl	8007d08 <HAL_RTC_Init>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8003b20:	f7ff fa78 	bl	8003014 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003b24:	2300      	movs	r3, #0
 8003b26:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003b30:	1d3b      	adds	r3, r7, #4
 8003b32:	2201      	movs	r2, #1
 8003b34:	4619      	mov	r1, r3
 8003b36:	480f      	ldr	r0, [pc, #60]	@ (8003b74 <MX_RTC_Init+0x8c>)
 8003b38:	f004 f972 	bl	8007e20 <HAL_RTC_SetTime>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8003b42:	f7ff fa67 	bl	8003014 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003b46:	2301      	movs	r3, #1
 8003b48:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8003b56:	463b      	mov	r3, r7
 8003b58:	2201      	movs	r2, #1
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4805      	ldr	r0, [pc, #20]	@ (8003b74 <MX_RTC_Init+0x8c>)
 8003b5e:	f004 facf 	bl	8008100 <HAL_RTC_SetDate>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8003b68:	f7ff fa54 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003b6c:	bf00      	nop
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	20000754 	.word	0x20000754
 8003b78:	40002800 	.word	0x40002800

08003b7c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a0b      	ldr	r2, [pc, #44]	@ (8003bb8 <HAL_RTC_MspInit+0x3c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d110      	bne.n	8003bb0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8003b8e:	f003 fae1 	bl	8007154 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8003b92:	4b0a      	ldr	r3, [pc, #40]	@ (8003bbc <HAL_RTC_MspInit+0x40>)
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	4a09      	ldr	r2, [pc, #36]	@ (8003bbc <HAL_RTC_MspInit+0x40>)
 8003b98:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003b9c:	61d3      	str	r3, [r2, #28]
 8003b9e:	4b07      	ldr	r3, [pc, #28]	@ (8003bbc <HAL_RTC_MspInit+0x40>)
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003baa:	4b05      	ldr	r3, [pc, #20]	@ (8003bc0 <HAL_RTC_MspInit+0x44>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003bb0:	bf00      	nop
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40002800 	.word	0x40002800
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	4242043c 	.word	0x4242043c

08003bc4 <Sync_RTC_With_GPS>:

/* USER CODE BEGIN 1 */


void Sync_RTC_With_GPS()
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	f5ad 6d8b 	sub.w	sp, sp, #1112	@ 0x458
 8003bca:	af02      	add	r7, sp, #8
  /* Buffers for the GPSTime and GPSDate */
  char GPSTime[256];
  char GPSDate[256];

  /* Flag to track if the sync is complete */
  uint8_t RTC_Sync_Flag = 0;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	f887 344f 	strb.w	r3, [r7, #1103]	@ 0x44f

  uint32_t gps_sync_start_time = HAL_GetTick();
 8003bd2:	f000 fcd3 	bl	800457c <HAL_GetTick>
 8003bd6:	f8c7 0448 	str.w	r0, [r7, #1096]	@ 0x448
  while(RTC_Sync_Flag == 0 && HAL_GetTick() - gps_sync_start_time < GPS_SYNC_TIMEOUT) {
 8003bda:	e119      	b.n	8003e10 <Sync_RTC_With_GPS+0x24c>
      printf("Still syncing\n\r");
 8003bdc:	489b      	ldr	r0, [pc, #620]	@ (8003e4c <Sync_RTC_With_GPS+0x288>)
 8003bde:	f00a f9cb 	bl	800df78 <iprintf>
    /* Read in an NMEA message into the buffer */
    if(HAL_I2C_IsDeviceReady(&hi2c1, GPS_DEVICE_ADDRESS, 1, HAL_MAX_DELAY) == HAL_OK) {
 8003be2:	f04f 33ff 	mov.w	r3, #4294967295
 8003be6:	2201      	movs	r2, #1
 8003be8:	2184      	movs	r1, #132	@ 0x84
 8003bea:	4899      	ldr	r0, [pc, #612]	@ (8003e50 <Sync_RTC_With_GPS+0x28c>)
 8003bec:	f002 fd02 	bl	80065f4 <HAL_I2C_IsDeviceReady>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f040 810c 	bne.w	8003e10 <Sync_RTC_With_GPS+0x24c>
	    HAL_I2C_Master_Receive(&hi2c1, GPS_DEVICE_ADDRESS, receive_buffer, sizeof(receive_buffer), HAL_MAX_DELAY);
 8003bf8:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8003bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c06:	2184      	movs	r1, #132	@ 0x84
 8003c08:	4891      	ldr	r0, [pc, #580]	@ (8003e50 <Sync_RTC_With_GPS+0x28c>)
 8003c0a:	f001 ff25 	bl	8005a58 <HAL_I2C_Master_Receive>
	    //printf("Got Data\n\r");

	    GPS myData;
      nmea_parse(&myData, &receive_buffer);
 8003c0e:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8003c12:	463b      	mov	r3, r7
 8003c14:	4611      	mov	r1, r2
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff fe90 	bl	800393c <nmea_parse>

      /*
       * lastMeasure is a null-terminated string and has the format hhmmss.sss
       * Make sure there's a valid fix and that there is an RMC message
       */
      if(myData.fix == 1 && myData.RMC_Flag == 1) {
 8003c1c:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003c20:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8003c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	f040 80f2 	bne.w	8003e10 <Sync_RTC_With_GPS+0x24c>
 8003c2c:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003c30:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8003c34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	f040 80e9 	bne.w	8003e10 <Sync_RTC_With_GPS+0x24c>
        //printf("Setting the RTC now\n\r");
        /* Copy the GPS time to GPSTime */
        strncpy(GPSTime, myData.lastMeasure, 10);
 8003c3e:	463b      	mov	r3, r7
 8003c40:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8003c44:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003c48:	220a      	movs	r2, #10
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f00a fa32 	bl	800e0b4 <strncpy>
        GPSTime[10] = '\0'; // Ensure null termination
 8003c50:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003c54:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003c58:	2200      	movs	r2, #0
 8003c5a:	729a      	strb	r2, [r3, #10]

        /* Copy the GPS date to GPSDate */
        strncpy(GPSDate, myData.date, 6);
 8003c5c:	463b      	mov	r3, r7
 8003c5e:	f103 0136 	add.w	r1, r3, #54	@ 0x36
 8003c62:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003c66:	2206      	movs	r2, #6
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f00a fa23 	bl	800e0b4 <strncpy>
        GPSDate[6] = '\0'; // Ensure null termination
 8003c6e:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003c72:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8003c76:	2200      	movs	r2, #0
 8003c78:	719a      	strb	r2, [r3, #6]

        /* Initialize Time and Date Objects */
        RTC_TimeTypeDef sTime = {0};
 8003c7a:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003c7e:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8003c82:	2100      	movs	r1, #0
 8003c84:	460a      	mov	r2, r1
 8003c86:	801a      	strh	r2, [r3, #0]
 8003c88:	460a      	mov	r2, r1
 8003c8a:	709a      	strb	r2, [r3, #2]
        RTC_DateTypeDef sDate = {0};
 8003c8c:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003c90:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]

        /* Manually parsing the hours, minutes, and seconds */
        sTime.Hours   = (GPSTime[0] - '0') * 10 + (GPSTime[1] - '0');
 8003c98:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003c9c:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	3b30      	subs	r3, #48	@ 0x30
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	0092      	lsls	r2, r2, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	b2da      	uxtb	r2, r3
 8003cb0:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003cb4:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003cb8:	785b      	ldrb	r3, [r3, #1]
 8003cba:	4413      	add	r3, r2
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	3b30      	subs	r3, #48	@ 0x30
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003cc6:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8003cca:	701a      	strb	r2, [r3, #0]
        sTime.Minutes = (GPSTime[2] - '0') * 10 + (GPSTime[3] - '0');
 8003ccc:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003cd0:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003cd4:	789b      	ldrb	r3, [r3, #2]
 8003cd6:	3b30      	subs	r3, #48	@ 0x30
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	0092      	lsls	r2, r2, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003ce8:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003cec:	78db      	ldrb	r3, [r3, #3]
 8003cee:	4413      	add	r3, r2
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	3b30      	subs	r3, #48	@ 0x30
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003cfa:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8003cfe:	705a      	strb	r2, [r3, #1]
        sTime.Seconds = (GPSTime[4] - '0') * 10 + (GPSTime[5] - '0');
 8003d00:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003d04:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003d08:	791b      	ldrb	r3, [r3, #4]
 8003d0a:	3b30      	subs	r3, #48	@ 0x30
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	461a      	mov	r2, r3
 8003d10:	0092      	lsls	r2, r2, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003d1c:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003d20:	795b      	ldrb	r3, [r3, #5]
 8003d22:	4413      	add	r3, r2
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	3b30      	subs	r3, #48	@ 0x30
 8003d28:	b2da      	uxtb	r2, r3
 8003d2a:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003d2e:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8003d32:	709a      	strb	r2, [r3, #2]

        /* Set the RTC time with these settings */
        HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003d34:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003d38:	2200      	movs	r2, #0
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4845      	ldr	r0, [pc, #276]	@ (8003e54 <Sync_RTC_With_GPS+0x290>)
 8003d3e:	f004 f86f 	bl	8007e20 <HAL_RTC_SetTime>

        //printf("Time -- H: %u, M: %u, S: %u\n\r", sTime.Hours, sTime.Minutes, sTime.Seconds);

        /* Manually parsing the date, month, and year */
        sDate.Date  = (GPSDate[0] - '0') * 10 + (GPSDate[1] - '0');
 8003d42:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003d46:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	3b30      	subs	r3, #48	@ 0x30
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	461a      	mov	r2, r3
 8003d52:	0092      	lsls	r2, r2, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003d5e:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8003d62:	785b      	ldrb	r3, [r3, #1]
 8003d64:	4413      	add	r3, r2
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	3b30      	subs	r3, #48	@ 0x30
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003d70:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8003d74:	709a      	strb	r2, [r3, #2]
        sDate.Month = (GPSDate[2] - '0') * 10 + (GPSDate[3] - '0');
 8003d76:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003d7a:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8003d7e:	789b      	ldrb	r3, [r3, #2]
 8003d80:	3b30      	subs	r3, #48	@ 0x30
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	461a      	mov	r2, r3
 8003d86:	0092      	lsls	r2, r2, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003d92:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8003d96:	78db      	ldrb	r3, [r3, #3]
 8003d98:	4413      	add	r3, r2
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	3b30      	subs	r3, #48	@ 0x30
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003da4:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8003da8:	705a      	strb	r2, [r3, #1]
        sDate.Year  = (GPSDate[4] - '0') * 10 + (GPSDate[5] - '0');
 8003daa:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003dae:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8003db2:	791b      	ldrb	r3, [r3, #4]
 8003db4:	3b30      	subs	r3, #48	@ 0x30
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	461a      	mov	r2, r3
 8003dba:	0092      	lsls	r2, r2, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003dc6:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8003dca:	795b      	ldrb	r3, [r3, #5]
 8003dcc:	4413      	add	r3, r2
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	3b30      	subs	r3, #48	@ 0x30
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003dd8:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8003ddc:	70da      	strb	r2, [r3, #3]

        /* Set the RTC Date with these settings */
        HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003dde:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003de2:	2200      	movs	r2, #0
 8003de4:	4619      	mov	r1, r3
 8003de6:	481b      	ldr	r0, [pc, #108]	@ (8003e54 <Sync_RTC_With_GPS+0x290>)
 8003de8:	f004 f98a 	bl	8008100 <HAL_RTC_SetDate>

        printf("Set the time to %d:%d\n", sTime.Hours, sTime.Minutes);
 8003dec:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003df0:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	4619      	mov	r1, r3
 8003df8:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003dfc:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8003e00:	785b      	ldrb	r3, [r3, #1]
 8003e02:	461a      	mov	r2, r3
 8003e04:	4814      	ldr	r0, [pc, #80]	@ (8003e58 <Sync_RTC_With_GPS+0x294>)
 8003e06:	f00a f8b7 	bl	800df78 <iprintf>

        //printf("Date -- D: %u, M: %u, Y: %u\n\r", sDate.Date, sDate.Month, sDate.Year);

        /* Set the flag to 1 indicating that the RTC has been sync'd */
        RTC_Sync_Flag = 1;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	f887 344f 	strb.w	r3, [r7, #1103]	@ 0x44f
  while(RTC_Sync_Flag == 0 && HAL_GetTick() - gps_sync_start_time < GPS_SYNC_TIMEOUT) {
 8003e10:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d109      	bne.n	8003e2c <Sync_RTC_With_GPS+0x268>
 8003e18:	f000 fbb0 	bl	800457c <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e28:	f4ff aed8 	bcc.w	8003bdc <Sync_RTC_With_GPS+0x18>
      }
    }
  }

  printf("Sync complete\n\r");
 8003e2c:	480b      	ldr	r0, [pc, #44]	@ (8003e5c <Sync_RTC_With_GPS+0x298>)
 8003e2e:	f00a f8a3 	bl	800df78 <iprintf>

  if (RTC_Sync_Flag == 0) {
 8003e32:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d102      	bne.n	8003e40 <Sync_RTC_With_GPS+0x27c>
    g_tel_diagnostics.gps_sync_fail = true;
 8003e3a:	4b09      	ldr	r3, [pc, #36]	@ (8003e60 <Sync_RTC_With_GPS+0x29c>)
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	705a      	strb	r2, [r3, #1]
  }

  /* Can turn on the TEL board LED here to indicate that the RTC is SYNC'd  */
}
 8003e40:	bf00      	nop
 8003e42:	f507 678a 	add.w	r7, r7, #1104	@ 0x450
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	08012124 	.word	0x08012124
 8003e50:	20000640 	.word	0x20000640
 8003e54:	20000754 	.word	0x20000754
 8003e58:	08012134 	.word	0x08012134
 8003e5c:	0801214c 	.word	0x0801214c
 8003e60:	200006e8 	.word	0x200006e8

08003e64 <get_current_timestamp>:

double get_current_timestamp()
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
  /* Initialize Time and Date objects */
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;

  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003e6a:	1d3b      	adds	r3, r7, #4
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	4619      	mov	r1, r3
 8003e70:	480b      	ldr	r0, [pc, #44]	@ (8003ea0 <get_current_timestamp+0x3c>)
 8003e72:	f004 f86d 	bl	8007f50 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003e76:	463b      	mov	r3, r7
 8003e78:	2200      	movs	r2, #0
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4808      	ldr	r0, [pc, #32]	@ (8003ea0 <get_current_timestamp+0x3c>)
 8003e7e:	f004 f9f5 	bl	800826c <HAL_RTC_GetDate>
  double epochTime = convertToEpochTime(&sTime, &sDate);
 8003e82:	463a      	mov	r2, r7
 8003e84:	1d3b      	adds	r3, r7, #4
 8003e86:	4611      	mov	r1, r2
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 f80b 	bl	8003ea4 <convertToEpochTime>
 8003e8e:	e9c7 0102 	strd	r0, r1, [r7, #8]

  /* Return the resulting epoch time */
  return epochTime;
 8003e92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8003e96:	4610      	mov	r0, r2
 8003e98:	4619      	mov	r1, r3
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	20000754 	.word	0x20000754

08003ea4 <convertToEpochTime>:

/* Used to get current time stamp */
double convertToEpochTime(RTC_TimeTypeDef *sTime, RTC_DateTypeDef *sDate)
{
 8003ea4:	b5b0      	push	{r4, r5, r7, lr}
 8003ea6:	b08c      	sub	sp, #48	@ 0x30
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
    /* Initialize tm struct - from time.h library */
    struct tm t;

    /* Populate the tm structure fields from the RTC time and date */
    t.tm_year = sDate->Year + 100;  // Year since 1900, so add 100 to the year from the RTC (which starts at 2000).
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	78db      	ldrb	r3, [r3, #3]
 8003eb2:	3364      	adds	r3, #100	@ 0x64
 8003eb4:	61fb      	str	r3, [r7, #28]
    t.tm_mon = sDate->Month - 1;    // tm_mon is 0-11, so subtract 1 from the RTC month (which starts at 1).
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	785b      	ldrb	r3, [r3, #1]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	61bb      	str	r3, [r7, #24]
    t.tm_mday = sDate->Date;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	789b      	ldrb	r3, [r3, #2]
 8003ec2:	617b      	str	r3, [r7, #20]
    t.tm_hour = sTime->Hours;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	613b      	str	r3, [r7, #16]
    t.tm_min = sTime->Minutes;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	785b      	ldrb	r3, [r3, #1]
 8003ece:	60fb      	str	r3, [r7, #12]
    t.tm_sec = sTime->Seconds;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	789b      	ldrb	r3, [r3, #2]
 8003ed4:	60bb      	str	r3, [r7, #8]
    t.tm_isdst = 0;                // Disable daylight saving time adjustments.
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
//            t.tm_mday = lastDayOfMonth(t.tm_mon, t.tm_year + 1900);
//        }
//    }

    /* Convert to epoch time - Function from time.h library */
    long int epoch_secs = (long int) mktime(&t);
 8003eda:	f107 0308 	add.w	r3, r7, #8
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f00a fa42 	bl	800e368 <mktime>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4613      	mov	r3, r2
 8003eea:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Convert to double and add milliseconds with GetTick() */
    return (double) epoch_secs + (double)(HAL_GetTick() % 1000) / 1000.0;
 8003eec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003eee:	f7fc fb03 	bl	80004f8 <__aeabi_i2d>
 8003ef2:	4604      	mov	r4, r0
 8003ef4:	460d      	mov	r5, r1
 8003ef6:	f000 fb41 	bl	800457c <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	4b0e      	ldr	r3, [pc, #56]	@ (8003f38 <convertToEpochTime+0x94>)
 8003efe:	fba3 1302 	umull	r1, r3, r3, r2
 8003f02:	099b      	lsrs	r3, r3, #6
 8003f04:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003f08:	fb01 f303 	mul.w	r3, r1, r3
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fc fae2 	bl	80004d8 <__aeabi_ui2d>
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	4b08      	ldr	r3, [pc, #32]	@ (8003f3c <convertToEpochTime+0x98>)
 8003f1a:	f7fc fc81 	bl	8000820 <__aeabi_ddiv>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	4620      	mov	r0, r4
 8003f24:	4629      	mov	r1, r5
 8003f26:	f7fc f99b 	bl	8000260 <__adddf3>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	460b      	mov	r3, r1
}
 8003f2e:	4610      	mov	r0, r2
 8003f30:	4619      	mov	r1, r3
 8003f32:	3730      	adds	r7, #48	@ 0x30
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bdb0      	pop	{r4, r5, r7, pc}
 8003f38:	10624dd3 	.word	0x10624dd3
 8003f3c:	408f4000 	.word	0x408f4000

08003f40 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003f44:	4b17      	ldr	r3, [pc, #92]	@ (8003fa4 <MX_SPI1_Init+0x64>)
 8003f46:	4a18      	ldr	r2, [pc, #96]	@ (8003fa8 <MX_SPI1_Init+0x68>)
 8003f48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003f4a:	4b16      	ldr	r3, [pc, #88]	@ (8003fa4 <MX_SPI1_Init+0x64>)
 8003f4c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003f50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003f52:	4b14      	ldr	r3, [pc, #80]	@ (8003fa4 <MX_SPI1_Init+0x64>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f58:	4b12      	ldr	r3, [pc, #72]	@ (8003fa4 <MX_SPI1_Init+0x64>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f5e:	4b11      	ldr	r3, [pc, #68]	@ (8003fa4 <MX_SPI1_Init+0x64>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f64:	4b0f      	ldr	r3, [pc, #60]	@ (8003fa4 <MX_SPI1_Init+0x64>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa4 <MX_SPI1_Init+0x64>)
 8003f6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003f72:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa4 <MX_SPI1_Init+0x64>)
 8003f74:	2208      	movs	r2, #8
 8003f76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f78:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa4 <MX_SPI1_Init+0x64>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f7e:	4b09      	ldr	r3, [pc, #36]	@ (8003fa4 <MX_SPI1_Init+0x64>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f84:	4b07      	ldr	r3, [pc, #28]	@ (8003fa4 <MX_SPI1_Init+0x64>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003f8a:	4b06      	ldr	r3, [pc, #24]	@ (8003fa4 <MX_SPI1_Init+0x64>)
 8003f8c:	220a      	movs	r2, #10
 8003f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003f90:	4804      	ldr	r0, [pc, #16]	@ (8003fa4 <MX_SPI1_Init+0x64>)
 8003f92:	f004 fc61 	bl	8008858 <HAL_SPI_Init>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003f9c:	f7ff f83a 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003fa0:	bf00      	nop
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	20000768 	.word	0x20000768
 8003fa8:	40013000 	.word	0x40013000

08003fac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b088      	sub	sp, #32
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fb4:	f107 0310 	add.w	r3, r7, #16
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	605a      	str	r2, [r3, #4]
 8003fbe:	609a      	str	r2, [r3, #8]
 8003fc0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a1b      	ldr	r2, [pc, #108]	@ (8004034 <HAL_SPI_MspInit+0x88>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d12f      	bne.n	800402c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8004038 <HAL_SPI_MspInit+0x8c>)
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	4a19      	ldr	r2, [pc, #100]	@ (8004038 <HAL_SPI_MspInit+0x8c>)
 8003fd2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003fd6:	6193      	str	r3, [r2, #24]
 8003fd8:	4b17      	ldr	r3, [pc, #92]	@ (8004038 <HAL_SPI_MspInit+0x8c>)
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fe4:	4b14      	ldr	r3, [pc, #80]	@ (8004038 <HAL_SPI_MspInit+0x8c>)
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	4a13      	ldr	r2, [pc, #76]	@ (8004038 <HAL_SPI_MspInit+0x8c>)
 8003fea:	f043 0304 	orr.w	r3, r3, #4
 8003fee:	6193      	str	r3, [r2, #24]
 8003ff0:	4b11      	ldr	r3, [pc, #68]	@ (8004038 <HAL_SPI_MspInit+0x8c>)
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	60bb      	str	r3, [r7, #8]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SDL_CLK_Pin|SDL_MOSI_Pin;
 8003ffc:	23a0      	movs	r3, #160	@ 0xa0
 8003ffe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004000:	2302      	movs	r3, #2
 8004002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004004:	2303      	movs	r3, #3
 8004006:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004008:	f107 0310 	add.w	r3, r7, #16
 800400c:	4619      	mov	r1, r3
 800400e:	480b      	ldr	r0, [pc, #44]	@ (800403c <HAL_SPI_MspInit+0x90>)
 8004010:	f001 fa02 	bl	8005418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDL_MISO_Pin;
 8004014:	2340      	movs	r3, #64	@ 0x40
 8004016:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401c:	2300      	movs	r3, #0
 800401e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SDL_MISO_GPIO_Port, &GPIO_InitStruct);
 8004020:	f107 0310 	add.w	r3, r7, #16
 8004024:	4619      	mov	r1, r3
 8004026:	4805      	ldr	r0, [pc, #20]	@ (800403c <HAL_SPI_MspInit+0x90>)
 8004028:	f001 f9f6 	bl	8005418 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800402c:	bf00      	nop
 800402e:	3720      	adds	r7, #32
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40013000 	.word	0x40013000
 8004038:	40021000 	.word	0x40021000
 800403c:	40010800 	.word	0x40010800

08004040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004046:	4b18      	ldr	r3, [pc, #96]	@ (80040a8 <HAL_MspInit+0x68>)
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	4a17      	ldr	r2, [pc, #92]	@ (80040a8 <HAL_MspInit+0x68>)
 800404c:	f043 0301 	orr.w	r3, r3, #1
 8004050:	6193      	str	r3, [r2, #24]
 8004052:	4b15      	ldr	r3, [pc, #84]	@ (80040a8 <HAL_MspInit+0x68>)
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	60bb      	str	r3, [r7, #8]
 800405c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800405e:	4b12      	ldr	r3, [pc, #72]	@ (80040a8 <HAL_MspInit+0x68>)
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	4a11      	ldr	r2, [pc, #68]	@ (80040a8 <HAL_MspInit+0x68>)
 8004064:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004068:	61d3      	str	r3, [r2, #28]
 800406a:	4b0f      	ldr	r3, [pc, #60]	@ (80040a8 <HAL_MspInit+0x68>)
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004072:	607b      	str	r3, [r7, #4]
 8004074:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004076:	2200      	movs	r2, #0
 8004078:	210f      	movs	r1, #15
 800407a:	f06f 0001 	mvn.w	r0, #1
 800407e:	f001 f9a0 	bl	80053c2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004082:	4b0a      	ldr	r3, [pc, #40]	@ (80040ac <HAL_MspInit+0x6c>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	4a04      	ldr	r2, [pc, #16]	@ (80040ac <HAL_MspInit+0x6c>)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800409e:	bf00      	nop
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40021000 	.word	0x40021000
 80040ac:	40010000 	.word	0x40010000

080040b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08c      	sub	sp, #48	@ 0x30
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80040c0:	2300      	movs	r3, #0
 80040c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80040c6:	4b2e      	ldr	r3, [pc, #184]	@ (8004180 <HAL_InitTick+0xd0>)
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	4a2d      	ldr	r2, [pc, #180]	@ (8004180 <HAL_InitTick+0xd0>)
 80040cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80040d0:	6193      	str	r3, [r2, #24]
 80040d2:	4b2b      	ldr	r3, [pc, #172]	@ (8004180 <HAL_InitTick+0xd0>)
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040da:	60bb      	str	r3, [r7, #8]
 80040dc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80040de:	f107 020c 	add.w	r2, r7, #12
 80040e2:	f107 0310 	add.w	r3, r7, #16
 80040e6:	4611      	mov	r1, r2
 80040e8:	4618      	mov	r0, r3
 80040ea:	f003 fc31 	bl	8007950 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80040ee:	f003 fc1b 	bl	8007928 <HAL_RCC_GetPCLK2Freq>
 80040f2:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80040f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f6:	4a23      	ldr	r2, [pc, #140]	@ (8004184 <HAL_InitTick+0xd4>)
 80040f8:	fba2 2303 	umull	r2, r3, r2, r3
 80040fc:	0c9b      	lsrs	r3, r3, #18
 80040fe:	3b01      	subs	r3, #1
 8004100:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004102:	4b21      	ldr	r3, [pc, #132]	@ (8004188 <HAL_InitTick+0xd8>)
 8004104:	4a21      	ldr	r2, [pc, #132]	@ (800418c <HAL_InitTick+0xdc>)
 8004106:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004108:	4b1f      	ldr	r3, [pc, #124]	@ (8004188 <HAL_InitTick+0xd8>)
 800410a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800410e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004110:	4a1d      	ldr	r2, [pc, #116]	@ (8004188 <HAL_InitTick+0xd8>)
 8004112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004114:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004116:	4b1c      	ldr	r3, [pc, #112]	@ (8004188 <HAL_InitTick+0xd8>)
 8004118:	2200      	movs	r2, #0
 800411a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800411c:	4b1a      	ldr	r3, [pc, #104]	@ (8004188 <HAL_InitTick+0xd8>)
 800411e:	2200      	movs	r2, #0
 8004120:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004122:	4b19      	ldr	r3, [pc, #100]	@ (8004188 <HAL_InitTick+0xd8>)
 8004124:	2200      	movs	r2, #0
 8004126:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8004128:	4817      	ldr	r0, [pc, #92]	@ (8004188 <HAL_InitTick+0xd8>)
 800412a:	f004 ffb3 	bl	8009094 <HAL_TIM_Base_Init>
 800412e:	4603      	mov	r3, r0
 8004130:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8004134:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004138:	2b00      	cmp	r3, #0
 800413a:	d11b      	bne.n	8004174 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800413c:	4812      	ldr	r0, [pc, #72]	@ (8004188 <HAL_InitTick+0xd8>)
 800413e:	f005 f801 	bl	8009144 <HAL_TIM_Base_Start_IT>
 8004142:	4603      	mov	r3, r0
 8004144:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8004148:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800414c:	2b00      	cmp	r3, #0
 800414e:	d111      	bne.n	8004174 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004150:	2019      	movs	r0, #25
 8004152:	f001 f952 	bl	80053fa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b0f      	cmp	r3, #15
 800415a:	d808      	bhi.n	800416e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800415c:	2200      	movs	r2, #0
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	2019      	movs	r0, #25
 8004162:	f001 f92e 	bl	80053c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004166:	4a0a      	ldr	r2, [pc, #40]	@ (8004190 <HAL_InitTick+0xe0>)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6013      	str	r3, [r2, #0]
 800416c:	e002      	b.n	8004174 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8004174:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004178:	4618      	mov	r0, r3
 800417a:	3730      	adds	r7, #48	@ 0x30
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40021000 	.word	0x40021000
 8004184:	431bde83 	.word	0x431bde83
 8004188:	200007c0 	.word	0x200007c0
 800418c:	40012c00 	.word	0x40012c00
 8004190:	200000cc 	.word	0x200000cc

08004194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004198:	bf00      	nop
 800419a:	e7fd      	b.n	8004198 <NMI_Handler+0x4>

0800419c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041a0:	bf00      	nop
 80041a2:	e7fd      	b.n	80041a0 <HardFault_Handler+0x4>

080041a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041a8:	bf00      	nop
 80041aa:	e7fd      	b.n	80041a8 <MemManage_Handler+0x4>

080041ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041b0:	bf00      	nop
 80041b2:	e7fd      	b.n	80041b0 <BusFault_Handler+0x4>

080041b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041b8:	bf00      	nop
 80041ba:	e7fd      	b.n	80041b8 <UsageFault_Handler+0x4>

080041bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041c0:	bf00      	nop
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr

080041c8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80041cc:	4802      	ldr	r0, [pc, #8]	@ (80041d8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80041ce:	f000 fe20 	bl	8004e12 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80041d2:	bf00      	nop
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	2000033c 	.word	0x2000033c

080041dc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80041e0:	4802      	ldr	r0, [pc, #8]	@ (80041ec <TIM1_UP_IRQHandler+0x10>)
 80041e2:	f005 f80f 	bl	8009204 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80041e6:	bf00      	nop
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	200007c0 	.word	0x200007c0

080041f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  return 1;
 80041f4:	2301      	movs	r3, #1
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr

080041fe <_kill>:

int _kill(int pid, int sig)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b082      	sub	sp, #8
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004208:	f00a fdec 	bl	800ede4 <__errno>
 800420c:	4603      	mov	r3, r0
 800420e:	2216      	movs	r2, #22
 8004210:	601a      	str	r2, [r3, #0]
  return -1;
 8004212:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004216:	4618      	mov	r0, r3
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <_exit>:

void _exit (int status)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b082      	sub	sp, #8
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004226:	f04f 31ff 	mov.w	r1, #4294967295
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7ff ffe7 	bl	80041fe <_kill>
  while (1) {}    /* Make sure we hang here */
 8004230:	bf00      	nop
 8004232:	e7fd      	b.n	8004230 <_exit+0x12>

08004234 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800423c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004240:	4618      	mov	r0, r3
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	bc80      	pop	{r7}
 8004248:	4770      	bx	lr

0800424a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800425a:	605a      	str	r2, [r3, #4]
  return 0;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr

08004268 <_isatty>:

int _isatty(int file)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004270:	2301      	movs	r3, #1
}
 8004272:	4618      	mov	r0, r3
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	bc80      	pop	{r7}
 800427a:	4770      	bx	lr

0800427c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr

08004294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800429c:	4a14      	ldr	r2, [pc, #80]	@ (80042f0 <_sbrk+0x5c>)
 800429e:	4b15      	ldr	r3, [pc, #84]	@ (80042f4 <_sbrk+0x60>)
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042a8:	4b13      	ldr	r3, [pc, #76]	@ (80042f8 <_sbrk+0x64>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d102      	bne.n	80042b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042b0:	4b11      	ldr	r3, [pc, #68]	@ (80042f8 <_sbrk+0x64>)
 80042b2:	4a12      	ldr	r2, [pc, #72]	@ (80042fc <_sbrk+0x68>)
 80042b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042b6:	4b10      	ldr	r3, [pc, #64]	@ (80042f8 <_sbrk+0x64>)
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4413      	add	r3, r2
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d207      	bcs.n	80042d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042c4:	f00a fd8e 	bl	800ede4 <__errno>
 80042c8:	4603      	mov	r3, r0
 80042ca:	220c      	movs	r2, #12
 80042cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042ce:	f04f 33ff 	mov.w	r3, #4294967295
 80042d2:	e009      	b.n	80042e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042d4:	4b08      	ldr	r3, [pc, #32]	@ (80042f8 <_sbrk+0x64>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042da:	4b07      	ldr	r3, [pc, #28]	@ (80042f8 <_sbrk+0x64>)
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4413      	add	r3, r2
 80042e2:	4a05      	ldr	r2, [pc, #20]	@ (80042f8 <_sbrk+0x64>)
 80042e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042e6:	68fb      	ldr	r3, [r7, #12]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	2000c000 	.word	0x2000c000
 80042f4:	00000400 	.word	0x00000400
 80042f8:	2000080c 	.word	0x2000080c
 80042fc:	20005b78 	.word	0x20005b78

08004300 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004304:	bf00      	nop
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr

0800430c <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004310:	4b11      	ldr	r3, [pc, #68]	@ (8004358 <MX_UART5_Init+0x4c>)
 8004312:	4a12      	ldr	r2, [pc, #72]	@ (800435c <MX_UART5_Init+0x50>)
 8004314:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8004316:	4b10      	ldr	r3, [pc, #64]	@ (8004358 <MX_UART5_Init+0x4c>)
 8004318:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800431c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800431e:	4b0e      	ldr	r3, [pc, #56]	@ (8004358 <MX_UART5_Init+0x4c>)
 8004320:	2200      	movs	r2, #0
 8004322:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_2;
 8004324:	4b0c      	ldr	r3, [pc, #48]	@ (8004358 <MX_UART5_Init+0x4c>)
 8004326:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800432a:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800432c:	4b0a      	ldr	r3, [pc, #40]	@ (8004358 <MX_UART5_Init+0x4c>)
 800432e:	2200      	movs	r2, #0
 8004330:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004332:	4b09      	ldr	r3, [pc, #36]	@ (8004358 <MX_UART5_Init+0x4c>)
 8004334:	220c      	movs	r2, #12
 8004336:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004338:	4b07      	ldr	r3, [pc, #28]	@ (8004358 <MX_UART5_Init+0x4c>)
 800433a:	2200      	movs	r2, #0
 800433c:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800433e:	4b06      	ldr	r3, [pc, #24]	@ (8004358 <MX_UART5_Init+0x4c>)
 8004340:	2200      	movs	r2, #0
 8004342:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004344:	4804      	ldr	r0, [pc, #16]	@ (8004358 <MX_UART5_Init+0x4c>)
 8004346:	f005 f915 	bl	8009574 <HAL_UART_Init>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <MX_UART5_Init+0x48>
  {
    Error_Handler();
 8004350:	f7fe fe60 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004354:	bf00      	nop
 8004356:	bd80      	pop	{r7, pc}
 8004358:	20000810 	.word	0x20000810
 800435c:	40005000 	.word	0x40005000

08004360 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004364:	4b11      	ldr	r3, [pc, #68]	@ (80043ac <MX_USART1_UART_Init+0x4c>)
 8004366:	4a12      	ldr	r2, [pc, #72]	@ (80043b0 <MX_USART1_UART_Init+0x50>)
 8004368:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 800436a:	4b10      	ldr	r3, [pc, #64]	@ (80043ac <MX_USART1_UART_Init+0x4c>)
 800436c:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8004370:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004372:	4b0e      	ldr	r3, [pc, #56]	@ (80043ac <MX_USART1_UART_Init+0x4c>)
 8004374:	2200      	movs	r2, #0
 8004376:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004378:	4b0c      	ldr	r3, [pc, #48]	@ (80043ac <MX_USART1_UART_Init+0x4c>)
 800437a:	2200      	movs	r2, #0
 800437c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800437e:	4b0b      	ldr	r3, [pc, #44]	@ (80043ac <MX_USART1_UART_Init+0x4c>)
 8004380:	2200      	movs	r2, #0
 8004382:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004384:	4b09      	ldr	r3, [pc, #36]	@ (80043ac <MX_USART1_UART_Init+0x4c>)
 8004386:	220c      	movs	r2, #12
 8004388:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800438a:	4b08      	ldr	r3, [pc, #32]	@ (80043ac <MX_USART1_UART_Init+0x4c>)
 800438c:	2200      	movs	r2, #0
 800438e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004390:	4b06      	ldr	r3, [pc, #24]	@ (80043ac <MX_USART1_UART_Init+0x4c>)
 8004392:	2200      	movs	r2, #0
 8004394:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004396:	4805      	ldr	r0, [pc, #20]	@ (80043ac <MX_USART1_UART_Init+0x4c>)
 8004398:	f005 f8ec 	bl	8009574 <HAL_UART_Init>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80043a2:	f7fe fe37 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80043a6:	bf00      	nop
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	20000858 	.word	0x20000858
 80043b0:	40013800 	.word	0x40013800

080043b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b08c      	sub	sp, #48	@ 0x30
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043bc:	f107 0320 	add.w	r3, r7, #32
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	605a      	str	r2, [r3, #4]
 80043c6:	609a      	str	r2, [r3, #8]
 80043c8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART5)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a3e      	ldr	r2, [pc, #248]	@ (80044c8 <HAL_UART_MspInit+0x114>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d13d      	bne.n	8004450 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80043d4:	4b3d      	ldr	r3, [pc, #244]	@ (80044cc <HAL_UART_MspInit+0x118>)
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	4a3c      	ldr	r2, [pc, #240]	@ (80044cc <HAL_UART_MspInit+0x118>)
 80043da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043de:	61d3      	str	r3, [r2, #28]
 80043e0:	4b3a      	ldr	r3, [pc, #232]	@ (80044cc <HAL_UART_MspInit+0x118>)
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043e8:	61fb      	str	r3, [r7, #28]
 80043ea:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043ec:	4b37      	ldr	r3, [pc, #220]	@ (80044cc <HAL_UART_MspInit+0x118>)
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	4a36      	ldr	r2, [pc, #216]	@ (80044cc <HAL_UART_MspInit+0x118>)
 80043f2:	f043 0310 	orr.w	r3, r3, #16
 80043f6:	6193      	str	r3, [r2, #24]
 80043f8:	4b34      	ldr	r3, [pc, #208]	@ (80044cc <HAL_UART_MspInit+0x118>)
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	f003 0310 	and.w	r3, r3, #16
 8004400:	61bb      	str	r3, [r7, #24]
 8004402:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004404:	4b31      	ldr	r3, [pc, #196]	@ (80044cc <HAL_UART_MspInit+0x118>)
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	4a30      	ldr	r2, [pc, #192]	@ (80044cc <HAL_UART_MspInit+0x118>)
 800440a:	f043 0320 	orr.w	r3, r3, #32
 800440e:	6193      	str	r3, [r2, #24]
 8004410:	4b2e      	ldr	r3, [pc, #184]	@ (80044cc <HAL_UART_MspInit+0x118>)
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	f003 0320 	and.w	r3, r3, #32
 8004418:	617b      	str	r3, [r7, #20]
 800441a:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800441c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004422:	2302      	movs	r3, #2
 8004424:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004426:	2303      	movs	r3, #3
 8004428:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800442a:	f107 0320 	add.w	r3, r7, #32
 800442e:	4619      	mov	r1, r3
 8004430:	4827      	ldr	r0, [pc, #156]	@ (80044d0 <HAL_UART_MspInit+0x11c>)
 8004432:	f000 fff1 	bl	8005418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004436:	2304      	movs	r3, #4
 8004438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800443a:	2300      	movs	r3, #0
 800443c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443e:	2300      	movs	r3, #0
 8004440:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004442:	f107 0320 	add.w	r3, r7, #32
 8004446:	4619      	mov	r1, r3
 8004448:	4822      	ldr	r0, [pc, #136]	@ (80044d4 <HAL_UART_MspInit+0x120>)
 800444a:	f000 ffe5 	bl	8005418 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800444e:	e036      	b.n	80044be <HAL_UART_MspInit+0x10a>
  else if(uartHandle->Instance==USART1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a20      	ldr	r2, [pc, #128]	@ (80044d8 <HAL_UART_MspInit+0x124>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d131      	bne.n	80044be <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART1_CLK_ENABLE();
 800445a:	4b1c      	ldr	r3, [pc, #112]	@ (80044cc <HAL_UART_MspInit+0x118>)
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	4a1b      	ldr	r2, [pc, #108]	@ (80044cc <HAL_UART_MspInit+0x118>)
 8004460:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004464:	6193      	str	r3, [r2, #24]
 8004466:	4b19      	ldr	r3, [pc, #100]	@ (80044cc <HAL_UART_MspInit+0x118>)
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800446e:	613b      	str	r3, [r7, #16]
 8004470:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004472:	4b16      	ldr	r3, [pc, #88]	@ (80044cc <HAL_UART_MspInit+0x118>)
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	4a15      	ldr	r2, [pc, #84]	@ (80044cc <HAL_UART_MspInit+0x118>)
 8004478:	f043 0304 	orr.w	r3, r3, #4
 800447c:	6193      	str	r3, [r2, #24]
 800447e:	4b13      	ldr	r3, [pc, #76]	@ (80044cc <HAL_UART_MspInit+0x118>)
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RADIO_TX_Pin;
 800448a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800448e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004490:	2302      	movs	r3, #2
 8004492:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004494:	2303      	movs	r3, #3
 8004496:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(RADIO_TX_GPIO_Port, &GPIO_InitStruct);
 8004498:	f107 0320 	add.w	r3, r7, #32
 800449c:	4619      	mov	r1, r3
 800449e:	480f      	ldr	r0, [pc, #60]	@ (80044dc <HAL_UART_MspInit+0x128>)
 80044a0:	f000 ffba 	bl	8005418 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RADIO_RX_Pin;
 80044a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80044a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044aa:	2300      	movs	r3, #0
 80044ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(RADIO_RX_GPIO_Port, &GPIO_InitStruct);
 80044b2:	f107 0320 	add.w	r3, r7, #32
 80044b6:	4619      	mov	r1, r3
 80044b8:	4808      	ldr	r0, [pc, #32]	@ (80044dc <HAL_UART_MspInit+0x128>)
 80044ba:	f000 ffad 	bl	8005418 <HAL_GPIO_Init>
}
 80044be:	bf00      	nop
 80044c0:	3730      	adds	r7, #48	@ 0x30
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	40005000 	.word	0x40005000
 80044cc:	40021000 	.word	0x40021000
 80044d0:	40011000 	.word	0x40011000
 80044d4:	40011400 	.word	0x40011400
 80044d8:	40013800 	.word	0x40013800
 80044dc:	40010800 	.word	0x40010800

080044e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80044e0:	f7ff ff0e 	bl	8004300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044e4:	480b      	ldr	r0, [pc, #44]	@ (8004514 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80044e6:	490c      	ldr	r1, [pc, #48]	@ (8004518 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80044e8:	4a0c      	ldr	r2, [pc, #48]	@ (800451c <LoopFillZerobss+0x16>)
  movs r3, #0
 80044ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044ec:	e002      	b.n	80044f4 <LoopCopyDataInit>

080044ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044f2:	3304      	adds	r3, #4

080044f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044f8:	d3f9      	bcc.n	80044ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044fa:	4a09      	ldr	r2, [pc, #36]	@ (8004520 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80044fc:	4c09      	ldr	r4, [pc, #36]	@ (8004524 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80044fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004500:	e001      	b.n	8004506 <LoopFillZerobss>

08004502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004504:	3204      	adds	r2, #4

08004506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004508:	d3fb      	bcc.n	8004502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800450a:	f00a fc71 	bl	800edf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800450e:	f7fe fcc7 	bl	8002ea0 <main>
  bx lr
 8004512:	4770      	bx	lr
  ldr r0, =_sdata
 8004514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004518:	20000318 	.word	0x20000318
  ldr r2, =_sidata
 800451c:	080127b8 	.word	0x080127b8
  ldr r2, =_sbss
 8004520:	20000318 	.word	0x20000318
  ldr r4, =_ebss
 8004524:	20005b74 	.word	0x20005b74

08004528 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004528:	e7fe      	b.n	8004528 <ADC1_2_IRQHandler>
	...

0800452c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004530:	4b08      	ldr	r3, [pc, #32]	@ (8004554 <HAL_Init+0x28>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a07      	ldr	r2, [pc, #28]	@ (8004554 <HAL_Init+0x28>)
 8004536:	f043 0310 	orr.w	r3, r3, #16
 800453a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800453c:	2003      	movs	r0, #3
 800453e:	f000 ff35 	bl	80053ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004542:	200f      	movs	r0, #15
 8004544:	f7ff fdb4 	bl	80040b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004548:	f7ff fd7a 	bl	8004040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40022000 	.word	0x40022000

08004558 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800455c:	4b05      	ldr	r3, [pc, #20]	@ (8004574 <HAL_IncTick+0x1c>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	461a      	mov	r2, r3
 8004562:	4b05      	ldr	r3, [pc, #20]	@ (8004578 <HAL_IncTick+0x20>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4413      	add	r3, r2
 8004568:	4a03      	ldr	r2, [pc, #12]	@ (8004578 <HAL_IncTick+0x20>)
 800456a:	6013      	str	r3, [r2, #0]
}
 800456c:	bf00      	nop
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr
 8004574:	200000d0 	.word	0x200000d0
 8004578:	200008a0 	.word	0x200008a0

0800457c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  return uwTick;
 8004580:	4b02      	ldr	r3, [pc, #8]	@ (800458c <HAL_GetTick+0x10>)
 8004582:	681b      	ldr	r3, [r3, #0]
}
 8004584:	4618      	mov	r0, r3
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr
 800458c:	200008a0 	.word	0x200008a0

08004590 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004598:	f7ff fff0 	bl	800457c <HAL_GetTick>
 800459c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a8:	d005      	beq.n	80045b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045aa:	4b0a      	ldr	r3, [pc, #40]	@ (80045d4 <HAL_Delay+0x44>)
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4413      	add	r3, r2
 80045b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045b6:	bf00      	nop
 80045b8:	f7ff ffe0 	bl	800457c <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d8f7      	bhi.n	80045b8 <HAL_Delay+0x28>
  {
  }
}
 80045c8:	bf00      	nop
 80045ca:	bf00      	nop
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	200000d0 	.word	0x200000d0

080045d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e0ed      	b.n	80047c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d102      	bne.n	80045fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7fc fe86 	bl	8001308 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800460c:	f7ff ffb6 	bl	800457c <HAL_GetTick>
 8004610:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004612:	e012      	b.n	800463a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004614:	f7ff ffb2 	bl	800457c <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b0a      	cmp	r3, #10
 8004620:	d90b      	bls.n	800463a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004626:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2205      	movs	r2, #5
 8004632:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e0c5      	b.n	80047c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0e5      	beq.n	8004614 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0202 	bic.w	r2, r2, #2
 8004656:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004658:	f7ff ff90 	bl	800457c <HAL_GetTick>
 800465c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800465e:	e012      	b.n	8004686 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004660:	f7ff ff8c 	bl	800457c <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b0a      	cmp	r3, #10
 800466c:	d90b      	bls.n	8004686 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004672:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2205      	movs	r2, #5
 800467e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e09f      	b.n	80047c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1e5      	bne.n	8004660 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	7e1b      	ldrb	r3, [r3, #24]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d108      	bne.n	80046ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	e007      	b.n	80046be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	7e5b      	ldrb	r3, [r3, #25]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d108      	bne.n	80046d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	e007      	b.n	80046e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	7e9b      	ldrb	r3, [r3, #26]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d108      	bne.n	8004702 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0220 	orr.w	r2, r2, #32
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	e007      	b.n	8004712 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0220 	bic.w	r2, r2, #32
 8004710:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	7edb      	ldrb	r3, [r3, #27]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d108      	bne.n	800472c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0210 	bic.w	r2, r2, #16
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	e007      	b.n	800473c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0210 	orr.w	r2, r2, #16
 800473a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	7f1b      	ldrb	r3, [r3, #28]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d108      	bne.n	8004756 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0208 	orr.w	r2, r2, #8
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	e007      	b.n	8004766 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0208 	bic.w	r2, r2, #8
 8004764:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	7f5b      	ldrb	r3, [r3, #29]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d108      	bne.n	8004780 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f042 0204 	orr.w	r2, r2, #4
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	e007      	b.n	8004790 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0204 	bic.w	r2, r2, #4
 800478e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	ea42 0103 	orr.w	r1, r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	1e5a      	subs	r2, r3, #1
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b087      	sub	sp, #28
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047e4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80047e6:	7cfb      	ldrb	r3, [r7, #19]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d003      	beq.n	80047f4 <HAL_CAN_ConfigFilter+0x26>
 80047ec:	7cfb      	ldrb	r3, [r7, #19]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	f040 80aa 	bne.w	8004948 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80047fa:	f043 0201 	orr.w	r2, r3, #1
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	f003 031f 	and.w	r3, r3, #31
 800480c:	2201      	movs	r2, #1
 800480e:	fa02 f303 	lsl.w	r3, r2, r3
 8004812:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	43db      	mvns	r3, r3
 800481e:	401a      	ands	r2, r3
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d123      	bne.n	8004876 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	43db      	mvns	r3, r3
 8004838:	401a      	ands	r2, r3
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004850:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	3248      	adds	r2, #72	@ 0x48
 8004856:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800486a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800486c:	6979      	ldr	r1, [r7, #20]
 800486e:	3348      	adds	r3, #72	@ 0x48
 8004870:	00db      	lsls	r3, r3, #3
 8004872:	440b      	add	r3, r1
 8004874:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d122      	bne.n	80048c4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	431a      	orrs	r2, r3
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800489e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	3248      	adds	r2, #72	@ 0x48
 80048a4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80048b8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80048ba:	6979      	ldr	r1, [r7, #20]
 80048bc:	3348      	adds	r3, #72	@ 0x48
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	440b      	add	r3, r1
 80048c2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d109      	bne.n	80048e0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	43db      	mvns	r3, r3
 80048d6:	401a      	ands	r2, r3
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80048de:	e007      	b.n	80048f0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	431a      	orrs	r2, r3
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d109      	bne.n	800490c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	43db      	mvns	r3, r3
 8004902:	401a      	ands	r2, r3
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800490a:	e007      	b.n	800491c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	431a      	orrs	r2, r3
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d107      	bne.n	8004934 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	431a      	orrs	r2, r3
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800493a:	f023 0201 	bic.w	r2, r3, #1
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	e006      	b.n	8004956 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
  }
}
 8004956:	4618      	mov	r0, r3
 8004958:	371c      	adds	r7, #28
 800495a:	46bd      	mov	sp, r7
 800495c:	bc80      	pop	{r7}
 800495e:	4770      	bx	lr

08004960 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b01      	cmp	r3, #1
 8004972:	d12e      	bne.n	80049d2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0201 	bic.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800498c:	f7ff fdf6 	bl	800457c <HAL_GetTick>
 8004990:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004992:	e012      	b.n	80049ba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004994:	f7ff fdf2 	bl	800457c <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b0a      	cmp	r3, #10
 80049a0:	d90b      	bls.n	80049ba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2205      	movs	r2, #5
 80049b2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e012      	b.n	80049e0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1e5      	bne.n	8004994 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80049ce:	2300      	movs	r3, #0
 80049d0:	e006      	b.n	80049e0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
  }
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b089      	sub	sp, #36	@ 0x24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049fc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004a06:	7ffb      	ldrb	r3, [r7, #31]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d003      	beq.n	8004a14 <HAL_CAN_AddTxMessage+0x2c>
 8004a0c:	7ffb      	ldrb	r3, [r7, #31]
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	f040 80ad 	bne.w	8004b6e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10a      	bne.n	8004a34 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d105      	bne.n	8004a34 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 8095 	beq.w	8004b5e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	0e1b      	lsrs	r3, r3, #24
 8004a38:	f003 0303 	and.w	r3, r3, #3
 8004a3c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004a3e:	2201      	movs	r2, #1
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	409a      	lsls	r2, r3
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10d      	bne.n	8004a6c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004a5a:	68f9      	ldr	r1, [r7, #12]
 8004a5c:	6809      	ldr	r1, [r1, #0]
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	3318      	adds	r3, #24
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	440b      	add	r3, r1
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	e00f      	b.n	8004a8c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004a76:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004a7c:	68f9      	ldr	r1, [r7, #12]
 8004a7e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004a80:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	3318      	adds	r3, #24
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	440b      	add	r3, r1
 8004a8a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6819      	ldr	r1, [r3, #0]
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	3318      	adds	r3, #24
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	440b      	add	r3, r1
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	7d1b      	ldrb	r3, [r3, #20]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d111      	bne.n	8004acc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	3318      	adds	r3, #24
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	4413      	add	r3, r2
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	6811      	ldr	r1, [r2, #0]
 8004abc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	3318      	adds	r3, #24
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	440b      	add	r3, r1
 8004ac8:	3304      	adds	r3, #4
 8004aca:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3307      	adds	r3, #7
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	061a      	lsls	r2, r3, #24
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3306      	adds	r3, #6
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	041b      	lsls	r3, r3, #16
 8004adc:	431a      	orrs	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	3305      	adds	r3, #5
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	021b      	lsls	r3, r3, #8
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	3204      	adds	r2, #4
 8004aec:	7812      	ldrb	r2, [r2, #0]
 8004aee:	4610      	mov	r0, r2
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	6811      	ldr	r1, [r2, #0]
 8004af4:	ea43 0200 	orr.w	r2, r3, r0
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	011b      	lsls	r3, r3, #4
 8004afc:	440b      	add	r3, r1
 8004afe:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004b02:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3303      	adds	r3, #3
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	061a      	lsls	r2, r3, #24
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3302      	adds	r3, #2
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	041b      	lsls	r3, r3, #16
 8004b14:	431a      	orrs	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	021b      	lsls	r3, r3, #8
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	7812      	ldrb	r2, [r2, #0]
 8004b24:	4610      	mov	r0, r2
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	6811      	ldr	r1, [r2, #0]
 8004b2a:	ea43 0200 	orr.w	r2, r3, r0
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	011b      	lsls	r3, r3, #4
 8004b32:	440b      	add	r3, r1
 8004b34:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8004b38:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	3318      	adds	r3, #24
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	4413      	add	r3, r2
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	6811      	ldr	r1, [r2, #0]
 8004b4c:	f043 0201 	orr.w	r2, r3, #1
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	3318      	adds	r3, #24
 8004b54:	011b      	lsls	r3, r3, #4
 8004b56:	440b      	add	r3, r1
 8004b58:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	e00e      	b.n	8004b7c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b62:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e006      	b.n	8004b7c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b72:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
  }
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3724      	adds	r7, #36	@ 0x24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bc80      	pop	{r7}
 8004b84:	4770      	bx	lr

08004b86 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004b86:	b480      	push	{r7}
 8004b88:	b087      	sub	sp, #28
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	60f8      	str	r0, [r7, #12]
 8004b8e:	60b9      	str	r1, [r7, #8]
 8004b90:	607a      	str	r2, [r7, #4]
 8004b92:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b9a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004b9c:	7dfb      	ldrb	r3, [r7, #23]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d003      	beq.n	8004baa <HAL_CAN_GetRxMessage+0x24>
 8004ba2:	7dfb      	ldrb	r3, [r7, #23]
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	f040 8103 	bne.w	8004db0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10e      	bne.n	8004bce <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f003 0303 	and.w	r3, r3, #3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d116      	bne.n	8004bec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e0f7      	b.n	8004dbe <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	f003 0303 	and.w	r3, r3, #3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d107      	bne.n	8004bec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0e8      	b.n	8004dbe <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	331b      	adds	r3, #27
 8004bf4:	011b      	lsls	r3, r3, #4
 8004bf6:	4413      	add	r3, r2
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0204 	and.w	r2, r3, #4
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10c      	bne.n	8004c24 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	331b      	adds	r3, #27
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	4413      	add	r3, r2
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	0d5b      	lsrs	r3, r3, #21
 8004c1a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	e00b      	b.n	8004c3c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	331b      	adds	r3, #27
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	4413      	add	r3, r2
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	08db      	lsrs	r3, r3, #3
 8004c34:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	331b      	adds	r3, #27
 8004c44:	011b      	lsls	r3, r3, #4
 8004c46:	4413      	add	r3, r2
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0202 	and.w	r2, r3, #2
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	331b      	adds	r3, #27
 8004c5a:	011b      	lsls	r3, r3, #4
 8004c5c:	4413      	add	r3, r2
 8004c5e:	3304      	adds	r3, #4
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2208      	movs	r2, #8
 8004c6e:	611a      	str	r2, [r3, #16]
 8004c70:	e00b      	b.n	8004c8a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	331b      	adds	r3, #27
 8004c7a:	011b      	lsls	r3, r3, #4
 8004c7c:	4413      	add	r3, r2
 8004c7e:	3304      	adds	r3, #4
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 020f 	and.w	r2, r3, #15
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	331b      	adds	r3, #27
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	4413      	add	r3, r2
 8004c96:	3304      	adds	r3, #4
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	0a1b      	lsrs	r3, r3, #8
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	331b      	adds	r3, #27
 8004caa:	011b      	lsls	r3, r3, #4
 8004cac:	4413      	add	r3, r2
 8004cae:	3304      	adds	r3, #4
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	0c1b      	lsrs	r3, r3, #16
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	011b      	lsls	r3, r3, #4
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	0a1a      	lsrs	r2, r3, #8
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	011b      	lsls	r3, r3, #4
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	0c1a      	lsrs	r2, r3, #16
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	3302      	adds	r3, #2
 8004d00:	b2d2      	uxtb	r2, r2
 8004d02:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	011b      	lsls	r3, r3, #4
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	0e1a      	lsrs	r2, r3, #24
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	3303      	adds	r3, #3
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	3304      	adds	r3, #4
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	0a1a      	lsrs	r2, r3, #8
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	3305      	adds	r3, #5
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	011b      	lsls	r3, r3, #4
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	0c1a      	lsrs	r2, r3, #16
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	3306      	adds	r3, #6
 8004d66:	b2d2      	uxtb	r2, r2
 8004d68:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	0e1a      	lsrs	r2, r3, #24
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	3307      	adds	r3, #7
 8004d80:	b2d2      	uxtb	r2, r2
 8004d82:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d108      	bne.n	8004d9c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68da      	ldr	r2, [r3, #12]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f042 0220 	orr.w	r2, r2, #32
 8004d98:	60da      	str	r2, [r3, #12]
 8004d9a:	e007      	b.n	8004dac <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0220 	orr.w	r2, r2, #32
 8004daa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	e006      	b.n	8004dbe <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
  }
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	371c      	adds	r7, #28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dd8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004dda:	7bfb      	ldrb	r3, [r7, #15]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d002      	beq.n	8004de6 <HAL_CAN_ActivateNotification+0x1e>
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d109      	bne.n	8004dfa <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6959      	ldr	r1, [r3, #20]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	e006      	b.n	8004e08 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
  }
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bc80      	pop	{r7}
 8004e10:	4770      	bx	lr

08004e12 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b08a      	sub	sp, #40	@ 0x28
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d07c      	beq.n	8004f52 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d023      	beq.n	8004eaa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2201      	movs	r2, #1
 8004e68:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d003      	beq.n	8004e7c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f983 	bl	8005180 <HAL_CAN_TxMailbox0CompleteCallback>
 8004e7a:	e016      	b.n	8004eaa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	f003 0304 	and.w	r3, r3, #4
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d004      	beq.n	8004e90 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e88:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e8e:	e00c      	b.n	8004eaa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	f003 0308 	and.w	r3, r3, #8
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d004      	beq.n	8004ea4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ea2:	e002      	b.n	8004eaa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f986 	bl	80051b6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d024      	beq.n	8004efe <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ebc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d003      	beq.n	8004ed0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f962 	bl	8005192 <HAL_CAN_TxMailbox1CompleteCallback>
 8004ece:	e016      	b.n	8004efe <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d004      	beq.n	8004ee4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004edc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004ee0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ee2:	e00c      	b.n	8004efe <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d004      	beq.n	8004ef8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ef6:	e002      	b.n	8004efe <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 f965 	bl	80051c8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d024      	beq.n	8004f52 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004f10:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f941 	bl	80051a4 <HAL_CAN_TxMailbox2CompleteCallback>
 8004f22:	e016      	b.n	8004f52 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d004      	beq.n	8004f38 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f36:	e00c      	b.n	8004f52 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d004      	beq.n	8004f4c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f4a:	e002      	b.n	8004f52 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f944 	bl	80051da <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004f52:	6a3b      	ldr	r3, [r7, #32]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00c      	beq.n	8004f76 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f003 0310 	and.w	r3, r3, #16
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d007      	beq.n	8004f76 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f68:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f6c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2210      	movs	r2, #16
 8004f74:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004f76:	6a3b      	ldr	r3, [r7, #32]
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00b      	beq.n	8004f98 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d006      	beq.n	8004f98 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2208      	movs	r2, #8
 8004f90:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f92a 	bl	80051ec <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d009      	beq.n	8004fb6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f003 0303 	and.w	r3, r3, #3
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7fc fa53 	bl	800145c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00c      	beq.n	8004fda <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	f003 0310 	and.w	r3, r3, #16
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d007      	beq.n	8004fda <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fcc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004fd0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2210      	movs	r2, #16
 8004fd8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	f003 0320 	and.w	r3, r3, #32
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00b      	beq.n	8004ffc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	f003 0308 	and.w	r3, r3, #8
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d006      	beq.n	8004ffc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2208      	movs	r2, #8
 8004ff4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f90a 	bl	8005210 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	f003 0310 	and.w	r3, r3, #16
 8005002:	2b00      	cmp	r3, #0
 8005004:	d009      	beq.n	800501a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	f003 0303 	and.w	r3, r3, #3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f8f2 	bl	80051fe <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00b      	beq.n	800503c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	f003 0310 	and.w	r3, r3, #16
 800502a:	2b00      	cmp	r3, #0
 800502c:	d006      	beq.n	800503c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2210      	movs	r2, #16
 8005034:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f8f3 	bl	8005222 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00b      	beq.n	800505e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	f003 0308 	and.w	r3, r3, #8
 800504c:	2b00      	cmp	r3, #0
 800504e:	d006      	beq.n	800505e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2208      	movs	r2, #8
 8005056:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f8eb 	bl	8005234 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d07b      	beq.n	8005160 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	f003 0304 	and.w	r3, r3, #4
 800506e:	2b00      	cmp	r3, #0
 8005070:	d072      	beq.n	8005158 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005078:	2b00      	cmp	r3, #0
 800507a:	d008      	beq.n	800508e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005088:	f043 0301 	orr.w	r3, r3, #1
 800508c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005094:	2b00      	cmp	r3, #0
 8005096:	d008      	beq.n	80050aa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80050a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a4:	f043 0302 	orr.w	r3, r3, #2
 80050a8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d008      	beq.n	80050c6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80050be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c0:	f043 0304 	orr.w	r3, r3, #4
 80050c4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d043      	beq.n	8005158 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d03e      	beq.n	8005158 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050e0:	2b60      	cmp	r3, #96	@ 0x60
 80050e2:	d02b      	beq.n	800513c <HAL_CAN_IRQHandler+0x32a>
 80050e4:	2b60      	cmp	r3, #96	@ 0x60
 80050e6:	d82e      	bhi.n	8005146 <HAL_CAN_IRQHandler+0x334>
 80050e8:	2b50      	cmp	r3, #80	@ 0x50
 80050ea:	d022      	beq.n	8005132 <HAL_CAN_IRQHandler+0x320>
 80050ec:	2b50      	cmp	r3, #80	@ 0x50
 80050ee:	d82a      	bhi.n	8005146 <HAL_CAN_IRQHandler+0x334>
 80050f0:	2b40      	cmp	r3, #64	@ 0x40
 80050f2:	d019      	beq.n	8005128 <HAL_CAN_IRQHandler+0x316>
 80050f4:	2b40      	cmp	r3, #64	@ 0x40
 80050f6:	d826      	bhi.n	8005146 <HAL_CAN_IRQHandler+0x334>
 80050f8:	2b30      	cmp	r3, #48	@ 0x30
 80050fa:	d010      	beq.n	800511e <HAL_CAN_IRQHandler+0x30c>
 80050fc:	2b30      	cmp	r3, #48	@ 0x30
 80050fe:	d822      	bhi.n	8005146 <HAL_CAN_IRQHandler+0x334>
 8005100:	2b10      	cmp	r3, #16
 8005102:	d002      	beq.n	800510a <HAL_CAN_IRQHandler+0x2f8>
 8005104:	2b20      	cmp	r3, #32
 8005106:	d005      	beq.n	8005114 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005108:	e01d      	b.n	8005146 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800510a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510c:	f043 0308 	orr.w	r3, r3, #8
 8005110:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005112:	e019      	b.n	8005148 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005116:	f043 0310 	orr.w	r3, r3, #16
 800511a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800511c:	e014      	b.n	8005148 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800511e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005120:	f043 0320 	orr.w	r3, r3, #32
 8005124:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005126:	e00f      	b.n	8005148 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800512e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005130:	e00a      	b.n	8005148 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005138:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800513a:	e005      	b.n	8005148 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800513c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005142:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005144:	e000      	b.n	8005148 <HAL_CAN_IRQHandler+0x336>
            break;
 8005146:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699a      	ldr	r2, [r3, #24]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005156:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2204      	movs	r2, #4
 800515e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005162:	2b00      	cmp	r3, #0
 8005164:	d008      	beq.n	8005178 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800516a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516c:	431a      	orrs	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f867 	bl	8005246 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005178:	bf00      	nop
 800517a:	3728      	adds	r7, #40	@ 0x28
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr

08005192 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800519a:	bf00      	nop
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	bc80      	pop	{r7}
 80051a2:	4770      	bx	lr

080051a4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bc80      	pop	{r7}
 80051b4:	4770      	bx	lr

080051b6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bc80      	pop	{r7}
 80051c6:	4770      	bx	lr

080051c8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bc80      	pop	{r7}
 80051d8:	4770      	bx	lr

080051da <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bc80      	pop	{r7}
 80051ea:	4770      	bx	lr

080051ec <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bc80      	pop	{r7}
 80051fc:	4770      	bx	lr

080051fe <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80051fe:	b480      	push	{r7}
 8005200:	b083      	sub	sp, #12
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005206:	bf00      	nop
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	bc80      	pop	{r7}
 800520e:	4770      	bx	lr

08005210 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	bc80      	pop	{r7}
 8005220:	4770      	bx	lr

08005222 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	bc80      	pop	{r7}
 8005232:	4770      	bx	lr

08005234 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	bc80      	pop	{r7}
 8005244:	4770      	bx	lr

08005246 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800524e:	bf00      	nop
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	bc80      	pop	{r7}
 8005256:	4770      	bx	lr

08005258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005268:	4b0c      	ldr	r3, [pc, #48]	@ (800529c <__NVIC_SetPriorityGrouping+0x44>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005274:	4013      	ands	r3, r2
 8005276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005280:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800528a:	4a04      	ldr	r2, [pc, #16]	@ (800529c <__NVIC_SetPriorityGrouping+0x44>)
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	60d3      	str	r3, [r2, #12]
}
 8005290:	bf00      	nop
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	bc80      	pop	{r7}
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	e000ed00 	.word	0xe000ed00

080052a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052a0:	b480      	push	{r7}
 80052a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052a4:	4b04      	ldr	r3, [pc, #16]	@ (80052b8 <__NVIC_GetPriorityGrouping+0x18>)
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	0a1b      	lsrs	r3, r3, #8
 80052aa:	f003 0307 	and.w	r3, r3, #7
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bc80      	pop	{r7}
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	e000ed00 	.word	0xe000ed00

080052bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	4603      	mov	r3, r0
 80052c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	db0b      	blt.n	80052e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052ce:	79fb      	ldrb	r3, [r7, #7]
 80052d0:	f003 021f 	and.w	r2, r3, #31
 80052d4:	4906      	ldr	r1, [pc, #24]	@ (80052f0 <__NVIC_EnableIRQ+0x34>)
 80052d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052da:	095b      	lsrs	r3, r3, #5
 80052dc:	2001      	movs	r0, #1
 80052de:	fa00 f202 	lsl.w	r2, r0, r2
 80052e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bc80      	pop	{r7}
 80052ee:	4770      	bx	lr
 80052f0:	e000e100 	.word	0xe000e100

080052f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	4603      	mov	r3, r0
 80052fc:	6039      	str	r1, [r7, #0]
 80052fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005304:	2b00      	cmp	r3, #0
 8005306:	db0a      	blt.n	800531e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	b2da      	uxtb	r2, r3
 800530c:	490c      	ldr	r1, [pc, #48]	@ (8005340 <__NVIC_SetPriority+0x4c>)
 800530e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005312:	0112      	lsls	r2, r2, #4
 8005314:	b2d2      	uxtb	r2, r2
 8005316:	440b      	add	r3, r1
 8005318:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800531c:	e00a      	b.n	8005334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	b2da      	uxtb	r2, r3
 8005322:	4908      	ldr	r1, [pc, #32]	@ (8005344 <__NVIC_SetPriority+0x50>)
 8005324:	79fb      	ldrb	r3, [r7, #7]
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	3b04      	subs	r3, #4
 800532c:	0112      	lsls	r2, r2, #4
 800532e:	b2d2      	uxtb	r2, r2
 8005330:	440b      	add	r3, r1
 8005332:	761a      	strb	r2, [r3, #24]
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	bc80      	pop	{r7}
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	e000e100 	.word	0xe000e100
 8005344:	e000ed00 	.word	0xe000ed00

08005348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005348:	b480      	push	{r7}
 800534a:	b089      	sub	sp, #36	@ 0x24
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f003 0307 	and.w	r3, r3, #7
 800535a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	f1c3 0307 	rsb	r3, r3, #7
 8005362:	2b04      	cmp	r3, #4
 8005364:	bf28      	it	cs
 8005366:	2304      	movcs	r3, #4
 8005368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	3304      	adds	r3, #4
 800536e:	2b06      	cmp	r3, #6
 8005370:	d902      	bls.n	8005378 <NVIC_EncodePriority+0x30>
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	3b03      	subs	r3, #3
 8005376:	e000      	b.n	800537a <NVIC_EncodePriority+0x32>
 8005378:	2300      	movs	r3, #0
 800537a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800537c:	f04f 32ff 	mov.w	r2, #4294967295
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	fa02 f303 	lsl.w	r3, r2, r3
 8005386:	43da      	mvns	r2, r3
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	401a      	ands	r2, r3
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005390:	f04f 31ff 	mov.w	r1, #4294967295
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	fa01 f303 	lsl.w	r3, r1, r3
 800539a:	43d9      	mvns	r1, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053a0:	4313      	orrs	r3, r2
         );
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3724      	adds	r7, #36	@ 0x24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bc80      	pop	{r7}
 80053aa:	4770      	bx	lr

080053ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7ff ff4f 	bl	8005258 <__NVIC_SetPriorityGrouping>
}
 80053ba:	bf00      	nop
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b086      	sub	sp, #24
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	4603      	mov	r3, r0
 80053ca:	60b9      	str	r1, [r7, #8]
 80053cc:	607a      	str	r2, [r7, #4]
 80053ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80053d4:	f7ff ff64 	bl	80052a0 <__NVIC_GetPriorityGrouping>
 80053d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	68b9      	ldr	r1, [r7, #8]
 80053de:	6978      	ldr	r0, [r7, #20]
 80053e0:	f7ff ffb2 	bl	8005348 <NVIC_EncodePriority>
 80053e4:	4602      	mov	r2, r0
 80053e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053ea:	4611      	mov	r1, r2
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7ff ff81 	bl	80052f4 <__NVIC_SetPriority>
}
 80053f2:	bf00      	nop
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b082      	sub	sp, #8
 80053fe:	af00      	add	r7, sp, #0
 8005400:	4603      	mov	r3, r0
 8005402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff ff57 	bl	80052bc <__NVIC_EnableIRQ>
}
 800540e:	bf00      	nop
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
	...

08005418 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005418:	b480      	push	{r7}
 800541a:	b08b      	sub	sp, #44	@ 0x2c
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005422:	2300      	movs	r3, #0
 8005424:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005426:	2300      	movs	r3, #0
 8005428:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800542a:	e179      	b.n	8005720 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800542c:	2201      	movs	r2, #1
 800542e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005430:	fa02 f303 	lsl.w	r3, r2, r3
 8005434:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	69fa      	ldr	r2, [r7, #28]
 800543c:	4013      	ands	r3, r2
 800543e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	429a      	cmp	r2, r3
 8005446:	f040 8168 	bne.w	800571a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	4a96      	ldr	r2, [pc, #600]	@ (80056a8 <HAL_GPIO_Init+0x290>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d05e      	beq.n	8005512 <HAL_GPIO_Init+0xfa>
 8005454:	4a94      	ldr	r2, [pc, #592]	@ (80056a8 <HAL_GPIO_Init+0x290>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d875      	bhi.n	8005546 <HAL_GPIO_Init+0x12e>
 800545a:	4a94      	ldr	r2, [pc, #592]	@ (80056ac <HAL_GPIO_Init+0x294>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d058      	beq.n	8005512 <HAL_GPIO_Init+0xfa>
 8005460:	4a92      	ldr	r2, [pc, #584]	@ (80056ac <HAL_GPIO_Init+0x294>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d86f      	bhi.n	8005546 <HAL_GPIO_Init+0x12e>
 8005466:	4a92      	ldr	r2, [pc, #584]	@ (80056b0 <HAL_GPIO_Init+0x298>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d052      	beq.n	8005512 <HAL_GPIO_Init+0xfa>
 800546c:	4a90      	ldr	r2, [pc, #576]	@ (80056b0 <HAL_GPIO_Init+0x298>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d869      	bhi.n	8005546 <HAL_GPIO_Init+0x12e>
 8005472:	4a90      	ldr	r2, [pc, #576]	@ (80056b4 <HAL_GPIO_Init+0x29c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d04c      	beq.n	8005512 <HAL_GPIO_Init+0xfa>
 8005478:	4a8e      	ldr	r2, [pc, #568]	@ (80056b4 <HAL_GPIO_Init+0x29c>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d863      	bhi.n	8005546 <HAL_GPIO_Init+0x12e>
 800547e:	4a8e      	ldr	r2, [pc, #568]	@ (80056b8 <HAL_GPIO_Init+0x2a0>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d046      	beq.n	8005512 <HAL_GPIO_Init+0xfa>
 8005484:	4a8c      	ldr	r2, [pc, #560]	@ (80056b8 <HAL_GPIO_Init+0x2a0>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d85d      	bhi.n	8005546 <HAL_GPIO_Init+0x12e>
 800548a:	2b12      	cmp	r3, #18
 800548c:	d82a      	bhi.n	80054e4 <HAL_GPIO_Init+0xcc>
 800548e:	2b12      	cmp	r3, #18
 8005490:	d859      	bhi.n	8005546 <HAL_GPIO_Init+0x12e>
 8005492:	a201      	add	r2, pc, #4	@ (adr r2, 8005498 <HAL_GPIO_Init+0x80>)
 8005494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005498:	08005513 	.word	0x08005513
 800549c:	080054ed 	.word	0x080054ed
 80054a0:	080054ff 	.word	0x080054ff
 80054a4:	08005541 	.word	0x08005541
 80054a8:	08005547 	.word	0x08005547
 80054ac:	08005547 	.word	0x08005547
 80054b0:	08005547 	.word	0x08005547
 80054b4:	08005547 	.word	0x08005547
 80054b8:	08005547 	.word	0x08005547
 80054bc:	08005547 	.word	0x08005547
 80054c0:	08005547 	.word	0x08005547
 80054c4:	08005547 	.word	0x08005547
 80054c8:	08005547 	.word	0x08005547
 80054cc:	08005547 	.word	0x08005547
 80054d0:	08005547 	.word	0x08005547
 80054d4:	08005547 	.word	0x08005547
 80054d8:	08005547 	.word	0x08005547
 80054dc:	080054f5 	.word	0x080054f5
 80054e0:	08005509 	.word	0x08005509
 80054e4:	4a75      	ldr	r2, [pc, #468]	@ (80056bc <HAL_GPIO_Init+0x2a4>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d013      	beq.n	8005512 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80054ea:	e02c      	b.n	8005546 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	623b      	str	r3, [r7, #32]
          break;
 80054f2:	e029      	b.n	8005548 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	3304      	adds	r3, #4
 80054fa:	623b      	str	r3, [r7, #32]
          break;
 80054fc:	e024      	b.n	8005548 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	3308      	adds	r3, #8
 8005504:	623b      	str	r3, [r7, #32]
          break;
 8005506:	e01f      	b.n	8005548 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	330c      	adds	r3, #12
 800550e:	623b      	str	r3, [r7, #32]
          break;
 8005510:	e01a      	b.n	8005548 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d102      	bne.n	8005520 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800551a:	2304      	movs	r3, #4
 800551c:	623b      	str	r3, [r7, #32]
          break;
 800551e:	e013      	b.n	8005548 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d105      	bne.n	8005534 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005528:	2308      	movs	r3, #8
 800552a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	69fa      	ldr	r2, [r7, #28]
 8005530:	611a      	str	r2, [r3, #16]
          break;
 8005532:	e009      	b.n	8005548 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005534:	2308      	movs	r3, #8
 8005536:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	69fa      	ldr	r2, [r7, #28]
 800553c:	615a      	str	r2, [r3, #20]
          break;
 800553e:	e003      	b.n	8005548 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005540:	2300      	movs	r3, #0
 8005542:	623b      	str	r3, [r7, #32]
          break;
 8005544:	e000      	b.n	8005548 <HAL_GPIO_Init+0x130>
          break;
 8005546:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	2bff      	cmp	r3, #255	@ 0xff
 800554c:	d801      	bhi.n	8005552 <HAL_GPIO_Init+0x13a>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	e001      	b.n	8005556 <HAL_GPIO_Init+0x13e>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3304      	adds	r3, #4
 8005556:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	2bff      	cmp	r3, #255	@ 0xff
 800555c:	d802      	bhi.n	8005564 <HAL_GPIO_Init+0x14c>
 800555e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	e002      	b.n	800556a <HAL_GPIO_Init+0x152>
 8005564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005566:	3b08      	subs	r3, #8
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	210f      	movs	r1, #15
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	fa01 f303 	lsl.w	r3, r1, r3
 8005578:	43db      	mvns	r3, r3
 800557a:	401a      	ands	r2, r3
 800557c:	6a39      	ldr	r1, [r7, #32]
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	fa01 f303 	lsl.w	r3, r1, r3
 8005584:	431a      	orrs	r2, r3
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 80c1 	beq.w	800571a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005598:	4b49      	ldr	r3, [pc, #292]	@ (80056c0 <HAL_GPIO_Init+0x2a8>)
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	4a48      	ldr	r2, [pc, #288]	@ (80056c0 <HAL_GPIO_Init+0x2a8>)
 800559e:	f043 0301 	orr.w	r3, r3, #1
 80055a2:	6193      	str	r3, [r2, #24]
 80055a4:	4b46      	ldr	r3, [pc, #280]	@ (80056c0 <HAL_GPIO_Init+0x2a8>)
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	60bb      	str	r3, [r7, #8]
 80055ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80055b0:	4a44      	ldr	r2, [pc, #272]	@ (80056c4 <HAL_GPIO_Init+0x2ac>)
 80055b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b4:	089b      	lsrs	r3, r3, #2
 80055b6:	3302      	adds	r3, #2
 80055b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80055be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c0:	f003 0303 	and.w	r3, r3, #3
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	220f      	movs	r2, #15
 80055c8:	fa02 f303 	lsl.w	r3, r2, r3
 80055cc:	43db      	mvns	r3, r3
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	4013      	ands	r3, r2
 80055d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a3c      	ldr	r2, [pc, #240]	@ (80056c8 <HAL_GPIO_Init+0x2b0>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d01f      	beq.n	800561c <HAL_GPIO_Init+0x204>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a3b      	ldr	r2, [pc, #236]	@ (80056cc <HAL_GPIO_Init+0x2b4>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d019      	beq.n	8005618 <HAL_GPIO_Init+0x200>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a3a      	ldr	r2, [pc, #232]	@ (80056d0 <HAL_GPIO_Init+0x2b8>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d013      	beq.n	8005614 <HAL_GPIO_Init+0x1fc>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a39      	ldr	r2, [pc, #228]	@ (80056d4 <HAL_GPIO_Init+0x2bc>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00d      	beq.n	8005610 <HAL_GPIO_Init+0x1f8>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a38      	ldr	r2, [pc, #224]	@ (80056d8 <HAL_GPIO_Init+0x2c0>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d007      	beq.n	800560c <HAL_GPIO_Init+0x1f4>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a37      	ldr	r2, [pc, #220]	@ (80056dc <HAL_GPIO_Init+0x2c4>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d101      	bne.n	8005608 <HAL_GPIO_Init+0x1f0>
 8005604:	2305      	movs	r3, #5
 8005606:	e00a      	b.n	800561e <HAL_GPIO_Init+0x206>
 8005608:	2306      	movs	r3, #6
 800560a:	e008      	b.n	800561e <HAL_GPIO_Init+0x206>
 800560c:	2304      	movs	r3, #4
 800560e:	e006      	b.n	800561e <HAL_GPIO_Init+0x206>
 8005610:	2303      	movs	r3, #3
 8005612:	e004      	b.n	800561e <HAL_GPIO_Init+0x206>
 8005614:	2302      	movs	r3, #2
 8005616:	e002      	b.n	800561e <HAL_GPIO_Init+0x206>
 8005618:	2301      	movs	r3, #1
 800561a:	e000      	b.n	800561e <HAL_GPIO_Init+0x206>
 800561c:	2300      	movs	r3, #0
 800561e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005620:	f002 0203 	and.w	r2, r2, #3
 8005624:	0092      	lsls	r2, r2, #2
 8005626:	4093      	lsls	r3, r2
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	4313      	orrs	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800562e:	4925      	ldr	r1, [pc, #148]	@ (80056c4 <HAL_GPIO_Init+0x2ac>)
 8005630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005632:	089b      	lsrs	r3, r3, #2
 8005634:	3302      	adds	r3, #2
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d006      	beq.n	8005656 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005648:	4b25      	ldr	r3, [pc, #148]	@ (80056e0 <HAL_GPIO_Init+0x2c8>)
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	4924      	ldr	r1, [pc, #144]	@ (80056e0 <HAL_GPIO_Init+0x2c8>)
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	4313      	orrs	r3, r2
 8005652:	608b      	str	r3, [r1, #8]
 8005654:	e006      	b.n	8005664 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005656:	4b22      	ldr	r3, [pc, #136]	@ (80056e0 <HAL_GPIO_Init+0x2c8>)
 8005658:	689a      	ldr	r2, [r3, #8]
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	43db      	mvns	r3, r3
 800565e:	4920      	ldr	r1, [pc, #128]	@ (80056e0 <HAL_GPIO_Init+0x2c8>)
 8005660:	4013      	ands	r3, r2
 8005662:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d006      	beq.n	800567e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005670:	4b1b      	ldr	r3, [pc, #108]	@ (80056e0 <HAL_GPIO_Init+0x2c8>)
 8005672:	68da      	ldr	r2, [r3, #12]
 8005674:	491a      	ldr	r1, [pc, #104]	@ (80056e0 <HAL_GPIO_Init+0x2c8>)
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	4313      	orrs	r3, r2
 800567a:	60cb      	str	r3, [r1, #12]
 800567c:	e006      	b.n	800568c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800567e:	4b18      	ldr	r3, [pc, #96]	@ (80056e0 <HAL_GPIO_Init+0x2c8>)
 8005680:	68da      	ldr	r2, [r3, #12]
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	43db      	mvns	r3, r3
 8005686:	4916      	ldr	r1, [pc, #88]	@ (80056e0 <HAL_GPIO_Init+0x2c8>)
 8005688:	4013      	ands	r3, r2
 800568a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d025      	beq.n	80056e4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005698:	4b11      	ldr	r3, [pc, #68]	@ (80056e0 <HAL_GPIO_Init+0x2c8>)
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	4910      	ldr	r1, [pc, #64]	@ (80056e0 <HAL_GPIO_Init+0x2c8>)
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	604b      	str	r3, [r1, #4]
 80056a4:	e025      	b.n	80056f2 <HAL_GPIO_Init+0x2da>
 80056a6:	bf00      	nop
 80056a8:	10320000 	.word	0x10320000
 80056ac:	10310000 	.word	0x10310000
 80056b0:	10220000 	.word	0x10220000
 80056b4:	10210000 	.word	0x10210000
 80056b8:	10120000 	.word	0x10120000
 80056bc:	10110000 	.word	0x10110000
 80056c0:	40021000 	.word	0x40021000
 80056c4:	40010000 	.word	0x40010000
 80056c8:	40010800 	.word	0x40010800
 80056cc:	40010c00 	.word	0x40010c00
 80056d0:	40011000 	.word	0x40011000
 80056d4:	40011400 	.word	0x40011400
 80056d8:	40011800 	.word	0x40011800
 80056dc:	40011c00 	.word	0x40011c00
 80056e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80056e4:	4b15      	ldr	r3, [pc, #84]	@ (800573c <HAL_GPIO_Init+0x324>)
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	43db      	mvns	r3, r3
 80056ec:	4913      	ldr	r1, [pc, #76]	@ (800573c <HAL_GPIO_Init+0x324>)
 80056ee:	4013      	ands	r3, r2
 80056f0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d006      	beq.n	800570c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80056fe:	4b0f      	ldr	r3, [pc, #60]	@ (800573c <HAL_GPIO_Init+0x324>)
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	490e      	ldr	r1, [pc, #56]	@ (800573c <HAL_GPIO_Init+0x324>)
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	4313      	orrs	r3, r2
 8005708:	600b      	str	r3, [r1, #0]
 800570a:	e006      	b.n	800571a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800570c:	4b0b      	ldr	r3, [pc, #44]	@ (800573c <HAL_GPIO_Init+0x324>)
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	43db      	mvns	r3, r3
 8005714:	4909      	ldr	r1, [pc, #36]	@ (800573c <HAL_GPIO_Init+0x324>)
 8005716:	4013      	ands	r3, r2
 8005718:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800571a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571c:	3301      	adds	r3, #1
 800571e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005726:	fa22 f303 	lsr.w	r3, r2, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	f47f ae7e 	bne.w	800542c <HAL_GPIO_Init+0x14>
  }
}
 8005730:	bf00      	nop
 8005732:	bf00      	nop
 8005734:	372c      	adds	r7, #44	@ 0x2c
 8005736:	46bd      	mov	sp, r7
 8005738:	bc80      	pop	{r7}
 800573a:	4770      	bx	lr
 800573c:	40010400 	.word	0x40010400

08005740 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	460b      	mov	r3, r1
 800574a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	887b      	ldrh	r3, [r7, #2]
 8005752:	4013      	ands	r3, r2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d002      	beq.n	800575e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005758:	2301      	movs	r3, #1
 800575a:	73fb      	strb	r3, [r7, #15]
 800575c:	e001      	b.n	8005762 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800575e:	2300      	movs	r3, #0
 8005760:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005762:	7bfb      	ldrb	r3, [r7, #15]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	bc80      	pop	{r7}
 800576c:	4770      	bx	lr

0800576e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800576e:	b480      	push	{r7}
 8005770:	b083      	sub	sp, #12
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	460b      	mov	r3, r1
 8005778:	807b      	strh	r3, [r7, #2]
 800577a:	4613      	mov	r3, r2
 800577c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800577e:	787b      	ldrb	r3, [r7, #1]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005784:	887a      	ldrh	r2, [r7, #2]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800578a:	e003      	b.n	8005794 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800578c:	887b      	ldrh	r3, [r7, #2]
 800578e:	041a      	lsls	r2, r3, #16
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	611a      	str	r2, [r3, #16]
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	bc80      	pop	{r7}
 800579c:	4770      	bx	lr

0800579e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800579e:	b480      	push	{r7}
 80057a0:	b085      	sub	sp, #20
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	460b      	mov	r3, r1
 80057a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80057b0:	887a      	ldrh	r2, [r7, #2]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	4013      	ands	r3, r2
 80057b6:	041a      	lsls	r2, r3, #16
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	43d9      	mvns	r1, r3
 80057bc:	887b      	ldrh	r3, [r7, #2]
 80057be:	400b      	ands	r3, r1
 80057c0:	431a      	orrs	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	611a      	str	r2, [r3, #16]
}
 80057c6:	bf00      	nop
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bc80      	pop	{r7}
 80057ce:	4770      	bx	lr

080057d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e12b      	b.n	8005a3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d106      	bne.n	80057fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7fd fa20 	bl	8002c3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2224      	movs	r2, #36	@ 0x24
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0201 	bic.w	r2, r2, #1
 8005812:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005822:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005832:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005834:	f002 f864 	bl	8007900 <HAL_RCC_GetPCLK1Freq>
 8005838:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	4a81      	ldr	r2, [pc, #516]	@ (8005a44 <HAL_I2C_Init+0x274>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d807      	bhi.n	8005854 <HAL_I2C_Init+0x84>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4a80      	ldr	r2, [pc, #512]	@ (8005a48 <HAL_I2C_Init+0x278>)
 8005848:	4293      	cmp	r3, r2
 800584a:	bf94      	ite	ls
 800584c:	2301      	movls	r3, #1
 800584e:	2300      	movhi	r3, #0
 8005850:	b2db      	uxtb	r3, r3
 8005852:	e006      	b.n	8005862 <HAL_I2C_Init+0x92>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4a7d      	ldr	r2, [pc, #500]	@ (8005a4c <HAL_I2C_Init+0x27c>)
 8005858:	4293      	cmp	r3, r2
 800585a:	bf94      	ite	ls
 800585c:	2301      	movls	r3, #1
 800585e:	2300      	movhi	r3, #0
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e0e7      	b.n	8005a3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	4a78      	ldr	r2, [pc, #480]	@ (8005a50 <HAL_I2C_Init+0x280>)
 800586e:	fba2 2303 	umull	r2, r3, r2, r3
 8005872:	0c9b      	lsrs	r3, r3, #18
 8005874:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	430a      	orrs	r2, r1
 8005888:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6a1b      	ldr	r3, [r3, #32]
 8005890:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	4a6a      	ldr	r2, [pc, #424]	@ (8005a44 <HAL_I2C_Init+0x274>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d802      	bhi.n	80058a4 <HAL_I2C_Init+0xd4>
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	3301      	adds	r3, #1
 80058a2:	e009      	b.n	80058b8 <HAL_I2C_Init+0xe8>
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80058aa:	fb02 f303 	mul.w	r3, r2, r3
 80058ae:	4a69      	ldr	r2, [pc, #420]	@ (8005a54 <HAL_I2C_Init+0x284>)
 80058b0:	fba2 2303 	umull	r2, r3, r2, r3
 80058b4:	099b      	lsrs	r3, r3, #6
 80058b6:	3301      	adds	r3, #1
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6812      	ldr	r2, [r2, #0]
 80058bc:	430b      	orrs	r3, r1
 80058be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80058ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	495c      	ldr	r1, [pc, #368]	@ (8005a44 <HAL_I2C_Init+0x274>)
 80058d4:	428b      	cmp	r3, r1
 80058d6:	d819      	bhi.n	800590c <HAL_I2C_Init+0x13c>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	1e59      	subs	r1, r3, #1
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80058e6:	1c59      	adds	r1, r3, #1
 80058e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80058ec:	400b      	ands	r3, r1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00a      	beq.n	8005908 <HAL_I2C_Init+0x138>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	1e59      	subs	r1, r3, #1
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005900:	3301      	adds	r3, #1
 8005902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005906:	e051      	b.n	80059ac <HAL_I2C_Init+0x1dc>
 8005908:	2304      	movs	r3, #4
 800590a:	e04f      	b.n	80059ac <HAL_I2C_Init+0x1dc>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d111      	bne.n	8005938 <HAL_I2C_Init+0x168>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	1e58      	subs	r0, r3, #1
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6859      	ldr	r1, [r3, #4]
 800591c:	460b      	mov	r3, r1
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	440b      	add	r3, r1
 8005922:	fbb0 f3f3 	udiv	r3, r0, r3
 8005926:	3301      	adds	r3, #1
 8005928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800592c:	2b00      	cmp	r3, #0
 800592e:	bf0c      	ite	eq
 8005930:	2301      	moveq	r3, #1
 8005932:	2300      	movne	r3, #0
 8005934:	b2db      	uxtb	r3, r3
 8005936:	e012      	b.n	800595e <HAL_I2C_Init+0x18e>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	1e58      	subs	r0, r3, #1
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6859      	ldr	r1, [r3, #4]
 8005940:	460b      	mov	r3, r1
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	440b      	add	r3, r1
 8005946:	0099      	lsls	r1, r3, #2
 8005948:	440b      	add	r3, r1
 800594a:	fbb0 f3f3 	udiv	r3, r0, r3
 800594e:	3301      	adds	r3, #1
 8005950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005954:	2b00      	cmp	r3, #0
 8005956:	bf0c      	ite	eq
 8005958:	2301      	moveq	r3, #1
 800595a:	2300      	movne	r3, #0
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <HAL_I2C_Init+0x196>
 8005962:	2301      	movs	r3, #1
 8005964:	e022      	b.n	80059ac <HAL_I2C_Init+0x1dc>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10e      	bne.n	800598c <HAL_I2C_Init+0x1bc>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	1e58      	subs	r0, r3, #1
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6859      	ldr	r1, [r3, #4]
 8005976:	460b      	mov	r3, r1
 8005978:	005b      	lsls	r3, r3, #1
 800597a:	440b      	add	r3, r1
 800597c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005980:	3301      	adds	r3, #1
 8005982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005986:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800598a:	e00f      	b.n	80059ac <HAL_I2C_Init+0x1dc>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	1e58      	subs	r0, r3, #1
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6859      	ldr	r1, [r3, #4]
 8005994:	460b      	mov	r3, r1
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	440b      	add	r3, r1
 800599a:	0099      	lsls	r1, r3, #2
 800599c:	440b      	add	r3, r1
 800599e:	fbb0 f3f3 	udiv	r3, r0, r3
 80059a2:	3301      	adds	r3, #1
 80059a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80059ac:	6879      	ldr	r1, [r7, #4]
 80059ae:	6809      	ldr	r1, [r1, #0]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69da      	ldr	r2, [r3, #28]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80059da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	6911      	ldr	r1, [r2, #16]
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	68d2      	ldr	r2, [r2, #12]
 80059e6:	4311      	orrs	r1, r2
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6812      	ldr	r2, [r2, #0]
 80059ec:	430b      	orrs	r3, r1
 80059ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	695a      	ldr	r2, [r3, #20]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	431a      	orrs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f042 0201 	orr.w	r2, r2, #1
 8005a1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2220      	movs	r2, #32
 8005a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	000186a0 	.word	0x000186a0
 8005a48:	001e847f 	.word	0x001e847f
 8005a4c:	003d08ff 	.word	0x003d08ff
 8005a50:	431bde83 	.word	0x431bde83
 8005a54:	10624dd3 	.word	0x10624dd3

08005a58 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08c      	sub	sp, #48	@ 0x30
 8005a5c:	af02      	add	r7, sp, #8
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	607a      	str	r2, [r7, #4]
 8005a62:	461a      	mov	r2, r3
 8005a64:	460b      	mov	r3, r1
 8005a66:	817b      	strh	r3, [r7, #10]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a70:	f7fe fd84 	bl	800457c <HAL_GetTick>
 8005a74:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b20      	cmp	r3, #32
 8005a80:	f040 824b 	bne.w	8005f1a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	2319      	movs	r3, #25
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	497f      	ldr	r1, [pc, #508]	@ (8005c8c <HAL_I2C_Master_Receive+0x234>)
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f001 f92a 	bl	8006ce8 <I2C_WaitOnFlagUntilTimeout>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	e23e      	b.n	8005f1c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d101      	bne.n	8005aac <HAL_I2C_Master_Receive+0x54>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e237      	b.n	8005f1c <HAL_I2C_Master_Receive+0x4c4>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d007      	beq.n	8005ad2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 0201 	orr.w	r2, r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ae0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2222      	movs	r2, #34	@ 0x22
 8005ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2210      	movs	r2, #16
 8005aee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	893a      	ldrh	r2, [r7, #8]
 8005b02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4a5f      	ldr	r2, [pc, #380]	@ (8005c90 <HAL_I2C_Master_Receive+0x238>)
 8005b12:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005b14:	8979      	ldrh	r1, [r7, #10]
 8005b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 fe98 	bl	8006850 <I2C_MasterRequestRead>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e1f8      	b.n	8005f1c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d113      	bne.n	8005b5a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b32:	2300      	movs	r3, #0
 8005b34:	61fb      	str	r3, [r7, #28]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	61fb      	str	r3, [r7, #28]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	61fb      	str	r3, [r7, #28]
 8005b46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	e1cc      	b.n	8005ef4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d11e      	bne.n	8005ba0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b72:	b672      	cpsid	i
}
 8005b74:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b76:	2300      	movs	r3, #0
 8005b78:	61bb      	str	r3, [r7, #24]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	61bb      	str	r3, [r7, #24]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	61bb      	str	r3, [r7, #24]
 8005b8a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b9a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005b9c:	b662      	cpsie	i
}
 8005b9e:	e035      	b.n	8005c0c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d11e      	bne.n	8005be6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bb6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005bb8:	b672      	cpsid	i
}
 8005bba:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	617b      	str	r3, [r7, #20]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005be0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005be2:	b662      	cpsie	i
}
 8005be4:	e012      	b.n	8005c0c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005bf4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	613b      	str	r3, [r7, #16]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	613b      	str	r3, [r7, #16]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	613b      	str	r3, [r7, #16]
 8005c0a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005c0c:	e172      	b.n	8005ef4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c12:	2b03      	cmp	r3, #3
 8005c14:	f200 811f 	bhi.w	8005e56 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d123      	bne.n	8005c68 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c22:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f001 fa09 	bl	800703c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e173      	b.n	8005f1c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	691a      	ldr	r2, [r3, #16]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c50:	3b01      	subs	r3, #1
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005c66:	e145      	b.n	8005ef4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d152      	bne.n	8005d16 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c76:	2200      	movs	r2, #0
 8005c78:	4906      	ldr	r1, [pc, #24]	@ (8005c94 <HAL_I2C_Master_Receive+0x23c>)
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f001 f834 	bl	8006ce8 <I2C_WaitOnFlagUntilTimeout>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d008      	beq.n	8005c98 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e148      	b.n	8005f1c <HAL_I2C_Master_Receive+0x4c4>
 8005c8a:	bf00      	nop
 8005c8c:	00100002 	.word	0x00100002
 8005c90:	ffff0000 	.word	0xffff0000
 8005c94:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005c98:	b672      	cpsid	i
}
 8005c9a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005caa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	691a      	ldr	r2, [r3, #16]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb6:	b2d2      	uxtb	r2, r2
 8005cb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cbe:	1c5a      	adds	r2, r3, #1
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005cde:	b662      	cpsie	i
}
 8005ce0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	691a      	ldr	r2, [r3, #16]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cec:	b2d2      	uxtb	r2, r2
 8005cee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf4:	1c5a      	adds	r2, r3, #1
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005d14:	e0ee      	b.n	8005ef4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	4981      	ldr	r1, [pc, #516]	@ (8005f24 <HAL_I2C_Master_Receive+0x4cc>)
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 ffe1 	bl	8006ce8 <I2C_WaitOnFlagUntilTimeout>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e0f5      	b.n	8005f1c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005d40:	b672      	cpsid	i
}
 8005d42:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	691a      	ldr	r2, [r3, #16]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d56:	1c5a      	adds	r2, r3, #1
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d60:	3b01      	subs	r3, #1
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d76:	4b6c      	ldr	r3, [pc, #432]	@ (8005f28 <HAL_I2C_Master_Receive+0x4d0>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	08db      	lsrs	r3, r3, #3
 8005d7c:	4a6b      	ldr	r2, [pc, #428]	@ (8005f2c <HAL_I2C_Master_Receive+0x4d4>)
 8005d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d82:	0a1a      	lsrs	r2, r3, #8
 8005d84:	4613      	mov	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	00da      	lsls	r2, r3, #3
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005d90:	6a3b      	ldr	r3, [r7, #32]
 8005d92:	3b01      	subs	r3, #1
 8005d94:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d118      	bne.n	8005dce <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2220      	movs	r2, #32
 8005da6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db6:	f043 0220 	orr.w	r2, r3, #32
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005dbe:	b662      	cpsie	i
}
 8005dc0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e0a6      	b.n	8005f1c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b04      	cmp	r3, #4
 8005dda:	d1d9      	bne.n	8005d90 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691a      	ldr	r2, [r3, #16]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	3b01      	subs	r3, #1
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005e1e:	b662      	cpsie	i
}
 8005e20:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	691a      	ldr	r2, [r3, #16]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2c:	b2d2      	uxtb	r2, r2
 8005e2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e54:	e04e      	b.n	8005ef4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e58:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f001 f8ee 	bl	800703c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e058      	b.n	8005f1c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	691a      	ldr	r2, [r3, #16]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e74:	b2d2      	uxtb	r2, r2
 8005e76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7c:	1c5a      	adds	r2, r3, #1
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e86:	3b01      	subs	r3, #1
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b04      	cmp	r3, #4
 8005ea8:	d124      	bne.n	8005ef4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d107      	bne.n	8005ec2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ec0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	691a      	ldr	r2, [r3, #16]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ecc:	b2d2      	uxtb	r2, r2
 8005ece:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed4:	1c5a      	adds	r2, r3, #1
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	3b01      	subs	r3, #1
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f47f ae88 	bne.w	8005c0e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005f16:	2300      	movs	r3, #0
 8005f18:	e000      	b.n	8005f1c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8005f1a:	2302      	movs	r3, #2
  }
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3728      	adds	r7, #40	@ 0x28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	00010004 	.word	0x00010004
 8005f28:	200000c8 	.word	0x200000c8
 8005f2c:	14f8b589 	.word	0x14f8b589

08005f30 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b088      	sub	sp, #32
 8005f34:	af02      	add	r7, sp, #8
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	4608      	mov	r0, r1
 8005f3a:	4611      	mov	r1, r2
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	4603      	mov	r3, r0
 8005f40:	817b      	strh	r3, [r7, #10]
 8005f42:	460b      	mov	r3, r1
 8005f44:	813b      	strh	r3, [r7, #8]
 8005f46:	4613      	mov	r3, r2
 8005f48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f4a:	f7fe fb17 	bl	800457c <HAL_GetTick>
 8005f4e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b20      	cmp	r3, #32
 8005f5a:	f040 80d9 	bne.w	8006110 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	2319      	movs	r3, #25
 8005f64:	2201      	movs	r2, #1
 8005f66:	496d      	ldr	r1, [pc, #436]	@ (800611c <HAL_I2C_Mem_Write+0x1ec>)
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 febd 	bl	8006ce8 <I2C_WaitOnFlagUntilTimeout>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005f74:	2302      	movs	r3, #2
 8005f76:	e0cc      	b.n	8006112 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d101      	bne.n	8005f86 <HAL_I2C_Mem_Write+0x56>
 8005f82:	2302      	movs	r3, #2
 8005f84:	e0c5      	b.n	8006112 <HAL_I2C_Mem_Write+0x1e2>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d007      	beq.n	8005fac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f042 0201 	orr.w	r2, r2, #1
 8005faa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005fba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2221      	movs	r2, #33	@ 0x21
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2240      	movs	r2, #64	@ 0x40
 8005fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6a3a      	ldr	r2, [r7, #32]
 8005fd6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005fdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	4a4d      	ldr	r2, [pc, #308]	@ (8006120 <HAL_I2C_Mem_Write+0x1f0>)
 8005fec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005fee:	88f8      	ldrh	r0, [r7, #6]
 8005ff0:	893a      	ldrh	r2, [r7, #8]
 8005ff2:	8979      	ldrh	r1, [r7, #10]
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	9301      	str	r3, [sp, #4]
 8005ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f000 fcf4 	bl	80069ec <I2C_RequestMemoryWrite>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d052      	beq.n	80060b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e081      	b.n	8006112 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 ff82 	bl	8006f1c <I2C_WaitOnTXEFlagUntilTimeout>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00d      	beq.n	800603a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006022:	2b04      	cmp	r3, #4
 8006024:	d107      	bne.n	8006036 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006034:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e06b      	b.n	8006112 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603e:	781a      	ldrb	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006054:	3b01      	subs	r3, #1
 8006056:	b29a      	uxth	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006060:	b29b      	uxth	r3, r3
 8006062:	3b01      	subs	r3, #1
 8006064:	b29a      	uxth	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	f003 0304 	and.w	r3, r3, #4
 8006074:	2b04      	cmp	r3, #4
 8006076:	d11b      	bne.n	80060b0 <HAL_I2C_Mem_Write+0x180>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800607c:	2b00      	cmp	r3, #0
 800607e:	d017      	beq.n	80060b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006084:	781a      	ldrb	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800609a:	3b01      	subs	r3, #1
 800609c:	b29a      	uxth	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	3b01      	subs	r3, #1
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1aa      	bne.n	800600e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f000 ff75 	bl	8006fac <I2C_WaitOnBTFFlagUntilTimeout>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00d      	beq.n	80060e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060cc:	2b04      	cmp	r3, #4
 80060ce:	d107      	bne.n	80060e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e016      	b.n	8006112 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2220      	movs	r2, #32
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800610c:	2300      	movs	r3, #0
 800610e:	e000      	b.n	8006112 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006110:	2302      	movs	r3, #2
  }
}
 8006112:	4618      	mov	r0, r3
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	00100002 	.word	0x00100002
 8006120:	ffff0000 	.word	0xffff0000

08006124 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b08c      	sub	sp, #48	@ 0x30
 8006128:	af02      	add	r7, sp, #8
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	4608      	mov	r0, r1
 800612e:	4611      	mov	r1, r2
 8006130:	461a      	mov	r2, r3
 8006132:	4603      	mov	r3, r0
 8006134:	817b      	strh	r3, [r7, #10]
 8006136:	460b      	mov	r3, r1
 8006138:	813b      	strh	r3, [r7, #8]
 800613a:	4613      	mov	r3, r2
 800613c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800613e:	2300      	movs	r3, #0
 8006140:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006142:	f7fe fa1b 	bl	800457c <HAL_GetTick>
 8006146:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800614e:	b2db      	uxtb	r3, r3
 8006150:	2b20      	cmp	r3, #32
 8006152:	f040 8244 	bne.w	80065de <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	2319      	movs	r3, #25
 800615c:	2201      	movs	r2, #1
 800615e:	4982      	ldr	r1, [pc, #520]	@ (8006368 <HAL_I2C_Mem_Read+0x244>)
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f000 fdc1 	bl	8006ce8 <I2C_WaitOnFlagUntilTimeout>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800616c:	2302      	movs	r3, #2
 800616e:	e237      	b.n	80065e0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006176:	2b01      	cmp	r3, #1
 8006178:	d101      	bne.n	800617e <HAL_I2C_Mem_Read+0x5a>
 800617a:	2302      	movs	r3, #2
 800617c:	e230      	b.n	80065e0 <HAL_I2C_Mem_Read+0x4bc>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0301 	and.w	r3, r3, #1
 8006190:	2b01      	cmp	r3, #1
 8006192:	d007      	beq.n	80061a4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f042 0201 	orr.w	r2, r2, #1
 80061a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80061b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2222      	movs	r2, #34	@ 0x22
 80061b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2240      	movs	r2, #64	@ 0x40
 80061c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80061d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061da:	b29a      	uxth	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	4a62      	ldr	r2, [pc, #392]	@ (800636c <HAL_I2C_Mem_Read+0x248>)
 80061e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80061e6:	88f8      	ldrh	r0, [r7, #6]
 80061e8:	893a      	ldrh	r2, [r7, #8]
 80061ea:	8979      	ldrh	r1, [r7, #10]
 80061ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ee:	9301      	str	r3, [sp, #4]
 80061f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	4603      	mov	r3, r0
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f000 fc8e 	bl	8006b18 <I2C_RequestMemoryRead>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e1ec      	b.n	80065e0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800620a:	2b00      	cmp	r3, #0
 800620c:	d113      	bne.n	8006236 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800620e:	2300      	movs	r3, #0
 8006210:	61fb      	str	r3, [r7, #28]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	61fb      	str	r3, [r7, #28]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	61fb      	str	r3, [r7, #28]
 8006222:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	e1c0      	b.n	80065b8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800623a:	2b01      	cmp	r3, #1
 800623c:	d11e      	bne.n	800627c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800624c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800624e:	b672      	cpsid	i
}
 8006250:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006252:	2300      	movs	r3, #0
 8006254:	61bb      	str	r3, [r7, #24]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	61bb      	str	r3, [r7, #24]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	61bb      	str	r3, [r7, #24]
 8006266:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006276:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006278:	b662      	cpsie	i
}
 800627a:	e035      	b.n	80062e8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006280:	2b02      	cmp	r3, #2
 8006282:	d11e      	bne.n	80062c2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006292:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006294:	b672      	cpsid	i
}
 8006296:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006298:	2300      	movs	r3, #0
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	617b      	str	r3, [r7, #20]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	617b      	str	r3, [r7, #20]
 80062ac:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80062be:	b662      	cpsie	i
}
 80062c0:	e012      	b.n	80062e8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80062d0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062d2:	2300      	movs	r3, #0
 80062d4:	613b      	str	r3, [r7, #16]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	613b      	str	r3, [r7, #16]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	613b      	str	r3, [r7, #16]
 80062e6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80062e8:	e166      	b.n	80065b8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	f200 811f 	bhi.w	8006532 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d123      	bne.n	8006344 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062fe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 fe9b 	bl	800703c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e167      	b.n	80065e0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	691a      	ldr	r2, [r3, #16]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631a:	b2d2      	uxtb	r2, r2
 800631c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006322:	1c5a      	adds	r2, r3, #1
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800632c:	3b01      	subs	r3, #1
 800632e:	b29a      	uxth	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006338:	b29b      	uxth	r3, r3
 800633a:	3b01      	subs	r3, #1
 800633c:	b29a      	uxth	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006342:	e139      	b.n	80065b8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006348:	2b02      	cmp	r3, #2
 800634a:	d152      	bne.n	80063f2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800634c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006352:	2200      	movs	r2, #0
 8006354:	4906      	ldr	r1, [pc, #24]	@ (8006370 <HAL_I2C_Mem_Read+0x24c>)
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f000 fcc6 	bl	8006ce8 <I2C_WaitOnFlagUntilTimeout>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d008      	beq.n	8006374 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e13c      	b.n	80065e0 <HAL_I2C_Mem_Read+0x4bc>
 8006366:	bf00      	nop
 8006368:	00100002 	.word	0x00100002
 800636c:	ffff0000 	.word	0xffff0000
 8006370:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006374:	b672      	cpsid	i
}
 8006376:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006386:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	691a      	ldr	r2, [r3, #16]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006392:	b2d2      	uxtb	r2, r2
 8006394:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063a4:	3b01      	subs	r3, #1
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	3b01      	subs	r3, #1
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80063ba:	b662      	cpsie	i
}
 80063bc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	691a      	ldr	r2, [r3, #16]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c8:	b2d2      	uxtb	r2, r2
 80063ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d0:	1c5a      	adds	r2, r3, #1
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29a      	uxth	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	3b01      	subs	r3, #1
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80063f0:	e0e2      	b.n	80065b8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80063f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f8:	2200      	movs	r2, #0
 80063fa:	497b      	ldr	r1, [pc, #492]	@ (80065e8 <HAL_I2C_Mem_Read+0x4c4>)
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 fc73 	bl	8006ce8 <I2C_WaitOnFlagUntilTimeout>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e0e9      	b.n	80065e0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800641a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800641c:	b672      	cpsid	i
}
 800641e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	691a      	ldr	r2, [r3, #16]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642a:	b2d2      	uxtb	r2, r2
 800642c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800643c:	3b01      	subs	r3, #1
 800643e:	b29a      	uxth	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006448:	b29b      	uxth	r3, r3
 800644a:	3b01      	subs	r3, #1
 800644c:	b29a      	uxth	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006452:	4b66      	ldr	r3, [pc, #408]	@ (80065ec <HAL_I2C_Mem_Read+0x4c8>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	08db      	lsrs	r3, r3, #3
 8006458:	4a65      	ldr	r2, [pc, #404]	@ (80065f0 <HAL_I2C_Mem_Read+0x4cc>)
 800645a:	fba2 2303 	umull	r2, r3, r2, r3
 800645e:	0a1a      	lsrs	r2, r3, #8
 8006460:	4613      	mov	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	00da      	lsls	r2, r3, #3
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	3b01      	subs	r3, #1
 8006470:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d118      	bne.n	80064aa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2220      	movs	r2, #32
 8006482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006492:	f043 0220 	orr.w	r2, r3, #32
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800649a:	b662      	cpsie	i
}
 800649c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e09a      	b.n	80065e0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	f003 0304 	and.w	r3, r3, #4
 80064b4:	2b04      	cmp	r3, #4
 80064b6:	d1d9      	bne.n	800646c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	691a      	ldr	r2, [r3, #16]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d2:	b2d2      	uxtb	r2, r2
 80064d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064da:	1c5a      	adds	r2, r3, #1
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064e4:	3b01      	subs	r3, #1
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	3b01      	subs	r3, #1
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80064fa:	b662      	cpsie	i
}
 80064fc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	691a      	ldr	r2, [r3, #16]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006508:	b2d2      	uxtb	r2, r2
 800650a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006510:	1c5a      	adds	r2, r3, #1
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800651a:	3b01      	subs	r3, #1
 800651c:	b29a      	uxth	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006526:	b29b      	uxth	r3, r3
 8006528:	3b01      	subs	r3, #1
 800652a:	b29a      	uxth	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006530:	e042      	b.n	80065b8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006534:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f000 fd80 	bl	800703c <I2C_WaitOnRXNEFlagUntilTimeout>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e04c      	b.n	80065e0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	691a      	ldr	r2, [r3, #16]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006550:	b2d2      	uxtb	r2, r2
 8006552:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006558:	1c5a      	adds	r2, r3, #1
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006562:	3b01      	subs	r3, #1
 8006564:	b29a      	uxth	r2, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800656e:	b29b      	uxth	r3, r3
 8006570:	3b01      	subs	r3, #1
 8006572:	b29a      	uxth	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	f003 0304 	and.w	r3, r3, #4
 8006582:	2b04      	cmp	r3, #4
 8006584:	d118      	bne.n	80065b8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	691a      	ldr	r2, [r3, #16]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006590:	b2d2      	uxtb	r2, r2
 8006592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006598:	1c5a      	adds	r2, r3, #1
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065a2:	3b01      	subs	r3, #1
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	3b01      	subs	r3, #1
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f47f ae94 	bne.w	80062ea <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2220      	movs	r2, #32
 80065c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80065da:	2300      	movs	r3, #0
 80065dc:	e000      	b.n	80065e0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80065de:	2302      	movs	r3, #2
  }
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3728      	adds	r7, #40	@ 0x28
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	00010004 	.word	0x00010004
 80065ec:	200000c8 	.word	0x200000c8
 80065f0:	14f8b589 	.word	0x14f8b589

080065f4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b08a      	sub	sp, #40	@ 0x28
 80065f8:	af02      	add	r7, sp, #8
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	607a      	str	r2, [r7, #4]
 80065fe:	603b      	str	r3, [r7, #0]
 8006600:	460b      	mov	r3, r1
 8006602:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006604:	f7fd ffba 	bl	800457c <HAL_GetTick>
 8006608:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800660a:	2300      	movs	r3, #0
 800660c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b20      	cmp	r3, #32
 8006618:	f040 8111 	bne.w	800683e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	2319      	movs	r3, #25
 8006622:	2201      	movs	r2, #1
 8006624:	4988      	ldr	r1, [pc, #544]	@ (8006848 <HAL_I2C_IsDeviceReady+0x254>)
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 fb5e 	bl	8006ce8 <I2C_WaitOnFlagUntilTimeout>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006632:	2302      	movs	r3, #2
 8006634:	e104      	b.n	8006840 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800663c:	2b01      	cmp	r3, #1
 800663e:	d101      	bne.n	8006644 <HAL_I2C_IsDeviceReady+0x50>
 8006640:	2302      	movs	r3, #2
 8006642:	e0fd      	b.n	8006840 <HAL_I2C_IsDeviceReady+0x24c>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b01      	cmp	r3, #1
 8006658:	d007      	beq.n	800666a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f042 0201 	orr.w	r2, r2, #1
 8006668:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006678:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2224      	movs	r2, #36	@ 0x24
 800667e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4a70      	ldr	r2, [pc, #448]	@ (800684c <HAL_I2C_IsDeviceReady+0x258>)
 800668c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800669c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f000 fb1c 	bl	8006ce8 <I2C_WaitOnFlagUntilTimeout>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00d      	beq.n	80066d2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066c4:	d103      	bne.n	80066ce <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066cc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e0b6      	b.n	8006840 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80066d2:	897b      	ldrh	r3, [r7, #10]
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	461a      	mov	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80066e0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80066e2:	f7fd ff4b 	bl	800457c <HAL_GetTick>
 80066e6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	bf0c      	ite	eq
 80066f6:	2301      	moveq	r3, #1
 80066f8:	2300      	movne	r3, #0
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006708:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800670c:	bf0c      	ite	eq
 800670e:	2301      	moveq	r3, #1
 8006710:	2300      	movne	r3, #0
 8006712:	b2db      	uxtb	r3, r3
 8006714:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006716:	e025      	b.n	8006764 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006718:	f7fd ff30 	bl	800457c <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	429a      	cmp	r2, r3
 8006726:	d302      	bcc.n	800672e <HAL_I2C_IsDeviceReady+0x13a>
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d103      	bne.n	8006736 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	22a0      	movs	r2, #160	@ 0xa0
 8006732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	f003 0302 	and.w	r3, r3, #2
 8006740:	2b02      	cmp	r3, #2
 8006742:	bf0c      	ite	eq
 8006744:	2301      	moveq	r3, #1
 8006746:	2300      	movne	r3, #0
 8006748:	b2db      	uxtb	r3, r3
 800674a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800675a:	bf0c      	ite	eq
 800675c:	2301      	moveq	r3, #1
 800675e:	2300      	movne	r3, #0
 8006760:	b2db      	uxtb	r3, r3
 8006762:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2ba0      	cmp	r3, #160	@ 0xa0
 800676e:	d005      	beq.n	800677c <HAL_I2C_IsDeviceReady+0x188>
 8006770:	7dfb      	ldrb	r3, [r7, #23]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d102      	bne.n	800677c <HAL_I2C_IsDeviceReady+0x188>
 8006776:	7dbb      	ldrb	r3, [r7, #22]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d0cd      	beq.n	8006718 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2220      	movs	r2, #32
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b02      	cmp	r3, #2
 8006790:	d129      	bne.n	80067e6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067a0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067a2:	2300      	movs	r3, #0
 80067a4:	613b      	str	r3, [r7, #16]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	613b      	str	r3, [r7, #16]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	613b      	str	r3, [r7, #16]
 80067b6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	2319      	movs	r3, #25
 80067be:	2201      	movs	r2, #1
 80067c0:	4921      	ldr	r1, [pc, #132]	@ (8006848 <HAL_I2C_IsDeviceReady+0x254>)
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f000 fa90 	bl	8006ce8 <I2C_WaitOnFlagUntilTimeout>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e036      	b.n	8006840 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2220      	movs	r2, #32
 80067d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	e02c      	b.n	8006840 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067f4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80067fe:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	2319      	movs	r3, #25
 8006806:	2201      	movs	r2, #1
 8006808:	490f      	ldr	r1, [pc, #60]	@ (8006848 <HAL_I2C_IsDeviceReady+0x254>)
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f000 fa6c 	bl	8006ce8 <I2C_WaitOnFlagUntilTimeout>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d001      	beq.n	800681a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e012      	b.n	8006840 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	3301      	adds	r3, #1
 800681e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	429a      	cmp	r2, r3
 8006826:	f4ff af32 	bcc.w	800668e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2220      	movs	r2, #32
 800682e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e000      	b.n	8006840 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800683e:	2302      	movs	r3, #2
  }
}
 8006840:	4618      	mov	r0, r3
 8006842:	3720      	adds	r7, #32
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	00100002 	.word	0x00100002
 800684c:	ffff0000 	.word	0xffff0000

08006850 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b088      	sub	sp, #32
 8006854:	af02      	add	r7, sp, #8
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	607a      	str	r2, [r7, #4]
 800685a:	603b      	str	r3, [r7, #0]
 800685c:	460b      	mov	r3, r1
 800685e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006864:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006874:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2b08      	cmp	r3, #8
 800687a:	d006      	beq.n	800688a <I2C_MasterRequestRead+0x3a>
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d003      	beq.n	800688a <I2C_MasterRequestRead+0x3a>
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006888:	d108      	bne.n	800689c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006898:	601a      	str	r2, [r3, #0]
 800689a:	e00b      	b.n	80068b4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068a0:	2b11      	cmp	r3, #17
 80068a2:	d107      	bne.n	80068b4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80068b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 fa11 	bl	8006ce8 <I2C_WaitOnFlagUntilTimeout>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00d      	beq.n	80068e8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068da:	d103      	bne.n	80068e4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e079      	b.n	80069dc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068f0:	d108      	bne.n	8006904 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80068f2:	897b      	ldrh	r3, [r7, #10]
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	f043 0301 	orr.w	r3, r3, #1
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	611a      	str	r2, [r3, #16]
 8006902:	e05f      	b.n	80069c4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006904:	897b      	ldrh	r3, [r7, #10]
 8006906:	11db      	asrs	r3, r3, #7
 8006908:	b2db      	uxtb	r3, r3
 800690a:	f003 0306 	and.w	r3, r3, #6
 800690e:	b2db      	uxtb	r3, r3
 8006910:	f063 030f 	orn	r3, r3, #15
 8006914:	b2da      	uxtb	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	4930      	ldr	r1, [pc, #192]	@ (80069e4 <I2C_MasterRequestRead+0x194>)
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f000 fa5a 	bl	8006ddc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e054      	b.n	80069dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006932:	897b      	ldrh	r3, [r7, #10]
 8006934:	b2da      	uxtb	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	4929      	ldr	r1, [pc, #164]	@ (80069e8 <I2C_MasterRequestRead+0x198>)
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 fa4a 	bl	8006ddc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e044      	b.n	80069dc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006952:	2300      	movs	r3, #0
 8006954:	613b      	str	r3, [r7, #16]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	613b      	str	r3, [r7, #16]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	613b      	str	r3, [r7, #16]
 8006966:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006976:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 f9af 	bl	8006ce8 <I2C_WaitOnFlagUntilTimeout>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00d      	beq.n	80069ac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800699a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800699e:	d103      	bne.n	80069a8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069a6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e017      	b.n	80069dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80069ac:	897b      	ldrh	r3, [r7, #10]
 80069ae:	11db      	asrs	r3, r3, #7
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	f003 0306 	and.w	r3, r3, #6
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	f063 030e 	orn	r3, r3, #14
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	4907      	ldr	r1, [pc, #28]	@ (80069e8 <I2C_MasterRequestRead+0x198>)
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f000 fa06 	bl	8006ddc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e000      	b.n	80069dc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3718      	adds	r7, #24
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	00010008 	.word	0x00010008
 80069e8:	00010002 	.word	0x00010002

080069ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b088      	sub	sp, #32
 80069f0:	af02      	add	r7, sp, #8
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	4608      	mov	r0, r1
 80069f6:	4611      	mov	r1, r2
 80069f8:	461a      	mov	r2, r3
 80069fa:	4603      	mov	r3, r0
 80069fc:	817b      	strh	r3, [r7, #10]
 80069fe:	460b      	mov	r3, r1
 8006a00:	813b      	strh	r3, [r7, #8]
 8006a02:	4613      	mov	r3, r2
 8006a04:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f000 f960 	bl	8006ce8 <I2C_WaitOnFlagUntilTimeout>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00d      	beq.n	8006a4a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a3c:	d103      	bne.n	8006a46 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a44:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e05f      	b.n	8006b0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a4a:	897b      	ldrh	r3, [r7, #10]
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	461a      	mov	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006a58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5c:	6a3a      	ldr	r2, [r7, #32]
 8006a5e:	492d      	ldr	r1, [pc, #180]	@ (8006b14 <I2C_RequestMemoryWrite+0x128>)
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f000 f9bb 	bl	8006ddc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d001      	beq.n	8006a70 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e04c      	b.n	8006b0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a70:	2300      	movs	r3, #0
 8006a72:	617b      	str	r3, [r7, #20]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	617b      	str	r3, [r7, #20]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	617b      	str	r3, [r7, #20]
 8006a84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a88:	6a39      	ldr	r1, [r7, #32]
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 fa46 	bl	8006f1c <I2C_WaitOnTXEFlagUntilTimeout>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00d      	beq.n	8006ab2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9a:	2b04      	cmp	r3, #4
 8006a9c:	d107      	bne.n	8006aae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006aac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e02b      	b.n	8006b0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ab2:	88fb      	ldrh	r3, [r7, #6]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d105      	bne.n	8006ac4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ab8:	893b      	ldrh	r3, [r7, #8]
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	611a      	str	r2, [r3, #16]
 8006ac2:	e021      	b.n	8006b08 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ac4:	893b      	ldrh	r3, [r7, #8]
 8006ac6:	0a1b      	lsrs	r3, r3, #8
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	b2da      	uxtb	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ad4:	6a39      	ldr	r1, [r7, #32]
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f000 fa20 	bl	8006f1c <I2C_WaitOnTXEFlagUntilTimeout>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00d      	beq.n	8006afe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ae6:	2b04      	cmp	r3, #4
 8006ae8:	d107      	bne.n	8006afa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006af8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e005      	b.n	8006b0a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006afe:	893b      	ldrh	r3, [r7, #8]
 8006b00:	b2da      	uxtb	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3718      	adds	r7, #24
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	00010002 	.word	0x00010002

08006b18 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b088      	sub	sp, #32
 8006b1c:	af02      	add	r7, sp, #8
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	4608      	mov	r0, r1
 8006b22:	4611      	mov	r1, r2
 8006b24:	461a      	mov	r2, r3
 8006b26:	4603      	mov	r3, r0
 8006b28:	817b      	strh	r3, [r7, #10]
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	813b      	strh	r3, [r7, #8]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006b40:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f000 f8c2 	bl	8006ce8 <I2C_WaitOnFlagUntilTimeout>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00d      	beq.n	8006b86 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b78:	d103      	bne.n	8006b82 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b80:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e0aa      	b.n	8006cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b86:	897b      	ldrh	r3, [r7, #10]
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006b94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b98:	6a3a      	ldr	r2, [r7, #32]
 8006b9a:	4952      	ldr	r1, [pc, #328]	@ (8006ce4 <I2C_RequestMemoryRead+0x1cc>)
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f000 f91d 	bl	8006ddc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d001      	beq.n	8006bac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e097      	b.n	8006cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bac:	2300      	movs	r3, #0
 8006bae:	617b      	str	r3, [r7, #20]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	617b      	str	r3, [r7, #20]
 8006bc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bc4:	6a39      	ldr	r1, [r7, #32]
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 f9a8 	bl	8006f1c <I2C_WaitOnTXEFlagUntilTimeout>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00d      	beq.n	8006bee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd6:	2b04      	cmp	r3, #4
 8006bd8:	d107      	bne.n	8006bea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006be8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e076      	b.n	8006cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006bee:	88fb      	ldrh	r3, [r7, #6]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d105      	bne.n	8006c00 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006bf4:	893b      	ldrh	r3, [r7, #8]
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	611a      	str	r2, [r3, #16]
 8006bfe:	e021      	b.n	8006c44 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c00:	893b      	ldrh	r3, [r7, #8]
 8006c02:	0a1b      	lsrs	r3, r3, #8
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c10:	6a39      	ldr	r1, [r7, #32]
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 f982 	bl	8006f1c <I2C_WaitOnTXEFlagUntilTimeout>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00d      	beq.n	8006c3a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c22:	2b04      	cmp	r3, #4
 8006c24:	d107      	bne.n	8006c36 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e050      	b.n	8006cdc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c3a:	893b      	ldrh	r3, [r7, #8]
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c46:	6a39      	ldr	r1, [r7, #32]
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f000 f967 	bl	8006f1c <I2C_WaitOnTXEFlagUntilTimeout>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00d      	beq.n	8006c70 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c58:	2b04      	cmp	r3, #4
 8006c5a:	d107      	bne.n	8006c6c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c6a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e035      	b.n	8006cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c7e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f000 f82b 	bl	8006ce8 <I2C_WaitOnFlagUntilTimeout>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00d      	beq.n	8006cb4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ca2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ca6:	d103      	bne.n	8006cb0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e013      	b.n	8006cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006cb4:	897b      	ldrh	r3, [r7, #10]
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	f043 0301 	orr.w	r3, r3, #1
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc6:	6a3a      	ldr	r2, [r7, #32]
 8006cc8:	4906      	ldr	r1, [pc, #24]	@ (8006ce4 <I2C_RequestMemoryRead+0x1cc>)
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f000 f886 	bl	8006ddc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d001      	beq.n	8006cda <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e000      	b.n	8006cdc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3718      	adds	r7, #24
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	00010002 	.word	0x00010002

08006ce8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	603b      	str	r3, [r7, #0]
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cf8:	e048      	b.n	8006d8c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d00:	d044      	beq.n	8006d8c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d02:	f7fd fc3b 	bl	800457c <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	683a      	ldr	r2, [r7, #0]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d302      	bcc.n	8006d18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d139      	bne.n	8006d8c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	0c1b      	lsrs	r3, r3, #16
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d10d      	bne.n	8006d3e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	43da      	mvns	r2, r3
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	bf0c      	ite	eq
 8006d34:	2301      	moveq	r3, #1
 8006d36:	2300      	movne	r3, #0
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	e00c      	b.n	8006d58 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	43da      	mvns	r2, r3
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	4013      	ands	r3, r2
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	bf0c      	ite	eq
 8006d50:	2301      	moveq	r3, #1
 8006d52:	2300      	movne	r3, #0
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	461a      	mov	r2, r3
 8006d58:	79fb      	ldrb	r3, [r7, #7]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d116      	bne.n	8006d8c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2220      	movs	r2, #32
 8006d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d78:	f043 0220 	orr.w	r2, r3, #32
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e023      	b.n	8006dd4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	0c1b      	lsrs	r3, r3, #16
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d10d      	bne.n	8006db2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	43da      	mvns	r2, r3
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	4013      	ands	r3, r2
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	bf0c      	ite	eq
 8006da8:	2301      	moveq	r3, #1
 8006daa:	2300      	movne	r3, #0
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	461a      	mov	r2, r3
 8006db0:	e00c      	b.n	8006dcc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	43da      	mvns	r2, r3
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	bf0c      	ite	eq
 8006dc4:	2301      	moveq	r3, #1
 8006dc6:	2300      	movne	r3, #0
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	461a      	mov	r2, r3
 8006dcc:	79fb      	ldrb	r3, [r7, #7]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d093      	beq.n	8006cfa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
 8006de8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006dea:	e071      	b.n	8006ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006df6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dfa:	d123      	bne.n	8006e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006e14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e30:	f043 0204 	orr.w	r2, r3, #4
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e067      	b.n	8006f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4a:	d041      	beq.n	8006ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e4c:	f7fd fb96 	bl	800457c <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d302      	bcc.n	8006e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d136      	bne.n	8006ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	0c1b      	lsrs	r3, r3, #16
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d10c      	bne.n	8006e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	695b      	ldr	r3, [r3, #20]
 8006e72:	43da      	mvns	r2, r3
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	4013      	ands	r3, r2
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	bf14      	ite	ne
 8006e7e:	2301      	movne	r3, #1
 8006e80:	2300      	moveq	r3, #0
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	e00b      	b.n	8006e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	43da      	mvns	r2, r3
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	4013      	ands	r3, r2
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	bf14      	ite	ne
 8006e98:	2301      	movne	r3, #1
 8006e9a:	2300      	moveq	r3, #0
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d016      	beq.n	8006ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2220      	movs	r2, #32
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ebc:	f043 0220 	orr.w	r2, r3, #32
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e021      	b.n	8006f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	0c1b      	lsrs	r3, r3, #16
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d10c      	bne.n	8006ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	695b      	ldr	r3, [r3, #20]
 8006ee0:	43da      	mvns	r2, r3
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	bf14      	ite	ne
 8006eec:	2301      	movne	r3, #1
 8006eee:	2300      	moveq	r3, #0
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	e00b      	b.n	8006f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	43da      	mvns	r2, r3
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	4013      	ands	r3, r2
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	bf14      	ite	ne
 8006f06:	2301      	movne	r3, #1
 8006f08:	2300      	moveq	r3, #0
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f47f af6d 	bne.w	8006dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f28:	e034      	b.n	8006f94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f000 f8e3 	bl	80070f6 <I2C_IsAcknowledgeFailed>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d001      	beq.n	8006f3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e034      	b.n	8006fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f40:	d028      	beq.n	8006f94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f42:	f7fd fb1b 	bl	800457c <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d302      	bcc.n	8006f58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d11d      	bne.n	8006f94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f62:	2b80      	cmp	r3, #128	@ 0x80
 8006f64:	d016      	beq.n	8006f94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f80:	f043 0220 	orr.w	r2, r3, #32
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e007      	b.n	8006fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f9e:	2b80      	cmp	r3, #128	@ 0x80
 8006fa0:	d1c3      	bne.n	8006f2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006fb8:	e034      	b.n	8007024 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f000 f89b 	bl	80070f6 <I2C_IsAcknowledgeFailed>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e034      	b.n	8007034 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd0:	d028      	beq.n	8007024 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fd2:	f7fd fad3 	bl	800457c <HAL_GetTick>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d302      	bcc.n	8006fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d11d      	bne.n	8007024 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	f003 0304 	and.w	r3, r3, #4
 8006ff2:	2b04      	cmp	r3, #4
 8006ff4:	d016      	beq.n	8007024 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2220      	movs	r2, #32
 8007000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007010:	f043 0220 	orr.w	r2, r3, #32
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e007      	b.n	8007034 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	f003 0304 	and.w	r3, r3, #4
 800702e:	2b04      	cmp	r3, #4
 8007030:	d1c3      	bne.n	8006fba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007048:	e049      	b.n	80070de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	695b      	ldr	r3, [r3, #20]
 8007050:	f003 0310 	and.w	r3, r3, #16
 8007054:	2b10      	cmp	r3, #16
 8007056:	d119      	bne.n	800708c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f06f 0210 	mvn.w	r2, #16
 8007060:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2220      	movs	r2, #32
 800706c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e030      	b.n	80070ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800708c:	f7fd fa76 	bl	800457c <HAL_GetTick>
 8007090:	4602      	mov	r2, r0
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	429a      	cmp	r2, r3
 800709a:	d302      	bcc.n	80070a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d11d      	bne.n	80070de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	695b      	ldr	r3, [r3, #20]
 80070a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ac:	2b40      	cmp	r3, #64	@ 0x40
 80070ae:	d016      	beq.n	80070de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2220      	movs	r2, #32
 80070ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ca:	f043 0220 	orr.w	r2, r3, #32
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e007      	b.n	80070ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	695b      	ldr	r3, [r3, #20]
 80070e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070e8:	2b40      	cmp	r3, #64	@ 0x40
 80070ea:	d1ae      	bne.n	800704a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b083      	sub	sp, #12
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007108:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800710c:	d11b      	bne.n	8007146 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007116:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2220      	movs	r2, #32
 8007122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007132:	f043 0204 	orr.w	r2, r3, #4
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e000      	b.n	8007148 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	bc80      	pop	{r7}
 8007150:	4770      	bx	lr
	...

08007154 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007154:	b480      	push	{r7}
 8007156:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8007158:	4b03      	ldr	r3, [pc, #12]	@ (8007168 <HAL_PWR_EnableBkUpAccess+0x14>)
 800715a:	2201      	movs	r2, #1
 800715c:	601a      	str	r2, [r3, #0]
}
 800715e:	bf00      	nop
 8007160:	46bd      	mov	sp, r7
 8007162:	bc80      	pop	{r7}
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	420e0020 	.word	0x420e0020

0800716c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b086      	sub	sp, #24
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d101      	bne.n	800717e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e272      	b.n	8007664 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b00      	cmp	r3, #0
 8007188:	f000 8087 	beq.w	800729a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800718c:	4b92      	ldr	r3, [pc, #584]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	f003 030c 	and.w	r3, r3, #12
 8007194:	2b04      	cmp	r3, #4
 8007196:	d00c      	beq.n	80071b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007198:	4b8f      	ldr	r3, [pc, #572]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f003 030c 	and.w	r3, r3, #12
 80071a0:	2b08      	cmp	r3, #8
 80071a2:	d112      	bne.n	80071ca <HAL_RCC_OscConfig+0x5e>
 80071a4:	4b8c      	ldr	r3, [pc, #560]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071b0:	d10b      	bne.n	80071ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071b2:	4b89      	ldr	r3, [pc, #548]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d06c      	beq.n	8007298 <HAL_RCC_OscConfig+0x12c>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d168      	bne.n	8007298 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e24c      	b.n	8007664 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071d2:	d106      	bne.n	80071e2 <HAL_RCC_OscConfig+0x76>
 80071d4:	4b80      	ldr	r3, [pc, #512]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a7f      	ldr	r2, [pc, #508]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 80071da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071de:	6013      	str	r3, [r2, #0]
 80071e0:	e02e      	b.n	8007240 <HAL_RCC_OscConfig+0xd4>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10c      	bne.n	8007204 <HAL_RCC_OscConfig+0x98>
 80071ea:	4b7b      	ldr	r3, [pc, #492]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a7a      	ldr	r2, [pc, #488]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 80071f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071f4:	6013      	str	r3, [r2, #0]
 80071f6:	4b78      	ldr	r3, [pc, #480]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a77      	ldr	r2, [pc, #476]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 80071fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007200:	6013      	str	r3, [r2, #0]
 8007202:	e01d      	b.n	8007240 <HAL_RCC_OscConfig+0xd4>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800720c:	d10c      	bne.n	8007228 <HAL_RCC_OscConfig+0xbc>
 800720e:	4b72      	ldr	r3, [pc, #456]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a71      	ldr	r2, [pc, #452]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 8007214:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007218:	6013      	str	r3, [r2, #0]
 800721a:	4b6f      	ldr	r3, [pc, #444]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a6e      	ldr	r2, [pc, #440]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 8007220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007224:	6013      	str	r3, [r2, #0]
 8007226:	e00b      	b.n	8007240 <HAL_RCC_OscConfig+0xd4>
 8007228:	4b6b      	ldr	r3, [pc, #428]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a6a      	ldr	r2, [pc, #424]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 800722e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007232:	6013      	str	r3, [r2, #0]
 8007234:	4b68      	ldr	r3, [pc, #416]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a67      	ldr	r2, [pc, #412]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 800723a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800723e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d013      	beq.n	8007270 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007248:	f7fd f998 	bl	800457c <HAL_GetTick>
 800724c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800724e:	e008      	b.n	8007262 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007250:	f7fd f994 	bl	800457c <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	2b64      	cmp	r3, #100	@ 0x64
 800725c:	d901      	bls.n	8007262 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e200      	b.n	8007664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007262:	4b5d      	ldr	r3, [pc, #372]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d0f0      	beq.n	8007250 <HAL_RCC_OscConfig+0xe4>
 800726e:	e014      	b.n	800729a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007270:	f7fd f984 	bl	800457c <HAL_GetTick>
 8007274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007276:	e008      	b.n	800728a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007278:	f7fd f980 	bl	800457c <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	2b64      	cmp	r3, #100	@ 0x64
 8007284:	d901      	bls.n	800728a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e1ec      	b.n	8007664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800728a:	4b53      	ldr	r3, [pc, #332]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1f0      	bne.n	8007278 <HAL_RCC_OscConfig+0x10c>
 8007296:	e000      	b.n	800729a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 0302 	and.w	r3, r3, #2
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d063      	beq.n	800736e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80072a6:	4b4c      	ldr	r3, [pc, #304]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f003 030c 	and.w	r3, r3, #12
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00b      	beq.n	80072ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80072b2:	4b49      	ldr	r3, [pc, #292]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	f003 030c 	and.w	r3, r3, #12
 80072ba:	2b08      	cmp	r3, #8
 80072bc:	d11c      	bne.n	80072f8 <HAL_RCC_OscConfig+0x18c>
 80072be:	4b46      	ldr	r3, [pc, #280]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d116      	bne.n	80072f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072ca:	4b43      	ldr	r3, [pc, #268]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0302 	and.w	r3, r3, #2
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d005      	beq.n	80072e2 <HAL_RCC_OscConfig+0x176>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d001      	beq.n	80072e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e1c0      	b.n	8007664 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072e2:	4b3d      	ldr	r3, [pc, #244]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	00db      	lsls	r3, r3, #3
 80072f0:	4939      	ldr	r1, [pc, #228]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 80072f2:	4313      	orrs	r3, r2
 80072f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072f6:	e03a      	b.n	800736e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d020      	beq.n	8007342 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007300:	4b36      	ldr	r3, [pc, #216]	@ (80073dc <HAL_RCC_OscConfig+0x270>)
 8007302:	2201      	movs	r2, #1
 8007304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007306:	f7fd f939 	bl	800457c <HAL_GetTick>
 800730a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800730c:	e008      	b.n	8007320 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800730e:	f7fd f935 	bl	800457c <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	2b02      	cmp	r3, #2
 800731a:	d901      	bls.n	8007320 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800731c:	2303      	movs	r3, #3
 800731e:	e1a1      	b.n	8007664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007320:	4b2d      	ldr	r3, [pc, #180]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0302 	and.w	r3, r3, #2
 8007328:	2b00      	cmp	r3, #0
 800732a:	d0f0      	beq.n	800730e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800732c:	4b2a      	ldr	r3, [pc, #168]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	00db      	lsls	r3, r3, #3
 800733a:	4927      	ldr	r1, [pc, #156]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 800733c:	4313      	orrs	r3, r2
 800733e:	600b      	str	r3, [r1, #0]
 8007340:	e015      	b.n	800736e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007342:	4b26      	ldr	r3, [pc, #152]	@ (80073dc <HAL_RCC_OscConfig+0x270>)
 8007344:	2200      	movs	r2, #0
 8007346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007348:	f7fd f918 	bl	800457c <HAL_GetTick>
 800734c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800734e:	e008      	b.n	8007362 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007350:	f7fd f914 	bl	800457c <HAL_GetTick>
 8007354:	4602      	mov	r2, r0
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	2b02      	cmp	r3, #2
 800735c:	d901      	bls.n	8007362 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e180      	b.n	8007664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007362:	4b1d      	ldr	r3, [pc, #116]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 0302 	and.w	r3, r3, #2
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1f0      	bne.n	8007350 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0308 	and.w	r3, r3, #8
 8007376:	2b00      	cmp	r3, #0
 8007378:	d03a      	beq.n	80073f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d019      	beq.n	80073b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007382:	4b17      	ldr	r3, [pc, #92]	@ (80073e0 <HAL_RCC_OscConfig+0x274>)
 8007384:	2201      	movs	r2, #1
 8007386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007388:	f7fd f8f8 	bl	800457c <HAL_GetTick>
 800738c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800738e:	e008      	b.n	80073a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007390:	f7fd f8f4 	bl	800457c <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	2b02      	cmp	r3, #2
 800739c:	d901      	bls.n	80073a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e160      	b.n	8007664 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073a2:	4b0d      	ldr	r3, [pc, #52]	@ (80073d8 <HAL_RCC_OscConfig+0x26c>)
 80073a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a6:	f003 0302 	and.w	r3, r3, #2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d0f0      	beq.n	8007390 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80073ae:	2001      	movs	r0, #1
 80073b0:	f000 fafe 	bl	80079b0 <RCC_Delay>
 80073b4:	e01c      	b.n	80073f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073b6:	4b0a      	ldr	r3, [pc, #40]	@ (80073e0 <HAL_RCC_OscConfig+0x274>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073bc:	f7fd f8de 	bl	800457c <HAL_GetTick>
 80073c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073c2:	e00f      	b.n	80073e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073c4:	f7fd f8da 	bl	800457c <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d908      	bls.n	80073e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e146      	b.n	8007664 <HAL_RCC_OscConfig+0x4f8>
 80073d6:	bf00      	nop
 80073d8:	40021000 	.word	0x40021000
 80073dc:	42420000 	.word	0x42420000
 80073e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073e4:	4b92      	ldr	r3, [pc, #584]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 80073e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1e9      	bne.n	80073c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0304 	and.w	r3, r3, #4
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f000 80a6 	beq.w	800754a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073fe:	2300      	movs	r3, #0
 8007400:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007402:	4b8b      	ldr	r3, [pc, #556]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10d      	bne.n	800742a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800740e:	4b88      	ldr	r3, [pc, #544]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	4a87      	ldr	r2, [pc, #540]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 8007414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007418:	61d3      	str	r3, [r2, #28]
 800741a:	4b85      	ldr	r3, [pc, #532]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007422:	60bb      	str	r3, [r7, #8]
 8007424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007426:	2301      	movs	r3, #1
 8007428:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800742a:	4b82      	ldr	r3, [pc, #520]	@ (8007634 <HAL_RCC_OscConfig+0x4c8>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007432:	2b00      	cmp	r3, #0
 8007434:	d118      	bne.n	8007468 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007436:	4b7f      	ldr	r3, [pc, #508]	@ (8007634 <HAL_RCC_OscConfig+0x4c8>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a7e      	ldr	r2, [pc, #504]	@ (8007634 <HAL_RCC_OscConfig+0x4c8>)
 800743c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007442:	f7fd f89b 	bl	800457c <HAL_GetTick>
 8007446:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007448:	e008      	b.n	800745c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800744a:	f7fd f897 	bl	800457c <HAL_GetTick>
 800744e:	4602      	mov	r2, r0
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	2b64      	cmp	r3, #100	@ 0x64
 8007456:	d901      	bls.n	800745c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007458:	2303      	movs	r3, #3
 800745a:	e103      	b.n	8007664 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800745c:	4b75      	ldr	r3, [pc, #468]	@ (8007634 <HAL_RCC_OscConfig+0x4c8>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007464:	2b00      	cmp	r3, #0
 8007466:	d0f0      	beq.n	800744a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d106      	bne.n	800747e <HAL_RCC_OscConfig+0x312>
 8007470:	4b6f      	ldr	r3, [pc, #444]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 8007472:	6a1b      	ldr	r3, [r3, #32]
 8007474:	4a6e      	ldr	r2, [pc, #440]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 8007476:	f043 0301 	orr.w	r3, r3, #1
 800747a:	6213      	str	r3, [r2, #32]
 800747c:	e02d      	b.n	80074da <HAL_RCC_OscConfig+0x36e>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d10c      	bne.n	80074a0 <HAL_RCC_OscConfig+0x334>
 8007486:	4b6a      	ldr	r3, [pc, #424]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 8007488:	6a1b      	ldr	r3, [r3, #32]
 800748a:	4a69      	ldr	r2, [pc, #420]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 800748c:	f023 0301 	bic.w	r3, r3, #1
 8007490:	6213      	str	r3, [r2, #32]
 8007492:	4b67      	ldr	r3, [pc, #412]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 8007494:	6a1b      	ldr	r3, [r3, #32]
 8007496:	4a66      	ldr	r2, [pc, #408]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 8007498:	f023 0304 	bic.w	r3, r3, #4
 800749c:	6213      	str	r3, [r2, #32]
 800749e:	e01c      	b.n	80074da <HAL_RCC_OscConfig+0x36e>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	2b05      	cmp	r3, #5
 80074a6:	d10c      	bne.n	80074c2 <HAL_RCC_OscConfig+0x356>
 80074a8:	4b61      	ldr	r3, [pc, #388]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	4a60      	ldr	r2, [pc, #384]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 80074ae:	f043 0304 	orr.w	r3, r3, #4
 80074b2:	6213      	str	r3, [r2, #32]
 80074b4:	4b5e      	ldr	r3, [pc, #376]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	4a5d      	ldr	r2, [pc, #372]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 80074ba:	f043 0301 	orr.w	r3, r3, #1
 80074be:	6213      	str	r3, [r2, #32]
 80074c0:	e00b      	b.n	80074da <HAL_RCC_OscConfig+0x36e>
 80074c2:	4b5b      	ldr	r3, [pc, #364]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	4a5a      	ldr	r2, [pc, #360]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 80074c8:	f023 0301 	bic.w	r3, r3, #1
 80074cc:	6213      	str	r3, [r2, #32]
 80074ce:	4b58      	ldr	r3, [pc, #352]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	4a57      	ldr	r2, [pc, #348]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 80074d4:	f023 0304 	bic.w	r3, r3, #4
 80074d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d015      	beq.n	800750e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074e2:	f7fd f84b 	bl	800457c <HAL_GetTick>
 80074e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074e8:	e00a      	b.n	8007500 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074ea:	f7fd f847 	bl	800457c <HAL_GetTick>
 80074ee:	4602      	mov	r2, r0
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d901      	bls.n	8007500 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e0b1      	b.n	8007664 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007500:	4b4b      	ldr	r3, [pc, #300]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 8007502:	6a1b      	ldr	r3, [r3, #32]
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	2b00      	cmp	r3, #0
 800750a:	d0ee      	beq.n	80074ea <HAL_RCC_OscConfig+0x37e>
 800750c:	e014      	b.n	8007538 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800750e:	f7fd f835 	bl	800457c <HAL_GetTick>
 8007512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007514:	e00a      	b.n	800752c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007516:	f7fd f831 	bl	800457c <HAL_GetTick>
 800751a:	4602      	mov	r2, r0
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007524:	4293      	cmp	r3, r2
 8007526:	d901      	bls.n	800752c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	e09b      	b.n	8007664 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800752c:	4b40      	ldr	r3, [pc, #256]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 800752e:	6a1b      	ldr	r3, [r3, #32]
 8007530:	f003 0302 	and.w	r3, r3, #2
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1ee      	bne.n	8007516 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007538:	7dfb      	ldrb	r3, [r7, #23]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d105      	bne.n	800754a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800753e:	4b3c      	ldr	r3, [pc, #240]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	4a3b      	ldr	r2, [pc, #236]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 8007544:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007548:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	69db      	ldr	r3, [r3, #28]
 800754e:	2b00      	cmp	r3, #0
 8007550:	f000 8087 	beq.w	8007662 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007554:	4b36      	ldr	r3, [pc, #216]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f003 030c 	and.w	r3, r3, #12
 800755c:	2b08      	cmp	r3, #8
 800755e:	d061      	beq.n	8007624 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	69db      	ldr	r3, [r3, #28]
 8007564:	2b02      	cmp	r3, #2
 8007566:	d146      	bne.n	80075f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007568:	4b33      	ldr	r3, [pc, #204]	@ (8007638 <HAL_RCC_OscConfig+0x4cc>)
 800756a:	2200      	movs	r2, #0
 800756c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800756e:	f7fd f805 	bl	800457c <HAL_GetTick>
 8007572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007574:	e008      	b.n	8007588 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007576:	f7fd f801 	bl	800457c <HAL_GetTick>
 800757a:	4602      	mov	r2, r0
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	2b02      	cmp	r3, #2
 8007582:	d901      	bls.n	8007588 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e06d      	b.n	8007664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007588:	4b29      	ldr	r3, [pc, #164]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1f0      	bne.n	8007576 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a1b      	ldr	r3, [r3, #32]
 8007598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800759c:	d108      	bne.n	80075b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800759e:	4b24      	ldr	r3, [pc, #144]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	4921      	ldr	r1, [pc, #132]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075b0:	4b1f      	ldr	r3, [pc, #124]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a19      	ldr	r1, [r3, #32]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c0:	430b      	orrs	r3, r1
 80075c2:	491b      	ldr	r1, [pc, #108]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007638 <HAL_RCC_OscConfig+0x4cc>)
 80075ca:	2201      	movs	r2, #1
 80075cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075ce:	f7fc ffd5 	bl	800457c <HAL_GetTick>
 80075d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80075d4:	e008      	b.n	80075e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075d6:	f7fc ffd1 	bl	800457c <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d901      	bls.n	80075e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e03d      	b.n	8007664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80075e8:	4b11      	ldr	r3, [pc, #68]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d0f0      	beq.n	80075d6 <HAL_RCC_OscConfig+0x46a>
 80075f4:	e035      	b.n	8007662 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075f6:	4b10      	ldr	r3, [pc, #64]	@ (8007638 <HAL_RCC_OscConfig+0x4cc>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075fc:	f7fc ffbe 	bl	800457c <HAL_GetTick>
 8007600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007602:	e008      	b.n	8007616 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007604:	f7fc ffba 	bl	800457c <HAL_GetTick>
 8007608:	4602      	mov	r2, r0
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	2b02      	cmp	r3, #2
 8007610:	d901      	bls.n	8007616 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e026      	b.n	8007664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007616:	4b06      	ldr	r3, [pc, #24]	@ (8007630 <HAL_RCC_OscConfig+0x4c4>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1f0      	bne.n	8007604 <HAL_RCC_OscConfig+0x498>
 8007622:	e01e      	b.n	8007662 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	69db      	ldr	r3, [r3, #28]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d107      	bne.n	800763c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e019      	b.n	8007664 <HAL_RCC_OscConfig+0x4f8>
 8007630:	40021000 	.word	0x40021000
 8007634:	40007000 	.word	0x40007000
 8007638:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800763c:	4b0b      	ldr	r3, [pc, #44]	@ (800766c <HAL_RCC_OscConfig+0x500>)
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a1b      	ldr	r3, [r3, #32]
 800764c:	429a      	cmp	r2, r3
 800764e:	d106      	bne.n	800765e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800765a:	429a      	cmp	r2, r3
 800765c:	d001      	beq.n	8007662 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e000      	b.n	8007664 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3718      	adds	r7, #24
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	40021000 	.word	0x40021000

08007670 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d101      	bne.n	8007684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e0d0      	b.n	8007826 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007684:	4b6a      	ldr	r3, [pc, #424]	@ (8007830 <HAL_RCC_ClockConfig+0x1c0>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0307 	and.w	r3, r3, #7
 800768c:	683a      	ldr	r2, [r7, #0]
 800768e:	429a      	cmp	r2, r3
 8007690:	d910      	bls.n	80076b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007692:	4b67      	ldr	r3, [pc, #412]	@ (8007830 <HAL_RCC_ClockConfig+0x1c0>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f023 0207 	bic.w	r2, r3, #7
 800769a:	4965      	ldr	r1, [pc, #404]	@ (8007830 <HAL_RCC_ClockConfig+0x1c0>)
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	4313      	orrs	r3, r2
 80076a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076a2:	4b63      	ldr	r3, [pc, #396]	@ (8007830 <HAL_RCC_ClockConfig+0x1c0>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0307 	and.w	r3, r3, #7
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d001      	beq.n	80076b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e0b8      	b.n	8007826 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0302 	and.w	r3, r3, #2
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d020      	beq.n	8007702 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0304 	and.w	r3, r3, #4
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d005      	beq.n	80076d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076cc:	4b59      	ldr	r3, [pc, #356]	@ (8007834 <HAL_RCC_ClockConfig+0x1c4>)
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	4a58      	ldr	r2, [pc, #352]	@ (8007834 <HAL_RCC_ClockConfig+0x1c4>)
 80076d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80076d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0308 	and.w	r3, r3, #8
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d005      	beq.n	80076f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80076e4:	4b53      	ldr	r3, [pc, #332]	@ (8007834 <HAL_RCC_ClockConfig+0x1c4>)
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	4a52      	ldr	r2, [pc, #328]	@ (8007834 <HAL_RCC_ClockConfig+0x1c4>)
 80076ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80076ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076f0:	4b50      	ldr	r3, [pc, #320]	@ (8007834 <HAL_RCC_ClockConfig+0x1c4>)
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	494d      	ldr	r1, [pc, #308]	@ (8007834 <HAL_RCC_ClockConfig+0x1c4>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b00      	cmp	r3, #0
 800770c:	d040      	beq.n	8007790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d107      	bne.n	8007726 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007716:	4b47      	ldr	r3, [pc, #284]	@ (8007834 <HAL_RCC_ClockConfig+0x1c4>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d115      	bne.n	800774e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e07f      	b.n	8007826 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	2b02      	cmp	r3, #2
 800772c:	d107      	bne.n	800773e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800772e:	4b41      	ldr	r3, [pc, #260]	@ (8007834 <HAL_RCC_ClockConfig+0x1c4>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d109      	bne.n	800774e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e073      	b.n	8007826 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800773e:	4b3d      	ldr	r3, [pc, #244]	@ (8007834 <HAL_RCC_ClockConfig+0x1c4>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0302 	and.w	r3, r3, #2
 8007746:	2b00      	cmp	r3, #0
 8007748:	d101      	bne.n	800774e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e06b      	b.n	8007826 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800774e:	4b39      	ldr	r3, [pc, #228]	@ (8007834 <HAL_RCC_ClockConfig+0x1c4>)
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f023 0203 	bic.w	r2, r3, #3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	4936      	ldr	r1, [pc, #216]	@ (8007834 <HAL_RCC_ClockConfig+0x1c4>)
 800775c:	4313      	orrs	r3, r2
 800775e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007760:	f7fc ff0c 	bl	800457c <HAL_GetTick>
 8007764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007766:	e00a      	b.n	800777e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007768:	f7fc ff08 	bl	800457c <HAL_GetTick>
 800776c:	4602      	mov	r2, r0
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007776:	4293      	cmp	r3, r2
 8007778:	d901      	bls.n	800777e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e053      	b.n	8007826 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800777e:	4b2d      	ldr	r3, [pc, #180]	@ (8007834 <HAL_RCC_ClockConfig+0x1c4>)
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	f003 020c 	and.w	r2, r3, #12
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	429a      	cmp	r2, r3
 800778e:	d1eb      	bne.n	8007768 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007790:	4b27      	ldr	r3, [pc, #156]	@ (8007830 <HAL_RCC_ClockConfig+0x1c0>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0307 	and.w	r3, r3, #7
 8007798:	683a      	ldr	r2, [r7, #0]
 800779a:	429a      	cmp	r2, r3
 800779c:	d210      	bcs.n	80077c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800779e:	4b24      	ldr	r3, [pc, #144]	@ (8007830 <HAL_RCC_ClockConfig+0x1c0>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f023 0207 	bic.w	r2, r3, #7
 80077a6:	4922      	ldr	r1, [pc, #136]	@ (8007830 <HAL_RCC_ClockConfig+0x1c0>)
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ae:	4b20      	ldr	r3, [pc, #128]	@ (8007830 <HAL_RCC_ClockConfig+0x1c0>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0307 	and.w	r3, r3, #7
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d001      	beq.n	80077c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e032      	b.n	8007826 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0304 	and.w	r3, r3, #4
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d008      	beq.n	80077de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077cc:	4b19      	ldr	r3, [pc, #100]	@ (8007834 <HAL_RCC_ClockConfig+0x1c4>)
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	4916      	ldr	r1, [pc, #88]	@ (8007834 <HAL_RCC_ClockConfig+0x1c4>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0308 	and.w	r3, r3, #8
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d009      	beq.n	80077fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80077ea:	4b12      	ldr	r3, [pc, #72]	@ (8007834 <HAL_RCC_ClockConfig+0x1c4>)
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	00db      	lsls	r3, r3, #3
 80077f8:	490e      	ldr	r1, [pc, #56]	@ (8007834 <HAL_RCC_ClockConfig+0x1c4>)
 80077fa:	4313      	orrs	r3, r2
 80077fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80077fe:	f000 f821 	bl	8007844 <HAL_RCC_GetSysClockFreq>
 8007802:	4602      	mov	r2, r0
 8007804:	4b0b      	ldr	r3, [pc, #44]	@ (8007834 <HAL_RCC_ClockConfig+0x1c4>)
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	091b      	lsrs	r3, r3, #4
 800780a:	f003 030f 	and.w	r3, r3, #15
 800780e:	490a      	ldr	r1, [pc, #40]	@ (8007838 <HAL_RCC_ClockConfig+0x1c8>)
 8007810:	5ccb      	ldrb	r3, [r1, r3]
 8007812:	fa22 f303 	lsr.w	r3, r2, r3
 8007816:	4a09      	ldr	r2, [pc, #36]	@ (800783c <HAL_RCC_ClockConfig+0x1cc>)
 8007818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800781a:	4b09      	ldr	r3, [pc, #36]	@ (8007840 <HAL_RCC_ClockConfig+0x1d0>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4618      	mov	r0, r3
 8007820:	f7fc fc46 	bl	80040b0 <HAL_InitTick>

  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	40022000 	.word	0x40022000
 8007834:	40021000 	.word	0x40021000
 8007838:	080121bc 	.word	0x080121bc
 800783c:	200000c8 	.word	0x200000c8
 8007840:	200000cc 	.word	0x200000cc

08007844 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007844:	b480      	push	{r7}
 8007846:	b087      	sub	sp, #28
 8007848:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800784a:	2300      	movs	r3, #0
 800784c:	60fb      	str	r3, [r7, #12]
 800784e:	2300      	movs	r3, #0
 8007850:	60bb      	str	r3, [r7, #8]
 8007852:	2300      	movs	r3, #0
 8007854:	617b      	str	r3, [r7, #20]
 8007856:	2300      	movs	r3, #0
 8007858:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800785a:	2300      	movs	r3, #0
 800785c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800785e:	4b1e      	ldr	r3, [pc, #120]	@ (80078d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f003 030c 	and.w	r3, r3, #12
 800786a:	2b04      	cmp	r3, #4
 800786c:	d002      	beq.n	8007874 <HAL_RCC_GetSysClockFreq+0x30>
 800786e:	2b08      	cmp	r3, #8
 8007870:	d003      	beq.n	800787a <HAL_RCC_GetSysClockFreq+0x36>
 8007872:	e027      	b.n	80078c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007874:	4b19      	ldr	r3, [pc, #100]	@ (80078dc <HAL_RCC_GetSysClockFreq+0x98>)
 8007876:	613b      	str	r3, [r7, #16]
      break;
 8007878:	e027      	b.n	80078ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	0c9b      	lsrs	r3, r3, #18
 800787e:	f003 030f 	and.w	r3, r3, #15
 8007882:	4a17      	ldr	r2, [pc, #92]	@ (80078e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007884:	5cd3      	ldrb	r3, [r2, r3]
 8007886:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d010      	beq.n	80078b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007892:	4b11      	ldr	r3, [pc, #68]	@ (80078d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	0c5b      	lsrs	r3, r3, #17
 8007898:	f003 0301 	and.w	r3, r3, #1
 800789c:	4a11      	ldr	r2, [pc, #68]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800789e:	5cd3      	ldrb	r3, [r2, r3]
 80078a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a0d      	ldr	r2, [pc, #52]	@ (80078dc <HAL_RCC_GetSysClockFreq+0x98>)
 80078a6:	fb03 f202 	mul.w	r2, r3, r2
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b0:	617b      	str	r3, [r7, #20]
 80078b2:	e004      	b.n	80078be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a0c      	ldr	r2, [pc, #48]	@ (80078e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80078b8:	fb02 f303 	mul.w	r3, r2, r3
 80078bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	613b      	str	r3, [r7, #16]
      break;
 80078c2:	e002      	b.n	80078ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80078c4:	4b05      	ldr	r3, [pc, #20]	@ (80078dc <HAL_RCC_GetSysClockFreq+0x98>)
 80078c6:	613b      	str	r3, [r7, #16]
      break;
 80078c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80078ca:	693b      	ldr	r3, [r7, #16]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	371c      	adds	r7, #28
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bc80      	pop	{r7}
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	40021000 	.word	0x40021000
 80078dc:	007a1200 	.word	0x007a1200
 80078e0:	080121d4 	.word	0x080121d4
 80078e4:	080121e4 	.word	0x080121e4
 80078e8:	003d0900 	.word	0x003d0900

080078ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078ec:	b480      	push	{r7}
 80078ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078f0:	4b02      	ldr	r3, [pc, #8]	@ (80078fc <HAL_RCC_GetHCLKFreq+0x10>)
 80078f2:	681b      	ldr	r3, [r3, #0]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bc80      	pop	{r7}
 80078fa:	4770      	bx	lr
 80078fc:	200000c8 	.word	0x200000c8

08007900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007904:	f7ff fff2 	bl	80078ec <HAL_RCC_GetHCLKFreq>
 8007908:	4602      	mov	r2, r0
 800790a:	4b05      	ldr	r3, [pc, #20]	@ (8007920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	0a1b      	lsrs	r3, r3, #8
 8007910:	f003 0307 	and.w	r3, r3, #7
 8007914:	4903      	ldr	r1, [pc, #12]	@ (8007924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007916:	5ccb      	ldrb	r3, [r1, r3]
 8007918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800791c:	4618      	mov	r0, r3
 800791e:	bd80      	pop	{r7, pc}
 8007920:	40021000 	.word	0x40021000
 8007924:	080121cc 	.word	0x080121cc

08007928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800792c:	f7ff ffde 	bl	80078ec <HAL_RCC_GetHCLKFreq>
 8007930:	4602      	mov	r2, r0
 8007932:	4b05      	ldr	r3, [pc, #20]	@ (8007948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	0adb      	lsrs	r3, r3, #11
 8007938:	f003 0307 	and.w	r3, r3, #7
 800793c:	4903      	ldr	r1, [pc, #12]	@ (800794c <HAL_RCC_GetPCLK2Freq+0x24>)
 800793e:	5ccb      	ldrb	r3, [r1, r3]
 8007940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007944:	4618      	mov	r0, r3
 8007946:	bd80      	pop	{r7, pc}
 8007948:	40021000 	.word	0x40021000
 800794c:	080121cc 	.word	0x080121cc

08007950 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	220f      	movs	r2, #15
 800795e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007960:	4b11      	ldr	r3, [pc, #68]	@ (80079a8 <HAL_RCC_GetClockConfig+0x58>)
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f003 0203 	and.w	r2, r3, #3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800796c:	4b0e      	ldr	r3, [pc, #56]	@ (80079a8 <HAL_RCC_GetClockConfig+0x58>)
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007978:	4b0b      	ldr	r3, [pc, #44]	@ (80079a8 <HAL_RCC_GetClockConfig+0x58>)
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007984:	4b08      	ldr	r3, [pc, #32]	@ (80079a8 <HAL_RCC_GetClockConfig+0x58>)
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	08db      	lsrs	r3, r3, #3
 800798a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007992:	4b06      	ldr	r3, [pc, #24]	@ (80079ac <HAL_RCC_GetClockConfig+0x5c>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 0207 	and.w	r2, r3, #7
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800799e:	bf00      	nop
 80079a0:	370c      	adds	r7, #12
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bc80      	pop	{r7}
 80079a6:	4770      	bx	lr
 80079a8:	40021000 	.word	0x40021000
 80079ac:	40022000 	.word	0x40022000

080079b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80079b8:	4b0a      	ldr	r3, [pc, #40]	@ (80079e4 <RCC_Delay+0x34>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a0a      	ldr	r2, [pc, #40]	@ (80079e8 <RCC_Delay+0x38>)
 80079be:	fba2 2303 	umull	r2, r3, r2, r3
 80079c2:	0a5b      	lsrs	r3, r3, #9
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	fb02 f303 	mul.w	r3, r2, r3
 80079ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80079cc:	bf00      	nop
  }
  while (Delay --);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	1e5a      	subs	r2, r3, #1
 80079d2:	60fa      	str	r2, [r7, #12]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1f9      	bne.n	80079cc <RCC_Delay+0x1c>
}
 80079d8:	bf00      	nop
 80079da:	bf00      	nop
 80079dc:	3714      	adds	r7, #20
 80079de:	46bd      	mov	sp, r7
 80079e0:	bc80      	pop	{r7}
 80079e2:	4770      	bx	lr
 80079e4:	200000c8 	.word	0x200000c8
 80079e8:	10624dd3 	.word	0x10624dd3

080079ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80079f4:	2300      	movs	r3, #0
 80079f6:	613b      	str	r3, [r7, #16]
 80079f8:	2300      	movs	r3, #0
 80079fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 0301 	and.w	r3, r3, #1
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d07d      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a0c:	4b4f      	ldr	r3, [pc, #316]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a0e:	69db      	ldr	r3, [r3, #28]
 8007a10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10d      	bne.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a18:	4b4c      	ldr	r3, [pc, #304]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a1a:	69db      	ldr	r3, [r3, #28]
 8007a1c:	4a4b      	ldr	r2, [pc, #300]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a22:	61d3      	str	r3, [r2, #28]
 8007a24:	4b49      	ldr	r3, [pc, #292]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a26:	69db      	ldr	r3, [r3, #28]
 8007a28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a2c:	60bb      	str	r3, [r7, #8]
 8007a2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a30:	2301      	movs	r3, #1
 8007a32:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a34:	4b46      	ldr	r3, [pc, #280]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d118      	bne.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a40:	4b43      	ldr	r3, [pc, #268]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a42      	ldr	r2, [pc, #264]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007a46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a4c:	f7fc fd96 	bl	800457c <HAL_GetTick>
 8007a50:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a52:	e008      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a54:	f7fc fd92 	bl	800457c <HAL_GetTick>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	2b64      	cmp	r3, #100	@ 0x64
 8007a60:	d901      	bls.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e06d      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a66:	4b3a      	ldr	r3, [pc, #232]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d0f0      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007a72:	4b36      	ldr	r3, [pc, #216]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a74:	6a1b      	ldr	r3, [r3, #32]
 8007a76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a7a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d02e      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d027      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a90:	4b2e      	ldr	r3, [pc, #184]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a92:	6a1b      	ldr	r3, [r3, #32]
 8007a94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a98:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007a9a:	4b2e      	ldr	r3, [pc, #184]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007aa6:	4a29      	ldr	r2, [pc, #164]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f003 0301 	and.w	r3, r3, #1
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d014      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ab6:	f7fc fd61 	bl	800457c <HAL_GetTick>
 8007aba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007abc:	e00a      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007abe:	f7fc fd5d 	bl	800457c <HAL_GetTick>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d901      	bls.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	e036      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ad6:	6a1b      	ldr	r3, [r3, #32]
 8007ad8:	f003 0302 	and.w	r3, r3, #2
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d0ee      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ae2:	6a1b      	ldr	r3, [r3, #32]
 8007ae4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	4917      	ldr	r1, [pc, #92]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007aee:	4313      	orrs	r3, r2
 8007af0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007af2:	7dfb      	ldrb	r3, [r7, #23]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d105      	bne.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007af8:	4b14      	ldr	r3, [pc, #80]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007afa:	69db      	ldr	r3, [r3, #28]
 8007afc:	4a13      	ldr	r2, [pc, #76]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007afe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 0302 	and.w	r3, r3, #2
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d008      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b10:	4b0e      	ldr	r3, [pc, #56]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	490b      	ldr	r1, [pc, #44]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 0310 	and.w	r3, r3, #16
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d008      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b2e:	4b07      	ldr	r3, [pc, #28]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	4904      	ldr	r1, [pc, #16]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3718      	adds	r7, #24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	40021000 	.word	0x40021000
 8007b50:	40007000 	.word	0x40007000
 8007b54:	42420440 	.word	0x42420440

08007b58 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b088      	sub	sp, #32
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007b60:	2300      	movs	r3, #0
 8007b62:	617b      	str	r3, [r7, #20]
 8007b64:	2300      	movs	r3, #0
 8007b66:	61fb      	str	r3, [r7, #28]
 8007b68:	2300      	movs	r3, #0
 8007b6a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	60fb      	str	r3, [r7, #12]
 8007b70:	2300      	movs	r3, #0
 8007b72:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	3b01      	subs	r3, #1
 8007b78:	2b0f      	cmp	r3, #15
 8007b7a:	f200 80af 	bhi.w	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8007b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8007b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b84:	08007c5b 	.word	0x08007c5b
 8007b88:	08007cc1 	.word	0x08007cc1
 8007b8c:	08007cdd 	.word	0x08007cdd
 8007b90:	08007c4b 	.word	0x08007c4b
 8007b94:	08007cdd 	.word	0x08007cdd
 8007b98:	08007cdd 	.word	0x08007cdd
 8007b9c:	08007cdd 	.word	0x08007cdd
 8007ba0:	08007c53 	.word	0x08007c53
 8007ba4:	08007cdd 	.word	0x08007cdd
 8007ba8:	08007cdd 	.word	0x08007cdd
 8007bac:	08007cdd 	.word	0x08007cdd
 8007bb0:	08007cdd 	.word	0x08007cdd
 8007bb4:	08007cdd 	.word	0x08007cdd
 8007bb8:	08007cdd 	.word	0x08007cdd
 8007bbc:	08007cdd 	.word	0x08007cdd
 8007bc0:	08007bc5 	.word	0x08007bc5
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8007bc4:	4b4a      	ldr	r3, [pc, #296]	@ (8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007bca:	4b49      	ldr	r3, [pc, #292]	@ (8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f000 8084 	beq.w	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	0c9b      	lsrs	r3, r3, #18
 8007bdc:	f003 030f 	and.w	r3, r3, #15
 8007be0:	4a44      	ldr	r2, [pc, #272]	@ (8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8007be2:	5cd3      	ldrb	r3, [r2, r3]
 8007be4:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d015      	beq.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007bf0:	4b3f      	ldr	r3, [pc, #252]	@ (8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	0c5b      	lsrs	r3, r3, #17
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	4a3f      	ldr	r2, [pc, #252]	@ (8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8007bfc:	5cd3      	ldrb	r3, [r2, r3]
 8007bfe:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00d      	beq.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007c0a:	4a3c      	ldr	r2, [pc, #240]	@ (8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	fb02 f303 	mul.w	r3, r2, r3
 8007c18:	61fb      	str	r3, [r7, #28]
 8007c1a:	e004      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	4a38      	ldr	r2, [pc, #224]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8007c20:	fb02 f303 	mul.w	r3, r2, r3
 8007c24:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007c26:	4b32      	ldr	r3, [pc, #200]	@ (8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c32:	d102      	bne.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8007c38:	e052      	b.n	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	005b      	lsls	r3, r3, #1
 8007c3e:	4a31      	ldr	r2, [pc, #196]	@ (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8007c40:	fba2 2303 	umull	r2, r3, r2, r3
 8007c44:	085b      	lsrs	r3, r3, #1
 8007c46:	61bb      	str	r3, [r7, #24]
      break;
 8007c48:	e04a      	b.n	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8007c4a:	f7ff fdfb 	bl	8007844 <HAL_RCC_GetSysClockFreq>
 8007c4e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8007c50:	e049      	b.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8007c52:	f7ff fdf7 	bl	8007844 <HAL_RCC_GetSysClockFreq>
 8007c56:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8007c58:	e045      	b.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8007c5a:	4b25      	ldr	r3, [pc, #148]	@ (8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c6a:	d108      	bne.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f003 0302 	and.w	r3, r3, #2
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d003      	beq.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8007c76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c7a:	61bb      	str	r3, [r7, #24]
 8007c7c:	e01f      	b.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c88:	d109      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007c8a:	4b19      	ldr	r3, [pc, #100]	@ (8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c8e:	f003 0302 	and.w	r3, r3, #2
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d003      	beq.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8007c96:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8007c9a:	61bb      	str	r3, [r7, #24]
 8007c9c:	e00f      	b.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ca4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ca8:	d11c      	bne.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8007caa:	4b11      	ldr	r3, [pc, #68]	@ (8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d016      	beq.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8007cb6:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8007cba:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8007cbc:	e012      	b.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8007cbe:	e011      	b.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007cc0:	f7ff fe32 	bl	8007928 <HAL_RCC_GetPCLK2Freq>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	0b9b      	lsrs	r3, r3, #14
 8007ccc:	f003 0303 	and.w	r3, r3, #3
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	005b      	lsls	r3, r3, #1
 8007cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cd8:	61bb      	str	r3, [r7, #24]
      break;
 8007cda:	e004      	b.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8007cdc:	bf00      	nop
 8007cde:	e002      	b.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8007ce0:	bf00      	nop
 8007ce2:	e000      	b.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8007ce4:	bf00      	nop
    }
  }
  return (frequency);
 8007ce6:	69bb      	ldr	r3, [r7, #24]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3720      	adds	r7, #32
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	40021000 	.word	0x40021000
 8007cf4:	080121e8 	.word	0x080121e8
 8007cf8:	080121f8 	.word	0x080121f8
 8007cfc:	007a1200 	.word	0x007a1200
 8007d00:	003d0900 	.word	0x003d0900
 8007d04:	aaaaaaab 	.word	0xaaaaaaab

08007d08 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8007d10:	2300      	movs	r3, #0
 8007d12:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d101      	bne.n	8007d1e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e07a      	b.n	8007e14 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	7c5b      	ldrb	r3, [r3, #17]
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d105      	bne.n	8007d34 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f7fb ff24 	bl	8003b7c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2202      	movs	r2, #2
 8007d38:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 faea 	bl	8008314 <HAL_RTC_WaitForSynchro>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d004      	beq.n	8007d50 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2204      	movs	r2, #4
 8007d4a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e061      	b.n	8007e14 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 fba3 	bl	800849c <RTC_EnterInitMode>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d004      	beq.n	8007d66 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2204      	movs	r2, #4
 8007d60:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e056      	b.n	8007e14 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f022 0207 	bic.w	r2, r2, #7
 8007d74:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d005      	beq.n	8007d8a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8007d7e:	4b27      	ldr	r3, [pc, #156]	@ (8007e1c <HAL_RTC_Init+0x114>)
 8007d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d82:	4a26      	ldr	r2, [pc, #152]	@ (8007e1c <HAL_RTC_Init+0x114>)
 8007d84:	f023 0301 	bic.w	r3, r3, #1
 8007d88:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8007d8a:	4b24      	ldr	r3, [pc, #144]	@ (8007e1c <HAL_RTC_Init+0x114>)
 8007d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d8e:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	4921      	ldr	r1, [pc, #132]	@ (8007e1c <HAL_RTC_Init+0x114>)
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da4:	d003      	beq.n	8007dae <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	60fb      	str	r3, [r7, #12]
 8007dac:	e00e      	b.n	8007dcc <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8007dae:	2001      	movs	r0, #1
 8007db0:	f7ff fed2 	bl	8007b58 <HAL_RCCEx_GetPeriphCLKFreq>
 8007db4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d104      	bne.n	8007dc6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2204      	movs	r2, #4
 8007dc0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e026      	b.n	8007e14 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	0c1a      	lsrs	r2, r3, #16
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f002 020f 	and.w	r2, r2, #15
 8007dd8:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	b292      	uxth	r2, r2
 8007de2:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 fb81 	bl	80084ec <RTC_ExitInitMode>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d004      	beq.n	8007dfa <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2204      	movs	r2, #4
 8007df4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e00c      	b.n	8007e14 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8007e12:	2300      	movs	r3, #0
  }
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	40006c00 	.word	0x40006c00

08007e20 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007e20:	b590      	push	{r4, r7, lr}
 8007e22:	b087      	sub	sp, #28
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	617b      	str	r3, [r7, #20]
 8007e30:	2300      	movs	r3, #0
 8007e32:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d002      	beq.n	8007e40 <HAL_RTC_SetTime+0x20>
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d101      	bne.n	8007e44 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e080      	b.n	8007f46 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	7c1b      	ldrb	r3, [r3, #16]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d101      	bne.n	8007e50 <HAL_RTC_SetTime+0x30>
 8007e4c:	2302      	movs	r3, #2
 8007e4e:	e07a      	b.n	8007f46 <HAL_RTC_SetTime+0x126>
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2201      	movs	r2, #1
 8007e54:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2202      	movs	r2, #2
 8007e5a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d113      	bne.n	8007e8a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	461a      	mov	r2, r3
 8007e68:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8007e6c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	785b      	ldrb	r3, [r3, #1]
 8007e74:	4619      	mov	r1, r3
 8007e76:	460b      	mov	r3, r1
 8007e78:	011b      	lsls	r3, r3, #4
 8007e7a:	1a5b      	subs	r3, r3, r1
 8007e7c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007e7e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8007e80:	68ba      	ldr	r2, [r7, #8]
 8007e82:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007e84:	4413      	add	r3, r2
 8007e86:	617b      	str	r3, [r7, #20]
 8007e88:	e01e      	b.n	8007ec8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 fb71 	bl	8008576 <RTC_Bcd2ToByte>
 8007e94:	4603      	mov	r3, r0
 8007e96:	461a      	mov	r2, r3
 8007e98:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8007e9c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	785b      	ldrb	r3, [r3, #1]
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f000 fb66 	bl	8008576 <RTC_Bcd2ToByte>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	461a      	mov	r2, r3
 8007eae:	4613      	mov	r3, r2
 8007eb0:	011b      	lsls	r3, r3, #4
 8007eb2:	1a9b      	subs	r3, r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007eb6:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	789b      	ldrb	r3, [r3, #2]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f000 fb5a 	bl	8008576 <RTC_Bcd2ToByte>
 8007ec2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007ec4:	4423      	add	r3, r4
 8007ec6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8007ec8:	6979      	ldr	r1, [r7, #20]
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f000 fa7f 	bl	80083ce <RTC_WriteTimeCounter>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d007      	beq.n	8007ee6 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2204      	movs	r2, #4
 8007eda:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e02f      	b.n	8007f46 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f022 0205 	bic.w	r2, r2, #5
 8007ef4:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f000 fa90 	bl	800841c <RTC_ReadAlarmCounter>
 8007efc:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f04:	d018      	beq.n	8007f38 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d214      	bcs.n	8007f38 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8007f14:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8007f18:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007f1a:	6939      	ldr	r1, [r7, #16]
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f000 fa96 	bl	800844e <RTC_WriteAlarmCounter>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d007      	beq.n	8007f38 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2204      	movs	r2, #4
 8007f2c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e006      	b.n	8007f46 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8007f44:	2300      	movs	r3, #0
  }
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	371c      	adds	r7, #28
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd90      	pop	{r4, r7, pc}
	...

08007f50 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b088      	sub	sp, #32
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	61bb      	str	r3, [r7, #24]
 8007f60:	2300      	movs	r3, #0
 8007f62:	61fb      	str	r3, [r7, #28]
 8007f64:	2300      	movs	r3, #0
 8007f66:	617b      	str	r3, [r7, #20]
 8007f68:	2300      	movs	r3, #0
 8007f6a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d002      	beq.n	8007f78 <HAL_RTC_GetTime+0x28>
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d101      	bne.n	8007f7c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e0b5      	b.n	80080e8 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f003 0304 	and.w	r3, r3, #4
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d001      	beq.n	8007f8e <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e0ac      	b.n	80080e8 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f000 f9ed 	bl	800836e <RTC_ReadTimeCounter>
 8007f94:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	4a55      	ldr	r2, [pc, #340]	@ (80080f0 <HAL_RTC_GetTime+0x1a0>)
 8007f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f9e:	0adb      	lsrs	r3, r3, #11
 8007fa0:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8007fa2:	69ba      	ldr	r2, [r7, #24]
 8007fa4:	4b52      	ldr	r3, [pc, #328]	@ (80080f0 <HAL_RTC_GetTime+0x1a0>)
 8007fa6:	fba3 1302 	umull	r1, r3, r3, r2
 8007faa:	0adb      	lsrs	r3, r3, #11
 8007fac:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8007fb0:	fb01 f303 	mul.w	r3, r1, r3
 8007fb4:	1ad3      	subs	r3, r2, r3
 8007fb6:	4a4f      	ldr	r2, [pc, #316]	@ (80080f4 <HAL_RTC_GetTime+0x1a4>)
 8007fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007fbc:	095b      	lsrs	r3, r3, #5
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	4a4a      	ldr	r2, [pc, #296]	@ (80080f0 <HAL_RTC_GetTime+0x1a0>)
 8007fc8:	fba2 1203 	umull	r1, r2, r2, r3
 8007fcc:	0ad2      	lsrs	r2, r2, #11
 8007fce:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8007fd2:	fb01 f202 	mul.w	r2, r1, r2
 8007fd6:	1a9a      	subs	r2, r3, r2
 8007fd8:	4b46      	ldr	r3, [pc, #280]	@ (80080f4 <HAL_RTC_GetTime+0x1a4>)
 8007fda:	fba3 1302 	umull	r1, r3, r3, r2
 8007fde:	0959      	lsrs	r1, r3, #5
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	011b      	lsls	r3, r3, #4
 8007fe4:	1a5b      	subs	r3, r3, r1
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	1ad1      	subs	r1, r2, r3
 8007fea:	b2ca      	uxtb	r2, r1
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	2b17      	cmp	r3, #23
 8007ff4:	d955      	bls.n	80080a2 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	4a3f      	ldr	r2, [pc, #252]	@ (80080f8 <HAL_RTC_GetTime+0x1a8>)
 8007ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8007ffe:	091b      	lsrs	r3, r3, #4
 8008000:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8008002:	6939      	ldr	r1, [r7, #16]
 8008004:	4b3c      	ldr	r3, [pc, #240]	@ (80080f8 <HAL_RTC_GetTime+0x1a8>)
 8008006:	fba3 2301 	umull	r2, r3, r3, r1
 800800a:	091a      	lsrs	r2, r3, #4
 800800c:	4613      	mov	r3, r2
 800800e:	005b      	lsls	r3, r3, #1
 8008010:	4413      	add	r3, r2
 8008012:	00db      	lsls	r3, r3, #3
 8008014:	1aca      	subs	r2, r1, r3
 8008016:	b2d2      	uxtb	r2, r2
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f000 f9fd 	bl	800841c <RTC_ReadAlarmCounter>
 8008022:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802a:	d008      	beq.n	800803e <HAL_RTC_GetTime+0xee>
 800802c:	69fa      	ldr	r2, [r7, #28]
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	429a      	cmp	r2, r3
 8008032:	d904      	bls.n	800803e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8008034:	69fa      	ldr	r2, [r7, #28]
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	61fb      	str	r3, [r7, #28]
 800803c:	e002      	b.n	8008044 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800803e:	f04f 33ff 	mov.w	r3, #4294967295
 8008042:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	4a2d      	ldr	r2, [pc, #180]	@ (80080fc <HAL_RTC_GetTime+0x1ac>)
 8008048:	fb02 f303 	mul.w	r3, r2, r3
 800804c:	69ba      	ldr	r2, [r7, #24]
 800804e:	1ad3      	subs	r3, r2, r3
 8008050:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8008052:	69b9      	ldr	r1, [r7, #24]
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f000 f9ba 	bl	80083ce <RTC_WriteTimeCounter>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	e041      	b.n	80080e8 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800806a:	d00c      	beq.n	8008086 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 800806c:	69fa      	ldr	r2, [r7, #28]
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	4413      	add	r3, r2
 8008072:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8008074:	69f9      	ldr	r1, [r7, #28]
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f000 f9e9 	bl	800844e <RTC_WriteAlarmCounter>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00a      	beq.n	8008098 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e030      	b.n	80080e8 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8008086:	69f9      	ldr	r1, [r7, #28]
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	f000 f9e0 	bl	800844e <RTC_WriteAlarmCounter>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d001      	beq.n	8008098 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e027      	b.n	80080e8 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8008098:	6979      	ldr	r1, [r7, #20]
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f000 fa88 	bl	80085b0 <RTC_DateUpdate>
 80080a0:	e003      	b.n	80080aa <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d01a      	beq.n	80080e6 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	4618      	mov	r0, r3
 80080b6:	f000 fa41 	bl	800853c <RTC_ByteToBcd2>
 80080ba:	4603      	mov	r3, r0
 80080bc:	461a      	mov	r2, r3
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	785b      	ldrb	r3, [r3, #1]
 80080c6:	4618      	mov	r0, r3
 80080c8:	f000 fa38 	bl	800853c <RTC_ByteToBcd2>
 80080cc:	4603      	mov	r3, r0
 80080ce:	461a      	mov	r2, r3
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	789b      	ldrb	r3, [r3, #2]
 80080d8:	4618      	mov	r0, r3
 80080da:	f000 fa2f 	bl	800853c <RTC_ByteToBcd2>
 80080de:	4603      	mov	r3, r0
 80080e0:	461a      	mov	r2, r3
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3720      	adds	r7, #32
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	91a2b3c5 	.word	0x91a2b3c5
 80080f4:	88888889 	.word	0x88888889
 80080f8:	aaaaaaab 	.word	0xaaaaaaab
 80080fc:	00015180 	.word	0x00015180

08008100 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b088      	sub	sp, #32
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800810c:	2300      	movs	r3, #0
 800810e:	61fb      	str	r3, [r7, #28]
 8008110:	2300      	movs	r3, #0
 8008112:	61bb      	str	r3, [r7, #24]
 8008114:	2300      	movs	r3, #0
 8008116:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d002      	beq.n	8008124 <HAL_RTC_SetDate+0x24>
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d101      	bne.n	8008128 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	e097      	b.n	8008258 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	7c1b      	ldrb	r3, [r3, #16]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d101      	bne.n	8008134 <HAL_RTC_SetDate+0x34>
 8008130:	2302      	movs	r3, #2
 8008132:	e091      	b.n	8008258 <HAL_RTC_SetDate+0x158>
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2201      	movs	r2, #1
 8008138:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2202      	movs	r2, #2
 800813e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10c      	bne.n	8008160 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	78da      	ldrb	r2, [r3, #3]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	785a      	ldrb	r2, [r3, #1]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	789a      	ldrb	r2, [r3, #2]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	739a      	strb	r2, [r3, #14]
 800815e:	e01a      	b.n	8008196 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	78db      	ldrb	r3, [r3, #3]
 8008164:	4618      	mov	r0, r3
 8008166:	f000 fa06 	bl	8008576 <RTC_Bcd2ToByte>
 800816a:	4603      	mov	r3, r0
 800816c:	461a      	mov	r2, r3
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	785b      	ldrb	r3, [r3, #1]
 8008176:	4618      	mov	r0, r3
 8008178:	f000 f9fd 	bl	8008576 <RTC_Bcd2ToByte>
 800817c:	4603      	mov	r3, r0
 800817e:	461a      	mov	r2, r3
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	789b      	ldrb	r3, [r3, #2]
 8008188:	4618      	mov	r0, r3
 800818a:	f000 f9f4 	bl	8008576 <RTC_Bcd2ToByte>
 800818e:	4603      	mov	r3, r0
 8008190:	461a      	mov	r2, r3
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	7bdb      	ldrb	r3, [r3, #15]
 800819a:	4618      	mov	r0, r3
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	7b59      	ldrb	r1, [r3, #13]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	7b9b      	ldrb	r3, [r3, #14]
 80081a4:	461a      	mov	r2, r3
 80081a6:	f000 fadf 	bl	8008768 <RTC_WeekDayNum>
 80081aa:	4603      	mov	r3, r0
 80081ac:	461a      	mov	r2, r3
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	7b1a      	ldrb	r2, [r3, #12]
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f000 f8d7 	bl	800836e <RTC_ReadTimeCounter>
 80081c0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	4a26      	ldr	r2, [pc, #152]	@ (8008260 <HAL_RTC_SetDate+0x160>)
 80081c6:	fba2 2303 	umull	r2, r3, r2, r3
 80081ca:	0adb      	lsrs	r3, r3, #11
 80081cc:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	2b18      	cmp	r3, #24
 80081d2:	d93a      	bls.n	800824a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	4a23      	ldr	r2, [pc, #140]	@ (8008264 <HAL_RTC_SetDate+0x164>)
 80081d8:	fba2 2303 	umull	r2, r3, r2, r3
 80081dc:	091b      	lsrs	r3, r3, #4
 80081de:	4a22      	ldr	r2, [pc, #136]	@ (8008268 <HAL_RTC_SetDate+0x168>)
 80081e0:	fb02 f303 	mul.w	r3, r2, r3
 80081e4:	69fa      	ldr	r2, [r7, #28]
 80081e6:	1ad3      	subs	r3, r2, r3
 80081e8:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80081ea:	69f9      	ldr	r1, [r7, #28]
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f000 f8ee 	bl	80083ce <RTC_WriteTimeCounter>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d007      	beq.n	8008208 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2204      	movs	r2, #4
 80081fc:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	e027      	b.n	8008258 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	f000 f907 	bl	800841c <RTC_ReadAlarmCounter>
 800820e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008216:	d018      	beq.n	800824a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8008218:	69ba      	ldr	r2, [r7, #24]
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	429a      	cmp	r2, r3
 800821e:	d214      	bcs.n	800824a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8008226:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800822a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800822c:	69b9      	ldr	r1, [r7, #24]
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f000 f90d 	bl	800844e <RTC_WriteAlarmCounter>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d007      	beq.n	800824a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2204      	movs	r2, #4
 800823e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2200      	movs	r2, #0
 8008244:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e006      	b.n	8008258 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2201      	movs	r2, #1
 800824e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2200      	movs	r2, #0
 8008254:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3720      	adds	r7, #32
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}
 8008260:	91a2b3c5 	.word	0x91a2b3c5
 8008264:	aaaaaaab 	.word	0xaaaaaaab
 8008268:	00015180 	.word	0x00015180

0800826c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8008278:	f107 0314 	add.w	r3, r7, #20
 800827c:	2100      	movs	r1, #0
 800827e:	460a      	mov	r2, r1
 8008280:	801a      	strh	r2, [r3, #0]
 8008282:	460a      	mov	r2, r1
 8008284:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d002      	beq.n	8008292 <HAL_RTC_GetDate+0x26>
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d101      	bne.n	8008296 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e03a      	b.n	800830c <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8008296:	f107 0314 	add.w	r3, r7, #20
 800829a:	2200      	movs	r2, #0
 800829c:	4619      	mov	r1, r3
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f7ff fe56 	bl	8007f50 <HAL_RTC_GetTime>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e02e      	b.n	800830c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	7b1a      	ldrb	r2, [r3, #12]
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	7bda      	ldrb	r2, [r3, #15]
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	7b5a      	ldrb	r2, [r3, #13]
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	7b9a      	ldrb	r2, [r3, #14]
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d01a      	beq.n	800830a <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	78db      	ldrb	r3, [r3, #3]
 80082d8:	4618      	mov	r0, r3
 80082da:	f000 f92f 	bl	800853c <RTC_ByteToBcd2>
 80082de:	4603      	mov	r3, r0
 80082e0:	461a      	mov	r2, r3
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	785b      	ldrb	r3, [r3, #1]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 f926 	bl	800853c <RTC_ByteToBcd2>
 80082f0:	4603      	mov	r3, r0
 80082f2:	461a      	mov	r2, r3
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	789b      	ldrb	r3, [r3, #2]
 80082fc:	4618      	mov	r0, r3
 80082fe:	f000 f91d 	bl	800853c <RTC_ByteToBcd2>
 8008302:	4603      	mov	r3, r0
 8008304:	461a      	mov	r2, r3
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3718      	adds	r7, #24
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800831c:	2300      	movs	r3, #0
 800831e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d101      	bne.n	800832a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	e01d      	b.n	8008366 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	685a      	ldr	r2, [r3, #4]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f022 0208 	bic.w	r2, r2, #8
 8008338:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800833a:	f7fc f91f 	bl	800457c <HAL_GetTick>
 800833e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8008340:	e009      	b.n	8008356 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008342:	f7fc f91b 	bl	800457c <HAL_GetTick>
 8008346:	4602      	mov	r2, r0
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008350:	d901      	bls.n	8008356 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8008352:	2303      	movs	r3, #3
 8008354:	e007      	b.n	8008366 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	f003 0308 	and.w	r3, r3, #8
 8008360:	2b00      	cmp	r3, #0
 8008362:	d0ee      	beq.n	8008342 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800836e:	b480      	push	{r7}
 8008370:	b087      	sub	sp, #28
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8008376:	2300      	movs	r3, #0
 8008378:	827b      	strh	r3, [r7, #18]
 800837a:	2300      	movs	r3, #0
 800837c:	823b      	strh	r3, [r7, #16]
 800837e:	2300      	movs	r3, #0
 8008380:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8008382:	2300      	movs	r3, #0
 8008384:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	69db      	ldr	r3, [r3, #28]
 8008394:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	699b      	ldr	r3, [r3, #24]
 800839c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800839e:	8a7a      	ldrh	r2, [r7, #18]
 80083a0:	8a3b      	ldrh	r3, [r7, #16]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d008      	beq.n	80083b8 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80083a6:	8a3b      	ldrh	r3, [r7, #16]
 80083a8:	041a      	lsls	r2, r3, #16
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	69db      	ldr	r3, [r3, #28]
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	4313      	orrs	r3, r2
 80083b4:	617b      	str	r3, [r7, #20]
 80083b6:	e004      	b.n	80083c2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80083b8:	8a7b      	ldrh	r3, [r7, #18]
 80083ba:	041a      	lsls	r2, r3, #16
 80083bc:	89fb      	ldrh	r3, [r7, #14]
 80083be:	4313      	orrs	r3, r2
 80083c0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80083c2:	697b      	ldr	r3, [r7, #20]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	371c      	adds	r7, #28
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bc80      	pop	{r7}
 80083cc:	4770      	bx	lr

080083ce <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b084      	sub	sp, #16
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
 80083d6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083d8:	2300      	movs	r3, #0
 80083da:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f85d 	bl	800849c <RTC_EnterInitMode>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d002      	beq.n	80083ee <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	73fb      	strb	r3, [r7, #15]
 80083ec:	e011      	b.n	8008412 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	0c12      	lsrs	r2, r2, #16
 80083f6:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	683a      	ldr	r2, [r7, #0]
 80083fe:	b292      	uxth	r2, r2
 8008400:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f872 	bl	80084ec <RTC_ExitInitMode>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008412:	7bfb      	ldrb	r3, [r7, #15]
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8008424:	2300      	movs	r3, #0
 8008426:	81fb      	strh	r3, [r7, #14]
 8008428:	2300      	movs	r3, #0
 800842a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	6a1b      	ldr	r3, [r3, #32]
 8008432:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800843a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800843c:	89fb      	ldrh	r3, [r7, #14]
 800843e:	041a      	lsls	r2, r3, #16
 8008440:	89bb      	ldrh	r3, [r7, #12]
 8008442:	4313      	orrs	r3, r2
}
 8008444:	4618      	mov	r0, r3
 8008446:	3714      	adds	r7, #20
 8008448:	46bd      	mov	sp, r7
 800844a:	bc80      	pop	{r7}
 800844c:	4770      	bx	lr

0800844e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b084      	sub	sp, #16
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f81d 	bl	800849c <RTC_EnterInitMode>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d002      	beq.n	800846e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	73fb      	strb	r3, [r7, #15]
 800846c:	e011      	b.n	8008492 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	683a      	ldr	r2, [r7, #0]
 8008474:	0c12      	lsrs	r2, r2, #16
 8008476:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	683a      	ldr	r2, [r7, #0]
 800847e:	b292      	uxth	r2, r2
 8008480:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f832 	bl	80084ec <RTC_ExitInitMode>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d001      	beq.n	8008492 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008492:	7bfb      	ldrb	r3, [r7, #15]
}
 8008494:	4618      	mov	r0, r3
 8008496:	3710      	adds	r7, #16
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80084a4:	2300      	movs	r3, #0
 80084a6:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80084a8:	f7fc f868 	bl	800457c <HAL_GetTick>
 80084ac:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80084ae:	e009      	b.n	80084c4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80084b0:	f7fc f864 	bl	800457c <HAL_GetTick>
 80084b4:	4602      	mov	r2, r0
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80084be:	d901      	bls.n	80084c4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e00f      	b.n	80084e4 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	f003 0320 	and.w	r3, r3, #32
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d0ee      	beq.n	80084b0 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	685a      	ldr	r2, [r3, #4]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f042 0210 	orr.w	r2, r2, #16
 80084e0:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3710      	adds	r7, #16
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80084f4:	2300      	movs	r3, #0
 80084f6:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	685a      	ldr	r2, [r3, #4]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f022 0210 	bic.w	r2, r2, #16
 8008506:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8008508:	f7fc f838 	bl	800457c <HAL_GetTick>
 800850c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800850e:	e009      	b.n	8008524 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008510:	f7fc f834 	bl	800457c <HAL_GetTick>
 8008514:	4602      	mov	r2, r0
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800851e:	d901      	bls.n	8008524 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8008520:	2303      	movs	r3, #3
 8008522:	e007      	b.n	8008534 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	f003 0320 	and.w	r3, r3, #32
 800852e:	2b00      	cmp	r3, #0
 8008530:	d0ee      	beq.n	8008510 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	4603      	mov	r3, r0
 8008544:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008546:	2300      	movs	r3, #0
 8008548:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800854a:	e005      	b.n	8008558 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	3301      	adds	r3, #1
 8008550:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8008552:	79fb      	ldrb	r3, [r7, #7]
 8008554:	3b0a      	subs	r3, #10
 8008556:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8008558:	79fb      	ldrb	r3, [r7, #7]
 800855a:	2b09      	cmp	r3, #9
 800855c:	d8f6      	bhi.n	800854c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	b2db      	uxtb	r3, r3
 8008562:	011b      	lsls	r3, r3, #4
 8008564:	b2da      	uxtb	r2, r3
 8008566:	79fb      	ldrb	r3, [r7, #7]
 8008568:	4313      	orrs	r3, r2
 800856a:	b2db      	uxtb	r3, r3
}
 800856c:	4618      	mov	r0, r3
 800856e:	3714      	adds	r7, #20
 8008570:	46bd      	mov	sp, r7
 8008572:	bc80      	pop	{r7}
 8008574:	4770      	bx	lr

08008576 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008576:	b480      	push	{r7}
 8008578:	b085      	sub	sp, #20
 800857a:	af00      	add	r7, sp, #0
 800857c:	4603      	mov	r3, r0
 800857e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8008580:	2300      	movs	r3, #0
 8008582:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8008584:	79fb      	ldrb	r3, [r7, #7]
 8008586:	091b      	lsrs	r3, r3, #4
 8008588:	b2db      	uxtb	r3, r3
 800858a:	461a      	mov	r2, r3
 800858c:	4613      	mov	r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	4413      	add	r3, r2
 8008592:	005b      	lsls	r3, r3, #1
 8008594:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8008596:	79fb      	ldrb	r3, [r7, #7]
 8008598:	f003 030f 	and.w	r3, r3, #15
 800859c:	b2da      	uxtb	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	4413      	add	r3, r2
 80085a4:	b2db      	uxtb	r3, r3
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3714      	adds	r7, #20
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bc80      	pop	{r7}
 80085ae:	4770      	bx	lr

080085b0 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80085ba:	2300      	movs	r3, #0
 80085bc:	617b      	str	r3, [r7, #20]
 80085be:	2300      	movs	r3, #0
 80085c0:	613b      	str	r3, [r7, #16]
 80085c2:	2300      	movs	r3, #0
 80085c4:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80085c6:	2300      	movs	r3, #0
 80085c8:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	7bdb      	ldrb	r3, [r3, #15]
 80085ce:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	7b5b      	ldrb	r3, [r3, #13]
 80085d4:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	7b9b      	ldrb	r3, [r3, #14]
 80085da:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80085dc:	2300      	movs	r3, #0
 80085de:	60bb      	str	r3, [r7, #8]
 80085e0:	e06f      	b.n	80086c2 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d011      	beq.n	800860c <RTC_DateUpdate+0x5c>
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	2b03      	cmp	r3, #3
 80085ec:	d00e      	beq.n	800860c <RTC_DateUpdate+0x5c>
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	2b05      	cmp	r3, #5
 80085f2:	d00b      	beq.n	800860c <RTC_DateUpdate+0x5c>
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	2b07      	cmp	r3, #7
 80085f8:	d008      	beq.n	800860c <RTC_DateUpdate+0x5c>
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	2b08      	cmp	r3, #8
 80085fe:	d005      	beq.n	800860c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	2b0a      	cmp	r3, #10
 8008604:	d002      	beq.n	800860c <RTC_DateUpdate+0x5c>
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	2b0c      	cmp	r3, #12
 800860a:	d117      	bne.n	800863c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2b1e      	cmp	r3, #30
 8008610:	d803      	bhi.n	800861a <RTC_DateUpdate+0x6a>
      {
        day++;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	3301      	adds	r3, #1
 8008616:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8008618:	e050      	b.n	80086bc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	2b0c      	cmp	r3, #12
 800861e:	d005      	beq.n	800862c <RTC_DateUpdate+0x7c>
        {
          month++;
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	3301      	adds	r3, #1
 8008624:	613b      	str	r3, [r7, #16]
          day = 1U;
 8008626:	2301      	movs	r3, #1
 8008628:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800862a:	e047      	b.n	80086bc <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800862c:	2301      	movs	r3, #1
 800862e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8008630:	2301      	movs	r3, #1
 8008632:	60fb      	str	r3, [r7, #12]
          year++;
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	3301      	adds	r3, #1
 8008638:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800863a:	e03f      	b.n	80086bc <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	2b04      	cmp	r3, #4
 8008640:	d008      	beq.n	8008654 <RTC_DateUpdate+0xa4>
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	2b06      	cmp	r3, #6
 8008646:	d005      	beq.n	8008654 <RTC_DateUpdate+0xa4>
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	2b09      	cmp	r3, #9
 800864c:	d002      	beq.n	8008654 <RTC_DateUpdate+0xa4>
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	2b0b      	cmp	r3, #11
 8008652:	d10c      	bne.n	800866e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2b1d      	cmp	r3, #29
 8008658:	d803      	bhi.n	8008662 <RTC_DateUpdate+0xb2>
      {
        day++;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	3301      	adds	r3, #1
 800865e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8008660:	e02c      	b.n	80086bc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	3301      	adds	r3, #1
 8008666:	613b      	str	r3, [r7, #16]
        day = 1U;
 8008668:	2301      	movs	r3, #1
 800866a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800866c:	e026      	b.n	80086bc <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	2b02      	cmp	r3, #2
 8008672:	d123      	bne.n	80086bc <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2b1b      	cmp	r3, #27
 8008678:	d803      	bhi.n	8008682 <RTC_DateUpdate+0xd2>
      {
        day++;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	3301      	adds	r3, #1
 800867e:	60fb      	str	r3, [r7, #12]
 8008680:	e01c      	b.n	80086bc <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2b1c      	cmp	r3, #28
 8008686:	d111      	bne.n	80086ac <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	b29b      	uxth	r3, r3
 800868c:	4618      	mov	r0, r3
 800868e:	f000 f839 	bl	8008704 <RTC_IsLeapYear>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d003      	beq.n	80086a0 <RTC_DateUpdate+0xf0>
        {
          day++;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	3301      	adds	r3, #1
 800869c:	60fb      	str	r3, [r7, #12]
 800869e:	e00d      	b.n	80086bc <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	3301      	adds	r3, #1
 80086a4:	613b      	str	r3, [r7, #16]
          day = 1U;
 80086a6:	2301      	movs	r3, #1
 80086a8:	60fb      	str	r3, [r7, #12]
 80086aa:	e007      	b.n	80086bc <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2b1d      	cmp	r3, #29
 80086b0:	d104      	bne.n	80086bc <RTC_DateUpdate+0x10c>
      {
        month++;
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	3301      	adds	r3, #1
 80086b6:	613b      	str	r3, [r7, #16]
        day = 1U;
 80086b8:	2301      	movs	r3, #1
 80086ba:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	3301      	adds	r3, #1
 80086c0:	60bb      	str	r3, [r7, #8]
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d38b      	bcc.n	80085e2 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	b2da      	uxtb	r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	b2da      	uxtb	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	b2da      	uxtb	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	b2d2      	uxtb	r2, r2
 80086ea:	4619      	mov	r1, r3
 80086ec:	6978      	ldr	r0, [r7, #20]
 80086ee:	f000 f83b 	bl	8008768 <RTC_WeekDayNum>
 80086f2:	4603      	mov	r3, r0
 80086f4:	461a      	mov	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	731a      	strb	r2, [r3, #12]
}
 80086fa:	bf00      	nop
 80086fc:	3718      	adds	r7, #24
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
	...

08008704 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	4603      	mov	r3, r0
 800870c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800870e:	88fb      	ldrh	r3, [r7, #6]
 8008710:	f003 0303 	and.w	r3, r3, #3
 8008714:	b29b      	uxth	r3, r3
 8008716:	2b00      	cmp	r3, #0
 8008718:	d001      	beq.n	800871e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800871a:	2300      	movs	r3, #0
 800871c:	e01d      	b.n	800875a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800871e:	88fb      	ldrh	r3, [r7, #6]
 8008720:	4a10      	ldr	r2, [pc, #64]	@ (8008764 <RTC_IsLeapYear+0x60>)
 8008722:	fba2 1203 	umull	r1, r2, r2, r3
 8008726:	0952      	lsrs	r2, r2, #5
 8008728:	2164      	movs	r1, #100	@ 0x64
 800872a:	fb01 f202 	mul.w	r2, r1, r2
 800872e:	1a9b      	subs	r3, r3, r2
 8008730:	b29b      	uxth	r3, r3
 8008732:	2b00      	cmp	r3, #0
 8008734:	d001      	beq.n	800873a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8008736:	2301      	movs	r3, #1
 8008738:	e00f      	b.n	800875a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800873a:	88fb      	ldrh	r3, [r7, #6]
 800873c:	4a09      	ldr	r2, [pc, #36]	@ (8008764 <RTC_IsLeapYear+0x60>)
 800873e:	fba2 1203 	umull	r1, r2, r2, r3
 8008742:	09d2      	lsrs	r2, r2, #7
 8008744:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8008748:	fb01 f202 	mul.w	r2, r1, r2
 800874c:	1a9b      	subs	r3, r3, r2
 800874e:	b29b      	uxth	r3, r3
 8008750:	2b00      	cmp	r3, #0
 8008752:	d101      	bne.n	8008758 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8008754:	2301      	movs	r3, #1
 8008756:	e000      	b.n	800875a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8008758:	2300      	movs	r3, #0
  }
}
 800875a:	4618      	mov	r0, r3
 800875c:	370c      	adds	r7, #12
 800875e:	46bd      	mov	sp, r7
 8008760:	bc80      	pop	{r7}
 8008762:	4770      	bx	lr
 8008764:	51eb851f 	.word	0x51eb851f

08008768 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	460b      	mov	r3, r1
 8008772:	70fb      	strb	r3, [r7, #3]
 8008774:	4613      	mov	r3, r2
 8008776:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8008778:	2300      	movs	r3, #0
 800877a:	60bb      	str	r3, [r7, #8]
 800877c:	2300      	movs	r3, #0
 800877e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8008786:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8008788:	78fb      	ldrb	r3, [r7, #3]
 800878a:	2b02      	cmp	r3, #2
 800878c:	d82d      	bhi.n	80087ea <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800878e:	78fa      	ldrb	r2, [r7, #3]
 8008790:	4613      	mov	r3, r2
 8008792:	005b      	lsls	r3, r3, #1
 8008794:	4413      	add	r3, r2
 8008796:	00db      	lsls	r3, r3, #3
 8008798:	1a9b      	subs	r3, r3, r2
 800879a:	4a2c      	ldr	r2, [pc, #176]	@ (800884c <RTC_WeekDayNum+0xe4>)
 800879c:	fba2 2303 	umull	r2, r3, r2, r3
 80087a0:	085a      	lsrs	r2, r3, #1
 80087a2:	78bb      	ldrb	r3, [r7, #2]
 80087a4:	441a      	add	r2, r3
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	441a      	add	r2, r3
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	3b01      	subs	r3, #1
 80087ae:	089b      	lsrs	r3, r3, #2
 80087b0:	441a      	add	r2, r3
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	3b01      	subs	r3, #1
 80087b6:	4926      	ldr	r1, [pc, #152]	@ (8008850 <RTC_WeekDayNum+0xe8>)
 80087b8:	fba1 1303 	umull	r1, r3, r1, r3
 80087bc:	095b      	lsrs	r3, r3, #5
 80087be:	1ad2      	subs	r2, r2, r3
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	3b01      	subs	r3, #1
 80087c4:	4922      	ldr	r1, [pc, #136]	@ (8008850 <RTC_WeekDayNum+0xe8>)
 80087c6:	fba1 1303 	umull	r1, r3, r1, r3
 80087ca:	09db      	lsrs	r3, r3, #7
 80087cc:	4413      	add	r3, r2
 80087ce:	1d1a      	adds	r2, r3, #4
 80087d0:	4b20      	ldr	r3, [pc, #128]	@ (8008854 <RTC_WeekDayNum+0xec>)
 80087d2:	fba3 1302 	umull	r1, r3, r3, r2
 80087d6:	1ad1      	subs	r1, r2, r3
 80087d8:	0849      	lsrs	r1, r1, #1
 80087da:	440b      	add	r3, r1
 80087dc:	0899      	lsrs	r1, r3, #2
 80087de:	460b      	mov	r3, r1
 80087e0:	00db      	lsls	r3, r3, #3
 80087e2:	1a5b      	subs	r3, r3, r1
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	60fb      	str	r3, [r7, #12]
 80087e8:	e029      	b.n	800883e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80087ea:	78fa      	ldrb	r2, [r7, #3]
 80087ec:	4613      	mov	r3, r2
 80087ee:	005b      	lsls	r3, r3, #1
 80087f0:	4413      	add	r3, r2
 80087f2:	00db      	lsls	r3, r3, #3
 80087f4:	1a9b      	subs	r3, r3, r2
 80087f6:	4a15      	ldr	r2, [pc, #84]	@ (800884c <RTC_WeekDayNum+0xe4>)
 80087f8:	fba2 2303 	umull	r2, r3, r2, r3
 80087fc:	085a      	lsrs	r2, r3, #1
 80087fe:	78bb      	ldrb	r3, [r7, #2]
 8008800:	441a      	add	r2, r3
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	441a      	add	r2, r3
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	089b      	lsrs	r3, r3, #2
 800880a:	441a      	add	r2, r3
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	4910      	ldr	r1, [pc, #64]	@ (8008850 <RTC_WeekDayNum+0xe8>)
 8008810:	fba1 1303 	umull	r1, r3, r1, r3
 8008814:	095b      	lsrs	r3, r3, #5
 8008816:	1ad2      	subs	r2, r2, r3
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	490d      	ldr	r1, [pc, #52]	@ (8008850 <RTC_WeekDayNum+0xe8>)
 800881c:	fba1 1303 	umull	r1, r3, r1, r3
 8008820:	09db      	lsrs	r3, r3, #7
 8008822:	4413      	add	r3, r2
 8008824:	1c9a      	adds	r2, r3, #2
 8008826:	4b0b      	ldr	r3, [pc, #44]	@ (8008854 <RTC_WeekDayNum+0xec>)
 8008828:	fba3 1302 	umull	r1, r3, r3, r2
 800882c:	1ad1      	subs	r1, r2, r3
 800882e:	0849      	lsrs	r1, r1, #1
 8008830:	440b      	add	r3, r1
 8008832:	0899      	lsrs	r1, r3, #2
 8008834:	460b      	mov	r3, r1
 8008836:	00db      	lsls	r3, r3, #3
 8008838:	1a5b      	subs	r3, r3, r1
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	b2db      	uxtb	r3, r3
}
 8008842:	4618      	mov	r0, r3
 8008844:	3714      	adds	r7, #20
 8008846:	46bd      	mov	sp, r7
 8008848:	bc80      	pop	{r7}
 800884a:	4770      	bx	lr
 800884c:	38e38e39 	.word	0x38e38e39
 8008850:	51eb851f 	.word	0x51eb851f
 8008854:	24924925 	.word	0x24924925

08008858 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d101      	bne.n	800886a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e076      	b.n	8008958 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800886e:	2b00      	cmp	r3, #0
 8008870:	d108      	bne.n	8008884 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800887a:	d009      	beq.n	8008890 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	61da      	str	r2, [r3, #28]
 8008882:	e005      	b.n	8008890 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d106      	bne.n	80088b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7fb fb7e 	bl	8003fac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2202      	movs	r2, #2
 80088b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80088c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80088d8:	431a      	orrs	r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088e2:	431a      	orrs	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	f003 0302 	and.w	r3, r3, #2
 80088ec:	431a      	orrs	r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	695b      	ldr	r3, [r3, #20]
 80088f2:	f003 0301 	and.w	r3, r3, #1
 80088f6:	431a      	orrs	r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008900:	431a      	orrs	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	69db      	ldr	r3, [r3, #28]
 8008906:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800890a:	431a      	orrs	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a1b      	ldr	r3, [r3, #32]
 8008910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008914:	ea42 0103 	orr.w	r1, r2, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800891c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	430a      	orrs	r2, r1
 8008926:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	699b      	ldr	r3, [r3, #24]
 800892c:	0c1a      	lsrs	r2, r3, #16
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f002 0204 	and.w	r2, r2, #4
 8008936:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	69da      	ldr	r2, [r3, #28]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008946:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	3708      	adds	r7, #8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b088      	sub	sp, #32
 8008964:	af00      	add	r7, sp, #0
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	603b      	str	r3, [r7, #0]
 800896c:	4613      	mov	r3, r2
 800896e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008970:	2300      	movs	r3, #0
 8008972:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800897a:	2b01      	cmp	r3, #1
 800897c:	d101      	bne.n	8008982 <HAL_SPI_Transmit+0x22>
 800897e:	2302      	movs	r3, #2
 8008980:	e12d      	b.n	8008bde <HAL_SPI_Transmit+0x27e>
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2201      	movs	r2, #1
 8008986:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800898a:	f7fb fdf7 	bl	800457c <HAL_GetTick>
 800898e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008990:	88fb      	ldrh	r3, [r7, #6]
 8008992:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800899a:	b2db      	uxtb	r3, r3
 800899c:	2b01      	cmp	r3, #1
 800899e:	d002      	beq.n	80089a6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80089a0:	2302      	movs	r3, #2
 80089a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80089a4:	e116      	b.n	8008bd4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d002      	beq.n	80089b2 <HAL_SPI_Transmit+0x52>
 80089ac:	88fb      	ldrh	r3, [r7, #6]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d102      	bne.n	80089b8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80089b6:	e10d      	b.n	8008bd4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2203      	movs	r2, #3
 80089bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2200      	movs	r2, #0
 80089c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	68ba      	ldr	r2, [r7, #8]
 80089ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	88fa      	ldrh	r2, [r7, #6]
 80089d0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	88fa      	ldrh	r2, [r7, #6]
 80089d6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2200      	movs	r2, #0
 80089e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2200      	movs	r2, #0
 80089f4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089fe:	d10f      	bne.n	8008a20 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a0e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a1e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a2a:	2b40      	cmp	r3, #64	@ 0x40
 8008a2c:	d007      	beq.n	8008a3e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a46:	d14f      	bne.n	8008ae8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d002      	beq.n	8008a56 <HAL_SPI_Transmit+0xf6>
 8008a50:	8afb      	ldrh	r3, [r7, #22]
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d142      	bne.n	8008adc <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a5a:	881a      	ldrh	r2, [r3, #0]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a66:	1c9a      	adds	r2, r3, #2
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	3b01      	subs	r3, #1
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008a7a:	e02f      	b.n	8008adc <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	f003 0302 	and.w	r3, r3, #2
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d112      	bne.n	8008ab0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a8e:	881a      	ldrh	r2, [r3, #0]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a9a:	1c9a      	adds	r2, r3, #2
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	b29a      	uxth	r2, r3
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008aae:	e015      	b.n	8008adc <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ab0:	f7fb fd64 	bl	800457c <HAL_GetTick>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	683a      	ldr	r2, [r7, #0]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d803      	bhi.n	8008ac8 <HAL_SPI_Transmit+0x168>
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac6:	d102      	bne.n	8008ace <HAL_SPI_Transmit+0x16e>
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d106      	bne.n	8008adc <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8008ada:	e07b      	b.n	8008bd4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1ca      	bne.n	8008a7c <HAL_SPI_Transmit+0x11c>
 8008ae6:	e050      	b.n	8008b8a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d002      	beq.n	8008af6 <HAL_SPI_Transmit+0x196>
 8008af0:	8afb      	ldrh	r3, [r7, #22]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d144      	bne.n	8008b80 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	330c      	adds	r3, #12
 8008b00:	7812      	ldrb	r2, [r2, #0]
 8008b02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b08:	1c5a      	adds	r2, r3, #1
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	3b01      	subs	r3, #1
 8008b16:	b29a      	uxth	r2, r3
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008b1c:	e030      	b.n	8008b80 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	f003 0302 	and.w	r3, r3, #2
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	d113      	bne.n	8008b54 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	330c      	adds	r3, #12
 8008b36:	7812      	ldrb	r2, [r2, #0]
 8008b38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b3e:	1c5a      	adds	r2, r3, #1
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008b52:	e015      	b.n	8008b80 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b54:	f7fb fd12 	bl	800457c <HAL_GetTick>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	683a      	ldr	r2, [r7, #0]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d803      	bhi.n	8008b6c <HAL_SPI_Transmit+0x20c>
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6a:	d102      	bne.n	8008b72 <HAL_SPI_Transmit+0x212>
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d106      	bne.n	8008b80 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8008b72:	2303      	movs	r3, #3
 8008b74:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8008b7e:	e029      	b.n	8008bd4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1c9      	bne.n	8008b1e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b8a:	69ba      	ldr	r2, [r7, #24]
 8008b8c:	6839      	ldr	r1, [r7, #0]
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f000 fa62 	bl	8009058 <SPI_EndRxTxTransaction>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d002      	beq.n	8008ba0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2220      	movs	r2, #32
 8008b9e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10a      	bne.n	8008bbe <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ba8:	2300      	movs	r3, #0
 8008baa:	613b      	str	r3, [r7, #16]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	613b      	str	r3, [r7, #16]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	613b      	str	r3, [r7, #16]
 8008bbc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d002      	beq.n	8008bcc <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	77fb      	strb	r3, [r7, #31]
 8008bca:	e003      	b.n	8008bd4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008bdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3720      	adds	r7, #32
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b08c      	sub	sp, #48	@ 0x30
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	60f8      	str	r0, [r7, #12]
 8008bee:	60b9      	str	r1, [r7, #8]
 8008bf0:	607a      	str	r2, [r7, #4]
 8008bf2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d101      	bne.n	8008c0c <HAL_SPI_TransmitReceive+0x26>
 8008c08:	2302      	movs	r3, #2
 8008c0a:	e198      	b.n	8008f3e <HAL_SPI_TransmitReceive+0x358>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c14:	f7fb fcb2 	bl	800457c <HAL_GetTick>
 8008c18:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008c20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008c2a:	887b      	ldrh	r3, [r7, #2]
 8008c2c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c2e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d00f      	beq.n	8008c56 <HAL_SPI_TransmitReceive+0x70>
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c3c:	d107      	bne.n	8008c4e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d103      	bne.n	8008c4e <HAL_SPI_TransmitReceive+0x68>
 8008c46:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008c4a:	2b04      	cmp	r3, #4
 8008c4c:	d003      	beq.n	8008c56 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008c4e:	2302      	movs	r3, #2
 8008c50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008c54:	e16d      	b.n	8008f32 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d005      	beq.n	8008c68 <HAL_SPI_TransmitReceive+0x82>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d002      	beq.n	8008c68 <HAL_SPI_TransmitReceive+0x82>
 8008c62:	887b      	ldrh	r3, [r7, #2]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d103      	bne.n	8008c70 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008c6e:	e160      	b.n	8008f32 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	2b04      	cmp	r3, #4
 8008c7a:	d003      	beq.n	8008c84 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2205      	movs	r2, #5
 8008c80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	887a      	ldrh	r2, [r7, #2]
 8008c94:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	887a      	ldrh	r2, [r7, #2]
 8008c9a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	68ba      	ldr	r2, [r7, #8]
 8008ca0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	887a      	ldrh	r2, [r7, #2]
 8008ca6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	887a      	ldrh	r2, [r7, #2]
 8008cac:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cc4:	2b40      	cmp	r3, #64	@ 0x40
 8008cc6:	d007      	beq.n	8008cd8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008cd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ce0:	d17c      	bne.n	8008ddc <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d002      	beq.n	8008cf0 <HAL_SPI_TransmitReceive+0x10a>
 8008cea:	8b7b      	ldrh	r3, [r7, #26]
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d16a      	bne.n	8008dc6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cf4:	881a      	ldrh	r2, [r3, #0]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d00:	1c9a      	adds	r2, r3, #2
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	b29a      	uxth	r2, r3
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d14:	e057      	b.n	8008dc6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	f003 0302 	and.w	r3, r3, #2
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d11b      	bne.n	8008d5c <HAL_SPI_TransmitReceive+0x176>
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d016      	beq.n	8008d5c <HAL_SPI_TransmitReceive+0x176>
 8008d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d113      	bne.n	8008d5c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d38:	881a      	ldrh	r2, [r3, #0]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d44:	1c9a      	adds	r2, r3, #2
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	3b01      	subs	r3, #1
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	f003 0301 	and.w	r3, r3, #1
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d119      	bne.n	8008d9e <HAL_SPI_TransmitReceive+0x1b8>
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d014      	beq.n	8008d9e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68da      	ldr	r2, [r3, #12]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d7e:	b292      	uxth	r2, r2
 8008d80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d86:	1c9a      	adds	r2, r3, #2
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	3b01      	subs	r3, #1
 8008d94:	b29a      	uxth	r2, r3
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008d9e:	f7fb fbed 	bl	800457c <HAL_GetTick>
 8008da2:	4602      	mov	r2, r0
 8008da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da6:	1ad3      	subs	r3, r2, r3
 8008da8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d80b      	bhi.n	8008dc6 <HAL_SPI_TransmitReceive+0x1e0>
 8008dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db4:	d007      	beq.n	8008dc6 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8008db6:	2303      	movs	r3, #3
 8008db8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8008dc4:	e0b5      	b.n	8008f32 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1a2      	bne.n	8008d16 <HAL_SPI_TransmitReceive+0x130>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d19d      	bne.n	8008d16 <HAL_SPI_TransmitReceive+0x130>
 8008dda:	e080      	b.n	8008ede <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d002      	beq.n	8008dea <HAL_SPI_TransmitReceive+0x204>
 8008de4:	8b7b      	ldrh	r3, [r7, #26]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d16f      	bne.n	8008eca <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	330c      	adds	r3, #12
 8008df4:	7812      	ldrb	r2, [r2, #0]
 8008df6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dfc:	1c5a      	adds	r2, r3, #1
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e10:	e05b      	b.n	8008eca <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	f003 0302 	and.w	r3, r3, #2
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d11c      	bne.n	8008e5a <HAL_SPI_TransmitReceive+0x274>
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d017      	beq.n	8008e5a <HAL_SPI_TransmitReceive+0x274>
 8008e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d114      	bne.n	8008e5a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	330c      	adds	r3, #12
 8008e3a:	7812      	ldrb	r2, [r2, #0]
 8008e3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e42:	1c5a      	adds	r2, r3, #1
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e56:	2300      	movs	r3, #0
 8008e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	f003 0301 	and.w	r3, r3, #1
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d119      	bne.n	8008e9c <HAL_SPI_TransmitReceive+0x2b6>
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d014      	beq.n	8008e9c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	68da      	ldr	r2, [r3, #12]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e7c:	b2d2      	uxtb	r2, r2
 8008e7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e84:	1c5a      	adds	r2, r3, #1
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	3b01      	subs	r3, #1
 8008e92:	b29a      	uxth	r2, r3
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008e9c:	f7fb fb6e 	bl	800457c <HAL_GetTick>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d803      	bhi.n	8008eb4 <HAL_SPI_TransmitReceive+0x2ce>
 8008eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb2:	d102      	bne.n	8008eba <HAL_SPI_TransmitReceive+0x2d4>
 8008eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d107      	bne.n	8008eca <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8008ec8:	e033      	b.n	8008f32 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d19e      	bne.n	8008e12 <HAL_SPI_TransmitReceive+0x22c>
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d199      	bne.n	8008e12 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ee0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f000 f8b8 	bl	8009058 <SPI_EndRxTxTransaction>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d006      	beq.n	8008efc <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2220      	movs	r2, #32
 8008ef8:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8008efa:	e01a      	b.n	8008f32 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10a      	bne.n	8008f1a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f04:	2300      	movs	r3, #0
 8008f06:	617b      	str	r3, [r7, #20]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	617b      	str	r3, [r7, #20]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	617b      	str	r3, [r7, #20]
 8008f18:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d003      	beq.n	8008f2a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f28:	e003      	b.n	8008f32 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008f3a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3730      	adds	r7, #48	@ 0x30
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
	...

08008f48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b088      	sub	sp, #32
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	603b      	str	r3, [r7, #0]
 8008f54:	4613      	mov	r3, r2
 8008f56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008f58:	f7fb fb10 	bl	800457c <HAL_GetTick>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f60:	1a9b      	subs	r3, r3, r2
 8008f62:	683a      	ldr	r2, [r7, #0]
 8008f64:	4413      	add	r3, r2
 8008f66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008f68:	f7fb fb08 	bl	800457c <HAL_GetTick>
 8008f6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008f6e:	4b39      	ldr	r3, [pc, #228]	@ (8009054 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	015b      	lsls	r3, r3, #5
 8008f74:	0d1b      	lsrs	r3, r3, #20
 8008f76:	69fa      	ldr	r2, [r7, #28]
 8008f78:	fb02 f303 	mul.w	r3, r2, r3
 8008f7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f7e:	e054      	b.n	800902a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f86:	d050      	beq.n	800902a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008f88:	f7fb faf8 	bl	800457c <HAL_GetTick>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	69fa      	ldr	r2, [r7, #28]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d902      	bls.n	8008f9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d13d      	bne.n	800901a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	685a      	ldr	r2, [r3, #4]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008fac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008fb6:	d111      	bne.n	8008fdc <SPI_WaitFlagStateUntilTimeout+0x94>
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008fc0:	d004      	beq.n	8008fcc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fca:	d107      	bne.n	8008fdc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008fda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fe4:	d10f      	bne.n	8009006 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008ff4:	601a      	str	r2, [r3, #0]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009004:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2201      	movs	r2, #1
 800900a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2200      	movs	r2, #0
 8009012:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8009016:	2303      	movs	r3, #3
 8009018:	e017      	b.n	800904a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d101      	bne.n	8009024 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009020:	2300      	movs	r3, #0
 8009022:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	3b01      	subs	r3, #1
 8009028:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	689a      	ldr	r2, [r3, #8]
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	4013      	ands	r3, r2
 8009034:	68ba      	ldr	r2, [r7, #8]
 8009036:	429a      	cmp	r2, r3
 8009038:	bf0c      	ite	eq
 800903a:	2301      	moveq	r3, #1
 800903c:	2300      	movne	r3, #0
 800903e:	b2db      	uxtb	r3, r3
 8009040:	461a      	mov	r2, r3
 8009042:	79fb      	ldrb	r3, [r7, #7]
 8009044:	429a      	cmp	r2, r3
 8009046:	d19b      	bne.n	8008f80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3720      	adds	r7, #32
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	200000c8 	.word	0x200000c8

08009058 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b086      	sub	sp, #24
 800905c:	af02      	add	r7, sp, #8
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	2200      	movs	r2, #0
 800906c:	2180      	movs	r1, #128	@ 0x80
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f7ff ff6a 	bl	8008f48 <SPI_WaitFlagStateUntilTimeout>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d007      	beq.n	800908a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800907e:	f043 0220 	orr.w	r2, r3, #32
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009086:	2303      	movs	r3, #3
 8009088:	e000      	b.n	800908c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3710      	adds	r7, #16
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d101      	bne.n	80090a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	e041      	b.n	800912a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d106      	bne.n	80090c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f839 	bl	8009132 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2202      	movs	r2, #2
 80090c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	3304      	adds	r3, #4
 80090d0:	4619      	mov	r1, r3
 80090d2:	4610      	mov	r0, r2
 80090d4:	f000 f9c2 	bl	800945c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2201      	movs	r2, #1
 8009114:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009132:	b480      	push	{r7}
 8009134:	b083      	sub	sp, #12
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800913a:	bf00      	nop
 800913c:	370c      	adds	r7, #12
 800913e:	46bd      	mov	sp, r7
 8009140:	bc80      	pop	{r7}
 8009142:	4770      	bx	lr

08009144 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009152:	b2db      	uxtb	r3, r3
 8009154:	2b01      	cmp	r3, #1
 8009156:	d001      	beq.n	800915c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	e044      	b.n	80091e6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2202      	movs	r2, #2
 8009160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68da      	ldr	r2, [r3, #12]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f042 0201 	orr.w	r2, r2, #1
 8009172:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a1d      	ldr	r2, [pc, #116]	@ (80091f0 <HAL_TIM_Base_Start_IT+0xac>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d018      	beq.n	80091b0 <HAL_TIM_Base_Start_IT+0x6c>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a1c      	ldr	r2, [pc, #112]	@ (80091f4 <HAL_TIM_Base_Start_IT+0xb0>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d013      	beq.n	80091b0 <HAL_TIM_Base_Start_IT+0x6c>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009190:	d00e      	beq.n	80091b0 <HAL_TIM_Base_Start_IT+0x6c>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a18      	ldr	r2, [pc, #96]	@ (80091f8 <HAL_TIM_Base_Start_IT+0xb4>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d009      	beq.n	80091b0 <HAL_TIM_Base_Start_IT+0x6c>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a16      	ldr	r2, [pc, #88]	@ (80091fc <HAL_TIM_Base_Start_IT+0xb8>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d004      	beq.n	80091b0 <HAL_TIM_Base_Start_IT+0x6c>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a15      	ldr	r2, [pc, #84]	@ (8009200 <HAL_TIM_Base_Start_IT+0xbc>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d111      	bne.n	80091d4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	f003 0307 	and.w	r3, r3, #7
 80091ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2b06      	cmp	r3, #6
 80091c0:	d010      	beq.n	80091e4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f042 0201 	orr.w	r2, r2, #1
 80091d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091d2:	e007      	b.n	80091e4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f042 0201 	orr.w	r2, r2, #1
 80091e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3714      	adds	r7, #20
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bc80      	pop	{r7}
 80091ee:	4770      	bx	lr
 80091f0:	40012c00 	.word	0x40012c00
 80091f4:	40013400 	.word	0x40013400
 80091f8:	40000400 	.word	0x40000400
 80091fc:	40000800 	.word	0x40000800
 8009200:	40000c00 	.word	0x40000c00

08009204 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	691b      	ldr	r3, [r3, #16]
 8009212:	f003 0302 	and.w	r3, r3, #2
 8009216:	2b02      	cmp	r3, #2
 8009218:	d122      	bne.n	8009260 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	f003 0302 	and.w	r3, r3, #2
 8009224:	2b02      	cmp	r3, #2
 8009226:	d11b      	bne.n	8009260 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f06f 0202 	mvn.w	r2, #2
 8009230:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2201      	movs	r2, #1
 8009236:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	f003 0303 	and.w	r3, r3, #3
 8009242:	2b00      	cmp	r3, #0
 8009244:	d003      	beq.n	800924e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 f8ed 	bl	8009426 <HAL_TIM_IC_CaptureCallback>
 800924c:	e005      	b.n	800925a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 f8e0 	bl	8009414 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 f8ef 	bl	8009438 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	f003 0304 	and.w	r3, r3, #4
 800926a:	2b04      	cmp	r3, #4
 800926c:	d122      	bne.n	80092b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	f003 0304 	and.w	r3, r3, #4
 8009278:	2b04      	cmp	r3, #4
 800927a:	d11b      	bne.n	80092b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f06f 0204 	mvn.w	r2, #4
 8009284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2202      	movs	r2, #2
 800928a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	699b      	ldr	r3, [r3, #24]
 8009292:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009296:	2b00      	cmp	r3, #0
 8009298:	d003      	beq.n	80092a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 f8c3 	bl	8009426 <HAL_TIM_IC_CaptureCallback>
 80092a0:	e005      	b.n	80092ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 f8b6 	bl	8009414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 f8c5 	bl	8009438 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	691b      	ldr	r3, [r3, #16]
 80092ba:	f003 0308 	and.w	r3, r3, #8
 80092be:	2b08      	cmp	r3, #8
 80092c0:	d122      	bne.n	8009308 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	f003 0308 	and.w	r3, r3, #8
 80092cc:	2b08      	cmp	r3, #8
 80092ce:	d11b      	bne.n	8009308 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f06f 0208 	mvn.w	r2, #8
 80092d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2204      	movs	r2, #4
 80092de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	69db      	ldr	r3, [r3, #28]
 80092e6:	f003 0303 	and.w	r3, r3, #3
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d003      	beq.n	80092f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 f899 	bl	8009426 <HAL_TIM_IC_CaptureCallback>
 80092f4:	e005      	b.n	8009302 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 f88c 	bl	8009414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 f89b 	bl	8009438 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	f003 0310 	and.w	r3, r3, #16
 8009312:	2b10      	cmp	r3, #16
 8009314:	d122      	bne.n	800935c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	f003 0310 	and.w	r3, r3, #16
 8009320:	2b10      	cmp	r3, #16
 8009322:	d11b      	bne.n	800935c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f06f 0210 	mvn.w	r2, #16
 800932c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2208      	movs	r2, #8
 8009332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	69db      	ldr	r3, [r3, #28]
 800933a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800933e:	2b00      	cmp	r3, #0
 8009340:	d003      	beq.n	800934a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f86f 	bl	8009426 <HAL_TIM_IC_CaptureCallback>
 8009348:	e005      	b.n	8009356 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 f862 	bl	8009414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 f871 	bl	8009438 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	f003 0301 	and.w	r3, r3, #1
 8009366:	2b01      	cmp	r3, #1
 8009368:	d10e      	bne.n	8009388 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	f003 0301 	and.w	r3, r3, #1
 8009374:	2b01      	cmp	r3, #1
 8009376:	d107      	bne.n	8009388 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f06f 0201 	mvn.w	r2, #1
 8009380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f7f9 fe34 	bl	8002ff0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	691b      	ldr	r3, [r3, #16]
 800938e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009392:	2b80      	cmp	r3, #128	@ 0x80
 8009394:	d10e      	bne.n	80093b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093a0:	2b80      	cmp	r3, #128	@ 0x80
 80093a2:	d107      	bne.n	80093b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80093ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f8d7 	bl	8009562 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093be:	2b40      	cmp	r3, #64	@ 0x40
 80093c0:	d10e      	bne.n	80093e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093cc:	2b40      	cmp	r3, #64	@ 0x40
 80093ce:	d107      	bne.n	80093e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80093d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f835 	bl	800944a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	f003 0320 	and.w	r3, r3, #32
 80093ea:	2b20      	cmp	r3, #32
 80093ec:	d10e      	bne.n	800940c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	f003 0320 	and.w	r3, r3, #32
 80093f8:	2b20      	cmp	r3, #32
 80093fa:	d107      	bne.n	800940c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f06f 0220 	mvn.w	r2, #32
 8009404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f8a2 	bl	8009550 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800940c:	bf00      	nop
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800941c:	bf00      	nop
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	bc80      	pop	{r7}
 8009424:	4770      	bx	lr

08009426 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009426:	b480      	push	{r7}
 8009428:	b083      	sub	sp, #12
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800942e:	bf00      	nop
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	bc80      	pop	{r7}
 8009436:	4770      	bx	lr

08009438 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009440:	bf00      	nop
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	bc80      	pop	{r7}
 8009448:	4770      	bx	lr

0800944a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800944a:	b480      	push	{r7}
 800944c:	b083      	sub	sp, #12
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009452:	bf00      	nop
 8009454:	370c      	adds	r7, #12
 8009456:	46bd      	mov	sp, r7
 8009458:	bc80      	pop	{r7}
 800945a:	4770      	bx	lr

0800945c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4a33      	ldr	r2, [pc, #204]	@ (800953c <TIM_Base_SetConfig+0xe0>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d013      	beq.n	800949c <TIM_Base_SetConfig+0x40>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4a32      	ldr	r2, [pc, #200]	@ (8009540 <TIM_Base_SetConfig+0xe4>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d00f      	beq.n	800949c <TIM_Base_SetConfig+0x40>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009482:	d00b      	beq.n	800949c <TIM_Base_SetConfig+0x40>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a2f      	ldr	r2, [pc, #188]	@ (8009544 <TIM_Base_SetConfig+0xe8>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d007      	beq.n	800949c <TIM_Base_SetConfig+0x40>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a2e      	ldr	r2, [pc, #184]	@ (8009548 <TIM_Base_SetConfig+0xec>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d003      	beq.n	800949c <TIM_Base_SetConfig+0x40>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a2d      	ldr	r2, [pc, #180]	@ (800954c <TIM_Base_SetConfig+0xf0>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d108      	bne.n	80094ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4a22      	ldr	r2, [pc, #136]	@ (800953c <TIM_Base_SetConfig+0xe0>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d013      	beq.n	80094de <TIM_Base_SetConfig+0x82>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4a21      	ldr	r2, [pc, #132]	@ (8009540 <TIM_Base_SetConfig+0xe4>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d00f      	beq.n	80094de <TIM_Base_SetConfig+0x82>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094c4:	d00b      	beq.n	80094de <TIM_Base_SetConfig+0x82>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	4a1e      	ldr	r2, [pc, #120]	@ (8009544 <TIM_Base_SetConfig+0xe8>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d007      	beq.n	80094de <TIM_Base_SetConfig+0x82>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a1d      	ldr	r2, [pc, #116]	@ (8009548 <TIM_Base_SetConfig+0xec>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d003      	beq.n	80094de <TIM_Base_SetConfig+0x82>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4a1c      	ldr	r2, [pc, #112]	@ (800954c <TIM_Base_SetConfig+0xf0>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d108      	bne.n	80094f0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	695b      	ldr	r3, [r3, #20]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	689a      	ldr	r2, [r3, #8]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a09      	ldr	r2, [pc, #36]	@ (800953c <TIM_Base_SetConfig+0xe0>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d003      	beq.n	8009524 <TIM_Base_SetConfig+0xc8>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a08      	ldr	r2, [pc, #32]	@ (8009540 <TIM_Base_SetConfig+0xe4>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d103      	bne.n	800952c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	691a      	ldr	r2, [r3, #16]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	615a      	str	r2, [r3, #20]
}
 8009532:	bf00      	nop
 8009534:	3714      	adds	r7, #20
 8009536:	46bd      	mov	sp, r7
 8009538:	bc80      	pop	{r7}
 800953a:	4770      	bx	lr
 800953c:	40012c00 	.word	0x40012c00
 8009540:	40013400 	.word	0x40013400
 8009544:	40000400 	.word	0x40000400
 8009548:	40000800 	.word	0x40000800
 800954c:	40000c00 	.word	0x40000c00

08009550 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	bc80      	pop	{r7}
 8009560:	4770      	bx	lr

08009562 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009562:	b480      	push	{r7}
 8009564:	b083      	sub	sp, #12
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800956a:	bf00      	nop
 800956c:	370c      	adds	r7, #12
 800956e:	46bd      	mov	sp, r7
 8009570:	bc80      	pop	{r7}
 8009572:	4770      	bx	lr

08009574 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d101      	bne.n	8009586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	e042      	b.n	800960c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800958c:	b2db      	uxtb	r3, r3
 800958e:	2b00      	cmp	r3, #0
 8009590:	d106      	bne.n	80095a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f7fa ff0a 	bl	80043b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2224      	movs	r2, #36	@ 0x24
 80095a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	68da      	ldr	r2, [r3, #12]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80095b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 f91d 	bl	80097f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	691a      	ldr	r2, [r3, #16]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80095cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	695a      	ldr	r2, [r3, #20]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80095dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68da      	ldr	r2, [r3, #12]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80095ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2200      	movs	r2, #0
 80095f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2220      	movs	r2, #32
 80095f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2220      	movs	r2, #32
 8009600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800960a:	2300      	movs	r3, #0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b08a      	sub	sp, #40	@ 0x28
 8009618:	af02      	add	r7, sp, #8
 800961a:	60f8      	str	r0, [r7, #12]
 800961c:	60b9      	str	r1, [r7, #8]
 800961e:	603b      	str	r3, [r7, #0]
 8009620:	4613      	mov	r3, r2
 8009622:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009624:	2300      	movs	r3, #0
 8009626:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800962e:	b2db      	uxtb	r3, r3
 8009630:	2b20      	cmp	r3, #32
 8009632:	d16d      	bne.n	8009710 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d002      	beq.n	8009640 <HAL_UART_Transmit+0x2c>
 800963a:	88fb      	ldrh	r3, [r7, #6]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d101      	bne.n	8009644 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	e066      	b.n	8009712 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2221      	movs	r2, #33	@ 0x21
 800964e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009652:	f7fa ff93 	bl	800457c <HAL_GetTick>
 8009656:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	88fa      	ldrh	r2, [r7, #6]
 800965c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	88fa      	ldrh	r2, [r7, #6]
 8009662:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800966c:	d108      	bne.n	8009680 <HAL_UART_Transmit+0x6c>
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	691b      	ldr	r3, [r3, #16]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d104      	bne.n	8009680 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009676:	2300      	movs	r3, #0
 8009678:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	61bb      	str	r3, [r7, #24]
 800967e:	e003      	b.n	8009688 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009684:	2300      	movs	r3, #0
 8009686:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009688:	e02a      	b.n	80096e0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	9300      	str	r3, [sp, #0]
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	2200      	movs	r2, #0
 8009692:	2180      	movs	r1, #128	@ 0x80
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	f000 f840 	bl	800971a <UART_WaitOnFlagUntilTimeout>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d001      	beq.n	80096a4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80096a0:	2303      	movs	r3, #3
 80096a2:	e036      	b.n	8009712 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d10b      	bne.n	80096c2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	881b      	ldrh	r3, [r3, #0]
 80096ae:	461a      	mov	r2, r3
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	3302      	adds	r3, #2
 80096be:	61bb      	str	r3, [r7, #24]
 80096c0:	e007      	b.n	80096d2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	781a      	ldrb	r2, [r3, #0]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	3301      	adds	r3, #1
 80096d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	3b01      	subs	r3, #1
 80096da:	b29a      	uxth	r2, r3
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1cf      	bne.n	800968a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	9300      	str	r3, [sp, #0]
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	2200      	movs	r2, #0
 80096f2:	2140      	movs	r1, #64	@ 0x40
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f000 f810 	bl	800971a <UART_WaitOnFlagUntilTimeout>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d001      	beq.n	8009704 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8009700:	2303      	movs	r3, #3
 8009702:	e006      	b.n	8009712 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2220      	movs	r2, #32
 8009708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	e000      	b.n	8009712 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009710:	2302      	movs	r3, #2
  }
}
 8009712:	4618      	mov	r0, r3
 8009714:	3720      	adds	r7, #32
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b090      	sub	sp, #64	@ 0x40
 800971e:	af00      	add	r7, sp, #0
 8009720:	60f8      	str	r0, [r7, #12]
 8009722:	60b9      	str	r1, [r7, #8]
 8009724:	603b      	str	r3, [r7, #0]
 8009726:	4613      	mov	r3, r2
 8009728:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800972a:	e050      	b.n	80097ce <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800972c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800972e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009732:	d04c      	beq.n	80097ce <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009734:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009736:	2b00      	cmp	r3, #0
 8009738:	d007      	beq.n	800974a <UART_WaitOnFlagUntilTimeout+0x30>
 800973a:	f7fa ff1f 	bl	800457c <HAL_GetTick>
 800973e:	4602      	mov	r2, r0
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	1ad3      	subs	r3, r2, r3
 8009744:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009746:	429a      	cmp	r2, r3
 8009748:	d241      	bcs.n	80097ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	330c      	adds	r3, #12
 8009750:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009754:	e853 3f00 	ldrex	r3, [r3]
 8009758:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800975a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009760:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	330c      	adds	r3, #12
 8009768:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800976a:	637a      	str	r2, [r7, #52]	@ 0x34
 800976c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009770:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009772:	e841 2300 	strex	r3, r2, [r1]
 8009776:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800977a:	2b00      	cmp	r3, #0
 800977c:	d1e5      	bne.n	800974a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	3314      	adds	r3, #20
 8009784:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	e853 3f00 	ldrex	r3, [r3]
 800978c:	613b      	str	r3, [r7, #16]
   return(result);
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	f023 0301 	bic.w	r3, r3, #1
 8009794:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	3314      	adds	r3, #20
 800979c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800979e:	623a      	str	r2, [r7, #32]
 80097a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a2:	69f9      	ldr	r1, [r7, #28]
 80097a4:	6a3a      	ldr	r2, [r7, #32]
 80097a6:	e841 2300 	strex	r3, r2, [r1]
 80097aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80097ac:	69bb      	ldr	r3, [r7, #24]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d1e5      	bne.n	800977e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2220      	movs	r2, #32
 80097b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2220      	movs	r2, #32
 80097be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2200      	movs	r2, #0
 80097c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80097ca:	2303      	movs	r3, #3
 80097cc:	e00f      	b.n	80097ee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	4013      	ands	r3, r2
 80097d8:	68ba      	ldr	r2, [r7, #8]
 80097da:	429a      	cmp	r2, r3
 80097dc:	bf0c      	ite	eq
 80097de:	2301      	moveq	r3, #1
 80097e0:	2300      	movne	r3, #0
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	461a      	mov	r2, r3
 80097e6:	79fb      	ldrb	r3, [r7, #7]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d09f      	beq.n	800972c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3740      	adds	r7, #64	@ 0x40
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
	...

080097f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	691b      	ldr	r3, [r3, #16]
 8009806:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	68da      	ldr	r2, [r3, #12]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	430a      	orrs	r2, r1
 8009814:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	689a      	ldr	r2, [r3, #8]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	691b      	ldr	r3, [r3, #16]
 800981e:	431a      	orrs	r2, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	695b      	ldr	r3, [r3, #20]
 8009824:	4313      	orrs	r3, r2
 8009826:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8009832:	f023 030c 	bic.w	r3, r3, #12
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	6812      	ldr	r2, [r2, #0]
 800983a:	68b9      	ldr	r1, [r7, #8]
 800983c:	430b      	orrs	r3, r1
 800983e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	695b      	ldr	r3, [r3, #20]
 8009846:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	699a      	ldr	r2, [r3, #24]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	430a      	orrs	r2, r1
 8009854:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a2c      	ldr	r2, [pc, #176]	@ (800990c <UART_SetConfig+0x114>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d103      	bne.n	8009868 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009860:	f7fe f862 	bl	8007928 <HAL_RCC_GetPCLK2Freq>
 8009864:	60f8      	str	r0, [r7, #12]
 8009866:	e002      	b.n	800986e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009868:	f7fe f84a 	bl	8007900 <HAL_RCC_GetPCLK1Freq>
 800986c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	4613      	mov	r3, r2
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	4413      	add	r3, r2
 8009876:	009a      	lsls	r2, r3, #2
 8009878:	441a      	add	r2, r3
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	fbb2 f3f3 	udiv	r3, r2, r3
 8009884:	4a22      	ldr	r2, [pc, #136]	@ (8009910 <UART_SetConfig+0x118>)
 8009886:	fba2 2303 	umull	r2, r3, r2, r3
 800988a:	095b      	lsrs	r3, r3, #5
 800988c:	0119      	lsls	r1, r3, #4
 800988e:	68fa      	ldr	r2, [r7, #12]
 8009890:	4613      	mov	r3, r2
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	4413      	add	r3, r2
 8009896:	009a      	lsls	r2, r3, #2
 8009898:	441a      	add	r2, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80098a4:	4b1a      	ldr	r3, [pc, #104]	@ (8009910 <UART_SetConfig+0x118>)
 80098a6:	fba3 0302 	umull	r0, r3, r3, r2
 80098aa:	095b      	lsrs	r3, r3, #5
 80098ac:	2064      	movs	r0, #100	@ 0x64
 80098ae:	fb00 f303 	mul.w	r3, r0, r3
 80098b2:	1ad3      	subs	r3, r2, r3
 80098b4:	011b      	lsls	r3, r3, #4
 80098b6:	3332      	adds	r3, #50	@ 0x32
 80098b8:	4a15      	ldr	r2, [pc, #84]	@ (8009910 <UART_SetConfig+0x118>)
 80098ba:	fba2 2303 	umull	r2, r3, r2, r3
 80098be:	095b      	lsrs	r3, r3, #5
 80098c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80098c4:	4419      	add	r1, r3
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	4613      	mov	r3, r2
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	4413      	add	r3, r2
 80098ce:	009a      	lsls	r2, r3, #2
 80098d0:	441a      	add	r2, r3
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80098dc:	4b0c      	ldr	r3, [pc, #48]	@ (8009910 <UART_SetConfig+0x118>)
 80098de:	fba3 0302 	umull	r0, r3, r3, r2
 80098e2:	095b      	lsrs	r3, r3, #5
 80098e4:	2064      	movs	r0, #100	@ 0x64
 80098e6:	fb00 f303 	mul.w	r3, r0, r3
 80098ea:	1ad3      	subs	r3, r2, r3
 80098ec:	011b      	lsls	r3, r3, #4
 80098ee:	3332      	adds	r3, #50	@ 0x32
 80098f0:	4a07      	ldr	r2, [pc, #28]	@ (8009910 <UART_SetConfig+0x118>)
 80098f2:	fba2 2303 	umull	r2, r3, r2, r3
 80098f6:	095b      	lsrs	r3, r3, #5
 80098f8:	f003 020f 	and.w	r2, r3, #15
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	440a      	add	r2, r1
 8009902:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009904:	bf00      	nop
 8009906:	3710      	adds	r7, #16
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	40013800 	.word	0x40013800
 8009910:	51eb851f 	.word	0x51eb851f

08009914 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009918:	4904      	ldr	r1, [pc, #16]	@ (800992c <MX_FATFS_Init+0x18>)
 800991a:	4805      	ldr	r0, [pc, #20]	@ (8009930 <MX_FATFS_Init+0x1c>)
 800991c:	f000 f8b0 	bl	8009a80 <FATFS_LinkDriver>
 8009920:	4603      	mov	r3, r0
 8009922:	461a      	mov	r2, r3
 8009924:	4b03      	ldr	r3, [pc, #12]	@ (8009934 <MX_FATFS_Init+0x20>)
 8009926:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009928:	bf00      	nop
 800992a:	bd80      	pop	{r7, pc}
 800992c:	200008a8 	.word	0x200008a8
 8009930:	200000d4 	.word	0x200000d4
 8009934:	200008a4 	.word	0x200008a4

08009938 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b082      	sub	sp, #8
 800993c:	af00      	add	r7, sp, #0
 800993e:	4603      	mov	r3, r0
 8009940:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
      return SD_disk_initialize(pdrv);
 8009942:	79fb      	ldrb	r3, [r7, #7]
 8009944:	4618      	mov	r0, r3
 8009946:	f7f7 fff1 	bl	800192c <SD_disk_initialize>
 800994a:	4603      	mov	r3, r0
 800994c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800994e:	4618      	mov	r0, r3
 8009950:	3708      	adds	r7, #8
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b082      	sub	sp, #8
 800995a:	af00      	add	r7, sp, #0
 800995c:	4603      	mov	r3, r0
 800995e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
      return SD_disk_status(pdrv);
 8009960:	79fb      	ldrb	r3, [r7, #7]
 8009962:	4618      	mov	r0, r3
 8009964:	f7f8 f8c8 	bl	8001af8 <SD_disk_status>
 8009968:	4603      	mov	r3, r0
 800996a:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800996c:	4618      	mov	r0, r3
 800996e:	3708      	adds	r7, #8
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	60b9      	str	r1, [r7, #8]
 800997c:	607a      	str	r2, [r7, #4]
 800997e:	603b      	str	r3, [r7, #0]
 8009980:	4603      	mov	r3, r0
 8009982:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
    return SD_disk_read(pdrv, buff, sector, count);
 8009984:	7bf8      	ldrb	r0, [r7, #15]
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	68b9      	ldr	r1, [r7, #8]
 800998c:	f7f8 f8c8 	bl	8001b20 <SD_disk_read>
 8009990:	4603      	mov	r3, r0
 8009992:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8009994:	4618      	mov	r0, r3
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60b9      	str	r1, [r7, #8]
 80099a4:	607a      	str	r2, [r7, #4]
 80099a6:	603b      	str	r3, [r7, #0]
 80099a8:	4603      	mov	r3, r0
 80099aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
      return SD_disk_write(pdrv, buff, sector, count);
 80099ac:	7bf8      	ldrb	r0, [r7, #15]
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	68b9      	ldr	r1, [r7, #8]
 80099b4:	f7f8 f91e 	bl	8001bf4 <SD_disk_write>
 80099b8:	4603      	mov	r3, r0
 80099ba:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	4603      	mov	r3, r0
 80099cc:	603a      	str	r2, [r7, #0]
 80099ce:	71fb      	strb	r3, [r7, #7]
 80099d0:	460b      	mov	r3, r1
 80099d2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
  return SD_disk_ioctl(pdrv, cmd, buff);
 80099d4:	79fb      	ldrb	r3, [r7, #7]
 80099d6:	79b9      	ldrb	r1, [r7, #6]
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	4618      	mov	r0, r3
 80099dc:	f7f8 f98e 	bl	8001cfc <SD_disk_ioctl>
 80099e0:	4603      	mov	r3, r0
 80099e2:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3708      	adds	r7, #8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b087      	sub	sp, #28
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	4613      	mov	r3, r2
 80099f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80099fa:	2301      	movs	r3, #1
 80099fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80099fe:	2300      	movs	r3, #0
 8009a00:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8009a02:	4b1e      	ldr	r3, [pc, #120]	@ (8009a7c <FATFS_LinkDriverEx+0x90>)
 8009a04:	7a5b      	ldrb	r3, [r3, #9]
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d831      	bhi.n	8009a70 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8009a7c <FATFS_LinkDriverEx+0x90>)
 8009a0e:	7a5b      	ldrb	r3, [r3, #9]
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	461a      	mov	r2, r3
 8009a14:	4b19      	ldr	r3, [pc, #100]	@ (8009a7c <FATFS_LinkDriverEx+0x90>)
 8009a16:	2100      	movs	r1, #0
 8009a18:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8009a1a:	4b18      	ldr	r3, [pc, #96]	@ (8009a7c <FATFS_LinkDriverEx+0x90>)
 8009a1c:	7a5b      	ldrb	r3, [r3, #9]
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	4a16      	ldr	r2, [pc, #88]	@ (8009a7c <FATFS_LinkDriverEx+0x90>)
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	4413      	add	r3, r2
 8009a26:	68fa      	ldr	r2, [r7, #12]
 8009a28:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8009a2a:	4b14      	ldr	r3, [pc, #80]	@ (8009a7c <FATFS_LinkDriverEx+0x90>)
 8009a2c:	7a5b      	ldrb	r3, [r3, #9]
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	461a      	mov	r2, r3
 8009a32:	4b12      	ldr	r3, [pc, #72]	@ (8009a7c <FATFS_LinkDriverEx+0x90>)
 8009a34:	4413      	add	r3, r2
 8009a36:	79fa      	ldrb	r2, [r7, #7]
 8009a38:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009a3a:	4b10      	ldr	r3, [pc, #64]	@ (8009a7c <FATFS_LinkDriverEx+0x90>)
 8009a3c:	7a5b      	ldrb	r3, [r3, #9]
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	1c5a      	adds	r2, r3, #1
 8009a42:	b2d1      	uxtb	r1, r2
 8009a44:	4a0d      	ldr	r2, [pc, #52]	@ (8009a7c <FATFS_LinkDriverEx+0x90>)
 8009a46:	7251      	strb	r1, [r2, #9]
 8009a48:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009a4a:	7dbb      	ldrb	r3, [r7, #22]
 8009a4c:	3330      	adds	r3, #48	@ 0x30
 8009a4e:	b2da      	uxtb	r2, r3
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	3301      	adds	r3, #1
 8009a58:	223a      	movs	r2, #58	@ 0x3a
 8009a5a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	3302      	adds	r3, #2
 8009a60:	222f      	movs	r2, #47	@ 0x2f
 8009a62:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	3303      	adds	r3, #3
 8009a68:	2200      	movs	r2, #0
 8009a6a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8009a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	371c      	adds	r7, #28
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bc80      	pop	{r7}
 8009a7a:	4770      	bx	lr
 8009a7c:	200008ac 	.word	0x200008ac

08009a80 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	6839      	ldr	r1, [r7, #0]
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7ff ffac 	bl	80099ec <FATFS_LinkDriverEx>
 8009a94:	4603      	mov	r3, r0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009a9e:	b480      	push	{r7}
 8009aa0:	b085      	sub	sp, #20
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009aac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009ab0:	2b84      	cmp	r3, #132	@ 0x84
 8009ab2:	d005      	beq.n	8009ac0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009ab4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	4413      	add	r3, r2
 8009abc:	3303      	adds	r3, #3
 8009abe:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3714      	adds	r7, #20
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bc80      	pop	{r7}
 8009aca:	4770      	bx	lr

08009acc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ad2:	f3ef 8305 	mrs	r3, IPSR
 8009ad6:	607b      	str	r3, [r7, #4]
  return(result);
 8009ad8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	bf14      	ite	ne
 8009ade:	2301      	movne	r3, #1
 8009ae0:	2300      	moveq	r3, #0
 8009ae2:	b2db      	uxtb	r3, r3
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	370c      	adds	r7, #12
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bc80      	pop	{r7}
 8009aec:	4770      	bx	lr

08009aee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009af2:	f001 faad 	bl	800b050 <vTaskStartScheduler>
  
  return osOK;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	bd80      	pop	{r7, pc}

08009afc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009afe:	b089      	sub	sp, #36	@ 0x24
 8009b00:	af04      	add	r7, sp, #16
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	695b      	ldr	r3, [r3, #20]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d020      	beq.n	8009b50 <osThreadCreate+0x54>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	699b      	ldr	r3, [r3, #24]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d01c      	beq.n	8009b50 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	685c      	ldr	r4, [r3, #4]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	691e      	ldr	r6, [r3, #16]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7ff ffb8 	bl	8009a9e <makeFreeRtosPriority>
 8009b2e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	695b      	ldr	r3, [r3, #20]
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009b38:	9202      	str	r2, [sp, #8]
 8009b3a:	9301      	str	r3, [sp, #4]
 8009b3c:	9100      	str	r1, [sp, #0]
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	4632      	mov	r2, r6
 8009b42:	4629      	mov	r1, r5
 8009b44:	4620      	mov	r0, r4
 8009b46:	f001 f8a7 	bl	800ac98 <xTaskCreateStatic>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	60fb      	str	r3, [r7, #12]
 8009b4e:	e01c      	b.n	8009b8a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	685c      	ldr	r4, [r3, #4]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009b5c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7ff ff9a 	bl	8009a9e <makeFreeRtosPriority>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	f107 030c 	add.w	r3, r7, #12
 8009b70:	9301      	str	r3, [sp, #4]
 8009b72:	9200      	str	r2, [sp, #0]
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	4632      	mov	r2, r6
 8009b78:	4629      	mov	r1, r5
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	f001 f8eb 	bl	800ad56 <xTaskCreate>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d001      	beq.n	8009b8a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009b86:	2300      	movs	r3, #0
 8009b88:	e000      	b.n	8009b8c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3714      	adds	r7, #20
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009b94 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d001      	beq.n	8009baa <osDelay+0x16>
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	e000      	b.n	8009bac <osDelay+0x18>
 8009baa:	2301      	movs	r3, #1
 8009bac:	4618      	mov	r0, r3
 8009bae:	f001 fa19 	bl	800afe4 <vTaskDelay>
  
  return osOK;
 8009bb2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3710      	adds	r7, #16
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b086      	sub	sp, #24
 8009bc0:	af02      	add	r7, sp, #8
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8009bce:	f7ff ff7d 	bl	8009acc <inHandlerMode>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d01c      	beq.n	8009c12 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8009bd8:	6839      	ldr	r1, [r7, #0]
 8009bda:	f107 0208 	add.w	r2, r7, #8
 8009bde:	f107 030c 	add.w	r3, r7, #12
 8009be2:	9300      	str	r3, [sp, #0]
 8009be4:	4613      	mov	r3, r2
 8009be6:	2201      	movs	r2, #1
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f002 f809 	bl	800bc00 <xTaskGenericNotifyFromISR>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d002      	beq.n	8009bfa <osSignalSet+0x3e>
      return 0x80000000;
 8009bf4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009bf8:	e019      	b.n	8009c2e <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d015      	beq.n	8009c2c <osSignalSet+0x70>
 8009c00:	4b0d      	ldr	r3, [pc, #52]	@ (8009c38 <osSignalSet+0x7c>)
 8009c02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c06:	601a      	str	r2, [r3, #0]
 8009c08:	f3bf 8f4f 	dsb	sy
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	e00c      	b.n	8009c2c <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8009c12:	6839      	ldr	r1, [r7, #0]
 8009c14:	f107 0308 	add.w	r3, r7, #8
 8009c18:	2201      	movs	r2, #1
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f001 ff44 	bl	800baa8 <xTaskGenericNotify>
 8009c20:	4603      	mov	r3, r0
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d002      	beq.n	8009c2c <osSignalSet+0x70>
    return 0x80000000;
 8009c26:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009c2a:	e000      	b.n	8009c2e <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8009c2c:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3710      	adds	r7, #16
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	e000ed04 	.word	0xe000ed04

08009c3c <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8009c3c:	b590      	push	{r4, r7, lr}
 8009c3e:	b089      	sub	sp, #36	@ 0x24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8009c48:	2300      	movs	r3, #0
 8009c4a:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c56:	d103      	bne.n	8009c60 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8009c58:	f04f 33ff 	mov.w	r3, #4294967295
 8009c5c:	61fb      	str	r3, [r7, #28]
 8009c5e:	e009      	b.n	8009c74 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d006      	beq.n	8009c74 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d101      	bne.n	8009c74 <osSignalWait+0x38>
      ticks = 1;
 8009c70:	2301      	movs	r3, #1
 8009c72:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8009c74:	f7ff ff2a 	bl	8009acc <inHandlerMode>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d002      	beq.n	8009c84 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8009c7e:	2382      	movs	r3, #130	@ 0x82
 8009c80:	613b      	str	r3, [r7, #16]
 8009c82:	e01b      	b.n	8009cbc <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8009c84:	68b9      	ldr	r1, [r7, #8]
 8009c86:	f107 0310 	add.w	r3, r7, #16
 8009c8a:	1d1a      	adds	r2, r3, #4
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	2000      	movs	r0, #0
 8009c90:	f001 feaa 	bl	800b9e8 <xTaskNotifyWait>
 8009c94:	4603      	mov	r3, r0
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d008      	beq.n	8009cac <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d102      	bne.n	8009ca6 <osSignalWait+0x6a>
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	613b      	str	r3, [r7, #16]
 8009ca4:	e00a      	b.n	8009cbc <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8009ca6:	2340      	movs	r3, #64	@ 0x40
 8009ca8:	613b      	str	r3, [r7, #16]
 8009caa:	e007      	b.n	8009cbc <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	da02      	bge.n	8009cb8 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8009cb2:	2386      	movs	r3, #134	@ 0x86
 8009cb4:	613b      	str	r3, [r7, #16]
 8009cb6:	e001      	b.n	8009cbc <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8009cb8:	2308      	movs	r3, #8
 8009cba:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	461c      	mov	r4, r3
 8009cc0:	f107 0310 	add.w	r3, r7, #16
 8009cc4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009cc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009ccc:	68f8      	ldr	r0, [r7, #12]
 8009cce:	3724      	adds	r7, #36	@ 0x24
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd90      	pop	{r4, r7, pc}

08009cd4 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	3303      	adds	r3, #3
 8009ce2:	f023 0303 	bic.w	r3, r3, #3
 8009ce6:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8009ce8:	2014      	movs	r0, #20
 8009cea:	f002 fab1 	bl	800c250 <pvPortMalloc>
 8009cee:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d046      	beq.n	8009d84 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8009cfe:	68fa      	ldr	r2, [r7, #12]
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	2200      	movs	r2, #0
 8009d08:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f002 fa9e 	bl	800c250 <pvPortMalloc>
 8009d14:	4602      	mov	r2, r0
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d02b      	beq.n	8009d7a <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	fb02 f303 	mul.w	r3, r2, r3
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f002 fa8f 	bl	800c250 <pvPortMalloc>
 8009d32:	4602      	mov	r2, r0
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d011      	beq.n	8009d64 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8009d40:	2300      	movs	r3, #0
 8009d42:	613b      	str	r3, [r7, #16]
 8009d44:	e008      	b.n	8009d58 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	685a      	ldr	r2, [r3, #4]
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	2200      	movs	r2, #0
 8009d50:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	3301      	adds	r3, #1
 8009d56:	613b      	str	r3, [r7, #16]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	693a      	ldr	r2, [r7, #16]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d3f1      	bcc.n	8009d46 <osPoolCreate+0x72>
 8009d62:	e00f      	b.n	8009d84 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f002 fb39 	bl	800c3e0 <vPortFree>
        vPortFree(thePool);
 8009d6e:	6978      	ldr	r0, [r7, #20]
 8009d70:	f002 fb36 	bl	800c3e0 <vPortFree>
        thePool = NULL;
 8009d74:	2300      	movs	r3, #0
 8009d76:	617b      	str	r3, [r7, #20]
 8009d78:	e004      	b.n	8009d84 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8009d7a:	6978      	ldr	r0, [r7, #20]
 8009d7c:	f002 fb30 	bl	800c3e0 <vPortFree>
      thePool = NULL;
 8009d80:	2300      	movs	r3, #0
 8009d82:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8009d84:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3718      	adds	r7, #24
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b08a      	sub	sp, #40	@ 0x28
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8009d96:	2300      	movs	r3, #0
 8009d98:	627b      	str	r3, [r7, #36]	@ 0x24
  void *p = NULL;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8009d9e:	f7ff fe95 	bl	8009acc <inHandlerMode>
 8009da2:	4603      	mov	r3, r0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00e      	beq.n	8009dc6 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009da8:	f3ef 8211 	mrs	r2, BASEPRI
 8009dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db0:	f383 8811 	msr	BASEPRI, r3
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	617a      	str	r2, [r7, #20]
 8009dbe:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009dc0:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8009dc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009dc4:	e001      	b.n	8009dca <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8009dc6:	f002 f941 	bl	800c04c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8009dca:	2300      	movs	r3, #0
 8009dcc:	61fb      	str	r3, [r7, #28]
 8009dce:	e029      	b.n	8009e24 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	691a      	ldr	r2, [r3, #16]
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	4413      	add	r3, r2
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	6892      	ldr	r2, [r2, #8]
 8009ddc:	fbb3 f1f2 	udiv	r1, r3, r2
 8009de0:	fb01 f202 	mul.w	r2, r1, r2
 8009de4:	1a9b      	subs	r3, r3, r2
 8009de6:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	685a      	ldr	r2, [r3, #4]
 8009dec:	69bb      	ldr	r3, [r7, #24]
 8009dee:	4413      	add	r3, r2
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d113      	bne.n	8009e1e <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	685a      	ldr	r2, [r3, #4]
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	2201      	movs	r2, #1
 8009e00:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4619      	mov	r1, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	69ba      	ldr	r2, [r7, #24]
 8009e0e:	fb02 f303 	mul.w	r3, r2, r3
 8009e12:	440b      	add	r3, r1
 8009e14:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	69ba      	ldr	r2, [r7, #24]
 8009e1a:	611a      	str	r2, [r3, #16]
      break;
 8009e1c:	e007      	b.n	8009e2e <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8009e1e:	69fb      	ldr	r3, [r7, #28]
 8009e20:	3301      	adds	r3, #1
 8009e22:	61fb      	str	r3, [r7, #28]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	69fa      	ldr	r2, [r7, #28]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d3d0      	bcc.n	8009dd0 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8009e2e:	f7ff fe4d 	bl	8009acc <inHandlerMode>
 8009e32:	4603      	mov	r3, r0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d005      	beq.n	8009e44 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8009e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e3a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009e42:	e001      	b.n	8009e48 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8009e44:	f002 f932 	bl	800c0ac <vPortExitCritical>
  }
  
  return p;
 8009e48:	6a3b      	ldr	r3, [r7, #32]
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3728      	adds	r7, #40	@ 0x28
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8009e52:	b480      	push	{r7}
 8009e54:	b085      	sub	sp, #20
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
 8009e5a:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d101      	bne.n	8009e66 <osPoolFree+0x14>
    return osErrorParameter;
 8009e62:	2380      	movs	r3, #128	@ 0x80
 8009e64:	e030      	b.n	8009ec8 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d101      	bne.n	8009e70 <osPoolFree+0x1e>
    return osErrorParameter;
 8009e6c:	2380      	movs	r3, #128	@ 0x80
 8009e6e:	e02b      	b.n	8009ec8 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	683a      	ldr	r2, [r7, #0]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d201      	bcs.n	8009e7e <osPoolFree+0x2c>
    return osErrorParameter;
 8009e7a:	2380      	movs	r3, #128	@ 0x80
 8009e7c:	e024      	b.n	8009ec8 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	6812      	ldr	r2, [r2, #0]
 8009e84:	1a9b      	subs	r3, r3, r2
 8009e86:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	68da      	ldr	r2, [r3, #12]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e92:	fb01 f202 	mul.w	r2, r1, r2
 8009e96:	1a9b      	subs	r3, r3, r2
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d001      	beq.n	8009ea0 <osPoolFree+0x4e>
    return osErrorParameter;
 8009e9c:	2380      	movs	r3, #128	@ 0x80
 8009e9e:	e013      	b.n	8009ec8 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	68fa      	ldr	r2, [r7, #12]
 8009ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eaa:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d301      	bcc.n	8009eba <osPoolFree+0x68>
    return osErrorParameter;
 8009eb6:	2380      	movs	r3, #128	@ 0x80
 8009eb8:	e006      	b.n	8009ec8 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	685a      	ldr	r2, [r3, #4]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3714      	adds	r7, #20
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bc80      	pop	{r7}
 8009ed0:	4770      	bx	lr

08009ed2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009ed2:	b590      	push	{r4, r7, lr}
 8009ed4:	b085      	sub	sp, #20
 8009ed6:	af02      	add	r7, sp, #8
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d011      	beq.n	8009f08 <osMessageCreate+0x36>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00d      	beq.n	8009f08 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6818      	ldr	r0, [r3, #0]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6859      	ldr	r1, [r3, #4]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	689a      	ldr	r2, [r3, #8]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	2400      	movs	r4, #0
 8009efe:	9400      	str	r4, [sp, #0]
 8009f00:	f000 f9de 	bl	800a2c0 <xQueueGenericCreateStatic>
 8009f04:	4603      	mov	r3, r0
 8009f06:	e008      	b.n	8009f1a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6818      	ldr	r0, [r3, #0]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	2200      	movs	r2, #0
 8009f12:	4619      	mov	r1, r3
 8009f14:	f000 fa50 	bl	800a3b8 <xQueueGenericCreate>
 8009f18:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	370c      	adds	r7, #12
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd90      	pop	{r4, r7, pc}
	...

08009f24 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b086      	sub	sp, #24
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009f30:	2300      	movs	r3, #0
 8009f32:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d101      	bne.n	8009f42 <osMessagePut+0x1e>
    ticks = 1;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009f42:	f7ff fdc3 	bl	8009acc <inHandlerMode>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d018      	beq.n	8009f7e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009f4c:	f107 0210 	add.w	r2, r7, #16
 8009f50:	f107 0108 	add.w	r1, r7, #8
 8009f54:	2300      	movs	r3, #0
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f000 fb8e 	bl	800a678 <xQueueGenericSendFromISR>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d001      	beq.n	8009f66 <osMessagePut+0x42>
      return osErrorOS;
 8009f62:	23ff      	movs	r3, #255	@ 0xff
 8009f64:	e018      	b.n	8009f98 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d014      	beq.n	8009f96 <osMessagePut+0x72>
 8009f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8009fa0 <osMessagePut+0x7c>)
 8009f6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f72:	601a      	str	r2, [r3, #0]
 8009f74:	f3bf 8f4f 	dsb	sy
 8009f78:	f3bf 8f6f 	isb	sy
 8009f7c:	e00b      	b.n	8009f96 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009f7e:	f107 0108 	add.w	r1, r7, #8
 8009f82:	2300      	movs	r3, #0
 8009f84:	697a      	ldr	r2, [r7, #20]
 8009f86:	68f8      	ldr	r0, [r7, #12]
 8009f88:	f000 fa74 	bl	800a474 <xQueueGenericSend>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d001      	beq.n	8009f96 <osMessagePut+0x72>
      return osErrorOS;
 8009f92:	23ff      	movs	r3, #255	@ 0xff
 8009f94:	e000      	b.n	8009f98 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3718      	adds	r7, #24
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	e000ed04 	.word	0xe000ed04

08009fa4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009fa4:	b590      	push	{r4, r7, lr}
 8009fa6:	b08b      	sub	sp, #44	@ 0x2c
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	60b9      	str	r1, [r7, #8]
 8009fae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d10a      	bne.n	8009fd4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009fbe:	2380      	movs	r3, #128	@ 0x80
 8009fc0:	617b      	str	r3, [r7, #20]
    return event;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	461c      	mov	r4, r3
 8009fc6:	f107 0314 	add.w	r3, r7, #20
 8009fca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009fce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009fd2:	e054      	b.n	800a07e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe2:	d103      	bne.n	8009fec <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8009fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fea:	e009      	b.n	800a000 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d006      	beq.n	800a000 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8009ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d101      	bne.n	800a000 <osMessageGet+0x5c>
      ticks = 1;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a000:	f7ff fd64 	bl	8009acc <inHandlerMode>
 800a004:	4603      	mov	r3, r0
 800a006:	2b00      	cmp	r3, #0
 800a008:	d01c      	beq.n	800a044 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a00a:	f107 0220 	add.w	r2, r7, #32
 800a00e:	f107 0314 	add.w	r3, r7, #20
 800a012:	3304      	adds	r3, #4
 800a014:	4619      	mov	r1, r3
 800a016:	68b8      	ldr	r0, [r7, #8]
 800a018:	f000 fcac 	bl	800a974 <xQueueReceiveFromISR>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d102      	bne.n	800a028 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a022:	2310      	movs	r3, #16
 800a024:	617b      	str	r3, [r7, #20]
 800a026:	e001      	b.n	800a02c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a028:	2300      	movs	r3, #0
 800a02a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a02c:	6a3b      	ldr	r3, [r7, #32]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d01d      	beq.n	800a06e <osMessageGet+0xca>
 800a032:	4b15      	ldr	r3, [pc, #84]	@ (800a088 <osMessageGet+0xe4>)
 800a034:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a038:	601a      	str	r2, [r3, #0]
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	f3bf 8f6f 	isb	sy
 800a042:	e014      	b.n	800a06e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a044:	f107 0314 	add.w	r3, r7, #20
 800a048:	3304      	adds	r3, #4
 800a04a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a04c:	4619      	mov	r1, r3
 800a04e:	68b8      	ldr	r0, [r7, #8]
 800a050:	f000 fbae 	bl	800a7b0 <xQueueReceive>
 800a054:	4603      	mov	r3, r0
 800a056:	2b01      	cmp	r3, #1
 800a058:	d102      	bne.n	800a060 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a05a:	2310      	movs	r3, #16
 800a05c:	617b      	str	r3, [r7, #20]
 800a05e:	e006      	b.n	800a06e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a062:	2b00      	cmp	r3, #0
 800a064:	d101      	bne.n	800a06a <osMessageGet+0xc6>
 800a066:	2300      	movs	r3, #0
 800a068:	e000      	b.n	800a06c <osMessageGet+0xc8>
 800a06a:	2340      	movs	r3, #64	@ 0x40
 800a06c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	461c      	mov	r4, r3
 800a072:	f107 0314 	add.w	r3, r7, #20
 800a076:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a07a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	372c      	adds	r7, #44	@ 0x2c
 800a082:	46bd      	mov	sp, r7
 800a084:	bd90      	pop	{r4, r7, pc}
 800a086:	bf00      	nop
 800a088:	e000ed04 	.word	0xe000ed04

0800a08c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f103 0208 	add.w	r2, r3, #8
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a0a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f103 0208 	add.w	r2, r3, #8
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f103 0208 	add.w	r2, r3, #8
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a0c0:	bf00      	nop
 800a0c2:	370c      	adds	r7, #12
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bc80      	pop	{r7}
 800a0c8:	4770      	bx	lr

0800a0ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a0ca:	b480      	push	{r7}
 800a0cc:	b083      	sub	sp, #12
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a0d8:	bf00      	nop
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bc80      	pop	{r7}
 800a0e0:	4770      	bx	lr

0800a0e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a0e2:	b480      	push	{r7}
 800a0e4:	b085      	sub	sp, #20
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
 800a0ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	68fa      	ldr	r2, [r7, #12]
 800a0f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	689a      	ldr	r2, [r3, #8]
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	683a      	ldr	r2, [r7, #0]
 800a106:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	683a      	ldr	r2, [r7, #0]
 800a10c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	1c5a      	adds	r2, r3, #1
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	601a      	str	r2, [r3, #0]
}
 800a11e:	bf00      	nop
 800a120:	3714      	adds	r7, #20
 800a122:	46bd      	mov	sp, r7
 800a124:	bc80      	pop	{r7}
 800a126:	4770      	bx	lr

0800a128 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a128:	b480      	push	{r7}
 800a12a:	b085      	sub	sp, #20
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a13e:	d103      	bne.n	800a148 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	691b      	ldr	r3, [r3, #16]
 800a144:	60fb      	str	r3, [r7, #12]
 800a146:	e00c      	b.n	800a162 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	3308      	adds	r3, #8
 800a14c:	60fb      	str	r3, [r7, #12]
 800a14e:	e002      	b.n	800a156 <vListInsert+0x2e>
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	60fb      	str	r3, [r7, #12]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	68ba      	ldr	r2, [r7, #8]
 800a15e:	429a      	cmp	r2, r3
 800a160:	d2f6      	bcs.n	800a150 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	685a      	ldr	r2, [r3, #4]
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	683a      	ldr	r2, [r7, #0]
 800a170:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	1c5a      	adds	r2, r3, #1
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	601a      	str	r2, [r3, #0]
}
 800a18e:	bf00      	nop
 800a190:	3714      	adds	r7, #20
 800a192:	46bd      	mov	sp, r7
 800a194:	bc80      	pop	{r7}
 800a196:	4770      	bx	lr

0800a198 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a198:	b480      	push	{r7}
 800a19a:	b085      	sub	sp, #20
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	691b      	ldr	r3, [r3, #16]
 800a1a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	6892      	ldr	r2, [r2, #8]
 800a1ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	6852      	ldr	r2, [r2, #4]
 800a1b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d103      	bne.n	800a1cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	689a      	ldr	r2, [r3, #8]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	1e5a      	subs	r2, r3, #1
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3714      	adds	r7, #20
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bc80      	pop	{r7}
 800a1e8:	4770      	bx	lr
	...

0800a1ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10b      	bne.n	800a218 <xQueueGenericReset+0x2c>
	__asm volatile
 800a200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a204:	f383 8811 	msr	BASEPRI, r3
 800a208:	f3bf 8f6f 	isb	sy
 800a20c:	f3bf 8f4f 	dsb	sy
 800a210:	60bb      	str	r3, [r7, #8]
}
 800a212:	bf00      	nop
 800a214:	bf00      	nop
 800a216:	e7fd      	b.n	800a214 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a218:	f001 ff18 	bl	800c04c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a224:	68f9      	ldr	r1, [r7, #12]
 800a226:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a228:	fb01 f303 	mul.w	r3, r1, r3
 800a22c:	441a      	add	r2, r3
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2200      	movs	r2, #0
 800a236:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a248:	3b01      	subs	r3, #1
 800a24a:	68f9      	ldr	r1, [r7, #12]
 800a24c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a24e:	fb01 f303 	mul.w	r3, r1, r3
 800a252:	441a      	add	r2, r3
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	22ff      	movs	r2, #255	@ 0xff
 800a25c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	22ff      	movs	r2, #255	@ 0xff
 800a264:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d114      	bne.n	800a298 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	691b      	ldr	r3, [r3, #16]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d01a      	beq.n	800a2ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	3310      	adds	r3, #16
 800a27a:	4618      	mov	r0, r3
 800a27c:	f001 f944 	bl	800b508 <xTaskRemoveFromEventList>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d012      	beq.n	800a2ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a286:	4b0d      	ldr	r3, [pc, #52]	@ (800a2bc <xQueueGenericReset+0xd0>)
 800a288:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a28c:	601a      	str	r2, [r3, #0]
 800a28e:	f3bf 8f4f 	dsb	sy
 800a292:	f3bf 8f6f 	isb	sy
 800a296:	e009      	b.n	800a2ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	3310      	adds	r3, #16
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7ff fef5 	bl	800a08c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	3324      	adds	r3, #36	@ 0x24
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7ff fef0 	bl	800a08c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a2ac:	f001 fefe 	bl	800c0ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a2b0:	2301      	movs	r3, #1
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3710      	adds	r7, #16
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	e000ed04 	.word	0xe000ed04

0800a2c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b08e      	sub	sp, #56	@ 0x38
 800a2c4:	af02      	add	r7, sp, #8
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	607a      	str	r2, [r7, #4]
 800a2cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d10b      	bne.n	800a2ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a2d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a2e6:	bf00      	nop
 800a2e8:	bf00      	nop
 800a2ea:	e7fd      	b.n	800a2e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d10b      	bne.n	800a30a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a304:	bf00      	nop
 800a306:	bf00      	nop
 800a308:	e7fd      	b.n	800a306 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d002      	beq.n	800a316 <xQueueGenericCreateStatic+0x56>
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d001      	beq.n	800a31a <xQueueGenericCreateStatic+0x5a>
 800a316:	2301      	movs	r3, #1
 800a318:	e000      	b.n	800a31c <xQueueGenericCreateStatic+0x5c>
 800a31a:	2300      	movs	r3, #0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d10b      	bne.n	800a338 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a324:	f383 8811 	msr	BASEPRI, r3
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	623b      	str	r3, [r7, #32]
}
 800a332:	bf00      	nop
 800a334:	bf00      	nop
 800a336:	e7fd      	b.n	800a334 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d102      	bne.n	800a344 <xQueueGenericCreateStatic+0x84>
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d101      	bne.n	800a348 <xQueueGenericCreateStatic+0x88>
 800a344:	2301      	movs	r3, #1
 800a346:	e000      	b.n	800a34a <xQueueGenericCreateStatic+0x8a>
 800a348:	2300      	movs	r3, #0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d10b      	bne.n	800a366 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a352:	f383 8811 	msr	BASEPRI, r3
 800a356:	f3bf 8f6f 	isb	sy
 800a35a:	f3bf 8f4f 	dsb	sy
 800a35e:	61fb      	str	r3, [r7, #28]
}
 800a360:	bf00      	nop
 800a362:	bf00      	nop
 800a364:	e7fd      	b.n	800a362 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a366:	2348      	movs	r3, #72	@ 0x48
 800a368:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	2b48      	cmp	r3, #72	@ 0x48
 800a36e:	d00b      	beq.n	800a388 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a374:	f383 8811 	msr	BASEPRI, r3
 800a378:	f3bf 8f6f 	isb	sy
 800a37c:	f3bf 8f4f 	dsb	sy
 800a380:	61bb      	str	r3, [r7, #24]
}
 800a382:	bf00      	nop
 800a384:	bf00      	nop
 800a386:	e7fd      	b.n	800a384 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a38c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d00d      	beq.n	800a3ae <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a394:	2201      	movs	r2, #1
 800a396:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a39a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a39e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3a0:	9300      	str	r3, [sp, #0]
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	68b9      	ldr	r1, [r7, #8]
 800a3a8:	68f8      	ldr	r0, [r7, #12]
 800a3aa:	f000 f844 	bl	800a436 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a3ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3730      	adds	r7, #48	@ 0x30
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b08a      	sub	sp, #40	@ 0x28
 800a3bc:	af02      	add	r7, sp, #8
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d10b      	bne.n	800a3e4 <xQueueGenericCreate+0x2c>
	__asm volatile
 800a3cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3d0:	f383 8811 	msr	BASEPRI, r3
 800a3d4:	f3bf 8f6f 	isb	sy
 800a3d8:	f3bf 8f4f 	dsb	sy
 800a3dc:	613b      	str	r3, [r7, #16]
}
 800a3de:	bf00      	nop
 800a3e0:	bf00      	nop
 800a3e2:	e7fd      	b.n	800a3e0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d102      	bne.n	800a3f0 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	61fb      	str	r3, [r7, #28]
 800a3ee:	e004      	b.n	800a3fa <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	68ba      	ldr	r2, [r7, #8]
 800a3f4:	fb02 f303 	mul.w	r3, r2, r3
 800a3f8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	3348      	adds	r3, #72	@ 0x48
 800a3fe:	4618      	mov	r0, r3
 800a400:	f001 ff26 	bl	800c250 <pvPortMalloc>
 800a404:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d00f      	beq.n	800a42c <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	3348      	adds	r3, #72	@ 0x48
 800a410:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	2200      	movs	r2, #0
 800a416:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a41a:	79fa      	ldrb	r2, [r7, #7]
 800a41c:	69bb      	ldr	r3, [r7, #24]
 800a41e:	9300      	str	r3, [sp, #0]
 800a420:	4613      	mov	r3, r2
 800a422:	697a      	ldr	r2, [r7, #20]
 800a424:	68b9      	ldr	r1, [r7, #8]
 800a426:	68f8      	ldr	r0, [r7, #12]
 800a428:	f000 f805 	bl	800a436 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a42c:	69bb      	ldr	r3, [r7, #24]
	}
 800a42e:	4618      	mov	r0, r3
 800a430:	3720      	adds	r7, #32
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a436:	b580      	push	{r7, lr}
 800a438:	b084      	sub	sp, #16
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	60f8      	str	r0, [r7, #12]
 800a43e:	60b9      	str	r1, [r7, #8]
 800a440:	607a      	str	r2, [r7, #4]
 800a442:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d103      	bne.n	800a452 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	69ba      	ldr	r2, [r7, #24]
 800a44e:	601a      	str	r2, [r3, #0]
 800a450:	e002      	b.n	800a458 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a458:	69bb      	ldr	r3, [r7, #24]
 800a45a:	68fa      	ldr	r2, [r7, #12]
 800a45c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a45e:	69bb      	ldr	r3, [r7, #24]
 800a460:	68ba      	ldr	r2, [r7, #8]
 800a462:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a464:	2101      	movs	r1, #1
 800a466:	69b8      	ldr	r0, [r7, #24]
 800a468:	f7ff fec0 	bl	800a1ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a46c:	bf00      	nop
 800a46e:	3710      	adds	r7, #16
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b08e      	sub	sp, #56	@ 0x38
 800a478:	af00      	add	r7, sp, #0
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	607a      	str	r2, [r7, #4]
 800a480:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a482:	2300      	movs	r3, #0
 800a484:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a48a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d10b      	bne.n	800a4a8 <xQueueGenericSend+0x34>
	__asm volatile
 800a490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a494:	f383 8811 	msr	BASEPRI, r3
 800a498:	f3bf 8f6f 	isb	sy
 800a49c:	f3bf 8f4f 	dsb	sy
 800a4a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a4a2:	bf00      	nop
 800a4a4:	bf00      	nop
 800a4a6:	e7fd      	b.n	800a4a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d103      	bne.n	800a4b6 <xQueueGenericSend+0x42>
 800a4ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d101      	bne.n	800a4ba <xQueueGenericSend+0x46>
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e000      	b.n	800a4bc <xQueueGenericSend+0x48>
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d10b      	bne.n	800a4d8 <xQueueGenericSend+0x64>
	__asm volatile
 800a4c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4c4:	f383 8811 	msr	BASEPRI, r3
 800a4c8:	f3bf 8f6f 	isb	sy
 800a4cc:	f3bf 8f4f 	dsb	sy
 800a4d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a4d2:	bf00      	nop
 800a4d4:	bf00      	nop
 800a4d6:	e7fd      	b.n	800a4d4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	2b02      	cmp	r3, #2
 800a4dc:	d103      	bne.n	800a4e6 <xQueueGenericSend+0x72>
 800a4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d101      	bne.n	800a4ea <xQueueGenericSend+0x76>
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e000      	b.n	800a4ec <xQueueGenericSend+0x78>
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d10b      	bne.n	800a508 <xQueueGenericSend+0x94>
	__asm volatile
 800a4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	623b      	str	r3, [r7, #32]
}
 800a502:	bf00      	nop
 800a504:	bf00      	nop
 800a506:	e7fd      	b.n	800a504 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a508:	f001 f9c8 	bl	800b89c <xTaskGetSchedulerState>
 800a50c:	4603      	mov	r3, r0
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d102      	bne.n	800a518 <xQueueGenericSend+0xa4>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d101      	bne.n	800a51c <xQueueGenericSend+0xa8>
 800a518:	2301      	movs	r3, #1
 800a51a:	e000      	b.n	800a51e <xQueueGenericSend+0xaa>
 800a51c:	2300      	movs	r3, #0
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d10b      	bne.n	800a53a <xQueueGenericSend+0xc6>
	__asm volatile
 800a522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a526:	f383 8811 	msr	BASEPRI, r3
 800a52a:	f3bf 8f6f 	isb	sy
 800a52e:	f3bf 8f4f 	dsb	sy
 800a532:	61fb      	str	r3, [r7, #28]
}
 800a534:	bf00      	nop
 800a536:	bf00      	nop
 800a538:	e7fd      	b.n	800a536 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a53a:	f001 fd87 	bl	800c04c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a540:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a546:	429a      	cmp	r2, r3
 800a548:	d302      	bcc.n	800a550 <xQueueGenericSend+0xdc>
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	2b02      	cmp	r3, #2
 800a54e:	d129      	bne.n	800a5a4 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a550:	683a      	ldr	r2, [r7, #0]
 800a552:	68b9      	ldr	r1, [r7, #8]
 800a554:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a556:	f000 fa8f 	bl	800aa78 <prvCopyDataToQueue>
 800a55a:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a55c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a55e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a560:	2b00      	cmp	r3, #0
 800a562:	d010      	beq.n	800a586 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a566:	3324      	adds	r3, #36	@ 0x24
 800a568:	4618      	mov	r0, r3
 800a56a:	f000 ffcd 	bl	800b508 <xTaskRemoveFromEventList>
 800a56e:	4603      	mov	r3, r0
 800a570:	2b00      	cmp	r3, #0
 800a572:	d013      	beq.n	800a59c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a574:	4b3f      	ldr	r3, [pc, #252]	@ (800a674 <xQueueGenericSend+0x200>)
 800a576:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a57a:	601a      	str	r2, [r3, #0]
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	f3bf 8f6f 	isb	sy
 800a584:	e00a      	b.n	800a59c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d007      	beq.n	800a59c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a58c:	4b39      	ldr	r3, [pc, #228]	@ (800a674 <xQueueGenericSend+0x200>)
 800a58e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a592:	601a      	str	r2, [r3, #0]
 800a594:	f3bf 8f4f 	dsb	sy
 800a598:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a59c:	f001 fd86 	bl	800c0ac <vPortExitCritical>
				return pdPASS;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	e063      	b.n	800a66c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d103      	bne.n	800a5b2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a5aa:	f001 fd7f 	bl	800c0ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	e05c      	b.n	800a66c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d106      	bne.n	800a5c6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a5b8:	f107 0314 	add.w	r3, r7, #20
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f001 f807 	bl	800b5d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a5c6:	f001 fd71 	bl	800c0ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a5ca:	f000 fdab 	bl	800b124 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a5ce:	f001 fd3d 	bl	800c04c <vPortEnterCritical>
 800a5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a5d8:	b25b      	sxtb	r3, r3
 800a5da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5de:	d103      	bne.n	800a5e8 <xQueueGenericSend+0x174>
 800a5e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a5e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a5ee:	b25b      	sxtb	r3, r3
 800a5f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5f4:	d103      	bne.n	800a5fe <xQueueGenericSend+0x18a>
 800a5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a5fe:	f001 fd55 	bl	800c0ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a602:	1d3a      	adds	r2, r7, #4
 800a604:	f107 0314 	add.w	r3, r7, #20
 800a608:	4611      	mov	r1, r2
 800a60a:	4618      	mov	r0, r3
 800a60c:	f000 fff6 	bl	800b5fc <xTaskCheckForTimeOut>
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d124      	bne.n	800a660 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a616:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a618:	f000 fb26 	bl	800ac68 <prvIsQueueFull>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d018      	beq.n	800a654 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a624:	3310      	adds	r3, #16
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	4611      	mov	r1, r2
 800a62a:	4618      	mov	r0, r3
 800a62c:	f000 ff46 	bl	800b4bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a630:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a632:	f000 fab1 	bl	800ab98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a636:	f000 fd83 	bl	800b140 <xTaskResumeAll>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f47f af7c 	bne.w	800a53a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a642:	4b0c      	ldr	r3, [pc, #48]	@ (800a674 <xQueueGenericSend+0x200>)
 800a644:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a648:	601a      	str	r2, [r3, #0]
 800a64a:	f3bf 8f4f 	dsb	sy
 800a64e:	f3bf 8f6f 	isb	sy
 800a652:	e772      	b.n	800a53a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a654:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a656:	f000 fa9f 	bl	800ab98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a65a:	f000 fd71 	bl	800b140 <xTaskResumeAll>
 800a65e:	e76c      	b.n	800a53a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a660:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a662:	f000 fa99 	bl	800ab98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a666:	f000 fd6b 	bl	800b140 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a66a:	2300      	movs	r3, #0
		}
	}
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3738      	adds	r7, #56	@ 0x38
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	e000ed04 	.word	0xe000ed04

0800a678 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b08e      	sub	sp, #56	@ 0x38
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
 800a684:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d10b      	bne.n	800a6a8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a694:	f383 8811 	msr	BASEPRI, r3
 800a698:	f3bf 8f6f 	isb	sy
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a6a2:	bf00      	nop
 800a6a4:	bf00      	nop
 800a6a6:	e7fd      	b.n	800a6a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d103      	bne.n	800a6b6 <xQueueGenericSendFromISR+0x3e>
 800a6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d101      	bne.n	800a6ba <xQueueGenericSendFromISR+0x42>
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e000      	b.n	800a6bc <xQueueGenericSendFromISR+0x44>
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d10b      	bne.n	800a6d8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a6c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6c4:	f383 8811 	msr	BASEPRI, r3
 800a6c8:	f3bf 8f6f 	isb	sy
 800a6cc:	f3bf 8f4f 	dsb	sy
 800a6d0:	623b      	str	r3, [r7, #32]
}
 800a6d2:	bf00      	nop
 800a6d4:	bf00      	nop
 800a6d6:	e7fd      	b.n	800a6d4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	2b02      	cmp	r3, #2
 800a6dc:	d103      	bne.n	800a6e6 <xQueueGenericSendFromISR+0x6e>
 800a6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6e2:	2b01      	cmp	r3, #1
 800a6e4:	d101      	bne.n	800a6ea <xQueueGenericSendFromISR+0x72>
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	e000      	b.n	800a6ec <xQueueGenericSendFromISR+0x74>
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d10b      	bne.n	800a708 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a6f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f4:	f383 8811 	msr	BASEPRI, r3
 800a6f8:	f3bf 8f6f 	isb	sy
 800a6fc:	f3bf 8f4f 	dsb	sy
 800a700:	61fb      	str	r3, [r7, #28]
}
 800a702:	bf00      	nop
 800a704:	bf00      	nop
 800a706:	e7fd      	b.n	800a704 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a708:	f001 fd62 	bl	800c1d0 <vPortValidateInterruptPriority>
	__asm volatile
 800a70c:	f3ef 8211 	mrs	r2, BASEPRI
 800a710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a714:	f383 8811 	msr	BASEPRI, r3
 800a718:	f3bf 8f6f 	isb	sy
 800a71c:	f3bf 8f4f 	dsb	sy
 800a720:	61ba      	str	r2, [r7, #24]
 800a722:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a724:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a726:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a72a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a72c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a72e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a730:	429a      	cmp	r2, r3
 800a732:	d302      	bcc.n	800a73a <xQueueGenericSendFromISR+0xc2>
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	2b02      	cmp	r3, #2
 800a738:	d12c      	bne.n	800a794 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a740:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a744:	683a      	ldr	r2, [r7, #0]
 800a746:	68b9      	ldr	r1, [r7, #8]
 800a748:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a74a:	f000 f995 	bl	800aa78 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a74e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800a752:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a756:	d112      	bne.n	800a77e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a75a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d016      	beq.n	800a78e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a762:	3324      	adds	r3, #36	@ 0x24
 800a764:	4618      	mov	r0, r3
 800a766:	f000 fecf 	bl	800b508 <xTaskRemoveFromEventList>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00e      	beq.n	800a78e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d00b      	beq.n	800a78e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2201      	movs	r2, #1
 800a77a:	601a      	str	r2, [r3, #0]
 800a77c:	e007      	b.n	800a78e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a77e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a782:	3301      	adds	r3, #1
 800a784:	b2db      	uxtb	r3, r3
 800a786:	b25a      	sxtb	r2, r3
 800a788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a78e:	2301      	movs	r3, #1
 800a790:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800a792:	e001      	b.n	800a798 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a794:	2300      	movs	r3, #0
 800a796:	637b      	str	r3, [r7, #52]	@ 0x34
 800a798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a79a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	f383 8811 	msr	BASEPRI, r3
}
 800a7a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a7a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3738      	adds	r7, #56	@ 0x38
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
	...

0800a7b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b08c      	sub	sp, #48	@ 0x30
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	60b9      	str	r1, [r7, #8]
 800a7ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a7c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d10b      	bne.n	800a7e2 <xQueueReceive+0x32>
	__asm volatile
 800a7ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ce:	f383 8811 	msr	BASEPRI, r3
 800a7d2:	f3bf 8f6f 	isb	sy
 800a7d6:	f3bf 8f4f 	dsb	sy
 800a7da:	623b      	str	r3, [r7, #32]
}
 800a7dc:	bf00      	nop
 800a7de:	bf00      	nop
 800a7e0:	e7fd      	b.n	800a7de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d103      	bne.n	800a7f0 <xQueueReceive+0x40>
 800a7e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d101      	bne.n	800a7f4 <xQueueReceive+0x44>
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e000      	b.n	800a7f6 <xQueueReceive+0x46>
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d10b      	bne.n	800a812 <xQueueReceive+0x62>
	__asm volatile
 800a7fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7fe:	f383 8811 	msr	BASEPRI, r3
 800a802:	f3bf 8f6f 	isb	sy
 800a806:	f3bf 8f4f 	dsb	sy
 800a80a:	61fb      	str	r3, [r7, #28]
}
 800a80c:	bf00      	nop
 800a80e:	bf00      	nop
 800a810:	e7fd      	b.n	800a80e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a812:	f001 f843 	bl	800b89c <xTaskGetSchedulerState>
 800a816:	4603      	mov	r3, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d102      	bne.n	800a822 <xQueueReceive+0x72>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d101      	bne.n	800a826 <xQueueReceive+0x76>
 800a822:	2301      	movs	r3, #1
 800a824:	e000      	b.n	800a828 <xQueueReceive+0x78>
 800a826:	2300      	movs	r3, #0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d10b      	bne.n	800a844 <xQueueReceive+0x94>
	__asm volatile
 800a82c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a830:	f383 8811 	msr	BASEPRI, r3
 800a834:	f3bf 8f6f 	isb	sy
 800a838:	f3bf 8f4f 	dsb	sy
 800a83c:	61bb      	str	r3, [r7, #24]
}
 800a83e:	bf00      	nop
 800a840:	bf00      	nop
 800a842:	e7fd      	b.n	800a840 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a844:	f001 fc02 	bl	800c04c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a84a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a84c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a84e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a850:	2b00      	cmp	r3, #0
 800a852:	d01f      	beq.n	800a894 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a854:	68b9      	ldr	r1, [r7, #8]
 800a856:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a858:	f000 f978 	bl	800ab4c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a85e:	1e5a      	subs	r2, r3, #1
 800a860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a862:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a866:	691b      	ldr	r3, [r3, #16]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d00f      	beq.n	800a88c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a86e:	3310      	adds	r3, #16
 800a870:	4618      	mov	r0, r3
 800a872:	f000 fe49 	bl	800b508 <xTaskRemoveFromEventList>
 800a876:	4603      	mov	r3, r0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d007      	beq.n	800a88c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a87c:	4b3c      	ldr	r3, [pc, #240]	@ (800a970 <xQueueReceive+0x1c0>)
 800a87e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a882:	601a      	str	r2, [r3, #0]
 800a884:	f3bf 8f4f 	dsb	sy
 800a888:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a88c:	f001 fc0e 	bl	800c0ac <vPortExitCritical>
				return pdPASS;
 800a890:	2301      	movs	r3, #1
 800a892:	e069      	b.n	800a968 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d103      	bne.n	800a8a2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a89a:	f001 fc07 	bl	800c0ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	e062      	b.n	800a968 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a8a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d106      	bne.n	800a8b6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a8a8:	f107 0310 	add.w	r3, r7, #16
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f000 fe8f 	bl	800b5d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a8b6:	f001 fbf9 	bl	800c0ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a8ba:	f000 fc33 	bl	800b124 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a8be:	f001 fbc5 	bl	800c04c <vPortEnterCritical>
 800a8c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a8c8:	b25b      	sxtb	r3, r3
 800a8ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ce:	d103      	bne.n	800a8d8 <xQueueReceive+0x128>
 800a8d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a8d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8de:	b25b      	sxtb	r3, r3
 800a8e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8e4:	d103      	bne.n	800a8ee <xQueueReceive+0x13e>
 800a8e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a8ee:	f001 fbdd 	bl	800c0ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8f2:	1d3a      	adds	r2, r7, #4
 800a8f4:	f107 0310 	add.w	r3, r7, #16
 800a8f8:	4611      	mov	r1, r2
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f000 fe7e 	bl	800b5fc <xTaskCheckForTimeOut>
 800a900:	4603      	mov	r3, r0
 800a902:	2b00      	cmp	r3, #0
 800a904:	d123      	bne.n	800a94e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a906:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a908:	f000 f998 	bl	800ac3c <prvIsQueueEmpty>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d017      	beq.n	800a942 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a914:	3324      	adds	r3, #36	@ 0x24
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	4611      	mov	r1, r2
 800a91a:	4618      	mov	r0, r3
 800a91c:	f000 fdce 	bl	800b4bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a920:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a922:	f000 f939 	bl	800ab98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a926:	f000 fc0b 	bl	800b140 <xTaskResumeAll>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d189      	bne.n	800a844 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a930:	4b0f      	ldr	r3, [pc, #60]	@ (800a970 <xQueueReceive+0x1c0>)
 800a932:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a936:	601a      	str	r2, [r3, #0]
 800a938:	f3bf 8f4f 	dsb	sy
 800a93c:	f3bf 8f6f 	isb	sy
 800a940:	e780      	b.n	800a844 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a942:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a944:	f000 f928 	bl	800ab98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a948:	f000 fbfa 	bl	800b140 <xTaskResumeAll>
 800a94c:	e77a      	b.n	800a844 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a94e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a950:	f000 f922 	bl	800ab98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a954:	f000 fbf4 	bl	800b140 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a958:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a95a:	f000 f96f 	bl	800ac3c <prvIsQueueEmpty>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b00      	cmp	r3, #0
 800a962:	f43f af6f 	beq.w	800a844 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a966:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3730      	adds	r7, #48	@ 0x30
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}
 800a970:	e000ed04 	.word	0xe000ed04

0800a974 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b08e      	sub	sp, #56	@ 0x38
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a986:	2b00      	cmp	r3, #0
 800a988:	d10b      	bne.n	800a9a2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a98a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a98e:	f383 8811 	msr	BASEPRI, r3
 800a992:	f3bf 8f6f 	isb	sy
 800a996:	f3bf 8f4f 	dsb	sy
 800a99a:	623b      	str	r3, [r7, #32]
}
 800a99c:	bf00      	nop
 800a99e:	bf00      	nop
 800a9a0:	e7fd      	b.n	800a99e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d103      	bne.n	800a9b0 <xQueueReceiveFromISR+0x3c>
 800a9a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d101      	bne.n	800a9b4 <xQueueReceiveFromISR+0x40>
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e000      	b.n	800a9b6 <xQueueReceiveFromISR+0x42>
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d10b      	bne.n	800a9d2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a9ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9be:	f383 8811 	msr	BASEPRI, r3
 800a9c2:	f3bf 8f6f 	isb	sy
 800a9c6:	f3bf 8f4f 	dsb	sy
 800a9ca:	61fb      	str	r3, [r7, #28]
}
 800a9cc:	bf00      	nop
 800a9ce:	bf00      	nop
 800a9d0:	e7fd      	b.n	800a9ce <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9d2:	f001 fbfd 	bl	800c1d0 <vPortValidateInterruptPriority>
	__asm volatile
 800a9d6:	f3ef 8211 	mrs	r2, BASEPRI
 800a9da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9de:	f383 8811 	msr	BASEPRI, r3
 800a9e2:	f3bf 8f6f 	isb	sy
 800a9e6:	f3bf 8f4f 	dsb	sy
 800a9ea:	61ba      	str	r2, [r7, #24]
 800a9ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a9ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a9f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9f6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a9f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d02f      	beq.n	800aa5e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa08:	68b9      	ldr	r1, [r7, #8]
 800aa0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa0c:	f000 f89e 	bl	800ab4c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa12:	1e5a      	subs	r2, r3, #1
 800aa14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa16:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800aa18:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800aa1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa20:	d112      	bne.n	800aa48 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa24:	691b      	ldr	r3, [r3, #16]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d016      	beq.n	800aa58 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa2c:	3310      	adds	r3, #16
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f000 fd6a 	bl	800b508 <xTaskRemoveFromEventList>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d00e      	beq.n	800aa58 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00b      	beq.n	800aa58 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2201      	movs	r2, #1
 800aa44:	601a      	str	r2, [r3, #0]
 800aa46:	e007      	b.n	800aa58 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800aa48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	b25a      	sxtb	r2, r3
 800aa52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa5c:	e001      	b.n	800aa62 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa64:	613b      	str	r3, [r7, #16]
	__asm volatile
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	f383 8811 	msr	BASEPRI, r3
}
 800aa6c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3738      	adds	r7, #56	@ 0x38
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b086      	sub	sp, #24
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aa84:	2300      	movs	r3, #0
 800aa86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d10d      	bne.n	800aab2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d14d      	bne.n	800ab3a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f000 ff18 	bl	800b8d8 <xTaskPriorityDisinherit>
 800aaa8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2200      	movs	r2, #0
 800aaae:	605a      	str	r2, [r3, #4]
 800aab0:	e043      	b.n	800ab3a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d119      	bne.n	800aaec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6898      	ldr	r0, [r3, #8]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aac0:	461a      	mov	r2, r3
 800aac2:	68b9      	ldr	r1, [r7, #8]
 800aac4:	f004 f9d3 	bl	800ee6e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	689a      	ldr	r2, [r3, #8]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aad0:	441a      	add	r2, r3
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	689a      	ldr	r2, [r3, #8]
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	429a      	cmp	r2, r3
 800aae0:	d32b      	bcc.n	800ab3a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	609a      	str	r2, [r3, #8]
 800aaea:	e026      	b.n	800ab3a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	68d8      	ldr	r0, [r3, #12]
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	68b9      	ldr	r1, [r7, #8]
 800aaf8:	f004 f9b9 	bl	800ee6e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	68da      	ldr	r2, [r3, #12]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab04:	425b      	negs	r3, r3
 800ab06:	441a      	add	r2, r3
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	68da      	ldr	r2, [r3, #12]
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d207      	bcs.n	800ab28 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	685a      	ldr	r2, [r3, #4]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab20:	425b      	negs	r3, r3
 800ab22:	441a      	add	r2, r3
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2b02      	cmp	r3, #2
 800ab2c:	d105      	bne.n	800ab3a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d002      	beq.n	800ab3a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	3b01      	subs	r3, #1
 800ab38:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	1c5a      	adds	r2, r3, #1
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ab42:	697b      	ldr	r3, [r7, #20]
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3718      	adds	r7, #24
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d018      	beq.n	800ab90 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	68da      	ldr	r2, [r3, #12]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab66:	441a      	add	r2, r3
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	68da      	ldr	r2, [r3, #12]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d303      	bcc.n	800ab80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	68d9      	ldr	r1, [r3, #12]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab88:	461a      	mov	r2, r3
 800ab8a:	6838      	ldr	r0, [r7, #0]
 800ab8c:	f004 f96f 	bl	800ee6e <memcpy>
	}
}
 800ab90:	bf00      	nop
 800ab92:	3708      	adds	r7, #8
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aba0:	f001 fa54 	bl	800c04c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800abaa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abac:	e011      	b.n	800abd2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d012      	beq.n	800abdc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	3324      	adds	r3, #36	@ 0x24
 800abba:	4618      	mov	r0, r3
 800abbc:	f000 fca4 	bl	800b508 <xTaskRemoveFromEventList>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d001      	beq.n	800abca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800abc6:	f000 fd7d 	bl	800b6c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800abca:	7bfb      	ldrb	r3, [r7, #15]
 800abcc:	3b01      	subs	r3, #1
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	dce9      	bgt.n	800abae <prvUnlockQueue+0x16>
 800abda:	e000      	b.n	800abde <prvUnlockQueue+0x46>
					break;
 800abdc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	22ff      	movs	r2, #255	@ 0xff
 800abe2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800abe6:	f001 fa61 	bl	800c0ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800abea:	f001 fa2f 	bl	800c04c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800abf4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800abf6:	e011      	b.n	800ac1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	691b      	ldr	r3, [r3, #16]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d012      	beq.n	800ac26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	3310      	adds	r3, #16
 800ac04:	4618      	mov	r0, r3
 800ac06:	f000 fc7f 	bl	800b508 <xTaskRemoveFromEventList>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d001      	beq.n	800ac14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ac10:	f000 fd58 	bl	800b6c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ac14:	7bbb      	ldrb	r3, [r7, #14]
 800ac16:	3b01      	subs	r3, #1
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	dce9      	bgt.n	800abf8 <prvUnlockQueue+0x60>
 800ac24:	e000      	b.n	800ac28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ac26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	22ff      	movs	r2, #255	@ 0xff
 800ac2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ac30:	f001 fa3c 	bl	800c0ac <vPortExitCritical>
}
 800ac34:	bf00      	nop
 800ac36:	3710      	adds	r7, #16
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b084      	sub	sp, #16
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac44:	f001 fa02 	bl	800c04c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d102      	bne.n	800ac56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ac50:	2301      	movs	r3, #1
 800ac52:	60fb      	str	r3, [r7, #12]
 800ac54:	e001      	b.n	800ac5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ac56:	2300      	movs	r3, #0
 800ac58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac5a:	f001 fa27 	bl	800c0ac <vPortExitCritical>

	return xReturn;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3710      	adds	r7, #16
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac70:	f001 f9ec 	bl	800c04c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d102      	bne.n	800ac86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ac80:	2301      	movs	r3, #1
 800ac82:	60fb      	str	r3, [r7, #12]
 800ac84:	e001      	b.n	800ac8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ac86:	2300      	movs	r3, #0
 800ac88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac8a:	f001 fa0f 	bl	800c0ac <vPortExitCritical>

	return xReturn;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3710      	adds	r7, #16
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b08e      	sub	sp, #56	@ 0x38
 800ac9c:	af04      	add	r7, sp, #16
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	60b9      	str	r1, [r7, #8]
 800aca2:	607a      	str	r2, [r7, #4]
 800aca4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d10b      	bne.n	800acc4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800acac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acb0:	f383 8811 	msr	BASEPRI, r3
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	f3bf 8f4f 	dsb	sy
 800acbc:	623b      	str	r3, [r7, #32]
}
 800acbe:	bf00      	nop
 800acc0:	bf00      	nop
 800acc2:	e7fd      	b.n	800acc0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800acc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d10b      	bne.n	800ace2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800acca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acce:	f383 8811 	msr	BASEPRI, r3
 800acd2:	f3bf 8f6f 	isb	sy
 800acd6:	f3bf 8f4f 	dsb	sy
 800acda:	61fb      	str	r3, [r7, #28]
}
 800acdc:	bf00      	nop
 800acde:	bf00      	nop
 800ace0:	e7fd      	b.n	800acde <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ace2:	23b0      	movs	r3, #176	@ 0xb0
 800ace4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	2bb0      	cmp	r3, #176	@ 0xb0
 800acea:	d00b      	beq.n	800ad04 <xTaskCreateStatic+0x6c>
	__asm volatile
 800acec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acf0:	f383 8811 	msr	BASEPRI, r3
 800acf4:	f3bf 8f6f 	isb	sy
 800acf8:	f3bf 8f4f 	dsb	sy
 800acfc:	61bb      	str	r3, [r7, #24]
}
 800acfe:	bf00      	nop
 800ad00:	bf00      	nop
 800ad02:	e7fd      	b.n	800ad00 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ad04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d01e      	beq.n	800ad48 <xTaskCreateStatic+0xb0>
 800ad0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d01b      	beq.n	800ad48 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad12:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ad14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ad18:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ad1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad1c:	2202      	movs	r2, #2
 800ad1e:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ad22:	2300      	movs	r3, #0
 800ad24:	9303      	str	r3, [sp, #12]
 800ad26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad28:	9302      	str	r3, [sp, #8]
 800ad2a:	f107 0314 	add.w	r3, r7, #20
 800ad2e:	9301      	str	r3, [sp, #4]
 800ad30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad32:	9300      	str	r3, [sp, #0]
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	68b9      	ldr	r1, [r7, #8]
 800ad3a:	68f8      	ldr	r0, [r7, #12]
 800ad3c:	f000 f850 	bl	800ade0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ad42:	f000 f8e5 	bl	800af10 <prvAddNewTaskToReadyList>
 800ad46:	e001      	b.n	800ad4c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ad4c:	697b      	ldr	r3, [r7, #20]
	}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3728      	adds	r7, #40	@ 0x28
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b08c      	sub	sp, #48	@ 0x30
 800ad5a:	af04      	add	r7, sp, #16
 800ad5c:	60f8      	str	r0, [r7, #12]
 800ad5e:	60b9      	str	r1, [r7, #8]
 800ad60:	603b      	str	r3, [r7, #0]
 800ad62:	4613      	mov	r3, r2
 800ad64:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad66:	88fb      	ldrh	r3, [r7, #6]
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f001 fa70 	bl	800c250 <pvPortMalloc>
 800ad70:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d00e      	beq.n	800ad96 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800ad78:	20b0      	movs	r0, #176	@ 0xb0
 800ad7a:	f001 fa69 	bl	800c250 <pvPortMalloc>
 800ad7e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ad80:	69fb      	ldr	r3, [r7, #28]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d003      	beq.n	800ad8e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	697a      	ldr	r2, [r7, #20]
 800ad8a:	631a      	str	r2, [r3, #48]	@ 0x30
 800ad8c:	e005      	b.n	800ad9a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ad8e:	6978      	ldr	r0, [r7, #20]
 800ad90:	f001 fb26 	bl	800c3e0 <vPortFree>
 800ad94:	e001      	b.n	800ad9a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ad96:	2300      	movs	r3, #0
 800ad98:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ad9a:	69fb      	ldr	r3, [r7, #28]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d017      	beq.n	800add0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	2200      	movs	r2, #0
 800ada4:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ada8:	88fa      	ldrh	r2, [r7, #6]
 800adaa:	2300      	movs	r3, #0
 800adac:	9303      	str	r3, [sp, #12]
 800adae:	69fb      	ldr	r3, [r7, #28]
 800adb0:	9302      	str	r3, [sp, #8]
 800adb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adb4:	9301      	str	r3, [sp, #4]
 800adb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb8:	9300      	str	r3, [sp, #0]
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	68b9      	ldr	r1, [r7, #8]
 800adbe:	68f8      	ldr	r0, [r7, #12]
 800adc0:	f000 f80e 	bl	800ade0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800adc4:	69f8      	ldr	r0, [r7, #28]
 800adc6:	f000 f8a3 	bl	800af10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800adca:	2301      	movs	r3, #1
 800adcc:	61bb      	str	r3, [r7, #24]
 800adce:	e002      	b.n	800add6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800add0:	f04f 33ff 	mov.w	r3, #4294967295
 800add4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800add6:	69bb      	ldr	r3, [r7, #24]
	}
 800add8:	4618      	mov	r0, r3
 800adda:	3720      	adds	r7, #32
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b088      	sub	sp, #32
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	607a      	str	r2, [r7, #4]
 800adec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800adee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800adf8:	3b01      	subs	r3, #1
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	4413      	add	r3, r2
 800adfe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	f023 0307 	bic.w	r3, r3, #7
 800ae06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ae08:	69bb      	ldr	r3, [r7, #24]
 800ae0a:	f003 0307 	and.w	r3, r3, #7
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d00b      	beq.n	800ae2a <prvInitialiseNewTask+0x4a>
	__asm volatile
 800ae12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae16:	f383 8811 	msr	BASEPRI, r3
 800ae1a:	f3bf 8f6f 	isb	sy
 800ae1e:	f3bf 8f4f 	dsb	sy
 800ae22:	617b      	str	r3, [r7, #20]
}
 800ae24:	bf00      	nop
 800ae26:	bf00      	nop
 800ae28:	e7fd      	b.n	800ae26 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	61fb      	str	r3, [r7, #28]
 800ae2e:	e012      	b.n	800ae56 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ae30:	68ba      	ldr	r2, [r7, #8]
 800ae32:	69fb      	ldr	r3, [r7, #28]
 800ae34:	4413      	add	r3, r2
 800ae36:	7819      	ldrb	r1, [r3, #0]
 800ae38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae3a:	69fb      	ldr	r3, [r7, #28]
 800ae3c:	4413      	add	r3, r2
 800ae3e:	3334      	adds	r3, #52	@ 0x34
 800ae40:	460a      	mov	r2, r1
 800ae42:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800ae44:	68ba      	ldr	r2, [r7, #8]
 800ae46:	69fb      	ldr	r3, [r7, #28]
 800ae48:	4413      	add	r3, r2
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d006      	beq.n	800ae5e <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	3301      	adds	r3, #1
 800ae54:	61fb      	str	r3, [r7, #28]
 800ae56:	69fb      	ldr	r3, [r7, #28]
 800ae58:	2b1f      	cmp	r3, #31
 800ae5a:	d9e9      	bls.n	800ae30 <prvInitialiseNewTask+0x50>
 800ae5c:	e000      	b.n	800ae60 <prvInitialiseNewTask+0x80>
		{
			break;
 800ae5e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ae60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae62:	2200      	movs	r2, #0
 800ae64:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ae68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae6a:	2b06      	cmp	r3, #6
 800ae6c:	d901      	bls.n	800ae72 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ae6e:	2306      	movs	r3, #6
 800ae70:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ae72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae76:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ae78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae7c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->uxMutexesHeld = 0;
 800ae7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae80:	2200      	movs	r2, #0
 800ae82:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ae84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae86:	3304      	adds	r3, #4
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f7ff f91e 	bl	800a0ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ae8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae90:	3318      	adds	r3, #24
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7ff f919 	bl	800a0ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ae98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae9c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aea0:	f1c3 0207 	rsb	r2, r3, #7
 800aea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aea6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aeac:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aeae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aeb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec0:	335c      	adds	r3, #92	@ 0x5c
 800aec2:	224c      	movs	r2, #76	@ 0x4c
 800aec4:	2100      	movs	r1, #0
 800aec6:	4618      	mov	r0, r3
 800aec8:	f003 f8cd 	bl	800e066 <memset>
 800aecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aece:	4a0d      	ldr	r2, [pc, #52]	@ (800af04 <prvInitialiseNewTask+0x124>)
 800aed0:	661a      	str	r2, [r3, #96]	@ 0x60
 800aed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed4:	4a0c      	ldr	r2, [pc, #48]	@ (800af08 <prvInitialiseNewTask+0x128>)
 800aed6:	665a      	str	r2, [r3, #100]	@ 0x64
 800aed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeda:	4a0c      	ldr	r2, [pc, #48]	@ (800af0c <prvInitialiseNewTask+0x12c>)
 800aedc:	669a      	str	r2, [r3, #104]	@ 0x68
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aede:	683a      	ldr	r2, [r7, #0]
 800aee0:	68f9      	ldr	r1, [r7, #12]
 800aee2:	69b8      	ldr	r0, [r7, #24]
 800aee4:	f000 ffc4 	bl	800be70 <pxPortInitialiseStack>
 800aee8:	4602      	mov	r2, r0
 800aeea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeec:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800aeee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d002      	beq.n	800aefa <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aef6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aef8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aefa:	bf00      	nop
 800aefc:	3720      	adds	r7, #32
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	20005a0c 	.word	0x20005a0c
 800af08:	20005a74 	.word	0x20005a74
 800af0c:	20005adc 	.word	0x20005adc

0800af10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b082      	sub	sp, #8
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800af18:	f001 f898 	bl	800c04c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800af1c:	4b2a      	ldr	r3, [pc, #168]	@ (800afc8 <prvAddNewTaskToReadyList+0xb8>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	3301      	adds	r3, #1
 800af22:	4a29      	ldr	r2, [pc, #164]	@ (800afc8 <prvAddNewTaskToReadyList+0xb8>)
 800af24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800af26:	4b29      	ldr	r3, [pc, #164]	@ (800afcc <prvAddNewTaskToReadyList+0xbc>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d109      	bne.n	800af42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800af2e:	4a27      	ldr	r2, [pc, #156]	@ (800afcc <prvAddNewTaskToReadyList+0xbc>)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800af34:	4b24      	ldr	r3, [pc, #144]	@ (800afc8 <prvAddNewTaskToReadyList+0xb8>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d110      	bne.n	800af5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800af3c:	f000 fbe6 	bl	800b70c <prvInitialiseTaskLists>
 800af40:	e00d      	b.n	800af5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800af42:	4b23      	ldr	r3, [pc, #140]	@ (800afd0 <prvAddNewTaskToReadyList+0xc0>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d109      	bne.n	800af5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800af4a:	4b20      	ldr	r3, [pc, #128]	@ (800afcc <prvAddNewTaskToReadyList+0xbc>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af54:	429a      	cmp	r2, r3
 800af56:	d802      	bhi.n	800af5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800af58:	4a1c      	ldr	r2, [pc, #112]	@ (800afcc <prvAddNewTaskToReadyList+0xbc>)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800af5e:	4b1d      	ldr	r3, [pc, #116]	@ (800afd4 <prvAddNewTaskToReadyList+0xc4>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	3301      	adds	r3, #1
 800af64:	4a1b      	ldr	r2, [pc, #108]	@ (800afd4 <prvAddNewTaskToReadyList+0xc4>)
 800af66:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af6c:	2201      	movs	r2, #1
 800af6e:	409a      	lsls	r2, r3
 800af70:	4b19      	ldr	r3, [pc, #100]	@ (800afd8 <prvAddNewTaskToReadyList+0xc8>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4313      	orrs	r3, r2
 800af76:	4a18      	ldr	r2, [pc, #96]	@ (800afd8 <prvAddNewTaskToReadyList+0xc8>)
 800af78:	6013      	str	r3, [r2, #0]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af7e:	4613      	mov	r3, r2
 800af80:	009b      	lsls	r3, r3, #2
 800af82:	4413      	add	r3, r2
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	4a15      	ldr	r2, [pc, #84]	@ (800afdc <prvAddNewTaskToReadyList+0xcc>)
 800af88:	441a      	add	r2, r3
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	3304      	adds	r3, #4
 800af8e:	4619      	mov	r1, r3
 800af90:	4610      	mov	r0, r2
 800af92:	f7ff f8a6 	bl	800a0e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800af96:	f001 f889 	bl	800c0ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800af9a:	4b0d      	ldr	r3, [pc, #52]	@ (800afd0 <prvAddNewTaskToReadyList+0xc0>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d00e      	beq.n	800afc0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800afa2:	4b0a      	ldr	r3, [pc, #40]	@ (800afcc <prvAddNewTaskToReadyList+0xbc>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afac:	429a      	cmp	r2, r3
 800afae:	d207      	bcs.n	800afc0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800afb0:	4b0b      	ldr	r3, [pc, #44]	@ (800afe0 <prvAddNewTaskToReadyList+0xd0>)
 800afb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afb6:	601a      	str	r2, [r3, #0]
 800afb8:	f3bf 8f4f 	dsb	sy
 800afbc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afc0:	bf00      	nop
 800afc2:	3708      	adds	r7, #8
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	200009b8 	.word	0x200009b8
 800afcc:	200008b8 	.word	0x200008b8
 800afd0:	200009c4 	.word	0x200009c4
 800afd4:	200009d4 	.word	0x200009d4
 800afd8:	200009c0 	.word	0x200009c0
 800afdc:	200008bc 	.word	0x200008bc
 800afe0:	e000ed04 	.word	0xe000ed04

0800afe4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800afec:	2300      	movs	r3, #0
 800afee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d018      	beq.n	800b028 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aff6:	4b14      	ldr	r3, [pc, #80]	@ (800b048 <vTaskDelay+0x64>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d00b      	beq.n	800b016 <vTaskDelay+0x32>
	__asm volatile
 800affe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b002:	f383 8811 	msr	BASEPRI, r3
 800b006:	f3bf 8f6f 	isb	sy
 800b00a:	f3bf 8f4f 	dsb	sy
 800b00e:	60bb      	str	r3, [r7, #8]
}
 800b010:	bf00      	nop
 800b012:	bf00      	nop
 800b014:	e7fd      	b.n	800b012 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b016:	f000 f885 	bl	800b124 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b01a:	2100      	movs	r1, #0
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 fec1 	bl	800bda4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b022:	f000 f88d 	bl	800b140 <xTaskResumeAll>
 800b026:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d107      	bne.n	800b03e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b02e:	4b07      	ldr	r3, [pc, #28]	@ (800b04c <vTaskDelay+0x68>)
 800b030:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b034:	601a      	str	r2, [r3, #0]
 800b036:	f3bf 8f4f 	dsb	sy
 800b03a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b03e:	bf00      	nop
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	200009e0 	.word	0x200009e0
 800b04c:	e000ed04 	.word	0xe000ed04

0800b050 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b08a      	sub	sp, #40	@ 0x28
 800b054:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b056:	2300      	movs	r3, #0
 800b058:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b05a:	2300      	movs	r3, #0
 800b05c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b05e:	463a      	mov	r2, r7
 800b060:	1d39      	adds	r1, r7, #4
 800b062:	f107 0308 	add.w	r3, r7, #8
 800b066:	4618      	mov	r0, r3
 800b068:	f7f6 ff72 	bl	8001f50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b06c:	6839      	ldr	r1, [r7, #0]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	68ba      	ldr	r2, [r7, #8]
 800b072:	9202      	str	r2, [sp, #8]
 800b074:	9301      	str	r3, [sp, #4]
 800b076:	2300      	movs	r3, #0
 800b078:	9300      	str	r3, [sp, #0]
 800b07a:	2300      	movs	r3, #0
 800b07c:	460a      	mov	r2, r1
 800b07e:	4921      	ldr	r1, [pc, #132]	@ (800b104 <vTaskStartScheduler+0xb4>)
 800b080:	4821      	ldr	r0, [pc, #132]	@ (800b108 <vTaskStartScheduler+0xb8>)
 800b082:	f7ff fe09 	bl	800ac98 <xTaskCreateStatic>
 800b086:	4603      	mov	r3, r0
 800b088:	4a20      	ldr	r2, [pc, #128]	@ (800b10c <vTaskStartScheduler+0xbc>)
 800b08a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b08c:	4b1f      	ldr	r3, [pc, #124]	@ (800b10c <vTaskStartScheduler+0xbc>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d002      	beq.n	800b09a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b094:	2301      	movs	r3, #1
 800b096:	617b      	str	r3, [r7, #20]
 800b098:	e001      	b.n	800b09e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b09a:	2300      	movs	r3, #0
 800b09c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d11b      	bne.n	800b0dc <vTaskStartScheduler+0x8c>
	__asm volatile
 800b0a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0a8:	f383 8811 	msr	BASEPRI, r3
 800b0ac:	f3bf 8f6f 	isb	sy
 800b0b0:	f3bf 8f4f 	dsb	sy
 800b0b4:	613b      	str	r3, [r7, #16]
}
 800b0b6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b0b8:	4b15      	ldr	r3, [pc, #84]	@ (800b110 <vTaskStartScheduler+0xc0>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	335c      	adds	r3, #92	@ 0x5c
 800b0be:	4a15      	ldr	r2, [pc, #84]	@ (800b114 <vTaskStartScheduler+0xc4>)
 800b0c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b0c2:	4b15      	ldr	r3, [pc, #84]	@ (800b118 <vTaskStartScheduler+0xc8>)
 800b0c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b0ca:	4b14      	ldr	r3, [pc, #80]	@ (800b11c <vTaskStartScheduler+0xcc>)
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b0d0:	4b13      	ldr	r3, [pc, #76]	@ (800b120 <vTaskStartScheduler+0xd0>)
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b0d6:	f000 ff47 	bl	800bf68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b0da:	e00f      	b.n	800b0fc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0e2:	d10b      	bne.n	800b0fc <vTaskStartScheduler+0xac>
	__asm volatile
 800b0e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0e8:	f383 8811 	msr	BASEPRI, r3
 800b0ec:	f3bf 8f6f 	isb	sy
 800b0f0:	f3bf 8f4f 	dsb	sy
 800b0f4:	60fb      	str	r3, [r7, #12]
}
 800b0f6:	bf00      	nop
 800b0f8:	bf00      	nop
 800b0fa:	e7fd      	b.n	800b0f8 <vTaskStartScheduler+0xa8>
}
 800b0fc:	bf00      	nop
 800b0fe:	3718      	adds	r7, #24
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}
 800b104:	0801218c 	.word	0x0801218c
 800b108:	0800b6dd 	.word	0x0800b6dd
 800b10c:	200009dc 	.word	0x200009dc
 800b110:	200008b8 	.word	0x200008b8
 800b114:	2000026c 	.word	0x2000026c
 800b118:	200009d8 	.word	0x200009d8
 800b11c:	200009c4 	.word	0x200009c4
 800b120:	200009bc 	.word	0x200009bc

0800b124 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b124:	b480      	push	{r7}
 800b126:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b128:	4b04      	ldr	r3, [pc, #16]	@ (800b13c <vTaskSuspendAll+0x18>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	3301      	adds	r3, #1
 800b12e:	4a03      	ldr	r2, [pc, #12]	@ (800b13c <vTaskSuspendAll+0x18>)
 800b130:	6013      	str	r3, [r2, #0]
}
 800b132:	bf00      	nop
 800b134:	46bd      	mov	sp, r7
 800b136:	bc80      	pop	{r7}
 800b138:	4770      	bx	lr
 800b13a:	bf00      	nop
 800b13c:	200009e0 	.word	0x200009e0

0800b140 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b146:	2300      	movs	r3, #0
 800b148:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b14a:	2300      	movs	r3, #0
 800b14c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b14e:	4b42      	ldr	r3, [pc, #264]	@ (800b258 <xTaskResumeAll+0x118>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d10b      	bne.n	800b16e <xTaskResumeAll+0x2e>
	__asm volatile
 800b156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b15a:	f383 8811 	msr	BASEPRI, r3
 800b15e:	f3bf 8f6f 	isb	sy
 800b162:	f3bf 8f4f 	dsb	sy
 800b166:	603b      	str	r3, [r7, #0]
}
 800b168:	bf00      	nop
 800b16a:	bf00      	nop
 800b16c:	e7fd      	b.n	800b16a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b16e:	f000 ff6d 	bl	800c04c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b172:	4b39      	ldr	r3, [pc, #228]	@ (800b258 <xTaskResumeAll+0x118>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	3b01      	subs	r3, #1
 800b178:	4a37      	ldr	r2, [pc, #220]	@ (800b258 <xTaskResumeAll+0x118>)
 800b17a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b17c:	4b36      	ldr	r3, [pc, #216]	@ (800b258 <xTaskResumeAll+0x118>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d161      	bne.n	800b248 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b184:	4b35      	ldr	r3, [pc, #212]	@ (800b25c <xTaskResumeAll+0x11c>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d05d      	beq.n	800b248 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b18c:	e02e      	b.n	800b1ec <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b18e:	4b34      	ldr	r3, [pc, #208]	@ (800b260 <xTaskResumeAll+0x120>)
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	3318      	adds	r3, #24
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7fe fffc 	bl	800a198 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	3304      	adds	r3, #4
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7fe fff7 	bl	800a198 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	409a      	lsls	r2, r3
 800b1b2:	4b2c      	ldr	r3, [pc, #176]	@ (800b264 <xTaskResumeAll+0x124>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	4a2a      	ldr	r2, [pc, #168]	@ (800b264 <xTaskResumeAll+0x124>)
 800b1ba:	6013      	str	r3, [r2, #0]
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	4413      	add	r3, r2
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	4a27      	ldr	r2, [pc, #156]	@ (800b268 <xTaskResumeAll+0x128>)
 800b1ca:	441a      	add	r2, r3
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	3304      	adds	r3, #4
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	4610      	mov	r0, r2
 800b1d4:	f7fe ff85 	bl	800a0e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1dc:	4b23      	ldr	r3, [pc, #140]	@ (800b26c <xTaskResumeAll+0x12c>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d302      	bcc.n	800b1ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b1e6:	4b22      	ldr	r3, [pc, #136]	@ (800b270 <xTaskResumeAll+0x130>)
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b1ec:	4b1c      	ldr	r3, [pc, #112]	@ (800b260 <xTaskResumeAll+0x120>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d1cc      	bne.n	800b18e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d001      	beq.n	800b1fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b1fa:	f000 fb2b 	bl	800b854 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b1fe:	4b1d      	ldr	r3, [pc, #116]	@ (800b274 <xTaskResumeAll+0x134>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d010      	beq.n	800b22c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b20a:	f000 f837 	bl	800b27c <xTaskIncrementTick>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d002      	beq.n	800b21a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b214:	4b16      	ldr	r3, [pc, #88]	@ (800b270 <xTaskResumeAll+0x130>)
 800b216:	2201      	movs	r2, #1
 800b218:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	3b01      	subs	r3, #1
 800b21e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d1f1      	bne.n	800b20a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800b226:	4b13      	ldr	r3, [pc, #76]	@ (800b274 <xTaskResumeAll+0x134>)
 800b228:	2200      	movs	r2, #0
 800b22a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b22c:	4b10      	ldr	r3, [pc, #64]	@ (800b270 <xTaskResumeAll+0x130>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d009      	beq.n	800b248 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b234:	2301      	movs	r3, #1
 800b236:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b238:	4b0f      	ldr	r3, [pc, #60]	@ (800b278 <xTaskResumeAll+0x138>)
 800b23a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b23e:	601a      	str	r2, [r3, #0]
 800b240:	f3bf 8f4f 	dsb	sy
 800b244:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b248:	f000 ff30 	bl	800c0ac <vPortExitCritical>

	return xAlreadyYielded;
 800b24c:	68bb      	ldr	r3, [r7, #8]
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3710      	adds	r7, #16
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	200009e0 	.word	0x200009e0
 800b25c:	200009b8 	.word	0x200009b8
 800b260:	20000978 	.word	0x20000978
 800b264:	200009c0 	.word	0x200009c0
 800b268:	200008bc 	.word	0x200008bc
 800b26c:	200008b8 	.word	0x200008b8
 800b270:	200009cc 	.word	0x200009cc
 800b274:	200009c8 	.word	0x200009c8
 800b278:	e000ed04 	.word	0xe000ed04

0800b27c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b086      	sub	sp, #24
 800b280:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b282:	2300      	movs	r3, #0
 800b284:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b286:	4b51      	ldr	r3, [pc, #324]	@ (800b3cc <xTaskIncrementTick+0x150>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	f040 808e 	bne.w	800b3ac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b290:	4b4f      	ldr	r3, [pc, #316]	@ (800b3d0 <xTaskIncrementTick+0x154>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	3301      	adds	r3, #1
 800b296:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b298:	4a4d      	ldr	r2, [pc, #308]	@ (800b3d0 <xTaskIncrementTick+0x154>)
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d121      	bne.n	800b2e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b2a4:	4b4b      	ldr	r3, [pc, #300]	@ (800b3d4 <xTaskIncrementTick+0x158>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d00b      	beq.n	800b2c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b2:	f383 8811 	msr	BASEPRI, r3
 800b2b6:	f3bf 8f6f 	isb	sy
 800b2ba:	f3bf 8f4f 	dsb	sy
 800b2be:	603b      	str	r3, [r7, #0]
}
 800b2c0:	bf00      	nop
 800b2c2:	bf00      	nop
 800b2c4:	e7fd      	b.n	800b2c2 <xTaskIncrementTick+0x46>
 800b2c6:	4b43      	ldr	r3, [pc, #268]	@ (800b3d4 <xTaskIncrementTick+0x158>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	60fb      	str	r3, [r7, #12]
 800b2cc:	4b42      	ldr	r3, [pc, #264]	@ (800b3d8 <xTaskIncrementTick+0x15c>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a40      	ldr	r2, [pc, #256]	@ (800b3d4 <xTaskIncrementTick+0x158>)
 800b2d2:	6013      	str	r3, [r2, #0]
 800b2d4:	4a40      	ldr	r2, [pc, #256]	@ (800b3d8 <xTaskIncrementTick+0x15c>)
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	6013      	str	r3, [r2, #0]
 800b2da:	4b40      	ldr	r3, [pc, #256]	@ (800b3dc <xTaskIncrementTick+0x160>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	4a3e      	ldr	r2, [pc, #248]	@ (800b3dc <xTaskIncrementTick+0x160>)
 800b2e2:	6013      	str	r3, [r2, #0]
 800b2e4:	f000 fab6 	bl	800b854 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b2e8:	4b3d      	ldr	r3, [pc, #244]	@ (800b3e0 <xTaskIncrementTick+0x164>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	693a      	ldr	r2, [r7, #16]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d34d      	bcc.n	800b38e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2f2:	4b38      	ldr	r3, [pc, #224]	@ (800b3d4 <xTaskIncrementTick+0x158>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d101      	bne.n	800b300 <xTaskIncrementTick+0x84>
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	e000      	b.n	800b302 <xTaskIncrementTick+0x86>
 800b300:	2300      	movs	r3, #0
 800b302:	2b00      	cmp	r3, #0
 800b304:	d004      	beq.n	800b310 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b306:	4b36      	ldr	r3, [pc, #216]	@ (800b3e0 <xTaskIncrementTick+0x164>)
 800b308:	f04f 32ff 	mov.w	r2, #4294967295
 800b30c:	601a      	str	r2, [r3, #0]
					break;
 800b30e:	e03e      	b.n	800b38e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b310:	4b30      	ldr	r3, [pc, #192]	@ (800b3d4 <xTaskIncrementTick+0x158>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	68db      	ldr	r3, [r3, #12]
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b320:	693a      	ldr	r2, [r7, #16]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	429a      	cmp	r2, r3
 800b326:	d203      	bcs.n	800b330 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b328:	4a2d      	ldr	r2, [pc, #180]	@ (800b3e0 <xTaskIncrementTick+0x164>)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6013      	str	r3, [r2, #0]
						break;
 800b32e:	e02e      	b.n	800b38e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	3304      	adds	r3, #4
 800b334:	4618      	mov	r0, r3
 800b336:	f7fe ff2f 	bl	800a198 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d004      	beq.n	800b34c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	3318      	adds	r3, #24
 800b346:	4618      	mov	r0, r3
 800b348:	f7fe ff26 	bl	800a198 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b350:	2201      	movs	r2, #1
 800b352:	409a      	lsls	r2, r3
 800b354:	4b23      	ldr	r3, [pc, #140]	@ (800b3e4 <xTaskIncrementTick+0x168>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4313      	orrs	r3, r2
 800b35a:	4a22      	ldr	r2, [pc, #136]	@ (800b3e4 <xTaskIncrementTick+0x168>)
 800b35c:	6013      	str	r3, [r2, #0]
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b362:	4613      	mov	r3, r2
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	4413      	add	r3, r2
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	4a1f      	ldr	r2, [pc, #124]	@ (800b3e8 <xTaskIncrementTick+0x16c>)
 800b36c:	441a      	add	r2, r3
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	3304      	adds	r3, #4
 800b372:	4619      	mov	r1, r3
 800b374:	4610      	mov	r0, r2
 800b376:	f7fe feb4 	bl	800a0e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b37e:	4b1b      	ldr	r3, [pc, #108]	@ (800b3ec <xTaskIncrementTick+0x170>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b384:	429a      	cmp	r2, r3
 800b386:	d3b4      	bcc.n	800b2f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b388:	2301      	movs	r3, #1
 800b38a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b38c:	e7b1      	b.n	800b2f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b38e:	4b17      	ldr	r3, [pc, #92]	@ (800b3ec <xTaskIncrementTick+0x170>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b394:	4914      	ldr	r1, [pc, #80]	@ (800b3e8 <xTaskIncrementTick+0x16c>)
 800b396:	4613      	mov	r3, r2
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	4413      	add	r3, r2
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	440b      	add	r3, r1
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d907      	bls.n	800b3b6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	617b      	str	r3, [r7, #20]
 800b3aa:	e004      	b.n	800b3b6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b3ac:	4b10      	ldr	r3, [pc, #64]	@ (800b3f0 <xTaskIncrementTick+0x174>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	4a0f      	ldr	r2, [pc, #60]	@ (800b3f0 <xTaskIncrementTick+0x174>)
 800b3b4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b3b6:	4b0f      	ldr	r3, [pc, #60]	@ (800b3f4 <xTaskIncrementTick+0x178>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d001      	beq.n	800b3c2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b3c2:	697b      	ldr	r3, [r7, #20]
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3718      	adds	r7, #24
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	200009e0 	.word	0x200009e0
 800b3d0:	200009bc 	.word	0x200009bc
 800b3d4:	20000970 	.word	0x20000970
 800b3d8:	20000974 	.word	0x20000974
 800b3dc:	200009d0 	.word	0x200009d0
 800b3e0:	200009d8 	.word	0x200009d8
 800b3e4:	200009c0 	.word	0x200009c0
 800b3e8:	200008bc 	.word	0x200008bc
 800b3ec:	200008b8 	.word	0x200008b8
 800b3f0:	200009c8 	.word	0x200009c8
 800b3f4:	200009cc 	.word	0x200009cc

0800b3f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b087      	sub	sp, #28
 800b3fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b3fe:	4b29      	ldr	r3, [pc, #164]	@ (800b4a4 <vTaskSwitchContext+0xac>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d003      	beq.n	800b40e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b406:	4b28      	ldr	r3, [pc, #160]	@ (800b4a8 <vTaskSwitchContext+0xb0>)
 800b408:	2201      	movs	r2, #1
 800b40a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b40c:	e045      	b.n	800b49a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800b40e:	4b26      	ldr	r3, [pc, #152]	@ (800b4a8 <vTaskSwitchContext+0xb0>)
 800b410:	2200      	movs	r2, #0
 800b412:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b414:	4b25      	ldr	r3, [pc, #148]	@ (800b4ac <vTaskSwitchContext+0xb4>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	fab3 f383 	clz	r3, r3
 800b420:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b422:	7afb      	ldrb	r3, [r7, #11]
 800b424:	f1c3 031f 	rsb	r3, r3, #31
 800b428:	617b      	str	r3, [r7, #20]
 800b42a:	4921      	ldr	r1, [pc, #132]	@ (800b4b0 <vTaskSwitchContext+0xb8>)
 800b42c:	697a      	ldr	r2, [r7, #20]
 800b42e:	4613      	mov	r3, r2
 800b430:	009b      	lsls	r3, r3, #2
 800b432:	4413      	add	r3, r2
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	440b      	add	r3, r1
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d10b      	bne.n	800b456 <vTaskSwitchContext+0x5e>
	__asm volatile
 800b43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	607b      	str	r3, [r7, #4]
}
 800b450:	bf00      	nop
 800b452:	bf00      	nop
 800b454:	e7fd      	b.n	800b452 <vTaskSwitchContext+0x5a>
 800b456:	697a      	ldr	r2, [r7, #20]
 800b458:	4613      	mov	r3, r2
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	4413      	add	r3, r2
 800b45e:	009b      	lsls	r3, r3, #2
 800b460:	4a13      	ldr	r2, [pc, #76]	@ (800b4b0 <vTaskSwitchContext+0xb8>)
 800b462:	4413      	add	r3, r2
 800b464:	613b      	str	r3, [r7, #16]
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	685a      	ldr	r2, [r3, #4]
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	605a      	str	r2, [r3, #4]
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	685a      	ldr	r2, [r3, #4]
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	3308      	adds	r3, #8
 800b478:	429a      	cmp	r2, r3
 800b47a:	d104      	bne.n	800b486 <vTaskSwitchContext+0x8e>
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	685a      	ldr	r2, [r3, #4]
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	605a      	str	r2, [r3, #4]
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	68db      	ldr	r3, [r3, #12]
 800b48c:	4a09      	ldr	r2, [pc, #36]	@ (800b4b4 <vTaskSwitchContext+0xbc>)
 800b48e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b490:	4b08      	ldr	r3, [pc, #32]	@ (800b4b4 <vTaskSwitchContext+0xbc>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	335c      	adds	r3, #92	@ 0x5c
 800b496:	4a08      	ldr	r2, [pc, #32]	@ (800b4b8 <vTaskSwitchContext+0xc0>)
 800b498:	6013      	str	r3, [r2, #0]
}
 800b49a:	bf00      	nop
 800b49c:	371c      	adds	r7, #28
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bc80      	pop	{r7}
 800b4a2:	4770      	bx	lr
 800b4a4:	200009e0 	.word	0x200009e0
 800b4a8:	200009cc 	.word	0x200009cc
 800b4ac:	200009c0 	.word	0x200009c0
 800b4b0:	200008bc 	.word	0x200008bc
 800b4b4:	200008b8 	.word	0x200008b8
 800b4b8:	2000026c 	.word	0x2000026c

0800b4bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d10b      	bne.n	800b4e4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b4cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4d0:	f383 8811 	msr	BASEPRI, r3
 800b4d4:	f3bf 8f6f 	isb	sy
 800b4d8:	f3bf 8f4f 	dsb	sy
 800b4dc:	60fb      	str	r3, [r7, #12]
}
 800b4de:	bf00      	nop
 800b4e0:	bf00      	nop
 800b4e2:	e7fd      	b.n	800b4e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b4e4:	4b07      	ldr	r3, [pc, #28]	@ (800b504 <vTaskPlaceOnEventList+0x48>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	3318      	adds	r3, #24
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f7fe fe1b 	bl	800a128 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b4f2:	2101      	movs	r1, #1
 800b4f4:	6838      	ldr	r0, [r7, #0]
 800b4f6:	f000 fc55 	bl	800bda4 <prvAddCurrentTaskToDelayedList>
}
 800b4fa:	bf00      	nop
 800b4fc:	3710      	adds	r7, #16
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
 800b502:	bf00      	nop
 800b504:	200008b8 	.word	0x200008b8

0800b508 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b086      	sub	sp, #24
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d10b      	bne.n	800b536 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b522:	f383 8811 	msr	BASEPRI, r3
 800b526:	f3bf 8f6f 	isb	sy
 800b52a:	f3bf 8f4f 	dsb	sy
 800b52e:	60fb      	str	r3, [r7, #12]
}
 800b530:	bf00      	nop
 800b532:	bf00      	nop
 800b534:	e7fd      	b.n	800b532 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	3318      	adds	r3, #24
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7fe fe2c 	bl	800a198 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b540:	4b1d      	ldr	r3, [pc, #116]	@ (800b5b8 <xTaskRemoveFromEventList+0xb0>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d11c      	bne.n	800b582 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	3304      	adds	r3, #4
 800b54c:	4618      	mov	r0, r3
 800b54e:	f7fe fe23 	bl	800a198 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b556:	2201      	movs	r2, #1
 800b558:	409a      	lsls	r2, r3
 800b55a:	4b18      	ldr	r3, [pc, #96]	@ (800b5bc <xTaskRemoveFromEventList+0xb4>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	4313      	orrs	r3, r2
 800b560:	4a16      	ldr	r2, [pc, #88]	@ (800b5bc <xTaskRemoveFromEventList+0xb4>)
 800b562:	6013      	str	r3, [r2, #0]
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b568:	4613      	mov	r3, r2
 800b56a:	009b      	lsls	r3, r3, #2
 800b56c:	4413      	add	r3, r2
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	4a13      	ldr	r2, [pc, #76]	@ (800b5c0 <xTaskRemoveFromEventList+0xb8>)
 800b572:	441a      	add	r2, r3
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	3304      	adds	r3, #4
 800b578:	4619      	mov	r1, r3
 800b57a:	4610      	mov	r0, r2
 800b57c:	f7fe fdb1 	bl	800a0e2 <vListInsertEnd>
 800b580:	e005      	b.n	800b58e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	3318      	adds	r3, #24
 800b586:	4619      	mov	r1, r3
 800b588:	480e      	ldr	r0, [pc, #56]	@ (800b5c4 <xTaskRemoveFromEventList+0xbc>)
 800b58a:	f7fe fdaa 	bl	800a0e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b592:	4b0d      	ldr	r3, [pc, #52]	@ (800b5c8 <xTaskRemoveFromEventList+0xc0>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b598:	429a      	cmp	r2, r3
 800b59a:	d905      	bls.n	800b5a8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b59c:	2301      	movs	r3, #1
 800b59e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b5a0:	4b0a      	ldr	r3, [pc, #40]	@ (800b5cc <xTaskRemoveFromEventList+0xc4>)
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	601a      	str	r2, [r3, #0]
 800b5a6:	e001      	b.n	800b5ac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b5ac:	697b      	ldr	r3, [r7, #20]
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3718      	adds	r7, #24
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	200009e0 	.word	0x200009e0
 800b5bc:	200009c0 	.word	0x200009c0
 800b5c0:	200008bc 	.word	0x200008bc
 800b5c4:	20000978 	.word	0x20000978
 800b5c8:	200008b8 	.word	0x200008b8
 800b5cc:	200009cc 	.word	0x200009cc

0800b5d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b5d8:	4b06      	ldr	r3, [pc, #24]	@ (800b5f4 <vTaskInternalSetTimeOutState+0x24>)
 800b5da:	681a      	ldr	r2, [r3, #0]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b5e0:	4b05      	ldr	r3, [pc, #20]	@ (800b5f8 <vTaskInternalSetTimeOutState+0x28>)
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	605a      	str	r2, [r3, #4]
}
 800b5e8:	bf00      	nop
 800b5ea:	370c      	adds	r7, #12
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bc80      	pop	{r7}
 800b5f0:	4770      	bx	lr
 800b5f2:	bf00      	nop
 800b5f4:	200009d0 	.word	0x200009d0
 800b5f8:	200009bc 	.word	0x200009bc

0800b5fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b088      	sub	sp, #32
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d10b      	bne.n	800b624 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b60c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b610:	f383 8811 	msr	BASEPRI, r3
 800b614:	f3bf 8f6f 	isb	sy
 800b618:	f3bf 8f4f 	dsb	sy
 800b61c:	613b      	str	r3, [r7, #16]
}
 800b61e:	bf00      	nop
 800b620:	bf00      	nop
 800b622:	e7fd      	b.n	800b620 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d10b      	bne.n	800b642 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b62e:	f383 8811 	msr	BASEPRI, r3
 800b632:	f3bf 8f6f 	isb	sy
 800b636:	f3bf 8f4f 	dsb	sy
 800b63a:	60fb      	str	r3, [r7, #12]
}
 800b63c:	bf00      	nop
 800b63e:	bf00      	nop
 800b640:	e7fd      	b.n	800b63e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b642:	f000 fd03 	bl	800c04c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b646:	4b1d      	ldr	r3, [pc, #116]	@ (800b6bc <xTaskCheckForTimeOut+0xc0>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	69ba      	ldr	r2, [r7, #24]
 800b652:	1ad3      	subs	r3, r2, r3
 800b654:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b65e:	d102      	bne.n	800b666 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b660:	2300      	movs	r3, #0
 800b662:	61fb      	str	r3, [r7, #28]
 800b664:	e023      	b.n	800b6ae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	4b15      	ldr	r3, [pc, #84]	@ (800b6c0 <xTaskCheckForTimeOut+0xc4>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	429a      	cmp	r2, r3
 800b670:	d007      	beq.n	800b682 <xTaskCheckForTimeOut+0x86>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	69ba      	ldr	r2, [r7, #24]
 800b678:	429a      	cmp	r2, r3
 800b67a:	d302      	bcc.n	800b682 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b67c:	2301      	movs	r3, #1
 800b67e:	61fb      	str	r3, [r7, #28]
 800b680:	e015      	b.n	800b6ae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	697a      	ldr	r2, [r7, #20]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d20b      	bcs.n	800b6a4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	681a      	ldr	r2, [r3, #0]
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	1ad2      	subs	r2, r2, r3
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f7ff ff99 	bl	800b5d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	61fb      	str	r3, [r7, #28]
 800b6a2:	e004      	b.n	800b6ae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b6ae:	f000 fcfd 	bl	800c0ac <vPortExitCritical>

	return xReturn;
 800b6b2:	69fb      	ldr	r3, [r7, #28]
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3720      	adds	r7, #32
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	200009bc 	.word	0x200009bc
 800b6c0:	200009d0 	.word	0x200009d0

0800b6c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b6c8:	4b03      	ldr	r3, [pc, #12]	@ (800b6d8 <vTaskMissedYield+0x14>)
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	601a      	str	r2, [r3, #0]
}
 800b6ce:	bf00      	nop
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bc80      	pop	{r7}
 800b6d4:	4770      	bx	lr
 800b6d6:	bf00      	nop
 800b6d8:	200009cc 	.word	0x200009cc

0800b6dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b082      	sub	sp, #8
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b6e4:	f000 f852 	bl	800b78c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b6e8:	4b06      	ldr	r3, [pc, #24]	@ (800b704 <prvIdleTask+0x28>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	d9f9      	bls.n	800b6e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b6f0:	4b05      	ldr	r3, [pc, #20]	@ (800b708 <prvIdleTask+0x2c>)
 800b6f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6f6:	601a      	str	r2, [r3, #0]
 800b6f8:	f3bf 8f4f 	dsb	sy
 800b6fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b700:	e7f0      	b.n	800b6e4 <prvIdleTask+0x8>
 800b702:	bf00      	nop
 800b704:	200008bc 	.word	0x200008bc
 800b708:	e000ed04 	.word	0xe000ed04

0800b70c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b082      	sub	sp, #8
 800b710:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b712:	2300      	movs	r3, #0
 800b714:	607b      	str	r3, [r7, #4]
 800b716:	e00c      	b.n	800b732 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	4613      	mov	r3, r2
 800b71c:	009b      	lsls	r3, r3, #2
 800b71e:	4413      	add	r3, r2
 800b720:	009b      	lsls	r3, r3, #2
 800b722:	4a12      	ldr	r2, [pc, #72]	@ (800b76c <prvInitialiseTaskLists+0x60>)
 800b724:	4413      	add	r3, r2
 800b726:	4618      	mov	r0, r3
 800b728:	f7fe fcb0 	bl	800a08c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	3301      	adds	r3, #1
 800b730:	607b      	str	r3, [r7, #4]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2b06      	cmp	r3, #6
 800b736:	d9ef      	bls.n	800b718 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b738:	480d      	ldr	r0, [pc, #52]	@ (800b770 <prvInitialiseTaskLists+0x64>)
 800b73a:	f7fe fca7 	bl	800a08c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b73e:	480d      	ldr	r0, [pc, #52]	@ (800b774 <prvInitialiseTaskLists+0x68>)
 800b740:	f7fe fca4 	bl	800a08c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b744:	480c      	ldr	r0, [pc, #48]	@ (800b778 <prvInitialiseTaskLists+0x6c>)
 800b746:	f7fe fca1 	bl	800a08c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b74a:	480c      	ldr	r0, [pc, #48]	@ (800b77c <prvInitialiseTaskLists+0x70>)
 800b74c:	f7fe fc9e 	bl	800a08c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b750:	480b      	ldr	r0, [pc, #44]	@ (800b780 <prvInitialiseTaskLists+0x74>)
 800b752:	f7fe fc9b 	bl	800a08c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b756:	4b0b      	ldr	r3, [pc, #44]	@ (800b784 <prvInitialiseTaskLists+0x78>)
 800b758:	4a05      	ldr	r2, [pc, #20]	@ (800b770 <prvInitialiseTaskLists+0x64>)
 800b75a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b75c:	4b0a      	ldr	r3, [pc, #40]	@ (800b788 <prvInitialiseTaskLists+0x7c>)
 800b75e:	4a05      	ldr	r2, [pc, #20]	@ (800b774 <prvInitialiseTaskLists+0x68>)
 800b760:	601a      	str	r2, [r3, #0]
}
 800b762:	bf00      	nop
 800b764:	3708      	adds	r7, #8
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}
 800b76a:	bf00      	nop
 800b76c:	200008bc 	.word	0x200008bc
 800b770:	20000948 	.word	0x20000948
 800b774:	2000095c 	.word	0x2000095c
 800b778:	20000978 	.word	0x20000978
 800b77c:	2000098c 	.word	0x2000098c
 800b780:	200009a4 	.word	0x200009a4
 800b784:	20000970 	.word	0x20000970
 800b788:	20000974 	.word	0x20000974

0800b78c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b792:	e019      	b.n	800b7c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b794:	f000 fc5a 	bl	800c04c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b798:	4b10      	ldr	r3, [pc, #64]	@ (800b7dc <prvCheckTasksWaitingTermination+0x50>)
 800b79a:	68db      	ldr	r3, [r3, #12]
 800b79c:	68db      	ldr	r3, [r3, #12]
 800b79e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	3304      	adds	r3, #4
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7fe fcf7 	bl	800a198 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b7aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b7e0 <prvCheckTasksWaitingTermination+0x54>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	3b01      	subs	r3, #1
 800b7b0:	4a0b      	ldr	r2, [pc, #44]	@ (800b7e0 <prvCheckTasksWaitingTermination+0x54>)
 800b7b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b7b4:	4b0b      	ldr	r3, [pc, #44]	@ (800b7e4 <prvCheckTasksWaitingTermination+0x58>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	3b01      	subs	r3, #1
 800b7ba:	4a0a      	ldr	r2, [pc, #40]	@ (800b7e4 <prvCheckTasksWaitingTermination+0x58>)
 800b7bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b7be:	f000 fc75 	bl	800c0ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 f810 	bl	800b7e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7c8:	4b06      	ldr	r3, [pc, #24]	@ (800b7e4 <prvCheckTasksWaitingTermination+0x58>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d1e1      	bne.n	800b794 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b7d0:	bf00      	nop
 800b7d2:	bf00      	nop
 800b7d4:	3708      	adds	r7, #8
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}
 800b7da:	bf00      	nop
 800b7dc:	2000098c 	.word	0x2000098c
 800b7e0:	200009b8 	.word	0x200009b8
 800b7e4:	200009a0 	.word	0x200009a0

0800b7e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b084      	sub	sp, #16
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	335c      	adds	r3, #92	@ 0x5c
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f003 fa59 	bl	800ecac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b800:	2b00      	cmp	r3, #0
 800b802:	d108      	bne.n	800b816 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b808:	4618      	mov	r0, r3
 800b80a:	f000 fde9 	bl	800c3e0 <vPortFree>
				vPortFree( pxTCB );
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f000 fde6 	bl	800c3e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b814:	e019      	b.n	800b84a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	d103      	bne.n	800b828 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f000 fddd 	bl	800c3e0 <vPortFree>
	}
 800b826:	e010      	b.n	800b84a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b82e:	2b02      	cmp	r3, #2
 800b830:	d00b      	beq.n	800b84a <prvDeleteTCB+0x62>
	__asm volatile
 800b832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b836:	f383 8811 	msr	BASEPRI, r3
 800b83a:	f3bf 8f6f 	isb	sy
 800b83e:	f3bf 8f4f 	dsb	sy
 800b842:	60fb      	str	r3, [r7, #12]
}
 800b844:	bf00      	nop
 800b846:	bf00      	nop
 800b848:	e7fd      	b.n	800b846 <prvDeleteTCB+0x5e>
	}
 800b84a:	bf00      	nop
 800b84c:	3710      	adds	r7, #16
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
	...

0800b854 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b854:	b480      	push	{r7}
 800b856:	b083      	sub	sp, #12
 800b858:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b85a:	4b0e      	ldr	r3, [pc, #56]	@ (800b894 <prvResetNextTaskUnblockTime+0x40>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d101      	bne.n	800b868 <prvResetNextTaskUnblockTime+0x14>
 800b864:	2301      	movs	r3, #1
 800b866:	e000      	b.n	800b86a <prvResetNextTaskUnblockTime+0x16>
 800b868:	2300      	movs	r3, #0
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d004      	beq.n	800b878 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b86e:	4b0a      	ldr	r3, [pc, #40]	@ (800b898 <prvResetNextTaskUnblockTime+0x44>)
 800b870:	f04f 32ff 	mov.w	r2, #4294967295
 800b874:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b876:	e008      	b.n	800b88a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b878:	4b06      	ldr	r3, [pc, #24]	@ (800b894 <prvResetNextTaskUnblockTime+0x40>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	68db      	ldr	r3, [r3, #12]
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	4a04      	ldr	r2, [pc, #16]	@ (800b898 <prvResetNextTaskUnblockTime+0x44>)
 800b888:	6013      	str	r3, [r2, #0]
}
 800b88a:	bf00      	nop
 800b88c:	370c      	adds	r7, #12
 800b88e:	46bd      	mov	sp, r7
 800b890:	bc80      	pop	{r7}
 800b892:	4770      	bx	lr
 800b894:	20000970 	.word	0x20000970
 800b898:	200009d8 	.word	0x200009d8

0800b89c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b8a2:	4b0b      	ldr	r3, [pc, #44]	@ (800b8d0 <xTaskGetSchedulerState+0x34>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d102      	bne.n	800b8b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	607b      	str	r3, [r7, #4]
 800b8ae:	e008      	b.n	800b8c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8b0:	4b08      	ldr	r3, [pc, #32]	@ (800b8d4 <xTaskGetSchedulerState+0x38>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d102      	bne.n	800b8be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b8b8:	2302      	movs	r3, #2
 800b8ba:	607b      	str	r3, [r7, #4]
 800b8bc:	e001      	b.n	800b8c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b8c2:	687b      	ldr	r3, [r7, #4]
	}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	370c      	adds	r7, #12
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bc80      	pop	{r7}
 800b8cc:	4770      	bx	lr
 800b8ce:	bf00      	nop
 800b8d0:	200009c4 	.word	0x200009c4
 800b8d4:	200009e0 	.word	0x200009e0

0800b8d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b086      	sub	sp, #24
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d070      	beq.n	800b9d0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b8ee:	4b3b      	ldr	r3, [pc, #236]	@ (800b9dc <xTaskPriorityDisinherit+0x104>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	693a      	ldr	r2, [r7, #16]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d00b      	beq.n	800b910 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b8f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8fc:	f383 8811 	msr	BASEPRI, r3
 800b900:	f3bf 8f6f 	isb	sy
 800b904:	f3bf 8f4f 	dsb	sy
 800b908:	60fb      	str	r3, [r7, #12]
}
 800b90a:	bf00      	nop
 800b90c:	bf00      	nop
 800b90e:	e7fd      	b.n	800b90c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b914:	2b00      	cmp	r3, #0
 800b916:	d10b      	bne.n	800b930 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b91c:	f383 8811 	msr	BASEPRI, r3
 800b920:	f3bf 8f6f 	isb	sy
 800b924:	f3bf 8f4f 	dsb	sy
 800b928:	60bb      	str	r3, [r7, #8]
}
 800b92a:	bf00      	nop
 800b92c:	bf00      	nop
 800b92e:	e7fd      	b.n	800b92c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b934:	1e5a      	subs	r2, r3, #1
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	659a      	str	r2, [r3, #88]	@ 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b942:	429a      	cmp	r2, r3
 800b944:	d044      	beq.n	800b9d0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d140      	bne.n	800b9d0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	3304      	adds	r3, #4
 800b952:	4618      	mov	r0, r3
 800b954:	f7fe fc20 	bl	800a198 <uxListRemove>
 800b958:	4603      	mov	r3, r0
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d115      	bne.n	800b98a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b962:	491f      	ldr	r1, [pc, #124]	@ (800b9e0 <xTaskPriorityDisinherit+0x108>)
 800b964:	4613      	mov	r3, r2
 800b966:	009b      	lsls	r3, r3, #2
 800b968:	4413      	add	r3, r2
 800b96a:	009b      	lsls	r3, r3, #2
 800b96c:	440b      	add	r3, r1
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d10a      	bne.n	800b98a <xTaskPriorityDisinherit+0xb2>
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b978:	2201      	movs	r2, #1
 800b97a:	fa02 f303 	lsl.w	r3, r2, r3
 800b97e:	43da      	mvns	r2, r3
 800b980:	4b18      	ldr	r3, [pc, #96]	@ (800b9e4 <xTaskPriorityDisinherit+0x10c>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4013      	ands	r3, r2
 800b986:	4a17      	ldr	r2, [pc, #92]	@ (800b9e4 <xTaskPriorityDisinherit+0x10c>)
 800b988:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b996:	f1c3 0207 	rsb	r2, r3, #7
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	409a      	lsls	r2, r3
 800b9a6:	4b0f      	ldr	r3, [pc, #60]	@ (800b9e4 <xTaskPriorityDisinherit+0x10c>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	4a0d      	ldr	r2, [pc, #52]	@ (800b9e4 <xTaskPriorityDisinherit+0x10c>)
 800b9ae:	6013      	str	r3, [r2, #0]
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9b4:	4613      	mov	r3, r2
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	4413      	add	r3, r2
 800b9ba:	009b      	lsls	r3, r3, #2
 800b9bc:	4a08      	ldr	r2, [pc, #32]	@ (800b9e0 <xTaskPriorityDisinherit+0x108>)
 800b9be:	441a      	add	r2, r3
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	3304      	adds	r3, #4
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	4610      	mov	r0, r2
 800b9c8:	f7fe fb8b 	bl	800a0e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b9d0:	697b      	ldr	r3, [r7, #20]
	}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3718      	adds	r7, #24
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	200008b8 	.word	0x200008b8
 800b9e0:	200008bc 	.word	0x200008bc
 800b9e4:	200009c0 	.word	0x200009c0

0800b9e8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b086      	sub	sp, #24
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	607a      	str	r2, [r7, #4]
 800b9f4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b9f6:	f000 fb29 	bl	800c04c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b9fa:	4b29      	ldr	r3, [pc, #164]	@ (800baa0 <xTaskNotifyWait+0xb8>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	2b02      	cmp	r3, #2
 800ba06:	d01c      	beq.n	800ba42 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800ba08:	4b25      	ldr	r3, [pc, #148]	@ (800baa0 <xTaskNotifyWait+0xb8>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f8d3 10a8 	ldr.w	r1, [r3, #168]	@ 0xa8
 800ba10:	68fa      	ldr	r2, [r7, #12]
 800ba12:	43d2      	mvns	r2, r2
 800ba14:	400a      	ands	r2, r1
 800ba16:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ba1a:	4b21      	ldr	r3, [pc, #132]	@ (800baa0 <xTaskNotifyWait+0xb8>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	2201      	movs	r2, #1
 800ba20:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac

				if( xTicksToWait > ( TickType_t ) 0 )
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d00b      	beq.n	800ba42 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ba2a:	2101      	movs	r1, #1
 800ba2c:	6838      	ldr	r0, [r7, #0]
 800ba2e:	f000 f9b9 	bl	800bda4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ba32:	4b1c      	ldr	r3, [pc, #112]	@ (800baa4 <xTaskNotifyWait+0xbc>)
 800ba34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba38:	601a      	str	r2, [r3, #0]
 800ba3a:	f3bf 8f4f 	dsb	sy
 800ba3e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ba42:	f000 fb33 	bl	800c0ac <vPortExitCritical>

		taskENTER_CRITICAL();
 800ba46:	f000 fb01 	bl	800c04c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d005      	beq.n	800ba5c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800ba50:	4b13      	ldr	r3, [pc, #76]	@ (800baa0 <xTaskNotifyWait+0xb8>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ba5c:	4b10      	ldr	r3, [pc, #64]	@ (800baa0 <xTaskNotifyWait+0xb8>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ba64:	b2db      	uxtb	r3, r3
 800ba66:	2b02      	cmp	r3, #2
 800ba68:	d002      	beq.n	800ba70 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	617b      	str	r3, [r7, #20]
 800ba6e:	e00a      	b.n	800ba86 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800ba70:	4b0b      	ldr	r3, [pc, #44]	@ (800baa0 <xTaskNotifyWait+0xb8>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f8d3 10a8 	ldr.w	r1, [r3, #168]	@ 0xa8
 800ba78:	68ba      	ldr	r2, [r7, #8]
 800ba7a:	43d2      	mvns	r2, r2
 800ba7c:	400a      	ands	r2, r1
 800ba7e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
				xReturn = pdTRUE;
 800ba82:	2301      	movs	r3, #1
 800ba84:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ba86:	4b06      	ldr	r3, [pc, #24]	@ (800baa0 <xTaskNotifyWait+0xb8>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
		}
		taskEXIT_CRITICAL();
 800ba90:	f000 fb0c 	bl	800c0ac <vPortExitCritical>

		return xReturn;
 800ba94:	697b      	ldr	r3, [r7, #20]
	}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3718      	adds	r7, #24
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}
 800ba9e:	bf00      	nop
 800baa0:	200008b8 	.word	0x200008b8
 800baa4:	e000ed04 	.word	0xe000ed04

0800baa8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b08a      	sub	sp, #40	@ 0x28
 800baac:	af00      	add	r7, sp, #0
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	60b9      	str	r1, [r7, #8]
 800bab2:	603b      	str	r3, [r7, #0]
 800bab4:	4613      	mov	r3, r2
 800bab6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800bab8:	2301      	movs	r3, #1
 800baba:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d10b      	bne.n	800bada <xTaskGenericNotify+0x32>
	__asm volatile
 800bac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bac6:	f383 8811 	msr	BASEPRI, r3
 800baca:	f3bf 8f6f 	isb	sy
 800bace:	f3bf 8f4f 	dsb	sy
 800bad2:	61bb      	str	r3, [r7, #24]
}
 800bad4:	bf00      	nop
 800bad6:	bf00      	nop
 800bad8:	e7fd      	b.n	800bad6 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800bade:	f000 fab5 	bl	800c04c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d004      	beq.n	800baf2 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bae8:	6a3b      	ldr	r3, [r7, #32]
 800baea:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800baf2:	6a3b      	ldr	r3, [r7, #32]
 800baf4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800baf8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bafa:	6a3b      	ldr	r3, [r7, #32]
 800bafc:	2202      	movs	r2, #2
 800bafe:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac

			switch( eAction )
 800bb02:	79fb      	ldrb	r3, [r7, #7]
 800bb04:	2b04      	cmp	r3, #4
 800bb06:	d82e      	bhi.n	800bb66 <xTaskGenericNotify+0xbe>
 800bb08:	a201      	add	r2, pc, #4	@ (adr r2, 800bb10 <xTaskGenericNotify+0x68>)
 800bb0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb0e:	bf00      	nop
 800bb10:	0800bb67 	.word	0x0800bb67
 800bb14:	0800bb25 	.word	0x0800bb25
 800bb18:	0800bb37 	.word	0x0800bb37
 800bb1c:	0800bb47 	.word	0x0800bb47
 800bb20:	0800bb51 	.word	0x0800bb51
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bb24:	6a3b      	ldr	r3, [r7, #32]
 800bb26:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	431a      	orrs	r2, r3
 800bb2e:	6a3b      	ldr	r3, [r7, #32]
 800bb30:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 800bb34:	e017      	b.n	800bb66 <xTaskGenericNotify+0xbe>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800bb36:	6a3b      	ldr	r3, [r7, #32]
 800bb38:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bb3c:	1c5a      	adds	r2, r3, #1
 800bb3e:	6a3b      	ldr	r3, [r7, #32]
 800bb40:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 800bb44:	e00f      	b.n	800bb66 <xTaskGenericNotify+0xbe>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800bb46:	6a3b      	ldr	r3, [r7, #32]
 800bb48:	68ba      	ldr	r2, [r7, #8]
 800bb4a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 800bb4e:	e00a      	b.n	800bb66 <xTaskGenericNotify+0xbe>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bb50:	7ffb      	ldrb	r3, [r7, #31]
 800bb52:	2b02      	cmp	r3, #2
 800bb54:	d004      	beq.n	800bb60 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800bb56:	6a3b      	ldr	r3, [r7, #32]
 800bb58:	68ba      	ldr	r2, [r7, #8]
 800bb5a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800bb5e:	e001      	b.n	800bb64 <xTaskGenericNotify+0xbc>
						xReturn = pdFAIL;
 800bb60:	2300      	movs	r3, #0
 800bb62:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800bb64:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bb66:	7ffb      	ldrb	r3, [r7, #31]
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	d13a      	bne.n	800bbe2 <xTaskGenericNotify+0x13a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb6c:	6a3b      	ldr	r3, [r7, #32]
 800bb6e:	3304      	adds	r3, #4
 800bb70:	4618      	mov	r0, r3
 800bb72:	f7fe fb11 	bl	800a198 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800bb76:	6a3b      	ldr	r3, [r7, #32]
 800bb78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	409a      	lsls	r2, r3
 800bb7e:	4b1c      	ldr	r3, [pc, #112]	@ (800bbf0 <xTaskGenericNotify+0x148>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4313      	orrs	r3, r2
 800bb84:	4a1a      	ldr	r2, [pc, #104]	@ (800bbf0 <xTaskGenericNotify+0x148>)
 800bb86:	6013      	str	r3, [r2, #0]
 800bb88:	6a3b      	ldr	r3, [r7, #32]
 800bb8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb8c:	4613      	mov	r3, r2
 800bb8e:	009b      	lsls	r3, r3, #2
 800bb90:	4413      	add	r3, r2
 800bb92:	009b      	lsls	r3, r3, #2
 800bb94:	4a17      	ldr	r2, [pc, #92]	@ (800bbf4 <xTaskGenericNotify+0x14c>)
 800bb96:	441a      	add	r2, r3
 800bb98:	6a3b      	ldr	r3, [r7, #32]
 800bb9a:	3304      	adds	r3, #4
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	4610      	mov	r0, r2
 800bba0:	f7fe fa9f 	bl	800a0e2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bba4:	6a3b      	ldr	r3, [r7, #32]
 800bba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d00b      	beq.n	800bbc4 <xTaskGenericNotify+0x11c>
	__asm volatile
 800bbac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbb0:	f383 8811 	msr	BASEPRI, r3
 800bbb4:	f3bf 8f6f 	isb	sy
 800bbb8:	f3bf 8f4f 	dsb	sy
 800bbbc:	617b      	str	r3, [r7, #20]
}
 800bbbe:	bf00      	nop
 800bbc0:	bf00      	nop
 800bbc2:	e7fd      	b.n	800bbc0 <xTaskGenericNotify+0x118>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bbc4:	6a3b      	ldr	r3, [r7, #32]
 800bbc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbc8:	4b0b      	ldr	r3, [pc, #44]	@ (800bbf8 <xTaskGenericNotify+0x150>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d907      	bls.n	800bbe2 <xTaskGenericNotify+0x13a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800bbd2:	4b0a      	ldr	r3, [pc, #40]	@ (800bbfc <xTaskGenericNotify+0x154>)
 800bbd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbd8:	601a      	str	r2, [r3, #0]
 800bbda:	f3bf 8f4f 	dsb	sy
 800bbde:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bbe2:	f000 fa63 	bl	800c0ac <vPortExitCritical>

		return xReturn;
 800bbe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3728      	adds	r7, #40	@ 0x28
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	200009c0 	.word	0x200009c0
 800bbf4:	200008bc 	.word	0x200008bc
 800bbf8:	200008b8 	.word	0x200008b8
 800bbfc:	e000ed04 	.word	0xe000ed04

0800bc00 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b08e      	sub	sp, #56	@ 0x38
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	60f8      	str	r0, [r7, #12]
 800bc08:	60b9      	str	r1, [r7, #8]
 800bc0a:	603b      	str	r3, [r7, #0]
 800bc0c:	4613      	mov	r3, r2
 800bc0e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800bc10:	2301      	movs	r3, #1
 800bc12:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d10b      	bne.n	800bc32 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800bc1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc1e:	f383 8811 	msr	BASEPRI, r3
 800bc22:	f3bf 8f6f 	isb	sy
 800bc26:	f3bf 8f4f 	dsb	sy
 800bc2a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bc2c:	bf00      	nop
 800bc2e:	bf00      	nop
 800bc30:	e7fd      	b.n	800bc2e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc32:	f000 facd 	bl	800c1d0 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800bc3a:	f3ef 8211 	mrs	r2, BASEPRI
 800bc3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc42:	f383 8811 	msr	BASEPRI, r3
 800bc46:	f3bf 8f6f 	isb	sy
 800bc4a:	f3bf 8f4f 	dsb	sy
 800bc4e:	623a      	str	r2, [r7, #32]
 800bc50:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800bc52:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bc54:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d004      	beq.n	800bc66 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bc5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc5e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bc66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc68:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bc6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bc70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc72:	2202      	movs	r2, #2
 800bc74:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac

			switch( eAction )
 800bc78:	79fb      	ldrb	r3, [r7, #7]
 800bc7a:	2b04      	cmp	r3, #4
 800bc7c:	d82e      	bhi.n	800bcdc <xTaskGenericNotifyFromISR+0xdc>
 800bc7e:	a201      	add	r2, pc, #4	@ (adr r2, 800bc84 <xTaskGenericNotifyFromISR+0x84>)
 800bc80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc84:	0800bcdd 	.word	0x0800bcdd
 800bc88:	0800bc99 	.word	0x0800bc99
 800bc8c:	0800bcab 	.word	0x0800bcab
 800bc90:	0800bcbb 	.word	0x0800bcbb
 800bc94:	0800bcc5 	.word	0x0800bcc5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bc98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc9a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	431a      	orrs	r2, r3
 800bca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bca4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 800bca8:	e018      	b.n	800bcdc <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800bcaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bcb0:	1c5a      	adds	r2, r3, #1
 800bcb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcb4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 800bcb8:	e010      	b.n	800bcdc <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800bcba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcbc:	68ba      	ldr	r2, [r7, #8]
 800bcbe:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 800bcc2:	e00b      	b.n	800bcdc <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bcc4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bcc8:	2b02      	cmp	r3, #2
 800bcca:	d004      	beq.n	800bcd6 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800bccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcce:	68ba      	ldr	r2, [r7, #8]
 800bcd0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800bcd4:	e001      	b.n	800bcda <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800bcda:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bcdc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d147      	bne.n	800bd74 <xTaskGenericNotifyFromISR+0x174>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d00b      	beq.n	800bd04 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800bcec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf0:	f383 8811 	msr	BASEPRI, r3
 800bcf4:	f3bf 8f6f 	isb	sy
 800bcf8:	f3bf 8f4f 	dsb	sy
 800bcfc:	61bb      	str	r3, [r7, #24]
}
 800bcfe:	bf00      	nop
 800bd00:	bf00      	nop
 800bd02:	e7fd      	b.n	800bd00 <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd04:	4b21      	ldr	r3, [pc, #132]	@ (800bd8c <xTaskGenericNotifyFromISR+0x18c>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d11c      	bne.n	800bd46 <xTaskGenericNotifyFromISR+0x146>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd0e:	3304      	adds	r3, #4
 800bd10:	4618      	mov	r0, r3
 800bd12:	f7fe fa41 	bl	800a198 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bd16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	409a      	lsls	r2, r3
 800bd1e:	4b1c      	ldr	r3, [pc, #112]	@ (800bd90 <xTaskGenericNotifyFromISR+0x190>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	4313      	orrs	r3, r2
 800bd24:	4a1a      	ldr	r2, [pc, #104]	@ (800bd90 <xTaskGenericNotifyFromISR+0x190>)
 800bd26:	6013      	str	r3, [r2, #0]
 800bd28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd2c:	4613      	mov	r3, r2
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	4413      	add	r3, r2
 800bd32:	009b      	lsls	r3, r3, #2
 800bd34:	4a17      	ldr	r2, [pc, #92]	@ (800bd94 <xTaskGenericNotifyFromISR+0x194>)
 800bd36:	441a      	add	r2, r3
 800bd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd3a:	3304      	adds	r3, #4
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	4610      	mov	r0, r2
 800bd40:	f7fe f9cf 	bl	800a0e2 <vListInsertEnd>
 800bd44:	e005      	b.n	800bd52 <xTaskGenericNotifyFromISR+0x152>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800bd46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd48:	3318      	adds	r3, #24
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	4812      	ldr	r0, [pc, #72]	@ (800bd98 <xTaskGenericNotifyFromISR+0x198>)
 800bd4e:	f7fe f9c8 	bl	800a0e2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bd52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd56:	4b11      	ldr	r3, [pc, #68]	@ (800bd9c <xTaskGenericNotifyFromISR+0x19c>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d909      	bls.n	800bd74 <xTaskGenericNotifyFromISR+0x174>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800bd60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d003      	beq.n	800bd6e <xTaskGenericNotifyFromISR+0x16e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800bd66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd68:	2201      	movs	r2, #1
 800bd6a:	601a      	str	r2, [r3, #0]
 800bd6c:	e002      	b.n	800bd74 <xTaskGenericNotifyFromISR+0x174>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800bd6e:	4b0c      	ldr	r3, [pc, #48]	@ (800bda0 <xTaskGenericNotifyFromISR+0x1a0>)
 800bd70:	2201      	movs	r2, #1
 800bd72:	601a      	str	r2, [r3, #0]
 800bd74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd76:	617b      	str	r3, [r7, #20]
	__asm volatile
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	f383 8811 	msr	BASEPRI, r3
}
 800bd7e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800bd80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3738      	adds	r7, #56	@ 0x38
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	bf00      	nop
 800bd8c:	200009e0 	.word	0x200009e0
 800bd90:	200009c0 	.word	0x200009c0
 800bd94:	200008bc 	.word	0x200008bc
 800bd98:	20000978 	.word	0x20000978
 800bd9c:	200008b8 	.word	0x200008b8
 800bda0:	200009cc 	.word	0x200009cc

0800bda4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bdae:	4b29      	ldr	r3, [pc, #164]	@ (800be54 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdb4:	4b28      	ldr	r3, [pc, #160]	@ (800be58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	3304      	adds	r3, #4
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7fe f9ec 	bl	800a198 <uxListRemove>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d10b      	bne.n	800bdde <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800bdc6:	4b24      	ldr	r3, [pc, #144]	@ (800be58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdcc:	2201      	movs	r2, #1
 800bdce:	fa02 f303 	lsl.w	r3, r2, r3
 800bdd2:	43da      	mvns	r2, r3
 800bdd4:	4b21      	ldr	r3, [pc, #132]	@ (800be5c <prvAddCurrentTaskToDelayedList+0xb8>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4013      	ands	r3, r2
 800bdda:	4a20      	ldr	r2, [pc, #128]	@ (800be5c <prvAddCurrentTaskToDelayedList+0xb8>)
 800bddc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bde4:	d10a      	bne.n	800bdfc <prvAddCurrentTaskToDelayedList+0x58>
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d007      	beq.n	800bdfc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdec:	4b1a      	ldr	r3, [pc, #104]	@ (800be58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	3304      	adds	r3, #4
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	481a      	ldr	r0, [pc, #104]	@ (800be60 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bdf6:	f7fe f974 	bl	800a0e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bdfa:	e026      	b.n	800be4a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bdfc:	68fa      	ldr	r2, [r7, #12]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	4413      	add	r3, r2
 800be02:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800be04:	4b14      	ldr	r3, [pc, #80]	@ (800be58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	68ba      	ldr	r2, [r7, #8]
 800be0a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800be0c:	68ba      	ldr	r2, [r7, #8]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	429a      	cmp	r2, r3
 800be12:	d209      	bcs.n	800be28 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be14:	4b13      	ldr	r3, [pc, #76]	@ (800be64 <prvAddCurrentTaskToDelayedList+0xc0>)
 800be16:	681a      	ldr	r2, [r3, #0]
 800be18:	4b0f      	ldr	r3, [pc, #60]	@ (800be58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	3304      	adds	r3, #4
 800be1e:	4619      	mov	r1, r3
 800be20:	4610      	mov	r0, r2
 800be22:	f7fe f981 	bl	800a128 <vListInsert>
}
 800be26:	e010      	b.n	800be4a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be28:	4b0f      	ldr	r3, [pc, #60]	@ (800be68 <prvAddCurrentTaskToDelayedList+0xc4>)
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	4b0a      	ldr	r3, [pc, #40]	@ (800be58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	3304      	adds	r3, #4
 800be32:	4619      	mov	r1, r3
 800be34:	4610      	mov	r0, r2
 800be36:	f7fe f977 	bl	800a128 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800be3a:	4b0c      	ldr	r3, [pc, #48]	@ (800be6c <prvAddCurrentTaskToDelayedList+0xc8>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	68ba      	ldr	r2, [r7, #8]
 800be40:	429a      	cmp	r2, r3
 800be42:	d202      	bcs.n	800be4a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800be44:	4a09      	ldr	r2, [pc, #36]	@ (800be6c <prvAddCurrentTaskToDelayedList+0xc8>)
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	6013      	str	r3, [r2, #0]
}
 800be4a:	bf00      	nop
 800be4c:	3710      	adds	r7, #16
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	200009bc 	.word	0x200009bc
 800be58:	200008b8 	.word	0x200008b8
 800be5c:	200009c0 	.word	0x200009c0
 800be60:	200009a4 	.word	0x200009a4
 800be64:	20000974 	.word	0x20000974
 800be68:	20000970 	.word	0x20000970
 800be6c:	200009d8 	.word	0x200009d8

0800be70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800be70:	b480      	push	{r7}
 800be72:	b085      	sub	sp, #20
 800be74:	af00      	add	r7, sp, #0
 800be76:	60f8      	str	r0, [r7, #12]
 800be78:	60b9      	str	r1, [r7, #8]
 800be7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	3b04      	subs	r3, #4
 800be80:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800be88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	3b04      	subs	r3, #4
 800be8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	f023 0201 	bic.w	r2, r3, #1
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	3b04      	subs	r3, #4
 800be9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bea0:	4a08      	ldr	r2, [pc, #32]	@ (800bec4 <pxPortInitialiseStack+0x54>)
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	3b14      	subs	r3, #20
 800beaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800beac:	687a      	ldr	r2, [r7, #4]
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	3b20      	subs	r3, #32
 800beb6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800beb8:	68fb      	ldr	r3, [r7, #12]
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3714      	adds	r7, #20
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bc80      	pop	{r7}
 800bec2:	4770      	bx	lr
 800bec4:	0800bec9 	.word	0x0800bec9

0800bec8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bec8:	b480      	push	{r7}
 800beca:	b085      	sub	sp, #20
 800becc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800bece:	2300      	movs	r3, #0
 800bed0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bed2:	4b12      	ldr	r3, [pc, #72]	@ (800bf1c <prvTaskExitError+0x54>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beda:	d00b      	beq.n	800bef4 <prvTaskExitError+0x2c>
	__asm volatile
 800bedc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bee0:	f383 8811 	msr	BASEPRI, r3
 800bee4:	f3bf 8f6f 	isb	sy
 800bee8:	f3bf 8f4f 	dsb	sy
 800beec:	60fb      	str	r3, [r7, #12]
}
 800beee:	bf00      	nop
 800bef0:	bf00      	nop
 800bef2:	e7fd      	b.n	800bef0 <prvTaskExitError+0x28>
	__asm volatile
 800bef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bef8:	f383 8811 	msr	BASEPRI, r3
 800befc:	f3bf 8f6f 	isb	sy
 800bf00:	f3bf 8f4f 	dsb	sy
 800bf04:	60bb      	str	r3, [r7, #8]
}
 800bf06:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bf08:	bf00      	nop
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d0fc      	beq.n	800bf0a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bf10:	bf00      	nop
 800bf12:	bf00      	nop
 800bf14:	3714      	adds	r7, #20
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bc80      	pop	{r7}
 800bf1a:	4770      	bx	lr
 800bf1c:	200000e8 	.word	0x200000e8

0800bf20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bf20:	4b07      	ldr	r3, [pc, #28]	@ (800bf40 <pxCurrentTCBConst2>)
 800bf22:	6819      	ldr	r1, [r3, #0]
 800bf24:	6808      	ldr	r0, [r1, #0]
 800bf26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bf2a:	f380 8809 	msr	PSP, r0
 800bf2e:	f3bf 8f6f 	isb	sy
 800bf32:	f04f 0000 	mov.w	r0, #0
 800bf36:	f380 8811 	msr	BASEPRI, r0
 800bf3a:	f04e 0e0d 	orr.w	lr, lr, #13
 800bf3e:	4770      	bx	lr

0800bf40 <pxCurrentTCBConst2>:
 800bf40:	200008b8 	.word	0x200008b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bf44:	bf00      	nop
 800bf46:	bf00      	nop

0800bf48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800bf48:	4806      	ldr	r0, [pc, #24]	@ (800bf64 <prvPortStartFirstTask+0x1c>)
 800bf4a:	6800      	ldr	r0, [r0, #0]
 800bf4c:	6800      	ldr	r0, [r0, #0]
 800bf4e:	f380 8808 	msr	MSP, r0
 800bf52:	b662      	cpsie	i
 800bf54:	b661      	cpsie	f
 800bf56:	f3bf 8f4f 	dsb	sy
 800bf5a:	f3bf 8f6f 	isb	sy
 800bf5e:	df00      	svc	0
 800bf60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bf62:	bf00      	nop
 800bf64:	e000ed08 	.word	0xe000ed08

0800bf68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bf6e:	4b32      	ldr	r3, [pc, #200]	@ (800c038 <xPortStartScheduler+0xd0>)
 800bf70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	22ff      	movs	r2, #255	@ 0xff
 800bf7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bf88:	78fb      	ldrb	r3, [r7, #3]
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bf90:	b2da      	uxtb	r2, r3
 800bf92:	4b2a      	ldr	r3, [pc, #168]	@ (800c03c <xPortStartScheduler+0xd4>)
 800bf94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bf96:	4b2a      	ldr	r3, [pc, #168]	@ (800c040 <xPortStartScheduler+0xd8>)
 800bf98:	2207      	movs	r2, #7
 800bf9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf9c:	e009      	b.n	800bfb2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800bf9e:	4b28      	ldr	r3, [pc, #160]	@ (800c040 <xPortStartScheduler+0xd8>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	3b01      	subs	r3, #1
 800bfa4:	4a26      	ldr	r2, [pc, #152]	@ (800c040 <xPortStartScheduler+0xd8>)
 800bfa6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bfa8:	78fb      	ldrb	r3, [r7, #3]
 800bfaa:	b2db      	uxtb	r3, r3
 800bfac:	005b      	lsls	r3, r3, #1
 800bfae:	b2db      	uxtb	r3, r3
 800bfb0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bfb2:	78fb      	ldrb	r3, [r7, #3]
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfba:	2b80      	cmp	r3, #128	@ 0x80
 800bfbc:	d0ef      	beq.n	800bf9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bfbe:	4b20      	ldr	r3, [pc, #128]	@ (800c040 <xPortStartScheduler+0xd8>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f1c3 0307 	rsb	r3, r3, #7
 800bfc6:	2b04      	cmp	r3, #4
 800bfc8:	d00b      	beq.n	800bfe2 <xPortStartScheduler+0x7a>
	__asm volatile
 800bfca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfce:	f383 8811 	msr	BASEPRI, r3
 800bfd2:	f3bf 8f6f 	isb	sy
 800bfd6:	f3bf 8f4f 	dsb	sy
 800bfda:	60bb      	str	r3, [r7, #8]
}
 800bfdc:	bf00      	nop
 800bfde:	bf00      	nop
 800bfe0:	e7fd      	b.n	800bfde <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bfe2:	4b17      	ldr	r3, [pc, #92]	@ (800c040 <xPortStartScheduler+0xd8>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	021b      	lsls	r3, r3, #8
 800bfe8:	4a15      	ldr	r2, [pc, #84]	@ (800c040 <xPortStartScheduler+0xd8>)
 800bfea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bfec:	4b14      	ldr	r3, [pc, #80]	@ (800c040 <xPortStartScheduler+0xd8>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bff4:	4a12      	ldr	r2, [pc, #72]	@ (800c040 <xPortStartScheduler+0xd8>)
 800bff6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	b2da      	uxtb	r2, r3
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c000:	4b10      	ldr	r3, [pc, #64]	@ (800c044 <xPortStartScheduler+0xdc>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	4a0f      	ldr	r2, [pc, #60]	@ (800c044 <xPortStartScheduler+0xdc>)
 800c006:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c00a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c00c:	4b0d      	ldr	r3, [pc, #52]	@ (800c044 <xPortStartScheduler+0xdc>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4a0c      	ldr	r2, [pc, #48]	@ (800c044 <xPortStartScheduler+0xdc>)
 800c012:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c016:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c018:	f000 f8b8 	bl	800c18c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c01c:	4b0a      	ldr	r3, [pc, #40]	@ (800c048 <xPortStartScheduler+0xe0>)
 800c01e:	2200      	movs	r2, #0
 800c020:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c022:	f7ff ff91 	bl	800bf48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c026:	f7ff f9e7 	bl	800b3f8 <vTaskSwitchContext>
	prvTaskExitError();
 800c02a:	f7ff ff4d 	bl	800bec8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c02e:	2300      	movs	r3, #0
}
 800c030:	4618      	mov	r0, r3
 800c032:	3710      	adds	r7, #16
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	e000e400 	.word	0xe000e400
 800c03c:	200009e4 	.word	0x200009e4
 800c040:	200009e8 	.word	0x200009e8
 800c044:	e000ed20 	.word	0xe000ed20
 800c048:	200000e8 	.word	0x200000e8

0800c04c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
	__asm volatile
 800c052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c056:	f383 8811 	msr	BASEPRI, r3
 800c05a:	f3bf 8f6f 	isb	sy
 800c05e:	f3bf 8f4f 	dsb	sy
 800c062:	607b      	str	r3, [r7, #4]
}
 800c064:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c066:	4b0f      	ldr	r3, [pc, #60]	@ (800c0a4 <vPortEnterCritical+0x58>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	3301      	adds	r3, #1
 800c06c:	4a0d      	ldr	r2, [pc, #52]	@ (800c0a4 <vPortEnterCritical+0x58>)
 800c06e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c070:	4b0c      	ldr	r3, [pc, #48]	@ (800c0a4 <vPortEnterCritical+0x58>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	2b01      	cmp	r3, #1
 800c076:	d110      	bne.n	800c09a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c078:	4b0b      	ldr	r3, [pc, #44]	@ (800c0a8 <vPortEnterCritical+0x5c>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d00b      	beq.n	800c09a <vPortEnterCritical+0x4e>
	__asm volatile
 800c082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c086:	f383 8811 	msr	BASEPRI, r3
 800c08a:	f3bf 8f6f 	isb	sy
 800c08e:	f3bf 8f4f 	dsb	sy
 800c092:	603b      	str	r3, [r7, #0]
}
 800c094:	bf00      	nop
 800c096:	bf00      	nop
 800c098:	e7fd      	b.n	800c096 <vPortEnterCritical+0x4a>
	}
}
 800c09a:	bf00      	nop
 800c09c:	370c      	adds	r7, #12
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bc80      	pop	{r7}
 800c0a2:	4770      	bx	lr
 800c0a4:	200000e8 	.word	0x200000e8
 800c0a8:	e000ed04 	.word	0xe000ed04

0800c0ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b083      	sub	sp, #12
 800c0b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c0b2:	4b12      	ldr	r3, [pc, #72]	@ (800c0fc <vPortExitCritical+0x50>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d10b      	bne.n	800c0d2 <vPortExitCritical+0x26>
	__asm volatile
 800c0ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0be:	f383 8811 	msr	BASEPRI, r3
 800c0c2:	f3bf 8f6f 	isb	sy
 800c0c6:	f3bf 8f4f 	dsb	sy
 800c0ca:	607b      	str	r3, [r7, #4]
}
 800c0cc:	bf00      	nop
 800c0ce:	bf00      	nop
 800c0d0:	e7fd      	b.n	800c0ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c0d2:	4b0a      	ldr	r3, [pc, #40]	@ (800c0fc <vPortExitCritical+0x50>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	3b01      	subs	r3, #1
 800c0d8:	4a08      	ldr	r2, [pc, #32]	@ (800c0fc <vPortExitCritical+0x50>)
 800c0da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c0dc:	4b07      	ldr	r3, [pc, #28]	@ (800c0fc <vPortExitCritical+0x50>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d105      	bne.n	800c0f0 <vPortExitCritical+0x44>
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	f383 8811 	msr	BASEPRI, r3
}
 800c0ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c0f0:	bf00      	nop
 800c0f2:	370c      	adds	r7, #12
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bc80      	pop	{r7}
 800c0f8:	4770      	bx	lr
 800c0fa:	bf00      	nop
 800c0fc:	200000e8 	.word	0x200000e8

0800c100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c100:	f3ef 8009 	mrs	r0, PSP
 800c104:	f3bf 8f6f 	isb	sy
 800c108:	4b0d      	ldr	r3, [pc, #52]	@ (800c140 <pxCurrentTCBConst>)
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c110:	6010      	str	r0, [r2, #0]
 800c112:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c116:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c11a:	f380 8811 	msr	BASEPRI, r0
 800c11e:	f7ff f96b 	bl	800b3f8 <vTaskSwitchContext>
 800c122:	f04f 0000 	mov.w	r0, #0
 800c126:	f380 8811 	msr	BASEPRI, r0
 800c12a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c12e:	6819      	ldr	r1, [r3, #0]
 800c130:	6808      	ldr	r0, [r1, #0]
 800c132:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c136:	f380 8809 	msr	PSP, r0
 800c13a:	f3bf 8f6f 	isb	sy
 800c13e:	4770      	bx	lr

0800c140 <pxCurrentTCBConst>:
 800c140:	200008b8 	.word	0x200008b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c144:	bf00      	nop
 800c146:	bf00      	nop

0800c148 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b082      	sub	sp, #8
 800c14c:	af00      	add	r7, sp, #0
	__asm volatile
 800c14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c152:	f383 8811 	msr	BASEPRI, r3
 800c156:	f3bf 8f6f 	isb	sy
 800c15a:	f3bf 8f4f 	dsb	sy
 800c15e:	607b      	str	r3, [r7, #4]
}
 800c160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c162:	f7ff f88b 	bl	800b27c <xTaskIncrementTick>
 800c166:	4603      	mov	r3, r0
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d003      	beq.n	800c174 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c16c:	4b06      	ldr	r3, [pc, #24]	@ (800c188 <SysTick_Handler+0x40>)
 800c16e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c172:	601a      	str	r2, [r3, #0]
 800c174:	2300      	movs	r3, #0
 800c176:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	f383 8811 	msr	BASEPRI, r3
}
 800c17e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c180:	bf00      	nop
 800c182:	3708      	adds	r7, #8
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}
 800c188:	e000ed04 	.word	0xe000ed04

0800c18c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c18c:	b480      	push	{r7}
 800c18e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c190:	4b0a      	ldr	r3, [pc, #40]	@ (800c1bc <vPortSetupTimerInterrupt+0x30>)
 800c192:	2200      	movs	r2, #0
 800c194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c196:	4b0a      	ldr	r3, [pc, #40]	@ (800c1c0 <vPortSetupTimerInterrupt+0x34>)
 800c198:	2200      	movs	r2, #0
 800c19a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c19c:	4b09      	ldr	r3, [pc, #36]	@ (800c1c4 <vPortSetupTimerInterrupt+0x38>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	4a09      	ldr	r2, [pc, #36]	@ (800c1c8 <vPortSetupTimerInterrupt+0x3c>)
 800c1a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c1a6:	099b      	lsrs	r3, r3, #6
 800c1a8:	4a08      	ldr	r2, [pc, #32]	@ (800c1cc <vPortSetupTimerInterrupt+0x40>)
 800c1aa:	3b01      	subs	r3, #1
 800c1ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c1ae:	4b03      	ldr	r3, [pc, #12]	@ (800c1bc <vPortSetupTimerInterrupt+0x30>)
 800c1b0:	2207      	movs	r2, #7
 800c1b2:	601a      	str	r2, [r3, #0]
}
 800c1b4:	bf00      	nop
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bc80      	pop	{r7}
 800c1ba:	4770      	bx	lr
 800c1bc:	e000e010 	.word	0xe000e010
 800c1c0:	e000e018 	.word	0xe000e018
 800c1c4:	200000c8 	.word	0x200000c8
 800c1c8:	10624dd3 	.word	0x10624dd3
 800c1cc:	e000e014 	.word	0xe000e014

0800c1d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b085      	sub	sp, #20
 800c1d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c1d6:	f3ef 8305 	mrs	r3, IPSR
 800c1da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2b0f      	cmp	r3, #15
 800c1e0:	d915      	bls.n	800c20e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c1e2:	4a17      	ldr	r2, [pc, #92]	@ (800c240 <vPortValidateInterruptPriority+0x70>)
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	4413      	add	r3, r2
 800c1e8:	781b      	ldrb	r3, [r3, #0]
 800c1ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c1ec:	4b15      	ldr	r3, [pc, #84]	@ (800c244 <vPortValidateInterruptPriority+0x74>)
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	7afa      	ldrb	r2, [r7, #11]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d20b      	bcs.n	800c20e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1fa:	f383 8811 	msr	BASEPRI, r3
 800c1fe:	f3bf 8f6f 	isb	sy
 800c202:	f3bf 8f4f 	dsb	sy
 800c206:	607b      	str	r3, [r7, #4]
}
 800c208:	bf00      	nop
 800c20a:	bf00      	nop
 800c20c:	e7fd      	b.n	800c20a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c20e:	4b0e      	ldr	r3, [pc, #56]	@ (800c248 <vPortValidateInterruptPriority+0x78>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c216:	4b0d      	ldr	r3, [pc, #52]	@ (800c24c <vPortValidateInterruptPriority+0x7c>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d90b      	bls.n	800c236 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c222:	f383 8811 	msr	BASEPRI, r3
 800c226:	f3bf 8f6f 	isb	sy
 800c22a:	f3bf 8f4f 	dsb	sy
 800c22e:	603b      	str	r3, [r7, #0]
}
 800c230:	bf00      	nop
 800c232:	bf00      	nop
 800c234:	e7fd      	b.n	800c232 <vPortValidateInterruptPriority+0x62>
	}
 800c236:	bf00      	nop
 800c238:	3714      	adds	r7, #20
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bc80      	pop	{r7}
 800c23e:	4770      	bx	lr
 800c240:	e000e3f0 	.word	0xe000e3f0
 800c244:	200009e4 	.word	0x200009e4
 800c248:	e000ed0c 	.word	0xe000ed0c
 800c24c:	200009e8 	.word	0x200009e8

0800c250 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b08a      	sub	sp, #40	@ 0x28
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c258:	2300      	movs	r3, #0
 800c25a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c25c:	f7fe ff62 	bl	800b124 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c260:	4b5a      	ldr	r3, [pc, #360]	@ (800c3cc <pvPortMalloc+0x17c>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d101      	bne.n	800c26c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c268:	f000 f916 	bl	800c498 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c26c:	4b58      	ldr	r3, [pc, #352]	@ (800c3d0 <pvPortMalloc+0x180>)
 800c26e:	681a      	ldr	r2, [r3, #0]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	4013      	ands	r3, r2
 800c274:	2b00      	cmp	r3, #0
 800c276:	f040 8090 	bne.w	800c39a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d01e      	beq.n	800c2be <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c280:	2208      	movs	r2, #8
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4413      	add	r3, r2
 800c286:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f003 0307 	and.w	r3, r3, #7
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d015      	beq.n	800c2be <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f023 0307 	bic.w	r3, r3, #7
 800c298:	3308      	adds	r3, #8
 800c29a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f003 0307 	and.w	r3, r3, #7
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d00b      	beq.n	800c2be <pvPortMalloc+0x6e>
	__asm volatile
 800c2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2aa:	f383 8811 	msr	BASEPRI, r3
 800c2ae:	f3bf 8f6f 	isb	sy
 800c2b2:	f3bf 8f4f 	dsb	sy
 800c2b6:	617b      	str	r3, [r7, #20]
}
 800c2b8:	bf00      	nop
 800c2ba:	bf00      	nop
 800c2bc:	e7fd      	b.n	800c2ba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d06a      	beq.n	800c39a <pvPortMalloc+0x14a>
 800c2c4:	4b43      	ldr	r3, [pc, #268]	@ (800c3d4 <pvPortMalloc+0x184>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d865      	bhi.n	800c39a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c2ce:	4b42      	ldr	r3, [pc, #264]	@ (800c3d8 <pvPortMalloc+0x188>)
 800c2d0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c2d2:	4b41      	ldr	r3, [pc, #260]	@ (800c3d8 <pvPortMalloc+0x188>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2d8:	e004      	b.n	800c2e4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2dc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e6:	685b      	ldr	r3, [r3, #4]
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d903      	bls.n	800c2f6 <pvPortMalloc+0xa6>
 800c2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d1f1      	bne.n	800c2da <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c2f6:	4b35      	ldr	r3, [pc, #212]	@ (800c3cc <pvPortMalloc+0x17c>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d04c      	beq.n	800c39a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c300:	6a3b      	ldr	r3, [r7, #32]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2208      	movs	r2, #8
 800c306:	4413      	add	r3, r2
 800c308:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	6a3b      	ldr	r3, [r7, #32]
 800c310:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c314:	685a      	ldr	r2, [r3, #4]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	1ad2      	subs	r2, r2, r3
 800c31a:	2308      	movs	r3, #8
 800c31c:	005b      	lsls	r3, r3, #1
 800c31e:	429a      	cmp	r2, r3
 800c320:	d920      	bls.n	800c364 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	4413      	add	r3, r2
 800c328:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c32a:	69bb      	ldr	r3, [r7, #24]
 800c32c:	f003 0307 	and.w	r3, r3, #7
 800c330:	2b00      	cmp	r3, #0
 800c332:	d00b      	beq.n	800c34c <pvPortMalloc+0xfc>
	__asm volatile
 800c334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c338:	f383 8811 	msr	BASEPRI, r3
 800c33c:	f3bf 8f6f 	isb	sy
 800c340:	f3bf 8f4f 	dsb	sy
 800c344:	613b      	str	r3, [r7, #16]
}
 800c346:	bf00      	nop
 800c348:	bf00      	nop
 800c34a:	e7fd      	b.n	800c348 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c34e:	685a      	ldr	r2, [r3, #4]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	1ad2      	subs	r2, r2, r3
 800c354:	69bb      	ldr	r3, [r7, #24]
 800c356:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c35a:	687a      	ldr	r2, [r7, #4]
 800c35c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c35e:	69b8      	ldr	r0, [r7, #24]
 800c360:	f000 f8fc 	bl	800c55c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c364:	4b1b      	ldr	r3, [pc, #108]	@ (800c3d4 <pvPortMalloc+0x184>)
 800c366:	681a      	ldr	r2, [r3, #0]
 800c368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c36a:	685b      	ldr	r3, [r3, #4]
 800c36c:	1ad3      	subs	r3, r2, r3
 800c36e:	4a19      	ldr	r2, [pc, #100]	@ (800c3d4 <pvPortMalloc+0x184>)
 800c370:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c372:	4b18      	ldr	r3, [pc, #96]	@ (800c3d4 <pvPortMalloc+0x184>)
 800c374:	681a      	ldr	r2, [r3, #0]
 800c376:	4b19      	ldr	r3, [pc, #100]	@ (800c3dc <pvPortMalloc+0x18c>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	429a      	cmp	r2, r3
 800c37c:	d203      	bcs.n	800c386 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c37e:	4b15      	ldr	r3, [pc, #84]	@ (800c3d4 <pvPortMalloc+0x184>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	4a16      	ldr	r2, [pc, #88]	@ (800c3dc <pvPortMalloc+0x18c>)
 800c384:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c388:	685a      	ldr	r2, [r3, #4]
 800c38a:	4b11      	ldr	r3, [pc, #68]	@ (800c3d0 <pvPortMalloc+0x180>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	431a      	orrs	r2, r3
 800c390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c392:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c396:	2200      	movs	r2, #0
 800c398:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c39a:	f7fe fed1 	bl	800b140 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c39e:	69fb      	ldr	r3, [r7, #28]
 800c3a0:	f003 0307 	and.w	r3, r3, #7
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d00b      	beq.n	800c3c0 <pvPortMalloc+0x170>
	__asm volatile
 800c3a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3ac:	f383 8811 	msr	BASEPRI, r3
 800c3b0:	f3bf 8f6f 	isb	sy
 800c3b4:	f3bf 8f4f 	dsb	sy
 800c3b8:	60fb      	str	r3, [r7, #12]
}
 800c3ba:	bf00      	nop
 800c3bc:	bf00      	nop
 800c3be:	e7fd      	b.n	800c3bc <pvPortMalloc+0x16c>
	return pvReturn;
 800c3c0:	69fb      	ldr	r3, [r7, #28]
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3728      	adds	r7, #40	@ 0x28
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}
 800c3ca:	bf00      	nop
 800c3cc:	200059f4 	.word	0x200059f4
 800c3d0:	20005a00 	.word	0x20005a00
 800c3d4:	200059f8 	.word	0x200059f8
 800c3d8:	200059ec 	.word	0x200059ec
 800c3dc:	200059fc 	.word	0x200059fc

0800c3e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b086      	sub	sp, #24
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d04a      	beq.n	800c488 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c3f2:	2308      	movs	r3, #8
 800c3f4:	425b      	negs	r3, r3
 800c3f6:	697a      	ldr	r2, [r7, #20]
 800c3f8:	4413      	add	r3, r2
 800c3fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	685a      	ldr	r2, [r3, #4]
 800c404:	4b22      	ldr	r3, [pc, #136]	@ (800c490 <vPortFree+0xb0>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	4013      	ands	r3, r2
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d10b      	bne.n	800c426 <vPortFree+0x46>
	__asm volatile
 800c40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c412:	f383 8811 	msr	BASEPRI, r3
 800c416:	f3bf 8f6f 	isb	sy
 800c41a:	f3bf 8f4f 	dsb	sy
 800c41e:	60fb      	str	r3, [r7, #12]
}
 800c420:	bf00      	nop
 800c422:	bf00      	nop
 800c424:	e7fd      	b.n	800c422 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d00b      	beq.n	800c446 <vPortFree+0x66>
	__asm volatile
 800c42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c432:	f383 8811 	msr	BASEPRI, r3
 800c436:	f3bf 8f6f 	isb	sy
 800c43a:	f3bf 8f4f 	dsb	sy
 800c43e:	60bb      	str	r3, [r7, #8]
}
 800c440:	bf00      	nop
 800c442:	bf00      	nop
 800c444:	e7fd      	b.n	800c442 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	685a      	ldr	r2, [r3, #4]
 800c44a:	4b11      	ldr	r3, [pc, #68]	@ (800c490 <vPortFree+0xb0>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4013      	ands	r3, r2
 800c450:	2b00      	cmp	r3, #0
 800c452:	d019      	beq.n	800c488 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d115      	bne.n	800c488 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	685a      	ldr	r2, [r3, #4]
 800c460:	4b0b      	ldr	r3, [pc, #44]	@ (800c490 <vPortFree+0xb0>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	43db      	mvns	r3, r3
 800c466:	401a      	ands	r2, r3
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c46c:	f7fe fe5a 	bl	800b124 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	685a      	ldr	r2, [r3, #4]
 800c474:	4b07      	ldr	r3, [pc, #28]	@ (800c494 <vPortFree+0xb4>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4413      	add	r3, r2
 800c47a:	4a06      	ldr	r2, [pc, #24]	@ (800c494 <vPortFree+0xb4>)
 800c47c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c47e:	6938      	ldr	r0, [r7, #16]
 800c480:	f000 f86c 	bl	800c55c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c484:	f7fe fe5c 	bl	800b140 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c488:	bf00      	nop
 800c48a:	3718      	adds	r7, #24
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}
 800c490:	20005a00 	.word	0x20005a00
 800c494:	200059f8 	.word	0x200059f8

0800c498 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c498:	b480      	push	{r7}
 800c49a:	b085      	sub	sp, #20
 800c49c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c49e:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 800c4a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c4a4:	4b27      	ldr	r3, [pc, #156]	@ (800c544 <prvHeapInit+0xac>)
 800c4a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	f003 0307 	and.w	r3, r3, #7
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d00c      	beq.n	800c4cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	3307      	adds	r3, #7
 800c4b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f023 0307 	bic.w	r3, r3, #7
 800c4be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c4c0:	68ba      	ldr	r2, [r7, #8]
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	1ad3      	subs	r3, r2, r3
 800c4c6:	4a1f      	ldr	r2, [pc, #124]	@ (800c544 <prvHeapInit+0xac>)
 800c4c8:	4413      	add	r3, r2
 800c4ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c4d0:	4a1d      	ldr	r2, [pc, #116]	@ (800c548 <prvHeapInit+0xb0>)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c4d6:	4b1c      	ldr	r3, [pc, #112]	@ (800c548 <prvHeapInit+0xb0>)
 800c4d8:	2200      	movs	r2, #0
 800c4da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	68ba      	ldr	r2, [r7, #8]
 800c4e0:	4413      	add	r3, r2
 800c4e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c4e4:	2208      	movs	r2, #8
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	1a9b      	subs	r3, r3, r2
 800c4ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f023 0307 	bic.w	r3, r3, #7
 800c4f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	4a15      	ldr	r2, [pc, #84]	@ (800c54c <prvHeapInit+0xb4>)
 800c4f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c4fa:	4b14      	ldr	r3, [pc, #80]	@ (800c54c <prvHeapInit+0xb4>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	2200      	movs	r2, #0
 800c500:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c502:	4b12      	ldr	r3, [pc, #72]	@ (800c54c <prvHeapInit+0xb4>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	2200      	movs	r2, #0
 800c508:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	68fa      	ldr	r2, [r7, #12]
 800c512:	1ad2      	subs	r2, r2, r3
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c518:	4b0c      	ldr	r3, [pc, #48]	@ (800c54c <prvHeapInit+0xb4>)
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	4a0a      	ldr	r2, [pc, #40]	@ (800c550 <prvHeapInit+0xb8>)
 800c526:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	4a09      	ldr	r2, [pc, #36]	@ (800c554 <prvHeapInit+0xbc>)
 800c52e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c530:	4b09      	ldr	r3, [pc, #36]	@ (800c558 <prvHeapInit+0xc0>)
 800c532:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c536:	601a      	str	r2, [r3, #0]
}
 800c538:	bf00      	nop
 800c53a:	3714      	adds	r7, #20
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bc80      	pop	{r7}
 800c540:	4770      	bx	lr
 800c542:	bf00      	nop
 800c544:	200009ec 	.word	0x200009ec
 800c548:	200059ec 	.word	0x200059ec
 800c54c:	200059f4 	.word	0x200059f4
 800c550:	200059fc 	.word	0x200059fc
 800c554:	200059f8 	.word	0x200059f8
 800c558:	20005a00 	.word	0x20005a00

0800c55c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c55c:	b480      	push	{r7}
 800c55e:	b085      	sub	sp, #20
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c564:	4b27      	ldr	r3, [pc, #156]	@ (800c604 <prvInsertBlockIntoFreeList+0xa8>)
 800c566:	60fb      	str	r3, [r7, #12]
 800c568:	e002      	b.n	800c570 <prvInsertBlockIntoFreeList+0x14>
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	60fb      	str	r3, [r7, #12]
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	429a      	cmp	r2, r3
 800c578:	d8f7      	bhi.n	800c56a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	685b      	ldr	r3, [r3, #4]
 800c582:	68ba      	ldr	r2, [r7, #8]
 800c584:	4413      	add	r3, r2
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	429a      	cmp	r2, r3
 800c58a:	d108      	bne.n	800c59e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	685a      	ldr	r2, [r3, #4]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	441a      	add	r2, r3
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	68ba      	ldr	r2, [r7, #8]
 800c5a8:	441a      	add	r2, r3
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d118      	bne.n	800c5e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681a      	ldr	r2, [r3, #0]
 800c5b6:	4b14      	ldr	r3, [pc, #80]	@ (800c608 <prvInsertBlockIntoFreeList+0xac>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d00d      	beq.n	800c5da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	685a      	ldr	r2, [r3, #4]
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	685b      	ldr	r3, [r3, #4]
 800c5c8:	441a      	add	r2, r3
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	681a      	ldr	r2, [r3, #0]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	601a      	str	r2, [r3, #0]
 800c5d8:	e008      	b.n	800c5ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c5da:	4b0b      	ldr	r3, [pc, #44]	@ (800c608 <prvInsertBlockIntoFreeList+0xac>)
 800c5dc:	681a      	ldr	r2, [r3, #0]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	601a      	str	r2, [r3, #0]
 800c5e2:	e003      	b.n	800c5ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681a      	ldr	r2, [r3, #0]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c5ec:	68fa      	ldr	r2, [r7, #12]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d002      	beq.n	800c5fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5fa:	bf00      	nop
 800c5fc:	3714      	adds	r7, #20
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bc80      	pop	{r7}
 800c602:	4770      	bx	lr
 800c604:	200059ec 	.word	0x200059ec
 800c608:	200059f4 	.word	0x200059f4

0800c60c <malloc>:
 800c60c:	4b02      	ldr	r3, [pc, #8]	@ (800c618 <malloc+0xc>)
 800c60e:	4601      	mov	r1, r0
 800c610:	6818      	ldr	r0, [r3, #0]
 800c612:	f000 b82d 	b.w	800c670 <_malloc_r>
 800c616:	bf00      	nop
 800c618:	2000026c 	.word	0x2000026c

0800c61c <free>:
 800c61c:	4b02      	ldr	r3, [pc, #8]	@ (800c628 <free+0xc>)
 800c61e:	4601      	mov	r1, r0
 800c620:	6818      	ldr	r0, [r3, #0]
 800c622:	f003 bab5 	b.w	800fb90 <_free_r>
 800c626:	bf00      	nop
 800c628:	2000026c 	.word	0x2000026c

0800c62c <sbrk_aligned>:
 800c62c:	b570      	push	{r4, r5, r6, lr}
 800c62e:	4e0f      	ldr	r6, [pc, #60]	@ (800c66c <sbrk_aligned+0x40>)
 800c630:	460c      	mov	r4, r1
 800c632:	6831      	ldr	r1, [r6, #0]
 800c634:	4605      	mov	r5, r0
 800c636:	b911      	cbnz	r1, 800c63e <sbrk_aligned+0x12>
 800c638:	f002 fbb2 	bl	800eda0 <_sbrk_r>
 800c63c:	6030      	str	r0, [r6, #0]
 800c63e:	4621      	mov	r1, r4
 800c640:	4628      	mov	r0, r5
 800c642:	f002 fbad 	bl	800eda0 <_sbrk_r>
 800c646:	1c43      	adds	r3, r0, #1
 800c648:	d103      	bne.n	800c652 <sbrk_aligned+0x26>
 800c64a:	f04f 34ff 	mov.w	r4, #4294967295
 800c64e:	4620      	mov	r0, r4
 800c650:	bd70      	pop	{r4, r5, r6, pc}
 800c652:	1cc4      	adds	r4, r0, #3
 800c654:	f024 0403 	bic.w	r4, r4, #3
 800c658:	42a0      	cmp	r0, r4
 800c65a:	d0f8      	beq.n	800c64e <sbrk_aligned+0x22>
 800c65c:	1a21      	subs	r1, r4, r0
 800c65e:	4628      	mov	r0, r5
 800c660:	f002 fb9e 	bl	800eda0 <_sbrk_r>
 800c664:	3001      	adds	r0, #1
 800c666:	d1f2      	bne.n	800c64e <sbrk_aligned+0x22>
 800c668:	e7ef      	b.n	800c64a <sbrk_aligned+0x1e>
 800c66a:	bf00      	nop
 800c66c:	20005a04 	.word	0x20005a04

0800c670 <_malloc_r>:
 800c670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c674:	1ccd      	adds	r5, r1, #3
 800c676:	f025 0503 	bic.w	r5, r5, #3
 800c67a:	3508      	adds	r5, #8
 800c67c:	2d0c      	cmp	r5, #12
 800c67e:	bf38      	it	cc
 800c680:	250c      	movcc	r5, #12
 800c682:	2d00      	cmp	r5, #0
 800c684:	4606      	mov	r6, r0
 800c686:	db01      	blt.n	800c68c <_malloc_r+0x1c>
 800c688:	42a9      	cmp	r1, r5
 800c68a:	d904      	bls.n	800c696 <_malloc_r+0x26>
 800c68c:	230c      	movs	r3, #12
 800c68e:	6033      	str	r3, [r6, #0]
 800c690:	2000      	movs	r0, #0
 800c692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c696:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c76c <_malloc_r+0xfc>
 800c69a:	f000 f869 	bl	800c770 <__malloc_lock>
 800c69e:	f8d8 3000 	ldr.w	r3, [r8]
 800c6a2:	461c      	mov	r4, r3
 800c6a4:	bb44      	cbnz	r4, 800c6f8 <_malloc_r+0x88>
 800c6a6:	4629      	mov	r1, r5
 800c6a8:	4630      	mov	r0, r6
 800c6aa:	f7ff ffbf 	bl	800c62c <sbrk_aligned>
 800c6ae:	1c43      	adds	r3, r0, #1
 800c6b0:	4604      	mov	r4, r0
 800c6b2:	d158      	bne.n	800c766 <_malloc_r+0xf6>
 800c6b4:	f8d8 4000 	ldr.w	r4, [r8]
 800c6b8:	4627      	mov	r7, r4
 800c6ba:	2f00      	cmp	r7, #0
 800c6bc:	d143      	bne.n	800c746 <_malloc_r+0xd6>
 800c6be:	2c00      	cmp	r4, #0
 800c6c0:	d04b      	beq.n	800c75a <_malloc_r+0xea>
 800c6c2:	6823      	ldr	r3, [r4, #0]
 800c6c4:	4639      	mov	r1, r7
 800c6c6:	4630      	mov	r0, r6
 800c6c8:	eb04 0903 	add.w	r9, r4, r3
 800c6cc:	f002 fb68 	bl	800eda0 <_sbrk_r>
 800c6d0:	4581      	cmp	r9, r0
 800c6d2:	d142      	bne.n	800c75a <_malloc_r+0xea>
 800c6d4:	6821      	ldr	r1, [r4, #0]
 800c6d6:	4630      	mov	r0, r6
 800c6d8:	1a6d      	subs	r5, r5, r1
 800c6da:	4629      	mov	r1, r5
 800c6dc:	f7ff ffa6 	bl	800c62c <sbrk_aligned>
 800c6e0:	3001      	adds	r0, #1
 800c6e2:	d03a      	beq.n	800c75a <_malloc_r+0xea>
 800c6e4:	6823      	ldr	r3, [r4, #0]
 800c6e6:	442b      	add	r3, r5
 800c6e8:	6023      	str	r3, [r4, #0]
 800c6ea:	f8d8 3000 	ldr.w	r3, [r8]
 800c6ee:	685a      	ldr	r2, [r3, #4]
 800c6f0:	bb62      	cbnz	r2, 800c74c <_malloc_r+0xdc>
 800c6f2:	f8c8 7000 	str.w	r7, [r8]
 800c6f6:	e00f      	b.n	800c718 <_malloc_r+0xa8>
 800c6f8:	6822      	ldr	r2, [r4, #0]
 800c6fa:	1b52      	subs	r2, r2, r5
 800c6fc:	d420      	bmi.n	800c740 <_malloc_r+0xd0>
 800c6fe:	2a0b      	cmp	r2, #11
 800c700:	d917      	bls.n	800c732 <_malloc_r+0xc2>
 800c702:	1961      	adds	r1, r4, r5
 800c704:	42a3      	cmp	r3, r4
 800c706:	6025      	str	r5, [r4, #0]
 800c708:	bf18      	it	ne
 800c70a:	6059      	strne	r1, [r3, #4]
 800c70c:	6863      	ldr	r3, [r4, #4]
 800c70e:	bf08      	it	eq
 800c710:	f8c8 1000 	streq.w	r1, [r8]
 800c714:	5162      	str	r2, [r4, r5]
 800c716:	604b      	str	r3, [r1, #4]
 800c718:	4630      	mov	r0, r6
 800c71a:	f000 f82f 	bl	800c77c <__malloc_unlock>
 800c71e:	f104 000b 	add.w	r0, r4, #11
 800c722:	1d23      	adds	r3, r4, #4
 800c724:	f020 0007 	bic.w	r0, r0, #7
 800c728:	1ac2      	subs	r2, r0, r3
 800c72a:	bf1c      	itt	ne
 800c72c:	1a1b      	subne	r3, r3, r0
 800c72e:	50a3      	strne	r3, [r4, r2]
 800c730:	e7af      	b.n	800c692 <_malloc_r+0x22>
 800c732:	6862      	ldr	r2, [r4, #4]
 800c734:	42a3      	cmp	r3, r4
 800c736:	bf0c      	ite	eq
 800c738:	f8c8 2000 	streq.w	r2, [r8]
 800c73c:	605a      	strne	r2, [r3, #4]
 800c73e:	e7eb      	b.n	800c718 <_malloc_r+0xa8>
 800c740:	4623      	mov	r3, r4
 800c742:	6864      	ldr	r4, [r4, #4]
 800c744:	e7ae      	b.n	800c6a4 <_malloc_r+0x34>
 800c746:	463c      	mov	r4, r7
 800c748:	687f      	ldr	r7, [r7, #4]
 800c74a:	e7b6      	b.n	800c6ba <_malloc_r+0x4a>
 800c74c:	461a      	mov	r2, r3
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	42a3      	cmp	r3, r4
 800c752:	d1fb      	bne.n	800c74c <_malloc_r+0xdc>
 800c754:	2300      	movs	r3, #0
 800c756:	6053      	str	r3, [r2, #4]
 800c758:	e7de      	b.n	800c718 <_malloc_r+0xa8>
 800c75a:	230c      	movs	r3, #12
 800c75c:	4630      	mov	r0, r6
 800c75e:	6033      	str	r3, [r6, #0]
 800c760:	f000 f80c 	bl	800c77c <__malloc_unlock>
 800c764:	e794      	b.n	800c690 <_malloc_r+0x20>
 800c766:	6005      	str	r5, [r0, #0]
 800c768:	e7d6      	b.n	800c718 <_malloc_r+0xa8>
 800c76a:	bf00      	nop
 800c76c:	20005a08 	.word	0x20005a08

0800c770 <__malloc_lock>:
 800c770:	4801      	ldr	r0, [pc, #4]	@ (800c778 <__malloc_lock+0x8>)
 800c772:	f002 bb63 	b.w	800ee3c <__retarget_lock_acquire_recursive>
 800c776:	bf00      	nop
 800c778:	20005b72 	.word	0x20005b72

0800c77c <__malloc_unlock>:
 800c77c:	4801      	ldr	r0, [pc, #4]	@ (800c784 <__malloc_unlock+0x8>)
 800c77e:	f002 bb5f 	b.w	800ee40 <__retarget_lock_release_recursive>
 800c782:	bf00      	nop
 800c784:	20005b72 	.word	0x20005b72

0800c788 <sulp>:
 800c788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c78c:	460f      	mov	r7, r1
 800c78e:	4690      	mov	r8, r2
 800c790:	f004 f948 	bl	8010a24 <__ulp>
 800c794:	4604      	mov	r4, r0
 800c796:	460d      	mov	r5, r1
 800c798:	f1b8 0f00 	cmp.w	r8, #0
 800c79c:	d011      	beq.n	800c7c2 <sulp+0x3a>
 800c79e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800c7a2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	dd0b      	ble.n	800c7c2 <sulp+0x3a>
 800c7aa:	2400      	movs	r4, #0
 800c7ac:	051b      	lsls	r3, r3, #20
 800c7ae:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c7b2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c7b6:	4622      	mov	r2, r4
 800c7b8:	462b      	mov	r3, r5
 800c7ba:	f7f3 ff07 	bl	80005cc <__aeabi_dmul>
 800c7be:	4604      	mov	r4, r0
 800c7c0:	460d      	mov	r5, r1
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	4629      	mov	r1, r5
 800c7c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7ca:	0000      	movs	r0, r0
 800c7cc:	0000      	movs	r0, r0
	...

0800c7d0 <_strtod_l>:
 800c7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d4:	b09f      	sub	sp, #124	@ 0x7c
 800c7d6:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c7d8:	2200      	movs	r2, #0
 800c7da:	460c      	mov	r4, r1
 800c7dc:	921a      	str	r2, [sp, #104]	@ 0x68
 800c7de:	f04f 0a00 	mov.w	sl, #0
 800c7e2:	f04f 0b00 	mov.w	fp, #0
 800c7e6:	460a      	mov	r2, r1
 800c7e8:	9005      	str	r0, [sp, #20]
 800c7ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800c7ec:	7811      	ldrb	r1, [r2, #0]
 800c7ee:	292b      	cmp	r1, #43	@ 0x2b
 800c7f0:	d048      	beq.n	800c884 <_strtod_l+0xb4>
 800c7f2:	d836      	bhi.n	800c862 <_strtod_l+0x92>
 800c7f4:	290d      	cmp	r1, #13
 800c7f6:	d830      	bhi.n	800c85a <_strtod_l+0x8a>
 800c7f8:	2908      	cmp	r1, #8
 800c7fa:	d830      	bhi.n	800c85e <_strtod_l+0x8e>
 800c7fc:	2900      	cmp	r1, #0
 800c7fe:	d039      	beq.n	800c874 <_strtod_l+0xa4>
 800c800:	2200      	movs	r2, #0
 800c802:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c804:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c806:	782a      	ldrb	r2, [r5, #0]
 800c808:	2a30      	cmp	r2, #48	@ 0x30
 800c80a:	f040 80b1 	bne.w	800c970 <_strtod_l+0x1a0>
 800c80e:	786a      	ldrb	r2, [r5, #1]
 800c810:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c814:	2a58      	cmp	r2, #88	@ 0x58
 800c816:	d16c      	bne.n	800c8f2 <_strtod_l+0x122>
 800c818:	9302      	str	r3, [sp, #8]
 800c81a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c81c:	4a8e      	ldr	r2, [pc, #568]	@ (800ca58 <_strtod_l+0x288>)
 800c81e:	9301      	str	r3, [sp, #4]
 800c820:	ab1a      	add	r3, sp, #104	@ 0x68
 800c822:	9300      	str	r3, [sp, #0]
 800c824:	9805      	ldr	r0, [sp, #20]
 800c826:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c828:	a919      	add	r1, sp, #100	@ 0x64
 800c82a:	f003 fa61 	bl	800fcf0 <__gethex>
 800c82e:	f010 060f 	ands.w	r6, r0, #15
 800c832:	4604      	mov	r4, r0
 800c834:	d005      	beq.n	800c842 <_strtod_l+0x72>
 800c836:	2e06      	cmp	r6, #6
 800c838:	d126      	bne.n	800c888 <_strtod_l+0xb8>
 800c83a:	2300      	movs	r3, #0
 800c83c:	3501      	adds	r5, #1
 800c83e:	9519      	str	r5, [sp, #100]	@ 0x64
 800c840:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c842:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c844:	2b00      	cmp	r3, #0
 800c846:	f040 8584 	bne.w	800d352 <_strtod_l+0xb82>
 800c84a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c84c:	b1bb      	cbz	r3, 800c87e <_strtod_l+0xae>
 800c84e:	4650      	mov	r0, sl
 800c850:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800c854:	b01f      	add	sp, #124	@ 0x7c
 800c856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c85a:	2920      	cmp	r1, #32
 800c85c:	d1d0      	bne.n	800c800 <_strtod_l+0x30>
 800c85e:	3201      	adds	r2, #1
 800c860:	e7c3      	b.n	800c7ea <_strtod_l+0x1a>
 800c862:	292d      	cmp	r1, #45	@ 0x2d
 800c864:	d1cc      	bne.n	800c800 <_strtod_l+0x30>
 800c866:	2101      	movs	r1, #1
 800c868:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c86a:	1c51      	adds	r1, r2, #1
 800c86c:	9119      	str	r1, [sp, #100]	@ 0x64
 800c86e:	7852      	ldrb	r2, [r2, #1]
 800c870:	2a00      	cmp	r2, #0
 800c872:	d1c7      	bne.n	800c804 <_strtod_l+0x34>
 800c874:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c876:	9419      	str	r4, [sp, #100]	@ 0x64
 800c878:	2b00      	cmp	r3, #0
 800c87a:	f040 8568 	bne.w	800d34e <_strtod_l+0xb7e>
 800c87e:	4650      	mov	r0, sl
 800c880:	4659      	mov	r1, fp
 800c882:	e7e7      	b.n	800c854 <_strtod_l+0x84>
 800c884:	2100      	movs	r1, #0
 800c886:	e7ef      	b.n	800c868 <_strtod_l+0x98>
 800c888:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c88a:	b13a      	cbz	r2, 800c89c <_strtod_l+0xcc>
 800c88c:	2135      	movs	r1, #53	@ 0x35
 800c88e:	a81c      	add	r0, sp, #112	@ 0x70
 800c890:	f004 f9b8 	bl	8010c04 <__copybits>
 800c894:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c896:	9805      	ldr	r0, [sp, #20]
 800c898:	f003 fd92 	bl	80103c0 <_Bfree>
 800c89c:	3e01      	subs	r6, #1
 800c89e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c8a0:	2e04      	cmp	r6, #4
 800c8a2:	d806      	bhi.n	800c8b2 <_strtod_l+0xe2>
 800c8a4:	e8df f006 	tbb	[pc, r6]
 800c8a8:	201d0314 	.word	0x201d0314
 800c8ac:	14          	.byte	0x14
 800c8ad:	00          	.byte	0x00
 800c8ae:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c8b2:	05e1      	lsls	r1, r4, #23
 800c8b4:	bf48      	it	mi
 800c8b6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c8ba:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c8be:	0d1b      	lsrs	r3, r3, #20
 800c8c0:	051b      	lsls	r3, r3, #20
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d1bd      	bne.n	800c842 <_strtod_l+0x72>
 800c8c6:	f002 fa8d 	bl	800ede4 <__errno>
 800c8ca:	2322      	movs	r3, #34	@ 0x22
 800c8cc:	6003      	str	r3, [r0, #0]
 800c8ce:	e7b8      	b.n	800c842 <_strtod_l+0x72>
 800c8d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c8d4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c8d8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c8dc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c8e0:	e7e7      	b.n	800c8b2 <_strtod_l+0xe2>
 800c8e2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800ca5c <_strtod_l+0x28c>
 800c8e6:	e7e4      	b.n	800c8b2 <_strtod_l+0xe2>
 800c8e8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c8ec:	f04f 3aff 	mov.w	sl, #4294967295
 800c8f0:	e7df      	b.n	800c8b2 <_strtod_l+0xe2>
 800c8f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c8f4:	1c5a      	adds	r2, r3, #1
 800c8f6:	9219      	str	r2, [sp, #100]	@ 0x64
 800c8f8:	785b      	ldrb	r3, [r3, #1]
 800c8fa:	2b30      	cmp	r3, #48	@ 0x30
 800c8fc:	d0f9      	beq.n	800c8f2 <_strtod_l+0x122>
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d09f      	beq.n	800c842 <_strtod_l+0x72>
 800c902:	2301      	movs	r3, #1
 800c904:	9309      	str	r3, [sp, #36]	@ 0x24
 800c906:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c908:	220a      	movs	r2, #10
 800c90a:	930c      	str	r3, [sp, #48]	@ 0x30
 800c90c:	2300      	movs	r3, #0
 800c90e:	461f      	mov	r7, r3
 800c910:	9308      	str	r3, [sp, #32]
 800c912:	930a      	str	r3, [sp, #40]	@ 0x28
 800c914:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c916:	7805      	ldrb	r5, [r0, #0]
 800c918:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c91c:	b2d9      	uxtb	r1, r3
 800c91e:	2909      	cmp	r1, #9
 800c920:	d928      	bls.n	800c974 <_strtod_l+0x1a4>
 800c922:	2201      	movs	r2, #1
 800c924:	494e      	ldr	r1, [pc, #312]	@ (800ca60 <_strtod_l+0x290>)
 800c926:	f001 fbb3 	bl	800e090 <strncmp>
 800c92a:	2800      	cmp	r0, #0
 800c92c:	d032      	beq.n	800c994 <_strtod_l+0x1c4>
 800c92e:	2000      	movs	r0, #0
 800c930:	462a      	mov	r2, r5
 800c932:	4681      	mov	r9, r0
 800c934:	463d      	mov	r5, r7
 800c936:	4603      	mov	r3, r0
 800c938:	2a65      	cmp	r2, #101	@ 0x65
 800c93a:	d001      	beq.n	800c940 <_strtod_l+0x170>
 800c93c:	2a45      	cmp	r2, #69	@ 0x45
 800c93e:	d114      	bne.n	800c96a <_strtod_l+0x19a>
 800c940:	b91d      	cbnz	r5, 800c94a <_strtod_l+0x17a>
 800c942:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c944:	4302      	orrs	r2, r0
 800c946:	d095      	beq.n	800c874 <_strtod_l+0xa4>
 800c948:	2500      	movs	r5, #0
 800c94a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c94c:	1c62      	adds	r2, r4, #1
 800c94e:	9219      	str	r2, [sp, #100]	@ 0x64
 800c950:	7862      	ldrb	r2, [r4, #1]
 800c952:	2a2b      	cmp	r2, #43	@ 0x2b
 800c954:	d077      	beq.n	800ca46 <_strtod_l+0x276>
 800c956:	2a2d      	cmp	r2, #45	@ 0x2d
 800c958:	d07b      	beq.n	800ca52 <_strtod_l+0x282>
 800c95a:	f04f 0c00 	mov.w	ip, #0
 800c95e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c962:	2909      	cmp	r1, #9
 800c964:	f240 8082 	bls.w	800ca6c <_strtod_l+0x29c>
 800c968:	9419      	str	r4, [sp, #100]	@ 0x64
 800c96a:	f04f 0800 	mov.w	r8, #0
 800c96e:	e0a2      	b.n	800cab6 <_strtod_l+0x2e6>
 800c970:	2300      	movs	r3, #0
 800c972:	e7c7      	b.n	800c904 <_strtod_l+0x134>
 800c974:	2f08      	cmp	r7, #8
 800c976:	bfd5      	itete	le
 800c978:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c97a:	9908      	ldrgt	r1, [sp, #32]
 800c97c:	fb02 3301 	mlale	r3, r2, r1, r3
 800c980:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c984:	f100 0001 	add.w	r0, r0, #1
 800c988:	bfd4      	ite	le
 800c98a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c98c:	9308      	strgt	r3, [sp, #32]
 800c98e:	3701      	adds	r7, #1
 800c990:	9019      	str	r0, [sp, #100]	@ 0x64
 800c992:	e7bf      	b.n	800c914 <_strtod_l+0x144>
 800c994:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c996:	1c5a      	adds	r2, r3, #1
 800c998:	9219      	str	r2, [sp, #100]	@ 0x64
 800c99a:	785a      	ldrb	r2, [r3, #1]
 800c99c:	b37f      	cbz	r7, 800c9fe <_strtod_l+0x22e>
 800c99e:	4681      	mov	r9, r0
 800c9a0:	463d      	mov	r5, r7
 800c9a2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c9a6:	2b09      	cmp	r3, #9
 800c9a8:	d912      	bls.n	800c9d0 <_strtod_l+0x200>
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	e7c4      	b.n	800c938 <_strtod_l+0x168>
 800c9ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9b0:	3001      	adds	r0, #1
 800c9b2:	1c5a      	adds	r2, r3, #1
 800c9b4:	9219      	str	r2, [sp, #100]	@ 0x64
 800c9b6:	785a      	ldrb	r2, [r3, #1]
 800c9b8:	2a30      	cmp	r2, #48	@ 0x30
 800c9ba:	d0f8      	beq.n	800c9ae <_strtod_l+0x1de>
 800c9bc:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c9c0:	2b08      	cmp	r3, #8
 800c9c2:	f200 84cb 	bhi.w	800d35c <_strtod_l+0xb8c>
 800c9c6:	4681      	mov	r9, r0
 800c9c8:	2000      	movs	r0, #0
 800c9ca:	4605      	mov	r5, r0
 800c9cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9ce:	930c      	str	r3, [sp, #48]	@ 0x30
 800c9d0:	3a30      	subs	r2, #48	@ 0x30
 800c9d2:	f100 0301 	add.w	r3, r0, #1
 800c9d6:	d02a      	beq.n	800ca2e <_strtod_l+0x25e>
 800c9d8:	4499      	add	r9, r3
 800c9da:	210a      	movs	r1, #10
 800c9dc:	462b      	mov	r3, r5
 800c9de:	eb00 0c05 	add.w	ip, r0, r5
 800c9e2:	4563      	cmp	r3, ip
 800c9e4:	d10d      	bne.n	800ca02 <_strtod_l+0x232>
 800c9e6:	1c69      	adds	r1, r5, #1
 800c9e8:	4401      	add	r1, r0
 800c9ea:	4428      	add	r0, r5
 800c9ec:	2808      	cmp	r0, #8
 800c9ee:	dc16      	bgt.n	800ca1e <_strtod_l+0x24e>
 800c9f0:	230a      	movs	r3, #10
 800c9f2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c9f4:	fb03 2300 	mla	r3, r3, r0, r2
 800c9f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	e018      	b.n	800ca30 <_strtod_l+0x260>
 800c9fe:	4638      	mov	r0, r7
 800ca00:	e7da      	b.n	800c9b8 <_strtod_l+0x1e8>
 800ca02:	2b08      	cmp	r3, #8
 800ca04:	f103 0301 	add.w	r3, r3, #1
 800ca08:	dc03      	bgt.n	800ca12 <_strtod_l+0x242>
 800ca0a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ca0c:	434e      	muls	r6, r1
 800ca0e:	960a      	str	r6, [sp, #40]	@ 0x28
 800ca10:	e7e7      	b.n	800c9e2 <_strtod_l+0x212>
 800ca12:	2b10      	cmp	r3, #16
 800ca14:	bfde      	ittt	le
 800ca16:	9e08      	ldrle	r6, [sp, #32]
 800ca18:	434e      	mulle	r6, r1
 800ca1a:	9608      	strle	r6, [sp, #32]
 800ca1c:	e7e1      	b.n	800c9e2 <_strtod_l+0x212>
 800ca1e:	280f      	cmp	r0, #15
 800ca20:	dceb      	bgt.n	800c9fa <_strtod_l+0x22a>
 800ca22:	230a      	movs	r3, #10
 800ca24:	9808      	ldr	r0, [sp, #32]
 800ca26:	fb03 2300 	mla	r3, r3, r0, r2
 800ca2a:	9308      	str	r3, [sp, #32]
 800ca2c:	e7e5      	b.n	800c9fa <_strtod_l+0x22a>
 800ca2e:	4629      	mov	r1, r5
 800ca30:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ca32:	460d      	mov	r5, r1
 800ca34:	1c50      	adds	r0, r2, #1
 800ca36:	9019      	str	r0, [sp, #100]	@ 0x64
 800ca38:	7852      	ldrb	r2, [r2, #1]
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	e7b1      	b.n	800c9a2 <_strtod_l+0x1d2>
 800ca3e:	f04f 0900 	mov.w	r9, #0
 800ca42:	2301      	movs	r3, #1
 800ca44:	e77d      	b.n	800c942 <_strtod_l+0x172>
 800ca46:	f04f 0c00 	mov.w	ip, #0
 800ca4a:	1ca2      	adds	r2, r4, #2
 800ca4c:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca4e:	78a2      	ldrb	r2, [r4, #2]
 800ca50:	e785      	b.n	800c95e <_strtod_l+0x18e>
 800ca52:	f04f 0c01 	mov.w	ip, #1
 800ca56:	e7f8      	b.n	800ca4a <_strtod_l+0x27a>
 800ca58:	08012210 	.word	0x08012210
 800ca5c:	7ff00000 	.word	0x7ff00000
 800ca60:	080121fa 	.word	0x080121fa
 800ca64:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ca66:	1c51      	adds	r1, r2, #1
 800ca68:	9119      	str	r1, [sp, #100]	@ 0x64
 800ca6a:	7852      	ldrb	r2, [r2, #1]
 800ca6c:	2a30      	cmp	r2, #48	@ 0x30
 800ca6e:	d0f9      	beq.n	800ca64 <_strtod_l+0x294>
 800ca70:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ca74:	2908      	cmp	r1, #8
 800ca76:	f63f af78 	bhi.w	800c96a <_strtod_l+0x19a>
 800ca7a:	f04f 080a 	mov.w	r8, #10
 800ca7e:	3a30      	subs	r2, #48	@ 0x30
 800ca80:	920e      	str	r2, [sp, #56]	@ 0x38
 800ca82:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ca84:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ca86:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ca88:	1c56      	adds	r6, r2, #1
 800ca8a:	9619      	str	r6, [sp, #100]	@ 0x64
 800ca8c:	7852      	ldrb	r2, [r2, #1]
 800ca8e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ca92:	f1be 0f09 	cmp.w	lr, #9
 800ca96:	d939      	bls.n	800cb0c <_strtod_l+0x33c>
 800ca98:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ca9a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ca9e:	1a76      	subs	r6, r6, r1
 800caa0:	2e08      	cmp	r6, #8
 800caa2:	dc03      	bgt.n	800caac <_strtod_l+0x2dc>
 800caa4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800caa6:	4588      	cmp	r8, r1
 800caa8:	bfa8      	it	ge
 800caaa:	4688      	movge	r8, r1
 800caac:	f1bc 0f00 	cmp.w	ip, #0
 800cab0:	d001      	beq.n	800cab6 <_strtod_l+0x2e6>
 800cab2:	f1c8 0800 	rsb	r8, r8, #0
 800cab6:	2d00      	cmp	r5, #0
 800cab8:	d14e      	bne.n	800cb58 <_strtod_l+0x388>
 800caba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cabc:	4308      	orrs	r0, r1
 800cabe:	f47f aec0 	bne.w	800c842 <_strtod_l+0x72>
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	f47f aed6 	bne.w	800c874 <_strtod_l+0xa4>
 800cac8:	2a69      	cmp	r2, #105	@ 0x69
 800caca:	d028      	beq.n	800cb1e <_strtod_l+0x34e>
 800cacc:	dc25      	bgt.n	800cb1a <_strtod_l+0x34a>
 800cace:	2a49      	cmp	r2, #73	@ 0x49
 800cad0:	d025      	beq.n	800cb1e <_strtod_l+0x34e>
 800cad2:	2a4e      	cmp	r2, #78	@ 0x4e
 800cad4:	f47f aece 	bne.w	800c874 <_strtod_l+0xa4>
 800cad8:	499a      	ldr	r1, [pc, #616]	@ (800cd44 <_strtod_l+0x574>)
 800cada:	a819      	add	r0, sp, #100	@ 0x64
 800cadc:	f003 fb2a 	bl	8010134 <__match>
 800cae0:	2800      	cmp	r0, #0
 800cae2:	f43f aec7 	beq.w	800c874 <_strtod_l+0xa4>
 800cae6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	2b28      	cmp	r3, #40	@ 0x28
 800caec:	d12e      	bne.n	800cb4c <_strtod_l+0x37c>
 800caee:	4996      	ldr	r1, [pc, #600]	@ (800cd48 <_strtod_l+0x578>)
 800caf0:	aa1c      	add	r2, sp, #112	@ 0x70
 800caf2:	a819      	add	r0, sp, #100	@ 0x64
 800caf4:	f003 fb32 	bl	801015c <__hexnan>
 800caf8:	2805      	cmp	r0, #5
 800cafa:	d127      	bne.n	800cb4c <_strtod_l+0x37c>
 800cafc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cafe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cb02:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cb06:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cb0a:	e69a      	b.n	800c842 <_strtod_l+0x72>
 800cb0c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cb0e:	fb08 2101 	mla	r1, r8, r1, r2
 800cb12:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cb16:	920e      	str	r2, [sp, #56]	@ 0x38
 800cb18:	e7b5      	b.n	800ca86 <_strtod_l+0x2b6>
 800cb1a:	2a6e      	cmp	r2, #110	@ 0x6e
 800cb1c:	e7da      	b.n	800cad4 <_strtod_l+0x304>
 800cb1e:	498b      	ldr	r1, [pc, #556]	@ (800cd4c <_strtod_l+0x57c>)
 800cb20:	a819      	add	r0, sp, #100	@ 0x64
 800cb22:	f003 fb07 	bl	8010134 <__match>
 800cb26:	2800      	cmp	r0, #0
 800cb28:	f43f aea4 	beq.w	800c874 <_strtod_l+0xa4>
 800cb2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb2e:	4988      	ldr	r1, [pc, #544]	@ (800cd50 <_strtod_l+0x580>)
 800cb30:	3b01      	subs	r3, #1
 800cb32:	a819      	add	r0, sp, #100	@ 0x64
 800cb34:	9319      	str	r3, [sp, #100]	@ 0x64
 800cb36:	f003 fafd 	bl	8010134 <__match>
 800cb3a:	b910      	cbnz	r0, 800cb42 <_strtod_l+0x372>
 800cb3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb3e:	3301      	adds	r3, #1
 800cb40:	9319      	str	r3, [sp, #100]	@ 0x64
 800cb42:	f04f 0a00 	mov.w	sl, #0
 800cb46:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800cd54 <_strtod_l+0x584>
 800cb4a:	e67a      	b.n	800c842 <_strtod_l+0x72>
 800cb4c:	4882      	ldr	r0, [pc, #520]	@ (800cd58 <_strtod_l+0x588>)
 800cb4e:	f002 f99d 	bl	800ee8c <nan>
 800cb52:	4682      	mov	sl, r0
 800cb54:	468b      	mov	fp, r1
 800cb56:	e674      	b.n	800c842 <_strtod_l+0x72>
 800cb58:	eba8 0309 	sub.w	r3, r8, r9
 800cb5c:	2f00      	cmp	r7, #0
 800cb5e:	bf08      	it	eq
 800cb60:	462f      	moveq	r7, r5
 800cb62:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cb64:	2d10      	cmp	r5, #16
 800cb66:	462c      	mov	r4, r5
 800cb68:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb6a:	bfa8      	it	ge
 800cb6c:	2410      	movge	r4, #16
 800cb6e:	f7f3 fcb3 	bl	80004d8 <__aeabi_ui2d>
 800cb72:	2d09      	cmp	r5, #9
 800cb74:	4682      	mov	sl, r0
 800cb76:	468b      	mov	fp, r1
 800cb78:	dc11      	bgt.n	800cb9e <_strtod_l+0x3ce>
 800cb7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	f43f ae60 	beq.w	800c842 <_strtod_l+0x72>
 800cb82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb84:	dd76      	ble.n	800cc74 <_strtod_l+0x4a4>
 800cb86:	2b16      	cmp	r3, #22
 800cb88:	dc5d      	bgt.n	800cc46 <_strtod_l+0x476>
 800cb8a:	4974      	ldr	r1, [pc, #464]	@ (800cd5c <_strtod_l+0x58c>)
 800cb8c:	4652      	mov	r2, sl
 800cb8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cb92:	465b      	mov	r3, fp
 800cb94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb98:	f7f3 fd18 	bl	80005cc <__aeabi_dmul>
 800cb9c:	e7d9      	b.n	800cb52 <_strtod_l+0x382>
 800cb9e:	4b6f      	ldr	r3, [pc, #444]	@ (800cd5c <_strtod_l+0x58c>)
 800cba0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cba4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cba8:	f7f3 fd10 	bl	80005cc <__aeabi_dmul>
 800cbac:	4682      	mov	sl, r0
 800cbae:	9808      	ldr	r0, [sp, #32]
 800cbb0:	468b      	mov	fp, r1
 800cbb2:	f7f3 fc91 	bl	80004d8 <__aeabi_ui2d>
 800cbb6:	4602      	mov	r2, r0
 800cbb8:	460b      	mov	r3, r1
 800cbba:	4650      	mov	r0, sl
 800cbbc:	4659      	mov	r1, fp
 800cbbe:	f7f3 fb4f 	bl	8000260 <__adddf3>
 800cbc2:	2d0f      	cmp	r5, #15
 800cbc4:	4682      	mov	sl, r0
 800cbc6:	468b      	mov	fp, r1
 800cbc8:	ddd7      	ble.n	800cb7a <_strtod_l+0x3aa>
 800cbca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbcc:	1b2c      	subs	r4, r5, r4
 800cbce:	441c      	add	r4, r3
 800cbd0:	2c00      	cmp	r4, #0
 800cbd2:	f340 8096 	ble.w	800cd02 <_strtod_l+0x532>
 800cbd6:	f014 030f 	ands.w	r3, r4, #15
 800cbda:	d00a      	beq.n	800cbf2 <_strtod_l+0x422>
 800cbdc:	495f      	ldr	r1, [pc, #380]	@ (800cd5c <_strtod_l+0x58c>)
 800cbde:	4652      	mov	r2, sl
 800cbe0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cbe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbe8:	465b      	mov	r3, fp
 800cbea:	f7f3 fcef 	bl	80005cc <__aeabi_dmul>
 800cbee:	4682      	mov	sl, r0
 800cbf0:	468b      	mov	fp, r1
 800cbf2:	f034 040f 	bics.w	r4, r4, #15
 800cbf6:	d073      	beq.n	800cce0 <_strtod_l+0x510>
 800cbf8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cbfc:	dd48      	ble.n	800cc90 <_strtod_l+0x4c0>
 800cbfe:	2400      	movs	r4, #0
 800cc00:	46a0      	mov	r8, r4
 800cc02:	46a1      	mov	r9, r4
 800cc04:	940a      	str	r4, [sp, #40]	@ 0x28
 800cc06:	2322      	movs	r3, #34	@ 0x22
 800cc08:	f04f 0a00 	mov.w	sl, #0
 800cc0c:	9a05      	ldr	r2, [sp, #20]
 800cc0e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800cd54 <_strtod_l+0x584>
 800cc12:	6013      	str	r3, [r2, #0]
 800cc14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	f43f ae13 	beq.w	800c842 <_strtod_l+0x72>
 800cc1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc1e:	9805      	ldr	r0, [sp, #20]
 800cc20:	f003 fbce 	bl	80103c0 <_Bfree>
 800cc24:	4649      	mov	r1, r9
 800cc26:	9805      	ldr	r0, [sp, #20]
 800cc28:	f003 fbca 	bl	80103c0 <_Bfree>
 800cc2c:	4641      	mov	r1, r8
 800cc2e:	9805      	ldr	r0, [sp, #20]
 800cc30:	f003 fbc6 	bl	80103c0 <_Bfree>
 800cc34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cc36:	9805      	ldr	r0, [sp, #20]
 800cc38:	f003 fbc2 	bl	80103c0 <_Bfree>
 800cc3c:	4621      	mov	r1, r4
 800cc3e:	9805      	ldr	r0, [sp, #20]
 800cc40:	f003 fbbe 	bl	80103c0 <_Bfree>
 800cc44:	e5fd      	b.n	800c842 <_strtod_l+0x72>
 800cc46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc48:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	dbbc      	blt.n	800cbca <_strtod_l+0x3fa>
 800cc50:	4c42      	ldr	r4, [pc, #264]	@ (800cd5c <_strtod_l+0x58c>)
 800cc52:	f1c5 050f 	rsb	r5, r5, #15
 800cc56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cc5a:	4652      	mov	r2, sl
 800cc5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc60:	465b      	mov	r3, fp
 800cc62:	f7f3 fcb3 	bl	80005cc <__aeabi_dmul>
 800cc66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc68:	1b5d      	subs	r5, r3, r5
 800cc6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cc6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cc72:	e791      	b.n	800cb98 <_strtod_l+0x3c8>
 800cc74:	3316      	adds	r3, #22
 800cc76:	dba8      	blt.n	800cbca <_strtod_l+0x3fa>
 800cc78:	4b38      	ldr	r3, [pc, #224]	@ (800cd5c <_strtod_l+0x58c>)
 800cc7a:	eba9 0808 	sub.w	r8, r9, r8
 800cc7e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cc82:	4650      	mov	r0, sl
 800cc84:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cc88:	4659      	mov	r1, fp
 800cc8a:	f7f3 fdc9 	bl	8000820 <__aeabi_ddiv>
 800cc8e:	e760      	b.n	800cb52 <_strtod_l+0x382>
 800cc90:	4b33      	ldr	r3, [pc, #204]	@ (800cd60 <_strtod_l+0x590>)
 800cc92:	4650      	mov	r0, sl
 800cc94:	9308      	str	r3, [sp, #32]
 800cc96:	2300      	movs	r3, #0
 800cc98:	4659      	mov	r1, fp
 800cc9a:	461e      	mov	r6, r3
 800cc9c:	1124      	asrs	r4, r4, #4
 800cc9e:	2c01      	cmp	r4, #1
 800cca0:	dc21      	bgt.n	800cce6 <_strtod_l+0x516>
 800cca2:	b10b      	cbz	r3, 800cca8 <_strtod_l+0x4d8>
 800cca4:	4682      	mov	sl, r0
 800cca6:	468b      	mov	fp, r1
 800cca8:	492d      	ldr	r1, [pc, #180]	@ (800cd60 <_strtod_l+0x590>)
 800ccaa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ccae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ccb2:	4652      	mov	r2, sl
 800ccb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccb8:	465b      	mov	r3, fp
 800ccba:	f7f3 fc87 	bl	80005cc <__aeabi_dmul>
 800ccbe:	4b25      	ldr	r3, [pc, #148]	@ (800cd54 <_strtod_l+0x584>)
 800ccc0:	460a      	mov	r2, r1
 800ccc2:	400b      	ands	r3, r1
 800ccc4:	4927      	ldr	r1, [pc, #156]	@ (800cd64 <_strtod_l+0x594>)
 800ccc6:	4682      	mov	sl, r0
 800ccc8:	428b      	cmp	r3, r1
 800ccca:	d898      	bhi.n	800cbfe <_strtod_l+0x42e>
 800cccc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ccd0:	428b      	cmp	r3, r1
 800ccd2:	bf86      	itte	hi
 800ccd4:	f04f 3aff 	movhi.w	sl, #4294967295
 800ccd8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800cd68 <_strtod_l+0x598>
 800ccdc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cce0:	2300      	movs	r3, #0
 800cce2:	9308      	str	r3, [sp, #32]
 800cce4:	e07a      	b.n	800cddc <_strtod_l+0x60c>
 800cce6:	07e2      	lsls	r2, r4, #31
 800cce8:	d505      	bpl.n	800ccf6 <_strtod_l+0x526>
 800ccea:	9b08      	ldr	r3, [sp, #32]
 800ccec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf0:	f7f3 fc6c 	bl	80005cc <__aeabi_dmul>
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	9a08      	ldr	r2, [sp, #32]
 800ccf8:	3601      	adds	r6, #1
 800ccfa:	3208      	adds	r2, #8
 800ccfc:	1064      	asrs	r4, r4, #1
 800ccfe:	9208      	str	r2, [sp, #32]
 800cd00:	e7cd      	b.n	800cc9e <_strtod_l+0x4ce>
 800cd02:	d0ed      	beq.n	800cce0 <_strtod_l+0x510>
 800cd04:	4264      	negs	r4, r4
 800cd06:	f014 020f 	ands.w	r2, r4, #15
 800cd0a:	d00a      	beq.n	800cd22 <_strtod_l+0x552>
 800cd0c:	4b13      	ldr	r3, [pc, #76]	@ (800cd5c <_strtod_l+0x58c>)
 800cd0e:	4650      	mov	r0, sl
 800cd10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd14:	4659      	mov	r1, fp
 800cd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1a:	f7f3 fd81 	bl	8000820 <__aeabi_ddiv>
 800cd1e:	4682      	mov	sl, r0
 800cd20:	468b      	mov	fp, r1
 800cd22:	1124      	asrs	r4, r4, #4
 800cd24:	d0dc      	beq.n	800cce0 <_strtod_l+0x510>
 800cd26:	2c1f      	cmp	r4, #31
 800cd28:	dd20      	ble.n	800cd6c <_strtod_l+0x59c>
 800cd2a:	2400      	movs	r4, #0
 800cd2c:	46a0      	mov	r8, r4
 800cd2e:	46a1      	mov	r9, r4
 800cd30:	940a      	str	r4, [sp, #40]	@ 0x28
 800cd32:	2322      	movs	r3, #34	@ 0x22
 800cd34:	9a05      	ldr	r2, [sp, #20]
 800cd36:	f04f 0a00 	mov.w	sl, #0
 800cd3a:	f04f 0b00 	mov.w	fp, #0
 800cd3e:	6013      	str	r3, [r2, #0]
 800cd40:	e768      	b.n	800cc14 <_strtod_l+0x444>
 800cd42:	bf00      	nop
 800cd44:	0801235e 	.word	0x0801235e
 800cd48:	080121fc 	.word	0x080121fc
 800cd4c:	08012356 	.word	0x08012356
 800cd50:	080124e9 	.word	0x080124e9
 800cd54:	7ff00000 	.word	0x7ff00000
 800cd58:	080124e5 	.word	0x080124e5
 800cd5c:	08012650 	.word	0x08012650
 800cd60:	08012628 	.word	0x08012628
 800cd64:	7ca00000 	.word	0x7ca00000
 800cd68:	7fefffff 	.word	0x7fefffff
 800cd6c:	f014 0310 	ands.w	r3, r4, #16
 800cd70:	bf18      	it	ne
 800cd72:	236a      	movne	r3, #106	@ 0x6a
 800cd74:	4650      	mov	r0, sl
 800cd76:	9308      	str	r3, [sp, #32]
 800cd78:	4659      	mov	r1, fp
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	4ea9      	ldr	r6, [pc, #676]	@ (800d024 <_strtod_l+0x854>)
 800cd7e:	07e2      	lsls	r2, r4, #31
 800cd80:	d504      	bpl.n	800cd8c <_strtod_l+0x5bc>
 800cd82:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cd86:	f7f3 fc21 	bl	80005cc <__aeabi_dmul>
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	1064      	asrs	r4, r4, #1
 800cd8e:	f106 0608 	add.w	r6, r6, #8
 800cd92:	d1f4      	bne.n	800cd7e <_strtod_l+0x5ae>
 800cd94:	b10b      	cbz	r3, 800cd9a <_strtod_l+0x5ca>
 800cd96:	4682      	mov	sl, r0
 800cd98:	468b      	mov	fp, r1
 800cd9a:	9b08      	ldr	r3, [sp, #32]
 800cd9c:	b1b3      	cbz	r3, 800cdcc <_strtod_l+0x5fc>
 800cd9e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cda2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	4659      	mov	r1, fp
 800cdaa:	dd0f      	ble.n	800cdcc <_strtod_l+0x5fc>
 800cdac:	2b1f      	cmp	r3, #31
 800cdae:	dd57      	ble.n	800ce60 <_strtod_l+0x690>
 800cdb0:	2b34      	cmp	r3, #52	@ 0x34
 800cdb2:	bfd8      	it	le
 800cdb4:	f04f 33ff 	movle.w	r3, #4294967295
 800cdb8:	f04f 0a00 	mov.w	sl, #0
 800cdbc:	bfcf      	iteee	gt
 800cdbe:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cdc2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800cdc6:	4093      	lslle	r3, r2
 800cdc8:	ea03 0b01 	andle.w	fp, r3, r1
 800cdcc:	2200      	movs	r2, #0
 800cdce:	2300      	movs	r3, #0
 800cdd0:	4650      	mov	r0, sl
 800cdd2:	4659      	mov	r1, fp
 800cdd4:	f7f3 fe62 	bl	8000a9c <__aeabi_dcmpeq>
 800cdd8:	2800      	cmp	r0, #0
 800cdda:	d1a6      	bne.n	800cd2a <_strtod_l+0x55a>
 800cddc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdde:	463a      	mov	r2, r7
 800cde0:	9300      	str	r3, [sp, #0]
 800cde2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cde4:	462b      	mov	r3, r5
 800cde6:	9805      	ldr	r0, [sp, #20]
 800cde8:	f003 fb52 	bl	8010490 <__s2b>
 800cdec:	900a      	str	r0, [sp, #40]	@ 0x28
 800cdee:	2800      	cmp	r0, #0
 800cdf0:	f43f af05 	beq.w	800cbfe <_strtod_l+0x42e>
 800cdf4:	2400      	movs	r4, #0
 800cdf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cdf8:	eba9 0308 	sub.w	r3, r9, r8
 800cdfc:	2a00      	cmp	r2, #0
 800cdfe:	bfa8      	it	ge
 800ce00:	2300      	movge	r3, #0
 800ce02:	46a0      	mov	r8, r4
 800ce04:	9312      	str	r3, [sp, #72]	@ 0x48
 800ce06:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ce0a:	9316      	str	r3, [sp, #88]	@ 0x58
 800ce0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce0e:	9805      	ldr	r0, [sp, #20]
 800ce10:	6859      	ldr	r1, [r3, #4]
 800ce12:	f003 fa95 	bl	8010340 <_Balloc>
 800ce16:	4681      	mov	r9, r0
 800ce18:	2800      	cmp	r0, #0
 800ce1a:	f43f aef4 	beq.w	800cc06 <_strtod_l+0x436>
 800ce1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce20:	300c      	adds	r0, #12
 800ce22:	691a      	ldr	r2, [r3, #16]
 800ce24:	f103 010c 	add.w	r1, r3, #12
 800ce28:	3202      	adds	r2, #2
 800ce2a:	0092      	lsls	r2, r2, #2
 800ce2c:	f002 f81f 	bl	800ee6e <memcpy>
 800ce30:	ab1c      	add	r3, sp, #112	@ 0x70
 800ce32:	9301      	str	r3, [sp, #4]
 800ce34:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ce36:	9300      	str	r3, [sp, #0]
 800ce38:	4652      	mov	r2, sl
 800ce3a:	465b      	mov	r3, fp
 800ce3c:	9805      	ldr	r0, [sp, #20]
 800ce3e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ce42:	f003 fe57 	bl	8010af4 <__d2b>
 800ce46:	901a      	str	r0, [sp, #104]	@ 0x68
 800ce48:	2800      	cmp	r0, #0
 800ce4a:	f43f aedc 	beq.w	800cc06 <_strtod_l+0x436>
 800ce4e:	2101      	movs	r1, #1
 800ce50:	9805      	ldr	r0, [sp, #20]
 800ce52:	f003 fbb3 	bl	80105bc <__i2b>
 800ce56:	4680      	mov	r8, r0
 800ce58:	b948      	cbnz	r0, 800ce6e <_strtod_l+0x69e>
 800ce5a:	f04f 0800 	mov.w	r8, #0
 800ce5e:	e6d2      	b.n	800cc06 <_strtod_l+0x436>
 800ce60:	f04f 32ff 	mov.w	r2, #4294967295
 800ce64:	fa02 f303 	lsl.w	r3, r2, r3
 800ce68:	ea03 0a0a 	and.w	sl, r3, sl
 800ce6c:	e7ae      	b.n	800cdcc <_strtod_l+0x5fc>
 800ce6e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ce70:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ce72:	2d00      	cmp	r5, #0
 800ce74:	bfab      	itete	ge
 800ce76:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ce78:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ce7a:	18ef      	addge	r7, r5, r3
 800ce7c:	1b5e      	sublt	r6, r3, r5
 800ce7e:	9b08      	ldr	r3, [sp, #32]
 800ce80:	bfa8      	it	ge
 800ce82:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ce84:	eba5 0503 	sub.w	r5, r5, r3
 800ce88:	4415      	add	r5, r2
 800ce8a:	4b67      	ldr	r3, [pc, #412]	@ (800d028 <_strtod_l+0x858>)
 800ce8c:	f105 35ff 	add.w	r5, r5, #4294967295
 800ce90:	bfb8      	it	lt
 800ce92:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ce94:	429d      	cmp	r5, r3
 800ce96:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ce9a:	da50      	bge.n	800cf3e <_strtod_l+0x76e>
 800ce9c:	1b5b      	subs	r3, r3, r5
 800ce9e:	2b1f      	cmp	r3, #31
 800cea0:	f04f 0101 	mov.w	r1, #1
 800cea4:	eba2 0203 	sub.w	r2, r2, r3
 800cea8:	dc3d      	bgt.n	800cf26 <_strtod_l+0x756>
 800ceaa:	fa01 f303 	lsl.w	r3, r1, r3
 800ceae:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	9310      	str	r3, [sp, #64]	@ 0x40
 800ceb4:	18bd      	adds	r5, r7, r2
 800ceb6:	9b08      	ldr	r3, [sp, #32]
 800ceb8:	42af      	cmp	r7, r5
 800ceba:	4416      	add	r6, r2
 800cebc:	441e      	add	r6, r3
 800cebe:	463b      	mov	r3, r7
 800cec0:	bfa8      	it	ge
 800cec2:	462b      	movge	r3, r5
 800cec4:	42b3      	cmp	r3, r6
 800cec6:	bfa8      	it	ge
 800cec8:	4633      	movge	r3, r6
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	bfc2      	ittt	gt
 800cece:	1aed      	subgt	r5, r5, r3
 800ced0:	1af6      	subgt	r6, r6, r3
 800ced2:	1aff      	subgt	r7, r7, r3
 800ced4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	dd16      	ble.n	800cf08 <_strtod_l+0x738>
 800ceda:	4641      	mov	r1, r8
 800cedc:	461a      	mov	r2, r3
 800cede:	9805      	ldr	r0, [sp, #20]
 800cee0:	f003 fc2a 	bl	8010738 <__pow5mult>
 800cee4:	4680      	mov	r8, r0
 800cee6:	2800      	cmp	r0, #0
 800cee8:	d0b7      	beq.n	800ce5a <_strtod_l+0x68a>
 800ceea:	4601      	mov	r1, r0
 800ceec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ceee:	9805      	ldr	r0, [sp, #20]
 800cef0:	f003 fb7a 	bl	80105e8 <__multiply>
 800cef4:	900e      	str	r0, [sp, #56]	@ 0x38
 800cef6:	2800      	cmp	r0, #0
 800cef8:	f43f ae85 	beq.w	800cc06 <_strtod_l+0x436>
 800cefc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cefe:	9805      	ldr	r0, [sp, #20]
 800cf00:	f003 fa5e 	bl	80103c0 <_Bfree>
 800cf04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf06:	931a      	str	r3, [sp, #104]	@ 0x68
 800cf08:	2d00      	cmp	r5, #0
 800cf0a:	dc1d      	bgt.n	800cf48 <_strtod_l+0x778>
 800cf0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	dd23      	ble.n	800cf5a <_strtod_l+0x78a>
 800cf12:	4649      	mov	r1, r9
 800cf14:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cf16:	9805      	ldr	r0, [sp, #20]
 800cf18:	f003 fc0e 	bl	8010738 <__pow5mult>
 800cf1c:	4681      	mov	r9, r0
 800cf1e:	b9e0      	cbnz	r0, 800cf5a <_strtod_l+0x78a>
 800cf20:	f04f 0900 	mov.w	r9, #0
 800cf24:	e66f      	b.n	800cc06 <_strtod_l+0x436>
 800cf26:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cf2a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cf2e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cf32:	35e2      	adds	r5, #226	@ 0xe2
 800cf34:	fa01 f305 	lsl.w	r3, r1, r5
 800cf38:	9310      	str	r3, [sp, #64]	@ 0x40
 800cf3a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cf3c:	e7ba      	b.n	800ceb4 <_strtod_l+0x6e4>
 800cf3e:	2300      	movs	r3, #0
 800cf40:	9310      	str	r3, [sp, #64]	@ 0x40
 800cf42:	2301      	movs	r3, #1
 800cf44:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cf46:	e7b5      	b.n	800ceb4 <_strtod_l+0x6e4>
 800cf48:	462a      	mov	r2, r5
 800cf4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf4c:	9805      	ldr	r0, [sp, #20]
 800cf4e:	f003 fc4d 	bl	80107ec <__lshift>
 800cf52:	901a      	str	r0, [sp, #104]	@ 0x68
 800cf54:	2800      	cmp	r0, #0
 800cf56:	d1d9      	bne.n	800cf0c <_strtod_l+0x73c>
 800cf58:	e655      	b.n	800cc06 <_strtod_l+0x436>
 800cf5a:	2e00      	cmp	r6, #0
 800cf5c:	dd07      	ble.n	800cf6e <_strtod_l+0x79e>
 800cf5e:	4649      	mov	r1, r9
 800cf60:	4632      	mov	r2, r6
 800cf62:	9805      	ldr	r0, [sp, #20]
 800cf64:	f003 fc42 	bl	80107ec <__lshift>
 800cf68:	4681      	mov	r9, r0
 800cf6a:	2800      	cmp	r0, #0
 800cf6c:	d0d8      	beq.n	800cf20 <_strtod_l+0x750>
 800cf6e:	2f00      	cmp	r7, #0
 800cf70:	dd08      	ble.n	800cf84 <_strtod_l+0x7b4>
 800cf72:	4641      	mov	r1, r8
 800cf74:	463a      	mov	r2, r7
 800cf76:	9805      	ldr	r0, [sp, #20]
 800cf78:	f003 fc38 	bl	80107ec <__lshift>
 800cf7c:	4680      	mov	r8, r0
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	f43f ae41 	beq.w	800cc06 <_strtod_l+0x436>
 800cf84:	464a      	mov	r2, r9
 800cf86:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf88:	9805      	ldr	r0, [sp, #20]
 800cf8a:	f003 fcb7 	bl	80108fc <__mdiff>
 800cf8e:	4604      	mov	r4, r0
 800cf90:	2800      	cmp	r0, #0
 800cf92:	f43f ae38 	beq.w	800cc06 <_strtod_l+0x436>
 800cf96:	68c3      	ldr	r3, [r0, #12]
 800cf98:	4641      	mov	r1, r8
 800cf9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	60c3      	str	r3, [r0, #12]
 800cfa0:	f003 fc90 	bl	80108c4 <__mcmp>
 800cfa4:	2800      	cmp	r0, #0
 800cfa6:	da45      	bge.n	800d034 <_strtod_l+0x864>
 800cfa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cfaa:	ea53 030a 	orrs.w	r3, r3, sl
 800cfae:	d16b      	bne.n	800d088 <_strtod_l+0x8b8>
 800cfb0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d167      	bne.n	800d088 <_strtod_l+0x8b8>
 800cfb8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cfbc:	0d1b      	lsrs	r3, r3, #20
 800cfbe:	051b      	lsls	r3, r3, #20
 800cfc0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cfc4:	d960      	bls.n	800d088 <_strtod_l+0x8b8>
 800cfc6:	6963      	ldr	r3, [r4, #20]
 800cfc8:	b913      	cbnz	r3, 800cfd0 <_strtod_l+0x800>
 800cfca:	6923      	ldr	r3, [r4, #16]
 800cfcc:	2b01      	cmp	r3, #1
 800cfce:	dd5b      	ble.n	800d088 <_strtod_l+0x8b8>
 800cfd0:	4621      	mov	r1, r4
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	9805      	ldr	r0, [sp, #20]
 800cfd6:	f003 fc09 	bl	80107ec <__lshift>
 800cfda:	4641      	mov	r1, r8
 800cfdc:	4604      	mov	r4, r0
 800cfde:	f003 fc71 	bl	80108c4 <__mcmp>
 800cfe2:	2800      	cmp	r0, #0
 800cfe4:	dd50      	ble.n	800d088 <_strtod_l+0x8b8>
 800cfe6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cfea:	9a08      	ldr	r2, [sp, #32]
 800cfec:	0d1b      	lsrs	r3, r3, #20
 800cfee:	051b      	lsls	r3, r3, #20
 800cff0:	2a00      	cmp	r2, #0
 800cff2:	d06a      	beq.n	800d0ca <_strtod_l+0x8fa>
 800cff4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cff8:	d867      	bhi.n	800d0ca <_strtod_l+0x8fa>
 800cffa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800cffe:	f67f ae98 	bls.w	800cd32 <_strtod_l+0x562>
 800d002:	4650      	mov	r0, sl
 800d004:	4659      	mov	r1, fp
 800d006:	4b09      	ldr	r3, [pc, #36]	@ (800d02c <_strtod_l+0x85c>)
 800d008:	2200      	movs	r2, #0
 800d00a:	f7f3 fadf 	bl	80005cc <__aeabi_dmul>
 800d00e:	4b08      	ldr	r3, [pc, #32]	@ (800d030 <_strtod_l+0x860>)
 800d010:	4682      	mov	sl, r0
 800d012:	400b      	ands	r3, r1
 800d014:	468b      	mov	fp, r1
 800d016:	2b00      	cmp	r3, #0
 800d018:	f47f ae00 	bne.w	800cc1c <_strtod_l+0x44c>
 800d01c:	2322      	movs	r3, #34	@ 0x22
 800d01e:	9a05      	ldr	r2, [sp, #20]
 800d020:	6013      	str	r3, [r2, #0]
 800d022:	e5fb      	b.n	800cc1c <_strtod_l+0x44c>
 800d024:	08012228 	.word	0x08012228
 800d028:	fffffc02 	.word	0xfffffc02
 800d02c:	39500000 	.word	0x39500000
 800d030:	7ff00000 	.word	0x7ff00000
 800d034:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d038:	d165      	bne.n	800d106 <_strtod_l+0x936>
 800d03a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d03c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d040:	b35a      	cbz	r2, 800d09a <_strtod_l+0x8ca>
 800d042:	4a99      	ldr	r2, [pc, #612]	@ (800d2a8 <_strtod_l+0xad8>)
 800d044:	4293      	cmp	r3, r2
 800d046:	d12b      	bne.n	800d0a0 <_strtod_l+0x8d0>
 800d048:	9b08      	ldr	r3, [sp, #32]
 800d04a:	4651      	mov	r1, sl
 800d04c:	b303      	cbz	r3, 800d090 <_strtod_l+0x8c0>
 800d04e:	465a      	mov	r2, fp
 800d050:	4b96      	ldr	r3, [pc, #600]	@ (800d2ac <_strtod_l+0xadc>)
 800d052:	4013      	ands	r3, r2
 800d054:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d058:	f04f 32ff 	mov.w	r2, #4294967295
 800d05c:	d81b      	bhi.n	800d096 <_strtod_l+0x8c6>
 800d05e:	0d1b      	lsrs	r3, r3, #20
 800d060:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d064:	fa02 f303 	lsl.w	r3, r2, r3
 800d068:	4299      	cmp	r1, r3
 800d06a:	d119      	bne.n	800d0a0 <_strtod_l+0x8d0>
 800d06c:	4b90      	ldr	r3, [pc, #576]	@ (800d2b0 <_strtod_l+0xae0>)
 800d06e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d070:	429a      	cmp	r2, r3
 800d072:	d102      	bne.n	800d07a <_strtod_l+0x8aa>
 800d074:	3101      	adds	r1, #1
 800d076:	f43f adc6 	beq.w	800cc06 <_strtod_l+0x436>
 800d07a:	f04f 0a00 	mov.w	sl, #0
 800d07e:	4b8b      	ldr	r3, [pc, #556]	@ (800d2ac <_strtod_l+0xadc>)
 800d080:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d082:	401a      	ands	r2, r3
 800d084:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d088:	9b08      	ldr	r3, [sp, #32]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d1b9      	bne.n	800d002 <_strtod_l+0x832>
 800d08e:	e5c5      	b.n	800cc1c <_strtod_l+0x44c>
 800d090:	f04f 33ff 	mov.w	r3, #4294967295
 800d094:	e7e8      	b.n	800d068 <_strtod_l+0x898>
 800d096:	4613      	mov	r3, r2
 800d098:	e7e6      	b.n	800d068 <_strtod_l+0x898>
 800d09a:	ea53 030a 	orrs.w	r3, r3, sl
 800d09e:	d0a2      	beq.n	800cfe6 <_strtod_l+0x816>
 800d0a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d0a2:	b1db      	cbz	r3, 800d0dc <_strtod_l+0x90c>
 800d0a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0a6:	4213      	tst	r3, r2
 800d0a8:	d0ee      	beq.n	800d088 <_strtod_l+0x8b8>
 800d0aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0ac:	4650      	mov	r0, sl
 800d0ae:	4659      	mov	r1, fp
 800d0b0:	9a08      	ldr	r2, [sp, #32]
 800d0b2:	b1bb      	cbz	r3, 800d0e4 <_strtod_l+0x914>
 800d0b4:	f7ff fb68 	bl	800c788 <sulp>
 800d0b8:	4602      	mov	r2, r0
 800d0ba:	460b      	mov	r3, r1
 800d0bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d0c0:	f7f3 f8ce 	bl	8000260 <__adddf3>
 800d0c4:	4682      	mov	sl, r0
 800d0c6:	468b      	mov	fp, r1
 800d0c8:	e7de      	b.n	800d088 <_strtod_l+0x8b8>
 800d0ca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d0ce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d0d2:	f04f 3aff 	mov.w	sl, #4294967295
 800d0d6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d0da:	e7d5      	b.n	800d088 <_strtod_l+0x8b8>
 800d0dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d0de:	ea13 0f0a 	tst.w	r3, sl
 800d0e2:	e7e1      	b.n	800d0a8 <_strtod_l+0x8d8>
 800d0e4:	f7ff fb50 	bl	800c788 <sulp>
 800d0e8:	4602      	mov	r2, r0
 800d0ea:	460b      	mov	r3, r1
 800d0ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d0f0:	f7f3 f8b4 	bl	800025c <__aeabi_dsub>
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	4682      	mov	sl, r0
 800d0fa:	468b      	mov	fp, r1
 800d0fc:	f7f3 fcce 	bl	8000a9c <__aeabi_dcmpeq>
 800d100:	2800      	cmp	r0, #0
 800d102:	d0c1      	beq.n	800d088 <_strtod_l+0x8b8>
 800d104:	e615      	b.n	800cd32 <_strtod_l+0x562>
 800d106:	4641      	mov	r1, r8
 800d108:	4620      	mov	r0, r4
 800d10a:	f003 fd4b 	bl	8010ba4 <__ratio>
 800d10e:	2200      	movs	r2, #0
 800d110:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d114:	4606      	mov	r6, r0
 800d116:	460f      	mov	r7, r1
 800d118:	f7f3 fcd4 	bl	8000ac4 <__aeabi_dcmple>
 800d11c:	2800      	cmp	r0, #0
 800d11e:	d06d      	beq.n	800d1fc <_strtod_l+0xa2c>
 800d120:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d122:	2b00      	cmp	r3, #0
 800d124:	d178      	bne.n	800d218 <_strtod_l+0xa48>
 800d126:	f1ba 0f00 	cmp.w	sl, #0
 800d12a:	d156      	bne.n	800d1da <_strtod_l+0xa0a>
 800d12c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d12e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d132:	2b00      	cmp	r3, #0
 800d134:	d158      	bne.n	800d1e8 <_strtod_l+0xa18>
 800d136:	2200      	movs	r2, #0
 800d138:	4630      	mov	r0, r6
 800d13a:	4639      	mov	r1, r7
 800d13c:	4b5d      	ldr	r3, [pc, #372]	@ (800d2b4 <_strtod_l+0xae4>)
 800d13e:	f7f3 fcb7 	bl	8000ab0 <__aeabi_dcmplt>
 800d142:	2800      	cmp	r0, #0
 800d144:	d157      	bne.n	800d1f6 <_strtod_l+0xa26>
 800d146:	4630      	mov	r0, r6
 800d148:	4639      	mov	r1, r7
 800d14a:	2200      	movs	r2, #0
 800d14c:	4b5a      	ldr	r3, [pc, #360]	@ (800d2b8 <_strtod_l+0xae8>)
 800d14e:	f7f3 fa3d 	bl	80005cc <__aeabi_dmul>
 800d152:	4606      	mov	r6, r0
 800d154:	460f      	mov	r7, r1
 800d156:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d15a:	9606      	str	r6, [sp, #24]
 800d15c:	9307      	str	r3, [sp, #28]
 800d15e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d162:	4d52      	ldr	r5, [pc, #328]	@ (800d2ac <_strtod_l+0xadc>)
 800d164:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d168:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d16a:	401d      	ands	r5, r3
 800d16c:	4b53      	ldr	r3, [pc, #332]	@ (800d2bc <_strtod_l+0xaec>)
 800d16e:	429d      	cmp	r5, r3
 800d170:	f040 80aa 	bne.w	800d2c8 <_strtod_l+0xaf8>
 800d174:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d176:	4650      	mov	r0, sl
 800d178:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d17c:	4659      	mov	r1, fp
 800d17e:	f003 fc51 	bl	8010a24 <__ulp>
 800d182:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d186:	f7f3 fa21 	bl	80005cc <__aeabi_dmul>
 800d18a:	4652      	mov	r2, sl
 800d18c:	465b      	mov	r3, fp
 800d18e:	f7f3 f867 	bl	8000260 <__adddf3>
 800d192:	460b      	mov	r3, r1
 800d194:	4945      	ldr	r1, [pc, #276]	@ (800d2ac <_strtod_l+0xadc>)
 800d196:	4a4a      	ldr	r2, [pc, #296]	@ (800d2c0 <_strtod_l+0xaf0>)
 800d198:	4019      	ands	r1, r3
 800d19a:	4291      	cmp	r1, r2
 800d19c:	4682      	mov	sl, r0
 800d19e:	d942      	bls.n	800d226 <_strtod_l+0xa56>
 800d1a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d1a2:	4b43      	ldr	r3, [pc, #268]	@ (800d2b0 <_strtod_l+0xae0>)
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d103      	bne.n	800d1b0 <_strtod_l+0x9e0>
 800d1a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	f43f ad2b 	beq.w	800cc06 <_strtod_l+0x436>
 800d1b0:	f04f 3aff 	mov.w	sl, #4294967295
 800d1b4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800d2b0 <_strtod_l+0xae0>
 800d1b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d1ba:	9805      	ldr	r0, [sp, #20]
 800d1bc:	f003 f900 	bl	80103c0 <_Bfree>
 800d1c0:	4649      	mov	r1, r9
 800d1c2:	9805      	ldr	r0, [sp, #20]
 800d1c4:	f003 f8fc 	bl	80103c0 <_Bfree>
 800d1c8:	4641      	mov	r1, r8
 800d1ca:	9805      	ldr	r0, [sp, #20]
 800d1cc:	f003 f8f8 	bl	80103c0 <_Bfree>
 800d1d0:	4621      	mov	r1, r4
 800d1d2:	9805      	ldr	r0, [sp, #20]
 800d1d4:	f003 f8f4 	bl	80103c0 <_Bfree>
 800d1d8:	e618      	b.n	800ce0c <_strtod_l+0x63c>
 800d1da:	f1ba 0f01 	cmp.w	sl, #1
 800d1de:	d103      	bne.n	800d1e8 <_strtod_l+0xa18>
 800d1e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	f43f ada5 	beq.w	800cd32 <_strtod_l+0x562>
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	4b36      	ldr	r3, [pc, #216]	@ (800d2c4 <_strtod_l+0xaf4>)
 800d1ec:	2600      	movs	r6, #0
 800d1ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d1f2:	4f30      	ldr	r7, [pc, #192]	@ (800d2b4 <_strtod_l+0xae4>)
 800d1f4:	e7b3      	b.n	800d15e <_strtod_l+0x98e>
 800d1f6:	2600      	movs	r6, #0
 800d1f8:	4f2f      	ldr	r7, [pc, #188]	@ (800d2b8 <_strtod_l+0xae8>)
 800d1fa:	e7ac      	b.n	800d156 <_strtod_l+0x986>
 800d1fc:	4630      	mov	r0, r6
 800d1fe:	4639      	mov	r1, r7
 800d200:	4b2d      	ldr	r3, [pc, #180]	@ (800d2b8 <_strtod_l+0xae8>)
 800d202:	2200      	movs	r2, #0
 800d204:	f7f3 f9e2 	bl	80005cc <__aeabi_dmul>
 800d208:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d20a:	4606      	mov	r6, r0
 800d20c:	460f      	mov	r7, r1
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d0a1      	beq.n	800d156 <_strtod_l+0x986>
 800d212:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d216:	e7a2      	b.n	800d15e <_strtod_l+0x98e>
 800d218:	2200      	movs	r2, #0
 800d21a:	4b26      	ldr	r3, [pc, #152]	@ (800d2b4 <_strtod_l+0xae4>)
 800d21c:	4616      	mov	r6, r2
 800d21e:	461f      	mov	r7, r3
 800d220:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d224:	e79b      	b.n	800d15e <_strtod_l+0x98e>
 800d226:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d22a:	9b08      	ldr	r3, [sp, #32]
 800d22c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d230:	2b00      	cmp	r3, #0
 800d232:	d1c1      	bne.n	800d1b8 <_strtod_l+0x9e8>
 800d234:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d238:	0d1b      	lsrs	r3, r3, #20
 800d23a:	051b      	lsls	r3, r3, #20
 800d23c:	429d      	cmp	r5, r3
 800d23e:	d1bb      	bne.n	800d1b8 <_strtod_l+0x9e8>
 800d240:	4630      	mov	r0, r6
 800d242:	4639      	mov	r1, r7
 800d244:	f7f3 fff4 	bl	8001230 <__aeabi_d2lz>
 800d248:	f7f3 f992 	bl	8000570 <__aeabi_l2d>
 800d24c:	4602      	mov	r2, r0
 800d24e:	460b      	mov	r3, r1
 800d250:	4630      	mov	r0, r6
 800d252:	4639      	mov	r1, r7
 800d254:	f7f3 f802 	bl	800025c <__aeabi_dsub>
 800d258:	460b      	mov	r3, r1
 800d25a:	4602      	mov	r2, r0
 800d25c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d260:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d266:	ea46 060a 	orr.w	r6, r6, sl
 800d26a:	431e      	orrs	r6, r3
 800d26c:	d069      	beq.n	800d342 <_strtod_l+0xb72>
 800d26e:	a30a      	add	r3, pc, #40	@ (adr r3, 800d298 <_strtod_l+0xac8>)
 800d270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d274:	f7f3 fc1c 	bl	8000ab0 <__aeabi_dcmplt>
 800d278:	2800      	cmp	r0, #0
 800d27a:	f47f accf 	bne.w	800cc1c <_strtod_l+0x44c>
 800d27e:	a308      	add	r3, pc, #32	@ (adr r3, 800d2a0 <_strtod_l+0xad0>)
 800d280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d284:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d288:	f7f3 fc30 	bl	8000aec <__aeabi_dcmpgt>
 800d28c:	2800      	cmp	r0, #0
 800d28e:	d093      	beq.n	800d1b8 <_strtod_l+0x9e8>
 800d290:	e4c4      	b.n	800cc1c <_strtod_l+0x44c>
 800d292:	bf00      	nop
 800d294:	f3af 8000 	nop.w
 800d298:	94a03595 	.word	0x94a03595
 800d29c:	3fdfffff 	.word	0x3fdfffff
 800d2a0:	35afe535 	.word	0x35afe535
 800d2a4:	3fe00000 	.word	0x3fe00000
 800d2a8:	000fffff 	.word	0x000fffff
 800d2ac:	7ff00000 	.word	0x7ff00000
 800d2b0:	7fefffff 	.word	0x7fefffff
 800d2b4:	3ff00000 	.word	0x3ff00000
 800d2b8:	3fe00000 	.word	0x3fe00000
 800d2bc:	7fe00000 	.word	0x7fe00000
 800d2c0:	7c9fffff 	.word	0x7c9fffff
 800d2c4:	bff00000 	.word	0xbff00000
 800d2c8:	9b08      	ldr	r3, [sp, #32]
 800d2ca:	b323      	cbz	r3, 800d316 <_strtod_l+0xb46>
 800d2cc:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d2d0:	d821      	bhi.n	800d316 <_strtod_l+0xb46>
 800d2d2:	a327      	add	r3, pc, #156	@ (adr r3, 800d370 <_strtod_l+0xba0>)
 800d2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d8:	4630      	mov	r0, r6
 800d2da:	4639      	mov	r1, r7
 800d2dc:	f7f3 fbf2 	bl	8000ac4 <__aeabi_dcmple>
 800d2e0:	b1a0      	cbz	r0, 800d30c <_strtod_l+0xb3c>
 800d2e2:	4639      	mov	r1, r7
 800d2e4:	4630      	mov	r0, r6
 800d2e6:	f7f3 fc49 	bl	8000b7c <__aeabi_d2uiz>
 800d2ea:	2801      	cmp	r0, #1
 800d2ec:	bf38      	it	cc
 800d2ee:	2001      	movcc	r0, #1
 800d2f0:	f7f3 f8f2 	bl	80004d8 <__aeabi_ui2d>
 800d2f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2f6:	4606      	mov	r6, r0
 800d2f8:	460f      	mov	r7, r1
 800d2fa:	b9fb      	cbnz	r3, 800d33c <_strtod_l+0xb6c>
 800d2fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d300:	9014      	str	r0, [sp, #80]	@ 0x50
 800d302:	9315      	str	r3, [sp, #84]	@ 0x54
 800d304:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d308:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d30c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d30e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d312:	1b5b      	subs	r3, r3, r5
 800d314:	9311      	str	r3, [sp, #68]	@ 0x44
 800d316:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d31a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d31e:	f003 fb81 	bl	8010a24 <__ulp>
 800d322:	4602      	mov	r2, r0
 800d324:	460b      	mov	r3, r1
 800d326:	4650      	mov	r0, sl
 800d328:	4659      	mov	r1, fp
 800d32a:	f7f3 f94f 	bl	80005cc <__aeabi_dmul>
 800d32e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d332:	f7f2 ff95 	bl	8000260 <__adddf3>
 800d336:	4682      	mov	sl, r0
 800d338:	468b      	mov	fp, r1
 800d33a:	e776      	b.n	800d22a <_strtod_l+0xa5a>
 800d33c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d340:	e7e0      	b.n	800d304 <_strtod_l+0xb34>
 800d342:	a30d      	add	r3, pc, #52	@ (adr r3, 800d378 <_strtod_l+0xba8>)
 800d344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d348:	f7f3 fbb2 	bl	8000ab0 <__aeabi_dcmplt>
 800d34c:	e79e      	b.n	800d28c <_strtod_l+0xabc>
 800d34e:	2300      	movs	r3, #0
 800d350:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d352:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d354:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d356:	6013      	str	r3, [r2, #0]
 800d358:	f7ff ba77 	b.w	800c84a <_strtod_l+0x7a>
 800d35c:	2a65      	cmp	r2, #101	@ 0x65
 800d35e:	f43f ab6e 	beq.w	800ca3e <_strtod_l+0x26e>
 800d362:	2a45      	cmp	r2, #69	@ 0x45
 800d364:	f43f ab6b 	beq.w	800ca3e <_strtod_l+0x26e>
 800d368:	2301      	movs	r3, #1
 800d36a:	f7ff bba6 	b.w	800caba <_strtod_l+0x2ea>
 800d36e:	bf00      	nop
 800d370:	ffc00000 	.word	0xffc00000
 800d374:	41dfffff 	.word	0x41dfffff
 800d378:	94a03595 	.word	0x94a03595
 800d37c:	3fcfffff 	.word	0x3fcfffff

0800d380 <strtof>:
 800d380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d384:	4d24      	ldr	r5, [pc, #144]	@ (800d418 <strtof+0x98>)
 800d386:	460a      	mov	r2, r1
 800d388:	4b24      	ldr	r3, [pc, #144]	@ (800d41c <strtof+0x9c>)
 800d38a:	4601      	mov	r1, r0
 800d38c:	6828      	ldr	r0, [r5, #0]
 800d38e:	f7ff fa1f 	bl	800c7d0 <_strtod_l>
 800d392:	4602      	mov	r2, r0
 800d394:	460b      	mov	r3, r1
 800d396:	4606      	mov	r6, r0
 800d398:	460f      	mov	r7, r1
 800d39a:	f7f3 fbb1 	bl	8000b00 <__aeabi_dcmpun>
 800d39e:	b168      	cbz	r0, 800d3bc <strtof+0x3c>
 800d3a0:	2f00      	cmp	r7, #0
 800d3a2:	481f      	ldr	r0, [pc, #124]	@ (800d420 <strtof+0xa0>)
 800d3a4:	da06      	bge.n	800d3b4 <strtof+0x34>
 800d3a6:	f001 fd77 	bl	800ee98 <nanf>
 800d3aa:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3b4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3b8:	f001 bd6e 	b.w	800ee98 <nanf>
 800d3bc:	4639      	mov	r1, r7
 800d3be:	4630      	mov	r0, r6
 800d3c0:	f7f3 fbfc 	bl	8000bbc <__aeabi_d2f>
 800d3c4:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800d3c8:	4604      	mov	r4, r0
 800d3ca:	4916      	ldr	r1, [pc, #88]	@ (800d424 <strtof+0xa4>)
 800d3cc:	4640      	mov	r0, r8
 800d3ce:	f7f3 ff19 	bl	8001204 <__aeabi_fcmpun>
 800d3d2:	b9b0      	cbnz	r0, 800d402 <strtof+0x82>
 800d3d4:	4640      	mov	r0, r8
 800d3d6:	4913      	ldr	r1, [pc, #76]	@ (800d424 <strtof+0xa4>)
 800d3d8:	f7f3 fef6 	bl	80011c8 <__aeabi_fcmple>
 800d3dc:	b988      	cbnz	r0, 800d402 <strtof+0x82>
 800d3de:	f027 4900 	bic.w	r9, r7, #2147483648	@ 0x80000000
 800d3e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d3e6:	4630      	mov	r0, r6
 800d3e8:	4649      	mov	r1, r9
 800d3ea:	4b0f      	ldr	r3, [pc, #60]	@ (800d428 <strtof+0xa8>)
 800d3ec:	f7f3 fb88 	bl	8000b00 <__aeabi_dcmpun>
 800d3f0:	b970      	cbnz	r0, 800d410 <strtof+0x90>
 800d3f2:	f04f 32ff 	mov.w	r2, #4294967295
 800d3f6:	4630      	mov	r0, r6
 800d3f8:	4649      	mov	r1, r9
 800d3fa:	4b0b      	ldr	r3, [pc, #44]	@ (800d428 <strtof+0xa8>)
 800d3fc:	f7f3 fb62 	bl	8000ac4 <__aeabi_dcmple>
 800d400:	b930      	cbnz	r0, 800d410 <strtof+0x90>
 800d402:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800d406:	d1d2      	bne.n	800d3ae <strtof+0x2e>
 800d408:	4b08      	ldr	r3, [pc, #32]	@ (800d42c <strtof+0xac>)
 800d40a:	403b      	ands	r3, r7
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d0ce      	beq.n	800d3ae <strtof+0x2e>
 800d410:	2222      	movs	r2, #34	@ 0x22
 800d412:	682b      	ldr	r3, [r5, #0]
 800d414:	601a      	str	r2, [r3, #0]
 800d416:	e7ca      	b.n	800d3ae <strtof+0x2e>
 800d418:	2000026c 	.word	0x2000026c
 800d41c:	20000100 	.word	0x20000100
 800d420:	080124e5 	.word	0x080124e5
 800d424:	7f7fffff 	.word	0x7f7fffff
 800d428:	7fefffff 	.word	0x7fefffff
 800d42c:	7ff00000 	.word	0x7ff00000

0800d430 <_strtol_l.constprop.0>:
 800d430:	2b24      	cmp	r3, #36	@ 0x24
 800d432:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d436:	4686      	mov	lr, r0
 800d438:	4690      	mov	r8, r2
 800d43a:	d801      	bhi.n	800d440 <_strtol_l.constprop.0+0x10>
 800d43c:	2b01      	cmp	r3, #1
 800d43e:	d106      	bne.n	800d44e <_strtol_l.constprop.0+0x1e>
 800d440:	f001 fcd0 	bl	800ede4 <__errno>
 800d444:	2316      	movs	r3, #22
 800d446:	6003      	str	r3, [r0, #0]
 800d448:	2000      	movs	r0, #0
 800d44a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d44e:	460d      	mov	r5, r1
 800d450:	4833      	ldr	r0, [pc, #204]	@ (800d520 <_strtol_l.constprop.0+0xf0>)
 800d452:	462a      	mov	r2, r5
 800d454:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d458:	5d06      	ldrb	r6, [r0, r4]
 800d45a:	f016 0608 	ands.w	r6, r6, #8
 800d45e:	d1f8      	bne.n	800d452 <_strtol_l.constprop.0+0x22>
 800d460:	2c2d      	cmp	r4, #45	@ 0x2d
 800d462:	d12d      	bne.n	800d4c0 <_strtol_l.constprop.0+0x90>
 800d464:	2601      	movs	r6, #1
 800d466:	782c      	ldrb	r4, [r5, #0]
 800d468:	1c95      	adds	r5, r2, #2
 800d46a:	f033 0210 	bics.w	r2, r3, #16
 800d46e:	d109      	bne.n	800d484 <_strtol_l.constprop.0+0x54>
 800d470:	2c30      	cmp	r4, #48	@ 0x30
 800d472:	d12a      	bne.n	800d4ca <_strtol_l.constprop.0+0x9a>
 800d474:	782a      	ldrb	r2, [r5, #0]
 800d476:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d47a:	2a58      	cmp	r2, #88	@ 0x58
 800d47c:	d125      	bne.n	800d4ca <_strtol_l.constprop.0+0x9a>
 800d47e:	2310      	movs	r3, #16
 800d480:	786c      	ldrb	r4, [r5, #1]
 800d482:	3502      	adds	r5, #2
 800d484:	2200      	movs	r2, #0
 800d486:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d48a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d48e:	fbbc f9f3 	udiv	r9, ip, r3
 800d492:	4610      	mov	r0, r2
 800d494:	fb03 ca19 	mls	sl, r3, r9, ip
 800d498:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d49c:	2f09      	cmp	r7, #9
 800d49e:	d81b      	bhi.n	800d4d8 <_strtol_l.constprop.0+0xa8>
 800d4a0:	463c      	mov	r4, r7
 800d4a2:	42a3      	cmp	r3, r4
 800d4a4:	dd27      	ble.n	800d4f6 <_strtol_l.constprop.0+0xc6>
 800d4a6:	1c57      	adds	r7, r2, #1
 800d4a8:	d007      	beq.n	800d4ba <_strtol_l.constprop.0+0x8a>
 800d4aa:	4581      	cmp	r9, r0
 800d4ac:	d320      	bcc.n	800d4f0 <_strtol_l.constprop.0+0xc0>
 800d4ae:	d101      	bne.n	800d4b4 <_strtol_l.constprop.0+0x84>
 800d4b0:	45a2      	cmp	sl, r4
 800d4b2:	db1d      	blt.n	800d4f0 <_strtol_l.constprop.0+0xc0>
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	fb00 4003 	mla	r0, r0, r3, r4
 800d4ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d4be:	e7eb      	b.n	800d498 <_strtol_l.constprop.0+0x68>
 800d4c0:	2c2b      	cmp	r4, #43	@ 0x2b
 800d4c2:	bf04      	itt	eq
 800d4c4:	782c      	ldrbeq	r4, [r5, #0]
 800d4c6:	1c95      	addeq	r5, r2, #2
 800d4c8:	e7cf      	b.n	800d46a <_strtol_l.constprop.0+0x3a>
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d1da      	bne.n	800d484 <_strtol_l.constprop.0+0x54>
 800d4ce:	2c30      	cmp	r4, #48	@ 0x30
 800d4d0:	bf0c      	ite	eq
 800d4d2:	2308      	moveq	r3, #8
 800d4d4:	230a      	movne	r3, #10
 800d4d6:	e7d5      	b.n	800d484 <_strtol_l.constprop.0+0x54>
 800d4d8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d4dc:	2f19      	cmp	r7, #25
 800d4de:	d801      	bhi.n	800d4e4 <_strtol_l.constprop.0+0xb4>
 800d4e0:	3c37      	subs	r4, #55	@ 0x37
 800d4e2:	e7de      	b.n	800d4a2 <_strtol_l.constprop.0+0x72>
 800d4e4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d4e8:	2f19      	cmp	r7, #25
 800d4ea:	d804      	bhi.n	800d4f6 <_strtol_l.constprop.0+0xc6>
 800d4ec:	3c57      	subs	r4, #87	@ 0x57
 800d4ee:	e7d8      	b.n	800d4a2 <_strtol_l.constprop.0+0x72>
 800d4f0:	f04f 32ff 	mov.w	r2, #4294967295
 800d4f4:	e7e1      	b.n	800d4ba <_strtol_l.constprop.0+0x8a>
 800d4f6:	1c53      	adds	r3, r2, #1
 800d4f8:	d108      	bne.n	800d50c <_strtol_l.constprop.0+0xdc>
 800d4fa:	2322      	movs	r3, #34	@ 0x22
 800d4fc:	4660      	mov	r0, ip
 800d4fe:	f8ce 3000 	str.w	r3, [lr]
 800d502:	f1b8 0f00 	cmp.w	r8, #0
 800d506:	d0a0      	beq.n	800d44a <_strtol_l.constprop.0+0x1a>
 800d508:	1e69      	subs	r1, r5, #1
 800d50a:	e006      	b.n	800d51a <_strtol_l.constprop.0+0xea>
 800d50c:	b106      	cbz	r6, 800d510 <_strtol_l.constprop.0+0xe0>
 800d50e:	4240      	negs	r0, r0
 800d510:	f1b8 0f00 	cmp.w	r8, #0
 800d514:	d099      	beq.n	800d44a <_strtol_l.constprop.0+0x1a>
 800d516:	2a00      	cmp	r2, #0
 800d518:	d1f6      	bne.n	800d508 <_strtol_l.constprop.0+0xd8>
 800d51a:	f8c8 1000 	str.w	r1, [r8]
 800d51e:	e794      	b.n	800d44a <_strtol_l.constprop.0+0x1a>
 800d520:	08012251 	.word	0x08012251

0800d524 <_strtol_r>:
 800d524:	f7ff bf84 	b.w	800d430 <_strtol_l.constprop.0>

0800d528 <strtol>:
 800d528:	4613      	mov	r3, r2
 800d52a:	460a      	mov	r2, r1
 800d52c:	4601      	mov	r1, r0
 800d52e:	4802      	ldr	r0, [pc, #8]	@ (800d538 <strtol+0x10>)
 800d530:	6800      	ldr	r0, [r0, #0]
 800d532:	f7ff bf7d 	b.w	800d430 <_strtol_l.constprop.0>
 800d536:	bf00      	nop
 800d538:	2000026c 	.word	0x2000026c

0800d53c <__cvt>:
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d542:	461d      	mov	r5, r3
 800d544:	bfbb      	ittet	lt
 800d546:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800d54a:	461d      	movlt	r5, r3
 800d54c:	2300      	movge	r3, #0
 800d54e:	232d      	movlt	r3, #45	@ 0x2d
 800d550:	b088      	sub	sp, #32
 800d552:	4614      	mov	r4, r2
 800d554:	bfb8      	it	lt
 800d556:	4614      	movlt	r4, r2
 800d558:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d55a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800d55c:	7013      	strb	r3, [r2, #0]
 800d55e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d560:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800d564:	f023 0820 	bic.w	r8, r3, #32
 800d568:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d56c:	d005      	beq.n	800d57a <__cvt+0x3e>
 800d56e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d572:	d100      	bne.n	800d576 <__cvt+0x3a>
 800d574:	3601      	adds	r6, #1
 800d576:	2302      	movs	r3, #2
 800d578:	e000      	b.n	800d57c <__cvt+0x40>
 800d57a:	2303      	movs	r3, #3
 800d57c:	aa07      	add	r2, sp, #28
 800d57e:	9204      	str	r2, [sp, #16]
 800d580:	aa06      	add	r2, sp, #24
 800d582:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d586:	e9cd 3600 	strd	r3, r6, [sp]
 800d58a:	4622      	mov	r2, r4
 800d58c:	462b      	mov	r3, r5
 800d58e:	f001 fd37 	bl	800f000 <_dtoa_r>
 800d592:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d596:	4607      	mov	r7, r0
 800d598:	d119      	bne.n	800d5ce <__cvt+0x92>
 800d59a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d59c:	07db      	lsls	r3, r3, #31
 800d59e:	d50e      	bpl.n	800d5be <__cvt+0x82>
 800d5a0:	eb00 0906 	add.w	r9, r0, r6
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	4620      	mov	r0, r4
 800d5aa:	4629      	mov	r1, r5
 800d5ac:	f7f3 fa76 	bl	8000a9c <__aeabi_dcmpeq>
 800d5b0:	b108      	cbz	r0, 800d5b6 <__cvt+0x7a>
 800d5b2:	f8cd 901c 	str.w	r9, [sp, #28]
 800d5b6:	2230      	movs	r2, #48	@ 0x30
 800d5b8:	9b07      	ldr	r3, [sp, #28]
 800d5ba:	454b      	cmp	r3, r9
 800d5bc:	d31e      	bcc.n	800d5fc <__cvt+0xc0>
 800d5be:	4638      	mov	r0, r7
 800d5c0:	9b07      	ldr	r3, [sp, #28]
 800d5c2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d5c4:	1bdb      	subs	r3, r3, r7
 800d5c6:	6013      	str	r3, [r2, #0]
 800d5c8:	b008      	add	sp, #32
 800d5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5ce:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d5d2:	eb00 0906 	add.w	r9, r0, r6
 800d5d6:	d1e5      	bne.n	800d5a4 <__cvt+0x68>
 800d5d8:	7803      	ldrb	r3, [r0, #0]
 800d5da:	2b30      	cmp	r3, #48	@ 0x30
 800d5dc:	d10a      	bne.n	800d5f4 <__cvt+0xb8>
 800d5de:	2200      	movs	r2, #0
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	4620      	mov	r0, r4
 800d5e4:	4629      	mov	r1, r5
 800d5e6:	f7f3 fa59 	bl	8000a9c <__aeabi_dcmpeq>
 800d5ea:	b918      	cbnz	r0, 800d5f4 <__cvt+0xb8>
 800d5ec:	f1c6 0601 	rsb	r6, r6, #1
 800d5f0:	f8ca 6000 	str.w	r6, [sl]
 800d5f4:	f8da 3000 	ldr.w	r3, [sl]
 800d5f8:	4499      	add	r9, r3
 800d5fa:	e7d3      	b.n	800d5a4 <__cvt+0x68>
 800d5fc:	1c59      	adds	r1, r3, #1
 800d5fe:	9107      	str	r1, [sp, #28]
 800d600:	701a      	strb	r2, [r3, #0]
 800d602:	e7d9      	b.n	800d5b8 <__cvt+0x7c>

0800d604 <__exponent>:
 800d604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d606:	2900      	cmp	r1, #0
 800d608:	bfb6      	itet	lt
 800d60a:	232d      	movlt	r3, #45	@ 0x2d
 800d60c:	232b      	movge	r3, #43	@ 0x2b
 800d60e:	4249      	neglt	r1, r1
 800d610:	2909      	cmp	r1, #9
 800d612:	7002      	strb	r2, [r0, #0]
 800d614:	7043      	strb	r3, [r0, #1]
 800d616:	dd29      	ble.n	800d66c <__exponent+0x68>
 800d618:	f10d 0307 	add.w	r3, sp, #7
 800d61c:	461d      	mov	r5, r3
 800d61e:	270a      	movs	r7, #10
 800d620:	fbb1 f6f7 	udiv	r6, r1, r7
 800d624:	461a      	mov	r2, r3
 800d626:	fb07 1416 	mls	r4, r7, r6, r1
 800d62a:	3430      	adds	r4, #48	@ 0x30
 800d62c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d630:	460c      	mov	r4, r1
 800d632:	2c63      	cmp	r4, #99	@ 0x63
 800d634:	4631      	mov	r1, r6
 800d636:	f103 33ff 	add.w	r3, r3, #4294967295
 800d63a:	dcf1      	bgt.n	800d620 <__exponent+0x1c>
 800d63c:	3130      	adds	r1, #48	@ 0x30
 800d63e:	1e94      	subs	r4, r2, #2
 800d640:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d644:	4623      	mov	r3, r4
 800d646:	1c41      	adds	r1, r0, #1
 800d648:	42ab      	cmp	r3, r5
 800d64a:	d30a      	bcc.n	800d662 <__exponent+0x5e>
 800d64c:	f10d 0309 	add.w	r3, sp, #9
 800d650:	1a9b      	subs	r3, r3, r2
 800d652:	42ac      	cmp	r4, r5
 800d654:	bf88      	it	hi
 800d656:	2300      	movhi	r3, #0
 800d658:	3302      	adds	r3, #2
 800d65a:	4403      	add	r3, r0
 800d65c:	1a18      	subs	r0, r3, r0
 800d65e:	b003      	add	sp, #12
 800d660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d662:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d666:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d66a:	e7ed      	b.n	800d648 <__exponent+0x44>
 800d66c:	2330      	movs	r3, #48	@ 0x30
 800d66e:	3130      	adds	r1, #48	@ 0x30
 800d670:	7083      	strb	r3, [r0, #2]
 800d672:	70c1      	strb	r1, [r0, #3]
 800d674:	1d03      	adds	r3, r0, #4
 800d676:	e7f1      	b.n	800d65c <__exponent+0x58>

0800d678 <_printf_float>:
 800d678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d67c:	b091      	sub	sp, #68	@ 0x44
 800d67e:	460c      	mov	r4, r1
 800d680:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800d684:	4616      	mov	r6, r2
 800d686:	461f      	mov	r7, r3
 800d688:	4605      	mov	r5, r0
 800d68a:	f001 fafb 	bl	800ec84 <_localeconv_r>
 800d68e:	6803      	ldr	r3, [r0, #0]
 800d690:	4618      	mov	r0, r3
 800d692:	9308      	str	r3, [sp, #32]
 800d694:	f7f2 fdd6 	bl	8000244 <strlen>
 800d698:	2300      	movs	r3, #0
 800d69a:	930e      	str	r3, [sp, #56]	@ 0x38
 800d69c:	f8d8 3000 	ldr.w	r3, [r8]
 800d6a0:	9009      	str	r0, [sp, #36]	@ 0x24
 800d6a2:	3307      	adds	r3, #7
 800d6a4:	f023 0307 	bic.w	r3, r3, #7
 800d6a8:	f103 0208 	add.w	r2, r3, #8
 800d6ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d6b0:	f8d4 b000 	ldr.w	fp, [r4]
 800d6b4:	f8c8 2000 	str.w	r2, [r8]
 800d6b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d6bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d6c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6c2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800d6c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d6ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d6ce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d6d2:	4b9c      	ldr	r3, [pc, #624]	@ (800d944 <_printf_float+0x2cc>)
 800d6d4:	f7f3 fa14 	bl	8000b00 <__aeabi_dcmpun>
 800d6d8:	bb70      	cbnz	r0, 800d738 <_printf_float+0xc0>
 800d6da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d6de:	f04f 32ff 	mov.w	r2, #4294967295
 800d6e2:	4b98      	ldr	r3, [pc, #608]	@ (800d944 <_printf_float+0x2cc>)
 800d6e4:	f7f3 f9ee 	bl	8000ac4 <__aeabi_dcmple>
 800d6e8:	bb30      	cbnz	r0, 800d738 <_printf_float+0xc0>
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	4640      	mov	r0, r8
 800d6f0:	4649      	mov	r1, r9
 800d6f2:	f7f3 f9dd 	bl	8000ab0 <__aeabi_dcmplt>
 800d6f6:	b110      	cbz	r0, 800d6fe <_printf_float+0x86>
 800d6f8:	232d      	movs	r3, #45	@ 0x2d
 800d6fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d6fe:	4a92      	ldr	r2, [pc, #584]	@ (800d948 <_printf_float+0x2d0>)
 800d700:	4b92      	ldr	r3, [pc, #584]	@ (800d94c <_printf_float+0x2d4>)
 800d702:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d706:	bf94      	ite	ls
 800d708:	4690      	movls	r8, r2
 800d70a:	4698      	movhi	r8, r3
 800d70c:	2303      	movs	r3, #3
 800d70e:	f04f 0900 	mov.w	r9, #0
 800d712:	6123      	str	r3, [r4, #16]
 800d714:	f02b 0304 	bic.w	r3, fp, #4
 800d718:	6023      	str	r3, [r4, #0]
 800d71a:	4633      	mov	r3, r6
 800d71c:	4621      	mov	r1, r4
 800d71e:	4628      	mov	r0, r5
 800d720:	9700      	str	r7, [sp, #0]
 800d722:	aa0f      	add	r2, sp, #60	@ 0x3c
 800d724:	f000 f9d4 	bl	800dad0 <_printf_common>
 800d728:	3001      	adds	r0, #1
 800d72a:	f040 8090 	bne.w	800d84e <_printf_float+0x1d6>
 800d72e:	f04f 30ff 	mov.w	r0, #4294967295
 800d732:	b011      	add	sp, #68	@ 0x44
 800d734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d738:	4642      	mov	r2, r8
 800d73a:	464b      	mov	r3, r9
 800d73c:	4640      	mov	r0, r8
 800d73e:	4649      	mov	r1, r9
 800d740:	f7f3 f9de 	bl	8000b00 <__aeabi_dcmpun>
 800d744:	b148      	cbz	r0, 800d75a <_printf_float+0xe2>
 800d746:	464b      	mov	r3, r9
 800d748:	2b00      	cmp	r3, #0
 800d74a:	bfb8      	it	lt
 800d74c:	232d      	movlt	r3, #45	@ 0x2d
 800d74e:	4a80      	ldr	r2, [pc, #512]	@ (800d950 <_printf_float+0x2d8>)
 800d750:	bfb8      	it	lt
 800d752:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d756:	4b7f      	ldr	r3, [pc, #508]	@ (800d954 <_printf_float+0x2dc>)
 800d758:	e7d3      	b.n	800d702 <_printf_float+0x8a>
 800d75a:	6863      	ldr	r3, [r4, #4]
 800d75c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800d760:	1c5a      	adds	r2, r3, #1
 800d762:	d13f      	bne.n	800d7e4 <_printf_float+0x16c>
 800d764:	2306      	movs	r3, #6
 800d766:	6063      	str	r3, [r4, #4]
 800d768:	2200      	movs	r2, #0
 800d76a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800d76e:	6023      	str	r3, [r4, #0]
 800d770:	9206      	str	r2, [sp, #24]
 800d772:	aa0e      	add	r2, sp, #56	@ 0x38
 800d774:	e9cd a204 	strd	sl, r2, [sp, #16]
 800d778:	aa0d      	add	r2, sp, #52	@ 0x34
 800d77a:	9203      	str	r2, [sp, #12]
 800d77c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800d780:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d784:	6863      	ldr	r3, [r4, #4]
 800d786:	4642      	mov	r2, r8
 800d788:	9300      	str	r3, [sp, #0]
 800d78a:	4628      	mov	r0, r5
 800d78c:	464b      	mov	r3, r9
 800d78e:	910a      	str	r1, [sp, #40]	@ 0x28
 800d790:	f7ff fed4 	bl	800d53c <__cvt>
 800d794:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d796:	4680      	mov	r8, r0
 800d798:	2947      	cmp	r1, #71	@ 0x47
 800d79a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d79c:	d128      	bne.n	800d7f0 <_printf_float+0x178>
 800d79e:	1cc8      	adds	r0, r1, #3
 800d7a0:	db02      	blt.n	800d7a8 <_printf_float+0x130>
 800d7a2:	6863      	ldr	r3, [r4, #4]
 800d7a4:	4299      	cmp	r1, r3
 800d7a6:	dd40      	ble.n	800d82a <_printf_float+0x1b2>
 800d7a8:	f1aa 0a02 	sub.w	sl, sl, #2
 800d7ac:	fa5f fa8a 	uxtb.w	sl, sl
 800d7b0:	4652      	mov	r2, sl
 800d7b2:	3901      	subs	r1, #1
 800d7b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d7b8:	910d      	str	r1, [sp, #52]	@ 0x34
 800d7ba:	f7ff ff23 	bl	800d604 <__exponent>
 800d7be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d7c0:	4681      	mov	r9, r0
 800d7c2:	1813      	adds	r3, r2, r0
 800d7c4:	2a01      	cmp	r2, #1
 800d7c6:	6123      	str	r3, [r4, #16]
 800d7c8:	dc02      	bgt.n	800d7d0 <_printf_float+0x158>
 800d7ca:	6822      	ldr	r2, [r4, #0]
 800d7cc:	07d2      	lsls	r2, r2, #31
 800d7ce:	d501      	bpl.n	800d7d4 <_printf_float+0x15c>
 800d7d0:	3301      	adds	r3, #1
 800d7d2:	6123      	str	r3, [r4, #16]
 800d7d4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d09e      	beq.n	800d71a <_printf_float+0xa2>
 800d7dc:	232d      	movs	r3, #45	@ 0x2d
 800d7de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d7e2:	e79a      	b.n	800d71a <_printf_float+0xa2>
 800d7e4:	2947      	cmp	r1, #71	@ 0x47
 800d7e6:	d1bf      	bne.n	800d768 <_printf_float+0xf0>
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d1bd      	bne.n	800d768 <_printf_float+0xf0>
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	e7ba      	b.n	800d766 <_printf_float+0xee>
 800d7f0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d7f4:	d9dc      	bls.n	800d7b0 <_printf_float+0x138>
 800d7f6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d7fa:	d118      	bne.n	800d82e <_printf_float+0x1b6>
 800d7fc:	2900      	cmp	r1, #0
 800d7fe:	6863      	ldr	r3, [r4, #4]
 800d800:	dd0b      	ble.n	800d81a <_printf_float+0x1a2>
 800d802:	6121      	str	r1, [r4, #16]
 800d804:	b913      	cbnz	r3, 800d80c <_printf_float+0x194>
 800d806:	6822      	ldr	r2, [r4, #0]
 800d808:	07d0      	lsls	r0, r2, #31
 800d80a:	d502      	bpl.n	800d812 <_printf_float+0x19a>
 800d80c:	3301      	adds	r3, #1
 800d80e:	440b      	add	r3, r1
 800d810:	6123      	str	r3, [r4, #16]
 800d812:	f04f 0900 	mov.w	r9, #0
 800d816:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d818:	e7dc      	b.n	800d7d4 <_printf_float+0x15c>
 800d81a:	b913      	cbnz	r3, 800d822 <_printf_float+0x1aa>
 800d81c:	6822      	ldr	r2, [r4, #0]
 800d81e:	07d2      	lsls	r2, r2, #31
 800d820:	d501      	bpl.n	800d826 <_printf_float+0x1ae>
 800d822:	3302      	adds	r3, #2
 800d824:	e7f4      	b.n	800d810 <_printf_float+0x198>
 800d826:	2301      	movs	r3, #1
 800d828:	e7f2      	b.n	800d810 <_printf_float+0x198>
 800d82a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d82e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d830:	4299      	cmp	r1, r3
 800d832:	db05      	blt.n	800d840 <_printf_float+0x1c8>
 800d834:	6823      	ldr	r3, [r4, #0]
 800d836:	6121      	str	r1, [r4, #16]
 800d838:	07d8      	lsls	r0, r3, #31
 800d83a:	d5ea      	bpl.n	800d812 <_printf_float+0x19a>
 800d83c:	1c4b      	adds	r3, r1, #1
 800d83e:	e7e7      	b.n	800d810 <_printf_float+0x198>
 800d840:	2900      	cmp	r1, #0
 800d842:	bfcc      	ite	gt
 800d844:	2201      	movgt	r2, #1
 800d846:	f1c1 0202 	rsble	r2, r1, #2
 800d84a:	4413      	add	r3, r2
 800d84c:	e7e0      	b.n	800d810 <_printf_float+0x198>
 800d84e:	6823      	ldr	r3, [r4, #0]
 800d850:	055a      	lsls	r2, r3, #21
 800d852:	d407      	bmi.n	800d864 <_printf_float+0x1ec>
 800d854:	6923      	ldr	r3, [r4, #16]
 800d856:	4642      	mov	r2, r8
 800d858:	4631      	mov	r1, r6
 800d85a:	4628      	mov	r0, r5
 800d85c:	47b8      	blx	r7
 800d85e:	3001      	adds	r0, #1
 800d860:	d12b      	bne.n	800d8ba <_printf_float+0x242>
 800d862:	e764      	b.n	800d72e <_printf_float+0xb6>
 800d864:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d868:	f240 80dc 	bls.w	800da24 <_printf_float+0x3ac>
 800d86c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d870:	2200      	movs	r2, #0
 800d872:	2300      	movs	r3, #0
 800d874:	f7f3 f912 	bl	8000a9c <__aeabi_dcmpeq>
 800d878:	2800      	cmp	r0, #0
 800d87a:	d033      	beq.n	800d8e4 <_printf_float+0x26c>
 800d87c:	2301      	movs	r3, #1
 800d87e:	4631      	mov	r1, r6
 800d880:	4628      	mov	r0, r5
 800d882:	4a35      	ldr	r2, [pc, #212]	@ (800d958 <_printf_float+0x2e0>)
 800d884:	47b8      	blx	r7
 800d886:	3001      	adds	r0, #1
 800d888:	f43f af51 	beq.w	800d72e <_printf_float+0xb6>
 800d88c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800d890:	4543      	cmp	r3, r8
 800d892:	db02      	blt.n	800d89a <_printf_float+0x222>
 800d894:	6823      	ldr	r3, [r4, #0]
 800d896:	07d8      	lsls	r0, r3, #31
 800d898:	d50f      	bpl.n	800d8ba <_printf_float+0x242>
 800d89a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d89e:	4631      	mov	r1, r6
 800d8a0:	4628      	mov	r0, r5
 800d8a2:	47b8      	blx	r7
 800d8a4:	3001      	adds	r0, #1
 800d8a6:	f43f af42 	beq.w	800d72e <_printf_float+0xb6>
 800d8aa:	f04f 0900 	mov.w	r9, #0
 800d8ae:	f108 38ff 	add.w	r8, r8, #4294967295
 800d8b2:	f104 0a1a 	add.w	sl, r4, #26
 800d8b6:	45c8      	cmp	r8, r9
 800d8b8:	dc09      	bgt.n	800d8ce <_printf_float+0x256>
 800d8ba:	6823      	ldr	r3, [r4, #0]
 800d8bc:	079b      	lsls	r3, r3, #30
 800d8be:	f100 8102 	bmi.w	800dac6 <_printf_float+0x44e>
 800d8c2:	68e0      	ldr	r0, [r4, #12]
 800d8c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8c6:	4298      	cmp	r0, r3
 800d8c8:	bfb8      	it	lt
 800d8ca:	4618      	movlt	r0, r3
 800d8cc:	e731      	b.n	800d732 <_printf_float+0xba>
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	4652      	mov	r2, sl
 800d8d2:	4631      	mov	r1, r6
 800d8d4:	4628      	mov	r0, r5
 800d8d6:	47b8      	blx	r7
 800d8d8:	3001      	adds	r0, #1
 800d8da:	f43f af28 	beq.w	800d72e <_printf_float+0xb6>
 800d8de:	f109 0901 	add.w	r9, r9, #1
 800d8e2:	e7e8      	b.n	800d8b6 <_printf_float+0x23e>
 800d8e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	dc38      	bgt.n	800d95c <_printf_float+0x2e4>
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	4631      	mov	r1, r6
 800d8ee:	4628      	mov	r0, r5
 800d8f0:	4a19      	ldr	r2, [pc, #100]	@ (800d958 <_printf_float+0x2e0>)
 800d8f2:	47b8      	blx	r7
 800d8f4:	3001      	adds	r0, #1
 800d8f6:	f43f af1a 	beq.w	800d72e <_printf_float+0xb6>
 800d8fa:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800d8fe:	ea59 0303 	orrs.w	r3, r9, r3
 800d902:	d102      	bne.n	800d90a <_printf_float+0x292>
 800d904:	6823      	ldr	r3, [r4, #0]
 800d906:	07d9      	lsls	r1, r3, #31
 800d908:	d5d7      	bpl.n	800d8ba <_printf_float+0x242>
 800d90a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d90e:	4631      	mov	r1, r6
 800d910:	4628      	mov	r0, r5
 800d912:	47b8      	blx	r7
 800d914:	3001      	adds	r0, #1
 800d916:	f43f af0a 	beq.w	800d72e <_printf_float+0xb6>
 800d91a:	f04f 0a00 	mov.w	sl, #0
 800d91e:	f104 0b1a 	add.w	fp, r4, #26
 800d922:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d924:	425b      	negs	r3, r3
 800d926:	4553      	cmp	r3, sl
 800d928:	dc01      	bgt.n	800d92e <_printf_float+0x2b6>
 800d92a:	464b      	mov	r3, r9
 800d92c:	e793      	b.n	800d856 <_printf_float+0x1de>
 800d92e:	2301      	movs	r3, #1
 800d930:	465a      	mov	r2, fp
 800d932:	4631      	mov	r1, r6
 800d934:	4628      	mov	r0, r5
 800d936:	47b8      	blx	r7
 800d938:	3001      	adds	r0, #1
 800d93a:	f43f aef8 	beq.w	800d72e <_printf_float+0xb6>
 800d93e:	f10a 0a01 	add.w	sl, sl, #1
 800d942:	e7ee      	b.n	800d922 <_printf_float+0x2aa>
 800d944:	7fefffff 	.word	0x7fefffff
 800d948:	08012351 	.word	0x08012351
 800d94c:	08012355 	.word	0x08012355
 800d950:	08012359 	.word	0x08012359
 800d954:	0801235d 	.word	0x0801235d
 800d958:	080127a2 	.word	0x080127a2
 800d95c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d95e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800d962:	4553      	cmp	r3, sl
 800d964:	bfa8      	it	ge
 800d966:	4653      	movge	r3, sl
 800d968:	2b00      	cmp	r3, #0
 800d96a:	4699      	mov	r9, r3
 800d96c:	dc36      	bgt.n	800d9dc <_printf_float+0x364>
 800d96e:	f04f 0b00 	mov.w	fp, #0
 800d972:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d976:	f104 021a 	add.w	r2, r4, #26
 800d97a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d97c:	930a      	str	r3, [sp, #40]	@ 0x28
 800d97e:	eba3 0309 	sub.w	r3, r3, r9
 800d982:	455b      	cmp	r3, fp
 800d984:	dc31      	bgt.n	800d9ea <_printf_float+0x372>
 800d986:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d988:	459a      	cmp	sl, r3
 800d98a:	dc3a      	bgt.n	800da02 <_printf_float+0x38a>
 800d98c:	6823      	ldr	r3, [r4, #0]
 800d98e:	07da      	lsls	r2, r3, #31
 800d990:	d437      	bmi.n	800da02 <_printf_float+0x38a>
 800d992:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d994:	ebaa 0903 	sub.w	r9, sl, r3
 800d998:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d99a:	ebaa 0303 	sub.w	r3, sl, r3
 800d99e:	4599      	cmp	r9, r3
 800d9a0:	bfa8      	it	ge
 800d9a2:	4699      	movge	r9, r3
 800d9a4:	f1b9 0f00 	cmp.w	r9, #0
 800d9a8:	dc33      	bgt.n	800da12 <_printf_float+0x39a>
 800d9aa:	f04f 0800 	mov.w	r8, #0
 800d9ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d9b2:	f104 0b1a 	add.w	fp, r4, #26
 800d9b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d9b8:	ebaa 0303 	sub.w	r3, sl, r3
 800d9bc:	eba3 0309 	sub.w	r3, r3, r9
 800d9c0:	4543      	cmp	r3, r8
 800d9c2:	f77f af7a 	ble.w	800d8ba <_printf_float+0x242>
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	465a      	mov	r2, fp
 800d9ca:	4631      	mov	r1, r6
 800d9cc:	4628      	mov	r0, r5
 800d9ce:	47b8      	blx	r7
 800d9d0:	3001      	adds	r0, #1
 800d9d2:	f43f aeac 	beq.w	800d72e <_printf_float+0xb6>
 800d9d6:	f108 0801 	add.w	r8, r8, #1
 800d9da:	e7ec      	b.n	800d9b6 <_printf_float+0x33e>
 800d9dc:	4642      	mov	r2, r8
 800d9de:	4631      	mov	r1, r6
 800d9e0:	4628      	mov	r0, r5
 800d9e2:	47b8      	blx	r7
 800d9e4:	3001      	adds	r0, #1
 800d9e6:	d1c2      	bne.n	800d96e <_printf_float+0x2f6>
 800d9e8:	e6a1      	b.n	800d72e <_printf_float+0xb6>
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	4631      	mov	r1, r6
 800d9ee:	4628      	mov	r0, r5
 800d9f0:	920a      	str	r2, [sp, #40]	@ 0x28
 800d9f2:	47b8      	blx	r7
 800d9f4:	3001      	adds	r0, #1
 800d9f6:	f43f ae9a 	beq.w	800d72e <_printf_float+0xb6>
 800d9fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d9fc:	f10b 0b01 	add.w	fp, fp, #1
 800da00:	e7bb      	b.n	800d97a <_printf_float+0x302>
 800da02:	4631      	mov	r1, r6
 800da04:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800da08:	4628      	mov	r0, r5
 800da0a:	47b8      	blx	r7
 800da0c:	3001      	adds	r0, #1
 800da0e:	d1c0      	bne.n	800d992 <_printf_float+0x31a>
 800da10:	e68d      	b.n	800d72e <_printf_float+0xb6>
 800da12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da14:	464b      	mov	r3, r9
 800da16:	4631      	mov	r1, r6
 800da18:	4628      	mov	r0, r5
 800da1a:	4442      	add	r2, r8
 800da1c:	47b8      	blx	r7
 800da1e:	3001      	adds	r0, #1
 800da20:	d1c3      	bne.n	800d9aa <_printf_float+0x332>
 800da22:	e684      	b.n	800d72e <_printf_float+0xb6>
 800da24:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800da28:	f1ba 0f01 	cmp.w	sl, #1
 800da2c:	dc01      	bgt.n	800da32 <_printf_float+0x3ba>
 800da2e:	07db      	lsls	r3, r3, #31
 800da30:	d536      	bpl.n	800daa0 <_printf_float+0x428>
 800da32:	2301      	movs	r3, #1
 800da34:	4642      	mov	r2, r8
 800da36:	4631      	mov	r1, r6
 800da38:	4628      	mov	r0, r5
 800da3a:	47b8      	blx	r7
 800da3c:	3001      	adds	r0, #1
 800da3e:	f43f ae76 	beq.w	800d72e <_printf_float+0xb6>
 800da42:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800da46:	4631      	mov	r1, r6
 800da48:	4628      	mov	r0, r5
 800da4a:	47b8      	blx	r7
 800da4c:	3001      	adds	r0, #1
 800da4e:	f43f ae6e 	beq.w	800d72e <_printf_float+0xb6>
 800da52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800da56:	2200      	movs	r2, #0
 800da58:	2300      	movs	r3, #0
 800da5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da5e:	f7f3 f81d 	bl	8000a9c <__aeabi_dcmpeq>
 800da62:	b9c0      	cbnz	r0, 800da96 <_printf_float+0x41e>
 800da64:	4653      	mov	r3, sl
 800da66:	f108 0201 	add.w	r2, r8, #1
 800da6a:	4631      	mov	r1, r6
 800da6c:	4628      	mov	r0, r5
 800da6e:	47b8      	blx	r7
 800da70:	3001      	adds	r0, #1
 800da72:	d10c      	bne.n	800da8e <_printf_float+0x416>
 800da74:	e65b      	b.n	800d72e <_printf_float+0xb6>
 800da76:	2301      	movs	r3, #1
 800da78:	465a      	mov	r2, fp
 800da7a:	4631      	mov	r1, r6
 800da7c:	4628      	mov	r0, r5
 800da7e:	47b8      	blx	r7
 800da80:	3001      	adds	r0, #1
 800da82:	f43f ae54 	beq.w	800d72e <_printf_float+0xb6>
 800da86:	f108 0801 	add.w	r8, r8, #1
 800da8a:	45d0      	cmp	r8, sl
 800da8c:	dbf3      	blt.n	800da76 <_printf_float+0x3fe>
 800da8e:	464b      	mov	r3, r9
 800da90:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800da94:	e6e0      	b.n	800d858 <_printf_float+0x1e0>
 800da96:	f04f 0800 	mov.w	r8, #0
 800da9a:	f104 0b1a 	add.w	fp, r4, #26
 800da9e:	e7f4      	b.n	800da8a <_printf_float+0x412>
 800daa0:	2301      	movs	r3, #1
 800daa2:	4642      	mov	r2, r8
 800daa4:	e7e1      	b.n	800da6a <_printf_float+0x3f2>
 800daa6:	2301      	movs	r3, #1
 800daa8:	464a      	mov	r2, r9
 800daaa:	4631      	mov	r1, r6
 800daac:	4628      	mov	r0, r5
 800daae:	47b8      	blx	r7
 800dab0:	3001      	adds	r0, #1
 800dab2:	f43f ae3c 	beq.w	800d72e <_printf_float+0xb6>
 800dab6:	f108 0801 	add.w	r8, r8, #1
 800daba:	68e3      	ldr	r3, [r4, #12]
 800dabc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800dabe:	1a5b      	subs	r3, r3, r1
 800dac0:	4543      	cmp	r3, r8
 800dac2:	dcf0      	bgt.n	800daa6 <_printf_float+0x42e>
 800dac4:	e6fd      	b.n	800d8c2 <_printf_float+0x24a>
 800dac6:	f04f 0800 	mov.w	r8, #0
 800daca:	f104 0919 	add.w	r9, r4, #25
 800dace:	e7f4      	b.n	800daba <_printf_float+0x442>

0800dad0 <_printf_common>:
 800dad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dad4:	4616      	mov	r6, r2
 800dad6:	4698      	mov	r8, r3
 800dad8:	688a      	ldr	r2, [r1, #8]
 800dada:	690b      	ldr	r3, [r1, #16]
 800dadc:	4607      	mov	r7, r0
 800dade:	4293      	cmp	r3, r2
 800dae0:	bfb8      	it	lt
 800dae2:	4613      	movlt	r3, r2
 800dae4:	6033      	str	r3, [r6, #0]
 800dae6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800daea:	460c      	mov	r4, r1
 800daec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800daf0:	b10a      	cbz	r2, 800daf6 <_printf_common+0x26>
 800daf2:	3301      	adds	r3, #1
 800daf4:	6033      	str	r3, [r6, #0]
 800daf6:	6823      	ldr	r3, [r4, #0]
 800daf8:	0699      	lsls	r1, r3, #26
 800dafa:	bf42      	ittt	mi
 800dafc:	6833      	ldrmi	r3, [r6, #0]
 800dafe:	3302      	addmi	r3, #2
 800db00:	6033      	strmi	r3, [r6, #0]
 800db02:	6825      	ldr	r5, [r4, #0]
 800db04:	f015 0506 	ands.w	r5, r5, #6
 800db08:	d106      	bne.n	800db18 <_printf_common+0x48>
 800db0a:	f104 0a19 	add.w	sl, r4, #25
 800db0e:	68e3      	ldr	r3, [r4, #12]
 800db10:	6832      	ldr	r2, [r6, #0]
 800db12:	1a9b      	subs	r3, r3, r2
 800db14:	42ab      	cmp	r3, r5
 800db16:	dc2b      	bgt.n	800db70 <_printf_common+0xa0>
 800db18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800db1c:	6822      	ldr	r2, [r4, #0]
 800db1e:	3b00      	subs	r3, #0
 800db20:	bf18      	it	ne
 800db22:	2301      	movne	r3, #1
 800db24:	0692      	lsls	r2, r2, #26
 800db26:	d430      	bmi.n	800db8a <_printf_common+0xba>
 800db28:	4641      	mov	r1, r8
 800db2a:	4638      	mov	r0, r7
 800db2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800db30:	47c8      	blx	r9
 800db32:	3001      	adds	r0, #1
 800db34:	d023      	beq.n	800db7e <_printf_common+0xae>
 800db36:	6823      	ldr	r3, [r4, #0]
 800db38:	6922      	ldr	r2, [r4, #16]
 800db3a:	f003 0306 	and.w	r3, r3, #6
 800db3e:	2b04      	cmp	r3, #4
 800db40:	bf14      	ite	ne
 800db42:	2500      	movne	r5, #0
 800db44:	6833      	ldreq	r3, [r6, #0]
 800db46:	f04f 0600 	mov.w	r6, #0
 800db4a:	bf08      	it	eq
 800db4c:	68e5      	ldreq	r5, [r4, #12]
 800db4e:	f104 041a 	add.w	r4, r4, #26
 800db52:	bf08      	it	eq
 800db54:	1aed      	subeq	r5, r5, r3
 800db56:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800db5a:	bf08      	it	eq
 800db5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800db60:	4293      	cmp	r3, r2
 800db62:	bfc4      	itt	gt
 800db64:	1a9b      	subgt	r3, r3, r2
 800db66:	18ed      	addgt	r5, r5, r3
 800db68:	42b5      	cmp	r5, r6
 800db6a:	d11a      	bne.n	800dba2 <_printf_common+0xd2>
 800db6c:	2000      	movs	r0, #0
 800db6e:	e008      	b.n	800db82 <_printf_common+0xb2>
 800db70:	2301      	movs	r3, #1
 800db72:	4652      	mov	r2, sl
 800db74:	4641      	mov	r1, r8
 800db76:	4638      	mov	r0, r7
 800db78:	47c8      	blx	r9
 800db7a:	3001      	adds	r0, #1
 800db7c:	d103      	bne.n	800db86 <_printf_common+0xb6>
 800db7e:	f04f 30ff 	mov.w	r0, #4294967295
 800db82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db86:	3501      	adds	r5, #1
 800db88:	e7c1      	b.n	800db0e <_printf_common+0x3e>
 800db8a:	2030      	movs	r0, #48	@ 0x30
 800db8c:	18e1      	adds	r1, r4, r3
 800db8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800db92:	1c5a      	adds	r2, r3, #1
 800db94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800db98:	4422      	add	r2, r4
 800db9a:	3302      	adds	r3, #2
 800db9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dba0:	e7c2      	b.n	800db28 <_printf_common+0x58>
 800dba2:	2301      	movs	r3, #1
 800dba4:	4622      	mov	r2, r4
 800dba6:	4641      	mov	r1, r8
 800dba8:	4638      	mov	r0, r7
 800dbaa:	47c8      	blx	r9
 800dbac:	3001      	adds	r0, #1
 800dbae:	d0e6      	beq.n	800db7e <_printf_common+0xae>
 800dbb0:	3601      	adds	r6, #1
 800dbb2:	e7d9      	b.n	800db68 <_printf_common+0x98>

0800dbb4 <_printf_i>:
 800dbb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dbb8:	7e0f      	ldrb	r7, [r1, #24]
 800dbba:	4691      	mov	r9, r2
 800dbbc:	2f78      	cmp	r7, #120	@ 0x78
 800dbbe:	4680      	mov	r8, r0
 800dbc0:	460c      	mov	r4, r1
 800dbc2:	469a      	mov	sl, r3
 800dbc4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dbc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dbca:	d807      	bhi.n	800dbdc <_printf_i+0x28>
 800dbcc:	2f62      	cmp	r7, #98	@ 0x62
 800dbce:	d80a      	bhi.n	800dbe6 <_printf_i+0x32>
 800dbd0:	2f00      	cmp	r7, #0
 800dbd2:	f000 80d3 	beq.w	800dd7c <_printf_i+0x1c8>
 800dbd6:	2f58      	cmp	r7, #88	@ 0x58
 800dbd8:	f000 80ba 	beq.w	800dd50 <_printf_i+0x19c>
 800dbdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dbe0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dbe4:	e03a      	b.n	800dc5c <_printf_i+0xa8>
 800dbe6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dbea:	2b15      	cmp	r3, #21
 800dbec:	d8f6      	bhi.n	800dbdc <_printf_i+0x28>
 800dbee:	a101      	add	r1, pc, #4	@ (adr r1, 800dbf4 <_printf_i+0x40>)
 800dbf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dbf4:	0800dc4d 	.word	0x0800dc4d
 800dbf8:	0800dc61 	.word	0x0800dc61
 800dbfc:	0800dbdd 	.word	0x0800dbdd
 800dc00:	0800dbdd 	.word	0x0800dbdd
 800dc04:	0800dbdd 	.word	0x0800dbdd
 800dc08:	0800dbdd 	.word	0x0800dbdd
 800dc0c:	0800dc61 	.word	0x0800dc61
 800dc10:	0800dbdd 	.word	0x0800dbdd
 800dc14:	0800dbdd 	.word	0x0800dbdd
 800dc18:	0800dbdd 	.word	0x0800dbdd
 800dc1c:	0800dbdd 	.word	0x0800dbdd
 800dc20:	0800dd63 	.word	0x0800dd63
 800dc24:	0800dc8b 	.word	0x0800dc8b
 800dc28:	0800dd1d 	.word	0x0800dd1d
 800dc2c:	0800dbdd 	.word	0x0800dbdd
 800dc30:	0800dbdd 	.word	0x0800dbdd
 800dc34:	0800dd85 	.word	0x0800dd85
 800dc38:	0800dbdd 	.word	0x0800dbdd
 800dc3c:	0800dc8b 	.word	0x0800dc8b
 800dc40:	0800dbdd 	.word	0x0800dbdd
 800dc44:	0800dbdd 	.word	0x0800dbdd
 800dc48:	0800dd25 	.word	0x0800dd25
 800dc4c:	6833      	ldr	r3, [r6, #0]
 800dc4e:	1d1a      	adds	r2, r3, #4
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	6032      	str	r2, [r6, #0]
 800dc54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dc58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	e09e      	b.n	800dd9e <_printf_i+0x1ea>
 800dc60:	6833      	ldr	r3, [r6, #0]
 800dc62:	6820      	ldr	r0, [r4, #0]
 800dc64:	1d19      	adds	r1, r3, #4
 800dc66:	6031      	str	r1, [r6, #0]
 800dc68:	0606      	lsls	r6, r0, #24
 800dc6a:	d501      	bpl.n	800dc70 <_printf_i+0xbc>
 800dc6c:	681d      	ldr	r5, [r3, #0]
 800dc6e:	e003      	b.n	800dc78 <_printf_i+0xc4>
 800dc70:	0645      	lsls	r5, r0, #25
 800dc72:	d5fb      	bpl.n	800dc6c <_printf_i+0xb8>
 800dc74:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dc78:	2d00      	cmp	r5, #0
 800dc7a:	da03      	bge.n	800dc84 <_printf_i+0xd0>
 800dc7c:	232d      	movs	r3, #45	@ 0x2d
 800dc7e:	426d      	negs	r5, r5
 800dc80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc84:	230a      	movs	r3, #10
 800dc86:	4859      	ldr	r0, [pc, #356]	@ (800ddec <_printf_i+0x238>)
 800dc88:	e011      	b.n	800dcae <_printf_i+0xfa>
 800dc8a:	6821      	ldr	r1, [r4, #0]
 800dc8c:	6833      	ldr	r3, [r6, #0]
 800dc8e:	0608      	lsls	r0, r1, #24
 800dc90:	f853 5b04 	ldr.w	r5, [r3], #4
 800dc94:	d402      	bmi.n	800dc9c <_printf_i+0xe8>
 800dc96:	0649      	lsls	r1, r1, #25
 800dc98:	bf48      	it	mi
 800dc9a:	b2ad      	uxthmi	r5, r5
 800dc9c:	2f6f      	cmp	r7, #111	@ 0x6f
 800dc9e:	6033      	str	r3, [r6, #0]
 800dca0:	bf14      	ite	ne
 800dca2:	230a      	movne	r3, #10
 800dca4:	2308      	moveq	r3, #8
 800dca6:	4851      	ldr	r0, [pc, #324]	@ (800ddec <_printf_i+0x238>)
 800dca8:	2100      	movs	r1, #0
 800dcaa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dcae:	6866      	ldr	r6, [r4, #4]
 800dcb0:	2e00      	cmp	r6, #0
 800dcb2:	bfa8      	it	ge
 800dcb4:	6821      	ldrge	r1, [r4, #0]
 800dcb6:	60a6      	str	r6, [r4, #8]
 800dcb8:	bfa4      	itt	ge
 800dcba:	f021 0104 	bicge.w	r1, r1, #4
 800dcbe:	6021      	strge	r1, [r4, #0]
 800dcc0:	b90d      	cbnz	r5, 800dcc6 <_printf_i+0x112>
 800dcc2:	2e00      	cmp	r6, #0
 800dcc4:	d04b      	beq.n	800dd5e <_printf_i+0x1aa>
 800dcc6:	4616      	mov	r6, r2
 800dcc8:	fbb5 f1f3 	udiv	r1, r5, r3
 800dccc:	fb03 5711 	mls	r7, r3, r1, r5
 800dcd0:	5dc7      	ldrb	r7, [r0, r7]
 800dcd2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dcd6:	462f      	mov	r7, r5
 800dcd8:	42bb      	cmp	r3, r7
 800dcda:	460d      	mov	r5, r1
 800dcdc:	d9f4      	bls.n	800dcc8 <_printf_i+0x114>
 800dcde:	2b08      	cmp	r3, #8
 800dce0:	d10b      	bne.n	800dcfa <_printf_i+0x146>
 800dce2:	6823      	ldr	r3, [r4, #0]
 800dce4:	07df      	lsls	r7, r3, #31
 800dce6:	d508      	bpl.n	800dcfa <_printf_i+0x146>
 800dce8:	6923      	ldr	r3, [r4, #16]
 800dcea:	6861      	ldr	r1, [r4, #4]
 800dcec:	4299      	cmp	r1, r3
 800dcee:	bfde      	ittt	le
 800dcf0:	2330      	movle	r3, #48	@ 0x30
 800dcf2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dcf6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dcfa:	1b92      	subs	r2, r2, r6
 800dcfc:	6122      	str	r2, [r4, #16]
 800dcfe:	464b      	mov	r3, r9
 800dd00:	4621      	mov	r1, r4
 800dd02:	4640      	mov	r0, r8
 800dd04:	f8cd a000 	str.w	sl, [sp]
 800dd08:	aa03      	add	r2, sp, #12
 800dd0a:	f7ff fee1 	bl	800dad0 <_printf_common>
 800dd0e:	3001      	adds	r0, #1
 800dd10:	d14a      	bne.n	800dda8 <_printf_i+0x1f4>
 800dd12:	f04f 30ff 	mov.w	r0, #4294967295
 800dd16:	b004      	add	sp, #16
 800dd18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd1c:	6823      	ldr	r3, [r4, #0]
 800dd1e:	f043 0320 	orr.w	r3, r3, #32
 800dd22:	6023      	str	r3, [r4, #0]
 800dd24:	2778      	movs	r7, #120	@ 0x78
 800dd26:	4832      	ldr	r0, [pc, #200]	@ (800ddf0 <_printf_i+0x23c>)
 800dd28:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dd2c:	6823      	ldr	r3, [r4, #0]
 800dd2e:	6831      	ldr	r1, [r6, #0]
 800dd30:	061f      	lsls	r7, r3, #24
 800dd32:	f851 5b04 	ldr.w	r5, [r1], #4
 800dd36:	d402      	bmi.n	800dd3e <_printf_i+0x18a>
 800dd38:	065f      	lsls	r7, r3, #25
 800dd3a:	bf48      	it	mi
 800dd3c:	b2ad      	uxthmi	r5, r5
 800dd3e:	6031      	str	r1, [r6, #0]
 800dd40:	07d9      	lsls	r1, r3, #31
 800dd42:	bf44      	itt	mi
 800dd44:	f043 0320 	orrmi.w	r3, r3, #32
 800dd48:	6023      	strmi	r3, [r4, #0]
 800dd4a:	b11d      	cbz	r5, 800dd54 <_printf_i+0x1a0>
 800dd4c:	2310      	movs	r3, #16
 800dd4e:	e7ab      	b.n	800dca8 <_printf_i+0xf4>
 800dd50:	4826      	ldr	r0, [pc, #152]	@ (800ddec <_printf_i+0x238>)
 800dd52:	e7e9      	b.n	800dd28 <_printf_i+0x174>
 800dd54:	6823      	ldr	r3, [r4, #0]
 800dd56:	f023 0320 	bic.w	r3, r3, #32
 800dd5a:	6023      	str	r3, [r4, #0]
 800dd5c:	e7f6      	b.n	800dd4c <_printf_i+0x198>
 800dd5e:	4616      	mov	r6, r2
 800dd60:	e7bd      	b.n	800dcde <_printf_i+0x12a>
 800dd62:	6833      	ldr	r3, [r6, #0]
 800dd64:	6825      	ldr	r5, [r4, #0]
 800dd66:	1d18      	adds	r0, r3, #4
 800dd68:	6961      	ldr	r1, [r4, #20]
 800dd6a:	6030      	str	r0, [r6, #0]
 800dd6c:	062e      	lsls	r6, r5, #24
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	d501      	bpl.n	800dd76 <_printf_i+0x1c2>
 800dd72:	6019      	str	r1, [r3, #0]
 800dd74:	e002      	b.n	800dd7c <_printf_i+0x1c8>
 800dd76:	0668      	lsls	r0, r5, #25
 800dd78:	d5fb      	bpl.n	800dd72 <_printf_i+0x1be>
 800dd7a:	8019      	strh	r1, [r3, #0]
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	4616      	mov	r6, r2
 800dd80:	6123      	str	r3, [r4, #16]
 800dd82:	e7bc      	b.n	800dcfe <_printf_i+0x14a>
 800dd84:	6833      	ldr	r3, [r6, #0]
 800dd86:	2100      	movs	r1, #0
 800dd88:	1d1a      	adds	r2, r3, #4
 800dd8a:	6032      	str	r2, [r6, #0]
 800dd8c:	681e      	ldr	r6, [r3, #0]
 800dd8e:	6862      	ldr	r2, [r4, #4]
 800dd90:	4630      	mov	r0, r6
 800dd92:	f001 f85e 	bl	800ee52 <memchr>
 800dd96:	b108      	cbz	r0, 800dd9c <_printf_i+0x1e8>
 800dd98:	1b80      	subs	r0, r0, r6
 800dd9a:	6060      	str	r0, [r4, #4]
 800dd9c:	6863      	ldr	r3, [r4, #4]
 800dd9e:	6123      	str	r3, [r4, #16]
 800dda0:	2300      	movs	r3, #0
 800dda2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dda6:	e7aa      	b.n	800dcfe <_printf_i+0x14a>
 800dda8:	4632      	mov	r2, r6
 800ddaa:	4649      	mov	r1, r9
 800ddac:	4640      	mov	r0, r8
 800ddae:	6923      	ldr	r3, [r4, #16]
 800ddb0:	47d0      	blx	sl
 800ddb2:	3001      	adds	r0, #1
 800ddb4:	d0ad      	beq.n	800dd12 <_printf_i+0x15e>
 800ddb6:	6823      	ldr	r3, [r4, #0]
 800ddb8:	079b      	lsls	r3, r3, #30
 800ddba:	d413      	bmi.n	800dde4 <_printf_i+0x230>
 800ddbc:	68e0      	ldr	r0, [r4, #12]
 800ddbe:	9b03      	ldr	r3, [sp, #12]
 800ddc0:	4298      	cmp	r0, r3
 800ddc2:	bfb8      	it	lt
 800ddc4:	4618      	movlt	r0, r3
 800ddc6:	e7a6      	b.n	800dd16 <_printf_i+0x162>
 800ddc8:	2301      	movs	r3, #1
 800ddca:	4632      	mov	r2, r6
 800ddcc:	4649      	mov	r1, r9
 800ddce:	4640      	mov	r0, r8
 800ddd0:	47d0      	blx	sl
 800ddd2:	3001      	adds	r0, #1
 800ddd4:	d09d      	beq.n	800dd12 <_printf_i+0x15e>
 800ddd6:	3501      	adds	r5, #1
 800ddd8:	68e3      	ldr	r3, [r4, #12]
 800ddda:	9903      	ldr	r1, [sp, #12]
 800dddc:	1a5b      	subs	r3, r3, r1
 800ddde:	42ab      	cmp	r3, r5
 800dde0:	dcf2      	bgt.n	800ddc8 <_printf_i+0x214>
 800dde2:	e7eb      	b.n	800ddbc <_printf_i+0x208>
 800dde4:	2500      	movs	r5, #0
 800dde6:	f104 0619 	add.w	r6, r4, #25
 800ddea:	e7f5      	b.n	800ddd8 <_printf_i+0x224>
 800ddec:	08012361 	.word	0x08012361
 800ddf0:	08012372 	.word	0x08012372

0800ddf4 <std>:
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	b510      	push	{r4, lr}
 800ddf8:	4604      	mov	r4, r0
 800ddfa:	e9c0 3300 	strd	r3, r3, [r0]
 800ddfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800de02:	6083      	str	r3, [r0, #8]
 800de04:	8181      	strh	r1, [r0, #12]
 800de06:	6643      	str	r3, [r0, #100]	@ 0x64
 800de08:	81c2      	strh	r2, [r0, #14]
 800de0a:	6183      	str	r3, [r0, #24]
 800de0c:	4619      	mov	r1, r3
 800de0e:	2208      	movs	r2, #8
 800de10:	305c      	adds	r0, #92	@ 0x5c
 800de12:	f000 f928 	bl	800e066 <memset>
 800de16:	4b0d      	ldr	r3, [pc, #52]	@ (800de4c <std+0x58>)
 800de18:	6224      	str	r4, [r4, #32]
 800de1a:	6263      	str	r3, [r4, #36]	@ 0x24
 800de1c:	4b0c      	ldr	r3, [pc, #48]	@ (800de50 <std+0x5c>)
 800de1e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800de20:	4b0c      	ldr	r3, [pc, #48]	@ (800de54 <std+0x60>)
 800de22:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800de24:	4b0c      	ldr	r3, [pc, #48]	@ (800de58 <std+0x64>)
 800de26:	6323      	str	r3, [r4, #48]	@ 0x30
 800de28:	4b0c      	ldr	r3, [pc, #48]	@ (800de5c <std+0x68>)
 800de2a:	429c      	cmp	r4, r3
 800de2c:	d006      	beq.n	800de3c <std+0x48>
 800de2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800de32:	4294      	cmp	r4, r2
 800de34:	d002      	beq.n	800de3c <std+0x48>
 800de36:	33d0      	adds	r3, #208	@ 0xd0
 800de38:	429c      	cmp	r4, r3
 800de3a:	d105      	bne.n	800de48 <std+0x54>
 800de3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800de40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de44:	f000 bff8 	b.w	800ee38 <__retarget_lock_init_recursive>
 800de48:	bd10      	pop	{r4, pc}
 800de4a:	bf00      	nop
 800de4c:	0800dfdd 	.word	0x0800dfdd
 800de50:	0800e003 	.word	0x0800e003
 800de54:	0800e03b 	.word	0x0800e03b
 800de58:	0800e05f 	.word	0x0800e05f
 800de5c:	20005a0c 	.word	0x20005a0c

0800de60 <stdio_exit_handler>:
 800de60:	4a02      	ldr	r2, [pc, #8]	@ (800de6c <stdio_exit_handler+0xc>)
 800de62:	4903      	ldr	r1, [pc, #12]	@ (800de70 <stdio_exit_handler+0x10>)
 800de64:	4803      	ldr	r0, [pc, #12]	@ (800de74 <stdio_exit_handler+0x14>)
 800de66:	f000 b869 	b.w	800df3c <_fwalk_sglue>
 800de6a:	bf00      	nop
 800de6c:	200000ec 	.word	0x200000ec
 800de70:	080113c9 	.word	0x080113c9
 800de74:	20000270 	.word	0x20000270

0800de78 <cleanup_stdio>:
 800de78:	6841      	ldr	r1, [r0, #4]
 800de7a:	4b0c      	ldr	r3, [pc, #48]	@ (800deac <cleanup_stdio+0x34>)
 800de7c:	b510      	push	{r4, lr}
 800de7e:	4299      	cmp	r1, r3
 800de80:	4604      	mov	r4, r0
 800de82:	d001      	beq.n	800de88 <cleanup_stdio+0x10>
 800de84:	f003 faa0 	bl	80113c8 <_fflush_r>
 800de88:	68a1      	ldr	r1, [r4, #8]
 800de8a:	4b09      	ldr	r3, [pc, #36]	@ (800deb0 <cleanup_stdio+0x38>)
 800de8c:	4299      	cmp	r1, r3
 800de8e:	d002      	beq.n	800de96 <cleanup_stdio+0x1e>
 800de90:	4620      	mov	r0, r4
 800de92:	f003 fa99 	bl	80113c8 <_fflush_r>
 800de96:	68e1      	ldr	r1, [r4, #12]
 800de98:	4b06      	ldr	r3, [pc, #24]	@ (800deb4 <cleanup_stdio+0x3c>)
 800de9a:	4299      	cmp	r1, r3
 800de9c:	d004      	beq.n	800dea8 <cleanup_stdio+0x30>
 800de9e:	4620      	mov	r0, r4
 800dea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dea4:	f003 ba90 	b.w	80113c8 <_fflush_r>
 800dea8:	bd10      	pop	{r4, pc}
 800deaa:	bf00      	nop
 800deac:	20005a0c 	.word	0x20005a0c
 800deb0:	20005a74 	.word	0x20005a74
 800deb4:	20005adc 	.word	0x20005adc

0800deb8 <global_stdio_init.part.0>:
 800deb8:	b510      	push	{r4, lr}
 800deba:	4b0b      	ldr	r3, [pc, #44]	@ (800dee8 <global_stdio_init.part.0+0x30>)
 800debc:	4c0b      	ldr	r4, [pc, #44]	@ (800deec <global_stdio_init.part.0+0x34>)
 800debe:	4a0c      	ldr	r2, [pc, #48]	@ (800def0 <global_stdio_init.part.0+0x38>)
 800dec0:	4620      	mov	r0, r4
 800dec2:	601a      	str	r2, [r3, #0]
 800dec4:	2104      	movs	r1, #4
 800dec6:	2200      	movs	r2, #0
 800dec8:	f7ff ff94 	bl	800ddf4 <std>
 800decc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ded0:	2201      	movs	r2, #1
 800ded2:	2109      	movs	r1, #9
 800ded4:	f7ff ff8e 	bl	800ddf4 <std>
 800ded8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dedc:	2202      	movs	r2, #2
 800dede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dee2:	2112      	movs	r1, #18
 800dee4:	f7ff bf86 	b.w	800ddf4 <std>
 800dee8:	20005b44 	.word	0x20005b44
 800deec:	20005a0c 	.word	0x20005a0c
 800def0:	0800de61 	.word	0x0800de61

0800def4 <__sfp_lock_acquire>:
 800def4:	4801      	ldr	r0, [pc, #4]	@ (800defc <__sfp_lock_acquire+0x8>)
 800def6:	f000 bfa1 	b.w	800ee3c <__retarget_lock_acquire_recursive>
 800defa:	bf00      	nop
 800defc:	20005b73 	.word	0x20005b73

0800df00 <__sfp_lock_release>:
 800df00:	4801      	ldr	r0, [pc, #4]	@ (800df08 <__sfp_lock_release+0x8>)
 800df02:	f000 bf9d 	b.w	800ee40 <__retarget_lock_release_recursive>
 800df06:	bf00      	nop
 800df08:	20005b73 	.word	0x20005b73

0800df0c <__sinit>:
 800df0c:	b510      	push	{r4, lr}
 800df0e:	4604      	mov	r4, r0
 800df10:	f7ff fff0 	bl	800def4 <__sfp_lock_acquire>
 800df14:	6a23      	ldr	r3, [r4, #32]
 800df16:	b11b      	cbz	r3, 800df20 <__sinit+0x14>
 800df18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df1c:	f7ff bff0 	b.w	800df00 <__sfp_lock_release>
 800df20:	4b04      	ldr	r3, [pc, #16]	@ (800df34 <__sinit+0x28>)
 800df22:	6223      	str	r3, [r4, #32]
 800df24:	4b04      	ldr	r3, [pc, #16]	@ (800df38 <__sinit+0x2c>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d1f5      	bne.n	800df18 <__sinit+0xc>
 800df2c:	f7ff ffc4 	bl	800deb8 <global_stdio_init.part.0>
 800df30:	e7f2      	b.n	800df18 <__sinit+0xc>
 800df32:	bf00      	nop
 800df34:	0800de79 	.word	0x0800de79
 800df38:	20005b44 	.word	0x20005b44

0800df3c <_fwalk_sglue>:
 800df3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df40:	4607      	mov	r7, r0
 800df42:	4688      	mov	r8, r1
 800df44:	4614      	mov	r4, r2
 800df46:	2600      	movs	r6, #0
 800df48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800df4c:	f1b9 0901 	subs.w	r9, r9, #1
 800df50:	d505      	bpl.n	800df5e <_fwalk_sglue+0x22>
 800df52:	6824      	ldr	r4, [r4, #0]
 800df54:	2c00      	cmp	r4, #0
 800df56:	d1f7      	bne.n	800df48 <_fwalk_sglue+0xc>
 800df58:	4630      	mov	r0, r6
 800df5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df5e:	89ab      	ldrh	r3, [r5, #12]
 800df60:	2b01      	cmp	r3, #1
 800df62:	d907      	bls.n	800df74 <_fwalk_sglue+0x38>
 800df64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800df68:	3301      	adds	r3, #1
 800df6a:	d003      	beq.n	800df74 <_fwalk_sglue+0x38>
 800df6c:	4629      	mov	r1, r5
 800df6e:	4638      	mov	r0, r7
 800df70:	47c0      	blx	r8
 800df72:	4306      	orrs	r6, r0
 800df74:	3568      	adds	r5, #104	@ 0x68
 800df76:	e7e9      	b.n	800df4c <_fwalk_sglue+0x10>

0800df78 <iprintf>:
 800df78:	b40f      	push	{r0, r1, r2, r3}
 800df7a:	b507      	push	{r0, r1, r2, lr}
 800df7c:	4906      	ldr	r1, [pc, #24]	@ (800df98 <iprintf+0x20>)
 800df7e:	ab04      	add	r3, sp, #16
 800df80:	6808      	ldr	r0, [r1, #0]
 800df82:	f853 2b04 	ldr.w	r2, [r3], #4
 800df86:	6881      	ldr	r1, [r0, #8]
 800df88:	9301      	str	r3, [sp, #4]
 800df8a:	f003 f885 	bl	8011098 <_vfiprintf_r>
 800df8e:	b003      	add	sp, #12
 800df90:	f85d eb04 	ldr.w	lr, [sp], #4
 800df94:	b004      	add	sp, #16
 800df96:	4770      	bx	lr
 800df98:	2000026c 	.word	0x2000026c

0800df9c <siprintf>:
 800df9c:	b40e      	push	{r1, r2, r3}
 800df9e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800dfa2:	b500      	push	{lr}
 800dfa4:	b09c      	sub	sp, #112	@ 0x70
 800dfa6:	ab1d      	add	r3, sp, #116	@ 0x74
 800dfa8:	9002      	str	r0, [sp, #8]
 800dfaa:	9006      	str	r0, [sp, #24]
 800dfac:	9107      	str	r1, [sp, #28]
 800dfae:	9104      	str	r1, [sp, #16]
 800dfb0:	4808      	ldr	r0, [pc, #32]	@ (800dfd4 <siprintf+0x38>)
 800dfb2:	4909      	ldr	r1, [pc, #36]	@ (800dfd8 <siprintf+0x3c>)
 800dfb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfb8:	9105      	str	r1, [sp, #20]
 800dfba:	6800      	ldr	r0, [r0, #0]
 800dfbc:	a902      	add	r1, sp, #8
 800dfbe:	9301      	str	r3, [sp, #4]
 800dfc0:	f002 ff46 	bl	8010e50 <_svfiprintf_r>
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	9b02      	ldr	r3, [sp, #8]
 800dfc8:	701a      	strb	r2, [r3, #0]
 800dfca:	b01c      	add	sp, #112	@ 0x70
 800dfcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800dfd0:	b003      	add	sp, #12
 800dfd2:	4770      	bx	lr
 800dfd4:	2000026c 	.word	0x2000026c
 800dfd8:	ffff0208 	.word	0xffff0208

0800dfdc <__sread>:
 800dfdc:	b510      	push	{r4, lr}
 800dfde:	460c      	mov	r4, r1
 800dfe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfe4:	f000 feca 	bl	800ed7c <_read_r>
 800dfe8:	2800      	cmp	r0, #0
 800dfea:	bfab      	itete	ge
 800dfec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dfee:	89a3      	ldrhlt	r3, [r4, #12]
 800dff0:	181b      	addge	r3, r3, r0
 800dff2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dff6:	bfac      	ite	ge
 800dff8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dffa:	81a3      	strhlt	r3, [r4, #12]
 800dffc:	bd10      	pop	{r4, pc}

0800dffe <__seofread>:
 800dffe:	2000      	movs	r0, #0
 800e000:	4770      	bx	lr

0800e002 <__swrite>:
 800e002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e006:	461f      	mov	r7, r3
 800e008:	898b      	ldrh	r3, [r1, #12]
 800e00a:	4605      	mov	r5, r0
 800e00c:	05db      	lsls	r3, r3, #23
 800e00e:	460c      	mov	r4, r1
 800e010:	4616      	mov	r6, r2
 800e012:	d505      	bpl.n	800e020 <__swrite+0x1e>
 800e014:	2302      	movs	r3, #2
 800e016:	2200      	movs	r2, #0
 800e018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e01c:	f000 fe9c 	bl	800ed58 <_lseek_r>
 800e020:	89a3      	ldrh	r3, [r4, #12]
 800e022:	4632      	mov	r2, r6
 800e024:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e028:	81a3      	strh	r3, [r4, #12]
 800e02a:	4628      	mov	r0, r5
 800e02c:	463b      	mov	r3, r7
 800e02e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e036:	f000 bec3 	b.w	800edc0 <_write_r>

0800e03a <__sseek>:
 800e03a:	b510      	push	{r4, lr}
 800e03c:	460c      	mov	r4, r1
 800e03e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e042:	f000 fe89 	bl	800ed58 <_lseek_r>
 800e046:	1c43      	adds	r3, r0, #1
 800e048:	89a3      	ldrh	r3, [r4, #12]
 800e04a:	bf15      	itete	ne
 800e04c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e04e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e052:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e056:	81a3      	strheq	r3, [r4, #12]
 800e058:	bf18      	it	ne
 800e05a:	81a3      	strhne	r3, [r4, #12]
 800e05c:	bd10      	pop	{r4, pc}

0800e05e <__sclose>:
 800e05e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e062:	f000 be13 	b.w	800ec8c <_close_r>

0800e066 <memset>:
 800e066:	4603      	mov	r3, r0
 800e068:	4402      	add	r2, r0
 800e06a:	4293      	cmp	r3, r2
 800e06c:	d100      	bne.n	800e070 <memset+0xa>
 800e06e:	4770      	bx	lr
 800e070:	f803 1b01 	strb.w	r1, [r3], #1
 800e074:	e7f9      	b.n	800e06a <memset+0x4>

0800e076 <strchr>:
 800e076:	4603      	mov	r3, r0
 800e078:	b2c9      	uxtb	r1, r1
 800e07a:	4618      	mov	r0, r3
 800e07c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e080:	b112      	cbz	r2, 800e088 <strchr+0x12>
 800e082:	428a      	cmp	r2, r1
 800e084:	d1f9      	bne.n	800e07a <strchr+0x4>
 800e086:	4770      	bx	lr
 800e088:	2900      	cmp	r1, #0
 800e08a:	bf18      	it	ne
 800e08c:	2000      	movne	r0, #0
 800e08e:	4770      	bx	lr

0800e090 <strncmp>:
 800e090:	b510      	push	{r4, lr}
 800e092:	b16a      	cbz	r2, 800e0b0 <strncmp+0x20>
 800e094:	3901      	subs	r1, #1
 800e096:	1884      	adds	r4, r0, r2
 800e098:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e09c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d103      	bne.n	800e0ac <strncmp+0x1c>
 800e0a4:	42a0      	cmp	r0, r4
 800e0a6:	d001      	beq.n	800e0ac <strncmp+0x1c>
 800e0a8:	2a00      	cmp	r2, #0
 800e0aa:	d1f5      	bne.n	800e098 <strncmp+0x8>
 800e0ac:	1ad0      	subs	r0, r2, r3
 800e0ae:	bd10      	pop	{r4, pc}
 800e0b0:	4610      	mov	r0, r2
 800e0b2:	e7fc      	b.n	800e0ae <strncmp+0x1e>

0800e0b4 <strncpy>:
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	b510      	push	{r4, lr}
 800e0b8:	3901      	subs	r1, #1
 800e0ba:	b132      	cbz	r2, 800e0ca <strncpy+0x16>
 800e0bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e0c0:	3a01      	subs	r2, #1
 800e0c2:	f803 4b01 	strb.w	r4, [r3], #1
 800e0c6:	2c00      	cmp	r4, #0
 800e0c8:	d1f7      	bne.n	800e0ba <strncpy+0x6>
 800e0ca:	2100      	movs	r1, #0
 800e0cc:	441a      	add	r2, r3
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	d100      	bne.n	800e0d4 <strncpy+0x20>
 800e0d2:	bd10      	pop	{r4, pc}
 800e0d4:	f803 1b01 	strb.w	r1, [r3], #1
 800e0d8:	e7f9      	b.n	800e0ce <strncpy+0x1a>
	...

0800e0dc <strtok>:
 800e0dc:	4b16      	ldr	r3, [pc, #88]	@ (800e138 <strtok+0x5c>)
 800e0de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0e2:	681f      	ldr	r7, [r3, #0]
 800e0e4:	4605      	mov	r5, r0
 800e0e6:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800e0e8:	460e      	mov	r6, r1
 800e0ea:	b9ec      	cbnz	r4, 800e128 <strtok+0x4c>
 800e0ec:	2050      	movs	r0, #80	@ 0x50
 800e0ee:	f7fe fa8d 	bl	800c60c <malloc>
 800e0f2:	4602      	mov	r2, r0
 800e0f4:	6478      	str	r0, [r7, #68]	@ 0x44
 800e0f6:	b920      	cbnz	r0, 800e102 <strtok+0x26>
 800e0f8:	215b      	movs	r1, #91	@ 0x5b
 800e0fa:	4b10      	ldr	r3, [pc, #64]	@ (800e13c <strtok+0x60>)
 800e0fc:	4810      	ldr	r0, [pc, #64]	@ (800e140 <strtok+0x64>)
 800e0fe:	f000 fecf 	bl	800eea0 <__assert_func>
 800e102:	e9c0 4400 	strd	r4, r4, [r0]
 800e106:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e10a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e10e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800e112:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800e116:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800e11a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800e11e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800e122:	6184      	str	r4, [r0, #24]
 800e124:	7704      	strb	r4, [r0, #28]
 800e126:	6244      	str	r4, [r0, #36]	@ 0x24
 800e128:	4631      	mov	r1, r6
 800e12a:	4628      	mov	r0, r5
 800e12c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e12e:	2301      	movs	r3, #1
 800e130:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e134:	f000 b806 	b.w	800e144 <__strtok_r>
 800e138:	2000026c 	.word	0x2000026c
 800e13c:	08012383 	.word	0x08012383
 800e140:	0801239a 	.word	0x0801239a

0800e144 <__strtok_r>:
 800e144:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e146:	4604      	mov	r4, r0
 800e148:	b908      	cbnz	r0, 800e14e <__strtok_r+0xa>
 800e14a:	6814      	ldr	r4, [r2, #0]
 800e14c:	b144      	cbz	r4, 800e160 <__strtok_r+0x1c>
 800e14e:	460f      	mov	r7, r1
 800e150:	4620      	mov	r0, r4
 800e152:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e156:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e15a:	b91e      	cbnz	r6, 800e164 <__strtok_r+0x20>
 800e15c:	b965      	cbnz	r5, 800e178 <__strtok_r+0x34>
 800e15e:	6015      	str	r5, [r2, #0]
 800e160:	2000      	movs	r0, #0
 800e162:	e005      	b.n	800e170 <__strtok_r+0x2c>
 800e164:	42b5      	cmp	r5, r6
 800e166:	d1f6      	bne.n	800e156 <__strtok_r+0x12>
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d1f0      	bne.n	800e14e <__strtok_r+0xa>
 800e16c:	6014      	str	r4, [r2, #0]
 800e16e:	7003      	strb	r3, [r0, #0]
 800e170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e172:	461c      	mov	r4, r3
 800e174:	e00c      	b.n	800e190 <__strtok_r+0x4c>
 800e176:	b915      	cbnz	r5, 800e17e <__strtok_r+0x3a>
 800e178:	460e      	mov	r6, r1
 800e17a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e17e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e182:	42ab      	cmp	r3, r5
 800e184:	d1f7      	bne.n	800e176 <__strtok_r+0x32>
 800e186:	2b00      	cmp	r3, #0
 800e188:	d0f3      	beq.n	800e172 <__strtok_r+0x2e>
 800e18a:	2300      	movs	r3, #0
 800e18c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e190:	6014      	str	r4, [r2, #0]
 800e192:	e7ed      	b.n	800e170 <__strtok_r+0x2c>

0800e194 <strstr>:
 800e194:	780a      	ldrb	r2, [r1, #0]
 800e196:	b570      	push	{r4, r5, r6, lr}
 800e198:	b96a      	cbnz	r2, 800e1b6 <strstr+0x22>
 800e19a:	bd70      	pop	{r4, r5, r6, pc}
 800e19c:	429a      	cmp	r2, r3
 800e19e:	d109      	bne.n	800e1b4 <strstr+0x20>
 800e1a0:	460c      	mov	r4, r1
 800e1a2:	4605      	mov	r5, r0
 800e1a4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d0f6      	beq.n	800e19a <strstr+0x6>
 800e1ac:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800e1b0:	429e      	cmp	r6, r3
 800e1b2:	d0f7      	beq.n	800e1a4 <strstr+0x10>
 800e1b4:	3001      	adds	r0, #1
 800e1b6:	7803      	ldrb	r3, [r0, #0]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d1ef      	bne.n	800e19c <strstr+0x8>
 800e1bc:	4618      	mov	r0, r3
 800e1be:	e7ec      	b.n	800e19a <strstr+0x6>

0800e1c0 <validate_structure>:
 800e1c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e1c2:	6801      	ldr	r1, [r0, #0]
 800e1c4:	4604      	mov	r4, r0
 800e1c6:	293b      	cmp	r1, #59	@ 0x3b
 800e1c8:	d911      	bls.n	800e1ee <validate_structure+0x2e>
 800e1ca:	223c      	movs	r2, #60	@ 0x3c
 800e1cc:	4668      	mov	r0, sp
 800e1ce:	f000 fe85 	bl	800eedc <div>
 800e1d2:	9a01      	ldr	r2, [sp, #4]
 800e1d4:	6863      	ldr	r3, [r4, #4]
 800e1d6:	9900      	ldr	r1, [sp, #0]
 800e1d8:	2a00      	cmp	r2, #0
 800e1da:	440b      	add	r3, r1
 800e1dc:	6063      	str	r3, [r4, #4]
 800e1de:	bfbb      	ittet	lt
 800e1e0:	323c      	addlt	r2, #60	@ 0x3c
 800e1e2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800e1e6:	6022      	strge	r2, [r4, #0]
 800e1e8:	6022      	strlt	r2, [r4, #0]
 800e1ea:	bfb8      	it	lt
 800e1ec:	6063      	strlt	r3, [r4, #4]
 800e1ee:	6861      	ldr	r1, [r4, #4]
 800e1f0:	293b      	cmp	r1, #59	@ 0x3b
 800e1f2:	d911      	bls.n	800e218 <validate_structure+0x58>
 800e1f4:	223c      	movs	r2, #60	@ 0x3c
 800e1f6:	4668      	mov	r0, sp
 800e1f8:	f000 fe70 	bl	800eedc <div>
 800e1fc:	9a01      	ldr	r2, [sp, #4]
 800e1fe:	68a3      	ldr	r3, [r4, #8]
 800e200:	9900      	ldr	r1, [sp, #0]
 800e202:	2a00      	cmp	r2, #0
 800e204:	440b      	add	r3, r1
 800e206:	60a3      	str	r3, [r4, #8]
 800e208:	bfbb      	ittet	lt
 800e20a:	323c      	addlt	r2, #60	@ 0x3c
 800e20c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800e210:	6062      	strge	r2, [r4, #4]
 800e212:	6062      	strlt	r2, [r4, #4]
 800e214:	bfb8      	it	lt
 800e216:	60a3      	strlt	r3, [r4, #8]
 800e218:	68a1      	ldr	r1, [r4, #8]
 800e21a:	2917      	cmp	r1, #23
 800e21c:	d911      	bls.n	800e242 <validate_structure+0x82>
 800e21e:	2218      	movs	r2, #24
 800e220:	4668      	mov	r0, sp
 800e222:	f000 fe5b 	bl	800eedc <div>
 800e226:	9a01      	ldr	r2, [sp, #4]
 800e228:	68e3      	ldr	r3, [r4, #12]
 800e22a:	9900      	ldr	r1, [sp, #0]
 800e22c:	2a00      	cmp	r2, #0
 800e22e:	440b      	add	r3, r1
 800e230:	60e3      	str	r3, [r4, #12]
 800e232:	bfbb      	ittet	lt
 800e234:	3218      	addlt	r2, #24
 800e236:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800e23a:	60a2      	strge	r2, [r4, #8]
 800e23c:	60a2      	strlt	r2, [r4, #8]
 800e23e:	bfb8      	it	lt
 800e240:	60e3      	strlt	r3, [r4, #12]
 800e242:	6921      	ldr	r1, [r4, #16]
 800e244:	290b      	cmp	r1, #11
 800e246:	d911      	bls.n	800e26c <validate_structure+0xac>
 800e248:	220c      	movs	r2, #12
 800e24a:	4668      	mov	r0, sp
 800e24c:	f000 fe46 	bl	800eedc <div>
 800e250:	9a01      	ldr	r2, [sp, #4]
 800e252:	6963      	ldr	r3, [r4, #20]
 800e254:	9900      	ldr	r1, [sp, #0]
 800e256:	2a00      	cmp	r2, #0
 800e258:	440b      	add	r3, r1
 800e25a:	6163      	str	r3, [r4, #20]
 800e25c:	bfbb      	ittet	lt
 800e25e:	320c      	addlt	r2, #12
 800e260:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800e264:	6122      	strge	r2, [r4, #16]
 800e266:	6122      	strlt	r2, [r4, #16]
 800e268:	bfb8      	it	lt
 800e26a:	6163      	strlt	r3, [r4, #20]
 800e26c:	6963      	ldr	r3, [r4, #20]
 800e26e:	079a      	lsls	r2, r3, #30
 800e270:	d11c      	bne.n	800e2ac <validate_structure+0xec>
 800e272:	2164      	movs	r1, #100	@ 0x64
 800e274:	fb93 f2f1 	sdiv	r2, r3, r1
 800e278:	fb01 3212 	mls	r2, r1, r2, r3
 800e27c:	b9c2      	cbnz	r2, 800e2b0 <validate_structure+0xf0>
 800e27e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800e282:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 800e286:	fb93 f1f2 	sdiv	r1, r3, r2
 800e28a:	fb02 3311 	mls	r3, r2, r1, r3
 800e28e:	2b00      	cmp	r3, #0
 800e290:	bf14      	ite	ne
 800e292:	231c      	movne	r3, #28
 800e294:	231d      	moveq	r3, #29
 800e296:	68e2      	ldr	r2, [r4, #12]
 800e298:	2a00      	cmp	r2, #0
 800e29a:	dc0b      	bgt.n	800e2b4 <validate_structure+0xf4>
 800e29c:	200b      	movs	r0, #11
 800e29e:	2164      	movs	r1, #100	@ 0x64
 800e2a0:	4d30      	ldr	r5, [pc, #192]	@ (800e364 <validate_structure+0x1a4>)
 800e2a2:	68e6      	ldr	r6, [r4, #12]
 800e2a4:	2e00      	cmp	r6, #0
 800e2a6:	dd30      	ble.n	800e30a <validate_structure+0x14a>
 800e2a8:	b003      	add	sp, #12
 800e2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2ac:	231c      	movs	r3, #28
 800e2ae:	e7f2      	b.n	800e296 <validate_structure+0xd6>
 800e2b0:	231d      	movs	r3, #29
 800e2b2:	e7f0      	b.n	800e296 <validate_structure+0xd6>
 800e2b4:	4d2b      	ldr	r5, [pc, #172]	@ (800e364 <validate_structure+0x1a4>)
 800e2b6:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800e2ba:	2a01      	cmp	r2, #1
 800e2bc:	bf0c      	ite	eq
 800e2be:	4618      	moveq	r0, r3
 800e2c0:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 800e2c4:	4281      	cmp	r1, r0
 800e2c6:	ddef      	ble.n	800e2a8 <validate_structure+0xe8>
 800e2c8:	3201      	adds	r2, #1
 800e2ca:	1a09      	subs	r1, r1, r0
 800e2cc:	2a0c      	cmp	r2, #12
 800e2ce:	60e1      	str	r1, [r4, #12]
 800e2d0:	6122      	str	r2, [r4, #16]
 800e2d2:	d1f0      	bne.n	800e2b6 <validate_structure+0xf6>
 800e2d4:	2100      	movs	r1, #0
 800e2d6:	6963      	ldr	r3, [r4, #20]
 800e2d8:	6121      	str	r1, [r4, #16]
 800e2da:	1c5a      	adds	r2, r3, #1
 800e2dc:	0791      	lsls	r1, r2, #30
 800e2de:	6162      	str	r2, [r4, #20]
 800e2e0:	d13c      	bne.n	800e35c <validate_structure+0x19c>
 800e2e2:	2164      	movs	r1, #100	@ 0x64
 800e2e4:	fb92 f0f1 	sdiv	r0, r2, r1
 800e2e8:	fb01 2210 	mls	r2, r1, r0, r2
 800e2ec:	2a00      	cmp	r2, #0
 800e2ee:	d137      	bne.n	800e360 <validate_structure+0x1a0>
 800e2f0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800e2f4:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 800e2f8:	fb93 f1f2 	sdiv	r1, r3, r2
 800e2fc:	fb02 3311 	mls	r3, r2, r1, r3
 800e300:	2b00      	cmp	r3, #0
 800e302:	bf14      	ite	ne
 800e304:	231c      	movne	r3, #28
 800e306:	231d      	moveq	r3, #29
 800e308:	e7d5      	b.n	800e2b6 <validate_structure+0xf6>
 800e30a:	6922      	ldr	r2, [r4, #16]
 800e30c:	3a01      	subs	r2, #1
 800e30e:	6122      	str	r2, [r4, #16]
 800e310:	3201      	adds	r2, #1
 800e312:	d116      	bne.n	800e342 <validate_structure+0x182>
 800e314:	6963      	ldr	r3, [r4, #20]
 800e316:	1e5a      	subs	r2, r3, #1
 800e318:	0797      	lsls	r7, r2, #30
 800e31a:	e9c4 0204 	strd	r0, r2, [r4, #16]
 800e31e:	d119      	bne.n	800e354 <validate_structure+0x194>
 800e320:	fb92 f7f1 	sdiv	r7, r2, r1
 800e324:	fb01 2217 	mls	r2, r1, r7, r2
 800e328:	b9b2      	cbnz	r2, 800e358 <validate_structure+0x198>
 800e32a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800e32e:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800e332:	fb93 f7f2 	sdiv	r7, r3, r2
 800e336:	fb02 3317 	mls	r3, r2, r7, r3
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	bf14      	ite	ne
 800e33e:	231c      	movne	r3, #28
 800e340:	231d      	moveq	r3, #29
 800e342:	6922      	ldr	r2, [r4, #16]
 800e344:	2a01      	cmp	r2, #1
 800e346:	bf0c      	ite	eq
 800e348:	461a      	moveq	r2, r3
 800e34a:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 800e34e:	4432      	add	r2, r6
 800e350:	60e2      	str	r2, [r4, #12]
 800e352:	e7a6      	b.n	800e2a2 <validate_structure+0xe2>
 800e354:	231c      	movs	r3, #28
 800e356:	e7f4      	b.n	800e342 <validate_structure+0x182>
 800e358:	231d      	movs	r3, #29
 800e35a:	e7f2      	b.n	800e342 <validate_structure+0x182>
 800e35c:	231c      	movs	r3, #28
 800e35e:	e7aa      	b.n	800e2b6 <validate_structure+0xf6>
 800e360:	231d      	movs	r3, #29
 800e362:	e7a8      	b.n	800e2b6 <validate_structure+0xf6>
 800e364:	08012424 	.word	0x08012424

0800e368 <mktime>:
 800e368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e36c:	b085      	sub	sp, #20
 800e36e:	4607      	mov	r7, r0
 800e370:	f003 f93c 	bl	80115ec <__gettzinfo>
 800e374:	4681      	mov	r9, r0
 800e376:	4638      	mov	r0, r7
 800e378:	f7ff ff22 	bl	800e1c0 <validate_structure>
 800e37c:	e9d7 4300 	ldrd	r4, r3, [r7]
 800e380:	223c      	movs	r2, #60	@ 0x3c
 800e382:	fb02 4403 	mla	r4, r2, r3, r4
 800e386:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	697d      	ldr	r5, [r7, #20]
 800e38e:	fb02 4403 	mla	r4, r2, r3, r4
 800e392:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 800e396:	4ac1      	ldr	r2, [pc, #772]	@ (800e69c <mktime+0x334>)
 800e398:	3e01      	subs	r6, #1
 800e39a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e39e:	2b01      	cmp	r3, #1
 800e3a0:	4416      	add	r6, r2
 800e3a2:	dd11      	ble.n	800e3c8 <mktime+0x60>
 800e3a4:	07a9      	lsls	r1, r5, #30
 800e3a6:	d10f      	bne.n	800e3c8 <mktime+0x60>
 800e3a8:	2264      	movs	r2, #100	@ 0x64
 800e3aa:	fb95 f3f2 	sdiv	r3, r5, r2
 800e3ae:	fb02 5313 	mls	r3, r2, r3, r5
 800e3b2:	b943      	cbnz	r3, 800e3c6 <mktime+0x5e>
 800e3b4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800e3b8:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800e3bc:	fb93 f1f2 	sdiv	r1, r3, r2
 800e3c0:	fb02 3311 	mls	r3, r2, r1, r3
 800e3c4:	b903      	cbnz	r3, 800e3c8 <mktime+0x60>
 800e3c6:	3601      	adds	r6, #1
 800e3c8:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800e3cc:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 800e3d0:	3310      	adds	r3, #16
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	61fe      	str	r6, [r7, #28]
 800e3d6:	f200 8167 	bhi.w	800e6a8 <mktime+0x340>
 800e3da:	2d46      	cmp	r5, #70	@ 0x46
 800e3dc:	f340 808e 	ble.w	800e4fc <mktime+0x194>
 800e3e0:	2346      	movs	r3, #70	@ 0x46
 800e3e2:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800e3e6:	2164      	movs	r1, #100	@ 0x64
 800e3e8:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800e3ec:	079a      	lsls	r2, r3, #30
 800e3ee:	d17f      	bne.n	800e4f0 <mktime+0x188>
 800e3f0:	fb93 f2f1 	sdiv	r2, r3, r1
 800e3f4:	fb01 3212 	mls	r2, r1, r2, r3
 800e3f8:	2a00      	cmp	r2, #0
 800e3fa:	d17c      	bne.n	800e4f6 <mktime+0x18e>
 800e3fc:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800e400:	fb92 fef0 	sdiv	lr, r2, r0
 800e404:	fb00 221e 	mls	r2, r0, lr, r2
 800e408:	2a00      	cmp	r2, #0
 800e40a:	bf14      	ite	ne
 800e40c:	4662      	movne	r2, ip
 800e40e:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800e412:	3301      	adds	r3, #1
 800e414:	429d      	cmp	r5, r3
 800e416:	4416      	add	r6, r2
 800e418:	d1e8      	bne.n	800e3ec <mktime+0x84>
 800e41a:	4ba1      	ldr	r3, [pc, #644]	@ (800e6a0 <mktime+0x338>)
 800e41c:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800e420:	fbc6 4803 	smlal	r4, r8, r6, r3
 800e424:	f000 f9f8 	bl	800e818 <__tz_lock>
 800e428:	f000 fa02 	bl	800e830 <_tzset_unlocked>
 800e42c:	4b9d      	ldr	r3, [pc, #628]	@ (800e6a4 <mktime+0x33c>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	2b00      	cmp	r3, #0
 800e432:	f000 8140 	beq.w	800e6b6 <mktime+0x34e>
 800e436:	f8d7 a020 	ldr.w	sl, [r7, #32]
 800e43a:	6978      	ldr	r0, [r7, #20]
 800e43c:	4653      	mov	r3, sl
 800e43e:	2b01      	cmp	r3, #1
 800e440:	bfa8      	it	ge
 800e442:	2301      	movge	r3, #1
 800e444:	9301      	str	r3, [sp, #4]
 800e446:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e44a:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 800e44e:	4283      	cmp	r3, r0
 800e450:	f040 8096 	bne.w	800e580 <mktime+0x218>
 800e454:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 800e458:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 800e45c:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 800e460:	1a13      	subs	r3, r2, r0
 800e462:	9303      	str	r3, [sp, #12]
 800e464:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 800e468:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 800e46c:	9302      	str	r3, [sp, #8]
 800e46e:	9a02      	ldr	r2, [sp, #8]
 800e470:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800e474:	ebb2 0e03 	subs.w	lr, r2, r3
 800e478:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800e47c:	4574      	cmp	r4, lr
 800e47e:	eb78 0201 	sbcs.w	r2, r8, r1
 800e482:	f280 8085 	bge.w	800e590 <mktime+0x228>
 800e486:	f8d9 2000 	ldr.w	r2, [r9]
 800e48a:	2a00      	cmp	r2, #0
 800e48c:	f000 808d 	beq.w	800e5aa <mktime+0x242>
 800e490:	9a03      	ldr	r2, [sp, #12]
 800e492:	4294      	cmp	r4, r2
 800e494:	eb78 020b 	sbcs.w	r2, r8, fp
 800e498:	f2c0 810a 	blt.w	800e6b0 <mktime+0x348>
 800e49c:	4574      	cmp	r4, lr
 800e49e:	eb78 0101 	sbcs.w	r1, r8, r1
 800e4a2:	bfb4      	ite	lt
 800e4a4:	f04f 0b01 	movlt.w	fp, #1
 800e4a8:	f04f 0b00 	movge.w	fp, #0
 800e4ac:	f1ba 0f00 	cmp.w	sl, #0
 800e4b0:	f280 8087 	bge.w	800e5c2 <mktime+0x25a>
 800e4b4:	f1bb 0f01 	cmp.w	fp, #1
 800e4b8:	f040 80ff 	bne.w	800e6ba <mktime+0x352>
 800e4bc:	f04f 0b01 	mov.w	fp, #1
 800e4c0:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 800e4c4:	191c      	adds	r4, r3, r4
 800e4c6:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800e4ca:	f000 f9ab 	bl	800e824 <__tz_unlock>
 800e4ce:	2307      	movs	r3, #7
 800e4d0:	3604      	adds	r6, #4
 800e4d2:	fb96 f3f3 	sdiv	r3, r6, r3
 800e4d6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800e4da:	1af6      	subs	r6, r6, r3
 800e4dc:	f100 80db 	bmi.w	800e696 <mktime+0x32e>
 800e4e0:	f8c7 b020 	str.w	fp, [r7, #32]
 800e4e4:	61be      	str	r6, [r7, #24]
 800e4e6:	4620      	mov	r0, r4
 800e4e8:	4641      	mov	r1, r8
 800e4ea:	b005      	add	sp, #20
 800e4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4f0:	f240 126d 	movw	r2, #365	@ 0x16d
 800e4f4:	e78d      	b.n	800e412 <mktime+0xaa>
 800e4f6:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800e4fa:	e78a      	b.n	800e412 <mktime+0xaa>
 800e4fc:	d08d      	beq.n	800e41a <mktime+0xb2>
 800e4fe:	2345      	movs	r3, #69	@ 0x45
 800e500:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800e504:	2164      	movs	r1, #100	@ 0x64
 800e506:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800e50a:	e012      	b.n	800e532 <mktime+0x1ca>
 800e50c:	bb62      	cbnz	r2, 800e568 <mktime+0x200>
 800e50e:	fb93 f2f1 	sdiv	r2, r3, r1
 800e512:	fb01 3212 	mls	r2, r1, r2, r3
 800e516:	bb52      	cbnz	r2, 800e56e <mktime+0x206>
 800e518:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800e51c:	fb92 fef0 	sdiv	lr, r2, r0
 800e520:	fb00 221e 	mls	r2, r0, lr, r2
 800e524:	2a00      	cmp	r2, #0
 800e526:	bf14      	ite	ne
 800e528:	4662      	movne	r2, ip
 800e52a:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800e52e:	1ab6      	subs	r6, r6, r2
 800e530:	3b01      	subs	r3, #1
 800e532:	429d      	cmp	r5, r3
 800e534:	f003 0203 	and.w	r2, r3, #3
 800e538:	dbe8      	blt.n	800e50c <mktime+0x1a4>
 800e53a:	b9da      	cbnz	r2, 800e574 <mktime+0x20c>
 800e53c:	2264      	movs	r2, #100	@ 0x64
 800e53e:	fb95 f3f2 	sdiv	r3, r5, r2
 800e542:	fb02 5313 	mls	r3, r2, r3, r5
 800e546:	b9c3      	cbnz	r3, 800e57a <mktime+0x212>
 800e548:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800e54c:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800e550:	fb93 f1f2 	sdiv	r1, r3, r2
 800e554:	fb02 3311 	mls	r3, r2, r1, r3
 800e558:	2b00      	cmp	r3, #0
 800e55a:	f240 136d 	movw	r3, #365	@ 0x16d
 800e55e:	bf08      	it	eq
 800e560:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 800e564:	1af6      	subs	r6, r6, r3
 800e566:	e758      	b.n	800e41a <mktime+0xb2>
 800e568:	f240 126d 	movw	r2, #365	@ 0x16d
 800e56c:	e7df      	b.n	800e52e <mktime+0x1c6>
 800e56e:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800e572:	e7dc      	b.n	800e52e <mktime+0x1c6>
 800e574:	f240 136d 	movw	r3, #365	@ 0x16d
 800e578:	e7f4      	b.n	800e564 <mktime+0x1fc>
 800e57a:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 800e57e:	e7f1      	b.n	800e564 <mktime+0x1fc>
 800e580:	f000 f8a2 	bl	800e6c8 <__tzcalc_limits>
 800e584:	2800      	cmp	r0, #0
 800e586:	f47f af65 	bne.w	800e454 <mktime+0xec>
 800e58a:	f8dd b004 	ldr.w	fp, [sp, #4]
 800e58e:	e791      	b.n	800e4b4 <mktime+0x14c>
 800e590:	9a02      	ldr	r2, [sp, #8]
 800e592:	1a12      	subs	r2, r2, r0
 800e594:	9202      	str	r2, [sp, #8]
 800e596:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800e59a:	eb6c 0c02 	sbc.w	ip, ip, r2
 800e59e:	9a02      	ldr	r2, [sp, #8]
 800e5a0:	4294      	cmp	r4, r2
 800e5a2:	eb78 0c0c 	sbcs.w	ip, r8, ip
 800e5a6:	dbf0      	blt.n	800e58a <mktime+0x222>
 800e5a8:	e76d      	b.n	800e486 <mktime+0x11e>
 800e5aa:	9a03      	ldr	r2, [sp, #12]
 800e5ac:	4294      	cmp	r4, r2
 800e5ae:	eb78 020b 	sbcs.w	r2, r8, fp
 800e5b2:	f6ff af73 	blt.w	800e49c <mktime+0x134>
 800e5b6:	f1ba 0f00 	cmp.w	sl, #0
 800e5ba:	f6ff af7f 	blt.w	800e4bc <mktime+0x154>
 800e5be:	f04f 0b01 	mov.w	fp, #1
 800e5c2:	9a01      	ldr	r2, [sp, #4]
 800e5c4:	ea82 020b 	eor.w	r2, r2, fp
 800e5c8:	2a01      	cmp	r2, #1
 800e5ca:	f47f af73 	bne.w	800e4b4 <mktime+0x14c>
 800e5ce:	f1bb 0f00 	cmp.w	fp, #0
 800e5d2:	d035      	beq.n	800e640 <mktime+0x2d8>
 800e5d4:	1a1b      	subs	r3, r3, r0
 800e5d6:	683a      	ldr	r2, [r7, #0]
 800e5d8:	191c      	adds	r4, r3, r4
 800e5da:	441a      	add	r2, r3
 800e5dc:	603a      	str	r2, [r7, #0]
 800e5de:	4638      	mov	r0, r7
 800e5e0:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800e5e4:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800e5e8:	f7ff fdea 	bl	800e1c0 <validate_structure>
 800e5ec:	68fa      	ldr	r2, [r7, #12]
 800e5ee:	ebb2 020a 	subs.w	r2, r2, sl
 800e5f2:	f43f af5f 	beq.w	800e4b4 <mktime+0x14c>
 800e5f6:	2a01      	cmp	r2, #1
 800e5f8:	dc24      	bgt.n	800e644 <mktime+0x2dc>
 800e5fa:	1c93      	adds	r3, r2, #2
 800e5fc:	bfd8      	it	le
 800e5fe:	2201      	movle	r2, #1
 800e600:	69fb      	ldr	r3, [r7, #28]
 800e602:	18d3      	adds	r3, r2, r3
 800e604:	d527      	bpl.n	800e656 <mktime+0x2ee>
 800e606:	1e6b      	subs	r3, r5, #1
 800e608:	0798      	lsls	r0, r3, #30
 800e60a:	d11e      	bne.n	800e64a <mktime+0x2e2>
 800e60c:	2164      	movs	r1, #100	@ 0x64
 800e60e:	fb93 f0f1 	sdiv	r0, r3, r1
 800e612:	fb01 3310 	mls	r3, r1, r0, r3
 800e616:	b9db      	cbnz	r3, 800e650 <mktime+0x2e8>
 800e618:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800e61c:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 800e620:	fb95 f1f3 	sdiv	r1, r5, r3
 800e624:	fb03 5511 	mls	r5, r3, r1, r5
 800e628:	2d00      	cmp	r5, #0
 800e62a:	f240 136d 	movw	r3, #365	@ 0x16d
 800e62e:	bf18      	it	ne
 800e630:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 800e634:	61fb      	str	r3, [r7, #28]
 800e636:	4416      	add	r6, r2
 800e638:	e73c      	b.n	800e4b4 <mktime+0x14c>
 800e63a:	f04f 0b00 	mov.w	fp, #0
 800e63e:	e7c0      	b.n	800e5c2 <mktime+0x25a>
 800e640:	1ac3      	subs	r3, r0, r3
 800e642:	e7c8      	b.n	800e5d6 <mktime+0x26e>
 800e644:	f04f 32ff 	mov.w	r2, #4294967295
 800e648:	e7da      	b.n	800e600 <mktime+0x298>
 800e64a:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 800e64e:	e7f1      	b.n	800e634 <mktime+0x2cc>
 800e650:	f240 136d 	movw	r3, #365	@ 0x16d
 800e654:	e7ee      	b.n	800e634 <mktime+0x2cc>
 800e656:	07a9      	lsls	r1, r5, #30
 800e658:	d117      	bne.n	800e68a <mktime+0x322>
 800e65a:	2064      	movs	r0, #100	@ 0x64
 800e65c:	fb95 f1f0 	sdiv	r1, r5, r0
 800e660:	fb00 5111 	mls	r1, r0, r1, r5
 800e664:	b9a1      	cbnz	r1, 800e690 <mktime+0x328>
 800e666:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800e66a:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800e66e:	fb95 f0f1 	sdiv	r0, r5, r1
 800e672:	fb01 5510 	mls	r5, r1, r0, r5
 800e676:	2d00      	cmp	r5, #0
 800e678:	f240 116d 	movw	r1, #365	@ 0x16d
 800e67c:	bf08      	it	eq
 800e67e:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 800e682:	428b      	cmp	r3, r1
 800e684:	bfa8      	it	ge
 800e686:	1a5b      	subge	r3, r3, r1
 800e688:	e7d4      	b.n	800e634 <mktime+0x2cc>
 800e68a:	f240 116d 	movw	r1, #365	@ 0x16d
 800e68e:	e7f8      	b.n	800e682 <mktime+0x31a>
 800e690:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 800e694:	e7f5      	b.n	800e682 <mktime+0x31a>
 800e696:	3607      	adds	r6, #7
 800e698:	e722      	b.n	800e4e0 <mktime+0x178>
 800e69a:	bf00      	nop
 800e69c:	080123f4 	.word	0x080123f4
 800e6a0:	00015180 	.word	0x00015180
 800e6a4:	20005b68 	.word	0x20005b68
 800e6a8:	f04f 34ff 	mov.w	r4, #4294967295
 800e6ac:	46a0      	mov	r8, r4
 800e6ae:	e71a      	b.n	800e4e6 <mktime+0x17e>
 800e6b0:	f1ba 0f00 	cmp.w	sl, #0
 800e6b4:	dac1      	bge.n	800e63a <mktime+0x2d2>
 800e6b6:	f04f 0b00 	mov.w	fp, #0
 800e6ba:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800e6be:	191c      	adds	r4, r3, r4
 800e6c0:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800e6c4:	e701      	b.n	800e4ca <mktime+0x162>
 800e6c6:	bf00      	nop

0800e6c8 <__tzcalc_limits>:
 800e6c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6cc:	4604      	mov	r4, r0
 800e6ce:	f002 ff8d 	bl	80115ec <__gettzinfo>
 800e6d2:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800e6d6:	429c      	cmp	r4, r3
 800e6d8:	f340 8098 	ble.w	800e80c <__tzcalc_limits+0x144>
 800e6dc:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 800e6e0:	f240 126d 	movw	r2, #365	@ 0x16d
 800e6e4:	19e5      	adds	r5, r4, r7
 800e6e6:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800e6ea:	10ad      	asrs	r5, r5, #2
 800e6ec:	fb02 5503 	mla	r5, r2, r3, r5
 800e6f0:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800e6f4:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 800e6f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e6fc:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 800e700:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800e704:	441d      	add	r5, r3
 800e706:	eb04 030c 	add.w	r3, r4, ip
 800e70a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e70e:	4601      	mov	r1, r0
 800e710:	4f3f      	ldr	r7, [pc, #252]	@ (800e810 <__tzcalc_limits+0x148>)
 800e712:	6044      	str	r4, [r0, #4]
 800e714:	441d      	add	r5, r3
 800e716:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 800e71a:	7a0b      	ldrb	r3, [r1, #8]
 800e71c:	694a      	ldr	r2, [r1, #20]
 800e71e:	2b4a      	cmp	r3, #74	@ 0x4a
 800e720:	d133      	bne.n	800e78a <__tzcalc_limits+0xc2>
 800e722:	07a6      	lsls	r6, r4, #30
 800e724:	eb05 0302 	add.w	r3, r5, r2
 800e728:	d106      	bne.n	800e738 <__tzcalc_limits+0x70>
 800e72a:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800e72e:	fb94 f6fe 	sdiv	r6, r4, lr
 800e732:	fb0e 4616 	mls	r6, lr, r6, r4
 800e736:	b936      	cbnz	r6, 800e746 <__tzcalc_limits+0x7e>
 800e738:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 800e73c:	fb94 f6fe 	sdiv	r6, r4, lr
 800e740:	fb0e 4616 	mls	r6, lr, r6, r4
 800e744:	b9fe      	cbnz	r6, 800e786 <__tzcalc_limits+0xbe>
 800e746:	2a3b      	cmp	r2, #59	@ 0x3b
 800e748:	bfd4      	ite	le
 800e74a:	2200      	movle	r2, #0
 800e74c:	2201      	movgt	r2, #1
 800e74e:	4413      	add	r3, r2
 800e750:	3b01      	subs	r3, #1
 800e752:	698a      	ldr	r2, [r1, #24]
 800e754:	17d6      	asrs	r6, r2, #31
 800e756:	fbc3 2607 	smlal	r2, r6, r3, r7
 800e75a:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800e75c:	18d2      	adds	r2, r2, r3
 800e75e:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 800e762:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800e766:	3128      	adds	r1, #40	@ 0x28
 800e768:	458c      	cmp	ip, r1
 800e76a:	d1d6      	bne.n	800e71a <__tzcalc_limits+0x52>
 800e76c:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800e770:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 800e774:	428c      	cmp	r4, r1
 800e776:	4193      	sbcs	r3, r2
 800e778:	bfb4      	ite	lt
 800e77a:	2301      	movlt	r3, #1
 800e77c:	2300      	movge	r3, #0
 800e77e:	6003      	str	r3, [r0, #0]
 800e780:	2001      	movs	r0, #1
 800e782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e786:	2200      	movs	r2, #0
 800e788:	e7e1      	b.n	800e74e <__tzcalc_limits+0x86>
 800e78a:	2b44      	cmp	r3, #68	@ 0x44
 800e78c:	d101      	bne.n	800e792 <__tzcalc_limits+0xca>
 800e78e:	18ab      	adds	r3, r5, r2
 800e790:	e7df      	b.n	800e752 <__tzcalc_limits+0x8a>
 800e792:	07a3      	lsls	r3, r4, #30
 800e794:	d105      	bne.n	800e7a2 <__tzcalc_limits+0xda>
 800e796:	2664      	movs	r6, #100	@ 0x64
 800e798:	fb94 f3f6 	sdiv	r3, r4, r6
 800e79c:	fb06 4313 	mls	r3, r6, r3, r4
 800e7a0:	bb73      	cbnz	r3, 800e800 <__tzcalc_limits+0x138>
 800e7a2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800e7a6:	fb94 f6f3 	sdiv	r6, r4, r3
 800e7aa:	fb03 4616 	mls	r6, r3, r6, r4
 800e7ae:	fab6 f686 	clz	r6, r6
 800e7b2:	0976      	lsrs	r6, r6, #5
 800e7b4:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 800e7b8:	462b      	mov	r3, r5
 800e7ba:	f04f 0800 	mov.w	r8, #0
 800e7be:	f8df e054 	ldr.w	lr, [pc, #84]	@ 800e814 <__tzcalc_limits+0x14c>
 800e7c2:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800e7c6:	fb0a e606 	mla	r6, sl, r6, lr
 800e7ca:	f108 0801 	add.w	r8, r8, #1
 800e7ce:	45c1      	cmp	r9, r8
 800e7d0:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 800e7d4:	dc16      	bgt.n	800e804 <__tzcalc_limits+0x13c>
 800e7d6:	2607      	movs	r6, #7
 800e7d8:	f103 0804 	add.w	r8, r3, #4
 800e7dc:	fb98 f6f6 	sdiv	r6, r8, r6
 800e7e0:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800e7e4:	eba8 0606 	sub.w	r6, r8, r6
 800e7e8:	1b92      	subs	r2, r2, r6
 800e7ea:	690e      	ldr	r6, [r1, #16]
 800e7ec:	bf48      	it	mi
 800e7ee:	3207      	addmi	r2, #7
 800e7f0:	3e01      	subs	r6, #1
 800e7f2:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800e7f6:	4432      	add	r2, r6
 800e7f8:	4572      	cmp	r2, lr
 800e7fa:	da05      	bge.n	800e808 <__tzcalc_limits+0x140>
 800e7fc:	4413      	add	r3, r2
 800e7fe:	e7a8      	b.n	800e752 <__tzcalc_limits+0x8a>
 800e800:	2601      	movs	r6, #1
 800e802:	e7d7      	b.n	800e7b4 <__tzcalc_limits+0xec>
 800e804:	4473      	add	r3, lr
 800e806:	e7e0      	b.n	800e7ca <__tzcalc_limits+0x102>
 800e808:	3a07      	subs	r2, #7
 800e80a:	e7f5      	b.n	800e7f8 <__tzcalc_limits+0x130>
 800e80c:	2000      	movs	r0, #0
 800e80e:	e7b8      	b.n	800e782 <__tzcalc_limits+0xba>
 800e810:	00015180 	.word	0x00015180
 800e814:	08012728 	.word	0x08012728

0800e818 <__tz_lock>:
 800e818:	4801      	ldr	r0, [pc, #4]	@ (800e820 <__tz_lock+0x8>)
 800e81a:	f000 bb0e 	b.w	800ee3a <__retarget_lock_acquire>
 800e81e:	bf00      	nop
 800e820:	20005b70 	.word	0x20005b70

0800e824 <__tz_unlock>:
 800e824:	4801      	ldr	r0, [pc, #4]	@ (800e82c <__tz_unlock+0x8>)
 800e826:	f000 bb0a 	b.w	800ee3e <__retarget_lock_release>
 800e82a:	bf00      	nop
 800e82c:	20005b70 	.word	0x20005b70

0800e830 <_tzset_unlocked>:
 800e830:	4b01      	ldr	r3, [pc, #4]	@ (800e838 <_tzset_unlocked+0x8>)
 800e832:	6818      	ldr	r0, [r3, #0]
 800e834:	f000 b802 	b.w	800e83c <_tzset_unlocked_r>
 800e838:	2000026c 	.word	0x2000026c

0800e83c <_tzset_unlocked_r>:
 800e83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e840:	b08d      	sub	sp, #52	@ 0x34
 800e842:	4607      	mov	r7, r0
 800e844:	f002 fed2 	bl	80115ec <__gettzinfo>
 800e848:	496d      	ldr	r1, [pc, #436]	@ (800ea00 <_tzset_unlocked_r+0x1c4>)
 800e84a:	4604      	mov	r4, r0
 800e84c:	4638      	mov	r0, r7
 800e84e:	f001 fd5d 	bl	801030c <_getenv_r>
 800e852:	4d6c      	ldr	r5, [pc, #432]	@ (800ea04 <_tzset_unlocked_r+0x1c8>)
 800e854:	4606      	mov	r6, r0
 800e856:	bb10      	cbnz	r0, 800e89e <_tzset_unlocked_r+0x62>
 800e858:	4b6b      	ldr	r3, [pc, #428]	@ (800ea08 <_tzset_unlocked_r+0x1cc>)
 800e85a:	4a6c      	ldr	r2, [pc, #432]	@ (800ea0c <_tzset_unlocked_r+0x1d0>)
 800e85c:	6018      	str	r0, [r3, #0]
 800e85e:	4b6c      	ldr	r3, [pc, #432]	@ (800ea10 <_tzset_unlocked_r+0x1d4>)
 800e860:	214a      	movs	r1, #74	@ 0x4a
 800e862:	6018      	str	r0, [r3, #0]
 800e864:	4b6b      	ldr	r3, [pc, #428]	@ (800ea14 <_tzset_unlocked_r+0x1d8>)
 800e866:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800e86a:	e9c3 2200 	strd	r2, r2, [r3]
 800e86e:	2200      	movs	r2, #0
 800e870:	2300      	movs	r3, #0
 800e872:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800e876:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800e87a:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800e87e:	62a0      	str	r0, [r4, #40]	@ 0x28
 800e880:	6520      	str	r0, [r4, #80]	@ 0x50
 800e882:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800e886:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800e88a:	6828      	ldr	r0, [r5, #0]
 800e88c:	7221      	strb	r1, [r4, #8]
 800e88e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800e892:	f7fd fec3 	bl	800c61c <free>
 800e896:	602e      	str	r6, [r5, #0]
 800e898:	b00d      	add	sp, #52	@ 0x34
 800e89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e89e:	6829      	ldr	r1, [r5, #0]
 800e8a0:	2900      	cmp	r1, #0
 800e8a2:	f040 808e 	bne.w	800e9c2 <_tzset_unlocked_r+0x186>
 800e8a6:	6828      	ldr	r0, [r5, #0]
 800e8a8:	f7fd feb8 	bl	800c61c <free>
 800e8ac:	4630      	mov	r0, r6
 800e8ae:	f7f1 fcc9 	bl	8000244 <strlen>
 800e8b2:	1c41      	adds	r1, r0, #1
 800e8b4:	4638      	mov	r0, r7
 800e8b6:	f7fd fedb 	bl	800c670 <_malloc_r>
 800e8ba:	6028      	str	r0, [r5, #0]
 800e8bc:	2800      	cmp	r0, #0
 800e8be:	f040 8086 	bne.w	800e9ce <_tzset_unlocked_r+0x192>
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	4a52      	ldr	r2, [pc, #328]	@ (800ea10 <_tzset_unlocked_r+0x1d4>)
 800e8c6:	2000      	movs	r0, #0
 800e8c8:	6013      	str	r3, [r2, #0]
 800e8ca:	2100      	movs	r1, #0
 800e8cc:	4a52      	ldr	r2, [pc, #328]	@ (800ea18 <_tzset_unlocked_r+0x1dc>)
 800e8ce:	f8df 8144 	ldr.w	r8, [pc, #324]	@ 800ea14 <_tzset_unlocked_r+0x1d8>
 800e8d2:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800e8d6:	e9c8 2200 	strd	r2, r2, [r8]
 800e8da:	224a      	movs	r2, #74	@ 0x4a
 800e8dc:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800e8e0:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800e8e4:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800e8e8:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800e8ec:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 800e8f0:	f8df a114 	ldr.w	sl, [pc, #276]	@ 800ea08 <_tzset_unlocked_r+0x1cc>
 800e8f4:	7222      	strb	r2, [r4, #8]
 800e8f6:	f8ca 3000 	str.w	r3, [sl]
 800e8fa:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e8fc:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800e900:	6523      	str	r3, [r4, #80]	@ 0x50
 800e902:	7833      	ldrb	r3, [r6, #0]
 800e904:	2b3a      	cmp	r3, #58	@ 0x3a
 800e906:	bf08      	it	eq
 800e908:	3601      	addeq	r6, #1
 800e90a:	7833      	ldrb	r3, [r6, #0]
 800e90c:	2b3c      	cmp	r3, #60	@ 0x3c
 800e90e:	d162      	bne.n	800e9d6 <_tzset_unlocked_r+0x19a>
 800e910:	1c75      	adds	r5, r6, #1
 800e912:	4628      	mov	r0, r5
 800e914:	4a41      	ldr	r2, [pc, #260]	@ (800ea1c <_tzset_unlocked_r+0x1e0>)
 800e916:	4942      	ldr	r1, [pc, #264]	@ (800ea20 <_tzset_unlocked_r+0x1e4>)
 800e918:	ab0a      	add	r3, sp, #40	@ 0x28
 800e91a:	f002 fd8f 	bl	801143c <siscanf>
 800e91e:	2800      	cmp	r0, #0
 800e920:	ddba      	ble.n	800e898 <_tzset_unlocked_r+0x5c>
 800e922:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e924:	1eda      	subs	r2, r3, #3
 800e926:	2a07      	cmp	r2, #7
 800e928:	d8b6      	bhi.n	800e898 <_tzset_unlocked_r+0x5c>
 800e92a:	5ceb      	ldrb	r3, [r5, r3]
 800e92c:	2b3e      	cmp	r3, #62	@ 0x3e
 800e92e:	d1b3      	bne.n	800e898 <_tzset_unlocked_r+0x5c>
 800e930:	3602      	adds	r6, #2
 800e932:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e934:	18f5      	adds	r5, r6, r3
 800e936:	5cf3      	ldrb	r3, [r6, r3]
 800e938:	2b2d      	cmp	r3, #45	@ 0x2d
 800e93a:	d15a      	bne.n	800e9f2 <_tzset_unlocked_r+0x1b6>
 800e93c:	f04f 39ff 	mov.w	r9, #4294967295
 800e940:	3501      	adds	r5, #1
 800e942:	2300      	movs	r3, #0
 800e944:	af08      	add	r7, sp, #32
 800e946:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e94a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e94e:	ab0a      	add	r3, sp, #40	@ 0x28
 800e950:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800e954:	9303      	str	r3, [sp, #12]
 800e956:	f10d 031e 	add.w	r3, sp, #30
 800e95a:	9300      	str	r3, [sp, #0]
 800e95c:	4628      	mov	r0, r5
 800e95e:	4931      	ldr	r1, [pc, #196]	@ (800ea24 <_tzset_unlocked_r+0x1e8>)
 800e960:	ab0a      	add	r3, sp, #40	@ 0x28
 800e962:	aa07      	add	r2, sp, #28
 800e964:	f002 fd6a 	bl	801143c <siscanf>
 800e968:	2800      	cmp	r0, #0
 800e96a:	dd95      	ble.n	800e898 <_tzset_unlocked_r+0x5c>
 800e96c:	223c      	movs	r2, #60	@ 0x3c
 800e96e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800e972:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800e976:	fb02 6603 	mla	r6, r2, r3, r6
 800e97a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800e97e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800e982:	fb02 6603 	mla	r6, r2, r3, r6
 800e986:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e988:	fb09 f606 	mul.w	r6, r9, r6
 800e98c:	eb05 0903 	add.w	r9, r5, r3
 800e990:	5ceb      	ldrb	r3, [r5, r3]
 800e992:	2b3c      	cmp	r3, #60	@ 0x3c
 800e994:	f040 80e8 	bne.w	800eb68 <_tzset_unlocked_r+0x32c>
 800e998:	f109 0501 	add.w	r5, r9, #1
 800e99c:	4628      	mov	r0, r5
 800e99e:	4a22      	ldr	r2, [pc, #136]	@ (800ea28 <_tzset_unlocked_r+0x1ec>)
 800e9a0:	491f      	ldr	r1, [pc, #124]	@ (800ea20 <_tzset_unlocked_r+0x1e4>)
 800e9a2:	ab0a      	add	r3, sp, #40	@ 0x28
 800e9a4:	f002 fd4a 	bl	801143c <siscanf>
 800e9a8:	2800      	cmp	r0, #0
 800e9aa:	dc41      	bgt.n	800ea30 <_tzset_unlocked_r+0x1f4>
 800e9ac:	f899 3001 	ldrb.w	r3, [r9, #1]
 800e9b0:	2b3e      	cmp	r3, #62	@ 0x3e
 800e9b2:	d13d      	bne.n	800ea30 <_tzset_unlocked_r+0x1f4>
 800e9b4:	4b19      	ldr	r3, [pc, #100]	@ (800ea1c <_tzset_unlocked_r+0x1e0>)
 800e9b6:	62a6      	str	r6, [r4, #40]	@ 0x28
 800e9b8:	e9c8 3300 	strd	r3, r3, [r8]
 800e9bc:	f8ca 6000 	str.w	r6, [sl]
 800e9c0:	e76a      	b.n	800e898 <_tzset_unlocked_r+0x5c>
 800e9c2:	f7f1 fc35 	bl	8000230 <strcmp>
 800e9c6:	2800      	cmp	r0, #0
 800e9c8:	f47f af6d 	bne.w	800e8a6 <_tzset_unlocked_r+0x6a>
 800e9cc:	e764      	b.n	800e898 <_tzset_unlocked_r+0x5c>
 800e9ce:	4631      	mov	r1, r6
 800e9d0:	f000 fa37 	bl	800ee42 <strcpy>
 800e9d4:	e775      	b.n	800e8c2 <_tzset_unlocked_r+0x86>
 800e9d6:	4630      	mov	r0, r6
 800e9d8:	4a10      	ldr	r2, [pc, #64]	@ (800ea1c <_tzset_unlocked_r+0x1e0>)
 800e9da:	4914      	ldr	r1, [pc, #80]	@ (800ea2c <_tzset_unlocked_r+0x1f0>)
 800e9dc:	ab0a      	add	r3, sp, #40	@ 0x28
 800e9de:	f002 fd2d 	bl	801143c <siscanf>
 800e9e2:	2800      	cmp	r0, #0
 800e9e4:	f77f af58 	ble.w	800e898 <_tzset_unlocked_r+0x5c>
 800e9e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9ea:	3b03      	subs	r3, #3
 800e9ec:	2b07      	cmp	r3, #7
 800e9ee:	d9a0      	bls.n	800e932 <_tzset_unlocked_r+0xf6>
 800e9f0:	e752      	b.n	800e898 <_tzset_unlocked_r+0x5c>
 800e9f2:	2b2b      	cmp	r3, #43	@ 0x2b
 800e9f4:	f04f 0901 	mov.w	r9, #1
 800e9f8:	bf08      	it	eq
 800e9fa:	3501      	addeq	r5, #1
 800e9fc:	e7a1      	b.n	800e942 <_tzset_unlocked_r+0x106>
 800e9fe:	bf00      	nop
 800ea00:	08012454 	.word	0x08012454
 800ea04:	20005b48 	.word	0x20005b48
 800ea08:	20005b64 	.word	0x20005b64
 800ea0c:	08012457 	.word	0x08012457
 800ea10:	20005b68 	.word	0x20005b68
 800ea14:	200000f8 	.word	0x200000f8
 800ea18:	080124e5 	.word	0x080124e5
 800ea1c:	20005b58 	.word	0x20005b58
 800ea20:	0801245b 	.word	0x0801245b
 800ea24:	08012490 	.word	0x08012490
 800ea28:	20005b4c 	.word	0x20005b4c
 800ea2c:	0801246e 	.word	0x0801246e
 800ea30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea32:	1eda      	subs	r2, r3, #3
 800ea34:	2a07      	cmp	r2, #7
 800ea36:	f63f af2f 	bhi.w	800e898 <_tzset_unlocked_r+0x5c>
 800ea3a:	5ceb      	ldrb	r3, [r5, r3]
 800ea3c:	2b3e      	cmp	r3, #62	@ 0x3e
 800ea3e:	f47f af2b 	bne.w	800e898 <_tzset_unlocked_r+0x5c>
 800ea42:	f109 0902 	add.w	r9, r9, #2
 800ea46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea48:	eb09 0503 	add.w	r5, r9, r3
 800ea4c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800ea50:	2b2d      	cmp	r3, #45	@ 0x2d
 800ea52:	f040 8098 	bne.w	800eb86 <_tzset_unlocked_r+0x34a>
 800ea56:	f04f 39ff 	mov.w	r9, #4294967295
 800ea5a:	3501      	adds	r5, #1
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ea62:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ea66:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ea6a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea6c:	ab0a      	add	r3, sp, #40	@ 0x28
 800ea6e:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800ea72:	9301      	str	r3, [sp, #4]
 800ea74:	f10d 031e 	add.w	r3, sp, #30
 800ea78:	9300      	str	r3, [sp, #0]
 800ea7a:	4628      	mov	r0, r5
 800ea7c:	497a      	ldr	r1, [pc, #488]	@ (800ec68 <_tzset_unlocked_r+0x42c>)
 800ea7e:	ab0a      	add	r3, sp, #40	@ 0x28
 800ea80:	aa07      	add	r2, sp, #28
 800ea82:	f002 fcdb 	bl	801143c <siscanf>
 800ea86:	2800      	cmp	r0, #0
 800ea88:	f300 8083 	bgt.w	800eb92 <_tzset_unlocked_r+0x356>
 800ea8c:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800ea90:	4627      	mov	r7, r4
 800ea92:	f04f 0b00 	mov.w	fp, #0
 800ea96:	9304      	str	r3, [sp, #16]
 800ea98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea9a:	441d      	add	r5, r3
 800ea9c:	782b      	ldrb	r3, [r5, #0]
 800ea9e:	2b2c      	cmp	r3, #44	@ 0x2c
 800eaa0:	bf08      	it	eq
 800eaa2:	3501      	addeq	r5, #1
 800eaa4:	f895 9000 	ldrb.w	r9, [r5]
 800eaa8:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800eaac:	f040 8084 	bne.w	800ebb8 <_tzset_unlocked_r+0x37c>
 800eab0:	ab0a      	add	r3, sp, #40	@ 0x28
 800eab2:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800eab6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800eaba:	aa09      	add	r2, sp, #36	@ 0x24
 800eabc:	9200      	str	r2, [sp, #0]
 800eabe:	4628      	mov	r0, r5
 800eac0:	496a      	ldr	r1, [pc, #424]	@ (800ec6c <_tzset_unlocked_r+0x430>)
 800eac2:	9303      	str	r3, [sp, #12]
 800eac4:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800eac8:	f002 fcb8 	bl	801143c <siscanf>
 800eacc:	2803      	cmp	r0, #3
 800eace:	f47f aee3 	bne.w	800e898 <_tzset_unlocked_r+0x5c>
 800ead2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800ead6:	1e4b      	subs	r3, r1, #1
 800ead8:	2b0b      	cmp	r3, #11
 800eada:	f63f aedd 	bhi.w	800e898 <_tzset_unlocked_r+0x5c>
 800eade:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800eae2:	1e53      	subs	r3, r2, #1
 800eae4:	2b04      	cmp	r3, #4
 800eae6:	f63f aed7 	bhi.w	800e898 <_tzset_unlocked_r+0x5c>
 800eaea:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800eaee:	2b06      	cmp	r3, #6
 800eaf0:	f63f aed2 	bhi.w	800e898 <_tzset_unlocked_r+0x5c>
 800eaf4:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800eaf8:	f887 9008 	strb.w	r9, [r7, #8]
 800eafc:	617b      	str	r3, [r7, #20]
 800eafe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb00:	eb05 0903 	add.w	r9, r5, r3
 800eb04:	2500      	movs	r5, #0
 800eb06:	f04f 0302 	mov.w	r3, #2
 800eb0a:	f8ad 501e 	strh.w	r5, [sp, #30]
 800eb0e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800eb12:	f8ad 5020 	strh.w	r5, [sp, #32]
 800eb16:	950a      	str	r5, [sp, #40]	@ 0x28
 800eb18:	f899 3000 	ldrb.w	r3, [r9]
 800eb1c:	2b2f      	cmp	r3, #47	@ 0x2f
 800eb1e:	d177      	bne.n	800ec10 <_tzset_unlocked_r+0x3d4>
 800eb20:	ab0a      	add	r3, sp, #40	@ 0x28
 800eb22:	aa08      	add	r2, sp, #32
 800eb24:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800eb28:	f10d 021e 	add.w	r2, sp, #30
 800eb2c:	9200      	str	r2, [sp, #0]
 800eb2e:	4648      	mov	r0, r9
 800eb30:	494f      	ldr	r1, [pc, #316]	@ (800ec70 <_tzset_unlocked_r+0x434>)
 800eb32:	9303      	str	r3, [sp, #12]
 800eb34:	aa07      	add	r2, sp, #28
 800eb36:	f002 fc81 	bl	801143c <siscanf>
 800eb3a:	42a8      	cmp	r0, r5
 800eb3c:	dc68      	bgt.n	800ec10 <_tzset_unlocked_r+0x3d4>
 800eb3e:	214a      	movs	r1, #74	@ 0x4a
 800eb40:	2200      	movs	r2, #0
 800eb42:	2300      	movs	r3, #0
 800eb44:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800eb48:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800eb4c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800eb50:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800eb54:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800eb58:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800eb5c:	7221      	strb	r1, [r4, #8]
 800eb5e:	62a5      	str	r5, [r4, #40]	@ 0x28
 800eb60:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800eb64:	6525      	str	r5, [r4, #80]	@ 0x50
 800eb66:	e697      	b.n	800e898 <_tzset_unlocked_r+0x5c>
 800eb68:	4648      	mov	r0, r9
 800eb6a:	4a42      	ldr	r2, [pc, #264]	@ (800ec74 <_tzset_unlocked_r+0x438>)
 800eb6c:	4942      	ldr	r1, [pc, #264]	@ (800ec78 <_tzset_unlocked_r+0x43c>)
 800eb6e:	ab0a      	add	r3, sp, #40	@ 0x28
 800eb70:	f002 fc64 	bl	801143c <siscanf>
 800eb74:	2800      	cmp	r0, #0
 800eb76:	f77f af1d 	ble.w	800e9b4 <_tzset_unlocked_r+0x178>
 800eb7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb7c:	3b03      	subs	r3, #3
 800eb7e:	2b07      	cmp	r3, #7
 800eb80:	f67f af61 	bls.w	800ea46 <_tzset_unlocked_r+0x20a>
 800eb84:	e688      	b.n	800e898 <_tzset_unlocked_r+0x5c>
 800eb86:	2b2b      	cmp	r3, #43	@ 0x2b
 800eb88:	f04f 0901 	mov.w	r9, #1
 800eb8c:	bf08      	it	eq
 800eb8e:	3501      	addeq	r5, #1
 800eb90:	e764      	b.n	800ea5c <_tzset_unlocked_r+0x220>
 800eb92:	213c      	movs	r1, #60	@ 0x3c
 800eb94:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800eb98:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800eb9c:	fb01 3302 	mla	r3, r1, r2, r3
 800eba0:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800eba4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800eba8:	fb01 3302 	mla	r3, r1, r2, r3
 800ebac:	fb09 f303 	mul.w	r3, r9, r3
 800ebb0:	e76e      	b.n	800ea90 <_tzset_unlocked_r+0x254>
 800ebb2:	f04f 0b01 	mov.w	fp, #1
 800ebb6:	e771      	b.n	800ea9c <_tzset_unlocked_r+0x260>
 800ebb8:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 800ebbc:	bf0a      	itet	eq
 800ebbe:	464b      	moveq	r3, r9
 800ebc0:	2344      	movne	r3, #68	@ 0x44
 800ebc2:	3501      	addeq	r5, #1
 800ebc4:	220a      	movs	r2, #10
 800ebc6:	4628      	mov	r0, r5
 800ebc8:	a90b      	add	r1, sp, #44	@ 0x2c
 800ebca:	9305      	str	r3, [sp, #20]
 800ebcc:	f002 f8ce 	bl	8010d6c <strtoul>
 800ebd0:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800ebd4:	9b05      	ldr	r3, [sp, #20]
 800ebd6:	45a9      	cmp	r9, r5
 800ebd8:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800ebdc:	d114      	bne.n	800ec08 <_tzset_unlocked_r+0x3cc>
 800ebde:	234d      	movs	r3, #77	@ 0x4d
 800ebe0:	f1bb 0f00 	cmp.w	fp, #0
 800ebe4:	d107      	bne.n	800ebf6 <_tzset_unlocked_r+0x3ba>
 800ebe6:	2103      	movs	r1, #3
 800ebe8:	7223      	strb	r3, [r4, #8]
 800ebea:	2302      	movs	r3, #2
 800ebec:	f8c4 b014 	str.w	fp, [r4, #20]
 800ebf0:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800ebf4:	e786      	b.n	800eb04 <_tzset_unlocked_r+0x2c8>
 800ebf6:	220b      	movs	r2, #11
 800ebf8:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800ec02:	2300      	movs	r3, #0
 800ec04:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800ec06:	e77d      	b.n	800eb04 <_tzset_unlocked_r+0x2c8>
 800ec08:	b280      	uxth	r0, r0
 800ec0a:	723b      	strb	r3, [r7, #8]
 800ec0c:	6178      	str	r0, [r7, #20]
 800ec0e:	e779      	b.n	800eb04 <_tzset_unlocked_r+0x2c8>
 800ec10:	213c      	movs	r1, #60	@ 0x3c
 800ec12:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800ec16:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ec1a:	3728      	adds	r7, #40	@ 0x28
 800ec1c:	fb01 3302 	mla	r3, r1, r2, r3
 800ec20:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800ec24:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800ec28:	fb01 3302 	mla	r3, r1, r2, r3
 800ec2c:	f847 3c10 	str.w	r3, [r7, #-16]
 800ec30:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800ec32:	444d      	add	r5, r9
 800ec34:	f1bb 0f00 	cmp.w	fp, #0
 800ec38:	d0bb      	beq.n	800ebb2 <_tzset_unlocked_r+0x376>
 800ec3a:	9b04      	ldr	r3, [sp, #16]
 800ec3c:	6860      	ldr	r0, [r4, #4]
 800ec3e:	6523      	str	r3, [r4, #80]	@ 0x50
 800ec40:	4b0e      	ldr	r3, [pc, #56]	@ (800ec7c <_tzset_unlocked_r+0x440>)
 800ec42:	62a6      	str	r6, [r4, #40]	@ 0x28
 800ec44:	f8c8 3000 	str.w	r3, [r8]
 800ec48:	4b0a      	ldr	r3, [pc, #40]	@ (800ec74 <_tzset_unlocked_r+0x438>)
 800ec4a:	f8c8 3004 	str.w	r3, [r8, #4]
 800ec4e:	f7ff fd3b 	bl	800e6c8 <__tzcalc_limits>
 800ec52:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ec54:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800ec56:	f8ca 2000 	str.w	r2, [sl]
 800ec5a:	1a9b      	subs	r3, r3, r2
 800ec5c:	bf18      	it	ne
 800ec5e:	2301      	movne	r3, #1
 800ec60:	4a07      	ldr	r2, [pc, #28]	@ (800ec80 <_tzset_unlocked_r+0x444>)
 800ec62:	6013      	str	r3, [r2, #0]
 800ec64:	e618      	b.n	800e898 <_tzset_unlocked_r+0x5c>
 800ec66:	bf00      	nop
 800ec68:	08012490 	.word	0x08012490
 800ec6c:	0801247c 	.word	0x0801247c
 800ec70:	0801248f 	.word	0x0801248f
 800ec74:	20005b4c 	.word	0x20005b4c
 800ec78:	0801246e 	.word	0x0801246e
 800ec7c:	20005b58 	.word	0x20005b58
 800ec80:	20005b68 	.word	0x20005b68

0800ec84 <_localeconv_r>:
 800ec84:	4800      	ldr	r0, [pc, #0]	@ (800ec88 <_localeconv_r+0x4>)
 800ec86:	4770      	bx	lr
 800ec88:	200001f0 	.word	0x200001f0

0800ec8c <_close_r>:
 800ec8c:	b538      	push	{r3, r4, r5, lr}
 800ec8e:	2300      	movs	r3, #0
 800ec90:	4d05      	ldr	r5, [pc, #20]	@ (800eca8 <_close_r+0x1c>)
 800ec92:	4604      	mov	r4, r0
 800ec94:	4608      	mov	r0, r1
 800ec96:	602b      	str	r3, [r5, #0]
 800ec98:	f7f5 facc 	bl	8004234 <_close>
 800ec9c:	1c43      	adds	r3, r0, #1
 800ec9e:	d102      	bne.n	800eca6 <_close_r+0x1a>
 800eca0:	682b      	ldr	r3, [r5, #0]
 800eca2:	b103      	cbz	r3, 800eca6 <_close_r+0x1a>
 800eca4:	6023      	str	r3, [r4, #0]
 800eca6:	bd38      	pop	{r3, r4, r5, pc}
 800eca8:	20005b6c 	.word	0x20005b6c

0800ecac <_reclaim_reent>:
 800ecac:	4b29      	ldr	r3, [pc, #164]	@ (800ed54 <_reclaim_reent+0xa8>)
 800ecae:	b570      	push	{r4, r5, r6, lr}
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	4604      	mov	r4, r0
 800ecb4:	4283      	cmp	r3, r0
 800ecb6:	d04b      	beq.n	800ed50 <_reclaim_reent+0xa4>
 800ecb8:	69c3      	ldr	r3, [r0, #28]
 800ecba:	b1ab      	cbz	r3, 800ece8 <_reclaim_reent+0x3c>
 800ecbc:	68db      	ldr	r3, [r3, #12]
 800ecbe:	b16b      	cbz	r3, 800ecdc <_reclaim_reent+0x30>
 800ecc0:	2500      	movs	r5, #0
 800ecc2:	69e3      	ldr	r3, [r4, #28]
 800ecc4:	68db      	ldr	r3, [r3, #12]
 800ecc6:	5959      	ldr	r1, [r3, r5]
 800ecc8:	2900      	cmp	r1, #0
 800ecca:	d13b      	bne.n	800ed44 <_reclaim_reent+0x98>
 800eccc:	3504      	adds	r5, #4
 800ecce:	2d80      	cmp	r5, #128	@ 0x80
 800ecd0:	d1f7      	bne.n	800ecc2 <_reclaim_reent+0x16>
 800ecd2:	69e3      	ldr	r3, [r4, #28]
 800ecd4:	4620      	mov	r0, r4
 800ecd6:	68d9      	ldr	r1, [r3, #12]
 800ecd8:	f000 ff5a 	bl	800fb90 <_free_r>
 800ecdc:	69e3      	ldr	r3, [r4, #28]
 800ecde:	6819      	ldr	r1, [r3, #0]
 800ece0:	b111      	cbz	r1, 800ece8 <_reclaim_reent+0x3c>
 800ece2:	4620      	mov	r0, r4
 800ece4:	f000 ff54 	bl	800fb90 <_free_r>
 800ece8:	6961      	ldr	r1, [r4, #20]
 800ecea:	b111      	cbz	r1, 800ecf2 <_reclaim_reent+0x46>
 800ecec:	4620      	mov	r0, r4
 800ecee:	f000 ff4f 	bl	800fb90 <_free_r>
 800ecf2:	69e1      	ldr	r1, [r4, #28]
 800ecf4:	b111      	cbz	r1, 800ecfc <_reclaim_reent+0x50>
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	f000 ff4a 	bl	800fb90 <_free_r>
 800ecfc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ecfe:	b111      	cbz	r1, 800ed06 <_reclaim_reent+0x5a>
 800ed00:	4620      	mov	r0, r4
 800ed02:	f000 ff45 	bl	800fb90 <_free_r>
 800ed06:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ed08:	b111      	cbz	r1, 800ed10 <_reclaim_reent+0x64>
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	f000 ff40 	bl	800fb90 <_free_r>
 800ed10:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ed12:	b111      	cbz	r1, 800ed1a <_reclaim_reent+0x6e>
 800ed14:	4620      	mov	r0, r4
 800ed16:	f000 ff3b 	bl	800fb90 <_free_r>
 800ed1a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ed1c:	b111      	cbz	r1, 800ed24 <_reclaim_reent+0x78>
 800ed1e:	4620      	mov	r0, r4
 800ed20:	f000 ff36 	bl	800fb90 <_free_r>
 800ed24:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ed26:	b111      	cbz	r1, 800ed2e <_reclaim_reent+0x82>
 800ed28:	4620      	mov	r0, r4
 800ed2a:	f000 ff31 	bl	800fb90 <_free_r>
 800ed2e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ed30:	b111      	cbz	r1, 800ed38 <_reclaim_reent+0x8c>
 800ed32:	4620      	mov	r0, r4
 800ed34:	f000 ff2c 	bl	800fb90 <_free_r>
 800ed38:	6a23      	ldr	r3, [r4, #32]
 800ed3a:	b14b      	cbz	r3, 800ed50 <_reclaim_reent+0xa4>
 800ed3c:	4620      	mov	r0, r4
 800ed3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ed42:	4718      	bx	r3
 800ed44:	680e      	ldr	r6, [r1, #0]
 800ed46:	4620      	mov	r0, r4
 800ed48:	f000 ff22 	bl	800fb90 <_free_r>
 800ed4c:	4631      	mov	r1, r6
 800ed4e:	e7bb      	b.n	800ecc8 <_reclaim_reent+0x1c>
 800ed50:	bd70      	pop	{r4, r5, r6, pc}
 800ed52:	bf00      	nop
 800ed54:	2000026c 	.word	0x2000026c

0800ed58 <_lseek_r>:
 800ed58:	b538      	push	{r3, r4, r5, lr}
 800ed5a:	4604      	mov	r4, r0
 800ed5c:	4608      	mov	r0, r1
 800ed5e:	4611      	mov	r1, r2
 800ed60:	2200      	movs	r2, #0
 800ed62:	4d05      	ldr	r5, [pc, #20]	@ (800ed78 <_lseek_r+0x20>)
 800ed64:	602a      	str	r2, [r5, #0]
 800ed66:	461a      	mov	r2, r3
 800ed68:	f7f5 fa88 	bl	800427c <_lseek>
 800ed6c:	1c43      	adds	r3, r0, #1
 800ed6e:	d102      	bne.n	800ed76 <_lseek_r+0x1e>
 800ed70:	682b      	ldr	r3, [r5, #0]
 800ed72:	b103      	cbz	r3, 800ed76 <_lseek_r+0x1e>
 800ed74:	6023      	str	r3, [r4, #0]
 800ed76:	bd38      	pop	{r3, r4, r5, pc}
 800ed78:	20005b6c 	.word	0x20005b6c

0800ed7c <_read_r>:
 800ed7c:	b538      	push	{r3, r4, r5, lr}
 800ed7e:	4604      	mov	r4, r0
 800ed80:	4608      	mov	r0, r1
 800ed82:	4611      	mov	r1, r2
 800ed84:	2200      	movs	r2, #0
 800ed86:	4d05      	ldr	r5, [pc, #20]	@ (800ed9c <_read_r+0x20>)
 800ed88:	602a      	str	r2, [r5, #0]
 800ed8a:	461a      	mov	r2, r3
 800ed8c:	f7f2 fbe3 	bl	8001556 <_read>
 800ed90:	1c43      	adds	r3, r0, #1
 800ed92:	d102      	bne.n	800ed9a <_read_r+0x1e>
 800ed94:	682b      	ldr	r3, [r5, #0]
 800ed96:	b103      	cbz	r3, 800ed9a <_read_r+0x1e>
 800ed98:	6023      	str	r3, [r4, #0]
 800ed9a:	bd38      	pop	{r3, r4, r5, pc}
 800ed9c:	20005b6c 	.word	0x20005b6c

0800eda0 <_sbrk_r>:
 800eda0:	b538      	push	{r3, r4, r5, lr}
 800eda2:	2300      	movs	r3, #0
 800eda4:	4d05      	ldr	r5, [pc, #20]	@ (800edbc <_sbrk_r+0x1c>)
 800eda6:	4604      	mov	r4, r0
 800eda8:	4608      	mov	r0, r1
 800edaa:	602b      	str	r3, [r5, #0]
 800edac:	f7f5 fa72 	bl	8004294 <_sbrk>
 800edb0:	1c43      	adds	r3, r0, #1
 800edb2:	d102      	bne.n	800edba <_sbrk_r+0x1a>
 800edb4:	682b      	ldr	r3, [r5, #0]
 800edb6:	b103      	cbz	r3, 800edba <_sbrk_r+0x1a>
 800edb8:	6023      	str	r3, [r4, #0]
 800edba:	bd38      	pop	{r3, r4, r5, pc}
 800edbc:	20005b6c 	.word	0x20005b6c

0800edc0 <_write_r>:
 800edc0:	b538      	push	{r3, r4, r5, lr}
 800edc2:	4604      	mov	r4, r0
 800edc4:	4608      	mov	r0, r1
 800edc6:	4611      	mov	r1, r2
 800edc8:	2200      	movs	r2, #0
 800edca:	4d05      	ldr	r5, [pc, #20]	@ (800ede0 <_write_r+0x20>)
 800edcc:	602a      	str	r2, [r5, #0]
 800edce:	461a      	mov	r2, r3
 800edd0:	f7f2 fbde 	bl	8001590 <_write>
 800edd4:	1c43      	adds	r3, r0, #1
 800edd6:	d102      	bne.n	800edde <_write_r+0x1e>
 800edd8:	682b      	ldr	r3, [r5, #0]
 800edda:	b103      	cbz	r3, 800edde <_write_r+0x1e>
 800eddc:	6023      	str	r3, [r4, #0]
 800edde:	bd38      	pop	{r3, r4, r5, pc}
 800ede0:	20005b6c 	.word	0x20005b6c

0800ede4 <__errno>:
 800ede4:	4b01      	ldr	r3, [pc, #4]	@ (800edec <__errno+0x8>)
 800ede6:	6818      	ldr	r0, [r3, #0]
 800ede8:	4770      	bx	lr
 800edea:	bf00      	nop
 800edec:	2000026c 	.word	0x2000026c

0800edf0 <__libc_init_array>:
 800edf0:	b570      	push	{r4, r5, r6, lr}
 800edf2:	2600      	movs	r6, #0
 800edf4:	4d0c      	ldr	r5, [pc, #48]	@ (800ee28 <__libc_init_array+0x38>)
 800edf6:	4c0d      	ldr	r4, [pc, #52]	@ (800ee2c <__libc_init_array+0x3c>)
 800edf8:	1b64      	subs	r4, r4, r5
 800edfa:	10a4      	asrs	r4, r4, #2
 800edfc:	42a6      	cmp	r6, r4
 800edfe:	d109      	bne.n	800ee14 <__libc_init_array+0x24>
 800ee00:	f003 f8a4 	bl	8011f4c <_init>
 800ee04:	2600      	movs	r6, #0
 800ee06:	4d0a      	ldr	r5, [pc, #40]	@ (800ee30 <__libc_init_array+0x40>)
 800ee08:	4c0a      	ldr	r4, [pc, #40]	@ (800ee34 <__libc_init_array+0x44>)
 800ee0a:	1b64      	subs	r4, r4, r5
 800ee0c:	10a4      	asrs	r4, r4, #2
 800ee0e:	42a6      	cmp	r6, r4
 800ee10:	d105      	bne.n	800ee1e <__libc_init_array+0x2e>
 800ee12:	bd70      	pop	{r4, r5, r6, pc}
 800ee14:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee18:	4798      	blx	r3
 800ee1a:	3601      	adds	r6, #1
 800ee1c:	e7ee      	b.n	800edfc <__libc_init_array+0xc>
 800ee1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee22:	4798      	blx	r3
 800ee24:	3601      	adds	r6, #1
 800ee26:	e7f2      	b.n	800ee0e <__libc_init_array+0x1e>
 800ee28:	080127b0 	.word	0x080127b0
 800ee2c:	080127b0 	.word	0x080127b0
 800ee30:	080127b0 	.word	0x080127b0
 800ee34:	080127b4 	.word	0x080127b4

0800ee38 <__retarget_lock_init_recursive>:
 800ee38:	4770      	bx	lr

0800ee3a <__retarget_lock_acquire>:
 800ee3a:	4770      	bx	lr

0800ee3c <__retarget_lock_acquire_recursive>:
 800ee3c:	4770      	bx	lr

0800ee3e <__retarget_lock_release>:
 800ee3e:	4770      	bx	lr

0800ee40 <__retarget_lock_release_recursive>:
 800ee40:	4770      	bx	lr

0800ee42 <strcpy>:
 800ee42:	4603      	mov	r3, r0
 800ee44:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee48:	f803 2b01 	strb.w	r2, [r3], #1
 800ee4c:	2a00      	cmp	r2, #0
 800ee4e:	d1f9      	bne.n	800ee44 <strcpy+0x2>
 800ee50:	4770      	bx	lr

0800ee52 <memchr>:
 800ee52:	4603      	mov	r3, r0
 800ee54:	b510      	push	{r4, lr}
 800ee56:	b2c9      	uxtb	r1, r1
 800ee58:	4402      	add	r2, r0
 800ee5a:	4293      	cmp	r3, r2
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	d101      	bne.n	800ee64 <memchr+0x12>
 800ee60:	2000      	movs	r0, #0
 800ee62:	e003      	b.n	800ee6c <memchr+0x1a>
 800ee64:	7804      	ldrb	r4, [r0, #0]
 800ee66:	3301      	adds	r3, #1
 800ee68:	428c      	cmp	r4, r1
 800ee6a:	d1f6      	bne.n	800ee5a <memchr+0x8>
 800ee6c:	bd10      	pop	{r4, pc}

0800ee6e <memcpy>:
 800ee6e:	440a      	add	r2, r1
 800ee70:	4291      	cmp	r1, r2
 800ee72:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee76:	d100      	bne.n	800ee7a <memcpy+0xc>
 800ee78:	4770      	bx	lr
 800ee7a:	b510      	push	{r4, lr}
 800ee7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee80:	4291      	cmp	r1, r2
 800ee82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee86:	d1f9      	bne.n	800ee7c <memcpy+0xe>
 800ee88:	bd10      	pop	{r4, pc}
	...

0800ee8c <nan>:
 800ee8c:	2000      	movs	r0, #0
 800ee8e:	4901      	ldr	r1, [pc, #4]	@ (800ee94 <nan+0x8>)
 800ee90:	4770      	bx	lr
 800ee92:	bf00      	nop
 800ee94:	7ff80000 	.word	0x7ff80000

0800ee98 <nanf>:
 800ee98:	4800      	ldr	r0, [pc, #0]	@ (800ee9c <nanf+0x4>)
 800ee9a:	4770      	bx	lr
 800ee9c:	7fc00000 	.word	0x7fc00000

0800eea0 <__assert_func>:
 800eea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eea2:	4614      	mov	r4, r2
 800eea4:	461a      	mov	r2, r3
 800eea6:	4b09      	ldr	r3, [pc, #36]	@ (800eecc <__assert_func+0x2c>)
 800eea8:	4605      	mov	r5, r0
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	68d8      	ldr	r0, [r3, #12]
 800eeae:	b954      	cbnz	r4, 800eec6 <__assert_func+0x26>
 800eeb0:	4b07      	ldr	r3, [pc, #28]	@ (800eed0 <__assert_func+0x30>)
 800eeb2:	461c      	mov	r4, r3
 800eeb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eeb8:	9100      	str	r1, [sp, #0]
 800eeba:	462b      	mov	r3, r5
 800eebc:	4905      	ldr	r1, [pc, #20]	@ (800eed4 <__assert_func+0x34>)
 800eebe:	f002 faab 	bl	8011418 <fiprintf>
 800eec2:	f002 fb97 	bl	80115f4 <abort>
 800eec6:	4b04      	ldr	r3, [pc, #16]	@ (800eed8 <__assert_func+0x38>)
 800eec8:	e7f4      	b.n	800eeb4 <__assert_func+0x14>
 800eeca:	bf00      	nop
 800eecc:	2000026c 	.word	0x2000026c
 800eed0:	080124e5 	.word	0x080124e5
 800eed4:	080124b7 	.word	0x080124b7
 800eed8:	080124aa 	.word	0x080124aa

0800eedc <div>:
 800eedc:	b510      	push	{r4, lr}
 800eede:	fb91 f4f2 	sdiv	r4, r1, r2
 800eee2:	fb02 1114 	mls	r1, r2, r4, r1
 800eee6:	6004      	str	r4, [r0, #0]
 800eee8:	6041      	str	r1, [r0, #4]
 800eeea:	bd10      	pop	{r4, pc}

0800eeec <quorem>:
 800eeec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eef0:	6903      	ldr	r3, [r0, #16]
 800eef2:	690c      	ldr	r4, [r1, #16]
 800eef4:	4607      	mov	r7, r0
 800eef6:	42a3      	cmp	r3, r4
 800eef8:	db7e      	blt.n	800eff8 <quorem+0x10c>
 800eefa:	3c01      	subs	r4, #1
 800eefc:	00a3      	lsls	r3, r4, #2
 800eefe:	f100 0514 	add.w	r5, r0, #20
 800ef02:	f101 0814 	add.w	r8, r1, #20
 800ef06:	9300      	str	r3, [sp, #0]
 800ef08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef0c:	9301      	str	r3, [sp, #4]
 800ef0e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ef12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef16:	3301      	adds	r3, #1
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	fbb2 f6f3 	udiv	r6, r2, r3
 800ef1e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ef22:	d32e      	bcc.n	800ef82 <quorem+0x96>
 800ef24:	f04f 0a00 	mov.w	sl, #0
 800ef28:	46c4      	mov	ip, r8
 800ef2a:	46ae      	mov	lr, r5
 800ef2c:	46d3      	mov	fp, sl
 800ef2e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ef32:	b298      	uxth	r0, r3
 800ef34:	fb06 a000 	mla	r0, r6, r0, sl
 800ef38:	0c1b      	lsrs	r3, r3, #16
 800ef3a:	0c02      	lsrs	r2, r0, #16
 800ef3c:	fb06 2303 	mla	r3, r6, r3, r2
 800ef40:	f8de 2000 	ldr.w	r2, [lr]
 800ef44:	b280      	uxth	r0, r0
 800ef46:	b292      	uxth	r2, r2
 800ef48:	1a12      	subs	r2, r2, r0
 800ef4a:	445a      	add	r2, fp
 800ef4c:	f8de 0000 	ldr.w	r0, [lr]
 800ef50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ef54:	b29b      	uxth	r3, r3
 800ef56:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ef5a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ef5e:	b292      	uxth	r2, r2
 800ef60:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ef64:	45e1      	cmp	r9, ip
 800ef66:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ef6a:	f84e 2b04 	str.w	r2, [lr], #4
 800ef6e:	d2de      	bcs.n	800ef2e <quorem+0x42>
 800ef70:	9b00      	ldr	r3, [sp, #0]
 800ef72:	58eb      	ldr	r3, [r5, r3]
 800ef74:	b92b      	cbnz	r3, 800ef82 <quorem+0x96>
 800ef76:	9b01      	ldr	r3, [sp, #4]
 800ef78:	3b04      	subs	r3, #4
 800ef7a:	429d      	cmp	r5, r3
 800ef7c:	461a      	mov	r2, r3
 800ef7e:	d32f      	bcc.n	800efe0 <quorem+0xf4>
 800ef80:	613c      	str	r4, [r7, #16]
 800ef82:	4638      	mov	r0, r7
 800ef84:	f001 fc9e 	bl	80108c4 <__mcmp>
 800ef88:	2800      	cmp	r0, #0
 800ef8a:	db25      	blt.n	800efd8 <quorem+0xec>
 800ef8c:	4629      	mov	r1, r5
 800ef8e:	2000      	movs	r0, #0
 800ef90:	f858 2b04 	ldr.w	r2, [r8], #4
 800ef94:	f8d1 c000 	ldr.w	ip, [r1]
 800ef98:	fa1f fe82 	uxth.w	lr, r2
 800ef9c:	fa1f f38c 	uxth.w	r3, ip
 800efa0:	eba3 030e 	sub.w	r3, r3, lr
 800efa4:	4403      	add	r3, r0
 800efa6:	0c12      	lsrs	r2, r2, #16
 800efa8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800efac:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800efb0:	b29b      	uxth	r3, r3
 800efb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800efb6:	45c1      	cmp	r9, r8
 800efb8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800efbc:	f841 3b04 	str.w	r3, [r1], #4
 800efc0:	d2e6      	bcs.n	800ef90 <quorem+0xa4>
 800efc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800efc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800efca:	b922      	cbnz	r2, 800efd6 <quorem+0xea>
 800efcc:	3b04      	subs	r3, #4
 800efce:	429d      	cmp	r5, r3
 800efd0:	461a      	mov	r2, r3
 800efd2:	d30b      	bcc.n	800efec <quorem+0x100>
 800efd4:	613c      	str	r4, [r7, #16]
 800efd6:	3601      	adds	r6, #1
 800efd8:	4630      	mov	r0, r6
 800efda:	b003      	add	sp, #12
 800efdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efe0:	6812      	ldr	r2, [r2, #0]
 800efe2:	3b04      	subs	r3, #4
 800efe4:	2a00      	cmp	r2, #0
 800efe6:	d1cb      	bne.n	800ef80 <quorem+0x94>
 800efe8:	3c01      	subs	r4, #1
 800efea:	e7c6      	b.n	800ef7a <quorem+0x8e>
 800efec:	6812      	ldr	r2, [r2, #0]
 800efee:	3b04      	subs	r3, #4
 800eff0:	2a00      	cmp	r2, #0
 800eff2:	d1ef      	bne.n	800efd4 <quorem+0xe8>
 800eff4:	3c01      	subs	r4, #1
 800eff6:	e7ea      	b.n	800efce <quorem+0xe2>
 800eff8:	2000      	movs	r0, #0
 800effa:	e7ee      	b.n	800efda <quorem+0xee>
 800effc:	0000      	movs	r0, r0
	...

0800f000 <_dtoa_r>:
 800f000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f004:	4614      	mov	r4, r2
 800f006:	461d      	mov	r5, r3
 800f008:	69c7      	ldr	r7, [r0, #28]
 800f00a:	b097      	sub	sp, #92	@ 0x5c
 800f00c:	4683      	mov	fp, r0
 800f00e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800f012:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800f014:	b97f      	cbnz	r7, 800f036 <_dtoa_r+0x36>
 800f016:	2010      	movs	r0, #16
 800f018:	f7fd faf8 	bl	800c60c <malloc>
 800f01c:	4602      	mov	r2, r0
 800f01e:	f8cb 001c 	str.w	r0, [fp, #28]
 800f022:	b920      	cbnz	r0, 800f02e <_dtoa_r+0x2e>
 800f024:	21ef      	movs	r1, #239	@ 0xef
 800f026:	4ba8      	ldr	r3, [pc, #672]	@ (800f2c8 <_dtoa_r+0x2c8>)
 800f028:	48a8      	ldr	r0, [pc, #672]	@ (800f2cc <_dtoa_r+0x2cc>)
 800f02a:	f7ff ff39 	bl	800eea0 <__assert_func>
 800f02e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f032:	6007      	str	r7, [r0, #0]
 800f034:	60c7      	str	r7, [r0, #12]
 800f036:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f03a:	6819      	ldr	r1, [r3, #0]
 800f03c:	b159      	cbz	r1, 800f056 <_dtoa_r+0x56>
 800f03e:	685a      	ldr	r2, [r3, #4]
 800f040:	2301      	movs	r3, #1
 800f042:	4093      	lsls	r3, r2
 800f044:	604a      	str	r2, [r1, #4]
 800f046:	608b      	str	r3, [r1, #8]
 800f048:	4658      	mov	r0, fp
 800f04a:	f001 f9b9 	bl	80103c0 <_Bfree>
 800f04e:	2200      	movs	r2, #0
 800f050:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f054:	601a      	str	r2, [r3, #0]
 800f056:	1e2b      	subs	r3, r5, #0
 800f058:	bfaf      	iteee	ge
 800f05a:	2300      	movge	r3, #0
 800f05c:	2201      	movlt	r2, #1
 800f05e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f062:	9303      	strlt	r3, [sp, #12]
 800f064:	bfa8      	it	ge
 800f066:	6033      	strge	r3, [r6, #0]
 800f068:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f06c:	4b98      	ldr	r3, [pc, #608]	@ (800f2d0 <_dtoa_r+0x2d0>)
 800f06e:	bfb8      	it	lt
 800f070:	6032      	strlt	r2, [r6, #0]
 800f072:	ea33 0308 	bics.w	r3, r3, r8
 800f076:	d112      	bne.n	800f09e <_dtoa_r+0x9e>
 800f078:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f07c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800f07e:	6013      	str	r3, [r2, #0]
 800f080:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f084:	4323      	orrs	r3, r4
 800f086:	f000 8550 	beq.w	800fb2a <_dtoa_r+0xb2a>
 800f08a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800f08c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800f2d4 <_dtoa_r+0x2d4>
 800f090:	2b00      	cmp	r3, #0
 800f092:	f000 8552 	beq.w	800fb3a <_dtoa_r+0xb3a>
 800f096:	f10a 0303 	add.w	r3, sl, #3
 800f09a:	f000 bd4c 	b.w	800fb36 <_dtoa_r+0xb36>
 800f09e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f0a2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f0a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	f7f1 fcf5 	bl	8000a9c <__aeabi_dcmpeq>
 800f0b2:	4607      	mov	r7, r0
 800f0b4:	b158      	cbz	r0, 800f0ce <_dtoa_r+0xce>
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800f0ba:	6013      	str	r3, [r2, #0]
 800f0bc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800f0be:	b113      	cbz	r3, 800f0c6 <_dtoa_r+0xc6>
 800f0c0:	4b85      	ldr	r3, [pc, #532]	@ (800f2d8 <_dtoa_r+0x2d8>)
 800f0c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800f0c4:	6013      	str	r3, [r2, #0]
 800f0c6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800f2dc <_dtoa_r+0x2dc>
 800f0ca:	f000 bd36 	b.w	800fb3a <_dtoa_r+0xb3a>
 800f0ce:	ab14      	add	r3, sp, #80	@ 0x50
 800f0d0:	9301      	str	r3, [sp, #4]
 800f0d2:	ab15      	add	r3, sp, #84	@ 0x54
 800f0d4:	9300      	str	r3, [sp, #0]
 800f0d6:	4658      	mov	r0, fp
 800f0d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f0dc:	f001 fd0a 	bl	8010af4 <__d2b>
 800f0e0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800f0e4:	4681      	mov	r9, r0
 800f0e6:	2e00      	cmp	r6, #0
 800f0e8:	d077      	beq.n	800f1da <_dtoa_r+0x1da>
 800f0ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f0ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f0f0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f0f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f0f8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f0fc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f100:	9712      	str	r7, [sp, #72]	@ 0x48
 800f102:	4619      	mov	r1, r3
 800f104:	2200      	movs	r2, #0
 800f106:	4b76      	ldr	r3, [pc, #472]	@ (800f2e0 <_dtoa_r+0x2e0>)
 800f108:	f7f1 f8a8 	bl	800025c <__aeabi_dsub>
 800f10c:	a368      	add	r3, pc, #416	@ (adr r3, 800f2b0 <_dtoa_r+0x2b0>)
 800f10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f112:	f7f1 fa5b 	bl	80005cc <__aeabi_dmul>
 800f116:	a368      	add	r3, pc, #416	@ (adr r3, 800f2b8 <_dtoa_r+0x2b8>)
 800f118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f11c:	f7f1 f8a0 	bl	8000260 <__adddf3>
 800f120:	4604      	mov	r4, r0
 800f122:	4630      	mov	r0, r6
 800f124:	460d      	mov	r5, r1
 800f126:	f7f1 f9e7 	bl	80004f8 <__aeabi_i2d>
 800f12a:	a365      	add	r3, pc, #404	@ (adr r3, 800f2c0 <_dtoa_r+0x2c0>)
 800f12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f130:	f7f1 fa4c 	bl	80005cc <__aeabi_dmul>
 800f134:	4602      	mov	r2, r0
 800f136:	460b      	mov	r3, r1
 800f138:	4620      	mov	r0, r4
 800f13a:	4629      	mov	r1, r5
 800f13c:	f7f1 f890 	bl	8000260 <__adddf3>
 800f140:	4604      	mov	r4, r0
 800f142:	460d      	mov	r5, r1
 800f144:	f7f1 fcf2 	bl	8000b2c <__aeabi_d2iz>
 800f148:	2200      	movs	r2, #0
 800f14a:	4607      	mov	r7, r0
 800f14c:	2300      	movs	r3, #0
 800f14e:	4620      	mov	r0, r4
 800f150:	4629      	mov	r1, r5
 800f152:	f7f1 fcad 	bl	8000ab0 <__aeabi_dcmplt>
 800f156:	b140      	cbz	r0, 800f16a <_dtoa_r+0x16a>
 800f158:	4638      	mov	r0, r7
 800f15a:	f7f1 f9cd 	bl	80004f8 <__aeabi_i2d>
 800f15e:	4622      	mov	r2, r4
 800f160:	462b      	mov	r3, r5
 800f162:	f7f1 fc9b 	bl	8000a9c <__aeabi_dcmpeq>
 800f166:	b900      	cbnz	r0, 800f16a <_dtoa_r+0x16a>
 800f168:	3f01      	subs	r7, #1
 800f16a:	2f16      	cmp	r7, #22
 800f16c:	d853      	bhi.n	800f216 <_dtoa_r+0x216>
 800f16e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f172:	4b5c      	ldr	r3, [pc, #368]	@ (800f2e4 <_dtoa_r+0x2e4>)
 800f174:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f17c:	f7f1 fc98 	bl	8000ab0 <__aeabi_dcmplt>
 800f180:	2800      	cmp	r0, #0
 800f182:	d04a      	beq.n	800f21a <_dtoa_r+0x21a>
 800f184:	2300      	movs	r3, #0
 800f186:	3f01      	subs	r7, #1
 800f188:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f18a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f18c:	1b9b      	subs	r3, r3, r6
 800f18e:	1e5a      	subs	r2, r3, #1
 800f190:	bf46      	itte	mi
 800f192:	f1c3 0801 	rsbmi	r8, r3, #1
 800f196:	2300      	movmi	r3, #0
 800f198:	f04f 0800 	movpl.w	r8, #0
 800f19c:	9209      	str	r2, [sp, #36]	@ 0x24
 800f19e:	bf48      	it	mi
 800f1a0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800f1a2:	2f00      	cmp	r7, #0
 800f1a4:	db3b      	blt.n	800f21e <_dtoa_r+0x21e>
 800f1a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1a8:	970e      	str	r7, [sp, #56]	@ 0x38
 800f1aa:	443b      	add	r3, r7
 800f1ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800f1b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f1b4:	2b09      	cmp	r3, #9
 800f1b6:	d866      	bhi.n	800f286 <_dtoa_r+0x286>
 800f1b8:	2b05      	cmp	r3, #5
 800f1ba:	bfc4      	itt	gt
 800f1bc:	3b04      	subgt	r3, #4
 800f1be:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800f1c0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f1c2:	bfc8      	it	gt
 800f1c4:	2400      	movgt	r4, #0
 800f1c6:	f1a3 0302 	sub.w	r3, r3, #2
 800f1ca:	bfd8      	it	le
 800f1cc:	2401      	movle	r4, #1
 800f1ce:	2b03      	cmp	r3, #3
 800f1d0:	d864      	bhi.n	800f29c <_dtoa_r+0x29c>
 800f1d2:	e8df f003 	tbb	[pc, r3]
 800f1d6:	382b      	.short	0x382b
 800f1d8:	5636      	.short	0x5636
 800f1da:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800f1de:	441e      	add	r6, r3
 800f1e0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f1e4:	2b20      	cmp	r3, #32
 800f1e6:	bfc1      	itttt	gt
 800f1e8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f1ec:	fa08 f803 	lslgt.w	r8, r8, r3
 800f1f0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f1f4:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f1f8:	bfd6      	itet	le
 800f1fa:	f1c3 0320 	rsble	r3, r3, #32
 800f1fe:	ea48 0003 	orrgt.w	r0, r8, r3
 800f202:	fa04 f003 	lslle.w	r0, r4, r3
 800f206:	f7f1 f967 	bl	80004d8 <__aeabi_ui2d>
 800f20a:	2201      	movs	r2, #1
 800f20c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f210:	3e01      	subs	r6, #1
 800f212:	9212      	str	r2, [sp, #72]	@ 0x48
 800f214:	e775      	b.n	800f102 <_dtoa_r+0x102>
 800f216:	2301      	movs	r3, #1
 800f218:	e7b6      	b.n	800f188 <_dtoa_r+0x188>
 800f21a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f21c:	e7b5      	b.n	800f18a <_dtoa_r+0x18a>
 800f21e:	427b      	negs	r3, r7
 800f220:	930a      	str	r3, [sp, #40]	@ 0x28
 800f222:	2300      	movs	r3, #0
 800f224:	eba8 0807 	sub.w	r8, r8, r7
 800f228:	930e      	str	r3, [sp, #56]	@ 0x38
 800f22a:	e7c2      	b.n	800f1b2 <_dtoa_r+0x1b2>
 800f22c:	2300      	movs	r3, #0
 800f22e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f230:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f232:	2b00      	cmp	r3, #0
 800f234:	dc35      	bgt.n	800f2a2 <_dtoa_r+0x2a2>
 800f236:	2301      	movs	r3, #1
 800f238:	461a      	mov	r2, r3
 800f23a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800f23e:	9221      	str	r2, [sp, #132]	@ 0x84
 800f240:	e00b      	b.n	800f25a <_dtoa_r+0x25a>
 800f242:	2301      	movs	r3, #1
 800f244:	e7f3      	b.n	800f22e <_dtoa_r+0x22e>
 800f246:	2300      	movs	r3, #0
 800f248:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f24a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f24c:	18fb      	adds	r3, r7, r3
 800f24e:	9308      	str	r3, [sp, #32]
 800f250:	3301      	adds	r3, #1
 800f252:	2b01      	cmp	r3, #1
 800f254:	9307      	str	r3, [sp, #28]
 800f256:	bfb8      	it	lt
 800f258:	2301      	movlt	r3, #1
 800f25a:	2100      	movs	r1, #0
 800f25c:	2204      	movs	r2, #4
 800f25e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f262:	f102 0514 	add.w	r5, r2, #20
 800f266:	429d      	cmp	r5, r3
 800f268:	d91f      	bls.n	800f2aa <_dtoa_r+0x2aa>
 800f26a:	6041      	str	r1, [r0, #4]
 800f26c:	4658      	mov	r0, fp
 800f26e:	f001 f867 	bl	8010340 <_Balloc>
 800f272:	4682      	mov	sl, r0
 800f274:	2800      	cmp	r0, #0
 800f276:	d139      	bne.n	800f2ec <_dtoa_r+0x2ec>
 800f278:	4602      	mov	r2, r0
 800f27a:	f240 11af 	movw	r1, #431	@ 0x1af
 800f27e:	4b1a      	ldr	r3, [pc, #104]	@ (800f2e8 <_dtoa_r+0x2e8>)
 800f280:	e6d2      	b.n	800f028 <_dtoa_r+0x28>
 800f282:	2301      	movs	r3, #1
 800f284:	e7e0      	b.n	800f248 <_dtoa_r+0x248>
 800f286:	2401      	movs	r4, #1
 800f288:	2300      	movs	r3, #0
 800f28a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f28c:	9320      	str	r3, [sp, #128]	@ 0x80
 800f28e:	f04f 33ff 	mov.w	r3, #4294967295
 800f292:	2200      	movs	r2, #0
 800f294:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800f298:	2312      	movs	r3, #18
 800f29a:	e7d0      	b.n	800f23e <_dtoa_r+0x23e>
 800f29c:	2301      	movs	r3, #1
 800f29e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f2a0:	e7f5      	b.n	800f28e <_dtoa_r+0x28e>
 800f2a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f2a4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800f2a8:	e7d7      	b.n	800f25a <_dtoa_r+0x25a>
 800f2aa:	3101      	adds	r1, #1
 800f2ac:	0052      	lsls	r2, r2, #1
 800f2ae:	e7d8      	b.n	800f262 <_dtoa_r+0x262>
 800f2b0:	636f4361 	.word	0x636f4361
 800f2b4:	3fd287a7 	.word	0x3fd287a7
 800f2b8:	8b60c8b3 	.word	0x8b60c8b3
 800f2bc:	3fc68a28 	.word	0x3fc68a28
 800f2c0:	509f79fb 	.word	0x509f79fb
 800f2c4:	3fd34413 	.word	0x3fd34413
 800f2c8:	08012383 	.word	0x08012383
 800f2cc:	080124f3 	.word	0x080124f3
 800f2d0:	7ff00000 	.word	0x7ff00000
 800f2d4:	080124ef 	.word	0x080124ef
 800f2d8:	080127a3 	.word	0x080127a3
 800f2dc:	080127a2 	.word	0x080127a2
 800f2e0:	3ff80000 	.word	0x3ff80000
 800f2e4:	08012650 	.word	0x08012650
 800f2e8:	0801254b 	.word	0x0801254b
 800f2ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f2f0:	6018      	str	r0, [r3, #0]
 800f2f2:	9b07      	ldr	r3, [sp, #28]
 800f2f4:	2b0e      	cmp	r3, #14
 800f2f6:	f200 80a4 	bhi.w	800f442 <_dtoa_r+0x442>
 800f2fa:	2c00      	cmp	r4, #0
 800f2fc:	f000 80a1 	beq.w	800f442 <_dtoa_r+0x442>
 800f300:	2f00      	cmp	r7, #0
 800f302:	dd33      	ble.n	800f36c <_dtoa_r+0x36c>
 800f304:	4b86      	ldr	r3, [pc, #536]	@ (800f520 <_dtoa_r+0x520>)
 800f306:	f007 020f 	and.w	r2, r7, #15
 800f30a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f30e:	05f8      	lsls	r0, r7, #23
 800f310:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f314:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f318:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f31c:	d516      	bpl.n	800f34c <_dtoa_r+0x34c>
 800f31e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f322:	4b80      	ldr	r3, [pc, #512]	@ (800f524 <_dtoa_r+0x524>)
 800f324:	2603      	movs	r6, #3
 800f326:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f32a:	f7f1 fa79 	bl	8000820 <__aeabi_ddiv>
 800f32e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f332:	f004 040f 	and.w	r4, r4, #15
 800f336:	4d7b      	ldr	r5, [pc, #492]	@ (800f524 <_dtoa_r+0x524>)
 800f338:	b954      	cbnz	r4, 800f350 <_dtoa_r+0x350>
 800f33a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f33e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f342:	f7f1 fa6d 	bl	8000820 <__aeabi_ddiv>
 800f346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f34a:	e028      	b.n	800f39e <_dtoa_r+0x39e>
 800f34c:	2602      	movs	r6, #2
 800f34e:	e7f2      	b.n	800f336 <_dtoa_r+0x336>
 800f350:	07e1      	lsls	r1, r4, #31
 800f352:	d508      	bpl.n	800f366 <_dtoa_r+0x366>
 800f354:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f358:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f35c:	f7f1 f936 	bl	80005cc <__aeabi_dmul>
 800f360:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f364:	3601      	adds	r6, #1
 800f366:	1064      	asrs	r4, r4, #1
 800f368:	3508      	adds	r5, #8
 800f36a:	e7e5      	b.n	800f338 <_dtoa_r+0x338>
 800f36c:	f000 80d2 	beq.w	800f514 <_dtoa_r+0x514>
 800f370:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f374:	427c      	negs	r4, r7
 800f376:	4b6a      	ldr	r3, [pc, #424]	@ (800f520 <_dtoa_r+0x520>)
 800f378:	f004 020f 	and.w	r2, r4, #15
 800f37c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f384:	f7f1 f922 	bl	80005cc <__aeabi_dmul>
 800f388:	2602      	movs	r6, #2
 800f38a:	2300      	movs	r3, #0
 800f38c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f390:	4d64      	ldr	r5, [pc, #400]	@ (800f524 <_dtoa_r+0x524>)
 800f392:	1124      	asrs	r4, r4, #4
 800f394:	2c00      	cmp	r4, #0
 800f396:	f040 80b2 	bne.w	800f4fe <_dtoa_r+0x4fe>
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d1d3      	bne.n	800f346 <_dtoa_r+0x346>
 800f39e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f3a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	f000 80b7 	beq.w	800f518 <_dtoa_r+0x518>
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	4620      	mov	r0, r4
 800f3ae:	4629      	mov	r1, r5
 800f3b0:	4b5d      	ldr	r3, [pc, #372]	@ (800f528 <_dtoa_r+0x528>)
 800f3b2:	f7f1 fb7d 	bl	8000ab0 <__aeabi_dcmplt>
 800f3b6:	2800      	cmp	r0, #0
 800f3b8:	f000 80ae 	beq.w	800f518 <_dtoa_r+0x518>
 800f3bc:	9b07      	ldr	r3, [sp, #28]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	f000 80aa 	beq.w	800f518 <_dtoa_r+0x518>
 800f3c4:	9b08      	ldr	r3, [sp, #32]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	dd37      	ble.n	800f43a <_dtoa_r+0x43a>
 800f3ca:	1e7b      	subs	r3, r7, #1
 800f3cc:	4620      	mov	r0, r4
 800f3ce:	9304      	str	r3, [sp, #16]
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	4629      	mov	r1, r5
 800f3d4:	4b55      	ldr	r3, [pc, #340]	@ (800f52c <_dtoa_r+0x52c>)
 800f3d6:	f7f1 f8f9 	bl	80005cc <__aeabi_dmul>
 800f3da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3de:	9c08      	ldr	r4, [sp, #32]
 800f3e0:	3601      	adds	r6, #1
 800f3e2:	4630      	mov	r0, r6
 800f3e4:	f7f1 f888 	bl	80004f8 <__aeabi_i2d>
 800f3e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f3ec:	f7f1 f8ee 	bl	80005cc <__aeabi_dmul>
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	4b4f      	ldr	r3, [pc, #316]	@ (800f530 <_dtoa_r+0x530>)
 800f3f4:	f7f0 ff34 	bl	8000260 <__adddf3>
 800f3f8:	4605      	mov	r5, r0
 800f3fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f3fe:	2c00      	cmp	r4, #0
 800f400:	f040 809a 	bne.w	800f538 <_dtoa_r+0x538>
 800f404:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f408:	2200      	movs	r2, #0
 800f40a:	4b4a      	ldr	r3, [pc, #296]	@ (800f534 <_dtoa_r+0x534>)
 800f40c:	f7f0 ff26 	bl	800025c <__aeabi_dsub>
 800f410:	4602      	mov	r2, r0
 800f412:	460b      	mov	r3, r1
 800f414:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f418:	462a      	mov	r2, r5
 800f41a:	4633      	mov	r3, r6
 800f41c:	f7f1 fb66 	bl	8000aec <__aeabi_dcmpgt>
 800f420:	2800      	cmp	r0, #0
 800f422:	f040 828e 	bne.w	800f942 <_dtoa_r+0x942>
 800f426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f42a:	462a      	mov	r2, r5
 800f42c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f430:	f7f1 fb3e 	bl	8000ab0 <__aeabi_dcmplt>
 800f434:	2800      	cmp	r0, #0
 800f436:	f040 8127 	bne.w	800f688 <_dtoa_r+0x688>
 800f43a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f43e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f442:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f444:	2b00      	cmp	r3, #0
 800f446:	f2c0 8163 	blt.w	800f710 <_dtoa_r+0x710>
 800f44a:	2f0e      	cmp	r7, #14
 800f44c:	f300 8160 	bgt.w	800f710 <_dtoa_r+0x710>
 800f450:	4b33      	ldr	r3, [pc, #204]	@ (800f520 <_dtoa_r+0x520>)
 800f452:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f456:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f45a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f45e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f460:	2b00      	cmp	r3, #0
 800f462:	da03      	bge.n	800f46c <_dtoa_r+0x46c>
 800f464:	9b07      	ldr	r3, [sp, #28]
 800f466:	2b00      	cmp	r3, #0
 800f468:	f340 8100 	ble.w	800f66c <_dtoa_r+0x66c>
 800f46c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f470:	4656      	mov	r6, sl
 800f472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f476:	4620      	mov	r0, r4
 800f478:	4629      	mov	r1, r5
 800f47a:	f7f1 f9d1 	bl	8000820 <__aeabi_ddiv>
 800f47e:	f7f1 fb55 	bl	8000b2c <__aeabi_d2iz>
 800f482:	4680      	mov	r8, r0
 800f484:	f7f1 f838 	bl	80004f8 <__aeabi_i2d>
 800f488:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f48c:	f7f1 f89e 	bl	80005cc <__aeabi_dmul>
 800f490:	4602      	mov	r2, r0
 800f492:	460b      	mov	r3, r1
 800f494:	4620      	mov	r0, r4
 800f496:	4629      	mov	r1, r5
 800f498:	f7f0 fee0 	bl	800025c <__aeabi_dsub>
 800f49c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f4a0:	9d07      	ldr	r5, [sp, #28]
 800f4a2:	f806 4b01 	strb.w	r4, [r6], #1
 800f4a6:	eba6 040a 	sub.w	r4, r6, sl
 800f4aa:	42a5      	cmp	r5, r4
 800f4ac:	4602      	mov	r2, r0
 800f4ae:	460b      	mov	r3, r1
 800f4b0:	f040 8116 	bne.w	800f6e0 <_dtoa_r+0x6e0>
 800f4b4:	f7f0 fed4 	bl	8000260 <__adddf3>
 800f4b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f4bc:	4604      	mov	r4, r0
 800f4be:	460d      	mov	r5, r1
 800f4c0:	f7f1 fb14 	bl	8000aec <__aeabi_dcmpgt>
 800f4c4:	2800      	cmp	r0, #0
 800f4c6:	f040 80f8 	bne.w	800f6ba <_dtoa_r+0x6ba>
 800f4ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f4ce:	4620      	mov	r0, r4
 800f4d0:	4629      	mov	r1, r5
 800f4d2:	f7f1 fae3 	bl	8000a9c <__aeabi_dcmpeq>
 800f4d6:	b118      	cbz	r0, 800f4e0 <_dtoa_r+0x4e0>
 800f4d8:	f018 0f01 	tst.w	r8, #1
 800f4dc:	f040 80ed 	bne.w	800f6ba <_dtoa_r+0x6ba>
 800f4e0:	4649      	mov	r1, r9
 800f4e2:	4658      	mov	r0, fp
 800f4e4:	f000 ff6c 	bl	80103c0 <_Bfree>
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	7033      	strb	r3, [r6, #0]
 800f4ec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800f4ee:	3701      	adds	r7, #1
 800f4f0:	601f      	str	r7, [r3, #0]
 800f4f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	f000 8320 	beq.w	800fb3a <_dtoa_r+0xb3a>
 800f4fa:	601e      	str	r6, [r3, #0]
 800f4fc:	e31d      	b.n	800fb3a <_dtoa_r+0xb3a>
 800f4fe:	07e2      	lsls	r2, r4, #31
 800f500:	d505      	bpl.n	800f50e <_dtoa_r+0x50e>
 800f502:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f506:	f7f1 f861 	bl	80005cc <__aeabi_dmul>
 800f50a:	2301      	movs	r3, #1
 800f50c:	3601      	adds	r6, #1
 800f50e:	1064      	asrs	r4, r4, #1
 800f510:	3508      	adds	r5, #8
 800f512:	e73f      	b.n	800f394 <_dtoa_r+0x394>
 800f514:	2602      	movs	r6, #2
 800f516:	e742      	b.n	800f39e <_dtoa_r+0x39e>
 800f518:	9c07      	ldr	r4, [sp, #28]
 800f51a:	9704      	str	r7, [sp, #16]
 800f51c:	e761      	b.n	800f3e2 <_dtoa_r+0x3e2>
 800f51e:	bf00      	nop
 800f520:	08012650 	.word	0x08012650
 800f524:	08012628 	.word	0x08012628
 800f528:	3ff00000 	.word	0x3ff00000
 800f52c:	40240000 	.word	0x40240000
 800f530:	401c0000 	.word	0x401c0000
 800f534:	40140000 	.word	0x40140000
 800f538:	4b70      	ldr	r3, [pc, #448]	@ (800f6fc <_dtoa_r+0x6fc>)
 800f53a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f53c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f540:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f544:	4454      	add	r4, sl
 800f546:	2900      	cmp	r1, #0
 800f548:	d045      	beq.n	800f5d6 <_dtoa_r+0x5d6>
 800f54a:	2000      	movs	r0, #0
 800f54c:	496c      	ldr	r1, [pc, #432]	@ (800f700 <_dtoa_r+0x700>)
 800f54e:	f7f1 f967 	bl	8000820 <__aeabi_ddiv>
 800f552:	4633      	mov	r3, r6
 800f554:	462a      	mov	r2, r5
 800f556:	f7f0 fe81 	bl	800025c <__aeabi_dsub>
 800f55a:	4656      	mov	r6, sl
 800f55c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f560:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f564:	f7f1 fae2 	bl	8000b2c <__aeabi_d2iz>
 800f568:	4605      	mov	r5, r0
 800f56a:	f7f0 ffc5 	bl	80004f8 <__aeabi_i2d>
 800f56e:	4602      	mov	r2, r0
 800f570:	460b      	mov	r3, r1
 800f572:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f576:	f7f0 fe71 	bl	800025c <__aeabi_dsub>
 800f57a:	4602      	mov	r2, r0
 800f57c:	460b      	mov	r3, r1
 800f57e:	3530      	adds	r5, #48	@ 0x30
 800f580:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f584:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f588:	f806 5b01 	strb.w	r5, [r6], #1
 800f58c:	f7f1 fa90 	bl	8000ab0 <__aeabi_dcmplt>
 800f590:	2800      	cmp	r0, #0
 800f592:	d163      	bne.n	800f65c <_dtoa_r+0x65c>
 800f594:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f598:	2000      	movs	r0, #0
 800f59a:	495a      	ldr	r1, [pc, #360]	@ (800f704 <_dtoa_r+0x704>)
 800f59c:	f7f0 fe5e 	bl	800025c <__aeabi_dsub>
 800f5a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f5a4:	f7f1 fa84 	bl	8000ab0 <__aeabi_dcmplt>
 800f5a8:	2800      	cmp	r0, #0
 800f5aa:	f040 8087 	bne.w	800f6bc <_dtoa_r+0x6bc>
 800f5ae:	42a6      	cmp	r6, r4
 800f5b0:	f43f af43 	beq.w	800f43a <_dtoa_r+0x43a>
 800f5b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	4b53      	ldr	r3, [pc, #332]	@ (800f708 <_dtoa_r+0x708>)
 800f5bc:	f7f1 f806 	bl	80005cc <__aeabi_dmul>
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f5c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5ca:	4b4f      	ldr	r3, [pc, #316]	@ (800f708 <_dtoa_r+0x708>)
 800f5cc:	f7f0 fffe 	bl	80005cc <__aeabi_dmul>
 800f5d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5d4:	e7c4      	b.n	800f560 <_dtoa_r+0x560>
 800f5d6:	4631      	mov	r1, r6
 800f5d8:	4628      	mov	r0, r5
 800f5da:	f7f0 fff7 	bl	80005cc <__aeabi_dmul>
 800f5de:	4656      	mov	r6, sl
 800f5e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f5e4:	9413      	str	r4, [sp, #76]	@ 0x4c
 800f5e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5ea:	f7f1 fa9f 	bl	8000b2c <__aeabi_d2iz>
 800f5ee:	4605      	mov	r5, r0
 800f5f0:	f7f0 ff82 	bl	80004f8 <__aeabi_i2d>
 800f5f4:	4602      	mov	r2, r0
 800f5f6:	460b      	mov	r3, r1
 800f5f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5fc:	f7f0 fe2e 	bl	800025c <__aeabi_dsub>
 800f600:	4602      	mov	r2, r0
 800f602:	460b      	mov	r3, r1
 800f604:	3530      	adds	r5, #48	@ 0x30
 800f606:	f806 5b01 	strb.w	r5, [r6], #1
 800f60a:	42a6      	cmp	r6, r4
 800f60c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f610:	f04f 0200 	mov.w	r2, #0
 800f614:	d124      	bne.n	800f660 <_dtoa_r+0x660>
 800f616:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f61a:	4b39      	ldr	r3, [pc, #228]	@ (800f700 <_dtoa_r+0x700>)
 800f61c:	f7f0 fe20 	bl	8000260 <__adddf3>
 800f620:	4602      	mov	r2, r0
 800f622:	460b      	mov	r3, r1
 800f624:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f628:	f7f1 fa60 	bl	8000aec <__aeabi_dcmpgt>
 800f62c:	2800      	cmp	r0, #0
 800f62e:	d145      	bne.n	800f6bc <_dtoa_r+0x6bc>
 800f630:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f634:	2000      	movs	r0, #0
 800f636:	4932      	ldr	r1, [pc, #200]	@ (800f700 <_dtoa_r+0x700>)
 800f638:	f7f0 fe10 	bl	800025c <__aeabi_dsub>
 800f63c:	4602      	mov	r2, r0
 800f63e:	460b      	mov	r3, r1
 800f640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f644:	f7f1 fa34 	bl	8000ab0 <__aeabi_dcmplt>
 800f648:	2800      	cmp	r0, #0
 800f64a:	f43f aef6 	beq.w	800f43a <_dtoa_r+0x43a>
 800f64e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800f650:	1e73      	subs	r3, r6, #1
 800f652:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f654:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f658:	2b30      	cmp	r3, #48	@ 0x30
 800f65a:	d0f8      	beq.n	800f64e <_dtoa_r+0x64e>
 800f65c:	9f04      	ldr	r7, [sp, #16]
 800f65e:	e73f      	b.n	800f4e0 <_dtoa_r+0x4e0>
 800f660:	4b29      	ldr	r3, [pc, #164]	@ (800f708 <_dtoa_r+0x708>)
 800f662:	f7f0 ffb3 	bl	80005cc <__aeabi_dmul>
 800f666:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f66a:	e7bc      	b.n	800f5e6 <_dtoa_r+0x5e6>
 800f66c:	d10c      	bne.n	800f688 <_dtoa_r+0x688>
 800f66e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f672:	2200      	movs	r2, #0
 800f674:	4b25      	ldr	r3, [pc, #148]	@ (800f70c <_dtoa_r+0x70c>)
 800f676:	f7f0 ffa9 	bl	80005cc <__aeabi_dmul>
 800f67a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f67e:	f7f1 fa2b 	bl	8000ad8 <__aeabi_dcmpge>
 800f682:	2800      	cmp	r0, #0
 800f684:	f000 815b 	beq.w	800f93e <_dtoa_r+0x93e>
 800f688:	2400      	movs	r4, #0
 800f68a:	4625      	mov	r5, r4
 800f68c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f68e:	4656      	mov	r6, sl
 800f690:	43db      	mvns	r3, r3
 800f692:	9304      	str	r3, [sp, #16]
 800f694:	2700      	movs	r7, #0
 800f696:	4621      	mov	r1, r4
 800f698:	4658      	mov	r0, fp
 800f69a:	f000 fe91 	bl	80103c0 <_Bfree>
 800f69e:	2d00      	cmp	r5, #0
 800f6a0:	d0dc      	beq.n	800f65c <_dtoa_r+0x65c>
 800f6a2:	b12f      	cbz	r7, 800f6b0 <_dtoa_r+0x6b0>
 800f6a4:	42af      	cmp	r7, r5
 800f6a6:	d003      	beq.n	800f6b0 <_dtoa_r+0x6b0>
 800f6a8:	4639      	mov	r1, r7
 800f6aa:	4658      	mov	r0, fp
 800f6ac:	f000 fe88 	bl	80103c0 <_Bfree>
 800f6b0:	4629      	mov	r1, r5
 800f6b2:	4658      	mov	r0, fp
 800f6b4:	f000 fe84 	bl	80103c0 <_Bfree>
 800f6b8:	e7d0      	b.n	800f65c <_dtoa_r+0x65c>
 800f6ba:	9704      	str	r7, [sp, #16]
 800f6bc:	4633      	mov	r3, r6
 800f6be:	461e      	mov	r6, r3
 800f6c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f6c4:	2a39      	cmp	r2, #57	@ 0x39
 800f6c6:	d107      	bne.n	800f6d8 <_dtoa_r+0x6d8>
 800f6c8:	459a      	cmp	sl, r3
 800f6ca:	d1f8      	bne.n	800f6be <_dtoa_r+0x6be>
 800f6cc:	9a04      	ldr	r2, [sp, #16]
 800f6ce:	3201      	adds	r2, #1
 800f6d0:	9204      	str	r2, [sp, #16]
 800f6d2:	2230      	movs	r2, #48	@ 0x30
 800f6d4:	f88a 2000 	strb.w	r2, [sl]
 800f6d8:	781a      	ldrb	r2, [r3, #0]
 800f6da:	3201      	adds	r2, #1
 800f6dc:	701a      	strb	r2, [r3, #0]
 800f6de:	e7bd      	b.n	800f65c <_dtoa_r+0x65c>
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	4b09      	ldr	r3, [pc, #36]	@ (800f708 <_dtoa_r+0x708>)
 800f6e4:	f7f0 ff72 	bl	80005cc <__aeabi_dmul>
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	4604      	mov	r4, r0
 800f6ee:	460d      	mov	r5, r1
 800f6f0:	f7f1 f9d4 	bl	8000a9c <__aeabi_dcmpeq>
 800f6f4:	2800      	cmp	r0, #0
 800f6f6:	f43f aebc 	beq.w	800f472 <_dtoa_r+0x472>
 800f6fa:	e6f1      	b.n	800f4e0 <_dtoa_r+0x4e0>
 800f6fc:	08012650 	.word	0x08012650
 800f700:	3fe00000 	.word	0x3fe00000
 800f704:	3ff00000 	.word	0x3ff00000
 800f708:	40240000 	.word	0x40240000
 800f70c:	40140000 	.word	0x40140000
 800f710:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f712:	2a00      	cmp	r2, #0
 800f714:	f000 80db 	beq.w	800f8ce <_dtoa_r+0x8ce>
 800f718:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f71a:	2a01      	cmp	r2, #1
 800f71c:	f300 80bf 	bgt.w	800f89e <_dtoa_r+0x89e>
 800f720:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f722:	2a00      	cmp	r2, #0
 800f724:	f000 80b7 	beq.w	800f896 <_dtoa_r+0x896>
 800f728:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f72c:	4646      	mov	r6, r8
 800f72e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f730:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f732:	2101      	movs	r1, #1
 800f734:	441a      	add	r2, r3
 800f736:	4658      	mov	r0, fp
 800f738:	4498      	add	r8, r3
 800f73a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f73c:	f000 ff3e 	bl	80105bc <__i2b>
 800f740:	4605      	mov	r5, r0
 800f742:	b15e      	cbz	r6, 800f75c <_dtoa_r+0x75c>
 800f744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f746:	2b00      	cmp	r3, #0
 800f748:	dd08      	ble.n	800f75c <_dtoa_r+0x75c>
 800f74a:	42b3      	cmp	r3, r6
 800f74c:	bfa8      	it	ge
 800f74e:	4633      	movge	r3, r6
 800f750:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f752:	eba8 0803 	sub.w	r8, r8, r3
 800f756:	1af6      	subs	r6, r6, r3
 800f758:	1ad3      	subs	r3, r2, r3
 800f75a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f75c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f75e:	b1f3      	cbz	r3, 800f79e <_dtoa_r+0x79e>
 800f760:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f762:	2b00      	cmp	r3, #0
 800f764:	f000 80b7 	beq.w	800f8d6 <_dtoa_r+0x8d6>
 800f768:	b18c      	cbz	r4, 800f78e <_dtoa_r+0x78e>
 800f76a:	4629      	mov	r1, r5
 800f76c:	4622      	mov	r2, r4
 800f76e:	4658      	mov	r0, fp
 800f770:	f000 ffe2 	bl	8010738 <__pow5mult>
 800f774:	464a      	mov	r2, r9
 800f776:	4601      	mov	r1, r0
 800f778:	4605      	mov	r5, r0
 800f77a:	4658      	mov	r0, fp
 800f77c:	f000 ff34 	bl	80105e8 <__multiply>
 800f780:	4649      	mov	r1, r9
 800f782:	9004      	str	r0, [sp, #16]
 800f784:	4658      	mov	r0, fp
 800f786:	f000 fe1b 	bl	80103c0 <_Bfree>
 800f78a:	9b04      	ldr	r3, [sp, #16]
 800f78c:	4699      	mov	r9, r3
 800f78e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f790:	1b1a      	subs	r2, r3, r4
 800f792:	d004      	beq.n	800f79e <_dtoa_r+0x79e>
 800f794:	4649      	mov	r1, r9
 800f796:	4658      	mov	r0, fp
 800f798:	f000 ffce 	bl	8010738 <__pow5mult>
 800f79c:	4681      	mov	r9, r0
 800f79e:	2101      	movs	r1, #1
 800f7a0:	4658      	mov	r0, fp
 800f7a2:	f000 ff0b 	bl	80105bc <__i2b>
 800f7a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f7a8:	4604      	mov	r4, r0
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	f000 81c9 	beq.w	800fb42 <_dtoa_r+0xb42>
 800f7b0:	461a      	mov	r2, r3
 800f7b2:	4601      	mov	r1, r0
 800f7b4:	4658      	mov	r0, fp
 800f7b6:	f000 ffbf 	bl	8010738 <__pow5mult>
 800f7ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f7bc:	4604      	mov	r4, r0
 800f7be:	2b01      	cmp	r3, #1
 800f7c0:	f300 808f 	bgt.w	800f8e2 <_dtoa_r+0x8e2>
 800f7c4:	9b02      	ldr	r3, [sp, #8]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	f040 8087 	bne.w	800f8da <_dtoa_r+0x8da>
 800f7cc:	9b03      	ldr	r3, [sp, #12]
 800f7ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	f040 8083 	bne.w	800f8de <_dtoa_r+0x8de>
 800f7d8:	9b03      	ldr	r3, [sp, #12]
 800f7da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f7de:	0d1b      	lsrs	r3, r3, #20
 800f7e0:	051b      	lsls	r3, r3, #20
 800f7e2:	b12b      	cbz	r3, 800f7f0 <_dtoa_r+0x7f0>
 800f7e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7e6:	f108 0801 	add.w	r8, r8, #1
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	930a      	str	r3, [sp, #40]	@ 0x28
 800f7f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	f000 81aa 	beq.w	800fb4e <_dtoa_r+0xb4e>
 800f7fa:	6923      	ldr	r3, [r4, #16]
 800f7fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f800:	6918      	ldr	r0, [r3, #16]
 800f802:	f000 fe8f 	bl	8010524 <__hi0bits>
 800f806:	f1c0 0020 	rsb	r0, r0, #32
 800f80a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f80c:	4418      	add	r0, r3
 800f80e:	f010 001f 	ands.w	r0, r0, #31
 800f812:	d071      	beq.n	800f8f8 <_dtoa_r+0x8f8>
 800f814:	f1c0 0320 	rsb	r3, r0, #32
 800f818:	2b04      	cmp	r3, #4
 800f81a:	dd65      	ble.n	800f8e8 <_dtoa_r+0x8e8>
 800f81c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f81e:	f1c0 001c 	rsb	r0, r0, #28
 800f822:	4403      	add	r3, r0
 800f824:	4480      	add	r8, r0
 800f826:	4406      	add	r6, r0
 800f828:	9309      	str	r3, [sp, #36]	@ 0x24
 800f82a:	f1b8 0f00 	cmp.w	r8, #0
 800f82e:	dd05      	ble.n	800f83c <_dtoa_r+0x83c>
 800f830:	4649      	mov	r1, r9
 800f832:	4642      	mov	r2, r8
 800f834:	4658      	mov	r0, fp
 800f836:	f000 ffd9 	bl	80107ec <__lshift>
 800f83a:	4681      	mov	r9, r0
 800f83c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f83e:	2b00      	cmp	r3, #0
 800f840:	dd05      	ble.n	800f84e <_dtoa_r+0x84e>
 800f842:	4621      	mov	r1, r4
 800f844:	461a      	mov	r2, r3
 800f846:	4658      	mov	r0, fp
 800f848:	f000 ffd0 	bl	80107ec <__lshift>
 800f84c:	4604      	mov	r4, r0
 800f84e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f850:	2b00      	cmp	r3, #0
 800f852:	d053      	beq.n	800f8fc <_dtoa_r+0x8fc>
 800f854:	4621      	mov	r1, r4
 800f856:	4648      	mov	r0, r9
 800f858:	f001 f834 	bl	80108c4 <__mcmp>
 800f85c:	2800      	cmp	r0, #0
 800f85e:	da4d      	bge.n	800f8fc <_dtoa_r+0x8fc>
 800f860:	1e7b      	subs	r3, r7, #1
 800f862:	4649      	mov	r1, r9
 800f864:	9304      	str	r3, [sp, #16]
 800f866:	220a      	movs	r2, #10
 800f868:	2300      	movs	r3, #0
 800f86a:	4658      	mov	r0, fp
 800f86c:	f000 fdca 	bl	8010404 <__multadd>
 800f870:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f872:	4681      	mov	r9, r0
 800f874:	2b00      	cmp	r3, #0
 800f876:	f000 816c 	beq.w	800fb52 <_dtoa_r+0xb52>
 800f87a:	2300      	movs	r3, #0
 800f87c:	4629      	mov	r1, r5
 800f87e:	220a      	movs	r2, #10
 800f880:	4658      	mov	r0, fp
 800f882:	f000 fdbf 	bl	8010404 <__multadd>
 800f886:	9b08      	ldr	r3, [sp, #32]
 800f888:	4605      	mov	r5, r0
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	dc61      	bgt.n	800f952 <_dtoa_r+0x952>
 800f88e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f890:	2b02      	cmp	r3, #2
 800f892:	dc3b      	bgt.n	800f90c <_dtoa_r+0x90c>
 800f894:	e05d      	b.n	800f952 <_dtoa_r+0x952>
 800f896:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f898:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f89c:	e746      	b.n	800f72c <_dtoa_r+0x72c>
 800f89e:	9b07      	ldr	r3, [sp, #28]
 800f8a0:	1e5c      	subs	r4, r3, #1
 800f8a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8a4:	42a3      	cmp	r3, r4
 800f8a6:	bfbf      	itttt	lt
 800f8a8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f8aa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800f8ac:	1ae3      	sublt	r3, r4, r3
 800f8ae:	18d2      	addlt	r2, r2, r3
 800f8b0:	bfa8      	it	ge
 800f8b2:	1b1c      	subge	r4, r3, r4
 800f8b4:	9b07      	ldr	r3, [sp, #28]
 800f8b6:	bfbe      	ittt	lt
 800f8b8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f8ba:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800f8bc:	2400      	movlt	r4, #0
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	bfb5      	itete	lt
 800f8c2:	eba8 0603 	sublt.w	r6, r8, r3
 800f8c6:	4646      	movge	r6, r8
 800f8c8:	2300      	movlt	r3, #0
 800f8ca:	9b07      	ldrge	r3, [sp, #28]
 800f8cc:	e730      	b.n	800f730 <_dtoa_r+0x730>
 800f8ce:	4646      	mov	r6, r8
 800f8d0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f8d2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f8d4:	e735      	b.n	800f742 <_dtoa_r+0x742>
 800f8d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f8d8:	e75c      	b.n	800f794 <_dtoa_r+0x794>
 800f8da:	2300      	movs	r3, #0
 800f8dc:	e788      	b.n	800f7f0 <_dtoa_r+0x7f0>
 800f8de:	9b02      	ldr	r3, [sp, #8]
 800f8e0:	e786      	b.n	800f7f0 <_dtoa_r+0x7f0>
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	930a      	str	r3, [sp, #40]	@ 0x28
 800f8e6:	e788      	b.n	800f7fa <_dtoa_r+0x7fa>
 800f8e8:	d09f      	beq.n	800f82a <_dtoa_r+0x82a>
 800f8ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f8ec:	331c      	adds	r3, #28
 800f8ee:	441a      	add	r2, r3
 800f8f0:	4498      	add	r8, r3
 800f8f2:	441e      	add	r6, r3
 800f8f4:	9209      	str	r2, [sp, #36]	@ 0x24
 800f8f6:	e798      	b.n	800f82a <_dtoa_r+0x82a>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	e7f6      	b.n	800f8ea <_dtoa_r+0x8ea>
 800f8fc:	9b07      	ldr	r3, [sp, #28]
 800f8fe:	9704      	str	r7, [sp, #16]
 800f900:	2b00      	cmp	r3, #0
 800f902:	dc20      	bgt.n	800f946 <_dtoa_r+0x946>
 800f904:	9308      	str	r3, [sp, #32]
 800f906:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f908:	2b02      	cmp	r3, #2
 800f90a:	dd1e      	ble.n	800f94a <_dtoa_r+0x94a>
 800f90c:	9b08      	ldr	r3, [sp, #32]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	f47f aebc 	bne.w	800f68c <_dtoa_r+0x68c>
 800f914:	4621      	mov	r1, r4
 800f916:	2205      	movs	r2, #5
 800f918:	4658      	mov	r0, fp
 800f91a:	f000 fd73 	bl	8010404 <__multadd>
 800f91e:	4601      	mov	r1, r0
 800f920:	4604      	mov	r4, r0
 800f922:	4648      	mov	r0, r9
 800f924:	f000 ffce 	bl	80108c4 <__mcmp>
 800f928:	2800      	cmp	r0, #0
 800f92a:	f77f aeaf 	ble.w	800f68c <_dtoa_r+0x68c>
 800f92e:	2331      	movs	r3, #49	@ 0x31
 800f930:	4656      	mov	r6, sl
 800f932:	f806 3b01 	strb.w	r3, [r6], #1
 800f936:	9b04      	ldr	r3, [sp, #16]
 800f938:	3301      	adds	r3, #1
 800f93a:	9304      	str	r3, [sp, #16]
 800f93c:	e6aa      	b.n	800f694 <_dtoa_r+0x694>
 800f93e:	9c07      	ldr	r4, [sp, #28]
 800f940:	9704      	str	r7, [sp, #16]
 800f942:	4625      	mov	r5, r4
 800f944:	e7f3      	b.n	800f92e <_dtoa_r+0x92e>
 800f946:	9b07      	ldr	r3, [sp, #28]
 800f948:	9308      	str	r3, [sp, #32]
 800f94a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	f000 8104 	beq.w	800fb5a <_dtoa_r+0xb5a>
 800f952:	2e00      	cmp	r6, #0
 800f954:	dd05      	ble.n	800f962 <_dtoa_r+0x962>
 800f956:	4629      	mov	r1, r5
 800f958:	4632      	mov	r2, r6
 800f95a:	4658      	mov	r0, fp
 800f95c:	f000 ff46 	bl	80107ec <__lshift>
 800f960:	4605      	mov	r5, r0
 800f962:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f964:	2b00      	cmp	r3, #0
 800f966:	d05a      	beq.n	800fa1e <_dtoa_r+0xa1e>
 800f968:	4658      	mov	r0, fp
 800f96a:	6869      	ldr	r1, [r5, #4]
 800f96c:	f000 fce8 	bl	8010340 <_Balloc>
 800f970:	4606      	mov	r6, r0
 800f972:	b928      	cbnz	r0, 800f980 <_dtoa_r+0x980>
 800f974:	4602      	mov	r2, r0
 800f976:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f97a:	4b83      	ldr	r3, [pc, #524]	@ (800fb88 <_dtoa_r+0xb88>)
 800f97c:	f7ff bb54 	b.w	800f028 <_dtoa_r+0x28>
 800f980:	692a      	ldr	r2, [r5, #16]
 800f982:	f105 010c 	add.w	r1, r5, #12
 800f986:	3202      	adds	r2, #2
 800f988:	0092      	lsls	r2, r2, #2
 800f98a:	300c      	adds	r0, #12
 800f98c:	f7ff fa6f 	bl	800ee6e <memcpy>
 800f990:	2201      	movs	r2, #1
 800f992:	4631      	mov	r1, r6
 800f994:	4658      	mov	r0, fp
 800f996:	f000 ff29 	bl	80107ec <__lshift>
 800f99a:	462f      	mov	r7, r5
 800f99c:	4605      	mov	r5, r0
 800f99e:	f10a 0301 	add.w	r3, sl, #1
 800f9a2:	9307      	str	r3, [sp, #28]
 800f9a4:	9b08      	ldr	r3, [sp, #32]
 800f9a6:	4453      	add	r3, sl
 800f9a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9aa:	9b02      	ldr	r3, [sp, #8]
 800f9ac:	f003 0301 	and.w	r3, r3, #1
 800f9b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800f9b2:	9b07      	ldr	r3, [sp, #28]
 800f9b4:	4621      	mov	r1, r4
 800f9b6:	3b01      	subs	r3, #1
 800f9b8:	4648      	mov	r0, r9
 800f9ba:	9302      	str	r3, [sp, #8]
 800f9bc:	f7ff fa96 	bl	800eeec <quorem>
 800f9c0:	4639      	mov	r1, r7
 800f9c2:	9008      	str	r0, [sp, #32]
 800f9c4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f9c8:	4648      	mov	r0, r9
 800f9ca:	f000 ff7b 	bl	80108c4 <__mcmp>
 800f9ce:	462a      	mov	r2, r5
 800f9d0:	9009      	str	r0, [sp, #36]	@ 0x24
 800f9d2:	4621      	mov	r1, r4
 800f9d4:	4658      	mov	r0, fp
 800f9d6:	f000 ff91 	bl	80108fc <__mdiff>
 800f9da:	68c2      	ldr	r2, [r0, #12]
 800f9dc:	4606      	mov	r6, r0
 800f9de:	bb02      	cbnz	r2, 800fa22 <_dtoa_r+0xa22>
 800f9e0:	4601      	mov	r1, r0
 800f9e2:	4648      	mov	r0, r9
 800f9e4:	f000 ff6e 	bl	80108c4 <__mcmp>
 800f9e8:	4602      	mov	r2, r0
 800f9ea:	4631      	mov	r1, r6
 800f9ec:	4658      	mov	r0, fp
 800f9ee:	920c      	str	r2, [sp, #48]	@ 0x30
 800f9f0:	f000 fce6 	bl	80103c0 <_Bfree>
 800f9f4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f9f6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f9f8:	9e07      	ldr	r6, [sp, #28]
 800f9fa:	ea43 0102 	orr.w	r1, r3, r2
 800f9fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa00:	4319      	orrs	r1, r3
 800fa02:	d110      	bne.n	800fa26 <_dtoa_r+0xa26>
 800fa04:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fa08:	d029      	beq.n	800fa5e <_dtoa_r+0xa5e>
 800fa0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	dd02      	ble.n	800fa16 <_dtoa_r+0xa16>
 800fa10:	9b08      	ldr	r3, [sp, #32]
 800fa12:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800fa16:	9b02      	ldr	r3, [sp, #8]
 800fa18:	f883 8000 	strb.w	r8, [r3]
 800fa1c:	e63b      	b.n	800f696 <_dtoa_r+0x696>
 800fa1e:	4628      	mov	r0, r5
 800fa20:	e7bb      	b.n	800f99a <_dtoa_r+0x99a>
 800fa22:	2201      	movs	r2, #1
 800fa24:	e7e1      	b.n	800f9ea <_dtoa_r+0x9ea>
 800fa26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	db04      	blt.n	800fa36 <_dtoa_r+0xa36>
 800fa2c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800fa2e:	430b      	orrs	r3, r1
 800fa30:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fa32:	430b      	orrs	r3, r1
 800fa34:	d120      	bne.n	800fa78 <_dtoa_r+0xa78>
 800fa36:	2a00      	cmp	r2, #0
 800fa38:	dded      	ble.n	800fa16 <_dtoa_r+0xa16>
 800fa3a:	4649      	mov	r1, r9
 800fa3c:	2201      	movs	r2, #1
 800fa3e:	4658      	mov	r0, fp
 800fa40:	f000 fed4 	bl	80107ec <__lshift>
 800fa44:	4621      	mov	r1, r4
 800fa46:	4681      	mov	r9, r0
 800fa48:	f000 ff3c 	bl	80108c4 <__mcmp>
 800fa4c:	2800      	cmp	r0, #0
 800fa4e:	dc03      	bgt.n	800fa58 <_dtoa_r+0xa58>
 800fa50:	d1e1      	bne.n	800fa16 <_dtoa_r+0xa16>
 800fa52:	f018 0f01 	tst.w	r8, #1
 800fa56:	d0de      	beq.n	800fa16 <_dtoa_r+0xa16>
 800fa58:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fa5c:	d1d8      	bne.n	800fa10 <_dtoa_r+0xa10>
 800fa5e:	2339      	movs	r3, #57	@ 0x39
 800fa60:	9a02      	ldr	r2, [sp, #8]
 800fa62:	7013      	strb	r3, [r2, #0]
 800fa64:	4633      	mov	r3, r6
 800fa66:	461e      	mov	r6, r3
 800fa68:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fa6c:	3b01      	subs	r3, #1
 800fa6e:	2a39      	cmp	r2, #57	@ 0x39
 800fa70:	d052      	beq.n	800fb18 <_dtoa_r+0xb18>
 800fa72:	3201      	adds	r2, #1
 800fa74:	701a      	strb	r2, [r3, #0]
 800fa76:	e60e      	b.n	800f696 <_dtoa_r+0x696>
 800fa78:	2a00      	cmp	r2, #0
 800fa7a:	dd07      	ble.n	800fa8c <_dtoa_r+0xa8c>
 800fa7c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fa80:	d0ed      	beq.n	800fa5e <_dtoa_r+0xa5e>
 800fa82:	9a02      	ldr	r2, [sp, #8]
 800fa84:	f108 0301 	add.w	r3, r8, #1
 800fa88:	7013      	strb	r3, [r2, #0]
 800fa8a:	e604      	b.n	800f696 <_dtoa_r+0x696>
 800fa8c:	9b07      	ldr	r3, [sp, #28]
 800fa8e:	9a07      	ldr	r2, [sp, #28]
 800fa90:	f803 8c01 	strb.w	r8, [r3, #-1]
 800fa94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa96:	4293      	cmp	r3, r2
 800fa98:	d028      	beq.n	800faec <_dtoa_r+0xaec>
 800fa9a:	4649      	mov	r1, r9
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	220a      	movs	r2, #10
 800faa0:	4658      	mov	r0, fp
 800faa2:	f000 fcaf 	bl	8010404 <__multadd>
 800faa6:	42af      	cmp	r7, r5
 800faa8:	4681      	mov	r9, r0
 800faaa:	f04f 0300 	mov.w	r3, #0
 800faae:	f04f 020a 	mov.w	r2, #10
 800fab2:	4639      	mov	r1, r7
 800fab4:	4658      	mov	r0, fp
 800fab6:	d107      	bne.n	800fac8 <_dtoa_r+0xac8>
 800fab8:	f000 fca4 	bl	8010404 <__multadd>
 800fabc:	4607      	mov	r7, r0
 800fabe:	4605      	mov	r5, r0
 800fac0:	9b07      	ldr	r3, [sp, #28]
 800fac2:	3301      	adds	r3, #1
 800fac4:	9307      	str	r3, [sp, #28]
 800fac6:	e774      	b.n	800f9b2 <_dtoa_r+0x9b2>
 800fac8:	f000 fc9c 	bl	8010404 <__multadd>
 800facc:	4629      	mov	r1, r5
 800face:	4607      	mov	r7, r0
 800fad0:	2300      	movs	r3, #0
 800fad2:	220a      	movs	r2, #10
 800fad4:	4658      	mov	r0, fp
 800fad6:	f000 fc95 	bl	8010404 <__multadd>
 800fada:	4605      	mov	r5, r0
 800fadc:	e7f0      	b.n	800fac0 <_dtoa_r+0xac0>
 800fade:	9b08      	ldr	r3, [sp, #32]
 800fae0:	2700      	movs	r7, #0
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	bfcc      	ite	gt
 800fae6:	461e      	movgt	r6, r3
 800fae8:	2601      	movle	r6, #1
 800faea:	4456      	add	r6, sl
 800faec:	4649      	mov	r1, r9
 800faee:	2201      	movs	r2, #1
 800faf0:	4658      	mov	r0, fp
 800faf2:	f000 fe7b 	bl	80107ec <__lshift>
 800faf6:	4621      	mov	r1, r4
 800faf8:	4681      	mov	r9, r0
 800fafa:	f000 fee3 	bl	80108c4 <__mcmp>
 800fafe:	2800      	cmp	r0, #0
 800fb00:	dcb0      	bgt.n	800fa64 <_dtoa_r+0xa64>
 800fb02:	d102      	bne.n	800fb0a <_dtoa_r+0xb0a>
 800fb04:	f018 0f01 	tst.w	r8, #1
 800fb08:	d1ac      	bne.n	800fa64 <_dtoa_r+0xa64>
 800fb0a:	4633      	mov	r3, r6
 800fb0c:	461e      	mov	r6, r3
 800fb0e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb12:	2a30      	cmp	r2, #48	@ 0x30
 800fb14:	d0fa      	beq.n	800fb0c <_dtoa_r+0xb0c>
 800fb16:	e5be      	b.n	800f696 <_dtoa_r+0x696>
 800fb18:	459a      	cmp	sl, r3
 800fb1a:	d1a4      	bne.n	800fa66 <_dtoa_r+0xa66>
 800fb1c:	9b04      	ldr	r3, [sp, #16]
 800fb1e:	3301      	adds	r3, #1
 800fb20:	9304      	str	r3, [sp, #16]
 800fb22:	2331      	movs	r3, #49	@ 0x31
 800fb24:	f88a 3000 	strb.w	r3, [sl]
 800fb28:	e5b5      	b.n	800f696 <_dtoa_r+0x696>
 800fb2a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800fb2c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fb8c <_dtoa_r+0xb8c>
 800fb30:	b11b      	cbz	r3, 800fb3a <_dtoa_r+0xb3a>
 800fb32:	f10a 0308 	add.w	r3, sl, #8
 800fb36:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800fb38:	6013      	str	r3, [r2, #0]
 800fb3a:	4650      	mov	r0, sl
 800fb3c:	b017      	add	sp, #92	@ 0x5c
 800fb3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800fb44:	2b01      	cmp	r3, #1
 800fb46:	f77f ae3d 	ble.w	800f7c4 <_dtoa_r+0x7c4>
 800fb4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fb4c:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb4e:	2001      	movs	r0, #1
 800fb50:	e65b      	b.n	800f80a <_dtoa_r+0x80a>
 800fb52:	9b08      	ldr	r3, [sp, #32]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	f77f aed6 	ble.w	800f906 <_dtoa_r+0x906>
 800fb5a:	4656      	mov	r6, sl
 800fb5c:	4621      	mov	r1, r4
 800fb5e:	4648      	mov	r0, r9
 800fb60:	f7ff f9c4 	bl	800eeec <quorem>
 800fb64:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fb68:	9b08      	ldr	r3, [sp, #32]
 800fb6a:	f806 8b01 	strb.w	r8, [r6], #1
 800fb6e:	eba6 020a 	sub.w	r2, r6, sl
 800fb72:	4293      	cmp	r3, r2
 800fb74:	ddb3      	ble.n	800fade <_dtoa_r+0xade>
 800fb76:	4649      	mov	r1, r9
 800fb78:	2300      	movs	r3, #0
 800fb7a:	220a      	movs	r2, #10
 800fb7c:	4658      	mov	r0, fp
 800fb7e:	f000 fc41 	bl	8010404 <__multadd>
 800fb82:	4681      	mov	r9, r0
 800fb84:	e7ea      	b.n	800fb5c <_dtoa_r+0xb5c>
 800fb86:	bf00      	nop
 800fb88:	0801254b 	.word	0x0801254b
 800fb8c:	080124e6 	.word	0x080124e6

0800fb90 <_free_r>:
 800fb90:	b538      	push	{r3, r4, r5, lr}
 800fb92:	4605      	mov	r5, r0
 800fb94:	2900      	cmp	r1, #0
 800fb96:	d040      	beq.n	800fc1a <_free_r+0x8a>
 800fb98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb9c:	1f0c      	subs	r4, r1, #4
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	bfb8      	it	lt
 800fba2:	18e4      	addlt	r4, r4, r3
 800fba4:	f7fc fde4 	bl	800c770 <__malloc_lock>
 800fba8:	4a1c      	ldr	r2, [pc, #112]	@ (800fc1c <_free_r+0x8c>)
 800fbaa:	6813      	ldr	r3, [r2, #0]
 800fbac:	b933      	cbnz	r3, 800fbbc <_free_r+0x2c>
 800fbae:	6063      	str	r3, [r4, #4]
 800fbb0:	6014      	str	r4, [r2, #0]
 800fbb2:	4628      	mov	r0, r5
 800fbb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbb8:	f7fc bde0 	b.w	800c77c <__malloc_unlock>
 800fbbc:	42a3      	cmp	r3, r4
 800fbbe:	d908      	bls.n	800fbd2 <_free_r+0x42>
 800fbc0:	6820      	ldr	r0, [r4, #0]
 800fbc2:	1821      	adds	r1, r4, r0
 800fbc4:	428b      	cmp	r3, r1
 800fbc6:	bf01      	itttt	eq
 800fbc8:	6819      	ldreq	r1, [r3, #0]
 800fbca:	685b      	ldreq	r3, [r3, #4]
 800fbcc:	1809      	addeq	r1, r1, r0
 800fbce:	6021      	streq	r1, [r4, #0]
 800fbd0:	e7ed      	b.n	800fbae <_free_r+0x1e>
 800fbd2:	461a      	mov	r2, r3
 800fbd4:	685b      	ldr	r3, [r3, #4]
 800fbd6:	b10b      	cbz	r3, 800fbdc <_free_r+0x4c>
 800fbd8:	42a3      	cmp	r3, r4
 800fbda:	d9fa      	bls.n	800fbd2 <_free_r+0x42>
 800fbdc:	6811      	ldr	r1, [r2, #0]
 800fbde:	1850      	adds	r0, r2, r1
 800fbe0:	42a0      	cmp	r0, r4
 800fbe2:	d10b      	bne.n	800fbfc <_free_r+0x6c>
 800fbe4:	6820      	ldr	r0, [r4, #0]
 800fbe6:	4401      	add	r1, r0
 800fbe8:	1850      	adds	r0, r2, r1
 800fbea:	4283      	cmp	r3, r0
 800fbec:	6011      	str	r1, [r2, #0]
 800fbee:	d1e0      	bne.n	800fbb2 <_free_r+0x22>
 800fbf0:	6818      	ldr	r0, [r3, #0]
 800fbf2:	685b      	ldr	r3, [r3, #4]
 800fbf4:	4408      	add	r0, r1
 800fbf6:	6010      	str	r0, [r2, #0]
 800fbf8:	6053      	str	r3, [r2, #4]
 800fbfa:	e7da      	b.n	800fbb2 <_free_r+0x22>
 800fbfc:	d902      	bls.n	800fc04 <_free_r+0x74>
 800fbfe:	230c      	movs	r3, #12
 800fc00:	602b      	str	r3, [r5, #0]
 800fc02:	e7d6      	b.n	800fbb2 <_free_r+0x22>
 800fc04:	6820      	ldr	r0, [r4, #0]
 800fc06:	1821      	adds	r1, r4, r0
 800fc08:	428b      	cmp	r3, r1
 800fc0a:	bf01      	itttt	eq
 800fc0c:	6819      	ldreq	r1, [r3, #0]
 800fc0e:	685b      	ldreq	r3, [r3, #4]
 800fc10:	1809      	addeq	r1, r1, r0
 800fc12:	6021      	streq	r1, [r4, #0]
 800fc14:	6063      	str	r3, [r4, #4]
 800fc16:	6054      	str	r4, [r2, #4]
 800fc18:	e7cb      	b.n	800fbb2 <_free_r+0x22>
 800fc1a:	bd38      	pop	{r3, r4, r5, pc}
 800fc1c:	20005a08 	.word	0x20005a08

0800fc20 <rshift>:
 800fc20:	6903      	ldr	r3, [r0, #16]
 800fc22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc26:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fc2a:	f100 0414 	add.w	r4, r0, #20
 800fc2e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fc32:	dd46      	ble.n	800fcc2 <rshift+0xa2>
 800fc34:	f011 011f 	ands.w	r1, r1, #31
 800fc38:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fc3c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fc40:	d10c      	bne.n	800fc5c <rshift+0x3c>
 800fc42:	4629      	mov	r1, r5
 800fc44:	f100 0710 	add.w	r7, r0, #16
 800fc48:	42b1      	cmp	r1, r6
 800fc4a:	d335      	bcc.n	800fcb8 <rshift+0x98>
 800fc4c:	1a9b      	subs	r3, r3, r2
 800fc4e:	009b      	lsls	r3, r3, #2
 800fc50:	1eea      	subs	r2, r5, #3
 800fc52:	4296      	cmp	r6, r2
 800fc54:	bf38      	it	cc
 800fc56:	2300      	movcc	r3, #0
 800fc58:	4423      	add	r3, r4
 800fc5a:	e015      	b.n	800fc88 <rshift+0x68>
 800fc5c:	46a1      	mov	r9, r4
 800fc5e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fc62:	f1c1 0820 	rsb	r8, r1, #32
 800fc66:	40cf      	lsrs	r7, r1
 800fc68:	f105 0e04 	add.w	lr, r5, #4
 800fc6c:	4576      	cmp	r6, lr
 800fc6e:	46f4      	mov	ip, lr
 800fc70:	d816      	bhi.n	800fca0 <rshift+0x80>
 800fc72:	1a9a      	subs	r2, r3, r2
 800fc74:	0092      	lsls	r2, r2, #2
 800fc76:	3a04      	subs	r2, #4
 800fc78:	3501      	adds	r5, #1
 800fc7a:	42ae      	cmp	r6, r5
 800fc7c:	bf38      	it	cc
 800fc7e:	2200      	movcc	r2, #0
 800fc80:	18a3      	adds	r3, r4, r2
 800fc82:	50a7      	str	r7, [r4, r2]
 800fc84:	b107      	cbz	r7, 800fc88 <rshift+0x68>
 800fc86:	3304      	adds	r3, #4
 800fc88:	42a3      	cmp	r3, r4
 800fc8a:	eba3 0204 	sub.w	r2, r3, r4
 800fc8e:	bf08      	it	eq
 800fc90:	2300      	moveq	r3, #0
 800fc92:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fc96:	6102      	str	r2, [r0, #16]
 800fc98:	bf08      	it	eq
 800fc9a:	6143      	streq	r3, [r0, #20]
 800fc9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fca0:	f8dc c000 	ldr.w	ip, [ip]
 800fca4:	fa0c fc08 	lsl.w	ip, ip, r8
 800fca8:	ea4c 0707 	orr.w	r7, ip, r7
 800fcac:	f849 7b04 	str.w	r7, [r9], #4
 800fcb0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fcb4:	40cf      	lsrs	r7, r1
 800fcb6:	e7d9      	b.n	800fc6c <rshift+0x4c>
 800fcb8:	f851 cb04 	ldr.w	ip, [r1], #4
 800fcbc:	f847 cf04 	str.w	ip, [r7, #4]!
 800fcc0:	e7c2      	b.n	800fc48 <rshift+0x28>
 800fcc2:	4623      	mov	r3, r4
 800fcc4:	e7e0      	b.n	800fc88 <rshift+0x68>

0800fcc6 <__hexdig_fun>:
 800fcc6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800fcca:	2b09      	cmp	r3, #9
 800fccc:	d802      	bhi.n	800fcd4 <__hexdig_fun+0xe>
 800fcce:	3820      	subs	r0, #32
 800fcd0:	b2c0      	uxtb	r0, r0
 800fcd2:	4770      	bx	lr
 800fcd4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800fcd8:	2b05      	cmp	r3, #5
 800fcda:	d801      	bhi.n	800fce0 <__hexdig_fun+0x1a>
 800fcdc:	3847      	subs	r0, #71	@ 0x47
 800fcde:	e7f7      	b.n	800fcd0 <__hexdig_fun+0xa>
 800fce0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800fce4:	2b05      	cmp	r3, #5
 800fce6:	d801      	bhi.n	800fcec <__hexdig_fun+0x26>
 800fce8:	3827      	subs	r0, #39	@ 0x27
 800fcea:	e7f1      	b.n	800fcd0 <__hexdig_fun+0xa>
 800fcec:	2000      	movs	r0, #0
 800fcee:	4770      	bx	lr

0800fcf0 <__gethex>:
 800fcf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcf4:	468a      	mov	sl, r1
 800fcf6:	4690      	mov	r8, r2
 800fcf8:	b085      	sub	sp, #20
 800fcfa:	9302      	str	r3, [sp, #8]
 800fcfc:	680b      	ldr	r3, [r1, #0]
 800fcfe:	9001      	str	r0, [sp, #4]
 800fd00:	1c9c      	adds	r4, r3, #2
 800fd02:	46a1      	mov	r9, r4
 800fd04:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fd08:	2830      	cmp	r0, #48	@ 0x30
 800fd0a:	d0fa      	beq.n	800fd02 <__gethex+0x12>
 800fd0c:	eba9 0303 	sub.w	r3, r9, r3
 800fd10:	f1a3 0b02 	sub.w	fp, r3, #2
 800fd14:	f7ff ffd7 	bl	800fcc6 <__hexdig_fun>
 800fd18:	4605      	mov	r5, r0
 800fd1a:	2800      	cmp	r0, #0
 800fd1c:	d168      	bne.n	800fdf0 <__gethex+0x100>
 800fd1e:	2201      	movs	r2, #1
 800fd20:	4648      	mov	r0, r9
 800fd22:	499f      	ldr	r1, [pc, #636]	@ (800ffa0 <__gethex+0x2b0>)
 800fd24:	f7fe f9b4 	bl	800e090 <strncmp>
 800fd28:	4607      	mov	r7, r0
 800fd2a:	2800      	cmp	r0, #0
 800fd2c:	d167      	bne.n	800fdfe <__gethex+0x10e>
 800fd2e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fd32:	4626      	mov	r6, r4
 800fd34:	f7ff ffc7 	bl	800fcc6 <__hexdig_fun>
 800fd38:	2800      	cmp	r0, #0
 800fd3a:	d062      	beq.n	800fe02 <__gethex+0x112>
 800fd3c:	4623      	mov	r3, r4
 800fd3e:	7818      	ldrb	r0, [r3, #0]
 800fd40:	4699      	mov	r9, r3
 800fd42:	2830      	cmp	r0, #48	@ 0x30
 800fd44:	f103 0301 	add.w	r3, r3, #1
 800fd48:	d0f9      	beq.n	800fd3e <__gethex+0x4e>
 800fd4a:	f7ff ffbc 	bl	800fcc6 <__hexdig_fun>
 800fd4e:	fab0 f580 	clz	r5, r0
 800fd52:	f04f 0b01 	mov.w	fp, #1
 800fd56:	096d      	lsrs	r5, r5, #5
 800fd58:	464a      	mov	r2, r9
 800fd5a:	4616      	mov	r6, r2
 800fd5c:	7830      	ldrb	r0, [r6, #0]
 800fd5e:	3201      	adds	r2, #1
 800fd60:	f7ff ffb1 	bl	800fcc6 <__hexdig_fun>
 800fd64:	2800      	cmp	r0, #0
 800fd66:	d1f8      	bne.n	800fd5a <__gethex+0x6a>
 800fd68:	2201      	movs	r2, #1
 800fd6a:	4630      	mov	r0, r6
 800fd6c:	498c      	ldr	r1, [pc, #560]	@ (800ffa0 <__gethex+0x2b0>)
 800fd6e:	f7fe f98f 	bl	800e090 <strncmp>
 800fd72:	2800      	cmp	r0, #0
 800fd74:	d13f      	bne.n	800fdf6 <__gethex+0x106>
 800fd76:	b944      	cbnz	r4, 800fd8a <__gethex+0x9a>
 800fd78:	1c74      	adds	r4, r6, #1
 800fd7a:	4622      	mov	r2, r4
 800fd7c:	4616      	mov	r6, r2
 800fd7e:	7830      	ldrb	r0, [r6, #0]
 800fd80:	3201      	adds	r2, #1
 800fd82:	f7ff ffa0 	bl	800fcc6 <__hexdig_fun>
 800fd86:	2800      	cmp	r0, #0
 800fd88:	d1f8      	bne.n	800fd7c <__gethex+0x8c>
 800fd8a:	1ba4      	subs	r4, r4, r6
 800fd8c:	00a7      	lsls	r7, r4, #2
 800fd8e:	7833      	ldrb	r3, [r6, #0]
 800fd90:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800fd94:	2b50      	cmp	r3, #80	@ 0x50
 800fd96:	d13e      	bne.n	800fe16 <__gethex+0x126>
 800fd98:	7873      	ldrb	r3, [r6, #1]
 800fd9a:	2b2b      	cmp	r3, #43	@ 0x2b
 800fd9c:	d033      	beq.n	800fe06 <__gethex+0x116>
 800fd9e:	2b2d      	cmp	r3, #45	@ 0x2d
 800fda0:	d034      	beq.n	800fe0c <__gethex+0x11c>
 800fda2:	2400      	movs	r4, #0
 800fda4:	1c71      	adds	r1, r6, #1
 800fda6:	7808      	ldrb	r0, [r1, #0]
 800fda8:	f7ff ff8d 	bl	800fcc6 <__hexdig_fun>
 800fdac:	1e43      	subs	r3, r0, #1
 800fdae:	b2db      	uxtb	r3, r3
 800fdb0:	2b18      	cmp	r3, #24
 800fdb2:	d830      	bhi.n	800fe16 <__gethex+0x126>
 800fdb4:	f1a0 0210 	sub.w	r2, r0, #16
 800fdb8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fdbc:	f7ff ff83 	bl	800fcc6 <__hexdig_fun>
 800fdc0:	f100 3cff 	add.w	ip, r0, #4294967295
 800fdc4:	fa5f fc8c 	uxtb.w	ip, ip
 800fdc8:	f1bc 0f18 	cmp.w	ip, #24
 800fdcc:	f04f 030a 	mov.w	r3, #10
 800fdd0:	d91e      	bls.n	800fe10 <__gethex+0x120>
 800fdd2:	b104      	cbz	r4, 800fdd6 <__gethex+0xe6>
 800fdd4:	4252      	negs	r2, r2
 800fdd6:	4417      	add	r7, r2
 800fdd8:	f8ca 1000 	str.w	r1, [sl]
 800fddc:	b1ed      	cbz	r5, 800fe1a <__gethex+0x12a>
 800fdde:	f1bb 0f00 	cmp.w	fp, #0
 800fde2:	bf0c      	ite	eq
 800fde4:	2506      	moveq	r5, #6
 800fde6:	2500      	movne	r5, #0
 800fde8:	4628      	mov	r0, r5
 800fdea:	b005      	add	sp, #20
 800fdec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdf0:	2500      	movs	r5, #0
 800fdf2:	462c      	mov	r4, r5
 800fdf4:	e7b0      	b.n	800fd58 <__gethex+0x68>
 800fdf6:	2c00      	cmp	r4, #0
 800fdf8:	d1c7      	bne.n	800fd8a <__gethex+0x9a>
 800fdfa:	4627      	mov	r7, r4
 800fdfc:	e7c7      	b.n	800fd8e <__gethex+0x9e>
 800fdfe:	464e      	mov	r6, r9
 800fe00:	462f      	mov	r7, r5
 800fe02:	2501      	movs	r5, #1
 800fe04:	e7c3      	b.n	800fd8e <__gethex+0x9e>
 800fe06:	2400      	movs	r4, #0
 800fe08:	1cb1      	adds	r1, r6, #2
 800fe0a:	e7cc      	b.n	800fda6 <__gethex+0xb6>
 800fe0c:	2401      	movs	r4, #1
 800fe0e:	e7fb      	b.n	800fe08 <__gethex+0x118>
 800fe10:	fb03 0002 	mla	r0, r3, r2, r0
 800fe14:	e7ce      	b.n	800fdb4 <__gethex+0xc4>
 800fe16:	4631      	mov	r1, r6
 800fe18:	e7de      	b.n	800fdd8 <__gethex+0xe8>
 800fe1a:	4629      	mov	r1, r5
 800fe1c:	eba6 0309 	sub.w	r3, r6, r9
 800fe20:	3b01      	subs	r3, #1
 800fe22:	2b07      	cmp	r3, #7
 800fe24:	dc0a      	bgt.n	800fe3c <__gethex+0x14c>
 800fe26:	9801      	ldr	r0, [sp, #4]
 800fe28:	f000 fa8a 	bl	8010340 <_Balloc>
 800fe2c:	4604      	mov	r4, r0
 800fe2e:	b940      	cbnz	r0, 800fe42 <__gethex+0x152>
 800fe30:	4602      	mov	r2, r0
 800fe32:	21e4      	movs	r1, #228	@ 0xe4
 800fe34:	4b5b      	ldr	r3, [pc, #364]	@ (800ffa4 <__gethex+0x2b4>)
 800fe36:	485c      	ldr	r0, [pc, #368]	@ (800ffa8 <__gethex+0x2b8>)
 800fe38:	f7ff f832 	bl	800eea0 <__assert_func>
 800fe3c:	3101      	adds	r1, #1
 800fe3e:	105b      	asrs	r3, r3, #1
 800fe40:	e7ef      	b.n	800fe22 <__gethex+0x132>
 800fe42:	2300      	movs	r3, #0
 800fe44:	f100 0a14 	add.w	sl, r0, #20
 800fe48:	4655      	mov	r5, sl
 800fe4a:	469b      	mov	fp, r3
 800fe4c:	45b1      	cmp	r9, r6
 800fe4e:	d337      	bcc.n	800fec0 <__gethex+0x1d0>
 800fe50:	f845 bb04 	str.w	fp, [r5], #4
 800fe54:	eba5 050a 	sub.w	r5, r5, sl
 800fe58:	10ad      	asrs	r5, r5, #2
 800fe5a:	6125      	str	r5, [r4, #16]
 800fe5c:	4658      	mov	r0, fp
 800fe5e:	f000 fb61 	bl	8010524 <__hi0bits>
 800fe62:	016d      	lsls	r5, r5, #5
 800fe64:	f8d8 6000 	ldr.w	r6, [r8]
 800fe68:	1a2d      	subs	r5, r5, r0
 800fe6a:	42b5      	cmp	r5, r6
 800fe6c:	dd54      	ble.n	800ff18 <__gethex+0x228>
 800fe6e:	1bad      	subs	r5, r5, r6
 800fe70:	4629      	mov	r1, r5
 800fe72:	4620      	mov	r0, r4
 800fe74:	f000 fee9 	bl	8010c4a <__any_on>
 800fe78:	4681      	mov	r9, r0
 800fe7a:	b178      	cbz	r0, 800fe9c <__gethex+0x1ac>
 800fe7c:	f04f 0901 	mov.w	r9, #1
 800fe80:	1e6b      	subs	r3, r5, #1
 800fe82:	1159      	asrs	r1, r3, #5
 800fe84:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fe88:	f003 021f 	and.w	r2, r3, #31
 800fe8c:	fa09 f202 	lsl.w	r2, r9, r2
 800fe90:	420a      	tst	r2, r1
 800fe92:	d003      	beq.n	800fe9c <__gethex+0x1ac>
 800fe94:	454b      	cmp	r3, r9
 800fe96:	dc36      	bgt.n	800ff06 <__gethex+0x216>
 800fe98:	f04f 0902 	mov.w	r9, #2
 800fe9c:	4629      	mov	r1, r5
 800fe9e:	4620      	mov	r0, r4
 800fea0:	f7ff febe 	bl	800fc20 <rshift>
 800fea4:	442f      	add	r7, r5
 800fea6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800feaa:	42bb      	cmp	r3, r7
 800feac:	da42      	bge.n	800ff34 <__gethex+0x244>
 800feae:	4621      	mov	r1, r4
 800feb0:	9801      	ldr	r0, [sp, #4]
 800feb2:	f000 fa85 	bl	80103c0 <_Bfree>
 800feb6:	2300      	movs	r3, #0
 800feb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800feba:	25a3      	movs	r5, #163	@ 0xa3
 800febc:	6013      	str	r3, [r2, #0]
 800febe:	e793      	b.n	800fde8 <__gethex+0xf8>
 800fec0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800fec4:	2a2e      	cmp	r2, #46	@ 0x2e
 800fec6:	d012      	beq.n	800feee <__gethex+0x1fe>
 800fec8:	2b20      	cmp	r3, #32
 800feca:	d104      	bne.n	800fed6 <__gethex+0x1e6>
 800fecc:	f845 bb04 	str.w	fp, [r5], #4
 800fed0:	f04f 0b00 	mov.w	fp, #0
 800fed4:	465b      	mov	r3, fp
 800fed6:	7830      	ldrb	r0, [r6, #0]
 800fed8:	9303      	str	r3, [sp, #12]
 800feda:	f7ff fef4 	bl	800fcc6 <__hexdig_fun>
 800fede:	9b03      	ldr	r3, [sp, #12]
 800fee0:	f000 000f 	and.w	r0, r0, #15
 800fee4:	4098      	lsls	r0, r3
 800fee6:	ea4b 0b00 	orr.w	fp, fp, r0
 800feea:	3304      	adds	r3, #4
 800feec:	e7ae      	b.n	800fe4c <__gethex+0x15c>
 800feee:	45b1      	cmp	r9, r6
 800fef0:	d8ea      	bhi.n	800fec8 <__gethex+0x1d8>
 800fef2:	2201      	movs	r2, #1
 800fef4:	4630      	mov	r0, r6
 800fef6:	492a      	ldr	r1, [pc, #168]	@ (800ffa0 <__gethex+0x2b0>)
 800fef8:	9303      	str	r3, [sp, #12]
 800fefa:	f7fe f8c9 	bl	800e090 <strncmp>
 800fefe:	9b03      	ldr	r3, [sp, #12]
 800ff00:	2800      	cmp	r0, #0
 800ff02:	d1e1      	bne.n	800fec8 <__gethex+0x1d8>
 800ff04:	e7a2      	b.n	800fe4c <__gethex+0x15c>
 800ff06:	4620      	mov	r0, r4
 800ff08:	1ea9      	subs	r1, r5, #2
 800ff0a:	f000 fe9e 	bl	8010c4a <__any_on>
 800ff0e:	2800      	cmp	r0, #0
 800ff10:	d0c2      	beq.n	800fe98 <__gethex+0x1a8>
 800ff12:	f04f 0903 	mov.w	r9, #3
 800ff16:	e7c1      	b.n	800fe9c <__gethex+0x1ac>
 800ff18:	da09      	bge.n	800ff2e <__gethex+0x23e>
 800ff1a:	1b75      	subs	r5, r6, r5
 800ff1c:	4621      	mov	r1, r4
 800ff1e:	462a      	mov	r2, r5
 800ff20:	9801      	ldr	r0, [sp, #4]
 800ff22:	f000 fc63 	bl	80107ec <__lshift>
 800ff26:	4604      	mov	r4, r0
 800ff28:	1b7f      	subs	r7, r7, r5
 800ff2a:	f100 0a14 	add.w	sl, r0, #20
 800ff2e:	f04f 0900 	mov.w	r9, #0
 800ff32:	e7b8      	b.n	800fea6 <__gethex+0x1b6>
 800ff34:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ff38:	42bd      	cmp	r5, r7
 800ff3a:	dd6f      	ble.n	801001c <__gethex+0x32c>
 800ff3c:	1bed      	subs	r5, r5, r7
 800ff3e:	42ae      	cmp	r6, r5
 800ff40:	dc34      	bgt.n	800ffac <__gethex+0x2bc>
 800ff42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ff46:	2b02      	cmp	r3, #2
 800ff48:	d022      	beq.n	800ff90 <__gethex+0x2a0>
 800ff4a:	2b03      	cmp	r3, #3
 800ff4c:	d024      	beq.n	800ff98 <__gethex+0x2a8>
 800ff4e:	2b01      	cmp	r3, #1
 800ff50:	d115      	bne.n	800ff7e <__gethex+0x28e>
 800ff52:	42ae      	cmp	r6, r5
 800ff54:	d113      	bne.n	800ff7e <__gethex+0x28e>
 800ff56:	2e01      	cmp	r6, #1
 800ff58:	d10b      	bne.n	800ff72 <__gethex+0x282>
 800ff5a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ff5e:	9a02      	ldr	r2, [sp, #8]
 800ff60:	2562      	movs	r5, #98	@ 0x62
 800ff62:	6013      	str	r3, [r2, #0]
 800ff64:	2301      	movs	r3, #1
 800ff66:	6123      	str	r3, [r4, #16]
 800ff68:	f8ca 3000 	str.w	r3, [sl]
 800ff6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff6e:	601c      	str	r4, [r3, #0]
 800ff70:	e73a      	b.n	800fde8 <__gethex+0xf8>
 800ff72:	4620      	mov	r0, r4
 800ff74:	1e71      	subs	r1, r6, #1
 800ff76:	f000 fe68 	bl	8010c4a <__any_on>
 800ff7a:	2800      	cmp	r0, #0
 800ff7c:	d1ed      	bne.n	800ff5a <__gethex+0x26a>
 800ff7e:	4621      	mov	r1, r4
 800ff80:	9801      	ldr	r0, [sp, #4]
 800ff82:	f000 fa1d 	bl	80103c0 <_Bfree>
 800ff86:	2300      	movs	r3, #0
 800ff88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ff8a:	2550      	movs	r5, #80	@ 0x50
 800ff8c:	6013      	str	r3, [r2, #0]
 800ff8e:	e72b      	b.n	800fde8 <__gethex+0xf8>
 800ff90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d1f3      	bne.n	800ff7e <__gethex+0x28e>
 800ff96:	e7e0      	b.n	800ff5a <__gethex+0x26a>
 800ff98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d1dd      	bne.n	800ff5a <__gethex+0x26a>
 800ff9e:	e7ee      	b.n	800ff7e <__gethex+0x28e>
 800ffa0:	080121fa 	.word	0x080121fa
 800ffa4:	0801254b 	.word	0x0801254b
 800ffa8:	0801255c 	.word	0x0801255c
 800ffac:	1e6f      	subs	r7, r5, #1
 800ffae:	f1b9 0f00 	cmp.w	r9, #0
 800ffb2:	d130      	bne.n	8010016 <__gethex+0x326>
 800ffb4:	b127      	cbz	r7, 800ffc0 <__gethex+0x2d0>
 800ffb6:	4639      	mov	r1, r7
 800ffb8:	4620      	mov	r0, r4
 800ffba:	f000 fe46 	bl	8010c4a <__any_on>
 800ffbe:	4681      	mov	r9, r0
 800ffc0:	2301      	movs	r3, #1
 800ffc2:	4629      	mov	r1, r5
 800ffc4:	1b76      	subs	r6, r6, r5
 800ffc6:	2502      	movs	r5, #2
 800ffc8:	117a      	asrs	r2, r7, #5
 800ffca:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ffce:	f007 071f 	and.w	r7, r7, #31
 800ffd2:	40bb      	lsls	r3, r7
 800ffd4:	4213      	tst	r3, r2
 800ffd6:	4620      	mov	r0, r4
 800ffd8:	bf18      	it	ne
 800ffda:	f049 0902 	orrne.w	r9, r9, #2
 800ffde:	f7ff fe1f 	bl	800fc20 <rshift>
 800ffe2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ffe6:	f1b9 0f00 	cmp.w	r9, #0
 800ffea:	d047      	beq.n	801007c <__gethex+0x38c>
 800ffec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fff0:	2b02      	cmp	r3, #2
 800fff2:	d015      	beq.n	8010020 <__gethex+0x330>
 800fff4:	2b03      	cmp	r3, #3
 800fff6:	d017      	beq.n	8010028 <__gethex+0x338>
 800fff8:	2b01      	cmp	r3, #1
 800fffa:	d109      	bne.n	8010010 <__gethex+0x320>
 800fffc:	f019 0f02 	tst.w	r9, #2
 8010000:	d006      	beq.n	8010010 <__gethex+0x320>
 8010002:	f8da 3000 	ldr.w	r3, [sl]
 8010006:	ea49 0903 	orr.w	r9, r9, r3
 801000a:	f019 0f01 	tst.w	r9, #1
 801000e:	d10e      	bne.n	801002e <__gethex+0x33e>
 8010010:	f045 0510 	orr.w	r5, r5, #16
 8010014:	e032      	b.n	801007c <__gethex+0x38c>
 8010016:	f04f 0901 	mov.w	r9, #1
 801001a:	e7d1      	b.n	800ffc0 <__gethex+0x2d0>
 801001c:	2501      	movs	r5, #1
 801001e:	e7e2      	b.n	800ffe6 <__gethex+0x2f6>
 8010020:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010022:	f1c3 0301 	rsb	r3, r3, #1
 8010026:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010028:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801002a:	2b00      	cmp	r3, #0
 801002c:	d0f0      	beq.n	8010010 <__gethex+0x320>
 801002e:	f04f 0c00 	mov.w	ip, #0
 8010032:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010036:	f104 0314 	add.w	r3, r4, #20
 801003a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801003e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010042:	4618      	mov	r0, r3
 8010044:	f853 2b04 	ldr.w	r2, [r3], #4
 8010048:	f1b2 3fff 	cmp.w	r2, #4294967295
 801004c:	d01b      	beq.n	8010086 <__gethex+0x396>
 801004e:	3201      	adds	r2, #1
 8010050:	6002      	str	r2, [r0, #0]
 8010052:	2d02      	cmp	r5, #2
 8010054:	f104 0314 	add.w	r3, r4, #20
 8010058:	d13c      	bne.n	80100d4 <__gethex+0x3e4>
 801005a:	f8d8 2000 	ldr.w	r2, [r8]
 801005e:	3a01      	subs	r2, #1
 8010060:	42b2      	cmp	r2, r6
 8010062:	d109      	bne.n	8010078 <__gethex+0x388>
 8010064:	2201      	movs	r2, #1
 8010066:	1171      	asrs	r1, r6, #5
 8010068:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801006c:	f006 061f 	and.w	r6, r6, #31
 8010070:	fa02 f606 	lsl.w	r6, r2, r6
 8010074:	421e      	tst	r6, r3
 8010076:	d13a      	bne.n	80100ee <__gethex+0x3fe>
 8010078:	f045 0520 	orr.w	r5, r5, #32
 801007c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801007e:	601c      	str	r4, [r3, #0]
 8010080:	9b02      	ldr	r3, [sp, #8]
 8010082:	601f      	str	r7, [r3, #0]
 8010084:	e6b0      	b.n	800fde8 <__gethex+0xf8>
 8010086:	4299      	cmp	r1, r3
 8010088:	f843 cc04 	str.w	ip, [r3, #-4]
 801008c:	d8d9      	bhi.n	8010042 <__gethex+0x352>
 801008e:	68a3      	ldr	r3, [r4, #8]
 8010090:	459b      	cmp	fp, r3
 8010092:	db17      	blt.n	80100c4 <__gethex+0x3d4>
 8010094:	6861      	ldr	r1, [r4, #4]
 8010096:	9801      	ldr	r0, [sp, #4]
 8010098:	3101      	adds	r1, #1
 801009a:	f000 f951 	bl	8010340 <_Balloc>
 801009e:	4681      	mov	r9, r0
 80100a0:	b918      	cbnz	r0, 80100aa <__gethex+0x3ba>
 80100a2:	4602      	mov	r2, r0
 80100a4:	2184      	movs	r1, #132	@ 0x84
 80100a6:	4b19      	ldr	r3, [pc, #100]	@ (801010c <__gethex+0x41c>)
 80100a8:	e6c5      	b.n	800fe36 <__gethex+0x146>
 80100aa:	6922      	ldr	r2, [r4, #16]
 80100ac:	f104 010c 	add.w	r1, r4, #12
 80100b0:	3202      	adds	r2, #2
 80100b2:	0092      	lsls	r2, r2, #2
 80100b4:	300c      	adds	r0, #12
 80100b6:	f7fe feda 	bl	800ee6e <memcpy>
 80100ba:	4621      	mov	r1, r4
 80100bc:	9801      	ldr	r0, [sp, #4]
 80100be:	f000 f97f 	bl	80103c0 <_Bfree>
 80100c2:	464c      	mov	r4, r9
 80100c4:	6923      	ldr	r3, [r4, #16]
 80100c6:	1c5a      	adds	r2, r3, #1
 80100c8:	6122      	str	r2, [r4, #16]
 80100ca:	2201      	movs	r2, #1
 80100cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80100d0:	615a      	str	r2, [r3, #20]
 80100d2:	e7be      	b.n	8010052 <__gethex+0x362>
 80100d4:	6922      	ldr	r2, [r4, #16]
 80100d6:	455a      	cmp	r2, fp
 80100d8:	dd0b      	ble.n	80100f2 <__gethex+0x402>
 80100da:	2101      	movs	r1, #1
 80100dc:	4620      	mov	r0, r4
 80100de:	f7ff fd9f 	bl	800fc20 <rshift>
 80100e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80100e6:	3701      	adds	r7, #1
 80100e8:	42bb      	cmp	r3, r7
 80100ea:	f6ff aee0 	blt.w	800feae <__gethex+0x1be>
 80100ee:	2501      	movs	r5, #1
 80100f0:	e7c2      	b.n	8010078 <__gethex+0x388>
 80100f2:	f016 061f 	ands.w	r6, r6, #31
 80100f6:	d0fa      	beq.n	80100ee <__gethex+0x3fe>
 80100f8:	4453      	add	r3, sl
 80100fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80100fe:	f000 fa11 	bl	8010524 <__hi0bits>
 8010102:	f1c6 0620 	rsb	r6, r6, #32
 8010106:	42b0      	cmp	r0, r6
 8010108:	dbe7      	blt.n	80100da <__gethex+0x3ea>
 801010a:	e7f0      	b.n	80100ee <__gethex+0x3fe>
 801010c:	0801254b 	.word	0x0801254b

08010110 <L_shift>:
 8010110:	f1c2 0208 	rsb	r2, r2, #8
 8010114:	0092      	lsls	r2, r2, #2
 8010116:	b570      	push	{r4, r5, r6, lr}
 8010118:	f1c2 0620 	rsb	r6, r2, #32
 801011c:	6843      	ldr	r3, [r0, #4]
 801011e:	6804      	ldr	r4, [r0, #0]
 8010120:	fa03 f506 	lsl.w	r5, r3, r6
 8010124:	432c      	orrs	r4, r5
 8010126:	40d3      	lsrs	r3, r2
 8010128:	6004      	str	r4, [r0, #0]
 801012a:	f840 3f04 	str.w	r3, [r0, #4]!
 801012e:	4288      	cmp	r0, r1
 8010130:	d3f4      	bcc.n	801011c <L_shift+0xc>
 8010132:	bd70      	pop	{r4, r5, r6, pc}

08010134 <__match>:
 8010134:	b530      	push	{r4, r5, lr}
 8010136:	6803      	ldr	r3, [r0, #0]
 8010138:	3301      	adds	r3, #1
 801013a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801013e:	b914      	cbnz	r4, 8010146 <__match+0x12>
 8010140:	6003      	str	r3, [r0, #0]
 8010142:	2001      	movs	r0, #1
 8010144:	bd30      	pop	{r4, r5, pc}
 8010146:	f813 2b01 	ldrb.w	r2, [r3], #1
 801014a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801014e:	2d19      	cmp	r5, #25
 8010150:	bf98      	it	ls
 8010152:	3220      	addls	r2, #32
 8010154:	42a2      	cmp	r2, r4
 8010156:	d0f0      	beq.n	801013a <__match+0x6>
 8010158:	2000      	movs	r0, #0
 801015a:	e7f3      	b.n	8010144 <__match+0x10>

0801015c <__hexnan>:
 801015c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010160:	2500      	movs	r5, #0
 8010162:	680b      	ldr	r3, [r1, #0]
 8010164:	4682      	mov	sl, r0
 8010166:	115e      	asrs	r6, r3, #5
 8010168:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801016c:	f013 031f 	ands.w	r3, r3, #31
 8010170:	bf18      	it	ne
 8010172:	3604      	addne	r6, #4
 8010174:	1f37      	subs	r7, r6, #4
 8010176:	4690      	mov	r8, r2
 8010178:	46b9      	mov	r9, r7
 801017a:	463c      	mov	r4, r7
 801017c:	46ab      	mov	fp, r5
 801017e:	b087      	sub	sp, #28
 8010180:	6801      	ldr	r1, [r0, #0]
 8010182:	9301      	str	r3, [sp, #4]
 8010184:	f846 5c04 	str.w	r5, [r6, #-4]
 8010188:	9502      	str	r5, [sp, #8]
 801018a:	784a      	ldrb	r2, [r1, #1]
 801018c:	1c4b      	adds	r3, r1, #1
 801018e:	9303      	str	r3, [sp, #12]
 8010190:	b342      	cbz	r2, 80101e4 <__hexnan+0x88>
 8010192:	4610      	mov	r0, r2
 8010194:	9105      	str	r1, [sp, #20]
 8010196:	9204      	str	r2, [sp, #16]
 8010198:	f7ff fd95 	bl	800fcc6 <__hexdig_fun>
 801019c:	2800      	cmp	r0, #0
 801019e:	d151      	bne.n	8010244 <__hexnan+0xe8>
 80101a0:	9a04      	ldr	r2, [sp, #16]
 80101a2:	9905      	ldr	r1, [sp, #20]
 80101a4:	2a20      	cmp	r2, #32
 80101a6:	d818      	bhi.n	80101da <__hexnan+0x7e>
 80101a8:	9b02      	ldr	r3, [sp, #8]
 80101aa:	459b      	cmp	fp, r3
 80101ac:	dd13      	ble.n	80101d6 <__hexnan+0x7a>
 80101ae:	454c      	cmp	r4, r9
 80101b0:	d206      	bcs.n	80101c0 <__hexnan+0x64>
 80101b2:	2d07      	cmp	r5, #7
 80101b4:	dc04      	bgt.n	80101c0 <__hexnan+0x64>
 80101b6:	462a      	mov	r2, r5
 80101b8:	4649      	mov	r1, r9
 80101ba:	4620      	mov	r0, r4
 80101bc:	f7ff ffa8 	bl	8010110 <L_shift>
 80101c0:	4544      	cmp	r4, r8
 80101c2:	d952      	bls.n	801026a <__hexnan+0x10e>
 80101c4:	2300      	movs	r3, #0
 80101c6:	f1a4 0904 	sub.w	r9, r4, #4
 80101ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80101ce:	461d      	mov	r5, r3
 80101d0:	464c      	mov	r4, r9
 80101d2:	f8cd b008 	str.w	fp, [sp, #8]
 80101d6:	9903      	ldr	r1, [sp, #12]
 80101d8:	e7d7      	b.n	801018a <__hexnan+0x2e>
 80101da:	2a29      	cmp	r2, #41	@ 0x29
 80101dc:	d157      	bne.n	801028e <__hexnan+0x132>
 80101de:	3102      	adds	r1, #2
 80101e0:	f8ca 1000 	str.w	r1, [sl]
 80101e4:	f1bb 0f00 	cmp.w	fp, #0
 80101e8:	d051      	beq.n	801028e <__hexnan+0x132>
 80101ea:	454c      	cmp	r4, r9
 80101ec:	d206      	bcs.n	80101fc <__hexnan+0xa0>
 80101ee:	2d07      	cmp	r5, #7
 80101f0:	dc04      	bgt.n	80101fc <__hexnan+0xa0>
 80101f2:	462a      	mov	r2, r5
 80101f4:	4649      	mov	r1, r9
 80101f6:	4620      	mov	r0, r4
 80101f8:	f7ff ff8a 	bl	8010110 <L_shift>
 80101fc:	4544      	cmp	r4, r8
 80101fe:	d936      	bls.n	801026e <__hexnan+0x112>
 8010200:	4623      	mov	r3, r4
 8010202:	f1a8 0204 	sub.w	r2, r8, #4
 8010206:	f853 1b04 	ldr.w	r1, [r3], #4
 801020a:	429f      	cmp	r7, r3
 801020c:	f842 1f04 	str.w	r1, [r2, #4]!
 8010210:	d2f9      	bcs.n	8010206 <__hexnan+0xaa>
 8010212:	1b3b      	subs	r3, r7, r4
 8010214:	f023 0303 	bic.w	r3, r3, #3
 8010218:	3304      	adds	r3, #4
 801021a:	3401      	adds	r4, #1
 801021c:	3e03      	subs	r6, #3
 801021e:	42b4      	cmp	r4, r6
 8010220:	bf88      	it	hi
 8010222:	2304      	movhi	r3, #4
 8010224:	2200      	movs	r2, #0
 8010226:	4443      	add	r3, r8
 8010228:	f843 2b04 	str.w	r2, [r3], #4
 801022c:	429f      	cmp	r7, r3
 801022e:	d2fb      	bcs.n	8010228 <__hexnan+0xcc>
 8010230:	683b      	ldr	r3, [r7, #0]
 8010232:	b91b      	cbnz	r3, 801023c <__hexnan+0xe0>
 8010234:	4547      	cmp	r7, r8
 8010236:	d128      	bne.n	801028a <__hexnan+0x12e>
 8010238:	2301      	movs	r3, #1
 801023a:	603b      	str	r3, [r7, #0]
 801023c:	2005      	movs	r0, #5
 801023e:	b007      	add	sp, #28
 8010240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010244:	3501      	adds	r5, #1
 8010246:	2d08      	cmp	r5, #8
 8010248:	f10b 0b01 	add.w	fp, fp, #1
 801024c:	dd06      	ble.n	801025c <__hexnan+0x100>
 801024e:	4544      	cmp	r4, r8
 8010250:	d9c1      	bls.n	80101d6 <__hexnan+0x7a>
 8010252:	2300      	movs	r3, #0
 8010254:	2501      	movs	r5, #1
 8010256:	f844 3c04 	str.w	r3, [r4, #-4]
 801025a:	3c04      	subs	r4, #4
 801025c:	6822      	ldr	r2, [r4, #0]
 801025e:	f000 000f 	and.w	r0, r0, #15
 8010262:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010266:	6020      	str	r0, [r4, #0]
 8010268:	e7b5      	b.n	80101d6 <__hexnan+0x7a>
 801026a:	2508      	movs	r5, #8
 801026c:	e7b3      	b.n	80101d6 <__hexnan+0x7a>
 801026e:	9b01      	ldr	r3, [sp, #4]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d0dd      	beq.n	8010230 <__hexnan+0xd4>
 8010274:	f04f 32ff 	mov.w	r2, #4294967295
 8010278:	f1c3 0320 	rsb	r3, r3, #32
 801027c:	40da      	lsrs	r2, r3
 801027e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010282:	4013      	ands	r3, r2
 8010284:	f846 3c04 	str.w	r3, [r6, #-4]
 8010288:	e7d2      	b.n	8010230 <__hexnan+0xd4>
 801028a:	3f04      	subs	r7, #4
 801028c:	e7d0      	b.n	8010230 <__hexnan+0xd4>
 801028e:	2004      	movs	r0, #4
 8010290:	e7d5      	b.n	801023e <__hexnan+0xe2>
	...

08010294 <_findenv_r>:
 8010294:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010298:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8010308 <_findenv_r+0x74>
 801029c:	4606      	mov	r6, r0
 801029e:	4689      	mov	r9, r1
 80102a0:	4617      	mov	r7, r2
 80102a2:	f001 f9c3 	bl	801162c <__env_lock>
 80102a6:	f8da 4000 	ldr.w	r4, [sl]
 80102aa:	b134      	cbz	r4, 80102ba <_findenv_r+0x26>
 80102ac:	464b      	mov	r3, r9
 80102ae:	4698      	mov	r8, r3
 80102b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102b4:	b13a      	cbz	r2, 80102c6 <_findenv_r+0x32>
 80102b6:	2a3d      	cmp	r2, #61	@ 0x3d
 80102b8:	d1f9      	bne.n	80102ae <_findenv_r+0x1a>
 80102ba:	4630      	mov	r0, r6
 80102bc:	f001 f9bc 	bl	8011638 <__env_unlock>
 80102c0:	2000      	movs	r0, #0
 80102c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102c6:	eba8 0809 	sub.w	r8, r8, r9
 80102ca:	46a3      	mov	fp, r4
 80102cc:	f854 0b04 	ldr.w	r0, [r4], #4
 80102d0:	2800      	cmp	r0, #0
 80102d2:	d0f2      	beq.n	80102ba <_findenv_r+0x26>
 80102d4:	4642      	mov	r2, r8
 80102d6:	4649      	mov	r1, r9
 80102d8:	f7fd feda 	bl	800e090 <strncmp>
 80102dc:	2800      	cmp	r0, #0
 80102de:	d1f4      	bne.n	80102ca <_findenv_r+0x36>
 80102e0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80102e4:	eb03 0508 	add.w	r5, r3, r8
 80102e8:	f813 3008 	ldrb.w	r3, [r3, r8]
 80102ec:	2b3d      	cmp	r3, #61	@ 0x3d
 80102ee:	d1ec      	bne.n	80102ca <_findenv_r+0x36>
 80102f0:	f8da 3000 	ldr.w	r3, [sl]
 80102f4:	4630      	mov	r0, r6
 80102f6:	ebab 0303 	sub.w	r3, fp, r3
 80102fa:	109b      	asrs	r3, r3, #2
 80102fc:	603b      	str	r3, [r7, #0]
 80102fe:	f001 f99b 	bl	8011638 <__env_unlock>
 8010302:	1c68      	adds	r0, r5, #1
 8010304:	e7dd      	b.n	80102c2 <_findenv_r+0x2e>
 8010306:	bf00      	nop
 8010308:	200000c4 	.word	0x200000c4

0801030c <_getenv_r>:
 801030c:	b507      	push	{r0, r1, r2, lr}
 801030e:	aa01      	add	r2, sp, #4
 8010310:	f7ff ffc0 	bl	8010294 <_findenv_r>
 8010314:	b003      	add	sp, #12
 8010316:	f85d fb04 	ldr.w	pc, [sp], #4

0801031a <__ascii_mbtowc>:
 801031a:	b082      	sub	sp, #8
 801031c:	b901      	cbnz	r1, 8010320 <__ascii_mbtowc+0x6>
 801031e:	a901      	add	r1, sp, #4
 8010320:	b142      	cbz	r2, 8010334 <__ascii_mbtowc+0x1a>
 8010322:	b14b      	cbz	r3, 8010338 <__ascii_mbtowc+0x1e>
 8010324:	7813      	ldrb	r3, [r2, #0]
 8010326:	600b      	str	r3, [r1, #0]
 8010328:	7812      	ldrb	r2, [r2, #0]
 801032a:	1e10      	subs	r0, r2, #0
 801032c:	bf18      	it	ne
 801032e:	2001      	movne	r0, #1
 8010330:	b002      	add	sp, #8
 8010332:	4770      	bx	lr
 8010334:	4610      	mov	r0, r2
 8010336:	e7fb      	b.n	8010330 <__ascii_mbtowc+0x16>
 8010338:	f06f 0001 	mvn.w	r0, #1
 801033c:	e7f8      	b.n	8010330 <__ascii_mbtowc+0x16>
	...

08010340 <_Balloc>:
 8010340:	b570      	push	{r4, r5, r6, lr}
 8010342:	69c6      	ldr	r6, [r0, #28]
 8010344:	4604      	mov	r4, r0
 8010346:	460d      	mov	r5, r1
 8010348:	b976      	cbnz	r6, 8010368 <_Balloc+0x28>
 801034a:	2010      	movs	r0, #16
 801034c:	f7fc f95e 	bl	800c60c <malloc>
 8010350:	4602      	mov	r2, r0
 8010352:	61e0      	str	r0, [r4, #28]
 8010354:	b920      	cbnz	r0, 8010360 <_Balloc+0x20>
 8010356:	216b      	movs	r1, #107	@ 0x6b
 8010358:	4b17      	ldr	r3, [pc, #92]	@ (80103b8 <_Balloc+0x78>)
 801035a:	4818      	ldr	r0, [pc, #96]	@ (80103bc <_Balloc+0x7c>)
 801035c:	f7fe fda0 	bl	800eea0 <__assert_func>
 8010360:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010364:	6006      	str	r6, [r0, #0]
 8010366:	60c6      	str	r6, [r0, #12]
 8010368:	69e6      	ldr	r6, [r4, #28]
 801036a:	68f3      	ldr	r3, [r6, #12]
 801036c:	b183      	cbz	r3, 8010390 <_Balloc+0x50>
 801036e:	69e3      	ldr	r3, [r4, #28]
 8010370:	68db      	ldr	r3, [r3, #12]
 8010372:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010376:	b9b8      	cbnz	r0, 80103a8 <_Balloc+0x68>
 8010378:	2101      	movs	r1, #1
 801037a:	fa01 f605 	lsl.w	r6, r1, r5
 801037e:	1d72      	adds	r2, r6, #5
 8010380:	4620      	mov	r0, r4
 8010382:	0092      	lsls	r2, r2, #2
 8010384:	f001 f93d 	bl	8011602 <_calloc_r>
 8010388:	b160      	cbz	r0, 80103a4 <_Balloc+0x64>
 801038a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801038e:	e00e      	b.n	80103ae <_Balloc+0x6e>
 8010390:	2221      	movs	r2, #33	@ 0x21
 8010392:	2104      	movs	r1, #4
 8010394:	4620      	mov	r0, r4
 8010396:	f001 f934 	bl	8011602 <_calloc_r>
 801039a:	69e3      	ldr	r3, [r4, #28]
 801039c:	60f0      	str	r0, [r6, #12]
 801039e:	68db      	ldr	r3, [r3, #12]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d1e4      	bne.n	801036e <_Balloc+0x2e>
 80103a4:	2000      	movs	r0, #0
 80103a6:	bd70      	pop	{r4, r5, r6, pc}
 80103a8:	6802      	ldr	r2, [r0, #0]
 80103aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80103ae:	2300      	movs	r3, #0
 80103b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80103b4:	e7f7      	b.n	80103a6 <_Balloc+0x66>
 80103b6:	bf00      	nop
 80103b8:	08012383 	.word	0x08012383
 80103bc:	080125bc 	.word	0x080125bc

080103c0 <_Bfree>:
 80103c0:	b570      	push	{r4, r5, r6, lr}
 80103c2:	69c6      	ldr	r6, [r0, #28]
 80103c4:	4605      	mov	r5, r0
 80103c6:	460c      	mov	r4, r1
 80103c8:	b976      	cbnz	r6, 80103e8 <_Bfree+0x28>
 80103ca:	2010      	movs	r0, #16
 80103cc:	f7fc f91e 	bl	800c60c <malloc>
 80103d0:	4602      	mov	r2, r0
 80103d2:	61e8      	str	r0, [r5, #28]
 80103d4:	b920      	cbnz	r0, 80103e0 <_Bfree+0x20>
 80103d6:	218f      	movs	r1, #143	@ 0x8f
 80103d8:	4b08      	ldr	r3, [pc, #32]	@ (80103fc <_Bfree+0x3c>)
 80103da:	4809      	ldr	r0, [pc, #36]	@ (8010400 <_Bfree+0x40>)
 80103dc:	f7fe fd60 	bl	800eea0 <__assert_func>
 80103e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80103e4:	6006      	str	r6, [r0, #0]
 80103e6:	60c6      	str	r6, [r0, #12]
 80103e8:	b13c      	cbz	r4, 80103fa <_Bfree+0x3a>
 80103ea:	69eb      	ldr	r3, [r5, #28]
 80103ec:	6862      	ldr	r2, [r4, #4]
 80103ee:	68db      	ldr	r3, [r3, #12]
 80103f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80103f4:	6021      	str	r1, [r4, #0]
 80103f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80103fa:	bd70      	pop	{r4, r5, r6, pc}
 80103fc:	08012383 	.word	0x08012383
 8010400:	080125bc 	.word	0x080125bc

08010404 <__multadd>:
 8010404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010408:	4607      	mov	r7, r0
 801040a:	460c      	mov	r4, r1
 801040c:	461e      	mov	r6, r3
 801040e:	2000      	movs	r0, #0
 8010410:	690d      	ldr	r5, [r1, #16]
 8010412:	f101 0c14 	add.w	ip, r1, #20
 8010416:	f8dc 3000 	ldr.w	r3, [ip]
 801041a:	3001      	adds	r0, #1
 801041c:	b299      	uxth	r1, r3
 801041e:	fb02 6101 	mla	r1, r2, r1, r6
 8010422:	0c1e      	lsrs	r6, r3, #16
 8010424:	0c0b      	lsrs	r3, r1, #16
 8010426:	fb02 3306 	mla	r3, r2, r6, r3
 801042a:	b289      	uxth	r1, r1
 801042c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010430:	4285      	cmp	r5, r0
 8010432:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010436:	f84c 1b04 	str.w	r1, [ip], #4
 801043a:	dcec      	bgt.n	8010416 <__multadd+0x12>
 801043c:	b30e      	cbz	r6, 8010482 <__multadd+0x7e>
 801043e:	68a3      	ldr	r3, [r4, #8]
 8010440:	42ab      	cmp	r3, r5
 8010442:	dc19      	bgt.n	8010478 <__multadd+0x74>
 8010444:	6861      	ldr	r1, [r4, #4]
 8010446:	4638      	mov	r0, r7
 8010448:	3101      	adds	r1, #1
 801044a:	f7ff ff79 	bl	8010340 <_Balloc>
 801044e:	4680      	mov	r8, r0
 8010450:	b928      	cbnz	r0, 801045e <__multadd+0x5a>
 8010452:	4602      	mov	r2, r0
 8010454:	21ba      	movs	r1, #186	@ 0xba
 8010456:	4b0c      	ldr	r3, [pc, #48]	@ (8010488 <__multadd+0x84>)
 8010458:	480c      	ldr	r0, [pc, #48]	@ (801048c <__multadd+0x88>)
 801045a:	f7fe fd21 	bl	800eea0 <__assert_func>
 801045e:	6922      	ldr	r2, [r4, #16]
 8010460:	f104 010c 	add.w	r1, r4, #12
 8010464:	3202      	adds	r2, #2
 8010466:	0092      	lsls	r2, r2, #2
 8010468:	300c      	adds	r0, #12
 801046a:	f7fe fd00 	bl	800ee6e <memcpy>
 801046e:	4621      	mov	r1, r4
 8010470:	4638      	mov	r0, r7
 8010472:	f7ff ffa5 	bl	80103c0 <_Bfree>
 8010476:	4644      	mov	r4, r8
 8010478:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801047c:	3501      	adds	r5, #1
 801047e:	615e      	str	r6, [r3, #20]
 8010480:	6125      	str	r5, [r4, #16]
 8010482:	4620      	mov	r0, r4
 8010484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010488:	0801254b 	.word	0x0801254b
 801048c:	080125bc 	.word	0x080125bc

08010490 <__s2b>:
 8010490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010494:	4615      	mov	r5, r2
 8010496:	2209      	movs	r2, #9
 8010498:	461f      	mov	r7, r3
 801049a:	3308      	adds	r3, #8
 801049c:	460c      	mov	r4, r1
 801049e:	fb93 f3f2 	sdiv	r3, r3, r2
 80104a2:	4606      	mov	r6, r0
 80104a4:	2201      	movs	r2, #1
 80104a6:	2100      	movs	r1, #0
 80104a8:	429a      	cmp	r2, r3
 80104aa:	db09      	blt.n	80104c0 <__s2b+0x30>
 80104ac:	4630      	mov	r0, r6
 80104ae:	f7ff ff47 	bl	8010340 <_Balloc>
 80104b2:	b940      	cbnz	r0, 80104c6 <__s2b+0x36>
 80104b4:	4602      	mov	r2, r0
 80104b6:	21d3      	movs	r1, #211	@ 0xd3
 80104b8:	4b18      	ldr	r3, [pc, #96]	@ (801051c <__s2b+0x8c>)
 80104ba:	4819      	ldr	r0, [pc, #100]	@ (8010520 <__s2b+0x90>)
 80104bc:	f7fe fcf0 	bl	800eea0 <__assert_func>
 80104c0:	0052      	lsls	r2, r2, #1
 80104c2:	3101      	adds	r1, #1
 80104c4:	e7f0      	b.n	80104a8 <__s2b+0x18>
 80104c6:	9b08      	ldr	r3, [sp, #32]
 80104c8:	2d09      	cmp	r5, #9
 80104ca:	6143      	str	r3, [r0, #20]
 80104cc:	f04f 0301 	mov.w	r3, #1
 80104d0:	6103      	str	r3, [r0, #16]
 80104d2:	dd16      	ble.n	8010502 <__s2b+0x72>
 80104d4:	f104 0909 	add.w	r9, r4, #9
 80104d8:	46c8      	mov	r8, r9
 80104da:	442c      	add	r4, r5
 80104dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80104e0:	4601      	mov	r1, r0
 80104e2:	220a      	movs	r2, #10
 80104e4:	4630      	mov	r0, r6
 80104e6:	3b30      	subs	r3, #48	@ 0x30
 80104e8:	f7ff ff8c 	bl	8010404 <__multadd>
 80104ec:	45a0      	cmp	r8, r4
 80104ee:	d1f5      	bne.n	80104dc <__s2b+0x4c>
 80104f0:	f1a5 0408 	sub.w	r4, r5, #8
 80104f4:	444c      	add	r4, r9
 80104f6:	1b2d      	subs	r5, r5, r4
 80104f8:	1963      	adds	r3, r4, r5
 80104fa:	42bb      	cmp	r3, r7
 80104fc:	db04      	blt.n	8010508 <__s2b+0x78>
 80104fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010502:	2509      	movs	r5, #9
 8010504:	340a      	adds	r4, #10
 8010506:	e7f6      	b.n	80104f6 <__s2b+0x66>
 8010508:	f814 3b01 	ldrb.w	r3, [r4], #1
 801050c:	4601      	mov	r1, r0
 801050e:	220a      	movs	r2, #10
 8010510:	4630      	mov	r0, r6
 8010512:	3b30      	subs	r3, #48	@ 0x30
 8010514:	f7ff ff76 	bl	8010404 <__multadd>
 8010518:	e7ee      	b.n	80104f8 <__s2b+0x68>
 801051a:	bf00      	nop
 801051c:	0801254b 	.word	0x0801254b
 8010520:	080125bc 	.word	0x080125bc

08010524 <__hi0bits>:
 8010524:	4603      	mov	r3, r0
 8010526:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801052a:	bf3a      	itte	cc
 801052c:	0403      	lslcc	r3, r0, #16
 801052e:	2010      	movcc	r0, #16
 8010530:	2000      	movcs	r0, #0
 8010532:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010536:	bf3c      	itt	cc
 8010538:	021b      	lslcc	r3, r3, #8
 801053a:	3008      	addcc	r0, #8
 801053c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010540:	bf3c      	itt	cc
 8010542:	011b      	lslcc	r3, r3, #4
 8010544:	3004      	addcc	r0, #4
 8010546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801054a:	bf3c      	itt	cc
 801054c:	009b      	lslcc	r3, r3, #2
 801054e:	3002      	addcc	r0, #2
 8010550:	2b00      	cmp	r3, #0
 8010552:	db05      	blt.n	8010560 <__hi0bits+0x3c>
 8010554:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010558:	f100 0001 	add.w	r0, r0, #1
 801055c:	bf08      	it	eq
 801055e:	2020      	moveq	r0, #32
 8010560:	4770      	bx	lr

08010562 <__lo0bits>:
 8010562:	6803      	ldr	r3, [r0, #0]
 8010564:	4602      	mov	r2, r0
 8010566:	f013 0007 	ands.w	r0, r3, #7
 801056a:	d00b      	beq.n	8010584 <__lo0bits+0x22>
 801056c:	07d9      	lsls	r1, r3, #31
 801056e:	d421      	bmi.n	80105b4 <__lo0bits+0x52>
 8010570:	0798      	lsls	r0, r3, #30
 8010572:	bf49      	itett	mi
 8010574:	085b      	lsrmi	r3, r3, #1
 8010576:	089b      	lsrpl	r3, r3, #2
 8010578:	2001      	movmi	r0, #1
 801057a:	6013      	strmi	r3, [r2, #0]
 801057c:	bf5c      	itt	pl
 801057e:	2002      	movpl	r0, #2
 8010580:	6013      	strpl	r3, [r2, #0]
 8010582:	4770      	bx	lr
 8010584:	b299      	uxth	r1, r3
 8010586:	b909      	cbnz	r1, 801058c <__lo0bits+0x2a>
 8010588:	2010      	movs	r0, #16
 801058a:	0c1b      	lsrs	r3, r3, #16
 801058c:	b2d9      	uxtb	r1, r3
 801058e:	b909      	cbnz	r1, 8010594 <__lo0bits+0x32>
 8010590:	3008      	adds	r0, #8
 8010592:	0a1b      	lsrs	r3, r3, #8
 8010594:	0719      	lsls	r1, r3, #28
 8010596:	bf04      	itt	eq
 8010598:	091b      	lsreq	r3, r3, #4
 801059a:	3004      	addeq	r0, #4
 801059c:	0799      	lsls	r1, r3, #30
 801059e:	bf04      	itt	eq
 80105a0:	089b      	lsreq	r3, r3, #2
 80105a2:	3002      	addeq	r0, #2
 80105a4:	07d9      	lsls	r1, r3, #31
 80105a6:	d403      	bmi.n	80105b0 <__lo0bits+0x4e>
 80105a8:	085b      	lsrs	r3, r3, #1
 80105aa:	f100 0001 	add.w	r0, r0, #1
 80105ae:	d003      	beq.n	80105b8 <__lo0bits+0x56>
 80105b0:	6013      	str	r3, [r2, #0]
 80105b2:	4770      	bx	lr
 80105b4:	2000      	movs	r0, #0
 80105b6:	4770      	bx	lr
 80105b8:	2020      	movs	r0, #32
 80105ba:	4770      	bx	lr

080105bc <__i2b>:
 80105bc:	b510      	push	{r4, lr}
 80105be:	460c      	mov	r4, r1
 80105c0:	2101      	movs	r1, #1
 80105c2:	f7ff febd 	bl	8010340 <_Balloc>
 80105c6:	4602      	mov	r2, r0
 80105c8:	b928      	cbnz	r0, 80105d6 <__i2b+0x1a>
 80105ca:	f240 1145 	movw	r1, #325	@ 0x145
 80105ce:	4b04      	ldr	r3, [pc, #16]	@ (80105e0 <__i2b+0x24>)
 80105d0:	4804      	ldr	r0, [pc, #16]	@ (80105e4 <__i2b+0x28>)
 80105d2:	f7fe fc65 	bl	800eea0 <__assert_func>
 80105d6:	2301      	movs	r3, #1
 80105d8:	6144      	str	r4, [r0, #20]
 80105da:	6103      	str	r3, [r0, #16]
 80105dc:	bd10      	pop	{r4, pc}
 80105de:	bf00      	nop
 80105e0:	0801254b 	.word	0x0801254b
 80105e4:	080125bc 	.word	0x080125bc

080105e8 <__multiply>:
 80105e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105ec:	4614      	mov	r4, r2
 80105ee:	690a      	ldr	r2, [r1, #16]
 80105f0:	6923      	ldr	r3, [r4, #16]
 80105f2:	460f      	mov	r7, r1
 80105f4:	429a      	cmp	r2, r3
 80105f6:	bfa2      	ittt	ge
 80105f8:	4623      	movge	r3, r4
 80105fa:	460c      	movge	r4, r1
 80105fc:	461f      	movge	r7, r3
 80105fe:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010602:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010606:	68a3      	ldr	r3, [r4, #8]
 8010608:	6861      	ldr	r1, [r4, #4]
 801060a:	eb0a 0609 	add.w	r6, sl, r9
 801060e:	42b3      	cmp	r3, r6
 8010610:	b085      	sub	sp, #20
 8010612:	bfb8      	it	lt
 8010614:	3101      	addlt	r1, #1
 8010616:	f7ff fe93 	bl	8010340 <_Balloc>
 801061a:	b930      	cbnz	r0, 801062a <__multiply+0x42>
 801061c:	4602      	mov	r2, r0
 801061e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010622:	4b43      	ldr	r3, [pc, #268]	@ (8010730 <__multiply+0x148>)
 8010624:	4843      	ldr	r0, [pc, #268]	@ (8010734 <__multiply+0x14c>)
 8010626:	f7fe fc3b 	bl	800eea0 <__assert_func>
 801062a:	f100 0514 	add.w	r5, r0, #20
 801062e:	462b      	mov	r3, r5
 8010630:	2200      	movs	r2, #0
 8010632:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010636:	4543      	cmp	r3, r8
 8010638:	d321      	bcc.n	801067e <__multiply+0x96>
 801063a:	f107 0114 	add.w	r1, r7, #20
 801063e:	f104 0214 	add.w	r2, r4, #20
 8010642:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010646:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801064a:	9302      	str	r3, [sp, #8]
 801064c:	1b13      	subs	r3, r2, r4
 801064e:	3b15      	subs	r3, #21
 8010650:	f023 0303 	bic.w	r3, r3, #3
 8010654:	3304      	adds	r3, #4
 8010656:	f104 0715 	add.w	r7, r4, #21
 801065a:	42ba      	cmp	r2, r7
 801065c:	bf38      	it	cc
 801065e:	2304      	movcc	r3, #4
 8010660:	9301      	str	r3, [sp, #4]
 8010662:	9b02      	ldr	r3, [sp, #8]
 8010664:	9103      	str	r1, [sp, #12]
 8010666:	428b      	cmp	r3, r1
 8010668:	d80c      	bhi.n	8010684 <__multiply+0x9c>
 801066a:	2e00      	cmp	r6, #0
 801066c:	dd03      	ble.n	8010676 <__multiply+0x8e>
 801066e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010672:	2b00      	cmp	r3, #0
 8010674:	d05a      	beq.n	801072c <__multiply+0x144>
 8010676:	6106      	str	r6, [r0, #16]
 8010678:	b005      	add	sp, #20
 801067a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801067e:	f843 2b04 	str.w	r2, [r3], #4
 8010682:	e7d8      	b.n	8010636 <__multiply+0x4e>
 8010684:	f8b1 a000 	ldrh.w	sl, [r1]
 8010688:	f1ba 0f00 	cmp.w	sl, #0
 801068c:	d023      	beq.n	80106d6 <__multiply+0xee>
 801068e:	46a9      	mov	r9, r5
 8010690:	f04f 0c00 	mov.w	ip, #0
 8010694:	f104 0e14 	add.w	lr, r4, #20
 8010698:	f85e 7b04 	ldr.w	r7, [lr], #4
 801069c:	f8d9 3000 	ldr.w	r3, [r9]
 80106a0:	fa1f fb87 	uxth.w	fp, r7
 80106a4:	b29b      	uxth	r3, r3
 80106a6:	fb0a 330b 	mla	r3, sl, fp, r3
 80106aa:	4463      	add	r3, ip
 80106ac:	f8d9 c000 	ldr.w	ip, [r9]
 80106b0:	0c3f      	lsrs	r7, r7, #16
 80106b2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80106b6:	fb0a c707 	mla	r7, sl, r7, ip
 80106ba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80106be:	b29b      	uxth	r3, r3
 80106c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80106c4:	4572      	cmp	r2, lr
 80106c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80106ca:	f849 3b04 	str.w	r3, [r9], #4
 80106ce:	d8e3      	bhi.n	8010698 <__multiply+0xb0>
 80106d0:	9b01      	ldr	r3, [sp, #4]
 80106d2:	f845 c003 	str.w	ip, [r5, r3]
 80106d6:	9b03      	ldr	r3, [sp, #12]
 80106d8:	3104      	adds	r1, #4
 80106da:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80106de:	f1b9 0f00 	cmp.w	r9, #0
 80106e2:	d021      	beq.n	8010728 <__multiply+0x140>
 80106e4:	46ae      	mov	lr, r5
 80106e6:	f04f 0a00 	mov.w	sl, #0
 80106ea:	682b      	ldr	r3, [r5, #0]
 80106ec:	f104 0c14 	add.w	ip, r4, #20
 80106f0:	f8bc b000 	ldrh.w	fp, [ip]
 80106f4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80106f8:	b29b      	uxth	r3, r3
 80106fa:	fb09 770b 	mla	r7, r9, fp, r7
 80106fe:	4457      	add	r7, sl
 8010700:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010704:	f84e 3b04 	str.w	r3, [lr], #4
 8010708:	f85c 3b04 	ldr.w	r3, [ip], #4
 801070c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010710:	f8be 3000 	ldrh.w	r3, [lr]
 8010714:	4562      	cmp	r2, ip
 8010716:	fb09 330a 	mla	r3, r9, sl, r3
 801071a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801071e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010722:	d8e5      	bhi.n	80106f0 <__multiply+0x108>
 8010724:	9f01      	ldr	r7, [sp, #4]
 8010726:	51eb      	str	r3, [r5, r7]
 8010728:	3504      	adds	r5, #4
 801072a:	e79a      	b.n	8010662 <__multiply+0x7a>
 801072c:	3e01      	subs	r6, #1
 801072e:	e79c      	b.n	801066a <__multiply+0x82>
 8010730:	0801254b 	.word	0x0801254b
 8010734:	080125bc 	.word	0x080125bc

08010738 <__pow5mult>:
 8010738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801073c:	4615      	mov	r5, r2
 801073e:	f012 0203 	ands.w	r2, r2, #3
 8010742:	4607      	mov	r7, r0
 8010744:	460e      	mov	r6, r1
 8010746:	d007      	beq.n	8010758 <__pow5mult+0x20>
 8010748:	4c25      	ldr	r4, [pc, #148]	@ (80107e0 <__pow5mult+0xa8>)
 801074a:	3a01      	subs	r2, #1
 801074c:	2300      	movs	r3, #0
 801074e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010752:	f7ff fe57 	bl	8010404 <__multadd>
 8010756:	4606      	mov	r6, r0
 8010758:	10ad      	asrs	r5, r5, #2
 801075a:	d03d      	beq.n	80107d8 <__pow5mult+0xa0>
 801075c:	69fc      	ldr	r4, [r7, #28]
 801075e:	b97c      	cbnz	r4, 8010780 <__pow5mult+0x48>
 8010760:	2010      	movs	r0, #16
 8010762:	f7fb ff53 	bl	800c60c <malloc>
 8010766:	4602      	mov	r2, r0
 8010768:	61f8      	str	r0, [r7, #28]
 801076a:	b928      	cbnz	r0, 8010778 <__pow5mult+0x40>
 801076c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010770:	4b1c      	ldr	r3, [pc, #112]	@ (80107e4 <__pow5mult+0xac>)
 8010772:	481d      	ldr	r0, [pc, #116]	@ (80107e8 <__pow5mult+0xb0>)
 8010774:	f7fe fb94 	bl	800eea0 <__assert_func>
 8010778:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801077c:	6004      	str	r4, [r0, #0]
 801077e:	60c4      	str	r4, [r0, #12]
 8010780:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010784:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010788:	b94c      	cbnz	r4, 801079e <__pow5mult+0x66>
 801078a:	f240 2171 	movw	r1, #625	@ 0x271
 801078e:	4638      	mov	r0, r7
 8010790:	f7ff ff14 	bl	80105bc <__i2b>
 8010794:	2300      	movs	r3, #0
 8010796:	4604      	mov	r4, r0
 8010798:	f8c8 0008 	str.w	r0, [r8, #8]
 801079c:	6003      	str	r3, [r0, #0]
 801079e:	f04f 0900 	mov.w	r9, #0
 80107a2:	07eb      	lsls	r3, r5, #31
 80107a4:	d50a      	bpl.n	80107bc <__pow5mult+0x84>
 80107a6:	4631      	mov	r1, r6
 80107a8:	4622      	mov	r2, r4
 80107aa:	4638      	mov	r0, r7
 80107ac:	f7ff ff1c 	bl	80105e8 <__multiply>
 80107b0:	4680      	mov	r8, r0
 80107b2:	4631      	mov	r1, r6
 80107b4:	4638      	mov	r0, r7
 80107b6:	f7ff fe03 	bl	80103c0 <_Bfree>
 80107ba:	4646      	mov	r6, r8
 80107bc:	106d      	asrs	r5, r5, #1
 80107be:	d00b      	beq.n	80107d8 <__pow5mult+0xa0>
 80107c0:	6820      	ldr	r0, [r4, #0]
 80107c2:	b938      	cbnz	r0, 80107d4 <__pow5mult+0x9c>
 80107c4:	4622      	mov	r2, r4
 80107c6:	4621      	mov	r1, r4
 80107c8:	4638      	mov	r0, r7
 80107ca:	f7ff ff0d 	bl	80105e8 <__multiply>
 80107ce:	6020      	str	r0, [r4, #0]
 80107d0:	f8c0 9000 	str.w	r9, [r0]
 80107d4:	4604      	mov	r4, r0
 80107d6:	e7e4      	b.n	80107a2 <__pow5mult+0x6a>
 80107d8:	4630      	mov	r0, r6
 80107da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107de:	bf00      	nop
 80107e0:	08012618 	.word	0x08012618
 80107e4:	08012383 	.word	0x08012383
 80107e8:	080125bc 	.word	0x080125bc

080107ec <__lshift>:
 80107ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107f0:	460c      	mov	r4, r1
 80107f2:	4607      	mov	r7, r0
 80107f4:	4691      	mov	r9, r2
 80107f6:	6923      	ldr	r3, [r4, #16]
 80107f8:	6849      	ldr	r1, [r1, #4]
 80107fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80107fe:	68a3      	ldr	r3, [r4, #8]
 8010800:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010804:	f108 0601 	add.w	r6, r8, #1
 8010808:	42b3      	cmp	r3, r6
 801080a:	db0b      	blt.n	8010824 <__lshift+0x38>
 801080c:	4638      	mov	r0, r7
 801080e:	f7ff fd97 	bl	8010340 <_Balloc>
 8010812:	4605      	mov	r5, r0
 8010814:	b948      	cbnz	r0, 801082a <__lshift+0x3e>
 8010816:	4602      	mov	r2, r0
 8010818:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801081c:	4b27      	ldr	r3, [pc, #156]	@ (80108bc <__lshift+0xd0>)
 801081e:	4828      	ldr	r0, [pc, #160]	@ (80108c0 <__lshift+0xd4>)
 8010820:	f7fe fb3e 	bl	800eea0 <__assert_func>
 8010824:	3101      	adds	r1, #1
 8010826:	005b      	lsls	r3, r3, #1
 8010828:	e7ee      	b.n	8010808 <__lshift+0x1c>
 801082a:	2300      	movs	r3, #0
 801082c:	f100 0114 	add.w	r1, r0, #20
 8010830:	f100 0210 	add.w	r2, r0, #16
 8010834:	4618      	mov	r0, r3
 8010836:	4553      	cmp	r3, sl
 8010838:	db33      	blt.n	80108a2 <__lshift+0xb6>
 801083a:	6920      	ldr	r0, [r4, #16]
 801083c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010840:	f104 0314 	add.w	r3, r4, #20
 8010844:	f019 091f 	ands.w	r9, r9, #31
 8010848:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801084c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010850:	d02b      	beq.n	80108aa <__lshift+0xbe>
 8010852:	468a      	mov	sl, r1
 8010854:	2200      	movs	r2, #0
 8010856:	f1c9 0e20 	rsb	lr, r9, #32
 801085a:	6818      	ldr	r0, [r3, #0]
 801085c:	fa00 f009 	lsl.w	r0, r0, r9
 8010860:	4310      	orrs	r0, r2
 8010862:	f84a 0b04 	str.w	r0, [sl], #4
 8010866:	f853 2b04 	ldr.w	r2, [r3], #4
 801086a:	459c      	cmp	ip, r3
 801086c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010870:	d8f3      	bhi.n	801085a <__lshift+0x6e>
 8010872:	ebac 0304 	sub.w	r3, ip, r4
 8010876:	3b15      	subs	r3, #21
 8010878:	f023 0303 	bic.w	r3, r3, #3
 801087c:	3304      	adds	r3, #4
 801087e:	f104 0015 	add.w	r0, r4, #21
 8010882:	4584      	cmp	ip, r0
 8010884:	bf38      	it	cc
 8010886:	2304      	movcc	r3, #4
 8010888:	50ca      	str	r2, [r1, r3]
 801088a:	b10a      	cbz	r2, 8010890 <__lshift+0xa4>
 801088c:	f108 0602 	add.w	r6, r8, #2
 8010890:	3e01      	subs	r6, #1
 8010892:	4638      	mov	r0, r7
 8010894:	4621      	mov	r1, r4
 8010896:	612e      	str	r6, [r5, #16]
 8010898:	f7ff fd92 	bl	80103c0 <_Bfree>
 801089c:	4628      	mov	r0, r5
 801089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80108a6:	3301      	adds	r3, #1
 80108a8:	e7c5      	b.n	8010836 <__lshift+0x4a>
 80108aa:	3904      	subs	r1, #4
 80108ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80108b0:	459c      	cmp	ip, r3
 80108b2:	f841 2f04 	str.w	r2, [r1, #4]!
 80108b6:	d8f9      	bhi.n	80108ac <__lshift+0xc0>
 80108b8:	e7ea      	b.n	8010890 <__lshift+0xa4>
 80108ba:	bf00      	nop
 80108bc:	0801254b 	.word	0x0801254b
 80108c0:	080125bc 	.word	0x080125bc

080108c4 <__mcmp>:
 80108c4:	4603      	mov	r3, r0
 80108c6:	690a      	ldr	r2, [r1, #16]
 80108c8:	6900      	ldr	r0, [r0, #16]
 80108ca:	b530      	push	{r4, r5, lr}
 80108cc:	1a80      	subs	r0, r0, r2
 80108ce:	d10e      	bne.n	80108ee <__mcmp+0x2a>
 80108d0:	3314      	adds	r3, #20
 80108d2:	3114      	adds	r1, #20
 80108d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80108d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80108dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80108e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80108e4:	4295      	cmp	r5, r2
 80108e6:	d003      	beq.n	80108f0 <__mcmp+0x2c>
 80108e8:	d205      	bcs.n	80108f6 <__mcmp+0x32>
 80108ea:	f04f 30ff 	mov.w	r0, #4294967295
 80108ee:	bd30      	pop	{r4, r5, pc}
 80108f0:	42a3      	cmp	r3, r4
 80108f2:	d3f3      	bcc.n	80108dc <__mcmp+0x18>
 80108f4:	e7fb      	b.n	80108ee <__mcmp+0x2a>
 80108f6:	2001      	movs	r0, #1
 80108f8:	e7f9      	b.n	80108ee <__mcmp+0x2a>
	...

080108fc <__mdiff>:
 80108fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010900:	4689      	mov	r9, r1
 8010902:	4606      	mov	r6, r0
 8010904:	4611      	mov	r1, r2
 8010906:	4648      	mov	r0, r9
 8010908:	4614      	mov	r4, r2
 801090a:	f7ff ffdb 	bl	80108c4 <__mcmp>
 801090e:	1e05      	subs	r5, r0, #0
 8010910:	d112      	bne.n	8010938 <__mdiff+0x3c>
 8010912:	4629      	mov	r1, r5
 8010914:	4630      	mov	r0, r6
 8010916:	f7ff fd13 	bl	8010340 <_Balloc>
 801091a:	4602      	mov	r2, r0
 801091c:	b928      	cbnz	r0, 801092a <__mdiff+0x2e>
 801091e:	f240 2137 	movw	r1, #567	@ 0x237
 8010922:	4b3e      	ldr	r3, [pc, #248]	@ (8010a1c <__mdiff+0x120>)
 8010924:	483e      	ldr	r0, [pc, #248]	@ (8010a20 <__mdiff+0x124>)
 8010926:	f7fe fabb 	bl	800eea0 <__assert_func>
 801092a:	2301      	movs	r3, #1
 801092c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010930:	4610      	mov	r0, r2
 8010932:	b003      	add	sp, #12
 8010934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010938:	bfbc      	itt	lt
 801093a:	464b      	movlt	r3, r9
 801093c:	46a1      	movlt	r9, r4
 801093e:	4630      	mov	r0, r6
 8010940:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010944:	bfba      	itte	lt
 8010946:	461c      	movlt	r4, r3
 8010948:	2501      	movlt	r5, #1
 801094a:	2500      	movge	r5, #0
 801094c:	f7ff fcf8 	bl	8010340 <_Balloc>
 8010950:	4602      	mov	r2, r0
 8010952:	b918      	cbnz	r0, 801095c <__mdiff+0x60>
 8010954:	f240 2145 	movw	r1, #581	@ 0x245
 8010958:	4b30      	ldr	r3, [pc, #192]	@ (8010a1c <__mdiff+0x120>)
 801095a:	e7e3      	b.n	8010924 <__mdiff+0x28>
 801095c:	f100 0b14 	add.w	fp, r0, #20
 8010960:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010964:	f109 0310 	add.w	r3, r9, #16
 8010968:	60c5      	str	r5, [r0, #12]
 801096a:	f04f 0c00 	mov.w	ip, #0
 801096e:	f109 0514 	add.w	r5, r9, #20
 8010972:	46d9      	mov	r9, fp
 8010974:	6926      	ldr	r6, [r4, #16]
 8010976:	f104 0e14 	add.w	lr, r4, #20
 801097a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801097e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010982:	9301      	str	r3, [sp, #4]
 8010984:	9b01      	ldr	r3, [sp, #4]
 8010986:	f85e 0b04 	ldr.w	r0, [lr], #4
 801098a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801098e:	b281      	uxth	r1, r0
 8010990:	9301      	str	r3, [sp, #4]
 8010992:	fa1f f38a 	uxth.w	r3, sl
 8010996:	1a5b      	subs	r3, r3, r1
 8010998:	0c00      	lsrs	r0, r0, #16
 801099a:	4463      	add	r3, ip
 801099c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80109a0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80109a4:	b29b      	uxth	r3, r3
 80109a6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80109aa:	4576      	cmp	r6, lr
 80109ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80109b0:	f849 3b04 	str.w	r3, [r9], #4
 80109b4:	d8e6      	bhi.n	8010984 <__mdiff+0x88>
 80109b6:	1b33      	subs	r3, r6, r4
 80109b8:	3b15      	subs	r3, #21
 80109ba:	f023 0303 	bic.w	r3, r3, #3
 80109be:	3415      	adds	r4, #21
 80109c0:	3304      	adds	r3, #4
 80109c2:	42a6      	cmp	r6, r4
 80109c4:	bf38      	it	cc
 80109c6:	2304      	movcc	r3, #4
 80109c8:	441d      	add	r5, r3
 80109ca:	445b      	add	r3, fp
 80109cc:	461e      	mov	r6, r3
 80109ce:	462c      	mov	r4, r5
 80109d0:	4544      	cmp	r4, r8
 80109d2:	d30e      	bcc.n	80109f2 <__mdiff+0xf6>
 80109d4:	f108 0103 	add.w	r1, r8, #3
 80109d8:	1b49      	subs	r1, r1, r5
 80109da:	f021 0103 	bic.w	r1, r1, #3
 80109de:	3d03      	subs	r5, #3
 80109e0:	45a8      	cmp	r8, r5
 80109e2:	bf38      	it	cc
 80109e4:	2100      	movcc	r1, #0
 80109e6:	440b      	add	r3, r1
 80109e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80109ec:	b199      	cbz	r1, 8010a16 <__mdiff+0x11a>
 80109ee:	6117      	str	r7, [r2, #16]
 80109f0:	e79e      	b.n	8010930 <__mdiff+0x34>
 80109f2:	46e6      	mov	lr, ip
 80109f4:	f854 1b04 	ldr.w	r1, [r4], #4
 80109f8:	fa1f fc81 	uxth.w	ip, r1
 80109fc:	44f4      	add	ip, lr
 80109fe:	0c08      	lsrs	r0, r1, #16
 8010a00:	4471      	add	r1, lr
 8010a02:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010a06:	b289      	uxth	r1, r1
 8010a08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010a0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010a10:	f846 1b04 	str.w	r1, [r6], #4
 8010a14:	e7dc      	b.n	80109d0 <__mdiff+0xd4>
 8010a16:	3f01      	subs	r7, #1
 8010a18:	e7e6      	b.n	80109e8 <__mdiff+0xec>
 8010a1a:	bf00      	nop
 8010a1c:	0801254b 	.word	0x0801254b
 8010a20:	080125bc 	.word	0x080125bc

08010a24 <__ulp>:
 8010a24:	4b0e      	ldr	r3, [pc, #56]	@ (8010a60 <__ulp+0x3c>)
 8010a26:	400b      	ands	r3, r1
 8010a28:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	dc08      	bgt.n	8010a42 <__ulp+0x1e>
 8010a30:	425b      	negs	r3, r3
 8010a32:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010a36:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010a3a:	da04      	bge.n	8010a46 <__ulp+0x22>
 8010a3c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010a40:	4113      	asrs	r3, r2
 8010a42:	2200      	movs	r2, #0
 8010a44:	e008      	b.n	8010a58 <__ulp+0x34>
 8010a46:	f1a2 0314 	sub.w	r3, r2, #20
 8010a4a:	2b1e      	cmp	r3, #30
 8010a4c:	bfd6      	itet	le
 8010a4e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010a52:	2201      	movgt	r2, #1
 8010a54:	40da      	lsrle	r2, r3
 8010a56:	2300      	movs	r3, #0
 8010a58:	4619      	mov	r1, r3
 8010a5a:	4610      	mov	r0, r2
 8010a5c:	4770      	bx	lr
 8010a5e:	bf00      	nop
 8010a60:	7ff00000 	.word	0x7ff00000

08010a64 <__b2d>:
 8010a64:	6902      	ldr	r2, [r0, #16]
 8010a66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a68:	f100 0614 	add.w	r6, r0, #20
 8010a6c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8010a70:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8010a74:	4f1e      	ldr	r7, [pc, #120]	@ (8010af0 <__b2d+0x8c>)
 8010a76:	4620      	mov	r0, r4
 8010a78:	f7ff fd54 	bl	8010524 <__hi0bits>
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	f1c0 0020 	rsb	r0, r0, #32
 8010a82:	2b0a      	cmp	r3, #10
 8010a84:	f1a2 0504 	sub.w	r5, r2, #4
 8010a88:	6008      	str	r0, [r1, #0]
 8010a8a:	dc12      	bgt.n	8010ab2 <__b2d+0x4e>
 8010a8c:	42ae      	cmp	r6, r5
 8010a8e:	bf2c      	ite	cs
 8010a90:	2200      	movcs	r2, #0
 8010a92:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8010a96:	f1c3 0c0b 	rsb	ip, r3, #11
 8010a9a:	3315      	adds	r3, #21
 8010a9c:	fa24 fe0c 	lsr.w	lr, r4, ip
 8010aa0:	fa04 f303 	lsl.w	r3, r4, r3
 8010aa4:	fa22 f20c 	lsr.w	r2, r2, ip
 8010aa8:	ea4e 0107 	orr.w	r1, lr, r7
 8010aac:	431a      	orrs	r2, r3
 8010aae:	4610      	mov	r0, r2
 8010ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ab2:	42ae      	cmp	r6, r5
 8010ab4:	bf36      	itet	cc
 8010ab6:	f1a2 0508 	subcc.w	r5, r2, #8
 8010aba:	2200      	movcs	r2, #0
 8010abc:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8010ac0:	3b0b      	subs	r3, #11
 8010ac2:	d012      	beq.n	8010aea <__b2d+0x86>
 8010ac4:	f1c3 0720 	rsb	r7, r3, #32
 8010ac8:	fa22 f107 	lsr.w	r1, r2, r7
 8010acc:	409c      	lsls	r4, r3
 8010ace:	430c      	orrs	r4, r1
 8010ad0:	42b5      	cmp	r5, r6
 8010ad2:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8010ad6:	bf94      	ite	ls
 8010ad8:	2400      	movls	r4, #0
 8010ada:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8010ade:	409a      	lsls	r2, r3
 8010ae0:	40fc      	lsrs	r4, r7
 8010ae2:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8010ae6:	4322      	orrs	r2, r4
 8010ae8:	e7e1      	b.n	8010aae <__b2d+0x4a>
 8010aea:	ea44 0107 	orr.w	r1, r4, r7
 8010aee:	e7de      	b.n	8010aae <__b2d+0x4a>
 8010af0:	3ff00000 	.word	0x3ff00000

08010af4 <__d2b>:
 8010af4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8010af8:	2101      	movs	r1, #1
 8010afa:	4690      	mov	r8, r2
 8010afc:	4699      	mov	r9, r3
 8010afe:	9e08      	ldr	r6, [sp, #32]
 8010b00:	f7ff fc1e 	bl	8010340 <_Balloc>
 8010b04:	4604      	mov	r4, r0
 8010b06:	b930      	cbnz	r0, 8010b16 <__d2b+0x22>
 8010b08:	4602      	mov	r2, r0
 8010b0a:	f240 310f 	movw	r1, #783	@ 0x30f
 8010b0e:	4b23      	ldr	r3, [pc, #140]	@ (8010b9c <__d2b+0xa8>)
 8010b10:	4823      	ldr	r0, [pc, #140]	@ (8010ba0 <__d2b+0xac>)
 8010b12:	f7fe f9c5 	bl	800eea0 <__assert_func>
 8010b16:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010b1a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010b1e:	b10d      	cbz	r5, 8010b24 <__d2b+0x30>
 8010b20:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010b24:	9301      	str	r3, [sp, #4]
 8010b26:	f1b8 0300 	subs.w	r3, r8, #0
 8010b2a:	d024      	beq.n	8010b76 <__d2b+0x82>
 8010b2c:	4668      	mov	r0, sp
 8010b2e:	9300      	str	r3, [sp, #0]
 8010b30:	f7ff fd17 	bl	8010562 <__lo0bits>
 8010b34:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010b38:	b1d8      	cbz	r0, 8010b72 <__d2b+0x7e>
 8010b3a:	f1c0 0320 	rsb	r3, r0, #32
 8010b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8010b42:	430b      	orrs	r3, r1
 8010b44:	40c2      	lsrs	r2, r0
 8010b46:	6163      	str	r3, [r4, #20]
 8010b48:	9201      	str	r2, [sp, #4]
 8010b4a:	9b01      	ldr	r3, [sp, #4]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	bf0c      	ite	eq
 8010b50:	2201      	moveq	r2, #1
 8010b52:	2202      	movne	r2, #2
 8010b54:	61a3      	str	r3, [r4, #24]
 8010b56:	6122      	str	r2, [r4, #16]
 8010b58:	b1ad      	cbz	r5, 8010b86 <__d2b+0x92>
 8010b5a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010b5e:	4405      	add	r5, r0
 8010b60:	6035      	str	r5, [r6, #0]
 8010b62:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010b66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b68:	6018      	str	r0, [r3, #0]
 8010b6a:	4620      	mov	r0, r4
 8010b6c:	b002      	add	sp, #8
 8010b6e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8010b72:	6161      	str	r1, [r4, #20]
 8010b74:	e7e9      	b.n	8010b4a <__d2b+0x56>
 8010b76:	a801      	add	r0, sp, #4
 8010b78:	f7ff fcf3 	bl	8010562 <__lo0bits>
 8010b7c:	9b01      	ldr	r3, [sp, #4]
 8010b7e:	2201      	movs	r2, #1
 8010b80:	6163      	str	r3, [r4, #20]
 8010b82:	3020      	adds	r0, #32
 8010b84:	e7e7      	b.n	8010b56 <__d2b+0x62>
 8010b86:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010b8a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010b8e:	6030      	str	r0, [r6, #0]
 8010b90:	6918      	ldr	r0, [r3, #16]
 8010b92:	f7ff fcc7 	bl	8010524 <__hi0bits>
 8010b96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010b9a:	e7e4      	b.n	8010b66 <__d2b+0x72>
 8010b9c:	0801254b 	.word	0x0801254b
 8010ba0:	080125bc 	.word	0x080125bc

08010ba4 <__ratio>:
 8010ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ba8:	b085      	sub	sp, #20
 8010baa:	e9cd 1000 	strd	r1, r0, [sp]
 8010bae:	a902      	add	r1, sp, #8
 8010bb0:	f7ff ff58 	bl	8010a64 <__b2d>
 8010bb4:	468b      	mov	fp, r1
 8010bb6:	4606      	mov	r6, r0
 8010bb8:	460f      	mov	r7, r1
 8010bba:	9800      	ldr	r0, [sp, #0]
 8010bbc:	a903      	add	r1, sp, #12
 8010bbe:	f7ff ff51 	bl	8010a64 <__b2d>
 8010bc2:	460d      	mov	r5, r1
 8010bc4:	9b01      	ldr	r3, [sp, #4]
 8010bc6:	4689      	mov	r9, r1
 8010bc8:	6919      	ldr	r1, [r3, #16]
 8010bca:	9b00      	ldr	r3, [sp, #0]
 8010bcc:	4604      	mov	r4, r0
 8010bce:	691b      	ldr	r3, [r3, #16]
 8010bd0:	4630      	mov	r0, r6
 8010bd2:	1ac9      	subs	r1, r1, r3
 8010bd4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010bd8:	1a9b      	subs	r3, r3, r2
 8010bda:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	bfcd      	iteet	gt
 8010be2:	463a      	movgt	r2, r7
 8010be4:	462a      	movle	r2, r5
 8010be6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010bea:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8010bee:	bfd8      	it	le
 8010bf0:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8010bf4:	464b      	mov	r3, r9
 8010bf6:	4622      	mov	r2, r4
 8010bf8:	4659      	mov	r1, fp
 8010bfa:	f7ef fe11 	bl	8000820 <__aeabi_ddiv>
 8010bfe:	b005      	add	sp, #20
 8010c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010c04 <__copybits>:
 8010c04:	3901      	subs	r1, #1
 8010c06:	b570      	push	{r4, r5, r6, lr}
 8010c08:	1149      	asrs	r1, r1, #5
 8010c0a:	6914      	ldr	r4, [r2, #16]
 8010c0c:	3101      	adds	r1, #1
 8010c0e:	f102 0314 	add.w	r3, r2, #20
 8010c12:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010c16:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010c1a:	1f05      	subs	r5, r0, #4
 8010c1c:	42a3      	cmp	r3, r4
 8010c1e:	d30c      	bcc.n	8010c3a <__copybits+0x36>
 8010c20:	1aa3      	subs	r3, r4, r2
 8010c22:	3b11      	subs	r3, #17
 8010c24:	f023 0303 	bic.w	r3, r3, #3
 8010c28:	3211      	adds	r2, #17
 8010c2a:	42a2      	cmp	r2, r4
 8010c2c:	bf88      	it	hi
 8010c2e:	2300      	movhi	r3, #0
 8010c30:	4418      	add	r0, r3
 8010c32:	2300      	movs	r3, #0
 8010c34:	4288      	cmp	r0, r1
 8010c36:	d305      	bcc.n	8010c44 <__copybits+0x40>
 8010c38:	bd70      	pop	{r4, r5, r6, pc}
 8010c3a:	f853 6b04 	ldr.w	r6, [r3], #4
 8010c3e:	f845 6f04 	str.w	r6, [r5, #4]!
 8010c42:	e7eb      	b.n	8010c1c <__copybits+0x18>
 8010c44:	f840 3b04 	str.w	r3, [r0], #4
 8010c48:	e7f4      	b.n	8010c34 <__copybits+0x30>

08010c4a <__any_on>:
 8010c4a:	f100 0214 	add.w	r2, r0, #20
 8010c4e:	6900      	ldr	r0, [r0, #16]
 8010c50:	114b      	asrs	r3, r1, #5
 8010c52:	4298      	cmp	r0, r3
 8010c54:	b510      	push	{r4, lr}
 8010c56:	db11      	blt.n	8010c7c <__any_on+0x32>
 8010c58:	dd0a      	ble.n	8010c70 <__any_on+0x26>
 8010c5a:	f011 011f 	ands.w	r1, r1, #31
 8010c5e:	d007      	beq.n	8010c70 <__any_on+0x26>
 8010c60:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010c64:	fa24 f001 	lsr.w	r0, r4, r1
 8010c68:	fa00 f101 	lsl.w	r1, r0, r1
 8010c6c:	428c      	cmp	r4, r1
 8010c6e:	d10b      	bne.n	8010c88 <__any_on+0x3e>
 8010c70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010c74:	4293      	cmp	r3, r2
 8010c76:	d803      	bhi.n	8010c80 <__any_on+0x36>
 8010c78:	2000      	movs	r0, #0
 8010c7a:	bd10      	pop	{r4, pc}
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	e7f7      	b.n	8010c70 <__any_on+0x26>
 8010c80:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010c84:	2900      	cmp	r1, #0
 8010c86:	d0f5      	beq.n	8010c74 <__any_on+0x2a>
 8010c88:	2001      	movs	r0, #1
 8010c8a:	e7f6      	b.n	8010c7a <__any_on+0x30>

08010c8c <_strtoul_l.constprop.0>:
 8010c8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c90:	4686      	mov	lr, r0
 8010c92:	460d      	mov	r5, r1
 8010c94:	4e33      	ldr	r6, [pc, #204]	@ (8010d64 <_strtoul_l.constprop.0+0xd8>)
 8010c96:	4628      	mov	r0, r5
 8010c98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010c9c:	5d37      	ldrb	r7, [r6, r4]
 8010c9e:	f017 0708 	ands.w	r7, r7, #8
 8010ca2:	d1f8      	bne.n	8010c96 <_strtoul_l.constprop.0+0xa>
 8010ca4:	2c2d      	cmp	r4, #45	@ 0x2d
 8010ca6:	d12f      	bne.n	8010d08 <_strtoul_l.constprop.0+0x7c>
 8010ca8:	2701      	movs	r7, #1
 8010caa:	782c      	ldrb	r4, [r5, #0]
 8010cac:	1c85      	adds	r5, r0, #2
 8010cae:	f033 0010 	bics.w	r0, r3, #16
 8010cb2:	d109      	bne.n	8010cc8 <_strtoul_l.constprop.0+0x3c>
 8010cb4:	2c30      	cmp	r4, #48	@ 0x30
 8010cb6:	d12c      	bne.n	8010d12 <_strtoul_l.constprop.0+0x86>
 8010cb8:	7828      	ldrb	r0, [r5, #0]
 8010cba:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8010cbe:	2858      	cmp	r0, #88	@ 0x58
 8010cc0:	d127      	bne.n	8010d12 <_strtoul_l.constprop.0+0x86>
 8010cc2:	2310      	movs	r3, #16
 8010cc4:	786c      	ldrb	r4, [r5, #1]
 8010cc6:	3502      	adds	r5, #2
 8010cc8:	f04f 38ff 	mov.w	r8, #4294967295
 8010ccc:	fbb8 f8f3 	udiv	r8, r8, r3
 8010cd0:	2600      	movs	r6, #0
 8010cd2:	fb03 f908 	mul.w	r9, r3, r8
 8010cd6:	4630      	mov	r0, r6
 8010cd8:	ea6f 0909 	mvn.w	r9, r9
 8010cdc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8010ce0:	f1bc 0f09 	cmp.w	ip, #9
 8010ce4:	d81c      	bhi.n	8010d20 <_strtoul_l.constprop.0+0x94>
 8010ce6:	4664      	mov	r4, ip
 8010ce8:	42a3      	cmp	r3, r4
 8010cea:	dd2a      	ble.n	8010d42 <_strtoul_l.constprop.0+0xb6>
 8010cec:	f1b6 3fff 	cmp.w	r6, #4294967295
 8010cf0:	d007      	beq.n	8010d02 <_strtoul_l.constprop.0+0x76>
 8010cf2:	4580      	cmp	r8, r0
 8010cf4:	d322      	bcc.n	8010d3c <_strtoul_l.constprop.0+0xb0>
 8010cf6:	d101      	bne.n	8010cfc <_strtoul_l.constprop.0+0x70>
 8010cf8:	45a1      	cmp	r9, r4
 8010cfa:	db1f      	blt.n	8010d3c <_strtoul_l.constprop.0+0xb0>
 8010cfc:	2601      	movs	r6, #1
 8010cfe:	fb00 4003 	mla	r0, r0, r3, r4
 8010d02:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010d06:	e7e9      	b.n	8010cdc <_strtoul_l.constprop.0+0x50>
 8010d08:	2c2b      	cmp	r4, #43	@ 0x2b
 8010d0a:	bf04      	itt	eq
 8010d0c:	782c      	ldrbeq	r4, [r5, #0]
 8010d0e:	1c85      	addeq	r5, r0, #2
 8010d10:	e7cd      	b.n	8010cae <_strtoul_l.constprop.0+0x22>
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d1d8      	bne.n	8010cc8 <_strtoul_l.constprop.0+0x3c>
 8010d16:	2c30      	cmp	r4, #48	@ 0x30
 8010d18:	bf0c      	ite	eq
 8010d1a:	2308      	moveq	r3, #8
 8010d1c:	230a      	movne	r3, #10
 8010d1e:	e7d3      	b.n	8010cc8 <_strtoul_l.constprop.0+0x3c>
 8010d20:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8010d24:	f1bc 0f19 	cmp.w	ip, #25
 8010d28:	d801      	bhi.n	8010d2e <_strtoul_l.constprop.0+0xa2>
 8010d2a:	3c37      	subs	r4, #55	@ 0x37
 8010d2c:	e7dc      	b.n	8010ce8 <_strtoul_l.constprop.0+0x5c>
 8010d2e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8010d32:	f1bc 0f19 	cmp.w	ip, #25
 8010d36:	d804      	bhi.n	8010d42 <_strtoul_l.constprop.0+0xb6>
 8010d38:	3c57      	subs	r4, #87	@ 0x57
 8010d3a:	e7d5      	b.n	8010ce8 <_strtoul_l.constprop.0+0x5c>
 8010d3c:	f04f 36ff 	mov.w	r6, #4294967295
 8010d40:	e7df      	b.n	8010d02 <_strtoul_l.constprop.0+0x76>
 8010d42:	1c73      	adds	r3, r6, #1
 8010d44:	d106      	bne.n	8010d54 <_strtoul_l.constprop.0+0xc8>
 8010d46:	2322      	movs	r3, #34	@ 0x22
 8010d48:	4630      	mov	r0, r6
 8010d4a:	f8ce 3000 	str.w	r3, [lr]
 8010d4e:	b932      	cbnz	r2, 8010d5e <_strtoul_l.constprop.0+0xd2>
 8010d50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d54:	b107      	cbz	r7, 8010d58 <_strtoul_l.constprop.0+0xcc>
 8010d56:	4240      	negs	r0, r0
 8010d58:	2a00      	cmp	r2, #0
 8010d5a:	d0f9      	beq.n	8010d50 <_strtoul_l.constprop.0+0xc4>
 8010d5c:	b106      	cbz	r6, 8010d60 <_strtoul_l.constprop.0+0xd4>
 8010d5e:	1e69      	subs	r1, r5, #1
 8010d60:	6011      	str	r1, [r2, #0]
 8010d62:	e7f5      	b.n	8010d50 <_strtoul_l.constprop.0+0xc4>
 8010d64:	08012251 	.word	0x08012251

08010d68 <_strtoul_r>:
 8010d68:	f7ff bf90 	b.w	8010c8c <_strtoul_l.constprop.0>

08010d6c <strtoul>:
 8010d6c:	4613      	mov	r3, r2
 8010d6e:	460a      	mov	r2, r1
 8010d70:	4601      	mov	r1, r0
 8010d72:	4802      	ldr	r0, [pc, #8]	@ (8010d7c <strtoul+0x10>)
 8010d74:	6800      	ldr	r0, [r0, #0]
 8010d76:	f7ff bf89 	b.w	8010c8c <_strtoul_l.constprop.0>
 8010d7a:	bf00      	nop
 8010d7c:	2000026c 	.word	0x2000026c

08010d80 <__ascii_wctomb>:
 8010d80:	4603      	mov	r3, r0
 8010d82:	4608      	mov	r0, r1
 8010d84:	b141      	cbz	r1, 8010d98 <__ascii_wctomb+0x18>
 8010d86:	2aff      	cmp	r2, #255	@ 0xff
 8010d88:	d904      	bls.n	8010d94 <__ascii_wctomb+0x14>
 8010d8a:	228a      	movs	r2, #138	@ 0x8a
 8010d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8010d90:	601a      	str	r2, [r3, #0]
 8010d92:	4770      	bx	lr
 8010d94:	2001      	movs	r0, #1
 8010d96:	700a      	strb	r2, [r1, #0]
 8010d98:	4770      	bx	lr

08010d9a <__ssputs_r>:
 8010d9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d9e:	461f      	mov	r7, r3
 8010da0:	688e      	ldr	r6, [r1, #8]
 8010da2:	4682      	mov	sl, r0
 8010da4:	42be      	cmp	r6, r7
 8010da6:	460c      	mov	r4, r1
 8010da8:	4690      	mov	r8, r2
 8010daa:	680b      	ldr	r3, [r1, #0]
 8010dac:	d82d      	bhi.n	8010e0a <__ssputs_r+0x70>
 8010dae:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010db2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010db6:	d026      	beq.n	8010e06 <__ssputs_r+0x6c>
 8010db8:	6965      	ldr	r5, [r4, #20]
 8010dba:	6909      	ldr	r1, [r1, #16]
 8010dbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010dc0:	eba3 0901 	sub.w	r9, r3, r1
 8010dc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010dc8:	1c7b      	adds	r3, r7, #1
 8010dca:	444b      	add	r3, r9
 8010dcc:	106d      	asrs	r5, r5, #1
 8010dce:	429d      	cmp	r5, r3
 8010dd0:	bf38      	it	cc
 8010dd2:	461d      	movcc	r5, r3
 8010dd4:	0553      	lsls	r3, r2, #21
 8010dd6:	d527      	bpl.n	8010e28 <__ssputs_r+0x8e>
 8010dd8:	4629      	mov	r1, r5
 8010dda:	f7fb fc49 	bl	800c670 <_malloc_r>
 8010dde:	4606      	mov	r6, r0
 8010de0:	b360      	cbz	r0, 8010e3c <__ssputs_r+0xa2>
 8010de2:	464a      	mov	r2, r9
 8010de4:	6921      	ldr	r1, [r4, #16]
 8010de6:	f7fe f842 	bl	800ee6e <memcpy>
 8010dea:	89a3      	ldrh	r3, [r4, #12]
 8010dec:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010df0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010df4:	81a3      	strh	r3, [r4, #12]
 8010df6:	6126      	str	r6, [r4, #16]
 8010df8:	444e      	add	r6, r9
 8010dfa:	6026      	str	r6, [r4, #0]
 8010dfc:	463e      	mov	r6, r7
 8010dfe:	6165      	str	r5, [r4, #20]
 8010e00:	eba5 0509 	sub.w	r5, r5, r9
 8010e04:	60a5      	str	r5, [r4, #8]
 8010e06:	42be      	cmp	r6, r7
 8010e08:	d900      	bls.n	8010e0c <__ssputs_r+0x72>
 8010e0a:	463e      	mov	r6, r7
 8010e0c:	4632      	mov	r2, r6
 8010e0e:	4641      	mov	r1, r8
 8010e10:	6820      	ldr	r0, [r4, #0]
 8010e12:	f000 fbd1 	bl	80115b8 <memmove>
 8010e16:	2000      	movs	r0, #0
 8010e18:	68a3      	ldr	r3, [r4, #8]
 8010e1a:	1b9b      	subs	r3, r3, r6
 8010e1c:	60a3      	str	r3, [r4, #8]
 8010e1e:	6823      	ldr	r3, [r4, #0]
 8010e20:	4433      	add	r3, r6
 8010e22:	6023      	str	r3, [r4, #0]
 8010e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e28:	462a      	mov	r2, r5
 8010e2a:	f000 fc0b 	bl	8011644 <_realloc_r>
 8010e2e:	4606      	mov	r6, r0
 8010e30:	2800      	cmp	r0, #0
 8010e32:	d1e0      	bne.n	8010df6 <__ssputs_r+0x5c>
 8010e34:	4650      	mov	r0, sl
 8010e36:	6921      	ldr	r1, [r4, #16]
 8010e38:	f7fe feaa 	bl	800fb90 <_free_r>
 8010e3c:	230c      	movs	r3, #12
 8010e3e:	f8ca 3000 	str.w	r3, [sl]
 8010e42:	89a3      	ldrh	r3, [r4, #12]
 8010e44:	f04f 30ff 	mov.w	r0, #4294967295
 8010e48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e4c:	81a3      	strh	r3, [r4, #12]
 8010e4e:	e7e9      	b.n	8010e24 <__ssputs_r+0x8a>

08010e50 <_svfiprintf_r>:
 8010e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e54:	4698      	mov	r8, r3
 8010e56:	898b      	ldrh	r3, [r1, #12]
 8010e58:	4607      	mov	r7, r0
 8010e5a:	061b      	lsls	r3, r3, #24
 8010e5c:	460d      	mov	r5, r1
 8010e5e:	4614      	mov	r4, r2
 8010e60:	b09d      	sub	sp, #116	@ 0x74
 8010e62:	d510      	bpl.n	8010e86 <_svfiprintf_r+0x36>
 8010e64:	690b      	ldr	r3, [r1, #16]
 8010e66:	b973      	cbnz	r3, 8010e86 <_svfiprintf_r+0x36>
 8010e68:	2140      	movs	r1, #64	@ 0x40
 8010e6a:	f7fb fc01 	bl	800c670 <_malloc_r>
 8010e6e:	6028      	str	r0, [r5, #0]
 8010e70:	6128      	str	r0, [r5, #16]
 8010e72:	b930      	cbnz	r0, 8010e82 <_svfiprintf_r+0x32>
 8010e74:	230c      	movs	r3, #12
 8010e76:	603b      	str	r3, [r7, #0]
 8010e78:	f04f 30ff 	mov.w	r0, #4294967295
 8010e7c:	b01d      	add	sp, #116	@ 0x74
 8010e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e82:	2340      	movs	r3, #64	@ 0x40
 8010e84:	616b      	str	r3, [r5, #20]
 8010e86:	2300      	movs	r3, #0
 8010e88:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e8a:	2320      	movs	r3, #32
 8010e8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010e90:	2330      	movs	r3, #48	@ 0x30
 8010e92:	f04f 0901 	mov.w	r9, #1
 8010e96:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e9a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8011034 <_svfiprintf_r+0x1e4>
 8010e9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010ea2:	4623      	mov	r3, r4
 8010ea4:	469a      	mov	sl, r3
 8010ea6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010eaa:	b10a      	cbz	r2, 8010eb0 <_svfiprintf_r+0x60>
 8010eac:	2a25      	cmp	r2, #37	@ 0x25
 8010eae:	d1f9      	bne.n	8010ea4 <_svfiprintf_r+0x54>
 8010eb0:	ebba 0b04 	subs.w	fp, sl, r4
 8010eb4:	d00b      	beq.n	8010ece <_svfiprintf_r+0x7e>
 8010eb6:	465b      	mov	r3, fp
 8010eb8:	4622      	mov	r2, r4
 8010eba:	4629      	mov	r1, r5
 8010ebc:	4638      	mov	r0, r7
 8010ebe:	f7ff ff6c 	bl	8010d9a <__ssputs_r>
 8010ec2:	3001      	adds	r0, #1
 8010ec4:	f000 80a7 	beq.w	8011016 <_svfiprintf_r+0x1c6>
 8010ec8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010eca:	445a      	add	r2, fp
 8010ecc:	9209      	str	r2, [sp, #36]	@ 0x24
 8010ece:	f89a 3000 	ldrb.w	r3, [sl]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	f000 809f 	beq.w	8011016 <_svfiprintf_r+0x1c6>
 8010ed8:	2300      	movs	r3, #0
 8010eda:	f04f 32ff 	mov.w	r2, #4294967295
 8010ede:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ee2:	f10a 0a01 	add.w	sl, sl, #1
 8010ee6:	9304      	str	r3, [sp, #16]
 8010ee8:	9307      	str	r3, [sp, #28]
 8010eea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010eee:	931a      	str	r3, [sp, #104]	@ 0x68
 8010ef0:	4654      	mov	r4, sl
 8010ef2:	2205      	movs	r2, #5
 8010ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ef8:	484e      	ldr	r0, [pc, #312]	@ (8011034 <_svfiprintf_r+0x1e4>)
 8010efa:	f7fd ffaa 	bl	800ee52 <memchr>
 8010efe:	9a04      	ldr	r2, [sp, #16]
 8010f00:	b9d8      	cbnz	r0, 8010f3a <_svfiprintf_r+0xea>
 8010f02:	06d0      	lsls	r0, r2, #27
 8010f04:	bf44      	itt	mi
 8010f06:	2320      	movmi	r3, #32
 8010f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010f0c:	0711      	lsls	r1, r2, #28
 8010f0e:	bf44      	itt	mi
 8010f10:	232b      	movmi	r3, #43	@ 0x2b
 8010f12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010f16:	f89a 3000 	ldrb.w	r3, [sl]
 8010f1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8010f1c:	d015      	beq.n	8010f4a <_svfiprintf_r+0xfa>
 8010f1e:	4654      	mov	r4, sl
 8010f20:	2000      	movs	r0, #0
 8010f22:	f04f 0c0a 	mov.w	ip, #10
 8010f26:	9a07      	ldr	r2, [sp, #28]
 8010f28:	4621      	mov	r1, r4
 8010f2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f2e:	3b30      	subs	r3, #48	@ 0x30
 8010f30:	2b09      	cmp	r3, #9
 8010f32:	d94b      	bls.n	8010fcc <_svfiprintf_r+0x17c>
 8010f34:	b1b0      	cbz	r0, 8010f64 <_svfiprintf_r+0x114>
 8010f36:	9207      	str	r2, [sp, #28]
 8010f38:	e014      	b.n	8010f64 <_svfiprintf_r+0x114>
 8010f3a:	eba0 0308 	sub.w	r3, r0, r8
 8010f3e:	fa09 f303 	lsl.w	r3, r9, r3
 8010f42:	4313      	orrs	r3, r2
 8010f44:	46a2      	mov	sl, r4
 8010f46:	9304      	str	r3, [sp, #16]
 8010f48:	e7d2      	b.n	8010ef0 <_svfiprintf_r+0xa0>
 8010f4a:	9b03      	ldr	r3, [sp, #12]
 8010f4c:	1d19      	adds	r1, r3, #4
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	9103      	str	r1, [sp, #12]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	bfbb      	ittet	lt
 8010f56:	425b      	neglt	r3, r3
 8010f58:	f042 0202 	orrlt.w	r2, r2, #2
 8010f5c:	9307      	strge	r3, [sp, #28]
 8010f5e:	9307      	strlt	r3, [sp, #28]
 8010f60:	bfb8      	it	lt
 8010f62:	9204      	strlt	r2, [sp, #16]
 8010f64:	7823      	ldrb	r3, [r4, #0]
 8010f66:	2b2e      	cmp	r3, #46	@ 0x2e
 8010f68:	d10a      	bne.n	8010f80 <_svfiprintf_r+0x130>
 8010f6a:	7863      	ldrb	r3, [r4, #1]
 8010f6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8010f6e:	d132      	bne.n	8010fd6 <_svfiprintf_r+0x186>
 8010f70:	9b03      	ldr	r3, [sp, #12]
 8010f72:	3402      	adds	r4, #2
 8010f74:	1d1a      	adds	r2, r3, #4
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	9203      	str	r2, [sp, #12]
 8010f7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010f7e:	9305      	str	r3, [sp, #20]
 8010f80:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8011038 <_svfiprintf_r+0x1e8>
 8010f84:	2203      	movs	r2, #3
 8010f86:	4650      	mov	r0, sl
 8010f88:	7821      	ldrb	r1, [r4, #0]
 8010f8a:	f7fd ff62 	bl	800ee52 <memchr>
 8010f8e:	b138      	cbz	r0, 8010fa0 <_svfiprintf_r+0x150>
 8010f90:	2240      	movs	r2, #64	@ 0x40
 8010f92:	9b04      	ldr	r3, [sp, #16]
 8010f94:	eba0 000a 	sub.w	r0, r0, sl
 8010f98:	4082      	lsls	r2, r0
 8010f9a:	4313      	orrs	r3, r2
 8010f9c:	3401      	adds	r4, #1
 8010f9e:	9304      	str	r3, [sp, #16]
 8010fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fa4:	2206      	movs	r2, #6
 8010fa6:	4825      	ldr	r0, [pc, #148]	@ (801103c <_svfiprintf_r+0x1ec>)
 8010fa8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010fac:	f7fd ff51 	bl	800ee52 <memchr>
 8010fb0:	2800      	cmp	r0, #0
 8010fb2:	d036      	beq.n	8011022 <_svfiprintf_r+0x1d2>
 8010fb4:	4b22      	ldr	r3, [pc, #136]	@ (8011040 <_svfiprintf_r+0x1f0>)
 8010fb6:	bb1b      	cbnz	r3, 8011000 <_svfiprintf_r+0x1b0>
 8010fb8:	9b03      	ldr	r3, [sp, #12]
 8010fba:	3307      	adds	r3, #7
 8010fbc:	f023 0307 	bic.w	r3, r3, #7
 8010fc0:	3308      	adds	r3, #8
 8010fc2:	9303      	str	r3, [sp, #12]
 8010fc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fc6:	4433      	add	r3, r6
 8010fc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8010fca:	e76a      	b.n	8010ea2 <_svfiprintf_r+0x52>
 8010fcc:	460c      	mov	r4, r1
 8010fce:	2001      	movs	r0, #1
 8010fd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8010fd4:	e7a8      	b.n	8010f28 <_svfiprintf_r+0xd8>
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	f04f 0c0a 	mov.w	ip, #10
 8010fdc:	4619      	mov	r1, r3
 8010fde:	3401      	adds	r4, #1
 8010fe0:	9305      	str	r3, [sp, #20]
 8010fe2:	4620      	mov	r0, r4
 8010fe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010fe8:	3a30      	subs	r2, #48	@ 0x30
 8010fea:	2a09      	cmp	r2, #9
 8010fec:	d903      	bls.n	8010ff6 <_svfiprintf_r+0x1a6>
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d0c6      	beq.n	8010f80 <_svfiprintf_r+0x130>
 8010ff2:	9105      	str	r1, [sp, #20]
 8010ff4:	e7c4      	b.n	8010f80 <_svfiprintf_r+0x130>
 8010ff6:	4604      	mov	r4, r0
 8010ff8:	2301      	movs	r3, #1
 8010ffa:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ffe:	e7f0      	b.n	8010fe2 <_svfiprintf_r+0x192>
 8011000:	ab03      	add	r3, sp, #12
 8011002:	9300      	str	r3, [sp, #0]
 8011004:	462a      	mov	r2, r5
 8011006:	4638      	mov	r0, r7
 8011008:	4b0e      	ldr	r3, [pc, #56]	@ (8011044 <_svfiprintf_r+0x1f4>)
 801100a:	a904      	add	r1, sp, #16
 801100c:	f7fc fb34 	bl	800d678 <_printf_float>
 8011010:	1c42      	adds	r2, r0, #1
 8011012:	4606      	mov	r6, r0
 8011014:	d1d6      	bne.n	8010fc4 <_svfiprintf_r+0x174>
 8011016:	89ab      	ldrh	r3, [r5, #12]
 8011018:	065b      	lsls	r3, r3, #25
 801101a:	f53f af2d 	bmi.w	8010e78 <_svfiprintf_r+0x28>
 801101e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011020:	e72c      	b.n	8010e7c <_svfiprintf_r+0x2c>
 8011022:	ab03      	add	r3, sp, #12
 8011024:	9300      	str	r3, [sp, #0]
 8011026:	462a      	mov	r2, r5
 8011028:	4638      	mov	r0, r7
 801102a:	4b06      	ldr	r3, [pc, #24]	@ (8011044 <_svfiprintf_r+0x1f4>)
 801102c:	a904      	add	r1, sp, #16
 801102e:	f7fc fdc1 	bl	800dbb4 <_printf_i>
 8011032:	e7ed      	b.n	8011010 <_svfiprintf_r+0x1c0>
 8011034:	08012718 	.word	0x08012718
 8011038:	0801271e 	.word	0x0801271e
 801103c:	08012722 	.word	0x08012722
 8011040:	0800d679 	.word	0x0800d679
 8011044:	08010d9b 	.word	0x08010d9b

08011048 <__sfputc_r>:
 8011048:	6893      	ldr	r3, [r2, #8]
 801104a:	b410      	push	{r4}
 801104c:	3b01      	subs	r3, #1
 801104e:	2b00      	cmp	r3, #0
 8011050:	6093      	str	r3, [r2, #8]
 8011052:	da07      	bge.n	8011064 <__sfputc_r+0x1c>
 8011054:	6994      	ldr	r4, [r2, #24]
 8011056:	42a3      	cmp	r3, r4
 8011058:	db01      	blt.n	801105e <__sfputc_r+0x16>
 801105a:	290a      	cmp	r1, #10
 801105c:	d102      	bne.n	8011064 <__sfputc_r+0x1c>
 801105e:	bc10      	pop	{r4}
 8011060:	f000 ba16 	b.w	8011490 <__swbuf_r>
 8011064:	6813      	ldr	r3, [r2, #0]
 8011066:	1c58      	adds	r0, r3, #1
 8011068:	6010      	str	r0, [r2, #0]
 801106a:	7019      	strb	r1, [r3, #0]
 801106c:	4608      	mov	r0, r1
 801106e:	bc10      	pop	{r4}
 8011070:	4770      	bx	lr

08011072 <__sfputs_r>:
 8011072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011074:	4606      	mov	r6, r0
 8011076:	460f      	mov	r7, r1
 8011078:	4614      	mov	r4, r2
 801107a:	18d5      	adds	r5, r2, r3
 801107c:	42ac      	cmp	r4, r5
 801107e:	d101      	bne.n	8011084 <__sfputs_r+0x12>
 8011080:	2000      	movs	r0, #0
 8011082:	e007      	b.n	8011094 <__sfputs_r+0x22>
 8011084:	463a      	mov	r2, r7
 8011086:	4630      	mov	r0, r6
 8011088:	f814 1b01 	ldrb.w	r1, [r4], #1
 801108c:	f7ff ffdc 	bl	8011048 <__sfputc_r>
 8011090:	1c43      	adds	r3, r0, #1
 8011092:	d1f3      	bne.n	801107c <__sfputs_r+0xa>
 8011094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011098 <_vfiprintf_r>:
 8011098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801109c:	460d      	mov	r5, r1
 801109e:	4614      	mov	r4, r2
 80110a0:	4698      	mov	r8, r3
 80110a2:	4606      	mov	r6, r0
 80110a4:	b09d      	sub	sp, #116	@ 0x74
 80110a6:	b118      	cbz	r0, 80110b0 <_vfiprintf_r+0x18>
 80110a8:	6a03      	ldr	r3, [r0, #32]
 80110aa:	b90b      	cbnz	r3, 80110b0 <_vfiprintf_r+0x18>
 80110ac:	f7fc ff2e 	bl	800df0c <__sinit>
 80110b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80110b2:	07d9      	lsls	r1, r3, #31
 80110b4:	d405      	bmi.n	80110c2 <_vfiprintf_r+0x2a>
 80110b6:	89ab      	ldrh	r3, [r5, #12]
 80110b8:	059a      	lsls	r2, r3, #22
 80110ba:	d402      	bmi.n	80110c2 <_vfiprintf_r+0x2a>
 80110bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80110be:	f7fd febd 	bl	800ee3c <__retarget_lock_acquire_recursive>
 80110c2:	89ab      	ldrh	r3, [r5, #12]
 80110c4:	071b      	lsls	r3, r3, #28
 80110c6:	d501      	bpl.n	80110cc <_vfiprintf_r+0x34>
 80110c8:	692b      	ldr	r3, [r5, #16]
 80110ca:	b99b      	cbnz	r3, 80110f4 <_vfiprintf_r+0x5c>
 80110cc:	4629      	mov	r1, r5
 80110ce:	4630      	mov	r0, r6
 80110d0:	f000 fa1c 	bl	801150c <__swsetup_r>
 80110d4:	b170      	cbz	r0, 80110f4 <_vfiprintf_r+0x5c>
 80110d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80110d8:	07dc      	lsls	r4, r3, #31
 80110da:	d504      	bpl.n	80110e6 <_vfiprintf_r+0x4e>
 80110dc:	f04f 30ff 	mov.w	r0, #4294967295
 80110e0:	b01d      	add	sp, #116	@ 0x74
 80110e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110e6:	89ab      	ldrh	r3, [r5, #12]
 80110e8:	0598      	lsls	r0, r3, #22
 80110ea:	d4f7      	bmi.n	80110dc <_vfiprintf_r+0x44>
 80110ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80110ee:	f7fd fea7 	bl	800ee40 <__retarget_lock_release_recursive>
 80110f2:	e7f3      	b.n	80110dc <_vfiprintf_r+0x44>
 80110f4:	2300      	movs	r3, #0
 80110f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80110f8:	2320      	movs	r3, #32
 80110fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80110fe:	2330      	movs	r3, #48	@ 0x30
 8011100:	f04f 0901 	mov.w	r9, #1
 8011104:	f8cd 800c 	str.w	r8, [sp, #12]
 8011108:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80112b4 <_vfiprintf_r+0x21c>
 801110c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011110:	4623      	mov	r3, r4
 8011112:	469a      	mov	sl, r3
 8011114:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011118:	b10a      	cbz	r2, 801111e <_vfiprintf_r+0x86>
 801111a:	2a25      	cmp	r2, #37	@ 0x25
 801111c:	d1f9      	bne.n	8011112 <_vfiprintf_r+0x7a>
 801111e:	ebba 0b04 	subs.w	fp, sl, r4
 8011122:	d00b      	beq.n	801113c <_vfiprintf_r+0xa4>
 8011124:	465b      	mov	r3, fp
 8011126:	4622      	mov	r2, r4
 8011128:	4629      	mov	r1, r5
 801112a:	4630      	mov	r0, r6
 801112c:	f7ff ffa1 	bl	8011072 <__sfputs_r>
 8011130:	3001      	adds	r0, #1
 8011132:	f000 80a7 	beq.w	8011284 <_vfiprintf_r+0x1ec>
 8011136:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011138:	445a      	add	r2, fp
 801113a:	9209      	str	r2, [sp, #36]	@ 0x24
 801113c:	f89a 3000 	ldrb.w	r3, [sl]
 8011140:	2b00      	cmp	r3, #0
 8011142:	f000 809f 	beq.w	8011284 <_vfiprintf_r+0x1ec>
 8011146:	2300      	movs	r3, #0
 8011148:	f04f 32ff 	mov.w	r2, #4294967295
 801114c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011150:	f10a 0a01 	add.w	sl, sl, #1
 8011154:	9304      	str	r3, [sp, #16]
 8011156:	9307      	str	r3, [sp, #28]
 8011158:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801115c:	931a      	str	r3, [sp, #104]	@ 0x68
 801115e:	4654      	mov	r4, sl
 8011160:	2205      	movs	r2, #5
 8011162:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011166:	4853      	ldr	r0, [pc, #332]	@ (80112b4 <_vfiprintf_r+0x21c>)
 8011168:	f7fd fe73 	bl	800ee52 <memchr>
 801116c:	9a04      	ldr	r2, [sp, #16]
 801116e:	b9d8      	cbnz	r0, 80111a8 <_vfiprintf_r+0x110>
 8011170:	06d1      	lsls	r1, r2, #27
 8011172:	bf44      	itt	mi
 8011174:	2320      	movmi	r3, #32
 8011176:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801117a:	0713      	lsls	r3, r2, #28
 801117c:	bf44      	itt	mi
 801117e:	232b      	movmi	r3, #43	@ 0x2b
 8011180:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011184:	f89a 3000 	ldrb.w	r3, [sl]
 8011188:	2b2a      	cmp	r3, #42	@ 0x2a
 801118a:	d015      	beq.n	80111b8 <_vfiprintf_r+0x120>
 801118c:	4654      	mov	r4, sl
 801118e:	2000      	movs	r0, #0
 8011190:	f04f 0c0a 	mov.w	ip, #10
 8011194:	9a07      	ldr	r2, [sp, #28]
 8011196:	4621      	mov	r1, r4
 8011198:	f811 3b01 	ldrb.w	r3, [r1], #1
 801119c:	3b30      	subs	r3, #48	@ 0x30
 801119e:	2b09      	cmp	r3, #9
 80111a0:	d94b      	bls.n	801123a <_vfiprintf_r+0x1a2>
 80111a2:	b1b0      	cbz	r0, 80111d2 <_vfiprintf_r+0x13a>
 80111a4:	9207      	str	r2, [sp, #28]
 80111a6:	e014      	b.n	80111d2 <_vfiprintf_r+0x13a>
 80111a8:	eba0 0308 	sub.w	r3, r0, r8
 80111ac:	fa09 f303 	lsl.w	r3, r9, r3
 80111b0:	4313      	orrs	r3, r2
 80111b2:	46a2      	mov	sl, r4
 80111b4:	9304      	str	r3, [sp, #16]
 80111b6:	e7d2      	b.n	801115e <_vfiprintf_r+0xc6>
 80111b8:	9b03      	ldr	r3, [sp, #12]
 80111ba:	1d19      	adds	r1, r3, #4
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	9103      	str	r1, [sp, #12]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	bfbb      	ittet	lt
 80111c4:	425b      	neglt	r3, r3
 80111c6:	f042 0202 	orrlt.w	r2, r2, #2
 80111ca:	9307      	strge	r3, [sp, #28]
 80111cc:	9307      	strlt	r3, [sp, #28]
 80111ce:	bfb8      	it	lt
 80111d0:	9204      	strlt	r2, [sp, #16]
 80111d2:	7823      	ldrb	r3, [r4, #0]
 80111d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80111d6:	d10a      	bne.n	80111ee <_vfiprintf_r+0x156>
 80111d8:	7863      	ldrb	r3, [r4, #1]
 80111da:	2b2a      	cmp	r3, #42	@ 0x2a
 80111dc:	d132      	bne.n	8011244 <_vfiprintf_r+0x1ac>
 80111de:	9b03      	ldr	r3, [sp, #12]
 80111e0:	3402      	adds	r4, #2
 80111e2:	1d1a      	adds	r2, r3, #4
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	9203      	str	r2, [sp, #12]
 80111e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80111ec:	9305      	str	r3, [sp, #20]
 80111ee:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80112b8 <_vfiprintf_r+0x220>
 80111f2:	2203      	movs	r2, #3
 80111f4:	4650      	mov	r0, sl
 80111f6:	7821      	ldrb	r1, [r4, #0]
 80111f8:	f7fd fe2b 	bl	800ee52 <memchr>
 80111fc:	b138      	cbz	r0, 801120e <_vfiprintf_r+0x176>
 80111fe:	2240      	movs	r2, #64	@ 0x40
 8011200:	9b04      	ldr	r3, [sp, #16]
 8011202:	eba0 000a 	sub.w	r0, r0, sl
 8011206:	4082      	lsls	r2, r0
 8011208:	4313      	orrs	r3, r2
 801120a:	3401      	adds	r4, #1
 801120c:	9304      	str	r3, [sp, #16]
 801120e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011212:	2206      	movs	r2, #6
 8011214:	4829      	ldr	r0, [pc, #164]	@ (80112bc <_vfiprintf_r+0x224>)
 8011216:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801121a:	f7fd fe1a 	bl	800ee52 <memchr>
 801121e:	2800      	cmp	r0, #0
 8011220:	d03f      	beq.n	80112a2 <_vfiprintf_r+0x20a>
 8011222:	4b27      	ldr	r3, [pc, #156]	@ (80112c0 <_vfiprintf_r+0x228>)
 8011224:	bb1b      	cbnz	r3, 801126e <_vfiprintf_r+0x1d6>
 8011226:	9b03      	ldr	r3, [sp, #12]
 8011228:	3307      	adds	r3, #7
 801122a:	f023 0307 	bic.w	r3, r3, #7
 801122e:	3308      	adds	r3, #8
 8011230:	9303      	str	r3, [sp, #12]
 8011232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011234:	443b      	add	r3, r7
 8011236:	9309      	str	r3, [sp, #36]	@ 0x24
 8011238:	e76a      	b.n	8011110 <_vfiprintf_r+0x78>
 801123a:	460c      	mov	r4, r1
 801123c:	2001      	movs	r0, #1
 801123e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011242:	e7a8      	b.n	8011196 <_vfiprintf_r+0xfe>
 8011244:	2300      	movs	r3, #0
 8011246:	f04f 0c0a 	mov.w	ip, #10
 801124a:	4619      	mov	r1, r3
 801124c:	3401      	adds	r4, #1
 801124e:	9305      	str	r3, [sp, #20]
 8011250:	4620      	mov	r0, r4
 8011252:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011256:	3a30      	subs	r2, #48	@ 0x30
 8011258:	2a09      	cmp	r2, #9
 801125a:	d903      	bls.n	8011264 <_vfiprintf_r+0x1cc>
 801125c:	2b00      	cmp	r3, #0
 801125e:	d0c6      	beq.n	80111ee <_vfiprintf_r+0x156>
 8011260:	9105      	str	r1, [sp, #20]
 8011262:	e7c4      	b.n	80111ee <_vfiprintf_r+0x156>
 8011264:	4604      	mov	r4, r0
 8011266:	2301      	movs	r3, #1
 8011268:	fb0c 2101 	mla	r1, ip, r1, r2
 801126c:	e7f0      	b.n	8011250 <_vfiprintf_r+0x1b8>
 801126e:	ab03      	add	r3, sp, #12
 8011270:	9300      	str	r3, [sp, #0]
 8011272:	462a      	mov	r2, r5
 8011274:	4630      	mov	r0, r6
 8011276:	4b13      	ldr	r3, [pc, #76]	@ (80112c4 <_vfiprintf_r+0x22c>)
 8011278:	a904      	add	r1, sp, #16
 801127a:	f7fc f9fd 	bl	800d678 <_printf_float>
 801127e:	4607      	mov	r7, r0
 8011280:	1c78      	adds	r0, r7, #1
 8011282:	d1d6      	bne.n	8011232 <_vfiprintf_r+0x19a>
 8011284:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011286:	07d9      	lsls	r1, r3, #31
 8011288:	d405      	bmi.n	8011296 <_vfiprintf_r+0x1fe>
 801128a:	89ab      	ldrh	r3, [r5, #12]
 801128c:	059a      	lsls	r2, r3, #22
 801128e:	d402      	bmi.n	8011296 <_vfiprintf_r+0x1fe>
 8011290:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011292:	f7fd fdd5 	bl	800ee40 <__retarget_lock_release_recursive>
 8011296:	89ab      	ldrh	r3, [r5, #12]
 8011298:	065b      	lsls	r3, r3, #25
 801129a:	f53f af1f 	bmi.w	80110dc <_vfiprintf_r+0x44>
 801129e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80112a0:	e71e      	b.n	80110e0 <_vfiprintf_r+0x48>
 80112a2:	ab03      	add	r3, sp, #12
 80112a4:	9300      	str	r3, [sp, #0]
 80112a6:	462a      	mov	r2, r5
 80112a8:	4630      	mov	r0, r6
 80112aa:	4b06      	ldr	r3, [pc, #24]	@ (80112c4 <_vfiprintf_r+0x22c>)
 80112ac:	a904      	add	r1, sp, #16
 80112ae:	f7fc fc81 	bl	800dbb4 <_printf_i>
 80112b2:	e7e4      	b.n	801127e <_vfiprintf_r+0x1e6>
 80112b4:	08012718 	.word	0x08012718
 80112b8:	0801271e 	.word	0x0801271e
 80112bc:	08012722 	.word	0x08012722
 80112c0:	0800d679 	.word	0x0800d679
 80112c4:	08011073 	.word	0x08011073

080112c8 <__sflush_r>:
 80112c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80112cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ce:	0716      	lsls	r6, r2, #28
 80112d0:	4605      	mov	r5, r0
 80112d2:	460c      	mov	r4, r1
 80112d4:	d454      	bmi.n	8011380 <__sflush_r+0xb8>
 80112d6:	684b      	ldr	r3, [r1, #4]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	dc02      	bgt.n	80112e2 <__sflush_r+0x1a>
 80112dc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80112de:	2b00      	cmp	r3, #0
 80112e0:	dd48      	ble.n	8011374 <__sflush_r+0xac>
 80112e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80112e4:	2e00      	cmp	r6, #0
 80112e6:	d045      	beq.n	8011374 <__sflush_r+0xac>
 80112e8:	2300      	movs	r3, #0
 80112ea:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80112ee:	682f      	ldr	r7, [r5, #0]
 80112f0:	6a21      	ldr	r1, [r4, #32]
 80112f2:	602b      	str	r3, [r5, #0]
 80112f4:	d030      	beq.n	8011358 <__sflush_r+0x90>
 80112f6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80112f8:	89a3      	ldrh	r3, [r4, #12]
 80112fa:	0759      	lsls	r1, r3, #29
 80112fc:	d505      	bpl.n	801130a <__sflush_r+0x42>
 80112fe:	6863      	ldr	r3, [r4, #4]
 8011300:	1ad2      	subs	r2, r2, r3
 8011302:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011304:	b10b      	cbz	r3, 801130a <__sflush_r+0x42>
 8011306:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011308:	1ad2      	subs	r2, r2, r3
 801130a:	2300      	movs	r3, #0
 801130c:	4628      	mov	r0, r5
 801130e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011310:	6a21      	ldr	r1, [r4, #32]
 8011312:	47b0      	blx	r6
 8011314:	1c43      	adds	r3, r0, #1
 8011316:	89a3      	ldrh	r3, [r4, #12]
 8011318:	d106      	bne.n	8011328 <__sflush_r+0x60>
 801131a:	6829      	ldr	r1, [r5, #0]
 801131c:	291d      	cmp	r1, #29
 801131e:	d82b      	bhi.n	8011378 <__sflush_r+0xb0>
 8011320:	4a28      	ldr	r2, [pc, #160]	@ (80113c4 <__sflush_r+0xfc>)
 8011322:	410a      	asrs	r2, r1
 8011324:	07d6      	lsls	r6, r2, #31
 8011326:	d427      	bmi.n	8011378 <__sflush_r+0xb0>
 8011328:	2200      	movs	r2, #0
 801132a:	6062      	str	r2, [r4, #4]
 801132c:	6922      	ldr	r2, [r4, #16]
 801132e:	04d9      	lsls	r1, r3, #19
 8011330:	6022      	str	r2, [r4, #0]
 8011332:	d504      	bpl.n	801133e <__sflush_r+0x76>
 8011334:	1c42      	adds	r2, r0, #1
 8011336:	d101      	bne.n	801133c <__sflush_r+0x74>
 8011338:	682b      	ldr	r3, [r5, #0]
 801133a:	b903      	cbnz	r3, 801133e <__sflush_r+0x76>
 801133c:	6560      	str	r0, [r4, #84]	@ 0x54
 801133e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011340:	602f      	str	r7, [r5, #0]
 8011342:	b1b9      	cbz	r1, 8011374 <__sflush_r+0xac>
 8011344:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011348:	4299      	cmp	r1, r3
 801134a:	d002      	beq.n	8011352 <__sflush_r+0x8a>
 801134c:	4628      	mov	r0, r5
 801134e:	f7fe fc1f 	bl	800fb90 <_free_r>
 8011352:	2300      	movs	r3, #0
 8011354:	6363      	str	r3, [r4, #52]	@ 0x34
 8011356:	e00d      	b.n	8011374 <__sflush_r+0xac>
 8011358:	2301      	movs	r3, #1
 801135a:	4628      	mov	r0, r5
 801135c:	47b0      	blx	r6
 801135e:	4602      	mov	r2, r0
 8011360:	1c50      	adds	r0, r2, #1
 8011362:	d1c9      	bne.n	80112f8 <__sflush_r+0x30>
 8011364:	682b      	ldr	r3, [r5, #0]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d0c6      	beq.n	80112f8 <__sflush_r+0x30>
 801136a:	2b1d      	cmp	r3, #29
 801136c:	d001      	beq.n	8011372 <__sflush_r+0xaa>
 801136e:	2b16      	cmp	r3, #22
 8011370:	d11d      	bne.n	80113ae <__sflush_r+0xe6>
 8011372:	602f      	str	r7, [r5, #0]
 8011374:	2000      	movs	r0, #0
 8011376:	e021      	b.n	80113bc <__sflush_r+0xf4>
 8011378:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801137c:	b21b      	sxth	r3, r3
 801137e:	e01a      	b.n	80113b6 <__sflush_r+0xee>
 8011380:	690f      	ldr	r7, [r1, #16]
 8011382:	2f00      	cmp	r7, #0
 8011384:	d0f6      	beq.n	8011374 <__sflush_r+0xac>
 8011386:	0793      	lsls	r3, r2, #30
 8011388:	bf18      	it	ne
 801138a:	2300      	movne	r3, #0
 801138c:	680e      	ldr	r6, [r1, #0]
 801138e:	bf08      	it	eq
 8011390:	694b      	ldreq	r3, [r1, #20]
 8011392:	1bf6      	subs	r6, r6, r7
 8011394:	600f      	str	r7, [r1, #0]
 8011396:	608b      	str	r3, [r1, #8]
 8011398:	2e00      	cmp	r6, #0
 801139a:	ddeb      	ble.n	8011374 <__sflush_r+0xac>
 801139c:	4633      	mov	r3, r6
 801139e:	463a      	mov	r2, r7
 80113a0:	4628      	mov	r0, r5
 80113a2:	6a21      	ldr	r1, [r4, #32]
 80113a4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80113a8:	47e0      	blx	ip
 80113aa:	2800      	cmp	r0, #0
 80113ac:	dc07      	bgt.n	80113be <__sflush_r+0xf6>
 80113ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80113b6:	f04f 30ff 	mov.w	r0, #4294967295
 80113ba:	81a3      	strh	r3, [r4, #12]
 80113bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113be:	4407      	add	r7, r0
 80113c0:	1a36      	subs	r6, r6, r0
 80113c2:	e7e9      	b.n	8011398 <__sflush_r+0xd0>
 80113c4:	dfbffffe 	.word	0xdfbffffe

080113c8 <_fflush_r>:
 80113c8:	b538      	push	{r3, r4, r5, lr}
 80113ca:	690b      	ldr	r3, [r1, #16]
 80113cc:	4605      	mov	r5, r0
 80113ce:	460c      	mov	r4, r1
 80113d0:	b913      	cbnz	r3, 80113d8 <_fflush_r+0x10>
 80113d2:	2500      	movs	r5, #0
 80113d4:	4628      	mov	r0, r5
 80113d6:	bd38      	pop	{r3, r4, r5, pc}
 80113d8:	b118      	cbz	r0, 80113e2 <_fflush_r+0x1a>
 80113da:	6a03      	ldr	r3, [r0, #32]
 80113dc:	b90b      	cbnz	r3, 80113e2 <_fflush_r+0x1a>
 80113de:	f7fc fd95 	bl	800df0c <__sinit>
 80113e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d0f3      	beq.n	80113d2 <_fflush_r+0xa>
 80113ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80113ec:	07d0      	lsls	r0, r2, #31
 80113ee:	d404      	bmi.n	80113fa <_fflush_r+0x32>
 80113f0:	0599      	lsls	r1, r3, #22
 80113f2:	d402      	bmi.n	80113fa <_fflush_r+0x32>
 80113f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80113f6:	f7fd fd21 	bl	800ee3c <__retarget_lock_acquire_recursive>
 80113fa:	4628      	mov	r0, r5
 80113fc:	4621      	mov	r1, r4
 80113fe:	f7ff ff63 	bl	80112c8 <__sflush_r>
 8011402:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011404:	4605      	mov	r5, r0
 8011406:	07da      	lsls	r2, r3, #31
 8011408:	d4e4      	bmi.n	80113d4 <_fflush_r+0xc>
 801140a:	89a3      	ldrh	r3, [r4, #12]
 801140c:	059b      	lsls	r3, r3, #22
 801140e:	d4e1      	bmi.n	80113d4 <_fflush_r+0xc>
 8011410:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011412:	f7fd fd15 	bl	800ee40 <__retarget_lock_release_recursive>
 8011416:	e7dd      	b.n	80113d4 <_fflush_r+0xc>

08011418 <fiprintf>:
 8011418:	b40e      	push	{r1, r2, r3}
 801141a:	b503      	push	{r0, r1, lr}
 801141c:	4601      	mov	r1, r0
 801141e:	ab03      	add	r3, sp, #12
 8011420:	4805      	ldr	r0, [pc, #20]	@ (8011438 <fiprintf+0x20>)
 8011422:	f853 2b04 	ldr.w	r2, [r3], #4
 8011426:	6800      	ldr	r0, [r0, #0]
 8011428:	9301      	str	r3, [sp, #4]
 801142a:	f7ff fe35 	bl	8011098 <_vfiprintf_r>
 801142e:	b002      	add	sp, #8
 8011430:	f85d eb04 	ldr.w	lr, [sp], #4
 8011434:	b003      	add	sp, #12
 8011436:	4770      	bx	lr
 8011438:	2000026c 	.word	0x2000026c

0801143c <siscanf>:
 801143c:	b40e      	push	{r1, r2, r3}
 801143e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8011442:	b530      	push	{r4, r5, lr}
 8011444:	b09c      	sub	sp, #112	@ 0x70
 8011446:	ac1f      	add	r4, sp, #124	@ 0x7c
 8011448:	f854 5b04 	ldr.w	r5, [r4], #4
 801144c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011450:	9002      	str	r0, [sp, #8]
 8011452:	9006      	str	r0, [sp, #24]
 8011454:	f7ee fef6 	bl	8000244 <strlen>
 8011458:	4b0b      	ldr	r3, [pc, #44]	@ (8011488 <siscanf+0x4c>)
 801145a:	9003      	str	r0, [sp, #12]
 801145c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801145e:	2300      	movs	r3, #0
 8011460:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011462:	9314      	str	r3, [sp, #80]	@ 0x50
 8011464:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011468:	9007      	str	r0, [sp, #28]
 801146a:	4808      	ldr	r0, [pc, #32]	@ (801148c <siscanf+0x50>)
 801146c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011470:	462a      	mov	r2, r5
 8011472:	4623      	mov	r3, r4
 8011474:	a902      	add	r1, sp, #8
 8011476:	6800      	ldr	r0, [r0, #0]
 8011478:	9401      	str	r4, [sp, #4]
 801147a:	f000 f969 	bl	8011750 <__ssvfiscanf_r>
 801147e:	b01c      	add	sp, #112	@ 0x70
 8011480:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011484:	b003      	add	sp, #12
 8011486:	4770      	bx	lr
 8011488:	0800dfff 	.word	0x0800dfff
 801148c:	2000026c 	.word	0x2000026c

08011490 <__swbuf_r>:
 8011490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011492:	460e      	mov	r6, r1
 8011494:	4614      	mov	r4, r2
 8011496:	4605      	mov	r5, r0
 8011498:	b118      	cbz	r0, 80114a2 <__swbuf_r+0x12>
 801149a:	6a03      	ldr	r3, [r0, #32]
 801149c:	b90b      	cbnz	r3, 80114a2 <__swbuf_r+0x12>
 801149e:	f7fc fd35 	bl	800df0c <__sinit>
 80114a2:	69a3      	ldr	r3, [r4, #24]
 80114a4:	60a3      	str	r3, [r4, #8]
 80114a6:	89a3      	ldrh	r3, [r4, #12]
 80114a8:	071a      	lsls	r2, r3, #28
 80114aa:	d501      	bpl.n	80114b0 <__swbuf_r+0x20>
 80114ac:	6923      	ldr	r3, [r4, #16]
 80114ae:	b943      	cbnz	r3, 80114c2 <__swbuf_r+0x32>
 80114b0:	4621      	mov	r1, r4
 80114b2:	4628      	mov	r0, r5
 80114b4:	f000 f82a 	bl	801150c <__swsetup_r>
 80114b8:	b118      	cbz	r0, 80114c2 <__swbuf_r+0x32>
 80114ba:	f04f 37ff 	mov.w	r7, #4294967295
 80114be:	4638      	mov	r0, r7
 80114c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114c2:	6823      	ldr	r3, [r4, #0]
 80114c4:	6922      	ldr	r2, [r4, #16]
 80114c6:	b2f6      	uxtb	r6, r6
 80114c8:	1a98      	subs	r0, r3, r2
 80114ca:	6963      	ldr	r3, [r4, #20]
 80114cc:	4637      	mov	r7, r6
 80114ce:	4283      	cmp	r3, r0
 80114d0:	dc05      	bgt.n	80114de <__swbuf_r+0x4e>
 80114d2:	4621      	mov	r1, r4
 80114d4:	4628      	mov	r0, r5
 80114d6:	f7ff ff77 	bl	80113c8 <_fflush_r>
 80114da:	2800      	cmp	r0, #0
 80114dc:	d1ed      	bne.n	80114ba <__swbuf_r+0x2a>
 80114de:	68a3      	ldr	r3, [r4, #8]
 80114e0:	3b01      	subs	r3, #1
 80114e2:	60a3      	str	r3, [r4, #8]
 80114e4:	6823      	ldr	r3, [r4, #0]
 80114e6:	1c5a      	adds	r2, r3, #1
 80114e8:	6022      	str	r2, [r4, #0]
 80114ea:	701e      	strb	r6, [r3, #0]
 80114ec:	6962      	ldr	r2, [r4, #20]
 80114ee:	1c43      	adds	r3, r0, #1
 80114f0:	429a      	cmp	r2, r3
 80114f2:	d004      	beq.n	80114fe <__swbuf_r+0x6e>
 80114f4:	89a3      	ldrh	r3, [r4, #12]
 80114f6:	07db      	lsls	r3, r3, #31
 80114f8:	d5e1      	bpl.n	80114be <__swbuf_r+0x2e>
 80114fa:	2e0a      	cmp	r6, #10
 80114fc:	d1df      	bne.n	80114be <__swbuf_r+0x2e>
 80114fe:	4621      	mov	r1, r4
 8011500:	4628      	mov	r0, r5
 8011502:	f7ff ff61 	bl	80113c8 <_fflush_r>
 8011506:	2800      	cmp	r0, #0
 8011508:	d0d9      	beq.n	80114be <__swbuf_r+0x2e>
 801150a:	e7d6      	b.n	80114ba <__swbuf_r+0x2a>

0801150c <__swsetup_r>:
 801150c:	b538      	push	{r3, r4, r5, lr}
 801150e:	4b29      	ldr	r3, [pc, #164]	@ (80115b4 <__swsetup_r+0xa8>)
 8011510:	4605      	mov	r5, r0
 8011512:	6818      	ldr	r0, [r3, #0]
 8011514:	460c      	mov	r4, r1
 8011516:	b118      	cbz	r0, 8011520 <__swsetup_r+0x14>
 8011518:	6a03      	ldr	r3, [r0, #32]
 801151a:	b90b      	cbnz	r3, 8011520 <__swsetup_r+0x14>
 801151c:	f7fc fcf6 	bl	800df0c <__sinit>
 8011520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011524:	0719      	lsls	r1, r3, #28
 8011526:	d422      	bmi.n	801156e <__swsetup_r+0x62>
 8011528:	06da      	lsls	r2, r3, #27
 801152a:	d407      	bmi.n	801153c <__swsetup_r+0x30>
 801152c:	2209      	movs	r2, #9
 801152e:	602a      	str	r2, [r5, #0]
 8011530:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011534:	f04f 30ff 	mov.w	r0, #4294967295
 8011538:	81a3      	strh	r3, [r4, #12]
 801153a:	e033      	b.n	80115a4 <__swsetup_r+0x98>
 801153c:	0758      	lsls	r0, r3, #29
 801153e:	d512      	bpl.n	8011566 <__swsetup_r+0x5a>
 8011540:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011542:	b141      	cbz	r1, 8011556 <__swsetup_r+0x4a>
 8011544:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011548:	4299      	cmp	r1, r3
 801154a:	d002      	beq.n	8011552 <__swsetup_r+0x46>
 801154c:	4628      	mov	r0, r5
 801154e:	f7fe fb1f 	bl	800fb90 <_free_r>
 8011552:	2300      	movs	r3, #0
 8011554:	6363      	str	r3, [r4, #52]	@ 0x34
 8011556:	89a3      	ldrh	r3, [r4, #12]
 8011558:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801155c:	81a3      	strh	r3, [r4, #12]
 801155e:	2300      	movs	r3, #0
 8011560:	6063      	str	r3, [r4, #4]
 8011562:	6923      	ldr	r3, [r4, #16]
 8011564:	6023      	str	r3, [r4, #0]
 8011566:	89a3      	ldrh	r3, [r4, #12]
 8011568:	f043 0308 	orr.w	r3, r3, #8
 801156c:	81a3      	strh	r3, [r4, #12]
 801156e:	6923      	ldr	r3, [r4, #16]
 8011570:	b94b      	cbnz	r3, 8011586 <__swsetup_r+0x7a>
 8011572:	89a3      	ldrh	r3, [r4, #12]
 8011574:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011578:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801157c:	d003      	beq.n	8011586 <__swsetup_r+0x7a>
 801157e:	4621      	mov	r1, r4
 8011580:	4628      	mov	r0, r5
 8011582:	f000 fbc8 	bl	8011d16 <__smakebuf_r>
 8011586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801158a:	f013 0201 	ands.w	r2, r3, #1
 801158e:	d00a      	beq.n	80115a6 <__swsetup_r+0x9a>
 8011590:	2200      	movs	r2, #0
 8011592:	60a2      	str	r2, [r4, #8]
 8011594:	6962      	ldr	r2, [r4, #20]
 8011596:	4252      	negs	r2, r2
 8011598:	61a2      	str	r2, [r4, #24]
 801159a:	6922      	ldr	r2, [r4, #16]
 801159c:	b942      	cbnz	r2, 80115b0 <__swsetup_r+0xa4>
 801159e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80115a2:	d1c5      	bne.n	8011530 <__swsetup_r+0x24>
 80115a4:	bd38      	pop	{r3, r4, r5, pc}
 80115a6:	0799      	lsls	r1, r3, #30
 80115a8:	bf58      	it	pl
 80115aa:	6962      	ldrpl	r2, [r4, #20]
 80115ac:	60a2      	str	r2, [r4, #8]
 80115ae:	e7f4      	b.n	801159a <__swsetup_r+0x8e>
 80115b0:	2000      	movs	r0, #0
 80115b2:	e7f7      	b.n	80115a4 <__swsetup_r+0x98>
 80115b4:	2000026c 	.word	0x2000026c

080115b8 <memmove>:
 80115b8:	4288      	cmp	r0, r1
 80115ba:	b510      	push	{r4, lr}
 80115bc:	eb01 0402 	add.w	r4, r1, r2
 80115c0:	d902      	bls.n	80115c8 <memmove+0x10>
 80115c2:	4284      	cmp	r4, r0
 80115c4:	4623      	mov	r3, r4
 80115c6:	d807      	bhi.n	80115d8 <memmove+0x20>
 80115c8:	1e43      	subs	r3, r0, #1
 80115ca:	42a1      	cmp	r1, r4
 80115cc:	d008      	beq.n	80115e0 <memmove+0x28>
 80115ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80115d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80115d6:	e7f8      	b.n	80115ca <memmove+0x12>
 80115d8:	4601      	mov	r1, r0
 80115da:	4402      	add	r2, r0
 80115dc:	428a      	cmp	r2, r1
 80115de:	d100      	bne.n	80115e2 <memmove+0x2a>
 80115e0:	bd10      	pop	{r4, pc}
 80115e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80115e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80115ea:	e7f7      	b.n	80115dc <memmove+0x24>

080115ec <__gettzinfo>:
 80115ec:	4800      	ldr	r0, [pc, #0]	@ (80115f0 <__gettzinfo+0x4>)
 80115ee:	4770      	bx	lr
 80115f0:	200002c0 	.word	0x200002c0

080115f4 <abort>:
 80115f4:	2006      	movs	r0, #6
 80115f6:	b508      	push	{r3, lr}
 80115f8:	f000 fc62 	bl	8011ec0 <raise>
 80115fc:	2001      	movs	r0, #1
 80115fe:	f7f2 fe0e 	bl	800421e <_exit>

08011602 <_calloc_r>:
 8011602:	b570      	push	{r4, r5, r6, lr}
 8011604:	fba1 5402 	umull	r5, r4, r1, r2
 8011608:	b93c      	cbnz	r4, 801161a <_calloc_r+0x18>
 801160a:	4629      	mov	r1, r5
 801160c:	f7fb f830 	bl	800c670 <_malloc_r>
 8011610:	4606      	mov	r6, r0
 8011612:	b928      	cbnz	r0, 8011620 <_calloc_r+0x1e>
 8011614:	2600      	movs	r6, #0
 8011616:	4630      	mov	r0, r6
 8011618:	bd70      	pop	{r4, r5, r6, pc}
 801161a:	220c      	movs	r2, #12
 801161c:	6002      	str	r2, [r0, #0]
 801161e:	e7f9      	b.n	8011614 <_calloc_r+0x12>
 8011620:	462a      	mov	r2, r5
 8011622:	4621      	mov	r1, r4
 8011624:	f7fc fd1f 	bl	800e066 <memset>
 8011628:	e7f5      	b.n	8011616 <_calloc_r+0x14>
	...

0801162c <__env_lock>:
 801162c:	4801      	ldr	r0, [pc, #4]	@ (8011634 <__env_lock+0x8>)
 801162e:	f7fd bc05 	b.w	800ee3c <__retarget_lock_acquire_recursive>
 8011632:	bf00      	nop
 8011634:	20005b71 	.word	0x20005b71

08011638 <__env_unlock>:
 8011638:	4801      	ldr	r0, [pc, #4]	@ (8011640 <__env_unlock+0x8>)
 801163a:	f7fd bc01 	b.w	800ee40 <__retarget_lock_release_recursive>
 801163e:	bf00      	nop
 8011640:	20005b71 	.word	0x20005b71

08011644 <_realloc_r>:
 8011644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011648:	4680      	mov	r8, r0
 801164a:	4615      	mov	r5, r2
 801164c:	460c      	mov	r4, r1
 801164e:	b921      	cbnz	r1, 801165a <_realloc_r+0x16>
 8011650:	4611      	mov	r1, r2
 8011652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011656:	f7fb b80b 	b.w	800c670 <_malloc_r>
 801165a:	b92a      	cbnz	r2, 8011668 <_realloc_r+0x24>
 801165c:	f7fe fa98 	bl	800fb90 <_free_r>
 8011660:	2400      	movs	r4, #0
 8011662:	4620      	mov	r0, r4
 8011664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011668:	f000 fc68 	bl	8011f3c <_malloc_usable_size_r>
 801166c:	4285      	cmp	r5, r0
 801166e:	4606      	mov	r6, r0
 8011670:	d802      	bhi.n	8011678 <_realloc_r+0x34>
 8011672:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011676:	d8f4      	bhi.n	8011662 <_realloc_r+0x1e>
 8011678:	4629      	mov	r1, r5
 801167a:	4640      	mov	r0, r8
 801167c:	f7fa fff8 	bl	800c670 <_malloc_r>
 8011680:	4607      	mov	r7, r0
 8011682:	2800      	cmp	r0, #0
 8011684:	d0ec      	beq.n	8011660 <_realloc_r+0x1c>
 8011686:	42b5      	cmp	r5, r6
 8011688:	462a      	mov	r2, r5
 801168a:	4621      	mov	r1, r4
 801168c:	bf28      	it	cs
 801168e:	4632      	movcs	r2, r6
 8011690:	f7fd fbed 	bl	800ee6e <memcpy>
 8011694:	4621      	mov	r1, r4
 8011696:	4640      	mov	r0, r8
 8011698:	f7fe fa7a 	bl	800fb90 <_free_r>
 801169c:	463c      	mov	r4, r7
 801169e:	e7e0      	b.n	8011662 <_realloc_r+0x1e>

080116a0 <_sungetc_r>:
 80116a0:	b538      	push	{r3, r4, r5, lr}
 80116a2:	1c4b      	adds	r3, r1, #1
 80116a4:	4614      	mov	r4, r2
 80116a6:	d103      	bne.n	80116b0 <_sungetc_r+0x10>
 80116a8:	f04f 35ff 	mov.w	r5, #4294967295
 80116ac:	4628      	mov	r0, r5
 80116ae:	bd38      	pop	{r3, r4, r5, pc}
 80116b0:	8993      	ldrh	r3, [r2, #12]
 80116b2:	b2cd      	uxtb	r5, r1
 80116b4:	f023 0320 	bic.w	r3, r3, #32
 80116b8:	8193      	strh	r3, [r2, #12]
 80116ba:	6853      	ldr	r3, [r2, #4]
 80116bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80116be:	b18a      	cbz	r2, 80116e4 <_sungetc_r+0x44>
 80116c0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80116c2:	429a      	cmp	r2, r3
 80116c4:	dd08      	ble.n	80116d8 <_sungetc_r+0x38>
 80116c6:	6823      	ldr	r3, [r4, #0]
 80116c8:	1e5a      	subs	r2, r3, #1
 80116ca:	6022      	str	r2, [r4, #0]
 80116cc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80116d0:	6863      	ldr	r3, [r4, #4]
 80116d2:	3301      	adds	r3, #1
 80116d4:	6063      	str	r3, [r4, #4]
 80116d6:	e7e9      	b.n	80116ac <_sungetc_r+0xc>
 80116d8:	4621      	mov	r1, r4
 80116da:	f000 fb91 	bl	8011e00 <__submore>
 80116de:	2800      	cmp	r0, #0
 80116e0:	d0f1      	beq.n	80116c6 <_sungetc_r+0x26>
 80116e2:	e7e1      	b.n	80116a8 <_sungetc_r+0x8>
 80116e4:	6921      	ldr	r1, [r4, #16]
 80116e6:	6822      	ldr	r2, [r4, #0]
 80116e8:	b141      	cbz	r1, 80116fc <_sungetc_r+0x5c>
 80116ea:	4291      	cmp	r1, r2
 80116ec:	d206      	bcs.n	80116fc <_sungetc_r+0x5c>
 80116ee:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80116f2:	42a9      	cmp	r1, r5
 80116f4:	d102      	bne.n	80116fc <_sungetc_r+0x5c>
 80116f6:	3a01      	subs	r2, #1
 80116f8:	6022      	str	r2, [r4, #0]
 80116fa:	e7ea      	b.n	80116d2 <_sungetc_r+0x32>
 80116fc:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8011700:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011704:	6363      	str	r3, [r4, #52]	@ 0x34
 8011706:	2303      	movs	r3, #3
 8011708:	63a3      	str	r3, [r4, #56]	@ 0x38
 801170a:	4623      	mov	r3, r4
 801170c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011710:	6023      	str	r3, [r4, #0]
 8011712:	2301      	movs	r3, #1
 8011714:	e7de      	b.n	80116d4 <_sungetc_r+0x34>

08011716 <__ssrefill_r>:
 8011716:	b510      	push	{r4, lr}
 8011718:	460c      	mov	r4, r1
 801171a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801171c:	b169      	cbz	r1, 801173a <__ssrefill_r+0x24>
 801171e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011722:	4299      	cmp	r1, r3
 8011724:	d001      	beq.n	801172a <__ssrefill_r+0x14>
 8011726:	f7fe fa33 	bl	800fb90 <_free_r>
 801172a:	2000      	movs	r0, #0
 801172c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801172e:	6360      	str	r0, [r4, #52]	@ 0x34
 8011730:	6063      	str	r3, [r4, #4]
 8011732:	b113      	cbz	r3, 801173a <__ssrefill_r+0x24>
 8011734:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011736:	6023      	str	r3, [r4, #0]
 8011738:	bd10      	pop	{r4, pc}
 801173a:	6923      	ldr	r3, [r4, #16]
 801173c:	f04f 30ff 	mov.w	r0, #4294967295
 8011740:	6023      	str	r3, [r4, #0]
 8011742:	2300      	movs	r3, #0
 8011744:	6063      	str	r3, [r4, #4]
 8011746:	89a3      	ldrh	r3, [r4, #12]
 8011748:	f043 0320 	orr.w	r3, r3, #32
 801174c:	81a3      	strh	r3, [r4, #12]
 801174e:	e7f3      	b.n	8011738 <__ssrefill_r+0x22>

08011750 <__ssvfiscanf_r>:
 8011750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011754:	460c      	mov	r4, r1
 8011756:	2100      	movs	r1, #0
 8011758:	4606      	mov	r6, r0
 801175a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801175e:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8011762:	49aa      	ldr	r1, [pc, #680]	@ (8011a0c <__ssvfiscanf_r+0x2bc>)
 8011764:	f10d 0804 	add.w	r8, sp, #4
 8011768:	91a0      	str	r1, [sp, #640]	@ 0x280
 801176a:	49a9      	ldr	r1, [pc, #676]	@ (8011a10 <__ssvfiscanf_r+0x2c0>)
 801176c:	4fa9      	ldr	r7, [pc, #676]	@ (8011a14 <__ssvfiscanf_r+0x2c4>)
 801176e:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011772:	91a1      	str	r1, [sp, #644]	@ 0x284
 8011774:	9300      	str	r3, [sp, #0]
 8011776:	7813      	ldrb	r3, [r2, #0]
 8011778:	2b00      	cmp	r3, #0
 801177a:	f000 8159 	beq.w	8011a30 <__ssvfiscanf_r+0x2e0>
 801177e:	5cf9      	ldrb	r1, [r7, r3]
 8011780:	1c55      	adds	r5, r2, #1
 8011782:	f011 0108 	ands.w	r1, r1, #8
 8011786:	d019      	beq.n	80117bc <__ssvfiscanf_r+0x6c>
 8011788:	6863      	ldr	r3, [r4, #4]
 801178a:	2b00      	cmp	r3, #0
 801178c:	dd0f      	ble.n	80117ae <__ssvfiscanf_r+0x5e>
 801178e:	6823      	ldr	r3, [r4, #0]
 8011790:	781a      	ldrb	r2, [r3, #0]
 8011792:	5cba      	ldrb	r2, [r7, r2]
 8011794:	0712      	lsls	r2, r2, #28
 8011796:	d401      	bmi.n	801179c <__ssvfiscanf_r+0x4c>
 8011798:	462a      	mov	r2, r5
 801179a:	e7ec      	b.n	8011776 <__ssvfiscanf_r+0x26>
 801179c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801179e:	3301      	adds	r3, #1
 80117a0:	3201      	adds	r2, #1
 80117a2:	9245      	str	r2, [sp, #276]	@ 0x114
 80117a4:	6862      	ldr	r2, [r4, #4]
 80117a6:	6023      	str	r3, [r4, #0]
 80117a8:	3a01      	subs	r2, #1
 80117aa:	6062      	str	r2, [r4, #4]
 80117ac:	e7ec      	b.n	8011788 <__ssvfiscanf_r+0x38>
 80117ae:	4621      	mov	r1, r4
 80117b0:	4630      	mov	r0, r6
 80117b2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80117b4:	4798      	blx	r3
 80117b6:	2800      	cmp	r0, #0
 80117b8:	d0e9      	beq.n	801178e <__ssvfiscanf_r+0x3e>
 80117ba:	e7ed      	b.n	8011798 <__ssvfiscanf_r+0x48>
 80117bc:	2b25      	cmp	r3, #37	@ 0x25
 80117be:	d012      	beq.n	80117e6 <__ssvfiscanf_r+0x96>
 80117c0:	4699      	mov	r9, r3
 80117c2:	6863      	ldr	r3, [r4, #4]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	f340 8094 	ble.w	80118f2 <__ssvfiscanf_r+0x1a2>
 80117ca:	6822      	ldr	r2, [r4, #0]
 80117cc:	7813      	ldrb	r3, [r2, #0]
 80117ce:	454b      	cmp	r3, r9
 80117d0:	f040 812e 	bne.w	8011a30 <__ssvfiscanf_r+0x2e0>
 80117d4:	6863      	ldr	r3, [r4, #4]
 80117d6:	3201      	adds	r2, #1
 80117d8:	3b01      	subs	r3, #1
 80117da:	6063      	str	r3, [r4, #4]
 80117dc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80117de:	6022      	str	r2, [r4, #0]
 80117e0:	3301      	adds	r3, #1
 80117e2:	9345      	str	r3, [sp, #276]	@ 0x114
 80117e4:	e7d8      	b.n	8011798 <__ssvfiscanf_r+0x48>
 80117e6:	9141      	str	r1, [sp, #260]	@ 0x104
 80117e8:	9143      	str	r1, [sp, #268]	@ 0x10c
 80117ea:	7853      	ldrb	r3, [r2, #1]
 80117ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80117ee:	bf04      	itt	eq
 80117f0:	2310      	moveq	r3, #16
 80117f2:	1c95      	addeq	r5, r2, #2
 80117f4:	f04f 020a 	mov.w	r2, #10
 80117f8:	bf08      	it	eq
 80117fa:	9341      	streq	r3, [sp, #260]	@ 0x104
 80117fc:	46a9      	mov	r9, r5
 80117fe:	f819 1b01 	ldrb.w	r1, [r9], #1
 8011802:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8011806:	2b09      	cmp	r3, #9
 8011808:	d91e      	bls.n	8011848 <__ssvfiscanf_r+0xf8>
 801180a:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 8011a18 <__ssvfiscanf_r+0x2c8>
 801180e:	2203      	movs	r2, #3
 8011810:	4650      	mov	r0, sl
 8011812:	f7fd fb1e 	bl	800ee52 <memchr>
 8011816:	b138      	cbz	r0, 8011828 <__ssvfiscanf_r+0xd8>
 8011818:	2301      	movs	r3, #1
 801181a:	464d      	mov	r5, r9
 801181c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801181e:	eba0 000a 	sub.w	r0, r0, sl
 8011822:	4083      	lsls	r3, r0
 8011824:	4313      	orrs	r3, r2
 8011826:	9341      	str	r3, [sp, #260]	@ 0x104
 8011828:	f815 3b01 	ldrb.w	r3, [r5], #1
 801182c:	2b78      	cmp	r3, #120	@ 0x78
 801182e:	d806      	bhi.n	801183e <__ssvfiscanf_r+0xee>
 8011830:	2b57      	cmp	r3, #87	@ 0x57
 8011832:	d810      	bhi.n	8011856 <__ssvfiscanf_r+0x106>
 8011834:	2b25      	cmp	r3, #37	@ 0x25
 8011836:	d0c3      	beq.n	80117c0 <__ssvfiscanf_r+0x70>
 8011838:	d856      	bhi.n	80118e8 <__ssvfiscanf_r+0x198>
 801183a:	2b00      	cmp	r3, #0
 801183c:	d064      	beq.n	8011908 <__ssvfiscanf_r+0x1b8>
 801183e:	2303      	movs	r3, #3
 8011840:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011842:	230a      	movs	r3, #10
 8011844:	9342      	str	r3, [sp, #264]	@ 0x108
 8011846:	e077      	b.n	8011938 <__ssvfiscanf_r+0x1e8>
 8011848:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801184a:	464d      	mov	r5, r9
 801184c:	fb02 1103 	mla	r1, r2, r3, r1
 8011850:	3930      	subs	r1, #48	@ 0x30
 8011852:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011854:	e7d2      	b.n	80117fc <__ssvfiscanf_r+0xac>
 8011856:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801185a:	2a20      	cmp	r2, #32
 801185c:	d8ef      	bhi.n	801183e <__ssvfiscanf_r+0xee>
 801185e:	a101      	add	r1, pc, #4	@ (adr r1, 8011864 <__ssvfiscanf_r+0x114>)
 8011860:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011864:	08011917 	.word	0x08011917
 8011868:	0801183f 	.word	0x0801183f
 801186c:	0801183f 	.word	0x0801183f
 8011870:	08011971 	.word	0x08011971
 8011874:	0801183f 	.word	0x0801183f
 8011878:	0801183f 	.word	0x0801183f
 801187c:	0801183f 	.word	0x0801183f
 8011880:	0801183f 	.word	0x0801183f
 8011884:	0801183f 	.word	0x0801183f
 8011888:	0801183f 	.word	0x0801183f
 801188c:	0801183f 	.word	0x0801183f
 8011890:	08011987 	.word	0x08011987
 8011894:	0801196d 	.word	0x0801196d
 8011898:	080118ef 	.word	0x080118ef
 801189c:	080118ef 	.word	0x080118ef
 80118a0:	080118ef 	.word	0x080118ef
 80118a4:	0801183f 	.word	0x0801183f
 80118a8:	08011929 	.word	0x08011929
 80118ac:	0801183f 	.word	0x0801183f
 80118b0:	0801183f 	.word	0x0801183f
 80118b4:	0801183f 	.word	0x0801183f
 80118b8:	0801183f 	.word	0x0801183f
 80118bc:	08011997 	.word	0x08011997
 80118c0:	08011931 	.word	0x08011931
 80118c4:	0801190f 	.word	0x0801190f
 80118c8:	0801183f 	.word	0x0801183f
 80118cc:	0801183f 	.word	0x0801183f
 80118d0:	08011993 	.word	0x08011993
 80118d4:	0801183f 	.word	0x0801183f
 80118d8:	0801196d 	.word	0x0801196d
 80118dc:	0801183f 	.word	0x0801183f
 80118e0:	0801183f 	.word	0x0801183f
 80118e4:	08011917 	.word	0x08011917
 80118e8:	3b45      	subs	r3, #69	@ 0x45
 80118ea:	2b02      	cmp	r3, #2
 80118ec:	d8a7      	bhi.n	801183e <__ssvfiscanf_r+0xee>
 80118ee:	2305      	movs	r3, #5
 80118f0:	e021      	b.n	8011936 <__ssvfiscanf_r+0x1e6>
 80118f2:	4621      	mov	r1, r4
 80118f4:	4630      	mov	r0, r6
 80118f6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80118f8:	4798      	blx	r3
 80118fa:	2800      	cmp	r0, #0
 80118fc:	f43f af65 	beq.w	80117ca <__ssvfiscanf_r+0x7a>
 8011900:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011902:	2800      	cmp	r0, #0
 8011904:	f040 808c 	bne.w	8011a20 <__ssvfiscanf_r+0x2d0>
 8011908:	f04f 30ff 	mov.w	r0, #4294967295
 801190c:	e08c      	b.n	8011a28 <__ssvfiscanf_r+0x2d8>
 801190e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011910:	f042 0220 	orr.w	r2, r2, #32
 8011914:	9241      	str	r2, [sp, #260]	@ 0x104
 8011916:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011918:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801191c:	9241      	str	r2, [sp, #260]	@ 0x104
 801191e:	2210      	movs	r2, #16
 8011920:	2b6e      	cmp	r3, #110	@ 0x6e
 8011922:	9242      	str	r2, [sp, #264]	@ 0x108
 8011924:	d902      	bls.n	801192c <__ssvfiscanf_r+0x1dc>
 8011926:	e005      	b.n	8011934 <__ssvfiscanf_r+0x1e4>
 8011928:	2300      	movs	r3, #0
 801192a:	9342      	str	r3, [sp, #264]	@ 0x108
 801192c:	2303      	movs	r3, #3
 801192e:	e002      	b.n	8011936 <__ssvfiscanf_r+0x1e6>
 8011930:	2308      	movs	r3, #8
 8011932:	9342      	str	r3, [sp, #264]	@ 0x108
 8011934:	2304      	movs	r3, #4
 8011936:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011938:	6863      	ldr	r3, [r4, #4]
 801193a:	2b00      	cmp	r3, #0
 801193c:	dd39      	ble.n	80119b2 <__ssvfiscanf_r+0x262>
 801193e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011940:	0659      	lsls	r1, r3, #25
 8011942:	d404      	bmi.n	801194e <__ssvfiscanf_r+0x1fe>
 8011944:	6823      	ldr	r3, [r4, #0]
 8011946:	781a      	ldrb	r2, [r3, #0]
 8011948:	5cba      	ldrb	r2, [r7, r2]
 801194a:	0712      	lsls	r2, r2, #28
 801194c:	d438      	bmi.n	80119c0 <__ssvfiscanf_r+0x270>
 801194e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8011950:	2b02      	cmp	r3, #2
 8011952:	dc47      	bgt.n	80119e4 <__ssvfiscanf_r+0x294>
 8011954:	466b      	mov	r3, sp
 8011956:	4622      	mov	r2, r4
 8011958:	4630      	mov	r0, r6
 801195a:	a941      	add	r1, sp, #260	@ 0x104
 801195c:	f000 f86a 	bl	8011a34 <_scanf_chars>
 8011960:	2801      	cmp	r0, #1
 8011962:	d065      	beq.n	8011a30 <__ssvfiscanf_r+0x2e0>
 8011964:	2802      	cmp	r0, #2
 8011966:	f47f af17 	bne.w	8011798 <__ssvfiscanf_r+0x48>
 801196a:	e7c9      	b.n	8011900 <__ssvfiscanf_r+0x1b0>
 801196c:	220a      	movs	r2, #10
 801196e:	e7d7      	b.n	8011920 <__ssvfiscanf_r+0x1d0>
 8011970:	4629      	mov	r1, r5
 8011972:	4640      	mov	r0, r8
 8011974:	f000 fa0b 	bl	8011d8e <__sccl>
 8011978:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801197a:	4605      	mov	r5, r0
 801197c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011980:	9341      	str	r3, [sp, #260]	@ 0x104
 8011982:	2301      	movs	r3, #1
 8011984:	e7d7      	b.n	8011936 <__ssvfiscanf_r+0x1e6>
 8011986:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011988:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801198c:	9341      	str	r3, [sp, #260]	@ 0x104
 801198e:	2300      	movs	r3, #0
 8011990:	e7d1      	b.n	8011936 <__ssvfiscanf_r+0x1e6>
 8011992:	2302      	movs	r3, #2
 8011994:	e7cf      	b.n	8011936 <__ssvfiscanf_r+0x1e6>
 8011996:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8011998:	06c3      	lsls	r3, r0, #27
 801199a:	f53f aefd 	bmi.w	8011798 <__ssvfiscanf_r+0x48>
 801199e:	9b00      	ldr	r3, [sp, #0]
 80119a0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80119a2:	1d19      	adds	r1, r3, #4
 80119a4:	9100      	str	r1, [sp, #0]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	07c0      	lsls	r0, r0, #31
 80119aa:	bf4c      	ite	mi
 80119ac:	801a      	strhmi	r2, [r3, #0]
 80119ae:	601a      	strpl	r2, [r3, #0]
 80119b0:	e6f2      	b.n	8011798 <__ssvfiscanf_r+0x48>
 80119b2:	4621      	mov	r1, r4
 80119b4:	4630      	mov	r0, r6
 80119b6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80119b8:	4798      	blx	r3
 80119ba:	2800      	cmp	r0, #0
 80119bc:	d0bf      	beq.n	801193e <__ssvfiscanf_r+0x1ee>
 80119be:	e79f      	b.n	8011900 <__ssvfiscanf_r+0x1b0>
 80119c0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80119c2:	3201      	adds	r2, #1
 80119c4:	9245      	str	r2, [sp, #276]	@ 0x114
 80119c6:	6862      	ldr	r2, [r4, #4]
 80119c8:	3a01      	subs	r2, #1
 80119ca:	2a00      	cmp	r2, #0
 80119cc:	6062      	str	r2, [r4, #4]
 80119ce:	dd02      	ble.n	80119d6 <__ssvfiscanf_r+0x286>
 80119d0:	3301      	adds	r3, #1
 80119d2:	6023      	str	r3, [r4, #0]
 80119d4:	e7b6      	b.n	8011944 <__ssvfiscanf_r+0x1f4>
 80119d6:	4621      	mov	r1, r4
 80119d8:	4630      	mov	r0, r6
 80119da:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80119dc:	4798      	blx	r3
 80119de:	2800      	cmp	r0, #0
 80119e0:	d0b0      	beq.n	8011944 <__ssvfiscanf_r+0x1f4>
 80119e2:	e78d      	b.n	8011900 <__ssvfiscanf_r+0x1b0>
 80119e4:	2b04      	cmp	r3, #4
 80119e6:	dc06      	bgt.n	80119f6 <__ssvfiscanf_r+0x2a6>
 80119e8:	466b      	mov	r3, sp
 80119ea:	4622      	mov	r2, r4
 80119ec:	4630      	mov	r0, r6
 80119ee:	a941      	add	r1, sp, #260	@ 0x104
 80119f0:	f000 f87a 	bl	8011ae8 <_scanf_i>
 80119f4:	e7b4      	b.n	8011960 <__ssvfiscanf_r+0x210>
 80119f6:	4b09      	ldr	r3, [pc, #36]	@ (8011a1c <__ssvfiscanf_r+0x2cc>)
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	f43f aecd 	beq.w	8011798 <__ssvfiscanf_r+0x48>
 80119fe:	466b      	mov	r3, sp
 8011a00:	4622      	mov	r2, r4
 8011a02:	4630      	mov	r0, r6
 8011a04:	a941      	add	r1, sp, #260	@ 0x104
 8011a06:	f3af 8000 	nop.w
 8011a0a:	e7a9      	b.n	8011960 <__ssvfiscanf_r+0x210>
 8011a0c:	080116a1 	.word	0x080116a1
 8011a10:	08011717 	.word	0x08011717
 8011a14:	08012251 	.word	0x08012251
 8011a18:	0801271e 	.word	0x0801271e
 8011a1c:	00000000 	.word	0x00000000
 8011a20:	89a3      	ldrh	r3, [r4, #12]
 8011a22:	065b      	lsls	r3, r3, #25
 8011a24:	f53f af70 	bmi.w	8011908 <__ssvfiscanf_r+0x1b8>
 8011a28:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8011a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a30:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011a32:	e7f9      	b.n	8011a28 <__ssvfiscanf_r+0x2d8>

08011a34 <_scanf_chars>:
 8011a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a38:	4615      	mov	r5, r2
 8011a3a:	688a      	ldr	r2, [r1, #8]
 8011a3c:	4680      	mov	r8, r0
 8011a3e:	460c      	mov	r4, r1
 8011a40:	b932      	cbnz	r2, 8011a50 <_scanf_chars+0x1c>
 8011a42:	698a      	ldr	r2, [r1, #24]
 8011a44:	2a00      	cmp	r2, #0
 8011a46:	bf14      	ite	ne
 8011a48:	f04f 32ff 	movne.w	r2, #4294967295
 8011a4c:	2201      	moveq	r2, #1
 8011a4e:	608a      	str	r2, [r1, #8]
 8011a50:	2700      	movs	r7, #0
 8011a52:	6822      	ldr	r2, [r4, #0]
 8011a54:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8011ae4 <_scanf_chars+0xb0>
 8011a58:	06d1      	lsls	r1, r2, #27
 8011a5a:	bf5f      	itttt	pl
 8011a5c:	681a      	ldrpl	r2, [r3, #0]
 8011a5e:	1d11      	addpl	r1, r2, #4
 8011a60:	6019      	strpl	r1, [r3, #0]
 8011a62:	6816      	ldrpl	r6, [r2, #0]
 8011a64:	69a0      	ldr	r0, [r4, #24]
 8011a66:	b188      	cbz	r0, 8011a8c <_scanf_chars+0x58>
 8011a68:	2801      	cmp	r0, #1
 8011a6a:	d107      	bne.n	8011a7c <_scanf_chars+0x48>
 8011a6c:	682b      	ldr	r3, [r5, #0]
 8011a6e:	781a      	ldrb	r2, [r3, #0]
 8011a70:	6963      	ldr	r3, [r4, #20]
 8011a72:	5c9b      	ldrb	r3, [r3, r2]
 8011a74:	b953      	cbnz	r3, 8011a8c <_scanf_chars+0x58>
 8011a76:	2f00      	cmp	r7, #0
 8011a78:	d031      	beq.n	8011ade <_scanf_chars+0xaa>
 8011a7a:	e022      	b.n	8011ac2 <_scanf_chars+0x8e>
 8011a7c:	2802      	cmp	r0, #2
 8011a7e:	d120      	bne.n	8011ac2 <_scanf_chars+0x8e>
 8011a80:	682b      	ldr	r3, [r5, #0]
 8011a82:	781b      	ldrb	r3, [r3, #0]
 8011a84:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011a88:	071b      	lsls	r3, r3, #28
 8011a8a:	d41a      	bmi.n	8011ac2 <_scanf_chars+0x8e>
 8011a8c:	6823      	ldr	r3, [r4, #0]
 8011a8e:	3701      	adds	r7, #1
 8011a90:	06da      	lsls	r2, r3, #27
 8011a92:	bf5e      	ittt	pl
 8011a94:	682b      	ldrpl	r3, [r5, #0]
 8011a96:	781b      	ldrbpl	r3, [r3, #0]
 8011a98:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011a9c:	682a      	ldr	r2, [r5, #0]
 8011a9e:	686b      	ldr	r3, [r5, #4]
 8011aa0:	3201      	adds	r2, #1
 8011aa2:	602a      	str	r2, [r5, #0]
 8011aa4:	68a2      	ldr	r2, [r4, #8]
 8011aa6:	3b01      	subs	r3, #1
 8011aa8:	3a01      	subs	r2, #1
 8011aaa:	606b      	str	r3, [r5, #4]
 8011aac:	60a2      	str	r2, [r4, #8]
 8011aae:	b142      	cbz	r2, 8011ac2 <_scanf_chars+0x8e>
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	dcd7      	bgt.n	8011a64 <_scanf_chars+0x30>
 8011ab4:	4629      	mov	r1, r5
 8011ab6:	4640      	mov	r0, r8
 8011ab8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011abc:	4798      	blx	r3
 8011abe:	2800      	cmp	r0, #0
 8011ac0:	d0d0      	beq.n	8011a64 <_scanf_chars+0x30>
 8011ac2:	6823      	ldr	r3, [r4, #0]
 8011ac4:	f013 0310 	ands.w	r3, r3, #16
 8011ac8:	d105      	bne.n	8011ad6 <_scanf_chars+0xa2>
 8011aca:	68e2      	ldr	r2, [r4, #12]
 8011acc:	3201      	adds	r2, #1
 8011ace:	60e2      	str	r2, [r4, #12]
 8011ad0:	69a2      	ldr	r2, [r4, #24]
 8011ad2:	b102      	cbz	r2, 8011ad6 <_scanf_chars+0xa2>
 8011ad4:	7033      	strb	r3, [r6, #0]
 8011ad6:	2000      	movs	r0, #0
 8011ad8:	6923      	ldr	r3, [r4, #16]
 8011ada:	443b      	add	r3, r7
 8011adc:	6123      	str	r3, [r4, #16]
 8011ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ae2:	bf00      	nop
 8011ae4:	08012251 	.word	0x08012251

08011ae8 <_scanf_i>:
 8011ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aec:	460c      	mov	r4, r1
 8011aee:	4698      	mov	r8, r3
 8011af0:	4b72      	ldr	r3, [pc, #456]	@ (8011cbc <_scanf_i+0x1d4>)
 8011af2:	b087      	sub	sp, #28
 8011af4:	4682      	mov	sl, r0
 8011af6:	4616      	mov	r6, r2
 8011af8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011afc:	ab03      	add	r3, sp, #12
 8011afe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011b02:	4b6f      	ldr	r3, [pc, #444]	@ (8011cc0 <_scanf_i+0x1d8>)
 8011b04:	69a1      	ldr	r1, [r4, #24]
 8011b06:	4a6f      	ldr	r2, [pc, #444]	@ (8011cc4 <_scanf_i+0x1dc>)
 8011b08:	4627      	mov	r7, r4
 8011b0a:	2903      	cmp	r1, #3
 8011b0c:	bf08      	it	eq
 8011b0e:	461a      	moveq	r2, r3
 8011b10:	68a3      	ldr	r3, [r4, #8]
 8011b12:	9201      	str	r2, [sp, #4]
 8011b14:	1e5a      	subs	r2, r3, #1
 8011b16:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8011b1a:	bf81      	itttt	hi
 8011b1c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011b20:	eb03 0905 	addhi.w	r9, r3, r5
 8011b24:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8011b28:	60a3      	strhi	r3, [r4, #8]
 8011b2a:	f857 3b1c 	ldr.w	r3, [r7], #28
 8011b2e:	bf98      	it	ls
 8011b30:	f04f 0900 	movls.w	r9, #0
 8011b34:	463d      	mov	r5, r7
 8011b36:	f04f 0b00 	mov.w	fp, #0
 8011b3a:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8011b3e:	6023      	str	r3, [r4, #0]
 8011b40:	6831      	ldr	r1, [r6, #0]
 8011b42:	ab03      	add	r3, sp, #12
 8011b44:	2202      	movs	r2, #2
 8011b46:	7809      	ldrb	r1, [r1, #0]
 8011b48:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8011b4c:	f7fd f981 	bl	800ee52 <memchr>
 8011b50:	b328      	cbz	r0, 8011b9e <_scanf_i+0xb6>
 8011b52:	f1bb 0f01 	cmp.w	fp, #1
 8011b56:	d159      	bne.n	8011c0c <_scanf_i+0x124>
 8011b58:	6862      	ldr	r2, [r4, #4]
 8011b5a:	b92a      	cbnz	r2, 8011b68 <_scanf_i+0x80>
 8011b5c:	2108      	movs	r1, #8
 8011b5e:	6822      	ldr	r2, [r4, #0]
 8011b60:	6061      	str	r1, [r4, #4]
 8011b62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011b66:	6022      	str	r2, [r4, #0]
 8011b68:	6822      	ldr	r2, [r4, #0]
 8011b6a:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8011b6e:	6022      	str	r2, [r4, #0]
 8011b70:	68a2      	ldr	r2, [r4, #8]
 8011b72:	1e51      	subs	r1, r2, #1
 8011b74:	60a1      	str	r1, [r4, #8]
 8011b76:	b192      	cbz	r2, 8011b9e <_scanf_i+0xb6>
 8011b78:	6832      	ldr	r2, [r6, #0]
 8011b7a:	1c51      	adds	r1, r2, #1
 8011b7c:	6031      	str	r1, [r6, #0]
 8011b7e:	7812      	ldrb	r2, [r2, #0]
 8011b80:	f805 2b01 	strb.w	r2, [r5], #1
 8011b84:	6872      	ldr	r2, [r6, #4]
 8011b86:	3a01      	subs	r2, #1
 8011b88:	2a00      	cmp	r2, #0
 8011b8a:	6072      	str	r2, [r6, #4]
 8011b8c:	dc07      	bgt.n	8011b9e <_scanf_i+0xb6>
 8011b8e:	4631      	mov	r1, r6
 8011b90:	4650      	mov	r0, sl
 8011b92:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8011b96:	4790      	blx	r2
 8011b98:	2800      	cmp	r0, #0
 8011b9a:	f040 8085 	bne.w	8011ca8 <_scanf_i+0x1c0>
 8011b9e:	f10b 0b01 	add.w	fp, fp, #1
 8011ba2:	f1bb 0f03 	cmp.w	fp, #3
 8011ba6:	d1cb      	bne.n	8011b40 <_scanf_i+0x58>
 8011ba8:	6863      	ldr	r3, [r4, #4]
 8011baa:	b90b      	cbnz	r3, 8011bb0 <_scanf_i+0xc8>
 8011bac:	230a      	movs	r3, #10
 8011bae:	6063      	str	r3, [r4, #4]
 8011bb0:	6863      	ldr	r3, [r4, #4]
 8011bb2:	4945      	ldr	r1, [pc, #276]	@ (8011cc8 <_scanf_i+0x1e0>)
 8011bb4:	6960      	ldr	r0, [r4, #20]
 8011bb6:	1ac9      	subs	r1, r1, r3
 8011bb8:	f000 f8e9 	bl	8011d8e <__sccl>
 8011bbc:	f04f 0b00 	mov.w	fp, #0
 8011bc0:	68a3      	ldr	r3, [r4, #8]
 8011bc2:	6822      	ldr	r2, [r4, #0]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d03d      	beq.n	8011c44 <_scanf_i+0x15c>
 8011bc8:	6831      	ldr	r1, [r6, #0]
 8011bca:	6960      	ldr	r0, [r4, #20]
 8011bcc:	f891 c000 	ldrb.w	ip, [r1]
 8011bd0:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011bd4:	2800      	cmp	r0, #0
 8011bd6:	d035      	beq.n	8011c44 <_scanf_i+0x15c>
 8011bd8:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8011bdc:	d124      	bne.n	8011c28 <_scanf_i+0x140>
 8011bde:	0510      	lsls	r0, r2, #20
 8011be0:	d522      	bpl.n	8011c28 <_scanf_i+0x140>
 8011be2:	f10b 0b01 	add.w	fp, fp, #1
 8011be6:	f1b9 0f00 	cmp.w	r9, #0
 8011bea:	d003      	beq.n	8011bf4 <_scanf_i+0x10c>
 8011bec:	3301      	adds	r3, #1
 8011bee:	f109 39ff 	add.w	r9, r9, #4294967295
 8011bf2:	60a3      	str	r3, [r4, #8]
 8011bf4:	6873      	ldr	r3, [r6, #4]
 8011bf6:	3b01      	subs	r3, #1
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	6073      	str	r3, [r6, #4]
 8011bfc:	dd1b      	ble.n	8011c36 <_scanf_i+0x14e>
 8011bfe:	6833      	ldr	r3, [r6, #0]
 8011c00:	3301      	adds	r3, #1
 8011c02:	6033      	str	r3, [r6, #0]
 8011c04:	68a3      	ldr	r3, [r4, #8]
 8011c06:	3b01      	subs	r3, #1
 8011c08:	60a3      	str	r3, [r4, #8]
 8011c0a:	e7d9      	b.n	8011bc0 <_scanf_i+0xd8>
 8011c0c:	f1bb 0f02 	cmp.w	fp, #2
 8011c10:	d1ae      	bne.n	8011b70 <_scanf_i+0x88>
 8011c12:	6822      	ldr	r2, [r4, #0]
 8011c14:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8011c18:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8011c1c:	d1bf      	bne.n	8011b9e <_scanf_i+0xb6>
 8011c1e:	2110      	movs	r1, #16
 8011c20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011c24:	6061      	str	r1, [r4, #4]
 8011c26:	e7a2      	b.n	8011b6e <_scanf_i+0x86>
 8011c28:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8011c2c:	6022      	str	r2, [r4, #0]
 8011c2e:	780b      	ldrb	r3, [r1, #0]
 8011c30:	f805 3b01 	strb.w	r3, [r5], #1
 8011c34:	e7de      	b.n	8011bf4 <_scanf_i+0x10c>
 8011c36:	4631      	mov	r1, r6
 8011c38:	4650      	mov	r0, sl
 8011c3a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011c3e:	4798      	blx	r3
 8011c40:	2800      	cmp	r0, #0
 8011c42:	d0df      	beq.n	8011c04 <_scanf_i+0x11c>
 8011c44:	6823      	ldr	r3, [r4, #0]
 8011c46:	05d9      	lsls	r1, r3, #23
 8011c48:	d50d      	bpl.n	8011c66 <_scanf_i+0x17e>
 8011c4a:	42bd      	cmp	r5, r7
 8011c4c:	d909      	bls.n	8011c62 <_scanf_i+0x17a>
 8011c4e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011c52:	4632      	mov	r2, r6
 8011c54:	4650      	mov	r0, sl
 8011c56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011c5a:	f105 39ff 	add.w	r9, r5, #4294967295
 8011c5e:	4798      	blx	r3
 8011c60:	464d      	mov	r5, r9
 8011c62:	42bd      	cmp	r5, r7
 8011c64:	d028      	beq.n	8011cb8 <_scanf_i+0x1d0>
 8011c66:	6822      	ldr	r2, [r4, #0]
 8011c68:	f012 0210 	ands.w	r2, r2, #16
 8011c6c:	d113      	bne.n	8011c96 <_scanf_i+0x1ae>
 8011c6e:	702a      	strb	r2, [r5, #0]
 8011c70:	4639      	mov	r1, r7
 8011c72:	6863      	ldr	r3, [r4, #4]
 8011c74:	4650      	mov	r0, sl
 8011c76:	9e01      	ldr	r6, [sp, #4]
 8011c78:	47b0      	blx	r6
 8011c7a:	f8d8 3000 	ldr.w	r3, [r8]
 8011c7e:	6821      	ldr	r1, [r4, #0]
 8011c80:	1d1a      	adds	r2, r3, #4
 8011c82:	f8c8 2000 	str.w	r2, [r8]
 8011c86:	f011 0f20 	tst.w	r1, #32
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	d00f      	beq.n	8011cae <_scanf_i+0x1c6>
 8011c8e:	6018      	str	r0, [r3, #0]
 8011c90:	68e3      	ldr	r3, [r4, #12]
 8011c92:	3301      	adds	r3, #1
 8011c94:	60e3      	str	r3, [r4, #12]
 8011c96:	2000      	movs	r0, #0
 8011c98:	6923      	ldr	r3, [r4, #16]
 8011c9a:	1bed      	subs	r5, r5, r7
 8011c9c:	445d      	add	r5, fp
 8011c9e:	442b      	add	r3, r5
 8011ca0:	6123      	str	r3, [r4, #16]
 8011ca2:	b007      	add	sp, #28
 8011ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ca8:	f04f 0b00 	mov.w	fp, #0
 8011cac:	e7ca      	b.n	8011c44 <_scanf_i+0x15c>
 8011cae:	07ca      	lsls	r2, r1, #31
 8011cb0:	bf4c      	ite	mi
 8011cb2:	8018      	strhmi	r0, [r3, #0]
 8011cb4:	6018      	strpl	r0, [r3, #0]
 8011cb6:	e7eb      	b.n	8011c90 <_scanf_i+0x1a8>
 8011cb8:	2001      	movs	r0, #1
 8011cba:	e7f2      	b.n	8011ca2 <_scanf_i+0x1ba>
 8011cbc:	08012194 	.word	0x08012194
 8011cc0:	0800d525 	.word	0x0800d525
 8011cc4:	08010d69 	.word	0x08010d69
 8011cc8:	0801279c 	.word	0x0801279c

08011ccc <__swhatbuf_r>:
 8011ccc:	b570      	push	{r4, r5, r6, lr}
 8011cce:	460c      	mov	r4, r1
 8011cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cd4:	4615      	mov	r5, r2
 8011cd6:	2900      	cmp	r1, #0
 8011cd8:	461e      	mov	r6, r3
 8011cda:	b096      	sub	sp, #88	@ 0x58
 8011cdc:	da0c      	bge.n	8011cf8 <__swhatbuf_r+0x2c>
 8011cde:	89a3      	ldrh	r3, [r4, #12]
 8011ce0:	2100      	movs	r1, #0
 8011ce2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011ce6:	bf14      	ite	ne
 8011ce8:	2340      	movne	r3, #64	@ 0x40
 8011cea:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011cee:	2000      	movs	r0, #0
 8011cf0:	6031      	str	r1, [r6, #0]
 8011cf2:	602b      	str	r3, [r5, #0]
 8011cf4:	b016      	add	sp, #88	@ 0x58
 8011cf6:	bd70      	pop	{r4, r5, r6, pc}
 8011cf8:	466a      	mov	r2, sp
 8011cfa:	f000 f8e9 	bl	8011ed0 <_fstat_r>
 8011cfe:	2800      	cmp	r0, #0
 8011d00:	dbed      	blt.n	8011cde <__swhatbuf_r+0x12>
 8011d02:	9901      	ldr	r1, [sp, #4]
 8011d04:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011d08:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011d0c:	4259      	negs	r1, r3
 8011d0e:	4159      	adcs	r1, r3
 8011d10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011d14:	e7eb      	b.n	8011cee <__swhatbuf_r+0x22>

08011d16 <__smakebuf_r>:
 8011d16:	898b      	ldrh	r3, [r1, #12]
 8011d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011d1a:	079d      	lsls	r5, r3, #30
 8011d1c:	4606      	mov	r6, r0
 8011d1e:	460c      	mov	r4, r1
 8011d20:	d507      	bpl.n	8011d32 <__smakebuf_r+0x1c>
 8011d22:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011d26:	6023      	str	r3, [r4, #0]
 8011d28:	6123      	str	r3, [r4, #16]
 8011d2a:	2301      	movs	r3, #1
 8011d2c:	6163      	str	r3, [r4, #20]
 8011d2e:	b003      	add	sp, #12
 8011d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d32:	466a      	mov	r2, sp
 8011d34:	ab01      	add	r3, sp, #4
 8011d36:	f7ff ffc9 	bl	8011ccc <__swhatbuf_r>
 8011d3a:	9f00      	ldr	r7, [sp, #0]
 8011d3c:	4605      	mov	r5, r0
 8011d3e:	4639      	mov	r1, r7
 8011d40:	4630      	mov	r0, r6
 8011d42:	f7fa fc95 	bl	800c670 <_malloc_r>
 8011d46:	b948      	cbnz	r0, 8011d5c <__smakebuf_r+0x46>
 8011d48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d4c:	059a      	lsls	r2, r3, #22
 8011d4e:	d4ee      	bmi.n	8011d2e <__smakebuf_r+0x18>
 8011d50:	f023 0303 	bic.w	r3, r3, #3
 8011d54:	f043 0302 	orr.w	r3, r3, #2
 8011d58:	81a3      	strh	r3, [r4, #12]
 8011d5a:	e7e2      	b.n	8011d22 <__smakebuf_r+0xc>
 8011d5c:	89a3      	ldrh	r3, [r4, #12]
 8011d5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011d62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d66:	81a3      	strh	r3, [r4, #12]
 8011d68:	9b01      	ldr	r3, [sp, #4]
 8011d6a:	6020      	str	r0, [r4, #0]
 8011d6c:	b15b      	cbz	r3, 8011d86 <__smakebuf_r+0x70>
 8011d6e:	4630      	mov	r0, r6
 8011d70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d74:	f000 f8be 	bl	8011ef4 <_isatty_r>
 8011d78:	b128      	cbz	r0, 8011d86 <__smakebuf_r+0x70>
 8011d7a:	89a3      	ldrh	r3, [r4, #12]
 8011d7c:	f023 0303 	bic.w	r3, r3, #3
 8011d80:	f043 0301 	orr.w	r3, r3, #1
 8011d84:	81a3      	strh	r3, [r4, #12]
 8011d86:	89a3      	ldrh	r3, [r4, #12]
 8011d88:	431d      	orrs	r5, r3
 8011d8a:	81a5      	strh	r5, [r4, #12]
 8011d8c:	e7cf      	b.n	8011d2e <__smakebuf_r+0x18>

08011d8e <__sccl>:
 8011d8e:	b570      	push	{r4, r5, r6, lr}
 8011d90:	780b      	ldrb	r3, [r1, #0]
 8011d92:	4604      	mov	r4, r0
 8011d94:	2b5e      	cmp	r3, #94	@ 0x5e
 8011d96:	bf0b      	itete	eq
 8011d98:	784b      	ldrbeq	r3, [r1, #1]
 8011d9a:	1c4a      	addne	r2, r1, #1
 8011d9c:	1c8a      	addeq	r2, r1, #2
 8011d9e:	2100      	movne	r1, #0
 8011da0:	bf08      	it	eq
 8011da2:	2101      	moveq	r1, #1
 8011da4:	3801      	subs	r0, #1
 8011da6:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8011daa:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011dae:	42a8      	cmp	r0, r5
 8011db0:	d1fb      	bne.n	8011daa <__sccl+0x1c>
 8011db2:	b90b      	cbnz	r3, 8011db8 <__sccl+0x2a>
 8011db4:	1e50      	subs	r0, r2, #1
 8011db6:	bd70      	pop	{r4, r5, r6, pc}
 8011db8:	f081 0101 	eor.w	r1, r1, #1
 8011dbc:	4610      	mov	r0, r2
 8011dbe:	54e1      	strb	r1, [r4, r3]
 8011dc0:	4602      	mov	r2, r0
 8011dc2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011dc6:	2d2d      	cmp	r5, #45	@ 0x2d
 8011dc8:	d005      	beq.n	8011dd6 <__sccl+0x48>
 8011dca:	2d5d      	cmp	r5, #93	@ 0x5d
 8011dcc:	d016      	beq.n	8011dfc <__sccl+0x6e>
 8011dce:	2d00      	cmp	r5, #0
 8011dd0:	d0f1      	beq.n	8011db6 <__sccl+0x28>
 8011dd2:	462b      	mov	r3, r5
 8011dd4:	e7f2      	b.n	8011dbc <__sccl+0x2e>
 8011dd6:	7846      	ldrb	r6, [r0, #1]
 8011dd8:	2e5d      	cmp	r6, #93	@ 0x5d
 8011dda:	d0fa      	beq.n	8011dd2 <__sccl+0x44>
 8011ddc:	42b3      	cmp	r3, r6
 8011dde:	dcf8      	bgt.n	8011dd2 <__sccl+0x44>
 8011de0:	461a      	mov	r2, r3
 8011de2:	3002      	adds	r0, #2
 8011de4:	3201      	adds	r2, #1
 8011de6:	4296      	cmp	r6, r2
 8011de8:	54a1      	strb	r1, [r4, r2]
 8011dea:	dcfb      	bgt.n	8011de4 <__sccl+0x56>
 8011dec:	1af2      	subs	r2, r6, r3
 8011dee:	3a01      	subs	r2, #1
 8011df0:	42b3      	cmp	r3, r6
 8011df2:	bfa8      	it	ge
 8011df4:	2200      	movge	r2, #0
 8011df6:	1c5d      	adds	r5, r3, #1
 8011df8:	18ab      	adds	r3, r5, r2
 8011dfa:	e7e1      	b.n	8011dc0 <__sccl+0x32>
 8011dfc:	4610      	mov	r0, r2
 8011dfe:	e7da      	b.n	8011db6 <__sccl+0x28>

08011e00 <__submore>:
 8011e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e04:	460c      	mov	r4, r1
 8011e06:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011e08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011e0c:	4299      	cmp	r1, r3
 8011e0e:	d11b      	bne.n	8011e48 <__submore+0x48>
 8011e10:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8011e14:	f7fa fc2c 	bl	800c670 <_malloc_r>
 8011e18:	b918      	cbnz	r0, 8011e22 <__submore+0x22>
 8011e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8011e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011e26:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011e28:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8011e2c:	6360      	str	r0, [r4, #52]	@ 0x34
 8011e2e:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8011e32:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8011e36:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8011e3a:	7043      	strb	r3, [r0, #1]
 8011e3c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011e40:	7003      	strb	r3, [r0, #0]
 8011e42:	6020      	str	r0, [r4, #0]
 8011e44:	2000      	movs	r0, #0
 8011e46:	e7ea      	b.n	8011e1e <__submore+0x1e>
 8011e48:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8011e4a:	0077      	lsls	r7, r6, #1
 8011e4c:	463a      	mov	r2, r7
 8011e4e:	f7ff fbf9 	bl	8011644 <_realloc_r>
 8011e52:	4605      	mov	r5, r0
 8011e54:	2800      	cmp	r0, #0
 8011e56:	d0e0      	beq.n	8011e1a <__submore+0x1a>
 8011e58:	eb00 0806 	add.w	r8, r0, r6
 8011e5c:	4601      	mov	r1, r0
 8011e5e:	4632      	mov	r2, r6
 8011e60:	4640      	mov	r0, r8
 8011e62:	f7fd f804 	bl	800ee6e <memcpy>
 8011e66:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8011e6a:	f8c4 8000 	str.w	r8, [r4]
 8011e6e:	e7e9      	b.n	8011e44 <__submore+0x44>

08011e70 <_raise_r>:
 8011e70:	291f      	cmp	r1, #31
 8011e72:	b538      	push	{r3, r4, r5, lr}
 8011e74:	4605      	mov	r5, r0
 8011e76:	460c      	mov	r4, r1
 8011e78:	d904      	bls.n	8011e84 <_raise_r+0x14>
 8011e7a:	2316      	movs	r3, #22
 8011e7c:	6003      	str	r3, [r0, #0]
 8011e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8011e82:	bd38      	pop	{r3, r4, r5, pc}
 8011e84:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011e86:	b112      	cbz	r2, 8011e8e <_raise_r+0x1e>
 8011e88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011e8c:	b94b      	cbnz	r3, 8011ea2 <_raise_r+0x32>
 8011e8e:	4628      	mov	r0, r5
 8011e90:	f000 f852 	bl	8011f38 <_getpid_r>
 8011e94:	4622      	mov	r2, r4
 8011e96:	4601      	mov	r1, r0
 8011e98:	4628      	mov	r0, r5
 8011e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e9e:	f000 b839 	b.w	8011f14 <_kill_r>
 8011ea2:	2b01      	cmp	r3, #1
 8011ea4:	d00a      	beq.n	8011ebc <_raise_r+0x4c>
 8011ea6:	1c59      	adds	r1, r3, #1
 8011ea8:	d103      	bne.n	8011eb2 <_raise_r+0x42>
 8011eaa:	2316      	movs	r3, #22
 8011eac:	6003      	str	r3, [r0, #0]
 8011eae:	2001      	movs	r0, #1
 8011eb0:	e7e7      	b.n	8011e82 <_raise_r+0x12>
 8011eb2:	2100      	movs	r1, #0
 8011eb4:	4620      	mov	r0, r4
 8011eb6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011eba:	4798      	blx	r3
 8011ebc:	2000      	movs	r0, #0
 8011ebe:	e7e0      	b.n	8011e82 <_raise_r+0x12>

08011ec0 <raise>:
 8011ec0:	4b02      	ldr	r3, [pc, #8]	@ (8011ecc <raise+0xc>)
 8011ec2:	4601      	mov	r1, r0
 8011ec4:	6818      	ldr	r0, [r3, #0]
 8011ec6:	f7ff bfd3 	b.w	8011e70 <_raise_r>
 8011eca:	bf00      	nop
 8011ecc:	2000026c 	.word	0x2000026c

08011ed0 <_fstat_r>:
 8011ed0:	b538      	push	{r3, r4, r5, lr}
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	4d06      	ldr	r5, [pc, #24]	@ (8011ef0 <_fstat_r+0x20>)
 8011ed6:	4604      	mov	r4, r0
 8011ed8:	4608      	mov	r0, r1
 8011eda:	4611      	mov	r1, r2
 8011edc:	602b      	str	r3, [r5, #0]
 8011ede:	f7f2 f9b4 	bl	800424a <_fstat>
 8011ee2:	1c43      	adds	r3, r0, #1
 8011ee4:	d102      	bne.n	8011eec <_fstat_r+0x1c>
 8011ee6:	682b      	ldr	r3, [r5, #0]
 8011ee8:	b103      	cbz	r3, 8011eec <_fstat_r+0x1c>
 8011eea:	6023      	str	r3, [r4, #0]
 8011eec:	bd38      	pop	{r3, r4, r5, pc}
 8011eee:	bf00      	nop
 8011ef0:	20005b6c 	.word	0x20005b6c

08011ef4 <_isatty_r>:
 8011ef4:	b538      	push	{r3, r4, r5, lr}
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	4d05      	ldr	r5, [pc, #20]	@ (8011f10 <_isatty_r+0x1c>)
 8011efa:	4604      	mov	r4, r0
 8011efc:	4608      	mov	r0, r1
 8011efe:	602b      	str	r3, [r5, #0]
 8011f00:	f7f2 f9b2 	bl	8004268 <_isatty>
 8011f04:	1c43      	adds	r3, r0, #1
 8011f06:	d102      	bne.n	8011f0e <_isatty_r+0x1a>
 8011f08:	682b      	ldr	r3, [r5, #0]
 8011f0a:	b103      	cbz	r3, 8011f0e <_isatty_r+0x1a>
 8011f0c:	6023      	str	r3, [r4, #0]
 8011f0e:	bd38      	pop	{r3, r4, r5, pc}
 8011f10:	20005b6c 	.word	0x20005b6c

08011f14 <_kill_r>:
 8011f14:	b538      	push	{r3, r4, r5, lr}
 8011f16:	2300      	movs	r3, #0
 8011f18:	4d06      	ldr	r5, [pc, #24]	@ (8011f34 <_kill_r+0x20>)
 8011f1a:	4604      	mov	r4, r0
 8011f1c:	4608      	mov	r0, r1
 8011f1e:	4611      	mov	r1, r2
 8011f20:	602b      	str	r3, [r5, #0]
 8011f22:	f7f2 f96c 	bl	80041fe <_kill>
 8011f26:	1c43      	adds	r3, r0, #1
 8011f28:	d102      	bne.n	8011f30 <_kill_r+0x1c>
 8011f2a:	682b      	ldr	r3, [r5, #0]
 8011f2c:	b103      	cbz	r3, 8011f30 <_kill_r+0x1c>
 8011f2e:	6023      	str	r3, [r4, #0]
 8011f30:	bd38      	pop	{r3, r4, r5, pc}
 8011f32:	bf00      	nop
 8011f34:	20005b6c 	.word	0x20005b6c

08011f38 <_getpid_r>:
 8011f38:	f7f2 b95a 	b.w	80041f0 <_getpid>

08011f3c <_malloc_usable_size_r>:
 8011f3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f40:	1f18      	subs	r0, r3, #4
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	bfbc      	itt	lt
 8011f46:	580b      	ldrlt	r3, [r1, r0]
 8011f48:	18c0      	addlt	r0, r0, r3
 8011f4a:	4770      	bx	lr

08011f4c <_init>:
 8011f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f4e:	bf00      	nop
 8011f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f52:	bc08      	pop	{r3}
 8011f54:	469e      	mov	lr, r3
 8011f56:	4770      	bx	lr

08011f58 <_fini>:
 8011f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f5a:	bf00      	nop
 8011f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f5e:	bc08      	pop	{r3}
 8011f60:	469e      	mov	lr, r3
 8011f62:	4770      	bx	lr
