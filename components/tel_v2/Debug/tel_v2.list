
tel_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011ba0  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c8  08011d90  08011d90  00012d90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012558  08012558  00014330  2**0
                  CONTENTS
  4 .ARM          00000008  08012558  08012558  00013558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012560  08012560  00014330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012560  08012560  00013560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012564  08012564  00013564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000330  20000000  08012568  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005860  20000330  08012898  00014330  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005b90  08012898  00014b90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00014330  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021188  00000000  00000000  00014359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005677  00000000  00000000  000354e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cb0  00000000  00000000  0003ab58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000162e  00000000  00000000  0003c808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020621  00000000  00000000  0003de36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025ac4  00000000  00000000  0005e457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae1a2  00000000  00000000  00083f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001320bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090f4  00000000  00000000  00132100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0013b1f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000330 	.word	0x20000330
 800020c:	00000000 	.word	0x00000000
 8000210:	08011d78 	.word	0x08011d78

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000334 	.word	0x20000334
 800022c:	08011d78 	.word	0x08011d78

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <strlen>:
 8000244:	4603      	mov	r3, r0
 8000246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800024a:	2a00      	cmp	r2, #0
 800024c:	d1fb      	bne.n	8000246 <strlen+0x2>
 800024e:	1a18      	subs	r0, r3, r0
 8000250:	3801      	subs	r0, #1
 8000252:	4770      	bx	lr

08000254 <__aeabi_drsub>:
 8000254:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000258:	e002      	b.n	8000260 <__adddf3>
 800025a:	bf00      	nop

0800025c <__aeabi_dsub>:
 800025c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000260 <__adddf3>:
 8000260:	b530      	push	{r4, r5, lr}
 8000262:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000266:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800026a:	ea94 0f05 	teq	r4, r5
 800026e:	bf08      	it	eq
 8000270:	ea90 0f02 	teqeq	r0, r2
 8000274:	bf1f      	itttt	ne
 8000276:	ea54 0c00 	orrsne.w	ip, r4, r0
 800027a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000282:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000286:	f000 80e2 	beq.w	800044e <__adddf3+0x1ee>
 800028a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000292:	bfb8      	it	lt
 8000294:	426d      	neglt	r5, r5
 8000296:	dd0c      	ble.n	80002b2 <__adddf3+0x52>
 8000298:	442c      	add	r4, r5
 800029a:	ea80 0202 	eor.w	r2, r0, r2
 800029e:	ea81 0303 	eor.w	r3, r1, r3
 80002a2:	ea82 0000 	eor.w	r0, r2, r0
 80002a6:	ea83 0101 	eor.w	r1, r3, r1
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	2d36      	cmp	r5, #54	@ 0x36
 80002b4:	bf88      	it	hi
 80002b6:	bd30      	pophi	{r4, r5, pc}
 80002b8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002c0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x70>
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002dc:	d002      	beq.n	80002e4 <__adddf3+0x84>
 80002de:	4252      	negs	r2, r2
 80002e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e4:	ea94 0f05 	teq	r4, r5
 80002e8:	f000 80a7 	beq.w	800043a <__adddf3+0x1da>
 80002ec:	f1a4 0401 	sub.w	r4, r4, #1
 80002f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f4:	db0d      	blt.n	8000312 <__adddf3+0xb2>
 80002f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002fa:	fa22 f205 	lsr.w	r2, r2, r5
 80002fe:	1880      	adds	r0, r0, r2
 8000300:	f141 0100 	adc.w	r1, r1, #0
 8000304:	fa03 f20e 	lsl.w	r2, r3, lr
 8000308:	1880      	adds	r0, r0, r2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	4159      	adcs	r1, r3
 8000310:	e00e      	b.n	8000330 <__adddf3+0xd0>
 8000312:	f1a5 0520 	sub.w	r5, r5, #32
 8000316:	f10e 0e20 	add.w	lr, lr, #32
 800031a:	2a01      	cmp	r2, #1
 800031c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000320:	bf28      	it	cs
 8000322:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	18c0      	adds	r0, r0, r3
 800032c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000330:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000334:	d507      	bpl.n	8000346 <__adddf3+0xe6>
 8000336:	f04f 0e00 	mov.w	lr, #0
 800033a:	f1dc 0c00 	rsbs	ip, ip, #0
 800033e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000342:	eb6e 0101 	sbc.w	r1, lr, r1
 8000346:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800034a:	d31b      	bcc.n	8000384 <__adddf3+0x124>
 800034c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000350:	d30c      	bcc.n	800036c <__adddf3+0x10c>
 8000352:	0849      	lsrs	r1, r1, #1
 8000354:	ea5f 0030 	movs.w	r0, r0, rrx
 8000358:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800035c:	f104 0401 	add.w	r4, r4, #1
 8000360:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000364:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000368:	f080 809a 	bcs.w	80004a0 <__adddf3+0x240>
 800036c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000370:	bf08      	it	eq
 8000372:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000376:	f150 0000 	adcs.w	r0, r0, #0
 800037a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037e:	ea41 0105 	orr.w	r1, r1, r5
 8000382:	bd30      	pop	{r4, r5, pc}
 8000384:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000388:	4140      	adcs	r0, r0
 800038a:	eb41 0101 	adc.w	r1, r1, r1
 800038e:	3c01      	subs	r4, #1
 8000390:	bf28      	it	cs
 8000392:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000396:	d2e9      	bcs.n	800036c <__adddf3+0x10c>
 8000398:	f091 0f00 	teq	r1, #0
 800039c:	bf04      	itt	eq
 800039e:	4601      	moveq	r1, r0
 80003a0:	2000      	moveq	r0, #0
 80003a2:	fab1 f381 	clz	r3, r1
 80003a6:	bf08      	it	eq
 80003a8:	3320      	addeq	r3, #32
 80003aa:	f1a3 030b 	sub.w	r3, r3, #11
 80003ae:	f1b3 0220 	subs.w	r2, r3, #32
 80003b2:	da0c      	bge.n	80003ce <__adddf3+0x16e>
 80003b4:	320c      	adds	r2, #12
 80003b6:	dd08      	ble.n	80003ca <__adddf3+0x16a>
 80003b8:	f102 0c14 	add.w	ip, r2, #20
 80003bc:	f1c2 020c 	rsb	r2, r2, #12
 80003c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c4:	fa21 f102 	lsr.w	r1, r1, r2
 80003c8:	e00c      	b.n	80003e4 <__adddf3+0x184>
 80003ca:	f102 0214 	add.w	r2, r2, #20
 80003ce:	bfd8      	it	le
 80003d0:	f1c2 0c20 	rsble	ip, r2, #32
 80003d4:	fa01 f102 	lsl.w	r1, r1, r2
 80003d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003dc:	bfdc      	itt	le
 80003de:	ea41 010c 	orrle.w	r1, r1, ip
 80003e2:	4090      	lslle	r0, r2
 80003e4:	1ae4      	subs	r4, r4, r3
 80003e6:	bfa2      	ittt	ge
 80003e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003ec:	4329      	orrge	r1, r5
 80003ee:	bd30      	popge	{r4, r5, pc}
 80003f0:	ea6f 0404 	mvn.w	r4, r4
 80003f4:	3c1f      	subs	r4, #31
 80003f6:	da1c      	bge.n	8000432 <__adddf3+0x1d2>
 80003f8:	340c      	adds	r4, #12
 80003fa:	dc0e      	bgt.n	800041a <__adddf3+0x1ba>
 80003fc:	f104 0414 	add.w	r4, r4, #20
 8000400:	f1c4 0220 	rsb	r2, r4, #32
 8000404:	fa20 f004 	lsr.w	r0, r0, r4
 8000408:	fa01 f302 	lsl.w	r3, r1, r2
 800040c:	ea40 0003 	orr.w	r0, r0, r3
 8000410:	fa21 f304 	lsr.w	r3, r1, r4
 8000414:	ea45 0103 	orr.w	r1, r5, r3
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	f1c4 040c 	rsb	r4, r4, #12
 800041e:	f1c4 0220 	rsb	r2, r4, #32
 8000422:	fa20 f002 	lsr.w	r0, r0, r2
 8000426:	fa01 f304 	lsl.w	r3, r1, r4
 800042a:	ea40 0003 	orr.w	r0, r0, r3
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	fa21 f004 	lsr.w	r0, r1, r4
 8000436:	4629      	mov	r1, r5
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	f094 0f00 	teq	r4, #0
 800043e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000442:	bf06      	itte	eq
 8000444:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000448:	3401      	addeq	r4, #1
 800044a:	3d01      	subne	r5, #1
 800044c:	e74e      	b.n	80002ec <__adddf3+0x8c>
 800044e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000452:	bf18      	it	ne
 8000454:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000458:	d029      	beq.n	80004ae <__adddf3+0x24e>
 800045a:	ea94 0f05 	teq	r4, r5
 800045e:	bf08      	it	eq
 8000460:	ea90 0f02 	teqeq	r0, r2
 8000464:	d005      	beq.n	8000472 <__adddf3+0x212>
 8000466:	ea54 0c00 	orrs.w	ip, r4, r0
 800046a:	bf04      	itt	eq
 800046c:	4619      	moveq	r1, r3
 800046e:	4610      	moveq	r0, r2
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea91 0f03 	teq	r1, r3
 8000476:	bf1e      	ittt	ne
 8000478:	2100      	movne	r1, #0
 800047a:	2000      	movne	r0, #0
 800047c:	bd30      	popne	{r4, r5, pc}
 800047e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000482:	d105      	bne.n	8000490 <__adddf3+0x230>
 8000484:	0040      	lsls	r0, r0, #1
 8000486:	4149      	adcs	r1, r1
 8000488:	bf28      	it	cs
 800048a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000494:	bf3c      	itt	cc
 8000496:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800049a:	bd30      	popcc	{r4, r5, pc}
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a8:	f04f 0000 	mov.w	r0, #0
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf1a      	itte	ne
 80004b4:	4619      	movne	r1, r3
 80004b6:	4610      	movne	r0, r2
 80004b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004bc:	bf1c      	itt	ne
 80004be:	460b      	movne	r3, r1
 80004c0:	4602      	movne	r2, r0
 80004c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c6:	bf06      	itte	eq
 80004c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004cc:	ea91 0f03 	teqeq	r1, r3
 80004d0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	bf00      	nop

080004d8 <__aeabi_ui2d>:
 80004d8:	f090 0f00 	teq	r0, #0
 80004dc:	bf04      	itt	eq
 80004de:	2100      	moveq	r1, #0
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ec:	f04f 0500 	mov.w	r5, #0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e750      	b.n	8000398 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_i2d>:
 80004f8:	f090 0f00 	teq	r0, #0
 80004fc:	bf04      	itt	eq
 80004fe:	2100      	moveq	r1, #0
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000508:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000510:	bf48      	it	mi
 8000512:	4240      	negmi	r0, r0
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	e73e      	b.n	8000398 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_f2d>:
 800051c:	0042      	lsls	r2, r0, #1
 800051e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000522:	ea4f 0131 	mov.w	r1, r1, rrx
 8000526:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800052a:	bf1f      	itttt	ne
 800052c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000530:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000534:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000538:	4770      	bxne	lr
 800053a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053e:	bf08      	it	eq
 8000540:	4770      	bxeq	lr
 8000542:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000546:	bf04      	itt	eq
 8000548:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000554:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000558:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800055c:	e71c      	b.n	8000398 <__adddf3+0x138>
 800055e:	bf00      	nop

08000560 <__aeabi_ul2d>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	f04f 0500 	mov.w	r5, #0
 800056e:	e00a      	b.n	8000586 <__aeabi_l2d+0x16>

08000570 <__aeabi_l2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057e:	d502      	bpl.n	8000586 <__aeabi_l2d+0x16>
 8000580:	4240      	negs	r0, r0
 8000582:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000586:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800058a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000592:	f43f aed8 	beq.w	8000346 <__adddf3+0xe6>
 8000596:	f04f 0203 	mov.w	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a6:	bf18      	it	ne
 80005a8:	3203      	addne	r2, #3
 80005aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ae:	f1c2 0320 	rsb	r3, r2, #32
 80005b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80005be:	ea40 000e 	orr.w	r0, r0, lr
 80005c2:	fa21 f102 	lsr.w	r1, r1, r2
 80005c6:	4414      	add	r4, r2
 80005c8:	e6bd      	b.n	8000346 <__adddf3+0xe6>
 80005ca:	bf00      	nop

080005cc <__aeabi_dmul>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005d2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005da:	bf1d      	ittte	ne
 80005dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005e0:	ea94 0f0c 	teqne	r4, ip
 80005e4:	ea95 0f0c 	teqne	r5, ip
 80005e8:	f000 f8de 	bleq	80007a8 <__aeabi_dmul+0x1dc>
 80005ec:	442c      	add	r4, r5
 80005ee:	ea81 0603 	eor.w	r6, r1, r3
 80005f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fe:	bf18      	it	ne
 8000600:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000604:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000608:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800060c:	d038      	beq.n	8000680 <__aeabi_dmul+0xb4>
 800060e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000612:	f04f 0500 	mov.w	r5, #0
 8000616:	fbe1 e502 	umlal	lr, r5, r1, r2
 800061a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000622:	f04f 0600 	mov.w	r6, #0
 8000626:	fbe1 5603 	umlal	r5, r6, r1, r3
 800062a:	f09c 0f00 	teq	ip, #0
 800062e:	bf18      	it	ne
 8000630:	f04e 0e01 	orrne.w	lr, lr, #1
 8000634:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000638:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800063c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000640:	d204      	bcs.n	800064c <__aeabi_dmul+0x80>
 8000642:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000646:	416d      	adcs	r5, r5
 8000648:	eb46 0606 	adc.w	r6, r6, r6
 800064c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000650:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000654:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000658:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800065c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000660:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000664:	bf88      	it	hi
 8000666:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800066a:	d81e      	bhi.n	80006aa <__aeabi_dmul+0xde>
 800066c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000670:	bf08      	it	eq
 8000672:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000676:	f150 0000 	adcs.w	r0, r0, #0
 800067a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000684:	ea46 0101 	orr.w	r1, r6, r1
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	ea81 0103 	eor.w	r1, r1, r3
 8000690:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000694:	bfc2      	ittt	gt
 8000696:	ebd4 050c 	rsbsgt	r5, r4, ip
 800069a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069e:	bd70      	popgt	{r4, r5, r6, pc}
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f04f 0e00 	mov.w	lr, #0
 80006a8:	3c01      	subs	r4, #1
 80006aa:	f300 80ab 	bgt.w	8000804 <__aeabi_dmul+0x238>
 80006ae:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006b2:	bfde      	ittt	le
 80006b4:	2000      	movle	r0, #0
 80006b6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ba:	bd70      	pople	{r4, r5, r6, pc}
 80006bc:	f1c4 0400 	rsb	r4, r4, #0
 80006c0:	3c20      	subs	r4, #32
 80006c2:	da35      	bge.n	8000730 <__aeabi_dmul+0x164>
 80006c4:	340c      	adds	r4, #12
 80006c6:	dc1b      	bgt.n	8000700 <__aeabi_dmul+0x134>
 80006c8:	f104 0414 	add.w	r4, r4, #20
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f305 	lsl.w	r3, r0, r5
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	fa21 f604 	lsr.w	r6, r1, r4
 80006f0:	eb42 0106 	adc.w	r1, r2, r6
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f1c4 040c 	rsb	r4, r4, #12
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f304 	lsl.w	r3, r0, r4
 800070c:	fa20 f005 	lsr.w	r0, r0, r5
 8000710:	fa01 f204 	lsl.w	r2, r1, r4
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	f141 0100 	adc.w	r1, r1, #0
 8000724:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000728:	bf08      	it	eq
 800072a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072e:	bd70      	pop	{r4, r5, r6, pc}
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f205 	lsl.w	r2, r0, r5
 8000738:	ea4e 0e02 	orr.w	lr, lr, r2
 800073c:	fa20 f304 	lsr.w	r3, r0, r4
 8000740:	fa01 f205 	lsl.w	r2, r1, r5
 8000744:	ea43 0302 	orr.w	r3, r3, r2
 8000748:	fa21 f004 	lsr.w	r0, r1, r4
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	fa21 f204 	lsr.w	r2, r1, r4
 8000754:	ea20 0002 	bic.w	r0, r0, r2
 8000758:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800075c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000760:	bf08      	it	eq
 8000762:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000766:	bd70      	pop	{r4, r5, r6, pc}
 8000768:	f094 0f00 	teq	r4, #0
 800076c:	d10f      	bne.n	800078e <__aeabi_dmul+0x1c2>
 800076e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000772:	0040      	lsls	r0, r0, #1
 8000774:	eb41 0101 	adc.w	r1, r1, r1
 8000778:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800077c:	bf08      	it	eq
 800077e:	3c01      	subeq	r4, #1
 8000780:	d0f7      	beq.n	8000772 <__aeabi_dmul+0x1a6>
 8000782:	ea41 0106 	orr.w	r1, r1, r6
 8000786:	f095 0f00 	teq	r5, #0
 800078a:	bf18      	it	ne
 800078c:	4770      	bxne	lr
 800078e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000792:	0052      	lsls	r2, r2, #1
 8000794:	eb43 0303 	adc.w	r3, r3, r3
 8000798:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800079c:	bf08      	it	eq
 800079e:	3d01      	subeq	r5, #1
 80007a0:	d0f7      	beq.n	8000792 <__aeabi_dmul+0x1c6>
 80007a2:	ea43 0306 	orr.w	r3, r3, r6
 80007a6:	4770      	bx	lr
 80007a8:	ea94 0f0c 	teq	r4, ip
 80007ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007b0:	bf18      	it	ne
 80007b2:	ea95 0f0c 	teqne	r5, ip
 80007b6:	d00c      	beq.n	80007d2 <__aeabi_dmul+0x206>
 80007b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007bc:	bf18      	it	ne
 80007be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c2:	d1d1      	bne.n	8000768 <__aeabi_dmul+0x19c>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d6:	bf06      	itte	eq
 80007d8:	4610      	moveq	r0, r2
 80007da:	4619      	moveq	r1, r3
 80007dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e0:	d019      	beq.n	8000816 <__aeabi_dmul+0x24a>
 80007e2:	ea94 0f0c 	teq	r4, ip
 80007e6:	d102      	bne.n	80007ee <__aeabi_dmul+0x222>
 80007e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007ec:	d113      	bne.n	8000816 <__aeabi_dmul+0x24a>
 80007ee:	ea95 0f0c 	teq	r5, ip
 80007f2:	d105      	bne.n	8000800 <__aeabi_dmul+0x234>
 80007f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f8:	bf1c      	itt	ne
 80007fa:	4610      	movne	r0, r2
 80007fc:	4619      	movne	r1, r3
 80007fe:	d10a      	bne.n	8000816 <__aeabi_dmul+0x24a>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800080c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800081a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081e:	bd70      	pop	{r4, r5, r6, pc}

08000820 <__aeabi_ddiv>:
 8000820:	b570      	push	{r4, r5, r6, lr}
 8000822:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000826:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800082a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082e:	bf1d      	ittte	ne
 8000830:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000834:	ea94 0f0c 	teqne	r4, ip
 8000838:	ea95 0f0c 	teqne	r5, ip
 800083c:	f000 f8a7 	bleq	800098e <__aeabi_ddiv+0x16e>
 8000840:	eba4 0405 	sub.w	r4, r4, r5
 8000844:	ea81 0e03 	eor.w	lr, r1, r3
 8000848:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800084c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000850:	f000 8088 	beq.w	8000964 <__aeabi_ddiv+0x144>
 8000854:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000858:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800085c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000860:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000864:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000868:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800086c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000870:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000874:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000878:	429d      	cmp	r5, r3
 800087a:	bf08      	it	eq
 800087c:	4296      	cmpeq	r6, r2
 800087e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000882:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000886:	d202      	bcs.n	800088e <__aeabi_ddiv+0x6e>
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	1ab6      	subs	r6, r6, r2
 8000890:	eb65 0503 	sbc.w	r5, r5, r3
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008aa:	bf22      	ittt	cs
 80008ac:	1ab6      	subcs	r6, r6, r2
 80008ae:	4675      	movcs	r5, lr
 80008b0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80008be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c2:	bf22      	ittt	cs
 80008c4:	1ab6      	subcs	r6, r6, r2
 80008c6:	4675      	movcs	r5, lr
 80008c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008da:	bf22      	ittt	cs
 80008dc:	1ab6      	subcs	r6, r6, r2
 80008de:	4675      	movcs	r5, lr
 80008e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f2:	bf22      	ittt	cs
 80008f4:	1ab6      	subcs	r6, r6, r2
 80008f6:	4675      	movcs	r5, lr
 80008f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008fc:	ea55 0e06 	orrs.w	lr, r5, r6
 8000900:	d018      	beq.n	8000934 <__aeabi_ddiv+0x114>
 8000902:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000906:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800090a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000912:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000916:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800091a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091e:	d1c0      	bne.n	80008a2 <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000924:	d10b      	bne.n	800093e <__aeabi_ddiv+0x11e>
 8000926:	ea41 0100 	orr.w	r1, r1, r0
 800092a:	f04f 0000 	mov.w	r0, #0
 800092e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000932:	e7b6      	b.n	80008a2 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000938:	bf04      	itt	eq
 800093a:	4301      	orreq	r1, r0
 800093c:	2000      	moveq	r0, #0
 800093e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000942:	bf88      	it	hi
 8000944:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000948:	f63f aeaf 	bhi.w	80006aa <__aeabi_dmul+0xde>
 800094c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000950:	bf04      	itt	eq
 8000952:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000956:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800095a:	f150 0000 	adcs.w	r0, r0, #0
 800095e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000962:	bd70      	pop	{r4, r5, r6, pc}
 8000964:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000968:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800096c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000970:	bfc2      	ittt	gt
 8000972:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000976:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800097a:	bd70      	popgt	{r4, r5, r6, pc}
 800097c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000980:	f04f 0e00 	mov.w	lr, #0
 8000984:	3c01      	subs	r4, #1
 8000986:	e690      	b.n	80006aa <__aeabi_dmul+0xde>
 8000988:	ea45 0e06 	orr.w	lr, r5, r6
 800098c:	e68d      	b.n	80006aa <__aeabi_dmul+0xde>
 800098e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000992:	ea94 0f0c 	teq	r4, ip
 8000996:	bf08      	it	eq
 8000998:	ea95 0f0c 	teqeq	r5, ip
 800099c:	f43f af3b 	beq.w	8000816 <__aeabi_dmul+0x24a>
 80009a0:	ea94 0f0c 	teq	r4, ip
 80009a4:	d10a      	bne.n	80009bc <__aeabi_ddiv+0x19c>
 80009a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009aa:	f47f af34 	bne.w	8000816 <__aeabi_dmul+0x24a>
 80009ae:	ea95 0f0c 	teq	r5, ip
 80009b2:	f47f af25 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e72c      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009bc:	ea95 0f0c 	teq	r5, ip
 80009c0:	d106      	bne.n	80009d0 <__aeabi_ddiv+0x1b0>
 80009c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c6:	f43f aefd 	beq.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e722      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d4:	bf18      	it	ne
 80009d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009da:	f47f aec5 	bne.w	8000768 <__aeabi_dmul+0x19c>
 80009de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009e2:	f47f af0d 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ea:	f47f aeeb 	bne.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ee:	e712      	b.n	8000816 <__aeabi_dmul+0x24a>

080009f0 <__gedf2>:
 80009f0:	f04f 3cff 	mov.w	ip, #4294967295
 80009f4:	e006      	b.n	8000a04 <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__ledf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	e002      	b.n	8000a04 <__cmpdf2+0x4>
 80009fe:	bf00      	nop

08000a00 <__cmpdf2>:
 8000a00:	f04f 0c01 	mov.w	ip, #1
 8000a04:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a1a:	d01b      	beq.n	8000a54 <__cmpdf2+0x54>
 8000a1c:	b001      	add	sp, #4
 8000a1e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a22:	bf0c      	ite	eq
 8000a24:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a28:	ea91 0f03 	teqne	r1, r3
 8000a2c:	bf02      	ittt	eq
 8000a2e:	ea90 0f02 	teqeq	r0, r2
 8000a32:	2000      	moveq	r0, #0
 8000a34:	4770      	bxeq	lr
 8000a36:	f110 0f00 	cmn.w	r0, #0
 8000a3a:	ea91 0f03 	teq	r1, r3
 8000a3e:	bf58      	it	pl
 8000a40:	4299      	cmppl	r1, r3
 8000a42:	bf08      	it	eq
 8000a44:	4290      	cmpeq	r0, r2
 8000a46:	bf2c      	ite	cs
 8000a48:	17d8      	asrcs	r0, r3, #31
 8000a4a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4e:	f040 0001 	orr.w	r0, r0, #1
 8000a52:	4770      	bx	lr
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	d102      	bne.n	8000a64 <__cmpdf2+0x64>
 8000a5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a62:	d107      	bne.n	8000a74 <__cmpdf2+0x74>
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d1d6      	bne.n	8000a1c <__cmpdf2+0x1c>
 8000a6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a72:	d0d3      	beq.n	8000a1c <__cmpdf2+0x1c>
 8000a74:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_cdrcmple>:
 8000a7c:	4684      	mov	ip, r0
 8000a7e:	4610      	mov	r0, r2
 8000a80:	4662      	mov	r2, ip
 8000a82:	468c      	mov	ip, r1
 8000a84:	4619      	mov	r1, r3
 8000a86:	4663      	mov	r3, ip
 8000a88:	e000      	b.n	8000a8c <__aeabi_cdcmpeq>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdcmpeq>:
 8000a8c:	b501      	push	{r0, lr}
 8000a8e:	f7ff ffb7 	bl	8000a00 <__cmpdf2>
 8000a92:	2800      	cmp	r0, #0
 8000a94:	bf48      	it	mi
 8000a96:	f110 0f00 	cmnmi.w	r0, #0
 8000a9a:	bd01      	pop	{r0, pc}

08000a9c <__aeabi_dcmpeq>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff fff4 	bl	8000a8c <__aeabi_cdcmpeq>
 8000aa4:	bf0c      	ite	eq
 8000aa6:	2001      	moveq	r0, #1
 8000aa8:	2000      	movne	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmplt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffea 	bl	8000a8c <__aeabi_cdcmpeq>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmple>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffe0 	bl	8000a8c <__aeabi_cdcmpeq>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpge>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffce 	bl	8000a7c <__aeabi_cdrcmple>
 8000ae0:	bf94      	ite	ls
 8000ae2:	2001      	movls	r0, #1
 8000ae4:	2000      	movhi	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpgt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffc4 	bl	8000a7c <__aeabi_cdrcmple>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmpun>:
 8000b00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d102      	bne.n	8000b10 <__aeabi_dcmpun+0x10>
 8000b0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0e:	d10a      	bne.n	8000b26 <__aeabi_dcmpun+0x26>
 8000b10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x20>
 8000b1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_dcmpun+0x26>
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0001 	mov.w	r0, #1
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_frsub>:
 8000c5c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c60:	e002      	b.n	8000c68 <__addsf3>
 8000c62:	bf00      	nop

08000c64 <__aeabi_fsub>:
 8000c64:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c68 <__addsf3>:
 8000c68:	0042      	lsls	r2, r0, #1
 8000c6a:	bf1f      	itttt	ne
 8000c6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c70:	ea92 0f03 	teqne	r2, r3
 8000c74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7c:	d06a      	beq.n	8000d54 <__addsf3+0xec>
 8000c7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c86:	bfc1      	itttt	gt
 8000c88:	18d2      	addgt	r2, r2, r3
 8000c8a:	4041      	eorgt	r1, r0
 8000c8c:	4048      	eorgt	r0, r1
 8000c8e:	4041      	eorgt	r1, r0
 8000c90:	bfb8      	it	lt
 8000c92:	425b      	neglt	r3, r3
 8000c94:	2b19      	cmp	r3, #25
 8000c96:	bf88      	it	hi
 8000c98:	4770      	bxhi	lr
 8000c9a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ca6:	bf18      	it	ne
 8000ca8:	4240      	negne	r0, r0
 8000caa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cb2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cb6:	bf18      	it	ne
 8000cb8:	4249      	negne	r1, r1
 8000cba:	ea92 0f03 	teq	r2, r3
 8000cbe:	d03f      	beq.n	8000d40 <__addsf3+0xd8>
 8000cc0:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc4:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc8:	eb10 000c 	adds.w	r0, r0, ip
 8000ccc:	f1c3 0320 	rsb	r3, r3, #32
 8000cd0:	fa01 f103 	lsl.w	r1, r1, r3
 8000cd4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__addsf3+0x78>
 8000cda:	4249      	negs	r1, r1
 8000cdc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ce0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000ce4:	d313      	bcc.n	8000d0e <__addsf3+0xa6>
 8000ce6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cea:	d306      	bcc.n	8000cfa <__addsf3+0x92>
 8000cec:	0840      	lsrs	r0, r0, #1
 8000cee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cf2:	f102 0201 	add.w	r2, r2, #1
 8000cf6:	2afe      	cmp	r2, #254	@ 0xfe
 8000cf8:	d251      	bcs.n	8000d9e <__addsf3+0x136>
 8000cfa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	ea40 0003 	orr.w	r0, r0, r3
 8000d0c:	4770      	bx	lr
 8000d0e:	0049      	lsls	r1, r1, #1
 8000d10:	eb40 0000 	adc.w	r0, r0, r0
 8000d14:	3a01      	subs	r2, #1
 8000d16:	bf28      	it	cs
 8000d18:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d1c:	d2ed      	bcs.n	8000cfa <__addsf3+0x92>
 8000d1e:	fab0 fc80 	clz	ip, r0
 8000d22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d26:	ebb2 020c 	subs.w	r2, r2, ip
 8000d2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d2e:	bfaa      	itet	ge
 8000d30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d34:	4252      	neglt	r2, r2
 8000d36:	4318      	orrge	r0, r3
 8000d38:	bfbc      	itt	lt
 8000d3a:	40d0      	lsrlt	r0, r2
 8000d3c:	4318      	orrlt	r0, r3
 8000d3e:	4770      	bx	lr
 8000d40:	f092 0f00 	teq	r2, #0
 8000d44:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d48:	bf06      	itte	eq
 8000d4a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d4e:	3201      	addeq	r2, #1
 8000d50:	3b01      	subne	r3, #1
 8000d52:	e7b5      	b.n	8000cc0 <__addsf3+0x58>
 8000d54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d5c:	bf18      	it	ne
 8000d5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d62:	d021      	beq.n	8000da8 <__addsf3+0x140>
 8000d64:	ea92 0f03 	teq	r2, r3
 8000d68:	d004      	beq.n	8000d74 <__addsf3+0x10c>
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	bf08      	it	eq
 8000d70:	4608      	moveq	r0, r1
 8000d72:	4770      	bx	lr
 8000d74:	ea90 0f01 	teq	r0, r1
 8000d78:	bf1c      	itt	ne
 8000d7a:	2000      	movne	r0, #0
 8000d7c:	4770      	bxne	lr
 8000d7e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d82:	d104      	bne.n	8000d8e <__addsf3+0x126>
 8000d84:	0040      	lsls	r0, r0, #1
 8000d86:	bf28      	it	cs
 8000d88:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d8c:	4770      	bx	lr
 8000d8e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d92:	bf3c      	itt	cc
 8000d94:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d98:	4770      	bxcc	lr
 8000d9a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d9e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000da2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000da6:	4770      	bx	lr
 8000da8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dac:	bf16      	itet	ne
 8000dae:	4608      	movne	r0, r1
 8000db0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000db4:	4601      	movne	r1, r0
 8000db6:	0242      	lsls	r2, r0, #9
 8000db8:	bf06      	itte	eq
 8000dba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dbe:	ea90 0f01 	teqeq	r0, r1
 8000dc2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000dc6:	4770      	bx	lr

08000dc8 <__aeabi_ui2f>:
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	e004      	b.n	8000dd8 <__aeabi_i2f+0x8>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_i2f>:
 8000dd0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000dd4:	bf48      	it	mi
 8000dd6:	4240      	negmi	r0, r0
 8000dd8:	ea5f 0c00 	movs.w	ip, r0
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000de4:	4601      	mov	r1, r0
 8000de6:	f04f 0000 	mov.w	r0, #0
 8000dea:	e01c      	b.n	8000e26 <__aeabi_l2f+0x2a>

08000dec <__aeabi_ul2f>:
 8000dec:	ea50 0201 	orrs.w	r2, r0, r1
 8000df0:	bf08      	it	eq
 8000df2:	4770      	bxeq	lr
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e00a      	b.n	8000e10 <__aeabi_l2f+0x14>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_l2f>:
 8000dfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000e00:	bf08      	it	eq
 8000e02:	4770      	bxeq	lr
 8000e04:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e08:	d502      	bpl.n	8000e10 <__aeabi_l2f+0x14>
 8000e0a:	4240      	negs	r0, r0
 8000e0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e10:	ea5f 0c01 	movs.w	ip, r1
 8000e14:	bf02      	ittt	eq
 8000e16:	4684      	moveq	ip, r0
 8000e18:	4601      	moveq	r1, r0
 8000e1a:	2000      	moveq	r0, #0
 8000e1c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e20:	bf08      	it	eq
 8000e22:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e26:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e2a:	fabc f28c 	clz	r2, ip
 8000e2e:	3a08      	subs	r2, #8
 8000e30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e34:	db10      	blt.n	8000e58 <__aeabi_l2f+0x5c>
 8000e36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e40:	f1c2 0220 	rsb	r2, r2, #32
 8000e44:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e48:	fa20 f202 	lsr.w	r2, r0, r2
 8000e4c:	eb43 0002 	adc.w	r0, r3, r2
 8000e50:	bf08      	it	eq
 8000e52:	f020 0001 	biceq.w	r0, r0, #1
 8000e56:	4770      	bx	lr
 8000e58:	f102 0220 	add.w	r2, r2, #32
 8000e5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e60:	f1c2 0220 	rsb	r2, r2, #32
 8000e64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e68:	fa21 f202 	lsr.w	r2, r1, r2
 8000e6c:	eb43 0002 	adc.w	r0, r3, r2
 8000e70:	bf08      	it	eq
 8000e72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e76:	4770      	bx	lr

08000e78 <__aeabi_fmul>:
 8000e78:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e80:	bf1e      	ittt	ne
 8000e82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e86:	ea92 0f0c 	teqne	r2, ip
 8000e8a:	ea93 0f0c 	teqne	r3, ip
 8000e8e:	d06f      	beq.n	8000f70 <__aeabi_fmul+0xf8>
 8000e90:	441a      	add	r2, r3
 8000e92:	ea80 0c01 	eor.w	ip, r0, r1
 8000e96:	0240      	lsls	r0, r0, #9
 8000e98:	bf18      	it	ne
 8000e9a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e9e:	d01e      	beq.n	8000ede <__aeabi_fmul+0x66>
 8000ea0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ea4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ea8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000eac:	fba0 3101 	umull	r3, r1, r0, r1
 8000eb0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000eb4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000eb8:	bf3e      	ittt	cc
 8000eba:	0049      	lslcc	r1, r1, #1
 8000ebc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ec0:	005b      	lslcc	r3, r3, #1
 8000ec2:	ea40 0001 	orr.w	r0, r0, r1
 8000ec6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000eca:	2afd      	cmp	r2, #253	@ 0xfd
 8000ecc:	d81d      	bhi.n	8000f0a <__aeabi_fmul+0x92>
 8000ece:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000ed2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ed6:	bf08      	it	eq
 8000ed8:	f020 0001 	biceq.w	r0, r0, #1
 8000edc:	4770      	bx	lr
 8000ede:	f090 0f00 	teq	r0, #0
 8000ee2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ee6:	bf08      	it	eq
 8000ee8:	0249      	lsleq	r1, r1, #9
 8000eea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ef2:	3a7f      	subs	r2, #127	@ 0x7f
 8000ef4:	bfc2      	ittt	gt
 8000ef6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000efa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000efe:	4770      	bxgt	lr
 8000f00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f04:	f04f 0300 	mov.w	r3, #0
 8000f08:	3a01      	subs	r2, #1
 8000f0a:	dc5d      	bgt.n	8000fc8 <__aeabi_fmul+0x150>
 8000f0c:	f112 0f19 	cmn.w	r2, #25
 8000f10:	bfdc      	itt	le
 8000f12:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000f16:	4770      	bxle	lr
 8000f18:	f1c2 0200 	rsb	r2, r2, #0
 8000f1c:	0041      	lsls	r1, r0, #1
 8000f1e:	fa21 f102 	lsr.w	r1, r1, r2
 8000f22:	f1c2 0220 	rsb	r2, r2, #32
 8000f26:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f2a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f2e:	f140 0000 	adc.w	r0, r0, #0
 8000f32:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f36:	bf08      	it	eq
 8000f38:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f3c:	4770      	bx	lr
 8000f3e:	f092 0f00 	teq	r2, #0
 8000f42:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f46:	bf02      	ittt	eq
 8000f48:	0040      	lsleq	r0, r0, #1
 8000f4a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f4e:	3a01      	subeq	r2, #1
 8000f50:	d0f9      	beq.n	8000f46 <__aeabi_fmul+0xce>
 8000f52:	ea40 000c 	orr.w	r0, r0, ip
 8000f56:	f093 0f00 	teq	r3, #0
 8000f5a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0049      	lsleq	r1, r1, #1
 8000f62:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f66:	3b01      	subeq	r3, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fmul+0xe6>
 8000f6a:	ea41 010c 	orr.w	r1, r1, ip
 8000f6e:	e78f      	b.n	8000e90 <__aeabi_fmul+0x18>
 8000f70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f74:	ea92 0f0c 	teq	r2, ip
 8000f78:	bf18      	it	ne
 8000f7a:	ea93 0f0c 	teqne	r3, ip
 8000f7e:	d00a      	beq.n	8000f96 <__aeabi_fmul+0x11e>
 8000f80:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f84:	bf18      	it	ne
 8000f86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f8a:	d1d8      	bne.n	8000f3e <__aeabi_fmul+0xc6>
 8000f8c:	ea80 0001 	eor.w	r0, r0, r1
 8000f90:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f94:	4770      	bx	lr
 8000f96:	f090 0f00 	teq	r0, #0
 8000f9a:	bf17      	itett	ne
 8000f9c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000fa0:	4608      	moveq	r0, r1
 8000fa2:	f091 0f00 	teqne	r1, #0
 8000fa6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000faa:	d014      	beq.n	8000fd6 <__aeabi_fmul+0x15e>
 8000fac:	ea92 0f0c 	teq	r2, ip
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_fmul+0x13e>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	d10f      	bne.n	8000fd6 <__aeabi_fmul+0x15e>
 8000fb6:	ea93 0f0c 	teq	r3, ip
 8000fba:	d103      	bne.n	8000fc4 <__aeabi_fmul+0x14c>
 8000fbc:	024b      	lsls	r3, r1, #9
 8000fbe:	bf18      	it	ne
 8000fc0:	4608      	movne	r0, r1
 8000fc2:	d108      	bne.n	8000fd6 <__aeabi_fmul+0x15e>
 8000fc4:	ea80 0001 	eor.w	r0, r0, r1
 8000fc8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000fcc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fd4:	4770      	bx	lr
 8000fd6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fda:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000fde:	4770      	bx	lr

08000fe0 <__aeabi_fdiv>:
 8000fe0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000fe4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fe8:	bf1e      	ittt	ne
 8000fea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fee:	ea92 0f0c 	teqne	r2, ip
 8000ff2:	ea93 0f0c 	teqne	r3, ip
 8000ff6:	d069      	beq.n	80010cc <__aeabi_fdiv+0xec>
 8000ff8:	eba2 0203 	sub.w	r2, r2, r3
 8000ffc:	ea80 0c01 	eor.w	ip, r0, r1
 8001000:	0249      	lsls	r1, r1, #9
 8001002:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8001006:	d037      	beq.n	8001078 <__aeabi_fdiv+0x98>
 8001008:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800100c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8001010:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001014:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8001018:	428b      	cmp	r3, r1
 800101a:	bf38      	it	cc
 800101c:	005b      	lslcc	r3, r3, #1
 800101e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8001022:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8001026:	428b      	cmp	r3, r1
 8001028:	bf24      	itt	cs
 800102a:	1a5b      	subcs	r3, r3, r1
 800102c:	ea40 000c 	orrcs.w	r0, r0, ip
 8001030:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001034:	bf24      	itt	cs
 8001036:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800103a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800103e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001042:	bf24      	itt	cs
 8001044:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001048:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800104c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001050:	bf24      	itt	cs
 8001052:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001056:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	bf18      	it	ne
 800105e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001062:	d1e0      	bne.n	8001026 <__aeabi_fdiv+0x46>
 8001064:	2afd      	cmp	r2, #253	@ 0xfd
 8001066:	f63f af50 	bhi.w	8000f0a <__aeabi_fmul+0x92>
 800106a:	428b      	cmp	r3, r1
 800106c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001070:	bf08      	it	eq
 8001072:	f020 0001 	biceq.w	r0, r0, #1
 8001076:	4770      	bx	lr
 8001078:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800107c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001080:	327f      	adds	r2, #127	@ 0x7f
 8001082:	bfc2      	ittt	gt
 8001084:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8001088:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800108c:	4770      	bxgt	lr
 800108e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	3a01      	subs	r2, #1
 8001098:	e737      	b.n	8000f0a <__aeabi_fmul+0x92>
 800109a:	f092 0f00 	teq	r2, #0
 800109e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80010a2:	bf02      	ittt	eq
 80010a4:	0040      	lsleq	r0, r0, #1
 80010a6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80010aa:	3a01      	subeq	r2, #1
 80010ac:	d0f9      	beq.n	80010a2 <__aeabi_fdiv+0xc2>
 80010ae:	ea40 000c 	orr.w	r0, r0, ip
 80010b2:	f093 0f00 	teq	r3, #0
 80010b6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80010ba:	bf02      	ittt	eq
 80010bc:	0049      	lsleq	r1, r1, #1
 80010be:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80010c2:	3b01      	subeq	r3, #1
 80010c4:	d0f9      	beq.n	80010ba <__aeabi_fdiv+0xda>
 80010c6:	ea41 010c 	orr.w	r1, r1, ip
 80010ca:	e795      	b.n	8000ff8 <__aeabi_fdiv+0x18>
 80010cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010d0:	ea92 0f0c 	teq	r2, ip
 80010d4:	d108      	bne.n	80010e8 <__aeabi_fdiv+0x108>
 80010d6:	0242      	lsls	r2, r0, #9
 80010d8:	f47f af7d 	bne.w	8000fd6 <__aeabi_fmul+0x15e>
 80010dc:	ea93 0f0c 	teq	r3, ip
 80010e0:	f47f af70 	bne.w	8000fc4 <__aeabi_fmul+0x14c>
 80010e4:	4608      	mov	r0, r1
 80010e6:	e776      	b.n	8000fd6 <__aeabi_fmul+0x15e>
 80010e8:	ea93 0f0c 	teq	r3, ip
 80010ec:	d104      	bne.n	80010f8 <__aeabi_fdiv+0x118>
 80010ee:	024b      	lsls	r3, r1, #9
 80010f0:	f43f af4c 	beq.w	8000f8c <__aeabi_fmul+0x114>
 80010f4:	4608      	mov	r0, r1
 80010f6:	e76e      	b.n	8000fd6 <__aeabi_fmul+0x15e>
 80010f8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80010fc:	bf18      	it	ne
 80010fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001102:	d1ca      	bne.n	800109a <__aeabi_fdiv+0xba>
 8001104:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001108:	f47f af5c 	bne.w	8000fc4 <__aeabi_fmul+0x14c>
 800110c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001110:	f47f af3c 	bne.w	8000f8c <__aeabi_fmul+0x114>
 8001114:	e75f      	b.n	8000fd6 <__aeabi_fmul+0x15e>
 8001116:	bf00      	nop

08001118 <__gesf2>:
 8001118:	f04f 3cff 	mov.w	ip, #4294967295
 800111c:	e006      	b.n	800112c <__cmpsf2+0x4>
 800111e:	bf00      	nop

08001120 <__lesf2>:
 8001120:	f04f 0c01 	mov.w	ip, #1
 8001124:	e002      	b.n	800112c <__cmpsf2+0x4>
 8001126:	bf00      	nop

08001128 <__cmpsf2>:
 8001128:	f04f 0c01 	mov.w	ip, #1
 800112c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001130:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001134:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001138:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800113c:	bf18      	it	ne
 800113e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001142:	d011      	beq.n	8001168 <__cmpsf2+0x40>
 8001144:	b001      	add	sp, #4
 8001146:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800114a:	bf18      	it	ne
 800114c:	ea90 0f01 	teqne	r0, r1
 8001150:	bf58      	it	pl
 8001152:	ebb2 0003 	subspl.w	r0, r2, r3
 8001156:	bf88      	it	hi
 8001158:	17c8      	asrhi	r0, r1, #31
 800115a:	bf38      	it	cc
 800115c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001160:	bf18      	it	ne
 8001162:	f040 0001 	orrne.w	r0, r0, #1
 8001166:	4770      	bx	lr
 8001168:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800116c:	d102      	bne.n	8001174 <__cmpsf2+0x4c>
 800116e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001172:	d105      	bne.n	8001180 <__cmpsf2+0x58>
 8001174:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001178:	d1e4      	bne.n	8001144 <__cmpsf2+0x1c>
 800117a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800117e:	d0e1      	beq.n	8001144 <__cmpsf2+0x1c>
 8001180:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <__aeabi_cfrcmple>:
 8001188:	4684      	mov	ip, r0
 800118a:	4608      	mov	r0, r1
 800118c:	4661      	mov	r1, ip
 800118e:	e7ff      	b.n	8001190 <__aeabi_cfcmpeq>

08001190 <__aeabi_cfcmpeq>:
 8001190:	b50f      	push	{r0, r1, r2, r3, lr}
 8001192:	f7ff ffc9 	bl	8001128 <__cmpsf2>
 8001196:	2800      	cmp	r0, #0
 8001198:	bf48      	it	mi
 800119a:	f110 0f00 	cmnmi.w	r0, #0
 800119e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080011a0 <__aeabi_fcmpeq>:
 80011a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011a4:	f7ff fff4 	bl	8001190 <__aeabi_cfcmpeq>
 80011a8:	bf0c      	ite	eq
 80011aa:	2001      	moveq	r0, #1
 80011ac:	2000      	movne	r0, #0
 80011ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80011b2:	bf00      	nop

080011b4 <__aeabi_fcmplt>:
 80011b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b8:	f7ff ffea 	bl	8001190 <__aeabi_cfcmpeq>
 80011bc:	bf34      	ite	cc
 80011be:	2001      	movcc	r0, #1
 80011c0:	2000      	movcs	r0, #0
 80011c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011c6:	bf00      	nop

080011c8 <__aeabi_fcmple>:
 80011c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011cc:	f7ff ffe0 	bl	8001190 <__aeabi_cfcmpeq>
 80011d0:	bf94      	ite	ls
 80011d2:	2001      	movls	r0, #1
 80011d4:	2000      	movhi	r0, #0
 80011d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011da:	bf00      	nop

080011dc <__aeabi_fcmpge>:
 80011dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011e0:	f7ff ffd2 	bl	8001188 <__aeabi_cfrcmple>
 80011e4:	bf94      	ite	ls
 80011e6:	2001      	movls	r0, #1
 80011e8:	2000      	movhi	r0, #0
 80011ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ee:	bf00      	nop

080011f0 <__aeabi_fcmpgt>:
 80011f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011f4:	f7ff ffc8 	bl	8001188 <__aeabi_cfrcmple>
 80011f8:	bf34      	ite	cc
 80011fa:	2001      	movcc	r0, #1
 80011fc:	2000      	movcs	r0, #0
 80011fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001202:	bf00      	nop

08001204 <__aeabi_fcmpun>:
 8001204:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001208:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800120c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001210:	d102      	bne.n	8001218 <__aeabi_fcmpun+0x14>
 8001212:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001216:	d108      	bne.n	800122a <__aeabi_fcmpun+0x26>
 8001218:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800121c:	d102      	bne.n	8001224 <__aeabi_fcmpun+0x20>
 800121e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001222:	d102      	bne.n	800122a <__aeabi_fcmpun+0x26>
 8001224:	f04f 0000 	mov.w	r0, #0
 8001228:	4770      	bx	lr
 800122a:	f04f 0001 	mov.w	r0, #1
 800122e:	4770      	bx	lr

08001230 <__aeabi_d2lz>:
 8001230:	b538      	push	{r3, r4, r5, lr}
 8001232:	2200      	movs	r2, #0
 8001234:	2300      	movs	r3, #0
 8001236:	4604      	mov	r4, r0
 8001238:	460d      	mov	r5, r1
 800123a:	f7ff fc39 	bl	8000ab0 <__aeabi_dcmplt>
 800123e:	b928      	cbnz	r0, 800124c <__aeabi_d2lz+0x1c>
 8001240:	4620      	mov	r0, r4
 8001242:	4629      	mov	r1, r5
 8001244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001248:	f000 b80a 	b.w	8001260 <__aeabi_d2ulz>
 800124c:	4620      	mov	r0, r4
 800124e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001252:	f000 f805 	bl	8001260 <__aeabi_d2ulz>
 8001256:	4240      	negs	r0, r0
 8001258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800125c:	bd38      	pop	{r3, r4, r5, pc}
 800125e:	bf00      	nop

08001260 <__aeabi_d2ulz>:
 8001260:	b5d0      	push	{r4, r6, r7, lr}
 8001262:	2200      	movs	r2, #0
 8001264:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <__aeabi_d2ulz+0x34>)
 8001266:	4606      	mov	r6, r0
 8001268:	460f      	mov	r7, r1
 800126a:	f7ff f9af 	bl	80005cc <__aeabi_dmul>
 800126e:	f7ff fc85 	bl	8000b7c <__aeabi_d2uiz>
 8001272:	4604      	mov	r4, r0
 8001274:	f7ff f930 	bl	80004d8 <__aeabi_ui2d>
 8001278:	2200      	movs	r2, #0
 800127a:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <__aeabi_d2ulz+0x38>)
 800127c:	f7ff f9a6 	bl	80005cc <__aeabi_dmul>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4630      	mov	r0, r6
 8001286:	4639      	mov	r1, r7
 8001288:	f7fe ffe8 	bl	800025c <__aeabi_dsub>
 800128c:	f7ff fc76 	bl	8000b7c <__aeabi_d2uiz>
 8001290:	4621      	mov	r1, r4
 8001292:	bdd0      	pop	{r4, r6, r7, pc}
 8001294:	3df00000 	.word	0x3df00000
 8001298:	41f00000 	.word	0x41f00000

0800129c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80012a0:	4b17      	ldr	r3, [pc, #92]	@ (8001300 <MX_CAN_Init+0x64>)
 80012a2:	4a18      	ldr	r2, [pc, #96]	@ (8001304 <MX_CAN_Init+0x68>)
 80012a4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 80012a6:	4b16      	ldr	r3, [pc, #88]	@ (8001300 <MX_CAN_Init+0x64>)
 80012a8:	2208      	movs	r2, #8
 80012aa:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80012ac:	4b14      	ldr	r3, [pc, #80]	@ (8001300 <MX_CAN_Init+0x64>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012b2:	4b13      	ldr	r3, [pc, #76]	@ (8001300 <MX_CAN_Init+0x64>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 80012b8:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <MX_CAN_Init+0x64>)
 80012ba:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80012be:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001300 <MX_CAN_Init+0x64>)
 80012c2:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80012c6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80012c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001300 <MX_CAN_Init+0x64>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80012ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <MX_CAN_Init+0x64>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80012d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001300 <MX_CAN_Init+0x64>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <MX_CAN_Init+0x64>)
 80012dc:	2200      	movs	r2, #0
 80012de:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80012e0:	4b07      	ldr	r3, [pc, #28]	@ (8001300 <MX_CAN_Init+0x64>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80012e6:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <MX_CAN_Init+0x64>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80012ec:	4804      	ldr	r0, [pc, #16]	@ (8001300 <MX_CAN_Init+0x64>)
 80012ee:	f003 fa1b 	bl	8004728 <HAL_CAN_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80012f8:	f001 ff34 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000354 	.word	0x20000354
 8001304:	40006400 	.word	0x40006400

08001308 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	@ 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a29      	ldr	r2, [pc, #164]	@ (80013c8 <HAL_CAN_MspInit+0xc0>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d14b      	bne.n	80013c0 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001328:	4b28      	ldr	r3, [pc, #160]	@ (80013cc <HAL_CAN_MspInit+0xc4>)
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	4a27      	ldr	r2, [pc, #156]	@ (80013cc <HAL_CAN_MspInit+0xc4>)
 800132e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001332:	61d3      	str	r3, [r2, #28]
 8001334:	4b25      	ldr	r3, [pc, #148]	@ (80013cc <HAL_CAN_MspInit+0xc4>)
 8001336:	69db      	ldr	r3, [r3, #28]
 8001338:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001340:	4b22      	ldr	r3, [pc, #136]	@ (80013cc <HAL_CAN_MspInit+0xc4>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a21      	ldr	r2, [pc, #132]	@ (80013cc <HAL_CAN_MspInit+0xc4>)
 8001346:	f043 0308 	orr.w	r3, r3, #8
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b1f      	ldr	r3, [pc, #124]	@ (80013cc <HAL_CAN_MspInit+0xc4>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0308 	and.w	r3, r3, #8
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001358:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800135c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	4818      	ldr	r0, [pc, #96]	@ (80013d0 <HAL_CAN_MspInit+0xc8>)
 800136e:	f004 f8fb 	bl	8005568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001372:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800137c:	2303      	movs	r3, #3
 800137e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	4812      	ldr	r0, [pc, #72]	@ (80013d0 <HAL_CAN_MspInit+0xc8>)
 8001388:	f004 f8ee 	bl	8005568 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800138c:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <HAL_CAN_MspInit+0xcc>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
 8001392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001394:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24
 800139a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80013a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80013aa:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <HAL_CAN_MspInit+0xcc>)
 80013ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ae:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2105      	movs	r1, #5
 80013b4:	2014      	movs	r0, #20
 80013b6:	f004 f8ac 	bl	8005512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80013ba:	2014      	movs	r0, #20
 80013bc:	f004 f8c5 	bl	800554a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80013c0:	bf00      	nop
 80013c2:	3728      	adds	r7, #40	@ 0x28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40006400 	.word	0x40006400
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40010c00 	.word	0x40010c00
 80013d4:	40010000 	.word	0x40010000

080013d8 <CanFilterSetup>:
}

/* USER CODE BEGIN 1 */

void CanFilterSetup(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* TODO: Review Filter Implementation */
  // Use mask and list mode to filter IDs from the CAN ID BOM

  // Filter for 0x500 and 0x600 IDs
  CAN_filter0.FilterIdHigh = 0x0000;
 80013dc:	4b10      	ldr	r3, [pc, #64]	@ (8001420 <CanFilterSetup+0x48>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
  CAN_filter0.FilterMaskIdHigh = 0x0000;
 80013e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <CanFilterSetup+0x48>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]

  CAN_filter0.FilterIdLow = 0x0000;
 80013e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001420 <CanFilterSetup+0x48>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	605a      	str	r2, [r3, #4]
  CAN_filter0.FilterMaskIdLow = 0x0000;
 80013ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <CanFilterSetup+0x48>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]

  CAN_filter0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80013f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <CanFilterSetup+0x48>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
  CAN_filter0.FilterBank = (uint32_t) 0;
 80013fa:	4b09      	ldr	r3, [pc, #36]	@ (8001420 <CanFilterSetup+0x48>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	615a      	str	r2, [r3, #20]
  CAN_filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 8001400:	4b07      	ldr	r3, [pc, #28]	@ (8001420 <CanFilterSetup+0x48>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]
  CAN_filter0.FilterScale = CAN_FILTERSCALE_16BIT;
 8001406:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <CanFilterSetup+0x48>)
 8001408:	2200      	movs	r2, #0
 800140a:	61da      	str	r2, [r3, #28]
  CAN_filter0.FilterActivation = CAN_FILTER_ENABLE;
 800140c:	4b04      	ldr	r3, [pc, #16]	@ (8001420 <CanFilterSetup+0x48>)
 800140e:	2201      	movs	r2, #1
 8001410:	621a      	str	r2, [r3, #32]

  // Configure reception filters
  HAL_CAN_ConfigFilter(&hcan, &CAN_filter0);
 8001412:	4903      	ldr	r1, [pc, #12]	@ (8001420 <CanFilterSetup+0x48>)
 8001414:	4803      	ldr	r0, [pc, #12]	@ (8001424 <CanFilterSetup+0x4c>)
 8001416:	f003 fa82 	bl	800491e <HAL_CAN_ConfigFilter>
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	2000070c 	.word	0x2000070c
 8001424:	20000354 	.word	0x20000354

08001428 <Can_Init>:

/*
 * CAN set-up: Sets up the filters, Starts CAN with HAL, and Activates notifications for interrupts.
 */
void Can_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
  CanFilterSetup();
 800142e:	f7ff ffd3 	bl	80013d8 <CanFilterSetup>
  can_start = HAL_CAN_Start(&hcan);
 8001432:	4808      	ldr	r0, [pc, #32]	@ (8001454 <Can_Init+0x2c>)
 8001434:	f003 fb3c 	bl	8004ab0 <HAL_CAN_Start>
 8001438:	4603      	mov	r3, r0
 800143a:	461a      	mov	r2, r3
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <Can_Init+0x30>)
 800143e:	701a      	strb	r2, [r3, #0]
  assert_param(can_start == HAL_OK);

  HAL_StatusTypeDef can_notification_status = HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001440:	2102      	movs	r1, #2
 8001442:	4804      	ldr	r0, [pc, #16]	@ (8001454 <Can_Init+0x2c>)
 8001444:	f003 fd68 	bl	8004f18 <HAL_CAN_ActivateNotification>
 8001448:	4603      	mov	r3, r0
 800144a:	71fb      	strb	r3, [r7, #7]
  assert_param(can_notification_status == HAL_OK);

  /* To avoid warning of unused variable */
  (void) can_notification_status;
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000354 	.word	0x20000354
 8001458:	2000034c 	.word	0x2000034c

0800145c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800145c:	b5b0      	push	{r4, r5, r7, lr}
 800145e:	b08e      	sub	sp, #56	@ 0x38
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint8_t can_data[8];


  /* Get CAN message */
//  while(HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO0) != 0) {
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_data);  // TODO: Put can_rx_header and can_data into a data structure able to be accessed in the freertos task
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	f107 0214 	add.w	r2, r7, #20
 800146c:	2100      	movs	r1, #0
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f003 fc31 	bl	8004cd6 <HAL_CAN_GetRxMessage>
  //  printf("%d\n\r", HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO0));
    /* Put CAN message in the Queue */
    CAN_msg_t *new_CAN_msg;
    new_CAN_msg = osPoolAlloc(CAN_MSG_memory_pool);
 8001474:	4b1e      	ldr	r3, [pc, #120]	@ (80014f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f008 fd30 	bl	8009ede <osPoolAlloc>
 800147e:	6338      	str	r0, [r7, #48]	@ 0x30
    new_CAN_msg->header = can_rx_header;
 8001480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001482:	461d      	mov	r5, r3
 8001484:	f107 0414 	add.w	r4, r7, #20
 8001488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800148a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800148c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001490:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    for(int i = 0; i < 8; i++) {
 8001494:	2300      	movs	r3, #0
 8001496:	637b      	str	r3, [r7, #52]	@ 0x34
 8001498:	e00d      	b.n	80014b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
      new_CAN_msg->data[i] = can_data[i];
 800149a:	f107 020c 	add.w	r2, r7, #12
 800149e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014a0:	4413      	add	r3, r2
 80014a2:	7819      	ldrb	r1, [r3, #0]
 80014a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80014a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014a8:	4413      	add	r3, r2
 80014aa:	331c      	adds	r3, #28
 80014ac:	460a      	mov	r2, r1
 80014ae:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 8; i++) {
 80014b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014b2:	3301      	adds	r3, #1
 80014b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80014b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014b8:	2b07      	cmp	r3, #7
 80014ba:	ddee      	ble.n	800149a <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
    }
    new_CAN_msg->timestamp.double_value = get_current_timestamp();
 80014bc:	f002 fd7a 	bl	8003fb4 <get_current_timestamp>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80014c6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    osMessagePut(CAN_MSG_Rx_Queue, new_CAN_msg, osWaitForever);
 80014ca:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014d2:	f04f 32ff 	mov.w	r2, #4294967295
 80014d6:	4619      	mov	r1, r3
 80014d8:	f008 fdcc 	bl	800a074 <osMessagePut>
//  }

  /* Set the Flag to CAN_READY */
  osSignalSet(readCANTaskHandle, CAN_READY);
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2101      	movs	r1, #1
 80014e2:	4618      	mov	r0, r3
 80014e4:	f008 fc12 	bl	8009d0c <osSignalSet>

  /* To avoid warning of unused variable */
  //(void) status;
}
 80014e8:	bf00      	nop
 80014ea:	3738      	adds	r7, #56	@ 0x38
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bdb0      	pop	{r4, r5, r7, pc}
 80014f0:	2000038c 	.word	0x2000038c
 80014f4:	20000390 	.word	0x20000390
 80014f8:	20000398 	.word	0x20000398

080014fc <DebugIO_Init>:
 * Configure a UART peripheral assignment for printf debugging
 *
 * @param huart HAL handle for the UART to use for printf debugging
*/
void DebugIO_Init(UART_HandleTypeDef *huart)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
    io_huart = huart;
 8001504:	4a03      	ldr	r2, [pc, #12]	@ (8001514 <DebugIO_Init+0x18>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6013      	str	r3, [r2, #0]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	2000037c 	.word	0x2000037c

08001518 <__io_putchar>:

// Configure where printf() and putchar() output goes
int __io_putchar(int ch)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
#ifdef USE_UART
    // Output on UART
    HAL_UART_Transmit(io_huart, (uint8_t *)&ch, 1, 0xFFFF);
 8001520:	4b06      	ldr	r3, [pc, #24]	@ (800153c <__io_putchar+0x24>)
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	1d39      	adds	r1, r7, #4
 8001526:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800152a:	2201      	movs	r2, #1
 800152c:	f008 f91a 	bl	8009764 <HAL_UART_Transmit>
#ifdef USE_SWO
    // Output on Serial Wire Output (SWO)
    ITM_SendChar(ch);
#endif // USE_SWO

    return ch;
 8001530:	687b      	ldr	r3, [r7, #4]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	2000037c 	.word	0x2000037c

08001540 <__io_getchar>:

int __io_getchar()
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
    // Implement if needed
    return 0;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr

0800154e <_read>:

#ifdef NO_SYSCALL
int _read(int file, char *ptr, int len)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	e00a      	b.n	8001576 <_read+0x28>
    {
        *ptr++ = __io_getchar();
 8001560:	f7ff ffee 	bl	8001540 <__io_getchar>
 8001564:	4601      	mov	r1, r0
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	1c5a      	adds	r2, r3, #1
 800156a:	60ba      	str	r2, [r7, #8]
 800156c:	b2ca      	uxtb	r2, r1
 800156e:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	3301      	adds	r3, #1
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	429a      	cmp	r2, r3
 800157c:	dbf0      	blt.n	8001560 <_read+0x12>
    }

    return len;
 800157e:	687b      	ldr	r3, [r7, #4]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <_write>:

int _write(int file, char *ptr, int len)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	e009      	b.n	80015ae <_write+0x26>
    {
        __io_putchar(*ptr++);
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	1c5a      	adds	r2, r3, #1
 800159e:	60ba      	str	r2, [r7, #8]
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ffb8 	bl	8001518 <__io_putchar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	3301      	adds	r3, #1
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	dbf1      	blt.n	800159a <_write+0x12>
    }
    return len;
 80015b6:	687b      	ldr	r3, [r7, #4]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2140      	movs	r1, #64	@ 0x40
 80015c8:	4803      	ldr	r0, [pc, #12]	@ (80015d8 <SELECT+0x18>)
 80015ca:	f004 f978 	bl	80058be <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015ce:	2001      	movs	r0, #1
 80015d0:	f003 f886 	bl	80046e0 <HAL_Delay>
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40010c00 	.word	0x40010c00

080015dc <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80015e0:	2201      	movs	r2, #1
 80015e2:	2140      	movs	r1, #64	@ 0x40
 80015e4:	4803      	ldr	r0, [pc, #12]	@ (80015f4 <DESELECT+0x18>)
 80015e6:	f004 f96a 	bl	80058be <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015ea:	2001      	movs	r0, #1
 80015ec:	f003 f878 	bl	80046e0 <HAL_Delay>
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40010c00 	.word	0x40010c00

080015f8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001602:	bf00      	nop
 8001604:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <SPI_TxByte+0x30>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b02      	cmp	r3, #2
 8001610:	d1f8      	bne.n	8001604 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001612:	1df9      	adds	r1, r7, #7
 8001614:	2364      	movs	r3, #100	@ 0x64
 8001616:	2201      	movs	r2, #1
 8001618:	4803      	ldr	r0, [pc, #12]	@ (8001628 <SPI_TxByte+0x30>)
 800161a:	f007 fa49 	bl	8008ab0 <HAL_SPI_Transmit>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000784 	.word	0x20000784

0800162c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001638:	bf00      	nop
 800163a:	4b08      	ldr	r3, [pc, #32]	@ (800165c <SPI_TxBuffer+0x30>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b02      	cmp	r3, #2
 8001646:	d1f8      	bne.n	800163a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001648:	887a      	ldrh	r2, [r7, #2]
 800164a:	2364      	movs	r3, #100	@ 0x64
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	4803      	ldr	r0, [pc, #12]	@ (800165c <SPI_TxBuffer+0x30>)
 8001650:	f007 fa2e 	bl	8008ab0 <HAL_SPI_Transmit>
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000784 	.word	0x20000784

08001660 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001666:	23ff      	movs	r3, #255	@ 0xff
 8001668:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800166a:	bf00      	nop
 800166c:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <SPI_RxByte+0x34>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b02      	cmp	r3, #2
 8001678:	d1f8      	bne.n	800166c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800167a:	1dba      	adds	r2, r7, #6
 800167c:	1df9      	adds	r1, r7, #7
 800167e:	2364      	movs	r3, #100	@ 0x64
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	2301      	movs	r3, #1
 8001684:	4803      	ldr	r0, [pc, #12]	@ (8001694 <SPI_RxByte+0x34>)
 8001686:	f007 fb56 	bl	8008d36 <HAL_SPI_TransmitReceive>

	return data;
 800168a:	79bb      	ldrb	r3, [r7, #6]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000784 	.word	0x20000784

08001698 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80016a0:	f7ff ffde 	bl	8001660 <SPI_RxByte>
 80016a4:	4603      	mov	r3, r0
 80016a6:	461a      	mov	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	701a      	strb	r2, [r3, #0]
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80016ba:	4b0a      	ldr	r3, [pc, #40]	@ (80016e4 <SD_ReadyWait+0x30>)
 80016bc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80016c0:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80016c2:	f7ff ffcd 	bl	8001660 <SPI_RxByte>
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	2bff      	cmp	r3, #255	@ 0xff
 80016ce:	d003      	beq.n	80016d8 <SD_ReadyWait+0x24>
 80016d0:	4b04      	ldr	r3, [pc, #16]	@ (80016e4 <SD_ReadyWait+0x30>)
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1f4      	bne.n	80016c2 <SD_ReadyWait+0xe>

	return res;
 80016d8:	79fb      	ldrb	r3, [r7, #7]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000382 	.word	0x20000382

080016e8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80016ee:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80016f2:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80016f4:	f7ff ff72 	bl	80015dc <DESELECT>
	for(int i = 0; i < 10; i++)
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	e005      	b.n	800170a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80016fe:	20ff      	movs	r0, #255	@ 0xff
 8001700:	f7ff ff7a 	bl	80015f8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	3301      	adds	r3, #1
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	2b09      	cmp	r3, #9
 800170e:	ddf6      	ble.n	80016fe <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001710:	f7ff ff56 	bl	80015c0 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001714:	2340      	movs	r3, #64	@ 0x40
 8001716:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001728:	2395      	movs	r3, #149	@ 0x95
 800172a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800172c:	463b      	mov	r3, r7
 800172e:	2106      	movs	r1, #6
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff7b 	bl	800162c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001736:	e002      	b.n	800173e <SD_PowerOn+0x56>
	{
		cnt--;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	3b01      	subs	r3, #1
 800173c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800173e:	f7ff ff8f 	bl	8001660 <SPI_RxByte>
 8001742:	4603      	mov	r3, r0
 8001744:	2b01      	cmp	r3, #1
 8001746:	d002      	beq.n	800174e <SD_PowerOn+0x66>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f4      	bne.n	8001738 <SD_PowerOn+0x50>
	}

	DESELECT();
 800174e:	f7ff ff45 	bl	80015dc <DESELECT>
	SPI_TxByte(0XFF);
 8001752:	20ff      	movs	r0, #255	@ 0xff
 8001754:	f7ff ff50 	bl	80015f8 <SPI_TxByte>

	PowerFlag = 1;
 8001758:	4b03      	ldr	r3, [pc, #12]	@ (8001768 <SD_PowerOn+0x80>)
 800175a:	2201      	movs	r2, #1
 800175c:	701a      	strb	r2, [r3, #0]
}
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000385 	.word	0x20000385

0800176c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001770:	4b03      	ldr	r3, [pc, #12]	@ (8001780 <SD_PowerOff+0x14>)
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20000385 	.word	0x20000385

08001784 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001788:	4b02      	ldr	r3, [pc, #8]	@ (8001794 <SD_CheckPower+0x10>)
 800178a:	781b      	ldrb	r3, [r3, #0]
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	20000385 	.word	0x20000385

08001798 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80017a2:	4b13      	ldr	r3, [pc, #76]	@ (80017f0 <SD_RxDataBlock+0x58>)
 80017a4:	22c8      	movs	r2, #200	@ 0xc8
 80017a6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80017a8:	f7ff ff5a 	bl	8001660 <SPI_RxByte>
 80017ac:	4603      	mov	r3, r0
 80017ae:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	2bff      	cmp	r3, #255	@ 0xff
 80017b4:	d103      	bne.n	80017be <SD_RxDataBlock+0x26>
 80017b6:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <SD_RxDataBlock+0x58>)
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f4      	bne.n	80017a8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	2bfe      	cmp	r3, #254	@ 0xfe
 80017c2:	d001      	beq.n	80017c8 <SD_RxDataBlock+0x30>
 80017c4:	2300      	movs	r3, #0
 80017c6:	e00f      	b.n	80017e8 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	1c5a      	adds	r2, r3, #1
 80017cc:	607a      	str	r2, [r7, #4]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff ff62 	bl	8001698 <SPI_RxBytePtr>
	} while(len--);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	1e5a      	subs	r2, r3, #1
 80017d8:	603a      	str	r2, [r7, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f4      	bne.n	80017c8 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80017de:	f7ff ff3f 	bl	8001660 <SPI_RxByte>
	SPI_RxByte();
 80017e2:	f7ff ff3d 	bl	8001660 <SPI_RxByte>

	return TRUE;
 80017e6:	2301      	movs	r3, #1
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000380 	.word	0x20000380

080017f4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001804:	f7ff ff56 	bl	80016b4 <SD_ReadyWait>
 8001808:	4603      	mov	r3, r0
 800180a:	2bff      	cmp	r3, #255	@ 0xff
 800180c:	d001      	beq.n	8001812 <SD_TxDataBlock+0x1e>
 800180e:	2300      	movs	r3, #0
 8001810:	e02f      	b.n	8001872 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001812:	78fb      	ldrb	r3, [r7, #3]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff feef 	bl	80015f8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	2bfd      	cmp	r3, #253	@ 0xfd
 800181e:	d020      	beq.n	8001862 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001820:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ff01 	bl	800162c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800182a:	f7ff ff19 	bl	8001660 <SPI_RxByte>
		SPI_RxByte();
 800182e:	f7ff ff17 	bl	8001660 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001832:	e00b      	b.n	800184c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001834:	f7ff ff14 	bl	8001660 <SPI_RxByte>
 8001838:	4603      	mov	r3, r0
 800183a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	f003 031f 	and.w	r3, r3, #31
 8001842:	2b05      	cmp	r3, #5
 8001844:	d006      	beq.n	8001854 <SD_TxDataBlock+0x60>
			i++;
 8001846:	7bbb      	ldrb	r3, [r7, #14]
 8001848:	3301      	adds	r3, #1
 800184a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800184c:	7bbb      	ldrb	r3, [r7, #14]
 800184e:	2b40      	cmp	r3, #64	@ 0x40
 8001850:	d9f0      	bls.n	8001834 <SD_TxDataBlock+0x40>
 8001852:	e000      	b.n	8001856 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001854:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001856:	bf00      	nop
 8001858:	f7ff ff02 	bl	8001660 <SPI_RxByte>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0fa      	beq.n	8001858 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001862:	7bfb      	ldrb	r3, [r7, #15]
 8001864:	f003 031f 	and.w	r3, r3, #31
 8001868:	2b05      	cmp	r3, #5
 800186a:	d101      	bne.n	8001870 <SD_TxDataBlock+0x7c>
 800186c:	2301      	movs	r3, #1
 800186e:	e000      	b.n	8001872 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b084      	sub	sp, #16
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	6039      	str	r1, [r7, #0]
 8001884:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001886:	f7ff ff15 	bl	80016b4 <SD_ReadyWait>
 800188a:	4603      	mov	r3, r0
 800188c:	2bff      	cmp	r3, #255	@ 0xff
 800188e:	d001      	beq.n	8001894 <SD_SendCmd+0x1a>
 8001890:	23ff      	movs	r3, #255	@ 0xff
 8001892:	e042      	b.n	800191a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff feae 	bl	80015f8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	0e1b      	lsrs	r3, r3, #24
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fea8 	bl	80015f8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	0c1b      	lsrs	r3, r3, #16
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fea2 	bl	80015f8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	0a1b      	lsrs	r3, r3, #8
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fe9c 	bl	80015f8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fe97 	bl	80015f8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	2b40      	cmp	r3, #64	@ 0x40
 80018ce:	d102      	bne.n	80018d6 <SD_SendCmd+0x5c>
 80018d0:	2395      	movs	r3, #149	@ 0x95
 80018d2:	73fb      	strb	r3, [r7, #15]
 80018d4:	e007      	b.n	80018e6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	2b48      	cmp	r3, #72	@ 0x48
 80018da:	d102      	bne.n	80018e2 <SD_SendCmd+0x68>
 80018dc:	2387      	movs	r3, #135	@ 0x87
 80018de:	73fb      	strb	r3, [r7, #15]
 80018e0:	e001      	b.n	80018e6 <SD_SendCmd+0x6c>
	else crc = 1;
 80018e2:	2301      	movs	r3, #1
 80018e4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fe85 	bl	80015f8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	2b4c      	cmp	r3, #76	@ 0x4c
 80018f2:	d101      	bne.n	80018f8 <SD_SendCmd+0x7e>
 80018f4:	f7ff feb4 	bl	8001660 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80018f8:	230a      	movs	r3, #10
 80018fa:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80018fc:	f7ff feb0 	bl	8001660 <SPI_RxByte>
 8001900:	4603      	mov	r3, r0
 8001902:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001904:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001908:	2b00      	cmp	r3, #0
 800190a:	da05      	bge.n	8001918 <SD_SendCmd+0x9e>
 800190c:	7bbb      	ldrb	r3, [r7, #14]
 800190e:	3b01      	subs	r3, #1
 8001910:	73bb      	strb	r3, [r7, #14]
 8001912:	7bbb      	ldrb	r3, [r7, #14]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f1      	bne.n	80018fc <SD_SendCmd+0x82>

	return res;
 8001918:	7b7b      	ldrb	r3, [r7, #13]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <SD_disk_initialize+0x14>
 8001934:	2301      	movs	r3, #1
 8001936:	e0d1      	b.n	8001adc <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001938:	4b6a      	ldr	r3, [pc, #424]	@ (8001ae4 <SD_disk_initialize+0x1c0>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <SD_disk_initialize+0x2a>
 8001946:	4b67      	ldr	r3, [pc, #412]	@ (8001ae4 <SD_disk_initialize+0x1c0>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	e0c6      	b.n	8001adc <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800194e:	f7ff fecb 	bl	80016e8 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001952:	f7ff fe35 	bl	80015c0 <SELECT>

	/* check disk type */
	type = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800195a:	2100      	movs	r1, #0
 800195c:	2040      	movs	r0, #64	@ 0x40
 800195e:	f7ff ff8c 	bl	800187a <SD_SendCmd>
 8001962:	4603      	mov	r3, r0
 8001964:	2b01      	cmp	r3, #1
 8001966:	f040 80a1 	bne.w	8001aac <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800196a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ae8 <SD_disk_initialize+0x1c4>)
 800196c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001970:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001972:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001976:	2048      	movs	r0, #72	@ 0x48
 8001978:	f7ff ff7f 	bl	800187a <SD_SendCmd>
 800197c:	4603      	mov	r3, r0
 800197e:	2b01      	cmp	r3, #1
 8001980:	d155      	bne.n	8001a2e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001982:	2300      	movs	r3, #0
 8001984:	73fb      	strb	r3, [r7, #15]
 8001986:	e00c      	b.n	80019a2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001988:	7bfc      	ldrb	r4, [r7, #15]
 800198a:	f7ff fe69 	bl	8001660 <SPI_RxByte>
 800198e:	4603      	mov	r3, r0
 8001990:	461a      	mov	r2, r3
 8001992:	f104 0310 	add.w	r3, r4, #16
 8001996:	443b      	add	r3, r7
 8001998:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	3301      	adds	r3, #1
 80019a0:	73fb      	strb	r3, [r7, #15]
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	d9ef      	bls.n	8001988 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80019a8:	7abb      	ldrb	r3, [r7, #10]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d17e      	bne.n	8001aac <SD_disk_initialize+0x188>
 80019ae:	7afb      	ldrb	r3, [r7, #11]
 80019b0:	2baa      	cmp	r3, #170	@ 0xaa
 80019b2:	d17b      	bne.n	8001aac <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80019b4:	2100      	movs	r1, #0
 80019b6:	2077      	movs	r0, #119	@ 0x77
 80019b8:	f7ff ff5f 	bl	800187a <SD_SendCmd>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d807      	bhi.n	80019d2 <SD_disk_initialize+0xae>
 80019c2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80019c6:	2069      	movs	r0, #105	@ 0x69
 80019c8:	f7ff ff57 	bl	800187a <SD_SendCmd>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d004      	beq.n	80019dc <SD_disk_initialize+0xb8>
				} while (Timer1);
 80019d2:	4b45      	ldr	r3, [pc, #276]	@ (8001ae8 <SD_disk_initialize+0x1c4>)
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1ec      	bne.n	80019b4 <SD_disk_initialize+0x90>
 80019da:	e000      	b.n	80019de <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80019dc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80019de:	4b42      	ldr	r3, [pc, #264]	@ (8001ae8 <SD_disk_initialize+0x1c4>)
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d062      	beq.n	8001aac <SD_disk_initialize+0x188>
 80019e6:	2100      	movs	r1, #0
 80019e8:	207a      	movs	r0, #122	@ 0x7a
 80019ea:	f7ff ff46 	bl	800187a <SD_SendCmd>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d15b      	bne.n	8001aac <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80019f4:	2300      	movs	r3, #0
 80019f6:	73fb      	strb	r3, [r7, #15]
 80019f8:	e00c      	b.n	8001a14 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80019fa:	7bfc      	ldrb	r4, [r7, #15]
 80019fc:	f7ff fe30 	bl	8001660 <SPI_RxByte>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461a      	mov	r2, r3
 8001a04:	f104 0310 	add.w	r3, r4, #16
 8001a08:	443b      	add	r3, r7
 8001a0a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	3301      	adds	r3, #1
 8001a12:	73fb      	strb	r3, [r7, #15]
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	2b03      	cmp	r3, #3
 8001a18:	d9ef      	bls.n	80019fa <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001a1a:	7a3b      	ldrb	r3, [r7, #8]
 8001a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <SD_disk_initialize+0x104>
 8001a24:	230c      	movs	r3, #12
 8001a26:	e000      	b.n	8001a2a <SD_disk_initialize+0x106>
 8001a28:	2304      	movs	r3, #4
 8001a2a:	73bb      	strb	r3, [r7, #14]
 8001a2c:	e03e      	b.n	8001aac <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001a2e:	2100      	movs	r1, #0
 8001a30:	2077      	movs	r0, #119	@ 0x77
 8001a32:	f7ff ff22 	bl	800187a <SD_SendCmd>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d808      	bhi.n	8001a4e <SD_disk_initialize+0x12a>
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	2069      	movs	r0, #105	@ 0x69
 8001a40:	f7ff ff1b 	bl	800187a <SD_SendCmd>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d801      	bhi.n	8001a4e <SD_disk_initialize+0x12a>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e000      	b.n	8001a50 <SD_disk_initialize+0x12c>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001a52:	7bbb      	ldrb	r3, [r7, #14]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d10e      	bne.n	8001a76 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001a58:	2100      	movs	r1, #0
 8001a5a:	2077      	movs	r0, #119	@ 0x77
 8001a5c:	f7ff ff0d 	bl	800187a <SD_SendCmd>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d80e      	bhi.n	8001a84 <SD_disk_initialize+0x160>
 8001a66:	2100      	movs	r1, #0
 8001a68:	2069      	movs	r0, #105	@ 0x69
 8001a6a:	f7ff ff06 	bl	800187a <SD_SendCmd>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d107      	bne.n	8001a84 <SD_disk_initialize+0x160>
 8001a74:	e00c      	b.n	8001a90 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001a76:	2100      	movs	r1, #0
 8001a78:	2041      	movs	r0, #65	@ 0x41
 8001a7a:	f7ff fefe 	bl	800187a <SD_SendCmd>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d004      	beq.n	8001a8e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001a84:	4b18      	ldr	r3, [pc, #96]	@ (8001ae8 <SD_disk_initialize+0x1c4>)
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1e2      	bne.n	8001a52 <SD_disk_initialize+0x12e>
 8001a8c:	e000      	b.n	8001a90 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001a8e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001a90:	4b15      	ldr	r3, [pc, #84]	@ (8001ae8 <SD_disk_initialize+0x1c4>)
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d007      	beq.n	8001aa8 <SD_disk_initialize+0x184>
 8001a98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a9c:	2050      	movs	r0, #80	@ 0x50
 8001a9e:	f7ff feec 	bl	800187a <SD_SendCmd>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <SD_disk_initialize+0x188>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001aac:	4a0f      	ldr	r2, [pc, #60]	@ (8001aec <SD_disk_initialize+0x1c8>)
 8001aae:	7bbb      	ldrb	r3, [r7, #14]
 8001ab0:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001ab2:	f7ff fd93 	bl	80015dc <DESELECT>
	SPI_RxByte();
 8001ab6:	f7ff fdd3 	bl	8001660 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001aba:	7bbb      	ldrb	r3, [r7, #14]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d008      	beq.n	8001ad2 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001ac0:	4b08      	ldr	r3, [pc, #32]	@ (8001ae4 <SD_disk_initialize+0x1c0>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	f023 0301 	bic.w	r3, r3, #1
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	4b05      	ldr	r3, [pc, #20]	@ (8001ae4 <SD_disk_initialize+0x1c0>)
 8001ace:	701a      	strb	r2, [r3, #0]
 8001ad0:	e001      	b.n	8001ad6 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001ad2:	f7ff fe4b 	bl	800176c <SD_PowerOff>
	}

	return Stat;
 8001ad6:	4b03      	ldr	r3, [pc, #12]	@ (8001ae4 <SD_disk_initialize+0x1c0>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	b2db      	uxtb	r3, r3
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd90      	pop	{r4, r7, pc}
 8001ae4:	200000d8 	.word	0x200000d8
 8001ae8:	20000380 	.word	0x20000380
 8001aec:	20000384 	.word	0x20000384

08001af0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <SD_disk_status+0x14>
 8001b00:	2301      	movs	r3, #1
 8001b02:	e002      	b.n	8001b0a <SD_disk_status+0x1a>
	return Stat;
 8001b04:	4b03      	ldr	r3, [pc, #12]	@ (8001b14 <SD_disk_status+0x24>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	b2db      	uxtb	r3, r3
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	200000d8 	.word	0x200000d8

08001b18 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	4603      	mov	r3, r0
 8001b26:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d102      	bne.n	8001b34 <SD_disk_read+0x1c>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <SD_disk_read+0x20>
 8001b34:	2304      	movs	r3, #4
 8001b36:	e051      	b.n	8001bdc <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001b38:	4b2a      	ldr	r3, [pc, #168]	@ (8001be4 <SD_disk_read+0xcc>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <SD_disk_read+0x32>
 8001b46:	2303      	movs	r3, #3
 8001b48:	e048      	b.n	8001bdc <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001b4a:	4b27      	ldr	r3, [pc, #156]	@ (8001be8 <SD_disk_read+0xd0>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d102      	bne.n	8001b5c <SD_disk_read+0x44>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	025b      	lsls	r3, r3, #9
 8001b5a:	607b      	str	r3, [r7, #4]

	SELECT();
 8001b5c:	f7ff fd30 	bl	80015c0 <SELECT>

	if (count == 1)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d111      	bne.n	8001b8a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	2051      	movs	r0, #81	@ 0x51
 8001b6a:	f7ff fe86 	bl	800187a <SD_SendCmd>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d129      	bne.n	8001bc8 <SD_disk_read+0xb0>
 8001b74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b78:	68b8      	ldr	r0, [r7, #8]
 8001b7a:	f7ff fe0d 	bl	8001798 <SD_RxDataBlock>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d021      	beq.n	8001bc8 <SD_disk_read+0xb0>
 8001b84:	2300      	movs	r3, #0
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	e01e      	b.n	8001bc8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	2052      	movs	r0, #82	@ 0x52
 8001b8e:	f7ff fe74 	bl	800187a <SD_SendCmd>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d117      	bne.n	8001bc8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001b98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b9c:	68b8      	ldr	r0, [r7, #8]
 8001b9e:	f7ff fdfb 	bl	8001798 <SD_RxDataBlock>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00a      	beq.n	8001bbe <SD_disk_read+0xa6>
				buff += 512;
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001bae:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	603b      	str	r3, [r7, #0]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1ed      	bne.n	8001b98 <SD_disk_read+0x80>
 8001bbc:	e000      	b.n	8001bc0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001bbe:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	204c      	movs	r0, #76	@ 0x4c
 8001bc4:	f7ff fe59 	bl	800187a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001bc8:	f7ff fd08 	bl	80015dc <DESELECT>
	SPI_RxByte();
 8001bcc:	f7ff fd48 	bl	8001660 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	bf14      	ite	ne
 8001bd6:	2301      	movne	r3, #1
 8001bd8:	2300      	moveq	r3, #0
 8001bda:	b2db      	uxtb	r3, r3
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	200000d8 	.word	0x200000d8
 8001be8:	20000384 	.word	0x20000384

08001bec <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
 8001bf6:	603b      	str	r3, [r7, #0]
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d102      	bne.n	8001c08 <SD_disk_write+0x1c>
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <SD_disk_write+0x20>
 8001c08:	2304      	movs	r3, #4
 8001c0a:	e06b      	b.n	8001ce4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001c0c:	4b37      	ldr	r3, [pc, #220]	@ (8001cec <SD_disk_write+0x100>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <SD_disk_write+0x32>
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e062      	b.n	8001ce4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001c1e:	4b33      	ldr	r3, [pc, #204]	@ (8001cec <SD_disk_write+0x100>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <SD_disk_write+0x44>
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	e059      	b.n	8001ce4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001c30:	4b2f      	ldr	r3, [pc, #188]	@ (8001cf0 <SD_disk_write+0x104>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d102      	bne.n	8001c42 <SD_disk_write+0x56>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	025b      	lsls	r3, r3, #9
 8001c40:	607b      	str	r3, [r7, #4]

	SELECT();
 8001c42:	f7ff fcbd 	bl	80015c0 <SELECT>

	if (count == 1)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d110      	bne.n	8001c6e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	2058      	movs	r0, #88	@ 0x58
 8001c50:	f7ff fe13 	bl	800187a <SD_SendCmd>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d13a      	bne.n	8001cd0 <SD_disk_write+0xe4>
 8001c5a:	21fe      	movs	r1, #254	@ 0xfe
 8001c5c:	68b8      	ldr	r0, [r7, #8]
 8001c5e:	f7ff fdc9 	bl	80017f4 <SD_TxDataBlock>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d033      	beq.n	8001cd0 <SD_disk_write+0xe4>
			count = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	603b      	str	r3, [r7, #0]
 8001c6c:	e030      	b.n	8001cd0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001c6e:	4b20      	ldr	r3, [pc, #128]	@ (8001cf0 <SD_disk_write+0x104>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d007      	beq.n	8001c8a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	2077      	movs	r0, #119	@ 0x77
 8001c7e:	f7ff fdfc 	bl	800187a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001c82:	6839      	ldr	r1, [r7, #0]
 8001c84:	2057      	movs	r0, #87	@ 0x57
 8001c86:	f7ff fdf8 	bl	800187a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	2059      	movs	r0, #89	@ 0x59
 8001c8e:	f7ff fdf4 	bl	800187a <SD_SendCmd>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d11b      	bne.n	8001cd0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001c98:	21fc      	movs	r1, #252	@ 0xfc
 8001c9a:	68b8      	ldr	r0, [r7, #8]
 8001c9c:	f7ff fdaa 	bl	80017f4 <SD_TxDataBlock>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00a      	beq.n	8001cbc <SD_disk_write+0xd0>
				buff += 512;
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001cac:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	603b      	str	r3, [r7, #0]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1ee      	bne.n	8001c98 <SD_disk_write+0xac>
 8001cba:	e000      	b.n	8001cbe <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001cbc:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001cbe:	21fd      	movs	r1, #253	@ 0xfd
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	f7ff fd97 	bl	80017f4 <SD_TxDataBlock>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <SD_disk_write+0xe4>
			{
				count = 1;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001cd0:	f7ff fc84 	bl	80015dc <DESELECT>
	SPI_RxByte();
 8001cd4:	f7ff fcc4 	bl	8001660 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	bf14      	ite	ne
 8001cde:	2301      	movne	r3, #1
 8001ce0:	2300      	moveq	r3, #0
 8001ce2:	b2db      	uxtb	r3, r3
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	200000d8 	.word	0x200000d8
 8001cf0:	20000384 	.word	0x20000384

08001cf4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b08b      	sub	sp, #44	@ 0x2c
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	603a      	str	r2, [r7, #0]
 8001cfe:	71fb      	strb	r3, [r7, #7]
 8001d00:	460b      	mov	r3, r1
 8001d02:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <SD_disk_ioctl+0x1e>
 8001d0e:	2304      	movs	r3, #4
 8001d10:	e113      	b.n	8001f3a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8001d18:	79bb      	ldrb	r3, [r7, #6]
 8001d1a:	2b05      	cmp	r3, #5
 8001d1c:	d124      	bne.n	8001d68 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d012      	beq.n	8001d4c <SD_disk_ioctl+0x58>
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	dc1a      	bgt.n	8001d60 <SD_disk_ioctl+0x6c>
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <SD_disk_ioctl+0x40>
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d006      	beq.n	8001d40 <SD_disk_ioctl+0x4c>
 8001d32:	e015      	b.n	8001d60 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001d34:	f7ff fd1a 	bl	800176c <SD_PowerOff>
			res = RES_OK;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001d3e:	e0fa      	b.n	8001f36 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8001d40:	f7ff fcd2 	bl	80016e8 <SD_PowerOn>
			res = RES_OK;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001d4a:	e0f4      	b.n	8001f36 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001d4c:	6a3b      	ldr	r3, [r7, #32]
 8001d4e:	1c5c      	adds	r4, r3, #1
 8001d50:	f7ff fd18 	bl	8001784 <SD_CheckPower>
 8001d54:	4603      	mov	r3, r0
 8001d56:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001d5e:	e0ea      	b.n	8001f36 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8001d60:	2304      	movs	r3, #4
 8001d62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001d66:	e0e6      	b.n	8001f36 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001d68:	4b76      	ldr	r3, [pc, #472]	@ (8001f44 <SD_disk_ioctl+0x250>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <SD_disk_ioctl+0x86>
 8001d76:	2303      	movs	r3, #3
 8001d78:	e0df      	b.n	8001f3a <SD_disk_ioctl+0x246>

		SELECT();
 8001d7a:	f7ff fc21 	bl	80015c0 <SELECT>

		switch (ctrl)
 8001d7e:	79bb      	ldrb	r3, [r7, #6]
 8001d80:	2b0d      	cmp	r3, #13
 8001d82:	f200 80c9 	bhi.w	8001f18 <SD_disk_ioctl+0x224>
 8001d86:	a201      	add	r2, pc, #4	@ (adr r2, 8001d8c <SD_disk_ioctl+0x98>)
 8001d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d8c:	08001e83 	.word	0x08001e83
 8001d90:	08001dc5 	.word	0x08001dc5
 8001d94:	08001e73 	.word	0x08001e73
 8001d98:	08001f19 	.word	0x08001f19
 8001d9c:	08001f19 	.word	0x08001f19
 8001da0:	08001f19 	.word	0x08001f19
 8001da4:	08001f19 	.word	0x08001f19
 8001da8:	08001f19 	.word	0x08001f19
 8001dac:	08001f19 	.word	0x08001f19
 8001db0:	08001f19 	.word	0x08001f19
 8001db4:	08001f19 	.word	0x08001f19
 8001db8:	08001e95 	.word	0x08001e95
 8001dbc:	08001eb9 	.word	0x08001eb9
 8001dc0:	08001edd 	.word	0x08001edd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	2049      	movs	r0, #73	@ 0x49
 8001dc8:	f7ff fd57 	bl	800187a <SD_SendCmd>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f040 80a6 	bne.w	8001f20 <SD_disk_ioctl+0x22c>
 8001dd4:	f107 030c 	add.w	r3, r7, #12
 8001dd8:	2110      	movs	r1, #16
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fcdc 	bl	8001798 <SD_RxDataBlock>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 809c 	beq.w	8001f20 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8001de8:	7b3b      	ldrb	r3, [r7, #12]
 8001dea:	099b      	lsrs	r3, r3, #6
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d10d      	bne.n	8001e0e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001df2:	7d7b      	ldrb	r3, [r7, #21]
 8001df4:	461a      	mov	r2, r3
 8001df6:	7d3b      	ldrb	r3, [r7, #20]
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	3301      	adds	r3, #1
 8001e02:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001e04:	8bfb      	ldrh	r3, [r7, #30]
 8001e06:	029a      	lsls	r2, r3, #10
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	e02d      	b.n	8001e6a <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001e0e:	7c7b      	ldrb	r3, [r7, #17]
 8001e10:	f003 030f 	and.w	r3, r3, #15
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	7dbb      	ldrb	r3, [r7, #22]
 8001e18:	09db      	lsrs	r3, r3, #7
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	7d7b      	ldrb	r3, [r7, #21]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	f003 0306 	and.w	r3, r3, #6
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	3302      	adds	r3, #2
 8001e32:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001e36:	7d3b      	ldrb	r3, [r7, #20]
 8001e38:	099b      	lsrs	r3, r3, #6
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	7cfb      	ldrb	r3, [r7, #19]
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	4413      	add	r3, r2
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	7cbb      	ldrb	r3, [r7, #18]
 8001e4a:	029b      	lsls	r3, r3, #10
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	4413      	add	r3, r2
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	3301      	adds	r3, #1
 8001e5a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001e5c:	8bfa      	ldrh	r2, [r7, #30]
 8001e5e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001e62:	3b09      	subs	r3, #9
 8001e64:	409a      	lsls	r2, r3
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8001e70:	e056      	b.n	8001f20 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e78:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001e80:	e055      	b.n	8001f2e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001e82:	f7ff fc17 	bl	80016b4 <SD_ReadyWait>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2bff      	cmp	r3, #255	@ 0xff
 8001e8a:	d14b      	bne.n	8001f24 <SD_disk_ioctl+0x230>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001e92:	e047      	b.n	8001f24 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001e94:	2100      	movs	r1, #0
 8001e96:	2049      	movs	r0, #73	@ 0x49
 8001e98:	f7ff fcef 	bl	800187a <SD_SendCmd>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d142      	bne.n	8001f28 <SD_disk_ioctl+0x234>
 8001ea2:	2110      	movs	r1, #16
 8001ea4:	6a38      	ldr	r0, [r7, #32]
 8001ea6:	f7ff fc77 	bl	8001798 <SD_RxDataBlock>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d03b      	beq.n	8001f28 <SD_disk_ioctl+0x234>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001eb6:	e037      	b.n	8001f28 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001eb8:	2100      	movs	r1, #0
 8001eba:	204a      	movs	r0, #74	@ 0x4a
 8001ebc:	f7ff fcdd 	bl	800187a <SD_SendCmd>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d132      	bne.n	8001f2c <SD_disk_ioctl+0x238>
 8001ec6:	2110      	movs	r1, #16
 8001ec8:	6a38      	ldr	r0, [r7, #32]
 8001eca:	f7ff fc65 	bl	8001798 <SD_RxDataBlock>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d02b      	beq.n	8001f2c <SD_disk_ioctl+0x238>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001eda:	e027      	b.n	8001f2c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001edc:	2100      	movs	r1, #0
 8001ede:	207a      	movs	r0, #122	@ 0x7a
 8001ee0:	f7ff fccb 	bl	800187a <SD_SendCmd>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d116      	bne.n	8001f18 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8001eea:	2300      	movs	r3, #0
 8001eec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001ef0:	e00b      	b.n	8001f0a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8001ef2:	6a3c      	ldr	r4, [r7, #32]
 8001ef4:	1c63      	adds	r3, r4, #1
 8001ef6:	623b      	str	r3, [r7, #32]
 8001ef8:	f7ff fbb2 	bl	8001660 <SPI_RxByte>
 8001efc:	4603      	mov	r3, r0
 8001efe:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001f00:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f04:	3301      	adds	r3, #1
 8001f06:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001f0a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d9ef      	bls.n	8001ef2 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8001f18:	2304      	movs	r3, #4
 8001f1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001f1e:	e006      	b.n	8001f2e <SD_disk_ioctl+0x23a>
			break;
 8001f20:	bf00      	nop
 8001f22:	e004      	b.n	8001f2e <SD_disk_ioctl+0x23a>
			break;
 8001f24:	bf00      	nop
 8001f26:	e002      	b.n	8001f2e <SD_disk_ioctl+0x23a>
			break;
 8001f28:	bf00      	nop
 8001f2a:	e000      	b.n	8001f2e <SD_disk_ioctl+0x23a>
			break;
 8001f2c:	bf00      	nop
		}

		DESELECT();
 8001f2e:	f7ff fb55 	bl	80015dc <DESELECT>
		SPI_RxByte();
 8001f32:	f7ff fb95 	bl	8001660 <SPI_RxByte>
	}

	return res;
 8001f36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	372c      	adds	r7, #44	@ 0x2c
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd90      	pop	{r4, r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200000d8 	.word	0x200000d8

08001f48 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4a06      	ldr	r2, [pc, #24]	@ (8001f70 <vApplicationGetIdleTaskMemory+0x28>)
 8001f58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	4a05      	ldr	r2, [pc, #20]	@ (8001f74 <vApplicationGetIdleTaskMemory+0x2c>)
 8001f5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2280      	movs	r2, #128	@ 0x80
 8001f64:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001f66:	bf00      	nop
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr
 8001f70:	200003ac 	.word	0x200003ac
 8001f74:	2000045c 	.word	0x2000045c

08001f78 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001f78:	b5b0      	push	{r4, r5, r7, lr}
 8001f7a:	b0aa      	sub	sp, #168	@ 0xa8
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  drive_cmd_count = 0;
 8001f7e:	4b42      	ldr	r3, [pc, #264]	@ (8002088 <MX_FREERTOS_Init+0x110>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  CAN_MSG_memory_pool = osPoolCreate(osPool(CAN_MSG_memory_pool));                 // create memory pool
 8001f84:	4841      	ldr	r0, [pc, #260]	@ (800208c <MX_FREERTOS_Init+0x114>)
 8001f86:	f007 ff4d 	bl	8009e24 <osPoolCreate>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4a40      	ldr	r2, [pc, #256]	@ (8002090 <MX_FREERTOS_Init+0x118>)
 8001f8e:	6013      	str	r3, [r2, #0]
  CAN_MSG_Rx_Queue = osMessageCreate(osMessageQ(CAN_MSG_Rx_Queue), NULL);  // create msg queue
 8001f90:	2100      	movs	r1, #0
 8001f92:	4840      	ldr	r0, [pc, #256]	@ (8002094 <MX_FREERTOS_Init+0x11c>)
 8001f94:	f008 f845 	bl	800a022 <osMessageCreate>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	4a3f      	ldr	r2, [pc, #252]	@ (8002098 <MX_FREERTOS_Init+0x120>)
 8001f9c:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of StartDefaultTask */
  osThreadDef(StartDefaultTask, startDefaultTask, osPriorityLow, 0, 128);
 8001f9e:	4b3f      	ldr	r3, [pc, #252]	@ (800209c <MX_FREERTOS_Init+0x124>)
 8001fa0:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8001fa4:	461d      	mov	r5, r3
 8001fa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001faa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StartDefaultTaskHandle = osThreadCreate(osThread(StartDefaultTask), NULL);
 8001fb2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f007 fe47 	bl	8009c4c <osThreadCreate>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	4a37      	ldr	r2, [pc, #220]	@ (80020a0 <MX_FREERTOS_Init+0x128>)
 8001fc2:	6013      	str	r3, [r2, #0]

  /* definition and creation of readCANTask */
  osThreadDef(readCANTask, read_CAN_task, osPriorityNormal, 0, 512);
 8001fc4:	4b37      	ldr	r3, [pc, #220]	@ (80020a4 <MX_FREERTOS_Init+0x12c>)
 8001fc6:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8001fca:	461d      	mov	r5, r3
 8001fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fd4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readCANTaskHandle = osThreadCreate(osThread(readCANTask), NULL);
 8001fd8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f007 fe34 	bl	8009c4c <osThreadCreate>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	4a30      	ldr	r2, [pc, #192]	@ (80020a8 <MX_FREERTOS_Init+0x130>)
 8001fe8:	6013      	str	r3, [r2, #0]

  /* definition and creation of readIMUTask */
  osThreadDef(readIMUTask, read_IMU_task, osPriorityNormal, 0, 512);
 8001fea:	4b30      	ldr	r3, [pc, #192]	@ (80020ac <MX_FREERTOS_Init+0x134>)
 8001fec:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001ff0:	461d      	mov	r5, r3
 8001ff2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ff4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ff6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ffa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readIMUTaskHandle = osThreadCreate(osThread(readIMUTask), NULL);
 8001ffe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002002:	2100      	movs	r1, #0
 8002004:	4618      	mov	r0, r3
 8002006:	f007 fe21 	bl	8009c4c <osThreadCreate>
 800200a:	4603      	mov	r3, r0
 800200c:	4a28      	ldr	r2, [pc, #160]	@ (80020b0 <MX_FREERTOS_Init+0x138>)
 800200e:	6013      	str	r3, [r2, #0]

  /* definition and creation of readGPSTask */
  osThreadDef(readGPSTask, read_GPS_task, osPriorityNormal, 0, 1536);
 8002010:	4b28      	ldr	r3, [pc, #160]	@ (80020b4 <MX_FREERTOS_Init+0x13c>)
 8002012:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8002016:	461d      	mov	r5, r3
 8002018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800201a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800201c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002020:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readGPSTaskHandle = osThreadCreate(osThread(readGPSTask), NULL);
 8002024:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002028:	2100      	movs	r1, #0
 800202a:	4618      	mov	r0, r3
 800202c:	f007 fe0e 	bl	8009c4c <osThreadCreate>
 8002030:	4603      	mov	r3, r0
 8002032:	4a21      	ldr	r2, [pc, #132]	@ (80020b8 <MX_FREERTOS_Init+0x140>)
 8002034:	6013      	str	r3, [r2, #0]

  /* definition and creation of transmitRTCTask */
  osThreadDef(transmitRTCTask, transmit_RTC_task, osPriorityNormal, 0, 512);
 8002036:	4b21      	ldr	r3, [pc, #132]	@ (80020bc <MX_FREERTOS_Init+0x144>)
 8002038:	f107 041c 	add.w	r4, r7, #28
 800203c:	461d      	mov	r5, r3
 800203e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002040:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002042:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002046:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  transmitRTCTaskHandle = osThreadCreate(osThread(transmitRTCTask), NULL);
 800204a:	f107 031c 	add.w	r3, r7, #28
 800204e:	2100      	movs	r1, #0
 8002050:	4618      	mov	r0, r3
 8002052:	f007 fdfb 	bl	8009c4c <osThreadCreate>
 8002056:	4603      	mov	r3, r0
 8002058:	4a19      	ldr	r2, [pc, #100]	@ (80020c0 <MX_FREERTOS_Init+0x148>)
 800205a:	6013      	str	r3, [r2, #0]

  /* definition and creation of transmitDiagnosticsTask */
  osThreadDef(transmitDiagnosticsTask, transmit_Diagnostics_task, osPriorityNormal, 0, 512);
 800205c:	4b19      	ldr	r3, [pc, #100]	@ (80020c4 <MX_FREERTOS_Init+0x14c>)
 800205e:	463c      	mov	r4, r7
 8002060:	461d      	mov	r5, r3
 8002062:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002064:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002066:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800206a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  transmitDiagnosticsTaskHandle = osThreadCreate(osThread(transmitDiagnosticsTask), NULL);
 800206e:	463b      	mov	r3, r7
 8002070:	2100      	movs	r1, #0
 8002072:	4618      	mov	r0, r3
 8002074:	f007 fdea 	bl	8009c4c <osThreadCreate>
 8002078:	4603      	mov	r3, r0
 800207a:	4a13      	ldr	r2, [pc, #76]	@ (80020c8 <MX_FREERTOS_Init+0x150>)
 800207c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800207e:	bf00      	nop
 8002080:	37a8      	adds	r7, #168	@ 0xa8
 8002082:	46bd      	mov	sp, r7
 8002084:	bdb0      	pop	{r4, r5, r7, pc}
 8002086:	bf00      	nop
 8002088:	20000388 	.word	0x20000388
 800208c:	08011f50 	.word	0x08011f50
 8002090:	2000038c 	.word	0x2000038c
 8002094:	08011f5c 	.word	0x08011f5c
 8002098:	20000390 	.word	0x20000390
 800209c:	08011da4 	.word	0x08011da4
 80020a0:	20000394 	.word	0x20000394
 80020a4:	08011dcc 	.word	0x08011dcc
 80020a8:	20000398 	.word	0x20000398
 80020ac:	08011df4 	.word	0x08011df4
 80020b0:	2000039c 	.word	0x2000039c
 80020b4:	08011e1c 	.word	0x08011e1c
 80020b8:	200003a0 	.word	0x200003a0
 80020bc:	08011e48 	.word	0x08011e48
 80020c0:	200003a4 	.word	0x200003a4
 80020c4:	08011e7c 	.word	0x08011e7c
 80020c8:	200003a8 	.word	0x200003a8

080020cc <startDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startDefaultTask */
void startDefaultTask(void const * argument)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startDefaultTask */
  Can_Init();
 80020d4:	f7ff f9a8 	bl	8001428 <Can_Init>
  /* Infinite loop */
  for(;;)
  {
    //printf("startDefaultTask()\n\r");
//    HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
    osDelay(DEFAULT_TASK_DELAY);
 80020d8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80020dc:	f007 fe02 	bl	8009ce4 <osDelay>
 80020e0:	e7fa      	b.n	80020d8 <startDefaultTask+0xc>
	...

080020e4 <read_CAN_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_CAN_task */
void read_CAN_task(void const * argument)
{
 80020e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e6:	b093      	sub	sp, #76	@ 0x4c
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6178      	str	r0, [r7, #20]

  /* Infinite loop */
  while (1) {
    //printf("read_CAN_task()\n\r");
    /* Wait for thread flags to be set in the CAN Rx FIFO0 Interrupt Callback */
    osSignalWait(CAN_READY, osWaitForever);
 80020ec:	463b      	mov	r3, r7
 80020ee:	f04f 32ff 	mov.w	r2, #4294967295
 80020f2:	2101      	movs	r1, #1
 80020f4:	4618      	mov	r0, r3
 80020f6:	f007 fe49 	bl	8009d8c <osSignalWait>
     * Once empty, wait for flag again.
     */

    /* Get CAN Message from Queue */
    while(1) {
      uint8_t radio_buffer[CAN_BUFFER_LEN] = {0};
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	f107 0320 	add.w	r3, r7, #32
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	60da      	str	r2, [r3, #12]
 800210c:	611a      	str	r2, [r3, #16]
      evt = osMessageGet(CAN_MSG_Rx_Queue, osWaitForever);
 800210e:	4b50      	ldr	r3, [pc, #320]	@ (8002250 <read_CAN_task+0x16c>)
 8002110:	6819      	ldr	r1, [r3, #0]
 8002112:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002116:	f04f 32ff 	mov.w	r2, #4294967295
 800211a:	4618      	mov	r0, r3
 800211c:	f007 ffea 	bl	800a0f4 <osMessageGet>
      if (evt.status == osEventMessage) {
 8002120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002122:	2b10      	cmp	r3, #16
 8002124:	d1e2      	bne.n	80020ec <read_CAN_task+0x8>
	  HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 8002126:	2102      	movs	r1, #2
 8002128:	484a      	ldr	r0, [pc, #296]	@ (8002254 <read_CAN_task+0x170>)
 800212a:	f003 fbe0 	bl	80058ee <HAL_GPIO_TogglePin>
	  rx_CAN_msg = evt.value.p; // Get pointer from the queue union
 800212e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002130:	643b      	str	r3, [r7, #64]	@ 0x40
	 // 22: '\r'             // TODO: Do we need this? maybe just use \0 instead?
	 // 23: '\n'

	 /* TIMESTAMP */

	 for (uint8_t i = 0; i < 8; i++) {
 8002132:	2300      	movs	r3, #0
 8002134:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002138:	e021      	b.n	800217e <read_CAN_task+0x9a>
//	   radio_buffer[7 - i] = GET_BYTE_FROM_WORD(i, current_timestamp.double_as_int);
	   radio_buffer[7 - i] = (char) GET_BYTE_FROM_WORD(i, rx_CAN_msg->timestamp.double_as_int);
 800213a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800213c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002140:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8002144:	00c9      	lsls	r1, r1, #3
 8002146:	f1c1 0620 	rsb	r6, r1, #32
 800214a:	f1a1 0020 	sub.w	r0, r1, #32
 800214e:	fa22 f401 	lsr.w	r4, r2, r1
 8002152:	fa03 f606 	lsl.w	r6, r3, r6
 8002156:	4334      	orrs	r4, r6
 8002158:	fa23 f000 	lsr.w	r0, r3, r0
 800215c:	4304      	orrs	r4, r0
 800215e:	fa23 f501 	lsr.w	r5, r3, r1
 8002162:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002166:	f1c3 0307 	rsb	r3, r3, #7
 800216a:	b2e2      	uxtb	r2, r4
 800216c:	3348      	adds	r3, #72	@ 0x48
 800216e:	443b      	add	r3, r7
 8002170:	f803 2c2c 	strb.w	r2, [r3, #-44]
	 for (uint8_t i = 0; i < 8; i++) {
 8002174:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002178:	3301      	adds	r3, #1
 800217a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800217e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002182:	2b07      	cmp	r3, #7
 8002184:	d9d9      	bls.n	800213a <read_CAN_task+0x56>
	 }

	 /* CAN MESSAGE IDENTIFIER */
	 radio_buffer[8] = '#';
 8002186:	2323      	movs	r3, #35	@ 0x23
 8002188:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	 /* CAN ID */ // TODO: Check if this is correct. Are the 0 bytes in the STD in the correct spot?
	 if (rx_CAN_msg->header.IDE == CAN_ID_STD)
 800218c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10b      	bne.n	80021ac <read_CAN_task+0xc8>
	 {
	   radio_buffer[12]  = 0xFF & (rx_CAN_msg->header.StdId);
 8002194:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	   radio_buffer[11] = 0xFF & (rx_CAN_msg->header.StdId >> 8);
 800219e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	0a1b      	lsrs	r3, r3, #8
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80021aa:	e01a      	b.n	80021e2 <read_CAN_task+0xfe>
	 }
	 else if (rx_CAN_msg->header.IDE == CAN_ID_EXT)
 80021ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2b04      	cmp	r3, #4
 80021b2:	d116      	bne.n	80021e2 <read_CAN_task+0xfe>
	 {
	   radio_buffer[12]  = 0xFF & (rx_CAN_msg->header.ExtId);
 80021b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	   radio_buffer[11] = 0xFF & (rx_CAN_msg->header.ExtId >> 8);
 80021be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	0a1b      	lsrs	r3, r3, #8
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	   radio_buffer[10] = 0xFF & (rx_CAN_msg->header.ExtId >> 16);
 80021ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	0c1b      	lsrs	r3, r3, #16
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	   radio_buffer[9] = 0xFF & (rx_CAN_msg->header.ExtId >> 24);
 80021d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	0e1b      	lsrs	r3, r3, #24
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	 }

	 /* CAN DATA */
	 for (uint8_t i = 0; i < 8; i++) {
 80021e2:	2300      	movs	r3, #0
 80021e4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80021e8:	e010      	b.n	800220c <read_CAN_task+0x128>
	   radio_buffer[13 + i] = rx_CAN_msg->data[i];
 80021ea:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80021ee:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80021f2:	330d      	adds	r3, #13
 80021f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80021f6:	440a      	add	r2, r1
 80021f8:	7f12      	ldrb	r2, [r2, #28]
 80021fa:	3348      	adds	r3, #72	@ 0x48
 80021fc:	443b      	add	r3, r7
 80021fe:	f803 2c2c 	strb.w	r2, [r3, #-44]
	 for (uint8_t i = 0; i < 8; i++) {
 8002202:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002206:	3301      	adds	r3, #1
 8002208:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800220c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002210:	2b07      	cmp	r3, #7
 8002212:	d9ea      	bls.n	80021ea <read_CAN_task+0x106>
	 }

	 /* CAN DATA LENGTH */
	 radio_buffer[21] = rx_CAN_msg->header.DLC & 0xF;
 8002214:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	b2db      	uxtb	r3, r3
 8002220:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

	 /* CARRIAGE RETURN */
	 radio_buffer[CAN_BUFFER_LEN - 2] = '\r';
 8002224:	230d      	movs	r3, #13
 8002226:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

	 /* NEW LINE */
	 radio_buffer[CAN_BUFFER_LEN - 1] = '\n';
 800222a:	230a      	movs	r3, #10
 800222c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

//	 sd_append_as_hexnums(logfile, radio_buffer, CAN_BUFFER_LEN);

	 /* Transmit over Radio */
	 HAL_UART_Transmit(&huart1, radio_buffer, sizeof(radio_buffer), 1000);
 8002230:	f107 011c 	add.w	r1, r7, #28
 8002234:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002238:	2218      	movs	r2, #24
 800223a:	4807      	ldr	r0, [pc, #28]	@ (8002258 <read_CAN_task+0x174>)
 800223c:	f007 fa92 	bl	8009764 <HAL_UART_Transmit>
//	   /* Convert radio_buffer to hex_string so it can be logged. MUST NOT USE strlen */
//	   sd_append_as_hexnums(logfile, radio_buffer, CAN_BUFFER_LEN);
//	 }

	/* Free the memory allocated for this message */
	osPoolFree(CAN_MSG_memory_pool, rx_CAN_msg);
 8002240:	4b06      	ldr	r3, [pc, #24]	@ (800225c <read_CAN_task+0x178>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002246:	4618      	mov	r0, r3
 8002248:	f007 feab 	bl	8009fa2 <osPoolFree>
    while(1) {
 800224c:	e755      	b.n	80020fa <read_CAN_task+0x16>
 800224e:	bf00      	nop
 8002250:	20000390 	.word	0x20000390
 8002254:	40010800 	.word	0x40010800
 8002258:	20000874 	.word	0x20000874
 800225c:	2000038c 	.word	0x2000038c

08002260 <read_IMU_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_IMU_task */
void read_IMU_task(void const * argument)
{
 8002260:	b5b0      	push	{r4, r5, r7, lr}
 8002262:	b0ba      	sub	sp, #232	@ 0xe8
 8002264:	af04      	add	r7, sp, #16
 8002266:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  while(1)
  {
    //printf("read_IMU_task()\n\r");
    /* Initialize a IMU buffer */
    uint8_t imu_buffer[IMU_MESSAGE_LEN] = {0};
 8002268:	2300      	movs	r3, #0
 800226a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800226e:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	731a      	strb	r2, [r3, #12]

    union FloatBytes ax_x, ax_y, ax_z, gy_x, gy_y, gy_z;

    /* Read accelerator data */
    uint8_t accel_data[NUM_ACCEL_BYTES];
    HAL_StatusTypeDef imu_status = HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3

    imu_status |= HAL_I2C_Mem_Read(&hi2c2, IMU_DEVICE_ADDRESS, ACCEL_XOUT_H_REG, 1, accel_data, NUM_ACCEL_BYTES, 1000);
 8002282:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002286:	9302      	str	r3, [sp, #8]
 8002288:	2306      	movs	r3, #6
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	2301      	movs	r3, #1
 8002294:	223b      	movs	r2, #59	@ 0x3b
 8002296:	21d0      	movs	r1, #208	@ 0xd0
 8002298:	48cf      	ldr	r0, [pc, #828]	@ (80025d8 <read_IMU_task+0x378>)
 800229a:	f003 ffeb 	bl	8006274 <HAL_I2C_Mem_Read>
 800229e:	4603      	mov	r3, r0
 80022a0:	461a      	mov	r2, r3
 80022a2:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3

    uint16_t Accel_X_RAW = (uint16_t)(accel_data[0] << 8 | accel_data[1]);
 80022ac:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 80022b0:	021b      	lsls	r3, r3, #8
 80022b2:	b21a      	sxth	r2, r3
 80022b4:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80022b8:	b21b      	sxth	r3, r3
 80022ba:	4313      	orrs	r3, r2
 80022bc:	b21b      	sxth	r3, r3
 80022be:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
    uint16_t Accel_Y_RAW = (uint16_t)(accel_data[2] << 8 | accel_data[3]);
 80022c2:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80022c6:	021b      	lsls	r3, r3, #8
 80022c8:	b21a      	sxth	r2, r3
 80022ca:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80022ce:	b21b      	sxth	r3, r3
 80022d0:	4313      	orrs	r3, r2
 80022d2:	b21b      	sxth	r3, r3
 80022d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
    uint16_t Accel_Z_RAW = (uint16_t)(accel_data[4] << 8 | accel_data[5]);
 80022d8:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 80022dc:	021b      	lsls	r3, r3, #8
 80022de:	b21a      	sxth	r2, r3
 80022e0:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 80022e4:	b21b      	sxth	r3, r3
 80022e6:	4313      	orrs	r3, r2
 80022e8:	b21b      	sxth	r3, r3
 80022ea:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
    /*
     * Convert the RAW values into acceleration in 'g' we have to divide according to the Full scale value
     * set in FS_SEL. Have configured FS_SEL = 0. So I am dividing by 16384.0
     * For more details check ACCEL_CONFIG Register.
     */
    ax_x.float_value = Accel_X_RAW / 16384.0;  // get the float g
 80022ee:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	@ 0xd0
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe f900 	bl	80004f8 <__aeabi_i2d>
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	4bb7      	ldr	r3, [pc, #732]	@ (80025dc <read_IMU_task+0x37c>)
 80022fe:	f7fe fa8f 	bl	8000820 <__aeabi_ddiv>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	4610      	mov	r0, r2
 8002308:	4619      	mov	r1, r3
 800230a:	f7fe fc57 	bl	8000bbc <__aeabi_d2f>
 800230e:	4603      	mov	r3, r0
 8002310:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    ax_y.float_value = Accel_Y_RAW / 16384.0;
 8002314:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe f8ed 	bl	80004f8 <__aeabi_i2d>
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	4bae      	ldr	r3, [pc, #696]	@ (80025dc <read_IMU_task+0x37c>)
 8002324:	f7fe fa7c 	bl	8000820 <__aeabi_ddiv>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4610      	mov	r0, r2
 800232e:	4619      	mov	r1, r3
 8002330:	f7fe fc44 	bl	8000bbc <__aeabi_d2f>
 8002334:	4603      	mov	r3, r0
 8002336:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    ax_z.float_value = Accel_Z_RAW / 16384.0;
 800233a:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe f8da 	bl	80004f8 <__aeabi_i2d>
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	4ba4      	ldr	r3, [pc, #656]	@ (80025dc <read_IMU_task+0x37c>)
 800234a:	f7fe fa69 	bl	8000820 <__aeabi_ddiv>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	4610      	mov	r0, r2
 8002354:	4619      	mov	r1, r3
 8002356:	f7fe fc31 	bl	8000bbc <__aeabi_d2f>
 800235a:	4603      	mov	r3, r0
 800235c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

    osDelay(250);
 8002360:	20fa      	movs	r0, #250	@ 0xfa
 8002362:	f007 fcbf 	bl	8009ce4 <osDelay>

    /* Read gyroscope data */
    uint8_t gyro_data[NUM_GYRO_BYTES];

    imu_status |= HAL_I2C_Mem_Read(&hi2c2, IMU_DEVICE_ADDRESS, GYRO_XOUT_H_REG, 1, gyro_data, NUM_GYRO_BYTES, 1000);
 8002366:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800236a:	9302      	str	r3, [sp, #8]
 800236c:	2306      	movs	r3, #6
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	2301      	movs	r3, #1
 8002378:	2243      	movs	r2, #67	@ 0x43
 800237a:	21d0      	movs	r1, #208	@ 0xd0
 800237c:	4896      	ldr	r0, [pc, #600]	@ (80025d8 <read_IMU_task+0x378>)
 800237e:	f003 ff79 	bl	8006274 <HAL_I2C_Mem_Read>
 8002382:	4603      	mov	r3, r0
 8002384:	461a      	mov	r2, r3
 8002386:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800238a:	4313      	orrs	r3, r2
 800238c:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    uint16_t Gyro_X_RAW = (uint16_t)(gyro_data[0] << 8 | gyro_data[1]);
 8002390:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	b21a      	sxth	r2, r3
 8002398:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800239c:	b21b      	sxth	r3, r3
 800239e:	4313      	orrs	r3, r2
 80023a0:	b21b      	sxth	r3, r3
 80023a2:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
    uint16_t Gyro_Y_RAW = (uint16_t)(gyro_data[2] << 8 | gyro_data[3]);
 80023a6:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 80023aa:	021b      	lsls	r3, r3, #8
 80023ac:	b21a      	sxth	r2, r3
 80023ae:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80023b2:	b21b      	sxth	r3, r3
 80023b4:	4313      	orrs	r3, r2
 80023b6:	b21b      	sxth	r3, r3
 80023b8:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
    uint16_t Gyro_Z_RAW = (uint16_t)(gyro_data[4] << 8 | gyro_data[5]);
 80023bc:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 80023c0:	021b      	lsls	r3, r3, #8
 80023c2:	b21a      	sxth	r2, r3
 80023c4:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 80023c8:	b21b      	sxth	r3, r3
 80023ca:	4313      	orrs	r3, r2
 80023cc:	b21b      	sxth	r3, r3
 80023ce:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
    /*
     * Convert the RAW values into dps (degrees/s) we have to divide according to the
     * Full scale value set in FS_SEL. Have configured FS_SEL = 0.
     * So I am dividing by 131.0. For more details check GYRO_CONFIG Register
     */
    gy_x.float_value = Gyro_X_RAW / 131.0;  // get the float g
 80023d2:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe f88e 	bl	80004f8 <__aeabi_i2d>
 80023dc:	a37c      	add	r3, pc, #496	@ (adr r3, 80025d0 <read_IMU_task+0x370>)
 80023de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e2:	f7fe fa1d 	bl	8000820 <__aeabi_ddiv>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	4610      	mov	r0, r2
 80023ec:	4619      	mov	r1, r3
 80023ee:	f7fe fbe5 	bl	8000bbc <__aeabi_d2f>
 80023f2:	4603      	mov	r3, r0
 80023f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    gy_y.float_value = Gyro_Y_RAW / 131.0;
 80023f8:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe f87b 	bl	80004f8 <__aeabi_i2d>
 8002402:	a373      	add	r3, pc, #460	@ (adr r3, 80025d0 <read_IMU_task+0x370>)
 8002404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002408:	f7fe fa0a 	bl	8000820 <__aeabi_ddiv>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4610      	mov	r0, r2
 8002412:	4619      	mov	r1, r3
 8002414:	f7fe fbd2 	bl	8000bbc <__aeabi_d2f>
 8002418:	4603      	mov	r3, r0
 800241a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    gy_z.float_value = Gyro_Z_RAW / 131.0;
 800241e:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	@ 0xc6
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe f868 	bl	80004f8 <__aeabi_i2d>
 8002428:	a369      	add	r3, pc, #420	@ (adr r3, 80025d0 <read_IMU_task+0x370>)
 800242a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242e:	f7fe f9f7 	bl	8000820 <__aeabi_ddiv>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4610      	mov	r0, r2
 8002438:	4619      	mov	r1, r3
 800243a:	f7fe fbbf 	bl	8000bbc <__aeabi_d2f>
 800243e:	4603      	mov	r3, r0
 8002440:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    /* Verify IMU is connected */
    // check_IMU_result(ax_x, ax_y, ax_z, gy_x, gy_y, gy_z); // TODO set flag

    /* Get current epoch Time Stamp */
    union DoubleBytes current_timestamp;
    current_timestamp.double_value = get_current_timestamp();
 8002444:	f001 fdb6 	bl	8003fb4 <get_current_timestamp>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
//    transmit_imu_data(current_timestamp.double_as_int, gy_z.bytes, 'G', 'Z');

    CAN_Radio_msg_t x_axis_data, y_axis_data, z_axis_data;

    /* Set headers */
    x_axis_data.header = IMU_x_axis_header;
 8002450:	4b63      	ldr	r3, [pc, #396]	@ (80025e0 <read_IMU_task+0x380>)
 8002452:	f107 0408 	add.w	r4, r7, #8
 8002456:	461d      	mov	r5, r3
 8002458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800245a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800245c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002460:	e884 0003 	stmia.w	r4, {r0, r1}
    y_axis_data.header = IMU_y_axis_header;
 8002464:	4b5f      	ldr	r3, [pc, #380]	@ (80025e4 <read_IMU_task+0x384>)
 8002466:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800246a:	461d      	mov	r5, r3
 800246c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800246e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002470:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002474:	e884 0003 	stmia.w	r4, {r0, r1}
    z_axis_data.header = IMU_z_axis_header;
 8002478:	4b5b      	ldr	r3, [pc, #364]	@ (80025e8 <read_IMU_task+0x388>)
 800247a:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800247e:	461d      	mov	r5, r3
 8002480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002484:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002488:	e884 0003 	stmia.w	r4, {r0, r1}

    /* Assign the timestamp */
    x_axis_data.timestamp = current_timestamp;
 800248c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8002490:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    y_axis_data.timestamp = current_timestamp;
 8002494:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8002498:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    z_axis_data.timestamp = current_timestamp;
 800249c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80024a0:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78

    for (int i = 0; i < 4; i++) {
 80024a4:	2300      	movs	r3, #0
 80024a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80024aa:	e052      	b.n	8002552 <read_IMU_task+0x2f2>
	// X-axis data
	x_axis_data.data[i] = ax_x.bytes[i];
 80024ac:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 80024b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80024b4:	4413      	add	r3, r2
 80024b6:	7819      	ldrb	r1, [r3, #0]
 80024b8:	f107 0220 	add.w	r2, r7, #32
 80024bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80024c0:	4413      	add	r3, r2
 80024c2:	460a      	mov	r2, r1
 80024c4:	701a      	strb	r2, [r3, #0]
	x_axis_data.data[4+i] = gy_x.bytes[i];
 80024c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80024ca:	3304      	adds	r3, #4
 80024cc:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 80024d0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80024d4:	440a      	add	r2, r1
 80024d6:	7812      	ldrb	r2, [r2, #0]
 80024d8:	33d8      	adds	r3, #216	@ 0xd8
 80024da:	443b      	add	r3, r7
 80024dc:	f803 2cb8 	strb.w	r2, [r3, #-184]

	// Y-axis data
	y_axis_data.data[i] = ax_y.bytes[i];
 80024e0:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 80024e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80024e8:	4413      	add	r3, r2
 80024ea:	7819      	ldrb	r1, [r3, #0]
 80024ec:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80024f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80024f4:	4413      	add	r3, r2
 80024f6:	460a      	mov	r2, r1
 80024f8:	701a      	strb	r2, [r3, #0]
	y_axis_data.data[4+i] = gy_y.bytes[i];
 80024fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80024fe:	3304      	adds	r3, #4
 8002500:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8002504:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8002508:	440a      	add	r2, r1
 800250a:	7812      	ldrb	r2, [r2, #0]
 800250c:	33d8      	adds	r3, #216	@ 0xd8
 800250e:	443b      	add	r3, r7
 8002510:	f803 2c90 	strb.w	r2, [r3, #-144]

	// Z-axis data
	z_axis_data.data[i] = ax_z.bytes[i];
 8002514:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8002518:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800251c:	4413      	add	r3, r2
 800251e:	7819      	ldrb	r1, [r3, #0]
 8002520:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8002524:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002528:	4413      	add	r3, r2
 800252a:	460a      	mov	r2, r1
 800252c:	701a      	strb	r2, [r3, #0]
	z_axis_data.data[4+i] = gy_z.bytes[i];
 800252e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002532:	3304      	adds	r3, #4
 8002534:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 8002538:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800253c:	440a      	add	r2, r1
 800253e:	7812      	ldrb	r2, [r2, #0]
 8002540:	33d8      	adds	r3, #216	@ 0xd8
 8002542:	443b      	add	r3, r7
 8002544:	f803 2c68 	strb.w	r2, [r3, #-104]
    for (int i = 0; i < 4; i++) {
 8002548:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800254c:	3301      	adds	r3, #1
 800254e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002552:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002556:	2b03      	cmp	r3, #3
 8002558:	dda8      	ble.n	80024ac <read_IMU_task+0x24c>
    }

    /* Transmit the messages */
    HAL_CAN_AddTxMessage(&hcan, &x_axis_data.header, x_axis_data.data, &can_mailbox);
 800255a:	f107 0308 	add.w	r3, r7, #8
 800255e:	f103 0218 	add.w	r2, r3, #24
 8002562:	f107 0108 	add.w	r1, r7, #8
 8002566:	4b21      	ldr	r3, [pc, #132]	@ (80025ec <read_IMU_task+0x38c>)
 8002568:	4821      	ldr	r0, [pc, #132]	@ (80025f0 <read_IMU_task+0x390>)
 800256a:	f002 fae5 	bl	8004b38 <HAL_CAN_AddTxMessage>
    send_CAN_Radio(&x_axis_data);
 800256e:	f107 0308 	add.w	r3, r7, #8
 8002572:	4618      	mov	r0, r3
 8002574:	f000 fad0 	bl	8002b18 <send_CAN_Radio>

    HAL_CAN_AddTxMessage(&hcan, &y_axis_data.header, y_axis_data.data, &can_mailbox);
 8002578:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800257c:	f103 0218 	add.w	r2, r3, #24
 8002580:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8002584:	4b19      	ldr	r3, [pc, #100]	@ (80025ec <read_IMU_task+0x38c>)
 8002586:	481a      	ldr	r0, [pc, #104]	@ (80025f0 <read_IMU_task+0x390>)
 8002588:	f002 fad6 	bl	8004b38 <HAL_CAN_AddTxMessage>
    send_CAN_Radio(&y_axis_data);
 800258c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002590:	4618      	mov	r0, r3
 8002592:	f000 fac1 	bl	8002b18 <send_CAN_Radio>

    HAL_CAN_AddTxMessage(&hcan, &z_axis_data.header, z_axis_data.data, &can_mailbox);
 8002596:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800259a:	f103 0218 	add.w	r2, r3, #24
 800259e:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80025a2:	4b12      	ldr	r3, [pc, #72]	@ (80025ec <read_IMU_task+0x38c>)
 80025a4:	4812      	ldr	r0, [pc, #72]	@ (80025f0 <read_IMU_task+0x390>)
 80025a6:	f002 fac7 	bl	8004b38 <HAL_CAN_AddTxMessage>
    send_CAN_Radio(&z_axis_data);
 80025aa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 fab2 	bl	8002b18 <send_CAN_Radio>

    // Update diagnostics
    g_tel_diagnostics.imu_fail = (imu_status != HAL_OK);
 80025b4:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	bf14      	ite	ne
 80025bc:	2301      	movne	r3, #1
 80025be:	2300      	moveq	r3, #0
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	4b0c      	ldr	r3, [pc, #48]	@ (80025f4 <read_IMU_task+0x394>)
 80025c4:	709a      	strb	r2, [r3, #2]

    /* Delay */
//    osDelay(READ_IMU_DELAY * 5); // 500 ms
    osDelay(250);
 80025c6:	20fa      	movs	r0, #250	@ 0xfa
 80025c8:	f007 fb8c 	bl	8009ce4 <osDelay>
  {
 80025cc:	e64c      	b.n	8002268 <read_IMU_task+0x8>
 80025ce:	bf00      	nop
 80025d0:	00000000 	.word	0x00000000
 80025d4:	40606000 	.word	0x40606000
 80025d8:	200006b0 	.word	0x200006b0
 80025dc:	40d00000 	.word	0x40d00000
 80025e0:	20000030 	.word	0x20000030
 80025e4:	20000048 	.word	0x20000048
 80025e8:	20000060 	.word	0x20000060
 80025ec:	20000350 	.word	0x20000350
 80025f0:	20000354 	.word	0x20000354
 80025f4:	20000704 	.word	0x20000704

080025f8 <read_GPS_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_GPS_task */
void read_GPS_task(void const * argument)
{
 80025f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025fc:	f5ad 7d79 	sub.w	sp, sp, #996	@ 0x3e4
 8002600:	af02      	add	r7, sp, #8
 8002602:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 8002606:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 800260a:	6018      	str	r0, [r3, #0]
    /* Initialize buffers */
    //printf("read_GPS_task()\n\r");
    uint8_t receive_buffer[GPS_RCV_BUFFER_SIZE];
    GPS gps_data;
    GPS_msg_t gps_message;
    uint8_t gps_buffer[GPS_MESSAGE_LEN] = {0};
 800260c:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 8002610:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	3304      	adds	r3, #4
 800261a:	22c4      	movs	r2, #196	@ 0xc4
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f00b fda9 	bl	800e176 <memset>

    /* Read in an NMEA message into the buffer */
    if(HAL_I2C_IsDeviceReady(&hi2c1, GPS_DEVICE_ADDRESS, 1, HAL_MAX_DELAY) == HAL_OK) {
 8002624:	f04f 33ff 	mov.w	r3, #4294967295
 8002628:	2201      	movs	r2, #1
 800262a:	2184      	movs	r1, #132	@ 0x84
 800262c:	48cf      	ldr	r0, [pc, #828]	@ (800296c <read_GPS_task+0x374>)
 800262e:	f004 f889 	bl	8006744 <HAL_I2C_IsDeviceReady>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10a      	bne.n	800264e <read_GPS_task+0x56>
	    HAL_I2C_Master_Receive(&hi2c1, GPS_DEVICE_ADDRESS, receive_buffer, sizeof(receive_buffer), HAL_MAX_DELAY);
 8002638:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 800263c:	f04f 33ff 	mov.w	r3, #4294967295
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002646:	2184      	movs	r1, #132	@ 0x84
 8002648:	48c8      	ldr	r0, [pc, #800]	@ (800296c <read_GPS_task+0x374>)
 800264a:	f003 faad 	bl	8005ba8 <HAL_I2C_Master_Receive>
    }

    /* Parse the buffer data --> gets stored in gps_data; */
    nmea_parse(&gps_data, &receive_buffer);
 800264e:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 8002652:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f001 fa17 	bl	8003a8c <nmea_parse>
    /* Transmit the NMEA message over UART to radio */
//    HAL_UART_Transmit(&huart1, gps_buffer, sizeof(gps_buffer), 1000);

    /* Get current epoch Time Stamp */
    union DoubleBytes current_timestamp;
    current_timestamp.double_value = get_current_timestamp();
 800265e:	f001 fca9 	bl	8003fb4 <get_current_timestamp>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	e9c7 23f2 	strd	r2, r3, [r7, #968]	@ 0x3c8
    CAN_Radio_msg_t latitude_msg, longitude_msg, altitude_hdop_msg, side_and_count_msg;
    union DoubleBytes latitude_bytes, longitude_bytes;
    union FloatBytes altitude_bytes, hdop_bytes;

    /* Assign headers */
    latitude_msg.header = GPS_latitude_header;
 800266a:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 800266e:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 8002672:	4abf      	ldr	r2, [pc, #764]	@ (8002970 <read_GPS_task+0x378>)
 8002674:	461e      	mov	r6, r3
 8002676:	4694      	mov	ip, r2
 8002678:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800267c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800267e:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8002682:	e886 0003 	stmia.w	r6, {r0, r1}
    longitude_msg.header = GPS_longitude_header;
 8002686:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 800268a:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 800268e:	4ab9      	ldr	r2, [pc, #740]	@ (8002974 <read_GPS_task+0x37c>)
 8002690:	461e      	mov	r6, r3
 8002692:	4694      	mov	ip, r2
 8002694:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002698:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800269a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800269e:	e886 0003 	stmia.w	r6, {r0, r1}
    altitude_hdop_msg.header = GPS_altitude_hdop_header;
 80026a2:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 80026a6:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 80026aa:	4ab3      	ldr	r2, [pc, #716]	@ (8002978 <read_GPS_task+0x380>)
 80026ac:	461e      	mov	r6, r3
 80026ae:	4694      	mov	ip, r2
 80026b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80026b4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80026b6:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80026ba:	e886 0003 	stmia.w	r6, {r0, r1}
    side_and_count_msg.header = GPS_side_count_header;
 80026be:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 80026c2:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 80026c6:	4aad      	ldr	r2, [pc, #692]	@ (800297c <read_GPS_task+0x384>)
 80026c8:	461e      	mov	r6, r3
 80026ca:	4694      	mov	ip, r2
 80026cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80026d0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80026d2:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80026d6:	e886 0003 	stmia.w	r6, {r0, r1}

    /* Assign timestamps */
    latitude_msg.timestamp = current_timestamp;
 80026da:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 80026de:	f5a3 7174 	sub.w	r1, r3, #976	@ 0x3d0
 80026e2:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	@ 0x3c8
 80026e6:	e9c1 2308 	strd	r2, r3, [r1, #32]
    longitude_msg.timestamp = current_timestamp;
 80026ea:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 80026ee:	f5a3 716a 	sub.w	r1, r3, #936	@ 0x3a8
 80026f2:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	@ 0x3c8
 80026f6:	e9c1 2308 	strd	r2, r3, [r1, #32]
    altitude_hdop_msg.timestamp = current_timestamp;
 80026fa:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 80026fe:	f5a3 7160 	sub.w	r1, r3, #896	@ 0x380
 8002702:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	@ 0x3c8
 8002706:	e9c1 2308 	strd	r2, r3, [r1, #32]
    side_and_count_msg.timestamp = current_timestamp;
 800270a:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 800270e:	f5a3 7156 	sub.w	r1, r3, #856	@ 0x358
 8002712:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	@ 0x3c8
 8002716:	e9c1 2308 	strd	r2, r3, [r1, #32]

    /* Assign data as double/float so it can be read as uint64/uint8x4 */
    latitude_bytes.double_value = gps_data.latitude;
 800271a:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 800271e:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8002722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002726:	e9c7 23f0 	strd	r2, r3, [r7, #960]	@ 0x3c0
    longitude_bytes.double_value = gps_data.longitude;
 800272a:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 800272e:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8002732:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002736:	e9c7 23ee 	strd	r2, r3, [r7, #952]	@ 0x3b8
    altitude_bytes.float_value = gps_data.altitude;
 800273a:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 800273e:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
    hdop_bytes.float_value = gps_data.hdop;
 8002748:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 800274c:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0

    for  (uint8_t i=0; i < 8; i++) {
 8002756:	2300      	movs	r3, #0
 8002758:	f887 33d7 	strb.w	r3, [r7, #983]	@ 0x3d7
 800275c:	e069      	b.n	8002832 <read_GPS_task+0x23a>
	latitude_msg.data[7 - i] = GET_BYTE_FROM_WORD(i, latitude_bytes.double_as_int);
 800275e:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	@ 0x3c0
 8002762:	f897 13d7 	ldrb.w	r1, [r7, #983]	@ 0x3d7
 8002766:	00c9      	lsls	r1, r1, #3
 8002768:	f1c1 0620 	rsb	r6, r1, #32
 800276c:	f1a1 0020 	sub.w	r0, r1, #32
 8002770:	fa22 f401 	lsr.w	r4, r2, r1
 8002774:	fa03 f606 	lsl.w	r6, r3, r6
 8002778:	4334      	orrs	r4, r6
 800277a:	fa23 f000 	lsr.w	r0, r3, r0
 800277e:	4304      	orrs	r4, r0
 8002780:	fa23 f501 	lsr.w	r5, r3, r1
 8002784:	f897 33d7 	ldrb.w	r3, [r7, #983]	@ 0x3d7
 8002788:	f1c3 0307 	rsb	r3, r3, #7
 800278c:	b2e1      	uxtb	r1, r4
 800278e:	f507 7276 	add.w	r2, r7, #984	@ 0x3d8
 8002792:	f5a2 7274 	sub.w	r2, r2, #976	@ 0x3d0
 8002796:	4413      	add	r3, r2
 8002798:	460a      	mov	r2, r1
 800279a:	761a      	strb	r2, [r3, #24]
	longitude_msg.data[7 - i] = GET_BYTE_FROM_WORD(i, longitude_bytes.double_as_int);
 800279c:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	@ 0x3b8
 80027a0:	f897 13d7 	ldrb.w	r1, [r7, #983]	@ 0x3d7
 80027a4:	00c9      	lsls	r1, r1, #3
 80027a6:	f1c1 0620 	rsb	r6, r1, #32
 80027aa:	f1a1 0020 	sub.w	r0, r1, #32
 80027ae:	fa22 f801 	lsr.w	r8, r2, r1
 80027b2:	fa03 f606 	lsl.w	r6, r3, r6
 80027b6:	ea48 0806 	orr.w	r8, r8, r6
 80027ba:	fa23 f000 	lsr.w	r0, r3, r0
 80027be:	ea48 0800 	orr.w	r8, r8, r0
 80027c2:	fa23 f901 	lsr.w	r9, r3, r1
 80027c6:	f897 33d7 	ldrb.w	r3, [r7, #983]	@ 0x3d7
 80027ca:	f1c3 0307 	rsb	r3, r3, #7
 80027ce:	fa5f f188 	uxtb.w	r1, r8
 80027d2:	f507 7276 	add.w	r2, r7, #984	@ 0x3d8
 80027d6:	f5a2 726a 	sub.w	r2, r2, #936	@ 0x3a8
 80027da:	4413      	add	r3, r2
 80027dc:	460a      	mov	r2, r1
 80027de:	761a      	strb	r2, [r3, #24]
	altitude_hdop_msg.data[3 - i] = altitude_bytes.bytes[i];
 80027e0:	f897 23d7 	ldrb.w	r2, [r7, #983]	@ 0x3d7
 80027e4:	f897 33d7 	ldrb.w	r3, [r7, #983]	@ 0x3d7
 80027e8:	f1c3 0303 	rsb	r3, r3, #3
 80027ec:	f502 7276 	add.w	r2, r2, #984	@ 0x3d8
 80027f0:	443a      	add	r2, r7
 80027f2:	f812 1c24 	ldrb.w	r1, [r2, #-36]
 80027f6:	f507 7276 	add.w	r2, r7, #984	@ 0x3d8
 80027fa:	f5a2 7260 	sub.w	r2, r2, #896	@ 0x380
 80027fe:	4413      	add	r3, r2
 8002800:	460a      	mov	r2, r1
 8002802:	761a      	strb	r2, [r3, #24]
	altitude_hdop_msg.data[7 - i] = hdop_bytes.bytes[i];
 8002804:	f897 23d7 	ldrb.w	r2, [r7, #983]	@ 0x3d7
 8002808:	f897 33d7 	ldrb.w	r3, [r7, #983]	@ 0x3d7
 800280c:	f1c3 0307 	rsb	r3, r3, #7
 8002810:	f502 7276 	add.w	r2, r2, #984	@ 0x3d8
 8002814:	443a      	add	r2, r7
 8002816:	f812 1c28 	ldrb.w	r1, [r2, #-40]
 800281a:	f507 7276 	add.w	r2, r7, #984	@ 0x3d8
 800281e:	f5a2 7260 	sub.w	r2, r2, #896	@ 0x380
 8002822:	4413      	add	r3, r2
 8002824:	460a      	mov	r2, r1
 8002826:	761a      	strb	r2, [r3, #24]
    for  (uint8_t i=0; i < 8; i++) {
 8002828:	f897 33d7 	ldrb.w	r3, [r7, #983]	@ 0x3d7
 800282c:	3301      	adds	r3, #1
 800282e:	f887 33d7 	strb.w	r3, [r7, #983]	@ 0x3d7
 8002832:	f897 33d7 	ldrb.w	r3, [r7, #983]	@ 0x3d7
 8002836:	2b07      	cmp	r3, #7
 8002838:	d991      	bls.n	800275e <read_GPS_task+0x166>
    }

    /* Satellite Count Cast */
    uint32_t sat_count = (uint32_t) gps_data.satelliteCount;
 800283a:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 800283e:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8002842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002844:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
    side_and_count_msg.data[0] = gps_data.latSide;
 8002848:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 800284c:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8002850:	7a1a      	ldrb	r2, [r3, #8]
 8002852:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 8002856:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 800285a:	761a      	strb	r2, [r3, #24]
    side_and_count_msg.data[1] = gps_data.lonSide;
 800285c:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 8002860:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8002864:	7e1a      	ldrb	r2, [r3, #24]
 8002866:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 800286a:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 800286e:	765a      	strb	r2, [r3, #25]
    for  (uint8_t i=0; i < 4; i++) {
 8002870:	2300      	movs	r3, #0
 8002872:	f887 33d6 	strb.w	r3, [r7, #982]	@ 0x3d6
 8002876:	e01c      	b.n	80028b2 <read_GPS_task+0x2ba>
	side_and_count_msg.data[5 - i] = ((sat_count >> (8 * i)) && 0xFF);
 8002878:	f897 33d6 	ldrb.w	r3, [r7, #982]	@ 0x3d6
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	f8d7 23d0 	ldr.w	r2, [r7, #976]	@ 0x3d0
 8002882:	fa22 f303 	lsr.w	r3, r2, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	bf14      	ite	ne
 800288a:	2301      	movne	r3, #1
 800288c:	2300      	moveq	r3, #0
 800288e:	b2da      	uxtb	r2, r3
 8002890:	f897 33d6 	ldrb.w	r3, [r7, #982]	@ 0x3d6
 8002894:	f1c3 0305 	rsb	r3, r3, #5
 8002898:	4611      	mov	r1, r2
 800289a:	f507 7276 	add.w	r2, r7, #984	@ 0x3d8
 800289e:	f5a2 7256 	sub.w	r2, r2, #856	@ 0x358
 80028a2:	4413      	add	r3, r2
 80028a4:	460a      	mov	r2, r1
 80028a6:	761a      	strb	r2, [r3, #24]
    for  (uint8_t i=0; i < 4; i++) {
 80028a8:	f897 33d6 	ldrb.w	r3, [r7, #982]	@ 0x3d6
 80028ac:	3301      	adds	r3, #1
 80028ae:	f887 33d6 	strb.w	r3, [r7, #982]	@ 0x3d6
 80028b2:	f897 33d6 	ldrb.w	r3, [r7, #982]	@ 0x3d6
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d9de      	bls.n	8002878 <read_GPS_task+0x280>
    }
    side_and_count_msg.data[6] = 0;
 80028ba:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 80028be:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 80028c2:	2200      	movs	r2, #0
 80028c4:	779a      	strb	r2, [r3, #30]
    side_and_count_msg.data[7] = 0;
 80028c6:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 80028ca:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 80028ce:	2200      	movs	r2, #0
 80028d0:	77da      	strb	r2, [r3, #31]

    /* Transmit a message every 2 seconds */
    HAL_CAN_AddTxMessage(&hcan, &latitude_msg.header, latitude_msg.data, &can_mailbox);
 80028d2:	f107 0308 	add.w	r3, r7, #8
 80028d6:	f103 0218 	add.w	r2, r3, #24
 80028da:	f107 0108 	add.w	r1, r7, #8
 80028de:	4b28      	ldr	r3, [pc, #160]	@ (8002980 <read_GPS_task+0x388>)
 80028e0:	4828      	ldr	r0, [pc, #160]	@ (8002984 <read_GPS_task+0x38c>)
 80028e2:	f002 f929 	bl	8004b38 <HAL_CAN_AddTxMessage>
    send_CAN_Radio(&latitude_msg);
 80028e6:	f107 0308 	add.w	r3, r7, #8
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 f914 	bl	8002b18 <send_CAN_Radio>
    osDelay(2000);
 80028f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80028f4:	f007 f9f6 	bl	8009ce4 <osDelay>

    HAL_CAN_AddTxMessage(&hcan, &longitude_msg.header, longitude_msg.data, &can_mailbox);
 80028f8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80028fc:	f103 0218 	add.w	r2, r3, #24
 8002900:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8002904:	4b1e      	ldr	r3, [pc, #120]	@ (8002980 <read_GPS_task+0x388>)
 8002906:	481f      	ldr	r0, [pc, #124]	@ (8002984 <read_GPS_task+0x38c>)
 8002908:	f002 f916 	bl	8004b38 <HAL_CAN_AddTxMessage>
    send_CAN_Radio(&longitude_msg);
 800290c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002910:	4618      	mov	r0, r3
 8002912:	f000 f901 	bl	8002b18 <send_CAN_Radio>
    osDelay(2000);
 8002916:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800291a:	f007 f9e3 	bl	8009ce4 <osDelay>

    HAL_CAN_AddTxMessage(&hcan, &altitude_hdop_msg.header, altitude_hdop_msg.data, &can_mailbox);
 800291e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002922:	f103 0218 	add.w	r2, r3, #24
 8002926:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800292a:	4b15      	ldr	r3, [pc, #84]	@ (8002980 <read_GPS_task+0x388>)
 800292c:	4815      	ldr	r0, [pc, #84]	@ (8002984 <read_GPS_task+0x38c>)
 800292e:	f002 f903 	bl	8004b38 <HAL_CAN_AddTxMessage>
    send_CAN_Radio(&altitude_hdop_msg);
 8002932:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002936:	4618      	mov	r0, r3
 8002938:	f000 f8ee 	bl	8002b18 <send_CAN_Radio>
    osDelay(2000);
 800293c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002940:	f007 f9d0 	bl	8009ce4 <osDelay>

    HAL_CAN_AddTxMessage(&hcan, &side_and_count_msg.header, side_and_count_msg.data, &can_mailbox);
 8002944:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002948:	f103 0218 	add.w	r2, r3, #24
 800294c:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8002950:	4b0b      	ldr	r3, [pc, #44]	@ (8002980 <read_GPS_task+0x388>)
 8002952:	480c      	ldr	r0, [pc, #48]	@ (8002984 <read_GPS_task+0x38c>)
 8002954:	f002 f8f0 	bl	8004b38 <HAL_CAN_AddTxMessage>
    send_CAN_Radio(&side_and_count_msg);
 8002958:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800295c:	4618      	mov	r0, r3
 800295e:	f000 f8db 	bl	8002b18 <send_CAN_Radio>
    osDelay(4000); // 4000 so we have 2 + 2 + 2 + 4 = 10 seconds total
 8002962:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8002966:	f007 f9bd 	bl	8009ce4 <osDelay>
  while(1) {
 800296a:	e64f      	b.n	800260c <read_GPS_task+0x14>
 800296c:	2000065c 	.word	0x2000065c
 8002970:	20000078 	.word	0x20000078
 8002974:	20000090 	.word	0x20000090
 8002978:	200000a8 	.word	0x200000a8
 800297c:	200000c0 	.word	0x200000c0
 8002980:	20000350 	.word	0x20000350
 8002984:	20000354 	.word	0x20000354

08002988 <transmit_RTC_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_RTC_task */
void transmit_RTC_task(void const * argument)
{
 8002988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800298a:	b091      	sub	sp, #68	@ 0x44
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

    CAN_Radio_msg_t rtc_msg;
    rtc_msg.header = rtc_timestamp_header;
 8002990:	4b25      	ldr	r3, [pc, #148]	@ (8002a28 <transmit_RTC_task+0xa0>)
 8002992:	f107 0608 	add.w	r6, r7, #8
 8002996:	469c      	mov	ip, r3
 8002998:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800299c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800299e:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80029a2:	e886 0003 	stmia.w	r6, {r0, r1}

    union DoubleBytes current_timestamp;
    current_timestamp.double_value = get_current_timestamp();
 80029a6:	f001 fb05 	bl	8003fb4 <get_current_timestamp>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    rtc_msg.timestamp = current_timestamp;
 80029b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80029b6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    // Populate data_send array
    for (int i = 0; i < 8; i++) {
 80029ba:	2300      	movs	r3, #0
 80029bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029be:	e01b      	b.n	80029f8 <transmit_RTC_task+0x70>
        rtc_msg.data[i] = (current_timestamp.double_as_int >> (8 * i)) & 0xFF;
 80029c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80029c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80029c6:	00c9      	lsls	r1, r1, #3
 80029c8:	f1c1 0620 	rsb	r6, r1, #32
 80029cc:	f1a1 0020 	sub.w	r0, r1, #32
 80029d0:	fa22 f401 	lsr.w	r4, r2, r1
 80029d4:	fa03 f606 	lsl.w	r6, r3, r6
 80029d8:	4334      	orrs	r4, r6
 80029da:	fa23 f000 	lsr.w	r0, r3, r0
 80029de:	4304      	orrs	r4, r0
 80029e0:	fa23 f501 	lsr.w	r5, r3, r1
 80029e4:	b2e1      	uxtb	r1, r4
 80029e6:	f107 0220 	add.w	r2, r7, #32
 80029ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029ec:	4413      	add	r3, r2
 80029ee:	460a      	mov	r2, r1
 80029f0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 80029f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029f4:	3301      	adds	r3, #1
 80029f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029fa:	2b07      	cmp	r3, #7
 80029fc:	dde0      	ble.n	80029c0 <transmit_RTC_task+0x38>
    }
    
    HAL_CAN_AddTxMessage(&hcan, &rtc_msg.header, rtc_msg.data, &can_mailbox);
 80029fe:	f107 0308 	add.w	r3, r7, #8
 8002a02:	f103 0218 	add.w	r2, r3, #24
 8002a06:	f107 0108 	add.w	r1, r7, #8
 8002a0a:	4b08      	ldr	r3, [pc, #32]	@ (8002a2c <transmit_RTC_task+0xa4>)
 8002a0c:	4808      	ldr	r0, [pc, #32]	@ (8002a30 <transmit_RTC_task+0xa8>)
 8002a0e:	f002 f893 	bl	8004b38 <HAL_CAN_AddTxMessage>
    send_CAN_Radio(&rtc_msg);
 8002a12:	f107 0308 	add.w	r3, r7, #8
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 f87e 	bl	8002b18 <send_CAN_Radio>

    osDelay(TRANSMIT_RTC_DELAY);
 8002a1c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002a20:	f007 f960 	bl	8009ce4 <osDelay>
  {
 8002a24:	e7b4      	b.n	8002990 <transmit_RTC_task+0x8>
 8002a26:	bf00      	nop
 8002a28:	20000000 	.word	0x20000000
 8002a2c:	20000350 	.word	0x20000350
 8002a30:	20000354 	.word	0x20000354

08002a34 <transmit_Diagnostics_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_Diagnostics_task */
void transmit_Diagnostics_task(void const * argument)
{
 8002a34:	b5b0      	push	{r4, r5, r7, lr}
 8002a36:	b090      	sub	sp, #64	@ 0x40
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN transmit_Diagnostics_task */
  /* Infinite loop */
  for(;;)
  {
    uint8_t data_send = 0x00;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    CAN_Radio_msg_t diagnostics_msg;
    diagnostics_msg.header = tel_diagnostics_header;
 8002a42:	4b31      	ldr	r3, [pc, #196]	@ (8002b08 <transmit_Diagnostics_task+0xd4>)
 8002a44:	f107 0408 	add.w	r4, r7, #8
 8002a48:	461d      	mov	r5, r3
 8002a4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002a52:	e884 0003 	stmia.w	r4, {r0, r1}
    
    union DoubleBytes current_timestamp;
    current_timestamp.double_value = get_current_timestamp();
 8002a56:	f001 faad 	bl	8003fb4 <get_current_timestamp>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    diagnostics_msg.timestamp = current_timestamp;
 8002a62:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002a66:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    if(g_tel_diagnostics.rtc_reset) 
 8002a6a:	4b28      	ldr	r3, [pc, #160]	@ (8002b0c <transmit_Diagnostics_task+0xd8>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <transmit_Diagnostics_task+0x4c>
      SET_BIT(data_send, 1 << 0);
 8002a74:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if(g_tel_diagnostics.gps_sync_fail)
 8002a80:	4b22      	ldr	r3, [pc, #136]	@ (8002b0c <transmit_Diagnostics_task+0xd8>)
 8002a82:	785b      	ldrb	r3, [r3, #1]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d005      	beq.n	8002a96 <transmit_Diagnostics_task+0x62>
      SET_BIT(data_send, 1 << 1);
 8002a8a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002a8e:	f043 0302 	orr.w	r3, r3, #2
 8002a92:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if(g_tel_diagnostics.imu_fail)
 8002a96:	4b1d      	ldr	r3, [pc, #116]	@ (8002b0c <transmit_Diagnostics_task+0xd8>)
 8002a98:	789b      	ldrb	r3, [r3, #2]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <transmit_Diagnostics_task+0x78>
      SET_BIT(data_send, 1 << 2);
 8002aa0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002aa4:	f043 0304 	orr.w	r3, r3, #4
 8002aa8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if(g_tel_diagnostics.gps_fail)
 8002aac:	4b17      	ldr	r3, [pc, #92]	@ (8002b0c <transmit_Diagnostics_task+0xd8>)
 8002aae:	78db      	ldrb	r3, [r3, #3]
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d005      	beq.n	8002ac2 <transmit_Diagnostics_task+0x8e>
      SET_BIT(data_send, 1 << 3);
 8002ab6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002aba:	f043 0308 	orr.w	r3, r3, #8
 8002abe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if(g_tel_diagnostics.watchdog_reset)
 8002ac2:	4b12      	ldr	r3, [pc, #72]	@ (8002b0c <transmit_Diagnostics_task+0xd8>)
 8002ac4:	791b      	ldrb	r3, [r3, #4]
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d005      	beq.n	8002ad8 <transmit_Diagnostics_task+0xa4>
      SET_BIT(data_send, 1 << 4);
 8002acc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002ad0:	f043 0310 	orr.w	r3, r3, #16
 8002ad4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    
    diagnostics_msg.data[0] = data_send;
 8002ad8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002adc:	f887 3020 	strb.w	r3, [r7, #32]
    
    HAL_CAN_AddTxMessage(&hcan, &diagnostics_msg.header, diagnostics_msg.data, &can_mailbox);
 8002ae0:	f107 0308 	add.w	r3, r7, #8
 8002ae4:	f103 0218 	add.w	r2, r3, #24
 8002ae8:	f107 0108 	add.w	r1, r7, #8
 8002aec:	4b08      	ldr	r3, [pc, #32]	@ (8002b10 <transmit_Diagnostics_task+0xdc>)
 8002aee:	4809      	ldr	r0, [pc, #36]	@ (8002b14 <transmit_Diagnostics_task+0xe0>)
 8002af0:	f002 f822 	bl	8004b38 <HAL_CAN_AddTxMessage>
    send_CAN_Radio(&diagnostics_msg);
 8002af4:	f107 0308 	add.w	r3, r7, #8
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 f80d 	bl	8002b18 <send_CAN_Radio>

    osDelay(TRANSMIT_DIAGNOSTICS_DELAY);
 8002afe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002b02:	f007 f8ef 	bl	8009ce4 <osDelay>
  {
 8002b06:	e799      	b.n	8002a3c <transmit_Diagnostics_task+0x8>
 8002b08:	20000018 	.word	0x20000018
 8002b0c:	20000704 	.word	0x20000704
 8002b10:	20000350 	.word	0x20000350
 8002b14:	20000354 	.word	0x20000354

08002b18 <send_CAN_Radio>:
      initIMU();
  }
}

void send_CAN_Radio(CAN_Radio_msg_t *tx_CAN_msg)
{
 8002b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b1a:	b08b      	sub	sp, #44	@ 0x2c
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint8_t radio_buffer[CAN_BUFFER_LEN] = {0};
 8002b20:	2100      	movs	r1, #0
 8002b22:	60f9      	str	r1, [r7, #12]
 8002b24:	f107 0110 	add.w	r1, r7, #16
 8002b28:	2000      	movs	r0, #0
 8002b2a:	6008      	str	r0, [r1, #0]
 8002b2c:	6048      	str	r0, [r1, #4]
 8002b2e:	6088      	str	r0, [r1, #8]
 8002b30:	60c8      	str	r0, [r1, #12]
 8002b32:	6108      	str	r0, [r1, #16]

  /* TIMESTAMP */
  for (uint8_t i = 0; i < 8; i++) {
 8002b34:	2100      	movs	r1, #0
 8002b36:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 8002b3a:	e021      	b.n	8002b80 <send_CAN_Radio+0x68>
    radio_buffer[7 - i] = (char) GET_BYTE_FROM_WORD(i, tx_CAN_msg->timestamp.double_as_int);
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 8002b42:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8002b46:	00e4      	lsls	r4, r4, #3
 8002b48:	f1c4 0620 	rsb	r6, r4, #32
 8002b4c:	f1a4 0520 	sub.w	r5, r4, #32
 8002b50:	fa20 f204 	lsr.w	r2, r0, r4
 8002b54:	fa01 f606 	lsl.w	r6, r1, r6
 8002b58:	4332      	orrs	r2, r6
 8002b5a:	fa21 f505 	lsr.w	r5, r1, r5
 8002b5e:	432a      	orrs	r2, r5
 8002b60:	fa21 f304 	lsr.w	r3, r1, r4
 8002b64:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002b68:	f1c1 0107 	rsb	r1, r1, #7
 8002b6c:	b2d0      	uxtb	r0, r2
 8002b6e:	3128      	adds	r1, #40	@ 0x28
 8002b70:	4439      	add	r1, r7
 8002b72:	f801 0c1c 	strb.w	r0, [r1, #-28]
  for (uint8_t i = 0; i < 8; i++) {
 8002b76:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002b7a:	3101      	adds	r1, #1
 8002b7c:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 8002b80:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002b84:	2907      	cmp	r1, #7
 8002b86:	d9d9      	bls.n	8002b3c <send_CAN_Radio+0x24>
  }

  /* CAN MESSAGE IDENTIFIER */
  radio_buffer[8] = '#';
 8002b88:	2323      	movs	r3, #35	@ 0x23
 8002b8a:	753b      	strb	r3, [r7, #20]

  /* CAN ID */
  if (tx_CAN_msg->header.IDE == CAN_ID_STD)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d109      	bne.n	8002ba8 <send_CAN_Radio+0x90>
  {
    radio_buffer[12]  = 0xFF & (tx_CAN_msg->header.StdId);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	763b      	strb	r3, [r7, #24]
    radio_buffer[11] = 0xFF & (tx_CAN_msg->header.StdId >> 8);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	0a1b      	lsrs	r3, r3, #8
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	75fb      	strb	r3, [r7, #23]
 8002ba6:	e016      	b.n	8002bd6 <send_CAN_Radio+0xbe>
  }
  else if (tx_CAN_msg->header.IDE == CAN_ID_EXT)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d112      	bne.n	8002bd6 <send_CAN_Radio+0xbe>
  {
     radio_buffer[12]  = 0xFF & (tx_CAN_msg->header.ExtId);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	763b      	strb	r3, [r7, #24]
     radio_buffer[11] = 0xFF & (tx_CAN_msg->header.ExtId >> 8);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	0a1b      	lsrs	r3, r3, #8
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	75fb      	strb	r3, [r7, #23]
     radio_buffer[10] = 0xFF & (tx_CAN_msg->header.ExtId >> 16);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	0c1b      	lsrs	r3, r3, #16
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	75bb      	strb	r3, [r7, #22]
     radio_buffer[9] = 0xFF & (tx_CAN_msg->header.ExtId >> 24);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	0e1b      	lsrs	r3, r3, #24
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	757b      	strb	r3, [r7, #21]
  }

   /* CAN DATA */
   for (uint8_t i = 0; i < 8; i++) {
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002bdc:	e010      	b.n	8002c00 <send_CAN_Radio+0xe8>
     radio_buffer[13 + i] = tx_CAN_msg->data[i];
 8002bde:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002be2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002be6:	330d      	adds	r3, #13
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	440a      	add	r2, r1
 8002bec:	7e12      	ldrb	r2, [r2, #24]
 8002bee:	3328      	adds	r3, #40	@ 0x28
 8002bf0:	443b      	add	r3, r7
 8002bf2:	f803 2c1c 	strb.w	r2, [r3, #-28]
   for (uint8_t i = 0; i < 8; i++) {
 8002bf6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002c00:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002c04:	2b07      	cmp	r3, #7
 8002c06:	d9ea      	bls.n	8002bde <send_CAN_Radio+0xc6>
   }

   /* CAN DATA LENGTH */
   radio_buffer[21] = tx_CAN_msg->header.DLC & 0xF;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

   /* CARRIAGE RETURN */
   radio_buffer[CAN_BUFFER_LEN - 2] = '\r';
 8002c18:	230d      	movs	r3, #13
 8002c1a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

   /* NEW LINE */
   radio_buffer[CAN_BUFFER_LEN - 1] = '\n';
 8002c1e:	230a      	movs	r3, #10
 8002c20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

   HAL_UART_Transmit(&huart1, radio_buffer, sizeof(radio_buffer), 1000);
 8002c24:	f107 010c 	add.w	r1, r7, #12
 8002c28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c2c:	2218      	movs	r2, #24
 8002c2e:	4803      	ldr	r0, [pc, #12]	@ (8002c3c <send_CAN_Radio+0x124>)
 8002c30:	f006 fd98 	bl	8009764 <HAL_UART_Transmit>

}
 8002c34:	bf00      	nop
 8002c36:	372c      	adds	r7, #44	@ 0x2c
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c3c:	20000874 	.word	0x20000874

08002c40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b088      	sub	sp, #32
 8002c44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c46:	f107 0310 	add.w	r3, r7, #16
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	605a      	str	r2, [r3, #4]
 8002c50:	609a      	str	r2, [r3, #8]
 8002c52:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c54:	4b49      	ldr	r3, [pc, #292]	@ (8002d7c <MX_GPIO_Init+0x13c>)
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	4a48      	ldr	r2, [pc, #288]	@ (8002d7c <MX_GPIO_Init+0x13c>)
 8002c5a:	f043 0310 	orr.w	r3, r3, #16
 8002c5e:	6193      	str	r3, [r2, #24]
 8002c60:	4b46      	ldr	r3, [pc, #280]	@ (8002d7c <MX_GPIO_Init+0x13c>)
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	f003 0310 	and.w	r3, r3, #16
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c6c:	4b43      	ldr	r3, [pc, #268]	@ (8002d7c <MX_GPIO_Init+0x13c>)
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	4a42      	ldr	r2, [pc, #264]	@ (8002d7c <MX_GPIO_Init+0x13c>)
 8002c72:	f043 0320 	orr.w	r3, r3, #32
 8002c76:	6193      	str	r3, [r2, #24]
 8002c78:	4b40      	ldr	r3, [pc, #256]	@ (8002d7c <MX_GPIO_Init+0x13c>)
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c84:	4b3d      	ldr	r3, [pc, #244]	@ (8002d7c <MX_GPIO_Init+0x13c>)
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	4a3c      	ldr	r2, [pc, #240]	@ (8002d7c <MX_GPIO_Init+0x13c>)
 8002c8a:	f043 0304 	orr.w	r3, r3, #4
 8002c8e:	6193      	str	r3, [r2, #24]
 8002c90:	4b3a      	ldr	r3, [pc, #232]	@ (8002d7c <MX_GPIO_Init+0x13c>)
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	607b      	str	r3, [r7, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c9c:	4b37      	ldr	r3, [pc, #220]	@ (8002d7c <MX_GPIO_Init+0x13c>)
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	4a36      	ldr	r2, [pc, #216]	@ (8002d7c <MX_GPIO_Init+0x13c>)
 8002ca2:	f043 0308 	orr.w	r3, r3, #8
 8002ca6:	6193      	str	r3, [r2, #24]
 8002ca8:	4b34      	ldr	r3, [pc, #208]	@ (8002d7c <MX_GPIO_Init+0x13c>)
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	f003 0308 	and.w	r3, r3, #8
 8002cb0:	603b      	str	r3, [r7, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_GPIO_DIO7_Pin|RADIO_GPIO_DIO9_SLEEP_Pin|RADIO_GPIO_DIO11_Pin|RADIO_GPIO_DIO10_Pin, GPIO_PIN_RESET);
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2178      	movs	r1, #120	@ 0x78
 8002cb8:	4831      	ldr	r0, [pc, #196]	@ (8002d80 <MX_GPIO_Init+0x140>)
 8002cba:	f002 fe00 	bl	80058be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USER_LED_Pin|SDL_CS_Pin, GPIO_PIN_RESET);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2112      	movs	r1, #18
 8002cc2:	4830      	ldr	r0, [pc, #192]	@ (8002d84 <MX_GPIO_Init+0x144>)
 8002cc4:	f002 fdfb 	bl	80058be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RADIO_GPIO_DIO4_Pin|RADIO_GPIO_DIO3_Pin|RADIO_GPIO_DIO2_Pin, GPIO_PIN_SET);
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f24a 0101 	movw	r1, #40961	@ 0xa001
 8002cce:	482e      	ldr	r0, [pc, #184]	@ (8002d88 <MX_GPIO_Init+0x148>)
 8002cd0:	f002 fdf5 	bl	80058be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RADIO_GPIO_DIO12_Pin|RADIO_GPIO_DIO6_Pin|RADIO_DIO8_SLEEP_CONTROL_Pin, GPIO_PIN_RESET);
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f245 0102 	movw	r1, #20482	@ 0x5002
 8002cda:	482b      	ldr	r0, [pc, #172]	@ (8002d88 <MX_GPIO_Init+0x148>)
 8002cdc:	f002 fdef 	bl	80058be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_GPIO_DIO1_Pin|RADIO_GPIO_DIO0_Pin, GPIO_PIN_SET);
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8002ce6:	4826      	ldr	r0, [pc, #152]	@ (8002d80 <MX_GPIO_Init+0x140>)
 8002ce8:	f002 fde9 	bl	80058be <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = RADIO_GPIO_DIO7_Pin|RADIO_GPIO_DIO9_SLEEP_Pin|RADIO_GPIO_DIO11_Pin|RADIO_GPIO_DIO10_Pin
 8002cec:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 8002cf0:	613b      	str	r3, [r7, #16]
                          |RADIO_GPIO_DIO1_Pin|RADIO_GPIO_DIO0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cfe:	f107 0310 	add.w	r3, r7, #16
 8002d02:	4619      	mov	r1, r3
 8002d04:	481e      	ldr	r0, [pc, #120]	@ (8002d80 <MX_GPIO_Init+0x140>)
 8002d06:	f002 fc2f 	bl	8005568 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USER_LED_Pin|SDL_CS_Pin;
 8002d0a:	2312      	movs	r3, #18
 8002d0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d16:	2302      	movs	r3, #2
 8002d18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d1a:	f107 0310 	add.w	r3, r7, #16
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4818      	ldr	r0, [pc, #96]	@ (8002d84 <MX_GPIO_Init+0x144>)
 8002d22:	f002 fc21 	bl	8005568 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RTC_SYNC_Pin|SDL_CD_Pin;
 8002d26:	230c      	movs	r3, #12
 8002d28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d32:	f107 0310 	add.w	r3, r7, #16
 8002d36:	4619      	mov	r1, r3
 8002d38:	4812      	ldr	r0, [pc, #72]	@ (8002d84 <MX_GPIO_Init+0x144>)
 8002d3a:	f002 fc15 	bl	8005568 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = RADIO_GPIO_DIO4_Pin|RADIO_GPIO_DIO12_Pin|RADIO_GPIO_DIO6_Pin|RADIO_GPIO_DIO3_Pin
 8002d3e:	f24f 0303 	movw	r3, #61443	@ 0xf003
 8002d42:	613b      	str	r3, [r7, #16]
                          |RADIO_DIO8_SLEEP_CONTROL_Pin|RADIO_GPIO_DIO2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d44:	2301      	movs	r3, #1
 8002d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d50:	f107 0310 	add.w	r3, r7, #16
 8002d54:	4619      	mov	r1, r3
 8002d56:	480c      	ldr	r0, [pc, #48]	@ (8002d88 <MX_GPIO_Init+0x148>)
 8002d58:	f002 fc06 	bl	8005568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002d5c:	2304      	movs	r3, #4
 8002d5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002d68:	f107 0310 	add.w	r3, r7, #16
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4806      	ldr	r0, [pc, #24]	@ (8002d88 <MX_GPIO_Init+0x148>)
 8002d70:	f002 fbfa 	bl	8005568 <HAL_GPIO_Init>

}
 8002d74:	bf00      	nop
 8002d76:	3720      	adds	r7, #32
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	40011000 	.word	0x40011000
 8002d84:	40010800 	.word	0x40010800
 8002d88:	40010c00 	.word	0x40010c00

08002d8c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d90:	4b12      	ldr	r3, [pc, #72]	@ (8002ddc <MX_I2C1_Init+0x50>)
 8002d92:	4a13      	ldr	r2, [pc, #76]	@ (8002de0 <MX_I2C1_Init+0x54>)
 8002d94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002d96:	4b11      	ldr	r3, [pc, #68]	@ (8002ddc <MX_I2C1_Init+0x50>)
 8002d98:	4a12      	ldr	r2, [pc, #72]	@ (8002de4 <MX_I2C1_Init+0x58>)
 8002d9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ddc <MX_I2C1_Init+0x50>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002da2:	4b0e      	ldr	r3, [pc, #56]	@ (8002ddc <MX_I2C1_Init+0x50>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002da8:	4b0c      	ldr	r3, [pc, #48]	@ (8002ddc <MX_I2C1_Init+0x50>)
 8002daa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002dae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002db0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ddc <MX_I2C1_Init+0x50>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002db6:	4b09      	ldr	r3, [pc, #36]	@ (8002ddc <MX_I2C1_Init+0x50>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002dbc:	4b07      	ldr	r3, [pc, #28]	@ (8002ddc <MX_I2C1_Init+0x50>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002dc2:	4b06      	ldr	r3, [pc, #24]	@ (8002ddc <MX_I2C1_Init+0x50>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002dc8:	4804      	ldr	r0, [pc, #16]	@ (8002ddc <MX_I2C1_Init+0x50>)
 8002dca:	f002 fda9 	bl	8005920 <HAL_I2C_Init>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002dd4:	f000 f9c6 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002dd8:	bf00      	nop
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	2000065c 	.word	0x2000065c
 8002de0:	40005400 	.word	0x40005400
 8002de4:	000186a0 	.word	0x000186a0

08002de8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002dec:	4b12      	ldr	r3, [pc, #72]	@ (8002e38 <MX_I2C2_Init+0x50>)
 8002dee:	4a13      	ldr	r2, [pc, #76]	@ (8002e3c <MX_I2C2_Init+0x54>)
 8002df0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002df2:	4b11      	ldr	r3, [pc, #68]	@ (8002e38 <MX_I2C2_Init+0x50>)
 8002df4:	4a12      	ldr	r2, [pc, #72]	@ (8002e40 <MX_I2C2_Init+0x58>)
 8002df6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002df8:	4b0f      	ldr	r3, [pc, #60]	@ (8002e38 <MX_I2C2_Init+0x50>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8002e38 <MX_I2C2_Init+0x50>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e04:	4b0c      	ldr	r3, [pc, #48]	@ (8002e38 <MX_I2C2_Init+0x50>)
 8002e06:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e0a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e38 <MX_I2C2_Init+0x50>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002e12:	4b09      	ldr	r3, [pc, #36]	@ (8002e38 <MX_I2C2_Init+0x50>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e18:	4b07      	ldr	r3, [pc, #28]	@ (8002e38 <MX_I2C2_Init+0x50>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e1e:	4b06      	ldr	r3, [pc, #24]	@ (8002e38 <MX_I2C2_Init+0x50>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002e24:	4804      	ldr	r0, [pc, #16]	@ (8002e38 <MX_I2C2_Init+0x50>)
 8002e26:	f002 fd7b 	bl	8005920 <HAL_I2C_Init>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002e30:	f000 f998 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002e34:	bf00      	nop
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	200006b0 	.word	0x200006b0
 8002e3c:	40005800 	.word	0x40005800
 8002e40:	000186a0 	.word	0x000186a0

08002e44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08a      	sub	sp, #40	@ 0x28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e4c:	f107 0318 	add.w	r3, r7, #24
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a2b      	ldr	r2, [pc, #172]	@ (8002f0c <HAL_I2C_MspInit+0xc8>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d124      	bne.n	8002eae <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e64:	4b2a      	ldr	r3, [pc, #168]	@ (8002f10 <HAL_I2C_MspInit+0xcc>)
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	4a29      	ldr	r2, [pc, #164]	@ (8002f10 <HAL_I2C_MspInit+0xcc>)
 8002e6a:	f043 0308 	orr.w	r3, r3, #8
 8002e6e:	6193      	str	r3, [r2, #24]
 8002e70:	4b27      	ldr	r3, [pc, #156]	@ (8002f10 <HAL_I2C_MspInit+0xcc>)
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPS_SCL_Pin|GPS_SDA_Pin;
 8002e7c:	23c0      	movs	r3, #192	@ 0xc0
 8002e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e80:	2312      	movs	r3, #18
 8002e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e84:	2303      	movs	r3, #3
 8002e86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e88:	f107 0318 	add.w	r3, r7, #24
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4821      	ldr	r0, [pc, #132]	@ (8002f14 <HAL_I2C_MspInit+0xd0>)
 8002e90:	f002 fb6a 	bl	8005568 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e94:	4b1e      	ldr	r3, [pc, #120]	@ (8002f10 <HAL_I2C_MspInit+0xcc>)
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	4a1d      	ldr	r2, [pc, #116]	@ (8002f10 <HAL_I2C_MspInit+0xcc>)
 8002e9a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002e9e:	61d3      	str	r3, [r2, #28]
 8002ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f10 <HAL_I2C_MspInit+0xcc>)
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002eac:	e029      	b.n	8002f02 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a19      	ldr	r2, [pc, #100]	@ (8002f18 <HAL_I2C_MspInit+0xd4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d124      	bne.n	8002f02 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb8:	4b15      	ldr	r3, [pc, #84]	@ (8002f10 <HAL_I2C_MspInit+0xcc>)
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	4a14      	ldr	r2, [pc, #80]	@ (8002f10 <HAL_I2C_MspInit+0xcc>)
 8002ebe:	f043 0308 	orr.w	r3, r3, #8
 8002ec2:	6193      	str	r3, [r2, #24]
 8002ec4:	4b12      	ldr	r3, [pc, #72]	@ (8002f10 <HAL_I2C_MspInit+0xcc>)
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8002ed0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ed6:	2312      	movs	r3, #18
 8002ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002eda:	2303      	movs	r3, #3
 8002edc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ede:	f107 0318 	add.w	r3, r7, #24
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	480b      	ldr	r0, [pc, #44]	@ (8002f14 <HAL_I2C_MspInit+0xd0>)
 8002ee6:	f002 fb3f 	bl	8005568 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002eea:	4b09      	ldr	r3, [pc, #36]	@ (8002f10 <HAL_I2C_MspInit+0xcc>)
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	4a08      	ldr	r2, [pc, #32]	@ (8002f10 <HAL_I2C_MspInit+0xcc>)
 8002ef0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ef4:	61d3      	str	r3, [r2, #28]
 8002ef6:	4b06      	ldr	r3, [pc, #24]	@ (8002f10 <HAL_I2C_MspInit+0xcc>)
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002efe:	60bb      	str	r3, [r7, #8]
 8002f00:	68bb      	ldr	r3, [r7, #8]
}
 8002f02:	bf00      	nop
 8002f04:	3728      	adds	r7, #40	@ 0x28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40005400 	.word	0x40005400
 8002f10:	40021000 	.word	0x40021000
 8002f14:	40010c00 	.word	0x40010c00
 8002f18:	40005800 	.word	0x40005800

08002f1c <initIMU>:

/*
 * Documentation: https://controllerstech.com/how-to-interface-mpu6050-gy-521-with-stm32/
 */
void initIMU(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af04      	add	r7, sp, #16

  /*
   * We need to check if the sensor is responding by reading the “WHO_AM_I (0x75)�? Register.
   * If the sensor responds with 0x68, this means it’s available and good to go.
   */
  for(int i = 0; i < 5; i++) {
 8002f22:	2300      	movs	r3, #0
 8002f24:	607b      	str	r3, [r7, #4]
 8002f26:	e01d      	b.n	8002f64 <initIMU+0x48>
    if(HAL_I2C_IsDeviceReady(&hi2c2, IMU_DEVICE_ADDRESS, 1, HAL_MAX_DELAY) == HAL_OK) {
 8002f28:	f04f 33ff 	mov.w	r3, #4294967295
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	21d0      	movs	r1, #208	@ 0xd0
 8002f30:	482e      	ldr	r0, [pc, #184]	@ (8002fec <initIMU+0xd0>)
 8002f32:	f003 fc07 	bl	8006744 <HAL_I2C_IsDeviceReady>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10d      	bne.n	8002f58 <initIMU+0x3c>
	    HAL_I2C_Mem_Read (&hi2c2, IMU_DEVICE_ADDRESS, WHO_AM_I_REG, 1, &data, 1, 1000);
 8002f3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f40:	9302      	str	r3, [sp, #8]
 8002f42:	2301      	movs	r3, #1
 8002f44:	9301      	str	r3, [sp, #4]
 8002f46:	1cfb      	adds	r3, r7, #3
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	2275      	movs	r2, #117	@ 0x75
 8002f4e:	21d0      	movs	r1, #208	@ 0xd0
 8002f50:	4826      	ldr	r0, [pc, #152]	@ (8002fec <initIMU+0xd0>)
 8002f52:	f003 f98f 	bl	8006274 <HAL_I2C_Mem_Read>
	    //printf("Read a value from WHOAMI register: %x\n\r", data);
	    break; // Break when initialized
 8002f56:	e008      	b.n	8002f6a <initIMU+0x4e>
    }
    HAL_Delay(5);
 8002f58:	2005      	movs	r0, #5
 8002f5a:	f001 fbc1 	bl	80046e0 <HAL_Delay>
  for(int i = 0; i < 5; i++) {
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3301      	adds	r3, #1
 8002f62:	607b      	str	r3, [r7, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	ddde      	ble.n	8002f28 <initIMU+0xc>
  /*
   * Next we will wake the sensor up and in order to do that we will write to the
   * “PWR_MGMT_1 (0x6B)�? Register. See below the register content.
   * On writing (0x00) to the PWR_MGMT_1 Register, sensor wakes up and the Clock sets up to 8 MHz.
   */
  data = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Mem_Write(&hi2c2, IMU_DEVICE_ADDRESS, PWR_MGMT_1_REG, 1, &data, 1, 1000);
 8002f6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f72:	9302      	str	r3, [sp, #8]
 8002f74:	2301      	movs	r3, #1
 8002f76:	9301      	str	r3, [sp, #4]
 8002f78:	1cfb      	adds	r3, r7, #3
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	226b      	movs	r2, #107	@ 0x6b
 8002f80:	21d0      	movs	r1, #208	@ 0xd0
 8002f82:	481a      	ldr	r0, [pc, #104]	@ (8002fec <initIMU+0xd0>)
 8002f84:	f003 f87c 	bl	8006080 <HAL_I2C_Mem_Write>
   * rate used to generate the Sample Rate for the MPU6050.
   * As the formula says Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV).
   * Where Gyroscope Output Rate is 8KHz, To get the sample rate of 1KHz,
   * we need to use the SMPLRT_DIV as ‘7’.
   */
  data = 0x07;
 8002f88:	2307      	movs	r3, #7
 8002f8a:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Mem_Write(&hi2c2, IMU_DEVICE_ADDRESS, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 8002f8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f90:	9302      	str	r3, [sp, #8]
 8002f92:	2301      	movs	r3, #1
 8002f94:	9301      	str	r3, [sp, #4]
 8002f96:	1cfb      	adds	r3, r7, #3
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	2219      	movs	r2, #25
 8002f9e:	21d0      	movs	r1, #208	@ 0xd0
 8002fa0:	4812      	ldr	r0, [pc, #72]	@ (8002fec <initIMU+0xd0>)
 8002fa2:	f003 f86d 	bl	8006080 <HAL_I2C_Mem_Write>
   * Now configure the Accelerometer and Gyroscope registers and to do so, we need to modify
   * “GYRO_CONFIG (0x1B)�? and “ACCEL_CONFIG (0x1C)�?Registers.
   * Writing (0x00) to both of these registers would set the Full scale range of ± 2g in ACCEL_CONFIG
   * Register and a Full scale range of ± 250 °/s in GYRO_CONFIG Register along with Self-test disabled.
   */
  data = 0x00;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Mem_Write(&hi2c2, IMU_DEVICE_ADDRESS, GYRO_CONFIG_REG, 1, &data, 1, 1000);
 8002faa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fae:	9302      	str	r3, [sp, #8]
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	9301      	str	r3, [sp, #4]
 8002fb4:	1cfb      	adds	r3, r7, #3
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	2301      	movs	r3, #1
 8002fba:	221b      	movs	r2, #27
 8002fbc:	21d0      	movs	r1, #208	@ 0xd0
 8002fbe:	480b      	ldr	r0, [pc, #44]	@ (8002fec <initIMU+0xd0>)
 8002fc0:	f003 f85e 	bl	8006080 <HAL_I2C_Mem_Write>
  data = 0x00;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Mem_Write(&hi2c2, IMU_DEVICE_ADDRESS, ACCEL_CONFIG_REG, 1, &data, 1, 1000);
 8002fc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fcc:	9302      	str	r3, [sp, #8]
 8002fce:	2301      	movs	r3, #1
 8002fd0:	9301      	str	r3, [sp, #4]
 8002fd2:	1cfb      	adds	r3, r7, #3
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	221c      	movs	r2, #28
 8002fda:	21d0      	movs	r1, #208	@ 0xd0
 8002fdc:	4803      	ldr	r0, [pc, #12]	@ (8002fec <initIMU+0xd0>)
 8002fde:	f003 f84f 	bl	8006080 <HAL_I2C_Mem_Write>


  //printf("IMU Initialized\n\r");


}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	200006b0 	.word	0x200006b0

08002ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ff6:	f001 fb41 	bl	800467c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ffa:	f000 f841 	bl	8003080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ffe:	f7ff fe1f 	bl	8002c40 <MX_GPIO_Init>
  MX_CAN_Init();
 8003002:	f7fe f94b 	bl	800129c <MX_CAN_Init>
  MX_SPI1_Init();
 8003006:	f001 f843 	bl	8004090 <MX_SPI1_Init>
  MX_UART5_Init();
 800300a:	f001 fa27 	bl	800445c <MX_UART5_Init>
  MX_I2C1_Init();
 800300e:	f7ff febd 	bl	8002d8c <MX_I2C1_Init>
  MX_I2C2_Init();
 8003012:	f7ff fee9 	bl	8002de8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8003016:	f001 fa4b 	bl	80044b0 <MX_USART1_UART_Init>
  MX_RTC_Init();
 800301a:	f000 fe0d 	bl	8003c38 <MX_RTC_Init>
  MX_FATFS_Init();
 800301e:	f006 fd21 	bl	8009a64 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  DebugIO_Init(&huart5);
 8003022:	4813      	ldr	r0, [pc, #76]	@ (8003070 <main+0x80>)
 8003024:	f7fe fa6a 	bl	80014fc <DebugIO_Init>
  initIMU();
 8003028:	f7ff ff78 	bl	8002f1c <initIMU>

  // Sync with RTC if date = Jan 1 2000 or GPIO is set to high
  RTC_DateTypeDef curr_date;
  RTC_TimeTypeDef curr_time;
  HAL_RTC_GetDate(&hrtc, &curr_date, RTC_FORMAT_BIN);
 800302c:	1d3b      	adds	r3, r7, #4
 800302e:	2200      	movs	r2, #0
 8003030:	4619      	mov	r1, r3
 8003032:	4810      	ldr	r0, [pc, #64]	@ (8003074 <main+0x84>)
 8003034:	f005 f9c2 	bl	80083bc <HAL_RTC_GetDate>
  /* Sync the RTC with GPS if date is Jan 1, 2000 */
  if ((curr_date.Month == RTC_MONTH_JANUARY && curr_date.Date == 1 && curr_date.Year == 0) || HAL_GPIO_ReadPin(RTC_SYNC_GPIO_Port, RTC_SYNC_Pin) == GPIO_PIN_SET) {
 8003038:	797b      	ldrb	r3, [r7, #5]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d105      	bne.n	800304a <main+0x5a>
 800303e:	79bb      	ldrb	r3, [r7, #6]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d102      	bne.n	800304a <main+0x5a>
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d006      	beq.n	8003058 <main+0x68>
 800304a:	2104      	movs	r1, #4
 800304c:	480a      	ldr	r0, [pc, #40]	@ (8003078 <main+0x88>)
 800304e:	f002 fc1f 	bl	8005890 <HAL_GPIO_ReadPin>
 8003052:	4603      	mov	r3, r0
 8003054:	2b01      	cmp	r3, #1
 8003056:	d104      	bne.n	8003062 <main+0x72>
      Sync_RTC_With_GPS();
 8003058:	f000 fe5c 	bl	8003d14 <Sync_RTC_With_GPS>
      g_tel_diagnostics.rtc_reset = true;
 800305c:	4b07      	ldr	r3, [pc, #28]	@ (800307c <main+0x8c>)
 800305e:	2201      	movs	r2, #1
 8003060:	701a      	strb	r2, [r3, #0]
//  sd_append(logfile, startup_message);

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003062:	f7fe ff89 	bl	8001f78 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003066:	f006 fdea 	bl	8009c3e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800306a:	bf00      	nop
 800306c:	e7fd      	b.n	800306a <main+0x7a>
 800306e:	bf00      	nop
 8003070:	2000082c 	.word	0x2000082c
 8003074:	20000770 	.word	0x20000770
 8003078:	40010800 	.word	0x40010800
 800307c:	20000704 	.word	0x20000704

08003080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b096      	sub	sp, #88	@ 0x58
 8003084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003086:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800308a:	2228      	movs	r2, #40	@ 0x28
 800308c:	2100      	movs	r1, #0
 800308e:	4618      	mov	r0, r3
 8003090:	f00b f871 	bl	800e176 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003094:	f107 031c 	add.w	r3, r7, #28
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	605a      	str	r2, [r3, #4]
 800309e:	609a      	str	r2, [r3, #8]
 80030a0:	60da      	str	r2, [r3, #12]
 80030a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030a4:	1d3b      	adds	r3, r7, #4
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	605a      	str	r2, [r3, #4]
 80030ac:	609a      	str	r2, [r3, #8]
 80030ae:	60da      	str	r2, [r3, #12]
 80030b0:	611a      	str	r2, [r3, #16]
 80030b2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80030b4:	2305      	movs	r3, #5
 80030b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80030be:	2300      	movs	r3, #0
 80030c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80030c2:	2301      	movs	r3, #1
 80030c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030c6:	2301      	movs	r3, #1
 80030c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030ca:	2302      	movs	r3, #2
 80030cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030d2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80030d4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80030d8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030da:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80030de:	4618      	mov	r0, r3
 80030e0:	f004 f8ec 	bl	80072bc <HAL_RCC_OscConfig>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80030ea:	f000 f83b 	bl	8003164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030ee:	230f      	movs	r3, #15
 80030f0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030f2:	2302      	movs	r3, #2
 80030f4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030f6:	2300      	movs	r3, #0
 80030f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003100:	2300      	movs	r3, #0
 8003102:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003104:	f107 031c 	add.w	r3, r7, #28
 8003108:	2102      	movs	r1, #2
 800310a:	4618      	mov	r0, r3
 800310c:	f004 fb58 	bl	80077c0 <HAL_RCC_ClockConfig>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003116:	f000 f825 	bl	8003164 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800311a:	2301      	movs	r3, #1
 800311c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800311e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003122:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003124:	1d3b      	adds	r3, r7, #4
 8003126:	4618      	mov	r0, r3
 8003128:	f004 fd08 	bl	8007b3c <HAL_RCCEx_PeriphCLKConfig>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8003132:	f000 f817 	bl	8003164 <Error_Handler>
  }
}
 8003136:	bf00      	nop
 8003138:	3758      	adds	r7, #88	@ 0x58
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a04      	ldr	r2, [pc, #16]	@ (8003160 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d101      	bne.n	8003156 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003152:	f001 faa9 	bl	80046a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40012c00 	.word	0x40012c00

08003164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003168:	b672      	cpsid	i
}
 800316a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800316c:	bf00      	nop
 800316e:	e7fd      	b.n	800316c <Error_Handler+0x8>

08003170 <nmea_GPGGA>:
    else{
        return 0;
    }
}

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8003170:	b590      	push	{r4, r7, lr}
 8003172:	b0b7      	sub	sp, #220	@ 0xdc
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    memset(values, 0, sizeof(values));
 8003180:	f107 0320 	add.w	r3, r7, #32
 8003184:	2264      	movs	r2, #100	@ 0x64
 8003186:	2100      	movs	r1, #0
 8003188:	4618      	mov	r0, r3
 800318a:	f00a fff4 	bl	800e176 <memset>
    char *marker = strtok(inputString, ",");
 800318e:	49c5      	ldr	r1, [pc, #788]	@ (80034a4 <nmea_GPGGA+0x334>)
 8003190:	6838      	ldr	r0, [r7, #0]
 8003192:	f00b f82b 	bl	800e1ec <strtok>
 8003196:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 800319a:	e027      	b.n	80031ec <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 800319c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 80031a0:	f7fd f850 	bl	8000244 <strlen>
 80031a4:	4603      	mov	r3, r0
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	f8d7 40d4 	ldr.w	r4, [r7, #212]	@ 0xd4
 80031ac:	1c63      	adds	r3, r4, #1
 80031ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80031b2:	4610      	mov	r0, r2
 80031b4:	f009 fad2 	bl	800c75c <malloc>
 80031b8:	4603      	mov	r3, r0
 80031ba:	461a      	mov	r2, r3
 80031bc:	00a3      	lsls	r3, r4, #2
 80031be:	33d8      	adds	r3, #216	@ 0xd8
 80031c0:	443b      	add	r3, r7
 80031c2:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 80031c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031ca:	3b01      	subs	r3, #1
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	33d8      	adds	r3, #216	@ 0xd8
 80031d0:	443b      	add	r3, r7
 80031d2:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80031d6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80031da:	4618      	mov	r0, r3
 80031dc:	f00b feb9 	bl	800ef52 <strcpy>
        marker = strtok(NULL, ",");
 80031e0:	49b0      	ldr	r1, [pc, #704]	@ (80034a4 <nmea_GPGGA+0x334>)
 80031e2:	2000      	movs	r0, #0
 80031e4:	f00b f802 	bl	800e1ec <strtok>
 80031e8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 80031ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1d3      	bne.n	800319c <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 80031f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    char latSide = values[3][0];
 80031fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	332c      	adds	r3, #44	@ 0x2c
 8003208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800320a:	4611      	mov	r1, r2
 800320c:	4618      	mov	r0, r3
 800320e:	f00b fea0 	bl	800ef52 <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8003212:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8003216:	2b53      	cmp	r3, #83	@ 0x53
 8003218:	d004      	beq.n	8003224 <nmea_GPGGA+0xb4>
 800321a:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 800321e:	2b4e      	cmp	r3, #78	@ 0x4e
 8003220:	f040 815f 	bne.w	80034e2 <nmea_GPGGA+0x372>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8003224:	2300      	movs	r3, #0
 8003226:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800322a:	e010      	b.n	800324e <nmea_GPGGA+0xde>
 800322c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800322e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003232:	4413      	add	r3, r2
 8003234:	7819      	ldrb	r1, [r3, #0]
 8003236:	f107 021c 	add.w	r2, r7, #28
 800323a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800323e:	4413      	add	r3, r2
 8003240:	460a      	mov	r2, r1
 8003242:	701a      	strb	r2, [r3, #0]
 8003244:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003248:	3301      	adds	r3, #1
 800324a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800324e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003252:	2b01      	cmp	r3, #1
 8003254:	ddea      	ble.n	800322c <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8003256:	2300      	movs	r3, #0
 8003258:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800325c:	e011      	b.n	8003282 <nmea_GPGGA+0x112>
 800325e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003260:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003264:	3302      	adds	r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	7819      	ldrb	r1, [r3, #0]
 800326a:	f107 0214 	add.w	r2, r7, #20
 800326e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003272:	4413      	add	r3, r2
 8003274:	460a      	mov	r2, r1
 8003276:	701a      	strb	r2, [r3, #0]
 8003278:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800327c:	3301      	adds	r3, #1
 800327e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003282:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003286:	2b05      	cmp	r3, #5
 8003288:	dde9      	ble.n	800325e <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 800328a:	f107 031c 	add.w	r3, r7, #28
 800328e:	220a      	movs	r2, #10
 8003290:	2100      	movs	r1, #0
 8003292:	4618      	mov	r0, r3
 8003294:	f00a f9f0 	bl	800d678 <strtol>
 8003298:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 800329c:	f107 0314 	add.w	r3, r7, #20
 80032a0:	2100      	movs	r1, #0
 80032a2:	4618      	mov	r0, r3
 80032a4:	f00a f914 	bl	800d4d0 <strtof>
 80032a8:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 80032ac:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80032b0:	f7fd fd8e 	bl	8000dd0 <__aeabi_i2f>
 80032b4:	4604      	mov	r4, r0
 80032b6:	497c      	ldr	r1, [pc, #496]	@ (80034a8 <nmea_GPGGA+0x338>)
 80032b8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80032bc:	f7fd fe90 	bl	8000fe0 <__aeabi_fdiv>
 80032c0:	4603      	mov	r3, r0
 80032c2:	4619      	mov	r1, r3
 80032c4:	4620      	mov	r0, r4
 80032c6:	f7fd fccf 	bl	8000c68 <__addsf3>
 80032ca:	4603      	mov	r3, r0
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fd f925 	bl	800051c <__aeabi_f2d>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 80032da:	2300      	movs	r3, #0
 80032dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80032e0:	e010      	b.n	8003304 <nmea_GPGGA+0x194>
 80032e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032e8:	4413      	add	r3, r2
 80032ea:	7819      	ldrb	r1, [r3, #0]
 80032ec:	f107 0210 	add.w	r2, r7, #16
 80032f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032f4:	4413      	add	r3, r2
 80032f6:	460a      	mov	r2, r1
 80032f8:	701a      	strb	r2, [r3, #0]
 80032fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032fe:	3301      	adds	r3, #1
 8003300:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003304:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003308:	2b02      	cmp	r3, #2
 800330a:	ddea      	ble.n	80032e2 <nmea_GPGGA+0x172>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 800330c:	2300      	movs	r3, #0
 800330e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003312:	e011      	b.n	8003338 <nmea_GPGGA+0x1c8>
 8003314:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003316:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800331a:	3303      	adds	r3, #3
 800331c:	4413      	add	r3, r2
 800331e:	7819      	ldrb	r1, [r3, #0]
 8003320:	f107 0208 	add.w	r2, r7, #8
 8003324:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003328:	4413      	add	r3, r2
 800332a:	460a      	mov	r2, r1
 800332c:	701a      	strb	r2, [r3, #0]
 800332e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003332:	3301      	adds	r3, #1
 8003334:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003338:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800333c:	2b05      	cmp	r3, #5
 800333e:	dde9      	ble.n	8003314 <nmea_GPGGA+0x1a4>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8003340:	f107 0310 	add.w	r3, r7, #16
 8003344:	220a      	movs	r2, #10
 8003346:	2100      	movs	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f00a f995 	bl	800d678 <strtol>
 800334e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8003352:	f107 0308 	add.w	r3, r7, #8
 8003356:	2100      	movs	r1, #0
 8003358:	4618      	mov	r0, r3
 800335a:	f00a f8b9 	bl	800d4d0 <strtof>
 800335e:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8003362:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003366:	f7fd fd33 	bl	8000dd0 <__aeabi_i2f>
 800336a:	4604      	mov	r4, r0
 800336c:	494e      	ldr	r1, [pc, #312]	@ (80034a8 <nmea_GPGGA+0x338>)
 800336e:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8003372:	f7fd fe35 	bl	8000fe0 <__aeabi_fdiv>
 8003376:	4603      	mov	r3, r0
 8003378:	4619      	mov	r1, r3
 800337a:	4620      	mov	r0, r4
 800337c:	f7fd fc74 	bl	8000c68 <__addsf3>
 8003380:	4603      	mov	r3, r0
 8003382:	4618      	mov	r0, r3
 8003384:	f7fd f8ca 	bl	800051c <__aeabi_f2d>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800339c:	f7fd fb7e 	bl	8000a9c <__aeabi_dcmpeq>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d17a      	bne.n	800349c <nmea_GPGGA+0x32c>
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80033b2:	f7fd fb73 	bl	8000a9c <__aeabi_dcmpeq>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d16f      	bne.n	800349c <nmea_GPGGA+0x32c>
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	4b3a      	ldr	r3, [pc, #232]	@ (80034ac <nmea_GPGGA+0x33c>)
 80033c2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80033c6:	f7fd fb73 	bl	8000ab0 <__aeabi_dcmplt>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d065      	beq.n	800349c <nmea_GPGGA+0x32c>
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	4b36      	ldr	r3, [pc, #216]	@ (80034b0 <nmea_GPGGA+0x340>)
 80033d6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80033da:	f7fd fb69 	bl	8000ab0 <__aeabi_dcmplt>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d05b      	beq.n	800349c <nmea_GPGGA+0x32c>
            gps_data->latitude = lat_deg;
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80033ea:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f897 20b6 	ldrb.w	r2, [r7, #182]	@ 0xb6
 80033f4:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80033fc:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 8003406:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8003408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800340a:	2100      	movs	r1, #0
 800340c:	4618      	mov	r0, r3
 800340e:	f00a f85f 	bl	800d4d0 <strtof>
 8003412:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 8003416:	f04f 0100 	mov.w	r1, #0
 800341a:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800341e:	f7fd febf 	bl	80011a0 <__aeabi_fcmpeq>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <nmea_GPGGA+0x2be>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	e001      	b.n	8003432 <nmea_GPGGA+0x2c2>
 800342e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 8003436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003438:	220a      	movs	r2, #10
 800343a:	2100      	movs	r1, #0
 800343c:	4618      	mov	r0, r3
 800343e:	f00a f91b 	bl	800d678 <strtol>
 8003442:	4602      	mov	r2, r0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	625a      	str	r2, [r3, #36]	@ 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8003448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800344a:	220a      	movs	r2, #10
 800344c:	2100      	movs	r1, #0
 800344e:	4618      	mov	r0, r3
 8003450:	f00a f912 	bl	800d678 <strtol>
 8003454:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8003458:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800345c:	2b00      	cmp	r3, #0
 800345e:	bfcc      	ite	gt
 8003460:	2301      	movgt	r3, #1
 8003462:	2300      	movle	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	629a      	str	r2, [r3, #40]	@ 0x28

            float hdop = strtof(values[8], NULL);
 800346c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800346e:	2100      	movs	r1, #0
 8003470:	4618      	mov	r0, r3
 8003472:	f00a f82d 	bl	800d4d0 <strtof>
 8003476:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 800347a:	f04f 0100 	mov.w	r1, #0
 800347e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8003482:	f7fd fe8d 	bl	80011a0 <__aeabi_fcmpeq>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <nmea_GPGGA+0x322>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	e001      	b.n	8003496 <nmea_GPGGA+0x326>
 8003492:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 800349a:	e022      	b.n	80034e2 <nmea_GPGGA+0x372>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 800349c:	2300      	movs	r3, #0
 800349e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80034a2:	e016      	b.n	80034d2 <nmea_GPGGA+0x362>
 80034a4:	08011e98 	.word	0x08011e98
 80034a8:	42700000 	.word	0x42700000
 80034ac:	40568000 	.word	0x40568000
 80034b0:	40668000 	.word	0x40668000
 80034b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	33d8      	adds	r3, #216	@ 0xd8
 80034bc:	443b      	add	r3, r7
 80034be:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f009 f952 	bl	800c76c <free>
 80034c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80034cc:	3301      	adds	r3, #1
 80034ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80034d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80034d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034da:	429a      	cmp	r2, r3
 80034dc:	dbea      	blt.n	80034b4 <nmea_GPGGA+0x344>
            return 0;
 80034de:	2300      	movs	r3, #0
 80034e0:	e019      	b.n	8003516 <nmea_GPGGA+0x3a6>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 80034e2:	2300      	movs	r3, #0
 80034e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034e8:	e00e      	b.n	8003508 <nmea_GPGGA+0x398>
 80034ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	33d8      	adds	r3, #216	@ 0xd8
 80034f2:	443b      	add	r3, r7
 80034f4:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f009 f937 	bl	800c76c <free>
 80034fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003502:	3301      	adds	r3, #1
 8003504:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003508:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800350c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003510:	429a      	cmp	r2, r3
 8003512:	dbea      	blt.n	80034ea <nmea_GPGGA+0x37a>
    return 1;
 8003514:	2301      	movs	r3, #1
}
 8003516:	4618      	mov	r0, r3
 8003518:	37dc      	adds	r7, #220	@ 0xdc
 800351a:	46bd      	mov	sp, r7
 800351c:	bd90      	pop	{r4, r7, pc}
 800351e:	bf00      	nop

08003520 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8003520:	b590      	push	{r4, r7, lr}
 8003522:	b0a3      	sub	sp, #140	@ 0x8c
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 800352a:	2300      	movs	r3, #0
 800352c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    memset(values, 0, sizeof(values));
 8003530:	f107 030c 	add.w	r3, r7, #12
 8003534:	2264      	movs	r2, #100	@ 0x64
 8003536:	2100      	movs	r1, #0
 8003538:	4618      	mov	r0, r3
 800353a:	f00a fe1c 	bl	800e176 <memset>
    char *marker = strtok(inputString, ",");
 800353e:	493b      	ldr	r1, [pc, #236]	@ (800362c <nmea_GPGSA+0x10c>)
 8003540:	6838      	ldr	r0, [r7, #0]
 8003542:	f00a fe53 	bl	800e1ec <strtok>
 8003546:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while (marker != NULL) {
 800354a:	e027      	b.n	800359c <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 800354c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003550:	f7fc fe78 	bl	8000244 <strlen>
 8003554:	4603      	mov	r3, r0
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 800355c:	1c63      	adds	r3, r4, #1
 800355e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003562:	4610      	mov	r0, r2
 8003564:	f009 f8fa 	bl	800c75c <malloc>
 8003568:	4603      	mov	r3, r0
 800356a:	461a      	mov	r2, r3
 800356c:	00a3      	lsls	r3, r4, #2
 800356e:	3388      	adds	r3, #136	@ 0x88
 8003570:	443b      	add	r3, r7
 8003572:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 8003576:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800357a:	3b01      	subs	r3, #1
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	3388      	adds	r3, #136	@ 0x88
 8003580:	443b      	add	r3, r7
 8003582:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8003586:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800358a:	4618      	mov	r0, r3
 800358c:	f00b fce1 	bl	800ef52 <strcpy>
        marker = strtok(NULL, ",");
 8003590:	4926      	ldr	r1, [pc, #152]	@ (800362c <nmea_GPGSA+0x10c>)
 8003592:	2000      	movs	r0, #0
 8003594:	f00a fe2a 	bl	800e1ec <strtok>
 8003598:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while (marker != NULL) {
 800359c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1d3      	bne.n	800354c <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	220a      	movs	r2, #10
 80035a8:	2100      	movs	r1, #0
 80035aa:	4618      	mov	r0, r3
 80035ac:	f00a f864 	bl	800d678 <strtol>
 80035b0:	6738      	str	r0, [r7, #112]	@ 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 80035b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	bfcc      	ite	gt
 80035b8:	2301      	movgt	r3, #1
 80035ba:	2300      	movle	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	461a      	mov	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	629a      	str	r2, [r3, #40]	@ 0x28
    int satelliteCount = 0;
 80035c4:	2300      	movs	r3, #0
 80035c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for(int i=3; i<15; i++){
 80035c8:	2303      	movs	r3, #3
 80035ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035cc:	e00e      	b.n	80035ec <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 80035ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	3388      	adds	r3, #136	@ 0x88
 80035d4:	443b      	add	r3, r7
 80035d6:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <nmea_GPGSA+0xc6>
            satelliteCount++;
 80035e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035e2:	3301      	adds	r3, #1
 80035e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for(int i=3; i<15; i++){
 80035e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035e8:	3301      	adds	r3, #1
 80035ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035ee:	2b0e      	cmp	r3, #14
 80035f0:	dded      	ble.n	80035ce <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80035f6:	625a      	str	r2, [r3, #36]	@ 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 80035f8:	2300      	movs	r3, #0
 80035fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80035fc:	e00b      	b.n	8003616 <nmea_GPGSA+0xf6>
 80035fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	3388      	adds	r3, #136	@ 0x88
 8003604:	443b      	add	r3, r7
 8003606:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800360a:	4618      	mov	r0, r3
 800360c:	f009 f8ae 	bl	800c76c <free>
 8003610:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003612:	3301      	adds	r3, #1
 8003614:	677b      	str	r3, [r7, #116]	@ 0x74
 8003616:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003618:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800361c:	429a      	cmp	r2, r3
 800361e:	dbee      	blt.n	80035fe <nmea_GPGSA+0xde>
    return 1;
 8003620:	2301      	movs	r3, #1
}
 8003622:	4618      	mov	r0, r3
 8003624:	378c      	adds	r7, #140	@ 0x8c
 8003626:	46bd      	mov	sp, r7
 8003628:	bd90      	pop	{r4, r7, pc}
 800362a:	bf00      	nop
 800362c:	08011e98 	.word	0x08011e98

08003630 <nmea_GPGLL>:



int nmea_GPGLL(GPS *gps_data, char*inputString) {
 8003630:	b590      	push	{r4, r7, lr}
 8003632:	b0b7      	sub	sp, #220	@ 0xdc
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]

    char *values[25];
    int counter = 0;
 800363a:	2300      	movs	r3, #0
 800363c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    memset(values, 0, sizeof(values));
 8003640:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003644:	2264      	movs	r2, #100	@ 0x64
 8003646:	2100      	movs	r1, #0
 8003648:	4618      	mov	r0, r3
 800364a:	f00a fd94 	bl	800e176 <memset>
    char *marker = strtok(inputString, ",");
 800364e:	49b0      	ldr	r1, [pc, #704]	@ (8003910 <nmea_GPGLL+0x2e0>)
 8003650:	6838      	ldr	r0, [r7, #0]
 8003652:	f00a fdcb 	bl	800e1ec <strtok>
 8003656:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 800365a:	e027      	b.n	80036ac <nmea_GPGLL+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 800365c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8003660:	f7fc fdf0 	bl	8000244 <strlen>
 8003664:	4603      	mov	r3, r0
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	f8d7 40d4 	ldr.w	r4, [r7, #212]	@ 0xd4
 800366c:	1c63      	adds	r3, r4, #1
 800366e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003672:	4610      	mov	r0, r2
 8003674:	f009 f872 	bl	800c75c <malloc>
 8003678:	4603      	mov	r3, r0
 800367a:	461a      	mov	r2, r3
 800367c:	00a3      	lsls	r3, r4, #2
 800367e:	33d8      	adds	r3, #216	@ 0xd8
 8003680:	443b      	add	r3, r7
 8003682:	f843 2cb4 	str.w	r2, [r3, #-180]
        strcpy(values[counter - 1], marker);
 8003686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800368a:	3b01      	subs	r3, #1
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	33d8      	adds	r3, #216	@ 0xd8
 8003690:	443b      	add	r3, r7
 8003692:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8003696:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800369a:	4618      	mov	r0, r3
 800369c:	f00b fc59 	bl	800ef52 <strcpy>
        marker = strtok(NULL, ",");
 80036a0:	499b      	ldr	r1, [pc, #620]	@ (8003910 <nmea_GPGLL+0x2e0>)
 80036a2:	2000      	movs	r0, #0
 80036a4:	f00a fda2 	bl	800e1ec <strtok>
 80036a8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 80036ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1d3      	bne.n	800365c <nmea_GPGLL+0x2c>
    }
    char latSide = values[2][0];
 80036b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    if (latSide == 'S' || latSide == 'N') { //check if data is sorta intact
 80036bc:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 80036c0:	2b53      	cmp	r3, #83	@ 0x53
 80036c2:	d004      	beq.n	80036ce <nmea_GPGLL+0x9e>
 80036c4:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 80036c8:	2b4e      	cmp	r3, #78	@ 0x4e
 80036ca:	f040 811c 	bne.w	8003906 <nmea_GPGLL+0x2d6>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[1][z];
 80036ce:	2300      	movs	r3, #0
 80036d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80036d4:	e010      	b.n	80036f8 <nmea_GPGLL+0xc8>
 80036d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036dc:	4413      	add	r3, r2
 80036de:	7819      	ldrb	r1, [r3, #0]
 80036e0:	f107 0220 	add.w	r2, r7, #32
 80036e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036e8:	4413      	add	r3, r2
 80036ea:	460a      	mov	r2, r1
 80036ec:	701a      	strb	r2, [r3, #0]
 80036ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036f2:	3301      	adds	r3, #1
 80036f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80036f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	ddea      	ble.n	80036d6 <nmea_GPGLL+0xa6>
        for (int z = 0; z < 6; z++) lat_m[z] = values[1][z + 2];
 8003700:	2300      	movs	r3, #0
 8003702:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003706:	e011      	b.n	800372c <nmea_GPGLL+0xfc>
 8003708:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800370a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800370e:	3302      	adds	r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	7819      	ldrb	r1, [r3, #0]
 8003714:	f107 0218 	add.w	r2, r7, #24
 8003718:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800371c:	4413      	add	r3, r2
 800371e:	460a      	mov	r2, r1
 8003720:	701a      	strb	r2, [r3, #0]
 8003722:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003726:	3301      	adds	r3, #1
 8003728:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800372c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003730:	2b05      	cmp	r3, #5
 8003732:	dde9      	ble.n	8003708 <nmea_GPGLL+0xd8>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8003734:	f107 0320 	add.w	r3, r7, #32
 8003738:	220a      	movs	r2, #10
 800373a:	2100      	movs	r1, #0
 800373c:	4618      	mov	r0, r3
 800373e:	f009 ff9b 	bl	800d678 <strtol>
 8003742:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8003746:	f107 0318 	add.w	r3, r7, #24
 800374a:	2100      	movs	r1, #0
 800374c:	4618      	mov	r0, r3
 800374e:	f009 febf 	bl	800d4d0 <strtof>
 8003752:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8003756:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800375a:	f7fd fb39 	bl	8000dd0 <__aeabi_i2f>
 800375e:	4604      	mov	r4, r0
 8003760:	496c      	ldr	r1, [pc, #432]	@ (8003914 <nmea_GPGLL+0x2e4>)
 8003762:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8003766:	f7fd fc3b 	bl	8000fe0 <__aeabi_fdiv>
 800376a:	4603      	mov	r3, r0
 800376c:	4619      	mov	r1, r3
 800376e:	4620      	mov	r0, r4
 8003770:	f7fd fa7a 	bl	8000c68 <__addsf3>
 8003774:	4603      	mov	r3, r0
 8003776:	4618      	mov	r0, r3
 8003778:	f7fc fed0 	bl	800051c <__aeabi_f2d>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

        char lon_d[3];
        char lon_m[7];
        char lonSide = values[4][0];
 8003784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
        for (int z = 0; z < 3; z++) lon_d[z] = values[3][z];
 800378c:	2300      	movs	r3, #0
 800378e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003792:	e010      	b.n	80037b6 <nmea_GPGLL+0x186>
 8003794:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003796:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800379a:	4413      	add	r3, r2
 800379c:	7819      	ldrb	r1, [r3, #0]
 800379e:	f107 0214 	add.w	r2, r7, #20
 80037a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037a6:	4413      	add	r3, r2
 80037a8:	460a      	mov	r2, r1
 80037aa:	701a      	strb	r2, [r3, #0]
 80037ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037b0:	3301      	adds	r3, #1
 80037b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80037b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	ddea      	ble.n	8003794 <nmea_GPGLL+0x164>
        for (int z = 0; z < 6; z++) lon_m[z] = values[3][z + 3];
 80037be:	2300      	movs	r3, #0
 80037c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037c4:	e011      	b.n	80037ea <nmea_GPGLL+0x1ba>
 80037c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80037cc:	3303      	adds	r3, #3
 80037ce:	4413      	add	r3, r2
 80037d0:	7819      	ldrb	r1, [r3, #0]
 80037d2:	f107 020c 	add.w	r2, r7, #12
 80037d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80037da:	4413      	add	r3, r2
 80037dc:	460a      	mov	r2, r1
 80037de:	701a      	strb	r2, [r3, #0]
 80037e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80037e4:	3301      	adds	r3, #1
 80037e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80037ee:	2b05      	cmp	r3, #5
 80037f0:	dde9      	ble.n	80037c6 <nmea_GPGLL+0x196>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 80037f2:	f107 0314 	add.w	r3, r7, #20
 80037f6:	220a      	movs	r2, #10
 80037f8:	2100      	movs	r1, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	f009 ff3c 	bl	800d678 <strtol>
 8003800:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
        float lon_min_strtof = strtof(lon_m, NULL);
 8003804:	f107 030c 	add.w	r3, r7, #12
 8003808:	2100      	movs	r1, #0
 800380a:	4618      	mov	r0, r3
 800380c:	f009 fe60 	bl	800d4d0 <strtof>
 8003810:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8003814:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8003818:	f7fd fada 	bl	8000dd0 <__aeabi_i2f>
 800381c:	4604      	mov	r4, r0
 800381e:	493d      	ldr	r1, [pc, #244]	@ (8003914 <nmea_GPGLL+0x2e4>)
 8003820:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8003824:	f7fd fbdc 	bl	8000fe0 <__aeabi_fdiv>
 8003828:	4603      	mov	r3, r0
 800382a:	4619      	mov	r1, r3
 800382c:	4620      	mov	r0, r4
 800382e:	f7fd fa1b 	bl	8000c68 <__addsf3>
 8003832:	4603      	mov	r3, r0
 8003834:	4618      	mov	r0, r3
 8003836:	f7fc fe71 	bl	800051c <__aeabi_f2d>
 800383a:	4602      	mov	r2, r0
 800383c:	460b      	mov	r3, r1
 800383e:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
        //confirm that we aren't on null island
        if(lon_deg_strtol == 0 || lon_min_strtof == 0 || lat_deg_strtol == 0 || lat_min_strtof == 0) {
 8003842:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003846:	2b00      	cmp	r3, #0
 8003848:	d015      	beq.n	8003876 <nmea_GPGLL+0x246>
 800384a:	f04f 0100 	mov.w	r1, #0
 800384e:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8003852:	f7fd fca5 	bl	80011a0 <__aeabi_fcmpeq>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10c      	bne.n	8003876 <nmea_GPGLL+0x246>
 800385c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d008      	beq.n	8003876 <nmea_GPGLL+0x246>
 8003864:	f04f 0100 	mov.w	r1, #0
 8003868:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800386c:	f7fd fc98 	bl	80011a0 <__aeabi_fcmpeq>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d01a      	beq.n	80038ac <nmea_GPGLL+0x27c>
            for(int i = 0; i<counter; i++) free(values[i]);
 8003876:	2300      	movs	r3, #0
 8003878:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800387c:	e00e      	b.n	800389c <nmea_GPGLL+0x26c>
 800387e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	33d8      	adds	r3, #216	@ 0xd8
 8003886:	443b      	add	r3, r7
 8003888:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 800388c:	4618      	mov	r0, r3
 800388e:	f008 ff6d 	bl	800c76c <free>
 8003892:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003896:	3301      	adds	r3, #1
 8003898:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800389c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80038a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038a4:	429a      	cmp	r2, r3
 80038a6:	dbea      	blt.n	800387e <nmea_GPGLL+0x24e>
            return 0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	e02d      	b.n	8003908 <nmea_GPGLL+0x2d8>
        }
        else{
            gps_data->latitude = lat_deg;
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80038b2:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->longitude = lon_deg;
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80038bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->latSide = latSide;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 80038c6:	721a      	strb	r2, [r3, #8]
            gps_data->lonSide = lonSide;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 80038ce:	761a      	strb	r2, [r3, #24]
            for(int i = 0; i<counter; i++) free(values[i]);
 80038d0:	2300      	movs	r3, #0
 80038d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038d6:	e00e      	b.n	80038f6 <nmea_GPGLL+0x2c6>
 80038d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	33d8      	adds	r3, #216	@ 0xd8
 80038e0:	443b      	add	r3, r7
 80038e2:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f008 ff40 	bl	800c76c <free>
 80038ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80038f0:	3301      	adds	r3, #1
 80038f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80038fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038fe:	429a      	cmp	r2, r3
 8003900:	dbea      	blt.n	80038d8 <nmea_GPGLL+0x2a8>
            return 1;
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <nmea_GPGLL+0x2d8>
        }
    }
    else return 0;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	37dc      	adds	r7, #220	@ 0xdc
 800390c:	46bd      	mov	sp, r7
 800390e:	bd90      	pop	{r4, r7, pc}
 8003910:	08011e98 	.word	0x08011e98
 8003914:	42700000 	.word	0x42700000

08003918 <nmea_GPRMC>:


int nmea_GPRMC(GPS *gps_data, char* inputString) {
 8003918:	b580      	push	{r7, lr}
 800391a:	b0a0      	sub	sp, #128	@ 0x80
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]

    char *values[25];
    int counter = 0;
 8003922:	2300      	movs	r3, #0
 8003924:	67fb      	str	r3, [r7, #124]	@ 0x7c
    memset(values, 0, sizeof(values));
 8003926:	f107 0308 	add.w	r3, r7, #8
 800392a:	2264      	movs	r2, #100	@ 0x64
 800392c:	2100      	movs	r1, #0
 800392e:	4618      	mov	r0, r3
 8003930:	f00a fc21 	bl	800e176 <memset>
    char *start = inputString;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	67bb      	str	r3, [r7, #120]	@ 0x78
    char *end;

    // Loop until the end of the string is reached.
    while (start != NULL && *start != '\0') {
 8003938:	e058      	b.n	80039ec <nmea_GPRMC+0xd4>
        end = strchr(start, ',');
 800393a:	212c      	movs	r1, #44	@ 0x2c
 800393c:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800393e:	f00a fc22 	bl	800e186 <strchr>
 8003942:	6778      	str	r0, [r7, #116]	@ 0x74
        if (end == NULL) {
 8003944:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <nmea_GPRMC+0x40>
            // Last token reached.
            end = start + strlen(start);
 800394a:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800394c:	f7fc fc7a 	bl	8000244 <strlen>
 8003950:	4602      	mov	r2, r0
 8003952:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003954:	4413      	add	r3, r2
 8003956:	677b      	str	r3, [r7, #116]	@ 0x74
        }

        if (end == start) {
 8003958:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800395a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800395c:	429a      	cmp	r2, r3
 800395e:	d113      	bne.n	8003988 <nmea_GPRMC+0x70>
            // Empty field found.
            values[counter] = malloc(1); // Allocate space for a single character
 8003960:	2001      	movs	r0, #1
 8003962:	f008 fefb 	bl	800c75c <malloc>
 8003966:	4603      	mov	r3, r0
 8003968:	461a      	mov	r2, r3
 800396a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	3380      	adds	r3, #128	@ 0x80
 8003970:	443b      	add	r3, r7
 8003972:	f843 2c78 	str.w	r2, [r3, #-120]
            values[counter][0] = '\0';   // Set it to the empty string
 8003976:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	3380      	adds	r3, #128	@ 0x80
 800397c:	443b      	add	r3, r7
 800397e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
 8003986:	e027      	b.n	80039d8 <nmea_GPRMC+0xc0>
        } else {
            // Non-empty field found.
            values[counter] = malloc(end - start + 1); // Allocate space for the token
 8003988:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800398a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	3301      	adds	r3, #1
 8003990:	4618      	mov	r0, r3
 8003992:	f008 fee3 	bl	800c75c <malloc>
 8003996:	4603      	mov	r3, r0
 8003998:	461a      	mov	r2, r3
 800399a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	3380      	adds	r3, #128	@ 0x80
 80039a0:	443b      	add	r3, r7
 80039a2:	f843 2c78 	str.w	r2, [r3, #-120]
            strncpy(values[counter], start, end - start); // Copy the token
 80039a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	3380      	adds	r3, #128	@ 0x80
 80039ac:	443b      	add	r3, r7
 80039ae:	f853 0c78 	ldr.w	r0, [r3, #-120]
 80039b2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80039b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	461a      	mov	r2, r3
 80039ba:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80039bc:	f00a fc02 	bl	800e1c4 <strncpy>
            values[counter][end - start] = '\0'; // Null-terminate it
 80039c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	3380      	adds	r3, #128	@ 0x80
 80039c6:	443b      	add	r3, r7
 80039c8:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80039cc:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80039ce:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80039d0:	1a8a      	subs	r2, r1, r2
 80039d2:	4413      	add	r3, r2
 80039d4:	2200      	movs	r2, #0
 80039d6:	701a      	strb	r2, [r3, #0]
        }

        counter++;
 80039d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039da:	3301      	adds	r3, #1
 80039dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
        if (*end == '\0') {
 80039de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <nmea_GPRMC+0xe4>
            // End of the string reached.
            break;
        }
        start = end + 1; // Move to the start of the next token.
 80039e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039e8:	3301      	adds	r3, #1
 80039ea:	67bb      	str	r3, [r7, #120]	@ 0x78
    while (start != NULL && *start != '\0') {
 80039ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d005      	beq.n	80039fe <nmea_GPRMC+0xe6>
 80039f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d19f      	bne.n	800393a <nmea_GPRMC+0x22>
 80039fa:	e000      	b.n	80039fe <nmea_GPRMC+0xe6>
            break;
 80039fc:	bf00      	nop
    }

    // ... (Rest of your code for checking and handling the date and freeing memory)

    // Make sure to check if the date was successfully extracted
    if (counter > 9 && strlen(values[9]) == 6) {
 80039fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a00:	2b09      	cmp	r3, #9
 8003a02:	dd2a      	ble.n	8003a5a <nmea_GPRMC+0x142>
 8003a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fc fc1c 	bl	8000244 <strlen>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b06      	cmp	r3, #6
 8003a10:	d123      	bne.n	8003a5a <nmea_GPRMC+0x142>
        strncpy(gps_data->date, values[9], 6);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3336      	adds	r3, #54	@ 0x36
 8003a16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a18:	2206      	movs	r2, #6
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f00a fbd2 	bl	800e1c4 <strncpy>
        gps_data->date[6] = '\0';
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        // Free allocated memory
        for (int i = 0; i < counter; i++) free(values[i]);
 8003a28:	2300      	movs	r3, #0
 8003a2a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a2c:	e00b      	b.n	8003a46 <nmea_GPRMC+0x12e>
 8003a2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	3380      	adds	r3, #128	@ 0x80
 8003a34:	443b      	add	r3, r7
 8003a36:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f008 fe96 	bl	800c76c <free>
 8003a40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a42:	3301      	adds	r3, #1
 8003a44:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a46:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003a48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	dbef      	blt.n	8003a2e <nmea_GPRMC+0x116>
        gps_data->RMC_Flag = 1;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        return 1; // Success
 8003a56:	2301      	movs	r3, #1
 8003a58:	e013      	b.n	8003a82 <nmea_GPRMC+0x16a>
    } else {
        // Free allocated memory before returning
        for (int i = 0; i < counter; i++) free(values[i]);
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a5e:	e00b      	b.n	8003a78 <nmea_GPRMC+0x160>
 8003a60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	3380      	adds	r3, #128	@ 0x80
 8003a66:	443b      	add	r3, r7
 8003a68:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f008 fe7d 	bl	800c76c <free>
 8003a72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a74:	3301      	adds	r3, #1
 8003a76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a7a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	dbef      	blt.n	8003a60 <nmea_GPRMC+0x148>
        return 0; // Failure
 8003a80:	2300      	movs	r3, #0
    }
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3780      	adds	r7, #128	@ 0x80
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8003a8c:	b590      	push	{r4, r7, lr}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8003a96:	223c      	movs	r2, #60	@ 0x3c
 8003a98:	2100      	movs	r1, #0
 8003a9a:	485e      	ldr	r0, [pc, #376]	@ (8003c14 <nmea_parse+0x188>)
 8003a9c:	f00a fb6b 	bl	800e176 <memset>
    char * token = strtok(buffer, "$"); // TODO: Check if buffer can be casted to a char * for strtok argument
 8003aa0:	495d      	ldr	r1, [pc, #372]	@ (8003c18 <nmea_parse+0x18c>)
 8003aa2:	6838      	ldr	r0, [r7, #0]
 8003aa4:	f00a fba2 	bl	800e1ec <strtok>
 8003aa8:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 8003aae:	e01d      	b.n	8003aec <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8003ab0:	6978      	ldr	r0, [r7, #20]
 8003ab2:	f7fc fbc7 	bl	8000244 <strlen>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	693c      	ldr	r4, [r7, #16]
 8003abc:	1c63      	adds	r3, r4, #1
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	f008 fe4b 	bl	800c75c <malloc>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4b52      	ldr	r3, [pc, #328]	@ (8003c14 <nmea_parse+0x188>)
 8003acc:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	4a4f      	ldr	r2, [pc, #316]	@ (8003c14 <nmea_parse+0x188>)
 8003ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ada:	6979      	ldr	r1, [r7, #20]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f00b fa38 	bl	800ef52 <strcpy>
        token = strtok(NULL, "$");
 8003ae2:	494d      	ldr	r1, [pc, #308]	@ (8003c18 <nmea_parse+0x18c>)
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	f00a fb81 	bl	800e1ec <strtok>
 8003aea:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1de      	bne.n	8003ab0 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	e072      	b.n	8003bde <nmea_parse+0x152>
       if(strstr(data[i], "\r\n")!=NULL){
 8003af8:	4a46      	ldr	r2, [pc, #280]	@ (8003c14 <nmea_parse+0x188>)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b00:	4946      	ldr	r1, [pc, #280]	@ (8003c1c <nmea_parse+0x190>)
 8003b02:	4618      	mov	r0, r3
 8003b04:	f00a fbce 	bl	800e2a4 <strstr>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d064      	beq.n	8003bd8 <nmea_parse+0x14c>
           if(strstr(data[i], "GPGLL")!=NULL){
 8003b0e:	4a41      	ldr	r2, [pc, #260]	@ (8003c14 <nmea_parse+0x188>)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b16:	4942      	ldr	r1, [pc, #264]	@ (8003c20 <nmea_parse+0x194>)
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f00a fbc3 	bl	800e2a4 <strstr>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d008      	beq.n	8003b36 <nmea_parse+0xaa>
               nmea_GPGLL(gps_data, data[i]);
 8003b24:	4a3b      	ldr	r2, [pc, #236]	@ (8003c14 <nmea_parse+0x188>)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7ff fd7e 	bl	8003630 <nmea_GPGLL>
 8003b34:	e050      	b.n	8003bd8 <nmea_parse+0x14c>
           }
           else if(strstr(data[i], "GPGSA")!=NULL){
 8003b36:	4a37      	ldr	r2, [pc, #220]	@ (8003c14 <nmea_parse+0x188>)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b3e:	4939      	ldr	r1, [pc, #228]	@ (8003c24 <nmea_parse+0x198>)
 8003b40:	4618      	mov	r0, r3
 8003b42:	f00a fbaf 	bl	800e2a4 <strstr>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d008      	beq.n	8003b5e <nmea_parse+0xd2>
               nmea_GPGSA(gps_data, data[i]);
 8003b4c:	4a31      	ldr	r2, [pc, #196]	@ (8003c14 <nmea_parse+0x188>)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b54:	4619      	mov	r1, r3
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7ff fce2 	bl	8003520 <nmea_GPGSA>
 8003b5c:	e03c      	b.n	8003bd8 <nmea_parse+0x14c>
           }
           else if(strstr(data[i], "GNGGA") != NULL || (strstr(data[i], "GPGGA"))!=NULL){
 8003b5e:	4a2d      	ldr	r2, [pc, #180]	@ (8003c14 <nmea_parse+0x188>)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b66:	4930      	ldr	r1, [pc, #192]	@ (8003c28 <nmea_parse+0x19c>)
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f00a fb9b 	bl	800e2a4 <strstr>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10a      	bne.n	8003b8a <nmea_parse+0xfe>
 8003b74:	4a27      	ldr	r2, [pc, #156]	@ (8003c14 <nmea_parse+0x188>)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b7c:	492b      	ldr	r1, [pc, #172]	@ (8003c2c <nmea_parse+0x1a0>)
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f00a fb90 	bl	800e2a4 <strstr>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d008      	beq.n	8003b9c <nmea_parse+0x110>
               nmea_GPGGA(gps_data, data[i]);
 8003b8a:	4a22      	ldr	r2, [pc, #136]	@ (8003c14 <nmea_parse+0x188>)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b92:	4619      	mov	r1, r3
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7ff faeb 	bl	8003170 <nmea_GPGGA>
 8003b9a:	e01d      	b.n	8003bd8 <nmea_parse+0x14c>
           }
           else if(strstr(data[i], "GNRMC") != NULL || (strstr(data[i], "GPRMC"))!=NULL){
 8003b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003c14 <nmea_parse+0x188>)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba4:	4922      	ldr	r1, [pc, #136]	@ (8003c30 <nmea_parse+0x1a4>)
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f00a fb7c 	bl	800e2a4 <strstr>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10a      	bne.n	8003bc8 <nmea_parse+0x13c>
 8003bb2:	4a18      	ldr	r2, [pc, #96]	@ (8003c14 <nmea_parse+0x188>)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bba:	491e      	ldr	r1, [pc, #120]	@ (8003c34 <nmea_parse+0x1a8>)
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f00a fb71 	bl	800e2a4 <strstr>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d007      	beq.n	8003bd8 <nmea_parse+0x14c>
	       nmea_GPRMC(gps_data, data[i]);
 8003bc8:	4a12      	ldr	r2, [pc, #72]	@ (8003c14 <nmea_parse+0x188>)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7ff fea0 	bl	8003918 <nmea_GPRMC>
    for(int i = 0; i<cnt; i++){
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	db88      	blt.n	8003af8 <nmea_parse+0x6c>
	   }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 8003be6:	2300      	movs	r3, #0
 8003be8:	60bb      	str	r3, [r7, #8]
 8003bea:	e009      	b.n	8003c00 <nmea_parse+0x174>
 8003bec:	4a09      	ldr	r2, [pc, #36]	@ (8003c14 <nmea_parse+0x188>)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f008 fdb9 	bl	800c76c <free>
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	60bb      	str	r3, [r7, #8]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	dbf1      	blt.n	8003bec <nmea_parse+0x160>


}
 8003c08:	bf00      	nop
 8003c0a:	bf00      	nop
 8003c0c:	371c      	adds	r7, #28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd90      	pop	{r4, r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000734 	.word	0x20000734
 8003c18:	08011e9c 	.word	0x08011e9c
 8003c1c:	08011ea0 	.word	0x08011ea0
 8003c20:	08011ea4 	.word	0x08011ea4
 8003c24:	08011eac 	.word	0x08011eac
 8003c28:	08011eb4 	.word	0x08011eb4
 8003c2c:	08011ebc 	.word	0x08011ebc
 8003c30:	08011ec4 	.word	0x08011ec4
 8003c34:	08011ecc 	.word	0x08011ecc

08003c38 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003c3e:	1d3b      	adds	r3, r7, #4
 8003c40:	2100      	movs	r1, #0
 8003c42:	460a      	mov	r2, r1
 8003c44:	801a      	strh	r2, [r3, #0]
 8003c46:	460a      	mov	r2, r1
 8003c48:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8003cc4 <MX_RTC_Init+0x8c>)
 8003c50:	4a1d      	ldr	r2, [pc, #116]	@ (8003cc8 <MX_RTC_Init+0x90>)
 8003c52:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8003c54:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc4 <MX_RTC_Init+0x8c>)
 8003c56:	f04f 32ff 	mov.w	r2, #4294967295
 8003c5a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8003c5c:	4b19      	ldr	r3, [pc, #100]	@ (8003cc4 <MX_RTC_Init+0x8c>)
 8003c5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c62:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003c64:	4817      	ldr	r0, [pc, #92]	@ (8003cc4 <MX_RTC_Init+0x8c>)
 8003c66:	f004 f8f7 	bl	8007e58 <HAL_RTC_Init>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8003c70:	f7ff fa78 	bl	8003164 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003c80:	1d3b      	adds	r3, r7, #4
 8003c82:	2201      	movs	r2, #1
 8003c84:	4619      	mov	r1, r3
 8003c86:	480f      	ldr	r0, [pc, #60]	@ (8003cc4 <MX_RTC_Init+0x8c>)
 8003c88:	f004 f972 	bl	8007f70 <HAL_RTC_SetTime>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8003c92:	f7ff fa67 	bl	8003164 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003c96:	2301      	movs	r3, #1
 8003c98:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8003ca6:	463b      	mov	r3, r7
 8003ca8:	2201      	movs	r2, #1
 8003caa:	4619      	mov	r1, r3
 8003cac:	4805      	ldr	r0, [pc, #20]	@ (8003cc4 <MX_RTC_Init+0x8c>)
 8003cae:	f004 facf 	bl	8008250 <HAL_RTC_SetDate>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8003cb8:	f7ff fa54 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003cbc:	bf00      	nop
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	20000770 	.word	0x20000770
 8003cc8:	40002800 	.word	0x40002800

08003ccc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a0b      	ldr	r2, [pc, #44]	@ (8003d08 <HAL_RTC_MspInit+0x3c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d110      	bne.n	8003d00 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8003cde:	f003 fae1 	bl	80072a4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8003d0c <HAL_RTC_MspInit+0x40>)
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	4a09      	ldr	r2, [pc, #36]	@ (8003d0c <HAL_RTC_MspInit+0x40>)
 8003ce8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003cec:	61d3      	str	r3, [r2, #28]
 8003cee:	4b07      	ldr	r3, [pc, #28]	@ (8003d0c <HAL_RTC_MspInit+0x40>)
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003cfa:	4b05      	ldr	r3, [pc, #20]	@ (8003d10 <HAL_RTC_MspInit+0x44>)
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003d00:	bf00      	nop
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40002800 	.word	0x40002800
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	4242043c 	.word	0x4242043c

08003d14 <Sync_RTC_With_GPS>:

/* USER CODE BEGIN 1 */


void Sync_RTC_With_GPS()
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	f5ad 6d8b 	sub.w	sp, sp, #1112	@ 0x458
 8003d1a:	af02      	add	r7, sp, #8
  /* Buffers for the GPSTime and GPSDate */
  char GPSTime[256];
  char GPSDate[256];

  /* Flag to track if the sync is complete */
  uint8_t RTC_Sync_Flag = 0;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f887 344f 	strb.w	r3, [r7, #1103]	@ 0x44f

  uint32_t gps_sync_start_time = HAL_GetTick();
 8003d22:	f000 fcd3 	bl	80046cc <HAL_GetTick>
 8003d26:	f8c7 0448 	str.w	r0, [r7, #1096]	@ 0x448
  while(RTC_Sync_Flag == 0 && HAL_GetTick() - gps_sync_start_time < GPS_SYNC_TIMEOUT) {
 8003d2a:	e119      	b.n	8003f60 <Sync_RTC_With_GPS+0x24c>
      printf("Still syncing\n\r");
 8003d2c:	489b      	ldr	r0, [pc, #620]	@ (8003f9c <Sync_RTC_With_GPS+0x288>)
 8003d2e:	f00a f9cb 	bl	800e0c8 <iprintf>
    /* Read in an NMEA message into the buffer */
    if(HAL_I2C_IsDeviceReady(&hi2c1, GPS_DEVICE_ADDRESS, 1, HAL_MAX_DELAY) == HAL_OK) {
 8003d32:	f04f 33ff 	mov.w	r3, #4294967295
 8003d36:	2201      	movs	r2, #1
 8003d38:	2184      	movs	r1, #132	@ 0x84
 8003d3a:	4899      	ldr	r0, [pc, #612]	@ (8003fa0 <Sync_RTC_With_GPS+0x28c>)
 8003d3c:	f002 fd02 	bl	8006744 <HAL_I2C_IsDeviceReady>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f040 810c 	bne.w	8003f60 <Sync_RTC_With_GPS+0x24c>
	    HAL_I2C_Master_Receive(&hi2c1, GPS_DEVICE_ADDRESS, receive_buffer, sizeof(receive_buffer), HAL_MAX_DELAY);
 8003d48:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8003d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d56:	2184      	movs	r1, #132	@ 0x84
 8003d58:	4891      	ldr	r0, [pc, #580]	@ (8003fa0 <Sync_RTC_With_GPS+0x28c>)
 8003d5a:	f001 ff25 	bl	8005ba8 <HAL_I2C_Master_Receive>
	    //printf("Got Data\n\r");

	    GPS myData;
      nmea_parse(&myData, &receive_buffer);
 8003d5e:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8003d62:	463b      	mov	r3, r7
 8003d64:	4611      	mov	r1, r2
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff fe90 	bl	8003a8c <nmea_parse>

      /*
       * lastMeasure is a null-terminated string and has the format hhmmss.sss
       * Make sure there's a valid fix and that there is an RMC message
       */
      if(myData.fix == 1 && myData.RMC_Flag == 1) {
 8003d6c:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003d70:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8003d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	f040 80f2 	bne.w	8003f60 <Sync_RTC_With_GPS+0x24c>
 8003d7c:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003d80:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8003d84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	f040 80e9 	bne.w	8003f60 <Sync_RTC_With_GPS+0x24c>
        //printf("Setting the RTC now\n\r");
        /* Copy the GPS time to GPSTime */
        strncpy(GPSTime, myData.lastMeasure, 10);
 8003d8e:	463b      	mov	r3, r7
 8003d90:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8003d94:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003d98:	220a      	movs	r2, #10
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f00a fa12 	bl	800e1c4 <strncpy>
        GPSTime[10] = '\0'; // Ensure null termination
 8003da0:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003da4:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003da8:	2200      	movs	r2, #0
 8003daa:	729a      	strb	r2, [r3, #10]

        /* Copy the GPS date to GPSDate */
        strncpy(GPSDate, myData.date, 6);
 8003dac:	463b      	mov	r3, r7
 8003dae:	f103 0136 	add.w	r1, r3, #54	@ 0x36
 8003db2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003db6:	2206      	movs	r2, #6
 8003db8:	4618      	mov	r0, r3
 8003dba:	f00a fa03 	bl	800e1c4 <strncpy>
        GPSDate[6] = '\0'; // Ensure null termination
 8003dbe:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003dc2:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	719a      	strb	r2, [r3, #6]

        /* Initialize Time and Date Objects */
        RTC_TimeTypeDef sTime = {0};
 8003dca:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003dce:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	460a      	mov	r2, r1
 8003dd6:	801a      	strh	r2, [r3, #0]
 8003dd8:	460a      	mov	r2, r1
 8003dda:	709a      	strb	r2, [r3, #2]
        RTC_DateTypeDef sDate = {0};
 8003ddc:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003de0:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]

        /* Manually parsing the hours, minutes, and seconds */
        sTime.Hours   = (GPSTime[0] - '0') * 10 + (GPSTime[1] - '0');
 8003de8:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003dec:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	3b30      	subs	r3, #48	@ 0x30
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	461a      	mov	r2, r3
 8003df8:	0092      	lsls	r2, r2, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003e04:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003e08:	785b      	ldrb	r3, [r3, #1]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	3b30      	subs	r3, #48	@ 0x30
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003e16:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8003e1a:	701a      	strb	r2, [r3, #0]
        sTime.Minutes = (GPSTime[2] - '0') * 10 + (GPSTime[3] - '0');
 8003e1c:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003e20:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003e24:	789b      	ldrb	r3, [r3, #2]
 8003e26:	3b30      	subs	r3, #48	@ 0x30
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	0092      	lsls	r2, r2, #2
 8003e2e:	4413      	add	r3, r2
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003e38:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003e3c:	78db      	ldrb	r3, [r3, #3]
 8003e3e:	4413      	add	r3, r2
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	3b30      	subs	r3, #48	@ 0x30
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003e4a:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8003e4e:	705a      	strb	r2, [r3, #1]
        sTime.Seconds = (GPSTime[4] - '0') * 10 + (GPSTime[5] - '0');
 8003e50:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003e54:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003e58:	791b      	ldrb	r3, [r3, #4]
 8003e5a:	3b30      	subs	r3, #48	@ 0x30
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	461a      	mov	r2, r3
 8003e60:	0092      	lsls	r2, r2, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003e6c:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003e70:	795b      	ldrb	r3, [r3, #5]
 8003e72:	4413      	add	r3, r2
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	3b30      	subs	r3, #48	@ 0x30
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003e7e:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8003e82:	709a      	strb	r2, [r3, #2]

        /* Set the RTC time with these settings */
        HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003e84:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003e88:	2200      	movs	r2, #0
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4845      	ldr	r0, [pc, #276]	@ (8003fa4 <Sync_RTC_With_GPS+0x290>)
 8003e8e:	f004 f86f 	bl	8007f70 <HAL_RTC_SetTime>

        //printf("Time -- H: %u, M: %u, S: %u\n\r", sTime.Hours, sTime.Minutes, sTime.Seconds);

        /* Manually parsing the date, month, and year */
        sDate.Date  = (GPSDate[0] - '0') * 10 + (GPSDate[1] - '0');
 8003e92:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003e96:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	3b30      	subs	r3, #48	@ 0x30
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	0092      	lsls	r2, r2, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003eae:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8003eb2:	785b      	ldrb	r3, [r3, #1]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	3b30      	subs	r3, #48	@ 0x30
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003ec0:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8003ec4:	709a      	strb	r2, [r3, #2]
        sDate.Month = (GPSDate[2] - '0') * 10 + (GPSDate[3] - '0');
 8003ec6:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003eca:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8003ece:	789b      	ldrb	r3, [r3, #2]
 8003ed0:	3b30      	subs	r3, #48	@ 0x30
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	0092      	lsls	r2, r2, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003ee2:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8003ee6:	78db      	ldrb	r3, [r3, #3]
 8003ee8:	4413      	add	r3, r2
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	3b30      	subs	r3, #48	@ 0x30
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003ef4:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8003ef8:	705a      	strb	r2, [r3, #1]
        sDate.Year  = (GPSDate[4] - '0') * 10 + (GPSDate[5] - '0');
 8003efa:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003efe:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8003f02:	791b      	ldrb	r3, [r3, #4]
 8003f04:	3b30      	subs	r3, #48	@ 0x30
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	461a      	mov	r2, r3
 8003f0a:	0092      	lsls	r2, r2, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003f16:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8003f1a:	795b      	ldrb	r3, [r3, #5]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	3b30      	subs	r3, #48	@ 0x30
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003f28:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8003f2c:	70da      	strb	r2, [r3, #3]

        /* Set the RTC Date with these settings */
        HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003f2e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003f32:	2200      	movs	r2, #0
 8003f34:	4619      	mov	r1, r3
 8003f36:	481b      	ldr	r0, [pc, #108]	@ (8003fa4 <Sync_RTC_With_GPS+0x290>)
 8003f38:	f004 f98a 	bl	8008250 <HAL_RTC_SetDate>

        printf("Set the time to %d:%d\n", sTime.Hours, sTime.Minutes);
 8003f3c:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003f40:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	4619      	mov	r1, r3
 8003f48:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003f4c:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8003f50:	785b      	ldrb	r3, [r3, #1]
 8003f52:	461a      	mov	r2, r3
 8003f54:	4814      	ldr	r0, [pc, #80]	@ (8003fa8 <Sync_RTC_With_GPS+0x294>)
 8003f56:	f00a f8b7 	bl	800e0c8 <iprintf>

        //printf("Date -- D: %u, M: %u, Y: %u\n\r", sDate.Date, sDate.Month, sDate.Year);

        /* Set the flag to 1 indicating that the RTC has been sync'd */
        RTC_Sync_Flag = 1;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	f887 344f 	strb.w	r3, [r7, #1103]	@ 0x44f
  while(RTC_Sync_Flag == 0 && HAL_GetTick() - gps_sync_start_time < GPS_SYNC_TIMEOUT) {
 8003f60:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d109      	bne.n	8003f7c <Sync_RTC_With_GPS+0x268>
 8003f68:	f000 fbb0 	bl	80046cc <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f78:	f4ff aed8 	bcc.w	8003d2c <Sync_RTC_With_GPS+0x18>
      }
    }
  }

  printf("Sync complete\n\r");
 8003f7c:	480b      	ldr	r0, [pc, #44]	@ (8003fac <Sync_RTC_With_GPS+0x298>)
 8003f7e:	f00a f8a3 	bl	800e0c8 <iprintf>

  if (RTC_Sync_Flag == 0) {
 8003f82:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d102      	bne.n	8003f90 <Sync_RTC_With_GPS+0x27c>
    g_tel_diagnostics.gps_sync_fail = true;
 8003f8a:	4b09      	ldr	r3, [pc, #36]	@ (8003fb0 <Sync_RTC_With_GPS+0x29c>)
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	705a      	strb	r2, [r3, #1]
  }

  /* Can turn on the TEL board LED here to indicate that the RTC is SYNC'd  */
}
 8003f90:	bf00      	nop
 8003f92:	f507 678a 	add.w	r7, r7, #1104	@ 0x450
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	08011ed4 	.word	0x08011ed4
 8003fa0:	2000065c 	.word	0x2000065c
 8003fa4:	20000770 	.word	0x20000770
 8003fa8:	08011ee4 	.word	0x08011ee4
 8003fac:	08011efc 	.word	0x08011efc
 8003fb0:	20000704 	.word	0x20000704

08003fb4 <get_current_timestamp>:

double get_current_timestamp()
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
  /* Initialize Time and Date objects */
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;

  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003fba:	1d3b      	adds	r3, r7, #4
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	480b      	ldr	r0, [pc, #44]	@ (8003ff0 <get_current_timestamp+0x3c>)
 8003fc2:	f004 f86d 	bl	80080a0 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003fc6:	463b      	mov	r3, r7
 8003fc8:	2200      	movs	r2, #0
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4808      	ldr	r0, [pc, #32]	@ (8003ff0 <get_current_timestamp+0x3c>)
 8003fce:	f004 f9f5 	bl	80083bc <HAL_RTC_GetDate>
  double epochTime = convertToEpochTime(&sTime, &sDate);
 8003fd2:	463a      	mov	r2, r7
 8003fd4:	1d3b      	adds	r3, r7, #4
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 f80b 	bl	8003ff4 <convertToEpochTime>
 8003fde:	e9c7 0102 	strd	r0, r1, [r7, #8]

  /* Return the resulting epoch time */
  return epochTime;
 8003fe2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	4619      	mov	r1, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	20000770 	.word	0x20000770

08003ff4 <convertToEpochTime>:

/* Used to get current time stamp */
double convertToEpochTime(RTC_TimeTypeDef *sTime, RTC_DateTypeDef *sDate)
{
 8003ff4:	b5b0      	push	{r4, r5, r7, lr}
 8003ff6:	b08c      	sub	sp, #48	@ 0x30
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
    /* Initialize tm struct - from time.h library */
    struct tm t;

    /* Populate the tm structure fields from the RTC time and date */
    t.tm_year = sDate->Year + 100;  // Year since 1900, so add 100 to the year from the RTC (which starts at 2000).
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	78db      	ldrb	r3, [r3, #3]
 8004002:	3364      	adds	r3, #100	@ 0x64
 8004004:	61fb      	str	r3, [r7, #28]
    t.tm_mon = sDate->Month - 1;    // tm_mon is 0-11, so subtract 1 from the RTC month (which starts at 1).
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	785b      	ldrb	r3, [r3, #1]
 800400a:	3b01      	subs	r3, #1
 800400c:	61bb      	str	r3, [r7, #24]
    t.tm_mday = sDate->Date;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	789b      	ldrb	r3, [r3, #2]
 8004012:	617b      	str	r3, [r7, #20]
    t.tm_hour = sTime->Hours;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	613b      	str	r3, [r7, #16]
    t.tm_min = sTime->Minutes;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	785b      	ldrb	r3, [r3, #1]
 800401e:	60fb      	str	r3, [r7, #12]
    t.tm_sec = sTime->Seconds;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	789b      	ldrb	r3, [r3, #2]
 8004024:	60bb      	str	r3, [r7, #8]
    t.tm_isdst = 0;                // Disable daylight saving time adjustments.
 8004026:	2300      	movs	r3, #0
 8004028:	62bb      	str	r3, [r7, #40]	@ 0x28
//            t.tm_mday = lastDayOfMonth(t.tm_mon, t.tm_year + 1900);
//        }
//    }

    /* Convert to epoch time - Function from time.h library */
    long int epoch_secs = (long int) mktime(&t);
 800402a:	f107 0308 	add.w	r3, r7, #8
 800402e:	4618      	mov	r0, r3
 8004030:	f00a fa22 	bl	800e478 <mktime>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	4613      	mov	r3, r2
 800403a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Convert to double and add milliseconds with GetTick() */
    return (double) epoch_secs + (double)(HAL_GetTick() % 1000) / 1000.0;
 800403c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800403e:	f7fc fa5b 	bl	80004f8 <__aeabi_i2d>
 8004042:	4604      	mov	r4, r0
 8004044:	460d      	mov	r5, r1
 8004046:	f000 fb41 	bl	80046cc <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	4b0e      	ldr	r3, [pc, #56]	@ (8004088 <convertToEpochTime+0x94>)
 800404e:	fba3 1302 	umull	r1, r3, r3, r2
 8004052:	099b      	lsrs	r3, r3, #6
 8004054:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004058:	fb01 f303 	mul.w	r3, r1, r3
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	4618      	mov	r0, r3
 8004060:	f7fc fa3a 	bl	80004d8 <__aeabi_ui2d>
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	4b08      	ldr	r3, [pc, #32]	@ (800408c <convertToEpochTime+0x98>)
 800406a:	f7fc fbd9 	bl	8000820 <__aeabi_ddiv>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	4620      	mov	r0, r4
 8004074:	4629      	mov	r1, r5
 8004076:	f7fc f8f3 	bl	8000260 <__adddf3>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
}
 800407e:	4610      	mov	r0, r2
 8004080:	4619      	mov	r1, r3
 8004082:	3730      	adds	r7, #48	@ 0x30
 8004084:	46bd      	mov	sp, r7
 8004086:	bdb0      	pop	{r4, r5, r7, pc}
 8004088:	10624dd3 	.word	0x10624dd3
 800408c:	408f4000 	.word	0x408f4000

08004090 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004094:	4b17      	ldr	r3, [pc, #92]	@ (80040f4 <MX_SPI1_Init+0x64>)
 8004096:	4a18      	ldr	r2, [pc, #96]	@ (80040f8 <MX_SPI1_Init+0x68>)
 8004098:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800409a:	4b16      	ldr	r3, [pc, #88]	@ (80040f4 <MX_SPI1_Init+0x64>)
 800409c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80040a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80040a2:	4b14      	ldr	r3, [pc, #80]	@ (80040f4 <MX_SPI1_Init+0x64>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80040a8:	4b12      	ldr	r3, [pc, #72]	@ (80040f4 <MX_SPI1_Init+0x64>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80040ae:	4b11      	ldr	r3, [pc, #68]	@ (80040f4 <MX_SPI1_Init+0x64>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80040b4:	4b0f      	ldr	r3, [pc, #60]	@ (80040f4 <MX_SPI1_Init+0x64>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80040ba:	4b0e      	ldr	r3, [pc, #56]	@ (80040f4 <MX_SPI1_Init+0x64>)
 80040bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80040c2:	4b0c      	ldr	r3, [pc, #48]	@ (80040f4 <MX_SPI1_Init+0x64>)
 80040c4:	2208      	movs	r2, #8
 80040c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040c8:	4b0a      	ldr	r3, [pc, #40]	@ (80040f4 <MX_SPI1_Init+0x64>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80040ce:	4b09      	ldr	r3, [pc, #36]	@ (80040f4 <MX_SPI1_Init+0x64>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040d4:	4b07      	ldr	r3, [pc, #28]	@ (80040f4 <MX_SPI1_Init+0x64>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80040da:	4b06      	ldr	r3, [pc, #24]	@ (80040f4 <MX_SPI1_Init+0x64>)
 80040dc:	220a      	movs	r2, #10
 80040de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80040e0:	4804      	ldr	r0, [pc, #16]	@ (80040f4 <MX_SPI1_Init+0x64>)
 80040e2:	f004 fc61 	bl	80089a8 <HAL_SPI_Init>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80040ec:	f7ff f83a 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80040f0:	bf00      	nop
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	20000784 	.word	0x20000784
 80040f8:	40013000 	.word	0x40013000

080040fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004104:	f107 0310 	add.w	r3, r7, #16
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	605a      	str	r2, [r3, #4]
 800410e:	609a      	str	r2, [r3, #8]
 8004110:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a1b      	ldr	r2, [pc, #108]	@ (8004184 <HAL_SPI_MspInit+0x88>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d12f      	bne.n	800417c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800411c:	4b1a      	ldr	r3, [pc, #104]	@ (8004188 <HAL_SPI_MspInit+0x8c>)
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	4a19      	ldr	r2, [pc, #100]	@ (8004188 <HAL_SPI_MspInit+0x8c>)
 8004122:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004126:	6193      	str	r3, [r2, #24]
 8004128:	4b17      	ldr	r3, [pc, #92]	@ (8004188 <HAL_SPI_MspInit+0x8c>)
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004134:	4b14      	ldr	r3, [pc, #80]	@ (8004188 <HAL_SPI_MspInit+0x8c>)
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	4a13      	ldr	r2, [pc, #76]	@ (8004188 <HAL_SPI_MspInit+0x8c>)
 800413a:	f043 0304 	orr.w	r3, r3, #4
 800413e:	6193      	str	r3, [r2, #24]
 8004140:	4b11      	ldr	r3, [pc, #68]	@ (8004188 <HAL_SPI_MspInit+0x8c>)
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SDL_CLK_Pin|SDL_MOSI_Pin;
 800414c:	23a0      	movs	r3, #160	@ 0xa0
 800414e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004150:	2302      	movs	r3, #2
 8004152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004154:	2303      	movs	r3, #3
 8004156:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004158:	f107 0310 	add.w	r3, r7, #16
 800415c:	4619      	mov	r1, r3
 800415e:	480b      	ldr	r0, [pc, #44]	@ (800418c <HAL_SPI_MspInit+0x90>)
 8004160:	f001 fa02 	bl	8005568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDL_MISO_Pin;
 8004164:	2340      	movs	r3, #64	@ 0x40
 8004166:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416c:	2300      	movs	r3, #0
 800416e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SDL_MISO_GPIO_Port, &GPIO_InitStruct);
 8004170:	f107 0310 	add.w	r3, r7, #16
 8004174:	4619      	mov	r1, r3
 8004176:	4805      	ldr	r0, [pc, #20]	@ (800418c <HAL_SPI_MspInit+0x90>)
 8004178:	f001 f9f6 	bl	8005568 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800417c:	bf00      	nop
 800417e:	3720      	adds	r7, #32
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40013000 	.word	0x40013000
 8004188:	40021000 	.word	0x40021000
 800418c:	40010800 	.word	0x40010800

08004190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004196:	4b18      	ldr	r3, [pc, #96]	@ (80041f8 <HAL_MspInit+0x68>)
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	4a17      	ldr	r2, [pc, #92]	@ (80041f8 <HAL_MspInit+0x68>)
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	6193      	str	r3, [r2, #24]
 80041a2:	4b15      	ldr	r3, [pc, #84]	@ (80041f8 <HAL_MspInit+0x68>)
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	60bb      	str	r3, [r7, #8]
 80041ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041ae:	4b12      	ldr	r3, [pc, #72]	@ (80041f8 <HAL_MspInit+0x68>)
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	4a11      	ldr	r2, [pc, #68]	@ (80041f8 <HAL_MspInit+0x68>)
 80041b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041b8:	61d3      	str	r3, [r2, #28]
 80041ba:	4b0f      	ldr	r3, [pc, #60]	@ (80041f8 <HAL_MspInit+0x68>)
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041c2:	607b      	str	r3, [r7, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80041c6:	2200      	movs	r2, #0
 80041c8:	210f      	movs	r1, #15
 80041ca:	f06f 0001 	mvn.w	r0, #1
 80041ce:	f001 f9a0 	bl	8005512 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80041d2:	4b0a      	ldr	r3, [pc, #40]	@ (80041fc <HAL_MspInit+0x6c>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	4a04      	ldr	r2, [pc, #16]	@ (80041fc <HAL_MspInit+0x6c>)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041ee:	bf00      	nop
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40021000 	.word	0x40021000
 80041fc:	40010000 	.word	0x40010000

08004200 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08c      	sub	sp, #48	@ 0x30
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8004210:	2300      	movs	r3, #0
 8004212:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004216:	4b2e      	ldr	r3, [pc, #184]	@ (80042d0 <HAL_InitTick+0xd0>)
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	4a2d      	ldr	r2, [pc, #180]	@ (80042d0 <HAL_InitTick+0xd0>)
 800421c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004220:	6193      	str	r3, [r2, #24]
 8004222:	4b2b      	ldr	r3, [pc, #172]	@ (80042d0 <HAL_InitTick+0xd0>)
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800422a:	60bb      	str	r3, [r7, #8]
 800422c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800422e:	f107 020c 	add.w	r2, r7, #12
 8004232:	f107 0310 	add.w	r3, r7, #16
 8004236:	4611      	mov	r1, r2
 8004238:	4618      	mov	r0, r3
 800423a:	f003 fc31 	bl	8007aa0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800423e:	f003 fc1b 	bl	8007a78 <HAL_RCC_GetPCLK2Freq>
 8004242:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004246:	4a23      	ldr	r2, [pc, #140]	@ (80042d4 <HAL_InitTick+0xd4>)
 8004248:	fba2 2303 	umull	r2, r3, r2, r3
 800424c:	0c9b      	lsrs	r3, r3, #18
 800424e:	3b01      	subs	r3, #1
 8004250:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004252:	4b21      	ldr	r3, [pc, #132]	@ (80042d8 <HAL_InitTick+0xd8>)
 8004254:	4a21      	ldr	r2, [pc, #132]	@ (80042dc <HAL_InitTick+0xdc>)
 8004256:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004258:	4b1f      	ldr	r3, [pc, #124]	@ (80042d8 <HAL_InitTick+0xd8>)
 800425a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800425e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004260:	4a1d      	ldr	r2, [pc, #116]	@ (80042d8 <HAL_InitTick+0xd8>)
 8004262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004264:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004266:	4b1c      	ldr	r3, [pc, #112]	@ (80042d8 <HAL_InitTick+0xd8>)
 8004268:	2200      	movs	r2, #0
 800426a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800426c:	4b1a      	ldr	r3, [pc, #104]	@ (80042d8 <HAL_InitTick+0xd8>)
 800426e:	2200      	movs	r2, #0
 8004270:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004272:	4b19      	ldr	r3, [pc, #100]	@ (80042d8 <HAL_InitTick+0xd8>)
 8004274:	2200      	movs	r2, #0
 8004276:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8004278:	4817      	ldr	r0, [pc, #92]	@ (80042d8 <HAL_InitTick+0xd8>)
 800427a:	f004 ffb3 	bl	80091e4 <HAL_TIM_Base_Init>
 800427e:	4603      	mov	r3, r0
 8004280:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8004284:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004288:	2b00      	cmp	r3, #0
 800428a:	d11b      	bne.n	80042c4 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800428c:	4812      	ldr	r0, [pc, #72]	@ (80042d8 <HAL_InitTick+0xd8>)
 800428e:	f005 f801 	bl	8009294 <HAL_TIM_Base_Start_IT>
 8004292:	4603      	mov	r3, r0
 8004294:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8004298:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800429c:	2b00      	cmp	r3, #0
 800429e:	d111      	bne.n	80042c4 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80042a0:	2019      	movs	r0, #25
 80042a2:	f001 f952 	bl	800554a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b0f      	cmp	r3, #15
 80042aa:	d808      	bhi.n	80042be <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80042ac:	2200      	movs	r2, #0
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	2019      	movs	r0, #25
 80042b2:	f001 f92e 	bl	8005512 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80042b6:	4a0a      	ldr	r2, [pc, #40]	@ (80042e0 <HAL_InitTick+0xe0>)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6013      	str	r3, [r2, #0]
 80042bc:	e002      	b.n	80042c4 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80042c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3730      	adds	r7, #48	@ 0x30
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40021000 	.word	0x40021000
 80042d4:	431bde83 	.word	0x431bde83
 80042d8:	200007dc 	.word	0x200007dc
 80042dc:	40012c00 	.word	0x40012c00
 80042e0:	200000e4 	.word	0x200000e4

080042e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80042e8:	bf00      	nop
 80042ea:	e7fd      	b.n	80042e8 <NMI_Handler+0x4>

080042ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042f0:	bf00      	nop
 80042f2:	e7fd      	b.n	80042f0 <HardFault_Handler+0x4>

080042f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042f8:	bf00      	nop
 80042fa:	e7fd      	b.n	80042f8 <MemManage_Handler+0x4>

080042fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004300:	bf00      	nop
 8004302:	e7fd      	b.n	8004300 <BusFault_Handler+0x4>

08004304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004308:	bf00      	nop
 800430a:	e7fd      	b.n	8004308 <UsageFault_Handler+0x4>

0800430c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004310:	bf00      	nop
 8004312:	46bd      	mov	sp, r7
 8004314:	bc80      	pop	{r7}
 8004316:	4770      	bx	lr

08004318 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800431c:	4802      	ldr	r0, [pc, #8]	@ (8004328 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800431e:	f000 fe20 	bl	8004f62 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8004322:	bf00      	nop
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	20000354 	.word	0x20000354

0800432c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004330:	4802      	ldr	r0, [pc, #8]	@ (800433c <TIM1_UP_IRQHandler+0x10>)
 8004332:	f005 f80f 	bl	8009354 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004336:	bf00      	nop
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	200007dc 	.word	0x200007dc

08004340 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  return 1;
 8004344:	2301      	movs	r3, #1
}
 8004346:	4618      	mov	r0, r3
 8004348:	46bd      	mov	sp, r7
 800434a:	bc80      	pop	{r7}
 800434c:	4770      	bx	lr

0800434e <_kill>:

int _kill(int pid, int sig)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b082      	sub	sp, #8
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004358:	f00a fdcc 	bl	800eef4 <__errno>
 800435c:	4603      	mov	r3, r0
 800435e:	2216      	movs	r2, #22
 8004360:	601a      	str	r2, [r3, #0]
  return -1;
 8004362:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004366:	4618      	mov	r0, r3
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <_exit>:

void _exit (int status)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b082      	sub	sp, #8
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004376:	f04f 31ff 	mov.w	r1, #4294967295
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7ff ffe7 	bl	800434e <_kill>
  while (1) {}    /* Make sure we hang here */
 8004380:	bf00      	nop
 8004382:	e7fd      	b.n	8004380 <_exit+0x12>

08004384 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800438c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004390:	4618      	mov	r0, r3
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr

0800439a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
 80043a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80043aa:	605a      	str	r2, [r3, #4]
  return 0;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bc80      	pop	{r7}
 80043b6:	4770      	bx	lr

080043b8 <_isatty>:

int _isatty(int file)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80043c0:	2301      	movs	r3, #1
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr

080043cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr

080043e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043ec:	4a14      	ldr	r2, [pc, #80]	@ (8004440 <_sbrk+0x5c>)
 80043ee:	4b15      	ldr	r3, [pc, #84]	@ (8004444 <_sbrk+0x60>)
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043f8:	4b13      	ldr	r3, [pc, #76]	@ (8004448 <_sbrk+0x64>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d102      	bne.n	8004406 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004400:	4b11      	ldr	r3, [pc, #68]	@ (8004448 <_sbrk+0x64>)
 8004402:	4a12      	ldr	r2, [pc, #72]	@ (800444c <_sbrk+0x68>)
 8004404:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004406:	4b10      	ldr	r3, [pc, #64]	@ (8004448 <_sbrk+0x64>)
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4413      	add	r3, r2
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	429a      	cmp	r2, r3
 8004412:	d207      	bcs.n	8004424 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004414:	f00a fd6e 	bl	800eef4 <__errno>
 8004418:	4603      	mov	r3, r0
 800441a:	220c      	movs	r2, #12
 800441c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800441e:	f04f 33ff 	mov.w	r3, #4294967295
 8004422:	e009      	b.n	8004438 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004424:	4b08      	ldr	r3, [pc, #32]	@ (8004448 <_sbrk+0x64>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800442a:	4b07      	ldr	r3, [pc, #28]	@ (8004448 <_sbrk+0x64>)
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4413      	add	r3, r2
 8004432:	4a05      	ldr	r2, [pc, #20]	@ (8004448 <_sbrk+0x64>)
 8004434:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004436:	68fb      	ldr	r3, [r7, #12]
}
 8004438:	4618      	mov	r0, r3
 800443a:	3718      	adds	r7, #24
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	2000c000 	.word	0x2000c000
 8004444:	00000400 	.word	0x00000400
 8004448:	20000828 	.word	0x20000828
 800444c:	20005b90 	.word	0x20005b90

08004450 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004454:	bf00      	nop
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr

0800445c <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004460:	4b11      	ldr	r3, [pc, #68]	@ (80044a8 <MX_UART5_Init+0x4c>)
 8004462:	4a12      	ldr	r2, [pc, #72]	@ (80044ac <MX_UART5_Init+0x50>)
 8004464:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8004466:	4b10      	ldr	r3, [pc, #64]	@ (80044a8 <MX_UART5_Init+0x4c>)
 8004468:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800446c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800446e:	4b0e      	ldr	r3, [pc, #56]	@ (80044a8 <MX_UART5_Init+0x4c>)
 8004470:	2200      	movs	r2, #0
 8004472:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_2;
 8004474:	4b0c      	ldr	r3, [pc, #48]	@ (80044a8 <MX_UART5_Init+0x4c>)
 8004476:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800447a:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800447c:	4b0a      	ldr	r3, [pc, #40]	@ (80044a8 <MX_UART5_Init+0x4c>)
 800447e:	2200      	movs	r2, #0
 8004480:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004482:	4b09      	ldr	r3, [pc, #36]	@ (80044a8 <MX_UART5_Init+0x4c>)
 8004484:	220c      	movs	r2, #12
 8004486:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004488:	4b07      	ldr	r3, [pc, #28]	@ (80044a8 <MX_UART5_Init+0x4c>)
 800448a:	2200      	movs	r2, #0
 800448c:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800448e:	4b06      	ldr	r3, [pc, #24]	@ (80044a8 <MX_UART5_Init+0x4c>)
 8004490:	2200      	movs	r2, #0
 8004492:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004494:	4804      	ldr	r0, [pc, #16]	@ (80044a8 <MX_UART5_Init+0x4c>)
 8004496:	f005 f915 	bl	80096c4 <HAL_UART_Init>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <MX_UART5_Init+0x48>
  {
    Error_Handler();
 80044a0:	f7fe fe60 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80044a4:	bf00      	nop
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	2000082c 	.word	0x2000082c
 80044ac:	40005000 	.word	0x40005000

080044b0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80044b4:	4b11      	ldr	r3, [pc, #68]	@ (80044fc <MX_USART1_UART_Init+0x4c>)
 80044b6:	4a12      	ldr	r2, [pc, #72]	@ (8004500 <MX_USART1_UART_Init+0x50>)
 80044b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 80044ba:	4b10      	ldr	r3, [pc, #64]	@ (80044fc <MX_USART1_UART_Init+0x4c>)
 80044bc:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80044c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80044c2:	4b0e      	ldr	r3, [pc, #56]	@ (80044fc <MX_USART1_UART_Init+0x4c>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80044c8:	4b0c      	ldr	r3, [pc, #48]	@ (80044fc <MX_USART1_UART_Init+0x4c>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80044ce:	4b0b      	ldr	r3, [pc, #44]	@ (80044fc <MX_USART1_UART_Init+0x4c>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80044d4:	4b09      	ldr	r3, [pc, #36]	@ (80044fc <MX_USART1_UART_Init+0x4c>)
 80044d6:	220c      	movs	r2, #12
 80044d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044da:	4b08      	ldr	r3, [pc, #32]	@ (80044fc <MX_USART1_UART_Init+0x4c>)
 80044dc:	2200      	movs	r2, #0
 80044de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80044e0:	4b06      	ldr	r3, [pc, #24]	@ (80044fc <MX_USART1_UART_Init+0x4c>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80044e6:	4805      	ldr	r0, [pc, #20]	@ (80044fc <MX_USART1_UART_Init+0x4c>)
 80044e8:	f005 f8ec 	bl	80096c4 <HAL_UART_Init>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80044f2:	f7fe fe37 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80044f6:	bf00      	nop
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	20000874 	.word	0x20000874
 8004500:	40013800 	.word	0x40013800

08004504 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b08c      	sub	sp, #48	@ 0x30
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800450c:	f107 0320 	add.w	r3, r7, #32
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	605a      	str	r2, [r3, #4]
 8004516:	609a      	str	r2, [r3, #8]
 8004518:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART5)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a3e      	ldr	r2, [pc, #248]	@ (8004618 <HAL_UART_MspInit+0x114>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d13d      	bne.n	80045a0 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8004524:	4b3d      	ldr	r3, [pc, #244]	@ (800461c <HAL_UART_MspInit+0x118>)
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	4a3c      	ldr	r2, [pc, #240]	@ (800461c <HAL_UART_MspInit+0x118>)
 800452a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800452e:	61d3      	str	r3, [r2, #28]
 8004530:	4b3a      	ldr	r3, [pc, #232]	@ (800461c <HAL_UART_MspInit+0x118>)
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004538:	61fb      	str	r3, [r7, #28]
 800453a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800453c:	4b37      	ldr	r3, [pc, #220]	@ (800461c <HAL_UART_MspInit+0x118>)
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	4a36      	ldr	r2, [pc, #216]	@ (800461c <HAL_UART_MspInit+0x118>)
 8004542:	f043 0310 	orr.w	r3, r3, #16
 8004546:	6193      	str	r3, [r2, #24]
 8004548:	4b34      	ldr	r3, [pc, #208]	@ (800461c <HAL_UART_MspInit+0x118>)
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	f003 0310 	and.w	r3, r3, #16
 8004550:	61bb      	str	r3, [r7, #24]
 8004552:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004554:	4b31      	ldr	r3, [pc, #196]	@ (800461c <HAL_UART_MspInit+0x118>)
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	4a30      	ldr	r2, [pc, #192]	@ (800461c <HAL_UART_MspInit+0x118>)
 800455a:	f043 0320 	orr.w	r3, r3, #32
 800455e:	6193      	str	r3, [r2, #24]
 8004560:	4b2e      	ldr	r3, [pc, #184]	@ (800461c <HAL_UART_MspInit+0x118>)
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	f003 0320 	and.w	r3, r3, #32
 8004568:	617b      	str	r3, [r7, #20]
 800456a:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800456c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004572:	2302      	movs	r3, #2
 8004574:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004576:	2303      	movs	r3, #3
 8004578:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800457a:	f107 0320 	add.w	r3, r7, #32
 800457e:	4619      	mov	r1, r3
 8004580:	4827      	ldr	r0, [pc, #156]	@ (8004620 <HAL_UART_MspInit+0x11c>)
 8004582:	f000 fff1 	bl	8005568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004586:	2304      	movs	r3, #4
 8004588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800458a:	2300      	movs	r3, #0
 800458c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800458e:	2300      	movs	r3, #0
 8004590:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004592:	f107 0320 	add.w	r3, r7, #32
 8004596:	4619      	mov	r1, r3
 8004598:	4822      	ldr	r0, [pc, #136]	@ (8004624 <HAL_UART_MspInit+0x120>)
 800459a:	f000 ffe5 	bl	8005568 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800459e:	e036      	b.n	800460e <HAL_UART_MspInit+0x10a>
  else if(uartHandle->Instance==USART1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a20      	ldr	r2, [pc, #128]	@ (8004628 <HAL_UART_MspInit+0x124>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d131      	bne.n	800460e <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART1_CLK_ENABLE();
 80045aa:	4b1c      	ldr	r3, [pc, #112]	@ (800461c <HAL_UART_MspInit+0x118>)
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	4a1b      	ldr	r2, [pc, #108]	@ (800461c <HAL_UART_MspInit+0x118>)
 80045b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80045b4:	6193      	str	r3, [r2, #24]
 80045b6:	4b19      	ldr	r3, [pc, #100]	@ (800461c <HAL_UART_MspInit+0x118>)
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045be:	613b      	str	r3, [r7, #16]
 80045c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045c2:	4b16      	ldr	r3, [pc, #88]	@ (800461c <HAL_UART_MspInit+0x118>)
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	4a15      	ldr	r2, [pc, #84]	@ (800461c <HAL_UART_MspInit+0x118>)
 80045c8:	f043 0304 	orr.w	r3, r3, #4
 80045cc:	6193      	str	r3, [r2, #24]
 80045ce:	4b13      	ldr	r3, [pc, #76]	@ (800461c <HAL_UART_MspInit+0x118>)
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	f003 0304 	and.w	r3, r3, #4
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RADIO_TX_Pin;
 80045da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80045de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e0:	2302      	movs	r3, #2
 80045e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045e4:	2303      	movs	r3, #3
 80045e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(RADIO_TX_GPIO_Port, &GPIO_InitStruct);
 80045e8:	f107 0320 	add.w	r3, r7, #32
 80045ec:	4619      	mov	r1, r3
 80045ee:	480f      	ldr	r0, [pc, #60]	@ (800462c <HAL_UART_MspInit+0x128>)
 80045f0:	f000 ffba 	bl	8005568 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RADIO_RX_Pin;
 80045f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80045f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045fa:	2300      	movs	r3, #0
 80045fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045fe:	2300      	movs	r3, #0
 8004600:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(RADIO_RX_GPIO_Port, &GPIO_InitStruct);
 8004602:	f107 0320 	add.w	r3, r7, #32
 8004606:	4619      	mov	r1, r3
 8004608:	4808      	ldr	r0, [pc, #32]	@ (800462c <HAL_UART_MspInit+0x128>)
 800460a:	f000 ffad 	bl	8005568 <HAL_GPIO_Init>
}
 800460e:	bf00      	nop
 8004610:	3730      	adds	r7, #48	@ 0x30
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40005000 	.word	0x40005000
 800461c:	40021000 	.word	0x40021000
 8004620:	40011000 	.word	0x40011000
 8004624:	40011400 	.word	0x40011400
 8004628:	40013800 	.word	0x40013800
 800462c:	40010800 	.word	0x40010800

08004630 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004630:	f7ff ff0e 	bl	8004450 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004634:	480b      	ldr	r0, [pc, #44]	@ (8004664 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004636:	490c      	ldr	r1, [pc, #48]	@ (8004668 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004638:	4a0c      	ldr	r2, [pc, #48]	@ (800466c <LoopFillZerobss+0x16>)
  movs r3, #0
 800463a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800463c:	e002      	b.n	8004644 <LoopCopyDataInit>

0800463e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800463e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004642:	3304      	adds	r3, #4

08004644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004648:	d3f9      	bcc.n	800463e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800464a:	4a09      	ldr	r2, [pc, #36]	@ (8004670 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800464c:	4c09      	ldr	r4, [pc, #36]	@ (8004674 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800464e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004650:	e001      	b.n	8004656 <LoopFillZerobss>

08004652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004654:	3204      	adds	r2, #4

08004656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004658:	d3fb      	bcc.n	8004652 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800465a:	f00a fc51 	bl	800ef00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800465e:	f7fe fcc7 	bl	8002ff0 <main>
  bx lr
 8004662:	4770      	bx	lr
  ldr r0, =_sdata
 8004664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004668:	20000330 	.word	0x20000330
  ldr r2, =_sidata
 800466c:	08012568 	.word	0x08012568
  ldr r2, =_sbss
 8004670:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 8004674:	20005b90 	.word	0x20005b90

08004678 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004678:	e7fe      	b.n	8004678 <ADC1_2_IRQHandler>
	...

0800467c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004680:	4b08      	ldr	r3, [pc, #32]	@ (80046a4 <HAL_Init+0x28>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a07      	ldr	r2, [pc, #28]	@ (80046a4 <HAL_Init+0x28>)
 8004686:	f043 0310 	orr.w	r3, r3, #16
 800468a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800468c:	2003      	movs	r0, #3
 800468e:	f000 ff35 	bl	80054fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004692:	200f      	movs	r0, #15
 8004694:	f7ff fdb4 	bl	8004200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004698:	f7ff fd7a 	bl	8004190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40022000 	.word	0x40022000

080046a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046ac:	4b05      	ldr	r3, [pc, #20]	@ (80046c4 <HAL_IncTick+0x1c>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	461a      	mov	r2, r3
 80046b2:	4b05      	ldr	r3, [pc, #20]	@ (80046c8 <HAL_IncTick+0x20>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4413      	add	r3, r2
 80046b8:	4a03      	ldr	r2, [pc, #12]	@ (80046c8 <HAL_IncTick+0x20>)
 80046ba:	6013      	str	r3, [r2, #0]
}
 80046bc:	bf00      	nop
 80046be:	46bd      	mov	sp, r7
 80046c0:	bc80      	pop	{r7}
 80046c2:	4770      	bx	lr
 80046c4:	200000e8 	.word	0x200000e8
 80046c8:	200008bc 	.word	0x200008bc

080046cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
  return uwTick;
 80046d0:	4b02      	ldr	r3, [pc, #8]	@ (80046dc <HAL_GetTick+0x10>)
 80046d2:	681b      	ldr	r3, [r3, #0]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr
 80046dc:	200008bc 	.word	0x200008bc

080046e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046e8:	f7ff fff0 	bl	80046cc <HAL_GetTick>
 80046ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f8:	d005      	beq.n	8004706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004724 <HAL_Delay+0x44>)
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4413      	add	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004706:	bf00      	nop
 8004708:	f7ff ffe0 	bl	80046cc <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	429a      	cmp	r2, r3
 8004716:	d8f7      	bhi.n	8004708 <HAL_Delay+0x28>
  {
  }
}
 8004718:	bf00      	nop
 800471a:	bf00      	nop
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	200000e8 	.word	0x200000e8

08004728 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e0ed      	b.n	8004916 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d102      	bne.n	800474c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7fc fdde 	bl	8001308 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0201 	orr.w	r2, r2, #1
 800475a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800475c:	f7ff ffb6 	bl	80046cc <HAL_GetTick>
 8004760:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004762:	e012      	b.n	800478a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004764:	f7ff ffb2 	bl	80046cc <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b0a      	cmp	r3, #10
 8004770:	d90b      	bls.n	800478a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004776:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2205      	movs	r2, #5
 8004782:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e0c5      	b.n	8004916 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0e5      	beq.n	8004764 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0202 	bic.w	r2, r2, #2
 80047a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047a8:	f7ff ff90 	bl	80046cc <HAL_GetTick>
 80047ac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80047ae:	e012      	b.n	80047d6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80047b0:	f7ff ff8c 	bl	80046cc <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b0a      	cmp	r3, #10
 80047bc:	d90b      	bls.n	80047d6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2205      	movs	r2, #5
 80047ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e09f      	b.n	8004916 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e5      	bne.n	80047b0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	7e1b      	ldrb	r3, [r3, #24]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d108      	bne.n	80047fe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	e007      	b.n	800480e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800480c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	7e5b      	ldrb	r3, [r3, #25]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d108      	bne.n	8004828 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	e007      	b.n	8004838 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004836:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	7e9b      	ldrb	r3, [r3, #26]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d108      	bne.n	8004852 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0220 	orr.w	r2, r2, #32
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	e007      	b.n	8004862 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0220 	bic.w	r2, r2, #32
 8004860:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	7edb      	ldrb	r3, [r3, #27]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d108      	bne.n	800487c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0210 	bic.w	r2, r2, #16
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	e007      	b.n	800488c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0210 	orr.w	r2, r2, #16
 800488a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	7f1b      	ldrb	r3, [r3, #28]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d108      	bne.n	80048a6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0208 	orr.w	r2, r2, #8
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	e007      	b.n	80048b6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0208 	bic.w	r2, r2, #8
 80048b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	7f5b      	ldrb	r3, [r3, #29]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d108      	bne.n	80048d0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f042 0204 	orr.w	r2, r2, #4
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	e007      	b.n	80048e0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0204 	bic.w	r2, r2, #4
 80048de:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	431a      	orrs	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	ea42 0103 	orr.w	r1, r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	1e5a      	subs	r2, r3, #1
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800491e:	b480      	push	{r7}
 8004920:	b087      	sub	sp, #28
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004934:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004936:	7cfb      	ldrb	r3, [r7, #19]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d003      	beq.n	8004944 <HAL_CAN_ConfigFilter+0x26>
 800493c:	7cfb      	ldrb	r3, [r7, #19]
 800493e:	2b02      	cmp	r3, #2
 8004940:	f040 80aa 	bne.w	8004a98 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800494a:	f043 0201 	orr.w	r2, r3, #1
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	f003 031f 	and.w	r3, r3, #31
 800495c:	2201      	movs	r2, #1
 800495e:	fa02 f303 	lsl.w	r3, r2, r3
 8004962:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	43db      	mvns	r3, r3
 800496e:	401a      	ands	r2, r3
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d123      	bne.n	80049c6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	43db      	mvns	r3, r3
 8004988:	401a      	ands	r2, r3
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80049a0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	3248      	adds	r2, #72	@ 0x48
 80049a6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80049ba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80049bc:	6979      	ldr	r1, [r7, #20]
 80049be:	3348      	adds	r3, #72	@ 0x48
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	440b      	add	r3, r1
 80049c4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d122      	bne.n	8004a14 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	431a      	orrs	r2, r3
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80049ee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	3248      	adds	r2, #72	@ 0x48
 80049f4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004a08:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004a0a:	6979      	ldr	r1, [r7, #20]
 8004a0c:	3348      	adds	r3, #72	@ 0x48
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	440b      	add	r3, r1
 8004a12:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d109      	bne.n	8004a30 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	43db      	mvns	r3, r3
 8004a26:	401a      	ands	r2, r3
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004a2e:	e007      	b.n	8004a40 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d109      	bne.n	8004a5c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	43db      	mvns	r3, r3
 8004a52:	401a      	ands	r2, r3
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8004a5a:	e007      	b.n	8004a6c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	431a      	orrs	r2, r3
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d107      	bne.n	8004a84 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004a8a:	f023 0201 	bic.w	r2, r3, #1
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	e006      	b.n	8004aa6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
  }
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	371c      	adds	r7, #28
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc80      	pop	{r7}
 8004aae:	4770      	bx	lr

08004ab0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d12e      	bne.n	8004b22 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0201 	bic.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004adc:	f7ff fdf6 	bl	80046cc <HAL_GetTick>
 8004ae0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004ae2:	e012      	b.n	8004b0a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004ae4:	f7ff fdf2 	bl	80046cc <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b0a      	cmp	r3, #10
 8004af0:	d90b      	bls.n	8004b0a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2205      	movs	r2, #5
 8004b02:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e012      	b.n	8004b30 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1e5      	bne.n	8004ae4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	e006      	b.n	8004b30 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b26:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
  }
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b089      	sub	sp, #36	@ 0x24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b4c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004b56:	7ffb      	ldrb	r3, [r7, #31]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d003      	beq.n	8004b64 <HAL_CAN_AddTxMessage+0x2c>
 8004b5c:	7ffb      	ldrb	r3, [r7, #31]
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	f040 80ad 	bne.w	8004cbe <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10a      	bne.n	8004b84 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d105      	bne.n	8004b84 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 8095 	beq.w	8004cae <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	0e1b      	lsrs	r3, r3, #24
 8004b88:	f003 0303 	and.w	r3, r3, #3
 8004b8c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004b8e:	2201      	movs	r2, #1
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	409a      	lsls	r2, r3
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10d      	bne.n	8004bbc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004baa:	68f9      	ldr	r1, [r7, #12]
 8004bac:	6809      	ldr	r1, [r1, #0]
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	3318      	adds	r3, #24
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	440b      	add	r3, r1
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	e00f      	b.n	8004bdc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004bc6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004bcc:	68f9      	ldr	r1, [r7, #12]
 8004bce:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004bd0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	3318      	adds	r3, #24
 8004bd6:	011b      	lsls	r3, r3, #4
 8004bd8:	440b      	add	r3, r1
 8004bda:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6819      	ldr	r1, [r3, #0]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	691a      	ldr	r2, [r3, #16]
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	3318      	adds	r3, #24
 8004be8:	011b      	lsls	r3, r3, #4
 8004bea:	440b      	add	r3, r1
 8004bec:	3304      	adds	r3, #4
 8004bee:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	7d1b      	ldrb	r3, [r3, #20]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d111      	bne.n	8004c1c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	3318      	adds	r3, #24
 8004c00:	011b      	lsls	r3, r3, #4
 8004c02:	4413      	add	r3, r2
 8004c04:	3304      	adds	r3, #4
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	6811      	ldr	r1, [r2, #0]
 8004c0c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	3318      	adds	r3, #24
 8004c14:	011b      	lsls	r3, r3, #4
 8004c16:	440b      	add	r3, r1
 8004c18:	3304      	adds	r3, #4
 8004c1a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3307      	adds	r3, #7
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	061a      	lsls	r2, r3, #24
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3306      	adds	r3, #6
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	041b      	lsls	r3, r3, #16
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	3305      	adds	r3, #5
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	021b      	lsls	r3, r3, #8
 8004c36:	4313      	orrs	r3, r2
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	3204      	adds	r2, #4
 8004c3c:	7812      	ldrb	r2, [r2, #0]
 8004c3e:	4610      	mov	r0, r2
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	6811      	ldr	r1, [r2, #0]
 8004c44:	ea43 0200 	orr.w	r2, r3, r0
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	011b      	lsls	r3, r3, #4
 8004c4c:	440b      	add	r3, r1
 8004c4e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004c52:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3303      	adds	r3, #3
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	061a      	lsls	r2, r3, #24
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3302      	adds	r3, #2
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	041b      	lsls	r3, r3, #16
 8004c64:	431a      	orrs	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	021b      	lsls	r3, r3, #8
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	7812      	ldrb	r2, [r2, #0]
 8004c74:	4610      	mov	r0, r2
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	6811      	ldr	r1, [r2, #0]
 8004c7a:	ea43 0200 	orr.w	r2, r3, r0
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	440b      	add	r3, r1
 8004c84:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8004c88:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	3318      	adds	r3, #24
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	4413      	add	r3, r2
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	6811      	ldr	r1, [r2, #0]
 8004c9c:	f043 0201 	orr.w	r2, r3, #1
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	3318      	adds	r3, #24
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	440b      	add	r3, r1
 8004ca8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004caa:	2300      	movs	r3, #0
 8004cac:	e00e      	b.n	8004ccc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e006      	b.n	8004ccc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
  }
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3724      	adds	r7, #36	@ 0x24
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bc80      	pop	{r7}
 8004cd4:	4770      	bx	lr

08004cd6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b087      	sub	sp, #28
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	607a      	str	r2, [r7, #4]
 8004ce2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cea:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004cec:	7dfb      	ldrb	r3, [r7, #23]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d003      	beq.n	8004cfa <HAL_CAN_GetRxMessage+0x24>
 8004cf2:	7dfb      	ldrb	r3, [r7, #23]
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	f040 8103 	bne.w	8004f00 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10e      	bne.n	8004d1e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d116      	bne.n	8004d3c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d12:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e0f7      	b.n	8004f0e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	f003 0303 	and.w	r3, r3, #3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d107      	bne.n	8004d3c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d30:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e0e8      	b.n	8004f0e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	331b      	adds	r3, #27
 8004d44:	011b      	lsls	r3, r3, #4
 8004d46:	4413      	add	r3, r2
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0204 	and.w	r2, r3, #4
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10c      	bne.n	8004d74 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	331b      	adds	r3, #27
 8004d62:	011b      	lsls	r3, r3, #4
 8004d64:	4413      	add	r3, r2
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	0d5b      	lsrs	r3, r3, #21
 8004d6a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	e00b      	b.n	8004d8c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	331b      	adds	r3, #27
 8004d7c:	011b      	lsls	r3, r3, #4
 8004d7e:	4413      	add	r3, r2
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	08db      	lsrs	r3, r3, #3
 8004d84:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	331b      	adds	r3, #27
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	4413      	add	r3, r2
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0202 	and.w	r2, r3, #2
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	331b      	adds	r3, #27
 8004daa:	011b      	lsls	r3, r3, #4
 8004dac:	4413      	add	r3, r2
 8004dae:	3304      	adds	r3, #4
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0308 	and.w	r3, r3, #8
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2208      	movs	r2, #8
 8004dbe:	611a      	str	r2, [r3, #16]
 8004dc0:	e00b      	b.n	8004dda <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	331b      	adds	r3, #27
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	4413      	add	r3, r2
 8004dce:	3304      	adds	r3, #4
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 020f 	and.w	r2, r3, #15
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	331b      	adds	r3, #27
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	4413      	add	r3, r2
 8004de6:	3304      	adds	r3, #4
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	0a1b      	lsrs	r3, r3, #8
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	331b      	adds	r3, #27
 8004dfa:	011b      	lsls	r3, r3, #4
 8004dfc:	4413      	add	r3, r2
 8004dfe:	3304      	adds	r3, #4
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	0c1b      	lsrs	r3, r3, #16
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	011b      	lsls	r3, r3, #4
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	0a1a      	lsrs	r2, r3, #8
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	3301      	adds	r3, #1
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	011b      	lsls	r3, r3, #4
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	0c1a      	lsrs	r2, r3, #16
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	3302      	adds	r3, #2
 8004e50:	b2d2      	uxtb	r2, r2
 8004e52:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	0e1a      	lsrs	r2, r3, #24
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	3303      	adds	r3, #3
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	3304      	adds	r3, #4
 8004e82:	b2d2      	uxtb	r2, r2
 8004e84:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	0a1a      	lsrs	r2, r3, #8
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	3305      	adds	r3, #5
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	0c1a      	lsrs	r2, r3, #16
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	3306      	adds	r3, #6
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	011b      	lsls	r3, r3, #4
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	0e1a      	lsrs	r2, r3, #24
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	3307      	adds	r3, #7
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d108      	bne.n	8004eec <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68da      	ldr	r2, [r3, #12]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f042 0220 	orr.w	r2, r2, #32
 8004ee8:	60da      	str	r2, [r3, #12]
 8004eea:	e007      	b.n	8004efc <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691a      	ldr	r2, [r3, #16]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0220 	orr.w	r2, r2, #32
 8004efa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004efc:	2300      	movs	r3, #0
 8004efe:	e006      	b.n	8004f0e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f04:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
  }
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bc80      	pop	{r7}
 8004f16:	4770      	bx	lr

08004f18 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f28:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f2a:	7bfb      	ldrb	r3, [r7, #15]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d002      	beq.n	8004f36 <HAL_CAN_ActivateNotification+0x1e>
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d109      	bne.n	8004f4a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6959      	ldr	r1, [r3, #20]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004f46:	2300      	movs	r3, #0
 8004f48:	e006      	b.n	8004f58 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
  }
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bc80      	pop	{r7}
 8004f60:	4770      	bx	lr

08004f62 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b08a      	sub	sp, #40	@ 0x28
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d07c      	beq.n	80050a2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d023      	beq.n	8004ffa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f983 	bl	80052d0 <HAL_CAN_TxMailbox0CompleteCallback>
 8004fca:	e016      	b.n	8004ffa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	f003 0304 	and.w	r3, r3, #4
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d004      	beq.n	8004fe0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fde:	e00c      	b.n	8004ffa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	f003 0308 	and.w	r3, r3, #8
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d004      	beq.n	8004ff4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004ff0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ff2:	e002      	b.n	8004ffa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f986 	bl	8005306 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005000:	2b00      	cmp	r3, #0
 8005002:	d024      	beq.n	800504e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800500c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f962 	bl	80052e2 <HAL_CAN_TxMailbox1CompleteCallback>
 800501e:	e016      	b.n	800504e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005026:	2b00      	cmp	r3, #0
 8005028:	d004      	beq.n	8005034 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800502a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005030:	627b      	str	r3, [r7, #36]	@ 0x24
 8005032:	e00c      	b.n	800504e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800503a:	2b00      	cmp	r3, #0
 800503c:	d004      	beq.n	8005048 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800503e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005040:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005044:	627b      	str	r3, [r7, #36]	@ 0x24
 8005046:	e002      	b.n	800504e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f965 	bl	8005318 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d024      	beq.n	80050a2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005060:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f941 	bl	80052f4 <HAL_CAN_TxMailbox2CompleteCallback>
 8005072:	e016      	b.n	80050a2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d004      	beq.n	8005088 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800507e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005080:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005084:	627b      	str	r3, [r7, #36]	@ 0x24
 8005086:	e00c      	b.n	80050a2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d004      	beq.n	800509c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005098:	627b      	str	r3, [r7, #36]	@ 0x24
 800509a:	e002      	b.n	80050a2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f944 	bl	800532a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	f003 0308 	and.w	r3, r3, #8
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00c      	beq.n	80050c6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f003 0310 	and.w	r3, r3, #16
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d007      	beq.n	80050c6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80050b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050bc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2210      	movs	r2, #16
 80050c4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00b      	beq.n	80050e8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f003 0308 	and.w	r3, r3, #8
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d006      	beq.n	80050e8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2208      	movs	r2, #8
 80050e0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f92a 	bl	800533c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d009      	beq.n	8005106 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f003 0303 	and.w	r3, r3, #3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7fc f9ab 	bl	800145c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00c      	beq.n	800512a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f003 0310 	and.w	r3, r3, #16
 8005116:	2b00      	cmp	r3, #0
 8005118:	d007      	beq.n	800512a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800511a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005120:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2210      	movs	r2, #16
 8005128:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	f003 0320 	and.w	r3, r3, #32
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00b      	beq.n	800514c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	2b00      	cmp	r3, #0
 800513c:	d006      	beq.n	800514c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2208      	movs	r2, #8
 8005144:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f90a 	bl	8005360 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	f003 0310 	and.w	r3, r3, #16
 8005152:	2b00      	cmp	r3, #0
 8005154:	d009      	beq.n	800516a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	f003 0303 	and.w	r3, r3, #3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f8f2 	bl	800534e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00b      	beq.n	800518c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	f003 0310 	and.w	r3, r3, #16
 800517a:	2b00      	cmp	r3, #0
 800517c:	d006      	beq.n	800518c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2210      	movs	r2, #16
 8005184:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f8f3 	bl	8005372 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00b      	beq.n	80051ae <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b00      	cmp	r3, #0
 800519e:	d006      	beq.n	80051ae <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2208      	movs	r2, #8
 80051a6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f8eb 	bl	8005384 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d07b      	beq.n	80052b0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	f003 0304 	and.w	r3, r3, #4
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d072      	beq.n	80052a8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d008      	beq.n	80051de <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80051d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d8:	f043 0301 	orr.w	r3, r3, #1
 80051dc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d008      	beq.n	80051fa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80051f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f4:	f043 0302 	orr.w	r3, r3, #2
 80051f8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005200:	2b00      	cmp	r3, #0
 8005202:	d008      	beq.n	8005216 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800520e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005210:	f043 0304 	orr.w	r3, r3, #4
 8005214:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800521c:	2b00      	cmp	r3, #0
 800521e:	d043      	beq.n	80052a8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005226:	2b00      	cmp	r3, #0
 8005228:	d03e      	beq.n	80052a8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005230:	2b60      	cmp	r3, #96	@ 0x60
 8005232:	d02b      	beq.n	800528c <HAL_CAN_IRQHandler+0x32a>
 8005234:	2b60      	cmp	r3, #96	@ 0x60
 8005236:	d82e      	bhi.n	8005296 <HAL_CAN_IRQHandler+0x334>
 8005238:	2b50      	cmp	r3, #80	@ 0x50
 800523a:	d022      	beq.n	8005282 <HAL_CAN_IRQHandler+0x320>
 800523c:	2b50      	cmp	r3, #80	@ 0x50
 800523e:	d82a      	bhi.n	8005296 <HAL_CAN_IRQHandler+0x334>
 8005240:	2b40      	cmp	r3, #64	@ 0x40
 8005242:	d019      	beq.n	8005278 <HAL_CAN_IRQHandler+0x316>
 8005244:	2b40      	cmp	r3, #64	@ 0x40
 8005246:	d826      	bhi.n	8005296 <HAL_CAN_IRQHandler+0x334>
 8005248:	2b30      	cmp	r3, #48	@ 0x30
 800524a:	d010      	beq.n	800526e <HAL_CAN_IRQHandler+0x30c>
 800524c:	2b30      	cmp	r3, #48	@ 0x30
 800524e:	d822      	bhi.n	8005296 <HAL_CAN_IRQHandler+0x334>
 8005250:	2b10      	cmp	r3, #16
 8005252:	d002      	beq.n	800525a <HAL_CAN_IRQHandler+0x2f8>
 8005254:	2b20      	cmp	r3, #32
 8005256:	d005      	beq.n	8005264 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005258:	e01d      	b.n	8005296 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800525a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525c:	f043 0308 	orr.w	r3, r3, #8
 8005260:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005262:	e019      	b.n	8005298 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005266:	f043 0310 	orr.w	r3, r3, #16
 800526a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800526c:	e014      	b.n	8005298 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800526e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005270:	f043 0320 	orr.w	r3, r3, #32
 8005274:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005276:	e00f      	b.n	8005298 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800527e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005280:	e00a      	b.n	8005298 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005288:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800528a:	e005      	b.n	8005298 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800528c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005292:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005294:	e000      	b.n	8005298 <HAL_CAN_IRQHandler+0x336>
            break;
 8005296:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699a      	ldr	r2, [r3, #24]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80052a6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2204      	movs	r2, #4
 80052ae:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80052b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d008      	beq.n	80052c8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052bc:	431a      	orrs	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f867 	bl	8005396 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80052c8:	bf00      	nop
 80052ca:	3728      	adds	r7, #40	@ 0x28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	bc80      	pop	{r7}
 80052e0:	4770      	bx	lr

080052e2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80052ea:	bf00      	nop
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr

080052f4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	bc80      	pop	{r7}
 8005304:	4770      	bx	lr

08005306 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005306:	b480      	push	{r7}
 8005308:	b083      	sub	sp, #12
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	bc80      	pop	{r7}
 8005316:	4770      	bx	lr

08005318 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	bc80      	pop	{r7}
 8005328:	4770      	bx	lr

0800532a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005332:	bf00      	nop
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	bc80      	pop	{r7}
 800533a:	4770      	bx	lr

0800533c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	bc80      	pop	{r7}
 800534c:	4770      	bx	lr

0800534e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	bc80      	pop	{r7}
 800535e:	4770      	bx	lr

08005360 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	bc80      	pop	{r7}
 8005370:	4770      	bx	lr

08005372 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005372:	b480      	push	{r7}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800537a:	bf00      	nop
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	bc80      	pop	{r7}
 8005382:	4770      	bx	lr

08005384 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	bc80      	pop	{r7}
 8005394:	4770      	bx	lr

08005396 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bc80      	pop	{r7}
 80053a6:	4770      	bx	lr

080053a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053b8:	4b0c      	ldr	r3, [pc, #48]	@ (80053ec <__NVIC_SetPriorityGrouping+0x44>)
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80053c4:	4013      	ands	r3, r2
 80053c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80053d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053da:	4a04      	ldr	r2, [pc, #16]	@ (80053ec <__NVIC_SetPriorityGrouping+0x44>)
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	60d3      	str	r3, [r2, #12]
}
 80053e0:	bf00      	nop
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bc80      	pop	{r7}
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	e000ed00 	.word	0xe000ed00

080053f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053f0:	b480      	push	{r7}
 80053f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053f4:	4b04      	ldr	r3, [pc, #16]	@ (8005408 <__NVIC_GetPriorityGrouping+0x18>)
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	0a1b      	lsrs	r3, r3, #8
 80053fa:	f003 0307 	and.w	r3, r3, #7
}
 80053fe:	4618      	mov	r0, r3
 8005400:	46bd      	mov	sp, r7
 8005402:	bc80      	pop	{r7}
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	e000ed00 	.word	0xe000ed00

0800540c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	4603      	mov	r3, r0
 8005414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800541a:	2b00      	cmp	r3, #0
 800541c:	db0b      	blt.n	8005436 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800541e:	79fb      	ldrb	r3, [r7, #7]
 8005420:	f003 021f 	and.w	r2, r3, #31
 8005424:	4906      	ldr	r1, [pc, #24]	@ (8005440 <__NVIC_EnableIRQ+0x34>)
 8005426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800542a:	095b      	lsrs	r3, r3, #5
 800542c:	2001      	movs	r0, #1
 800542e:	fa00 f202 	lsl.w	r2, r0, r2
 8005432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	bc80      	pop	{r7}
 800543e:	4770      	bx	lr
 8005440:	e000e100 	.word	0xe000e100

08005444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	4603      	mov	r3, r0
 800544c:	6039      	str	r1, [r7, #0]
 800544e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005454:	2b00      	cmp	r3, #0
 8005456:	db0a      	blt.n	800546e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	b2da      	uxtb	r2, r3
 800545c:	490c      	ldr	r1, [pc, #48]	@ (8005490 <__NVIC_SetPriority+0x4c>)
 800545e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005462:	0112      	lsls	r2, r2, #4
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	440b      	add	r3, r1
 8005468:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800546c:	e00a      	b.n	8005484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	b2da      	uxtb	r2, r3
 8005472:	4908      	ldr	r1, [pc, #32]	@ (8005494 <__NVIC_SetPriority+0x50>)
 8005474:	79fb      	ldrb	r3, [r7, #7]
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	3b04      	subs	r3, #4
 800547c:	0112      	lsls	r2, r2, #4
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	440b      	add	r3, r1
 8005482:	761a      	strb	r2, [r3, #24]
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	bc80      	pop	{r7}
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	e000e100 	.word	0xe000e100
 8005494:	e000ed00 	.word	0xe000ed00

08005498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005498:	b480      	push	{r7}
 800549a:	b089      	sub	sp, #36	@ 0x24
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f003 0307 	and.w	r3, r3, #7
 80054aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	f1c3 0307 	rsb	r3, r3, #7
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	bf28      	it	cs
 80054b6:	2304      	movcs	r3, #4
 80054b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	3304      	adds	r3, #4
 80054be:	2b06      	cmp	r3, #6
 80054c0:	d902      	bls.n	80054c8 <NVIC_EncodePriority+0x30>
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	3b03      	subs	r3, #3
 80054c6:	e000      	b.n	80054ca <NVIC_EncodePriority+0x32>
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054cc:	f04f 32ff 	mov.w	r2, #4294967295
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	fa02 f303 	lsl.w	r3, r2, r3
 80054d6:	43da      	mvns	r2, r3
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	401a      	ands	r2, r3
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054e0:	f04f 31ff 	mov.w	r1, #4294967295
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ea:	43d9      	mvns	r1, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054f0:	4313      	orrs	r3, r2
         );
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3724      	adds	r7, #36	@ 0x24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bc80      	pop	{r7}
 80054fa:	4770      	bx	lr

080054fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f7ff ff4f 	bl	80053a8 <__NVIC_SetPriorityGrouping>
}
 800550a:	bf00      	nop
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005512:	b580      	push	{r7, lr}
 8005514:	b086      	sub	sp, #24
 8005516:	af00      	add	r7, sp, #0
 8005518:	4603      	mov	r3, r0
 800551a:	60b9      	str	r1, [r7, #8]
 800551c:	607a      	str	r2, [r7, #4]
 800551e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005520:	2300      	movs	r3, #0
 8005522:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005524:	f7ff ff64 	bl	80053f0 <__NVIC_GetPriorityGrouping>
 8005528:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	68b9      	ldr	r1, [r7, #8]
 800552e:	6978      	ldr	r0, [r7, #20]
 8005530:	f7ff ffb2 	bl	8005498 <NVIC_EncodePriority>
 8005534:	4602      	mov	r2, r0
 8005536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800553a:	4611      	mov	r1, r2
 800553c:	4618      	mov	r0, r3
 800553e:	f7ff ff81 	bl	8005444 <__NVIC_SetPriority>
}
 8005542:	bf00      	nop
 8005544:	3718      	adds	r7, #24
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b082      	sub	sp, #8
 800554e:	af00      	add	r7, sp, #0
 8005550:	4603      	mov	r3, r0
 8005552:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005558:	4618      	mov	r0, r3
 800555a:	f7ff ff57 	bl	800540c <__NVIC_EnableIRQ>
}
 800555e:	bf00      	nop
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005568:	b480      	push	{r7}
 800556a:	b08b      	sub	sp, #44	@ 0x2c
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005572:	2300      	movs	r3, #0
 8005574:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005576:	2300      	movs	r3, #0
 8005578:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800557a:	e179      	b.n	8005870 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800557c:	2201      	movs	r2, #1
 800557e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005580:	fa02 f303 	lsl.w	r3, r2, r3
 8005584:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	69fa      	ldr	r2, [r7, #28]
 800558c:	4013      	ands	r3, r2
 800558e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	429a      	cmp	r2, r3
 8005596:	f040 8168 	bne.w	800586a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	4a96      	ldr	r2, [pc, #600]	@ (80057f8 <HAL_GPIO_Init+0x290>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d05e      	beq.n	8005662 <HAL_GPIO_Init+0xfa>
 80055a4:	4a94      	ldr	r2, [pc, #592]	@ (80057f8 <HAL_GPIO_Init+0x290>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d875      	bhi.n	8005696 <HAL_GPIO_Init+0x12e>
 80055aa:	4a94      	ldr	r2, [pc, #592]	@ (80057fc <HAL_GPIO_Init+0x294>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d058      	beq.n	8005662 <HAL_GPIO_Init+0xfa>
 80055b0:	4a92      	ldr	r2, [pc, #584]	@ (80057fc <HAL_GPIO_Init+0x294>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d86f      	bhi.n	8005696 <HAL_GPIO_Init+0x12e>
 80055b6:	4a92      	ldr	r2, [pc, #584]	@ (8005800 <HAL_GPIO_Init+0x298>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d052      	beq.n	8005662 <HAL_GPIO_Init+0xfa>
 80055bc:	4a90      	ldr	r2, [pc, #576]	@ (8005800 <HAL_GPIO_Init+0x298>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d869      	bhi.n	8005696 <HAL_GPIO_Init+0x12e>
 80055c2:	4a90      	ldr	r2, [pc, #576]	@ (8005804 <HAL_GPIO_Init+0x29c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d04c      	beq.n	8005662 <HAL_GPIO_Init+0xfa>
 80055c8:	4a8e      	ldr	r2, [pc, #568]	@ (8005804 <HAL_GPIO_Init+0x29c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d863      	bhi.n	8005696 <HAL_GPIO_Init+0x12e>
 80055ce:	4a8e      	ldr	r2, [pc, #568]	@ (8005808 <HAL_GPIO_Init+0x2a0>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d046      	beq.n	8005662 <HAL_GPIO_Init+0xfa>
 80055d4:	4a8c      	ldr	r2, [pc, #560]	@ (8005808 <HAL_GPIO_Init+0x2a0>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d85d      	bhi.n	8005696 <HAL_GPIO_Init+0x12e>
 80055da:	2b12      	cmp	r3, #18
 80055dc:	d82a      	bhi.n	8005634 <HAL_GPIO_Init+0xcc>
 80055de:	2b12      	cmp	r3, #18
 80055e0:	d859      	bhi.n	8005696 <HAL_GPIO_Init+0x12e>
 80055e2:	a201      	add	r2, pc, #4	@ (adr r2, 80055e8 <HAL_GPIO_Init+0x80>)
 80055e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e8:	08005663 	.word	0x08005663
 80055ec:	0800563d 	.word	0x0800563d
 80055f0:	0800564f 	.word	0x0800564f
 80055f4:	08005691 	.word	0x08005691
 80055f8:	08005697 	.word	0x08005697
 80055fc:	08005697 	.word	0x08005697
 8005600:	08005697 	.word	0x08005697
 8005604:	08005697 	.word	0x08005697
 8005608:	08005697 	.word	0x08005697
 800560c:	08005697 	.word	0x08005697
 8005610:	08005697 	.word	0x08005697
 8005614:	08005697 	.word	0x08005697
 8005618:	08005697 	.word	0x08005697
 800561c:	08005697 	.word	0x08005697
 8005620:	08005697 	.word	0x08005697
 8005624:	08005697 	.word	0x08005697
 8005628:	08005697 	.word	0x08005697
 800562c:	08005645 	.word	0x08005645
 8005630:	08005659 	.word	0x08005659
 8005634:	4a75      	ldr	r2, [pc, #468]	@ (800580c <HAL_GPIO_Init+0x2a4>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d013      	beq.n	8005662 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800563a:	e02c      	b.n	8005696 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	623b      	str	r3, [r7, #32]
          break;
 8005642:	e029      	b.n	8005698 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	3304      	adds	r3, #4
 800564a:	623b      	str	r3, [r7, #32]
          break;
 800564c:	e024      	b.n	8005698 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	3308      	adds	r3, #8
 8005654:	623b      	str	r3, [r7, #32]
          break;
 8005656:	e01f      	b.n	8005698 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	330c      	adds	r3, #12
 800565e:	623b      	str	r3, [r7, #32]
          break;
 8005660:	e01a      	b.n	8005698 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d102      	bne.n	8005670 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800566a:	2304      	movs	r3, #4
 800566c:	623b      	str	r3, [r7, #32]
          break;
 800566e:	e013      	b.n	8005698 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d105      	bne.n	8005684 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005678:	2308      	movs	r3, #8
 800567a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	69fa      	ldr	r2, [r7, #28]
 8005680:	611a      	str	r2, [r3, #16]
          break;
 8005682:	e009      	b.n	8005698 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005684:	2308      	movs	r3, #8
 8005686:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	615a      	str	r2, [r3, #20]
          break;
 800568e:	e003      	b.n	8005698 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005690:	2300      	movs	r3, #0
 8005692:	623b      	str	r3, [r7, #32]
          break;
 8005694:	e000      	b.n	8005698 <HAL_GPIO_Init+0x130>
          break;
 8005696:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	2bff      	cmp	r3, #255	@ 0xff
 800569c:	d801      	bhi.n	80056a2 <HAL_GPIO_Init+0x13a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	e001      	b.n	80056a6 <HAL_GPIO_Init+0x13e>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	3304      	adds	r3, #4
 80056a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	2bff      	cmp	r3, #255	@ 0xff
 80056ac:	d802      	bhi.n	80056b4 <HAL_GPIO_Init+0x14c>
 80056ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	e002      	b.n	80056ba <HAL_GPIO_Init+0x152>
 80056b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b6:	3b08      	subs	r3, #8
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	210f      	movs	r1, #15
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	fa01 f303 	lsl.w	r3, r1, r3
 80056c8:	43db      	mvns	r3, r3
 80056ca:	401a      	ands	r2, r3
 80056cc:	6a39      	ldr	r1, [r7, #32]
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	fa01 f303 	lsl.w	r3, r1, r3
 80056d4:	431a      	orrs	r2, r3
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f000 80c1 	beq.w	800586a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80056e8:	4b49      	ldr	r3, [pc, #292]	@ (8005810 <HAL_GPIO_Init+0x2a8>)
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	4a48      	ldr	r2, [pc, #288]	@ (8005810 <HAL_GPIO_Init+0x2a8>)
 80056ee:	f043 0301 	orr.w	r3, r3, #1
 80056f2:	6193      	str	r3, [r2, #24]
 80056f4:	4b46      	ldr	r3, [pc, #280]	@ (8005810 <HAL_GPIO_Init+0x2a8>)
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	60bb      	str	r3, [r7, #8]
 80056fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005700:	4a44      	ldr	r2, [pc, #272]	@ (8005814 <HAL_GPIO_Init+0x2ac>)
 8005702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005704:	089b      	lsrs	r3, r3, #2
 8005706:	3302      	adds	r3, #2
 8005708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800570c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800570e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005710:	f003 0303 	and.w	r3, r3, #3
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	220f      	movs	r2, #15
 8005718:	fa02 f303 	lsl.w	r3, r2, r3
 800571c:	43db      	mvns	r3, r3
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	4013      	ands	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a3c      	ldr	r2, [pc, #240]	@ (8005818 <HAL_GPIO_Init+0x2b0>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d01f      	beq.n	800576c <HAL_GPIO_Init+0x204>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a3b      	ldr	r2, [pc, #236]	@ (800581c <HAL_GPIO_Init+0x2b4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d019      	beq.n	8005768 <HAL_GPIO_Init+0x200>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a3a      	ldr	r2, [pc, #232]	@ (8005820 <HAL_GPIO_Init+0x2b8>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d013      	beq.n	8005764 <HAL_GPIO_Init+0x1fc>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a39      	ldr	r2, [pc, #228]	@ (8005824 <HAL_GPIO_Init+0x2bc>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d00d      	beq.n	8005760 <HAL_GPIO_Init+0x1f8>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a38      	ldr	r2, [pc, #224]	@ (8005828 <HAL_GPIO_Init+0x2c0>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d007      	beq.n	800575c <HAL_GPIO_Init+0x1f4>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a37      	ldr	r2, [pc, #220]	@ (800582c <HAL_GPIO_Init+0x2c4>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d101      	bne.n	8005758 <HAL_GPIO_Init+0x1f0>
 8005754:	2305      	movs	r3, #5
 8005756:	e00a      	b.n	800576e <HAL_GPIO_Init+0x206>
 8005758:	2306      	movs	r3, #6
 800575a:	e008      	b.n	800576e <HAL_GPIO_Init+0x206>
 800575c:	2304      	movs	r3, #4
 800575e:	e006      	b.n	800576e <HAL_GPIO_Init+0x206>
 8005760:	2303      	movs	r3, #3
 8005762:	e004      	b.n	800576e <HAL_GPIO_Init+0x206>
 8005764:	2302      	movs	r3, #2
 8005766:	e002      	b.n	800576e <HAL_GPIO_Init+0x206>
 8005768:	2301      	movs	r3, #1
 800576a:	e000      	b.n	800576e <HAL_GPIO_Init+0x206>
 800576c:	2300      	movs	r3, #0
 800576e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005770:	f002 0203 	and.w	r2, r2, #3
 8005774:	0092      	lsls	r2, r2, #2
 8005776:	4093      	lsls	r3, r2
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	4313      	orrs	r3, r2
 800577c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800577e:	4925      	ldr	r1, [pc, #148]	@ (8005814 <HAL_GPIO_Init+0x2ac>)
 8005780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005782:	089b      	lsrs	r3, r3, #2
 8005784:	3302      	adds	r3, #2
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d006      	beq.n	80057a6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005798:	4b25      	ldr	r3, [pc, #148]	@ (8005830 <HAL_GPIO_Init+0x2c8>)
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	4924      	ldr	r1, [pc, #144]	@ (8005830 <HAL_GPIO_Init+0x2c8>)
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	608b      	str	r3, [r1, #8]
 80057a4:	e006      	b.n	80057b4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80057a6:	4b22      	ldr	r3, [pc, #136]	@ (8005830 <HAL_GPIO_Init+0x2c8>)
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	43db      	mvns	r3, r3
 80057ae:	4920      	ldr	r1, [pc, #128]	@ (8005830 <HAL_GPIO_Init+0x2c8>)
 80057b0:	4013      	ands	r3, r2
 80057b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d006      	beq.n	80057ce <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80057c0:	4b1b      	ldr	r3, [pc, #108]	@ (8005830 <HAL_GPIO_Init+0x2c8>)
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	491a      	ldr	r1, [pc, #104]	@ (8005830 <HAL_GPIO_Init+0x2c8>)
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	60cb      	str	r3, [r1, #12]
 80057cc:	e006      	b.n	80057dc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80057ce:	4b18      	ldr	r3, [pc, #96]	@ (8005830 <HAL_GPIO_Init+0x2c8>)
 80057d0:	68da      	ldr	r2, [r3, #12]
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	43db      	mvns	r3, r3
 80057d6:	4916      	ldr	r1, [pc, #88]	@ (8005830 <HAL_GPIO_Init+0x2c8>)
 80057d8:	4013      	ands	r3, r2
 80057da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d025      	beq.n	8005834 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80057e8:	4b11      	ldr	r3, [pc, #68]	@ (8005830 <HAL_GPIO_Init+0x2c8>)
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	4910      	ldr	r1, [pc, #64]	@ (8005830 <HAL_GPIO_Init+0x2c8>)
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	604b      	str	r3, [r1, #4]
 80057f4:	e025      	b.n	8005842 <HAL_GPIO_Init+0x2da>
 80057f6:	bf00      	nop
 80057f8:	10320000 	.word	0x10320000
 80057fc:	10310000 	.word	0x10310000
 8005800:	10220000 	.word	0x10220000
 8005804:	10210000 	.word	0x10210000
 8005808:	10120000 	.word	0x10120000
 800580c:	10110000 	.word	0x10110000
 8005810:	40021000 	.word	0x40021000
 8005814:	40010000 	.word	0x40010000
 8005818:	40010800 	.word	0x40010800
 800581c:	40010c00 	.word	0x40010c00
 8005820:	40011000 	.word	0x40011000
 8005824:	40011400 	.word	0x40011400
 8005828:	40011800 	.word	0x40011800
 800582c:	40011c00 	.word	0x40011c00
 8005830:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005834:	4b15      	ldr	r3, [pc, #84]	@ (800588c <HAL_GPIO_Init+0x324>)
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	43db      	mvns	r3, r3
 800583c:	4913      	ldr	r1, [pc, #76]	@ (800588c <HAL_GPIO_Init+0x324>)
 800583e:	4013      	ands	r3, r2
 8005840:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d006      	beq.n	800585c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800584e:	4b0f      	ldr	r3, [pc, #60]	@ (800588c <HAL_GPIO_Init+0x324>)
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	490e      	ldr	r1, [pc, #56]	@ (800588c <HAL_GPIO_Init+0x324>)
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	4313      	orrs	r3, r2
 8005858:	600b      	str	r3, [r1, #0]
 800585a:	e006      	b.n	800586a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800585c:	4b0b      	ldr	r3, [pc, #44]	@ (800588c <HAL_GPIO_Init+0x324>)
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	43db      	mvns	r3, r3
 8005864:	4909      	ldr	r1, [pc, #36]	@ (800588c <HAL_GPIO_Init+0x324>)
 8005866:	4013      	ands	r3, r2
 8005868:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800586a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586c:	3301      	adds	r3, #1
 800586e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005876:	fa22 f303 	lsr.w	r3, r2, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	f47f ae7e 	bne.w	800557c <HAL_GPIO_Init+0x14>
  }
}
 8005880:	bf00      	nop
 8005882:	bf00      	nop
 8005884:	372c      	adds	r7, #44	@ 0x2c
 8005886:	46bd      	mov	sp, r7
 8005888:	bc80      	pop	{r7}
 800588a:	4770      	bx	lr
 800588c:	40010400 	.word	0x40010400

08005890 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	460b      	mov	r3, r1
 800589a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	887b      	ldrh	r3, [r7, #2]
 80058a2:	4013      	ands	r3, r2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80058a8:	2301      	movs	r3, #1
 80058aa:	73fb      	strb	r3, [r7, #15]
 80058ac:	e001      	b.n	80058b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058ae:	2300      	movs	r3, #0
 80058b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80058b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bc80      	pop	{r7}
 80058bc:	4770      	bx	lr

080058be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058be:	b480      	push	{r7}
 80058c0:	b083      	sub	sp, #12
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	460b      	mov	r3, r1
 80058c8:	807b      	strh	r3, [r7, #2]
 80058ca:	4613      	mov	r3, r2
 80058cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058ce:	787b      	ldrb	r3, [r7, #1]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d003      	beq.n	80058dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058d4:	887a      	ldrh	r2, [r7, #2]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80058da:	e003      	b.n	80058e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80058dc:	887b      	ldrh	r3, [r7, #2]
 80058de:	041a      	lsls	r2, r3, #16
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	611a      	str	r2, [r3, #16]
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bc80      	pop	{r7}
 80058ec:	4770      	bx	lr

080058ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b085      	sub	sp, #20
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
 80058f6:	460b      	mov	r3, r1
 80058f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005900:	887a      	ldrh	r2, [r7, #2]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4013      	ands	r3, r2
 8005906:	041a      	lsls	r2, r3, #16
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	43d9      	mvns	r1, r3
 800590c:	887b      	ldrh	r3, [r7, #2]
 800590e:	400b      	ands	r3, r1
 8005910:	431a      	orrs	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	611a      	str	r2, [r3, #16]
}
 8005916:	bf00      	nop
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	bc80      	pop	{r7}
 800591e:	4770      	bx	lr

08005920 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e12b      	b.n	8005b8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d106      	bne.n	800594c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7fd fa7c 	bl	8002e44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2224      	movs	r2, #36	@ 0x24
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 0201 	bic.w	r2, r2, #1
 8005962:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005972:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005982:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005984:	f002 f864 	bl	8007a50 <HAL_RCC_GetPCLK1Freq>
 8005988:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	4a81      	ldr	r2, [pc, #516]	@ (8005b94 <HAL_I2C_Init+0x274>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d807      	bhi.n	80059a4 <HAL_I2C_Init+0x84>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4a80      	ldr	r2, [pc, #512]	@ (8005b98 <HAL_I2C_Init+0x278>)
 8005998:	4293      	cmp	r3, r2
 800599a:	bf94      	ite	ls
 800599c:	2301      	movls	r3, #1
 800599e:	2300      	movhi	r3, #0
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	e006      	b.n	80059b2 <HAL_I2C_Init+0x92>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4a7d      	ldr	r2, [pc, #500]	@ (8005b9c <HAL_I2C_Init+0x27c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	bf94      	ite	ls
 80059ac:	2301      	movls	r3, #1
 80059ae:	2300      	movhi	r3, #0
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e0e7      	b.n	8005b8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4a78      	ldr	r2, [pc, #480]	@ (8005ba0 <HAL_I2C_Init+0x280>)
 80059be:	fba2 2303 	umull	r2, r3, r2, r3
 80059c2:	0c9b      	lsrs	r3, r3, #18
 80059c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	4a6a      	ldr	r2, [pc, #424]	@ (8005b94 <HAL_I2C_Init+0x274>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d802      	bhi.n	80059f4 <HAL_I2C_Init+0xd4>
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	3301      	adds	r3, #1
 80059f2:	e009      	b.n	8005a08 <HAL_I2C_Init+0xe8>
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80059fa:	fb02 f303 	mul.w	r3, r2, r3
 80059fe:	4a69      	ldr	r2, [pc, #420]	@ (8005ba4 <HAL_I2C_Init+0x284>)
 8005a00:	fba2 2303 	umull	r2, r3, r2, r3
 8005a04:	099b      	lsrs	r3, r3, #6
 8005a06:	3301      	adds	r3, #1
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6812      	ldr	r2, [r2, #0]
 8005a0c:	430b      	orrs	r3, r1
 8005a0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005a1a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	495c      	ldr	r1, [pc, #368]	@ (8005b94 <HAL_I2C_Init+0x274>)
 8005a24:	428b      	cmp	r3, r1
 8005a26:	d819      	bhi.n	8005a5c <HAL_I2C_Init+0x13c>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	1e59      	subs	r1, r3, #1
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a36:	1c59      	adds	r1, r3, #1
 8005a38:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005a3c:	400b      	ands	r3, r1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <HAL_I2C_Init+0x138>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	1e59      	subs	r1, r3, #1
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	005b      	lsls	r3, r3, #1
 8005a4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a50:	3301      	adds	r3, #1
 8005a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a56:	e051      	b.n	8005afc <HAL_I2C_Init+0x1dc>
 8005a58:	2304      	movs	r3, #4
 8005a5a:	e04f      	b.n	8005afc <HAL_I2C_Init+0x1dc>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d111      	bne.n	8005a88 <HAL_I2C_Init+0x168>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	1e58      	subs	r0, r3, #1
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6859      	ldr	r1, [r3, #4]
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	440b      	add	r3, r1
 8005a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a76:	3301      	adds	r3, #1
 8005a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	bf0c      	ite	eq
 8005a80:	2301      	moveq	r3, #1
 8005a82:	2300      	movne	r3, #0
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	e012      	b.n	8005aae <HAL_I2C_Init+0x18e>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	1e58      	subs	r0, r3, #1
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6859      	ldr	r1, [r3, #4]
 8005a90:	460b      	mov	r3, r1
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	440b      	add	r3, r1
 8005a96:	0099      	lsls	r1, r3, #2
 8005a98:	440b      	add	r3, r1
 8005a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	bf0c      	ite	eq
 8005aa8:	2301      	moveq	r3, #1
 8005aaa:	2300      	movne	r3, #0
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <HAL_I2C_Init+0x196>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e022      	b.n	8005afc <HAL_I2C_Init+0x1dc>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10e      	bne.n	8005adc <HAL_I2C_Init+0x1bc>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	1e58      	subs	r0, r3, #1
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6859      	ldr	r1, [r3, #4]
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	440b      	add	r3, r1
 8005acc:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ad6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ada:	e00f      	b.n	8005afc <HAL_I2C_Init+0x1dc>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	1e58      	subs	r0, r3, #1
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6859      	ldr	r1, [r3, #4]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	440b      	add	r3, r1
 8005aea:	0099      	lsls	r1, r3, #2
 8005aec:	440b      	add	r3, r1
 8005aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8005af2:	3301      	adds	r3, #1
 8005af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005af8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005afc:	6879      	ldr	r1, [r7, #4]
 8005afe:	6809      	ldr	r1, [r1, #0]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	69da      	ldr	r2, [r3, #28]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	431a      	orrs	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005b2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	6911      	ldr	r1, [r2, #16]
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	68d2      	ldr	r2, [r2, #12]
 8005b36:	4311      	orrs	r1, r2
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6812      	ldr	r2, [r2, #0]
 8005b3c:	430b      	orrs	r3, r1
 8005b3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	695a      	ldr	r2, [r3, #20]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	431a      	orrs	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0201 	orr.w	r2, r2, #1
 8005b6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2220      	movs	r2, #32
 8005b76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	000186a0 	.word	0x000186a0
 8005b98:	001e847f 	.word	0x001e847f
 8005b9c:	003d08ff 	.word	0x003d08ff
 8005ba0:	431bde83 	.word	0x431bde83
 8005ba4:	10624dd3 	.word	0x10624dd3

08005ba8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b08c      	sub	sp, #48	@ 0x30
 8005bac:	af02      	add	r7, sp, #8
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	607a      	str	r2, [r7, #4]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	817b      	strh	r3, [r7, #10]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005bc0:	f7fe fd84 	bl	80046cc <HAL_GetTick>
 8005bc4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b20      	cmp	r3, #32
 8005bd0:	f040 824b 	bne.w	800606a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	2319      	movs	r3, #25
 8005bda:	2201      	movs	r2, #1
 8005bdc:	497f      	ldr	r1, [pc, #508]	@ (8005ddc <HAL_I2C_Master_Receive+0x234>)
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f001 f92a 	bl	8006e38 <I2C_WaitOnFlagUntilTimeout>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8005bea:	2302      	movs	r3, #2
 8005bec:	e23e      	b.n	800606c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d101      	bne.n	8005bfc <HAL_I2C_Master_Receive+0x54>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e237      	b.n	800606c <HAL_I2C_Master_Receive+0x4c4>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d007      	beq.n	8005c22 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f042 0201 	orr.w	r2, r2, #1
 8005c20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2222      	movs	r2, #34	@ 0x22
 8005c36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2210      	movs	r2, #16
 8005c3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	893a      	ldrh	r2, [r7, #8]
 8005c52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4a5f      	ldr	r2, [pc, #380]	@ (8005de0 <HAL_I2C_Master_Receive+0x238>)
 8005c62:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005c64:	8979      	ldrh	r1, [r7, #10]
 8005c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 fe98 	bl	80069a0 <I2C_MasterRequestRead>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e1f8      	b.n	800606c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d113      	bne.n	8005caa <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c82:	2300      	movs	r3, #0
 8005c84:	61fb      	str	r3, [r7, #28]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	61fb      	str	r3, [r7, #28]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	61fb      	str	r3, [r7, #28]
 8005c96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	e1cc      	b.n	8006044 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d11e      	bne.n	8005cf0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cc0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005cc2:	b672      	cpsid	i
}
 8005cc4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	61bb      	str	r3, [r7, #24]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	61bb      	str	r3, [r7, #24]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	61bb      	str	r3, [r7, #24]
 8005cda:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005cec:	b662      	cpsie	i
}
 8005cee:	e035      	b.n	8005d5c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d11e      	bne.n	8005d36 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005d08:	b672      	cpsid	i
}
 8005d0a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	617b      	str	r3, [r7, #20]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	617b      	str	r3, [r7, #20]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	617b      	str	r3, [r7, #20]
 8005d20:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005d32:	b662      	cpsie	i
}
 8005d34:	e012      	b.n	8005d5c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005d44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d46:	2300      	movs	r3, #0
 8005d48:	613b      	str	r3, [r7, #16]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	613b      	str	r3, [r7, #16]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	613b      	str	r3, [r7, #16]
 8005d5a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005d5c:	e172      	b.n	8006044 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d62:	2b03      	cmp	r3, #3
 8005d64:	f200 811f 	bhi.w	8005fa6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d123      	bne.n	8005db8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f001 fa09 	bl	800718c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e173      	b.n	800606c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	691a      	ldr	r2, [r3, #16]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005da0:	3b01      	subs	r3, #1
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	3b01      	subs	r3, #1
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005db6:	e145      	b.n	8006044 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d152      	bne.n	8005e66 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc2:	9300      	str	r3, [sp, #0]
 8005dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	4906      	ldr	r1, [pc, #24]	@ (8005de4 <HAL_I2C_Master_Receive+0x23c>)
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f001 f834 	bl	8006e38 <I2C_WaitOnFlagUntilTimeout>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d008      	beq.n	8005de8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e148      	b.n	800606c <HAL_I2C_Master_Receive+0x4c4>
 8005dda:	bf00      	nop
 8005ddc:	00100002 	.word	0x00100002
 8005de0:	ffff0000 	.word	0xffff0000
 8005de4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005de8:	b672      	cpsid	i
}
 8005dea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691a      	ldr	r2, [r3, #16]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e06:	b2d2      	uxtb	r2, r2
 8005e08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	3b01      	subs	r3, #1
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005e2e:	b662      	cpsie	i
}
 8005e30:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	691a      	ldr	r2, [r3, #16]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3c:	b2d2      	uxtb	r2, r2
 8005e3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e64:	e0ee      	b.n	8006044 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	4981      	ldr	r1, [pc, #516]	@ (8006074 <HAL_I2C_Master_Receive+0x4cc>)
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 ffe1 	bl	8006e38 <I2C_WaitOnFlagUntilTimeout>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e0f5      	b.n	800606c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e90:	b672      	cpsid	i
}
 8005e92:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	691a      	ldr	r2, [r3, #16]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9e:	b2d2      	uxtb	r2, r2
 8005ea0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea6:	1c5a      	adds	r2, r3, #1
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ec6:	4b6c      	ldr	r3, [pc, #432]	@ (8006078 <HAL_I2C_Master_Receive+0x4d0>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	08db      	lsrs	r3, r3, #3
 8005ecc:	4a6b      	ldr	r2, [pc, #428]	@ (800607c <HAL_I2C_Master_Receive+0x4d4>)
 8005ece:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed2:	0a1a      	lsrs	r2, r3, #8
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4413      	add	r3, r2
 8005eda:	00da      	lsls	r2, r3, #3
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d118      	bne.n	8005f1e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f06:	f043 0220 	orr.w	r2, r3, #32
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005f0e:	b662      	cpsie	i
}
 8005f10:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e0a6      	b.n	800606c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	f003 0304 	and.w	r3, r3, #4
 8005f28:	2b04      	cmp	r3, #4
 8005f2a:	d1d9      	bne.n	8005ee0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	691a      	ldr	r2, [r3, #16]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f46:	b2d2      	uxtb	r2, r2
 8005f48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4e:	1c5a      	adds	r2, r3, #1
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	3b01      	subs	r3, #1
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005f6e:	b662      	cpsie	i
}
 8005f70:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	691a      	ldr	r2, [r3, #16]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7c:	b2d2      	uxtb	r2, r2
 8005f7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f84:	1c5a      	adds	r2, r3, #1
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005fa4:	e04e      	b.n	8006044 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fa8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f001 f8ee 	bl	800718c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e058      	b.n	800606c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	691a      	ldr	r2, [r3, #16]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc4:	b2d2      	uxtb	r2, r2
 8005fc6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fcc:	1c5a      	adds	r2, r3, #1
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	f003 0304 	and.w	r3, r3, #4
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d124      	bne.n	8006044 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d107      	bne.n	8006012 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006010:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	691a      	ldr	r2, [r3, #16]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601c:	b2d2      	uxtb	r2, r2
 800601e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800602e:	3b01      	subs	r3, #1
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800603a:	b29b      	uxth	r3, r3
 800603c:	3b01      	subs	r3, #1
 800603e:	b29a      	uxth	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006048:	2b00      	cmp	r3, #0
 800604a:	f47f ae88 	bne.w	8005d5e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2220      	movs	r2, #32
 8006052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	e000      	b.n	800606c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800606a:	2302      	movs	r3, #2
  }
}
 800606c:	4618      	mov	r0, r3
 800606e:	3728      	adds	r7, #40	@ 0x28
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	00010004 	.word	0x00010004
 8006078:	200000e0 	.word	0x200000e0
 800607c:	14f8b589 	.word	0x14f8b589

08006080 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af02      	add	r7, sp, #8
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	4608      	mov	r0, r1
 800608a:	4611      	mov	r1, r2
 800608c:	461a      	mov	r2, r3
 800608e:	4603      	mov	r3, r0
 8006090:	817b      	strh	r3, [r7, #10]
 8006092:	460b      	mov	r3, r1
 8006094:	813b      	strh	r3, [r7, #8]
 8006096:	4613      	mov	r3, r2
 8006098:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800609a:	f7fe fb17 	bl	80046cc <HAL_GetTick>
 800609e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b20      	cmp	r3, #32
 80060aa:	f040 80d9 	bne.w	8006260 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	2319      	movs	r3, #25
 80060b4:	2201      	movs	r2, #1
 80060b6:	496d      	ldr	r1, [pc, #436]	@ (800626c <HAL_I2C_Mem_Write+0x1ec>)
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f000 febd 	bl	8006e38 <I2C_WaitOnFlagUntilTimeout>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80060c4:	2302      	movs	r3, #2
 80060c6:	e0cc      	b.n	8006262 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d101      	bne.n	80060d6 <HAL_I2C_Mem_Write+0x56>
 80060d2:	2302      	movs	r3, #2
 80060d4:	e0c5      	b.n	8006262 <HAL_I2C_Mem_Write+0x1e2>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d007      	beq.n	80060fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 0201 	orr.w	r2, r2, #1
 80060fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800610a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2221      	movs	r2, #33	@ 0x21
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2240      	movs	r2, #64	@ 0x40
 8006118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6a3a      	ldr	r2, [r7, #32]
 8006126:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800612c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006132:	b29a      	uxth	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4a4d      	ldr	r2, [pc, #308]	@ (8006270 <HAL_I2C_Mem_Write+0x1f0>)
 800613c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800613e:	88f8      	ldrh	r0, [r7, #6]
 8006140:	893a      	ldrh	r2, [r7, #8]
 8006142:	8979      	ldrh	r1, [r7, #10]
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	9301      	str	r3, [sp, #4]
 8006148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	4603      	mov	r3, r0
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f000 fcf4 	bl	8006b3c <I2C_RequestMemoryWrite>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d052      	beq.n	8006200 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e081      	b.n	8006262 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 ff82 	bl	800706c <I2C_WaitOnTXEFlagUntilTimeout>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00d      	beq.n	800618a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006172:	2b04      	cmp	r3, #4
 8006174:	d107      	bne.n	8006186 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006184:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e06b      	b.n	8006262 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618e:	781a      	ldrb	r2, [r3, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061a4:	3b01      	subs	r3, #1
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	3b01      	subs	r3, #1
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	f003 0304 	and.w	r3, r3, #4
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	d11b      	bne.n	8006200 <HAL_I2C_Mem_Write+0x180>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d017      	beq.n	8006200 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d4:	781a      	ldrb	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061ea:	3b01      	subs	r3, #1
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	3b01      	subs	r3, #1
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1aa      	bne.n	800615e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f000 ff75 	bl	80070fc <I2C_WaitOnBTFFlagUntilTimeout>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00d      	beq.n	8006234 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800621c:	2b04      	cmp	r3, #4
 800621e:	d107      	bne.n	8006230 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800622e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e016      	b.n	8006262 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006242:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2220      	movs	r2, #32
 8006248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800625c:	2300      	movs	r3, #0
 800625e:	e000      	b.n	8006262 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006260:	2302      	movs	r3, #2
  }
}
 8006262:	4618      	mov	r0, r3
 8006264:	3718      	adds	r7, #24
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	00100002 	.word	0x00100002
 8006270:	ffff0000 	.word	0xffff0000

08006274 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b08c      	sub	sp, #48	@ 0x30
 8006278:	af02      	add	r7, sp, #8
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	4608      	mov	r0, r1
 800627e:	4611      	mov	r1, r2
 8006280:	461a      	mov	r2, r3
 8006282:	4603      	mov	r3, r0
 8006284:	817b      	strh	r3, [r7, #10]
 8006286:	460b      	mov	r3, r1
 8006288:	813b      	strh	r3, [r7, #8]
 800628a:	4613      	mov	r3, r2
 800628c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800628e:	2300      	movs	r3, #0
 8006290:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006292:	f7fe fa1b 	bl	80046cc <HAL_GetTick>
 8006296:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b20      	cmp	r3, #32
 80062a2:	f040 8244 	bne.w	800672e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	2319      	movs	r3, #25
 80062ac:	2201      	movs	r2, #1
 80062ae:	4982      	ldr	r1, [pc, #520]	@ (80064b8 <HAL_I2C_Mem_Read+0x244>)
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f000 fdc1 	bl	8006e38 <I2C_WaitOnFlagUntilTimeout>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80062bc:	2302      	movs	r3, #2
 80062be:	e237      	b.n	8006730 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d101      	bne.n	80062ce <HAL_I2C_Mem_Read+0x5a>
 80062ca:	2302      	movs	r3, #2
 80062cc:	e230      	b.n	8006730 <HAL_I2C_Mem_Read+0x4bc>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d007      	beq.n	80062f4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 0201 	orr.w	r2, r2, #1
 80062f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006302:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2222      	movs	r2, #34	@ 0x22
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2240      	movs	r2, #64	@ 0x40
 8006310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800631e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006324:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800632a:	b29a      	uxth	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	4a62      	ldr	r2, [pc, #392]	@ (80064bc <HAL_I2C_Mem_Read+0x248>)
 8006334:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006336:	88f8      	ldrh	r0, [r7, #6]
 8006338:	893a      	ldrh	r2, [r7, #8]
 800633a:	8979      	ldrh	r1, [r7, #10]
 800633c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633e:	9301      	str	r3, [sp, #4]
 8006340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	4603      	mov	r3, r0
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f000 fc8e 	bl	8006c68 <I2C_RequestMemoryRead>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e1ec      	b.n	8006730 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800635a:	2b00      	cmp	r3, #0
 800635c:	d113      	bne.n	8006386 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800635e:	2300      	movs	r3, #0
 8006360:	61fb      	str	r3, [r7, #28]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	61fb      	str	r3, [r7, #28]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	61fb      	str	r3, [r7, #28]
 8006372:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006382:	601a      	str	r2, [r3, #0]
 8006384:	e1c0      	b.n	8006708 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800638a:	2b01      	cmp	r3, #1
 800638c:	d11e      	bne.n	80063cc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800639c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800639e:	b672      	cpsid	i
}
 80063a0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063a2:	2300      	movs	r3, #0
 80063a4:	61bb      	str	r3, [r7, #24]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	61bb      	str	r3, [r7, #24]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	61bb      	str	r3, [r7, #24]
 80063b6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80063c8:	b662      	cpsie	i
}
 80063ca:	e035      	b.n	8006438 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d11e      	bne.n	8006412 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80063e4:	b672      	cpsid	i
}
 80063e6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063e8:	2300      	movs	r3, #0
 80063ea:	617b      	str	r3, [r7, #20]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	617b      	str	r3, [r7, #20]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	617b      	str	r3, [r7, #20]
 80063fc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800640c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800640e:	b662      	cpsie	i
}
 8006410:	e012      	b.n	8006438 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006420:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006422:	2300      	movs	r3, #0
 8006424:	613b      	str	r3, [r7, #16]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	613b      	str	r3, [r7, #16]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	613b      	str	r3, [r7, #16]
 8006436:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006438:	e166      	b.n	8006708 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800643e:	2b03      	cmp	r3, #3
 8006440:	f200 811f 	bhi.w	8006682 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006448:	2b01      	cmp	r3, #1
 800644a:	d123      	bne.n	8006494 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800644c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800644e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f000 fe9b 	bl	800718c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d001      	beq.n	8006460 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e167      	b.n	8006730 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	691a      	ldr	r2, [r3, #16]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646a:	b2d2      	uxtb	r2, r2
 800646c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006472:	1c5a      	adds	r2, r3, #1
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800647c:	3b01      	subs	r3, #1
 800647e:	b29a      	uxth	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006488:	b29b      	uxth	r3, r3
 800648a:	3b01      	subs	r3, #1
 800648c:	b29a      	uxth	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006492:	e139      	b.n	8006708 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006498:	2b02      	cmp	r3, #2
 800649a:	d152      	bne.n	8006542 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800649c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649e:	9300      	str	r3, [sp, #0]
 80064a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a2:	2200      	movs	r2, #0
 80064a4:	4906      	ldr	r1, [pc, #24]	@ (80064c0 <HAL_I2C_Mem_Read+0x24c>)
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f000 fcc6 	bl	8006e38 <I2C_WaitOnFlagUntilTimeout>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d008      	beq.n	80064c4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e13c      	b.n	8006730 <HAL_I2C_Mem_Read+0x4bc>
 80064b6:	bf00      	nop
 80064b8:	00100002 	.word	0x00100002
 80064bc:	ffff0000 	.word	0xffff0000
 80064c0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80064c4:	b672      	cpsid	i
}
 80064c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691a      	ldr	r2, [r3, #16]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e2:	b2d2      	uxtb	r2, r2
 80064e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ea:	1c5a      	adds	r2, r3, #1
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064f4:	3b01      	subs	r3, #1
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006500:	b29b      	uxth	r3, r3
 8006502:	3b01      	subs	r3, #1
 8006504:	b29a      	uxth	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800650a:	b662      	cpsie	i
}
 800650c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	691a      	ldr	r2, [r3, #16]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006518:	b2d2      	uxtb	r2, r2
 800651a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006520:	1c5a      	adds	r2, r3, #1
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800652a:	3b01      	subs	r3, #1
 800652c:	b29a      	uxth	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006536:	b29b      	uxth	r3, r3
 8006538:	3b01      	subs	r3, #1
 800653a:	b29a      	uxth	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006540:	e0e2      	b.n	8006708 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006548:	2200      	movs	r2, #0
 800654a:	497b      	ldr	r1, [pc, #492]	@ (8006738 <HAL_I2C_Mem_Read+0x4c4>)
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 fc73 	bl	8006e38 <I2C_WaitOnFlagUntilTimeout>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d001      	beq.n	800655c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e0e9      	b.n	8006730 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800656a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800656c:	b672      	cpsid	i
}
 800656e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	691a      	ldr	r2, [r3, #16]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657a:	b2d2      	uxtb	r2, r2
 800657c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006582:	1c5a      	adds	r2, r3, #1
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800658c:	3b01      	subs	r3, #1
 800658e:	b29a      	uxth	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006598:	b29b      	uxth	r3, r3
 800659a:	3b01      	subs	r3, #1
 800659c:	b29a      	uxth	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80065a2:	4b66      	ldr	r3, [pc, #408]	@ (800673c <HAL_I2C_Mem_Read+0x4c8>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	08db      	lsrs	r3, r3, #3
 80065a8:	4a65      	ldr	r2, [pc, #404]	@ (8006740 <HAL_I2C_Mem_Read+0x4cc>)
 80065aa:	fba2 2303 	umull	r2, r3, r2, r3
 80065ae:	0a1a      	lsrs	r2, r3, #8
 80065b0:	4613      	mov	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4413      	add	r3, r2
 80065b6:	00da      	lsls	r2, r3, #3
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	3b01      	subs	r3, #1
 80065c0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d118      	bne.n	80065fa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2220      	movs	r2, #32
 80065d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e2:	f043 0220 	orr.w	r2, r3, #32
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80065ea:	b662      	cpsie	i
}
 80065ec:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e09a      	b.n	8006730 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	f003 0304 	and.w	r3, r3, #4
 8006604:	2b04      	cmp	r3, #4
 8006606:	d1d9      	bne.n	80065bc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006616:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	691a      	ldr	r2, [r3, #16]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006622:	b2d2      	uxtb	r2, r2
 8006624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800662a:	1c5a      	adds	r2, r3, #1
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006634:	3b01      	subs	r3, #1
 8006636:	b29a      	uxth	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006640:	b29b      	uxth	r3, r3
 8006642:	3b01      	subs	r3, #1
 8006644:	b29a      	uxth	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800664a:	b662      	cpsie	i
}
 800664c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	691a      	ldr	r2, [r3, #16]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006658:	b2d2      	uxtb	r2, r2
 800665a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800666a:	3b01      	subs	r3, #1
 800666c:	b29a      	uxth	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006676:	b29b      	uxth	r3, r3
 8006678:	3b01      	subs	r3, #1
 800667a:	b29a      	uxth	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006680:	e042      	b.n	8006708 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006684:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f000 fd80 	bl	800718c <I2C_WaitOnRXNEFlagUntilTimeout>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d001      	beq.n	8006696 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e04c      	b.n	8006730 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	691a      	ldr	r2, [r3, #16]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a0:	b2d2      	uxtb	r2, r2
 80066a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a8:	1c5a      	adds	r2, r3, #1
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066b2:	3b01      	subs	r3, #1
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066be:	b29b      	uxth	r3, r3
 80066c0:	3b01      	subs	r3, #1
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	f003 0304 	and.w	r3, r3, #4
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d118      	bne.n	8006708 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	691a      	ldr	r2, [r3, #16]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e0:	b2d2      	uxtb	r2, r2
 80066e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e8:	1c5a      	adds	r2, r3, #1
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066f2:	3b01      	subs	r3, #1
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066fe:	b29b      	uxth	r3, r3
 8006700:	3b01      	subs	r3, #1
 8006702:	b29a      	uxth	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800670c:	2b00      	cmp	r3, #0
 800670e:	f47f ae94 	bne.w	800643a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2220      	movs	r2, #32
 8006716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800672a:	2300      	movs	r3, #0
 800672c:	e000      	b.n	8006730 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800672e:	2302      	movs	r3, #2
  }
}
 8006730:	4618      	mov	r0, r3
 8006732:	3728      	adds	r7, #40	@ 0x28
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	00010004 	.word	0x00010004
 800673c:	200000e0 	.word	0x200000e0
 8006740:	14f8b589 	.word	0x14f8b589

08006744 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b08a      	sub	sp, #40	@ 0x28
 8006748:	af02      	add	r7, sp, #8
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	607a      	str	r2, [r7, #4]
 800674e:	603b      	str	r3, [r7, #0]
 8006750:	460b      	mov	r3, r1
 8006752:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006754:	f7fd ffba 	bl	80046cc <HAL_GetTick>
 8006758:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800675a:	2300      	movs	r3, #0
 800675c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b20      	cmp	r3, #32
 8006768:	f040 8111 	bne.w	800698e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	2319      	movs	r3, #25
 8006772:	2201      	movs	r2, #1
 8006774:	4988      	ldr	r1, [pc, #544]	@ (8006998 <HAL_I2C_IsDeviceReady+0x254>)
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f000 fb5e 	bl	8006e38 <I2C_WaitOnFlagUntilTimeout>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006782:	2302      	movs	r3, #2
 8006784:	e104      	b.n	8006990 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800678c:	2b01      	cmp	r3, #1
 800678e:	d101      	bne.n	8006794 <HAL_I2C_IsDeviceReady+0x50>
 8006790:	2302      	movs	r3, #2
 8006792:	e0fd      	b.n	8006990 <HAL_I2C_IsDeviceReady+0x24c>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d007      	beq.n	80067ba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f042 0201 	orr.w	r2, r2, #1
 80067b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2224      	movs	r2, #36	@ 0x24
 80067ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4a70      	ldr	r2, [pc, #448]	@ (800699c <HAL_I2C_IsDeviceReady+0x258>)
 80067dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067ec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f000 fb1c 	bl	8006e38 <I2C_WaitOnFlagUntilTimeout>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00d      	beq.n	8006822 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006810:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006814:	d103      	bne.n	800681e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800681c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e0b6      	b.n	8006990 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006822:	897b      	ldrh	r3, [r7, #10]
 8006824:	b2db      	uxtb	r3, r3
 8006826:	461a      	mov	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006830:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006832:	f7fd ff4b 	bl	80046cc <HAL_GetTick>
 8006836:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	2b02      	cmp	r3, #2
 8006844:	bf0c      	ite	eq
 8006846:	2301      	moveq	r3, #1
 8006848:	2300      	movne	r3, #0
 800684a:	b2db      	uxtb	r3, r3
 800684c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006858:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800685c:	bf0c      	ite	eq
 800685e:	2301      	moveq	r3, #1
 8006860:	2300      	movne	r3, #0
 8006862:	b2db      	uxtb	r3, r3
 8006864:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006866:	e025      	b.n	80068b4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006868:	f7fd ff30 	bl	80046cc <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	429a      	cmp	r2, r3
 8006876:	d302      	bcc.n	800687e <HAL_I2C_IsDeviceReady+0x13a>
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d103      	bne.n	8006886 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	22a0      	movs	r2, #160	@ 0xa0
 8006882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	f003 0302 	and.w	r3, r3, #2
 8006890:	2b02      	cmp	r3, #2
 8006892:	bf0c      	ite	eq
 8006894:	2301      	moveq	r3, #1
 8006896:	2300      	movne	r3, #0
 8006898:	b2db      	uxtb	r3, r3
 800689a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068aa:	bf0c      	ite	eq
 80068ac:	2301      	moveq	r3, #1
 80068ae:	2300      	movne	r3, #0
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2ba0      	cmp	r3, #160	@ 0xa0
 80068be:	d005      	beq.n	80068cc <HAL_I2C_IsDeviceReady+0x188>
 80068c0:	7dfb      	ldrb	r3, [r7, #23]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d102      	bne.n	80068cc <HAL_I2C_IsDeviceReady+0x188>
 80068c6:	7dbb      	ldrb	r3, [r7, #22]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d0cd      	beq.n	8006868 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2220      	movs	r2, #32
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	f003 0302 	and.w	r3, r3, #2
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d129      	bne.n	8006936 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068f0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068f2:	2300      	movs	r3, #0
 80068f4:	613b      	str	r3, [r7, #16]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	695b      	ldr	r3, [r3, #20]
 80068fc:	613b      	str	r3, [r7, #16]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	613b      	str	r3, [r7, #16]
 8006906:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	2319      	movs	r3, #25
 800690e:	2201      	movs	r2, #1
 8006910:	4921      	ldr	r1, [pc, #132]	@ (8006998 <HAL_I2C_IsDeviceReady+0x254>)
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f000 fa90 	bl	8006e38 <I2C_WaitOnFlagUntilTimeout>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e036      	b.n	8006990 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2220      	movs	r2, #32
 8006926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8006932:	2300      	movs	r3, #0
 8006934:	e02c      	b.n	8006990 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006944:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800694e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	2319      	movs	r3, #25
 8006956:	2201      	movs	r2, #1
 8006958:	490f      	ldr	r1, [pc, #60]	@ (8006998 <HAL_I2C_IsDeviceReady+0x254>)
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f000 fa6c 	bl	8006e38 <I2C_WaitOnFlagUntilTimeout>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d001      	beq.n	800696a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e012      	b.n	8006990 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	3301      	adds	r3, #1
 800696e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006970:	69ba      	ldr	r2, [r7, #24]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	429a      	cmp	r2, r3
 8006976:	f4ff af32 	bcc.w	80067de <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2220      	movs	r2, #32
 800697e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e000      	b.n	8006990 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800698e:	2302      	movs	r3, #2
  }
}
 8006990:	4618      	mov	r0, r3
 8006992:	3720      	adds	r7, #32
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	00100002 	.word	0x00100002
 800699c:	ffff0000 	.word	0xffff0000

080069a0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b088      	sub	sp, #32
 80069a4:	af02      	add	r7, sp, #8
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	607a      	str	r2, [r7, #4]
 80069aa:	603b      	str	r3, [r7, #0]
 80069ac:	460b      	mov	r3, r1
 80069ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80069c4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	2b08      	cmp	r3, #8
 80069ca:	d006      	beq.n	80069da <I2C_MasterRequestRead+0x3a>
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d003      	beq.n	80069da <I2C_MasterRequestRead+0x3a>
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80069d8:	d108      	bne.n	80069ec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069e8:	601a      	str	r2, [r3, #0]
 80069ea:	e00b      	b.n	8006a04 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f0:	2b11      	cmp	r3, #17
 80069f2:	d107      	bne.n	8006a04 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f000 fa11 	bl	8006e38 <I2C_WaitOnFlagUntilTimeout>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00d      	beq.n	8006a38 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a2a:	d103      	bne.n	8006a34 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e079      	b.n	8006b2c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a40:	d108      	bne.n	8006a54 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006a42:	897b      	ldrh	r3, [r7, #10]
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	f043 0301 	orr.w	r3, r3, #1
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	611a      	str	r2, [r3, #16]
 8006a52:	e05f      	b.n	8006b14 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006a54:	897b      	ldrh	r3, [r7, #10]
 8006a56:	11db      	asrs	r3, r3, #7
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	f003 0306 	and.w	r3, r3, #6
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	f063 030f 	orn	r3, r3, #15
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	4930      	ldr	r1, [pc, #192]	@ (8006b34 <I2C_MasterRequestRead+0x194>)
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 fa5a 	bl	8006f2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e054      	b.n	8006b2c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006a82:	897b      	ldrh	r3, [r7, #10]
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	4929      	ldr	r1, [pc, #164]	@ (8006b38 <I2C_MasterRequestRead+0x198>)
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f000 fa4a 	bl	8006f2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e044      	b.n	8006b2c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	613b      	str	r3, [r7, #16]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	695b      	ldr	r3, [r3, #20]
 8006aac:	613b      	str	r3, [r7, #16]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	613b      	str	r3, [r7, #16]
 8006ab6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ac6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f000 f9af 	bl	8006e38 <I2C_WaitOnFlagUntilTimeout>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00d      	beq.n	8006afc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aee:	d103      	bne.n	8006af8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006af6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e017      	b.n	8006b2c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006afc:	897b      	ldrh	r3, [r7, #10]
 8006afe:	11db      	asrs	r3, r3, #7
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	f003 0306 	and.w	r3, r3, #6
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	f063 030e 	orn	r3, r3, #14
 8006b0c:	b2da      	uxtb	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	4907      	ldr	r1, [pc, #28]	@ (8006b38 <I2C_MasterRequestRead+0x198>)
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f000 fa06 	bl	8006f2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d001      	beq.n	8006b2a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e000      	b.n	8006b2c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3718      	adds	r7, #24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	00010008 	.word	0x00010008
 8006b38:	00010002 	.word	0x00010002

08006b3c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b088      	sub	sp, #32
 8006b40:	af02      	add	r7, sp, #8
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	4608      	mov	r0, r1
 8006b46:	4611      	mov	r1, r2
 8006b48:	461a      	mov	r2, r3
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	817b      	strh	r3, [r7, #10]
 8006b4e:	460b      	mov	r3, r1
 8006b50:	813b      	strh	r3, [r7, #8]
 8006b52:	4613      	mov	r3, r2
 8006b54:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b68:	9300      	str	r3, [sp, #0]
 8006b6a:	6a3b      	ldr	r3, [r7, #32]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f000 f960 	bl	8006e38 <I2C_WaitOnFlagUntilTimeout>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00d      	beq.n	8006b9a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b8c:	d103      	bne.n	8006b96 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b94:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e05f      	b.n	8006c5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b9a:	897b      	ldrh	r3, [r7, #10]
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006ba8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bac:	6a3a      	ldr	r2, [r7, #32]
 8006bae:	492d      	ldr	r1, [pc, #180]	@ (8006c64 <I2C_RequestMemoryWrite+0x128>)
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 f9bb 	bl	8006f2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e04c      	b.n	8006c5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	617b      	str	r3, [r7, #20]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	617b      	str	r3, [r7, #20]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	617b      	str	r3, [r7, #20]
 8006bd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bd8:	6a39      	ldr	r1, [r7, #32]
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f000 fa46 	bl	800706c <I2C_WaitOnTXEFlagUntilTimeout>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00d      	beq.n	8006c02 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bea:	2b04      	cmp	r3, #4
 8006bec:	d107      	bne.n	8006bfe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bfc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e02b      	b.n	8006c5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c02:	88fb      	ldrh	r3, [r7, #6]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d105      	bne.n	8006c14 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c08:	893b      	ldrh	r3, [r7, #8]
 8006c0a:	b2da      	uxtb	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	611a      	str	r2, [r3, #16]
 8006c12:	e021      	b.n	8006c58 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c14:	893b      	ldrh	r3, [r7, #8]
 8006c16:	0a1b      	lsrs	r3, r3, #8
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	b2da      	uxtb	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c24:	6a39      	ldr	r1, [r7, #32]
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f000 fa20 	bl	800706c <I2C_WaitOnTXEFlagUntilTimeout>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00d      	beq.n	8006c4e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c36:	2b04      	cmp	r3, #4
 8006c38:	d107      	bne.n	8006c4a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e005      	b.n	8006c5a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c4e:	893b      	ldrh	r3, [r7, #8]
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3718      	adds	r7, #24
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	00010002 	.word	0x00010002

08006c68 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b088      	sub	sp, #32
 8006c6c:	af02      	add	r7, sp, #8
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	4608      	mov	r0, r1
 8006c72:	4611      	mov	r1, r2
 8006c74:	461a      	mov	r2, r3
 8006c76:	4603      	mov	r3, r0
 8006c78:	817b      	strh	r3, [r7, #10]
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	813b      	strh	r3, [r7, #8]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006c90:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ca0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f000 f8c2 	bl	8006e38 <I2C_WaitOnFlagUntilTimeout>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00d      	beq.n	8006cd6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cc8:	d103      	bne.n	8006cd2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cd0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e0aa      	b.n	8006e2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006cd6:	897b      	ldrh	r3, [r7, #10]
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	461a      	mov	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006ce4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce8:	6a3a      	ldr	r2, [r7, #32]
 8006cea:	4952      	ldr	r1, [pc, #328]	@ (8006e34 <I2C_RequestMemoryRead+0x1cc>)
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f000 f91d 	bl	8006f2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d001      	beq.n	8006cfc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e097      	b.n	8006e2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	617b      	str	r3, [r7, #20]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	617b      	str	r3, [r7, #20]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	617b      	str	r3, [r7, #20]
 8006d10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d14:	6a39      	ldr	r1, [r7, #32]
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f000 f9a8 	bl	800706c <I2C_WaitOnTXEFlagUntilTimeout>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00d      	beq.n	8006d3e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d26:	2b04      	cmp	r3, #4
 8006d28:	d107      	bne.n	8006d3a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e076      	b.n	8006e2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d3e:	88fb      	ldrh	r3, [r7, #6]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d105      	bne.n	8006d50 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d44:	893b      	ldrh	r3, [r7, #8]
 8006d46:	b2da      	uxtb	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	611a      	str	r2, [r3, #16]
 8006d4e:	e021      	b.n	8006d94 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006d50:	893b      	ldrh	r3, [r7, #8]
 8006d52:	0a1b      	lsrs	r3, r3, #8
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	b2da      	uxtb	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d60:	6a39      	ldr	r1, [r7, #32]
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f000 f982 	bl	800706c <I2C_WaitOnTXEFlagUntilTimeout>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00d      	beq.n	8006d8a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d72:	2b04      	cmp	r3, #4
 8006d74:	d107      	bne.n	8006d86 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e050      	b.n	8006e2c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d8a:	893b      	ldrh	r3, [r7, #8]
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d96:	6a39      	ldr	r1, [r7, #32]
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f000 f967 	bl	800706c <I2C_WaitOnTXEFlagUntilTimeout>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00d      	beq.n	8006dc0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da8:	2b04      	cmp	r3, #4
 8006daa:	d107      	bne.n	8006dbc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006dba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e035      	b.n	8006e2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006dce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	6a3b      	ldr	r3, [r7, #32]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f000 f82b 	bl	8006e38 <I2C_WaitOnFlagUntilTimeout>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00d      	beq.n	8006e04 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006df2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006df6:	d103      	bne.n	8006e00 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006dfe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e013      	b.n	8006e2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006e04:	897b      	ldrh	r3, [r7, #10]
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	f043 0301 	orr.w	r3, r3, #1
 8006e0c:	b2da      	uxtb	r2, r3
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e16:	6a3a      	ldr	r2, [r7, #32]
 8006e18:	4906      	ldr	r1, [pc, #24]	@ (8006e34 <I2C_RequestMemoryRead+0x1cc>)
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f000 f886 	bl	8006f2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d001      	beq.n	8006e2a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e000      	b.n	8006e2c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3718      	adds	r7, #24
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	00010002 	.word	0x00010002

08006e38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	603b      	str	r3, [r7, #0]
 8006e44:	4613      	mov	r3, r2
 8006e46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e48:	e048      	b.n	8006edc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e50:	d044      	beq.n	8006edc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e52:	f7fd fc3b 	bl	80046cc <HAL_GetTick>
 8006e56:	4602      	mov	r2, r0
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d302      	bcc.n	8006e68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d139      	bne.n	8006edc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	0c1b      	lsrs	r3, r3, #16
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d10d      	bne.n	8006e8e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	43da      	mvns	r2, r3
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	bf0c      	ite	eq
 8006e84:	2301      	moveq	r3, #1
 8006e86:	2300      	movne	r3, #0
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	e00c      	b.n	8006ea8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	43da      	mvns	r2, r3
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	4013      	ands	r3, r2
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	bf0c      	ite	eq
 8006ea0:	2301      	moveq	r3, #1
 8006ea2:	2300      	movne	r3, #0
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	79fb      	ldrb	r3, [r7, #7]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d116      	bne.n	8006edc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec8:	f043 0220 	orr.w	r2, r3, #32
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e023      	b.n	8006f24 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	0c1b      	lsrs	r3, r3, #16
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d10d      	bne.n	8006f02 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	43da      	mvns	r2, r3
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	bf0c      	ite	eq
 8006ef8:	2301      	moveq	r3, #1
 8006efa:	2300      	movne	r3, #0
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	461a      	mov	r2, r3
 8006f00:	e00c      	b.n	8006f1c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	43da      	mvns	r2, r3
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	bf0c      	ite	eq
 8006f14:	2301      	moveq	r3, #1
 8006f16:	2300      	movne	r3, #0
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	79fb      	ldrb	r3, [r7, #7]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d093      	beq.n	8006e4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f3a:	e071      	b.n	8007020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f4a:	d123      	bne.n	8006f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f5a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006f64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f80:	f043 0204 	orr.w	r2, r3, #4
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e067      	b.n	8007064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9a:	d041      	beq.n	8007020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f9c:	f7fd fb96 	bl	80046cc <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d302      	bcc.n	8006fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d136      	bne.n	8007020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	0c1b      	lsrs	r3, r3, #16
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d10c      	bne.n	8006fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	43da      	mvns	r2, r3
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	bf14      	ite	ne
 8006fce:	2301      	movne	r3, #1
 8006fd0:	2300      	moveq	r3, #0
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	e00b      	b.n	8006fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	43da      	mvns	r2, r3
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	bf14      	ite	ne
 8006fe8:	2301      	movne	r3, #1
 8006fea:	2300      	moveq	r3, #0
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d016      	beq.n	8007020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800700c:	f043 0220 	orr.w	r2, r3, #32
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e021      	b.n	8007064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	0c1b      	lsrs	r3, r3, #16
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b01      	cmp	r3, #1
 8007028:	d10c      	bne.n	8007044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	43da      	mvns	r2, r3
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	4013      	ands	r3, r2
 8007036:	b29b      	uxth	r3, r3
 8007038:	2b00      	cmp	r3, #0
 800703a:	bf14      	ite	ne
 800703c:	2301      	movne	r3, #1
 800703e:	2300      	moveq	r3, #0
 8007040:	b2db      	uxtb	r3, r3
 8007042:	e00b      	b.n	800705c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	43da      	mvns	r2, r3
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	4013      	ands	r3, r2
 8007050:	b29b      	uxth	r3, r3
 8007052:	2b00      	cmp	r3, #0
 8007054:	bf14      	ite	ne
 8007056:	2301      	movne	r3, #1
 8007058:	2300      	moveq	r3, #0
 800705a:	b2db      	uxtb	r3, r3
 800705c:	2b00      	cmp	r3, #0
 800705e:	f47f af6d 	bne.w	8006f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007078:	e034      	b.n	80070e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f000 f8e3 	bl	8007246 <I2C_IsAcknowledgeFailed>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e034      	b.n	80070f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007090:	d028      	beq.n	80070e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007092:	f7fd fb1b 	bl	80046cc <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d302      	bcc.n	80070a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d11d      	bne.n	80070e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	695b      	ldr	r3, [r3, #20]
 80070ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070b2:	2b80      	cmp	r3, #128	@ 0x80
 80070b4:	d016      	beq.n	80070e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2220      	movs	r2, #32
 80070c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d0:	f043 0220 	orr.w	r2, r3, #32
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e007      	b.n	80070f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070ee:	2b80      	cmp	r3, #128	@ 0x80
 80070f0:	d1c3      	bne.n	800707a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007108:	e034      	b.n	8007174 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f000 f89b 	bl	8007246 <I2C_IsAcknowledgeFailed>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d001      	beq.n	800711a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e034      	b.n	8007184 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007120:	d028      	beq.n	8007174 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007122:	f7fd fad3 	bl	80046cc <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	429a      	cmp	r2, r3
 8007130:	d302      	bcc.n	8007138 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d11d      	bne.n	8007174 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	f003 0304 	and.w	r3, r3, #4
 8007142:	2b04      	cmp	r3, #4
 8007144:	d016      	beq.n	8007174 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2220      	movs	r2, #32
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007160:	f043 0220 	orr.w	r2, r3, #32
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e007      	b.n	8007184 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	f003 0304 	and.w	r3, r3, #4
 800717e:	2b04      	cmp	r3, #4
 8007180:	d1c3      	bne.n	800710a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007198:	e049      	b.n	800722e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	f003 0310 	and.w	r3, r3, #16
 80071a4:	2b10      	cmp	r3, #16
 80071a6:	d119      	bne.n	80071dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f06f 0210 	mvn.w	r2, #16
 80071b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2200      	movs	r2, #0
 80071b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2220      	movs	r2, #32
 80071bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e030      	b.n	800723e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071dc:	f7fd fa76 	bl	80046cc <HAL_GetTick>
 80071e0:	4602      	mov	r2, r0
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d302      	bcc.n	80071f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d11d      	bne.n	800722e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	695b      	ldr	r3, [r3, #20]
 80071f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071fc:	2b40      	cmp	r3, #64	@ 0x40
 80071fe:	d016      	beq.n	800722e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2220      	movs	r2, #32
 800720a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800721a:	f043 0220 	orr.w	r2, r3, #32
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e007      	b.n	800723e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007238:	2b40      	cmp	r3, #64	@ 0x40
 800723a:	d1ae      	bne.n	800719a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007246:	b480      	push	{r7}
 8007248:	b083      	sub	sp, #12
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	695b      	ldr	r3, [r3, #20]
 8007254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007258:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800725c:	d11b      	bne.n	8007296 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007266:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2220      	movs	r2, #32
 8007272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007282:	f043 0204 	orr.w	r2, r3, #4
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e000      	b.n	8007298 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	bc80      	pop	{r7}
 80072a0:	4770      	bx	lr
	...

080072a4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80072a4:	b480      	push	{r7}
 80072a6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80072a8:	4b03      	ldr	r3, [pc, #12]	@ (80072b8 <HAL_PWR_EnableBkUpAccess+0x14>)
 80072aa:	2201      	movs	r2, #1
 80072ac:	601a      	str	r2, [r3, #0]
}
 80072ae:	bf00      	nop
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bc80      	pop	{r7}
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	420e0020 	.word	0x420e0020

080072bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e272      	b.n	80077b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 8087 	beq.w	80073ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80072dc:	4b92      	ldr	r3, [pc, #584]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f003 030c 	and.w	r3, r3, #12
 80072e4:	2b04      	cmp	r3, #4
 80072e6:	d00c      	beq.n	8007302 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80072e8:	4b8f      	ldr	r3, [pc, #572]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	f003 030c 	and.w	r3, r3, #12
 80072f0:	2b08      	cmp	r3, #8
 80072f2:	d112      	bne.n	800731a <HAL_RCC_OscConfig+0x5e>
 80072f4:	4b8c      	ldr	r3, [pc, #560]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007300:	d10b      	bne.n	800731a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007302:	4b89      	ldr	r3, [pc, #548]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d06c      	beq.n	80073e8 <HAL_RCC_OscConfig+0x12c>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d168      	bne.n	80073e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e24c      	b.n	80077b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007322:	d106      	bne.n	8007332 <HAL_RCC_OscConfig+0x76>
 8007324:	4b80      	ldr	r3, [pc, #512]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a7f      	ldr	r2, [pc, #508]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 800732a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800732e:	6013      	str	r3, [r2, #0]
 8007330:	e02e      	b.n	8007390 <HAL_RCC_OscConfig+0xd4>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10c      	bne.n	8007354 <HAL_RCC_OscConfig+0x98>
 800733a:	4b7b      	ldr	r3, [pc, #492]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a7a      	ldr	r2, [pc, #488]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 8007340:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007344:	6013      	str	r3, [r2, #0]
 8007346:	4b78      	ldr	r3, [pc, #480]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a77      	ldr	r2, [pc, #476]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 800734c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007350:	6013      	str	r3, [r2, #0]
 8007352:	e01d      	b.n	8007390 <HAL_RCC_OscConfig+0xd4>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800735c:	d10c      	bne.n	8007378 <HAL_RCC_OscConfig+0xbc>
 800735e:	4b72      	ldr	r3, [pc, #456]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a71      	ldr	r2, [pc, #452]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 8007364:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	4b6f      	ldr	r3, [pc, #444]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a6e      	ldr	r2, [pc, #440]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 8007370:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007374:	6013      	str	r3, [r2, #0]
 8007376:	e00b      	b.n	8007390 <HAL_RCC_OscConfig+0xd4>
 8007378:	4b6b      	ldr	r3, [pc, #428]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a6a      	ldr	r2, [pc, #424]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 800737e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007382:	6013      	str	r3, [r2, #0]
 8007384:	4b68      	ldr	r3, [pc, #416]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a67      	ldr	r2, [pc, #412]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 800738a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800738e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d013      	beq.n	80073c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007398:	f7fd f998 	bl	80046cc <HAL_GetTick>
 800739c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800739e:	e008      	b.n	80073b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073a0:	f7fd f994 	bl	80046cc <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	2b64      	cmp	r3, #100	@ 0x64
 80073ac:	d901      	bls.n	80073b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e200      	b.n	80077b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073b2:	4b5d      	ldr	r3, [pc, #372]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d0f0      	beq.n	80073a0 <HAL_RCC_OscConfig+0xe4>
 80073be:	e014      	b.n	80073ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073c0:	f7fd f984 	bl	80046cc <HAL_GetTick>
 80073c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073c6:	e008      	b.n	80073da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073c8:	f7fd f980 	bl	80046cc <HAL_GetTick>
 80073cc:	4602      	mov	r2, r0
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	2b64      	cmp	r3, #100	@ 0x64
 80073d4:	d901      	bls.n	80073da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e1ec      	b.n	80077b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073da:	4b53      	ldr	r3, [pc, #332]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1f0      	bne.n	80073c8 <HAL_RCC_OscConfig+0x10c>
 80073e6:	e000      	b.n	80073ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0302 	and.w	r3, r3, #2
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d063      	beq.n	80074be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80073f6:	4b4c      	ldr	r3, [pc, #304]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	f003 030c 	and.w	r3, r3, #12
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00b      	beq.n	800741a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007402:	4b49      	ldr	r3, [pc, #292]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f003 030c 	and.w	r3, r3, #12
 800740a:	2b08      	cmp	r3, #8
 800740c:	d11c      	bne.n	8007448 <HAL_RCC_OscConfig+0x18c>
 800740e:	4b46      	ldr	r3, [pc, #280]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d116      	bne.n	8007448 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800741a:	4b43      	ldr	r3, [pc, #268]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0302 	and.w	r3, r3, #2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d005      	beq.n	8007432 <HAL_RCC_OscConfig+0x176>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d001      	beq.n	8007432 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e1c0      	b.n	80077b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007432:	4b3d      	ldr	r3, [pc, #244]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	00db      	lsls	r3, r3, #3
 8007440:	4939      	ldr	r1, [pc, #228]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 8007442:	4313      	orrs	r3, r2
 8007444:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007446:	e03a      	b.n	80074be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d020      	beq.n	8007492 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007450:	4b36      	ldr	r3, [pc, #216]	@ (800752c <HAL_RCC_OscConfig+0x270>)
 8007452:	2201      	movs	r2, #1
 8007454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007456:	f7fd f939 	bl	80046cc <HAL_GetTick>
 800745a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800745c:	e008      	b.n	8007470 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800745e:	f7fd f935 	bl	80046cc <HAL_GetTick>
 8007462:	4602      	mov	r2, r0
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	2b02      	cmp	r3, #2
 800746a:	d901      	bls.n	8007470 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	e1a1      	b.n	80077b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007470:	4b2d      	ldr	r3, [pc, #180]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0302 	and.w	r3, r3, #2
 8007478:	2b00      	cmp	r3, #0
 800747a:	d0f0      	beq.n	800745e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800747c:	4b2a      	ldr	r3, [pc, #168]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	695b      	ldr	r3, [r3, #20]
 8007488:	00db      	lsls	r3, r3, #3
 800748a:	4927      	ldr	r1, [pc, #156]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 800748c:	4313      	orrs	r3, r2
 800748e:	600b      	str	r3, [r1, #0]
 8007490:	e015      	b.n	80074be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007492:	4b26      	ldr	r3, [pc, #152]	@ (800752c <HAL_RCC_OscConfig+0x270>)
 8007494:	2200      	movs	r2, #0
 8007496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007498:	f7fd f918 	bl	80046cc <HAL_GetTick>
 800749c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800749e:	e008      	b.n	80074b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074a0:	f7fd f914 	bl	80046cc <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d901      	bls.n	80074b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e180      	b.n	80077b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074b2:	4b1d      	ldr	r3, [pc, #116]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1f0      	bne.n	80074a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0308 	and.w	r3, r3, #8
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d03a      	beq.n	8007540 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d019      	beq.n	8007506 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074d2:	4b17      	ldr	r3, [pc, #92]	@ (8007530 <HAL_RCC_OscConfig+0x274>)
 80074d4:	2201      	movs	r2, #1
 80074d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074d8:	f7fd f8f8 	bl	80046cc <HAL_GetTick>
 80074dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074de:	e008      	b.n	80074f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074e0:	f7fd f8f4 	bl	80046cc <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d901      	bls.n	80074f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e160      	b.n	80077b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007528 <HAL_RCC_OscConfig+0x26c>)
 80074f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f6:	f003 0302 	and.w	r3, r3, #2
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0f0      	beq.n	80074e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80074fe:	2001      	movs	r0, #1
 8007500:	f000 fafe 	bl	8007b00 <RCC_Delay>
 8007504:	e01c      	b.n	8007540 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007506:	4b0a      	ldr	r3, [pc, #40]	@ (8007530 <HAL_RCC_OscConfig+0x274>)
 8007508:	2200      	movs	r2, #0
 800750a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800750c:	f7fd f8de 	bl	80046cc <HAL_GetTick>
 8007510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007512:	e00f      	b.n	8007534 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007514:	f7fd f8da 	bl	80046cc <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	2b02      	cmp	r3, #2
 8007520:	d908      	bls.n	8007534 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e146      	b.n	80077b4 <HAL_RCC_OscConfig+0x4f8>
 8007526:	bf00      	nop
 8007528:	40021000 	.word	0x40021000
 800752c:	42420000 	.word	0x42420000
 8007530:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007534:	4b92      	ldr	r3, [pc, #584]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 8007536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007538:	f003 0302 	and.w	r3, r3, #2
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1e9      	bne.n	8007514 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0304 	and.w	r3, r3, #4
 8007548:	2b00      	cmp	r3, #0
 800754a:	f000 80a6 	beq.w	800769a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800754e:	2300      	movs	r3, #0
 8007550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007552:	4b8b      	ldr	r3, [pc, #556]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 8007554:	69db      	ldr	r3, [r3, #28]
 8007556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10d      	bne.n	800757a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800755e:	4b88      	ldr	r3, [pc, #544]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 8007560:	69db      	ldr	r3, [r3, #28]
 8007562:	4a87      	ldr	r2, [pc, #540]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 8007564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007568:	61d3      	str	r3, [r2, #28]
 800756a:	4b85      	ldr	r3, [pc, #532]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007572:	60bb      	str	r3, [r7, #8]
 8007574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007576:	2301      	movs	r3, #1
 8007578:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800757a:	4b82      	ldr	r3, [pc, #520]	@ (8007784 <HAL_RCC_OscConfig+0x4c8>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007582:	2b00      	cmp	r3, #0
 8007584:	d118      	bne.n	80075b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007586:	4b7f      	ldr	r3, [pc, #508]	@ (8007784 <HAL_RCC_OscConfig+0x4c8>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a7e      	ldr	r2, [pc, #504]	@ (8007784 <HAL_RCC_OscConfig+0x4c8>)
 800758c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007592:	f7fd f89b 	bl	80046cc <HAL_GetTick>
 8007596:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007598:	e008      	b.n	80075ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800759a:	f7fd f897 	bl	80046cc <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	2b64      	cmp	r3, #100	@ 0x64
 80075a6:	d901      	bls.n	80075ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e103      	b.n	80077b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075ac:	4b75      	ldr	r3, [pc, #468]	@ (8007784 <HAL_RCC_OscConfig+0x4c8>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d0f0      	beq.n	800759a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d106      	bne.n	80075ce <HAL_RCC_OscConfig+0x312>
 80075c0:	4b6f      	ldr	r3, [pc, #444]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 80075c2:	6a1b      	ldr	r3, [r3, #32]
 80075c4:	4a6e      	ldr	r2, [pc, #440]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 80075c6:	f043 0301 	orr.w	r3, r3, #1
 80075ca:	6213      	str	r3, [r2, #32]
 80075cc:	e02d      	b.n	800762a <HAL_RCC_OscConfig+0x36e>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10c      	bne.n	80075f0 <HAL_RCC_OscConfig+0x334>
 80075d6:	4b6a      	ldr	r3, [pc, #424]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 80075d8:	6a1b      	ldr	r3, [r3, #32]
 80075da:	4a69      	ldr	r2, [pc, #420]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 80075dc:	f023 0301 	bic.w	r3, r3, #1
 80075e0:	6213      	str	r3, [r2, #32]
 80075e2:	4b67      	ldr	r3, [pc, #412]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 80075e4:	6a1b      	ldr	r3, [r3, #32]
 80075e6:	4a66      	ldr	r2, [pc, #408]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 80075e8:	f023 0304 	bic.w	r3, r3, #4
 80075ec:	6213      	str	r3, [r2, #32]
 80075ee:	e01c      	b.n	800762a <HAL_RCC_OscConfig+0x36e>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	2b05      	cmp	r3, #5
 80075f6:	d10c      	bne.n	8007612 <HAL_RCC_OscConfig+0x356>
 80075f8:	4b61      	ldr	r3, [pc, #388]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 80075fa:	6a1b      	ldr	r3, [r3, #32]
 80075fc:	4a60      	ldr	r2, [pc, #384]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 80075fe:	f043 0304 	orr.w	r3, r3, #4
 8007602:	6213      	str	r3, [r2, #32]
 8007604:	4b5e      	ldr	r3, [pc, #376]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 8007606:	6a1b      	ldr	r3, [r3, #32]
 8007608:	4a5d      	ldr	r2, [pc, #372]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 800760a:	f043 0301 	orr.w	r3, r3, #1
 800760e:	6213      	str	r3, [r2, #32]
 8007610:	e00b      	b.n	800762a <HAL_RCC_OscConfig+0x36e>
 8007612:	4b5b      	ldr	r3, [pc, #364]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	4a5a      	ldr	r2, [pc, #360]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 8007618:	f023 0301 	bic.w	r3, r3, #1
 800761c:	6213      	str	r3, [r2, #32]
 800761e:	4b58      	ldr	r3, [pc, #352]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	4a57      	ldr	r2, [pc, #348]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 8007624:	f023 0304 	bic.w	r3, r3, #4
 8007628:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d015      	beq.n	800765e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007632:	f7fd f84b 	bl	80046cc <HAL_GetTick>
 8007636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007638:	e00a      	b.n	8007650 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800763a:	f7fd f847 	bl	80046cc <HAL_GetTick>
 800763e:	4602      	mov	r2, r0
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007648:	4293      	cmp	r3, r2
 800764a:	d901      	bls.n	8007650 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e0b1      	b.n	80077b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007650:	4b4b      	ldr	r3, [pc, #300]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 8007652:	6a1b      	ldr	r3, [r3, #32]
 8007654:	f003 0302 	and.w	r3, r3, #2
 8007658:	2b00      	cmp	r3, #0
 800765a:	d0ee      	beq.n	800763a <HAL_RCC_OscConfig+0x37e>
 800765c:	e014      	b.n	8007688 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800765e:	f7fd f835 	bl	80046cc <HAL_GetTick>
 8007662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007664:	e00a      	b.n	800767c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007666:	f7fd f831 	bl	80046cc <HAL_GetTick>
 800766a:	4602      	mov	r2, r0
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007674:	4293      	cmp	r3, r2
 8007676:	d901      	bls.n	800767c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007678:	2303      	movs	r3, #3
 800767a:	e09b      	b.n	80077b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800767c:	4b40      	ldr	r3, [pc, #256]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 800767e:	6a1b      	ldr	r3, [r3, #32]
 8007680:	f003 0302 	and.w	r3, r3, #2
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1ee      	bne.n	8007666 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007688:	7dfb      	ldrb	r3, [r7, #23]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d105      	bne.n	800769a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800768e:	4b3c      	ldr	r3, [pc, #240]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 8007690:	69db      	ldr	r3, [r3, #28]
 8007692:	4a3b      	ldr	r2, [pc, #236]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 8007694:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007698:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	69db      	ldr	r3, [r3, #28]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f000 8087 	beq.w	80077b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80076a4:	4b36      	ldr	r3, [pc, #216]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f003 030c 	and.w	r3, r3, #12
 80076ac:	2b08      	cmp	r3, #8
 80076ae:	d061      	beq.n	8007774 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	69db      	ldr	r3, [r3, #28]
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d146      	bne.n	8007746 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076b8:	4b33      	ldr	r3, [pc, #204]	@ (8007788 <HAL_RCC_OscConfig+0x4cc>)
 80076ba:	2200      	movs	r2, #0
 80076bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076be:	f7fd f805 	bl	80046cc <HAL_GetTick>
 80076c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80076c4:	e008      	b.n	80076d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076c6:	f7fd f801 	bl	80046cc <HAL_GetTick>
 80076ca:	4602      	mov	r2, r0
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	1ad3      	subs	r3, r2, r3
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d901      	bls.n	80076d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80076d4:	2303      	movs	r3, #3
 80076d6:	e06d      	b.n	80077b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80076d8:	4b29      	ldr	r3, [pc, #164]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d1f0      	bne.n	80076c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076ec:	d108      	bne.n	8007700 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80076ee:	4b24      	ldr	r3, [pc, #144]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	4921      	ldr	r1, [pc, #132]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 80076fc:	4313      	orrs	r3, r2
 80076fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007700:	4b1f      	ldr	r3, [pc, #124]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a19      	ldr	r1, [r3, #32]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007710:	430b      	orrs	r3, r1
 8007712:	491b      	ldr	r1, [pc, #108]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 8007714:	4313      	orrs	r3, r2
 8007716:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007718:	4b1b      	ldr	r3, [pc, #108]	@ (8007788 <HAL_RCC_OscConfig+0x4cc>)
 800771a:	2201      	movs	r2, #1
 800771c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800771e:	f7fc ffd5 	bl	80046cc <HAL_GetTick>
 8007722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007724:	e008      	b.n	8007738 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007726:	f7fc ffd1 	bl	80046cc <HAL_GetTick>
 800772a:	4602      	mov	r2, r0
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	2b02      	cmp	r3, #2
 8007732:	d901      	bls.n	8007738 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e03d      	b.n	80077b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007738:	4b11      	ldr	r3, [pc, #68]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007740:	2b00      	cmp	r3, #0
 8007742:	d0f0      	beq.n	8007726 <HAL_RCC_OscConfig+0x46a>
 8007744:	e035      	b.n	80077b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007746:	4b10      	ldr	r3, [pc, #64]	@ (8007788 <HAL_RCC_OscConfig+0x4cc>)
 8007748:	2200      	movs	r2, #0
 800774a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800774c:	f7fc ffbe 	bl	80046cc <HAL_GetTick>
 8007750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007752:	e008      	b.n	8007766 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007754:	f7fc ffba 	bl	80046cc <HAL_GetTick>
 8007758:	4602      	mov	r2, r0
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	2b02      	cmp	r3, #2
 8007760:	d901      	bls.n	8007766 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007762:	2303      	movs	r3, #3
 8007764:	e026      	b.n	80077b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007766:	4b06      	ldr	r3, [pc, #24]	@ (8007780 <HAL_RCC_OscConfig+0x4c4>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1f0      	bne.n	8007754 <HAL_RCC_OscConfig+0x498>
 8007772:	e01e      	b.n	80077b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	69db      	ldr	r3, [r3, #28]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d107      	bne.n	800778c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e019      	b.n	80077b4 <HAL_RCC_OscConfig+0x4f8>
 8007780:	40021000 	.word	0x40021000
 8007784:	40007000 	.word	0x40007000
 8007788:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800778c:	4b0b      	ldr	r3, [pc, #44]	@ (80077bc <HAL_RCC_OscConfig+0x500>)
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a1b      	ldr	r3, [r3, #32]
 800779c:	429a      	cmp	r2, r3
 800779e:	d106      	bne.n	80077ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d001      	beq.n	80077b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e000      	b.n	80077b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3718      	adds	r7, #24
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	40021000 	.word	0x40021000

080077c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e0d0      	b.n	8007976 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077d4:	4b6a      	ldr	r3, [pc, #424]	@ (8007980 <HAL_RCC_ClockConfig+0x1c0>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0307 	and.w	r3, r3, #7
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d910      	bls.n	8007804 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077e2:	4b67      	ldr	r3, [pc, #412]	@ (8007980 <HAL_RCC_ClockConfig+0x1c0>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f023 0207 	bic.w	r2, r3, #7
 80077ea:	4965      	ldr	r1, [pc, #404]	@ (8007980 <HAL_RCC_ClockConfig+0x1c0>)
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077f2:	4b63      	ldr	r3, [pc, #396]	@ (8007980 <HAL_RCC_ClockConfig+0x1c0>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 0307 	and.w	r3, r3, #7
 80077fa:	683a      	ldr	r2, [r7, #0]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d001      	beq.n	8007804 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e0b8      	b.n	8007976 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 0302 	and.w	r3, r3, #2
 800780c:	2b00      	cmp	r3, #0
 800780e:	d020      	beq.n	8007852 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0304 	and.w	r3, r3, #4
 8007818:	2b00      	cmp	r3, #0
 800781a:	d005      	beq.n	8007828 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800781c:	4b59      	ldr	r3, [pc, #356]	@ (8007984 <HAL_RCC_ClockConfig+0x1c4>)
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	4a58      	ldr	r2, [pc, #352]	@ (8007984 <HAL_RCC_ClockConfig+0x1c4>)
 8007822:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007826:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 0308 	and.w	r3, r3, #8
 8007830:	2b00      	cmp	r3, #0
 8007832:	d005      	beq.n	8007840 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007834:	4b53      	ldr	r3, [pc, #332]	@ (8007984 <HAL_RCC_ClockConfig+0x1c4>)
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	4a52      	ldr	r2, [pc, #328]	@ (8007984 <HAL_RCC_ClockConfig+0x1c4>)
 800783a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800783e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007840:	4b50      	ldr	r3, [pc, #320]	@ (8007984 <HAL_RCC_ClockConfig+0x1c4>)
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	494d      	ldr	r1, [pc, #308]	@ (8007984 <HAL_RCC_ClockConfig+0x1c4>)
 800784e:	4313      	orrs	r3, r2
 8007850:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	2b00      	cmp	r3, #0
 800785c:	d040      	beq.n	80078e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d107      	bne.n	8007876 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007866:	4b47      	ldr	r3, [pc, #284]	@ (8007984 <HAL_RCC_ClockConfig+0x1c4>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800786e:	2b00      	cmp	r3, #0
 8007870:	d115      	bne.n	800789e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e07f      	b.n	8007976 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	2b02      	cmp	r3, #2
 800787c:	d107      	bne.n	800788e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800787e:	4b41      	ldr	r3, [pc, #260]	@ (8007984 <HAL_RCC_ClockConfig+0x1c4>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007886:	2b00      	cmp	r3, #0
 8007888:	d109      	bne.n	800789e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e073      	b.n	8007976 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800788e:	4b3d      	ldr	r3, [pc, #244]	@ (8007984 <HAL_RCC_ClockConfig+0x1c4>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0302 	and.w	r3, r3, #2
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e06b      	b.n	8007976 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800789e:	4b39      	ldr	r3, [pc, #228]	@ (8007984 <HAL_RCC_ClockConfig+0x1c4>)
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	f023 0203 	bic.w	r2, r3, #3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	4936      	ldr	r1, [pc, #216]	@ (8007984 <HAL_RCC_ClockConfig+0x1c4>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078b0:	f7fc ff0c 	bl	80046cc <HAL_GetTick>
 80078b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078b6:	e00a      	b.n	80078ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078b8:	f7fc ff08 	bl	80046cc <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d901      	bls.n	80078ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e053      	b.n	8007976 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078ce:	4b2d      	ldr	r3, [pc, #180]	@ (8007984 <HAL_RCC_ClockConfig+0x1c4>)
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	f003 020c 	and.w	r2, r3, #12
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	429a      	cmp	r2, r3
 80078de:	d1eb      	bne.n	80078b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078e0:	4b27      	ldr	r3, [pc, #156]	@ (8007980 <HAL_RCC_ClockConfig+0x1c0>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0307 	and.w	r3, r3, #7
 80078e8:	683a      	ldr	r2, [r7, #0]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d210      	bcs.n	8007910 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078ee:	4b24      	ldr	r3, [pc, #144]	@ (8007980 <HAL_RCC_ClockConfig+0x1c0>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f023 0207 	bic.w	r2, r3, #7
 80078f6:	4922      	ldr	r1, [pc, #136]	@ (8007980 <HAL_RCC_ClockConfig+0x1c0>)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078fe:	4b20      	ldr	r3, [pc, #128]	@ (8007980 <HAL_RCC_ClockConfig+0x1c0>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0307 	and.w	r3, r3, #7
 8007906:	683a      	ldr	r2, [r7, #0]
 8007908:	429a      	cmp	r2, r3
 800790a:	d001      	beq.n	8007910 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e032      	b.n	8007976 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0304 	and.w	r3, r3, #4
 8007918:	2b00      	cmp	r3, #0
 800791a:	d008      	beq.n	800792e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800791c:	4b19      	ldr	r3, [pc, #100]	@ (8007984 <HAL_RCC_ClockConfig+0x1c4>)
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	4916      	ldr	r1, [pc, #88]	@ (8007984 <HAL_RCC_ClockConfig+0x1c4>)
 800792a:	4313      	orrs	r3, r2
 800792c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 0308 	and.w	r3, r3, #8
 8007936:	2b00      	cmp	r3, #0
 8007938:	d009      	beq.n	800794e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800793a:	4b12      	ldr	r3, [pc, #72]	@ (8007984 <HAL_RCC_ClockConfig+0x1c4>)
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	00db      	lsls	r3, r3, #3
 8007948:	490e      	ldr	r1, [pc, #56]	@ (8007984 <HAL_RCC_ClockConfig+0x1c4>)
 800794a:	4313      	orrs	r3, r2
 800794c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800794e:	f000 f821 	bl	8007994 <HAL_RCC_GetSysClockFreq>
 8007952:	4602      	mov	r2, r0
 8007954:	4b0b      	ldr	r3, [pc, #44]	@ (8007984 <HAL_RCC_ClockConfig+0x1c4>)
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	091b      	lsrs	r3, r3, #4
 800795a:	f003 030f 	and.w	r3, r3, #15
 800795e:	490a      	ldr	r1, [pc, #40]	@ (8007988 <HAL_RCC_ClockConfig+0x1c8>)
 8007960:	5ccb      	ldrb	r3, [r1, r3]
 8007962:	fa22 f303 	lsr.w	r3, r2, r3
 8007966:	4a09      	ldr	r2, [pc, #36]	@ (800798c <HAL_RCC_ClockConfig+0x1cc>)
 8007968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800796a:	4b09      	ldr	r3, [pc, #36]	@ (8007990 <HAL_RCC_ClockConfig+0x1d0>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4618      	mov	r0, r3
 8007970:	f7fc fc46 	bl	8004200 <HAL_InitTick>

  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	40022000 	.word	0x40022000
 8007984:	40021000 	.word	0x40021000
 8007988:	08011f6c 	.word	0x08011f6c
 800798c:	200000e0 	.word	0x200000e0
 8007990:	200000e4 	.word	0x200000e4

08007994 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007994:	b480      	push	{r7}
 8007996:	b087      	sub	sp, #28
 8007998:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800799a:	2300      	movs	r3, #0
 800799c:	60fb      	str	r3, [r7, #12]
 800799e:	2300      	movs	r3, #0
 80079a0:	60bb      	str	r3, [r7, #8]
 80079a2:	2300      	movs	r3, #0
 80079a4:	617b      	str	r3, [r7, #20]
 80079a6:	2300      	movs	r3, #0
 80079a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80079aa:	2300      	movs	r3, #0
 80079ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80079ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007a28 <HAL_RCC_GetSysClockFreq+0x94>)
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f003 030c 	and.w	r3, r3, #12
 80079ba:	2b04      	cmp	r3, #4
 80079bc:	d002      	beq.n	80079c4 <HAL_RCC_GetSysClockFreq+0x30>
 80079be:	2b08      	cmp	r3, #8
 80079c0:	d003      	beq.n	80079ca <HAL_RCC_GetSysClockFreq+0x36>
 80079c2:	e027      	b.n	8007a14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80079c4:	4b19      	ldr	r3, [pc, #100]	@ (8007a2c <HAL_RCC_GetSysClockFreq+0x98>)
 80079c6:	613b      	str	r3, [r7, #16]
      break;
 80079c8:	e027      	b.n	8007a1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	0c9b      	lsrs	r3, r3, #18
 80079ce:	f003 030f 	and.w	r3, r3, #15
 80079d2:	4a17      	ldr	r2, [pc, #92]	@ (8007a30 <HAL_RCC_GetSysClockFreq+0x9c>)
 80079d4:	5cd3      	ldrb	r3, [r2, r3]
 80079d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d010      	beq.n	8007a04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80079e2:	4b11      	ldr	r3, [pc, #68]	@ (8007a28 <HAL_RCC_GetSysClockFreq+0x94>)
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	0c5b      	lsrs	r3, r3, #17
 80079e8:	f003 0301 	and.w	r3, r3, #1
 80079ec:	4a11      	ldr	r2, [pc, #68]	@ (8007a34 <HAL_RCC_GetSysClockFreq+0xa0>)
 80079ee:	5cd3      	ldrb	r3, [r2, r3]
 80079f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a0d      	ldr	r2, [pc, #52]	@ (8007a2c <HAL_RCC_GetSysClockFreq+0x98>)
 80079f6:	fb03 f202 	mul.w	r2, r3, r2
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a00:	617b      	str	r3, [r7, #20]
 8007a02:	e004      	b.n	8007a0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a0c      	ldr	r2, [pc, #48]	@ (8007a38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007a08:	fb02 f303 	mul.w	r3, r2, r3
 8007a0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	613b      	str	r3, [r7, #16]
      break;
 8007a12:	e002      	b.n	8007a1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007a14:	4b05      	ldr	r3, [pc, #20]	@ (8007a2c <HAL_RCC_GetSysClockFreq+0x98>)
 8007a16:	613b      	str	r3, [r7, #16]
      break;
 8007a18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a1a:	693b      	ldr	r3, [r7, #16]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	371c      	adds	r7, #28
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bc80      	pop	{r7}
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	40021000 	.word	0x40021000
 8007a2c:	007a1200 	.word	0x007a1200
 8007a30:	08011f84 	.word	0x08011f84
 8007a34:	08011f94 	.word	0x08011f94
 8007a38:	003d0900 	.word	0x003d0900

08007a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a40:	4b02      	ldr	r3, [pc, #8]	@ (8007a4c <HAL_RCC_GetHCLKFreq+0x10>)
 8007a42:	681b      	ldr	r3, [r3, #0]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bc80      	pop	{r7}
 8007a4a:	4770      	bx	lr
 8007a4c:	200000e0 	.word	0x200000e0

08007a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007a54:	f7ff fff2 	bl	8007a3c <HAL_RCC_GetHCLKFreq>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	4b05      	ldr	r3, [pc, #20]	@ (8007a70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	0a1b      	lsrs	r3, r3, #8
 8007a60:	f003 0307 	and.w	r3, r3, #7
 8007a64:	4903      	ldr	r1, [pc, #12]	@ (8007a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a66:	5ccb      	ldrb	r3, [r1, r3]
 8007a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	40021000 	.word	0x40021000
 8007a74:	08011f7c 	.word	0x08011f7c

08007a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007a7c:	f7ff ffde 	bl	8007a3c <HAL_RCC_GetHCLKFreq>
 8007a80:	4602      	mov	r2, r0
 8007a82:	4b05      	ldr	r3, [pc, #20]	@ (8007a98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	0adb      	lsrs	r3, r3, #11
 8007a88:	f003 0307 	and.w	r3, r3, #7
 8007a8c:	4903      	ldr	r1, [pc, #12]	@ (8007a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a8e:	5ccb      	ldrb	r3, [r1, r3]
 8007a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	40021000 	.word	0x40021000
 8007a9c:	08011f7c 	.word	0x08011f7c

08007aa0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	220f      	movs	r2, #15
 8007aae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007ab0:	4b11      	ldr	r3, [pc, #68]	@ (8007af8 <HAL_RCC_GetClockConfig+0x58>)
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f003 0203 	and.w	r2, r3, #3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007abc:	4b0e      	ldr	r3, [pc, #56]	@ (8007af8 <HAL_RCC_GetClockConfig+0x58>)
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8007af8 <HAL_RCC_GetClockConfig+0x58>)
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007ad4:	4b08      	ldr	r3, [pc, #32]	@ (8007af8 <HAL_RCC_GetClockConfig+0x58>)
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	08db      	lsrs	r3, r3, #3
 8007ada:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007ae2:	4b06      	ldr	r3, [pc, #24]	@ (8007afc <HAL_RCC_GetClockConfig+0x5c>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 0207 	and.w	r2, r3, #7
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8007aee:	bf00      	nop
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bc80      	pop	{r7}
 8007af6:	4770      	bx	lr
 8007af8:	40021000 	.word	0x40021000
 8007afc:	40022000 	.word	0x40022000

08007b00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007b08:	4b0a      	ldr	r3, [pc, #40]	@ (8007b34 <RCC_Delay+0x34>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a0a      	ldr	r2, [pc, #40]	@ (8007b38 <RCC_Delay+0x38>)
 8007b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b12:	0a5b      	lsrs	r3, r3, #9
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	fb02 f303 	mul.w	r3, r2, r3
 8007b1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007b1c:	bf00      	nop
  }
  while (Delay --);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	1e5a      	subs	r2, r3, #1
 8007b22:	60fa      	str	r2, [r7, #12]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1f9      	bne.n	8007b1c <RCC_Delay+0x1c>
}
 8007b28:	bf00      	nop
 8007b2a:	bf00      	nop
 8007b2c:	3714      	adds	r7, #20
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bc80      	pop	{r7}
 8007b32:	4770      	bx	lr
 8007b34:	200000e0 	.word	0x200000e0
 8007b38:	10624dd3 	.word	0x10624dd3

08007b3c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007b44:	2300      	movs	r3, #0
 8007b46:	613b      	str	r3, [r7, #16]
 8007b48:	2300      	movs	r3, #0
 8007b4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0301 	and.w	r3, r3, #1
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d07d      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b5c:	4b4f      	ldr	r3, [pc, #316]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b5e:	69db      	ldr	r3, [r3, #28]
 8007b60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10d      	bne.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b68:	4b4c      	ldr	r3, [pc, #304]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b6a:	69db      	ldr	r3, [r3, #28]
 8007b6c:	4a4b      	ldr	r2, [pc, #300]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b72:	61d3      	str	r3, [r2, #28]
 8007b74:	4b49      	ldr	r3, [pc, #292]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b76:	69db      	ldr	r3, [r3, #28]
 8007b78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b7c:	60bb      	str	r3, [r7, #8]
 8007b7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b80:	2301      	movs	r3, #1
 8007b82:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b84:	4b46      	ldr	r3, [pc, #280]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d118      	bne.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b90:	4b43      	ldr	r3, [pc, #268]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a42      	ldr	r2, [pc, #264]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b9c:	f7fc fd96 	bl	80046cc <HAL_GetTick>
 8007ba0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ba2:	e008      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ba4:	f7fc fd92 	bl	80046cc <HAL_GetTick>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	2b64      	cmp	r3, #100	@ 0x64
 8007bb0:	d901      	bls.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e06d      	b.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bb6:	4b3a      	ldr	r3, [pc, #232]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d0f0      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007bc2:	4b36      	ldr	r3, [pc, #216]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bc4:	6a1b      	ldr	r3, [r3, #32]
 8007bc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d02e      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d027      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007be0:	4b2e      	ldr	r3, [pc, #184]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007be2:	6a1b      	ldr	r3, [r3, #32]
 8007be4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007be8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007bea:	4b2e      	ldr	r3, [pc, #184]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007bec:	2201      	movs	r2, #1
 8007bee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007bf0:	4b2c      	ldr	r3, [pc, #176]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007bf6:	4a29      	ldr	r2, [pc, #164]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f003 0301 	and.w	r3, r3, #1
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d014      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c06:	f7fc fd61 	bl	80046cc <HAL_GetTick>
 8007c0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c0c:	e00a      	b.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c0e:	f7fc fd5d 	bl	80046cc <HAL_GetTick>
 8007c12:	4602      	mov	r2, r0
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	1ad3      	subs	r3, r2, r3
 8007c18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d901      	bls.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007c20:	2303      	movs	r3, #3
 8007c22:	e036      	b.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c24:	4b1d      	ldr	r3, [pc, #116]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c26:	6a1b      	ldr	r3, [r3, #32]
 8007c28:	f003 0302 	and.w	r3, r3, #2
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d0ee      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c30:	4b1a      	ldr	r3, [pc, #104]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c32:	6a1b      	ldr	r3, [r3, #32]
 8007c34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	4917      	ldr	r1, [pc, #92]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007c42:	7dfb      	ldrb	r3, [r7, #23]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d105      	bne.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c48:	4b14      	ldr	r3, [pc, #80]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c4a:	69db      	ldr	r3, [r3, #28]
 8007c4c:	4a13      	ldr	r2, [pc, #76]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 0302 	and.w	r3, r3, #2
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d008      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c60:	4b0e      	ldr	r3, [pc, #56]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	490b      	ldr	r1, [pc, #44]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 0310 	and.w	r3, r3, #16
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d008      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c7e:	4b07      	ldr	r3, [pc, #28]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	4904      	ldr	r1, [pc, #16]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3718      	adds	r7, #24
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	40021000 	.word	0x40021000
 8007ca0:	40007000 	.word	0x40007000
 8007ca4:	42420440 	.word	0x42420440

08007ca8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b088      	sub	sp, #32
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	617b      	str	r3, [r7, #20]
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	61fb      	str	r3, [r7, #28]
 8007cb8:	2300      	movs	r3, #0
 8007cba:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	60fb      	str	r3, [r7, #12]
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	2b0f      	cmp	r3, #15
 8007cca:	f200 80af 	bhi.w	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8007cce:	a201      	add	r2, pc, #4	@ (adr r2, 8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8007cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd4:	08007dab 	.word	0x08007dab
 8007cd8:	08007e11 	.word	0x08007e11
 8007cdc:	08007e2d 	.word	0x08007e2d
 8007ce0:	08007d9b 	.word	0x08007d9b
 8007ce4:	08007e2d 	.word	0x08007e2d
 8007ce8:	08007e2d 	.word	0x08007e2d
 8007cec:	08007e2d 	.word	0x08007e2d
 8007cf0:	08007da3 	.word	0x08007da3
 8007cf4:	08007e2d 	.word	0x08007e2d
 8007cf8:	08007e2d 	.word	0x08007e2d
 8007cfc:	08007e2d 	.word	0x08007e2d
 8007d00:	08007e2d 	.word	0x08007e2d
 8007d04:	08007e2d 	.word	0x08007e2d
 8007d08:	08007e2d 	.word	0x08007e2d
 8007d0c:	08007e2d 	.word	0x08007e2d
 8007d10:	08007d15 	.word	0x08007d15
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8007d14:	4b4a      	ldr	r3, [pc, #296]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007d1a:	4b49      	ldr	r3, [pc, #292]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 8084 	beq.w	8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	0c9b      	lsrs	r3, r3, #18
 8007d2c:	f003 030f 	and.w	r3, r3, #15
 8007d30:	4a44      	ldr	r2, [pc, #272]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8007d32:	5cd3      	ldrb	r3, [r2, r3]
 8007d34:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d015      	beq.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007d40:	4b3f      	ldr	r3, [pc, #252]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	0c5b      	lsrs	r3, r3, #17
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	4a3f      	ldr	r2, [pc, #252]	@ (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8007d4c:	5cd3      	ldrb	r3, [r2, r3]
 8007d4e:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00d      	beq.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007d5a:	4a3c      	ldr	r2, [pc, #240]	@ (8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	fb02 f303 	mul.w	r3, r2, r3
 8007d68:	61fb      	str	r3, [r7, #28]
 8007d6a:	e004      	b.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	4a38      	ldr	r2, [pc, #224]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8007d70:	fb02 f303 	mul.w	r3, r2, r3
 8007d74:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007d76:	4b32      	ldr	r3, [pc, #200]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d82:	d102      	bne.n	8007d8a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8007d88:	e052      	b.n	8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	005b      	lsls	r3, r3, #1
 8007d8e:	4a31      	ldr	r2, [pc, #196]	@ (8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8007d90:	fba2 2303 	umull	r2, r3, r2, r3
 8007d94:	085b      	lsrs	r3, r3, #1
 8007d96:	61bb      	str	r3, [r7, #24]
      break;
 8007d98:	e04a      	b.n	8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8007d9a:	f7ff fdfb 	bl	8007994 <HAL_RCC_GetSysClockFreq>
 8007d9e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8007da0:	e049      	b.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8007da2:	f7ff fdf7 	bl	8007994 <HAL_RCC_GetSysClockFreq>
 8007da6:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8007da8:	e045      	b.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8007daa:	4b25      	ldr	r3, [pc, #148]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007dac:	6a1b      	ldr	r3, [r3, #32]
 8007dae:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007db6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dba:	d108      	bne.n	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f003 0302 	and.w	r3, r3, #2
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d003      	beq.n	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8007dc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dca:	61bb      	str	r3, [r7, #24]
 8007dcc:	e01f      	b.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007dd8:	d109      	bne.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007dda:	4b19      	ldr	r3, [pc, #100]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dde:	f003 0302 	and.w	r3, r3, #2
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8007de6:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8007dea:	61bb      	str	r3, [r7, #24]
 8007dec:	e00f      	b.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007df4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007df8:	d11c      	bne.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8007dfa:	4b11      	ldr	r3, [pc, #68]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d016      	beq.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8007e06:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8007e0a:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8007e0c:	e012      	b.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8007e0e:	e011      	b.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007e10:	f7ff fe32 	bl	8007a78 <HAL_RCC_GetPCLK2Freq>
 8007e14:	4602      	mov	r2, r0
 8007e16:	4b0a      	ldr	r3, [pc, #40]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	0b9b      	lsrs	r3, r3, #14
 8007e1c:	f003 0303 	and.w	r3, r3, #3
 8007e20:	3301      	adds	r3, #1
 8007e22:	005b      	lsls	r3, r3, #1
 8007e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e28:	61bb      	str	r3, [r7, #24]
      break;
 8007e2a:	e004      	b.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8007e2c:	bf00      	nop
 8007e2e:	e002      	b.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8007e30:	bf00      	nop
 8007e32:	e000      	b.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8007e34:	bf00      	nop
    }
  }
  return (frequency);
 8007e36:	69bb      	ldr	r3, [r7, #24]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3720      	adds	r7, #32
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	40021000 	.word	0x40021000
 8007e44:	08011f98 	.word	0x08011f98
 8007e48:	08011fa8 	.word	0x08011fa8
 8007e4c:	007a1200 	.word	0x007a1200
 8007e50:	003d0900 	.word	0x003d0900
 8007e54:	aaaaaaab 	.word	0xaaaaaaab

08007e58 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8007e60:	2300      	movs	r3, #0
 8007e62:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d101      	bne.n	8007e6e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e07a      	b.n	8007f64 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	7c5b      	ldrb	r3, [r3, #17]
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d105      	bne.n	8007e84 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f7fb ff24 	bl	8003ccc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2202      	movs	r2, #2
 8007e88:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 faea 	bl	8008464 <HAL_RTC_WaitForSynchro>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d004      	beq.n	8007ea0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2204      	movs	r2, #4
 8007e9a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e061      	b.n	8007f64 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 fba3 	bl	80085ec <RTC_EnterInitMode>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d004      	beq.n	8007eb6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2204      	movs	r2, #4
 8007eb0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e056      	b.n	8007f64 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	685a      	ldr	r2, [r3, #4]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f022 0207 	bic.w	r2, r2, #7
 8007ec4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d005      	beq.n	8007eda <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8007ece:	4b27      	ldr	r3, [pc, #156]	@ (8007f6c <HAL_RTC_Init+0x114>)
 8007ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ed2:	4a26      	ldr	r2, [pc, #152]	@ (8007f6c <HAL_RTC_Init+0x114>)
 8007ed4:	f023 0301 	bic.w	r3, r3, #1
 8007ed8:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8007eda:	4b24      	ldr	r3, [pc, #144]	@ (8007f6c <HAL_RTC_Init+0x114>)
 8007edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ede:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	4921      	ldr	r1, [pc, #132]	@ (8007f6c <HAL_RTC_Init+0x114>)
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef4:	d003      	beq.n	8007efe <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	60fb      	str	r3, [r7, #12]
 8007efc:	e00e      	b.n	8007f1c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8007efe:	2001      	movs	r0, #1
 8007f00:	f7ff fed2 	bl	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007f04:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d104      	bne.n	8007f16 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2204      	movs	r2, #4
 8007f10:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e026      	b.n	8007f64 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	0c1a      	lsrs	r2, r3, #16
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f002 020f 	and.w	r2, r2, #15
 8007f28:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	b292      	uxth	r2, r2
 8007f32:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fb81 	bl	800863c <RTC_ExitInitMode>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d004      	beq.n	8007f4a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2204      	movs	r2, #4
 8007f44:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e00c      	b.n	8007f64 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8007f62:	2300      	movs	r3, #0
  }
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3710      	adds	r7, #16
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	40006c00 	.word	0x40006c00

08007f70 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007f70:	b590      	push	{r4, r7, lr}
 8007f72:	b087      	sub	sp, #28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	617b      	str	r3, [r7, #20]
 8007f80:	2300      	movs	r3, #0
 8007f82:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d002      	beq.n	8007f90 <HAL_RTC_SetTime+0x20>
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	e080      	b.n	8008096 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	7c1b      	ldrb	r3, [r3, #16]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d101      	bne.n	8007fa0 <HAL_RTC_SetTime+0x30>
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	e07a      	b.n	8008096 <HAL_RTC_SetTime+0x126>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2202      	movs	r2, #2
 8007faa:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d113      	bne.n	8007fda <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8007fbc:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	785b      	ldrb	r3, [r3, #1]
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	011b      	lsls	r3, r3, #4
 8007fca:	1a5b      	subs	r3, r3, r1
 8007fcc:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007fce:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007fd4:	4413      	add	r3, r2
 8007fd6:	617b      	str	r3, [r7, #20]
 8007fd8:	e01e      	b.n	8008018 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f000 fb71 	bl	80086c6 <RTC_Bcd2ToByte>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8007fec:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	785b      	ldrb	r3, [r3, #1]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f000 fb66 	bl	80086c6 <RTC_Bcd2ToByte>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	4613      	mov	r3, r2
 8008000:	011b      	lsls	r3, r3, #4
 8008002:	1a9b      	subs	r3, r3, r2
 8008004:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8008006:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	789b      	ldrb	r3, [r3, #2]
 800800c:	4618      	mov	r0, r3
 800800e:	f000 fb5a 	bl	80086c6 <RTC_Bcd2ToByte>
 8008012:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8008014:	4423      	add	r3, r4
 8008016:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8008018:	6979      	ldr	r1, [r7, #20]
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f000 fa7f 	bl	800851e <RTC_WriteTimeCounter>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d007      	beq.n	8008036 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2204      	movs	r2, #4
 800802a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2200      	movs	r2, #0
 8008030:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e02f      	b.n	8008096 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	685a      	ldr	r2, [r3, #4]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f022 0205 	bic.w	r2, r2, #5
 8008044:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f000 fa90 	bl	800856c <RTC_ReadAlarmCounter>
 800804c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008054:	d018      	beq.n	8008088 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	429a      	cmp	r2, r3
 800805c:	d214      	bcs.n	8008088 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8008064:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8008068:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800806a:	6939      	ldr	r1, [r7, #16]
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f000 fa96 	bl	800859e <RTC_WriteAlarmCounter>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d007      	beq.n	8008088 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2204      	movs	r2, #4
 800807c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e006      	b.n	8008096 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2201      	movs	r2, #1
 800808c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2200      	movs	r2, #0
 8008092:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8008094:	2300      	movs	r3, #0
  }
}
 8008096:	4618      	mov	r0, r3
 8008098:	371c      	adds	r7, #28
 800809a:	46bd      	mov	sp, r7
 800809c:	bd90      	pop	{r4, r7, pc}
	...

080080a0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b088      	sub	sp, #32
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80080ac:	2300      	movs	r3, #0
 80080ae:	61bb      	str	r3, [r7, #24]
 80080b0:	2300      	movs	r3, #0
 80080b2:	61fb      	str	r3, [r7, #28]
 80080b4:	2300      	movs	r3, #0
 80080b6:	617b      	str	r3, [r7, #20]
 80080b8:	2300      	movs	r3, #0
 80080ba:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d002      	beq.n	80080c8 <HAL_RTC_GetTime+0x28>
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d101      	bne.n	80080cc <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	e0b5      	b.n	8008238 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	f003 0304 	and.w	r3, r3, #4
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e0ac      	b.n	8008238 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f000 f9ed 	bl	80084be <RTC_ReadTimeCounter>
 80080e4:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	4a55      	ldr	r2, [pc, #340]	@ (8008240 <HAL_RTC_GetTime+0x1a0>)
 80080ea:	fba2 2303 	umull	r2, r3, r2, r3
 80080ee:	0adb      	lsrs	r3, r3, #11
 80080f0:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80080f2:	69ba      	ldr	r2, [r7, #24]
 80080f4:	4b52      	ldr	r3, [pc, #328]	@ (8008240 <HAL_RTC_GetTime+0x1a0>)
 80080f6:	fba3 1302 	umull	r1, r3, r3, r2
 80080fa:	0adb      	lsrs	r3, r3, #11
 80080fc:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8008100:	fb01 f303 	mul.w	r3, r1, r3
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	4a4f      	ldr	r2, [pc, #316]	@ (8008244 <HAL_RTC_GetTime+0x1a4>)
 8008108:	fba2 2303 	umull	r2, r3, r2, r3
 800810c:	095b      	lsrs	r3, r3, #5
 800810e:	b2da      	uxtb	r2, r3
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	4a4a      	ldr	r2, [pc, #296]	@ (8008240 <HAL_RTC_GetTime+0x1a0>)
 8008118:	fba2 1203 	umull	r1, r2, r2, r3
 800811c:	0ad2      	lsrs	r2, r2, #11
 800811e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8008122:	fb01 f202 	mul.w	r2, r1, r2
 8008126:	1a9a      	subs	r2, r3, r2
 8008128:	4b46      	ldr	r3, [pc, #280]	@ (8008244 <HAL_RTC_GetTime+0x1a4>)
 800812a:	fba3 1302 	umull	r1, r3, r3, r2
 800812e:	0959      	lsrs	r1, r3, #5
 8008130:	460b      	mov	r3, r1
 8008132:	011b      	lsls	r3, r3, #4
 8008134:	1a5b      	subs	r3, r3, r1
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	1ad1      	subs	r1, r2, r3
 800813a:	b2ca      	uxtb	r2, r1
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	2b17      	cmp	r3, #23
 8008144:	d955      	bls.n	80081f2 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	4a3f      	ldr	r2, [pc, #252]	@ (8008248 <HAL_RTC_GetTime+0x1a8>)
 800814a:	fba2 2303 	umull	r2, r3, r2, r3
 800814e:	091b      	lsrs	r3, r3, #4
 8008150:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8008152:	6939      	ldr	r1, [r7, #16]
 8008154:	4b3c      	ldr	r3, [pc, #240]	@ (8008248 <HAL_RTC_GetTime+0x1a8>)
 8008156:	fba3 2301 	umull	r2, r3, r3, r1
 800815a:	091a      	lsrs	r2, r3, #4
 800815c:	4613      	mov	r3, r2
 800815e:	005b      	lsls	r3, r3, #1
 8008160:	4413      	add	r3, r2
 8008162:	00db      	lsls	r3, r3, #3
 8008164:	1aca      	subs	r2, r1, r3
 8008166:	b2d2      	uxtb	r2, r2
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f000 f9fd 	bl	800856c <RTC_ReadAlarmCounter>
 8008172:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800817a:	d008      	beq.n	800818e <HAL_RTC_GetTime+0xee>
 800817c:	69fa      	ldr	r2, [r7, #28]
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	429a      	cmp	r2, r3
 8008182:	d904      	bls.n	800818e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8008184:	69fa      	ldr	r2, [r7, #28]
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	61fb      	str	r3, [r7, #28]
 800818c:	e002      	b.n	8008194 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800818e:	f04f 33ff 	mov.w	r3, #4294967295
 8008192:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	4a2d      	ldr	r2, [pc, #180]	@ (800824c <HAL_RTC_GetTime+0x1ac>)
 8008198:	fb02 f303 	mul.w	r3, r2, r3
 800819c:	69ba      	ldr	r2, [r7, #24]
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80081a2:	69b9      	ldr	r1, [r7, #24]
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f000 f9ba 	bl	800851e <RTC_WriteTimeCounter>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d001      	beq.n	80081b4 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	e041      	b.n	8008238 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ba:	d00c      	beq.n	80081d6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80081bc:	69fa      	ldr	r2, [r7, #28]
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	4413      	add	r3, r2
 80081c2:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80081c4:	69f9      	ldr	r1, [r7, #28]
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f000 f9e9 	bl	800859e <RTC_WriteAlarmCounter>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00a      	beq.n	80081e8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e030      	b.n	8008238 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80081d6:	69f9      	ldr	r1, [r7, #28]
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f000 f9e0 	bl	800859e <RTC_WriteAlarmCounter>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d001      	beq.n	80081e8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e027      	b.n	8008238 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80081e8:	6979      	ldr	r1, [r7, #20]
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f000 fa88 	bl	8008700 <RTC_DateUpdate>
 80081f0:	e003      	b.n	80081fa <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	b2da      	uxtb	r2, r3
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d01a      	beq.n	8008236 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	4618      	mov	r0, r3
 8008206:	f000 fa41 	bl	800868c <RTC_ByteToBcd2>
 800820a:	4603      	mov	r3, r0
 800820c:	461a      	mov	r2, r3
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	785b      	ldrb	r3, [r3, #1]
 8008216:	4618      	mov	r0, r3
 8008218:	f000 fa38 	bl	800868c <RTC_ByteToBcd2>
 800821c:	4603      	mov	r3, r0
 800821e:	461a      	mov	r2, r3
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	789b      	ldrb	r3, [r3, #2]
 8008228:	4618      	mov	r0, r3
 800822a:	f000 fa2f 	bl	800868c <RTC_ByteToBcd2>
 800822e:	4603      	mov	r3, r0
 8008230:	461a      	mov	r2, r3
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3720      	adds	r7, #32
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	91a2b3c5 	.word	0x91a2b3c5
 8008244:	88888889 	.word	0x88888889
 8008248:	aaaaaaab 	.word	0xaaaaaaab
 800824c:	00015180 	.word	0x00015180

08008250 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b088      	sub	sp, #32
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800825c:	2300      	movs	r3, #0
 800825e:	61fb      	str	r3, [r7, #28]
 8008260:	2300      	movs	r3, #0
 8008262:	61bb      	str	r3, [r7, #24]
 8008264:	2300      	movs	r3, #0
 8008266:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d002      	beq.n	8008274 <HAL_RTC_SetDate+0x24>
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d101      	bne.n	8008278 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	e097      	b.n	80083a8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	7c1b      	ldrb	r3, [r3, #16]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d101      	bne.n	8008284 <HAL_RTC_SetDate+0x34>
 8008280:	2302      	movs	r3, #2
 8008282:	e091      	b.n	80083a8 <HAL_RTC_SetDate+0x158>
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2201      	movs	r2, #1
 8008288:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2202      	movs	r2, #2
 800828e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d10c      	bne.n	80082b0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	78da      	ldrb	r2, [r3, #3]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	785a      	ldrb	r2, [r3, #1]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	789a      	ldrb	r2, [r3, #2]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	739a      	strb	r2, [r3, #14]
 80082ae:	e01a      	b.n	80082e6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	78db      	ldrb	r3, [r3, #3]
 80082b4:	4618      	mov	r0, r3
 80082b6:	f000 fa06 	bl	80086c6 <RTC_Bcd2ToByte>
 80082ba:	4603      	mov	r3, r0
 80082bc:	461a      	mov	r2, r3
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	785b      	ldrb	r3, [r3, #1]
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 f9fd 	bl	80086c6 <RTC_Bcd2ToByte>
 80082cc:	4603      	mov	r3, r0
 80082ce:	461a      	mov	r2, r3
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	789b      	ldrb	r3, [r3, #2]
 80082d8:	4618      	mov	r0, r3
 80082da:	f000 f9f4 	bl	80086c6 <RTC_Bcd2ToByte>
 80082de:	4603      	mov	r3, r0
 80082e0:	461a      	mov	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	7bdb      	ldrb	r3, [r3, #15]
 80082ea:	4618      	mov	r0, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	7b59      	ldrb	r1, [r3, #13]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	7b9b      	ldrb	r3, [r3, #14]
 80082f4:	461a      	mov	r2, r3
 80082f6:	f000 fadf 	bl	80088b8 <RTC_WeekDayNum>
 80082fa:	4603      	mov	r3, r0
 80082fc:	461a      	mov	r2, r3
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	7b1a      	ldrb	r2, [r3, #12]
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f000 f8d7 	bl	80084be <RTC_ReadTimeCounter>
 8008310:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	4a26      	ldr	r2, [pc, #152]	@ (80083b0 <HAL_RTC_SetDate+0x160>)
 8008316:	fba2 2303 	umull	r2, r3, r2, r3
 800831a:	0adb      	lsrs	r3, r3, #11
 800831c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	2b18      	cmp	r3, #24
 8008322:	d93a      	bls.n	800839a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	4a23      	ldr	r2, [pc, #140]	@ (80083b4 <HAL_RTC_SetDate+0x164>)
 8008328:	fba2 2303 	umull	r2, r3, r2, r3
 800832c:	091b      	lsrs	r3, r3, #4
 800832e:	4a22      	ldr	r2, [pc, #136]	@ (80083b8 <HAL_RTC_SetDate+0x168>)
 8008330:	fb02 f303 	mul.w	r3, r2, r3
 8008334:	69fa      	ldr	r2, [r7, #28]
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800833a:	69f9      	ldr	r1, [r7, #28]
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f000 f8ee 	bl	800851e <RTC_WriteTimeCounter>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d007      	beq.n	8008358 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2204      	movs	r2, #4
 800834c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	e027      	b.n	80083a8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f000 f907 	bl	800856c <RTC_ReadAlarmCounter>
 800835e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008366:	d018      	beq.n	800839a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8008368:	69ba      	ldr	r2, [r7, #24]
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	429a      	cmp	r2, r3
 800836e:	d214      	bcs.n	800839a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8008376:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800837a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800837c:	69b9      	ldr	r1, [r7, #24]
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f000 f90d 	bl	800859e <RTC_WriteAlarmCounter>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d007      	beq.n	800839a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2204      	movs	r2, #4
 800838e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	e006      	b.n	80083a8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2201      	movs	r2, #1
 800839e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3720      	adds	r7, #32
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	91a2b3c5 	.word	0x91a2b3c5
 80083b4:	aaaaaaab 	.word	0xaaaaaaab
 80083b8:	00015180 	.word	0x00015180

080083bc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80083c8:	f107 0314 	add.w	r3, r7, #20
 80083cc:	2100      	movs	r1, #0
 80083ce:	460a      	mov	r2, r1
 80083d0:	801a      	strh	r2, [r3, #0]
 80083d2:	460a      	mov	r2, r1
 80083d4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d002      	beq.n	80083e2 <HAL_RTC_GetDate+0x26>
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d101      	bne.n	80083e6 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	e03a      	b.n	800845c <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80083e6:	f107 0314 	add.w	r3, r7, #20
 80083ea:	2200      	movs	r2, #0
 80083ec:	4619      	mov	r1, r3
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f7ff fe56 	bl	80080a0 <HAL_RTC_GetTime>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d001      	beq.n	80083fe <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e02e      	b.n	800845c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	7b1a      	ldrb	r2, [r3, #12]
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	7bda      	ldrb	r2, [r3, #15]
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	7b5a      	ldrb	r2, [r3, #13]
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	7b9a      	ldrb	r2, [r3, #14]
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d01a      	beq.n	800845a <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	78db      	ldrb	r3, [r3, #3]
 8008428:	4618      	mov	r0, r3
 800842a:	f000 f92f 	bl	800868c <RTC_ByteToBcd2>
 800842e:	4603      	mov	r3, r0
 8008430:	461a      	mov	r2, r3
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	785b      	ldrb	r3, [r3, #1]
 800843a:	4618      	mov	r0, r3
 800843c:	f000 f926 	bl	800868c <RTC_ByteToBcd2>
 8008440:	4603      	mov	r3, r0
 8008442:	461a      	mov	r2, r3
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	789b      	ldrb	r3, [r3, #2]
 800844c:	4618      	mov	r0, r3
 800844e:	f000 f91d 	bl	800868c <RTC_ByteToBcd2>
 8008452:	4603      	mov	r3, r0
 8008454:	461a      	mov	r2, r3
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3718      	adds	r7, #24
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800846c:	2300      	movs	r3, #0
 800846e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d101      	bne.n	800847a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e01d      	b.n	80084b6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	685a      	ldr	r2, [r3, #4]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f022 0208 	bic.w	r2, r2, #8
 8008488:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800848a:	f7fc f91f 	bl	80046cc <HAL_GetTick>
 800848e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8008490:	e009      	b.n	80084a6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008492:	f7fc f91b 	bl	80046cc <HAL_GetTick>
 8008496:	4602      	mov	r2, r0
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	1ad3      	subs	r3, r2, r3
 800849c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80084a0:	d901      	bls.n	80084a6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80084a2:	2303      	movs	r3, #3
 80084a4:	e007      	b.n	80084b6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	f003 0308 	and.w	r3, r3, #8
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d0ee      	beq.n	8008492 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80084be:	b480      	push	{r7}
 80084c0:	b087      	sub	sp, #28
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80084c6:	2300      	movs	r3, #0
 80084c8:	827b      	strh	r3, [r7, #18]
 80084ca:	2300      	movs	r3, #0
 80084cc:	823b      	strh	r3, [r7, #16]
 80084ce:	2300      	movs	r3, #0
 80084d0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80084d2:	2300      	movs	r3, #0
 80084d4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	69db      	ldr	r3, [r3, #28]
 80084e4:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80084ee:	8a7a      	ldrh	r2, [r7, #18]
 80084f0:	8a3b      	ldrh	r3, [r7, #16]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d008      	beq.n	8008508 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80084f6:	8a3b      	ldrh	r3, [r7, #16]
 80084f8:	041a      	lsls	r2, r3, #16
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	69db      	ldr	r3, [r3, #28]
 8008500:	b29b      	uxth	r3, r3
 8008502:	4313      	orrs	r3, r2
 8008504:	617b      	str	r3, [r7, #20]
 8008506:	e004      	b.n	8008512 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8008508:	8a7b      	ldrh	r3, [r7, #18]
 800850a:	041a      	lsls	r2, r3, #16
 800850c:	89fb      	ldrh	r3, [r7, #14]
 800850e:	4313      	orrs	r3, r2
 8008510:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8008512:	697b      	ldr	r3, [r7, #20]
}
 8008514:	4618      	mov	r0, r3
 8008516:	371c      	adds	r7, #28
 8008518:	46bd      	mov	sp, r7
 800851a:	bc80      	pop	{r7}
 800851c:	4770      	bx	lr

0800851e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b084      	sub	sp, #16
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008528:	2300      	movs	r3, #0
 800852a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 f85d 	bl	80085ec <RTC_EnterInitMode>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d002      	beq.n	800853e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	73fb      	strb	r3, [r7, #15]
 800853c:	e011      	b.n	8008562 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	683a      	ldr	r2, [r7, #0]
 8008544:	0c12      	lsrs	r2, r2, #16
 8008546:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	b292      	uxth	r2, r2
 8008550:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f872 	bl	800863c <RTC_ExitInitMode>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d001      	beq.n	8008562 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008562:	7bfb      	ldrb	r3, [r7, #15]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8008574:	2300      	movs	r3, #0
 8008576:	81fb      	strh	r3, [r7, #14]
 8008578:	2300      	movs	r3, #0
 800857a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6a1b      	ldr	r3, [r3, #32]
 8008582:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800858a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800858c:	89fb      	ldrh	r3, [r7, #14]
 800858e:	041a      	lsls	r2, r3, #16
 8008590:	89bb      	ldrh	r3, [r7, #12]
 8008592:	4313      	orrs	r3, r2
}
 8008594:	4618      	mov	r0, r3
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	bc80      	pop	{r7}
 800859c:	4770      	bx	lr

0800859e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b084      	sub	sp, #16
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085a8:	2300      	movs	r3, #0
 80085aa:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 f81d 	bl	80085ec <RTC_EnterInitMode>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d002      	beq.n	80085be <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	73fb      	strb	r3, [r7, #15]
 80085bc:	e011      	b.n	80085e2 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	683a      	ldr	r2, [r7, #0]
 80085c4:	0c12      	lsrs	r2, r2, #16
 80085c6:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	683a      	ldr	r2, [r7, #0]
 80085ce:	b292      	uxth	r2, r2
 80085d0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f832 	bl	800863c <RTC_ExitInitMode>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80085e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80085f4:	2300      	movs	r3, #0
 80085f6:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80085f8:	f7fc f868 	bl	80046cc <HAL_GetTick>
 80085fc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80085fe:	e009      	b.n	8008614 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008600:	f7fc f864 	bl	80046cc <HAL_GetTick>
 8008604:	4602      	mov	r2, r0
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800860e:	d901      	bls.n	8008614 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e00f      	b.n	8008634 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	f003 0320 	and.w	r3, r3, #32
 800861e:	2b00      	cmp	r3, #0
 8008620:	d0ee      	beq.n	8008600 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	685a      	ldr	r2, [r3, #4]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f042 0210 	orr.w	r2, r2, #16
 8008630:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3710      	adds	r7, #16
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008644:	2300      	movs	r3, #0
 8008646:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	685a      	ldr	r2, [r3, #4]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f022 0210 	bic.w	r2, r2, #16
 8008656:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8008658:	f7fc f838 	bl	80046cc <HAL_GetTick>
 800865c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800865e:	e009      	b.n	8008674 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008660:	f7fc f834 	bl	80046cc <HAL_GetTick>
 8008664:	4602      	mov	r2, r0
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800866e:	d901      	bls.n	8008674 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8008670:	2303      	movs	r3, #3
 8008672:	e007      	b.n	8008684 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	f003 0320 	and.w	r3, r3, #32
 800867e:	2b00      	cmp	r3, #0
 8008680:	d0ee      	beq.n	8008660 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800868c:	b480      	push	{r7}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
 8008692:	4603      	mov	r3, r0
 8008694:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008696:	2300      	movs	r3, #0
 8008698:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800869a:	e005      	b.n	80086a8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	3301      	adds	r3, #1
 80086a0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80086a2:	79fb      	ldrb	r3, [r7, #7]
 80086a4:	3b0a      	subs	r3, #10
 80086a6:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80086a8:	79fb      	ldrb	r3, [r7, #7]
 80086aa:	2b09      	cmp	r3, #9
 80086ac:	d8f6      	bhi.n	800869c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	011b      	lsls	r3, r3, #4
 80086b4:	b2da      	uxtb	r2, r3
 80086b6:	79fb      	ldrb	r3, [r7, #7]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	b2db      	uxtb	r3, r3
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3714      	adds	r7, #20
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bc80      	pop	{r7}
 80086c4:	4770      	bx	lr

080086c6 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80086c6:	b480      	push	{r7}
 80086c8:	b085      	sub	sp, #20
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	4603      	mov	r3, r0
 80086ce:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80086d0:	2300      	movs	r3, #0
 80086d2:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80086d4:	79fb      	ldrb	r3, [r7, #7]
 80086d6:	091b      	lsrs	r3, r3, #4
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	461a      	mov	r2, r3
 80086dc:	4613      	mov	r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	4413      	add	r3, r2
 80086e2:	005b      	lsls	r3, r3, #1
 80086e4:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80086e6:	79fb      	ldrb	r3, [r7, #7]
 80086e8:	f003 030f 	and.w	r3, r3, #15
 80086ec:	b2da      	uxtb	r2, r3
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	4413      	add	r3, r2
 80086f4:	b2db      	uxtb	r3, r3
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3714      	adds	r7, #20
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bc80      	pop	{r7}
 80086fe:	4770      	bx	lr

08008700 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800870a:	2300      	movs	r3, #0
 800870c:	617b      	str	r3, [r7, #20]
 800870e:	2300      	movs	r3, #0
 8008710:	613b      	str	r3, [r7, #16]
 8008712:	2300      	movs	r3, #0
 8008714:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8008716:	2300      	movs	r3, #0
 8008718:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	7bdb      	ldrb	r3, [r3, #15]
 800871e:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	7b5b      	ldrb	r3, [r3, #13]
 8008724:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	7b9b      	ldrb	r3, [r3, #14]
 800872a:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800872c:	2300      	movs	r3, #0
 800872e:	60bb      	str	r3, [r7, #8]
 8008730:	e06f      	b.n	8008812 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	2b01      	cmp	r3, #1
 8008736:	d011      	beq.n	800875c <RTC_DateUpdate+0x5c>
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	2b03      	cmp	r3, #3
 800873c:	d00e      	beq.n	800875c <RTC_DateUpdate+0x5c>
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	2b05      	cmp	r3, #5
 8008742:	d00b      	beq.n	800875c <RTC_DateUpdate+0x5c>
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	2b07      	cmp	r3, #7
 8008748:	d008      	beq.n	800875c <RTC_DateUpdate+0x5c>
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	2b08      	cmp	r3, #8
 800874e:	d005      	beq.n	800875c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	2b0a      	cmp	r3, #10
 8008754:	d002      	beq.n	800875c <RTC_DateUpdate+0x5c>
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	2b0c      	cmp	r3, #12
 800875a:	d117      	bne.n	800878c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2b1e      	cmp	r3, #30
 8008760:	d803      	bhi.n	800876a <RTC_DateUpdate+0x6a>
      {
        day++;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	3301      	adds	r3, #1
 8008766:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8008768:	e050      	b.n	800880c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	2b0c      	cmp	r3, #12
 800876e:	d005      	beq.n	800877c <RTC_DateUpdate+0x7c>
        {
          month++;
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	3301      	adds	r3, #1
 8008774:	613b      	str	r3, [r7, #16]
          day = 1U;
 8008776:	2301      	movs	r3, #1
 8008778:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800877a:	e047      	b.n	800880c <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800877c:	2301      	movs	r3, #1
 800877e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8008780:	2301      	movs	r3, #1
 8008782:	60fb      	str	r3, [r7, #12]
          year++;
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	3301      	adds	r3, #1
 8008788:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800878a:	e03f      	b.n	800880c <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	2b04      	cmp	r3, #4
 8008790:	d008      	beq.n	80087a4 <RTC_DateUpdate+0xa4>
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	2b06      	cmp	r3, #6
 8008796:	d005      	beq.n	80087a4 <RTC_DateUpdate+0xa4>
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	2b09      	cmp	r3, #9
 800879c:	d002      	beq.n	80087a4 <RTC_DateUpdate+0xa4>
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	2b0b      	cmp	r3, #11
 80087a2:	d10c      	bne.n	80087be <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2b1d      	cmp	r3, #29
 80087a8:	d803      	bhi.n	80087b2 <RTC_DateUpdate+0xb2>
      {
        day++;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	3301      	adds	r3, #1
 80087ae:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80087b0:	e02c      	b.n	800880c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	3301      	adds	r3, #1
 80087b6:	613b      	str	r3, [r7, #16]
        day = 1U;
 80087b8:	2301      	movs	r3, #1
 80087ba:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80087bc:	e026      	b.n	800880c <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d123      	bne.n	800880c <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2b1b      	cmp	r3, #27
 80087c8:	d803      	bhi.n	80087d2 <RTC_DateUpdate+0xd2>
      {
        day++;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	3301      	adds	r3, #1
 80087ce:	60fb      	str	r3, [r7, #12]
 80087d0:	e01c      	b.n	800880c <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2b1c      	cmp	r3, #28
 80087d6:	d111      	bne.n	80087fc <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	b29b      	uxth	r3, r3
 80087dc:	4618      	mov	r0, r3
 80087de:	f000 f839 	bl	8008854 <RTC_IsLeapYear>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d003      	beq.n	80087f0 <RTC_DateUpdate+0xf0>
        {
          day++;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	3301      	adds	r3, #1
 80087ec:	60fb      	str	r3, [r7, #12]
 80087ee:	e00d      	b.n	800880c <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	3301      	adds	r3, #1
 80087f4:	613b      	str	r3, [r7, #16]
          day = 1U;
 80087f6:	2301      	movs	r3, #1
 80087f8:	60fb      	str	r3, [r7, #12]
 80087fa:	e007      	b.n	800880c <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2b1d      	cmp	r3, #29
 8008800:	d104      	bne.n	800880c <RTC_DateUpdate+0x10c>
      {
        month++;
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	3301      	adds	r3, #1
 8008806:	613b      	str	r3, [r7, #16]
        day = 1U;
 8008808:	2301      	movs	r3, #1
 800880a:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	3301      	adds	r3, #1
 8008810:	60bb      	str	r3, [r7, #8]
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	429a      	cmp	r2, r3
 8008818:	d38b      	bcc.n	8008732 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	b2da      	uxtb	r2, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	b2da      	uxtb	r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	b2da      	uxtb	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	b2db      	uxtb	r3, r3
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	b2d2      	uxtb	r2, r2
 800883a:	4619      	mov	r1, r3
 800883c:	6978      	ldr	r0, [r7, #20]
 800883e:	f000 f83b 	bl	80088b8 <RTC_WeekDayNum>
 8008842:	4603      	mov	r3, r0
 8008844:	461a      	mov	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	731a      	strb	r2, [r3, #12]
}
 800884a:	bf00      	nop
 800884c:	3718      	adds	r7, #24
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
	...

08008854 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	4603      	mov	r3, r0
 800885c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800885e:	88fb      	ldrh	r3, [r7, #6]
 8008860:	f003 0303 	and.w	r3, r3, #3
 8008864:	b29b      	uxth	r3, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	d001      	beq.n	800886e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800886a:	2300      	movs	r3, #0
 800886c:	e01d      	b.n	80088aa <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800886e:	88fb      	ldrh	r3, [r7, #6]
 8008870:	4a10      	ldr	r2, [pc, #64]	@ (80088b4 <RTC_IsLeapYear+0x60>)
 8008872:	fba2 1203 	umull	r1, r2, r2, r3
 8008876:	0952      	lsrs	r2, r2, #5
 8008878:	2164      	movs	r1, #100	@ 0x64
 800887a:	fb01 f202 	mul.w	r2, r1, r2
 800887e:	1a9b      	subs	r3, r3, r2
 8008880:	b29b      	uxth	r3, r3
 8008882:	2b00      	cmp	r3, #0
 8008884:	d001      	beq.n	800888a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8008886:	2301      	movs	r3, #1
 8008888:	e00f      	b.n	80088aa <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800888a:	88fb      	ldrh	r3, [r7, #6]
 800888c:	4a09      	ldr	r2, [pc, #36]	@ (80088b4 <RTC_IsLeapYear+0x60>)
 800888e:	fba2 1203 	umull	r1, r2, r2, r3
 8008892:	09d2      	lsrs	r2, r2, #7
 8008894:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8008898:	fb01 f202 	mul.w	r2, r1, r2
 800889c:	1a9b      	subs	r3, r3, r2
 800889e:	b29b      	uxth	r3, r3
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d101      	bne.n	80088a8 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e000      	b.n	80088aa <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80088a8:	2300      	movs	r3, #0
  }
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	370c      	adds	r7, #12
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bc80      	pop	{r7}
 80088b2:	4770      	bx	lr
 80088b4:	51eb851f 	.word	0x51eb851f

080088b8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	460b      	mov	r3, r1
 80088c2:	70fb      	strb	r3, [r7, #3]
 80088c4:	4613      	mov	r3, r2
 80088c6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80088c8:	2300      	movs	r3, #0
 80088ca:	60bb      	str	r3, [r7, #8]
 80088cc:	2300      	movs	r3, #0
 80088ce:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80088d6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80088d8:	78fb      	ldrb	r3, [r7, #3]
 80088da:	2b02      	cmp	r3, #2
 80088dc:	d82d      	bhi.n	800893a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80088de:	78fa      	ldrb	r2, [r7, #3]
 80088e0:	4613      	mov	r3, r2
 80088e2:	005b      	lsls	r3, r3, #1
 80088e4:	4413      	add	r3, r2
 80088e6:	00db      	lsls	r3, r3, #3
 80088e8:	1a9b      	subs	r3, r3, r2
 80088ea:	4a2c      	ldr	r2, [pc, #176]	@ (800899c <RTC_WeekDayNum+0xe4>)
 80088ec:	fba2 2303 	umull	r2, r3, r2, r3
 80088f0:	085a      	lsrs	r2, r3, #1
 80088f2:	78bb      	ldrb	r3, [r7, #2]
 80088f4:	441a      	add	r2, r3
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	441a      	add	r2, r3
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	3b01      	subs	r3, #1
 80088fe:	089b      	lsrs	r3, r3, #2
 8008900:	441a      	add	r2, r3
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	3b01      	subs	r3, #1
 8008906:	4926      	ldr	r1, [pc, #152]	@ (80089a0 <RTC_WeekDayNum+0xe8>)
 8008908:	fba1 1303 	umull	r1, r3, r1, r3
 800890c:	095b      	lsrs	r3, r3, #5
 800890e:	1ad2      	subs	r2, r2, r3
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	3b01      	subs	r3, #1
 8008914:	4922      	ldr	r1, [pc, #136]	@ (80089a0 <RTC_WeekDayNum+0xe8>)
 8008916:	fba1 1303 	umull	r1, r3, r1, r3
 800891a:	09db      	lsrs	r3, r3, #7
 800891c:	4413      	add	r3, r2
 800891e:	1d1a      	adds	r2, r3, #4
 8008920:	4b20      	ldr	r3, [pc, #128]	@ (80089a4 <RTC_WeekDayNum+0xec>)
 8008922:	fba3 1302 	umull	r1, r3, r3, r2
 8008926:	1ad1      	subs	r1, r2, r3
 8008928:	0849      	lsrs	r1, r1, #1
 800892a:	440b      	add	r3, r1
 800892c:	0899      	lsrs	r1, r3, #2
 800892e:	460b      	mov	r3, r1
 8008930:	00db      	lsls	r3, r3, #3
 8008932:	1a5b      	subs	r3, r3, r1
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	60fb      	str	r3, [r7, #12]
 8008938:	e029      	b.n	800898e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800893a:	78fa      	ldrb	r2, [r7, #3]
 800893c:	4613      	mov	r3, r2
 800893e:	005b      	lsls	r3, r3, #1
 8008940:	4413      	add	r3, r2
 8008942:	00db      	lsls	r3, r3, #3
 8008944:	1a9b      	subs	r3, r3, r2
 8008946:	4a15      	ldr	r2, [pc, #84]	@ (800899c <RTC_WeekDayNum+0xe4>)
 8008948:	fba2 2303 	umull	r2, r3, r2, r3
 800894c:	085a      	lsrs	r2, r3, #1
 800894e:	78bb      	ldrb	r3, [r7, #2]
 8008950:	441a      	add	r2, r3
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	441a      	add	r2, r3
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	089b      	lsrs	r3, r3, #2
 800895a:	441a      	add	r2, r3
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	4910      	ldr	r1, [pc, #64]	@ (80089a0 <RTC_WeekDayNum+0xe8>)
 8008960:	fba1 1303 	umull	r1, r3, r1, r3
 8008964:	095b      	lsrs	r3, r3, #5
 8008966:	1ad2      	subs	r2, r2, r3
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	490d      	ldr	r1, [pc, #52]	@ (80089a0 <RTC_WeekDayNum+0xe8>)
 800896c:	fba1 1303 	umull	r1, r3, r1, r3
 8008970:	09db      	lsrs	r3, r3, #7
 8008972:	4413      	add	r3, r2
 8008974:	1c9a      	adds	r2, r3, #2
 8008976:	4b0b      	ldr	r3, [pc, #44]	@ (80089a4 <RTC_WeekDayNum+0xec>)
 8008978:	fba3 1302 	umull	r1, r3, r3, r2
 800897c:	1ad1      	subs	r1, r2, r3
 800897e:	0849      	lsrs	r1, r1, #1
 8008980:	440b      	add	r3, r1
 8008982:	0899      	lsrs	r1, r3, #2
 8008984:	460b      	mov	r3, r1
 8008986:	00db      	lsls	r3, r3, #3
 8008988:	1a5b      	subs	r3, r3, r1
 800898a:	1ad3      	subs	r3, r2, r3
 800898c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	b2db      	uxtb	r3, r3
}
 8008992:	4618      	mov	r0, r3
 8008994:	3714      	adds	r7, #20
 8008996:	46bd      	mov	sp, r7
 8008998:	bc80      	pop	{r7}
 800899a:	4770      	bx	lr
 800899c:	38e38e39 	.word	0x38e38e39
 80089a0:	51eb851f 	.word	0x51eb851f
 80089a4:	24924925 	.word	0x24924925

080089a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d101      	bne.n	80089ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e076      	b.n	8008aa8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d108      	bne.n	80089d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80089ca:	d009      	beq.n	80089e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	61da      	str	r2, [r3, #28]
 80089d2:	e005      	b.n	80089e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d106      	bne.n	8008a00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7fb fb7e 	bl	80040fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2202      	movs	r2, #2
 8008a04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008a28:	431a      	orrs	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a32:	431a      	orrs	r2, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	f003 0302 	and.w	r3, r3, #2
 8008a3c:	431a      	orrs	r2, r3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	695b      	ldr	r3, [r3, #20]
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	431a      	orrs	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	699b      	ldr	r3, [r3, #24]
 8008a4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a50:	431a      	orrs	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	69db      	ldr	r3, [r3, #28]
 8008a56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a5a:	431a      	orrs	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6a1b      	ldr	r3, [r3, #32]
 8008a60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a64:	ea42 0103 	orr.w	r1, r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a6c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	430a      	orrs	r2, r1
 8008a76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	699b      	ldr	r3, [r3, #24]
 8008a7c:	0c1a      	lsrs	r2, r3, #16
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f002 0204 	and.w	r2, r2, #4
 8008a86:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	69da      	ldr	r2, [r3, #28]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008a96:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b088      	sub	sp, #32
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	603b      	str	r3, [r7, #0]
 8008abc:	4613      	mov	r3, r2
 8008abe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d101      	bne.n	8008ad2 <HAL_SPI_Transmit+0x22>
 8008ace:	2302      	movs	r3, #2
 8008ad0:	e12d      	b.n	8008d2e <HAL_SPI_Transmit+0x27e>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ada:	f7fb fdf7 	bl	80046cc <HAL_GetTick>
 8008ade:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008ae0:	88fb      	ldrh	r3, [r7, #6]
 8008ae2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d002      	beq.n	8008af6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008af0:	2302      	movs	r3, #2
 8008af2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008af4:	e116      	b.n	8008d24 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d002      	beq.n	8008b02 <HAL_SPI_Transmit+0x52>
 8008afc:	88fb      	ldrh	r3, [r7, #6]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d102      	bne.n	8008b08 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008b06:	e10d      	b.n	8008d24 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2203      	movs	r2, #3
 8008b0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2200      	movs	r2, #0
 8008b14:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	68ba      	ldr	r2, [r7, #8]
 8008b1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	88fa      	ldrh	r2, [r7, #6]
 8008b20:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	88fa      	ldrh	r2, [r7, #6]
 8008b26:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2200      	movs	r2, #0
 8008b44:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b4e:	d10f      	bne.n	8008b70 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008b6e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b7a:	2b40      	cmp	r3, #64	@ 0x40
 8008b7c:	d007      	beq.n	8008b8e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b96:	d14f      	bne.n	8008c38 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d002      	beq.n	8008ba6 <HAL_SPI_Transmit+0xf6>
 8008ba0:	8afb      	ldrh	r3, [r7, #22]
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d142      	bne.n	8008c2c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008baa:	881a      	ldrh	r2, [r3, #0]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bb6:	1c9a      	adds	r2, r3, #2
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	3b01      	subs	r3, #1
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008bca:	e02f      	b.n	8008c2c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	f003 0302 	and.w	r3, r3, #2
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	d112      	bne.n	8008c00 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bde:	881a      	ldrh	r2, [r3, #0]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bea:	1c9a      	adds	r2, r3, #2
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008bfe:	e015      	b.n	8008c2c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c00:	f7fb fd64 	bl	80046cc <HAL_GetTick>
 8008c04:	4602      	mov	r2, r0
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	1ad3      	subs	r3, r2, r3
 8008c0a:	683a      	ldr	r2, [r7, #0]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d803      	bhi.n	8008c18 <HAL_SPI_Transmit+0x168>
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c16:	d102      	bne.n	8008c1e <HAL_SPI_Transmit+0x16e>
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d106      	bne.n	8008c2c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8008c2a:	e07b      	b.n	8008d24 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d1ca      	bne.n	8008bcc <HAL_SPI_Transmit+0x11c>
 8008c36:	e050      	b.n	8008cda <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d002      	beq.n	8008c46 <HAL_SPI_Transmit+0x196>
 8008c40:	8afb      	ldrh	r3, [r7, #22]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d144      	bne.n	8008cd0 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	330c      	adds	r3, #12
 8008c50:	7812      	ldrb	r2, [r2, #0]
 8008c52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c58:	1c5a      	adds	r2, r3, #1
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	3b01      	subs	r3, #1
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008c6c:	e030      	b.n	8008cd0 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	f003 0302 	and.w	r3, r3, #2
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	d113      	bne.n	8008ca4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	330c      	adds	r3, #12
 8008c86:	7812      	ldrb	r2, [r2, #0]
 8008c88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c8e:	1c5a      	adds	r2, r3, #1
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	3b01      	subs	r3, #1
 8008c9c:	b29a      	uxth	r2, r3
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008ca2:	e015      	b.n	8008cd0 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ca4:	f7fb fd12 	bl	80046cc <HAL_GetTick>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	1ad3      	subs	r3, r2, r3
 8008cae:	683a      	ldr	r2, [r7, #0]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d803      	bhi.n	8008cbc <HAL_SPI_Transmit+0x20c>
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cba:	d102      	bne.n	8008cc2 <HAL_SPI_Transmit+0x212>
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d106      	bne.n	8008cd0 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8008cc2:	2303      	movs	r3, #3
 8008cc4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8008cce:	e029      	b.n	8008d24 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1c9      	bne.n	8008c6e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008cda:	69ba      	ldr	r2, [r7, #24]
 8008cdc:	6839      	ldr	r1, [r7, #0]
 8008cde:	68f8      	ldr	r0, [r7, #12]
 8008ce0:	f000 fa62 	bl	80091a8 <SPI_EndRxTxTransaction>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d002      	beq.n	8008cf0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2220      	movs	r2, #32
 8008cee:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d10a      	bne.n	8008d0e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	613b      	str	r3, [r7, #16]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	613b      	str	r3, [r7, #16]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	613b      	str	r3, [r7, #16]
 8008d0c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d002      	beq.n	8008d1c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	77fb      	strb	r3, [r7, #31]
 8008d1a:	e003      	b.n	8008d24 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008d2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3720      	adds	r7, #32
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b08c      	sub	sp, #48	@ 0x30
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	60f8      	str	r0, [r7, #12]
 8008d3e:	60b9      	str	r1, [r7, #8]
 8008d40:	607a      	str	r2, [r7, #4]
 8008d42:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008d44:	2301      	movs	r3, #1
 8008d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d101      	bne.n	8008d5c <HAL_SPI_TransmitReceive+0x26>
 8008d58:	2302      	movs	r3, #2
 8008d5a:	e198      	b.n	800908e <HAL_SPI_TransmitReceive+0x358>
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d64:	f7fb fcb2 	bl	80046cc <HAL_GetTick>
 8008d68:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008d70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008d7a:	887b      	ldrh	r3, [r7, #2]
 8008d7c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008d7e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d00f      	beq.n	8008da6 <HAL_SPI_TransmitReceive+0x70>
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008d8c:	d107      	bne.n	8008d9e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d103      	bne.n	8008d9e <HAL_SPI_TransmitReceive+0x68>
 8008d96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008d9a:	2b04      	cmp	r3, #4
 8008d9c:	d003      	beq.n	8008da6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008d9e:	2302      	movs	r3, #2
 8008da0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008da4:	e16d      	b.n	8009082 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d005      	beq.n	8008db8 <HAL_SPI_TransmitReceive+0x82>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d002      	beq.n	8008db8 <HAL_SPI_TransmitReceive+0x82>
 8008db2:	887b      	ldrh	r3, [r7, #2]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d103      	bne.n	8008dc0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008dbe:	e160      	b.n	8009082 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	2b04      	cmp	r3, #4
 8008dca:	d003      	beq.n	8008dd4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2205      	movs	r2, #5
 8008dd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	887a      	ldrh	r2, [r7, #2]
 8008de4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	887a      	ldrh	r2, [r7, #2]
 8008dea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	68ba      	ldr	r2, [r7, #8]
 8008df0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	887a      	ldrh	r2, [r7, #2]
 8008df6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	887a      	ldrh	r2, [r7, #2]
 8008dfc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2200      	movs	r2, #0
 8008e02:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2200      	movs	r2, #0
 8008e08:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e14:	2b40      	cmp	r3, #64	@ 0x40
 8008e16:	d007      	beq.n	8008e28 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e30:	d17c      	bne.n	8008f2c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d002      	beq.n	8008e40 <HAL_SPI_TransmitReceive+0x10a>
 8008e3a:	8b7b      	ldrh	r3, [r7, #26]
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d16a      	bne.n	8008f16 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e44:	881a      	ldrh	r2, [r3, #0]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e50:	1c9a      	adds	r2, r3, #2
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e64:	e057      	b.n	8008f16 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	f003 0302 	and.w	r3, r3, #2
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d11b      	bne.n	8008eac <HAL_SPI_TransmitReceive+0x176>
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d016      	beq.n	8008eac <HAL_SPI_TransmitReceive+0x176>
 8008e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d113      	bne.n	8008eac <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e88:	881a      	ldrh	r2, [r3, #0]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e94:	1c9a      	adds	r2, r3, #2
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	f003 0301 	and.w	r3, r3, #1
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d119      	bne.n	8008eee <HAL_SPI_TransmitReceive+0x1b8>
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d014      	beq.n	8008eee <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	68da      	ldr	r2, [r3, #12]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ece:	b292      	uxth	r2, r2
 8008ed0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ed6:	1c9a      	adds	r2, r3, #2
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	b29a      	uxth	r2, r3
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008eea:	2301      	movs	r3, #1
 8008eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008eee:	f7fb fbed 	bl	80046cc <HAL_GetTick>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef6:	1ad3      	subs	r3, r2, r3
 8008ef8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d80b      	bhi.n	8008f16 <HAL_SPI_TransmitReceive+0x1e0>
 8008efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f04:	d007      	beq.n	8008f16 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8008f06:	2303      	movs	r3, #3
 8008f08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8008f14:	e0b5      	b.n	8009082 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1a2      	bne.n	8008e66 <HAL_SPI_TransmitReceive+0x130>
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d19d      	bne.n	8008e66 <HAL_SPI_TransmitReceive+0x130>
 8008f2a:	e080      	b.n	800902e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d002      	beq.n	8008f3a <HAL_SPI_TransmitReceive+0x204>
 8008f34:	8b7b      	ldrh	r3, [r7, #26]
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d16f      	bne.n	800901a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	330c      	adds	r3, #12
 8008f44:	7812      	ldrb	r2, [r2, #0]
 8008f46:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f4c:	1c5a      	adds	r2, r3, #1
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	3b01      	subs	r3, #1
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f60:	e05b      	b.n	800901a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	f003 0302 	and.w	r3, r3, #2
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	d11c      	bne.n	8008faa <HAL_SPI_TransmitReceive+0x274>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d017      	beq.n	8008faa <HAL_SPI_TransmitReceive+0x274>
 8008f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d114      	bne.n	8008faa <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	330c      	adds	r3, #12
 8008f8a:	7812      	ldrb	r2, [r2, #0]
 8008f8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f92:	1c5a      	adds	r2, r3, #1
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	f003 0301 	and.w	r3, r3, #1
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d119      	bne.n	8008fec <HAL_SPI_TransmitReceive+0x2b6>
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d014      	beq.n	8008fec <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	68da      	ldr	r2, [r3, #12]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fcc:	b2d2      	uxtb	r2, r2
 8008fce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fd4:	1c5a      	adds	r2, r3, #1
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008fec:	f7fb fb6e 	bl	80046cc <HAL_GetTick>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff4:	1ad3      	subs	r3, r2, r3
 8008ff6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d803      	bhi.n	8009004 <HAL_SPI_TransmitReceive+0x2ce>
 8008ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009002:	d102      	bne.n	800900a <HAL_SPI_TransmitReceive+0x2d4>
 8009004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009006:	2b00      	cmp	r3, #0
 8009008:	d107      	bne.n	800901a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800900a:	2303      	movs	r3, #3
 800900c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8009018:	e033      	b.n	8009082 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800901e:	b29b      	uxth	r3, r3
 8009020:	2b00      	cmp	r3, #0
 8009022:	d19e      	bne.n	8008f62 <HAL_SPI_TransmitReceive+0x22c>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009028:	b29b      	uxth	r3, r3
 800902a:	2b00      	cmp	r3, #0
 800902c:	d199      	bne.n	8008f62 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800902e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009030:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	f000 f8b8 	bl	80091a8 <SPI_EndRxTxTransaction>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d006      	beq.n	800904c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2220      	movs	r2, #32
 8009048:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800904a:	e01a      	b.n	8009082 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10a      	bne.n	800906a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009054:	2300      	movs	r3, #0
 8009056:	617b      	str	r3, [r7, #20]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	617b      	str	r3, [r7, #20]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	617b      	str	r3, [r7, #20]
 8009068:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800906e:	2b00      	cmp	r3, #0
 8009070:	d003      	beq.n	800907a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009078:	e003      	b.n	8009082 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2201      	movs	r2, #1
 800907e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2200      	movs	r2, #0
 8009086:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800908a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800908e:	4618      	mov	r0, r3
 8009090:	3730      	adds	r7, #48	@ 0x30
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
	...

08009098 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b088      	sub	sp, #32
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	603b      	str	r3, [r7, #0]
 80090a4:	4613      	mov	r3, r2
 80090a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80090a8:	f7fb fb10 	bl	80046cc <HAL_GetTick>
 80090ac:	4602      	mov	r2, r0
 80090ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090b0:	1a9b      	subs	r3, r3, r2
 80090b2:	683a      	ldr	r2, [r7, #0]
 80090b4:	4413      	add	r3, r2
 80090b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80090b8:	f7fb fb08 	bl	80046cc <HAL_GetTick>
 80090bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80090be:	4b39      	ldr	r3, [pc, #228]	@ (80091a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	015b      	lsls	r3, r3, #5
 80090c4:	0d1b      	lsrs	r3, r3, #20
 80090c6:	69fa      	ldr	r2, [r7, #28]
 80090c8:	fb02 f303 	mul.w	r3, r2, r3
 80090cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80090ce:	e054      	b.n	800917a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090d6:	d050      	beq.n	800917a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80090d8:	f7fb faf8 	bl	80046cc <HAL_GetTick>
 80090dc:	4602      	mov	r2, r0
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	1ad3      	subs	r3, r2, r3
 80090e2:	69fa      	ldr	r2, [r7, #28]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d902      	bls.n	80090ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d13d      	bne.n	800916a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	685a      	ldr	r2, [r3, #4]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80090fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009106:	d111      	bne.n	800912c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009110:	d004      	beq.n	800911c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800911a:	d107      	bne.n	800912c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800912a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009130:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009134:	d10f      	bne.n	8009156 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009144:	601a      	str	r2, [r3, #0]
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009154:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2201      	movs	r2, #1
 800915a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8009166:	2303      	movs	r3, #3
 8009168:	e017      	b.n	800919a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d101      	bne.n	8009174 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009170:	2300      	movs	r3, #0
 8009172:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	3b01      	subs	r3, #1
 8009178:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	689a      	ldr	r2, [r3, #8]
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	4013      	ands	r3, r2
 8009184:	68ba      	ldr	r2, [r7, #8]
 8009186:	429a      	cmp	r2, r3
 8009188:	bf0c      	ite	eq
 800918a:	2301      	moveq	r3, #1
 800918c:	2300      	movne	r3, #0
 800918e:	b2db      	uxtb	r3, r3
 8009190:	461a      	mov	r2, r3
 8009192:	79fb      	ldrb	r3, [r7, #7]
 8009194:	429a      	cmp	r2, r3
 8009196:	d19b      	bne.n	80090d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3720      	adds	r7, #32
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	200000e0 	.word	0x200000e0

080091a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b086      	sub	sp, #24
 80091ac:	af02      	add	r7, sp, #8
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	9300      	str	r3, [sp, #0]
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	2200      	movs	r2, #0
 80091bc:	2180      	movs	r1, #128	@ 0x80
 80091be:	68f8      	ldr	r0, [r7, #12]
 80091c0:	f7ff ff6a 	bl	8009098 <SPI_WaitFlagStateUntilTimeout>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d007      	beq.n	80091da <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091ce:	f043 0220 	orr.w	r2, r3, #32
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	e000      	b.n	80091dc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80091da:	2300      	movs	r3, #0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d101      	bne.n	80091f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e041      	b.n	800927a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d106      	bne.n	8009210 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f839 	bl	8009282 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2202      	movs	r2, #2
 8009214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	3304      	adds	r3, #4
 8009220:	4619      	mov	r1, r3
 8009222:	4610      	mov	r0, r2
 8009224:	f000 f9c2 	bl	80095ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3708      	adds	r7, #8
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009282:	b480      	push	{r7}
 8009284:	b083      	sub	sp, #12
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800928a:	bf00      	nop
 800928c:	370c      	adds	r7, #12
 800928e:	46bd      	mov	sp, r7
 8009290:	bc80      	pop	{r7}
 8009292:	4770      	bx	lr

08009294 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d001      	beq.n	80092ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	e044      	b.n	8009336 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2202      	movs	r2, #2
 80092b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68da      	ldr	r2, [r3, #12]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f042 0201 	orr.w	r2, r2, #1
 80092c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a1d      	ldr	r2, [pc, #116]	@ (8009340 <HAL_TIM_Base_Start_IT+0xac>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d018      	beq.n	8009300 <HAL_TIM_Base_Start_IT+0x6c>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a1c      	ldr	r2, [pc, #112]	@ (8009344 <HAL_TIM_Base_Start_IT+0xb0>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d013      	beq.n	8009300 <HAL_TIM_Base_Start_IT+0x6c>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092e0:	d00e      	beq.n	8009300 <HAL_TIM_Base_Start_IT+0x6c>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a18      	ldr	r2, [pc, #96]	@ (8009348 <HAL_TIM_Base_Start_IT+0xb4>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d009      	beq.n	8009300 <HAL_TIM_Base_Start_IT+0x6c>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a16      	ldr	r2, [pc, #88]	@ (800934c <HAL_TIM_Base_Start_IT+0xb8>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d004      	beq.n	8009300 <HAL_TIM_Base_Start_IT+0x6c>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a15      	ldr	r2, [pc, #84]	@ (8009350 <HAL_TIM_Base_Start_IT+0xbc>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d111      	bne.n	8009324 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	f003 0307 	and.w	r3, r3, #7
 800930a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2b06      	cmp	r3, #6
 8009310:	d010      	beq.n	8009334 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f042 0201 	orr.w	r2, r2, #1
 8009320:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009322:	e007      	b.n	8009334 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f042 0201 	orr.w	r2, r2, #1
 8009332:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3714      	adds	r7, #20
 800933a:	46bd      	mov	sp, r7
 800933c:	bc80      	pop	{r7}
 800933e:	4770      	bx	lr
 8009340:	40012c00 	.word	0x40012c00
 8009344:	40013400 	.word	0x40013400
 8009348:	40000400 	.word	0x40000400
 800934c:	40000800 	.word	0x40000800
 8009350:	40000c00 	.word	0x40000c00

08009354 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	f003 0302 	and.w	r3, r3, #2
 8009366:	2b02      	cmp	r3, #2
 8009368:	d122      	bne.n	80093b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	f003 0302 	and.w	r3, r3, #2
 8009374:	2b02      	cmp	r3, #2
 8009376:	d11b      	bne.n	80093b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f06f 0202 	mvn.w	r2, #2
 8009380:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2201      	movs	r2, #1
 8009386:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	f003 0303 	and.w	r3, r3, #3
 8009392:	2b00      	cmp	r3, #0
 8009394:	d003      	beq.n	800939e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f8ed 	bl	8009576 <HAL_TIM_IC_CaptureCallback>
 800939c:	e005      	b.n	80093aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f8e0 	bl	8009564 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f8ef 	bl	8009588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	f003 0304 	and.w	r3, r3, #4
 80093ba:	2b04      	cmp	r3, #4
 80093bc:	d122      	bne.n	8009404 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	f003 0304 	and.w	r3, r3, #4
 80093c8:	2b04      	cmp	r3, #4
 80093ca:	d11b      	bne.n	8009404 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f06f 0204 	mvn.w	r2, #4
 80093d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2202      	movs	r2, #2
 80093da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	699b      	ldr	r3, [r3, #24]
 80093e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d003      	beq.n	80093f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f8c3 	bl	8009576 <HAL_TIM_IC_CaptureCallback>
 80093f0:	e005      	b.n	80093fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 f8b6 	bl	8009564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 f8c5 	bl	8009588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	f003 0308 	and.w	r3, r3, #8
 800940e:	2b08      	cmp	r3, #8
 8009410:	d122      	bne.n	8009458 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	f003 0308 	and.w	r3, r3, #8
 800941c:	2b08      	cmp	r3, #8
 800941e:	d11b      	bne.n	8009458 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f06f 0208 	mvn.w	r2, #8
 8009428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2204      	movs	r2, #4
 800942e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	69db      	ldr	r3, [r3, #28]
 8009436:	f003 0303 	and.w	r3, r3, #3
 800943a:	2b00      	cmp	r3, #0
 800943c:	d003      	beq.n	8009446 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 f899 	bl	8009576 <HAL_TIM_IC_CaptureCallback>
 8009444:	e005      	b.n	8009452 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 f88c 	bl	8009564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 f89b 	bl	8009588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	f003 0310 	and.w	r3, r3, #16
 8009462:	2b10      	cmp	r3, #16
 8009464:	d122      	bne.n	80094ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	f003 0310 	and.w	r3, r3, #16
 8009470:	2b10      	cmp	r3, #16
 8009472:	d11b      	bne.n	80094ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f06f 0210 	mvn.w	r2, #16
 800947c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2208      	movs	r2, #8
 8009482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	69db      	ldr	r3, [r3, #28]
 800948a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800948e:	2b00      	cmp	r3, #0
 8009490:	d003      	beq.n	800949a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 f86f 	bl	8009576 <HAL_TIM_IC_CaptureCallback>
 8009498:	e005      	b.n	80094a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f862 	bl	8009564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 f871 	bl	8009588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	f003 0301 	and.w	r3, r3, #1
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d10e      	bne.n	80094d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	f003 0301 	and.w	r3, r3, #1
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d107      	bne.n	80094d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f06f 0201 	mvn.w	r2, #1
 80094d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f7f9 fe34 	bl	8003140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094e2:	2b80      	cmp	r3, #128	@ 0x80
 80094e4:	d10e      	bne.n	8009504 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094f0:	2b80      	cmp	r3, #128	@ 0x80
 80094f2:	d107      	bne.n	8009504 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80094fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 f8d7 	bl	80096b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800950e:	2b40      	cmp	r3, #64	@ 0x40
 8009510:	d10e      	bne.n	8009530 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800951c:	2b40      	cmp	r3, #64	@ 0x40
 800951e:	d107      	bne.n	8009530 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 f835 	bl	800959a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	f003 0320 	and.w	r3, r3, #32
 800953a:	2b20      	cmp	r3, #32
 800953c:	d10e      	bne.n	800955c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	f003 0320 	and.w	r3, r3, #32
 8009548:	2b20      	cmp	r3, #32
 800954a:	d107      	bne.n	800955c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f06f 0220 	mvn.w	r2, #32
 8009554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f8a2 	bl	80096a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800955c:	bf00      	nop
 800955e:	3708      	adds	r7, #8
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800956c:	bf00      	nop
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	bc80      	pop	{r7}
 8009574:	4770      	bx	lr

08009576 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009576:	b480      	push	{r7}
 8009578:	b083      	sub	sp, #12
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800957e:	bf00      	nop
 8009580:	370c      	adds	r7, #12
 8009582:	46bd      	mov	sp, r7
 8009584:	bc80      	pop	{r7}
 8009586:	4770      	bx	lr

08009588 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009590:	bf00      	nop
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	bc80      	pop	{r7}
 8009598:	4770      	bx	lr

0800959a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800959a:	b480      	push	{r7}
 800959c:	b083      	sub	sp, #12
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80095a2:	bf00      	nop
 80095a4:	370c      	adds	r7, #12
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bc80      	pop	{r7}
 80095aa:	4770      	bx	lr

080095ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a33      	ldr	r2, [pc, #204]	@ (800968c <TIM_Base_SetConfig+0xe0>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d013      	beq.n	80095ec <TIM_Base_SetConfig+0x40>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4a32      	ldr	r2, [pc, #200]	@ (8009690 <TIM_Base_SetConfig+0xe4>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d00f      	beq.n	80095ec <TIM_Base_SetConfig+0x40>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095d2:	d00b      	beq.n	80095ec <TIM_Base_SetConfig+0x40>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4a2f      	ldr	r2, [pc, #188]	@ (8009694 <TIM_Base_SetConfig+0xe8>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d007      	beq.n	80095ec <TIM_Base_SetConfig+0x40>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a2e      	ldr	r2, [pc, #184]	@ (8009698 <TIM_Base_SetConfig+0xec>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d003      	beq.n	80095ec <TIM_Base_SetConfig+0x40>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	4a2d      	ldr	r2, [pc, #180]	@ (800969c <TIM_Base_SetConfig+0xf0>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d108      	bne.n	80095fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	68fa      	ldr	r2, [r7, #12]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a22      	ldr	r2, [pc, #136]	@ (800968c <TIM_Base_SetConfig+0xe0>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d013      	beq.n	800962e <TIM_Base_SetConfig+0x82>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4a21      	ldr	r2, [pc, #132]	@ (8009690 <TIM_Base_SetConfig+0xe4>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d00f      	beq.n	800962e <TIM_Base_SetConfig+0x82>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009614:	d00b      	beq.n	800962e <TIM_Base_SetConfig+0x82>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a1e      	ldr	r2, [pc, #120]	@ (8009694 <TIM_Base_SetConfig+0xe8>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d007      	beq.n	800962e <TIM_Base_SetConfig+0x82>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4a1d      	ldr	r2, [pc, #116]	@ (8009698 <TIM_Base_SetConfig+0xec>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d003      	beq.n	800962e <TIM_Base_SetConfig+0x82>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4a1c      	ldr	r2, [pc, #112]	@ (800969c <TIM_Base_SetConfig+0xf0>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d108      	bne.n	8009640 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	4313      	orrs	r3, r2
 800963e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	695b      	ldr	r3, [r3, #20]
 800964a:	4313      	orrs	r3, r2
 800964c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	68fa      	ldr	r2, [r7, #12]
 8009652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	689a      	ldr	r2, [r3, #8]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4a09      	ldr	r2, [pc, #36]	@ (800968c <TIM_Base_SetConfig+0xe0>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d003      	beq.n	8009674 <TIM_Base_SetConfig+0xc8>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a08      	ldr	r2, [pc, #32]	@ (8009690 <TIM_Base_SetConfig+0xe4>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d103      	bne.n	800967c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	691a      	ldr	r2, [r3, #16]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	615a      	str	r2, [r3, #20]
}
 8009682:	bf00      	nop
 8009684:	3714      	adds	r7, #20
 8009686:	46bd      	mov	sp, r7
 8009688:	bc80      	pop	{r7}
 800968a:	4770      	bx	lr
 800968c:	40012c00 	.word	0x40012c00
 8009690:	40013400 	.word	0x40013400
 8009694:	40000400 	.word	0x40000400
 8009698:	40000800 	.word	0x40000800
 800969c:	40000c00 	.word	0x40000c00

080096a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096a8:	bf00      	nop
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bc80      	pop	{r7}
 80096b0:	4770      	bx	lr

080096b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096b2:	b480      	push	{r7}
 80096b4:	b083      	sub	sp, #12
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096ba:	bf00      	nop
 80096bc:	370c      	adds	r7, #12
 80096be:	46bd      	mov	sp, r7
 80096c0:	bc80      	pop	{r7}
 80096c2:	4770      	bx	lr

080096c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d101      	bne.n	80096d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	e042      	b.n	800975c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d106      	bne.n	80096f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f7fa ff0a 	bl	8004504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2224      	movs	r2, #36	@ 0x24
 80096f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	68da      	ldr	r2, [r3, #12]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009706:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 f91d 	bl	8009948 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	691a      	ldr	r2, [r3, #16]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800971c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	695a      	ldr	r2, [r3, #20]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800972c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	68da      	ldr	r2, [r3, #12]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800973c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2220      	movs	r2, #32
 8009748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2220      	movs	r2, #32
 8009750:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2200      	movs	r2, #0
 8009758:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800975a:	2300      	movs	r3, #0
}
 800975c:	4618      	mov	r0, r3
 800975e:	3708      	adds	r7, #8
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b08a      	sub	sp, #40	@ 0x28
 8009768:	af02      	add	r7, sp, #8
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	603b      	str	r3, [r7, #0]
 8009770:	4613      	mov	r3, r2
 8009772:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009774:	2300      	movs	r3, #0
 8009776:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800977e:	b2db      	uxtb	r3, r3
 8009780:	2b20      	cmp	r3, #32
 8009782:	d16d      	bne.n	8009860 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d002      	beq.n	8009790 <HAL_UART_Transmit+0x2c>
 800978a:	88fb      	ldrh	r3, [r7, #6]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d101      	bne.n	8009794 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	e066      	b.n	8009862 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2200      	movs	r2, #0
 8009798:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2221      	movs	r2, #33	@ 0x21
 800979e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80097a2:	f7fa ff93 	bl	80046cc <HAL_GetTick>
 80097a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	88fa      	ldrh	r2, [r7, #6]
 80097ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	88fa      	ldrh	r2, [r7, #6]
 80097b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097bc:	d108      	bne.n	80097d0 <HAL_UART_Transmit+0x6c>
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d104      	bne.n	80097d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80097c6:	2300      	movs	r3, #0
 80097c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	61bb      	str	r3, [r7, #24]
 80097ce:	e003      	b.n	80097d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097d4:	2300      	movs	r3, #0
 80097d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80097d8:	e02a      	b.n	8009830 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	9300      	str	r3, [sp, #0]
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	2200      	movs	r2, #0
 80097e2:	2180      	movs	r1, #128	@ 0x80
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f000 f840 	bl	800986a <UART_WaitOnFlagUntilTimeout>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d001      	beq.n	80097f4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80097f0:	2303      	movs	r3, #3
 80097f2:	e036      	b.n	8009862 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d10b      	bne.n	8009812 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	881b      	ldrh	r3, [r3, #0]
 80097fe:	461a      	mov	r2, r3
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009808:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800980a:	69bb      	ldr	r3, [r7, #24]
 800980c:	3302      	adds	r3, #2
 800980e:	61bb      	str	r3, [r7, #24]
 8009810:	e007      	b.n	8009822 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009812:	69fb      	ldr	r3, [r7, #28]
 8009814:	781a      	ldrb	r2, [r3, #0]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	3301      	adds	r3, #1
 8009820:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009826:	b29b      	uxth	r3, r3
 8009828:	3b01      	subs	r3, #1
 800982a:	b29a      	uxth	r2, r3
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009834:	b29b      	uxth	r3, r3
 8009836:	2b00      	cmp	r3, #0
 8009838:	d1cf      	bne.n	80097da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	9300      	str	r3, [sp, #0]
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	2200      	movs	r2, #0
 8009842:	2140      	movs	r1, #64	@ 0x40
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f000 f810 	bl	800986a <UART_WaitOnFlagUntilTimeout>
 800984a:	4603      	mov	r3, r0
 800984c:	2b00      	cmp	r3, #0
 800984e:	d001      	beq.n	8009854 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8009850:	2303      	movs	r3, #3
 8009852:	e006      	b.n	8009862 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2220      	movs	r2, #32
 8009858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800985c:	2300      	movs	r3, #0
 800985e:	e000      	b.n	8009862 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009860:	2302      	movs	r3, #2
  }
}
 8009862:	4618      	mov	r0, r3
 8009864:	3720      	adds	r7, #32
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b090      	sub	sp, #64	@ 0x40
 800986e:	af00      	add	r7, sp, #0
 8009870:	60f8      	str	r0, [r7, #12]
 8009872:	60b9      	str	r1, [r7, #8]
 8009874:	603b      	str	r3, [r7, #0]
 8009876:	4613      	mov	r3, r2
 8009878:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800987a:	e050      	b.n	800991e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800987c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800987e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009882:	d04c      	beq.n	800991e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009884:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009886:	2b00      	cmp	r3, #0
 8009888:	d007      	beq.n	800989a <UART_WaitOnFlagUntilTimeout+0x30>
 800988a:	f7fa ff1f 	bl	80046cc <HAL_GetTick>
 800988e:	4602      	mov	r2, r0
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	1ad3      	subs	r3, r2, r3
 8009894:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009896:	429a      	cmp	r2, r3
 8009898:	d241      	bcs.n	800991e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	330c      	adds	r3, #12
 80098a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a4:	e853 3f00 	ldrex	r3, [r3]
 80098a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ac:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80098b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	330c      	adds	r3, #12
 80098b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80098ba:	637a      	str	r2, [r7, #52]	@ 0x34
 80098bc:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80098c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80098c2:	e841 2300 	strex	r3, r2, [r1]
 80098c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80098c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1e5      	bne.n	800989a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	3314      	adds	r3, #20
 80098d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	e853 3f00 	ldrex	r3, [r3]
 80098dc:	613b      	str	r3, [r7, #16]
   return(result);
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	f023 0301 	bic.w	r3, r3, #1
 80098e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	3314      	adds	r3, #20
 80098ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80098ee:	623a      	str	r2, [r7, #32]
 80098f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f2:	69f9      	ldr	r1, [r7, #28]
 80098f4:	6a3a      	ldr	r2, [r7, #32]
 80098f6:	e841 2300 	strex	r3, r2, [r1]
 80098fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d1e5      	bne.n	80098ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2220      	movs	r2, #32
 8009906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2220      	movs	r2, #32
 800990e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800991a:	2303      	movs	r3, #3
 800991c:	e00f      	b.n	800993e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	4013      	ands	r3, r2
 8009928:	68ba      	ldr	r2, [r7, #8]
 800992a:	429a      	cmp	r2, r3
 800992c:	bf0c      	ite	eq
 800992e:	2301      	moveq	r3, #1
 8009930:	2300      	movne	r3, #0
 8009932:	b2db      	uxtb	r3, r3
 8009934:	461a      	mov	r2, r3
 8009936:	79fb      	ldrb	r3, [r7, #7]
 8009938:	429a      	cmp	r2, r3
 800993a:	d09f      	beq.n	800987c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800993c:	2300      	movs	r3, #0
}
 800993e:	4618      	mov	r0, r3
 8009940:	3740      	adds	r7, #64	@ 0x40
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
	...

08009948 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	691b      	ldr	r3, [r3, #16]
 8009956:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	68da      	ldr	r2, [r3, #12]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	430a      	orrs	r2, r1
 8009964:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	689a      	ldr	r2, [r3, #8]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	431a      	orrs	r2, r3
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	695b      	ldr	r3, [r3, #20]
 8009974:	4313      	orrs	r3, r2
 8009976:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8009982:	f023 030c 	bic.w	r3, r3, #12
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	6812      	ldr	r2, [r2, #0]
 800998a:	68b9      	ldr	r1, [r7, #8]
 800998c:	430b      	orrs	r3, r1
 800998e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	695b      	ldr	r3, [r3, #20]
 8009996:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	699a      	ldr	r2, [r3, #24]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	430a      	orrs	r2, r1
 80099a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a2c      	ldr	r2, [pc, #176]	@ (8009a5c <UART_SetConfig+0x114>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d103      	bne.n	80099b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80099b0:	f7fe f862 	bl	8007a78 <HAL_RCC_GetPCLK2Freq>
 80099b4:	60f8      	str	r0, [r7, #12]
 80099b6:	e002      	b.n	80099be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80099b8:	f7fe f84a 	bl	8007a50 <HAL_RCC_GetPCLK1Freq>
 80099bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	4613      	mov	r3, r2
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	4413      	add	r3, r2
 80099c6:	009a      	lsls	r2, r3, #2
 80099c8:	441a      	add	r2, r3
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80099d4:	4a22      	ldr	r2, [pc, #136]	@ (8009a60 <UART_SetConfig+0x118>)
 80099d6:	fba2 2303 	umull	r2, r3, r2, r3
 80099da:	095b      	lsrs	r3, r3, #5
 80099dc:	0119      	lsls	r1, r3, #4
 80099de:	68fa      	ldr	r2, [r7, #12]
 80099e0:	4613      	mov	r3, r2
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	4413      	add	r3, r2
 80099e6:	009a      	lsls	r2, r3, #2
 80099e8:	441a      	add	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80099f4:	4b1a      	ldr	r3, [pc, #104]	@ (8009a60 <UART_SetConfig+0x118>)
 80099f6:	fba3 0302 	umull	r0, r3, r3, r2
 80099fa:	095b      	lsrs	r3, r3, #5
 80099fc:	2064      	movs	r0, #100	@ 0x64
 80099fe:	fb00 f303 	mul.w	r3, r0, r3
 8009a02:	1ad3      	subs	r3, r2, r3
 8009a04:	011b      	lsls	r3, r3, #4
 8009a06:	3332      	adds	r3, #50	@ 0x32
 8009a08:	4a15      	ldr	r2, [pc, #84]	@ (8009a60 <UART_SetConfig+0x118>)
 8009a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a0e:	095b      	lsrs	r3, r3, #5
 8009a10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009a14:	4419      	add	r1, r3
 8009a16:	68fa      	ldr	r2, [r7, #12]
 8009a18:	4613      	mov	r3, r2
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	4413      	add	r3, r2
 8009a1e:	009a      	lsls	r2, r3, #2
 8009a20:	441a      	add	r2, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	fbb2 f2f3 	udiv	r2, r2, r3
 8009a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8009a60 <UART_SetConfig+0x118>)
 8009a2e:	fba3 0302 	umull	r0, r3, r3, r2
 8009a32:	095b      	lsrs	r3, r3, #5
 8009a34:	2064      	movs	r0, #100	@ 0x64
 8009a36:	fb00 f303 	mul.w	r3, r0, r3
 8009a3a:	1ad3      	subs	r3, r2, r3
 8009a3c:	011b      	lsls	r3, r3, #4
 8009a3e:	3332      	adds	r3, #50	@ 0x32
 8009a40:	4a07      	ldr	r2, [pc, #28]	@ (8009a60 <UART_SetConfig+0x118>)
 8009a42:	fba2 2303 	umull	r2, r3, r2, r3
 8009a46:	095b      	lsrs	r3, r3, #5
 8009a48:	f003 020f 	and.w	r2, r3, #15
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	440a      	add	r2, r1
 8009a52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009a54:	bf00      	nop
 8009a56:	3710      	adds	r7, #16
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	40013800 	.word	0x40013800
 8009a60:	51eb851f 	.word	0x51eb851f

08009a64 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009a68:	4904      	ldr	r1, [pc, #16]	@ (8009a7c <MX_FATFS_Init+0x18>)
 8009a6a:	4805      	ldr	r0, [pc, #20]	@ (8009a80 <MX_FATFS_Init+0x1c>)
 8009a6c:	f000 f8b0 	bl	8009bd0 <FATFS_LinkDriver>
 8009a70:	4603      	mov	r3, r0
 8009a72:	461a      	mov	r2, r3
 8009a74:	4b03      	ldr	r3, [pc, #12]	@ (8009a84 <MX_FATFS_Init+0x20>)
 8009a76:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009a78:	bf00      	nop
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	200008c4 	.word	0x200008c4
 8009a80:	200000ec 	.word	0x200000ec
 8009a84:	200008c0 	.word	0x200008c0

08009a88 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	4603      	mov	r3, r0
 8009a90:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
      return SD_disk_initialize(pdrv);
 8009a92:	79fb      	ldrb	r3, [r7, #7]
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7f7 ff45 	bl	8001924 <SD_disk_initialize>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3708      	adds	r7, #8
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b082      	sub	sp, #8
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	4603      	mov	r3, r0
 8009aae:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
      return SD_disk_status(pdrv);
 8009ab0:	79fb      	ldrb	r3, [r7, #7]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7f8 f81c 	bl	8001af0 <SD_disk_status>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3708      	adds	r7, #8
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60b9      	str	r1, [r7, #8]
 8009acc:	607a      	str	r2, [r7, #4]
 8009ace:	603b      	str	r3, [r7, #0]
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
    return SD_disk_read(pdrv, buff, sector, count);
 8009ad4:	7bf8      	ldrb	r0, [r7, #15]
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	68b9      	ldr	r1, [r7, #8]
 8009adc:	f7f8 f81c 	bl	8001b18 <SD_disk_read>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60b9      	str	r1, [r7, #8]
 8009af4:	607a      	str	r2, [r7, #4]
 8009af6:	603b      	str	r3, [r7, #0]
 8009af8:	4603      	mov	r3, r0
 8009afa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
      return SD_disk_write(pdrv, buff, sector, count);
 8009afc:	7bf8      	ldrb	r0, [r7, #15]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	68b9      	ldr	r1, [r7, #8]
 8009b04:	f7f8 f872 	bl	8001bec <SD_disk_write>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3710      	adds	r7, #16
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	603a      	str	r2, [r7, #0]
 8009b1e:	71fb      	strb	r3, [r7, #7]
 8009b20:	460b      	mov	r3, r1
 8009b22:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
  return SD_disk_ioctl(pdrv, cmd, buff);
 8009b24:	79fb      	ldrb	r3, [r7, #7]
 8009b26:	79b9      	ldrb	r1, [r7, #6]
 8009b28:	683a      	ldr	r2, [r7, #0]
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7f8 f8e2 	bl	8001cf4 <SD_disk_ioctl>
 8009b30:	4603      	mov	r3, r0
 8009b32:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3708      	adds	r7, #8
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b087      	sub	sp, #28
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	60b9      	str	r1, [r7, #8]
 8009b46:	4613      	mov	r3, r2
 8009b48:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8009b52:	4b1e      	ldr	r3, [pc, #120]	@ (8009bcc <FATFS_LinkDriverEx+0x90>)
 8009b54:	7a5b      	ldrb	r3, [r3, #9]
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d831      	bhi.n	8009bc0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8009bcc <FATFS_LinkDriverEx+0x90>)
 8009b5e:	7a5b      	ldrb	r3, [r3, #9]
 8009b60:	b2db      	uxtb	r3, r3
 8009b62:	461a      	mov	r2, r3
 8009b64:	4b19      	ldr	r3, [pc, #100]	@ (8009bcc <FATFS_LinkDriverEx+0x90>)
 8009b66:	2100      	movs	r1, #0
 8009b68:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8009b6a:	4b18      	ldr	r3, [pc, #96]	@ (8009bcc <FATFS_LinkDriverEx+0x90>)
 8009b6c:	7a5b      	ldrb	r3, [r3, #9]
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	4a16      	ldr	r2, [pc, #88]	@ (8009bcc <FATFS_LinkDriverEx+0x90>)
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	4413      	add	r3, r2
 8009b76:	68fa      	ldr	r2, [r7, #12]
 8009b78:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8009b7a:	4b14      	ldr	r3, [pc, #80]	@ (8009bcc <FATFS_LinkDriverEx+0x90>)
 8009b7c:	7a5b      	ldrb	r3, [r3, #9]
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	461a      	mov	r2, r3
 8009b82:	4b12      	ldr	r3, [pc, #72]	@ (8009bcc <FATFS_LinkDriverEx+0x90>)
 8009b84:	4413      	add	r3, r2
 8009b86:	79fa      	ldrb	r2, [r7, #7]
 8009b88:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009b8a:	4b10      	ldr	r3, [pc, #64]	@ (8009bcc <FATFS_LinkDriverEx+0x90>)
 8009b8c:	7a5b      	ldrb	r3, [r3, #9]
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	1c5a      	adds	r2, r3, #1
 8009b92:	b2d1      	uxtb	r1, r2
 8009b94:	4a0d      	ldr	r2, [pc, #52]	@ (8009bcc <FATFS_LinkDriverEx+0x90>)
 8009b96:	7251      	strb	r1, [r2, #9]
 8009b98:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009b9a:	7dbb      	ldrb	r3, [r7, #22]
 8009b9c:	3330      	adds	r3, #48	@ 0x30
 8009b9e:	b2da      	uxtb	r2, r3
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	223a      	movs	r2, #58	@ 0x3a
 8009baa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	3302      	adds	r3, #2
 8009bb0:	222f      	movs	r2, #47	@ 0x2f
 8009bb2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	3303      	adds	r3, #3
 8009bb8:	2200      	movs	r2, #0
 8009bba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8009bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	371c      	adds	r7, #28
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bc80      	pop	{r7}
 8009bca:	4770      	bx	lr
 8009bcc:	200008c8 	.word	0x200008c8

08009bd0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009bda:	2200      	movs	r2, #0
 8009bdc:	6839      	ldr	r1, [r7, #0]
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7ff ffac 	bl	8009b3c <FATFS_LinkDriverEx>
 8009be4:	4603      	mov	r3, r0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009bee:	b480      	push	{r7}
 8009bf0:	b085      	sub	sp, #20
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009bfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c00:	2b84      	cmp	r3, #132	@ 0x84
 8009c02:	d005      	beq.n	8009c10 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009c04:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	3303      	adds	r3, #3
 8009c0e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009c10:	68fb      	ldr	r3, [r7, #12]
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3714      	adds	r7, #20
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bc80      	pop	{r7}
 8009c1a:	4770      	bx	lr

08009c1c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c22:	f3ef 8305 	mrs	r3, IPSR
 8009c26:	607b      	str	r3, [r7, #4]
  return(result);
 8009c28:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	bf14      	ite	ne
 8009c2e:	2301      	movne	r3, #1
 8009c30:	2300      	moveq	r3, #0
 8009c32:	b2db      	uxtb	r3, r3
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bc80      	pop	{r7}
 8009c3c:	4770      	bx	lr

08009c3e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009c42:	f001 faad 	bl	800b1a0 <vTaskStartScheduler>
  
  return osOK;
 8009c46:	2300      	movs	r3, #0
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c4e:	b089      	sub	sp, #36	@ 0x24
 8009c50:	af04      	add	r7, sp, #16
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	695b      	ldr	r3, [r3, #20]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d020      	beq.n	8009ca0 <osThreadCreate+0x54>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	699b      	ldr	r3, [r3, #24]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d01c      	beq.n	8009ca0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	685c      	ldr	r4, [r3, #4]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	691e      	ldr	r6, [r3, #16]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7ff ffb8 	bl	8009bee <makeFreeRtosPriority>
 8009c7e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	695b      	ldr	r3, [r3, #20]
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c88:	9202      	str	r2, [sp, #8]
 8009c8a:	9301      	str	r3, [sp, #4]
 8009c8c:	9100      	str	r1, [sp, #0]
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	4632      	mov	r2, r6
 8009c92:	4629      	mov	r1, r5
 8009c94:	4620      	mov	r0, r4
 8009c96:	f001 f8a7 	bl	800ade8 <xTaskCreateStatic>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	60fb      	str	r3, [r7, #12]
 8009c9e:	e01c      	b.n	8009cda <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	685c      	ldr	r4, [r3, #4]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009cac:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7ff ff9a 	bl	8009bee <makeFreeRtosPriority>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	f107 030c 	add.w	r3, r7, #12
 8009cc0:	9301      	str	r3, [sp, #4]
 8009cc2:	9200      	str	r2, [sp, #0]
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	4632      	mov	r2, r6
 8009cc8:	4629      	mov	r1, r5
 8009cca:	4620      	mov	r0, r4
 8009ccc:	f001 f8eb 	bl	800aea6 <xTaskCreate>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d001      	beq.n	8009cda <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	e000      	b.n	8009cdc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009cda:	68fb      	ldr	r3, [r7, #12]
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3714      	adds	r7, #20
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ce4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d001      	beq.n	8009cfa <osDelay+0x16>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	e000      	b.n	8009cfc <osDelay+0x18>
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f001 fa19 	bl	800b134 <vTaskDelay>
  
  return osOK;
 8009d02:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3710      	adds	r7, #16
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b086      	sub	sp, #24
 8009d10:	af02      	add	r7, sp, #8
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009d16:	2300      	movs	r3, #0
 8009d18:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8009d1e:	f7ff ff7d 	bl	8009c1c <inHandlerMode>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d01c      	beq.n	8009d62 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8009d28:	6839      	ldr	r1, [r7, #0]
 8009d2a:	f107 0208 	add.w	r2, r7, #8
 8009d2e:	f107 030c 	add.w	r3, r7, #12
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	4613      	mov	r3, r2
 8009d36:	2201      	movs	r2, #1
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f002 f809 	bl	800bd50 <xTaskGenericNotifyFromISR>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d002      	beq.n	8009d4a <osSignalSet+0x3e>
      return 0x80000000;
 8009d44:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009d48:	e019      	b.n	8009d7e <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d015      	beq.n	8009d7c <osSignalSet+0x70>
 8009d50:	4b0d      	ldr	r3, [pc, #52]	@ (8009d88 <osSignalSet+0x7c>)
 8009d52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d56:	601a      	str	r2, [r3, #0]
 8009d58:	f3bf 8f4f 	dsb	sy
 8009d5c:	f3bf 8f6f 	isb	sy
 8009d60:	e00c      	b.n	8009d7c <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8009d62:	6839      	ldr	r1, [r7, #0]
 8009d64:	f107 0308 	add.w	r3, r7, #8
 8009d68:	2201      	movs	r2, #1
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f001 ff44 	bl	800bbf8 <xTaskGenericNotify>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d002      	beq.n	8009d7c <osSignalSet+0x70>
    return 0x80000000;
 8009d76:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009d7a:	e000      	b.n	8009d7e <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8009d7c:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	e000ed04 	.word	0xe000ed04

08009d8c <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8009d8c:	b590      	push	{r4, r7, lr}
 8009d8e:	b089      	sub	sp, #36	@ 0x24
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8009d98:	2300      	movs	r3, #0
 8009d9a:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009da6:	d103      	bne.n	8009db0 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8009da8:	f04f 33ff 	mov.w	r3, #4294967295
 8009dac:	61fb      	str	r3, [r7, #28]
 8009dae:	e009      	b.n	8009dc4 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d006      	beq.n	8009dc4 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8009dba:	69fb      	ldr	r3, [r7, #28]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d101      	bne.n	8009dc4 <osSignalWait+0x38>
      ticks = 1;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8009dc4:	f7ff ff2a 	bl	8009c1c <inHandlerMode>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d002      	beq.n	8009dd4 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8009dce:	2382      	movs	r3, #130	@ 0x82
 8009dd0:	613b      	str	r3, [r7, #16]
 8009dd2:	e01b      	b.n	8009e0c <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8009dd4:	68b9      	ldr	r1, [r7, #8]
 8009dd6:	f107 0310 	add.w	r3, r7, #16
 8009dda:	1d1a      	adds	r2, r3, #4
 8009ddc:	69fb      	ldr	r3, [r7, #28]
 8009dde:	2000      	movs	r0, #0
 8009de0:	f001 feaa 	bl	800bb38 <xTaskNotifyWait>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d008      	beq.n	8009dfc <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8009dea:	69fb      	ldr	r3, [r7, #28]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d102      	bne.n	8009df6 <osSignalWait+0x6a>
 8009df0:	2300      	movs	r3, #0
 8009df2:	613b      	str	r3, [r7, #16]
 8009df4:	e00a      	b.n	8009e0c <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8009df6:	2340      	movs	r3, #64	@ 0x40
 8009df8:	613b      	str	r3, [r7, #16]
 8009dfa:	e007      	b.n	8009e0c <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	da02      	bge.n	8009e08 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8009e02:	2386      	movs	r3, #134	@ 0x86
 8009e04:	613b      	str	r3, [r7, #16]
 8009e06:	e001      	b.n	8009e0c <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8009e08:	2308      	movs	r3, #8
 8009e0a:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	461c      	mov	r4, r3
 8009e10:	f107 0310 	add.w	r3, r7, #16
 8009e14:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009e18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	3724      	adds	r7, #36	@ 0x24
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd90      	pop	{r4, r7, pc}

08009e24 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b086      	sub	sp, #24
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	3303      	adds	r3, #3
 8009e32:	f023 0303 	bic.w	r3, r3, #3
 8009e36:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8009e38:	2014      	movs	r0, #20
 8009e3a:	f002 fab1 	bl	800c3a0 <pvPortMalloc>
 8009e3e:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d046      	beq.n	8009ed4 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8009e4e:	68fa      	ldr	r2, [r7, #12]
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	2200      	movs	r2, #0
 8009e58:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f002 fa9e 	bl	800c3a0 <pvPortMalloc>
 8009e64:	4602      	mov	r2, r0
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d02b      	beq.n	8009eca <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	68fa      	ldr	r2, [r7, #12]
 8009e78:	fb02 f303 	mul.w	r3, r2, r3
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f002 fa8f 	bl	800c3a0 <pvPortMalloc>
 8009e82:	4602      	mov	r2, r0
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d011      	beq.n	8009eb4 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8009e90:	2300      	movs	r3, #0
 8009e92:	613b      	str	r3, [r7, #16]
 8009e94:	e008      	b.n	8009ea8 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	685a      	ldr	r2, [r3, #4]
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	4413      	add	r3, r2
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	613b      	str	r3, [r7, #16]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	693a      	ldr	r2, [r7, #16]
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d3f1      	bcc.n	8009e96 <osPoolCreate+0x72>
 8009eb2:	e00f      	b.n	8009ed4 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f002 fb39 	bl	800c530 <vPortFree>
        vPortFree(thePool);
 8009ebe:	6978      	ldr	r0, [r7, #20]
 8009ec0:	f002 fb36 	bl	800c530 <vPortFree>
        thePool = NULL;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	617b      	str	r3, [r7, #20]
 8009ec8:	e004      	b.n	8009ed4 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8009eca:	6978      	ldr	r0, [r7, #20]
 8009ecc:	f002 fb30 	bl	800c530 <vPortFree>
      thePool = NULL;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8009ed4:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3718      	adds	r7, #24
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b08a      	sub	sp, #40	@ 0x28
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  void *p = NULL;
 8009eea:	2300      	movs	r3, #0
 8009eec:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8009eee:	f7ff fe95 	bl	8009c1c <inHandlerMode>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d00e      	beq.n	8009f16 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009ef8:	f3ef 8211 	mrs	r2, BASEPRI
 8009efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f00:	f383 8811 	msr	BASEPRI, r3
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	617a      	str	r2, [r7, #20]
 8009f0e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009f10:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f12:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f14:	e001      	b.n	8009f1a <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8009f16:	f002 f941 	bl	800c19c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	61fb      	str	r3, [r7, #28]
 8009f1e:	e029      	b.n	8009f74 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	691a      	ldr	r2, [r3, #16]
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	4413      	add	r3, r2
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	6892      	ldr	r2, [r2, #8]
 8009f2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f30:	fb01 f202 	mul.w	r2, r1, r2
 8009f34:	1a9b      	subs	r3, r3, r2
 8009f36:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	685a      	ldr	r2, [r3, #4]
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	4413      	add	r3, r2
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d113      	bne.n	8009f6e <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	685a      	ldr	r2, [r3, #4]
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	2201      	movs	r2, #1
 8009f50:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4619      	mov	r1, r3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	69ba      	ldr	r2, [r7, #24]
 8009f5e:	fb02 f303 	mul.w	r3, r2, r3
 8009f62:	440b      	add	r3, r1
 8009f64:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	69ba      	ldr	r2, [r7, #24]
 8009f6a:	611a      	str	r2, [r3, #16]
      break;
 8009f6c:	e007      	b.n	8009f7e <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	3301      	adds	r3, #1
 8009f72:	61fb      	str	r3, [r7, #28]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	69fa      	ldr	r2, [r7, #28]
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d3d0      	bcc.n	8009f20 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8009f7e:	f7ff fe4d 	bl	8009c1c <inHandlerMode>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d005      	beq.n	8009f94 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8009f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f8a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009f92:	e001      	b.n	8009f98 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8009f94:	f002 f932 	bl	800c1fc <vPortExitCritical>
  }
  
  return p;
 8009f98:	6a3b      	ldr	r3, [r7, #32]
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3728      	adds	r7, #40	@ 0x28
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8009fa2:	b480      	push	{r7}
 8009fa4:	b085      	sub	sp, #20
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
 8009faa:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d101      	bne.n	8009fb6 <osPoolFree+0x14>
    return osErrorParameter;
 8009fb2:	2380      	movs	r3, #128	@ 0x80
 8009fb4:	e030      	b.n	800a018 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d101      	bne.n	8009fc0 <osPoolFree+0x1e>
    return osErrorParameter;
 8009fbc:	2380      	movs	r3, #128	@ 0x80
 8009fbe:	e02b      	b.n	800a018 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	683a      	ldr	r2, [r7, #0]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d201      	bcs.n	8009fce <osPoolFree+0x2c>
    return osErrorParameter;
 8009fca:	2380      	movs	r3, #128	@ 0x80
 8009fcc:	e024      	b.n	800a018 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	6812      	ldr	r2, [r2, #0]
 8009fd4:	1a9b      	subs	r3, r3, r2
 8009fd6:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	68da      	ldr	r2, [r3, #12]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	fbb3 f1f2 	udiv	r1, r3, r2
 8009fe2:	fb01 f202 	mul.w	r2, r1, r2
 8009fe6:	1a9b      	subs	r3, r3, r2
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d001      	beq.n	8009ff0 <osPoolFree+0x4e>
    return osErrorParameter;
 8009fec:	2380      	movs	r3, #128	@ 0x80
 8009fee:	e013      	b.n	800a018 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	68fa      	ldr	r2, [r7, #12]
 8009ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ffa:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	68fa      	ldr	r2, [r7, #12]
 800a002:	429a      	cmp	r2, r3
 800a004:	d301      	bcc.n	800a00a <osPoolFree+0x68>
    return osErrorParameter;
 800a006:	2380      	movs	r3, #128	@ 0x80
 800a008:	e006      	b.n	800a018 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	685a      	ldr	r2, [r3, #4]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	4413      	add	r3, r2
 800a012:	2200      	movs	r2, #0
 800a014:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800a016:	2300      	movs	r3, #0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3714      	adds	r7, #20
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bc80      	pop	{r7}
 800a020:	4770      	bx	lr

0800a022 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a022:	b590      	push	{r4, r7, lr}
 800a024:	b085      	sub	sp, #20
 800a026:	af02      	add	r7, sp, #8
 800a028:	6078      	str	r0, [r7, #4]
 800a02a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d011      	beq.n	800a058 <osMessageCreate+0x36>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d00d      	beq.n	800a058 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6818      	ldr	r0, [r3, #0]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6859      	ldr	r1, [r3, #4]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	689a      	ldr	r2, [r3, #8]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	2400      	movs	r4, #0
 800a04e:	9400      	str	r4, [sp, #0]
 800a050:	f000 f9de 	bl	800a410 <xQueueGenericCreateStatic>
 800a054:	4603      	mov	r3, r0
 800a056:	e008      	b.n	800a06a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6818      	ldr	r0, [r3, #0]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	4619      	mov	r1, r3
 800a064:	f000 fa50 	bl	800a508 <xQueueGenericCreate>
 800a068:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	370c      	adds	r7, #12
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd90      	pop	{r4, r7, pc}
	...

0800a074 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b086      	sub	sp, #24
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a080:	2300      	movs	r3, #0
 800a082:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d101      	bne.n	800a092 <osMessagePut+0x1e>
    ticks = 1;
 800a08e:	2301      	movs	r3, #1
 800a090:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a092:	f7ff fdc3 	bl	8009c1c <inHandlerMode>
 800a096:	4603      	mov	r3, r0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d018      	beq.n	800a0ce <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a09c:	f107 0210 	add.w	r2, r7, #16
 800a0a0:	f107 0108 	add.w	r1, r7, #8
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f000 fb8e 	bl	800a7c8 <xQueueGenericSendFromISR>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d001      	beq.n	800a0b6 <osMessagePut+0x42>
      return osErrorOS;
 800a0b2:	23ff      	movs	r3, #255	@ 0xff
 800a0b4:	e018      	b.n	800a0e8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d014      	beq.n	800a0e6 <osMessagePut+0x72>
 800a0bc:	4b0c      	ldr	r3, [pc, #48]	@ (800a0f0 <osMessagePut+0x7c>)
 800a0be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0c2:	601a      	str	r2, [r3, #0]
 800a0c4:	f3bf 8f4f 	dsb	sy
 800a0c8:	f3bf 8f6f 	isb	sy
 800a0cc:	e00b      	b.n	800a0e6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a0ce:	f107 0108 	add.w	r1, r7, #8
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	697a      	ldr	r2, [r7, #20]
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	f000 fa74 	bl	800a5c4 <xQueueGenericSend>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d001      	beq.n	800a0e6 <osMessagePut+0x72>
      return osErrorOS;
 800a0e2:	23ff      	movs	r3, #255	@ 0xff
 800a0e4:	e000      	b.n	800a0e8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a0e6:	2300      	movs	r3, #0
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3718      	adds	r7, #24
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}
 800a0f0:	e000ed04 	.word	0xe000ed04

0800a0f4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a0f4:	b590      	push	{r4, r7, lr}
 800a0f6:	b08b      	sub	sp, #44	@ 0x2c
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a104:	2300      	movs	r3, #0
 800a106:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d10a      	bne.n	800a124 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a10e:	2380      	movs	r3, #128	@ 0x80
 800a110:	617b      	str	r3, [r7, #20]
    return event;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	461c      	mov	r4, r3
 800a116:	f107 0314 	add.w	r3, r7, #20
 800a11a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a11e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a122:	e054      	b.n	800a1ce <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a124:	2300      	movs	r3, #0
 800a126:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a128:	2300      	movs	r3, #0
 800a12a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a132:	d103      	bne.n	800a13c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a134:	f04f 33ff 	mov.w	r3, #4294967295
 800a138:	627b      	str	r3, [r7, #36]	@ 0x24
 800a13a:	e009      	b.n	800a150 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d006      	beq.n	800a150 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800a146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d101      	bne.n	800a150 <osMessageGet+0x5c>
      ticks = 1;
 800a14c:	2301      	movs	r3, #1
 800a14e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a150:	f7ff fd64 	bl	8009c1c <inHandlerMode>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d01c      	beq.n	800a194 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a15a:	f107 0220 	add.w	r2, r7, #32
 800a15e:	f107 0314 	add.w	r3, r7, #20
 800a162:	3304      	adds	r3, #4
 800a164:	4619      	mov	r1, r3
 800a166:	68b8      	ldr	r0, [r7, #8]
 800a168:	f000 fcac 	bl	800aac4 <xQueueReceiveFromISR>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d102      	bne.n	800a178 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a172:	2310      	movs	r3, #16
 800a174:	617b      	str	r3, [r7, #20]
 800a176:	e001      	b.n	800a17c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a178:	2300      	movs	r3, #0
 800a17a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a17c:	6a3b      	ldr	r3, [r7, #32]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d01d      	beq.n	800a1be <osMessageGet+0xca>
 800a182:	4b15      	ldr	r3, [pc, #84]	@ (800a1d8 <osMessageGet+0xe4>)
 800a184:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a188:	601a      	str	r2, [r3, #0]
 800a18a:	f3bf 8f4f 	dsb	sy
 800a18e:	f3bf 8f6f 	isb	sy
 800a192:	e014      	b.n	800a1be <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a194:	f107 0314 	add.w	r3, r7, #20
 800a198:	3304      	adds	r3, #4
 800a19a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a19c:	4619      	mov	r1, r3
 800a19e:	68b8      	ldr	r0, [r7, #8]
 800a1a0:	f000 fbae 	bl	800a900 <xQueueReceive>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d102      	bne.n	800a1b0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a1aa:	2310      	movs	r3, #16
 800a1ac:	617b      	str	r3, [r7, #20]
 800a1ae:	e006      	b.n	800a1be <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d101      	bne.n	800a1ba <osMessageGet+0xc6>
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	e000      	b.n	800a1bc <osMessageGet+0xc8>
 800a1ba:	2340      	movs	r3, #64	@ 0x40
 800a1bc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	461c      	mov	r4, r3
 800a1c2:	f107 0314 	add.w	r3, r7, #20
 800a1c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a1ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	372c      	adds	r7, #44	@ 0x2c
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd90      	pop	{r4, r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	e000ed04 	.word	0xe000ed04

0800a1dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f103 0208 	add.w	r2, r3, #8
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f103 0208 	add.w	r2, r3, #8
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f103 0208 	add.w	r2, r3, #8
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a210:	bf00      	nop
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	bc80      	pop	{r7}
 800a218:	4770      	bx	lr

0800a21a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a21a:	b480      	push	{r7}
 800a21c:	b083      	sub	sp, #12
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2200      	movs	r2, #0
 800a226:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a228:	bf00      	nop
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bc80      	pop	{r7}
 800a230:	4770      	bx	lr

0800a232 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a232:	b480      	push	{r7}
 800a234:	b085      	sub	sp, #20
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
 800a23a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	689a      	ldr	r2, [r3, #8]
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	683a      	ldr	r2, [r7, #0]
 800a256:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	683a      	ldr	r2, [r7, #0]
 800a25c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	1c5a      	adds	r2, r3, #1
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	601a      	str	r2, [r3, #0]
}
 800a26e:	bf00      	nop
 800a270:	3714      	adds	r7, #20
 800a272:	46bd      	mov	sp, r7
 800a274:	bc80      	pop	{r7}
 800a276:	4770      	bx	lr

0800a278 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a278:	b480      	push	{r7}
 800a27a:	b085      	sub	sp, #20
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a28e:	d103      	bne.n	800a298 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	60fb      	str	r3, [r7, #12]
 800a296:	e00c      	b.n	800a2b2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	3308      	adds	r3, #8
 800a29c:	60fb      	str	r3, [r7, #12]
 800a29e:	e002      	b.n	800a2a6 <vListInsert+0x2e>
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	60fb      	str	r3, [r7, #12]
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	68ba      	ldr	r2, [r7, #8]
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d2f6      	bcs.n	800a2a0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	685a      	ldr	r2, [r3, #4]
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	683a      	ldr	r2, [r7, #0]
 800a2c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	68fa      	ldr	r2, [r7, #12]
 800a2c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	683a      	ldr	r2, [r7, #0]
 800a2cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	1c5a      	adds	r2, r3, #1
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	601a      	str	r2, [r3, #0]
}
 800a2de:	bf00      	nop
 800a2e0:	3714      	adds	r7, #20
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bc80      	pop	{r7}
 800a2e6:	4770      	bx	lr

0800a2e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b085      	sub	sp, #20
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	691b      	ldr	r3, [r3, #16]
 800a2f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	6892      	ldr	r2, [r2, #8]
 800a2fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	6852      	ldr	r2, [r2, #4]
 800a308:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	429a      	cmp	r2, r3
 800a312:	d103      	bne.n	800a31c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	689a      	ldr	r2, [r3, #8]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2200      	movs	r2, #0
 800a320:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	1e5a      	subs	r2, r3, #1
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
}
 800a330:	4618      	mov	r0, r3
 800a332:	3714      	adds	r7, #20
 800a334:	46bd      	mov	sp, r7
 800a336:	bc80      	pop	{r7}
 800a338:	4770      	bx	lr
	...

0800a33c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d10b      	bne.n	800a368 <xQueueGenericReset+0x2c>
	__asm volatile
 800a350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a354:	f383 8811 	msr	BASEPRI, r3
 800a358:	f3bf 8f6f 	isb	sy
 800a35c:	f3bf 8f4f 	dsb	sy
 800a360:	60bb      	str	r3, [r7, #8]
}
 800a362:	bf00      	nop
 800a364:	bf00      	nop
 800a366:	e7fd      	b.n	800a364 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a368:	f001 ff18 	bl	800c19c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a374:	68f9      	ldr	r1, [r7, #12]
 800a376:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a378:	fb01 f303 	mul.w	r3, r1, r3
 800a37c:	441a      	add	r2, r3
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2200      	movs	r2, #0
 800a386:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a398:	3b01      	subs	r3, #1
 800a39a:	68f9      	ldr	r1, [r7, #12]
 800a39c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a39e:	fb01 f303 	mul.w	r3, r1, r3
 800a3a2:	441a      	add	r2, r3
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	22ff      	movs	r2, #255	@ 0xff
 800a3ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	22ff      	movs	r2, #255	@ 0xff
 800a3b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d114      	bne.n	800a3e8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	691b      	ldr	r3, [r3, #16]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d01a      	beq.n	800a3fc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	3310      	adds	r3, #16
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f001 f944 	bl	800b658 <xTaskRemoveFromEventList>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d012      	beq.n	800a3fc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a3d6:	4b0d      	ldr	r3, [pc, #52]	@ (800a40c <xQueueGenericReset+0xd0>)
 800a3d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3dc:	601a      	str	r2, [r3, #0]
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	f3bf 8f6f 	isb	sy
 800a3e6:	e009      	b.n	800a3fc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	3310      	adds	r3, #16
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7ff fef5 	bl	800a1dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	3324      	adds	r3, #36	@ 0x24
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7ff fef0 	bl	800a1dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a3fc:	f001 fefe 	bl	800c1fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a400:	2301      	movs	r3, #1
}
 800a402:	4618      	mov	r0, r3
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	e000ed04 	.word	0xe000ed04

0800a410 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a410:	b580      	push	{r7, lr}
 800a412:	b08e      	sub	sp, #56	@ 0x38
 800a414:	af02      	add	r7, sp, #8
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	607a      	str	r2, [r7, #4]
 800a41c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d10b      	bne.n	800a43c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a428:	f383 8811 	msr	BASEPRI, r3
 800a42c:	f3bf 8f6f 	isb	sy
 800a430:	f3bf 8f4f 	dsb	sy
 800a434:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a436:	bf00      	nop
 800a438:	bf00      	nop
 800a43a:	e7fd      	b.n	800a438 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d10b      	bne.n	800a45a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a446:	f383 8811 	msr	BASEPRI, r3
 800a44a:	f3bf 8f6f 	isb	sy
 800a44e:	f3bf 8f4f 	dsb	sy
 800a452:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a454:	bf00      	nop
 800a456:	bf00      	nop
 800a458:	e7fd      	b.n	800a456 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d002      	beq.n	800a466 <xQueueGenericCreateStatic+0x56>
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d001      	beq.n	800a46a <xQueueGenericCreateStatic+0x5a>
 800a466:	2301      	movs	r3, #1
 800a468:	e000      	b.n	800a46c <xQueueGenericCreateStatic+0x5c>
 800a46a:	2300      	movs	r3, #0
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d10b      	bne.n	800a488 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a474:	f383 8811 	msr	BASEPRI, r3
 800a478:	f3bf 8f6f 	isb	sy
 800a47c:	f3bf 8f4f 	dsb	sy
 800a480:	623b      	str	r3, [r7, #32]
}
 800a482:	bf00      	nop
 800a484:	bf00      	nop
 800a486:	e7fd      	b.n	800a484 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d102      	bne.n	800a494 <xQueueGenericCreateStatic+0x84>
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d101      	bne.n	800a498 <xQueueGenericCreateStatic+0x88>
 800a494:	2301      	movs	r3, #1
 800a496:	e000      	b.n	800a49a <xQueueGenericCreateStatic+0x8a>
 800a498:	2300      	movs	r3, #0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d10b      	bne.n	800a4b6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a2:	f383 8811 	msr	BASEPRI, r3
 800a4a6:	f3bf 8f6f 	isb	sy
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	61fb      	str	r3, [r7, #28]
}
 800a4b0:	bf00      	nop
 800a4b2:	bf00      	nop
 800a4b4:	e7fd      	b.n	800a4b2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a4b6:	2348      	movs	r3, #72	@ 0x48
 800a4b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	2b48      	cmp	r3, #72	@ 0x48
 800a4be:	d00b      	beq.n	800a4d8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a4c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4c4:	f383 8811 	msr	BASEPRI, r3
 800a4c8:	f3bf 8f6f 	isb	sy
 800a4cc:	f3bf 8f4f 	dsb	sy
 800a4d0:	61bb      	str	r3, [r7, #24]
}
 800a4d2:	bf00      	nop
 800a4d4:	bf00      	nop
 800a4d6:	e7fd      	b.n	800a4d4 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a4dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d00d      	beq.n	800a4fe <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a4e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4ea:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f0:	9300      	str	r3, [sp, #0]
 800a4f2:	4613      	mov	r3, r2
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	68b9      	ldr	r1, [r7, #8]
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	f000 f844 	bl	800a586 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a500:	4618      	mov	r0, r3
 800a502:	3730      	adds	r7, #48	@ 0x30
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b08a      	sub	sp, #40	@ 0x28
 800a50c:	af02      	add	r7, sp, #8
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	4613      	mov	r3, r2
 800a514:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d10b      	bne.n	800a534 <xQueueGenericCreate+0x2c>
	__asm volatile
 800a51c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a520:	f383 8811 	msr	BASEPRI, r3
 800a524:	f3bf 8f6f 	isb	sy
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	613b      	str	r3, [r7, #16]
}
 800a52e:	bf00      	nop
 800a530:	bf00      	nop
 800a532:	e7fd      	b.n	800a530 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d102      	bne.n	800a540 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a53a:	2300      	movs	r3, #0
 800a53c:	61fb      	str	r3, [r7, #28]
 800a53e:	e004      	b.n	800a54a <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	68ba      	ldr	r2, [r7, #8]
 800a544:	fb02 f303 	mul.w	r3, r2, r3
 800a548:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	3348      	adds	r3, #72	@ 0x48
 800a54e:	4618      	mov	r0, r3
 800a550:	f001 ff26 	bl	800c3a0 <pvPortMalloc>
 800a554:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a556:	69bb      	ldr	r3, [r7, #24]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d00f      	beq.n	800a57c <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	3348      	adds	r3, #72	@ 0x48
 800a560:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	2200      	movs	r2, #0
 800a566:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a56a:	79fa      	ldrb	r2, [r7, #7]
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	9300      	str	r3, [sp, #0]
 800a570:	4613      	mov	r3, r2
 800a572:	697a      	ldr	r2, [r7, #20]
 800a574:	68b9      	ldr	r1, [r7, #8]
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	f000 f805 	bl	800a586 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a57c:	69bb      	ldr	r3, [r7, #24]
	}
 800a57e:	4618      	mov	r0, r3
 800a580:	3720      	adds	r7, #32
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}

0800a586 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a586:	b580      	push	{r7, lr}
 800a588:	b084      	sub	sp, #16
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	60f8      	str	r0, [r7, #12]
 800a58e:	60b9      	str	r1, [r7, #8]
 800a590:	607a      	str	r2, [r7, #4]
 800a592:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d103      	bne.n	800a5a2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	69ba      	ldr	r2, [r7, #24]
 800a59e:	601a      	str	r2, [r3, #0]
 800a5a0:	e002      	b.n	800a5a8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	68fa      	ldr	r2, [r7, #12]
 800a5ac:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	68ba      	ldr	r2, [r7, #8]
 800a5b2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a5b4:	2101      	movs	r1, #1
 800a5b6:	69b8      	ldr	r0, [r7, #24]
 800a5b8:	f7ff fec0 	bl	800a33c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a5bc:	bf00      	nop
 800a5be:	3710      	adds	r7, #16
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b08e      	sub	sp, #56	@ 0x38
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
 800a5d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d10b      	bne.n	800a5f8 <xQueueGenericSend+0x34>
	__asm volatile
 800a5e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e4:	f383 8811 	msr	BASEPRI, r3
 800a5e8:	f3bf 8f6f 	isb	sy
 800a5ec:	f3bf 8f4f 	dsb	sy
 800a5f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a5f2:	bf00      	nop
 800a5f4:	bf00      	nop
 800a5f6:	e7fd      	b.n	800a5f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d103      	bne.n	800a606 <xQueueGenericSend+0x42>
 800a5fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a602:	2b00      	cmp	r3, #0
 800a604:	d101      	bne.n	800a60a <xQueueGenericSend+0x46>
 800a606:	2301      	movs	r3, #1
 800a608:	e000      	b.n	800a60c <xQueueGenericSend+0x48>
 800a60a:	2300      	movs	r3, #0
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d10b      	bne.n	800a628 <xQueueGenericSend+0x64>
	__asm volatile
 800a610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a614:	f383 8811 	msr	BASEPRI, r3
 800a618:	f3bf 8f6f 	isb	sy
 800a61c:	f3bf 8f4f 	dsb	sy
 800a620:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a622:	bf00      	nop
 800a624:	bf00      	nop
 800a626:	e7fd      	b.n	800a624 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	d103      	bne.n	800a636 <xQueueGenericSend+0x72>
 800a62e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a632:	2b01      	cmp	r3, #1
 800a634:	d101      	bne.n	800a63a <xQueueGenericSend+0x76>
 800a636:	2301      	movs	r3, #1
 800a638:	e000      	b.n	800a63c <xQueueGenericSend+0x78>
 800a63a:	2300      	movs	r3, #0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d10b      	bne.n	800a658 <xQueueGenericSend+0x94>
	__asm volatile
 800a640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a644:	f383 8811 	msr	BASEPRI, r3
 800a648:	f3bf 8f6f 	isb	sy
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	623b      	str	r3, [r7, #32]
}
 800a652:	bf00      	nop
 800a654:	bf00      	nop
 800a656:	e7fd      	b.n	800a654 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a658:	f001 f9c8 	bl	800b9ec <xTaskGetSchedulerState>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d102      	bne.n	800a668 <xQueueGenericSend+0xa4>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d101      	bne.n	800a66c <xQueueGenericSend+0xa8>
 800a668:	2301      	movs	r3, #1
 800a66a:	e000      	b.n	800a66e <xQueueGenericSend+0xaa>
 800a66c:	2300      	movs	r3, #0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d10b      	bne.n	800a68a <xQueueGenericSend+0xc6>
	__asm volatile
 800a672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a676:	f383 8811 	msr	BASEPRI, r3
 800a67a:	f3bf 8f6f 	isb	sy
 800a67e:	f3bf 8f4f 	dsb	sy
 800a682:	61fb      	str	r3, [r7, #28]
}
 800a684:	bf00      	nop
 800a686:	bf00      	nop
 800a688:	e7fd      	b.n	800a686 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a68a:	f001 fd87 	bl	800c19c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a690:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a696:	429a      	cmp	r2, r3
 800a698:	d302      	bcc.n	800a6a0 <xQueueGenericSend+0xdc>
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	2b02      	cmp	r3, #2
 800a69e:	d129      	bne.n	800a6f4 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6a0:	683a      	ldr	r2, [r7, #0]
 800a6a2:	68b9      	ldr	r1, [r7, #8]
 800a6a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a6a6:	f000 fa8f 	bl	800abc8 <prvCopyDataToQueue>
 800a6aa:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d010      	beq.n	800a6d6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b6:	3324      	adds	r3, #36	@ 0x24
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f000 ffcd 	bl	800b658 <xTaskRemoveFromEventList>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d013      	beq.n	800a6ec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a6c4:	4b3f      	ldr	r3, [pc, #252]	@ (800a7c4 <xQueueGenericSend+0x200>)
 800a6c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6ca:	601a      	str	r2, [r3, #0]
 800a6cc:	f3bf 8f4f 	dsb	sy
 800a6d0:	f3bf 8f6f 	isb	sy
 800a6d4:	e00a      	b.n	800a6ec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a6d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d007      	beq.n	800a6ec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a6dc:	4b39      	ldr	r3, [pc, #228]	@ (800a7c4 <xQueueGenericSend+0x200>)
 800a6de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6e2:	601a      	str	r2, [r3, #0]
 800a6e4:	f3bf 8f4f 	dsb	sy
 800a6e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a6ec:	f001 fd86 	bl	800c1fc <vPortExitCritical>
				return pdPASS;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e063      	b.n	800a7bc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d103      	bne.n	800a702 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6fa:	f001 fd7f 	bl	800c1fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a6fe:	2300      	movs	r3, #0
 800a700:	e05c      	b.n	800a7bc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a704:	2b00      	cmp	r3, #0
 800a706:	d106      	bne.n	800a716 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a708:	f107 0314 	add.w	r3, r7, #20
 800a70c:	4618      	mov	r0, r3
 800a70e:	f001 f807 	bl	800b720 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a712:	2301      	movs	r3, #1
 800a714:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a716:	f001 fd71 	bl	800c1fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a71a:	f000 fdab 	bl	800b274 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a71e:	f001 fd3d 	bl	800c19c <vPortEnterCritical>
 800a722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a724:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a728:	b25b      	sxtb	r3, r3
 800a72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a72e:	d103      	bne.n	800a738 <xQueueGenericSend+0x174>
 800a730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a732:	2200      	movs	r2, #0
 800a734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a73e:	b25b      	sxtb	r3, r3
 800a740:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a744:	d103      	bne.n	800a74e <xQueueGenericSend+0x18a>
 800a746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a748:	2200      	movs	r2, #0
 800a74a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a74e:	f001 fd55 	bl	800c1fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a752:	1d3a      	adds	r2, r7, #4
 800a754:	f107 0314 	add.w	r3, r7, #20
 800a758:	4611      	mov	r1, r2
 800a75a:	4618      	mov	r0, r3
 800a75c:	f000 fff6 	bl	800b74c <xTaskCheckForTimeOut>
 800a760:	4603      	mov	r3, r0
 800a762:	2b00      	cmp	r3, #0
 800a764:	d124      	bne.n	800a7b0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a766:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a768:	f000 fb26 	bl	800adb8 <prvIsQueueFull>
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d018      	beq.n	800a7a4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a774:	3310      	adds	r3, #16
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	4611      	mov	r1, r2
 800a77a:	4618      	mov	r0, r3
 800a77c:	f000 ff46 	bl	800b60c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a780:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a782:	f000 fab1 	bl	800ace8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a786:	f000 fd83 	bl	800b290 <xTaskResumeAll>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	f47f af7c 	bne.w	800a68a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a792:	4b0c      	ldr	r3, [pc, #48]	@ (800a7c4 <xQueueGenericSend+0x200>)
 800a794:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a798:	601a      	str	r2, [r3, #0]
 800a79a:	f3bf 8f4f 	dsb	sy
 800a79e:	f3bf 8f6f 	isb	sy
 800a7a2:	e772      	b.n	800a68a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a7a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7a6:	f000 fa9f 	bl	800ace8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7aa:	f000 fd71 	bl	800b290 <xTaskResumeAll>
 800a7ae:	e76c      	b.n	800a68a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a7b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7b2:	f000 fa99 	bl	800ace8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7b6:	f000 fd6b 	bl	800b290 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a7ba:	2300      	movs	r3, #0
		}
	}
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3738      	adds	r7, #56	@ 0x38
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	e000ed04 	.word	0xe000ed04

0800a7c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b08e      	sub	sp, #56	@ 0x38
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	607a      	str	r2, [r7, #4]
 800a7d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d10b      	bne.n	800a7f8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a7e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7e4:	f383 8811 	msr	BASEPRI, r3
 800a7e8:	f3bf 8f6f 	isb	sy
 800a7ec:	f3bf 8f4f 	dsb	sy
 800a7f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a7f2:	bf00      	nop
 800a7f4:	bf00      	nop
 800a7f6:	e7fd      	b.n	800a7f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d103      	bne.n	800a806 <xQueueGenericSendFromISR+0x3e>
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a802:	2b00      	cmp	r3, #0
 800a804:	d101      	bne.n	800a80a <xQueueGenericSendFromISR+0x42>
 800a806:	2301      	movs	r3, #1
 800a808:	e000      	b.n	800a80c <xQueueGenericSendFromISR+0x44>
 800a80a:	2300      	movs	r3, #0
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d10b      	bne.n	800a828 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a814:	f383 8811 	msr	BASEPRI, r3
 800a818:	f3bf 8f6f 	isb	sy
 800a81c:	f3bf 8f4f 	dsb	sy
 800a820:	623b      	str	r3, [r7, #32]
}
 800a822:	bf00      	nop
 800a824:	bf00      	nop
 800a826:	e7fd      	b.n	800a824 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	2b02      	cmp	r3, #2
 800a82c:	d103      	bne.n	800a836 <xQueueGenericSendFromISR+0x6e>
 800a82e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a832:	2b01      	cmp	r3, #1
 800a834:	d101      	bne.n	800a83a <xQueueGenericSendFromISR+0x72>
 800a836:	2301      	movs	r3, #1
 800a838:	e000      	b.n	800a83c <xQueueGenericSendFromISR+0x74>
 800a83a:	2300      	movs	r3, #0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d10b      	bne.n	800a858 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a844:	f383 8811 	msr	BASEPRI, r3
 800a848:	f3bf 8f6f 	isb	sy
 800a84c:	f3bf 8f4f 	dsb	sy
 800a850:	61fb      	str	r3, [r7, #28]
}
 800a852:	bf00      	nop
 800a854:	bf00      	nop
 800a856:	e7fd      	b.n	800a854 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a858:	f001 fd62 	bl	800c320 <vPortValidateInterruptPriority>
	__asm volatile
 800a85c:	f3ef 8211 	mrs	r2, BASEPRI
 800a860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a864:	f383 8811 	msr	BASEPRI, r3
 800a868:	f3bf 8f6f 	isb	sy
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	61ba      	str	r2, [r7, #24]
 800a872:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a874:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a876:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a87a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a87e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a880:	429a      	cmp	r2, r3
 800a882:	d302      	bcc.n	800a88a <xQueueGenericSendFromISR+0xc2>
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	2b02      	cmp	r3, #2
 800a888:	d12c      	bne.n	800a8e4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a88a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a88c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a890:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a894:	683a      	ldr	r2, [r7, #0]
 800a896:	68b9      	ldr	r1, [r7, #8]
 800a898:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a89a:	f000 f995 	bl	800abc8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a89e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800a8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a6:	d112      	bne.n	800a8ce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d016      	beq.n	800a8de <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b2:	3324      	adds	r3, #36	@ 0x24
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f000 fecf 	bl	800b658 <xTaskRemoveFromEventList>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d00e      	beq.n	800a8de <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00b      	beq.n	800a8de <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	601a      	str	r2, [r3, #0]
 800a8cc:	e007      	b.n	800a8de <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a8ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	b2db      	uxtb	r3, r3
 800a8d6:	b25a      	sxtb	r2, r3
 800a8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800a8e2:	e001      	b.n	800a8e8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ea:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	f383 8811 	msr	BASEPRI, r3
}
 800a8f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a8f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3738      	adds	r7, #56	@ 0x38
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
	...

0800a900 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b08c      	sub	sp, #48	@ 0x30
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a90c:	2300      	movs	r3, #0
 800a90e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a916:	2b00      	cmp	r3, #0
 800a918:	d10b      	bne.n	800a932 <xQueueReceive+0x32>
	__asm volatile
 800a91a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a91e:	f383 8811 	msr	BASEPRI, r3
 800a922:	f3bf 8f6f 	isb	sy
 800a926:	f3bf 8f4f 	dsb	sy
 800a92a:	623b      	str	r3, [r7, #32]
}
 800a92c:	bf00      	nop
 800a92e:	bf00      	nop
 800a930:	e7fd      	b.n	800a92e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d103      	bne.n	800a940 <xQueueReceive+0x40>
 800a938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a93a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d101      	bne.n	800a944 <xQueueReceive+0x44>
 800a940:	2301      	movs	r3, #1
 800a942:	e000      	b.n	800a946 <xQueueReceive+0x46>
 800a944:	2300      	movs	r3, #0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d10b      	bne.n	800a962 <xQueueReceive+0x62>
	__asm volatile
 800a94a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a94e:	f383 8811 	msr	BASEPRI, r3
 800a952:	f3bf 8f6f 	isb	sy
 800a956:	f3bf 8f4f 	dsb	sy
 800a95a:	61fb      	str	r3, [r7, #28]
}
 800a95c:	bf00      	nop
 800a95e:	bf00      	nop
 800a960:	e7fd      	b.n	800a95e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a962:	f001 f843 	bl	800b9ec <xTaskGetSchedulerState>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d102      	bne.n	800a972 <xQueueReceive+0x72>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d101      	bne.n	800a976 <xQueueReceive+0x76>
 800a972:	2301      	movs	r3, #1
 800a974:	e000      	b.n	800a978 <xQueueReceive+0x78>
 800a976:	2300      	movs	r3, #0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d10b      	bne.n	800a994 <xQueueReceive+0x94>
	__asm volatile
 800a97c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a980:	f383 8811 	msr	BASEPRI, r3
 800a984:	f3bf 8f6f 	isb	sy
 800a988:	f3bf 8f4f 	dsb	sy
 800a98c:	61bb      	str	r3, [r7, #24]
}
 800a98e:	bf00      	nop
 800a990:	bf00      	nop
 800a992:	e7fd      	b.n	800a990 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a994:	f001 fc02 	bl	800c19c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a99a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a99c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a99e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d01f      	beq.n	800a9e4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a9a4:	68b9      	ldr	r1, [r7, #8]
 800a9a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9a8:	f000 f978 	bl	800ac9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ae:	1e5a      	subs	r2, r3, #1
 800a9b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9b2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9b6:	691b      	ldr	r3, [r3, #16]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00f      	beq.n	800a9dc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9be:	3310      	adds	r3, #16
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f000 fe49 	bl	800b658 <xTaskRemoveFromEventList>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d007      	beq.n	800a9dc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a9cc:	4b3c      	ldr	r3, [pc, #240]	@ (800aac0 <xQueueReceive+0x1c0>)
 800a9ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9d2:	601a      	str	r2, [r3, #0]
 800a9d4:	f3bf 8f4f 	dsb	sy
 800a9d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a9dc:	f001 fc0e 	bl	800c1fc <vPortExitCritical>
				return pdPASS;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e069      	b.n	800aab8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d103      	bne.n	800a9f2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a9ea:	f001 fc07 	bl	800c1fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	e062      	b.n	800aab8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d106      	bne.n	800aa06 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9f8:	f107 0310 	add.w	r3, r7, #16
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f000 fe8f 	bl	800b720 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa02:	2301      	movs	r3, #1
 800aa04:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa06:	f001 fbf9 	bl	800c1fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa0a:	f000 fc33 	bl	800b274 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa0e:	f001 fbc5 	bl	800c19c <vPortEnterCritical>
 800aa12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa18:	b25b      	sxtb	r3, r3
 800aa1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1e:	d103      	bne.n	800aa28 <xQueueReceive+0x128>
 800aa20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa22:	2200      	movs	r2, #0
 800aa24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa2e:	b25b      	sxtb	r3, r3
 800aa30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa34:	d103      	bne.n	800aa3e <xQueueReceive+0x13e>
 800aa36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa3e:	f001 fbdd 	bl	800c1fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa42:	1d3a      	adds	r2, r7, #4
 800aa44:	f107 0310 	add.w	r3, r7, #16
 800aa48:	4611      	mov	r1, r2
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f000 fe7e 	bl	800b74c <xTaskCheckForTimeOut>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d123      	bne.n	800aa9e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa58:	f000 f998 	bl	800ad8c <prvIsQueueEmpty>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d017      	beq.n	800aa92 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa64:	3324      	adds	r3, #36	@ 0x24
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	4611      	mov	r1, r2
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f000 fdce 	bl	800b60c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa72:	f000 f939 	bl	800ace8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa76:	f000 fc0b 	bl	800b290 <xTaskResumeAll>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d189      	bne.n	800a994 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800aa80:	4b0f      	ldr	r3, [pc, #60]	@ (800aac0 <xQueueReceive+0x1c0>)
 800aa82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa86:	601a      	str	r2, [r3, #0]
 800aa88:	f3bf 8f4f 	dsb	sy
 800aa8c:	f3bf 8f6f 	isb	sy
 800aa90:	e780      	b.n	800a994 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aa92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa94:	f000 f928 	bl	800ace8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa98:	f000 fbfa 	bl	800b290 <xTaskResumeAll>
 800aa9c:	e77a      	b.n	800a994 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aa9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aaa0:	f000 f922 	bl	800ace8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aaa4:	f000 fbf4 	bl	800b290 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aaa8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aaaa:	f000 f96f 	bl	800ad8c <prvIsQueueEmpty>
 800aaae:	4603      	mov	r3, r0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	f43f af6f 	beq.w	800a994 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aab6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3730      	adds	r7, #48	@ 0x30
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	e000ed04 	.word	0xe000ed04

0800aac4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b08e      	sub	sp, #56	@ 0x38
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800aad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d10b      	bne.n	800aaf2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800aada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aade:	f383 8811 	msr	BASEPRI, r3
 800aae2:	f3bf 8f6f 	isb	sy
 800aae6:	f3bf 8f4f 	dsb	sy
 800aaea:	623b      	str	r3, [r7, #32]
}
 800aaec:	bf00      	nop
 800aaee:	bf00      	nop
 800aaf0:	e7fd      	b.n	800aaee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d103      	bne.n	800ab00 <xQueueReceiveFromISR+0x3c>
 800aaf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aafa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d101      	bne.n	800ab04 <xQueueReceiveFromISR+0x40>
 800ab00:	2301      	movs	r3, #1
 800ab02:	e000      	b.n	800ab06 <xQueueReceiveFromISR+0x42>
 800ab04:	2300      	movs	r3, #0
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d10b      	bne.n	800ab22 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800ab0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab0e:	f383 8811 	msr	BASEPRI, r3
 800ab12:	f3bf 8f6f 	isb	sy
 800ab16:	f3bf 8f4f 	dsb	sy
 800ab1a:	61fb      	str	r3, [r7, #28]
}
 800ab1c:	bf00      	nop
 800ab1e:	bf00      	nop
 800ab20:	e7fd      	b.n	800ab1e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab22:	f001 fbfd 	bl	800c320 <vPortValidateInterruptPriority>
	__asm volatile
 800ab26:	f3ef 8211 	mrs	r2, BASEPRI
 800ab2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab2e:	f383 8811 	msr	BASEPRI, r3
 800ab32:	f3bf 8f6f 	isb	sy
 800ab36:	f3bf 8f4f 	dsb	sy
 800ab3a:	61ba      	str	r2, [r7, #24]
 800ab3c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ab3e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab40:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab46:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d02f      	beq.n	800abae <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ab4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ab54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab58:	68b9      	ldr	r1, [r7, #8]
 800ab5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab5c:	f000 f89e 	bl	800ac9c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab62:	1e5a      	subs	r2, r3, #1
 800ab64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab66:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ab68:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ab6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab70:	d112      	bne.n	800ab98 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab74:	691b      	ldr	r3, [r3, #16]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d016      	beq.n	800aba8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab7c:	3310      	adds	r3, #16
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f000 fd6a 	bl	800b658 <xTaskRemoveFromEventList>
 800ab84:	4603      	mov	r3, r0
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00e      	beq.n	800aba8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d00b      	beq.n	800aba8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2201      	movs	r2, #1
 800ab94:	601a      	str	r2, [r3, #0]
 800ab96:	e007      	b.n	800aba8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ab98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	b25a      	sxtb	r2, r3
 800aba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800aba8:	2301      	movs	r3, #1
 800abaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800abac:	e001      	b.n	800abb2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800abae:	2300      	movs	r3, #0
 800abb0:	637b      	str	r3, [r7, #52]	@ 0x34
 800abb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abb4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	f383 8811 	msr	BASEPRI, r3
}
 800abbc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800abbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3738      	adds	r7, #56	@ 0x38
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b086      	sub	sp, #24
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800abd4:	2300      	movs	r3, #0
 800abd6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abdc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d10d      	bne.n	800ac02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d14d      	bne.n	800ac8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	4618      	mov	r0, r3
 800abf4:	f000 ff18 	bl	800ba28 <xTaskPriorityDisinherit>
 800abf8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2200      	movs	r2, #0
 800abfe:	605a      	str	r2, [r3, #4]
 800ac00:	e043      	b.n	800ac8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d119      	bne.n	800ac3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	6898      	ldr	r0, [r3, #8]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac10:	461a      	mov	r2, r3
 800ac12:	68b9      	ldr	r1, [r7, #8]
 800ac14:	f004 f9b3 	bl	800ef7e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	689a      	ldr	r2, [r3, #8]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac20:	441a      	add	r2, r3
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	689a      	ldr	r2, [r3, #8]
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d32b      	bcc.n	800ac8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	609a      	str	r2, [r3, #8]
 800ac3a:	e026      	b.n	800ac8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	68d8      	ldr	r0, [r3, #12]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac44:	461a      	mov	r2, r3
 800ac46:	68b9      	ldr	r1, [r7, #8]
 800ac48:	f004 f999 	bl	800ef7e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	68da      	ldr	r2, [r3, #12]
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac54:	425b      	negs	r3, r3
 800ac56:	441a      	add	r2, r3
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	68da      	ldr	r2, [r3, #12]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d207      	bcs.n	800ac78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	685a      	ldr	r2, [r3, #4]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac70:	425b      	negs	r3, r3
 800ac72:	441a      	add	r2, r3
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2b02      	cmp	r3, #2
 800ac7c:	d105      	bne.n	800ac8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d002      	beq.n	800ac8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	3b01      	subs	r3, #1
 800ac88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	1c5a      	adds	r2, r3, #1
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ac92:	697b      	ldr	r3, [r7, #20]
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3718      	adds	r7, #24
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d018      	beq.n	800ace0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	68da      	ldr	r2, [r3, #12]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acb6:	441a      	add	r2, r3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	68da      	ldr	r2, [r3, #12]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d303      	bcc.n	800acd0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	68d9      	ldr	r1, [r3, #12]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acd8:	461a      	mov	r2, r3
 800acda:	6838      	ldr	r0, [r7, #0]
 800acdc:	f004 f94f 	bl	800ef7e <memcpy>
	}
}
 800ace0:	bf00      	nop
 800ace2:	3708      	adds	r7, #8
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800acf0:	f001 fa54 	bl	800c19c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800acfa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800acfc:	e011      	b.n	800ad22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d012      	beq.n	800ad2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	3324      	adds	r3, #36	@ 0x24
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f000 fca4 	bl	800b658 <xTaskRemoveFromEventList>
 800ad10:	4603      	mov	r3, r0
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d001      	beq.n	800ad1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ad16:	f000 fd7d 	bl	800b814 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ad1a:	7bfb      	ldrb	r3, [r7, #15]
 800ad1c:	3b01      	subs	r3, #1
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	dce9      	bgt.n	800acfe <prvUnlockQueue+0x16>
 800ad2a:	e000      	b.n	800ad2e <prvUnlockQueue+0x46>
					break;
 800ad2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	22ff      	movs	r2, #255	@ 0xff
 800ad32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ad36:	f001 fa61 	bl	800c1fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ad3a:	f001 fa2f 	bl	800c19c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ad44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad46:	e011      	b.n	800ad6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	691b      	ldr	r3, [r3, #16]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d012      	beq.n	800ad76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	3310      	adds	r3, #16
 800ad54:	4618      	mov	r0, r3
 800ad56:	f000 fc7f 	bl	800b658 <xTaskRemoveFromEventList>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d001      	beq.n	800ad64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ad60:	f000 fd58 	bl	800b814 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ad64:	7bbb      	ldrb	r3, [r7, #14]
 800ad66:	3b01      	subs	r3, #1
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	dce9      	bgt.n	800ad48 <prvUnlockQueue+0x60>
 800ad74:	e000      	b.n	800ad78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ad76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	22ff      	movs	r2, #255	@ 0xff
 800ad7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ad80:	f001 fa3c 	bl	800c1fc <vPortExitCritical>
}
 800ad84:	bf00      	nop
 800ad86:	3710      	adds	r7, #16
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad94:	f001 fa02 	bl	800c19c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d102      	bne.n	800ada6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ada0:	2301      	movs	r3, #1
 800ada2:	60fb      	str	r3, [r7, #12]
 800ada4:	e001      	b.n	800adaa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ada6:	2300      	movs	r3, #0
 800ada8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800adaa:	f001 fa27 	bl	800c1fc <vPortExitCritical>

	return xReturn;
 800adae:	68fb      	ldr	r3, [r7, #12]
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3710      	adds	r7, #16
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800adc0:	f001 f9ec 	bl	800c19c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adcc:	429a      	cmp	r2, r3
 800adce:	d102      	bne.n	800add6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800add0:	2301      	movs	r3, #1
 800add2:	60fb      	str	r3, [r7, #12]
 800add4:	e001      	b.n	800adda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800add6:	2300      	movs	r3, #0
 800add8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800adda:	f001 fa0f 	bl	800c1fc <vPortExitCritical>

	return xReturn;
 800adde:	68fb      	ldr	r3, [r7, #12]
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3710      	adds	r7, #16
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b08e      	sub	sp, #56	@ 0x38
 800adec:	af04      	add	r7, sp, #16
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	607a      	str	r2, [r7, #4]
 800adf4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800adf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d10b      	bne.n	800ae14 <xTaskCreateStatic+0x2c>
	__asm volatile
 800adfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae00:	f383 8811 	msr	BASEPRI, r3
 800ae04:	f3bf 8f6f 	isb	sy
 800ae08:	f3bf 8f4f 	dsb	sy
 800ae0c:	623b      	str	r3, [r7, #32]
}
 800ae0e:	bf00      	nop
 800ae10:	bf00      	nop
 800ae12:	e7fd      	b.n	800ae10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ae14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d10b      	bne.n	800ae32 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ae1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae1e:	f383 8811 	msr	BASEPRI, r3
 800ae22:	f3bf 8f6f 	isb	sy
 800ae26:	f3bf 8f4f 	dsb	sy
 800ae2a:	61fb      	str	r3, [r7, #28]
}
 800ae2c:	bf00      	nop
 800ae2e:	bf00      	nop
 800ae30:	e7fd      	b.n	800ae2e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ae32:	23b0      	movs	r3, #176	@ 0xb0
 800ae34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	2bb0      	cmp	r3, #176	@ 0xb0
 800ae3a:	d00b      	beq.n	800ae54 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ae3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae40:	f383 8811 	msr	BASEPRI, r3
 800ae44:	f3bf 8f6f 	isb	sy
 800ae48:	f3bf 8f4f 	dsb	sy
 800ae4c:	61bb      	str	r3, [r7, #24]
}
 800ae4e:	bf00      	nop
 800ae50:	bf00      	nop
 800ae52:	e7fd      	b.n	800ae50 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ae54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d01e      	beq.n	800ae98 <xTaskCreateStatic+0xb0>
 800ae5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d01b      	beq.n	800ae98 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae62:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ae64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae68:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ae6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae6c:	2202      	movs	r2, #2
 800ae6e:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ae72:	2300      	movs	r3, #0
 800ae74:	9303      	str	r3, [sp, #12]
 800ae76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae78:	9302      	str	r3, [sp, #8]
 800ae7a:	f107 0314 	add.w	r3, r7, #20
 800ae7e:	9301      	str	r3, [sp, #4]
 800ae80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae82:	9300      	str	r3, [sp, #0]
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	68b9      	ldr	r1, [r7, #8]
 800ae8a:	68f8      	ldr	r0, [r7, #12]
 800ae8c:	f000 f850 	bl	800af30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ae92:	f000 f8e5 	bl	800b060 <prvAddNewTaskToReadyList>
 800ae96:	e001      	b.n	800ae9c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ae9c:	697b      	ldr	r3, [r7, #20]
	}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3728      	adds	r7, #40	@ 0x28
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b08c      	sub	sp, #48	@ 0x30
 800aeaa:	af04      	add	r7, sp, #16
 800aeac:	60f8      	str	r0, [r7, #12]
 800aeae:	60b9      	str	r1, [r7, #8]
 800aeb0:	603b      	str	r3, [r7, #0]
 800aeb2:	4613      	mov	r3, r2
 800aeb4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aeb6:	88fb      	ldrh	r3, [r7, #6]
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	4618      	mov	r0, r3
 800aebc:	f001 fa70 	bl	800c3a0 <pvPortMalloc>
 800aec0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d00e      	beq.n	800aee6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800aec8:	20b0      	movs	r0, #176	@ 0xb0
 800aeca:	f001 fa69 	bl	800c3a0 <pvPortMalloc>
 800aece:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d003      	beq.n	800aede <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aed6:	69fb      	ldr	r3, [r7, #28]
 800aed8:	697a      	ldr	r2, [r7, #20]
 800aeda:	631a      	str	r2, [r3, #48]	@ 0x30
 800aedc:	e005      	b.n	800aeea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aede:	6978      	ldr	r0, [r7, #20]
 800aee0:	f001 fb26 	bl	800c530 <vPortFree>
 800aee4:	e001      	b.n	800aeea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aee6:	2300      	movs	r3, #0
 800aee8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aeea:	69fb      	ldr	r3, [r7, #28]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d017      	beq.n	800af20 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aef0:	69fb      	ldr	r3, [r7, #28]
 800aef2:	2200      	movs	r2, #0
 800aef4:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aef8:	88fa      	ldrh	r2, [r7, #6]
 800aefa:	2300      	movs	r3, #0
 800aefc:	9303      	str	r3, [sp, #12]
 800aefe:	69fb      	ldr	r3, [r7, #28]
 800af00:	9302      	str	r3, [sp, #8]
 800af02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af04:	9301      	str	r3, [sp, #4]
 800af06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af08:	9300      	str	r3, [sp, #0]
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	68b9      	ldr	r1, [r7, #8]
 800af0e:	68f8      	ldr	r0, [r7, #12]
 800af10:	f000 f80e 	bl	800af30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af14:	69f8      	ldr	r0, [r7, #28]
 800af16:	f000 f8a3 	bl	800b060 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800af1a:	2301      	movs	r3, #1
 800af1c:	61bb      	str	r3, [r7, #24]
 800af1e:	e002      	b.n	800af26 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800af20:	f04f 33ff 	mov.w	r3, #4294967295
 800af24:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800af26:	69bb      	ldr	r3, [r7, #24]
	}
 800af28:	4618      	mov	r0, r3
 800af2a:	3720      	adds	r7, #32
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b088      	sub	sp, #32
 800af34:	af00      	add	r7, sp, #0
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	607a      	str	r2, [r7, #4]
 800af3c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800af3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800af48:	3b01      	subs	r3, #1
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	4413      	add	r3, r2
 800af4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	f023 0307 	bic.w	r3, r3, #7
 800af56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800af58:	69bb      	ldr	r3, [r7, #24]
 800af5a:	f003 0307 	and.w	r3, r3, #7
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d00b      	beq.n	800af7a <prvInitialiseNewTask+0x4a>
	__asm volatile
 800af62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af66:	f383 8811 	msr	BASEPRI, r3
 800af6a:	f3bf 8f6f 	isb	sy
 800af6e:	f3bf 8f4f 	dsb	sy
 800af72:	617b      	str	r3, [r7, #20]
}
 800af74:	bf00      	nop
 800af76:	bf00      	nop
 800af78:	e7fd      	b.n	800af76 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af7a:	2300      	movs	r3, #0
 800af7c:	61fb      	str	r3, [r7, #28]
 800af7e:	e012      	b.n	800afa6 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800af80:	68ba      	ldr	r2, [r7, #8]
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	4413      	add	r3, r2
 800af86:	7819      	ldrb	r1, [r3, #0]
 800af88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	4413      	add	r3, r2
 800af8e:	3334      	adds	r3, #52	@ 0x34
 800af90:	460a      	mov	r2, r1
 800af92:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800af94:	68ba      	ldr	r2, [r7, #8]
 800af96:	69fb      	ldr	r3, [r7, #28]
 800af98:	4413      	add	r3, r2
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d006      	beq.n	800afae <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afa0:	69fb      	ldr	r3, [r7, #28]
 800afa2:	3301      	adds	r3, #1
 800afa4:	61fb      	str	r3, [r7, #28]
 800afa6:	69fb      	ldr	r3, [r7, #28]
 800afa8:	2b1f      	cmp	r3, #31
 800afaa:	d9e9      	bls.n	800af80 <prvInitialiseNewTask+0x50>
 800afac:	e000      	b.n	800afb0 <prvInitialiseNewTask+0x80>
		{
			break;
 800afae:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800afb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb2:	2200      	movs	r2, #0
 800afb4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800afb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afba:	2b06      	cmp	r3, #6
 800afbc:	d901      	bls.n	800afc2 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800afbe:	2306      	movs	r3, #6
 800afc0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800afc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800afc6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800afc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800afcc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->uxMutexesHeld = 0;
 800afce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd0:	2200      	movs	r2, #0
 800afd2:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800afd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd6:	3304      	adds	r3, #4
 800afd8:	4618      	mov	r0, r3
 800afda:	f7ff f91e 	bl	800a21a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800afde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe0:	3318      	adds	r3, #24
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7ff f919 	bl	800a21a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800afe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aff0:	f1c3 0207 	rsb	r2, r3, #7
 800aff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800affa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800affc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800affe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b000:	2200      	movs	r2, #0
 800b002:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b008:	2200      	movs	r2, #0
 800b00a:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b00e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b010:	335c      	adds	r3, #92	@ 0x5c
 800b012:	224c      	movs	r2, #76	@ 0x4c
 800b014:	2100      	movs	r1, #0
 800b016:	4618      	mov	r0, r3
 800b018:	f003 f8ad 	bl	800e176 <memset>
 800b01c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b01e:	4a0d      	ldr	r2, [pc, #52]	@ (800b054 <prvInitialiseNewTask+0x124>)
 800b020:	661a      	str	r2, [r3, #96]	@ 0x60
 800b022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b024:	4a0c      	ldr	r2, [pc, #48]	@ (800b058 <prvInitialiseNewTask+0x128>)
 800b026:	665a      	str	r2, [r3, #100]	@ 0x64
 800b028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b02a:	4a0c      	ldr	r2, [pc, #48]	@ (800b05c <prvInitialiseNewTask+0x12c>)
 800b02c:	669a      	str	r2, [r3, #104]	@ 0x68
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b02e:	683a      	ldr	r2, [r7, #0]
 800b030:	68f9      	ldr	r1, [r7, #12]
 800b032:	69b8      	ldr	r0, [r7, #24]
 800b034:	f000 ffc4 	bl	800bfc0 <pxPortInitialiseStack>
 800b038:	4602      	mov	r2, r0
 800b03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b03c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b03e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b040:	2b00      	cmp	r3, #0
 800b042:	d002      	beq.n	800b04a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b046:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b048:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b04a:	bf00      	nop
 800b04c:	3720      	adds	r7, #32
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	20005a28 	.word	0x20005a28
 800b058:	20005a90 	.word	0x20005a90
 800b05c:	20005af8 	.word	0x20005af8

0800b060 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b068:	f001 f898 	bl	800c19c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b06c:	4b2a      	ldr	r3, [pc, #168]	@ (800b118 <prvAddNewTaskToReadyList+0xb8>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	3301      	adds	r3, #1
 800b072:	4a29      	ldr	r2, [pc, #164]	@ (800b118 <prvAddNewTaskToReadyList+0xb8>)
 800b074:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b076:	4b29      	ldr	r3, [pc, #164]	@ (800b11c <prvAddNewTaskToReadyList+0xbc>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d109      	bne.n	800b092 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b07e:	4a27      	ldr	r2, [pc, #156]	@ (800b11c <prvAddNewTaskToReadyList+0xbc>)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b084:	4b24      	ldr	r3, [pc, #144]	@ (800b118 <prvAddNewTaskToReadyList+0xb8>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d110      	bne.n	800b0ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b08c:	f000 fbe6 	bl	800b85c <prvInitialiseTaskLists>
 800b090:	e00d      	b.n	800b0ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b092:	4b23      	ldr	r3, [pc, #140]	@ (800b120 <prvAddNewTaskToReadyList+0xc0>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d109      	bne.n	800b0ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b09a:	4b20      	ldr	r3, [pc, #128]	@ (800b11c <prvAddNewTaskToReadyList+0xbc>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d802      	bhi.n	800b0ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b0a8:	4a1c      	ldr	r2, [pc, #112]	@ (800b11c <prvAddNewTaskToReadyList+0xbc>)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b0ae:	4b1d      	ldr	r3, [pc, #116]	@ (800b124 <prvAddNewTaskToReadyList+0xc4>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	4a1b      	ldr	r2, [pc, #108]	@ (800b124 <prvAddNewTaskToReadyList+0xc4>)
 800b0b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0bc:	2201      	movs	r2, #1
 800b0be:	409a      	lsls	r2, r3
 800b0c0:	4b19      	ldr	r3, [pc, #100]	@ (800b128 <prvAddNewTaskToReadyList+0xc8>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	4a18      	ldr	r2, [pc, #96]	@ (800b128 <prvAddNewTaskToReadyList+0xc8>)
 800b0c8:	6013      	str	r3, [r2, #0]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0ce:	4613      	mov	r3, r2
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	4413      	add	r3, r2
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	4a15      	ldr	r2, [pc, #84]	@ (800b12c <prvAddNewTaskToReadyList+0xcc>)
 800b0d8:	441a      	add	r2, r3
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	3304      	adds	r3, #4
 800b0de:	4619      	mov	r1, r3
 800b0e0:	4610      	mov	r0, r2
 800b0e2:	f7ff f8a6 	bl	800a232 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b0e6:	f001 f889 	bl	800c1fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b0ea:	4b0d      	ldr	r3, [pc, #52]	@ (800b120 <prvAddNewTaskToReadyList+0xc0>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d00e      	beq.n	800b110 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b0f2:	4b0a      	ldr	r3, [pc, #40]	@ (800b11c <prvAddNewTaskToReadyList+0xbc>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d207      	bcs.n	800b110 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b100:	4b0b      	ldr	r3, [pc, #44]	@ (800b130 <prvAddNewTaskToReadyList+0xd0>)
 800b102:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b106:	601a      	str	r2, [r3, #0]
 800b108:	f3bf 8f4f 	dsb	sy
 800b10c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b110:	bf00      	nop
 800b112:	3708      	adds	r7, #8
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}
 800b118:	200009d4 	.word	0x200009d4
 800b11c:	200008d4 	.word	0x200008d4
 800b120:	200009e0 	.word	0x200009e0
 800b124:	200009f0 	.word	0x200009f0
 800b128:	200009dc 	.word	0x200009dc
 800b12c:	200008d8 	.word	0x200008d8
 800b130:	e000ed04 	.word	0xe000ed04

0800b134 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b134:	b580      	push	{r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b13c:	2300      	movs	r3, #0
 800b13e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d018      	beq.n	800b178 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b146:	4b14      	ldr	r3, [pc, #80]	@ (800b198 <vTaskDelay+0x64>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00b      	beq.n	800b166 <vTaskDelay+0x32>
	__asm volatile
 800b14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b152:	f383 8811 	msr	BASEPRI, r3
 800b156:	f3bf 8f6f 	isb	sy
 800b15a:	f3bf 8f4f 	dsb	sy
 800b15e:	60bb      	str	r3, [r7, #8]
}
 800b160:	bf00      	nop
 800b162:	bf00      	nop
 800b164:	e7fd      	b.n	800b162 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b166:	f000 f885 	bl	800b274 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b16a:	2100      	movs	r1, #0
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f000 fec1 	bl	800bef4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b172:	f000 f88d 	bl	800b290 <xTaskResumeAll>
 800b176:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d107      	bne.n	800b18e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b17e:	4b07      	ldr	r3, [pc, #28]	@ (800b19c <vTaskDelay+0x68>)
 800b180:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b184:	601a      	str	r2, [r3, #0]
 800b186:	f3bf 8f4f 	dsb	sy
 800b18a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b18e:	bf00      	nop
 800b190:	3710      	adds	r7, #16
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	200009fc 	.word	0x200009fc
 800b19c:	e000ed04 	.word	0xe000ed04

0800b1a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b08a      	sub	sp, #40	@ 0x28
 800b1a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b1ae:	463a      	mov	r2, r7
 800b1b0:	1d39      	adds	r1, r7, #4
 800b1b2:	f107 0308 	add.w	r3, r7, #8
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7f6 fec6 	bl	8001f48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b1bc:	6839      	ldr	r1, [r7, #0]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	68ba      	ldr	r2, [r7, #8]
 800b1c2:	9202      	str	r2, [sp, #8]
 800b1c4:	9301      	str	r3, [sp, #4]
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	9300      	str	r3, [sp, #0]
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	460a      	mov	r2, r1
 800b1ce:	4921      	ldr	r1, [pc, #132]	@ (800b254 <vTaskStartScheduler+0xb4>)
 800b1d0:	4821      	ldr	r0, [pc, #132]	@ (800b258 <vTaskStartScheduler+0xb8>)
 800b1d2:	f7ff fe09 	bl	800ade8 <xTaskCreateStatic>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	4a20      	ldr	r2, [pc, #128]	@ (800b25c <vTaskStartScheduler+0xbc>)
 800b1da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b1dc:	4b1f      	ldr	r3, [pc, #124]	@ (800b25c <vTaskStartScheduler+0xbc>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d002      	beq.n	800b1ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	617b      	str	r3, [r7, #20]
 800b1e8:	e001      	b.n	800b1ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d11b      	bne.n	800b22c <vTaskStartScheduler+0x8c>
	__asm volatile
 800b1f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1f8:	f383 8811 	msr	BASEPRI, r3
 800b1fc:	f3bf 8f6f 	isb	sy
 800b200:	f3bf 8f4f 	dsb	sy
 800b204:	613b      	str	r3, [r7, #16]
}
 800b206:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b208:	4b15      	ldr	r3, [pc, #84]	@ (800b260 <vTaskStartScheduler+0xc0>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	335c      	adds	r3, #92	@ 0x5c
 800b20e:	4a15      	ldr	r2, [pc, #84]	@ (800b264 <vTaskStartScheduler+0xc4>)
 800b210:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b212:	4b15      	ldr	r3, [pc, #84]	@ (800b268 <vTaskStartScheduler+0xc8>)
 800b214:	f04f 32ff 	mov.w	r2, #4294967295
 800b218:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b21a:	4b14      	ldr	r3, [pc, #80]	@ (800b26c <vTaskStartScheduler+0xcc>)
 800b21c:	2201      	movs	r2, #1
 800b21e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b220:	4b13      	ldr	r3, [pc, #76]	@ (800b270 <vTaskStartScheduler+0xd0>)
 800b222:	2200      	movs	r2, #0
 800b224:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b226:	f000 ff47 	bl	800c0b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b22a:	e00f      	b.n	800b24c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b232:	d10b      	bne.n	800b24c <vTaskStartScheduler+0xac>
	__asm volatile
 800b234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b238:	f383 8811 	msr	BASEPRI, r3
 800b23c:	f3bf 8f6f 	isb	sy
 800b240:	f3bf 8f4f 	dsb	sy
 800b244:	60fb      	str	r3, [r7, #12]
}
 800b246:	bf00      	nop
 800b248:	bf00      	nop
 800b24a:	e7fd      	b.n	800b248 <vTaskStartScheduler+0xa8>
}
 800b24c:	bf00      	nop
 800b24e:	3718      	adds	r7, #24
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	08011f3c 	.word	0x08011f3c
 800b258:	0800b82d 	.word	0x0800b82d
 800b25c:	200009f8 	.word	0x200009f8
 800b260:	200008d4 	.word	0x200008d4
 800b264:	20000284 	.word	0x20000284
 800b268:	200009f4 	.word	0x200009f4
 800b26c:	200009e0 	.word	0x200009e0
 800b270:	200009d8 	.word	0x200009d8

0800b274 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b274:	b480      	push	{r7}
 800b276:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b278:	4b04      	ldr	r3, [pc, #16]	@ (800b28c <vTaskSuspendAll+0x18>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	3301      	adds	r3, #1
 800b27e:	4a03      	ldr	r2, [pc, #12]	@ (800b28c <vTaskSuspendAll+0x18>)
 800b280:	6013      	str	r3, [r2, #0]
}
 800b282:	bf00      	nop
 800b284:	46bd      	mov	sp, r7
 800b286:	bc80      	pop	{r7}
 800b288:	4770      	bx	lr
 800b28a:	bf00      	nop
 800b28c:	200009fc 	.word	0x200009fc

0800b290 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b296:	2300      	movs	r3, #0
 800b298:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b29a:	2300      	movs	r3, #0
 800b29c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b29e:	4b42      	ldr	r3, [pc, #264]	@ (800b3a8 <xTaskResumeAll+0x118>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d10b      	bne.n	800b2be <xTaskResumeAll+0x2e>
	__asm volatile
 800b2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2aa:	f383 8811 	msr	BASEPRI, r3
 800b2ae:	f3bf 8f6f 	isb	sy
 800b2b2:	f3bf 8f4f 	dsb	sy
 800b2b6:	603b      	str	r3, [r7, #0]
}
 800b2b8:	bf00      	nop
 800b2ba:	bf00      	nop
 800b2bc:	e7fd      	b.n	800b2ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b2be:	f000 ff6d 	bl	800c19c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b2c2:	4b39      	ldr	r3, [pc, #228]	@ (800b3a8 <xTaskResumeAll+0x118>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	3b01      	subs	r3, #1
 800b2c8:	4a37      	ldr	r2, [pc, #220]	@ (800b3a8 <xTaskResumeAll+0x118>)
 800b2ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2cc:	4b36      	ldr	r3, [pc, #216]	@ (800b3a8 <xTaskResumeAll+0x118>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d161      	bne.n	800b398 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b2d4:	4b35      	ldr	r3, [pc, #212]	@ (800b3ac <xTaskResumeAll+0x11c>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d05d      	beq.n	800b398 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2dc:	e02e      	b.n	800b33c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b2de:	4b34      	ldr	r3, [pc, #208]	@ (800b3b0 <xTaskResumeAll+0x120>)
 800b2e0:	68db      	ldr	r3, [r3, #12]
 800b2e2:	68db      	ldr	r3, [r3, #12]
 800b2e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	3318      	adds	r3, #24
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7fe fffc 	bl	800a2e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	3304      	adds	r3, #4
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7fe fff7 	bl	800a2e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2fe:	2201      	movs	r2, #1
 800b300:	409a      	lsls	r2, r3
 800b302:	4b2c      	ldr	r3, [pc, #176]	@ (800b3b4 <xTaskResumeAll+0x124>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4313      	orrs	r3, r2
 800b308:	4a2a      	ldr	r2, [pc, #168]	@ (800b3b4 <xTaskResumeAll+0x124>)
 800b30a:	6013      	str	r3, [r2, #0]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b310:	4613      	mov	r3, r2
 800b312:	009b      	lsls	r3, r3, #2
 800b314:	4413      	add	r3, r2
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	4a27      	ldr	r2, [pc, #156]	@ (800b3b8 <xTaskResumeAll+0x128>)
 800b31a:	441a      	add	r2, r3
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	3304      	adds	r3, #4
 800b320:	4619      	mov	r1, r3
 800b322:	4610      	mov	r0, r2
 800b324:	f7fe ff85 	bl	800a232 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b32c:	4b23      	ldr	r3, [pc, #140]	@ (800b3bc <xTaskResumeAll+0x12c>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b332:	429a      	cmp	r2, r3
 800b334:	d302      	bcc.n	800b33c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b336:	4b22      	ldr	r3, [pc, #136]	@ (800b3c0 <xTaskResumeAll+0x130>)
 800b338:	2201      	movs	r2, #1
 800b33a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b33c:	4b1c      	ldr	r3, [pc, #112]	@ (800b3b0 <xTaskResumeAll+0x120>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d1cc      	bne.n	800b2de <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d001      	beq.n	800b34e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b34a:	f000 fb2b 	bl	800b9a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b34e:	4b1d      	ldr	r3, [pc, #116]	@ (800b3c4 <xTaskResumeAll+0x134>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d010      	beq.n	800b37c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b35a:	f000 f837 	bl	800b3cc <xTaskIncrementTick>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d002      	beq.n	800b36a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b364:	4b16      	ldr	r3, [pc, #88]	@ (800b3c0 <xTaskResumeAll+0x130>)
 800b366:	2201      	movs	r2, #1
 800b368:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	3b01      	subs	r3, #1
 800b36e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d1f1      	bne.n	800b35a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800b376:	4b13      	ldr	r3, [pc, #76]	@ (800b3c4 <xTaskResumeAll+0x134>)
 800b378:	2200      	movs	r2, #0
 800b37a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b37c:	4b10      	ldr	r3, [pc, #64]	@ (800b3c0 <xTaskResumeAll+0x130>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d009      	beq.n	800b398 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b384:	2301      	movs	r3, #1
 800b386:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b388:	4b0f      	ldr	r3, [pc, #60]	@ (800b3c8 <xTaskResumeAll+0x138>)
 800b38a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b38e:	601a      	str	r2, [r3, #0]
 800b390:	f3bf 8f4f 	dsb	sy
 800b394:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b398:	f000 ff30 	bl	800c1fc <vPortExitCritical>

	return xAlreadyYielded;
 800b39c:	68bb      	ldr	r3, [r7, #8]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3710      	adds	r7, #16
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	200009fc 	.word	0x200009fc
 800b3ac:	200009d4 	.word	0x200009d4
 800b3b0:	20000994 	.word	0x20000994
 800b3b4:	200009dc 	.word	0x200009dc
 800b3b8:	200008d8 	.word	0x200008d8
 800b3bc:	200008d4 	.word	0x200008d4
 800b3c0:	200009e8 	.word	0x200009e8
 800b3c4:	200009e4 	.word	0x200009e4
 800b3c8:	e000ed04 	.word	0xe000ed04

0800b3cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b086      	sub	sp, #24
 800b3d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3d6:	4b51      	ldr	r3, [pc, #324]	@ (800b51c <xTaskIncrementTick+0x150>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	f040 808e 	bne.w	800b4fc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b3e0:	4b4f      	ldr	r3, [pc, #316]	@ (800b520 <xTaskIncrementTick+0x154>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b3e8:	4a4d      	ldr	r2, [pc, #308]	@ (800b520 <xTaskIncrementTick+0x154>)
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d121      	bne.n	800b438 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b3f4:	4b4b      	ldr	r3, [pc, #300]	@ (800b524 <xTaskIncrementTick+0x158>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d00b      	beq.n	800b416 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b402:	f383 8811 	msr	BASEPRI, r3
 800b406:	f3bf 8f6f 	isb	sy
 800b40a:	f3bf 8f4f 	dsb	sy
 800b40e:	603b      	str	r3, [r7, #0]
}
 800b410:	bf00      	nop
 800b412:	bf00      	nop
 800b414:	e7fd      	b.n	800b412 <xTaskIncrementTick+0x46>
 800b416:	4b43      	ldr	r3, [pc, #268]	@ (800b524 <xTaskIncrementTick+0x158>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	60fb      	str	r3, [r7, #12]
 800b41c:	4b42      	ldr	r3, [pc, #264]	@ (800b528 <xTaskIncrementTick+0x15c>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a40      	ldr	r2, [pc, #256]	@ (800b524 <xTaskIncrementTick+0x158>)
 800b422:	6013      	str	r3, [r2, #0]
 800b424:	4a40      	ldr	r2, [pc, #256]	@ (800b528 <xTaskIncrementTick+0x15c>)
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	6013      	str	r3, [r2, #0]
 800b42a:	4b40      	ldr	r3, [pc, #256]	@ (800b52c <xTaskIncrementTick+0x160>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	3301      	adds	r3, #1
 800b430:	4a3e      	ldr	r2, [pc, #248]	@ (800b52c <xTaskIncrementTick+0x160>)
 800b432:	6013      	str	r3, [r2, #0]
 800b434:	f000 fab6 	bl	800b9a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b438:	4b3d      	ldr	r3, [pc, #244]	@ (800b530 <xTaskIncrementTick+0x164>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	693a      	ldr	r2, [r7, #16]
 800b43e:	429a      	cmp	r2, r3
 800b440:	d34d      	bcc.n	800b4de <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b442:	4b38      	ldr	r3, [pc, #224]	@ (800b524 <xTaskIncrementTick+0x158>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d101      	bne.n	800b450 <xTaskIncrementTick+0x84>
 800b44c:	2301      	movs	r3, #1
 800b44e:	e000      	b.n	800b452 <xTaskIncrementTick+0x86>
 800b450:	2300      	movs	r3, #0
 800b452:	2b00      	cmp	r3, #0
 800b454:	d004      	beq.n	800b460 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b456:	4b36      	ldr	r3, [pc, #216]	@ (800b530 <xTaskIncrementTick+0x164>)
 800b458:	f04f 32ff 	mov.w	r2, #4294967295
 800b45c:	601a      	str	r2, [r3, #0]
					break;
 800b45e:	e03e      	b.n	800b4de <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b460:	4b30      	ldr	r3, [pc, #192]	@ (800b524 <xTaskIncrementTick+0x158>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	68db      	ldr	r3, [r3, #12]
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b470:	693a      	ldr	r2, [r7, #16]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	429a      	cmp	r2, r3
 800b476:	d203      	bcs.n	800b480 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b478:	4a2d      	ldr	r2, [pc, #180]	@ (800b530 <xTaskIncrementTick+0x164>)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6013      	str	r3, [r2, #0]
						break;
 800b47e:	e02e      	b.n	800b4de <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	3304      	adds	r3, #4
 800b484:	4618      	mov	r0, r3
 800b486:	f7fe ff2f 	bl	800a2e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d004      	beq.n	800b49c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	3318      	adds	r3, #24
 800b496:	4618      	mov	r0, r3
 800b498:	f7fe ff26 	bl	800a2e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	409a      	lsls	r2, r3
 800b4a4:	4b23      	ldr	r3, [pc, #140]	@ (800b534 <xTaskIncrementTick+0x168>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	4a22      	ldr	r2, [pc, #136]	@ (800b534 <xTaskIncrementTick+0x168>)
 800b4ac:	6013      	str	r3, [r2, #0]
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4b2:	4613      	mov	r3, r2
 800b4b4:	009b      	lsls	r3, r3, #2
 800b4b6:	4413      	add	r3, r2
 800b4b8:	009b      	lsls	r3, r3, #2
 800b4ba:	4a1f      	ldr	r2, [pc, #124]	@ (800b538 <xTaskIncrementTick+0x16c>)
 800b4bc:	441a      	add	r2, r3
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	3304      	adds	r3, #4
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	4610      	mov	r0, r2
 800b4c6:	f7fe feb4 	bl	800a232 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4ce:	4b1b      	ldr	r3, [pc, #108]	@ (800b53c <xTaskIncrementTick+0x170>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d3b4      	bcc.n	800b442 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4dc:	e7b1      	b.n	800b442 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b4de:	4b17      	ldr	r3, [pc, #92]	@ (800b53c <xTaskIncrementTick+0x170>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4e4:	4914      	ldr	r1, [pc, #80]	@ (800b538 <xTaskIncrementTick+0x16c>)
 800b4e6:	4613      	mov	r3, r2
 800b4e8:	009b      	lsls	r3, r3, #2
 800b4ea:	4413      	add	r3, r2
 800b4ec:	009b      	lsls	r3, r3, #2
 800b4ee:	440b      	add	r3, r1
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d907      	bls.n	800b506 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	617b      	str	r3, [r7, #20]
 800b4fa:	e004      	b.n	800b506 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b4fc:	4b10      	ldr	r3, [pc, #64]	@ (800b540 <xTaskIncrementTick+0x174>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	3301      	adds	r3, #1
 800b502:	4a0f      	ldr	r2, [pc, #60]	@ (800b540 <xTaskIncrementTick+0x174>)
 800b504:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b506:	4b0f      	ldr	r3, [pc, #60]	@ (800b544 <xTaskIncrementTick+0x178>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d001      	beq.n	800b512 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800b50e:	2301      	movs	r3, #1
 800b510:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b512:	697b      	ldr	r3, [r7, #20]
}
 800b514:	4618      	mov	r0, r3
 800b516:	3718      	adds	r7, #24
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	200009fc 	.word	0x200009fc
 800b520:	200009d8 	.word	0x200009d8
 800b524:	2000098c 	.word	0x2000098c
 800b528:	20000990 	.word	0x20000990
 800b52c:	200009ec 	.word	0x200009ec
 800b530:	200009f4 	.word	0x200009f4
 800b534:	200009dc 	.word	0x200009dc
 800b538:	200008d8 	.word	0x200008d8
 800b53c:	200008d4 	.word	0x200008d4
 800b540:	200009e4 	.word	0x200009e4
 800b544:	200009e8 	.word	0x200009e8

0800b548 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b548:	b480      	push	{r7}
 800b54a:	b087      	sub	sp, #28
 800b54c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b54e:	4b29      	ldr	r3, [pc, #164]	@ (800b5f4 <vTaskSwitchContext+0xac>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d003      	beq.n	800b55e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b556:	4b28      	ldr	r3, [pc, #160]	@ (800b5f8 <vTaskSwitchContext+0xb0>)
 800b558:	2201      	movs	r2, #1
 800b55a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b55c:	e045      	b.n	800b5ea <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800b55e:	4b26      	ldr	r3, [pc, #152]	@ (800b5f8 <vTaskSwitchContext+0xb0>)
 800b560:	2200      	movs	r2, #0
 800b562:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b564:	4b25      	ldr	r3, [pc, #148]	@ (800b5fc <vTaskSwitchContext+0xb4>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	fab3 f383 	clz	r3, r3
 800b570:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b572:	7afb      	ldrb	r3, [r7, #11]
 800b574:	f1c3 031f 	rsb	r3, r3, #31
 800b578:	617b      	str	r3, [r7, #20]
 800b57a:	4921      	ldr	r1, [pc, #132]	@ (800b600 <vTaskSwitchContext+0xb8>)
 800b57c:	697a      	ldr	r2, [r7, #20]
 800b57e:	4613      	mov	r3, r2
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	4413      	add	r3, r2
 800b584:	009b      	lsls	r3, r3, #2
 800b586:	440b      	add	r3, r1
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d10b      	bne.n	800b5a6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800b58e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b592:	f383 8811 	msr	BASEPRI, r3
 800b596:	f3bf 8f6f 	isb	sy
 800b59a:	f3bf 8f4f 	dsb	sy
 800b59e:	607b      	str	r3, [r7, #4]
}
 800b5a0:	bf00      	nop
 800b5a2:	bf00      	nop
 800b5a4:	e7fd      	b.n	800b5a2 <vTaskSwitchContext+0x5a>
 800b5a6:	697a      	ldr	r2, [r7, #20]
 800b5a8:	4613      	mov	r3, r2
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	4413      	add	r3, r2
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	4a13      	ldr	r2, [pc, #76]	@ (800b600 <vTaskSwitchContext+0xb8>)
 800b5b2:	4413      	add	r3, r2
 800b5b4:	613b      	str	r3, [r7, #16]
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	685a      	ldr	r2, [r3, #4]
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	605a      	str	r2, [r3, #4]
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	685a      	ldr	r2, [r3, #4]
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	3308      	adds	r3, #8
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d104      	bne.n	800b5d6 <vTaskSwitchContext+0x8e>
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	685a      	ldr	r2, [r3, #4]
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	605a      	str	r2, [r3, #4]
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	4a09      	ldr	r2, [pc, #36]	@ (800b604 <vTaskSwitchContext+0xbc>)
 800b5de:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b5e0:	4b08      	ldr	r3, [pc, #32]	@ (800b604 <vTaskSwitchContext+0xbc>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	335c      	adds	r3, #92	@ 0x5c
 800b5e6:	4a08      	ldr	r2, [pc, #32]	@ (800b608 <vTaskSwitchContext+0xc0>)
 800b5e8:	6013      	str	r3, [r2, #0]
}
 800b5ea:	bf00      	nop
 800b5ec:	371c      	adds	r7, #28
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bc80      	pop	{r7}
 800b5f2:	4770      	bx	lr
 800b5f4:	200009fc 	.word	0x200009fc
 800b5f8:	200009e8 	.word	0x200009e8
 800b5fc:	200009dc 	.word	0x200009dc
 800b600:	200008d8 	.word	0x200008d8
 800b604:	200008d4 	.word	0x200008d4
 800b608:	20000284 	.word	0x20000284

0800b60c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d10b      	bne.n	800b634 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b61c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b620:	f383 8811 	msr	BASEPRI, r3
 800b624:	f3bf 8f6f 	isb	sy
 800b628:	f3bf 8f4f 	dsb	sy
 800b62c:	60fb      	str	r3, [r7, #12]
}
 800b62e:	bf00      	nop
 800b630:	bf00      	nop
 800b632:	e7fd      	b.n	800b630 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b634:	4b07      	ldr	r3, [pc, #28]	@ (800b654 <vTaskPlaceOnEventList+0x48>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	3318      	adds	r3, #24
 800b63a:	4619      	mov	r1, r3
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f7fe fe1b 	bl	800a278 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b642:	2101      	movs	r1, #1
 800b644:	6838      	ldr	r0, [r7, #0]
 800b646:	f000 fc55 	bl	800bef4 <prvAddCurrentTaskToDelayedList>
}
 800b64a:	bf00      	nop
 800b64c:	3710      	adds	r7, #16
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	200008d4 	.word	0x200008d4

0800b658 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b086      	sub	sp, #24
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	68db      	ldr	r3, [r3, #12]
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d10b      	bne.n	800b686 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b672:	f383 8811 	msr	BASEPRI, r3
 800b676:	f3bf 8f6f 	isb	sy
 800b67a:	f3bf 8f4f 	dsb	sy
 800b67e:	60fb      	str	r3, [r7, #12]
}
 800b680:	bf00      	nop
 800b682:	bf00      	nop
 800b684:	e7fd      	b.n	800b682 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	3318      	adds	r3, #24
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7fe fe2c 	bl	800a2e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b690:	4b1d      	ldr	r3, [pc, #116]	@ (800b708 <xTaskRemoveFromEventList+0xb0>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d11c      	bne.n	800b6d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	3304      	adds	r3, #4
 800b69c:	4618      	mov	r0, r3
 800b69e:	f7fe fe23 	bl	800a2e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	409a      	lsls	r2, r3
 800b6aa:	4b18      	ldr	r3, [pc, #96]	@ (800b70c <xTaskRemoveFromEventList+0xb4>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	4a16      	ldr	r2, [pc, #88]	@ (800b70c <xTaskRemoveFromEventList+0xb4>)
 800b6b2:	6013      	str	r3, [r2, #0]
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6b8:	4613      	mov	r3, r2
 800b6ba:	009b      	lsls	r3, r3, #2
 800b6bc:	4413      	add	r3, r2
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	4a13      	ldr	r2, [pc, #76]	@ (800b710 <xTaskRemoveFromEventList+0xb8>)
 800b6c2:	441a      	add	r2, r3
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	3304      	adds	r3, #4
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	4610      	mov	r0, r2
 800b6cc:	f7fe fdb1 	bl	800a232 <vListInsertEnd>
 800b6d0:	e005      	b.n	800b6de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	3318      	adds	r3, #24
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	480e      	ldr	r0, [pc, #56]	@ (800b714 <xTaskRemoveFromEventList+0xbc>)
 800b6da:	f7fe fdaa 	bl	800a232 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6e2:	4b0d      	ldr	r3, [pc, #52]	@ (800b718 <xTaskRemoveFromEventList+0xc0>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d905      	bls.n	800b6f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b6f0:	4b0a      	ldr	r3, [pc, #40]	@ (800b71c <xTaskRemoveFromEventList+0xc4>)
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	601a      	str	r2, [r3, #0]
 800b6f6:	e001      	b.n	800b6fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b6fc:	697b      	ldr	r3, [r7, #20]
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3718      	adds	r7, #24
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	200009fc 	.word	0x200009fc
 800b70c:	200009dc 	.word	0x200009dc
 800b710:	200008d8 	.word	0x200008d8
 800b714:	20000994 	.word	0x20000994
 800b718:	200008d4 	.word	0x200008d4
 800b71c:	200009e8 	.word	0x200009e8

0800b720 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b728:	4b06      	ldr	r3, [pc, #24]	@ (800b744 <vTaskInternalSetTimeOutState+0x24>)
 800b72a:	681a      	ldr	r2, [r3, #0]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b730:	4b05      	ldr	r3, [pc, #20]	@ (800b748 <vTaskInternalSetTimeOutState+0x28>)
 800b732:	681a      	ldr	r2, [r3, #0]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	605a      	str	r2, [r3, #4]
}
 800b738:	bf00      	nop
 800b73a:	370c      	adds	r7, #12
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bc80      	pop	{r7}
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop
 800b744:	200009ec 	.word	0x200009ec
 800b748:	200009d8 	.word	0x200009d8

0800b74c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b088      	sub	sp, #32
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d10b      	bne.n	800b774 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b75c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b760:	f383 8811 	msr	BASEPRI, r3
 800b764:	f3bf 8f6f 	isb	sy
 800b768:	f3bf 8f4f 	dsb	sy
 800b76c:	613b      	str	r3, [r7, #16]
}
 800b76e:	bf00      	nop
 800b770:	bf00      	nop
 800b772:	e7fd      	b.n	800b770 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d10b      	bne.n	800b792 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b77a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b77e:	f383 8811 	msr	BASEPRI, r3
 800b782:	f3bf 8f6f 	isb	sy
 800b786:	f3bf 8f4f 	dsb	sy
 800b78a:	60fb      	str	r3, [r7, #12]
}
 800b78c:	bf00      	nop
 800b78e:	bf00      	nop
 800b790:	e7fd      	b.n	800b78e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b792:	f000 fd03 	bl	800c19c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b796:	4b1d      	ldr	r3, [pc, #116]	@ (800b80c <xTaskCheckForTimeOut+0xc0>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	69ba      	ldr	r2, [r7, #24]
 800b7a2:	1ad3      	subs	r3, r2, r3
 800b7a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7ae:	d102      	bne.n	800b7b6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	61fb      	str	r3, [r7, #28]
 800b7b4:	e023      	b.n	800b7fe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	4b15      	ldr	r3, [pc, #84]	@ (800b810 <xTaskCheckForTimeOut+0xc4>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d007      	beq.n	800b7d2 <xTaskCheckForTimeOut+0x86>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	69ba      	ldr	r2, [r7, #24]
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d302      	bcc.n	800b7d2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	61fb      	str	r3, [r7, #28]
 800b7d0:	e015      	b.n	800b7fe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	697a      	ldr	r2, [r7, #20]
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d20b      	bcs.n	800b7f4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	1ad2      	subs	r2, r2, r3
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f7ff ff99 	bl	800b720 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	61fb      	str	r3, [r7, #28]
 800b7f2:	e004      	b.n	800b7fe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b7fe:	f000 fcfd 	bl	800c1fc <vPortExitCritical>

	return xReturn;
 800b802:	69fb      	ldr	r3, [r7, #28]
}
 800b804:	4618      	mov	r0, r3
 800b806:	3720      	adds	r7, #32
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}
 800b80c:	200009d8 	.word	0x200009d8
 800b810:	200009ec 	.word	0x200009ec

0800b814 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b814:	b480      	push	{r7}
 800b816:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b818:	4b03      	ldr	r3, [pc, #12]	@ (800b828 <vTaskMissedYield+0x14>)
 800b81a:	2201      	movs	r2, #1
 800b81c:	601a      	str	r2, [r3, #0]
}
 800b81e:	bf00      	nop
 800b820:	46bd      	mov	sp, r7
 800b822:	bc80      	pop	{r7}
 800b824:	4770      	bx	lr
 800b826:	bf00      	nop
 800b828:	200009e8 	.word	0x200009e8

0800b82c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b834:	f000 f852 	bl	800b8dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b838:	4b06      	ldr	r3, [pc, #24]	@ (800b854 <prvIdleTask+0x28>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d9f9      	bls.n	800b834 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b840:	4b05      	ldr	r3, [pc, #20]	@ (800b858 <prvIdleTask+0x2c>)
 800b842:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b846:	601a      	str	r2, [r3, #0]
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b850:	e7f0      	b.n	800b834 <prvIdleTask+0x8>
 800b852:	bf00      	nop
 800b854:	200008d8 	.word	0x200008d8
 800b858:	e000ed04 	.word	0xe000ed04

0800b85c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b082      	sub	sp, #8
 800b860:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b862:	2300      	movs	r3, #0
 800b864:	607b      	str	r3, [r7, #4]
 800b866:	e00c      	b.n	800b882 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	4613      	mov	r3, r2
 800b86c:	009b      	lsls	r3, r3, #2
 800b86e:	4413      	add	r3, r2
 800b870:	009b      	lsls	r3, r3, #2
 800b872:	4a12      	ldr	r2, [pc, #72]	@ (800b8bc <prvInitialiseTaskLists+0x60>)
 800b874:	4413      	add	r3, r2
 800b876:	4618      	mov	r0, r3
 800b878:	f7fe fcb0 	bl	800a1dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	3301      	adds	r3, #1
 800b880:	607b      	str	r3, [r7, #4]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2b06      	cmp	r3, #6
 800b886:	d9ef      	bls.n	800b868 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b888:	480d      	ldr	r0, [pc, #52]	@ (800b8c0 <prvInitialiseTaskLists+0x64>)
 800b88a:	f7fe fca7 	bl	800a1dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b88e:	480d      	ldr	r0, [pc, #52]	@ (800b8c4 <prvInitialiseTaskLists+0x68>)
 800b890:	f7fe fca4 	bl	800a1dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b894:	480c      	ldr	r0, [pc, #48]	@ (800b8c8 <prvInitialiseTaskLists+0x6c>)
 800b896:	f7fe fca1 	bl	800a1dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b89a:	480c      	ldr	r0, [pc, #48]	@ (800b8cc <prvInitialiseTaskLists+0x70>)
 800b89c:	f7fe fc9e 	bl	800a1dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b8a0:	480b      	ldr	r0, [pc, #44]	@ (800b8d0 <prvInitialiseTaskLists+0x74>)
 800b8a2:	f7fe fc9b 	bl	800a1dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b8a6:	4b0b      	ldr	r3, [pc, #44]	@ (800b8d4 <prvInitialiseTaskLists+0x78>)
 800b8a8:	4a05      	ldr	r2, [pc, #20]	@ (800b8c0 <prvInitialiseTaskLists+0x64>)
 800b8aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b8ac:	4b0a      	ldr	r3, [pc, #40]	@ (800b8d8 <prvInitialiseTaskLists+0x7c>)
 800b8ae:	4a05      	ldr	r2, [pc, #20]	@ (800b8c4 <prvInitialiseTaskLists+0x68>)
 800b8b0:	601a      	str	r2, [r3, #0]
}
 800b8b2:	bf00      	nop
 800b8b4:	3708      	adds	r7, #8
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	200008d8 	.word	0x200008d8
 800b8c0:	20000964 	.word	0x20000964
 800b8c4:	20000978 	.word	0x20000978
 800b8c8:	20000994 	.word	0x20000994
 800b8cc:	200009a8 	.word	0x200009a8
 800b8d0:	200009c0 	.word	0x200009c0
 800b8d4:	2000098c 	.word	0x2000098c
 800b8d8:	20000990 	.word	0x20000990

0800b8dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b082      	sub	sp, #8
 800b8e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b8e2:	e019      	b.n	800b918 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b8e4:	f000 fc5a 	bl	800c19c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b8e8:	4b10      	ldr	r3, [pc, #64]	@ (800b92c <prvCheckTasksWaitingTermination+0x50>)
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	3304      	adds	r3, #4
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7fe fcf7 	bl	800a2e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b8fa:	4b0d      	ldr	r3, [pc, #52]	@ (800b930 <prvCheckTasksWaitingTermination+0x54>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	3b01      	subs	r3, #1
 800b900:	4a0b      	ldr	r2, [pc, #44]	@ (800b930 <prvCheckTasksWaitingTermination+0x54>)
 800b902:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b904:	4b0b      	ldr	r3, [pc, #44]	@ (800b934 <prvCheckTasksWaitingTermination+0x58>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	3b01      	subs	r3, #1
 800b90a:	4a0a      	ldr	r2, [pc, #40]	@ (800b934 <prvCheckTasksWaitingTermination+0x58>)
 800b90c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b90e:	f000 fc75 	bl	800c1fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 f810 	bl	800b938 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b918:	4b06      	ldr	r3, [pc, #24]	@ (800b934 <prvCheckTasksWaitingTermination+0x58>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d1e1      	bne.n	800b8e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b920:	bf00      	nop
 800b922:	bf00      	nop
 800b924:	3708      	adds	r7, #8
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	200009a8 	.word	0x200009a8
 800b930:	200009d4 	.word	0x200009d4
 800b934:	200009bc 	.word	0x200009bc

0800b938 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	335c      	adds	r3, #92	@ 0x5c
 800b944:	4618      	mov	r0, r3
 800b946:	f003 fa39 	bl	800edbc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b950:	2b00      	cmp	r3, #0
 800b952:	d108      	bne.n	800b966 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b958:	4618      	mov	r0, r3
 800b95a:	f000 fde9 	bl	800c530 <vPortFree>
				vPortFree( pxTCB );
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 fde6 	bl	800c530 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b964:	e019      	b.n	800b99a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d103      	bne.n	800b978 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 fddd 	bl	800c530 <vPortFree>
	}
 800b976:	e010      	b.n	800b99a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b97e:	2b02      	cmp	r3, #2
 800b980:	d00b      	beq.n	800b99a <prvDeleteTCB+0x62>
	__asm volatile
 800b982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b986:	f383 8811 	msr	BASEPRI, r3
 800b98a:	f3bf 8f6f 	isb	sy
 800b98e:	f3bf 8f4f 	dsb	sy
 800b992:	60fb      	str	r3, [r7, #12]
}
 800b994:	bf00      	nop
 800b996:	bf00      	nop
 800b998:	e7fd      	b.n	800b996 <prvDeleteTCB+0x5e>
	}
 800b99a:	bf00      	nop
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
	...

0800b9a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9aa:	4b0e      	ldr	r3, [pc, #56]	@ (800b9e4 <prvResetNextTaskUnblockTime+0x40>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d101      	bne.n	800b9b8 <prvResetNextTaskUnblockTime+0x14>
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	e000      	b.n	800b9ba <prvResetNextTaskUnblockTime+0x16>
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d004      	beq.n	800b9c8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b9be:	4b0a      	ldr	r3, [pc, #40]	@ (800b9e8 <prvResetNextTaskUnblockTime+0x44>)
 800b9c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b9c4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b9c6:	e008      	b.n	800b9da <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b9c8:	4b06      	ldr	r3, [pc, #24]	@ (800b9e4 <prvResetNextTaskUnblockTime+0x40>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	68db      	ldr	r3, [r3, #12]
 800b9ce:	68db      	ldr	r3, [r3, #12]
 800b9d0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	4a04      	ldr	r2, [pc, #16]	@ (800b9e8 <prvResetNextTaskUnblockTime+0x44>)
 800b9d8:	6013      	str	r3, [r2, #0]
}
 800b9da:	bf00      	nop
 800b9dc:	370c      	adds	r7, #12
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bc80      	pop	{r7}
 800b9e2:	4770      	bx	lr
 800b9e4:	2000098c 	.word	0x2000098c
 800b9e8:	200009f4 	.word	0x200009f4

0800b9ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b083      	sub	sp, #12
 800b9f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b9f2:	4b0b      	ldr	r3, [pc, #44]	@ (800ba20 <xTaskGetSchedulerState+0x34>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d102      	bne.n	800ba00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	607b      	str	r3, [r7, #4]
 800b9fe:	e008      	b.n	800ba12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba00:	4b08      	ldr	r3, [pc, #32]	@ (800ba24 <xTaskGetSchedulerState+0x38>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d102      	bne.n	800ba0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ba08:	2302      	movs	r3, #2
 800ba0a:	607b      	str	r3, [r7, #4]
 800ba0c:	e001      	b.n	800ba12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ba12:	687b      	ldr	r3, [r7, #4]
	}
 800ba14:	4618      	mov	r0, r3
 800ba16:	370c      	adds	r7, #12
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bc80      	pop	{r7}
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop
 800ba20:	200009e0 	.word	0x200009e0
 800ba24:	200009fc 	.word	0x200009fc

0800ba28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b086      	sub	sp, #24
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ba34:	2300      	movs	r3, #0
 800ba36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d070      	beq.n	800bb20 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ba3e:	4b3b      	ldr	r3, [pc, #236]	@ (800bb2c <xTaskPriorityDisinherit+0x104>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	693a      	ldr	r2, [r7, #16]
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d00b      	beq.n	800ba60 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ba48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba4c:	f383 8811 	msr	BASEPRI, r3
 800ba50:	f3bf 8f6f 	isb	sy
 800ba54:	f3bf 8f4f 	dsb	sy
 800ba58:	60fb      	str	r3, [r7, #12]
}
 800ba5a:	bf00      	nop
 800ba5c:	bf00      	nop
 800ba5e:	e7fd      	b.n	800ba5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d10b      	bne.n	800ba80 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ba68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba6c:	f383 8811 	msr	BASEPRI, r3
 800ba70:	f3bf 8f6f 	isb	sy
 800ba74:	f3bf 8f4f 	dsb	sy
 800ba78:	60bb      	str	r3, [r7, #8]
}
 800ba7a:	bf00      	nop
 800ba7c:	bf00      	nop
 800ba7e:	e7fd      	b.n	800ba7c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba84:	1e5a      	subs	r2, r3, #1
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	659a      	str	r2, [r3, #88]	@ 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d044      	beq.n	800bb20 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d140      	bne.n	800bb20 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	3304      	adds	r3, #4
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7fe fc20 	bl	800a2e8 <uxListRemove>
 800baa8:	4603      	mov	r3, r0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d115      	bne.n	800bada <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bab2:	491f      	ldr	r1, [pc, #124]	@ (800bb30 <xTaskPriorityDisinherit+0x108>)
 800bab4:	4613      	mov	r3, r2
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	4413      	add	r3, r2
 800baba:	009b      	lsls	r3, r3, #2
 800babc:	440b      	add	r3, r1
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d10a      	bne.n	800bada <xTaskPriorityDisinherit+0xb2>
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bac8:	2201      	movs	r2, #1
 800baca:	fa02 f303 	lsl.w	r3, r2, r3
 800bace:	43da      	mvns	r2, r3
 800bad0:	4b18      	ldr	r3, [pc, #96]	@ (800bb34 <xTaskPriorityDisinherit+0x10c>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4013      	ands	r3, r2
 800bad6:	4a17      	ldr	r2, [pc, #92]	@ (800bb34 <xTaskPriorityDisinherit+0x10c>)
 800bad8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bae6:	f1c3 0207 	rsb	r2, r3, #7
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baf2:	2201      	movs	r2, #1
 800baf4:	409a      	lsls	r2, r3
 800baf6:	4b0f      	ldr	r3, [pc, #60]	@ (800bb34 <xTaskPriorityDisinherit+0x10c>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4313      	orrs	r3, r2
 800bafc:	4a0d      	ldr	r2, [pc, #52]	@ (800bb34 <xTaskPriorityDisinherit+0x10c>)
 800bafe:	6013      	str	r3, [r2, #0]
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb04:	4613      	mov	r3, r2
 800bb06:	009b      	lsls	r3, r3, #2
 800bb08:	4413      	add	r3, r2
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	4a08      	ldr	r2, [pc, #32]	@ (800bb30 <xTaskPriorityDisinherit+0x108>)
 800bb0e:	441a      	add	r2, r3
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	3304      	adds	r3, #4
 800bb14:	4619      	mov	r1, r3
 800bb16:	4610      	mov	r0, r2
 800bb18:	f7fe fb8b 	bl	800a232 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb20:	697b      	ldr	r3, [r7, #20]
	}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3718      	adds	r7, #24
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	200008d4 	.word	0x200008d4
 800bb30:	200008d8 	.word	0x200008d8
 800bb34:	200009dc 	.word	0x200009dc

0800bb38 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b086      	sub	sp, #24
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	607a      	str	r2, [r7, #4]
 800bb44:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800bb46:	f000 fb29 	bl	800c19c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800bb4a:	4b29      	ldr	r3, [pc, #164]	@ (800bbf0 <xTaskNotifyWait+0xb8>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	2b02      	cmp	r3, #2
 800bb56:	d01c      	beq.n	800bb92 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800bb58:	4b25      	ldr	r3, [pc, #148]	@ (800bbf0 <xTaskNotifyWait+0xb8>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f8d3 10a8 	ldr.w	r1, [r3, #168]	@ 0xa8
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	43d2      	mvns	r2, r2
 800bb64:	400a      	ands	r2, r1
 800bb66:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800bb6a:	4b21      	ldr	r3, [pc, #132]	@ (800bbf0 <xTaskNotifyWait+0xb8>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	2201      	movs	r2, #1
 800bb70:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac

				if( xTicksToWait > ( TickType_t ) 0 )
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d00b      	beq.n	800bb92 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bb7a:	2101      	movs	r1, #1
 800bb7c:	6838      	ldr	r0, [r7, #0]
 800bb7e:	f000 f9b9 	bl	800bef4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800bb82:	4b1c      	ldr	r3, [pc, #112]	@ (800bbf4 <xTaskNotifyWait+0xbc>)
 800bb84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb88:	601a      	str	r2, [r3, #0]
 800bb8a:	f3bf 8f4f 	dsb	sy
 800bb8e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bb92:	f000 fb33 	bl	800c1fc <vPortExitCritical>

		taskENTER_CRITICAL();
 800bb96:	f000 fb01 	bl	800c19c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d005      	beq.n	800bbac <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800bba0:	4b13      	ldr	r3, [pc, #76]	@ (800bbf0 <xTaskNotifyWait+0xb8>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800bbac:	4b10      	ldr	r3, [pc, #64]	@ (800bbf0 <xTaskNotifyWait+0xb8>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bbb4:	b2db      	uxtb	r3, r3
 800bbb6:	2b02      	cmp	r3, #2
 800bbb8:	d002      	beq.n	800bbc0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	617b      	str	r3, [r7, #20]
 800bbbe:	e00a      	b.n	800bbd6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800bbc0:	4b0b      	ldr	r3, [pc, #44]	@ (800bbf0 <xTaskNotifyWait+0xb8>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f8d3 10a8 	ldr.w	r1, [r3, #168]	@ 0xa8
 800bbc8:	68ba      	ldr	r2, [r7, #8]
 800bbca:	43d2      	mvns	r2, r2
 800bbcc:	400a      	ands	r2, r1
 800bbce:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
				xReturn = pdTRUE;
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bbd6:	4b06      	ldr	r3, [pc, #24]	@ (800bbf0 <xTaskNotifyWait+0xb8>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
		}
		taskEXIT_CRITICAL();
 800bbe0:	f000 fb0c 	bl	800c1fc <vPortExitCritical>

		return xReturn;
 800bbe4:	697b      	ldr	r3, [r7, #20]
	}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3718      	adds	r7, #24
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	200008d4 	.word	0x200008d4
 800bbf4:	e000ed04 	.word	0xe000ed04

0800bbf8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b08a      	sub	sp, #40	@ 0x28
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	60b9      	str	r1, [r7, #8]
 800bc02:	603b      	str	r3, [r7, #0]
 800bc04:	4613      	mov	r3, r2
 800bc06:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800bc08:	2301      	movs	r3, #1
 800bc0a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d10b      	bne.n	800bc2a <xTaskGenericNotify+0x32>
	__asm volatile
 800bc12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc16:	f383 8811 	msr	BASEPRI, r3
 800bc1a:	f3bf 8f6f 	isb	sy
 800bc1e:	f3bf 8f4f 	dsb	sy
 800bc22:	61bb      	str	r3, [r7, #24]
}
 800bc24:	bf00      	nop
 800bc26:	bf00      	nop
 800bc28:	e7fd      	b.n	800bc26 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800bc2e:	f000 fab5 	bl	800c19c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d004      	beq.n	800bc42 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bc38:	6a3b      	ldr	r3, [r7, #32]
 800bc3a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bc42:	6a3b      	ldr	r3, [r7, #32]
 800bc44:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bc48:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bc4a:	6a3b      	ldr	r3, [r7, #32]
 800bc4c:	2202      	movs	r2, #2
 800bc4e:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac

			switch( eAction )
 800bc52:	79fb      	ldrb	r3, [r7, #7]
 800bc54:	2b04      	cmp	r3, #4
 800bc56:	d82e      	bhi.n	800bcb6 <xTaskGenericNotify+0xbe>
 800bc58:	a201      	add	r2, pc, #4	@ (adr r2, 800bc60 <xTaskGenericNotify+0x68>)
 800bc5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc5e:	bf00      	nop
 800bc60:	0800bcb7 	.word	0x0800bcb7
 800bc64:	0800bc75 	.word	0x0800bc75
 800bc68:	0800bc87 	.word	0x0800bc87
 800bc6c:	0800bc97 	.word	0x0800bc97
 800bc70:	0800bca1 	.word	0x0800bca1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bc74:	6a3b      	ldr	r3, [r7, #32]
 800bc76:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	431a      	orrs	r2, r3
 800bc7e:	6a3b      	ldr	r3, [r7, #32]
 800bc80:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 800bc84:	e017      	b.n	800bcb6 <xTaskGenericNotify+0xbe>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800bc86:	6a3b      	ldr	r3, [r7, #32]
 800bc88:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bc8c:	1c5a      	adds	r2, r3, #1
 800bc8e:	6a3b      	ldr	r3, [r7, #32]
 800bc90:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 800bc94:	e00f      	b.n	800bcb6 <xTaskGenericNotify+0xbe>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800bc96:	6a3b      	ldr	r3, [r7, #32]
 800bc98:	68ba      	ldr	r2, [r7, #8]
 800bc9a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 800bc9e:	e00a      	b.n	800bcb6 <xTaskGenericNotify+0xbe>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bca0:	7ffb      	ldrb	r3, [r7, #31]
 800bca2:	2b02      	cmp	r3, #2
 800bca4:	d004      	beq.n	800bcb0 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800bca6:	6a3b      	ldr	r3, [r7, #32]
 800bca8:	68ba      	ldr	r2, [r7, #8]
 800bcaa:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800bcae:	e001      	b.n	800bcb4 <xTaskGenericNotify+0xbc>
						xReturn = pdFAIL;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800bcb4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bcb6:	7ffb      	ldrb	r3, [r7, #31]
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d13a      	bne.n	800bd32 <xTaskGenericNotify+0x13a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bcbc:	6a3b      	ldr	r3, [r7, #32]
 800bcbe:	3304      	adds	r3, #4
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f7fe fb11 	bl	800a2e8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800bcc6:	6a3b      	ldr	r3, [r7, #32]
 800bcc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcca:	2201      	movs	r2, #1
 800bccc:	409a      	lsls	r2, r3
 800bcce:	4b1c      	ldr	r3, [pc, #112]	@ (800bd40 <xTaskGenericNotify+0x148>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	4a1a      	ldr	r2, [pc, #104]	@ (800bd40 <xTaskGenericNotify+0x148>)
 800bcd6:	6013      	str	r3, [r2, #0]
 800bcd8:	6a3b      	ldr	r3, [r7, #32]
 800bcda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcdc:	4613      	mov	r3, r2
 800bcde:	009b      	lsls	r3, r3, #2
 800bce0:	4413      	add	r3, r2
 800bce2:	009b      	lsls	r3, r3, #2
 800bce4:	4a17      	ldr	r2, [pc, #92]	@ (800bd44 <xTaskGenericNotify+0x14c>)
 800bce6:	441a      	add	r2, r3
 800bce8:	6a3b      	ldr	r3, [r7, #32]
 800bcea:	3304      	adds	r3, #4
 800bcec:	4619      	mov	r1, r3
 800bcee:	4610      	mov	r0, r2
 800bcf0:	f7fe fa9f 	bl	800a232 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bcf4:	6a3b      	ldr	r3, [r7, #32]
 800bcf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d00b      	beq.n	800bd14 <xTaskGenericNotify+0x11c>
	__asm volatile
 800bcfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd00:	f383 8811 	msr	BASEPRI, r3
 800bd04:	f3bf 8f6f 	isb	sy
 800bd08:	f3bf 8f4f 	dsb	sy
 800bd0c:	617b      	str	r3, [r7, #20]
}
 800bd0e:	bf00      	nop
 800bd10:	bf00      	nop
 800bd12:	e7fd      	b.n	800bd10 <xTaskGenericNotify+0x118>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bd14:	6a3b      	ldr	r3, [r7, #32]
 800bd16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd18:	4b0b      	ldr	r3, [pc, #44]	@ (800bd48 <xTaskGenericNotify+0x150>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d907      	bls.n	800bd32 <xTaskGenericNotify+0x13a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800bd22:	4b0a      	ldr	r3, [pc, #40]	@ (800bd4c <xTaskGenericNotify+0x154>)
 800bd24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd28:	601a      	str	r2, [r3, #0]
 800bd2a:	f3bf 8f4f 	dsb	sy
 800bd2e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bd32:	f000 fa63 	bl	800c1fc <vPortExitCritical>

		return xReturn;
 800bd36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3728      	adds	r7, #40	@ 0x28
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}
 800bd40:	200009dc 	.word	0x200009dc
 800bd44:	200008d8 	.word	0x200008d8
 800bd48:	200008d4 	.word	0x200008d4
 800bd4c:	e000ed04 	.word	0xe000ed04

0800bd50 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b08e      	sub	sp, #56	@ 0x38
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	60f8      	str	r0, [r7, #12]
 800bd58:	60b9      	str	r1, [r7, #8]
 800bd5a:	603b      	str	r3, [r7, #0]
 800bd5c:	4613      	mov	r3, r2
 800bd5e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800bd60:	2301      	movs	r3, #1
 800bd62:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d10b      	bne.n	800bd82 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800bd6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd6e:	f383 8811 	msr	BASEPRI, r3
 800bd72:	f3bf 8f6f 	isb	sy
 800bd76:	f3bf 8f4f 	dsb	sy
 800bd7a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bd7c:	bf00      	nop
 800bd7e:	bf00      	nop
 800bd80:	e7fd      	b.n	800bd7e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bd82:	f000 facd 	bl	800c320 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800bd8a:	f3ef 8211 	mrs	r2, BASEPRI
 800bd8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd92:	f383 8811 	msr	BASEPRI, r3
 800bd96:	f3bf 8f6f 	isb	sy
 800bd9a:	f3bf 8f4f 	dsb	sy
 800bd9e:	623a      	str	r2, [r7, #32]
 800bda0:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800bda2:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bda4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d004      	beq.n	800bdb6 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bdac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdae:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bdb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdb8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bdbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bdc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdc2:	2202      	movs	r2, #2
 800bdc4:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac

			switch( eAction )
 800bdc8:	79fb      	ldrb	r3, [r7, #7]
 800bdca:	2b04      	cmp	r3, #4
 800bdcc:	d82e      	bhi.n	800be2c <xTaskGenericNotifyFromISR+0xdc>
 800bdce:	a201      	add	r2, pc, #4	@ (adr r2, 800bdd4 <xTaskGenericNotifyFromISR+0x84>)
 800bdd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd4:	0800be2d 	.word	0x0800be2d
 800bdd8:	0800bde9 	.word	0x0800bde9
 800bddc:	0800bdfb 	.word	0x0800bdfb
 800bde0:	0800be0b 	.word	0x0800be0b
 800bde4:	0800be15 	.word	0x0800be15
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bde8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdea:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	431a      	orrs	r2, r3
 800bdf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdf4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 800bdf8:	e018      	b.n	800be2c <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800bdfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdfc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800be00:	1c5a      	adds	r2, r3, #1
 800be02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be04:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 800be08:	e010      	b.n	800be2c <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800be0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be0c:	68ba      	ldr	r2, [r7, #8]
 800be0e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 800be12:	e00b      	b.n	800be2c <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800be14:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800be18:	2b02      	cmp	r3, #2
 800be1a:	d004      	beq.n	800be26 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800be1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be1e:	68ba      	ldr	r2, [r7, #8]
 800be20:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800be24:	e001      	b.n	800be2a <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 800be26:	2300      	movs	r3, #0
 800be28:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800be2a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800be2c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800be30:	2b01      	cmp	r3, #1
 800be32:	d147      	bne.n	800bec4 <xTaskGenericNotifyFromISR+0x174>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800be34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d00b      	beq.n	800be54 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800be3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be40:	f383 8811 	msr	BASEPRI, r3
 800be44:	f3bf 8f6f 	isb	sy
 800be48:	f3bf 8f4f 	dsb	sy
 800be4c:	61bb      	str	r3, [r7, #24]
}
 800be4e:	bf00      	nop
 800be50:	bf00      	nop
 800be52:	e7fd      	b.n	800be50 <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be54:	4b21      	ldr	r3, [pc, #132]	@ (800bedc <xTaskGenericNotifyFromISR+0x18c>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d11c      	bne.n	800be96 <xTaskGenericNotifyFromISR+0x146>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be5e:	3304      	adds	r3, #4
 800be60:	4618      	mov	r0, r3
 800be62:	f7fe fa41 	bl	800a2e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800be66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be6a:	2201      	movs	r2, #1
 800be6c:	409a      	lsls	r2, r3
 800be6e:	4b1c      	ldr	r3, [pc, #112]	@ (800bee0 <xTaskGenericNotifyFromISR+0x190>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4313      	orrs	r3, r2
 800be74:	4a1a      	ldr	r2, [pc, #104]	@ (800bee0 <xTaskGenericNotifyFromISR+0x190>)
 800be76:	6013      	str	r3, [r2, #0]
 800be78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be7c:	4613      	mov	r3, r2
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	4413      	add	r3, r2
 800be82:	009b      	lsls	r3, r3, #2
 800be84:	4a17      	ldr	r2, [pc, #92]	@ (800bee4 <xTaskGenericNotifyFromISR+0x194>)
 800be86:	441a      	add	r2, r3
 800be88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be8a:	3304      	adds	r3, #4
 800be8c:	4619      	mov	r1, r3
 800be8e:	4610      	mov	r0, r2
 800be90:	f7fe f9cf 	bl	800a232 <vListInsertEnd>
 800be94:	e005      	b.n	800bea2 <xTaskGenericNotifyFromISR+0x152>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800be96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be98:	3318      	adds	r3, #24
 800be9a:	4619      	mov	r1, r3
 800be9c:	4812      	ldr	r0, [pc, #72]	@ (800bee8 <xTaskGenericNotifyFromISR+0x198>)
 800be9e:	f7fe f9c8 	bl	800a232 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bea6:	4b11      	ldr	r3, [pc, #68]	@ (800beec <xTaskGenericNotifyFromISR+0x19c>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beac:	429a      	cmp	r2, r3
 800beae:	d909      	bls.n	800bec4 <xTaskGenericNotifyFromISR+0x174>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800beb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d003      	beq.n	800bebe <xTaskGenericNotifyFromISR+0x16e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800beb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800beb8:	2201      	movs	r2, #1
 800beba:	601a      	str	r2, [r3, #0]
 800bebc:	e002      	b.n	800bec4 <xTaskGenericNotifyFromISR+0x174>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800bebe:	4b0c      	ldr	r3, [pc, #48]	@ (800bef0 <xTaskGenericNotifyFromISR+0x1a0>)
 800bec0:	2201      	movs	r2, #1
 800bec2:	601a      	str	r2, [r3, #0]
 800bec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bec6:	617b      	str	r3, [r7, #20]
	__asm volatile
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	f383 8811 	msr	BASEPRI, r3
}
 800bece:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800bed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3738      	adds	r7, #56	@ 0x38
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	200009fc 	.word	0x200009fc
 800bee0:	200009dc 	.word	0x200009dc
 800bee4:	200008d8 	.word	0x200008d8
 800bee8:	20000994 	.word	0x20000994
 800beec:	200008d4 	.word	0x200008d4
 800bef0:	200009e8 	.word	0x200009e8

0800bef4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800befe:	4b29      	ldr	r3, [pc, #164]	@ (800bfa4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf04:	4b28      	ldr	r3, [pc, #160]	@ (800bfa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	3304      	adds	r3, #4
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7fe f9ec 	bl	800a2e8 <uxListRemove>
 800bf10:	4603      	mov	r3, r0
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d10b      	bne.n	800bf2e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800bf16:	4b24      	ldr	r3, [pc, #144]	@ (800bfa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	fa02 f303 	lsl.w	r3, r2, r3
 800bf22:	43da      	mvns	r2, r3
 800bf24:	4b21      	ldr	r3, [pc, #132]	@ (800bfac <prvAddCurrentTaskToDelayedList+0xb8>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4013      	ands	r3, r2
 800bf2a:	4a20      	ldr	r2, [pc, #128]	@ (800bfac <prvAddCurrentTaskToDelayedList+0xb8>)
 800bf2c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf34:	d10a      	bne.n	800bf4c <prvAddCurrentTaskToDelayedList+0x58>
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d007      	beq.n	800bf4c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf3c:	4b1a      	ldr	r3, [pc, #104]	@ (800bfa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	3304      	adds	r3, #4
 800bf42:	4619      	mov	r1, r3
 800bf44:	481a      	ldr	r0, [pc, #104]	@ (800bfb0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bf46:	f7fe f974 	bl	800a232 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bf4a:	e026      	b.n	800bf9a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bf4c:	68fa      	ldr	r2, [r7, #12]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	4413      	add	r3, r2
 800bf52:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bf54:	4b14      	ldr	r3, [pc, #80]	@ (800bfa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	68ba      	ldr	r2, [r7, #8]
 800bf5a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf5c:	68ba      	ldr	r2, [r7, #8]
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d209      	bcs.n	800bf78 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf64:	4b13      	ldr	r3, [pc, #76]	@ (800bfb4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	4b0f      	ldr	r3, [pc, #60]	@ (800bfa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	3304      	adds	r3, #4
 800bf6e:	4619      	mov	r1, r3
 800bf70:	4610      	mov	r0, r2
 800bf72:	f7fe f981 	bl	800a278 <vListInsert>
}
 800bf76:	e010      	b.n	800bf9a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf78:	4b0f      	ldr	r3, [pc, #60]	@ (800bfb8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bf7a:	681a      	ldr	r2, [r3, #0]
 800bf7c:	4b0a      	ldr	r3, [pc, #40]	@ (800bfa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	3304      	adds	r3, #4
 800bf82:	4619      	mov	r1, r3
 800bf84:	4610      	mov	r0, r2
 800bf86:	f7fe f977 	bl	800a278 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bf8a:	4b0c      	ldr	r3, [pc, #48]	@ (800bfbc <prvAddCurrentTaskToDelayedList+0xc8>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	68ba      	ldr	r2, [r7, #8]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d202      	bcs.n	800bf9a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bf94:	4a09      	ldr	r2, [pc, #36]	@ (800bfbc <prvAddCurrentTaskToDelayedList+0xc8>)
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	6013      	str	r3, [r2, #0]
}
 800bf9a:	bf00      	nop
 800bf9c:	3710      	adds	r7, #16
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	bf00      	nop
 800bfa4:	200009d8 	.word	0x200009d8
 800bfa8:	200008d4 	.word	0x200008d4
 800bfac:	200009dc 	.word	0x200009dc
 800bfb0:	200009c0 	.word	0x200009c0
 800bfb4:	20000990 	.word	0x20000990
 800bfb8:	2000098c 	.word	0x2000098c
 800bfbc:	200009f4 	.word	0x200009f4

0800bfc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b085      	sub	sp, #20
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	60f8      	str	r0, [r7, #12]
 800bfc8:	60b9      	str	r1, [r7, #8]
 800bfca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	3b04      	subs	r3, #4
 800bfd0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bfd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	3b04      	subs	r3, #4
 800bfde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	f023 0201 	bic.w	r2, r3, #1
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	3b04      	subs	r3, #4
 800bfee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bff0:	4a08      	ldr	r2, [pc, #32]	@ (800c014 <pxPortInitialiseStack+0x54>)
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	3b14      	subs	r3, #20
 800bffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	3b20      	subs	r3, #32
 800c006:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c008:	68fb      	ldr	r3, [r7, #12]
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3714      	adds	r7, #20
 800c00e:	46bd      	mov	sp, r7
 800c010:	bc80      	pop	{r7}
 800c012:	4770      	bx	lr
 800c014:	0800c019 	.word	0x0800c019

0800c018 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c018:	b480      	push	{r7}
 800c01a:	b085      	sub	sp, #20
 800c01c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c01e:	2300      	movs	r3, #0
 800c020:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c022:	4b12      	ldr	r3, [pc, #72]	@ (800c06c <prvTaskExitError+0x54>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c02a:	d00b      	beq.n	800c044 <prvTaskExitError+0x2c>
	__asm volatile
 800c02c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c030:	f383 8811 	msr	BASEPRI, r3
 800c034:	f3bf 8f6f 	isb	sy
 800c038:	f3bf 8f4f 	dsb	sy
 800c03c:	60fb      	str	r3, [r7, #12]
}
 800c03e:	bf00      	nop
 800c040:	bf00      	nop
 800c042:	e7fd      	b.n	800c040 <prvTaskExitError+0x28>
	__asm volatile
 800c044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c048:	f383 8811 	msr	BASEPRI, r3
 800c04c:	f3bf 8f6f 	isb	sy
 800c050:	f3bf 8f4f 	dsb	sy
 800c054:	60bb      	str	r3, [r7, #8]
}
 800c056:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c058:	bf00      	nop
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d0fc      	beq.n	800c05a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c060:	bf00      	nop
 800c062:	bf00      	nop
 800c064:	3714      	adds	r7, #20
 800c066:	46bd      	mov	sp, r7
 800c068:	bc80      	pop	{r7}
 800c06a:	4770      	bx	lr
 800c06c:	20000100 	.word	0x20000100

0800c070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c070:	4b07      	ldr	r3, [pc, #28]	@ (800c090 <pxCurrentTCBConst2>)
 800c072:	6819      	ldr	r1, [r3, #0]
 800c074:	6808      	ldr	r0, [r1, #0]
 800c076:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c07a:	f380 8809 	msr	PSP, r0
 800c07e:	f3bf 8f6f 	isb	sy
 800c082:	f04f 0000 	mov.w	r0, #0
 800c086:	f380 8811 	msr	BASEPRI, r0
 800c08a:	f04e 0e0d 	orr.w	lr, lr, #13
 800c08e:	4770      	bx	lr

0800c090 <pxCurrentTCBConst2>:
 800c090:	200008d4 	.word	0x200008d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c094:	bf00      	nop
 800c096:	bf00      	nop

0800c098 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c098:	4806      	ldr	r0, [pc, #24]	@ (800c0b4 <prvPortStartFirstTask+0x1c>)
 800c09a:	6800      	ldr	r0, [r0, #0]
 800c09c:	6800      	ldr	r0, [r0, #0]
 800c09e:	f380 8808 	msr	MSP, r0
 800c0a2:	b662      	cpsie	i
 800c0a4:	b661      	cpsie	f
 800c0a6:	f3bf 8f4f 	dsb	sy
 800c0aa:	f3bf 8f6f 	isb	sy
 800c0ae:	df00      	svc	0
 800c0b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c0b2:	bf00      	nop
 800c0b4:	e000ed08 	.word	0xe000ed08

0800c0b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c0be:	4b32      	ldr	r3, [pc, #200]	@ (800c188 <xPortStartScheduler+0xd0>)
 800c0c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	b2db      	uxtb	r3, r3
 800c0c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	22ff      	movs	r2, #255	@ 0xff
 800c0ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	b2db      	uxtb	r3, r3
 800c0d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c0d8:	78fb      	ldrb	r3, [r7, #3]
 800c0da:	b2db      	uxtb	r3, r3
 800c0dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c0e0:	b2da      	uxtb	r2, r3
 800c0e2:	4b2a      	ldr	r3, [pc, #168]	@ (800c18c <xPortStartScheduler+0xd4>)
 800c0e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c0e6:	4b2a      	ldr	r3, [pc, #168]	@ (800c190 <xPortStartScheduler+0xd8>)
 800c0e8:	2207      	movs	r2, #7
 800c0ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c0ec:	e009      	b.n	800c102 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c0ee:	4b28      	ldr	r3, [pc, #160]	@ (800c190 <xPortStartScheduler+0xd8>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	3b01      	subs	r3, #1
 800c0f4:	4a26      	ldr	r2, [pc, #152]	@ (800c190 <xPortStartScheduler+0xd8>)
 800c0f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c0f8:	78fb      	ldrb	r3, [r7, #3]
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	005b      	lsls	r3, r3, #1
 800c0fe:	b2db      	uxtb	r3, r3
 800c100:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c102:	78fb      	ldrb	r3, [r7, #3]
 800c104:	b2db      	uxtb	r3, r3
 800c106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c10a:	2b80      	cmp	r3, #128	@ 0x80
 800c10c:	d0ef      	beq.n	800c0ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c10e:	4b20      	ldr	r3, [pc, #128]	@ (800c190 <xPortStartScheduler+0xd8>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f1c3 0307 	rsb	r3, r3, #7
 800c116:	2b04      	cmp	r3, #4
 800c118:	d00b      	beq.n	800c132 <xPortStartScheduler+0x7a>
	__asm volatile
 800c11a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c11e:	f383 8811 	msr	BASEPRI, r3
 800c122:	f3bf 8f6f 	isb	sy
 800c126:	f3bf 8f4f 	dsb	sy
 800c12a:	60bb      	str	r3, [r7, #8]
}
 800c12c:	bf00      	nop
 800c12e:	bf00      	nop
 800c130:	e7fd      	b.n	800c12e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c132:	4b17      	ldr	r3, [pc, #92]	@ (800c190 <xPortStartScheduler+0xd8>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	021b      	lsls	r3, r3, #8
 800c138:	4a15      	ldr	r2, [pc, #84]	@ (800c190 <xPortStartScheduler+0xd8>)
 800c13a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c13c:	4b14      	ldr	r3, [pc, #80]	@ (800c190 <xPortStartScheduler+0xd8>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c144:	4a12      	ldr	r2, [pc, #72]	@ (800c190 <xPortStartScheduler+0xd8>)
 800c146:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	b2da      	uxtb	r2, r3
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c150:	4b10      	ldr	r3, [pc, #64]	@ (800c194 <xPortStartScheduler+0xdc>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4a0f      	ldr	r2, [pc, #60]	@ (800c194 <xPortStartScheduler+0xdc>)
 800c156:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c15a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c15c:	4b0d      	ldr	r3, [pc, #52]	@ (800c194 <xPortStartScheduler+0xdc>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4a0c      	ldr	r2, [pc, #48]	@ (800c194 <xPortStartScheduler+0xdc>)
 800c162:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c166:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c168:	f000 f8b8 	bl	800c2dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c16c:	4b0a      	ldr	r3, [pc, #40]	@ (800c198 <xPortStartScheduler+0xe0>)
 800c16e:	2200      	movs	r2, #0
 800c170:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c172:	f7ff ff91 	bl	800c098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c176:	f7ff f9e7 	bl	800b548 <vTaskSwitchContext>
	prvTaskExitError();
 800c17a:	f7ff ff4d 	bl	800c018 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c17e:	2300      	movs	r3, #0
}
 800c180:	4618      	mov	r0, r3
 800c182:	3710      	adds	r7, #16
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}
 800c188:	e000e400 	.word	0xe000e400
 800c18c:	20000a00 	.word	0x20000a00
 800c190:	20000a04 	.word	0x20000a04
 800c194:	e000ed20 	.word	0xe000ed20
 800c198:	20000100 	.word	0x20000100

0800c19c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c19c:	b480      	push	{r7}
 800c19e:	b083      	sub	sp, #12
 800c1a0:	af00      	add	r7, sp, #0
	__asm volatile
 800c1a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1a6:	f383 8811 	msr	BASEPRI, r3
 800c1aa:	f3bf 8f6f 	isb	sy
 800c1ae:	f3bf 8f4f 	dsb	sy
 800c1b2:	607b      	str	r3, [r7, #4]
}
 800c1b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c1b6:	4b0f      	ldr	r3, [pc, #60]	@ (800c1f4 <vPortEnterCritical+0x58>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	4a0d      	ldr	r2, [pc, #52]	@ (800c1f4 <vPortEnterCritical+0x58>)
 800c1be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c1c0:	4b0c      	ldr	r3, [pc, #48]	@ (800c1f4 <vPortEnterCritical+0x58>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d110      	bne.n	800c1ea <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c1c8:	4b0b      	ldr	r3, [pc, #44]	@ (800c1f8 <vPortEnterCritical+0x5c>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	b2db      	uxtb	r3, r3
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d00b      	beq.n	800c1ea <vPortEnterCritical+0x4e>
	__asm volatile
 800c1d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1d6:	f383 8811 	msr	BASEPRI, r3
 800c1da:	f3bf 8f6f 	isb	sy
 800c1de:	f3bf 8f4f 	dsb	sy
 800c1e2:	603b      	str	r3, [r7, #0]
}
 800c1e4:	bf00      	nop
 800c1e6:	bf00      	nop
 800c1e8:	e7fd      	b.n	800c1e6 <vPortEnterCritical+0x4a>
	}
}
 800c1ea:	bf00      	nop
 800c1ec:	370c      	adds	r7, #12
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bc80      	pop	{r7}
 800c1f2:	4770      	bx	lr
 800c1f4:	20000100 	.word	0x20000100
 800c1f8:	e000ed04 	.word	0xe000ed04

0800c1fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b083      	sub	sp, #12
 800c200:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c202:	4b12      	ldr	r3, [pc, #72]	@ (800c24c <vPortExitCritical+0x50>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d10b      	bne.n	800c222 <vPortExitCritical+0x26>
	__asm volatile
 800c20a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c20e:	f383 8811 	msr	BASEPRI, r3
 800c212:	f3bf 8f6f 	isb	sy
 800c216:	f3bf 8f4f 	dsb	sy
 800c21a:	607b      	str	r3, [r7, #4]
}
 800c21c:	bf00      	nop
 800c21e:	bf00      	nop
 800c220:	e7fd      	b.n	800c21e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c222:	4b0a      	ldr	r3, [pc, #40]	@ (800c24c <vPortExitCritical+0x50>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	3b01      	subs	r3, #1
 800c228:	4a08      	ldr	r2, [pc, #32]	@ (800c24c <vPortExitCritical+0x50>)
 800c22a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c22c:	4b07      	ldr	r3, [pc, #28]	@ (800c24c <vPortExitCritical+0x50>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d105      	bne.n	800c240 <vPortExitCritical+0x44>
 800c234:	2300      	movs	r3, #0
 800c236:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	f383 8811 	msr	BASEPRI, r3
}
 800c23e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c240:	bf00      	nop
 800c242:	370c      	adds	r7, #12
 800c244:	46bd      	mov	sp, r7
 800c246:	bc80      	pop	{r7}
 800c248:	4770      	bx	lr
 800c24a:	bf00      	nop
 800c24c:	20000100 	.word	0x20000100

0800c250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c250:	f3ef 8009 	mrs	r0, PSP
 800c254:	f3bf 8f6f 	isb	sy
 800c258:	4b0d      	ldr	r3, [pc, #52]	@ (800c290 <pxCurrentTCBConst>)
 800c25a:	681a      	ldr	r2, [r3, #0]
 800c25c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c260:	6010      	str	r0, [r2, #0]
 800c262:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c266:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c26a:	f380 8811 	msr	BASEPRI, r0
 800c26e:	f7ff f96b 	bl	800b548 <vTaskSwitchContext>
 800c272:	f04f 0000 	mov.w	r0, #0
 800c276:	f380 8811 	msr	BASEPRI, r0
 800c27a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c27e:	6819      	ldr	r1, [r3, #0]
 800c280:	6808      	ldr	r0, [r1, #0]
 800c282:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c286:	f380 8809 	msr	PSP, r0
 800c28a:	f3bf 8f6f 	isb	sy
 800c28e:	4770      	bx	lr

0800c290 <pxCurrentTCBConst>:
 800c290:	200008d4 	.word	0x200008d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c294:	bf00      	nop
 800c296:	bf00      	nop

0800c298 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
	__asm volatile
 800c29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2a2:	f383 8811 	msr	BASEPRI, r3
 800c2a6:	f3bf 8f6f 	isb	sy
 800c2aa:	f3bf 8f4f 	dsb	sy
 800c2ae:	607b      	str	r3, [r7, #4]
}
 800c2b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c2b2:	f7ff f88b 	bl	800b3cc <xTaskIncrementTick>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d003      	beq.n	800c2c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c2bc:	4b06      	ldr	r3, [pc, #24]	@ (800c2d8 <SysTick_Handler+0x40>)
 800c2be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2c2:	601a      	str	r2, [r3, #0]
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	f383 8811 	msr	BASEPRI, r3
}
 800c2ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c2d0:	bf00      	nop
 800c2d2:	3708      	adds	r7, #8
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}
 800c2d8:	e000ed04 	.word	0xe000ed04

0800c2dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c2dc:	b480      	push	{r7}
 800c2de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c2e0:	4b0a      	ldr	r3, [pc, #40]	@ (800c30c <vPortSetupTimerInterrupt+0x30>)
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c2e6:	4b0a      	ldr	r3, [pc, #40]	@ (800c310 <vPortSetupTimerInterrupt+0x34>)
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c2ec:	4b09      	ldr	r3, [pc, #36]	@ (800c314 <vPortSetupTimerInterrupt+0x38>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4a09      	ldr	r2, [pc, #36]	@ (800c318 <vPortSetupTimerInterrupt+0x3c>)
 800c2f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2f6:	099b      	lsrs	r3, r3, #6
 800c2f8:	4a08      	ldr	r2, [pc, #32]	@ (800c31c <vPortSetupTimerInterrupt+0x40>)
 800c2fa:	3b01      	subs	r3, #1
 800c2fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c2fe:	4b03      	ldr	r3, [pc, #12]	@ (800c30c <vPortSetupTimerInterrupt+0x30>)
 800c300:	2207      	movs	r2, #7
 800c302:	601a      	str	r2, [r3, #0]
}
 800c304:	bf00      	nop
 800c306:	46bd      	mov	sp, r7
 800c308:	bc80      	pop	{r7}
 800c30a:	4770      	bx	lr
 800c30c:	e000e010 	.word	0xe000e010
 800c310:	e000e018 	.word	0xe000e018
 800c314:	200000e0 	.word	0x200000e0
 800c318:	10624dd3 	.word	0x10624dd3
 800c31c:	e000e014 	.word	0xe000e014

0800c320 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c320:	b480      	push	{r7}
 800c322:	b085      	sub	sp, #20
 800c324:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c326:	f3ef 8305 	mrs	r3, IPSR
 800c32a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2b0f      	cmp	r3, #15
 800c330:	d915      	bls.n	800c35e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c332:	4a17      	ldr	r2, [pc, #92]	@ (800c390 <vPortValidateInterruptPriority+0x70>)
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	4413      	add	r3, r2
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c33c:	4b15      	ldr	r3, [pc, #84]	@ (800c394 <vPortValidateInterruptPriority+0x74>)
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	7afa      	ldrb	r2, [r7, #11]
 800c342:	429a      	cmp	r2, r3
 800c344:	d20b      	bcs.n	800c35e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c34a:	f383 8811 	msr	BASEPRI, r3
 800c34e:	f3bf 8f6f 	isb	sy
 800c352:	f3bf 8f4f 	dsb	sy
 800c356:	607b      	str	r3, [r7, #4]
}
 800c358:	bf00      	nop
 800c35a:	bf00      	nop
 800c35c:	e7fd      	b.n	800c35a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c35e:	4b0e      	ldr	r3, [pc, #56]	@ (800c398 <vPortValidateInterruptPriority+0x78>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c366:	4b0d      	ldr	r3, [pc, #52]	@ (800c39c <vPortValidateInterruptPriority+0x7c>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d90b      	bls.n	800c386 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c372:	f383 8811 	msr	BASEPRI, r3
 800c376:	f3bf 8f6f 	isb	sy
 800c37a:	f3bf 8f4f 	dsb	sy
 800c37e:	603b      	str	r3, [r7, #0]
}
 800c380:	bf00      	nop
 800c382:	bf00      	nop
 800c384:	e7fd      	b.n	800c382 <vPortValidateInterruptPriority+0x62>
	}
 800c386:	bf00      	nop
 800c388:	3714      	adds	r7, #20
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bc80      	pop	{r7}
 800c38e:	4770      	bx	lr
 800c390:	e000e3f0 	.word	0xe000e3f0
 800c394:	20000a00 	.word	0x20000a00
 800c398:	e000ed0c 	.word	0xe000ed0c
 800c39c:	20000a04 	.word	0x20000a04

0800c3a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b08a      	sub	sp, #40	@ 0x28
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c3ac:	f7fe ff62 	bl	800b274 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c3b0:	4b5a      	ldr	r3, [pc, #360]	@ (800c51c <pvPortMalloc+0x17c>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d101      	bne.n	800c3bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c3b8:	f000 f916 	bl	800c5e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c3bc:	4b58      	ldr	r3, [pc, #352]	@ (800c520 <pvPortMalloc+0x180>)
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	4013      	ands	r3, r2
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	f040 8090 	bne.w	800c4ea <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d01e      	beq.n	800c40e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c3d0:	2208      	movs	r2, #8
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	4413      	add	r3, r2
 800c3d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f003 0307 	and.w	r3, r3, #7
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d015      	beq.n	800c40e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f023 0307 	bic.w	r3, r3, #7
 800c3e8:	3308      	adds	r3, #8
 800c3ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f003 0307 	and.w	r3, r3, #7
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d00b      	beq.n	800c40e <pvPortMalloc+0x6e>
	__asm volatile
 800c3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3fa:	f383 8811 	msr	BASEPRI, r3
 800c3fe:	f3bf 8f6f 	isb	sy
 800c402:	f3bf 8f4f 	dsb	sy
 800c406:	617b      	str	r3, [r7, #20]
}
 800c408:	bf00      	nop
 800c40a:	bf00      	nop
 800c40c:	e7fd      	b.n	800c40a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d06a      	beq.n	800c4ea <pvPortMalloc+0x14a>
 800c414:	4b43      	ldr	r3, [pc, #268]	@ (800c524 <pvPortMalloc+0x184>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	687a      	ldr	r2, [r7, #4]
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d865      	bhi.n	800c4ea <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c41e:	4b42      	ldr	r3, [pc, #264]	@ (800c528 <pvPortMalloc+0x188>)
 800c420:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c422:	4b41      	ldr	r3, [pc, #260]	@ (800c528 <pvPortMalloc+0x188>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c428:	e004      	b.n	800c434 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c42c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	687a      	ldr	r2, [r7, #4]
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d903      	bls.n	800c446 <pvPortMalloc+0xa6>
 800c43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d1f1      	bne.n	800c42a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c446:	4b35      	ldr	r3, [pc, #212]	@ (800c51c <pvPortMalloc+0x17c>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d04c      	beq.n	800c4ea <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c450:	6a3b      	ldr	r3, [r7, #32]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	2208      	movs	r2, #8
 800c456:	4413      	add	r3, r2
 800c458:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c45c:	681a      	ldr	r2, [r3, #0]
 800c45e:	6a3b      	ldr	r3, [r7, #32]
 800c460:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c464:	685a      	ldr	r2, [r3, #4]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	1ad2      	subs	r2, r2, r3
 800c46a:	2308      	movs	r3, #8
 800c46c:	005b      	lsls	r3, r3, #1
 800c46e:	429a      	cmp	r2, r3
 800c470:	d920      	bls.n	800c4b4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	4413      	add	r3, r2
 800c478:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c47a:	69bb      	ldr	r3, [r7, #24]
 800c47c:	f003 0307 	and.w	r3, r3, #7
 800c480:	2b00      	cmp	r3, #0
 800c482:	d00b      	beq.n	800c49c <pvPortMalloc+0xfc>
	__asm volatile
 800c484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c488:	f383 8811 	msr	BASEPRI, r3
 800c48c:	f3bf 8f6f 	isb	sy
 800c490:	f3bf 8f4f 	dsb	sy
 800c494:	613b      	str	r3, [r7, #16]
}
 800c496:	bf00      	nop
 800c498:	bf00      	nop
 800c49a:	e7fd      	b.n	800c498 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c49c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c49e:	685a      	ldr	r2, [r3, #4]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	1ad2      	subs	r2, r2, r3
 800c4a4:	69bb      	ldr	r3, [r7, #24]
 800c4a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4aa:	687a      	ldr	r2, [r7, #4]
 800c4ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c4ae:	69b8      	ldr	r0, [r7, #24]
 800c4b0:	f000 f8fc 	bl	800c6ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c4b4:	4b1b      	ldr	r3, [pc, #108]	@ (800c524 <pvPortMalloc+0x184>)
 800c4b6:	681a      	ldr	r2, [r3, #0]
 800c4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	1ad3      	subs	r3, r2, r3
 800c4be:	4a19      	ldr	r2, [pc, #100]	@ (800c524 <pvPortMalloc+0x184>)
 800c4c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c4c2:	4b18      	ldr	r3, [pc, #96]	@ (800c524 <pvPortMalloc+0x184>)
 800c4c4:	681a      	ldr	r2, [r3, #0]
 800c4c6:	4b19      	ldr	r3, [pc, #100]	@ (800c52c <pvPortMalloc+0x18c>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d203      	bcs.n	800c4d6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c4ce:	4b15      	ldr	r3, [pc, #84]	@ (800c524 <pvPortMalloc+0x184>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4a16      	ldr	r2, [pc, #88]	@ (800c52c <pvPortMalloc+0x18c>)
 800c4d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4d8:	685a      	ldr	r2, [r3, #4]
 800c4da:	4b11      	ldr	r3, [pc, #68]	@ (800c520 <pvPortMalloc+0x180>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	431a      	orrs	r2, r3
 800c4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c4ea:	f7fe fed1 	bl	800b290 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4ee:	69fb      	ldr	r3, [r7, #28]
 800c4f0:	f003 0307 	and.w	r3, r3, #7
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d00b      	beq.n	800c510 <pvPortMalloc+0x170>
	__asm volatile
 800c4f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4fc:	f383 8811 	msr	BASEPRI, r3
 800c500:	f3bf 8f6f 	isb	sy
 800c504:	f3bf 8f4f 	dsb	sy
 800c508:	60fb      	str	r3, [r7, #12]
}
 800c50a:	bf00      	nop
 800c50c:	bf00      	nop
 800c50e:	e7fd      	b.n	800c50c <pvPortMalloc+0x16c>
	return pvReturn;
 800c510:	69fb      	ldr	r3, [r7, #28]
}
 800c512:	4618      	mov	r0, r3
 800c514:	3728      	adds	r7, #40	@ 0x28
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}
 800c51a:	bf00      	nop
 800c51c:	20005a10 	.word	0x20005a10
 800c520:	20005a1c 	.word	0x20005a1c
 800c524:	20005a14 	.word	0x20005a14
 800c528:	20005a08 	.word	0x20005a08
 800c52c:	20005a18 	.word	0x20005a18

0800c530 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b086      	sub	sp, #24
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d04a      	beq.n	800c5d8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c542:	2308      	movs	r3, #8
 800c544:	425b      	negs	r3, r3
 800c546:	697a      	ldr	r2, [r7, #20]
 800c548:	4413      	add	r3, r2
 800c54a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	685a      	ldr	r2, [r3, #4]
 800c554:	4b22      	ldr	r3, [pc, #136]	@ (800c5e0 <vPortFree+0xb0>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4013      	ands	r3, r2
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d10b      	bne.n	800c576 <vPortFree+0x46>
	__asm volatile
 800c55e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c562:	f383 8811 	msr	BASEPRI, r3
 800c566:	f3bf 8f6f 	isb	sy
 800c56a:	f3bf 8f4f 	dsb	sy
 800c56e:	60fb      	str	r3, [r7, #12]
}
 800c570:	bf00      	nop
 800c572:	bf00      	nop
 800c574:	e7fd      	b.n	800c572 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00b      	beq.n	800c596 <vPortFree+0x66>
	__asm volatile
 800c57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c582:	f383 8811 	msr	BASEPRI, r3
 800c586:	f3bf 8f6f 	isb	sy
 800c58a:	f3bf 8f4f 	dsb	sy
 800c58e:	60bb      	str	r3, [r7, #8]
}
 800c590:	bf00      	nop
 800c592:	bf00      	nop
 800c594:	e7fd      	b.n	800c592 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	685a      	ldr	r2, [r3, #4]
 800c59a:	4b11      	ldr	r3, [pc, #68]	@ (800c5e0 <vPortFree+0xb0>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4013      	ands	r3, r2
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d019      	beq.n	800c5d8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d115      	bne.n	800c5d8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	685a      	ldr	r2, [r3, #4]
 800c5b0:	4b0b      	ldr	r3, [pc, #44]	@ (800c5e0 <vPortFree+0xb0>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	43db      	mvns	r3, r3
 800c5b6:	401a      	ands	r2, r3
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c5bc:	f7fe fe5a 	bl	800b274 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	685a      	ldr	r2, [r3, #4]
 800c5c4:	4b07      	ldr	r3, [pc, #28]	@ (800c5e4 <vPortFree+0xb4>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4413      	add	r3, r2
 800c5ca:	4a06      	ldr	r2, [pc, #24]	@ (800c5e4 <vPortFree+0xb4>)
 800c5cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c5ce:	6938      	ldr	r0, [r7, #16]
 800c5d0:	f000 f86c 	bl	800c6ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c5d4:	f7fe fe5c 	bl	800b290 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c5d8:	bf00      	nop
 800c5da:	3718      	adds	r7, #24
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	20005a1c 	.word	0x20005a1c
 800c5e4:	20005a14 	.word	0x20005a14

0800c5e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b085      	sub	sp, #20
 800c5ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c5ee:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 800c5f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c5f4:	4b27      	ldr	r3, [pc, #156]	@ (800c694 <prvHeapInit+0xac>)
 800c5f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f003 0307 	and.w	r3, r3, #7
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d00c      	beq.n	800c61c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	3307      	adds	r3, #7
 800c606:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	f023 0307 	bic.w	r3, r3, #7
 800c60e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c610:	68ba      	ldr	r2, [r7, #8]
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	1ad3      	subs	r3, r2, r3
 800c616:	4a1f      	ldr	r2, [pc, #124]	@ (800c694 <prvHeapInit+0xac>)
 800c618:	4413      	add	r3, r2
 800c61a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c620:	4a1d      	ldr	r2, [pc, #116]	@ (800c698 <prvHeapInit+0xb0>)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c626:	4b1c      	ldr	r3, [pc, #112]	@ (800c698 <prvHeapInit+0xb0>)
 800c628:	2200      	movs	r2, #0
 800c62a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	68ba      	ldr	r2, [r7, #8]
 800c630:	4413      	add	r3, r2
 800c632:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c634:	2208      	movs	r2, #8
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	1a9b      	subs	r3, r3, r2
 800c63a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f023 0307 	bic.w	r3, r3, #7
 800c642:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	4a15      	ldr	r2, [pc, #84]	@ (800c69c <prvHeapInit+0xb4>)
 800c648:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c64a:	4b14      	ldr	r3, [pc, #80]	@ (800c69c <prvHeapInit+0xb4>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	2200      	movs	r2, #0
 800c650:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c652:	4b12      	ldr	r3, [pc, #72]	@ (800c69c <prvHeapInit+0xb4>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	2200      	movs	r2, #0
 800c658:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	68fa      	ldr	r2, [r7, #12]
 800c662:	1ad2      	subs	r2, r2, r3
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c668:	4b0c      	ldr	r3, [pc, #48]	@ (800c69c <prvHeapInit+0xb4>)
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	4a0a      	ldr	r2, [pc, #40]	@ (800c6a0 <prvHeapInit+0xb8>)
 800c676:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	685b      	ldr	r3, [r3, #4]
 800c67c:	4a09      	ldr	r2, [pc, #36]	@ (800c6a4 <prvHeapInit+0xbc>)
 800c67e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c680:	4b09      	ldr	r3, [pc, #36]	@ (800c6a8 <prvHeapInit+0xc0>)
 800c682:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c686:	601a      	str	r2, [r3, #0]
}
 800c688:	bf00      	nop
 800c68a:	3714      	adds	r7, #20
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bc80      	pop	{r7}
 800c690:	4770      	bx	lr
 800c692:	bf00      	nop
 800c694:	20000a08 	.word	0x20000a08
 800c698:	20005a08 	.word	0x20005a08
 800c69c:	20005a10 	.word	0x20005a10
 800c6a0:	20005a18 	.word	0x20005a18
 800c6a4:	20005a14 	.word	0x20005a14
 800c6a8:	20005a1c 	.word	0x20005a1c

0800c6ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b085      	sub	sp, #20
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c6b4:	4b27      	ldr	r3, [pc, #156]	@ (800c754 <prvInsertBlockIntoFreeList+0xa8>)
 800c6b6:	60fb      	str	r3, [r7, #12]
 800c6b8:	e002      	b.n	800c6c0 <prvInsertBlockIntoFreeList+0x14>
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	60fb      	str	r3, [r7, #12]
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d8f7      	bhi.n	800c6ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	68ba      	ldr	r2, [r7, #8]
 800c6d4:	4413      	add	r3, r2
 800c6d6:	687a      	ldr	r2, [r7, #4]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d108      	bne.n	800c6ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	685a      	ldr	r2, [r3, #4]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	441a      	add	r2, r3
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	68ba      	ldr	r2, [r7, #8]
 800c6f8:	441a      	add	r2, r3
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d118      	bne.n	800c734 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	681a      	ldr	r2, [r3, #0]
 800c706:	4b14      	ldr	r3, [pc, #80]	@ (800c758 <prvInsertBlockIntoFreeList+0xac>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d00d      	beq.n	800c72a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	685a      	ldr	r2, [r3, #4]
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	441a      	add	r2, r3
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	601a      	str	r2, [r3, #0]
 800c728:	e008      	b.n	800c73c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c72a:	4b0b      	ldr	r3, [pc, #44]	@ (800c758 <prvInsertBlockIntoFreeList+0xac>)
 800c72c:	681a      	ldr	r2, [r3, #0]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	601a      	str	r2, [r3, #0]
 800c732:	e003      	b.n	800c73c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681a      	ldr	r2, [r3, #0]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c73c:	68fa      	ldr	r2, [r7, #12]
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	429a      	cmp	r2, r3
 800c742:	d002      	beq.n	800c74a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c74a:	bf00      	nop
 800c74c:	3714      	adds	r7, #20
 800c74e:	46bd      	mov	sp, r7
 800c750:	bc80      	pop	{r7}
 800c752:	4770      	bx	lr
 800c754:	20005a08 	.word	0x20005a08
 800c758:	20005a10 	.word	0x20005a10

0800c75c <malloc>:
 800c75c:	4b02      	ldr	r3, [pc, #8]	@ (800c768 <malloc+0xc>)
 800c75e:	4601      	mov	r1, r0
 800c760:	6818      	ldr	r0, [r3, #0]
 800c762:	f000 b82d 	b.w	800c7c0 <_malloc_r>
 800c766:	bf00      	nop
 800c768:	20000284 	.word	0x20000284

0800c76c <free>:
 800c76c:	4b02      	ldr	r3, [pc, #8]	@ (800c778 <free+0xc>)
 800c76e:	4601      	mov	r1, r0
 800c770:	6818      	ldr	r0, [r3, #0]
 800c772:	f003 ba95 	b.w	800fca0 <_free_r>
 800c776:	bf00      	nop
 800c778:	20000284 	.word	0x20000284

0800c77c <sbrk_aligned>:
 800c77c:	b570      	push	{r4, r5, r6, lr}
 800c77e:	4e0f      	ldr	r6, [pc, #60]	@ (800c7bc <sbrk_aligned+0x40>)
 800c780:	460c      	mov	r4, r1
 800c782:	6831      	ldr	r1, [r6, #0]
 800c784:	4605      	mov	r5, r0
 800c786:	b911      	cbnz	r1, 800c78e <sbrk_aligned+0x12>
 800c788:	f002 fb92 	bl	800eeb0 <_sbrk_r>
 800c78c:	6030      	str	r0, [r6, #0]
 800c78e:	4621      	mov	r1, r4
 800c790:	4628      	mov	r0, r5
 800c792:	f002 fb8d 	bl	800eeb0 <_sbrk_r>
 800c796:	1c43      	adds	r3, r0, #1
 800c798:	d103      	bne.n	800c7a2 <sbrk_aligned+0x26>
 800c79a:	f04f 34ff 	mov.w	r4, #4294967295
 800c79e:	4620      	mov	r0, r4
 800c7a0:	bd70      	pop	{r4, r5, r6, pc}
 800c7a2:	1cc4      	adds	r4, r0, #3
 800c7a4:	f024 0403 	bic.w	r4, r4, #3
 800c7a8:	42a0      	cmp	r0, r4
 800c7aa:	d0f8      	beq.n	800c79e <sbrk_aligned+0x22>
 800c7ac:	1a21      	subs	r1, r4, r0
 800c7ae:	4628      	mov	r0, r5
 800c7b0:	f002 fb7e 	bl	800eeb0 <_sbrk_r>
 800c7b4:	3001      	adds	r0, #1
 800c7b6:	d1f2      	bne.n	800c79e <sbrk_aligned+0x22>
 800c7b8:	e7ef      	b.n	800c79a <sbrk_aligned+0x1e>
 800c7ba:	bf00      	nop
 800c7bc:	20005a20 	.word	0x20005a20

0800c7c0 <_malloc_r>:
 800c7c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7c4:	1ccd      	adds	r5, r1, #3
 800c7c6:	f025 0503 	bic.w	r5, r5, #3
 800c7ca:	3508      	adds	r5, #8
 800c7cc:	2d0c      	cmp	r5, #12
 800c7ce:	bf38      	it	cc
 800c7d0:	250c      	movcc	r5, #12
 800c7d2:	2d00      	cmp	r5, #0
 800c7d4:	4606      	mov	r6, r0
 800c7d6:	db01      	blt.n	800c7dc <_malloc_r+0x1c>
 800c7d8:	42a9      	cmp	r1, r5
 800c7da:	d904      	bls.n	800c7e6 <_malloc_r+0x26>
 800c7dc:	230c      	movs	r3, #12
 800c7de:	6033      	str	r3, [r6, #0]
 800c7e0:	2000      	movs	r0, #0
 800c7e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c8bc <_malloc_r+0xfc>
 800c7ea:	f000 f869 	bl	800c8c0 <__malloc_lock>
 800c7ee:	f8d8 3000 	ldr.w	r3, [r8]
 800c7f2:	461c      	mov	r4, r3
 800c7f4:	bb44      	cbnz	r4, 800c848 <_malloc_r+0x88>
 800c7f6:	4629      	mov	r1, r5
 800c7f8:	4630      	mov	r0, r6
 800c7fa:	f7ff ffbf 	bl	800c77c <sbrk_aligned>
 800c7fe:	1c43      	adds	r3, r0, #1
 800c800:	4604      	mov	r4, r0
 800c802:	d158      	bne.n	800c8b6 <_malloc_r+0xf6>
 800c804:	f8d8 4000 	ldr.w	r4, [r8]
 800c808:	4627      	mov	r7, r4
 800c80a:	2f00      	cmp	r7, #0
 800c80c:	d143      	bne.n	800c896 <_malloc_r+0xd6>
 800c80e:	2c00      	cmp	r4, #0
 800c810:	d04b      	beq.n	800c8aa <_malloc_r+0xea>
 800c812:	6823      	ldr	r3, [r4, #0]
 800c814:	4639      	mov	r1, r7
 800c816:	4630      	mov	r0, r6
 800c818:	eb04 0903 	add.w	r9, r4, r3
 800c81c:	f002 fb48 	bl	800eeb0 <_sbrk_r>
 800c820:	4581      	cmp	r9, r0
 800c822:	d142      	bne.n	800c8aa <_malloc_r+0xea>
 800c824:	6821      	ldr	r1, [r4, #0]
 800c826:	4630      	mov	r0, r6
 800c828:	1a6d      	subs	r5, r5, r1
 800c82a:	4629      	mov	r1, r5
 800c82c:	f7ff ffa6 	bl	800c77c <sbrk_aligned>
 800c830:	3001      	adds	r0, #1
 800c832:	d03a      	beq.n	800c8aa <_malloc_r+0xea>
 800c834:	6823      	ldr	r3, [r4, #0]
 800c836:	442b      	add	r3, r5
 800c838:	6023      	str	r3, [r4, #0]
 800c83a:	f8d8 3000 	ldr.w	r3, [r8]
 800c83e:	685a      	ldr	r2, [r3, #4]
 800c840:	bb62      	cbnz	r2, 800c89c <_malloc_r+0xdc>
 800c842:	f8c8 7000 	str.w	r7, [r8]
 800c846:	e00f      	b.n	800c868 <_malloc_r+0xa8>
 800c848:	6822      	ldr	r2, [r4, #0]
 800c84a:	1b52      	subs	r2, r2, r5
 800c84c:	d420      	bmi.n	800c890 <_malloc_r+0xd0>
 800c84e:	2a0b      	cmp	r2, #11
 800c850:	d917      	bls.n	800c882 <_malloc_r+0xc2>
 800c852:	1961      	adds	r1, r4, r5
 800c854:	42a3      	cmp	r3, r4
 800c856:	6025      	str	r5, [r4, #0]
 800c858:	bf18      	it	ne
 800c85a:	6059      	strne	r1, [r3, #4]
 800c85c:	6863      	ldr	r3, [r4, #4]
 800c85e:	bf08      	it	eq
 800c860:	f8c8 1000 	streq.w	r1, [r8]
 800c864:	5162      	str	r2, [r4, r5]
 800c866:	604b      	str	r3, [r1, #4]
 800c868:	4630      	mov	r0, r6
 800c86a:	f000 f82f 	bl	800c8cc <__malloc_unlock>
 800c86e:	f104 000b 	add.w	r0, r4, #11
 800c872:	1d23      	adds	r3, r4, #4
 800c874:	f020 0007 	bic.w	r0, r0, #7
 800c878:	1ac2      	subs	r2, r0, r3
 800c87a:	bf1c      	itt	ne
 800c87c:	1a1b      	subne	r3, r3, r0
 800c87e:	50a3      	strne	r3, [r4, r2]
 800c880:	e7af      	b.n	800c7e2 <_malloc_r+0x22>
 800c882:	6862      	ldr	r2, [r4, #4]
 800c884:	42a3      	cmp	r3, r4
 800c886:	bf0c      	ite	eq
 800c888:	f8c8 2000 	streq.w	r2, [r8]
 800c88c:	605a      	strne	r2, [r3, #4]
 800c88e:	e7eb      	b.n	800c868 <_malloc_r+0xa8>
 800c890:	4623      	mov	r3, r4
 800c892:	6864      	ldr	r4, [r4, #4]
 800c894:	e7ae      	b.n	800c7f4 <_malloc_r+0x34>
 800c896:	463c      	mov	r4, r7
 800c898:	687f      	ldr	r7, [r7, #4]
 800c89a:	e7b6      	b.n	800c80a <_malloc_r+0x4a>
 800c89c:	461a      	mov	r2, r3
 800c89e:	685b      	ldr	r3, [r3, #4]
 800c8a0:	42a3      	cmp	r3, r4
 800c8a2:	d1fb      	bne.n	800c89c <_malloc_r+0xdc>
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	6053      	str	r3, [r2, #4]
 800c8a8:	e7de      	b.n	800c868 <_malloc_r+0xa8>
 800c8aa:	230c      	movs	r3, #12
 800c8ac:	4630      	mov	r0, r6
 800c8ae:	6033      	str	r3, [r6, #0]
 800c8b0:	f000 f80c 	bl	800c8cc <__malloc_unlock>
 800c8b4:	e794      	b.n	800c7e0 <_malloc_r+0x20>
 800c8b6:	6005      	str	r5, [r0, #0]
 800c8b8:	e7d6      	b.n	800c868 <_malloc_r+0xa8>
 800c8ba:	bf00      	nop
 800c8bc:	20005a24 	.word	0x20005a24

0800c8c0 <__malloc_lock>:
 800c8c0:	4801      	ldr	r0, [pc, #4]	@ (800c8c8 <__malloc_lock+0x8>)
 800c8c2:	f002 bb43 	b.w	800ef4c <__retarget_lock_acquire_recursive>
 800c8c6:	bf00      	nop
 800c8c8:	20005b8e 	.word	0x20005b8e

0800c8cc <__malloc_unlock>:
 800c8cc:	4801      	ldr	r0, [pc, #4]	@ (800c8d4 <__malloc_unlock+0x8>)
 800c8ce:	f002 bb3f 	b.w	800ef50 <__retarget_lock_release_recursive>
 800c8d2:	bf00      	nop
 800c8d4:	20005b8e 	.word	0x20005b8e

0800c8d8 <sulp>:
 800c8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8dc:	460f      	mov	r7, r1
 800c8de:	4690      	mov	r8, r2
 800c8e0:	f004 f928 	bl	8010b34 <__ulp>
 800c8e4:	4604      	mov	r4, r0
 800c8e6:	460d      	mov	r5, r1
 800c8e8:	f1b8 0f00 	cmp.w	r8, #0
 800c8ec:	d011      	beq.n	800c912 <sulp+0x3a>
 800c8ee:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800c8f2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	dd0b      	ble.n	800c912 <sulp+0x3a>
 800c8fa:	2400      	movs	r4, #0
 800c8fc:	051b      	lsls	r3, r3, #20
 800c8fe:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c902:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c906:	4622      	mov	r2, r4
 800c908:	462b      	mov	r3, r5
 800c90a:	f7f3 fe5f 	bl	80005cc <__aeabi_dmul>
 800c90e:	4604      	mov	r4, r0
 800c910:	460d      	mov	r5, r1
 800c912:	4620      	mov	r0, r4
 800c914:	4629      	mov	r1, r5
 800c916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c91a:	0000      	movs	r0, r0
 800c91c:	0000      	movs	r0, r0
	...

0800c920 <_strtod_l>:
 800c920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c924:	b09f      	sub	sp, #124	@ 0x7c
 800c926:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c928:	2200      	movs	r2, #0
 800c92a:	460c      	mov	r4, r1
 800c92c:	921a      	str	r2, [sp, #104]	@ 0x68
 800c92e:	f04f 0a00 	mov.w	sl, #0
 800c932:	f04f 0b00 	mov.w	fp, #0
 800c936:	460a      	mov	r2, r1
 800c938:	9005      	str	r0, [sp, #20]
 800c93a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c93c:	7811      	ldrb	r1, [r2, #0]
 800c93e:	292b      	cmp	r1, #43	@ 0x2b
 800c940:	d048      	beq.n	800c9d4 <_strtod_l+0xb4>
 800c942:	d836      	bhi.n	800c9b2 <_strtod_l+0x92>
 800c944:	290d      	cmp	r1, #13
 800c946:	d830      	bhi.n	800c9aa <_strtod_l+0x8a>
 800c948:	2908      	cmp	r1, #8
 800c94a:	d830      	bhi.n	800c9ae <_strtod_l+0x8e>
 800c94c:	2900      	cmp	r1, #0
 800c94e:	d039      	beq.n	800c9c4 <_strtod_l+0xa4>
 800c950:	2200      	movs	r2, #0
 800c952:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c954:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c956:	782a      	ldrb	r2, [r5, #0]
 800c958:	2a30      	cmp	r2, #48	@ 0x30
 800c95a:	f040 80b1 	bne.w	800cac0 <_strtod_l+0x1a0>
 800c95e:	786a      	ldrb	r2, [r5, #1]
 800c960:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c964:	2a58      	cmp	r2, #88	@ 0x58
 800c966:	d16c      	bne.n	800ca42 <_strtod_l+0x122>
 800c968:	9302      	str	r3, [sp, #8]
 800c96a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c96c:	4a8e      	ldr	r2, [pc, #568]	@ (800cba8 <_strtod_l+0x288>)
 800c96e:	9301      	str	r3, [sp, #4]
 800c970:	ab1a      	add	r3, sp, #104	@ 0x68
 800c972:	9300      	str	r3, [sp, #0]
 800c974:	9805      	ldr	r0, [sp, #20]
 800c976:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c978:	a919      	add	r1, sp, #100	@ 0x64
 800c97a:	f003 fa41 	bl	800fe00 <__gethex>
 800c97e:	f010 060f 	ands.w	r6, r0, #15
 800c982:	4604      	mov	r4, r0
 800c984:	d005      	beq.n	800c992 <_strtod_l+0x72>
 800c986:	2e06      	cmp	r6, #6
 800c988:	d126      	bne.n	800c9d8 <_strtod_l+0xb8>
 800c98a:	2300      	movs	r3, #0
 800c98c:	3501      	adds	r5, #1
 800c98e:	9519      	str	r5, [sp, #100]	@ 0x64
 800c990:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c992:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c994:	2b00      	cmp	r3, #0
 800c996:	f040 8584 	bne.w	800d4a2 <_strtod_l+0xb82>
 800c99a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c99c:	b1bb      	cbz	r3, 800c9ce <_strtod_l+0xae>
 800c99e:	4650      	mov	r0, sl
 800c9a0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800c9a4:	b01f      	add	sp, #124	@ 0x7c
 800c9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9aa:	2920      	cmp	r1, #32
 800c9ac:	d1d0      	bne.n	800c950 <_strtod_l+0x30>
 800c9ae:	3201      	adds	r2, #1
 800c9b0:	e7c3      	b.n	800c93a <_strtod_l+0x1a>
 800c9b2:	292d      	cmp	r1, #45	@ 0x2d
 800c9b4:	d1cc      	bne.n	800c950 <_strtod_l+0x30>
 800c9b6:	2101      	movs	r1, #1
 800c9b8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c9ba:	1c51      	adds	r1, r2, #1
 800c9bc:	9119      	str	r1, [sp, #100]	@ 0x64
 800c9be:	7852      	ldrb	r2, [r2, #1]
 800c9c0:	2a00      	cmp	r2, #0
 800c9c2:	d1c7      	bne.n	800c954 <_strtod_l+0x34>
 800c9c4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c9c6:	9419      	str	r4, [sp, #100]	@ 0x64
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	f040 8568 	bne.w	800d49e <_strtod_l+0xb7e>
 800c9ce:	4650      	mov	r0, sl
 800c9d0:	4659      	mov	r1, fp
 800c9d2:	e7e7      	b.n	800c9a4 <_strtod_l+0x84>
 800c9d4:	2100      	movs	r1, #0
 800c9d6:	e7ef      	b.n	800c9b8 <_strtod_l+0x98>
 800c9d8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c9da:	b13a      	cbz	r2, 800c9ec <_strtod_l+0xcc>
 800c9dc:	2135      	movs	r1, #53	@ 0x35
 800c9de:	a81c      	add	r0, sp, #112	@ 0x70
 800c9e0:	f004 f998 	bl	8010d14 <__copybits>
 800c9e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c9e6:	9805      	ldr	r0, [sp, #20]
 800c9e8:	f003 fd72 	bl	80104d0 <_Bfree>
 800c9ec:	3e01      	subs	r6, #1
 800c9ee:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c9f0:	2e04      	cmp	r6, #4
 800c9f2:	d806      	bhi.n	800ca02 <_strtod_l+0xe2>
 800c9f4:	e8df f006 	tbb	[pc, r6]
 800c9f8:	201d0314 	.word	0x201d0314
 800c9fc:	14          	.byte	0x14
 800c9fd:	00          	.byte	0x00
 800c9fe:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ca02:	05e1      	lsls	r1, r4, #23
 800ca04:	bf48      	it	mi
 800ca06:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ca0a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ca0e:	0d1b      	lsrs	r3, r3, #20
 800ca10:	051b      	lsls	r3, r3, #20
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d1bd      	bne.n	800c992 <_strtod_l+0x72>
 800ca16:	f002 fa6d 	bl	800eef4 <__errno>
 800ca1a:	2322      	movs	r3, #34	@ 0x22
 800ca1c:	6003      	str	r3, [r0, #0]
 800ca1e:	e7b8      	b.n	800c992 <_strtod_l+0x72>
 800ca20:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ca24:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ca28:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ca2c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ca30:	e7e7      	b.n	800ca02 <_strtod_l+0xe2>
 800ca32:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800cbac <_strtod_l+0x28c>
 800ca36:	e7e4      	b.n	800ca02 <_strtod_l+0xe2>
 800ca38:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ca3c:	f04f 3aff 	mov.w	sl, #4294967295
 800ca40:	e7df      	b.n	800ca02 <_strtod_l+0xe2>
 800ca42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca44:	1c5a      	adds	r2, r3, #1
 800ca46:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca48:	785b      	ldrb	r3, [r3, #1]
 800ca4a:	2b30      	cmp	r3, #48	@ 0x30
 800ca4c:	d0f9      	beq.n	800ca42 <_strtod_l+0x122>
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d09f      	beq.n	800c992 <_strtod_l+0x72>
 800ca52:	2301      	movs	r3, #1
 800ca54:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca58:	220a      	movs	r2, #10
 800ca5a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	461f      	mov	r7, r3
 800ca60:	9308      	str	r3, [sp, #32]
 800ca62:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca64:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ca66:	7805      	ldrb	r5, [r0, #0]
 800ca68:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ca6c:	b2d9      	uxtb	r1, r3
 800ca6e:	2909      	cmp	r1, #9
 800ca70:	d928      	bls.n	800cac4 <_strtod_l+0x1a4>
 800ca72:	2201      	movs	r2, #1
 800ca74:	494e      	ldr	r1, [pc, #312]	@ (800cbb0 <_strtod_l+0x290>)
 800ca76:	f001 fb93 	bl	800e1a0 <strncmp>
 800ca7a:	2800      	cmp	r0, #0
 800ca7c:	d032      	beq.n	800cae4 <_strtod_l+0x1c4>
 800ca7e:	2000      	movs	r0, #0
 800ca80:	462a      	mov	r2, r5
 800ca82:	4681      	mov	r9, r0
 800ca84:	463d      	mov	r5, r7
 800ca86:	4603      	mov	r3, r0
 800ca88:	2a65      	cmp	r2, #101	@ 0x65
 800ca8a:	d001      	beq.n	800ca90 <_strtod_l+0x170>
 800ca8c:	2a45      	cmp	r2, #69	@ 0x45
 800ca8e:	d114      	bne.n	800caba <_strtod_l+0x19a>
 800ca90:	b91d      	cbnz	r5, 800ca9a <_strtod_l+0x17a>
 800ca92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca94:	4302      	orrs	r2, r0
 800ca96:	d095      	beq.n	800c9c4 <_strtod_l+0xa4>
 800ca98:	2500      	movs	r5, #0
 800ca9a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ca9c:	1c62      	adds	r2, r4, #1
 800ca9e:	9219      	str	r2, [sp, #100]	@ 0x64
 800caa0:	7862      	ldrb	r2, [r4, #1]
 800caa2:	2a2b      	cmp	r2, #43	@ 0x2b
 800caa4:	d077      	beq.n	800cb96 <_strtod_l+0x276>
 800caa6:	2a2d      	cmp	r2, #45	@ 0x2d
 800caa8:	d07b      	beq.n	800cba2 <_strtod_l+0x282>
 800caaa:	f04f 0c00 	mov.w	ip, #0
 800caae:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cab2:	2909      	cmp	r1, #9
 800cab4:	f240 8082 	bls.w	800cbbc <_strtod_l+0x29c>
 800cab8:	9419      	str	r4, [sp, #100]	@ 0x64
 800caba:	f04f 0800 	mov.w	r8, #0
 800cabe:	e0a2      	b.n	800cc06 <_strtod_l+0x2e6>
 800cac0:	2300      	movs	r3, #0
 800cac2:	e7c7      	b.n	800ca54 <_strtod_l+0x134>
 800cac4:	2f08      	cmp	r7, #8
 800cac6:	bfd5      	itete	le
 800cac8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800caca:	9908      	ldrgt	r1, [sp, #32]
 800cacc:	fb02 3301 	mlale	r3, r2, r1, r3
 800cad0:	fb02 3301 	mlagt	r3, r2, r1, r3
 800cad4:	f100 0001 	add.w	r0, r0, #1
 800cad8:	bfd4      	ite	le
 800cada:	930a      	strle	r3, [sp, #40]	@ 0x28
 800cadc:	9308      	strgt	r3, [sp, #32]
 800cade:	3701      	adds	r7, #1
 800cae0:	9019      	str	r0, [sp, #100]	@ 0x64
 800cae2:	e7bf      	b.n	800ca64 <_strtod_l+0x144>
 800cae4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cae6:	1c5a      	adds	r2, r3, #1
 800cae8:	9219      	str	r2, [sp, #100]	@ 0x64
 800caea:	785a      	ldrb	r2, [r3, #1]
 800caec:	b37f      	cbz	r7, 800cb4e <_strtod_l+0x22e>
 800caee:	4681      	mov	r9, r0
 800caf0:	463d      	mov	r5, r7
 800caf2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800caf6:	2b09      	cmp	r3, #9
 800caf8:	d912      	bls.n	800cb20 <_strtod_l+0x200>
 800cafa:	2301      	movs	r3, #1
 800cafc:	e7c4      	b.n	800ca88 <_strtod_l+0x168>
 800cafe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb00:	3001      	adds	r0, #1
 800cb02:	1c5a      	adds	r2, r3, #1
 800cb04:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb06:	785a      	ldrb	r2, [r3, #1]
 800cb08:	2a30      	cmp	r2, #48	@ 0x30
 800cb0a:	d0f8      	beq.n	800cafe <_strtod_l+0x1de>
 800cb0c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cb10:	2b08      	cmp	r3, #8
 800cb12:	f200 84cb 	bhi.w	800d4ac <_strtod_l+0xb8c>
 800cb16:	4681      	mov	r9, r0
 800cb18:	2000      	movs	r0, #0
 800cb1a:	4605      	mov	r5, r0
 800cb1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb1e:	930c      	str	r3, [sp, #48]	@ 0x30
 800cb20:	3a30      	subs	r2, #48	@ 0x30
 800cb22:	f100 0301 	add.w	r3, r0, #1
 800cb26:	d02a      	beq.n	800cb7e <_strtod_l+0x25e>
 800cb28:	4499      	add	r9, r3
 800cb2a:	210a      	movs	r1, #10
 800cb2c:	462b      	mov	r3, r5
 800cb2e:	eb00 0c05 	add.w	ip, r0, r5
 800cb32:	4563      	cmp	r3, ip
 800cb34:	d10d      	bne.n	800cb52 <_strtod_l+0x232>
 800cb36:	1c69      	adds	r1, r5, #1
 800cb38:	4401      	add	r1, r0
 800cb3a:	4428      	add	r0, r5
 800cb3c:	2808      	cmp	r0, #8
 800cb3e:	dc16      	bgt.n	800cb6e <_strtod_l+0x24e>
 800cb40:	230a      	movs	r3, #10
 800cb42:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cb44:	fb03 2300 	mla	r3, r3, r0, r2
 800cb48:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	e018      	b.n	800cb80 <_strtod_l+0x260>
 800cb4e:	4638      	mov	r0, r7
 800cb50:	e7da      	b.n	800cb08 <_strtod_l+0x1e8>
 800cb52:	2b08      	cmp	r3, #8
 800cb54:	f103 0301 	add.w	r3, r3, #1
 800cb58:	dc03      	bgt.n	800cb62 <_strtod_l+0x242>
 800cb5a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cb5c:	434e      	muls	r6, r1
 800cb5e:	960a      	str	r6, [sp, #40]	@ 0x28
 800cb60:	e7e7      	b.n	800cb32 <_strtod_l+0x212>
 800cb62:	2b10      	cmp	r3, #16
 800cb64:	bfde      	ittt	le
 800cb66:	9e08      	ldrle	r6, [sp, #32]
 800cb68:	434e      	mulle	r6, r1
 800cb6a:	9608      	strle	r6, [sp, #32]
 800cb6c:	e7e1      	b.n	800cb32 <_strtod_l+0x212>
 800cb6e:	280f      	cmp	r0, #15
 800cb70:	dceb      	bgt.n	800cb4a <_strtod_l+0x22a>
 800cb72:	230a      	movs	r3, #10
 800cb74:	9808      	ldr	r0, [sp, #32]
 800cb76:	fb03 2300 	mla	r3, r3, r0, r2
 800cb7a:	9308      	str	r3, [sp, #32]
 800cb7c:	e7e5      	b.n	800cb4a <_strtod_l+0x22a>
 800cb7e:	4629      	mov	r1, r5
 800cb80:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cb82:	460d      	mov	r5, r1
 800cb84:	1c50      	adds	r0, r2, #1
 800cb86:	9019      	str	r0, [sp, #100]	@ 0x64
 800cb88:	7852      	ldrb	r2, [r2, #1]
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	e7b1      	b.n	800caf2 <_strtod_l+0x1d2>
 800cb8e:	f04f 0900 	mov.w	r9, #0
 800cb92:	2301      	movs	r3, #1
 800cb94:	e77d      	b.n	800ca92 <_strtod_l+0x172>
 800cb96:	f04f 0c00 	mov.w	ip, #0
 800cb9a:	1ca2      	adds	r2, r4, #2
 800cb9c:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb9e:	78a2      	ldrb	r2, [r4, #2]
 800cba0:	e785      	b.n	800caae <_strtod_l+0x18e>
 800cba2:	f04f 0c01 	mov.w	ip, #1
 800cba6:	e7f8      	b.n	800cb9a <_strtod_l+0x27a>
 800cba8:	08011fc0 	.word	0x08011fc0
 800cbac:	7ff00000 	.word	0x7ff00000
 800cbb0:	08011faa 	.word	0x08011faa
 800cbb4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cbb6:	1c51      	adds	r1, r2, #1
 800cbb8:	9119      	str	r1, [sp, #100]	@ 0x64
 800cbba:	7852      	ldrb	r2, [r2, #1]
 800cbbc:	2a30      	cmp	r2, #48	@ 0x30
 800cbbe:	d0f9      	beq.n	800cbb4 <_strtod_l+0x294>
 800cbc0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cbc4:	2908      	cmp	r1, #8
 800cbc6:	f63f af78 	bhi.w	800caba <_strtod_l+0x19a>
 800cbca:	f04f 080a 	mov.w	r8, #10
 800cbce:	3a30      	subs	r2, #48	@ 0x30
 800cbd0:	920e      	str	r2, [sp, #56]	@ 0x38
 800cbd2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cbd4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cbd6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cbd8:	1c56      	adds	r6, r2, #1
 800cbda:	9619      	str	r6, [sp, #100]	@ 0x64
 800cbdc:	7852      	ldrb	r2, [r2, #1]
 800cbde:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cbe2:	f1be 0f09 	cmp.w	lr, #9
 800cbe6:	d939      	bls.n	800cc5c <_strtod_l+0x33c>
 800cbe8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cbea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cbee:	1a76      	subs	r6, r6, r1
 800cbf0:	2e08      	cmp	r6, #8
 800cbf2:	dc03      	bgt.n	800cbfc <_strtod_l+0x2dc>
 800cbf4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cbf6:	4588      	cmp	r8, r1
 800cbf8:	bfa8      	it	ge
 800cbfa:	4688      	movge	r8, r1
 800cbfc:	f1bc 0f00 	cmp.w	ip, #0
 800cc00:	d001      	beq.n	800cc06 <_strtod_l+0x2e6>
 800cc02:	f1c8 0800 	rsb	r8, r8, #0
 800cc06:	2d00      	cmp	r5, #0
 800cc08:	d14e      	bne.n	800cca8 <_strtod_l+0x388>
 800cc0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cc0c:	4308      	orrs	r0, r1
 800cc0e:	f47f aec0 	bne.w	800c992 <_strtod_l+0x72>
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	f47f aed6 	bne.w	800c9c4 <_strtod_l+0xa4>
 800cc18:	2a69      	cmp	r2, #105	@ 0x69
 800cc1a:	d028      	beq.n	800cc6e <_strtod_l+0x34e>
 800cc1c:	dc25      	bgt.n	800cc6a <_strtod_l+0x34a>
 800cc1e:	2a49      	cmp	r2, #73	@ 0x49
 800cc20:	d025      	beq.n	800cc6e <_strtod_l+0x34e>
 800cc22:	2a4e      	cmp	r2, #78	@ 0x4e
 800cc24:	f47f aece 	bne.w	800c9c4 <_strtod_l+0xa4>
 800cc28:	499a      	ldr	r1, [pc, #616]	@ (800ce94 <_strtod_l+0x574>)
 800cc2a:	a819      	add	r0, sp, #100	@ 0x64
 800cc2c:	f003 fb0a 	bl	8010244 <__match>
 800cc30:	2800      	cmp	r0, #0
 800cc32:	f43f aec7 	beq.w	800c9c4 <_strtod_l+0xa4>
 800cc36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc38:	781b      	ldrb	r3, [r3, #0]
 800cc3a:	2b28      	cmp	r3, #40	@ 0x28
 800cc3c:	d12e      	bne.n	800cc9c <_strtod_l+0x37c>
 800cc3e:	4996      	ldr	r1, [pc, #600]	@ (800ce98 <_strtod_l+0x578>)
 800cc40:	aa1c      	add	r2, sp, #112	@ 0x70
 800cc42:	a819      	add	r0, sp, #100	@ 0x64
 800cc44:	f003 fb12 	bl	801026c <__hexnan>
 800cc48:	2805      	cmp	r0, #5
 800cc4a:	d127      	bne.n	800cc9c <_strtod_l+0x37c>
 800cc4c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cc4e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cc52:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cc56:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cc5a:	e69a      	b.n	800c992 <_strtod_l+0x72>
 800cc5c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cc5e:	fb08 2101 	mla	r1, r8, r1, r2
 800cc62:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cc66:	920e      	str	r2, [sp, #56]	@ 0x38
 800cc68:	e7b5      	b.n	800cbd6 <_strtod_l+0x2b6>
 800cc6a:	2a6e      	cmp	r2, #110	@ 0x6e
 800cc6c:	e7da      	b.n	800cc24 <_strtod_l+0x304>
 800cc6e:	498b      	ldr	r1, [pc, #556]	@ (800ce9c <_strtod_l+0x57c>)
 800cc70:	a819      	add	r0, sp, #100	@ 0x64
 800cc72:	f003 fae7 	bl	8010244 <__match>
 800cc76:	2800      	cmp	r0, #0
 800cc78:	f43f aea4 	beq.w	800c9c4 <_strtod_l+0xa4>
 800cc7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc7e:	4988      	ldr	r1, [pc, #544]	@ (800cea0 <_strtod_l+0x580>)
 800cc80:	3b01      	subs	r3, #1
 800cc82:	a819      	add	r0, sp, #100	@ 0x64
 800cc84:	9319      	str	r3, [sp, #100]	@ 0x64
 800cc86:	f003 fadd 	bl	8010244 <__match>
 800cc8a:	b910      	cbnz	r0, 800cc92 <_strtod_l+0x372>
 800cc8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc8e:	3301      	adds	r3, #1
 800cc90:	9319      	str	r3, [sp, #100]	@ 0x64
 800cc92:	f04f 0a00 	mov.w	sl, #0
 800cc96:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800cea4 <_strtod_l+0x584>
 800cc9a:	e67a      	b.n	800c992 <_strtod_l+0x72>
 800cc9c:	4882      	ldr	r0, [pc, #520]	@ (800cea8 <_strtod_l+0x588>)
 800cc9e:	f002 f97d 	bl	800ef9c <nan>
 800cca2:	4682      	mov	sl, r0
 800cca4:	468b      	mov	fp, r1
 800cca6:	e674      	b.n	800c992 <_strtod_l+0x72>
 800cca8:	eba8 0309 	sub.w	r3, r8, r9
 800ccac:	2f00      	cmp	r7, #0
 800ccae:	bf08      	it	eq
 800ccb0:	462f      	moveq	r7, r5
 800ccb2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ccb4:	2d10      	cmp	r5, #16
 800ccb6:	462c      	mov	r4, r5
 800ccb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccba:	bfa8      	it	ge
 800ccbc:	2410      	movge	r4, #16
 800ccbe:	f7f3 fc0b 	bl	80004d8 <__aeabi_ui2d>
 800ccc2:	2d09      	cmp	r5, #9
 800ccc4:	4682      	mov	sl, r0
 800ccc6:	468b      	mov	fp, r1
 800ccc8:	dc11      	bgt.n	800ccee <_strtod_l+0x3ce>
 800ccca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	f43f ae60 	beq.w	800c992 <_strtod_l+0x72>
 800ccd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccd4:	dd76      	ble.n	800cdc4 <_strtod_l+0x4a4>
 800ccd6:	2b16      	cmp	r3, #22
 800ccd8:	dc5d      	bgt.n	800cd96 <_strtod_l+0x476>
 800ccda:	4974      	ldr	r1, [pc, #464]	@ (800ceac <_strtod_l+0x58c>)
 800ccdc:	4652      	mov	r2, sl
 800ccde:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cce2:	465b      	mov	r3, fp
 800cce4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cce8:	f7f3 fc70 	bl	80005cc <__aeabi_dmul>
 800ccec:	e7d9      	b.n	800cca2 <_strtod_l+0x382>
 800ccee:	4b6f      	ldr	r3, [pc, #444]	@ (800ceac <_strtod_l+0x58c>)
 800ccf0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ccf4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ccf8:	f7f3 fc68 	bl	80005cc <__aeabi_dmul>
 800ccfc:	4682      	mov	sl, r0
 800ccfe:	9808      	ldr	r0, [sp, #32]
 800cd00:	468b      	mov	fp, r1
 800cd02:	f7f3 fbe9 	bl	80004d8 <__aeabi_ui2d>
 800cd06:	4602      	mov	r2, r0
 800cd08:	460b      	mov	r3, r1
 800cd0a:	4650      	mov	r0, sl
 800cd0c:	4659      	mov	r1, fp
 800cd0e:	f7f3 faa7 	bl	8000260 <__adddf3>
 800cd12:	2d0f      	cmp	r5, #15
 800cd14:	4682      	mov	sl, r0
 800cd16:	468b      	mov	fp, r1
 800cd18:	ddd7      	ble.n	800ccca <_strtod_l+0x3aa>
 800cd1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd1c:	1b2c      	subs	r4, r5, r4
 800cd1e:	441c      	add	r4, r3
 800cd20:	2c00      	cmp	r4, #0
 800cd22:	f340 8096 	ble.w	800ce52 <_strtod_l+0x532>
 800cd26:	f014 030f 	ands.w	r3, r4, #15
 800cd2a:	d00a      	beq.n	800cd42 <_strtod_l+0x422>
 800cd2c:	495f      	ldr	r1, [pc, #380]	@ (800ceac <_strtod_l+0x58c>)
 800cd2e:	4652      	mov	r2, sl
 800cd30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cd34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd38:	465b      	mov	r3, fp
 800cd3a:	f7f3 fc47 	bl	80005cc <__aeabi_dmul>
 800cd3e:	4682      	mov	sl, r0
 800cd40:	468b      	mov	fp, r1
 800cd42:	f034 040f 	bics.w	r4, r4, #15
 800cd46:	d073      	beq.n	800ce30 <_strtod_l+0x510>
 800cd48:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cd4c:	dd48      	ble.n	800cde0 <_strtod_l+0x4c0>
 800cd4e:	2400      	movs	r4, #0
 800cd50:	46a0      	mov	r8, r4
 800cd52:	46a1      	mov	r9, r4
 800cd54:	940a      	str	r4, [sp, #40]	@ 0x28
 800cd56:	2322      	movs	r3, #34	@ 0x22
 800cd58:	f04f 0a00 	mov.w	sl, #0
 800cd5c:	9a05      	ldr	r2, [sp, #20]
 800cd5e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800cea4 <_strtod_l+0x584>
 800cd62:	6013      	str	r3, [r2, #0]
 800cd64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	f43f ae13 	beq.w	800c992 <_strtod_l+0x72>
 800cd6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cd6e:	9805      	ldr	r0, [sp, #20]
 800cd70:	f003 fbae 	bl	80104d0 <_Bfree>
 800cd74:	4649      	mov	r1, r9
 800cd76:	9805      	ldr	r0, [sp, #20]
 800cd78:	f003 fbaa 	bl	80104d0 <_Bfree>
 800cd7c:	4641      	mov	r1, r8
 800cd7e:	9805      	ldr	r0, [sp, #20]
 800cd80:	f003 fba6 	bl	80104d0 <_Bfree>
 800cd84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cd86:	9805      	ldr	r0, [sp, #20]
 800cd88:	f003 fba2 	bl	80104d0 <_Bfree>
 800cd8c:	4621      	mov	r1, r4
 800cd8e:	9805      	ldr	r0, [sp, #20]
 800cd90:	f003 fb9e 	bl	80104d0 <_Bfree>
 800cd94:	e5fd      	b.n	800c992 <_strtod_l+0x72>
 800cd96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd98:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	dbbc      	blt.n	800cd1a <_strtod_l+0x3fa>
 800cda0:	4c42      	ldr	r4, [pc, #264]	@ (800ceac <_strtod_l+0x58c>)
 800cda2:	f1c5 050f 	rsb	r5, r5, #15
 800cda6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cdaa:	4652      	mov	r2, sl
 800cdac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdb0:	465b      	mov	r3, fp
 800cdb2:	f7f3 fc0b 	bl	80005cc <__aeabi_dmul>
 800cdb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdb8:	1b5d      	subs	r5, r3, r5
 800cdba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cdbe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cdc2:	e791      	b.n	800cce8 <_strtod_l+0x3c8>
 800cdc4:	3316      	adds	r3, #22
 800cdc6:	dba8      	blt.n	800cd1a <_strtod_l+0x3fa>
 800cdc8:	4b38      	ldr	r3, [pc, #224]	@ (800ceac <_strtod_l+0x58c>)
 800cdca:	eba9 0808 	sub.w	r8, r9, r8
 800cdce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cdd2:	4650      	mov	r0, sl
 800cdd4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cdd8:	4659      	mov	r1, fp
 800cdda:	f7f3 fd21 	bl	8000820 <__aeabi_ddiv>
 800cdde:	e760      	b.n	800cca2 <_strtod_l+0x382>
 800cde0:	4b33      	ldr	r3, [pc, #204]	@ (800ceb0 <_strtod_l+0x590>)
 800cde2:	4650      	mov	r0, sl
 800cde4:	9308      	str	r3, [sp, #32]
 800cde6:	2300      	movs	r3, #0
 800cde8:	4659      	mov	r1, fp
 800cdea:	461e      	mov	r6, r3
 800cdec:	1124      	asrs	r4, r4, #4
 800cdee:	2c01      	cmp	r4, #1
 800cdf0:	dc21      	bgt.n	800ce36 <_strtod_l+0x516>
 800cdf2:	b10b      	cbz	r3, 800cdf8 <_strtod_l+0x4d8>
 800cdf4:	4682      	mov	sl, r0
 800cdf6:	468b      	mov	fp, r1
 800cdf8:	492d      	ldr	r1, [pc, #180]	@ (800ceb0 <_strtod_l+0x590>)
 800cdfa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cdfe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ce02:	4652      	mov	r2, sl
 800ce04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce08:	465b      	mov	r3, fp
 800ce0a:	f7f3 fbdf 	bl	80005cc <__aeabi_dmul>
 800ce0e:	4b25      	ldr	r3, [pc, #148]	@ (800cea4 <_strtod_l+0x584>)
 800ce10:	460a      	mov	r2, r1
 800ce12:	400b      	ands	r3, r1
 800ce14:	4927      	ldr	r1, [pc, #156]	@ (800ceb4 <_strtod_l+0x594>)
 800ce16:	4682      	mov	sl, r0
 800ce18:	428b      	cmp	r3, r1
 800ce1a:	d898      	bhi.n	800cd4e <_strtod_l+0x42e>
 800ce1c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ce20:	428b      	cmp	r3, r1
 800ce22:	bf86      	itte	hi
 800ce24:	f04f 3aff 	movhi.w	sl, #4294967295
 800ce28:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800ceb8 <_strtod_l+0x598>
 800ce2c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ce30:	2300      	movs	r3, #0
 800ce32:	9308      	str	r3, [sp, #32]
 800ce34:	e07a      	b.n	800cf2c <_strtod_l+0x60c>
 800ce36:	07e2      	lsls	r2, r4, #31
 800ce38:	d505      	bpl.n	800ce46 <_strtod_l+0x526>
 800ce3a:	9b08      	ldr	r3, [sp, #32]
 800ce3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce40:	f7f3 fbc4 	bl	80005cc <__aeabi_dmul>
 800ce44:	2301      	movs	r3, #1
 800ce46:	9a08      	ldr	r2, [sp, #32]
 800ce48:	3601      	adds	r6, #1
 800ce4a:	3208      	adds	r2, #8
 800ce4c:	1064      	asrs	r4, r4, #1
 800ce4e:	9208      	str	r2, [sp, #32]
 800ce50:	e7cd      	b.n	800cdee <_strtod_l+0x4ce>
 800ce52:	d0ed      	beq.n	800ce30 <_strtod_l+0x510>
 800ce54:	4264      	negs	r4, r4
 800ce56:	f014 020f 	ands.w	r2, r4, #15
 800ce5a:	d00a      	beq.n	800ce72 <_strtod_l+0x552>
 800ce5c:	4b13      	ldr	r3, [pc, #76]	@ (800ceac <_strtod_l+0x58c>)
 800ce5e:	4650      	mov	r0, sl
 800ce60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce64:	4659      	mov	r1, fp
 800ce66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6a:	f7f3 fcd9 	bl	8000820 <__aeabi_ddiv>
 800ce6e:	4682      	mov	sl, r0
 800ce70:	468b      	mov	fp, r1
 800ce72:	1124      	asrs	r4, r4, #4
 800ce74:	d0dc      	beq.n	800ce30 <_strtod_l+0x510>
 800ce76:	2c1f      	cmp	r4, #31
 800ce78:	dd20      	ble.n	800cebc <_strtod_l+0x59c>
 800ce7a:	2400      	movs	r4, #0
 800ce7c:	46a0      	mov	r8, r4
 800ce7e:	46a1      	mov	r9, r4
 800ce80:	940a      	str	r4, [sp, #40]	@ 0x28
 800ce82:	2322      	movs	r3, #34	@ 0x22
 800ce84:	9a05      	ldr	r2, [sp, #20]
 800ce86:	f04f 0a00 	mov.w	sl, #0
 800ce8a:	f04f 0b00 	mov.w	fp, #0
 800ce8e:	6013      	str	r3, [r2, #0]
 800ce90:	e768      	b.n	800cd64 <_strtod_l+0x444>
 800ce92:	bf00      	nop
 800ce94:	0801210e 	.word	0x0801210e
 800ce98:	08011fac 	.word	0x08011fac
 800ce9c:	08012106 	.word	0x08012106
 800cea0:	08012299 	.word	0x08012299
 800cea4:	7ff00000 	.word	0x7ff00000
 800cea8:	08012295 	.word	0x08012295
 800ceac:	08012400 	.word	0x08012400
 800ceb0:	080123d8 	.word	0x080123d8
 800ceb4:	7ca00000 	.word	0x7ca00000
 800ceb8:	7fefffff 	.word	0x7fefffff
 800cebc:	f014 0310 	ands.w	r3, r4, #16
 800cec0:	bf18      	it	ne
 800cec2:	236a      	movne	r3, #106	@ 0x6a
 800cec4:	4650      	mov	r0, sl
 800cec6:	9308      	str	r3, [sp, #32]
 800cec8:	4659      	mov	r1, fp
 800ceca:	2300      	movs	r3, #0
 800cecc:	4ea9      	ldr	r6, [pc, #676]	@ (800d174 <_strtod_l+0x854>)
 800cece:	07e2      	lsls	r2, r4, #31
 800ced0:	d504      	bpl.n	800cedc <_strtod_l+0x5bc>
 800ced2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ced6:	f7f3 fb79 	bl	80005cc <__aeabi_dmul>
 800ceda:	2301      	movs	r3, #1
 800cedc:	1064      	asrs	r4, r4, #1
 800cede:	f106 0608 	add.w	r6, r6, #8
 800cee2:	d1f4      	bne.n	800cece <_strtod_l+0x5ae>
 800cee4:	b10b      	cbz	r3, 800ceea <_strtod_l+0x5ca>
 800cee6:	4682      	mov	sl, r0
 800cee8:	468b      	mov	fp, r1
 800ceea:	9b08      	ldr	r3, [sp, #32]
 800ceec:	b1b3      	cbz	r3, 800cf1c <_strtod_l+0x5fc>
 800ceee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cef2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	4659      	mov	r1, fp
 800cefa:	dd0f      	ble.n	800cf1c <_strtod_l+0x5fc>
 800cefc:	2b1f      	cmp	r3, #31
 800cefe:	dd57      	ble.n	800cfb0 <_strtod_l+0x690>
 800cf00:	2b34      	cmp	r3, #52	@ 0x34
 800cf02:	bfd8      	it	le
 800cf04:	f04f 33ff 	movle.w	r3, #4294967295
 800cf08:	f04f 0a00 	mov.w	sl, #0
 800cf0c:	bfcf      	iteee	gt
 800cf0e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cf12:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800cf16:	4093      	lslle	r3, r2
 800cf18:	ea03 0b01 	andle.w	fp, r3, r1
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	2300      	movs	r3, #0
 800cf20:	4650      	mov	r0, sl
 800cf22:	4659      	mov	r1, fp
 800cf24:	f7f3 fdba 	bl	8000a9c <__aeabi_dcmpeq>
 800cf28:	2800      	cmp	r0, #0
 800cf2a:	d1a6      	bne.n	800ce7a <_strtod_l+0x55a>
 800cf2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf2e:	463a      	mov	r2, r7
 800cf30:	9300      	str	r3, [sp, #0]
 800cf32:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cf34:	462b      	mov	r3, r5
 800cf36:	9805      	ldr	r0, [sp, #20]
 800cf38:	f003 fb32 	bl	80105a0 <__s2b>
 800cf3c:	900a      	str	r0, [sp, #40]	@ 0x28
 800cf3e:	2800      	cmp	r0, #0
 800cf40:	f43f af05 	beq.w	800cd4e <_strtod_l+0x42e>
 800cf44:	2400      	movs	r4, #0
 800cf46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf48:	eba9 0308 	sub.w	r3, r9, r8
 800cf4c:	2a00      	cmp	r2, #0
 800cf4e:	bfa8      	it	ge
 800cf50:	2300      	movge	r3, #0
 800cf52:	46a0      	mov	r8, r4
 800cf54:	9312      	str	r3, [sp, #72]	@ 0x48
 800cf56:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cf5a:	9316      	str	r3, [sp, #88]	@ 0x58
 800cf5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf5e:	9805      	ldr	r0, [sp, #20]
 800cf60:	6859      	ldr	r1, [r3, #4]
 800cf62:	f003 fa75 	bl	8010450 <_Balloc>
 800cf66:	4681      	mov	r9, r0
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	f43f aef4 	beq.w	800cd56 <_strtod_l+0x436>
 800cf6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf70:	300c      	adds	r0, #12
 800cf72:	691a      	ldr	r2, [r3, #16]
 800cf74:	f103 010c 	add.w	r1, r3, #12
 800cf78:	3202      	adds	r2, #2
 800cf7a:	0092      	lsls	r2, r2, #2
 800cf7c:	f001 ffff 	bl	800ef7e <memcpy>
 800cf80:	ab1c      	add	r3, sp, #112	@ 0x70
 800cf82:	9301      	str	r3, [sp, #4]
 800cf84:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cf86:	9300      	str	r3, [sp, #0]
 800cf88:	4652      	mov	r2, sl
 800cf8a:	465b      	mov	r3, fp
 800cf8c:	9805      	ldr	r0, [sp, #20]
 800cf8e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cf92:	f003 fe37 	bl	8010c04 <__d2b>
 800cf96:	901a      	str	r0, [sp, #104]	@ 0x68
 800cf98:	2800      	cmp	r0, #0
 800cf9a:	f43f aedc 	beq.w	800cd56 <_strtod_l+0x436>
 800cf9e:	2101      	movs	r1, #1
 800cfa0:	9805      	ldr	r0, [sp, #20]
 800cfa2:	f003 fb93 	bl	80106cc <__i2b>
 800cfa6:	4680      	mov	r8, r0
 800cfa8:	b948      	cbnz	r0, 800cfbe <_strtod_l+0x69e>
 800cfaa:	f04f 0800 	mov.w	r8, #0
 800cfae:	e6d2      	b.n	800cd56 <_strtod_l+0x436>
 800cfb0:	f04f 32ff 	mov.w	r2, #4294967295
 800cfb4:	fa02 f303 	lsl.w	r3, r2, r3
 800cfb8:	ea03 0a0a 	and.w	sl, r3, sl
 800cfbc:	e7ae      	b.n	800cf1c <_strtod_l+0x5fc>
 800cfbe:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cfc0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cfc2:	2d00      	cmp	r5, #0
 800cfc4:	bfab      	itete	ge
 800cfc6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cfc8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cfca:	18ef      	addge	r7, r5, r3
 800cfcc:	1b5e      	sublt	r6, r3, r5
 800cfce:	9b08      	ldr	r3, [sp, #32]
 800cfd0:	bfa8      	it	ge
 800cfd2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cfd4:	eba5 0503 	sub.w	r5, r5, r3
 800cfd8:	4415      	add	r5, r2
 800cfda:	4b67      	ldr	r3, [pc, #412]	@ (800d178 <_strtod_l+0x858>)
 800cfdc:	f105 35ff 	add.w	r5, r5, #4294967295
 800cfe0:	bfb8      	it	lt
 800cfe2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cfe4:	429d      	cmp	r5, r3
 800cfe6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cfea:	da50      	bge.n	800d08e <_strtod_l+0x76e>
 800cfec:	1b5b      	subs	r3, r3, r5
 800cfee:	2b1f      	cmp	r3, #31
 800cff0:	f04f 0101 	mov.w	r1, #1
 800cff4:	eba2 0203 	sub.w	r2, r2, r3
 800cff8:	dc3d      	bgt.n	800d076 <_strtod_l+0x756>
 800cffa:	fa01 f303 	lsl.w	r3, r1, r3
 800cffe:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d000:	2300      	movs	r3, #0
 800d002:	9310      	str	r3, [sp, #64]	@ 0x40
 800d004:	18bd      	adds	r5, r7, r2
 800d006:	9b08      	ldr	r3, [sp, #32]
 800d008:	42af      	cmp	r7, r5
 800d00a:	4416      	add	r6, r2
 800d00c:	441e      	add	r6, r3
 800d00e:	463b      	mov	r3, r7
 800d010:	bfa8      	it	ge
 800d012:	462b      	movge	r3, r5
 800d014:	42b3      	cmp	r3, r6
 800d016:	bfa8      	it	ge
 800d018:	4633      	movge	r3, r6
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	bfc2      	ittt	gt
 800d01e:	1aed      	subgt	r5, r5, r3
 800d020:	1af6      	subgt	r6, r6, r3
 800d022:	1aff      	subgt	r7, r7, r3
 800d024:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d026:	2b00      	cmp	r3, #0
 800d028:	dd16      	ble.n	800d058 <_strtod_l+0x738>
 800d02a:	4641      	mov	r1, r8
 800d02c:	461a      	mov	r2, r3
 800d02e:	9805      	ldr	r0, [sp, #20]
 800d030:	f003 fc0a 	bl	8010848 <__pow5mult>
 800d034:	4680      	mov	r8, r0
 800d036:	2800      	cmp	r0, #0
 800d038:	d0b7      	beq.n	800cfaa <_strtod_l+0x68a>
 800d03a:	4601      	mov	r1, r0
 800d03c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d03e:	9805      	ldr	r0, [sp, #20]
 800d040:	f003 fb5a 	bl	80106f8 <__multiply>
 800d044:	900e      	str	r0, [sp, #56]	@ 0x38
 800d046:	2800      	cmp	r0, #0
 800d048:	f43f ae85 	beq.w	800cd56 <_strtod_l+0x436>
 800d04c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d04e:	9805      	ldr	r0, [sp, #20]
 800d050:	f003 fa3e 	bl	80104d0 <_Bfree>
 800d054:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d056:	931a      	str	r3, [sp, #104]	@ 0x68
 800d058:	2d00      	cmp	r5, #0
 800d05a:	dc1d      	bgt.n	800d098 <_strtod_l+0x778>
 800d05c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d05e:	2b00      	cmp	r3, #0
 800d060:	dd23      	ble.n	800d0aa <_strtod_l+0x78a>
 800d062:	4649      	mov	r1, r9
 800d064:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d066:	9805      	ldr	r0, [sp, #20]
 800d068:	f003 fbee 	bl	8010848 <__pow5mult>
 800d06c:	4681      	mov	r9, r0
 800d06e:	b9e0      	cbnz	r0, 800d0aa <_strtod_l+0x78a>
 800d070:	f04f 0900 	mov.w	r9, #0
 800d074:	e66f      	b.n	800cd56 <_strtod_l+0x436>
 800d076:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d07a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d07e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d082:	35e2      	adds	r5, #226	@ 0xe2
 800d084:	fa01 f305 	lsl.w	r3, r1, r5
 800d088:	9310      	str	r3, [sp, #64]	@ 0x40
 800d08a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d08c:	e7ba      	b.n	800d004 <_strtod_l+0x6e4>
 800d08e:	2300      	movs	r3, #0
 800d090:	9310      	str	r3, [sp, #64]	@ 0x40
 800d092:	2301      	movs	r3, #1
 800d094:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d096:	e7b5      	b.n	800d004 <_strtod_l+0x6e4>
 800d098:	462a      	mov	r2, r5
 800d09a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d09c:	9805      	ldr	r0, [sp, #20]
 800d09e:	f003 fc2d 	bl	80108fc <__lshift>
 800d0a2:	901a      	str	r0, [sp, #104]	@ 0x68
 800d0a4:	2800      	cmp	r0, #0
 800d0a6:	d1d9      	bne.n	800d05c <_strtod_l+0x73c>
 800d0a8:	e655      	b.n	800cd56 <_strtod_l+0x436>
 800d0aa:	2e00      	cmp	r6, #0
 800d0ac:	dd07      	ble.n	800d0be <_strtod_l+0x79e>
 800d0ae:	4649      	mov	r1, r9
 800d0b0:	4632      	mov	r2, r6
 800d0b2:	9805      	ldr	r0, [sp, #20]
 800d0b4:	f003 fc22 	bl	80108fc <__lshift>
 800d0b8:	4681      	mov	r9, r0
 800d0ba:	2800      	cmp	r0, #0
 800d0bc:	d0d8      	beq.n	800d070 <_strtod_l+0x750>
 800d0be:	2f00      	cmp	r7, #0
 800d0c0:	dd08      	ble.n	800d0d4 <_strtod_l+0x7b4>
 800d0c2:	4641      	mov	r1, r8
 800d0c4:	463a      	mov	r2, r7
 800d0c6:	9805      	ldr	r0, [sp, #20]
 800d0c8:	f003 fc18 	bl	80108fc <__lshift>
 800d0cc:	4680      	mov	r8, r0
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	f43f ae41 	beq.w	800cd56 <_strtod_l+0x436>
 800d0d4:	464a      	mov	r2, r9
 800d0d6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d0d8:	9805      	ldr	r0, [sp, #20]
 800d0da:	f003 fc97 	bl	8010a0c <__mdiff>
 800d0de:	4604      	mov	r4, r0
 800d0e0:	2800      	cmp	r0, #0
 800d0e2:	f43f ae38 	beq.w	800cd56 <_strtod_l+0x436>
 800d0e6:	68c3      	ldr	r3, [r0, #12]
 800d0e8:	4641      	mov	r1, r8
 800d0ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	60c3      	str	r3, [r0, #12]
 800d0f0:	f003 fc70 	bl	80109d4 <__mcmp>
 800d0f4:	2800      	cmp	r0, #0
 800d0f6:	da45      	bge.n	800d184 <_strtod_l+0x864>
 800d0f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0fa:	ea53 030a 	orrs.w	r3, r3, sl
 800d0fe:	d16b      	bne.n	800d1d8 <_strtod_l+0x8b8>
 800d100:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d104:	2b00      	cmp	r3, #0
 800d106:	d167      	bne.n	800d1d8 <_strtod_l+0x8b8>
 800d108:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d10c:	0d1b      	lsrs	r3, r3, #20
 800d10e:	051b      	lsls	r3, r3, #20
 800d110:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d114:	d960      	bls.n	800d1d8 <_strtod_l+0x8b8>
 800d116:	6963      	ldr	r3, [r4, #20]
 800d118:	b913      	cbnz	r3, 800d120 <_strtod_l+0x800>
 800d11a:	6923      	ldr	r3, [r4, #16]
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	dd5b      	ble.n	800d1d8 <_strtod_l+0x8b8>
 800d120:	4621      	mov	r1, r4
 800d122:	2201      	movs	r2, #1
 800d124:	9805      	ldr	r0, [sp, #20]
 800d126:	f003 fbe9 	bl	80108fc <__lshift>
 800d12a:	4641      	mov	r1, r8
 800d12c:	4604      	mov	r4, r0
 800d12e:	f003 fc51 	bl	80109d4 <__mcmp>
 800d132:	2800      	cmp	r0, #0
 800d134:	dd50      	ble.n	800d1d8 <_strtod_l+0x8b8>
 800d136:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d13a:	9a08      	ldr	r2, [sp, #32]
 800d13c:	0d1b      	lsrs	r3, r3, #20
 800d13e:	051b      	lsls	r3, r3, #20
 800d140:	2a00      	cmp	r2, #0
 800d142:	d06a      	beq.n	800d21a <_strtod_l+0x8fa>
 800d144:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d148:	d867      	bhi.n	800d21a <_strtod_l+0x8fa>
 800d14a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d14e:	f67f ae98 	bls.w	800ce82 <_strtod_l+0x562>
 800d152:	4650      	mov	r0, sl
 800d154:	4659      	mov	r1, fp
 800d156:	4b09      	ldr	r3, [pc, #36]	@ (800d17c <_strtod_l+0x85c>)
 800d158:	2200      	movs	r2, #0
 800d15a:	f7f3 fa37 	bl	80005cc <__aeabi_dmul>
 800d15e:	4b08      	ldr	r3, [pc, #32]	@ (800d180 <_strtod_l+0x860>)
 800d160:	4682      	mov	sl, r0
 800d162:	400b      	ands	r3, r1
 800d164:	468b      	mov	fp, r1
 800d166:	2b00      	cmp	r3, #0
 800d168:	f47f ae00 	bne.w	800cd6c <_strtod_l+0x44c>
 800d16c:	2322      	movs	r3, #34	@ 0x22
 800d16e:	9a05      	ldr	r2, [sp, #20]
 800d170:	6013      	str	r3, [r2, #0]
 800d172:	e5fb      	b.n	800cd6c <_strtod_l+0x44c>
 800d174:	08011fd8 	.word	0x08011fd8
 800d178:	fffffc02 	.word	0xfffffc02
 800d17c:	39500000 	.word	0x39500000
 800d180:	7ff00000 	.word	0x7ff00000
 800d184:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d188:	d165      	bne.n	800d256 <_strtod_l+0x936>
 800d18a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d18c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d190:	b35a      	cbz	r2, 800d1ea <_strtod_l+0x8ca>
 800d192:	4a99      	ldr	r2, [pc, #612]	@ (800d3f8 <_strtod_l+0xad8>)
 800d194:	4293      	cmp	r3, r2
 800d196:	d12b      	bne.n	800d1f0 <_strtod_l+0x8d0>
 800d198:	9b08      	ldr	r3, [sp, #32]
 800d19a:	4651      	mov	r1, sl
 800d19c:	b303      	cbz	r3, 800d1e0 <_strtod_l+0x8c0>
 800d19e:	465a      	mov	r2, fp
 800d1a0:	4b96      	ldr	r3, [pc, #600]	@ (800d3fc <_strtod_l+0xadc>)
 800d1a2:	4013      	ands	r3, r2
 800d1a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d1a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ac:	d81b      	bhi.n	800d1e6 <_strtod_l+0x8c6>
 800d1ae:	0d1b      	lsrs	r3, r3, #20
 800d1b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d1b4:	fa02 f303 	lsl.w	r3, r2, r3
 800d1b8:	4299      	cmp	r1, r3
 800d1ba:	d119      	bne.n	800d1f0 <_strtod_l+0x8d0>
 800d1bc:	4b90      	ldr	r3, [pc, #576]	@ (800d400 <_strtod_l+0xae0>)
 800d1be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d1c0:	429a      	cmp	r2, r3
 800d1c2:	d102      	bne.n	800d1ca <_strtod_l+0x8aa>
 800d1c4:	3101      	adds	r1, #1
 800d1c6:	f43f adc6 	beq.w	800cd56 <_strtod_l+0x436>
 800d1ca:	f04f 0a00 	mov.w	sl, #0
 800d1ce:	4b8b      	ldr	r3, [pc, #556]	@ (800d3fc <_strtod_l+0xadc>)
 800d1d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d1d2:	401a      	ands	r2, r3
 800d1d4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d1d8:	9b08      	ldr	r3, [sp, #32]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d1b9      	bne.n	800d152 <_strtod_l+0x832>
 800d1de:	e5c5      	b.n	800cd6c <_strtod_l+0x44c>
 800d1e0:	f04f 33ff 	mov.w	r3, #4294967295
 800d1e4:	e7e8      	b.n	800d1b8 <_strtod_l+0x898>
 800d1e6:	4613      	mov	r3, r2
 800d1e8:	e7e6      	b.n	800d1b8 <_strtod_l+0x898>
 800d1ea:	ea53 030a 	orrs.w	r3, r3, sl
 800d1ee:	d0a2      	beq.n	800d136 <_strtod_l+0x816>
 800d1f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d1f2:	b1db      	cbz	r3, 800d22c <_strtod_l+0x90c>
 800d1f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d1f6:	4213      	tst	r3, r2
 800d1f8:	d0ee      	beq.n	800d1d8 <_strtod_l+0x8b8>
 800d1fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1fc:	4650      	mov	r0, sl
 800d1fe:	4659      	mov	r1, fp
 800d200:	9a08      	ldr	r2, [sp, #32]
 800d202:	b1bb      	cbz	r3, 800d234 <_strtod_l+0x914>
 800d204:	f7ff fb68 	bl	800c8d8 <sulp>
 800d208:	4602      	mov	r2, r0
 800d20a:	460b      	mov	r3, r1
 800d20c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d210:	f7f3 f826 	bl	8000260 <__adddf3>
 800d214:	4682      	mov	sl, r0
 800d216:	468b      	mov	fp, r1
 800d218:	e7de      	b.n	800d1d8 <_strtod_l+0x8b8>
 800d21a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d21e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d222:	f04f 3aff 	mov.w	sl, #4294967295
 800d226:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d22a:	e7d5      	b.n	800d1d8 <_strtod_l+0x8b8>
 800d22c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d22e:	ea13 0f0a 	tst.w	r3, sl
 800d232:	e7e1      	b.n	800d1f8 <_strtod_l+0x8d8>
 800d234:	f7ff fb50 	bl	800c8d8 <sulp>
 800d238:	4602      	mov	r2, r0
 800d23a:	460b      	mov	r3, r1
 800d23c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d240:	f7f3 f80c 	bl	800025c <__aeabi_dsub>
 800d244:	2200      	movs	r2, #0
 800d246:	2300      	movs	r3, #0
 800d248:	4682      	mov	sl, r0
 800d24a:	468b      	mov	fp, r1
 800d24c:	f7f3 fc26 	bl	8000a9c <__aeabi_dcmpeq>
 800d250:	2800      	cmp	r0, #0
 800d252:	d0c1      	beq.n	800d1d8 <_strtod_l+0x8b8>
 800d254:	e615      	b.n	800ce82 <_strtod_l+0x562>
 800d256:	4641      	mov	r1, r8
 800d258:	4620      	mov	r0, r4
 800d25a:	f003 fd2b 	bl	8010cb4 <__ratio>
 800d25e:	2200      	movs	r2, #0
 800d260:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d264:	4606      	mov	r6, r0
 800d266:	460f      	mov	r7, r1
 800d268:	f7f3 fc2c 	bl	8000ac4 <__aeabi_dcmple>
 800d26c:	2800      	cmp	r0, #0
 800d26e:	d06d      	beq.n	800d34c <_strtod_l+0xa2c>
 800d270:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d272:	2b00      	cmp	r3, #0
 800d274:	d178      	bne.n	800d368 <_strtod_l+0xa48>
 800d276:	f1ba 0f00 	cmp.w	sl, #0
 800d27a:	d156      	bne.n	800d32a <_strtod_l+0xa0a>
 800d27c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d27e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d282:	2b00      	cmp	r3, #0
 800d284:	d158      	bne.n	800d338 <_strtod_l+0xa18>
 800d286:	2200      	movs	r2, #0
 800d288:	4630      	mov	r0, r6
 800d28a:	4639      	mov	r1, r7
 800d28c:	4b5d      	ldr	r3, [pc, #372]	@ (800d404 <_strtod_l+0xae4>)
 800d28e:	f7f3 fc0f 	bl	8000ab0 <__aeabi_dcmplt>
 800d292:	2800      	cmp	r0, #0
 800d294:	d157      	bne.n	800d346 <_strtod_l+0xa26>
 800d296:	4630      	mov	r0, r6
 800d298:	4639      	mov	r1, r7
 800d29a:	2200      	movs	r2, #0
 800d29c:	4b5a      	ldr	r3, [pc, #360]	@ (800d408 <_strtod_l+0xae8>)
 800d29e:	f7f3 f995 	bl	80005cc <__aeabi_dmul>
 800d2a2:	4606      	mov	r6, r0
 800d2a4:	460f      	mov	r7, r1
 800d2a6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d2aa:	9606      	str	r6, [sp, #24]
 800d2ac:	9307      	str	r3, [sp, #28]
 800d2ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d2b2:	4d52      	ldr	r5, [pc, #328]	@ (800d3fc <_strtod_l+0xadc>)
 800d2b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d2b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2ba:	401d      	ands	r5, r3
 800d2bc:	4b53      	ldr	r3, [pc, #332]	@ (800d40c <_strtod_l+0xaec>)
 800d2be:	429d      	cmp	r5, r3
 800d2c0:	f040 80aa 	bne.w	800d418 <_strtod_l+0xaf8>
 800d2c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2c6:	4650      	mov	r0, sl
 800d2c8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d2cc:	4659      	mov	r1, fp
 800d2ce:	f003 fc31 	bl	8010b34 <__ulp>
 800d2d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d2d6:	f7f3 f979 	bl	80005cc <__aeabi_dmul>
 800d2da:	4652      	mov	r2, sl
 800d2dc:	465b      	mov	r3, fp
 800d2de:	f7f2 ffbf 	bl	8000260 <__adddf3>
 800d2e2:	460b      	mov	r3, r1
 800d2e4:	4945      	ldr	r1, [pc, #276]	@ (800d3fc <_strtod_l+0xadc>)
 800d2e6:	4a4a      	ldr	r2, [pc, #296]	@ (800d410 <_strtod_l+0xaf0>)
 800d2e8:	4019      	ands	r1, r3
 800d2ea:	4291      	cmp	r1, r2
 800d2ec:	4682      	mov	sl, r0
 800d2ee:	d942      	bls.n	800d376 <_strtod_l+0xa56>
 800d2f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d2f2:	4b43      	ldr	r3, [pc, #268]	@ (800d400 <_strtod_l+0xae0>)
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d103      	bne.n	800d300 <_strtod_l+0x9e0>
 800d2f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d2fa:	3301      	adds	r3, #1
 800d2fc:	f43f ad2b 	beq.w	800cd56 <_strtod_l+0x436>
 800d300:	f04f 3aff 	mov.w	sl, #4294967295
 800d304:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800d400 <_strtod_l+0xae0>
 800d308:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d30a:	9805      	ldr	r0, [sp, #20]
 800d30c:	f003 f8e0 	bl	80104d0 <_Bfree>
 800d310:	4649      	mov	r1, r9
 800d312:	9805      	ldr	r0, [sp, #20]
 800d314:	f003 f8dc 	bl	80104d0 <_Bfree>
 800d318:	4641      	mov	r1, r8
 800d31a:	9805      	ldr	r0, [sp, #20]
 800d31c:	f003 f8d8 	bl	80104d0 <_Bfree>
 800d320:	4621      	mov	r1, r4
 800d322:	9805      	ldr	r0, [sp, #20]
 800d324:	f003 f8d4 	bl	80104d0 <_Bfree>
 800d328:	e618      	b.n	800cf5c <_strtod_l+0x63c>
 800d32a:	f1ba 0f01 	cmp.w	sl, #1
 800d32e:	d103      	bne.n	800d338 <_strtod_l+0xa18>
 800d330:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d332:	2b00      	cmp	r3, #0
 800d334:	f43f ada5 	beq.w	800ce82 <_strtod_l+0x562>
 800d338:	2200      	movs	r2, #0
 800d33a:	4b36      	ldr	r3, [pc, #216]	@ (800d414 <_strtod_l+0xaf4>)
 800d33c:	2600      	movs	r6, #0
 800d33e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d342:	4f30      	ldr	r7, [pc, #192]	@ (800d404 <_strtod_l+0xae4>)
 800d344:	e7b3      	b.n	800d2ae <_strtod_l+0x98e>
 800d346:	2600      	movs	r6, #0
 800d348:	4f2f      	ldr	r7, [pc, #188]	@ (800d408 <_strtod_l+0xae8>)
 800d34a:	e7ac      	b.n	800d2a6 <_strtod_l+0x986>
 800d34c:	4630      	mov	r0, r6
 800d34e:	4639      	mov	r1, r7
 800d350:	4b2d      	ldr	r3, [pc, #180]	@ (800d408 <_strtod_l+0xae8>)
 800d352:	2200      	movs	r2, #0
 800d354:	f7f3 f93a 	bl	80005cc <__aeabi_dmul>
 800d358:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d35a:	4606      	mov	r6, r0
 800d35c:	460f      	mov	r7, r1
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d0a1      	beq.n	800d2a6 <_strtod_l+0x986>
 800d362:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d366:	e7a2      	b.n	800d2ae <_strtod_l+0x98e>
 800d368:	2200      	movs	r2, #0
 800d36a:	4b26      	ldr	r3, [pc, #152]	@ (800d404 <_strtod_l+0xae4>)
 800d36c:	4616      	mov	r6, r2
 800d36e:	461f      	mov	r7, r3
 800d370:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d374:	e79b      	b.n	800d2ae <_strtod_l+0x98e>
 800d376:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d37a:	9b08      	ldr	r3, [sp, #32]
 800d37c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d380:	2b00      	cmp	r3, #0
 800d382:	d1c1      	bne.n	800d308 <_strtod_l+0x9e8>
 800d384:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d388:	0d1b      	lsrs	r3, r3, #20
 800d38a:	051b      	lsls	r3, r3, #20
 800d38c:	429d      	cmp	r5, r3
 800d38e:	d1bb      	bne.n	800d308 <_strtod_l+0x9e8>
 800d390:	4630      	mov	r0, r6
 800d392:	4639      	mov	r1, r7
 800d394:	f7f3 ff4c 	bl	8001230 <__aeabi_d2lz>
 800d398:	f7f3 f8ea 	bl	8000570 <__aeabi_l2d>
 800d39c:	4602      	mov	r2, r0
 800d39e:	460b      	mov	r3, r1
 800d3a0:	4630      	mov	r0, r6
 800d3a2:	4639      	mov	r1, r7
 800d3a4:	f7f2 ff5a 	bl	800025c <__aeabi_dsub>
 800d3a8:	460b      	mov	r3, r1
 800d3aa:	4602      	mov	r2, r0
 800d3ac:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d3b0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d3b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3b6:	ea46 060a 	orr.w	r6, r6, sl
 800d3ba:	431e      	orrs	r6, r3
 800d3bc:	d069      	beq.n	800d492 <_strtod_l+0xb72>
 800d3be:	a30a      	add	r3, pc, #40	@ (adr r3, 800d3e8 <_strtod_l+0xac8>)
 800d3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c4:	f7f3 fb74 	bl	8000ab0 <__aeabi_dcmplt>
 800d3c8:	2800      	cmp	r0, #0
 800d3ca:	f47f accf 	bne.w	800cd6c <_strtod_l+0x44c>
 800d3ce:	a308      	add	r3, pc, #32	@ (adr r3, 800d3f0 <_strtod_l+0xad0>)
 800d3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d3d8:	f7f3 fb88 	bl	8000aec <__aeabi_dcmpgt>
 800d3dc:	2800      	cmp	r0, #0
 800d3de:	d093      	beq.n	800d308 <_strtod_l+0x9e8>
 800d3e0:	e4c4      	b.n	800cd6c <_strtod_l+0x44c>
 800d3e2:	bf00      	nop
 800d3e4:	f3af 8000 	nop.w
 800d3e8:	94a03595 	.word	0x94a03595
 800d3ec:	3fdfffff 	.word	0x3fdfffff
 800d3f0:	35afe535 	.word	0x35afe535
 800d3f4:	3fe00000 	.word	0x3fe00000
 800d3f8:	000fffff 	.word	0x000fffff
 800d3fc:	7ff00000 	.word	0x7ff00000
 800d400:	7fefffff 	.word	0x7fefffff
 800d404:	3ff00000 	.word	0x3ff00000
 800d408:	3fe00000 	.word	0x3fe00000
 800d40c:	7fe00000 	.word	0x7fe00000
 800d410:	7c9fffff 	.word	0x7c9fffff
 800d414:	bff00000 	.word	0xbff00000
 800d418:	9b08      	ldr	r3, [sp, #32]
 800d41a:	b323      	cbz	r3, 800d466 <_strtod_l+0xb46>
 800d41c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d420:	d821      	bhi.n	800d466 <_strtod_l+0xb46>
 800d422:	a327      	add	r3, pc, #156	@ (adr r3, 800d4c0 <_strtod_l+0xba0>)
 800d424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d428:	4630      	mov	r0, r6
 800d42a:	4639      	mov	r1, r7
 800d42c:	f7f3 fb4a 	bl	8000ac4 <__aeabi_dcmple>
 800d430:	b1a0      	cbz	r0, 800d45c <_strtod_l+0xb3c>
 800d432:	4639      	mov	r1, r7
 800d434:	4630      	mov	r0, r6
 800d436:	f7f3 fba1 	bl	8000b7c <__aeabi_d2uiz>
 800d43a:	2801      	cmp	r0, #1
 800d43c:	bf38      	it	cc
 800d43e:	2001      	movcc	r0, #1
 800d440:	f7f3 f84a 	bl	80004d8 <__aeabi_ui2d>
 800d444:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d446:	4606      	mov	r6, r0
 800d448:	460f      	mov	r7, r1
 800d44a:	b9fb      	cbnz	r3, 800d48c <_strtod_l+0xb6c>
 800d44c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d450:	9014      	str	r0, [sp, #80]	@ 0x50
 800d452:	9315      	str	r3, [sp, #84]	@ 0x54
 800d454:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d458:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d45c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d45e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d462:	1b5b      	subs	r3, r3, r5
 800d464:	9311      	str	r3, [sp, #68]	@ 0x44
 800d466:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d46a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d46e:	f003 fb61 	bl	8010b34 <__ulp>
 800d472:	4602      	mov	r2, r0
 800d474:	460b      	mov	r3, r1
 800d476:	4650      	mov	r0, sl
 800d478:	4659      	mov	r1, fp
 800d47a:	f7f3 f8a7 	bl	80005cc <__aeabi_dmul>
 800d47e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d482:	f7f2 feed 	bl	8000260 <__adddf3>
 800d486:	4682      	mov	sl, r0
 800d488:	468b      	mov	fp, r1
 800d48a:	e776      	b.n	800d37a <_strtod_l+0xa5a>
 800d48c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d490:	e7e0      	b.n	800d454 <_strtod_l+0xb34>
 800d492:	a30d      	add	r3, pc, #52	@ (adr r3, 800d4c8 <_strtod_l+0xba8>)
 800d494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d498:	f7f3 fb0a 	bl	8000ab0 <__aeabi_dcmplt>
 800d49c:	e79e      	b.n	800d3dc <_strtod_l+0xabc>
 800d49e:	2300      	movs	r3, #0
 800d4a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d4a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d4a4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d4a6:	6013      	str	r3, [r2, #0]
 800d4a8:	f7ff ba77 	b.w	800c99a <_strtod_l+0x7a>
 800d4ac:	2a65      	cmp	r2, #101	@ 0x65
 800d4ae:	f43f ab6e 	beq.w	800cb8e <_strtod_l+0x26e>
 800d4b2:	2a45      	cmp	r2, #69	@ 0x45
 800d4b4:	f43f ab6b 	beq.w	800cb8e <_strtod_l+0x26e>
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	f7ff bba6 	b.w	800cc0a <_strtod_l+0x2ea>
 800d4be:	bf00      	nop
 800d4c0:	ffc00000 	.word	0xffc00000
 800d4c4:	41dfffff 	.word	0x41dfffff
 800d4c8:	94a03595 	.word	0x94a03595
 800d4cc:	3fcfffff 	.word	0x3fcfffff

0800d4d0 <strtof>:
 800d4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4d4:	4d24      	ldr	r5, [pc, #144]	@ (800d568 <strtof+0x98>)
 800d4d6:	460a      	mov	r2, r1
 800d4d8:	4b24      	ldr	r3, [pc, #144]	@ (800d56c <strtof+0x9c>)
 800d4da:	4601      	mov	r1, r0
 800d4dc:	6828      	ldr	r0, [r5, #0]
 800d4de:	f7ff fa1f 	bl	800c920 <_strtod_l>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	460b      	mov	r3, r1
 800d4e6:	4606      	mov	r6, r0
 800d4e8:	460f      	mov	r7, r1
 800d4ea:	f7f3 fb09 	bl	8000b00 <__aeabi_dcmpun>
 800d4ee:	b168      	cbz	r0, 800d50c <strtof+0x3c>
 800d4f0:	2f00      	cmp	r7, #0
 800d4f2:	481f      	ldr	r0, [pc, #124]	@ (800d570 <strtof+0xa0>)
 800d4f4:	da06      	bge.n	800d504 <strtof+0x34>
 800d4f6:	f001 fd57 	bl	800efa8 <nanf>
 800d4fa:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800d4fe:	4620      	mov	r0, r4
 800d500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d504:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d508:	f001 bd4e 	b.w	800efa8 <nanf>
 800d50c:	4639      	mov	r1, r7
 800d50e:	4630      	mov	r0, r6
 800d510:	f7f3 fb54 	bl	8000bbc <__aeabi_d2f>
 800d514:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800d518:	4604      	mov	r4, r0
 800d51a:	4916      	ldr	r1, [pc, #88]	@ (800d574 <strtof+0xa4>)
 800d51c:	4640      	mov	r0, r8
 800d51e:	f7f3 fe71 	bl	8001204 <__aeabi_fcmpun>
 800d522:	b9b0      	cbnz	r0, 800d552 <strtof+0x82>
 800d524:	4640      	mov	r0, r8
 800d526:	4913      	ldr	r1, [pc, #76]	@ (800d574 <strtof+0xa4>)
 800d528:	f7f3 fe4e 	bl	80011c8 <__aeabi_fcmple>
 800d52c:	b988      	cbnz	r0, 800d552 <strtof+0x82>
 800d52e:	f027 4900 	bic.w	r9, r7, #2147483648	@ 0x80000000
 800d532:	f04f 32ff 	mov.w	r2, #4294967295
 800d536:	4630      	mov	r0, r6
 800d538:	4649      	mov	r1, r9
 800d53a:	4b0f      	ldr	r3, [pc, #60]	@ (800d578 <strtof+0xa8>)
 800d53c:	f7f3 fae0 	bl	8000b00 <__aeabi_dcmpun>
 800d540:	b970      	cbnz	r0, 800d560 <strtof+0x90>
 800d542:	f04f 32ff 	mov.w	r2, #4294967295
 800d546:	4630      	mov	r0, r6
 800d548:	4649      	mov	r1, r9
 800d54a:	4b0b      	ldr	r3, [pc, #44]	@ (800d578 <strtof+0xa8>)
 800d54c:	f7f3 faba 	bl	8000ac4 <__aeabi_dcmple>
 800d550:	b930      	cbnz	r0, 800d560 <strtof+0x90>
 800d552:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800d556:	d1d2      	bne.n	800d4fe <strtof+0x2e>
 800d558:	4b08      	ldr	r3, [pc, #32]	@ (800d57c <strtof+0xac>)
 800d55a:	403b      	ands	r3, r7
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d0ce      	beq.n	800d4fe <strtof+0x2e>
 800d560:	2222      	movs	r2, #34	@ 0x22
 800d562:	682b      	ldr	r3, [r5, #0]
 800d564:	601a      	str	r2, [r3, #0]
 800d566:	e7ca      	b.n	800d4fe <strtof+0x2e>
 800d568:	20000284 	.word	0x20000284
 800d56c:	20000118 	.word	0x20000118
 800d570:	08012295 	.word	0x08012295
 800d574:	7f7fffff 	.word	0x7f7fffff
 800d578:	7fefffff 	.word	0x7fefffff
 800d57c:	7ff00000 	.word	0x7ff00000

0800d580 <_strtol_l.constprop.0>:
 800d580:	2b24      	cmp	r3, #36	@ 0x24
 800d582:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d586:	4686      	mov	lr, r0
 800d588:	4690      	mov	r8, r2
 800d58a:	d801      	bhi.n	800d590 <_strtol_l.constprop.0+0x10>
 800d58c:	2b01      	cmp	r3, #1
 800d58e:	d106      	bne.n	800d59e <_strtol_l.constprop.0+0x1e>
 800d590:	f001 fcb0 	bl	800eef4 <__errno>
 800d594:	2316      	movs	r3, #22
 800d596:	6003      	str	r3, [r0, #0]
 800d598:	2000      	movs	r0, #0
 800d59a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d59e:	460d      	mov	r5, r1
 800d5a0:	4833      	ldr	r0, [pc, #204]	@ (800d670 <_strtol_l.constprop.0+0xf0>)
 800d5a2:	462a      	mov	r2, r5
 800d5a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d5a8:	5d06      	ldrb	r6, [r0, r4]
 800d5aa:	f016 0608 	ands.w	r6, r6, #8
 800d5ae:	d1f8      	bne.n	800d5a2 <_strtol_l.constprop.0+0x22>
 800d5b0:	2c2d      	cmp	r4, #45	@ 0x2d
 800d5b2:	d12d      	bne.n	800d610 <_strtol_l.constprop.0+0x90>
 800d5b4:	2601      	movs	r6, #1
 800d5b6:	782c      	ldrb	r4, [r5, #0]
 800d5b8:	1c95      	adds	r5, r2, #2
 800d5ba:	f033 0210 	bics.w	r2, r3, #16
 800d5be:	d109      	bne.n	800d5d4 <_strtol_l.constprop.0+0x54>
 800d5c0:	2c30      	cmp	r4, #48	@ 0x30
 800d5c2:	d12a      	bne.n	800d61a <_strtol_l.constprop.0+0x9a>
 800d5c4:	782a      	ldrb	r2, [r5, #0]
 800d5c6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d5ca:	2a58      	cmp	r2, #88	@ 0x58
 800d5cc:	d125      	bne.n	800d61a <_strtol_l.constprop.0+0x9a>
 800d5ce:	2310      	movs	r3, #16
 800d5d0:	786c      	ldrb	r4, [r5, #1]
 800d5d2:	3502      	adds	r5, #2
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d5da:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d5de:	fbbc f9f3 	udiv	r9, ip, r3
 800d5e2:	4610      	mov	r0, r2
 800d5e4:	fb03 ca19 	mls	sl, r3, r9, ip
 800d5e8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d5ec:	2f09      	cmp	r7, #9
 800d5ee:	d81b      	bhi.n	800d628 <_strtol_l.constprop.0+0xa8>
 800d5f0:	463c      	mov	r4, r7
 800d5f2:	42a3      	cmp	r3, r4
 800d5f4:	dd27      	ble.n	800d646 <_strtol_l.constprop.0+0xc6>
 800d5f6:	1c57      	adds	r7, r2, #1
 800d5f8:	d007      	beq.n	800d60a <_strtol_l.constprop.0+0x8a>
 800d5fa:	4581      	cmp	r9, r0
 800d5fc:	d320      	bcc.n	800d640 <_strtol_l.constprop.0+0xc0>
 800d5fe:	d101      	bne.n	800d604 <_strtol_l.constprop.0+0x84>
 800d600:	45a2      	cmp	sl, r4
 800d602:	db1d      	blt.n	800d640 <_strtol_l.constprop.0+0xc0>
 800d604:	2201      	movs	r2, #1
 800d606:	fb00 4003 	mla	r0, r0, r3, r4
 800d60a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d60e:	e7eb      	b.n	800d5e8 <_strtol_l.constprop.0+0x68>
 800d610:	2c2b      	cmp	r4, #43	@ 0x2b
 800d612:	bf04      	itt	eq
 800d614:	782c      	ldrbeq	r4, [r5, #0]
 800d616:	1c95      	addeq	r5, r2, #2
 800d618:	e7cf      	b.n	800d5ba <_strtol_l.constprop.0+0x3a>
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d1da      	bne.n	800d5d4 <_strtol_l.constprop.0+0x54>
 800d61e:	2c30      	cmp	r4, #48	@ 0x30
 800d620:	bf0c      	ite	eq
 800d622:	2308      	moveq	r3, #8
 800d624:	230a      	movne	r3, #10
 800d626:	e7d5      	b.n	800d5d4 <_strtol_l.constprop.0+0x54>
 800d628:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d62c:	2f19      	cmp	r7, #25
 800d62e:	d801      	bhi.n	800d634 <_strtol_l.constprop.0+0xb4>
 800d630:	3c37      	subs	r4, #55	@ 0x37
 800d632:	e7de      	b.n	800d5f2 <_strtol_l.constprop.0+0x72>
 800d634:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d638:	2f19      	cmp	r7, #25
 800d63a:	d804      	bhi.n	800d646 <_strtol_l.constprop.0+0xc6>
 800d63c:	3c57      	subs	r4, #87	@ 0x57
 800d63e:	e7d8      	b.n	800d5f2 <_strtol_l.constprop.0+0x72>
 800d640:	f04f 32ff 	mov.w	r2, #4294967295
 800d644:	e7e1      	b.n	800d60a <_strtol_l.constprop.0+0x8a>
 800d646:	1c53      	adds	r3, r2, #1
 800d648:	d108      	bne.n	800d65c <_strtol_l.constprop.0+0xdc>
 800d64a:	2322      	movs	r3, #34	@ 0x22
 800d64c:	4660      	mov	r0, ip
 800d64e:	f8ce 3000 	str.w	r3, [lr]
 800d652:	f1b8 0f00 	cmp.w	r8, #0
 800d656:	d0a0      	beq.n	800d59a <_strtol_l.constprop.0+0x1a>
 800d658:	1e69      	subs	r1, r5, #1
 800d65a:	e006      	b.n	800d66a <_strtol_l.constprop.0+0xea>
 800d65c:	b106      	cbz	r6, 800d660 <_strtol_l.constprop.0+0xe0>
 800d65e:	4240      	negs	r0, r0
 800d660:	f1b8 0f00 	cmp.w	r8, #0
 800d664:	d099      	beq.n	800d59a <_strtol_l.constprop.0+0x1a>
 800d666:	2a00      	cmp	r2, #0
 800d668:	d1f6      	bne.n	800d658 <_strtol_l.constprop.0+0xd8>
 800d66a:	f8c8 1000 	str.w	r1, [r8]
 800d66e:	e794      	b.n	800d59a <_strtol_l.constprop.0+0x1a>
 800d670:	08012001 	.word	0x08012001

0800d674 <_strtol_r>:
 800d674:	f7ff bf84 	b.w	800d580 <_strtol_l.constprop.0>

0800d678 <strtol>:
 800d678:	4613      	mov	r3, r2
 800d67a:	460a      	mov	r2, r1
 800d67c:	4601      	mov	r1, r0
 800d67e:	4802      	ldr	r0, [pc, #8]	@ (800d688 <strtol+0x10>)
 800d680:	6800      	ldr	r0, [r0, #0]
 800d682:	f7ff bf7d 	b.w	800d580 <_strtol_l.constprop.0>
 800d686:	bf00      	nop
 800d688:	20000284 	.word	0x20000284

0800d68c <__cvt>:
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d692:	461d      	mov	r5, r3
 800d694:	bfbb      	ittet	lt
 800d696:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800d69a:	461d      	movlt	r5, r3
 800d69c:	2300      	movge	r3, #0
 800d69e:	232d      	movlt	r3, #45	@ 0x2d
 800d6a0:	b088      	sub	sp, #32
 800d6a2:	4614      	mov	r4, r2
 800d6a4:	bfb8      	it	lt
 800d6a6:	4614      	movlt	r4, r2
 800d6a8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d6aa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800d6ac:	7013      	strb	r3, [r2, #0]
 800d6ae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d6b0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800d6b4:	f023 0820 	bic.w	r8, r3, #32
 800d6b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d6bc:	d005      	beq.n	800d6ca <__cvt+0x3e>
 800d6be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d6c2:	d100      	bne.n	800d6c6 <__cvt+0x3a>
 800d6c4:	3601      	adds	r6, #1
 800d6c6:	2302      	movs	r3, #2
 800d6c8:	e000      	b.n	800d6cc <__cvt+0x40>
 800d6ca:	2303      	movs	r3, #3
 800d6cc:	aa07      	add	r2, sp, #28
 800d6ce:	9204      	str	r2, [sp, #16]
 800d6d0:	aa06      	add	r2, sp, #24
 800d6d2:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d6d6:	e9cd 3600 	strd	r3, r6, [sp]
 800d6da:	4622      	mov	r2, r4
 800d6dc:	462b      	mov	r3, r5
 800d6de:	f001 fd17 	bl	800f110 <_dtoa_r>
 800d6e2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d6e6:	4607      	mov	r7, r0
 800d6e8:	d119      	bne.n	800d71e <__cvt+0x92>
 800d6ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d6ec:	07db      	lsls	r3, r3, #31
 800d6ee:	d50e      	bpl.n	800d70e <__cvt+0x82>
 800d6f0:	eb00 0906 	add.w	r9, r0, r6
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	4620      	mov	r0, r4
 800d6fa:	4629      	mov	r1, r5
 800d6fc:	f7f3 f9ce 	bl	8000a9c <__aeabi_dcmpeq>
 800d700:	b108      	cbz	r0, 800d706 <__cvt+0x7a>
 800d702:	f8cd 901c 	str.w	r9, [sp, #28]
 800d706:	2230      	movs	r2, #48	@ 0x30
 800d708:	9b07      	ldr	r3, [sp, #28]
 800d70a:	454b      	cmp	r3, r9
 800d70c:	d31e      	bcc.n	800d74c <__cvt+0xc0>
 800d70e:	4638      	mov	r0, r7
 800d710:	9b07      	ldr	r3, [sp, #28]
 800d712:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d714:	1bdb      	subs	r3, r3, r7
 800d716:	6013      	str	r3, [r2, #0]
 800d718:	b008      	add	sp, #32
 800d71a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d71e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d722:	eb00 0906 	add.w	r9, r0, r6
 800d726:	d1e5      	bne.n	800d6f4 <__cvt+0x68>
 800d728:	7803      	ldrb	r3, [r0, #0]
 800d72a:	2b30      	cmp	r3, #48	@ 0x30
 800d72c:	d10a      	bne.n	800d744 <__cvt+0xb8>
 800d72e:	2200      	movs	r2, #0
 800d730:	2300      	movs	r3, #0
 800d732:	4620      	mov	r0, r4
 800d734:	4629      	mov	r1, r5
 800d736:	f7f3 f9b1 	bl	8000a9c <__aeabi_dcmpeq>
 800d73a:	b918      	cbnz	r0, 800d744 <__cvt+0xb8>
 800d73c:	f1c6 0601 	rsb	r6, r6, #1
 800d740:	f8ca 6000 	str.w	r6, [sl]
 800d744:	f8da 3000 	ldr.w	r3, [sl]
 800d748:	4499      	add	r9, r3
 800d74a:	e7d3      	b.n	800d6f4 <__cvt+0x68>
 800d74c:	1c59      	adds	r1, r3, #1
 800d74e:	9107      	str	r1, [sp, #28]
 800d750:	701a      	strb	r2, [r3, #0]
 800d752:	e7d9      	b.n	800d708 <__cvt+0x7c>

0800d754 <__exponent>:
 800d754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d756:	2900      	cmp	r1, #0
 800d758:	bfb6      	itet	lt
 800d75a:	232d      	movlt	r3, #45	@ 0x2d
 800d75c:	232b      	movge	r3, #43	@ 0x2b
 800d75e:	4249      	neglt	r1, r1
 800d760:	2909      	cmp	r1, #9
 800d762:	7002      	strb	r2, [r0, #0]
 800d764:	7043      	strb	r3, [r0, #1]
 800d766:	dd29      	ble.n	800d7bc <__exponent+0x68>
 800d768:	f10d 0307 	add.w	r3, sp, #7
 800d76c:	461d      	mov	r5, r3
 800d76e:	270a      	movs	r7, #10
 800d770:	fbb1 f6f7 	udiv	r6, r1, r7
 800d774:	461a      	mov	r2, r3
 800d776:	fb07 1416 	mls	r4, r7, r6, r1
 800d77a:	3430      	adds	r4, #48	@ 0x30
 800d77c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d780:	460c      	mov	r4, r1
 800d782:	2c63      	cmp	r4, #99	@ 0x63
 800d784:	4631      	mov	r1, r6
 800d786:	f103 33ff 	add.w	r3, r3, #4294967295
 800d78a:	dcf1      	bgt.n	800d770 <__exponent+0x1c>
 800d78c:	3130      	adds	r1, #48	@ 0x30
 800d78e:	1e94      	subs	r4, r2, #2
 800d790:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d794:	4623      	mov	r3, r4
 800d796:	1c41      	adds	r1, r0, #1
 800d798:	42ab      	cmp	r3, r5
 800d79a:	d30a      	bcc.n	800d7b2 <__exponent+0x5e>
 800d79c:	f10d 0309 	add.w	r3, sp, #9
 800d7a0:	1a9b      	subs	r3, r3, r2
 800d7a2:	42ac      	cmp	r4, r5
 800d7a4:	bf88      	it	hi
 800d7a6:	2300      	movhi	r3, #0
 800d7a8:	3302      	adds	r3, #2
 800d7aa:	4403      	add	r3, r0
 800d7ac:	1a18      	subs	r0, r3, r0
 800d7ae:	b003      	add	sp, #12
 800d7b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7b2:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d7b6:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d7ba:	e7ed      	b.n	800d798 <__exponent+0x44>
 800d7bc:	2330      	movs	r3, #48	@ 0x30
 800d7be:	3130      	adds	r1, #48	@ 0x30
 800d7c0:	7083      	strb	r3, [r0, #2]
 800d7c2:	70c1      	strb	r1, [r0, #3]
 800d7c4:	1d03      	adds	r3, r0, #4
 800d7c6:	e7f1      	b.n	800d7ac <__exponent+0x58>

0800d7c8 <_printf_float>:
 800d7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7cc:	b091      	sub	sp, #68	@ 0x44
 800d7ce:	460c      	mov	r4, r1
 800d7d0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800d7d4:	4616      	mov	r6, r2
 800d7d6:	461f      	mov	r7, r3
 800d7d8:	4605      	mov	r5, r0
 800d7da:	f001 fadb 	bl	800ed94 <_localeconv_r>
 800d7de:	6803      	ldr	r3, [r0, #0]
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	9308      	str	r3, [sp, #32]
 800d7e4:	f7f2 fd2e 	bl	8000244 <strlen>
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	930e      	str	r3, [sp, #56]	@ 0x38
 800d7ec:	f8d8 3000 	ldr.w	r3, [r8]
 800d7f0:	9009      	str	r0, [sp, #36]	@ 0x24
 800d7f2:	3307      	adds	r3, #7
 800d7f4:	f023 0307 	bic.w	r3, r3, #7
 800d7f8:	f103 0208 	add.w	r2, r3, #8
 800d7fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d800:	f8d4 b000 	ldr.w	fp, [r4]
 800d804:	f8c8 2000 	str.w	r2, [r8]
 800d808:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d80c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d810:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d812:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800d816:	f04f 32ff 	mov.w	r2, #4294967295
 800d81a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d81e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d822:	4b9c      	ldr	r3, [pc, #624]	@ (800da94 <_printf_float+0x2cc>)
 800d824:	f7f3 f96c 	bl	8000b00 <__aeabi_dcmpun>
 800d828:	bb70      	cbnz	r0, 800d888 <_printf_float+0xc0>
 800d82a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d82e:	f04f 32ff 	mov.w	r2, #4294967295
 800d832:	4b98      	ldr	r3, [pc, #608]	@ (800da94 <_printf_float+0x2cc>)
 800d834:	f7f3 f946 	bl	8000ac4 <__aeabi_dcmple>
 800d838:	bb30      	cbnz	r0, 800d888 <_printf_float+0xc0>
 800d83a:	2200      	movs	r2, #0
 800d83c:	2300      	movs	r3, #0
 800d83e:	4640      	mov	r0, r8
 800d840:	4649      	mov	r1, r9
 800d842:	f7f3 f935 	bl	8000ab0 <__aeabi_dcmplt>
 800d846:	b110      	cbz	r0, 800d84e <_printf_float+0x86>
 800d848:	232d      	movs	r3, #45	@ 0x2d
 800d84a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d84e:	4a92      	ldr	r2, [pc, #584]	@ (800da98 <_printf_float+0x2d0>)
 800d850:	4b92      	ldr	r3, [pc, #584]	@ (800da9c <_printf_float+0x2d4>)
 800d852:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d856:	bf94      	ite	ls
 800d858:	4690      	movls	r8, r2
 800d85a:	4698      	movhi	r8, r3
 800d85c:	2303      	movs	r3, #3
 800d85e:	f04f 0900 	mov.w	r9, #0
 800d862:	6123      	str	r3, [r4, #16]
 800d864:	f02b 0304 	bic.w	r3, fp, #4
 800d868:	6023      	str	r3, [r4, #0]
 800d86a:	4633      	mov	r3, r6
 800d86c:	4621      	mov	r1, r4
 800d86e:	4628      	mov	r0, r5
 800d870:	9700      	str	r7, [sp, #0]
 800d872:	aa0f      	add	r2, sp, #60	@ 0x3c
 800d874:	f000 f9d4 	bl	800dc20 <_printf_common>
 800d878:	3001      	adds	r0, #1
 800d87a:	f040 8090 	bne.w	800d99e <_printf_float+0x1d6>
 800d87e:	f04f 30ff 	mov.w	r0, #4294967295
 800d882:	b011      	add	sp, #68	@ 0x44
 800d884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d888:	4642      	mov	r2, r8
 800d88a:	464b      	mov	r3, r9
 800d88c:	4640      	mov	r0, r8
 800d88e:	4649      	mov	r1, r9
 800d890:	f7f3 f936 	bl	8000b00 <__aeabi_dcmpun>
 800d894:	b148      	cbz	r0, 800d8aa <_printf_float+0xe2>
 800d896:	464b      	mov	r3, r9
 800d898:	2b00      	cmp	r3, #0
 800d89a:	bfb8      	it	lt
 800d89c:	232d      	movlt	r3, #45	@ 0x2d
 800d89e:	4a80      	ldr	r2, [pc, #512]	@ (800daa0 <_printf_float+0x2d8>)
 800d8a0:	bfb8      	it	lt
 800d8a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d8a6:	4b7f      	ldr	r3, [pc, #508]	@ (800daa4 <_printf_float+0x2dc>)
 800d8a8:	e7d3      	b.n	800d852 <_printf_float+0x8a>
 800d8aa:	6863      	ldr	r3, [r4, #4]
 800d8ac:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800d8b0:	1c5a      	adds	r2, r3, #1
 800d8b2:	d13f      	bne.n	800d934 <_printf_float+0x16c>
 800d8b4:	2306      	movs	r3, #6
 800d8b6:	6063      	str	r3, [r4, #4]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800d8be:	6023      	str	r3, [r4, #0]
 800d8c0:	9206      	str	r2, [sp, #24]
 800d8c2:	aa0e      	add	r2, sp, #56	@ 0x38
 800d8c4:	e9cd a204 	strd	sl, r2, [sp, #16]
 800d8c8:	aa0d      	add	r2, sp, #52	@ 0x34
 800d8ca:	9203      	str	r2, [sp, #12]
 800d8cc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800d8d0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d8d4:	6863      	ldr	r3, [r4, #4]
 800d8d6:	4642      	mov	r2, r8
 800d8d8:	9300      	str	r3, [sp, #0]
 800d8da:	4628      	mov	r0, r5
 800d8dc:	464b      	mov	r3, r9
 800d8de:	910a      	str	r1, [sp, #40]	@ 0x28
 800d8e0:	f7ff fed4 	bl	800d68c <__cvt>
 800d8e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d8e6:	4680      	mov	r8, r0
 800d8e8:	2947      	cmp	r1, #71	@ 0x47
 800d8ea:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d8ec:	d128      	bne.n	800d940 <_printf_float+0x178>
 800d8ee:	1cc8      	adds	r0, r1, #3
 800d8f0:	db02      	blt.n	800d8f8 <_printf_float+0x130>
 800d8f2:	6863      	ldr	r3, [r4, #4]
 800d8f4:	4299      	cmp	r1, r3
 800d8f6:	dd40      	ble.n	800d97a <_printf_float+0x1b2>
 800d8f8:	f1aa 0a02 	sub.w	sl, sl, #2
 800d8fc:	fa5f fa8a 	uxtb.w	sl, sl
 800d900:	4652      	mov	r2, sl
 800d902:	3901      	subs	r1, #1
 800d904:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d908:	910d      	str	r1, [sp, #52]	@ 0x34
 800d90a:	f7ff ff23 	bl	800d754 <__exponent>
 800d90e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d910:	4681      	mov	r9, r0
 800d912:	1813      	adds	r3, r2, r0
 800d914:	2a01      	cmp	r2, #1
 800d916:	6123      	str	r3, [r4, #16]
 800d918:	dc02      	bgt.n	800d920 <_printf_float+0x158>
 800d91a:	6822      	ldr	r2, [r4, #0]
 800d91c:	07d2      	lsls	r2, r2, #31
 800d91e:	d501      	bpl.n	800d924 <_printf_float+0x15c>
 800d920:	3301      	adds	r3, #1
 800d922:	6123      	str	r3, [r4, #16]
 800d924:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d09e      	beq.n	800d86a <_printf_float+0xa2>
 800d92c:	232d      	movs	r3, #45	@ 0x2d
 800d92e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d932:	e79a      	b.n	800d86a <_printf_float+0xa2>
 800d934:	2947      	cmp	r1, #71	@ 0x47
 800d936:	d1bf      	bne.n	800d8b8 <_printf_float+0xf0>
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d1bd      	bne.n	800d8b8 <_printf_float+0xf0>
 800d93c:	2301      	movs	r3, #1
 800d93e:	e7ba      	b.n	800d8b6 <_printf_float+0xee>
 800d940:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d944:	d9dc      	bls.n	800d900 <_printf_float+0x138>
 800d946:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d94a:	d118      	bne.n	800d97e <_printf_float+0x1b6>
 800d94c:	2900      	cmp	r1, #0
 800d94e:	6863      	ldr	r3, [r4, #4]
 800d950:	dd0b      	ble.n	800d96a <_printf_float+0x1a2>
 800d952:	6121      	str	r1, [r4, #16]
 800d954:	b913      	cbnz	r3, 800d95c <_printf_float+0x194>
 800d956:	6822      	ldr	r2, [r4, #0]
 800d958:	07d0      	lsls	r0, r2, #31
 800d95a:	d502      	bpl.n	800d962 <_printf_float+0x19a>
 800d95c:	3301      	adds	r3, #1
 800d95e:	440b      	add	r3, r1
 800d960:	6123      	str	r3, [r4, #16]
 800d962:	f04f 0900 	mov.w	r9, #0
 800d966:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d968:	e7dc      	b.n	800d924 <_printf_float+0x15c>
 800d96a:	b913      	cbnz	r3, 800d972 <_printf_float+0x1aa>
 800d96c:	6822      	ldr	r2, [r4, #0]
 800d96e:	07d2      	lsls	r2, r2, #31
 800d970:	d501      	bpl.n	800d976 <_printf_float+0x1ae>
 800d972:	3302      	adds	r3, #2
 800d974:	e7f4      	b.n	800d960 <_printf_float+0x198>
 800d976:	2301      	movs	r3, #1
 800d978:	e7f2      	b.n	800d960 <_printf_float+0x198>
 800d97a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d97e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d980:	4299      	cmp	r1, r3
 800d982:	db05      	blt.n	800d990 <_printf_float+0x1c8>
 800d984:	6823      	ldr	r3, [r4, #0]
 800d986:	6121      	str	r1, [r4, #16]
 800d988:	07d8      	lsls	r0, r3, #31
 800d98a:	d5ea      	bpl.n	800d962 <_printf_float+0x19a>
 800d98c:	1c4b      	adds	r3, r1, #1
 800d98e:	e7e7      	b.n	800d960 <_printf_float+0x198>
 800d990:	2900      	cmp	r1, #0
 800d992:	bfcc      	ite	gt
 800d994:	2201      	movgt	r2, #1
 800d996:	f1c1 0202 	rsble	r2, r1, #2
 800d99a:	4413      	add	r3, r2
 800d99c:	e7e0      	b.n	800d960 <_printf_float+0x198>
 800d99e:	6823      	ldr	r3, [r4, #0]
 800d9a0:	055a      	lsls	r2, r3, #21
 800d9a2:	d407      	bmi.n	800d9b4 <_printf_float+0x1ec>
 800d9a4:	6923      	ldr	r3, [r4, #16]
 800d9a6:	4642      	mov	r2, r8
 800d9a8:	4631      	mov	r1, r6
 800d9aa:	4628      	mov	r0, r5
 800d9ac:	47b8      	blx	r7
 800d9ae:	3001      	adds	r0, #1
 800d9b0:	d12b      	bne.n	800da0a <_printf_float+0x242>
 800d9b2:	e764      	b.n	800d87e <_printf_float+0xb6>
 800d9b4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d9b8:	f240 80dc 	bls.w	800db74 <_printf_float+0x3ac>
 800d9bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	f7f3 f86a 	bl	8000a9c <__aeabi_dcmpeq>
 800d9c8:	2800      	cmp	r0, #0
 800d9ca:	d033      	beq.n	800da34 <_printf_float+0x26c>
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	4631      	mov	r1, r6
 800d9d0:	4628      	mov	r0, r5
 800d9d2:	4a35      	ldr	r2, [pc, #212]	@ (800daa8 <_printf_float+0x2e0>)
 800d9d4:	47b8      	blx	r7
 800d9d6:	3001      	adds	r0, #1
 800d9d8:	f43f af51 	beq.w	800d87e <_printf_float+0xb6>
 800d9dc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800d9e0:	4543      	cmp	r3, r8
 800d9e2:	db02      	blt.n	800d9ea <_printf_float+0x222>
 800d9e4:	6823      	ldr	r3, [r4, #0]
 800d9e6:	07d8      	lsls	r0, r3, #31
 800d9e8:	d50f      	bpl.n	800da0a <_printf_float+0x242>
 800d9ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d9ee:	4631      	mov	r1, r6
 800d9f0:	4628      	mov	r0, r5
 800d9f2:	47b8      	blx	r7
 800d9f4:	3001      	adds	r0, #1
 800d9f6:	f43f af42 	beq.w	800d87e <_printf_float+0xb6>
 800d9fa:	f04f 0900 	mov.w	r9, #0
 800d9fe:	f108 38ff 	add.w	r8, r8, #4294967295
 800da02:	f104 0a1a 	add.w	sl, r4, #26
 800da06:	45c8      	cmp	r8, r9
 800da08:	dc09      	bgt.n	800da1e <_printf_float+0x256>
 800da0a:	6823      	ldr	r3, [r4, #0]
 800da0c:	079b      	lsls	r3, r3, #30
 800da0e:	f100 8102 	bmi.w	800dc16 <_printf_float+0x44e>
 800da12:	68e0      	ldr	r0, [r4, #12]
 800da14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da16:	4298      	cmp	r0, r3
 800da18:	bfb8      	it	lt
 800da1a:	4618      	movlt	r0, r3
 800da1c:	e731      	b.n	800d882 <_printf_float+0xba>
 800da1e:	2301      	movs	r3, #1
 800da20:	4652      	mov	r2, sl
 800da22:	4631      	mov	r1, r6
 800da24:	4628      	mov	r0, r5
 800da26:	47b8      	blx	r7
 800da28:	3001      	adds	r0, #1
 800da2a:	f43f af28 	beq.w	800d87e <_printf_float+0xb6>
 800da2e:	f109 0901 	add.w	r9, r9, #1
 800da32:	e7e8      	b.n	800da06 <_printf_float+0x23e>
 800da34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800da36:	2b00      	cmp	r3, #0
 800da38:	dc38      	bgt.n	800daac <_printf_float+0x2e4>
 800da3a:	2301      	movs	r3, #1
 800da3c:	4631      	mov	r1, r6
 800da3e:	4628      	mov	r0, r5
 800da40:	4a19      	ldr	r2, [pc, #100]	@ (800daa8 <_printf_float+0x2e0>)
 800da42:	47b8      	blx	r7
 800da44:	3001      	adds	r0, #1
 800da46:	f43f af1a 	beq.w	800d87e <_printf_float+0xb6>
 800da4a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800da4e:	ea59 0303 	orrs.w	r3, r9, r3
 800da52:	d102      	bne.n	800da5a <_printf_float+0x292>
 800da54:	6823      	ldr	r3, [r4, #0]
 800da56:	07d9      	lsls	r1, r3, #31
 800da58:	d5d7      	bpl.n	800da0a <_printf_float+0x242>
 800da5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800da5e:	4631      	mov	r1, r6
 800da60:	4628      	mov	r0, r5
 800da62:	47b8      	blx	r7
 800da64:	3001      	adds	r0, #1
 800da66:	f43f af0a 	beq.w	800d87e <_printf_float+0xb6>
 800da6a:	f04f 0a00 	mov.w	sl, #0
 800da6e:	f104 0b1a 	add.w	fp, r4, #26
 800da72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800da74:	425b      	negs	r3, r3
 800da76:	4553      	cmp	r3, sl
 800da78:	dc01      	bgt.n	800da7e <_printf_float+0x2b6>
 800da7a:	464b      	mov	r3, r9
 800da7c:	e793      	b.n	800d9a6 <_printf_float+0x1de>
 800da7e:	2301      	movs	r3, #1
 800da80:	465a      	mov	r2, fp
 800da82:	4631      	mov	r1, r6
 800da84:	4628      	mov	r0, r5
 800da86:	47b8      	blx	r7
 800da88:	3001      	adds	r0, #1
 800da8a:	f43f aef8 	beq.w	800d87e <_printf_float+0xb6>
 800da8e:	f10a 0a01 	add.w	sl, sl, #1
 800da92:	e7ee      	b.n	800da72 <_printf_float+0x2aa>
 800da94:	7fefffff 	.word	0x7fefffff
 800da98:	08012101 	.word	0x08012101
 800da9c:	08012105 	.word	0x08012105
 800daa0:	08012109 	.word	0x08012109
 800daa4:	0801210d 	.word	0x0801210d
 800daa8:	08012552 	.word	0x08012552
 800daac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800daae:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800dab2:	4553      	cmp	r3, sl
 800dab4:	bfa8      	it	ge
 800dab6:	4653      	movge	r3, sl
 800dab8:	2b00      	cmp	r3, #0
 800daba:	4699      	mov	r9, r3
 800dabc:	dc36      	bgt.n	800db2c <_printf_float+0x364>
 800dabe:	f04f 0b00 	mov.w	fp, #0
 800dac2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dac6:	f104 021a 	add.w	r2, r4, #26
 800daca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dacc:	930a      	str	r3, [sp, #40]	@ 0x28
 800dace:	eba3 0309 	sub.w	r3, r3, r9
 800dad2:	455b      	cmp	r3, fp
 800dad4:	dc31      	bgt.n	800db3a <_printf_float+0x372>
 800dad6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dad8:	459a      	cmp	sl, r3
 800dada:	dc3a      	bgt.n	800db52 <_printf_float+0x38a>
 800dadc:	6823      	ldr	r3, [r4, #0]
 800dade:	07da      	lsls	r2, r3, #31
 800dae0:	d437      	bmi.n	800db52 <_printf_float+0x38a>
 800dae2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dae4:	ebaa 0903 	sub.w	r9, sl, r3
 800dae8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800daea:	ebaa 0303 	sub.w	r3, sl, r3
 800daee:	4599      	cmp	r9, r3
 800daf0:	bfa8      	it	ge
 800daf2:	4699      	movge	r9, r3
 800daf4:	f1b9 0f00 	cmp.w	r9, #0
 800daf8:	dc33      	bgt.n	800db62 <_printf_float+0x39a>
 800dafa:	f04f 0800 	mov.w	r8, #0
 800dafe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800db02:	f104 0b1a 	add.w	fp, r4, #26
 800db06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800db08:	ebaa 0303 	sub.w	r3, sl, r3
 800db0c:	eba3 0309 	sub.w	r3, r3, r9
 800db10:	4543      	cmp	r3, r8
 800db12:	f77f af7a 	ble.w	800da0a <_printf_float+0x242>
 800db16:	2301      	movs	r3, #1
 800db18:	465a      	mov	r2, fp
 800db1a:	4631      	mov	r1, r6
 800db1c:	4628      	mov	r0, r5
 800db1e:	47b8      	blx	r7
 800db20:	3001      	adds	r0, #1
 800db22:	f43f aeac 	beq.w	800d87e <_printf_float+0xb6>
 800db26:	f108 0801 	add.w	r8, r8, #1
 800db2a:	e7ec      	b.n	800db06 <_printf_float+0x33e>
 800db2c:	4642      	mov	r2, r8
 800db2e:	4631      	mov	r1, r6
 800db30:	4628      	mov	r0, r5
 800db32:	47b8      	blx	r7
 800db34:	3001      	adds	r0, #1
 800db36:	d1c2      	bne.n	800dabe <_printf_float+0x2f6>
 800db38:	e6a1      	b.n	800d87e <_printf_float+0xb6>
 800db3a:	2301      	movs	r3, #1
 800db3c:	4631      	mov	r1, r6
 800db3e:	4628      	mov	r0, r5
 800db40:	920a      	str	r2, [sp, #40]	@ 0x28
 800db42:	47b8      	blx	r7
 800db44:	3001      	adds	r0, #1
 800db46:	f43f ae9a 	beq.w	800d87e <_printf_float+0xb6>
 800db4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800db4c:	f10b 0b01 	add.w	fp, fp, #1
 800db50:	e7bb      	b.n	800daca <_printf_float+0x302>
 800db52:	4631      	mov	r1, r6
 800db54:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800db58:	4628      	mov	r0, r5
 800db5a:	47b8      	blx	r7
 800db5c:	3001      	adds	r0, #1
 800db5e:	d1c0      	bne.n	800dae2 <_printf_float+0x31a>
 800db60:	e68d      	b.n	800d87e <_printf_float+0xb6>
 800db62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800db64:	464b      	mov	r3, r9
 800db66:	4631      	mov	r1, r6
 800db68:	4628      	mov	r0, r5
 800db6a:	4442      	add	r2, r8
 800db6c:	47b8      	blx	r7
 800db6e:	3001      	adds	r0, #1
 800db70:	d1c3      	bne.n	800dafa <_printf_float+0x332>
 800db72:	e684      	b.n	800d87e <_printf_float+0xb6>
 800db74:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800db78:	f1ba 0f01 	cmp.w	sl, #1
 800db7c:	dc01      	bgt.n	800db82 <_printf_float+0x3ba>
 800db7e:	07db      	lsls	r3, r3, #31
 800db80:	d536      	bpl.n	800dbf0 <_printf_float+0x428>
 800db82:	2301      	movs	r3, #1
 800db84:	4642      	mov	r2, r8
 800db86:	4631      	mov	r1, r6
 800db88:	4628      	mov	r0, r5
 800db8a:	47b8      	blx	r7
 800db8c:	3001      	adds	r0, #1
 800db8e:	f43f ae76 	beq.w	800d87e <_printf_float+0xb6>
 800db92:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800db96:	4631      	mov	r1, r6
 800db98:	4628      	mov	r0, r5
 800db9a:	47b8      	blx	r7
 800db9c:	3001      	adds	r0, #1
 800db9e:	f43f ae6e 	beq.w	800d87e <_printf_float+0xb6>
 800dba2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dba6:	2200      	movs	r2, #0
 800dba8:	2300      	movs	r3, #0
 800dbaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dbae:	f7f2 ff75 	bl	8000a9c <__aeabi_dcmpeq>
 800dbb2:	b9c0      	cbnz	r0, 800dbe6 <_printf_float+0x41e>
 800dbb4:	4653      	mov	r3, sl
 800dbb6:	f108 0201 	add.w	r2, r8, #1
 800dbba:	4631      	mov	r1, r6
 800dbbc:	4628      	mov	r0, r5
 800dbbe:	47b8      	blx	r7
 800dbc0:	3001      	adds	r0, #1
 800dbc2:	d10c      	bne.n	800dbde <_printf_float+0x416>
 800dbc4:	e65b      	b.n	800d87e <_printf_float+0xb6>
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	465a      	mov	r2, fp
 800dbca:	4631      	mov	r1, r6
 800dbcc:	4628      	mov	r0, r5
 800dbce:	47b8      	blx	r7
 800dbd0:	3001      	adds	r0, #1
 800dbd2:	f43f ae54 	beq.w	800d87e <_printf_float+0xb6>
 800dbd6:	f108 0801 	add.w	r8, r8, #1
 800dbda:	45d0      	cmp	r8, sl
 800dbdc:	dbf3      	blt.n	800dbc6 <_printf_float+0x3fe>
 800dbde:	464b      	mov	r3, r9
 800dbe0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800dbe4:	e6e0      	b.n	800d9a8 <_printf_float+0x1e0>
 800dbe6:	f04f 0800 	mov.w	r8, #0
 800dbea:	f104 0b1a 	add.w	fp, r4, #26
 800dbee:	e7f4      	b.n	800dbda <_printf_float+0x412>
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	4642      	mov	r2, r8
 800dbf4:	e7e1      	b.n	800dbba <_printf_float+0x3f2>
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	464a      	mov	r2, r9
 800dbfa:	4631      	mov	r1, r6
 800dbfc:	4628      	mov	r0, r5
 800dbfe:	47b8      	blx	r7
 800dc00:	3001      	adds	r0, #1
 800dc02:	f43f ae3c 	beq.w	800d87e <_printf_float+0xb6>
 800dc06:	f108 0801 	add.w	r8, r8, #1
 800dc0a:	68e3      	ldr	r3, [r4, #12]
 800dc0c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800dc0e:	1a5b      	subs	r3, r3, r1
 800dc10:	4543      	cmp	r3, r8
 800dc12:	dcf0      	bgt.n	800dbf6 <_printf_float+0x42e>
 800dc14:	e6fd      	b.n	800da12 <_printf_float+0x24a>
 800dc16:	f04f 0800 	mov.w	r8, #0
 800dc1a:	f104 0919 	add.w	r9, r4, #25
 800dc1e:	e7f4      	b.n	800dc0a <_printf_float+0x442>

0800dc20 <_printf_common>:
 800dc20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc24:	4616      	mov	r6, r2
 800dc26:	4698      	mov	r8, r3
 800dc28:	688a      	ldr	r2, [r1, #8]
 800dc2a:	690b      	ldr	r3, [r1, #16]
 800dc2c:	4607      	mov	r7, r0
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	bfb8      	it	lt
 800dc32:	4613      	movlt	r3, r2
 800dc34:	6033      	str	r3, [r6, #0]
 800dc36:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dc3a:	460c      	mov	r4, r1
 800dc3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dc40:	b10a      	cbz	r2, 800dc46 <_printf_common+0x26>
 800dc42:	3301      	adds	r3, #1
 800dc44:	6033      	str	r3, [r6, #0]
 800dc46:	6823      	ldr	r3, [r4, #0]
 800dc48:	0699      	lsls	r1, r3, #26
 800dc4a:	bf42      	ittt	mi
 800dc4c:	6833      	ldrmi	r3, [r6, #0]
 800dc4e:	3302      	addmi	r3, #2
 800dc50:	6033      	strmi	r3, [r6, #0]
 800dc52:	6825      	ldr	r5, [r4, #0]
 800dc54:	f015 0506 	ands.w	r5, r5, #6
 800dc58:	d106      	bne.n	800dc68 <_printf_common+0x48>
 800dc5a:	f104 0a19 	add.w	sl, r4, #25
 800dc5e:	68e3      	ldr	r3, [r4, #12]
 800dc60:	6832      	ldr	r2, [r6, #0]
 800dc62:	1a9b      	subs	r3, r3, r2
 800dc64:	42ab      	cmp	r3, r5
 800dc66:	dc2b      	bgt.n	800dcc0 <_printf_common+0xa0>
 800dc68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dc6c:	6822      	ldr	r2, [r4, #0]
 800dc6e:	3b00      	subs	r3, #0
 800dc70:	bf18      	it	ne
 800dc72:	2301      	movne	r3, #1
 800dc74:	0692      	lsls	r2, r2, #26
 800dc76:	d430      	bmi.n	800dcda <_printf_common+0xba>
 800dc78:	4641      	mov	r1, r8
 800dc7a:	4638      	mov	r0, r7
 800dc7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dc80:	47c8      	blx	r9
 800dc82:	3001      	adds	r0, #1
 800dc84:	d023      	beq.n	800dcce <_printf_common+0xae>
 800dc86:	6823      	ldr	r3, [r4, #0]
 800dc88:	6922      	ldr	r2, [r4, #16]
 800dc8a:	f003 0306 	and.w	r3, r3, #6
 800dc8e:	2b04      	cmp	r3, #4
 800dc90:	bf14      	ite	ne
 800dc92:	2500      	movne	r5, #0
 800dc94:	6833      	ldreq	r3, [r6, #0]
 800dc96:	f04f 0600 	mov.w	r6, #0
 800dc9a:	bf08      	it	eq
 800dc9c:	68e5      	ldreq	r5, [r4, #12]
 800dc9e:	f104 041a 	add.w	r4, r4, #26
 800dca2:	bf08      	it	eq
 800dca4:	1aed      	subeq	r5, r5, r3
 800dca6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800dcaa:	bf08      	it	eq
 800dcac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dcb0:	4293      	cmp	r3, r2
 800dcb2:	bfc4      	itt	gt
 800dcb4:	1a9b      	subgt	r3, r3, r2
 800dcb6:	18ed      	addgt	r5, r5, r3
 800dcb8:	42b5      	cmp	r5, r6
 800dcba:	d11a      	bne.n	800dcf2 <_printf_common+0xd2>
 800dcbc:	2000      	movs	r0, #0
 800dcbe:	e008      	b.n	800dcd2 <_printf_common+0xb2>
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	4652      	mov	r2, sl
 800dcc4:	4641      	mov	r1, r8
 800dcc6:	4638      	mov	r0, r7
 800dcc8:	47c8      	blx	r9
 800dcca:	3001      	adds	r0, #1
 800dccc:	d103      	bne.n	800dcd6 <_printf_common+0xb6>
 800dcce:	f04f 30ff 	mov.w	r0, #4294967295
 800dcd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcd6:	3501      	adds	r5, #1
 800dcd8:	e7c1      	b.n	800dc5e <_printf_common+0x3e>
 800dcda:	2030      	movs	r0, #48	@ 0x30
 800dcdc:	18e1      	adds	r1, r4, r3
 800dcde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dce2:	1c5a      	adds	r2, r3, #1
 800dce4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dce8:	4422      	add	r2, r4
 800dcea:	3302      	adds	r3, #2
 800dcec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dcf0:	e7c2      	b.n	800dc78 <_printf_common+0x58>
 800dcf2:	2301      	movs	r3, #1
 800dcf4:	4622      	mov	r2, r4
 800dcf6:	4641      	mov	r1, r8
 800dcf8:	4638      	mov	r0, r7
 800dcfa:	47c8      	blx	r9
 800dcfc:	3001      	adds	r0, #1
 800dcfe:	d0e6      	beq.n	800dcce <_printf_common+0xae>
 800dd00:	3601      	adds	r6, #1
 800dd02:	e7d9      	b.n	800dcb8 <_printf_common+0x98>

0800dd04 <_printf_i>:
 800dd04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd08:	7e0f      	ldrb	r7, [r1, #24]
 800dd0a:	4691      	mov	r9, r2
 800dd0c:	2f78      	cmp	r7, #120	@ 0x78
 800dd0e:	4680      	mov	r8, r0
 800dd10:	460c      	mov	r4, r1
 800dd12:	469a      	mov	sl, r3
 800dd14:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dd16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dd1a:	d807      	bhi.n	800dd2c <_printf_i+0x28>
 800dd1c:	2f62      	cmp	r7, #98	@ 0x62
 800dd1e:	d80a      	bhi.n	800dd36 <_printf_i+0x32>
 800dd20:	2f00      	cmp	r7, #0
 800dd22:	f000 80d3 	beq.w	800decc <_printf_i+0x1c8>
 800dd26:	2f58      	cmp	r7, #88	@ 0x58
 800dd28:	f000 80ba 	beq.w	800dea0 <_printf_i+0x19c>
 800dd2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dd30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dd34:	e03a      	b.n	800ddac <_printf_i+0xa8>
 800dd36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dd3a:	2b15      	cmp	r3, #21
 800dd3c:	d8f6      	bhi.n	800dd2c <_printf_i+0x28>
 800dd3e:	a101      	add	r1, pc, #4	@ (adr r1, 800dd44 <_printf_i+0x40>)
 800dd40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dd44:	0800dd9d 	.word	0x0800dd9d
 800dd48:	0800ddb1 	.word	0x0800ddb1
 800dd4c:	0800dd2d 	.word	0x0800dd2d
 800dd50:	0800dd2d 	.word	0x0800dd2d
 800dd54:	0800dd2d 	.word	0x0800dd2d
 800dd58:	0800dd2d 	.word	0x0800dd2d
 800dd5c:	0800ddb1 	.word	0x0800ddb1
 800dd60:	0800dd2d 	.word	0x0800dd2d
 800dd64:	0800dd2d 	.word	0x0800dd2d
 800dd68:	0800dd2d 	.word	0x0800dd2d
 800dd6c:	0800dd2d 	.word	0x0800dd2d
 800dd70:	0800deb3 	.word	0x0800deb3
 800dd74:	0800dddb 	.word	0x0800dddb
 800dd78:	0800de6d 	.word	0x0800de6d
 800dd7c:	0800dd2d 	.word	0x0800dd2d
 800dd80:	0800dd2d 	.word	0x0800dd2d
 800dd84:	0800ded5 	.word	0x0800ded5
 800dd88:	0800dd2d 	.word	0x0800dd2d
 800dd8c:	0800dddb 	.word	0x0800dddb
 800dd90:	0800dd2d 	.word	0x0800dd2d
 800dd94:	0800dd2d 	.word	0x0800dd2d
 800dd98:	0800de75 	.word	0x0800de75
 800dd9c:	6833      	ldr	r3, [r6, #0]
 800dd9e:	1d1a      	adds	r2, r3, #4
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	6032      	str	r2, [r6, #0]
 800dda4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dda8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ddac:	2301      	movs	r3, #1
 800ddae:	e09e      	b.n	800deee <_printf_i+0x1ea>
 800ddb0:	6833      	ldr	r3, [r6, #0]
 800ddb2:	6820      	ldr	r0, [r4, #0]
 800ddb4:	1d19      	adds	r1, r3, #4
 800ddb6:	6031      	str	r1, [r6, #0]
 800ddb8:	0606      	lsls	r6, r0, #24
 800ddba:	d501      	bpl.n	800ddc0 <_printf_i+0xbc>
 800ddbc:	681d      	ldr	r5, [r3, #0]
 800ddbe:	e003      	b.n	800ddc8 <_printf_i+0xc4>
 800ddc0:	0645      	lsls	r5, r0, #25
 800ddc2:	d5fb      	bpl.n	800ddbc <_printf_i+0xb8>
 800ddc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ddc8:	2d00      	cmp	r5, #0
 800ddca:	da03      	bge.n	800ddd4 <_printf_i+0xd0>
 800ddcc:	232d      	movs	r3, #45	@ 0x2d
 800ddce:	426d      	negs	r5, r5
 800ddd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ddd4:	230a      	movs	r3, #10
 800ddd6:	4859      	ldr	r0, [pc, #356]	@ (800df3c <_printf_i+0x238>)
 800ddd8:	e011      	b.n	800ddfe <_printf_i+0xfa>
 800ddda:	6821      	ldr	r1, [r4, #0]
 800dddc:	6833      	ldr	r3, [r6, #0]
 800ddde:	0608      	lsls	r0, r1, #24
 800dde0:	f853 5b04 	ldr.w	r5, [r3], #4
 800dde4:	d402      	bmi.n	800ddec <_printf_i+0xe8>
 800dde6:	0649      	lsls	r1, r1, #25
 800dde8:	bf48      	it	mi
 800ddea:	b2ad      	uxthmi	r5, r5
 800ddec:	2f6f      	cmp	r7, #111	@ 0x6f
 800ddee:	6033      	str	r3, [r6, #0]
 800ddf0:	bf14      	ite	ne
 800ddf2:	230a      	movne	r3, #10
 800ddf4:	2308      	moveq	r3, #8
 800ddf6:	4851      	ldr	r0, [pc, #324]	@ (800df3c <_printf_i+0x238>)
 800ddf8:	2100      	movs	r1, #0
 800ddfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ddfe:	6866      	ldr	r6, [r4, #4]
 800de00:	2e00      	cmp	r6, #0
 800de02:	bfa8      	it	ge
 800de04:	6821      	ldrge	r1, [r4, #0]
 800de06:	60a6      	str	r6, [r4, #8]
 800de08:	bfa4      	itt	ge
 800de0a:	f021 0104 	bicge.w	r1, r1, #4
 800de0e:	6021      	strge	r1, [r4, #0]
 800de10:	b90d      	cbnz	r5, 800de16 <_printf_i+0x112>
 800de12:	2e00      	cmp	r6, #0
 800de14:	d04b      	beq.n	800deae <_printf_i+0x1aa>
 800de16:	4616      	mov	r6, r2
 800de18:	fbb5 f1f3 	udiv	r1, r5, r3
 800de1c:	fb03 5711 	mls	r7, r3, r1, r5
 800de20:	5dc7      	ldrb	r7, [r0, r7]
 800de22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800de26:	462f      	mov	r7, r5
 800de28:	42bb      	cmp	r3, r7
 800de2a:	460d      	mov	r5, r1
 800de2c:	d9f4      	bls.n	800de18 <_printf_i+0x114>
 800de2e:	2b08      	cmp	r3, #8
 800de30:	d10b      	bne.n	800de4a <_printf_i+0x146>
 800de32:	6823      	ldr	r3, [r4, #0]
 800de34:	07df      	lsls	r7, r3, #31
 800de36:	d508      	bpl.n	800de4a <_printf_i+0x146>
 800de38:	6923      	ldr	r3, [r4, #16]
 800de3a:	6861      	ldr	r1, [r4, #4]
 800de3c:	4299      	cmp	r1, r3
 800de3e:	bfde      	ittt	le
 800de40:	2330      	movle	r3, #48	@ 0x30
 800de42:	f806 3c01 	strble.w	r3, [r6, #-1]
 800de46:	f106 36ff 	addle.w	r6, r6, #4294967295
 800de4a:	1b92      	subs	r2, r2, r6
 800de4c:	6122      	str	r2, [r4, #16]
 800de4e:	464b      	mov	r3, r9
 800de50:	4621      	mov	r1, r4
 800de52:	4640      	mov	r0, r8
 800de54:	f8cd a000 	str.w	sl, [sp]
 800de58:	aa03      	add	r2, sp, #12
 800de5a:	f7ff fee1 	bl	800dc20 <_printf_common>
 800de5e:	3001      	adds	r0, #1
 800de60:	d14a      	bne.n	800def8 <_printf_i+0x1f4>
 800de62:	f04f 30ff 	mov.w	r0, #4294967295
 800de66:	b004      	add	sp, #16
 800de68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de6c:	6823      	ldr	r3, [r4, #0]
 800de6e:	f043 0320 	orr.w	r3, r3, #32
 800de72:	6023      	str	r3, [r4, #0]
 800de74:	2778      	movs	r7, #120	@ 0x78
 800de76:	4832      	ldr	r0, [pc, #200]	@ (800df40 <_printf_i+0x23c>)
 800de78:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800de7c:	6823      	ldr	r3, [r4, #0]
 800de7e:	6831      	ldr	r1, [r6, #0]
 800de80:	061f      	lsls	r7, r3, #24
 800de82:	f851 5b04 	ldr.w	r5, [r1], #4
 800de86:	d402      	bmi.n	800de8e <_printf_i+0x18a>
 800de88:	065f      	lsls	r7, r3, #25
 800de8a:	bf48      	it	mi
 800de8c:	b2ad      	uxthmi	r5, r5
 800de8e:	6031      	str	r1, [r6, #0]
 800de90:	07d9      	lsls	r1, r3, #31
 800de92:	bf44      	itt	mi
 800de94:	f043 0320 	orrmi.w	r3, r3, #32
 800de98:	6023      	strmi	r3, [r4, #0]
 800de9a:	b11d      	cbz	r5, 800dea4 <_printf_i+0x1a0>
 800de9c:	2310      	movs	r3, #16
 800de9e:	e7ab      	b.n	800ddf8 <_printf_i+0xf4>
 800dea0:	4826      	ldr	r0, [pc, #152]	@ (800df3c <_printf_i+0x238>)
 800dea2:	e7e9      	b.n	800de78 <_printf_i+0x174>
 800dea4:	6823      	ldr	r3, [r4, #0]
 800dea6:	f023 0320 	bic.w	r3, r3, #32
 800deaa:	6023      	str	r3, [r4, #0]
 800deac:	e7f6      	b.n	800de9c <_printf_i+0x198>
 800deae:	4616      	mov	r6, r2
 800deb0:	e7bd      	b.n	800de2e <_printf_i+0x12a>
 800deb2:	6833      	ldr	r3, [r6, #0]
 800deb4:	6825      	ldr	r5, [r4, #0]
 800deb6:	1d18      	adds	r0, r3, #4
 800deb8:	6961      	ldr	r1, [r4, #20]
 800deba:	6030      	str	r0, [r6, #0]
 800debc:	062e      	lsls	r6, r5, #24
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	d501      	bpl.n	800dec6 <_printf_i+0x1c2>
 800dec2:	6019      	str	r1, [r3, #0]
 800dec4:	e002      	b.n	800decc <_printf_i+0x1c8>
 800dec6:	0668      	lsls	r0, r5, #25
 800dec8:	d5fb      	bpl.n	800dec2 <_printf_i+0x1be>
 800deca:	8019      	strh	r1, [r3, #0]
 800decc:	2300      	movs	r3, #0
 800dece:	4616      	mov	r6, r2
 800ded0:	6123      	str	r3, [r4, #16]
 800ded2:	e7bc      	b.n	800de4e <_printf_i+0x14a>
 800ded4:	6833      	ldr	r3, [r6, #0]
 800ded6:	2100      	movs	r1, #0
 800ded8:	1d1a      	adds	r2, r3, #4
 800deda:	6032      	str	r2, [r6, #0]
 800dedc:	681e      	ldr	r6, [r3, #0]
 800dede:	6862      	ldr	r2, [r4, #4]
 800dee0:	4630      	mov	r0, r6
 800dee2:	f001 f83e 	bl	800ef62 <memchr>
 800dee6:	b108      	cbz	r0, 800deec <_printf_i+0x1e8>
 800dee8:	1b80      	subs	r0, r0, r6
 800deea:	6060      	str	r0, [r4, #4]
 800deec:	6863      	ldr	r3, [r4, #4]
 800deee:	6123      	str	r3, [r4, #16]
 800def0:	2300      	movs	r3, #0
 800def2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800def6:	e7aa      	b.n	800de4e <_printf_i+0x14a>
 800def8:	4632      	mov	r2, r6
 800defa:	4649      	mov	r1, r9
 800defc:	4640      	mov	r0, r8
 800defe:	6923      	ldr	r3, [r4, #16]
 800df00:	47d0      	blx	sl
 800df02:	3001      	adds	r0, #1
 800df04:	d0ad      	beq.n	800de62 <_printf_i+0x15e>
 800df06:	6823      	ldr	r3, [r4, #0]
 800df08:	079b      	lsls	r3, r3, #30
 800df0a:	d413      	bmi.n	800df34 <_printf_i+0x230>
 800df0c:	68e0      	ldr	r0, [r4, #12]
 800df0e:	9b03      	ldr	r3, [sp, #12]
 800df10:	4298      	cmp	r0, r3
 800df12:	bfb8      	it	lt
 800df14:	4618      	movlt	r0, r3
 800df16:	e7a6      	b.n	800de66 <_printf_i+0x162>
 800df18:	2301      	movs	r3, #1
 800df1a:	4632      	mov	r2, r6
 800df1c:	4649      	mov	r1, r9
 800df1e:	4640      	mov	r0, r8
 800df20:	47d0      	blx	sl
 800df22:	3001      	adds	r0, #1
 800df24:	d09d      	beq.n	800de62 <_printf_i+0x15e>
 800df26:	3501      	adds	r5, #1
 800df28:	68e3      	ldr	r3, [r4, #12]
 800df2a:	9903      	ldr	r1, [sp, #12]
 800df2c:	1a5b      	subs	r3, r3, r1
 800df2e:	42ab      	cmp	r3, r5
 800df30:	dcf2      	bgt.n	800df18 <_printf_i+0x214>
 800df32:	e7eb      	b.n	800df0c <_printf_i+0x208>
 800df34:	2500      	movs	r5, #0
 800df36:	f104 0619 	add.w	r6, r4, #25
 800df3a:	e7f5      	b.n	800df28 <_printf_i+0x224>
 800df3c:	08012111 	.word	0x08012111
 800df40:	08012122 	.word	0x08012122

0800df44 <std>:
 800df44:	2300      	movs	r3, #0
 800df46:	b510      	push	{r4, lr}
 800df48:	4604      	mov	r4, r0
 800df4a:	e9c0 3300 	strd	r3, r3, [r0]
 800df4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800df52:	6083      	str	r3, [r0, #8]
 800df54:	8181      	strh	r1, [r0, #12]
 800df56:	6643      	str	r3, [r0, #100]	@ 0x64
 800df58:	81c2      	strh	r2, [r0, #14]
 800df5a:	6183      	str	r3, [r0, #24]
 800df5c:	4619      	mov	r1, r3
 800df5e:	2208      	movs	r2, #8
 800df60:	305c      	adds	r0, #92	@ 0x5c
 800df62:	f000 f908 	bl	800e176 <memset>
 800df66:	4b0d      	ldr	r3, [pc, #52]	@ (800df9c <std+0x58>)
 800df68:	6224      	str	r4, [r4, #32]
 800df6a:	6263      	str	r3, [r4, #36]	@ 0x24
 800df6c:	4b0c      	ldr	r3, [pc, #48]	@ (800dfa0 <std+0x5c>)
 800df6e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800df70:	4b0c      	ldr	r3, [pc, #48]	@ (800dfa4 <std+0x60>)
 800df72:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800df74:	4b0c      	ldr	r3, [pc, #48]	@ (800dfa8 <std+0x64>)
 800df76:	6323      	str	r3, [r4, #48]	@ 0x30
 800df78:	4b0c      	ldr	r3, [pc, #48]	@ (800dfac <std+0x68>)
 800df7a:	429c      	cmp	r4, r3
 800df7c:	d006      	beq.n	800df8c <std+0x48>
 800df7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800df82:	4294      	cmp	r4, r2
 800df84:	d002      	beq.n	800df8c <std+0x48>
 800df86:	33d0      	adds	r3, #208	@ 0xd0
 800df88:	429c      	cmp	r4, r3
 800df8a:	d105      	bne.n	800df98 <std+0x54>
 800df8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800df90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df94:	f000 bfd8 	b.w	800ef48 <__retarget_lock_init_recursive>
 800df98:	bd10      	pop	{r4, pc}
 800df9a:	bf00      	nop
 800df9c:	0800e0ed 	.word	0x0800e0ed
 800dfa0:	0800e113 	.word	0x0800e113
 800dfa4:	0800e14b 	.word	0x0800e14b
 800dfa8:	0800e16f 	.word	0x0800e16f
 800dfac:	20005a28 	.word	0x20005a28

0800dfb0 <stdio_exit_handler>:
 800dfb0:	4a02      	ldr	r2, [pc, #8]	@ (800dfbc <stdio_exit_handler+0xc>)
 800dfb2:	4903      	ldr	r1, [pc, #12]	@ (800dfc0 <stdio_exit_handler+0x10>)
 800dfb4:	4803      	ldr	r0, [pc, #12]	@ (800dfc4 <stdio_exit_handler+0x14>)
 800dfb6:	f000 b869 	b.w	800e08c <_fwalk_sglue>
 800dfba:	bf00      	nop
 800dfbc:	20000104 	.word	0x20000104
 800dfc0:	08011229 	.word	0x08011229
 800dfc4:	20000288 	.word	0x20000288

0800dfc8 <cleanup_stdio>:
 800dfc8:	6841      	ldr	r1, [r0, #4]
 800dfca:	4b0c      	ldr	r3, [pc, #48]	@ (800dffc <cleanup_stdio+0x34>)
 800dfcc:	b510      	push	{r4, lr}
 800dfce:	4299      	cmp	r1, r3
 800dfd0:	4604      	mov	r4, r0
 800dfd2:	d001      	beq.n	800dfd8 <cleanup_stdio+0x10>
 800dfd4:	f003 f928 	bl	8011228 <_fflush_r>
 800dfd8:	68a1      	ldr	r1, [r4, #8]
 800dfda:	4b09      	ldr	r3, [pc, #36]	@ (800e000 <cleanup_stdio+0x38>)
 800dfdc:	4299      	cmp	r1, r3
 800dfde:	d002      	beq.n	800dfe6 <cleanup_stdio+0x1e>
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	f003 f921 	bl	8011228 <_fflush_r>
 800dfe6:	68e1      	ldr	r1, [r4, #12]
 800dfe8:	4b06      	ldr	r3, [pc, #24]	@ (800e004 <cleanup_stdio+0x3c>)
 800dfea:	4299      	cmp	r1, r3
 800dfec:	d004      	beq.n	800dff8 <cleanup_stdio+0x30>
 800dfee:	4620      	mov	r0, r4
 800dff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dff4:	f003 b918 	b.w	8011228 <_fflush_r>
 800dff8:	bd10      	pop	{r4, pc}
 800dffa:	bf00      	nop
 800dffc:	20005a28 	.word	0x20005a28
 800e000:	20005a90 	.word	0x20005a90
 800e004:	20005af8 	.word	0x20005af8

0800e008 <global_stdio_init.part.0>:
 800e008:	b510      	push	{r4, lr}
 800e00a:	4b0b      	ldr	r3, [pc, #44]	@ (800e038 <global_stdio_init.part.0+0x30>)
 800e00c:	4c0b      	ldr	r4, [pc, #44]	@ (800e03c <global_stdio_init.part.0+0x34>)
 800e00e:	4a0c      	ldr	r2, [pc, #48]	@ (800e040 <global_stdio_init.part.0+0x38>)
 800e010:	4620      	mov	r0, r4
 800e012:	601a      	str	r2, [r3, #0]
 800e014:	2104      	movs	r1, #4
 800e016:	2200      	movs	r2, #0
 800e018:	f7ff ff94 	bl	800df44 <std>
 800e01c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e020:	2201      	movs	r2, #1
 800e022:	2109      	movs	r1, #9
 800e024:	f7ff ff8e 	bl	800df44 <std>
 800e028:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e02c:	2202      	movs	r2, #2
 800e02e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e032:	2112      	movs	r1, #18
 800e034:	f7ff bf86 	b.w	800df44 <std>
 800e038:	20005b60 	.word	0x20005b60
 800e03c:	20005a28 	.word	0x20005a28
 800e040:	0800dfb1 	.word	0x0800dfb1

0800e044 <__sfp_lock_acquire>:
 800e044:	4801      	ldr	r0, [pc, #4]	@ (800e04c <__sfp_lock_acquire+0x8>)
 800e046:	f000 bf81 	b.w	800ef4c <__retarget_lock_acquire_recursive>
 800e04a:	bf00      	nop
 800e04c:	20005b8f 	.word	0x20005b8f

0800e050 <__sfp_lock_release>:
 800e050:	4801      	ldr	r0, [pc, #4]	@ (800e058 <__sfp_lock_release+0x8>)
 800e052:	f000 bf7d 	b.w	800ef50 <__retarget_lock_release_recursive>
 800e056:	bf00      	nop
 800e058:	20005b8f 	.word	0x20005b8f

0800e05c <__sinit>:
 800e05c:	b510      	push	{r4, lr}
 800e05e:	4604      	mov	r4, r0
 800e060:	f7ff fff0 	bl	800e044 <__sfp_lock_acquire>
 800e064:	6a23      	ldr	r3, [r4, #32]
 800e066:	b11b      	cbz	r3, 800e070 <__sinit+0x14>
 800e068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e06c:	f7ff bff0 	b.w	800e050 <__sfp_lock_release>
 800e070:	4b04      	ldr	r3, [pc, #16]	@ (800e084 <__sinit+0x28>)
 800e072:	6223      	str	r3, [r4, #32]
 800e074:	4b04      	ldr	r3, [pc, #16]	@ (800e088 <__sinit+0x2c>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d1f5      	bne.n	800e068 <__sinit+0xc>
 800e07c:	f7ff ffc4 	bl	800e008 <global_stdio_init.part.0>
 800e080:	e7f2      	b.n	800e068 <__sinit+0xc>
 800e082:	bf00      	nop
 800e084:	0800dfc9 	.word	0x0800dfc9
 800e088:	20005b60 	.word	0x20005b60

0800e08c <_fwalk_sglue>:
 800e08c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e090:	4607      	mov	r7, r0
 800e092:	4688      	mov	r8, r1
 800e094:	4614      	mov	r4, r2
 800e096:	2600      	movs	r6, #0
 800e098:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e09c:	f1b9 0901 	subs.w	r9, r9, #1
 800e0a0:	d505      	bpl.n	800e0ae <_fwalk_sglue+0x22>
 800e0a2:	6824      	ldr	r4, [r4, #0]
 800e0a4:	2c00      	cmp	r4, #0
 800e0a6:	d1f7      	bne.n	800e098 <_fwalk_sglue+0xc>
 800e0a8:	4630      	mov	r0, r6
 800e0aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0ae:	89ab      	ldrh	r3, [r5, #12]
 800e0b0:	2b01      	cmp	r3, #1
 800e0b2:	d907      	bls.n	800e0c4 <_fwalk_sglue+0x38>
 800e0b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e0b8:	3301      	adds	r3, #1
 800e0ba:	d003      	beq.n	800e0c4 <_fwalk_sglue+0x38>
 800e0bc:	4629      	mov	r1, r5
 800e0be:	4638      	mov	r0, r7
 800e0c0:	47c0      	blx	r8
 800e0c2:	4306      	orrs	r6, r0
 800e0c4:	3568      	adds	r5, #104	@ 0x68
 800e0c6:	e7e9      	b.n	800e09c <_fwalk_sglue+0x10>

0800e0c8 <iprintf>:
 800e0c8:	b40f      	push	{r0, r1, r2, r3}
 800e0ca:	b507      	push	{r0, r1, r2, lr}
 800e0cc:	4906      	ldr	r1, [pc, #24]	@ (800e0e8 <iprintf+0x20>)
 800e0ce:	ab04      	add	r3, sp, #16
 800e0d0:	6808      	ldr	r0, [r1, #0]
 800e0d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0d6:	6881      	ldr	r1, [r0, #8]
 800e0d8:	9301      	str	r3, [sp, #4]
 800e0da:	f002 ff0d 	bl	8010ef8 <_vfiprintf_r>
 800e0de:	b003      	add	sp, #12
 800e0e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0e4:	b004      	add	sp, #16
 800e0e6:	4770      	bx	lr
 800e0e8:	20000284 	.word	0x20000284

0800e0ec <__sread>:
 800e0ec:	b510      	push	{r4, lr}
 800e0ee:	460c      	mov	r4, r1
 800e0f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0f4:	f000 feca 	bl	800ee8c <_read_r>
 800e0f8:	2800      	cmp	r0, #0
 800e0fa:	bfab      	itete	ge
 800e0fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e0fe:	89a3      	ldrhlt	r3, [r4, #12]
 800e100:	181b      	addge	r3, r3, r0
 800e102:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e106:	bfac      	ite	ge
 800e108:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e10a:	81a3      	strhlt	r3, [r4, #12]
 800e10c:	bd10      	pop	{r4, pc}

0800e10e <__seofread>:
 800e10e:	2000      	movs	r0, #0
 800e110:	4770      	bx	lr

0800e112 <__swrite>:
 800e112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e116:	461f      	mov	r7, r3
 800e118:	898b      	ldrh	r3, [r1, #12]
 800e11a:	4605      	mov	r5, r0
 800e11c:	05db      	lsls	r3, r3, #23
 800e11e:	460c      	mov	r4, r1
 800e120:	4616      	mov	r6, r2
 800e122:	d505      	bpl.n	800e130 <__swrite+0x1e>
 800e124:	2302      	movs	r3, #2
 800e126:	2200      	movs	r2, #0
 800e128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e12c:	f000 fe9c 	bl	800ee68 <_lseek_r>
 800e130:	89a3      	ldrh	r3, [r4, #12]
 800e132:	4632      	mov	r2, r6
 800e134:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e138:	81a3      	strh	r3, [r4, #12]
 800e13a:	4628      	mov	r0, r5
 800e13c:	463b      	mov	r3, r7
 800e13e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e146:	f000 bec3 	b.w	800eed0 <_write_r>

0800e14a <__sseek>:
 800e14a:	b510      	push	{r4, lr}
 800e14c:	460c      	mov	r4, r1
 800e14e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e152:	f000 fe89 	bl	800ee68 <_lseek_r>
 800e156:	1c43      	adds	r3, r0, #1
 800e158:	89a3      	ldrh	r3, [r4, #12]
 800e15a:	bf15      	itete	ne
 800e15c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e15e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e162:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e166:	81a3      	strheq	r3, [r4, #12]
 800e168:	bf18      	it	ne
 800e16a:	81a3      	strhne	r3, [r4, #12]
 800e16c:	bd10      	pop	{r4, pc}

0800e16e <__sclose>:
 800e16e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e172:	f000 be13 	b.w	800ed9c <_close_r>

0800e176 <memset>:
 800e176:	4603      	mov	r3, r0
 800e178:	4402      	add	r2, r0
 800e17a:	4293      	cmp	r3, r2
 800e17c:	d100      	bne.n	800e180 <memset+0xa>
 800e17e:	4770      	bx	lr
 800e180:	f803 1b01 	strb.w	r1, [r3], #1
 800e184:	e7f9      	b.n	800e17a <memset+0x4>

0800e186 <strchr>:
 800e186:	4603      	mov	r3, r0
 800e188:	b2c9      	uxtb	r1, r1
 800e18a:	4618      	mov	r0, r3
 800e18c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e190:	b112      	cbz	r2, 800e198 <strchr+0x12>
 800e192:	428a      	cmp	r2, r1
 800e194:	d1f9      	bne.n	800e18a <strchr+0x4>
 800e196:	4770      	bx	lr
 800e198:	2900      	cmp	r1, #0
 800e19a:	bf18      	it	ne
 800e19c:	2000      	movne	r0, #0
 800e19e:	4770      	bx	lr

0800e1a0 <strncmp>:
 800e1a0:	b510      	push	{r4, lr}
 800e1a2:	b16a      	cbz	r2, 800e1c0 <strncmp+0x20>
 800e1a4:	3901      	subs	r1, #1
 800e1a6:	1884      	adds	r4, r0, r2
 800e1a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d103      	bne.n	800e1bc <strncmp+0x1c>
 800e1b4:	42a0      	cmp	r0, r4
 800e1b6:	d001      	beq.n	800e1bc <strncmp+0x1c>
 800e1b8:	2a00      	cmp	r2, #0
 800e1ba:	d1f5      	bne.n	800e1a8 <strncmp+0x8>
 800e1bc:	1ad0      	subs	r0, r2, r3
 800e1be:	bd10      	pop	{r4, pc}
 800e1c0:	4610      	mov	r0, r2
 800e1c2:	e7fc      	b.n	800e1be <strncmp+0x1e>

0800e1c4 <strncpy>:
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	b510      	push	{r4, lr}
 800e1c8:	3901      	subs	r1, #1
 800e1ca:	b132      	cbz	r2, 800e1da <strncpy+0x16>
 800e1cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e1d0:	3a01      	subs	r2, #1
 800e1d2:	f803 4b01 	strb.w	r4, [r3], #1
 800e1d6:	2c00      	cmp	r4, #0
 800e1d8:	d1f7      	bne.n	800e1ca <strncpy+0x6>
 800e1da:	2100      	movs	r1, #0
 800e1dc:	441a      	add	r2, r3
 800e1de:	4293      	cmp	r3, r2
 800e1e0:	d100      	bne.n	800e1e4 <strncpy+0x20>
 800e1e2:	bd10      	pop	{r4, pc}
 800e1e4:	f803 1b01 	strb.w	r1, [r3], #1
 800e1e8:	e7f9      	b.n	800e1de <strncpy+0x1a>
	...

0800e1ec <strtok>:
 800e1ec:	4b16      	ldr	r3, [pc, #88]	@ (800e248 <strtok+0x5c>)
 800e1ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1f2:	681f      	ldr	r7, [r3, #0]
 800e1f4:	4605      	mov	r5, r0
 800e1f6:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800e1f8:	460e      	mov	r6, r1
 800e1fa:	b9ec      	cbnz	r4, 800e238 <strtok+0x4c>
 800e1fc:	2050      	movs	r0, #80	@ 0x50
 800e1fe:	f7fe faad 	bl	800c75c <malloc>
 800e202:	4602      	mov	r2, r0
 800e204:	6478      	str	r0, [r7, #68]	@ 0x44
 800e206:	b920      	cbnz	r0, 800e212 <strtok+0x26>
 800e208:	215b      	movs	r1, #91	@ 0x5b
 800e20a:	4b10      	ldr	r3, [pc, #64]	@ (800e24c <strtok+0x60>)
 800e20c:	4810      	ldr	r0, [pc, #64]	@ (800e250 <strtok+0x64>)
 800e20e:	f000 fecf 	bl	800efb0 <__assert_func>
 800e212:	e9c0 4400 	strd	r4, r4, [r0]
 800e216:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e21a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e21e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800e222:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800e226:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800e22a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800e22e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800e232:	6184      	str	r4, [r0, #24]
 800e234:	7704      	strb	r4, [r0, #28]
 800e236:	6244      	str	r4, [r0, #36]	@ 0x24
 800e238:	4631      	mov	r1, r6
 800e23a:	4628      	mov	r0, r5
 800e23c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e23e:	2301      	movs	r3, #1
 800e240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e244:	f000 b806 	b.w	800e254 <__strtok_r>
 800e248:	20000284 	.word	0x20000284
 800e24c:	08012133 	.word	0x08012133
 800e250:	0801214a 	.word	0x0801214a

0800e254 <__strtok_r>:
 800e254:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e256:	4604      	mov	r4, r0
 800e258:	b908      	cbnz	r0, 800e25e <__strtok_r+0xa>
 800e25a:	6814      	ldr	r4, [r2, #0]
 800e25c:	b144      	cbz	r4, 800e270 <__strtok_r+0x1c>
 800e25e:	460f      	mov	r7, r1
 800e260:	4620      	mov	r0, r4
 800e262:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e266:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e26a:	b91e      	cbnz	r6, 800e274 <__strtok_r+0x20>
 800e26c:	b965      	cbnz	r5, 800e288 <__strtok_r+0x34>
 800e26e:	6015      	str	r5, [r2, #0]
 800e270:	2000      	movs	r0, #0
 800e272:	e005      	b.n	800e280 <__strtok_r+0x2c>
 800e274:	42b5      	cmp	r5, r6
 800e276:	d1f6      	bne.n	800e266 <__strtok_r+0x12>
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d1f0      	bne.n	800e25e <__strtok_r+0xa>
 800e27c:	6014      	str	r4, [r2, #0]
 800e27e:	7003      	strb	r3, [r0, #0]
 800e280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e282:	461c      	mov	r4, r3
 800e284:	e00c      	b.n	800e2a0 <__strtok_r+0x4c>
 800e286:	b915      	cbnz	r5, 800e28e <__strtok_r+0x3a>
 800e288:	460e      	mov	r6, r1
 800e28a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e28e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e292:	42ab      	cmp	r3, r5
 800e294:	d1f7      	bne.n	800e286 <__strtok_r+0x32>
 800e296:	2b00      	cmp	r3, #0
 800e298:	d0f3      	beq.n	800e282 <__strtok_r+0x2e>
 800e29a:	2300      	movs	r3, #0
 800e29c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e2a0:	6014      	str	r4, [r2, #0]
 800e2a2:	e7ed      	b.n	800e280 <__strtok_r+0x2c>

0800e2a4 <strstr>:
 800e2a4:	780a      	ldrb	r2, [r1, #0]
 800e2a6:	b570      	push	{r4, r5, r6, lr}
 800e2a8:	b96a      	cbnz	r2, 800e2c6 <strstr+0x22>
 800e2aa:	bd70      	pop	{r4, r5, r6, pc}
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	d109      	bne.n	800e2c4 <strstr+0x20>
 800e2b0:	460c      	mov	r4, r1
 800e2b2:	4605      	mov	r5, r0
 800e2b4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d0f6      	beq.n	800e2aa <strstr+0x6>
 800e2bc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800e2c0:	429e      	cmp	r6, r3
 800e2c2:	d0f7      	beq.n	800e2b4 <strstr+0x10>
 800e2c4:	3001      	adds	r0, #1
 800e2c6:	7803      	ldrb	r3, [r0, #0]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d1ef      	bne.n	800e2ac <strstr+0x8>
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	e7ec      	b.n	800e2aa <strstr+0x6>

0800e2d0 <validate_structure>:
 800e2d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e2d2:	6801      	ldr	r1, [r0, #0]
 800e2d4:	4604      	mov	r4, r0
 800e2d6:	293b      	cmp	r1, #59	@ 0x3b
 800e2d8:	d911      	bls.n	800e2fe <validate_structure+0x2e>
 800e2da:	223c      	movs	r2, #60	@ 0x3c
 800e2dc:	4668      	mov	r0, sp
 800e2de:	f000 fe85 	bl	800efec <div>
 800e2e2:	9a01      	ldr	r2, [sp, #4]
 800e2e4:	6863      	ldr	r3, [r4, #4]
 800e2e6:	9900      	ldr	r1, [sp, #0]
 800e2e8:	2a00      	cmp	r2, #0
 800e2ea:	440b      	add	r3, r1
 800e2ec:	6063      	str	r3, [r4, #4]
 800e2ee:	bfbb      	ittet	lt
 800e2f0:	323c      	addlt	r2, #60	@ 0x3c
 800e2f2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800e2f6:	6022      	strge	r2, [r4, #0]
 800e2f8:	6022      	strlt	r2, [r4, #0]
 800e2fa:	bfb8      	it	lt
 800e2fc:	6063      	strlt	r3, [r4, #4]
 800e2fe:	6861      	ldr	r1, [r4, #4]
 800e300:	293b      	cmp	r1, #59	@ 0x3b
 800e302:	d911      	bls.n	800e328 <validate_structure+0x58>
 800e304:	223c      	movs	r2, #60	@ 0x3c
 800e306:	4668      	mov	r0, sp
 800e308:	f000 fe70 	bl	800efec <div>
 800e30c:	9a01      	ldr	r2, [sp, #4]
 800e30e:	68a3      	ldr	r3, [r4, #8]
 800e310:	9900      	ldr	r1, [sp, #0]
 800e312:	2a00      	cmp	r2, #0
 800e314:	440b      	add	r3, r1
 800e316:	60a3      	str	r3, [r4, #8]
 800e318:	bfbb      	ittet	lt
 800e31a:	323c      	addlt	r2, #60	@ 0x3c
 800e31c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800e320:	6062      	strge	r2, [r4, #4]
 800e322:	6062      	strlt	r2, [r4, #4]
 800e324:	bfb8      	it	lt
 800e326:	60a3      	strlt	r3, [r4, #8]
 800e328:	68a1      	ldr	r1, [r4, #8]
 800e32a:	2917      	cmp	r1, #23
 800e32c:	d911      	bls.n	800e352 <validate_structure+0x82>
 800e32e:	2218      	movs	r2, #24
 800e330:	4668      	mov	r0, sp
 800e332:	f000 fe5b 	bl	800efec <div>
 800e336:	9a01      	ldr	r2, [sp, #4]
 800e338:	68e3      	ldr	r3, [r4, #12]
 800e33a:	9900      	ldr	r1, [sp, #0]
 800e33c:	2a00      	cmp	r2, #0
 800e33e:	440b      	add	r3, r1
 800e340:	60e3      	str	r3, [r4, #12]
 800e342:	bfbb      	ittet	lt
 800e344:	3218      	addlt	r2, #24
 800e346:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800e34a:	60a2      	strge	r2, [r4, #8]
 800e34c:	60a2      	strlt	r2, [r4, #8]
 800e34e:	bfb8      	it	lt
 800e350:	60e3      	strlt	r3, [r4, #12]
 800e352:	6921      	ldr	r1, [r4, #16]
 800e354:	290b      	cmp	r1, #11
 800e356:	d911      	bls.n	800e37c <validate_structure+0xac>
 800e358:	220c      	movs	r2, #12
 800e35a:	4668      	mov	r0, sp
 800e35c:	f000 fe46 	bl	800efec <div>
 800e360:	9a01      	ldr	r2, [sp, #4]
 800e362:	6963      	ldr	r3, [r4, #20]
 800e364:	9900      	ldr	r1, [sp, #0]
 800e366:	2a00      	cmp	r2, #0
 800e368:	440b      	add	r3, r1
 800e36a:	6163      	str	r3, [r4, #20]
 800e36c:	bfbb      	ittet	lt
 800e36e:	320c      	addlt	r2, #12
 800e370:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800e374:	6122      	strge	r2, [r4, #16]
 800e376:	6122      	strlt	r2, [r4, #16]
 800e378:	bfb8      	it	lt
 800e37a:	6163      	strlt	r3, [r4, #20]
 800e37c:	6963      	ldr	r3, [r4, #20]
 800e37e:	079a      	lsls	r2, r3, #30
 800e380:	d11c      	bne.n	800e3bc <validate_structure+0xec>
 800e382:	2164      	movs	r1, #100	@ 0x64
 800e384:	fb93 f2f1 	sdiv	r2, r3, r1
 800e388:	fb01 3212 	mls	r2, r1, r2, r3
 800e38c:	b9c2      	cbnz	r2, 800e3c0 <validate_structure+0xf0>
 800e38e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800e392:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 800e396:	fb93 f1f2 	sdiv	r1, r3, r2
 800e39a:	fb02 3311 	mls	r3, r2, r1, r3
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	bf14      	ite	ne
 800e3a2:	231c      	movne	r3, #28
 800e3a4:	231d      	moveq	r3, #29
 800e3a6:	68e2      	ldr	r2, [r4, #12]
 800e3a8:	2a00      	cmp	r2, #0
 800e3aa:	dc0b      	bgt.n	800e3c4 <validate_structure+0xf4>
 800e3ac:	200b      	movs	r0, #11
 800e3ae:	2164      	movs	r1, #100	@ 0x64
 800e3b0:	4d30      	ldr	r5, [pc, #192]	@ (800e474 <validate_structure+0x1a4>)
 800e3b2:	68e6      	ldr	r6, [r4, #12]
 800e3b4:	2e00      	cmp	r6, #0
 800e3b6:	dd30      	ble.n	800e41a <validate_structure+0x14a>
 800e3b8:	b003      	add	sp, #12
 800e3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3bc:	231c      	movs	r3, #28
 800e3be:	e7f2      	b.n	800e3a6 <validate_structure+0xd6>
 800e3c0:	231d      	movs	r3, #29
 800e3c2:	e7f0      	b.n	800e3a6 <validate_structure+0xd6>
 800e3c4:	4d2b      	ldr	r5, [pc, #172]	@ (800e474 <validate_structure+0x1a4>)
 800e3c6:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800e3ca:	2a01      	cmp	r2, #1
 800e3cc:	bf0c      	ite	eq
 800e3ce:	4618      	moveq	r0, r3
 800e3d0:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 800e3d4:	4281      	cmp	r1, r0
 800e3d6:	ddef      	ble.n	800e3b8 <validate_structure+0xe8>
 800e3d8:	3201      	adds	r2, #1
 800e3da:	1a09      	subs	r1, r1, r0
 800e3dc:	2a0c      	cmp	r2, #12
 800e3de:	60e1      	str	r1, [r4, #12]
 800e3e0:	6122      	str	r2, [r4, #16]
 800e3e2:	d1f0      	bne.n	800e3c6 <validate_structure+0xf6>
 800e3e4:	2100      	movs	r1, #0
 800e3e6:	6963      	ldr	r3, [r4, #20]
 800e3e8:	6121      	str	r1, [r4, #16]
 800e3ea:	1c5a      	adds	r2, r3, #1
 800e3ec:	0791      	lsls	r1, r2, #30
 800e3ee:	6162      	str	r2, [r4, #20]
 800e3f0:	d13c      	bne.n	800e46c <validate_structure+0x19c>
 800e3f2:	2164      	movs	r1, #100	@ 0x64
 800e3f4:	fb92 f0f1 	sdiv	r0, r2, r1
 800e3f8:	fb01 2210 	mls	r2, r1, r0, r2
 800e3fc:	2a00      	cmp	r2, #0
 800e3fe:	d137      	bne.n	800e470 <validate_structure+0x1a0>
 800e400:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800e404:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 800e408:	fb93 f1f2 	sdiv	r1, r3, r2
 800e40c:	fb02 3311 	mls	r3, r2, r1, r3
 800e410:	2b00      	cmp	r3, #0
 800e412:	bf14      	ite	ne
 800e414:	231c      	movne	r3, #28
 800e416:	231d      	moveq	r3, #29
 800e418:	e7d5      	b.n	800e3c6 <validate_structure+0xf6>
 800e41a:	6922      	ldr	r2, [r4, #16]
 800e41c:	3a01      	subs	r2, #1
 800e41e:	6122      	str	r2, [r4, #16]
 800e420:	3201      	adds	r2, #1
 800e422:	d116      	bne.n	800e452 <validate_structure+0x182>
 800e424:	6963      	ldr	r3, [r4, #20]
 800e426:	1e5a      	subs	r2, r3, #1
 800e428:	0797      	lsls	r7, r2, #30
 800e42a:	e9c4 0204 	strd	r0, r2, [r4, #16]
 800e42e:	d119      	bne.n	800e464 <validate_structure+0x194>
 800e430:	fb92 f7f1 	sdiv	r7, r2, r1
 800e434:	fb01 2217 	mls	r2, r1, r7, r2
 800e438:	b9b2      	cbnz	r2, 800e468 <validate_structure+0x198>
 800e43a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800e43e:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800e442:	fb93 f7f2 	sdiv	r7, r3, r2
 800e446:	fb02 3317 	mls	r3, r2, r7, r3
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	bf14      	ite	ne
 800e44e:	231c      	movne	r3, #28
 800e450:	231d      	moveq	r3, #29
 800e452:	6922      	ldr	r2, [r4, #16]
 800e454:	2a01      	cmp	r2, #1
 800e456:	bf0c      	ite	eq
 800e458:	461a      	moveq	r2, r3
 800e45a:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 800e45e:	4432      	add	r2, r6
 800e460:	60e2      	str	r2, [r4, #12]
 800e462:	e7a6      	b.n	800e3b2 <validate_structure+0xe2>
 800e464:	231c      	movs	r3, #28
 800e466:	e7f4      	b.n	800e452 <validate_structure+0x182>
 800e468:	231d      	movs	r3, #29
 800e46a:	e7f2      	b.n	800e452 <validate_structure+0x182>
 800e46c:	231c      	movs	r3, #28
 800e46e:	e7aa      	b.n	800e3c6 <validate_structure+0xf6>
 800e470:	231d      	movs	r3, #29
 800e472:	e7a8      	b.n	800e3c6 <validate_structure+0xf6>
 800e474:	080121d4 	.word	0x080121d4

0800e478 <mktime>:
 800e478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e47c:	b085      	sub	sp, #20
 800e47e:	4607      	mov	r7, r0
 800e480:	f002 ffca 	bl	8011418 <__gettzinfo>
 800e484:	4681      	mov	r9, r0
 800e486:	4638      	mov	r0, r7
 800e488:	f7ff ff22 	bl	800e2d0 <validate_structure>
 800e48c:	e9d7 4300 	ldrd	r4, r3, [r7]
 800e490:	223c      	movs	r2, #60	@ 0x3c
 800e492:	fb02 4403 	mla	r4, r2, r3, r4
 800e496:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	697d      	ldr	r5, [r7, #20]
 800e49e:	fb02 4403 	mla	r4, r2, r3, r4
 800e4a2:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 800e4a6:	4ac1      	ldr	r2, [pc, #772]	@ (800e7ac <mktime+0x334>)
 800e4a8:	3e01      	subs	r6, #1
 800e4aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e4ae:	2b01      	cmp	r3, #1
 800e4b0:	4416      	add	r6, r2
 800e4b2:	dd11      	ble.n	800e4d8 <mktime+0x60>
 800e4b4:	07a9      	lsls	r1, r5, #30
 800e4b6:	d10f      	bne.n	800e4d8 <mktime+0x60>
 800e4b8:	2264      	movs	r2, #100	@ 0x64
 800e4ba:	fb95 f3f2 	sdiv	r3, r5, r2
 800e4be:	fb02 5313 	mls	r3, r2, r3, r5
 800e4c2:	b943      	cbnz	r3, 800e4d6 <mktime+0x5e>
 800e4c4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800e4c8:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800e4cc:	fb93 f1f2 	sdiv	r1, r3, r2
 800e4d0:	fb02 3311 	mls	r3, r2, r1, r3
 800e4d4:	b903      	cbnz	r3, 800e4d8 <mktime+0x60>
 800e4d6:	3601      	adds	r6, #1
 800e4d8:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800e4dc:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 800e4e0:	3310      	adds	r3, #16
 800e4e2:	4293      	cmp	r3, r2
 800e4e4:	61fe      	str	r6, [r7, #28]
 800e4e6:	f200 8167 	bhi.w	800e7b8 <mktime+0x340>
 800e4ea:	2d46      	cmp	r5, #70	@ 0x46
 800e4ec:	f340 808e 	ble.w	800e60c <mktime+0x194>
 800e4f0:	2346      	movs	r3, #70	@ 0x46
 800e4f2:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800e4f6:	2164      	movs	r1, #100	@ 0x64
 800e4f8:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800e4fc:	079a      	lsls	r2, r3, #30
 800e4fe:	d17f      	bne.n	800e600 <mktime+0x188>
 800e500:	fb93 f2f1 	sdiv	r2, r3, r1
 800e504:	fb01 3212 	mls	r2, r1, r2, r3
 800e508:	2a00      	cmp	r2, #0
 800e50a:	d17c      	bne.n	800e606 <mktime+0x18e>
 800e50c:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800e510:	fb92 fef0 	sdiv	lr, r2, r0
 800e514:	fb00 221e 	mls	r2, r0, lr, r2
 800e518:	2a00      	cmp	r2, #0
 800e51a:	bf14      	ite	ne
 800e51c:	4662      	movne	r2, ip
 800e51e:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800e522:	3301      	adds	r3, #1
 800e524:	429d      	cmp	r5, r3
 800e526:	4416      	add	r6, r2
 800e528:	d1e8      	bne.n	800e4fc <mktime+0x84>
 800e52a:	4ba1      	ldr	r3, [pc, #644]	@ (800e7b0 <mktime+0x338>)
 800e52c:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800e530:	fbc6 4803 	smlal	r4, r8, r6, r3
 800e534:	f000 f9f8 	bl	800e928 <__tz_lock>
 800e538:	f000 fa02 	bl	800e940 <_tzset_unlocked>
 800e53c:	4b9d      	ldr	r3, [pc, #628]	@ (800e7b4 <mktime+0x33c>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	2b00      	cmp	r3, #0
 800e542:	f000 8140 	beq.w	800e7c6 <mktime+0x34e>
 800e546:	f8d7 a020 	ldr.w	sl, [r7, #32]
 800e54a:	6978      	ldr	r0, [r7, #20]
 800e54c:	4653      	mov	r3, sl
 800e54e:	2b01      	cmp	r3, #1
 800e550:	bfa8      	it	ge
 800e552:	2301      	movge	r3, #1
 800e554:	9301      	str	r3, [sp, #4]
 800e556:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e55a:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 800e55e:	4283      	cmp	r3, r0
 800e560:	f040 8096 	bne.w	800e690 <mktime+0x218>
 800e564:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 800e568:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 800e56c:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 800e570:	1a13      	subs	r3, r2, r0
 800e572:	9303      	str	r3, [sp, #12]
 800e574:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 800e578:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 800e57c:	9302      	str	r3, [sp, #8]
 800e57e:	9a02      	ldr	r2, [sp, #8]
 800e580:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800e584:	ebb2 0e03 	subs.w	lr, r2, r3
 800e588:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800e58c:	4574      	cmp	r4, lr
 800e58e:	eb78 0201 	sbcs.w	r2, r8, r1
 800e592:	f280 8085 	bge.w	800e6a0 <mktime+0x228>
 800e596:	f8d9 2000 	ldr.w	r2, [r9]
 800e59a:	2a00      	cmp	r2, #0
 800e59c:	f000 808d 	beq.w	800e6ba <mktime+0x242>
 800e5a0:	9a03      	ldr	r2, [sp, #12]
 800e5a2:	4294      	cmp	r4, r2
 800e5a4:	eb78 020b 	sbcs.w	r2, r8, fp
 800e5a8:	f2c0 810a 	blt.w	800e7c0 <mktime+0x348>
 800e5ac:	4574      	cmp	r4, lr
 800e5ae:	eb78 0101 	sbcs.w	r1, r8, r1
 800e5b2:	bfb4      	ite	lt
 800e5b4:	f04f 0b01 	movlt.w	fp, #1
 800e5b8:	f04f 0b00 	movge.w	fp, #0
 800e5bc:	f1ba 0f00 	cmp.w	sl, #0
 800e5c0:	f280 8087 	bge.w	800e6d2 <mktime+0x25a>
 800e5c4:	f1bb 0f01 	cmp.w	fp, #1
 800e5c8:	f040 80ff 	bne.w	800e7ca <mktime+0x352>
 800e5cc:	f04f 0b01 	mov.w	fp, #1
 800e5d0:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 800e5d4:	191c      	adds	r4, r3, r4
 800e5d6:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800e5da:	f000 f9ab 	bl	800e934 <__tz_unlock>
 800e5de:	2307      	movs	r3, #7
 800e5e0:	3604      	adds	r6, #4
 800e5e2:	fb96 f3f3 	sdiv	r3, r6, r3
 800e5e6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800e5ea:	1af6      	subs	r6, r6, r3
 800e5ec:	f100 80db 	bmi.w	800e7a6 <mktime+0x32e>
 800e5f0:	f8c7 b020 	str.w	fp, [r7, #32]
 800e5f4:	61be      	str	r6, [r7, #24]
 800e5f6:	4620      	mov	r0, r4
 800e5f8:	4641      	mov	r1, r8
 800e5fa:	b005      	add	sp, #20
 800e5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e600:	f240 126d 	movw	r2, #365	@ 0x16d
 800e604:	e78d      	b.n	800e522 <mktime+0xaa>
 800e606:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800e60a:	e78a      	b.n	800e522 <mktime+0xaa>
 800e60c:	d08d      	beq.n	800e52a <mktime+0xb2>
 800e60e:	2345      	movs	r3, #69	@ 0x45
 800e610:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800e614:	2164      	movs	r1, #100	@ 0x64
 800e616:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800e61a:	e012      	b.n	800e642 <mktime+0x1ca>
 800e61c:	bb62      	cbnz	r2, 800e678 <mktime+0x200>
 800e61e:	fb93 f2f1 	sdiv	r2, r3, r1
 800e622:	fb01 3212 	mls	r2, r1, r2, r3
 800e626:	bb52      	cbnz	r2, 800e67e <mktime+0x206>
 800e628:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800e62c:	fb92 fef0 	sdiv	lr, r2, r0
 800e630:	fb00 221e 	mls	r2, r0, lr, r2
 800e634:	2a00      	cmp	r2, #0
 800e636:	bf14      	ite	ne
 800e638:	4662      	movne	r2, ip
 800e63a:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800e63e:	1ab6      	subs	r6, r6, r2
 800e640:	3b01      	subs	r3, #1
 800e642:	429d      	cmp	r5, r3
 800e644:	f003 0203 	and.w	r2, r3, #3
 800e648:	dbe8      	blt.n	800e61c <mktime+0x1a4>
 800e64a:	b9da      	cbnz	r2, 800e684 <mktime+0x20c>
 800e64c:	2264      	movs	r2, #100	@ 0x64
 800e64e:	fb95 f3f2 	sdiv	r3, r5, r2
 800e652:	fb02 5313 	mls	r3, r2, r3, r5
 800e656:	b9c3      	cbnz	r3, 800e68a <mktime+0x212>
 800e658:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800e65c:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800e660:	fb93 f1f2 	sdiv	r1, r3, r2
 800e664:	fb02 3311 	mls	r3, r2, r1, r3
 800e668:	2b00      	cmp	r3, #0
 800e66a:	f240 136d 	movw	r3, #365	@ 0x16d
 800e66e:	bf08      	it	eq
 800e670:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 800e674:	1af6      	subs	r6, r6, r3
 800e676:	e758      	b.n	800e52a <mktime+0xb2>
 800e678:	f240 126d 	movw	r2, #365	@ 0x16d
 800e67c:	e7df      	b.n	800e63e <mktime+0x1c6>
 800e67e:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800e682:	e7dc      	b.n	800e63e <mktime+0x1c6>
 800e684:	f240 136d 	movw	r3, #365	@ 0x16d
 800e688:	e7f4      	b.n	800e674 <mktime+0x1fc>
 800e68a:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 800e68e:	e7f1      	b.n	800e674 <mktime+0x1fc>
 800e690:	f000 f8a2 	bl	800e7d8 <__tzcalc_limits>
 800e694:	2800      	cmp	r0, #0
 800e696:	f47f af65 	bne.w	800e564 <mktime+0xec>
 800e69a:	f8dd b004 	ldr.w	fp, [sp, #4]
 800e69e:	e791      	b.n	800e5c4 <mktime+0x14c>
 800e6a0:	9a02      	ldr	r2, [sp, #8]
 800e6a2:	1a12      	subs	r2, r2, r0
 800e6a4:	9202      	str	r2, [sp, #8]
 800e6a6:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800e6aa:	eb6c 0c02 	sbc.w	ip, ip, r2
 800e6ae:	9a02      	ldr	r2, [sp, #8]
 800e6b0:	4294      	cmp	r4, r2
 800e6b2:	eb78 0c0c 	sbcs.w	ip, r8, ip
 800e6b6:	dbf0      	blt.n	800e69a <mktime+0x222>
 800e6b8:	e76d      	b.n	800e596 <mktime+0x11e>
 800e6ba:	9a03      	ldr	r2, [sp, #12]
 800e6bc:	4294      	cmp	r4, r2
 800e6be:	eb78 020b 	sbcs.w	r2, r8, fp
 800e6c2:	f6ff af73 	blt.w	800e5ac <mktime+0x134>
 800e6c6:	f1ba 0f00 	cmp.w	sl, #0
 800e6ca:	f6ff af7f 	blt.w	800e5cc <mktime+0x154>
 800e6ce:	f04f 0b01 	mov.w	fp, #1
 800e6d2:	9a01      	ldr	r2, [sp, #4]
 800e6d4:	ea82 020b 	eor.w	r2, r2, fp
 800e6d8:	2a01      	cmp	r2, #1
 800e6da:	f47f af73 	bne.w	800e5c4 <mktime+0x14c>
 800e6de:	f1bb 0f00 	cmp.w	fp, #0
 800e6e2:	d035      	beq.n	800e750 <mktime+0x2d8>
 800e6e4:	1a1b      	subs	r3, r3, r0
 800e6e6:	683a      	ldr	r2, [r7, #0]
 800e6e8:	191c      	adds	r4, r3, r4
 800e6ea:	441a      	add	r2, r3
 800e6ec:	603a      	str	r2, [r7, #0]
 800e6ee:	4638      	mov	r0, r7
 800e6f0:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800e6f4:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800e6f8:	f7ff fdea 	bl	800e2d0 <validate_structure>
 800e6fc:	68fa      	ldr	r2, [r7, #12]
 800e6fe:	ebb2 020a 	subs.w	r2, r2, sl
 800e702:	f43f af5f 	beq.w	800e5c4 <mktime+0x14c>
 800e706:	2a01      	cmp	r2, #1
 800e708:	dc24      	bgt.n	800e754 <mktime+0x2dc>
 800e70a:	1c93      	adds	r3, r2, #2
 800e70c:	bfd8      	it	le
 800e70e:	2201      	movle	r2, #1
 800e710:	69fb      	ldr	r3, [r7, #28]
 800e712:	18d3      	adds	r3, r2, r3
 800e714:	d527      	bpl.n	800e766 <mktime+0x2ee>
 800e716:	1e6b      	subs	r3, r5, #1
 800e718:	0798      	lsls	r0, r3, #30
 800e71a:	d11e      	bne.n	800e75a <mktime+0x2e2>
 800e71c:	2164      	movs	r1, #100	@ 0x64
 800e71e:	fb93 f0f1 	sdiv	r0, r3, r1
 800e722:	fb01 3310 	mls	r3, r1, r0, r3
 800e726:	b9db      	cbnz	r3, 800e760 <mktime+0x2e8>
 800e728:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800e72c:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 800e730:	fb95 f1f3 	sdiv	r1, r5, r3
 800e734:	fb03 5511 	mls	r5, r3, r1, r5
 800e738:	2d00      	cmp	r5, #0
 800e73a:	f240 136d 	movw	r3, #365	@ 0x16d
 800e73e:	bf18      	it	ne
 800e740:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 800e744:	61fb      	str	r3, [r7, #28]
 800e746:	4416      	add	r6, r2
 800e748:	e73c      	b.n	800e5c4 <mktime+0x14c>
 800e74a:	f04f 0b00 	mov.w	fp, #0
 800e74e:	e7c0      	b.n	800e6d2 <mktime+0x25a>
 800e750:	1ac3      	subs	r3, r0, r3
 800e752:	e7c8      	b.n	800e6e6 <mktime+0x26e>
 800e754:	f04f 32ff 	mov.w	r2, #4294967295
 800e758:	e7da      	b.n	800e710 <mktime+0x298>
 800e75a:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 800e75e:	e7f1      	b.n	800e744 <mktime+0x2cc>
 800e760:	f240 136d 	movw	r3, #365	@ 0x16d
 800e764:	e7ee      	b.n	800e744 <mktime+0x2cc>
 800e766:	07a9      	lsls	r1, r5, #30
 800e768:	d117      	bne.n	800e79a <mktime+0x322>
 800e76a:	2064      	movs	r0, #100	@ 0x64
 800e76c:	fb95 f1f0 	sdiv	r1, r5, r0
 800e770:	fb00 5111 	mls	r1, r0, r1, r5
 800e774:	b9a1      	cbnz	r1, 800e7a0 <mktime+0x328>
 800e776:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800e77a:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800e77e:	fb95 f0f1 	sdiv	r0, r5, r1
 800e782:	fb01 5510 	mls	r5, r1, r0, r5
 800e786:	2d00      	cmp	r5, #0
 800e788:	f240 116d 	movw	r1, #365	@ 0x16d
 800e78c:	bf08      	it	eq
 800e78e:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 800e792:	428b      	cmp	r3, r1
 800e794:	bfa8      	it	ge
 800e796:	1a5b      	subge	r3, r3, r1
 800e798:	e7d4      	b.n	800e744 <mktime+0x2cc>
 800e79a:	f240 116d 	movw	r1, #365	@ 0x16d
 800e79e:	e7f8      	b.n	800e792 <mktime+0x31a>
 800e7a0:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 800e7a4:	e7f5      	b.n	800e792 <mktime+0x31a>
 800e7a6:	3607      	adds	r6, #7
 800e7a8:	e722      	b.n	800e5f0 <mktime+0x178>
 800e7aa:	bf00      	nop
 800e7ac:	080121a4 	.word	0x080121a4
 800e7b0:	00015180 	.word	0x00015180
 800e7b4:	20005b84 	.word	0x20005b84
 800e7b8:	f04f 34ff 	mov.w	r4, #4294967295
 800e7bc:	46a0      	mov	r8, r4
 800e7be:	e71a      	b.n	800e5f6 <mktime+0x17e>
 800e7c0:	f1ba 0f00 	cmp.w	sl, #0
 800e7c4:	dac1      	bge.n	800e74a <mktime+0x2d2>
 800e7c6:	f04f 0b00 	mov.w	fp, #0
 800e7ca:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800e7ce:	191c      	adds	r4, r3, r4
 800e7d0:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800e7d4:	e701      	b.n	800e5da <mktime+0x162>
 800e7d6:	bf00      	nop

0800e7d8 <__tzcalc_limits>:
 800e7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7dc:	4604      	mov	r4, r0
 800e7de:	f002 fe1b 	bl	8011418 <__gettzinfo>
 800e7e2:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800e7e6:	429c      	cmp	r4, r3
 800e7e8:	f340 8098 	ble.w	800e91c <__tzcalc_limits+0x144>
 800e7ec:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 800e7f0:	f240 126d 	movw	r2, #365	@ 0x16d
 800e7f4:	19e5      	adds	r5, r4, r7
 800e7f6:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800e7fa:	10ad      	asrs	r5, r5, #2
 800e7fc:	fb02 5503 	mla	r5, r2, r3, r5
 800e800:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800e804:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 800e808:	fb93 f3f2 	sdiv	r3, r3, r2
 800e80c:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 800e810:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800e814:	441d      	add	r5, r3
 800e816:	eb04 030c 	add.w	r3, r4, ip
 800e81a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e81e:	4601      	mov	r1, r0
 800e820:	4f3f      	ldr	r7, [pc, #252]	@ (800e920 <__tzcalc_limits+0x148>)
 800e822:	6044      	str	r4, [r0, #4]
 800e824:	441d      	add	r5, r3
 800e826:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 800e82a:	7a0b      	ldrb	r3, [r1, #8]
 800e82c:	694a      	ldr	r2, [r1, #20]
 800e82e:	2b4a      	cmp	r3, #74	@ 0x4a
 800e830:	d133      	bne.n	800e89a <__tzcalc_limits+0xc2>
 800e832:	07a6      	lsls	r6, r4, #30
 800e834:	eb05 0302 	add.w	r3, r5, r2
 800e838:	d106      	bne.n	800e848 <__tzcalc_limits+0x70>
 800e83a:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800e83e:	fb94 f6fe 	sdiv	r6, r4, lr
 800e842:	fb0e 4616 	mls	r6, lr, r6, r4
 800e846:	b936      	cbnz	r6, 800e856 <__tzcalc_limits+0x7e>
 800e848:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 800e84c:	fb94 f6fe 	sdiv	r6, r4, lr
 800e850:	fb0e 4616 	mls	r6, lr, r6, r4
 800e854:	b9fe      	cbnz	r6, 800e896 <__tzcalc_limits+0xbe>
 800e856:	2a3b      	cmp	r2, #59	@ 0x3b
 800e858:	bfd4      	ite	le
 800e85a:	2200      	movle	r2, #0
 800e85c:	2201      	movgt	r2, #1
 800e85e:	4413      	add	r3, r2
 800e860:	3b01      	subs	r3, #1
 800e862:	698a      	ldr	r2, [r1, #24]
 800e864:	17d6      	asrs	r6, r2, #31
 800e866:	fbc3 2607 	smlal	r2, r6, r3, r7
 800e86a:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800e86c:	18d2      	adds	r2, r2, r3
 800e86e:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 800e872:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800e876:	3128      	adds	r1, #40	@ 0x28
 800e878:	458c      	cmp	ip, r1
 800e87a:	d1d6      	bne.n	800e82a <__tzcalc_limits+0x52>
 800e87c:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800e880:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 800e884:	428c      	cmp	r4, r1
 800e886:	4193      	sbcs	r3, r2
 800e888:	bfb4      	ite	lt
 800e88a:	2301      	movlt	r3, #1
 800e88c:	2300      	movge	r3, #0
 800e88e:	6003      	str	r3, [r0, #0]
 800e890:	2001      	movs	r0, #1
 800e892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e896:	2200      	movs	r2, #0
 800e898:	e7e1      	b.n	800e85e <__tzcalc_limits+0x86>
 800e89a:	2b44      	cmp	r3, #68	@ 0x44
 800e89c:	d101      	bne.n	800e8a2 <__tzcalc_limits+0xca>
 800e89e:	18ab      	adds	r3, r5, r2
 800e8a0:	e7df      	b.n	800e862 <__tzcalc_limits+0x8a>
 800e8a2:	07a3      	lsls	r3, r4, #30
 800e8a4:	d105      	bne.n	800e8b2 <__tzcalc_limits+0xda>
 800e8a6:	2664      	movs	r6, #100	@ 0x64
 800e8a8:	fb94 f3f6 	sdiv	r3, r4, r6
 800e8ac:	fb06 4313 	mls	r3, r6, r3, r4
 800e8b0:	bb73      	cbnz	r3, 800e910 <__tzcalc_limits+0x138>
 800e8b2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800e8b6:	fb94 f6f3 	sdiv	r6, r4, r3
 800e8ba:	fb03 4616 	mls	r6, r3, r6, r4
 800e8be:	fab6 f686 	clz	r6, r6
 800e8c2:	0976      	lsrs	r6, r6, #5
 800e8c4:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 800e8c8:	462b      	mov	r3, r5
 800e8ca:	f04f 0800 	mov.w	r8, #0
 800e8ce:	f8df e054 	ldr.w	lr, [pc, #84]	@ 800e924 <__tzcalc_limits+0x14c>
 800e8d2:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800e8d6:	fb0a e606 	mla	r6, sl, r6, lr
 800e8da:	f108 0801 	add.w	r8, r8, #1
 800e8de:	45c1      	cmp	r9, r8
 800e8e0:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 800e8e4:	dc16      	bgt.n	800e914 <__tzcalc_limits+0x13c>
 800e8e6:	2607      	movs	r6, #7
 800e8e8:	f103 0804 	add.w	r8, r3, #4
 800e8ec:	fb98 f6f6 	sdiv	r6, r8, r6
 800e8f0:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800e8f4:	eba8 0606 	sub.w	r6, r8, r6
 800e8f8:	1b92      	subs	r2, r2, r6
 800e8fa:	690e      	ldr	r6, [r1, #16]
 800e8fc:	bf48      	it	mi
 800e8fe:	3207      	addmi	r2, #7
 800e900:	3e01      	subs	r6, #1
 800e902:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800e906:	4432      	add	r2, r6
 800e908:	4572      	cmp	r2, lr
 800e90a:	da05      	bge.n	800e918 <__tzcalc_limits+0x140>
 800e90c:	4413      	add	r3, r2
 800e90e:	e7a8      	b.n	800e862 <__tzcalc_limits+0x8a>
 800e910:	2601      	movs	r6, #1
 800e912:	e7d7      	b.n	800e8c4 <__tzcalc_limits+0xec>
 800e914:	4473      	add	r3, lr
 800e916:	e7e0      	b.n	800e8da <__tzcalc_limits+0x102>
 800e918:	3a07      	subs	r2, #7
 800e91a:	e7f5      	b.n	800e908 <__tzcalc_limits+0x130>
 800e91c:	2000      	movs	r0, #0
 800e91e:	e7b8      	b.n	800e892 <__tzcalc_limits+0xba>
 800e920:	00015180 	.word	0x00015180
 800e924:	080124d8 	.word	0x080124d8

0800e928 <__tz_lock>:
 800e928:	4801      	ldr	r0, [pc, #4]	@ (800e930 <__tz_lock+0x8>)
 800e92a:	f000 bb0e 	b.w	800ef4a <__retarget_lock_acquire>
 800e92e:	bf00      	nop
 800e930:	20005b8c 	.word	0x20005b8c

0800e934 <__tz_unlock>:
 800e934:	4801      	ldr	r0, [pc, #4]	@ (800e93c <__tz_unlock+0x8>)
 800e936:	f000 bb0a 	b.w	800ef4e <__retarget_lock_release>
 800e93a:	bf00      	nop
 800e93c:	20005b8c 	.word	0x20005b8c

0800e940 <_tzset_unlocked>:
 800e940:	4b01      	ldr	r3, [pc, #4]	@ (800e948 <_tzset_unlocked+0x8>)
 800e942:	6818      	ldr	r0, [r3, #0]
 800e944:	f000 b802 	b.w	800e94c <_tzset_unlocked_r>
 800e948:	20000284 	.word	0x20000284

0800e94c <_tzset_unlocked_r>:
 800e94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e950:	b08d      	sub	sp, #52	@ 0x34
 800e952:	4607      	mov	r7, r0
 800e954:	f002 fd60 	bl	8011418 <__gettzinfo>
 800e958:	496d      	ldr	r1, [pc, #436]	@ (800eb10 <_tzset_unlocked_r+0x1c4>)
 800e95a:	4604      	mov	r4, r0
 800e95c:	4638      	mov	r0, r7
 800e95e:	f001 fd5d 	bl	801041c <_getenv_r>
 800e962:	4d6c      	ldr	r5, [pc, #432]	@ (800eb14 <_tzset_unlocked_r+0x1c8>)
 800e964:	4606      	mov	r6, r0
 800e966:	bb10      	cbnz	r0, 800e9ae <_tzset_unlocked_r+0x62>
 800e968:	4b6b      	ldr	r3, [pc, #428]	@ (800eb18 <_tzset_unlocked_r+0x1cc>)
 800e96a:	4a6c      	ldr	r2, [pc, #432]	@ (800eb1c <_tzset_unlocked_r+0x1d0>)
 800e96c:	6018      	str	r0, [r3, #0]
 800e96e:	4b6c      	ldr	r3, [pc, #432]	@ (800eb20 <_tzset_unlocked_r+0x1d4>)
 800e970:	214a      	movs	r1, #74	@ 0x4a
 800e972:	6018      	str	r0, [r3, #0]
 800e974:	4b6b      	ldr	r3, [pc, #428]	@ (800eb24 <_tzset_unlocked_r+0x1d8>)
 800e976:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800e97a:	e9c3 2200 	strd	r2, r2, [r3]
 800e97e:	2200      	movs	r2, #0
 800e980:	2300      	movs	r3, #0
 800e982:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800e986:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800e98a:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800e98e:	62a0      	str	r0, [r4, #40]	@ 0x28
 800e990:	6520      	str	r0, [r4, #80]	@ 0x50
 800e992:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800e996:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800e99a:	6828      	ldr	r0, [r5, #0]
 800e99c:	7221      	strb	r1, [r4, #8]
 800e99e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800e9a2:	f7fd fee3 	bl	800c76c <free>
 800e9a6:	602e      	str	r6, [r5, #0]
 800e9a8:	b00d      	add	sp, #52	@ 0x34
 800e9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9ae:	6829      	ldr	r1, [r5, #0]
 800e9b0:	2900      	cmp	r1, #0
 800e9b2:	f040 808e 	bne.w	800ead2 <_tzset_unlocked_r+0x186>
 800e9b6:	6828      	ldr	r0, [r5, #0]
 800e9b8:	f7fd fed8 	bl	800c76c <free>
 800e9bc:	4630      	mov	r0, r6
 800e9be:	f7f1 fc41 	bl	8000244 <strlen>
 800e9c2:	1c41      	adds	r1, r0, #1
 800e9c4:	4638      	mov	r0, r7
 800e9c6:	f7fd fefb 	bl	800c7c0 <_malloc_r>
 800e9ca:	6028      	str	r0, [r5, #0]
 800e9cc:	2800      	cmp	r0, #0
 800e9ce:	f040 8086 	bne.w	800eade <_tzset_unlocked_r+0x192>
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	4a52      	ldr	r2, [pc, #328]	@ (800eb20 <_tzset_unlocked_r+0x1d4>)
 800e9d6:	2000      	movs	r0, #0
 800e9d8:	6013      	str	r3, [r2, #0]
 800e9da:	2100      	movs	r1, #0
 800e9dc:	4a52      	ldr	r2, [pc, #328]	@ (800eb28 <_tzset_unlocked_r+0x1dc>)
 800e9de:	f8df 8144 	ldr.w	r8, [pc, #324]	@ 800eb24 <_tzset_unlocked_r+0x1d8>
 800e9e2:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800e9e6:	e9c8 2200 	strd	r2, r2, [r8]
 800e9ea:	224a      	movs	r2, #74	@ 0x4a
 800e9ec:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800e9f0:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800e9f4:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800e9f8:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800e9fc:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 800ea00:	f8df a114 	ldr.w	sl, [pc, #276]	@ 800eb18 <_tzset_unlocked_r+0x1cc>
 800ea04:	7222      	strb	r2, [r4, #8]
 800ea06:	f8ca 3000 	str.w	r3, [sl]
 800ea0a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ea0c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800ea10:	6523      	str	r3, [r4, #80]	@ 0x50
 800ea12:	7833      	ldrb	r3, [r6, #0]
 800ea14:	2b3a      	cmp	r3, #58	@ 0x3a
 800ea16:	bf08      	it	eq
 800ea18:	3601      	addeq	r6, #1
 800ea1a:	7833      	ldrb	r3, [r6, #0]
 800ea1c:	2b3c      	cmp	r3, #60	@ 0x3c
 800ea1e:	d162      	bne.n	800eae6 <_tzset_unlocked_r+0x19a>
 800ea20:	1c75      	adds	r5, r6, #1
 800ea22:	4628      	mov	r0, r5
 800ea24:	4a41      	ldr	r2, [pc, #260]	@ (800eb2c <_tzset_unlocked_r+0x1e0>)
 800ea26:	4942      	ldr	r1, [pc, #264]	@ (800eb30 <_tzset_unlocked_r+0x1e4>)
 800ea28:	ab0a      	add	r3, sp, #40	@ 0x28
 800ea2a:	f002 fc37 	bl	801129c <siscanf>
 800ea2e:	2800      	cmp	r0, #0
 800ea30:	ddba      	ble.n	800e9a8 <_tzset_unlocked_r+0x5c>
 800ea32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea34:	1eda      	subs	r2, r3, #3
 800ea36:	2a07      	cmp	r2, #7
 800ea38:	d8b6      	bhi.n	800e9a8 <_tzset_unlocked_r+0x5c>
 800ea3a:	5ceb      	ldrb	r3, [r5, r3]
 800ea3c:	2b3e      	cmp	r3, #62	@ 0x3e
 800ea3e:	d1b3      	bne.n	800e9a8 <_tzset_unlocked_r+0x5c>
 800ea40:	3602      	adds	r6, #2
 800ea42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea44:	18f5      	adds	r5, r6, r3
 800ea46:	5cf3      	ldrb	r3, [r6, r3]
 800ea48:	2b2d      	cmp	r3, #45	@ 0x2d
 800ea4a:	d15a      	bne.n	800eb02 <_tzset_unlocked_r+0x1b6>
 800ea4c:	f04f 39ff 	mov.w	r9, #4294967295
 800ea50:	3501      	adds	r5, #1
 800ea52:	2300      	movs	r3, #0
 800ea54:	af08      	add	r7, sp, #32
 800ea56:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ea5a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ea5e:	ab0a      	add	r3, sp, #40	@ 0x28
 800ea60:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800ea64:	9303      	str	r3, [sp, #12]
 800ea66:	f10d 031e 	add.w	r3, sp, #30
 800ea6a:	9300      	str	r3, [sp, #0]
 800ea6c:	4628      	mov	r0, r5
 800ea6e:	4931      	ldr	r1, [pc, #196]	@ (800eb34 <_tzset_unlocked_r+0x1e8>)
 800ea70:	ab0a      	add	r3, sp, #40	@ 0x28
 800ea72:	aa07      	add	r2, sp, #28
 800ea74:	f002 fc12 	bl	801129c <siscanf>
 800ea78:	2800      	cmp	r0, #0
 800ea7a:	dd95      	ble.n	800e9a8 <_tzset_unlocked_r+0x5c>
 800ea7c:	223c      	movs	r2, #60	@ 0x3c
 800ea7e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800ea82:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800ea86:	fb02 6603 	mla	r6, r2, r3, r6
 800ea8a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800ea8e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800ea92:	fb02 6603 	mla	r6, r2, r3, r6
 800ea96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea98:	fb09 f606 	mul.w	r6, r9, r6
 800ea9c:	eb05 0903 	add.w	r9, r5, r3
 800eaa0:	5ceb      	ldrb	r3, [r5, r3]
 800eaa2:	2b3c      	cmp	r3, #60	@ 0x3c
 800eaa4:	f040 80e8 	bne.w	800ec78 <_tzset_unlocked_r+0x32c>
 800eaa8:	f109 0501 	add.w	r5, r9, #1
 800eaac:	4628      	mov	r0, r5
 800eaae:	4a22      	ldr	r2, [pc, #136]	@ (800eb38 <_tzset_unlocked_r+0x1ec>)
 800eab0:	491f      	ldr	r1, [pc, #124]	@ (800eb30 <_tzset_unlocked_r+0x1e4>)
 800eab2:	ab0a      	add	r3, sp, #40	@ 0x28
 800eab4:	f002 fbf2 	bl	801129c <siscanf>
 800eab8:	2800      	cmp	r0, #0
 800eaba:	dc41      	bgt.n	800eb40 <_tzset_unlocked_r+0x1f4>
 800eabc:	f899 3001 	ldrb.w	r3, [r9, #1]
 800eac0:	2b3e      	cmp	r3, #62	@ 0x3e
 800eac2:	d13d      	bne.n	800eb40 <_tzset_unlocked_r+0x1f4>
 800eac4:	4b19      	ldr	r3, [pc, #100]	@ (800eb2c <_tzset_unlocked_r+0x1e0>)
 800eac6:	62a6      	str	r6, [r4, #40]	@ 0x28
 800eac8:	e9c8 3300 	strd	r3, r3, [r8]
 800eacc:	f8ca 6000 	str.w	r6, [sl]
 800ead0:	e76a      	b.n	800e9a8 <_tzset_unlocked_r+0x5c>
 800ead2:	f7f1 fbad 	bl	8000230 <strcmp>
 800ead6:	2800      	cmp	r0, #0
 800ead8:	f47f af6d 	bne.w	800e9b6 <_tzset_unlocked_r+0x6a>
 800eadc:	e764      	b.n	800e9a8 <_tzset_unlocked_r+0x5c>
 800eade:	4631      	mov	r1, r6
 800eae0:	f000 fa37 	bl	800ef52 <strcpy>
 800eae4:	e775      	b.n	800e9d2 <_tzset_unlocked_r+0x86>
 800eae6:	4630      	mov	r0, r6
 800eae8:	4a10      	ldr	r2, [pc, #64]	@ (800eb2c <_tzset_unlocked_r+0x1e0>)
 800eaea:	4914      	ldr	r1, [pc, #80]	@ (800eb3c <_tzset_unlocked_r+0x1f0>)
 800eaec:	ab0a      	add	r3, sp, #40	@ 0x28
 800eaee:	f002 fbd5 	bl	801129c <siscanf>
 800eaf2:	2800      	cmp	r0, #0
 800eaf4:	f77f af58 	ble.w	800e9a8 <_tzset_unlocked_r+0x5c>
 800eaf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eafa:	3b03      	subs	r3, #3
 800eafc:	2b07      	cmp	r3, #7
 800eafe:	d9a0      	bls.n	800ea42 <_tzset_unlocked_r+0xf6>
 800eb00:	e752      	b.n	800e9a8 <_tzset_unlocked_r+0x5c>
 800eb02:	2b2b      	cmp	r3, #43	@ 0x2b
 800eb04:	f04f 0901 	mov.w	r9, #1
 800eb08:	bf08      	it	eq
 800eb0a:	3501      	addeq	r5, #1
 800eb0c:	e7a1      	b.n	800ea52 <_tzset_unlocked_r+0x106>
 800eb0e:	bf00      	nop
 800eb10:	08012204 	.word	0x08012204
 800eb14:	20005b64 	.word	0x20005b64
 800eb18:	20005b80 	.word	0x20005b80
 800eb1c:	08012207 	.word	0x08012207
 800eb20:	20005b84 	.word	0x20005b84
 800eb24:	20000110 	.word	0x20000110
 800eb28:	08012295 	.word	0x08012295
 800eb2c:	20005b74 	.word	0x20005b74
 800eb30:	0801220b 	.word	0x0801220b
 800eb34:	08012240 	.word	0x08012240
 800eb38:	20005b68 	.word	0x20005b68
 800eb3c:	0801221e 	.word	0x0801221e
 800eb40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb42:	1eda      	subs	r2, r3, #3
 800eb44:	2a07      	cmp	r2, #7
 800eb46:	f63f af2f 	bhi.w	800e9a8 <_tzset_unlocked_r+0x5c>
 800eb4a:	5ceb      	ldrb	r3, [r5, r3]
 800eb4c:	2b3e      	cmp	r3, #62	@ 0x3e
 800eb4e:	f47f af2b 	bne.w	800e9a8 <_tzset_unlocked_r+0x5c>
 800eb52:	f109 0902 	add.w	r9, r9, #2
 800eb56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb58:	eb09 0503 	add.w	r5, r9, r3
 800eb5c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800eb60:	2b2d      	cmp	r3, #45	@ 0x2d
 800eb62:	f040 8098 	bne.w	800ec96 <_tzset_unlocked_r+0x34a>
 800eb66:	f04f 39ff 	mov.w	r9, #4294967295
 800eb6a:	3501      	adds	r5, #1
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800eb72:	f8ad 301e 	strh.w	r3, [sp, #30]
 800eb76:	f8ad 3020 	strh.w	r3, [sp, #32]
 800eb7a:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb7c:	ab0a      	add	r3, sp, #40	@ 0x28
 800eb7e:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800eb82:	9301      	str	r3, [sp, #4]
 800eb84:	f10d 031e 	add.w	r3, sp, #30
 800eb88:	9300      	str	r3, [sp, #0]
 800eb8a:	4628      	mov	r0, r5
 800eb8c:	497a      	ldr	r1, [pc, #488]	@ (800ed78 <_tzset_unlocked_r+0x42c>)
 800eb8e:	ab0a      	add	r3, sp, #40	@ 0x28
 800eb90:	aa07      	add	r2, sp, #28
 800eb92:	f002 fb83 	bl	801129c <siscanf>
 800eb96:	2800      	cmp	r0, #0
 800eb98:	f300 8083 	bgt.w	800eca2 <_tzset_unlocked_r+0x356>
 800eb9c:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800eba0:	4627      	mov	r7, r4
 800eba2:	f04f 0b00 	mov.w	fp, #0
 800eba6:	9304      	str	r3, [sp, #16]
 800eba8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebaa:	441d      	add	r5, r3
 800ebac:	782b      	ldrb	r3, [r5, #0]
 800ebae:	2b2c      	cmp	r3, #44	@ 0x2c
 800ebb0:	bf08      	it	eq
 800ebb2:	3501      	addeq	r5, #1
 800ebb4:	f895 9000 	ldrb.w	r9, [r5]
 800ebb8:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800ebbc:	f040 8084 	bne.w	800ecc8 <_tzset_unlocked_r+0x37c>
 800ebc0:	ab0a      	add	r3, sp, #40	@ 0x28
 800ebc2:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800ebc6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ebca:	aa09      	add	r2, sp, #36	@ 0x24
 800ebcc:	9200      	str	r2, [sp, #0]
 800ebce:	4628      	mov	r0, r5
 800ebd0:	496a      	ldr	r1, [pc, #424]	@ (800ed7c <_tzset_unlocked_r+0x430>)
 800ebd2:	9303      	str	r3, [sp, #12]
 800ebd4:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800ebd8:	f002 fb60 	bl	801129c <siscanf>
 800ebdc:	2803      	cmp	r0, #3
 800ebde:	f47f aee3 	bne.w	800e9a8 <_tzset_unlocked_r+0x5c>
 800ebe2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800ebe6:	1e4b      	subs	r3, r1, #1
 800ebe8:	2b0b      	cmp	r3, #11
 800ebea:	f63f aedd 	bhi.w	800e9a8 <_tzset_unlocked_r+0x5c>
 800ebee:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800ebf2:	1e53      	subs	r3, r2, #1
 800ebf4:	2b04      	cmp	r3, #4
 800ebf6:	f63f aed7 	bhi.w	800e9a8 <_tzset_unlocked_r+0x5c>
 800ebfa:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800ebfe:	2b06      	cmp	r3, #6
 800ec00:	f63f aed2 	bhi.w	800e9a8 <_tzset_unlocked_r+0x5c>
 800ec04:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800ec08:	f887 9008 	strb.w	r9, [r7, #8]
 800ec0c:	617b      	str	r3, [r7, #20]
 800ec0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec10:	eb05 0903 	add.w	r9, r5, r3
 800ec14:	2500      	movs	r5, #0
 800ec16:	f04f 0302 	mov.w	r3, #2
 800ec1a:	f8ad 501e 	strh.w	r5, [sp, #30]
 800ec1e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ec22:	f8ad 5020 	strh.w	r5, [sp, #32]
 800ec26:	950a      	str	r5, [sp, #40]	@ 0x28
 800ec28:	f899 3000 	ldrb.w	r3, [r9]
 800ec2c:	2b2f      	cmp	r3, #47	@ 0x2f
 800ec2e:	d177      	bne.n	800ed20 <_tzset_unlocked_r+0x3d4>
 800ec30:	ab0a      	add	r3, sp, #40	@ 0x28
 800ec32:	aa08      	add	r2, sp, #32
 800ec34:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ec38:	f10d 021e 	add.w	r2, sp, #30
 800ec3c:	9200      	str	r2, [sp, #0]
 800ec3e:	4648      	mov	r0, r9
 800ec40:	494f      	ldr	r1, [pc, #316]	@ (800ed80 <_tzset_unlocked_r+0x434>)
 800ec42:	9303      	str	r3, [sp, #12]
 800ec44:	aa07      	add	r2, sp, #28
 800ec46:	f002 fb29 	bl	801129c <siscanf>
 800ec4a:	42a8      	cmp	r0, r5
 800ec4c:	dc68      	bgt.n	800ed20 <_tzset_unlocked_r+0x3d4>
 800ec4e:	214a      	movs	r1, #74	@ 0x4a
 800ec50:	2200      	movs	r2, #0
 800ec52:	2300      	movs	r3, #0
 800ec54:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800ec58:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ec5c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800ec60:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800ec64:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800ec68:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800ec6c:	7221      	strb	r1, [r4, #8]
 800ec6e:	62a5      	str	r5, [r4, #40]	@ 0x28
 800ec70:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800ec74:	6525      	str	r5, [r4, #80]	@ 0x50
 800ec76:	e697      	b.n	800e9a8 <_tzset_unlocked_r+0x5c>
 800ec78:	4648      	mov	r0, r9
 800ec7a:	4a42      	ldr	r2, [pc, #264]	@ (800ed84 <_tzset_unlocked_r+0x438>)
 800ec7c:	4942      	ldr	r1, [pc, #264]	@ (800ed88 <_tzset_unlocked_r+0x43c>)
 800ec7e:	ab0a      	add	r3, sp, #40	@ 0x28
 800ec80:	f002 fb0c 	bl	801129c <siscanf>
 800ec84:	2800      	cmp	r0, #0
 800ec86:	f77f af1d 	ble.w	800eac4 <_tzset_unlocked_r+0x178>
 800ec8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec8c:	3b03      	subs	r3, #3
 800ec8e:	2b07      	cmp	r3, #7
 800ec90:	f67f af61 	bls.w	800eb56 <_tzset_unlocked_r+0x20a>
 800ec94:	e688      	b.n	800e9a8 <_tzset_unlocked_r+0x5c>
 800ec96:	2b2b      	cmp	r3, #43	@ 0x2b
 800ec98:	f04f 0901 	mov.w	r9, #1
 800ec9c:	bf08      	it	eq
 800ec9e:	3501      	addeq	r5, #1
 800eca0:	e764      	b.n	800eb6c <_tzset_unlocked_r+0x220>
 800eca2:	213c      	movs	r1, #60	@ 0x3c
 800eca4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800eca8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ecac:	fb01 3302 	mla	r3, r1, r2, r3
 800ecb0:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800ecb4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800ecb8:	fb01 3302 	mla	r3, r1, r2, r3
 800ecbc:	fb09 f303 	mul.w	r3, r9, r3
 800ecc0:	e76e      	b.n	800eba0 <_tzset_unlocked_r+0x254>
 800ecc2:	f04f 0b01 	mov.w	fp, #1
 800ecc6:	e771      	b.n	800ebac <_tzset_unlocked_r+0x260>
 800ecc8:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 800eccc:	bf0a      	itet	eq
 800ecce:	464b      	moveq	r3, r9
 800ecd0:	2344      	movne	r3, #68	@ 0x44
 800ecd2:	3501      	addeq	r5, #1
 800ecd4:	220a      	movs	r2, #10
 800ecd6:	4628      	mov	r0, r5
 800ecd8:	a90b      	add	r1, sp, #44	@ 0x2c
 800ecda:	9305      	str	r3, [sp, #20]
 800ecdc:	f002 f8ce 	bl	8010e7c <strtoul>
 800ece0:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800ece4:	9b05      	ldr	r3, [sp, #20]
 800ece6:	45a9      	cmp	r9, r5
 800ece8:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800ecec:	d114      	bne.n	800ed18 <_tzset_unlocked_r+0x3cc>
 800ecee:	234d      	movs	r3, #77	@ 0x4d
 800ecf0:	f1bb 0f00 	cmp.w	fp, #0
 800ecf4:	d107      	bne.n	800ed06 <_tzset_unlocked_r+0x3ba>
 800ecf6:	2103      	movs	r1, #3
 800ecf8:	7223      	strb	r3, [r4, #8]
 800ecfa:	2302      	movs	r3, #2
 800ecfc:	f8c4 b014 	str.w	fp, [r4, #20]
 800ed00:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800ed04:	e786      	b.n	800ec14 <_tzset_unlocked_r+0x2c8>
 800ed06:	220b      	movs	r2, #11
 800ed08:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800ed0c:	2301      	movs	r3, #1
 800ed0e:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800ed12:	2300      	movs	r3, #0
 800ed14:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800ed16:	e77d      	b.n	800ec14 <_tzset_unlocked_r+0x2c8>
 800ed18:	b280      	uxth	r0, r0
 800ed1a:	723b      	strb	r3, [r7, #8]
 800ed1c:	6178      	str	r0, [r7, #20]
 800ed1e:	e779      	b.n	800ec14 <_tzset_unlocked_r+0x2c8>
 800ed20:	213c      	movs	r1, #60	@ 0x3c
 800ed22:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800ed26:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ed2a:	3728      	adds	r7, #40	@ 0x28
 800ed2c:	fb01 3302 	mla	r3, r1, r2, r3
 800ed30:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800ed34:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800ed38:	fb01 3302 	mla	r3, r1, r2, r3
 800ed3c:	f847 3c10 	str.w	r3, [r7, #-16]
 800ed40:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800ed42:	444d      	add	r5, r9
 800ed44:	f1bb 0f00 	cmp.w	fp, #0
 800ed48:	d0bb      	beq.n	800ecc2 <_tzset_unlocked_r+0x376>
 800ed4a:	9b04      	ldr	r3, [sp, #16]
 800ed4c:	6860      	ldr	r0, [r4, #4]
 800ed4e:	6523      	str	r3, [r4, #80]	@ 0x50
 800ed50:	4b0e      	ldr	r3, [pc, #56]	@ (800ed8c <_tzset_unlocked_r+0x440>)
 800ed52:	62a6      	str	r6, [r4, #40]	@ 0x28
 800ed54:	f8c8 3000 	str.w	r3, [r8]
 800ed58:	4b0a      	ldr	r3, [pc, #40]	@ (800ed84 <_tzset_unlocked_r+0x438>)
 800ed5a:	f8c8 3004 	str.w	r3, [r8, #4]
 800ed5e:	f7ff fd3b 	bl	800e7d8 <__tzcalc_limits>
 800ed62:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ed64:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800ed66:	f8ca 2000 	str.w	r2, [sl]
 800ed6a:	1a9b      	subs	r3, r3, r2
 800ed6c:	bf18      	it	ne
 800ed6e:	2301      	movne	r3, #1
 800ed70:	4a07      	ldr	r2, [pc, #28]	@ (800ed90 <_tzset_unlocked_r+0x444>)
 800ed72:	6013      	str	r3, [r2, #0]
 800ed74:	e618      	b.n	800e9a8 <_tzset_unlocked_r+0x5c>
 800ed76:	bf00      	nop
 800ed78:	08012240 	.word	0x08012240
 800ed7c:	0801222c 	.word	0x0801222c
 800ed80:	0801223f 	.word	0x0801223f
 800ed84:	20005b68 	.word	0x20005b68
 800ed88:	0801221e 	.word	0x0801221e
 800ed8c:	20005b74 	.word	0x20005b74
 800ed90:	20005b84 	.word	0x20005b84

0800ed94 <_localeconv_r>:
 800ed94:	4800      	ldr	r0, [pc, #0]	@ (800ed98 <_localeconv_r+0x4>)
 800ed96:	4770      	bx	lr
 800ed98:	20000208 	.word	0x20000208

0800ed9c <_close_r>:
 800ed9c:	b538      	push	{r3, r4, r5, lr}
 800ed9e:	2300      	movs	r3, #0
 800eda0:	4d05      	ldr	r5, [pc, #20]	@ (800edb8 <_close_r+0x1c>)
 800eda2:	4604      	mov	r4, r0
 800eda4:	4608      	mov	r0, r1
 800eda6:	602b      	str	r3, [r5, #0]
 800eda8:	f7f5 faec 	bl	8004384 <_close>
 800edac:	1c43      	adds	r3, r0, #1
 800edae:	d102      	bne.n	800edb6 <_close_r+0x1a>
 800edb0:	682b      	ldr	r3, [r5, #0]
 800edb2:	b103      	cbz	r3, 800edb6 <_close_r+0x1a>
 800edb4:	6023      	str	r3, [r4, #0]
 800edb6:	bd38      	pop	{r3, r4, r5, pc}
 800edb8:	20005b88 	.word	0x20005b88

0800edbc <_reclaim_reent>:
 800edbc:	4b29      	ldr	r3, [pc, #164]	@ (800ee64 <_reclaim_reent+0xa8>)
 800edbe:	b570      	push	{r4, r5, r6, lr}
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	4604      	mov	r4, r0
 800edc4:	4283      	cmp	r3, r0
 800edc6:	d04b      	beq.n	800ee60 <_reclaim_reent+0xa4>
 800edc8:	69c3      	ldr	r3, [r0, #28]
 800edca:	b1ab      	cbz	r3, 800edf8 <_reclaim_reent+0x3c>
 800edcc:	68db      	ldr	r3, [r3, #12]
 800edce:	b16b      	cbz	r3, 800edec <_reclaim_reent+0x30>
 800edd0:	2500      	movs	r5, #0
 800edd2:	69e3      	ldr	r3, [r4, #28]
 800edd4:	68db      	ldr	r3, [r3, #12]
 800edd6:	5959      	ldr	r1, [r3, r5]
 800edd8:	2900      	cmp	r1, #0
 800edda:	d13b      	bne.n	800ee54 <_reclaim_reent+0x98>
 800eddc:	3504      	adds	r5, #4
 800edde:	2d80      	cmp	r5, #128	@ 0x80
 800ede0:	d1f7      	bne.n	800edd2 <_reclaim_reent+0x16>
 800ede2:	69e3      	ldr	r3, [r4, #28]
 800ede4:	4620      	mov	r0, r4
 800ede6:	68d9      	ldr	r1, [r3, #12]
 800ede8:	f000 ff5a 	bl	800fca0 <_free_r>
 800edec:	69e3      	ldr	r3, [r4, #28]
 800edee:	6819      	ldr	r1, [r3, #0]
 800edf0:	b111      	cbz	r1, 800edf8 <_reclaim_reent+0x3c>
 800edf2:	4620      	mov	r0, r4
 800edf4:	f000 ff54 	bl	800fca0 <_free_r>
 800edf8:	6961      	ldr	r1, [r4, #20]
 800edfa:	b111      	cbz	r1, 800ee02 <_reclaim_reent+0x46>
 800edfc:	4620      	mov	r0, r4
 800edfe:	f000 ff4f 	bl	800fca0 <_free_r>
 800ee02:	69e1      	ldr	r1, [r4, #28]
 800ee04:	b111      	cbz	r1, 800ee0c <_reclaim_reent+0x50>
 800ee06:	4620      	mov	r0, r4
 800ee08:	f000 ff4a 	bl	800fca0 <_free_r>
 800ee0c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ee0e:	b111      	cbz	r1, 800ee16 <_reclaim_reent+0x5a>
 800ee10:	4620      	mov	r0, r4
 800ee12:	f000 ff45 	bl	800fca0 <_free_r>
 800ee16:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ee18:	b111      	cbz	r1, 800ee20 <_reclaim_reent+0x64>
 800ee1a:	4620      	mov	r0, r4
 800ee1c:	f000 ff40 	bl	800fca0 <_free_r>
 800ee20:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ee22:	b111      	cbz	r1, 800ee2a <_reclaim_reent+0x6e>
 800ee24:	4620      	mov	r0, r4
 800ee26:	f000 ff3b 	bl	800fca0 <_free_r>
 800ee2a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ee2c:	b111      	cbz	r1, 800ee34 <_reclaim_reent+0x78>
 800ee2e:	4620      	mov	r0, r4
 800ee30:	f000 ff36 	bl	800fca0 <_free_r>
 800ee34:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ee36:	b111      	cbz	r1, 800ee3e <_reclaim_reent+0x82>
 800ee38:	4620      	mov	r0, r4
 800ee3a:	f000 ff31 	bl	800fca0 <_free_r>
 800ee3e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ee40:	b111      	cbz	r1, 800ee48 <_reclaim_reent+0x8c>
 800ee42:	4620      	mov	r0, r4
 800ee44:	f000 ff2c 	bl	800fca0 <_free_r>
 800ee48:	6a23      	ldr	r3, [r4, #32]
 800ee4a:	b14b      	cbz	r3, 800ee60 <_reclaim_reent+0xa4>
 800ee4c:	4620      	mov	r0, r4
 800ee4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee52:	4718      	bx	r3
 800ee54:	680e      	ldr	r6, [r1, #0]
 800ee56:	4620      	mov	r0, r4
 800ee58:	f000 ff22 	bl	800fca0 <_free_r>
 800ee5c:	4631      	mov	r1, r6
 800ee5e:	e7bb      	b.n	800edd8 <_reclaim_reent+0x1c>
 800ee60:	bd70      	pop	{r4, r5, r6, pc}
 800ee62:	bf00      	nop
 800ee64:	20000284 	.word	0x20000284

0800ee68 <_lseek_r>:
 800ee68:	b538      	push	{r3, r4, r5, lr}
 800ee6a:	4604      	mov	r4, r0
 800ee6c:	4608      	mov	r0, r1
 800ee6e:	4611      	mov	r1, r2
 800ee70:	2200      	movs	r2, #0
 800ee72:	4d05      	ldr	r5, [pc, #20]	@ (800ee88 <_lseek_r+0x20>)
 800ee74:	602a      	str	r2, [r5, #0]
 800ee76:	461a      	mov	r2, r3
 800ee78:	f7f5 faa8 	bl	80043cc <_lseek>
 800ee7c:	1c43      	adds	r3, r0, #1
 800ee7e:	d102      	bne.n	800ee86 <_lseek_r+0x1e>
 800ee80:	682b      	ldr	r3, [r5, #0]
 800ee82:	b103      	cbz	r3, 800ee86 <_lseek_r+0x1e>
 800ee84:	6023      	str	r3, [r4, #0]
 800ee86:	bd38      	pop	{r3, r4, r5, pc}
 800ee88:	20005b88 	.word	0x20005b88

0800ee8c <_read_r>:
 800ee8c:	b538      	push	{r3, r4, r5, lr}
 800ee8e:	4604      	mov	r4, r0
 800ee90:	4608      	mov	r0, r1
 800ee92:	4611      	mov	r1, r2
 800ee94:	2200      	movs	r2, #0
 800ee96:	4d05      	ldr	r5, [pc, #20]	@ (800eeac <_read_r+0x20>)
 800ee98:	602a      	str	r2, [r5, #0]
 800ee9a:	461a      	mov	r2, r3
 800ee9c:	f7f2 fb57 	bl	800154e <_read>
 800eea0:	1c43      	adds	r3, r0, #1
 800eea2:	d102      	bne.n	800eeaa <_read_r+0x1e>
 800eea4:	682b      	ldr	r3, [r5, #0]
 800eea6:	b103      	cbz	r3, 800eeaa <_read_r+0x1e>
 800eea8:	6023      	str	r3, [r4, #0]
 800eeaa:	bd38      	pop	{r3, r4, r5, pc}
 800eeac:	20005b88 	.word	0x20005b88

0800eeb0 <_sbrk_r>:
 800eeb0:	b538      	push	{r3, r4, r5, lr}
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	4d05      	ldr	r5, [pc, #20]	@ (800eecc <_sbrk_r+0x1c>)
 800eeb6:	4604      	mov	r4, r0
 800eeb8:	4608      	mov	r0, r1
 800eeba:	602b      	str	r3, [r5, #0]
 800eebc:	f7f5 fa92 	bl	80043e4 <_sbrk>
 800eec0:	1c43      	adds	r3, r0, #1
 800eec2:	d102      	bne.n	800eeca <_sbrk_r+0x1a>
 800eec4:	682b      	ldr	r3, [r5, #0]
 800eec6:	b103      	cbz	r3, 800eeca <_sbrk_r+0x1a>
 800eec8:	6023      	str	r3, [r4, #0]
 800eeca:	bd38      	pop	{r3, r4, r5, pc}
 800eecc:	20005b88 	.word	0x20005b88

0800eed0 <_write_r>:
 800eed0:	b538      	push	{r3, r4, r5, lr}
 800eed2:	4604      	mov	r4, r0
 800eed4:	4608      	mov	r0, r1
 800eed6:	4611      	mov	r1, r2
 800eed8:	2200      	movs	r2, #0
 800eeda:	4d05      	ldr	r5, [pc, #20]	@ (800eef0 <_write_r+0x20>)
 800eedc:	602a      	str	r2, [r5, #0]
 800eede:	461a      	mov	r2, r3
 800eee0:	f7f2 fb52 	bl	8001588 <_write>
 800eee4:	1c43      	adds	r3, r0, #1
 800eee6:	d102      	bne.n	800eeee <_write_r+0x1e>
 800eee8:	682b      	ldr	r3, [r5, #0]
 800eeea:	b103      	cbz	r3, 800eeee <_write_r+0x1e>
 800eeec:	6023      	str	r3, [r4, #0]
 800eeee:	bd38      	pop	{r3, r4, r5, pc}
 800eef0:	20005b88 	.word	0x20005b88

0800eef4 <__errno>:
 800eef4:	4b01      	ldr	r3, [pc, #4]	@ (800eefc <__errno+0x8>)
 800eef6:	6818      	ldr	r0, [r3, #0]
 800eef8:	4770      	bx	lr
 800eefa:	bf00      	nop
 800eefc:	20000284 	.word	0x20000284

0800ef00 <__libc_init_array>:
 800ef00:	b570      	push	{r4, r5, r6, lr}
 800ef02:	2600      	movs	r6, #0
 800ef04:	4d0c      	ldr	r5, [pc, #48]	@ (800ef38 <__libc_init_array+0x38>)
 800ef06:	4c0d      	ldr	r4, [pc, #52]	@ (800ef3c <__libc_init_array+0x3c>)
 800ef08:	1b64      	subs	r4, r4, r5
 800ef0a:	10a4      	asrs	r4, r4, #2
 800ef0c:	42a6      	cmp	r6, r4
 800ef0e:	d109      	bne.n	800ef24 <__libc_init_array+0x24>
 800ef10:	f002 ff32 	bl	8011d78 <_init>
 800ef14:	2600      	movs	r6, #0
 800ef16:	4d0a      	ldr	r5, [pc, #40]	@ (800ef40 <__libc_init_array+0x40>)
 800ef18:	4c0a      	ldr	r4, [pc, #40]	@ (800ef44 <__libc_init_array+0x44>)
 800ef1a:	1b64      	subs	r4, r4, r5
 800ef1c:	10a4      	asrs	r4, r4, #2
 800ef1e:	42a6      	cmp	r6, r4
 800ef20:	d105      	bne.n	800ef2e <__libc_init_array+0x2e>
 800ef22:	bd70      	pop	{r4, r5, r6, pc}
 800ef24:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef28:	4798      	blx	r3
 800ef2a:	3601      	adds	r6, #1
 800ef2c:	e7ee      	b.n	800ef0c <__libc_init_array+0xc>
 800ef2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef32:	4798      	blx	r3
 800ef34:	3601      	adds	r6, #1
 800ef36:	e7f2      	b.n	800ef1e <__libc_init_array+0x1e>
 800ef38:	08012560 	.word	0x08012560
 800ef3c:	08012560 	.word	0x08012560
 800ef40:	08012560 	.word	0x08012560
 800ef44:	08012564 	.word	0x08012564

0800ef48 <__retarget_lock_init_recursive>:
 800ef48:	4770      	bx	lr

0800ef4a <__retarget_lock_acquire>:
 800ef4a:	4770      	bx	lr

0800ef4c <__retarget_lock_acquire_recursive>:
 800ef4c:	4770      	bx	lr

0800ef4e <__retarget_lock_release>:
 800ef4e:	4770      	bx	lr

0800ef50 <__retarget_lock_release_recursive>:
 800ef50:	4770      	bx	lr

0800ef52 <strcpy>:
 800ef52:	4603      	mov	r3, r0
 800ef54:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef58:	f803 2b01 	strb.w	r2, [r3], #1
 800ef5c:	2a00      	cmp	r2, #0
 800ef5e:	d1f9      	bne.n	800ef54 <strcpy+0x2>
 800ef60:	4770      	bx	lr

0800ef62 <memchr>:
 800ef62:	4603      	mov	r3, r0
 800ef64:	b510      	push	{r4, lr}
 800ef66:	b2c9      	uxtb	r1, r1
 800ef68:	4402      	add	r2, r0
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	d101      	bne.n	800ef74 <memchr+0x12>
 800ef70:	2000      	movs	r0, #0
 800ef72:	e003      	b.n	800ef7c <memchr+0x1a>
 800ef74:	7804      	ldrb	r4, [r0, #0]
 800ef76:	3301      	adds	r3, #1
 800ef78:	428c      	cmp	r4, r1
 800ef7a:	d1f6      	bne.n	800ef6a <memchr+0x8>
 800ef7c:	bd10      	pop	{r4, pc}

0800ef7e <memcpy>:
 800ef7e:	440a      	add	r2, r1
 800ef80:	4291      	cmp	r1, r2
 800ef82:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef86:	d100      	bne.n	800ef8a <memcpy+0xc>
 800ef88:	4770      	bx	lr
 800ef8a:	b510      	push	{r4, lr}
 800ef8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef90:	4291      	cmp	r1, r2
 800ef92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef96:	d1f9      	bne.n	800ef8c <memcpy+0xe>
 800ef98:	bd10      	pop	{r4, pc}
	...

0800ef9c <nan>:
 800ef9c:	2000      	movs	r0, #0
 800ef9e:	4901      	ldr	r1, [pc, #4]	@ (800efa4 <nan+0x8>)
 800efa0:	4770      	bx	lr
 800efa2:	bf00      	nop
 800efa4:	7ff80000 	.word	0x7ff80000

0800efa8 <nanf>:
 800efa8:	4800      	ldr	r0, [pc, #0]	@ (800efac <nanf+0x4>)
 800efaa:	4770      	bx	lr
 800efac:	7fc00000 	.word	0x7fc00000

0800efb0 <__assert_func>:
 800efb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800efb2:	4614      	mov	r4, r2
 800efb4:	461a      	mov	r2, r3
 800efb6:	4b09      	ldr	r3, [pc, #36]	@ (800efdc <__assert_func+0x2c>)
 800efb8:	4605      	mov	r5, r0
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	68d8      	ldr	r0, [r3, #12]
 800efbe:	b954      	cbnz	r4, 800efd6 <__assert_func+0x26>
 800efc0:	4b07      	ldr	r3, [pc, #28]	@ (800efe0 <__assert_func+0x30>)
 800efc2:	461c      	mov	r4, r3
 800efc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800efc8:	9100      	str	r1, [sp, #0]
 800efca:	462b      	mov	r3, r5
 800efcc:	4905      	ldr	r1, [pc, #20]	@ (800efe4 <__assert_func+0x34>)
 800efce:	f002 f953 	bl	8011278 <fiprintf>
 800efd2:	f002 fa25 	bl	8011420 <abort>
 800efd6:	4b04      	ldr	r3, [pc, #16]	@ (800efe8 <__assert_func+0x38>)
 800efd8:	e7f4      	b.n	800efc4 <__assert_func+0x14>
 800efda:	bf00      	nop
 800efdc:	20000284 	.word	0x20000284
 800efe0:	08012295 	.word	0x08012295
 800efe4:	08012267 	.word	0x08012267
 800efe8:	0801225a 	.word	0x0801225a

0800efec <div>:
 800efec:	b510      	push	{r4, lr}
 800efee:	fb91 f4f2 	sdiv	r4, r1, r2
 800eff2:	fb02 1114 	mls	r1, r2, r4, r1
 800eff6:	6004      	str	r4, [r0, #0]
 800eff8:	6041      	str	r1, [r0, #4]
 800effa:	bd10      	pop	{r4, pc}

0800effc <quorem>:
 800effc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f000:	6903      	ldr	r3, [r0, #16]
 800f002:	690c      	ldr	r4, [r1, #16]
 800f004:	4607      	mov	r7, r0
 800f006:	42a3      	cmp	r3, r4
 800f008:	db7e      	blt.n	800f108 <quorem+0x10c>
 800f00a:	3c01      	subs	r4, #1
 800f00c:	00a3      	lsls	r3, r4, #2
 800f00e:	f100 0514 	add.w	r5, r0, #20
 800f012:	f101 0814 	add.w	r8, r1, #20
 800f016:	9300      	str	r3, [sp, #0]
 800f018:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f01c:	9301      	str	r3, [sp, #4]
 800f01e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f022:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f026:	3301      	adds	r3, #1
 800f028:	429a      	cmp	r2, r3
 800f02a:	fbb2 f6f3 	udiv	r6, r2, r3
 800f02e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f032:	d32e      	bcc.n	800f092 <quorem+0x96>
 800f034:	f04f 0a00 	mov.w	sl, #0
 800f038:	46c4      	mov	ip, r8
 800f03a:	46ae      	mov	lr, r5
 800f03c:	46d3      	mov	fp, sl
 800f03e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f042:	b298      	uxth	r0, r3
 800f044:	fb06 a000 	mla	r0, r6, r0, sl
 800f048:	0c1b      	lsrs	r3, r3, #16
 800f04a:	0c02      	lsrs	r2, r0, #16
 800f04c:	fb06 2303 	mla	r3, r6, r3, r2
 800f050:	f8de 2000 	ldr.w	r2, [lr]
 800f054:	b280      	uxth	r0, r0
 800f056:	b292      	uxth	r2, r2
 800f058:	1a12      	subs	r2, r2, r0
 800f05a:	445a      	add	r2, fp
 800f05c:	f8de 0000 	ldr.w	r0, [lr]
 800f060:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f064:	b29b      	uxth	r3, r3
 800f066:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f06a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f06e:	b292      	uxth	r2, r2
 800f070:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f074:	45e1      	cmp	r9, ip
 800f076:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f07a:	f84e 2b04 	str.w	r2, [lr], #4
 800f07e:	d2de      	bcs.n	800f03e <quorem+0x42>
 800f080:	9b00      	ldr	r3, [sp, #0]
 800f082:	58eb      	ldr	r3, [r5, r3]
 800f084:	b92b      	cbnz	r3, 800f092 <quorem+0x96>
 800f086:	9b01      	ldr	r3, [sp, #4]
 800f088:	3b04      	subs	r3, #4
 800f08a:	429d      	cmp	r5, r3
 800f08c:	461a      	mov	r2, r3
 800f08e:	d32f      	bcc.n	800f0f0 <quorem+0xf4>
 800f090:	613c      	str	r4, [r7, #16]
 800f092:	4638      	mov	r0, r7
 800f094:	f001 fc9e 	bl	80109d4 <__mcmp>
 800f098:	2800      	cmp	r0, #0
 800f09a:	db25      	blt.n	800f0e8 <quorem+0xec>
 800f09c:	4629      	mov	r1, r5
 800f09e:	2000      	movs	r0, #0
 800f0a0:	f858 2b04 	ldr.w	r2, [r8], #4
 800f0a4:	f8d1 c000 	ldr.w	ip, [r1]
 800f0a8:	fa1f fe82 	uxth.w	lr, r2
 800f0ac:	fa1f f38c 	uxth.w	r3, ip
 800f0b0:	eba3 030e 	sub.w	r3, r3, lr
 800f0b4:	4403      	add	r3, r0
 800f0b6:	0c12      	lsrs	r2, r2, #16
 800f0b8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f0bc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f0c0:	b29b      	uxth	r3, r3
 800f0c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f0c6:	45c1      	cmp	r9, r8
 800f0c8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f0cc:	f841 3b04 	str.w	r3, [r1], #4
 800f0d0:	d2e6      	bcs.n	800f0a0 <quorem+0xa4>
 800f0d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f0d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f0da:	b922      	cbnz	r2, 800f0e6 <quorem+0xea>
 800f0dc:	3b04      	subs	r3, #4
 800f0de:	429d      	cmp	r5, r3
 800f0e0:	461a      	mov	r2, r3
 800f0e2:	d30b      	bcc.n	800f0fc <quorem+0x100>
 800f0e4:	613c      	str	r4, [r7, #16]
 800f0e6:	3601      	adds	r6, #1
 800f0e8:	4630      	mov	r0, r6
 800f0ea:	b003      	add	sp, #12
 800f0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0f0:	6812      	ldr	r2, [r2, #0]
 800f0f2:	3b04      	subs	r3, #4
 800f0f4:	2a00      	cmp	r2, #0
 800f0f6:	d1cb      	bne.n	800f090 <quorem+0x94>
 800f0f8:	3c01      	subs	r4, #1
 800f0fa:	e7c6      	b.n	800f08a <quorem+0x8e>
 800f0fc:	6812      	ldr	r2, [r2, #0]
 800f0fe:	3b04      	subs	r3, #4
 800f100:	2a00      	cmp	r2, #0
 800f102:	d1ef      	bne.n	800f0e4 <quorem+0xe8>
 800f104:	3c01      	subs	r4, #1
 800f106:	e7ea      	b.n	800f0de <quorem+0xe2>
 800f108:	2000      	movs	r0, #0
 800f10a:	e7ee      	b.n	800f0ea <quorem+0xee>
 800f10c:	0000      	movs	r0, r0
	...

0800f110 <_dtoa_r>:
 800f110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f114:	4614      	mov	r4, r2
 800f116:	461d      	mov	r5, r3
 800f118:	69c7      	ldr	r7, [r0, #28]
 800f11a:	b097      	sub	sp, #92	@ 0x5c
 800f11c:	4683      	mov	fp, r0
 800f11e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800f122:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800f124:	b97f      	cbnz	r7, 800f146 <_dtoa_r+0x36>
 800f126:	2010      	movs	r0, #16
 800f128:	f7fd fb18 	bl	800c75c <malloc>
 800f12c:	4602      	mov	r2, r0
 800f12e:	f8cb 001c 	str.w	r0, [fp, #28]
 800f132:	b920      	cbnz	r0, 800f13e <_dtoa_r+0x2e>
 800f134:	21ef      	movs	r1, #239	@ 0xef
 800f136:	4ba8      	ldr	r3, [pc, #672]	@ (800f3d8 <_dtoa_r+0x2c8>)
 800f138:	48a8      	ldr	r0, [pc, #672]	@ (800f3dc <_dtoa_r+0x2cc>)
 800f13a:	f7ff ff39 	bl	800efb0 <__assert_func>
 800f13e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f142:	6007      	str	r7, [r0, #0]
 800f144:	60c7      	str	r7, [r0, #12]
 800f146:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f14a:	6819      	ldr	r1, [r3, #0]
 800f14c:	b159      	cbz	r1, 800f166 <_dtoa_r+0x56>
 800f14e:	685a      	ldr	r2, [r3, #4]
 800f150:	2301      	movs	r3, #1
 800f152:	4093      	lsls	r3, r2
 800f154:	604a      	str	r2, [r1, #4]
 800f156:	608b      	str	r3, [r1, #8]
 800f158:	4658      	mov	r0, fp
 800f15a:	f001 f9b9 	bl	80104d0 <_Bfree>
 800f15e:	2200      	movs	r2, #0
 800f160:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f164:	601a      	str	r2, [r3, #0]
 800f166:	1e2b      	subs	r3, r5, #0
 800f168:	bfaf      	iteee	ge
 800f16a:	2300      	movge	r3, #0
 800f16c:	2201      	movlt	r2, #1
 800f16e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f172:	9303      	strlt	r3, [sp, #12]
 800f174:	bfa8      	it	ge
 800f176:	6033      	strge	r3, [r6, #0]
 800f178:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f17c:	4b98      	ldr	r3, [pc, #608]	@ (800f3e0 <_dtoa_r+0x2d0>)
 800f17e:	bfb8      	it	lt
 800f180:	6032      	strlt	r2, [r6, #0]
 800f182:	ea33 0308 	bics.w	r3, r3, r8
 800f186:	d112      	bne.n	800f1ae <_dtoa_r+0x9e>
 800f188:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f18c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800f18e:	6013      	str	r3, [r2, #0]
 800f190:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f194:	4323      	orrs	r3, r4
 800f196:	f000 8550 	beq.w	800fc3a <_dtoa_r+0xb2a>
 800f19a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800f19c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800f3e4 <_dtoa_r+0x2d4>
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	f000 8552 	beq.w	800fc4a <_dtoa_r+0xb3a>
 800f1a6:	f10a 0303 	add.w	r3, sl, #3
 800f1aa:	f000 bd4c 	b.w	800fc46 <_dtoa_r+0xb36>
 800f1ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f1b2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f1b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	2300      	movs	r3, #0
 800f1be:	f7f1 fc6d 	bl	8000a9c <__aeabi_dcmpeq>
 800f1c2:	4607      	mov	r7, r0
 800f1c4:	b158      	cbz	r0, 800f1de <_dtoa_r+0xce>
 800f1c6:	2301      	movs	r3, #1
 800f1c8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800f1ca:	6013      	str	r3, [r2, #0]
 800f1cc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800f1ce:	b113      	cbz	r3, 800f1d6 <_dtoa_r+0xc6>
 800f1d0:	4b85      	ldr	r3, [pc, #532]	@ (800f3e8 <_dtoa_r+0x2d8>)
 800f1d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800f1d4:	6013      	str	r3, [r2, #0]
 800f1d6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800f3ec <_dtoa_r+0x2dc>
 800f1da:	f000 bd36 	b.w	800fc4a <_dtoa_r+0xb3a>
 800f1de:	ab14      	add	r3, sp, #80	@ 0x50
 800f1e0:	9301      	str	r3, [sp, #4]
 800f1e2:	ab15      	add	r3, sp, #84	@ 0x54
 800f1e4:	9300      	str	r3, [sp, #0]
 800f1e6:	4658      	mov	r0, fp
 800f1e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f1ec:	f001 fd0a 	bl	8010c04 <__d2b>
 800f1f0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800f1f4:	4681      	mov	r9, r0
 800f1f6:	2e00      	cmp	r6, #0
 800f1f8:	d077      	beq.n	800f2ea <_dtoa_r+0x1da>
 800f1fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f1fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f200:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f204:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f208:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f20c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f210:	9712      	str	r7, [sp, #72]	@ 0x48
 800f212:	4619      	mov	r1, r3
 800f214:	2200      	movs	r2, #0
 800f216:	4b76      	ldr	r3, [pc, #472]	@ (800f3f0 <_dtoa_r+0x2e0>)
 800f218:	f7f1 f820 	bl	800025c <__aeabi_dsub>
 800f21c:	a368      	add	r3, pc, #416	@ (adr r3, 800f3c0 <_dtoa_r+0x2b0>)
 800f21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f222:	f7f1 f9d3 	bl	80005cc <__aeabi_dmul>
 800f226:	a368      	add	r3, pc, #416	@ (adr r3, 800f3c8 <_dtoa_r+0x2b8>)
 800f228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f22c:	f7f1 f818 	bl	8000260 <__adddf3>
 800f230:	4604      	mov	r4, r0
 800f232:	4630      	mov	r0, r6
 800f234:	460d      	mov	r5, r1
 800f236:	f7f1 f95f 	bl	80004f8 <__aeabi_i2d>
 800f23a:	a365      	add	r3, pc, #404	@ (adr r3, 800f3d0 <_dtoa_r+0x2c0>)
 800f23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f240:	f7f1 f9c4 	bl	80005cc <__aeabi_dmul>
 800f244:	4602      	mov	r2, r0
 800f246:	460b      	mov	r3, r1
 800f248:	4620      	mov	r0, r4
 800f24a:	4629      	mov	r1, r5
 800f24c:	f7f1 f808 	bl	8000260 <__adddf3>
 800f250:	4604      	mov	r4, r0
 800f252:	460d      	mov	r5, r1
 800f254:	f7f1 fc6a 	bl	8000b2c <__aeabi_d2iz>
 800f258:	2200      	movs	r2, #0
 800f25a:	4607      	mov	r7, r0
 800f25c:	2300      	movs	r3, #0
 800f25e:	4620      	mov	r0, r4
 800f260:	4629      	mov	r1, r5
 800f262:	f7f1 fc25 	bl	8000ab0 <__aeabi_dcmplt>
 800f266:	b140      	cbz	r0, 800f27a <_dtoa_r+0x16a>
 800f268:	4638      	mov	r0, r7
 800f26a:	f7f1 f945 	bl	80004f8 <__aeabi_i2d>
 800f26e:	4622      	mov	r2, r4
 800f270:	462b      	mov	r3, r5
 800f272:	f7f1 fc13 	bl	8000a9c <__aeabi_dcmpeq>
 800f276:	b900      	cbnz	r0, 800f27a <_dtoa_r+0x16a>
 800f278:	3f01      	subs	r7, #1
 800f27a:	2f16      	cmp	r7, #22
 800f27c:	d853      	bhi.n	800f326 <_dtoa_r+0x216>
 800f27e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f282:	4b5c      	ldr	r3, [pc, #368]	@ (800f3f4 <_dtoa_r+0x2e4>)
 800f284:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f28c:	f7f1 fc10 	bl	8000ab0 <__aeabi_dcmplt>
 800f290:	2800      	cmp	r0, #0
 800f292:	d04a      	beq.n	800f32a <_dtoa_r+0x21a>
 800f294:	2300      	movs	r3, #0
 800f296:	3f01      	subs	r7, #1
 800f298:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f29a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f29c:	1b9b      	subs	r3, r3, r6
 800f29e:	1e5a      	subs	r2, r3, #1
 800f2a0:	bf46      	itte	mi
 800f2a2:	f1c3 0801 	rsbmi	r8, r3, #1
 800f2a6:	2300      	movmi	r3, #0
 800f2a8:	f04f 0800 	movpl.w	r8, #0
 800f2ac:	9209      	str	r2, [sp, #36]	@ 0x24
 800f2ae:	bf48      	it	mi
 800f2b0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800f2b2:	2f00      	cmp	r7, #0
 800f2b4:	db3b      	blt.n	800f32e <_dtoa_r+0x21e>
 800f2b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2b8:	970e      	str	r7, [sp, #56]	@ 0x38
 800f2ba:	443b      	add	r3, r7
 800f2bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2be:	2300      	movs	r3, #0
 800f2c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800f2c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f2c4:	2b09      	cmp	r3, #9
 800f2c6:	d866      	bhi.n	800f396 <_dtoa_r+0x286>
 800f2c8:	2b05      	cmp	r3, #5
 800f2ca:	bfc4      	itt	gt
 800f2cc:	3b04      	subgt	r3, #4
 800f2ce:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800f2d0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f2d2:	bfc8      	it	gt
 800f2d4:	2400      	movgt	r4, #0
 800f2d6:	f1a3 0302 	sub.w	r3, r3, #2
 800f2da:	bfd8      	it	le
 800f2dc:	2401      	movle	r4, #1
 800f2de:	2b03      	cmp	r3, #3
 800f2e0:	d864      	bhi.n	800f3ac <_dtoa_r+0x29c>
 800f2e2:	e8df f003 	tbb	[pc, r3]
 800f2e6:	382b      	.short	0x382b
 800f2e8:	5636      	.short	0x5636
 800f2ea:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800f2ee:	441e      	add	r6, r3
 800f2f0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f2f4:	2b20      	cmp	r3, #32
 800f2f6:	bfc1      	itttt	gt
 800f2f8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f2fc:	fa08 f803 	lslgt.w	r8, r8, r3
 800f300:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f304:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f308:	bfd6      	itet	le
 800f30a:	f1c3 0320 	rsble	r3, r3, #32
 800f30e:	ea48 0003 	orrgt.w	r0, r8, r3
 800f312:	fa04 f003 	lslle.w	r0, r4, r3
 800f316:	f7f1 f8df 	bl	80004d8 <__aeabi_ui2d>
 800f31a:	2201      	movs	r2, #1
 800f31c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f320:	3e01      	subs	r6, #1
 800f322:	9212      	str	r2, [sp, #72]	@ 0x48
 800f324:	e775      	b.n	800f212 <_dtoa_r+0x102>
 800f326:	2301      	movs	r3, #1
 800f328:	e7b6      	b.n	800f298 <_dtoa_r+0x188>
 800f32a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f32c:	e7b5      	b.n	800f29a <_dtoa_r+0x18a>
 800f32e:	427b      	negs	r3, r7
 800f330:	930a      	str	r3, [sp, #40]	@ 0x28
 800f332:	2300      	movs	r3, #0
 800f334:	eba8 0807 	sub.w	r8, r8, r7
 800f338:	930e      	str	r3, [sp, #56]	@ 0x38
 800f33a:	e7c2      	b.n	800f2c2 <_dtoa_r+0x1b2>
 800f33c:	2300      	movs	r3, #0
 800f33e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f340:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f342:	2b00      	cmp	r3, #0
 800f344:	dc35      	bgt.n	800f3b2 <_dtoa_r+0x2a2>
 800f346:	2301      	movs	r3, #1
 800f348:	461a      	mov	r2, r3
 800f34a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800f34e:	9221      	str	r2, [sp, #132]	@ 0x84
 800f350:	e00b      	b.n	800f36a <_dtoa_r+0x25a>
 800f352:	2301      	movs	r3, #1
 800f354:	e7f3      	b.n	800f33e <_dtoa_r+0x22e>
 800f356:	2300      	movs	r3, #0
 800f358:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f35a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f35c:	18fb      	adds	r3, r7, r3
 800f35e:	9308      	str	r3, [sp, #32]
 800f360:	3301      	adds	r3, #1
 800f362:	2b01      	cmp	r3, #1
 800f364:	9307      	str	r3, [sp, #28]
 800f366:	bfb8      	it	lt
 800f368:	2301      	movlt	r3, #1
 800f36a:	2100      	movs	r1, #0
 800f36c:	2204      	movs	r2, #4
 800f36e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f372:	f102 0514 	add.w	r5, r2, #20
 800f376:	429d      	cmp	r5, r3
 800f378:	d91f      	bls.n	800f3ba <_dtoa_r+0x2aa>
 800f37a:	6041      	str	r1, [r0, #4]
 800f37c:	4658      	mov	r0, fp
 800f37e:	f001 f867 	bl	8010450 <_Balloc>
 800f382:	4682      	mov	sl, r0
 800f384:	2800      	cmp	r0, #0
 800f386:	d139      	bne.n	800f3fc <_dtoa_r+0x2ec>
 800f388:	4602      	mov	r2, r0
 800f38a:	f240 11af 	movw	r1, #431	@ 0x1af
 800f38e:	4b1a      	ldr	r3, [pc, #104]	@ (800f3f8 <_dtoa_r+0x2e8>)
 800f390:	e6d2      	b.n	800f138 <_dtoa_r+0x28>
 800f392:	2301      	movs	r3, #1
 800f394:	e7e0      	b.n	800f358 <_dtoa_r+0x248>
 800f396:	2401      	movs	r4, #1
 800f398:	2300      	movs	r3, #0
 800f39a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f39c:	9320      	str	r3, [sp, #128]	@ 0x80
 800f39e:	f04f 33ff 	mov.w	r3, #4294967295
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800f3a8:	2312      	movs	r3, #18
 800f3aa:	e7d0      	b.n	800f34e <_dtoa_r+0x23e>
 800f3ac:	2301      	movs	r3, #1
 800f3ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f3b0:	e7f5      	b.n	800f39e <_dtoa_r+0x28e>
 800f3b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f3b4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800f3b8:	e7d7      	b.n	800f36a <_dtoa_r+0x25a>
 800f3ba:	3101      	adds	r1, #1
 800f3bc:	0052      	lsls	r2, r2, #1
 800f3be:	e7d8      	b.n	800f372 <_dtoa_r+0x262>
 800f3c0:	636f4361 	.word	0x636f4361
 800f3c4:	3fd287a7 	.word	0x3fd287a7
 800f3c8:	8b60c8b3 	.word	0x8b60c8b3
 800f3cc:	3fc68a28 	.word	0x3fc68a28
 800f3d0:	509f79fb 	.word	0x509f79fb
 800f3d4:	3fd34413 	.word	0x3fd34413
 800f3d8:	08012133 	.word	0x08012133
 800f3dc:	080122a3 	.word	0x080122a3
 800f3e0:	7ff00000 	.word	0x7ff00000
 800f3e4:	0801229f 	.word	0x0801229f
 800f3e8:	08012553 	.word	0x08012553
 800f3ec:	08012552 	.word	0x08012552
 800f3f0:	3ff80000 	.word	0x3ff80000
 800f3f4:	08012400 	.word	0x08012400
 800f3f8:	080122fb 	.word	0x080122fb
 800f3fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f400:	6018      	str	r0, [r3, #0]
 800f402:	9b07      	ldr	r3, [sp, #28]
 800f404:	2b0e      	cmp	r3, #14
 800f406:	f200 80a4 	bhi.w	800f552 <_dtoa_r+0x442>
 800f40a:	2c00      	cmp	r4, #0
 800f40c:	f000 80a1 	beq.w	800f552 <_dtoa_r+0x442>
 800f410:	2f00      	cmp	r7, #0
 800f412:	dd33      	ble.n	800f47c <_dtoa_r+0x36c>
 800f414:	4b86      	ldr	r3, [pc, #536]	@ (800f630 <_dtoa_r+0x520>)
 800f416:	f007 020f 	and.w	r2, r7, #15
 800f41a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f41e:	05f8      	lsls	r0, r7, #23
 800f420:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f424:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f428:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f42c:	d516      	bpl.n	800f45c <_dtoa_r+0x34c>
 800f42e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f432:	4b80      	ldr	r3, [pc, #512]	@ (800f634 <_dtoa_r+0x524>)
 800f434:	2603      	movs	r6, #3
 800f436:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f43a:	f7f1 f9f1 	bl	8000820 <__aeabi_ddiv>
 800f43e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f442:	f004 040f 	and.w	r4, r4, #15
 800f446:	4d7b      	ldr	r5, [pc, #492]	@ (800f634 <_dtoa_r+0x524>)
 800f448:	b954      	cbnz	r4, 800f460 <_dtoa_r+0x350>
 800f44a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f44e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f452:	f7f1 f9e5 	bl	8000820 <__aeabi_ddiv>
 800f456:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f45a:	e028      	b.n	800f4ae <_dtoa_r+0x39e>
 800f45c:	2602      	movs	r6, #2
 800f45e:	e7f2      	b.n	800f446 <_dtoa_r+0x336>
 800f460:	07e1      	lsls	r1, r4, #31
 800f462:	d508      	bpl.n	800f476 <_dtoa_r+0x366>
 800f464:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f468:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f46c:	f7f1 f8ae 	bl	80005cc <__aeabi_dmul>
 800f470:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f474:	3601      	adds	r6, #1
 800f476:	1064      	asrs	r4, r4, #1
 800f478:	3508      	adds	r5, #8
 800f47a:	e7e5      	b.n	800f448 <_dtoa_r+0x338>
 800f47c:	f000 80d2 	beq.w	800f624 <_dtoa_r+0x514>
 800f480:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f484:	427c      	negs	r4, r7
 800f486:	4b6a      	ldr	r3, [pc, #424]	@ (800f630 <_dtoa_r+0x520>)
 800f488:	f004 020f 	and.w	r2, r4, #15
 800f48c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f494:	f7f1 f89a 	bl	80005cc <__aeabi_dmul>
 800f498:	2602      	movs	r6, #2
 800f49a:	2300      	movs	r3, #0
 800f49c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4a0:	4d64      	ldr	r5, [pc, #400]	@ (800f634 <_dtoa_r+0x524>)
 800f4a2:	1124      	asrs	r4, r4, #4
 800f4a4:	2c00      	cmp	r4, #0
 800f4a6:	f040 80b2 	bne.w	800f60e <_dtoa_r+0x4fe>
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d1d3      	bne.n	800f456 <_dtoa_r+0x346>
 800f4ae:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f4b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	f000 80b7 	beq.w	800f628 <_dtoa_r+0x518>
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	4620      	mov	r0, r4
 800f4be:	4629      	mov	r1, r5
 800f4c0:	4b5d      	ldr	r3, [pc, #372]	@ (800f638 <_dtoa_r+0x528>)
 800f4c2:	f7f1 faf5 	bl	8000ab0 <__aeabi_dcmplt>
 800f4c6:	2800      	cmp	r0, #0
 800f4c8:	f000 80ae 	beq.w	800f628 <_dtoa_r+0x518>
 800f4cc:	9b07      	ldr	r3, [sp, #28]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	f000 80aa 	beq.w	800f628 <_dtoa_r+0x518>
 800f4d4:	9b08      	ldr	r3, [sp, #32]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	dd37      	ble.n	800f54a <_dtoa_r+0x43a>
 800f4da:	1e7b      	subs	r3, r7, #1
 800f4dc:	4620      	mov	r0, r4
 800f4de:	9304      	str	r3, [sp, #16]
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	4629      	mov	r1, r5
 800f4e4:	4b55      	ldr	r3, [pc, #340]	@ (800f63c <_dtoa_r+0x52c>)
 800f4e6:	f7f1 f871 	bl	80005cc <__aeabi_dmul>
 800f4ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4ee:	9c08      	ldr	r4, [sp, #32]
 800f4f0:	3601      	adds	r6, #1
 800f4f2:	4630      	mov	r0, r6
 800f4f4:	f7f1 f800 	bl	80004f8 <__aeabi_i2d>
 800f4f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f4fc:	f7f1 f866 	bl	80005cc <__aeabi_dmul>
 800f500:	2200      	movs	r2, #0
 800f502:	4b4f      	ldr	r3, [pc, #316]	@ (800f640 <_dtoa_r+0x530>)
 800f504:	f7f0 feac 	bl	8000260 <__adddf3>
 800f508:	4605      	mov	r5, r0
 800f50a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f50e:	2c00      	cmp	r4, #0
 800f510:	f040 809a 	bne.w	800f648 <_dtoa_r+0x538>
 800f514:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f518:	2200      	movs	r2, #0
 800f51a:	4b4a      	ldr	r3, [pc, #296]	@ (800f644 <_dtoa_r+0x534>)
 800f51c:	f7f0 fe9e 	bl	800025c <__aeabi_dsub>
 800f520:	4602      	mov	r2, r0
 800f522:	460b      	mov	r3, r1
 800f524:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f528:	462a      	mov	r2, r5
 800f52a:	4633      	mov	r3, r6
 800f52c:	f7f1 fade 	bl	8000aec <__aeabi_dcmpgt>
 800f530:	2800      	cmp	r0, #0
 800f532:	f040 828e 	bne.w	800fa52 <_dtoa_r+0x942>
 800f536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f53a:	462a      	mov	r2, r5
 800f53c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f540:	f7f1 fab6 	bl	8000ab0 <__aeabi_dcmplt>
 800f544:	2800      	cmp	r0, #0
 800f546:	f040 8127 	bne.w	800f798 <_dtoa_r+0x688>
 800f54a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f54e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f552:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f554:	2b00      	cmp	r3, #0
 800f556:	f2c0 8163 	blt.w	800f820 <_dtoa_r+0x710>
 800f55a:	2f0e      	cmp	r7, #14
 800f55c:	f300 8160 	bgt.w	800f820 <_dtoa_r+0x710>
 800f560:	4b33      	ldr	r3, [pc, #204]	@ (800f630 <_dtoa_r+0x520>)
 800f562:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f566:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f56a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f56e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f570:	2b00      	cmp	r3, #0
 800f572:	da03      	bge.n	800f57c <_dtoa_r+0x46c>
 800f574:	9b07      	ldr	r3, [sp, #28]
 800f576:	2b00      	cmp	r3, #0
 800f578:	f340 8100 	ble.w	800f77c <_dtoa_r+0x66c>
 800f57c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f580:	4656      	mov	r6, sl
 800f582:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f586:	4620      	mov	r0, r4
 800f588:	4629      	mov	r1, r5
 800f58a:	f7f1 f949 	bl	8000820 <__aeabi_ddiv>
 800f58e:	f7f1 facd 	bl	8000b2c <__aeabi_d2iz>
 800f592:	4680      	mov	r8, r0
 800f594:	f7f0 ffb0 	bl	80004f8 <__aeabi_i2d>
 800f598:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f59c:	f7f1 f816 	bl	80005cc <__aeabi_dmul>
 800f5a0:	4602      	mov	r2, r0
 800f5a2:	460b      	mov	r3, r1
 800f5a4:	4620      	mov	r0, r4
 800f5a6:	4629      	mov	r1, r5
 800f5a8:	f7f0 fe58 	bl	800025c <__aeabi_dsub>
 800f5ac:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f5b0:	9d07      	ldr	r5, [sp, #28]
 800f5b2:	f806 4b01 	strb.w	r4, [r6], #1
 800f5b6:	eba6 040a 	sub.w	r4, r6, sl
 800f5ba:	42a5      	cmp	r5, r4
 800f5bc:	4602      	mov	r2, r0
 800f5be:	460b      	mov	r3, r1
 800f5c0:	f040 8116 	bne.w	800f7f0 <_dtoa_r+0x6e0>
 800f5c4:	f7f0 fe4c 	bl	8000260 <__adddf3>
 800f5c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f5cc:	4604      	mov	r4, r0
 800f5ce:	460d      	mov	r5, r1
 800f5d0:	f7f1 fa8c 	bl	8000aec <__aeabi_dcmpgt>
 800f5d4:	2800      	cmp	r0, #0
 800f5d6:	f040 80f8 	bne.w	800f7ca <_dtoa_r+0x6ba>
 800f5da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f5de:	4620      	mov	r0, r4
 800f5e0:	4629      	mov	r1, r5
 800f5e2:	f7f1 fa5b 	bl	8000a9c <__aeabi_dcmpeq>
 800f5e6:	b118      	cbz	r0, 800f5f0 <_dtoa_r+0x4e0>
 800f5e8:	f018 0f01 	tst.w	r8, #1
 800f5ec:	f040 80ed 	bne.w	800f7ca <_dtoa_r+0x6ba>
 800f5f0:	4649      	mov	r1, r9
 800f5f2:	4658      	mov	r0, fp
 800f5f4:	f000 ff6c 	bl	80104d0 <_Bfree>
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	7033      	strb	r3, [r6, #0]
 800f5fc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800f5fe:	3701      	adds	r7, #1
 800f600:	601f      	str	r7, [r3, #0]
 800f602:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800f604:	2b00      	cmp	r3, #0
 800f606:	f000 8320 	beq.w	800fc4a <_dtoa_r+0xb3a>
 800f60a:	601e      	str	r6, [r3, #0]
 800f60c:	e31d      	b.n	800fc4a <_dtoa_r+0xb3a>
 800f60e:	07e2      	lsls	r2, r4, #31
 800f610:	d505      	bpl.n	800f61e <_dtoa_r+0x50e>
 800f612:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f616:	f7f0 ffd9 	bl	80005cc <__aeabi_dmul>
 800f61a:	2301      	movs	r3, #1
 800f61c:	3601      	adds	r6, #1
 800f61e:	1064      	asrs	r4, r4, #1
 800f620:	3508      	adds	r5, #8
 800f622:	e73f      	b.n	800f4a4 <_dtoa_r+0x394>
 800f624:	2602      	movs	r6, #2
 800f626:	e742      	b.n	800f4ae <_dtoa_r+0x39e>
 800f628:	9c07      	ldr	r4, [sp, #28]
 800f62a:	9704      	str	r7, [sp, #16]
 800f62c:	e761      	b.n	800f4f2 <_dtoa_r+0x3e2>
 800f62e:	bf00      	nop
 800f630:	08012400 	.word	0x08012400
 800f634:	080123d8 	.word	0x080123d8
 800f638:	3ff00000 	.word	0x3ff00000
 800f63c:	40240000 	.word	0x40240000
 800f640:	401c0000 	.word	0x401c0000
 800f644:	40140000 	.word	0x40140000
 800f648:	4b70      	ldr	r3, [pc, #448]	@ (800f80c <_dtoa_r+0x6fc>)
 800f64a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f64c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f650:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f654:	4454      	add	r4, sl
 800f656:	2900      	cmp	r1, #0
 800f658:	d045      	beq.n	800f6e6 <_dtoa_r+0x5d6>
 800f65a:	2000      	movs	r0, #0
 800f65c:	496c      	ldr	r1, [pc, #432]	@ (800f810 <_dtoa_r+0x700>)
 800f65e:	f7f1 f8df 	bl	8000820 <__aeabi_ddiv>
 800f662:	4633      	mov	r3, r6
 800f664:	462a      	mov	r2, r5
 800f666:	f7f0 fdf9 	bl	800025c <__aeabi_dsub>
 800f66a:	4656      	mov	r6, sl
 800f66c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f670:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f674:	f7f1 fa5a 	bl	8000b2c <__aeabi_d2iz>
 800f678:	4605      	mov	r5, r0
 800f67a:	f7f0 ff3d 	bl	80004f8 <__aeabi_i2d>
 800f67e:	4602      	mov	r2, r0
 800f680:	460b      	mov	r3, r1
 800f682:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f686:	f7f0 fde9 	bl	800025c <__aeabi_dsub>
 800f68a:	4602      	mov	r2, r0
 800f68c:	460b      	mov	r3, r1
 800f68e:	3530      	adds	r5, #48	@ 0x30
 800f690:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f694:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f698:	f806 5b01 	strb.w	r5, [r6], #1
 800f69c:	f7f1 fa08 	bl	8000ab0 <__aeabi_dcmplt>
 800f6a0:	2800      	cmp	r0, #0
 800f6a2:	d163      	bne.n	800f76c <_dtoa_r+0x65c>
 800f6a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f6a8:	2000      	movs	r0, #0
 800f6aa:	495a      	ldr	r1, [pc, #360]	@ (800f814 <_dtoa_r+0x704>)
 800f6ac:	f7f0 fdd6 	bl	800025c <__aeabi_dsub>
 800f6b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f6b4:	f7f1 f9fc 	bl	8000ab0 <__aeabi_dcmplt>
 800f6b8:	2800      	cmp	r0, #0
 800f6ba:	f040 8087 	bne.w	800f7cc <_dtoa_r+0x6bc>
 800f6be:	42a6      	cmp	r6, r4
 800f6c0:	f43f af43 	beq.w	800f54a <_dtoa_r+0x43a>
 800f6c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	4b53      	ldr	r3, [pc, #332]	@ (800f818 <_dtoa_r+0x708>)
 800f6cc:	f7f0 ff7e 	bl	80005cc <__aeabi_dmul>
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f6d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6da:	4b4f      	ldr	r3, [pc, #316]	@ (800f818 <_dtoa_r+0x708>)
 800f6dc:	f7f0 ff76 	bl	80005cc <__aeabi_dmul>
 800f6e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f6e4:	e7c4      	b.n	800f670 <_dtoa_r+0x560>
 800f6e6:	4631      	mov	r1, r6
 800f6e8:	4628      	mov	r0, r5
 800f6ea:	f7f0 ff6f 	bl	80005cc <__aeabi_dmul>
 800f6ee:	4656      	mov	r6, sl
 800f6f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f6f4:	9413      	str	r4, [sp, #76]	@ 0x4c
 800f6f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6fa:	f7f1 fa17 	bl	8000b2c <__aeabi_d2iz>
 800f6fe:	4605      	mov	r5, r0
 800f700:	f7f0 fefa 	bl	80004f8 <__aeabi_i2d>
 800f704:	4602      	mov	r2, r0
 800f706:	460b      	mov	r3, r1
 800f708:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f70c:	f7f0 fda6 	bl	800025c <__aeabi_dsub>
 800f710:	4602      	mov	r2, r0
 800f712:	460b      	mov	r3, r1
 800f714:	3530      	adds	r5, #48	@ 0x30
 800f716:	f806 5b01 	strb.w	r5, [r6], #1
 800f71a:	42a6      	cmp	r6, r4
 800f71c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f720:	f04f 0200 	mov.w	r2, #0
 800f724:	d124      	bne.n	800f770 <_dtoa_r+0x660>
 800f726:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f72a:	4b39      	ldr	r3, [pc, #228]	@ (800f810 <_dtoa_r+0x700>)
 800f72c:	f7f0 fd98 	bl	8000260 <__adddf3>
 800f730:	4602      	mov	r2, r0
 800f732:	460b      	mov	r3, r1
 800f734:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f738:	f7f1 f9d8 	bl	8000aec <__aeabi_dcmpgt>
 800f73c:	2800      	cmp	r0, #0
 800f73e:	d145      	bne.n	800f7cc <_dtoa_r+0x6bc>
 800f740:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f744:	2000      	movs	r0, #0
 800f746:	4932      	ldr	r1, [pc, #200]	@ (800f810 <_dtoa_r+0x700>)
 800f748:	f7f0 fd88 	bl	800025c <__aeabi_dsub>
 800f74c:	4602      	mov	r2, r0
 800f74e:	460b      	mov	r3, r1
 800f750:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f754:	f7f1 f9ac 	bl	8000ab0 <__aeabi_dcmplt>
 800f758:	2800      	cmp	r0, #0
 800f75a:	f43f aef6 	beq.w	800f54a <_dtoa_r+0x43a>
 800f75e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800f760:	1e73      	subs	r3, r6, #1
 800f762:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f764:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f768:	2b30      	cmp	r3, #48	@ 0x30
 800f76a:	d0f8      	beq.n	800f75e <_dtoa_r+0x64e>
 800f76c:	9f04      	ldr	r7, [sp, #16]
 800f76e:	e73f      	b.n	800f5f0 <_dtoa_r+0x4e0>
 800f770:	4b29      	ldr	r3, [pc, #164]	@ (800f818 <_dtoa_r+0x708>)
 800f772:	f7f0 ff2b 	bl	80005cc <__aeabi_dmul>
 800f776:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f77a:	e7bc      	b.n	800f6f6 <_dtoa_r+0x5e6>
 800f77c:	d10c      	bne.n	800f798 <_dtoa_r+0x688>
 800f77e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f782:	2200      	movs	r2, #0
 800f784:	4b25      	ldr	r3, [pc, #148]	@ (800f81c <_dtoa_r+0x70c>)
 800f786:	f7f0 ff21 	bl	80005cc <__aeabi_dmul>
 800f78a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f78e:	f7f1 f9a3 	bl	8000ad8 <__aeabi_dcmpge>
 800f792:	2800      	cmp	r0, #0
 800f794:	f000 815b 	beq.w	800fa4e <_dtoa_r+0x93e>
 800f798:	2400      	movs	r4, #0
 800f79a:	4625      	mov	r5, r4
 800f79c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f79e:	4656      	mov	r6, sl
 800f7a0:	43db      	mvns	r3, r3
 800f7a2:	9304      	str	r3, [sp, #16]
 800f7a4:	2700      	movs	r7, #0
 800f7a6:	4621      	mov	r1, r4
 800f7a8:	4658      	mov	r0, fp
 800f7aa:	f000 fe91 	bl	80104d0 <_Bfree>
 800f7ae:	2d00      	cmp	r5, #0
 800f7b0:	d0dc      	beq.n	800f76c <_dtoa_r+0x65c>
 800f7b2:	b12f      	cbz	r7, 800f7c0 <_dtoa_r+0x6b0>
 800f7b4:	42af      	cmp	r7, r5
 800f7b6:	d003      	beq.n	800f7c0 <_dtoa_r+0x6b0>
 800f7b8:	4639      	mov	r1, r7
 800f7ba:	4658      	mov	r0, fp
 800f7bc:	f000 fe88 	bl	80104d0 <_Bfree>
 800f7c0:	4629      	mov	r1, r5
 800f7c2:	4658      	mov	r0, fp
 800f7c4:	f000 fe84 	bl	80104d0 <_Bfree>
 800f7c8:	e7d0      	b.n	800f76c <_dtoa_r+0x65c>
 800f7ca:	9704      	str	r7, [sp, #16]
 800f7cc:	4633      	mov	r3, r6
 800f7ce:	461e      	mov	r6, r3
 800f7d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f7d4:	2a39      	cmp	r2, #57	@ 0x39
 800f7d6:	d107      	bne.n	800f7e8 <_dtoa_r+0x6d8>
 800f7d8:	459a      	cmp	sl, r3
 800f7da:	d1f8      	bne.n	800f7ce <_dtoa_r+0x6be>
 800f7dc:	9a04      	ldr	r2, [sp, #16]
 800f7de:	3201      	adds	r2, #1
 800f7e0:	9204      	str	r2, [sp, #16]
 800f7e2:	2230      	movs	r2, #48	@ 0x30
 800f7e4:	f88a 2000 	strb.w	r2, [sl]
 800f7e8:	781a      	ldrb	r2, [r3, #0]
 800f7ea:	3201      	adds	r2, #1
 800f7ec:	701a      	strb	r2, [r3, #0]
 800f7ee:	e7bd      	b.n	800f76c <_dtoa_r+0x65c>
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	4b09      	ldr	r3, [pc, #36]	@ (800f818 <_dtoa_r+0x708>)
 800f7f4:	f7f0 feea 	bl	80005cc <__aeabi_dmul>
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	4604      	mov	r4, r0
 800f7fe:	460d      	mov	r5, r1
 800f800:	f7f1 f94c 	bl	8000a9c <__aeabi_dcmpeq>
 800f804:	2800      	cmp	r0, #0
 800f806:	f43f aebc 	beq.w	800f582 <_dtoa_r+0x472>
 800f80a:	e6f1      	b.n	800f5f0 <_dtoa_r+0x4e0>
 800f80c:	08012400 	.word	0x08012400
 800f810:	3fe00000 	.word	0x3fe00000
 800f814:	3ff00000 	.word	0x3ff00000
 800f818:	40240000 	.word	0x40240000
 800f81c:	40140000 	.word	0x40140000
 800f820:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f822:	2a00      	cmp	r2, #0
 800f824:	f000 80db 	beq.w	800f9de <_dtoa_r+0x8ce>
 800f828:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f82a:	2a01      	cmp	r2, #1
 800f82c:	f300 80bf 	bgt.w	800f9ae <_dtoa_r+0x89e>
 800f830:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f832:	2a00      	cmp	r2, #0
 800f834:	f000 80b7 	beq.w	800f9a6 <_dtoa_r+0x896>
 800f838:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f83c:	4646      	mov	r6, r8
 800f83e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f840:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f842:	2101      	movs	r1, #1
 800f844:	441a      	add	r2, r3
 800f846:	4658      	mov	r0, fp
 800f848:	4498      	add	r8, r3
 800f84a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f84c:	f000 ff3e 	bl	80106cc <__i2b>
 800f850:	4605      	mov	r5, r0
 800f852:	b15e      	cbz	r6, 800f86c <_dtoa_r+0x75c>
 800f854:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f856:	2b00      	cmp	r3, #0
 800f858:	dd08      	ble.n	800f86c <_dtoa_r+0x75c>
 800f85a:	42b3      	cmp	r3, r6
 800f85c:	bfa8      	it	ge
 800f85e:	4633      	movge	r3, r6
 800f860:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f862:	eba8 0803 	sub.w	r8, r8, r3
 800f866:	1af6      	subs	r6, r6, r3
 800f868:	1ad3      	subs	r3, r2, r3
 800f86a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f86c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f86e:	b1f3      	cbz	r3, 800f8ae <_dtoa_r+0x79e>
 800f870:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f872:	2b00      	cmp	r3, #0
 800f874:	f000 80b7 	beq.w	800f9e6 <_dtoa_r+0x8d6>
 800f878:	b18c      	cbz	r4, 800f89e <_dtoa_r+0x78e>
 800f87a:	4629      	mov	r1, r5
 800f87c:	4622      	mov	r2, r4
 800f87e:	4658      	mov	r0, fp
 800f880:	f000 ffe2 	bl	8010848 <__pow5mult>
 800f884:	464a      	mov	r2, r9
 800f886:	4601      	mov	r1, r0
 800f888:	4605      	mov	r5, r0
 800f88a:	4658      	mov	r0, fp
 800f88c:	f000 ff34 	bl	80106f8 <__multiply>
 800f890:	4649      	mov	r1, r9
 800f892:	9004      	str	r0, [sp, #16]
 800f894:	4658      	mov	r0, fp
 800f896:	f000 fe1b 	bl	80104d0 <_Bfree>
 800f89a:	9b04      	ldr	r3, [sp, #16]
 800f89c:	4699      	mov	r9, r3
 800f89e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8a0:	1b1a      	subs	r2, r3, r4
 800f8a2:	d004      	beq.n	800f8ae <_dtoa_r+0x79e>
 800f8a4:	4649      	mov	r1, r9
 800f8a6:	4658      	mov	r0, fp
 800f8a8:	f000 ffce 	bl	8010848 <__pow5mult>
 800f8ac:	4681      	mov	r9, r0
 800f8ae:	2101      	movs	r1, #1
 800f8b0:	4658      	mov	r0, fp
 800f8b2:	f000 ff0b 	bl	80106cc <__i2b>
 800f8b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f8b8:	4604      	mov	r4, r0
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	f000 81c9 	beq.w	800fc52 <_dtoa_r+0xb42>
 800f8c0:	461a      	mov	r2, r3
 800f8c2:	4601      	mov	r1, r0
 800f8c4:	4658      	mov	r0, fp
 800f8c6:	f000 ffbf 	bl	8010848 <__pow5mult>
 800f8ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f8cc:	4604      	mov	r4, r0
 800f8ce:	2b01      	cmp	r3, #1
 800f8d0:	f300 808f 	bgt.w	800f9f2 <_dtoa_r+0x8e2>
 800f8d4:	9b02      	ldr	r3, [sp, #8]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	f040 8087 	bne.w	800f9ea <_dtoa_r+0x8da>
 800f8dc:	9b03      	ldr	r3, [sp, #12]
 800f8de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	f040 8083 	bne.w	800f9ee <_dtoa_r+0x8de>
 800f8e8:	9b03      	ldr	r3, [sp, #12]
 800f8ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f8ee:	0d1b      	lsrs	r3, r3, #20
 800f8f0:	051b      	lsls	r3, r3, #20
 800f8f2:	b12b      	cbz	r3, 800f900 <_dtoa_r+0x7f0>
 800f8f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8f6:	f108 0801 	add.w	r8, r8, #1
 800f8fa:	3301      	adds	r3, #1
 800f8fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8fe:	2301      	movs	r3, #1
 800f900:	930a      	str	r3, [sp, #40]	@ 0x28
 800f902:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f904:	2b00      	cmp	r3, #0
 800f906:	f000 81aa 	beq.w	800fc5e <_dtoa_r+0xb4e>
 800f90a:	6923      	ldr	r3, [r4, #16]
 800f90c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f910:	6918      	ldr	r0, [r3, #16]
 800f912:	f000 fe8f 	bl	8010634 <__hi0bits>
 800f916:	f1c0 0020 	rsb	r0, r0, #32
 800f91a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f91c:	4418      	add	r0, r3
 800f91e:	f010 001f 	ands.w	r0, r0, #31
 800f922:	d071      	beq.n	800fa08 <_dtoa_r+0x8f8>
 800f924:	f1c0 0320 	rsb	r3, r0, #32
 800f928:	2b04      	cmp	r3, #4
 800f92a:	dd65      	ble.n	800f9f8 <_dtoa_r+0x8e8>
 800f92c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f92e:	f1c0 001c 	rsb	r0, r0, #28
 800f932:	4403      	add	r3, r0
 800f934:	4480      	add	r8, r0
 800f936:	4406      	add	r6, r0
 800f938:	9309      	str	r3, [sp, #36]	@ 0x24
 800f93a:	f1b8 0f00 	cmp.w	r8, #0
 800f93e:	dd05      	ble.n	800f94c <_dtoa_r+0x83c>
 800f940:	4649      	mov	r1, r9
 800f942:	4642      	mov	r2, r8
 800f944:	4658      	mov	r0, fp
 800f946:	f000 ffd9 	bl	80108fc <__lshift>
 800f94a:	4681      	mov	r9, r0
 800f94c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f94e:	2b00      	cmp	r3, #0
 800f950:	dd05      	ble.n	800f95e <_dtoa_r+0x84e>
 800f952:	4621      	mov	r1, r4
 800f954:	461a      	mov	r2, r3
 800f956:	4658      	mov	r0, fp
 800f958:	f000 ffd0 	bl	80108fc <__lshift>
 800f95c:	4604      	mov	r4, r0
 800f95e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f960:	2b00      	cmp	r3, #0
 800f962:	d053      	beq.n	800fa0c <_dtoa_r+0x8fc>
 800f964:	4621      	mov	r1, r4
 800f966:	4648      	mov	r0, r9
 800f968:	f001 f834 	bl	80109d4 <__mcmp>
 800f96c:	2800      	cmp	r0, #0
 800f96e:	da4d      	bge.n	800fa0c <_dtoa_r+0x8fc>
 800f970:	1e7b      	subs	r3, r7, #1
 800f972:	4649      	mov	r1, r9
 800f974:	9304      	str	r3, [sp, #16]
 800f976:	220a      	movs	r2, #10
 800f978:	2300      	movs	r3, #0
 800f97a:	4658      	mov	r0, fp
 800f97c:	f000 fdca 	bl	8010514 <__multadd>
 800f980:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f982:	4681      	mov	r9, r0
 800f984:	2b00      	cmp	r3, #0
 800f986:	f000 816c 	beq.w	800fc62 <_dtoa_r+0xb52>
 800f98a:	2300      	movs	r3, #0
 800f98c:	4629      	mov	r1, r5
 800f98e:	220a      	movs	r2, #10
 800f990:	4658      	mov	r0, fp
 800f992:	f000 fdbf 	bl	8010514 <__multadd>
 800f996:	9b08      	ldr	r3, [sp, #32]
 800f998:	4605      	mov	r5, r0
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	dc61      	bgt.n	800fa62 <_dtoa_r+0x952>
 800f99e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f9a0:	2b02      	cmp	r3, #2
 800f9a2:	dc3b      	bgt.n	800fa1c <_dtoa_r+0x90c>
 800f9a4:	e05d      	b.n	800fa62 <_dtoa_r+0x952>
 800f9a6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f9a8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f9ac:	e746      	b.n	800f83c <_dtoa_r+0x72c>
 800f9ae:	9b07      	ldr	r3, [sp, #28]
 800f9b0:	1e5c      	subs	r4, r3, #1
 800f9b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9b4:	42a3      	cmp	r3, r4
 800f9b6:	bfbf      	itttt	lt
 800f9b8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f9ba:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800f9bc:	1ae3      	sublt	r3, r4, r3
 800f9be:	18d2      	addlt	r2, r2, r3
 800f9c0:	bfa8      	it	ge
 800f9c2:	1b1c      	subge	r4, r3, r4
 800f9c4:	9b07      	ldr	r3, [sp, #28]
 800f9c6:	bfbe      	ittt	lt
 800f9c8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f9ca:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800f9cc:	2400      	movlt	r4, #0
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	bfb5      	itete	lt
 800f9d2:	eba8 0603 	sublt.w	r6, r8, r3
 800f9d6:	4646      	movge	r6, r8
 800f9d8:	2300      	movlt	r3, #0
 800f9da:	9b07      	ldrge	r3, [sp, #28]
 800f9dc:	e730      	b.n	800f840 <_dtoa_r+0x730>
 800f9de:	4646      	mov	r6, r8
 800f9e0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f9e2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f9e4:	e735      	b.n	800f852 <_dtoa_r+0x742>
 800f9e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f9e8:	e75c      	b.n	800f8a4 <_dtoa_r+0x794>
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	e788      	b.n	800f900 <_dtoa_r+0x7f0>
 800f9ee:	9b02      	ldr	r3, [sp, #8]
 800f9f0:	e786      	b.n	800f900 <_dtoa_r+0x7f0>
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800f9f6:	e788      	b.n	800f90a <_dtoa_r+0x7fa>
 800f9f8:	d09f      	beq.n	800f93a <_dtoa_r+0x82a>
 800f9fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f9fc:	331c      	adds	r3, #28
 800f9fe:	441a      	add	r2, r3
 800fa00:	4498      	add	r8, r3
 800fa02:	441e      	add	r6, r3
 800fa04:	9209      	str	r2, [sp, #36]	@ 0x24
 800fa06:	e798      	b.n	800f93a <_dtoa_r+0x82a>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	e7f6      	b.n	800f9fa <_dtoa_r+0x8ea>
 800fa0c:	9b07      	ldr	r3, [sp, #28]
 800fa0e:	9704      	str	r7, [sp, #16]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	dc20      	bgt.n	800fa56 <_dtoa_r+0x946>
 800fa14:	9308      	str	r3, [sp, #32]
 800fa16:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800fa18:	2b02      	cmp	r3, #2
 800fa1a:	dd1e      	ble.n	800fa5a <_dtoa_r+0x94a>
 800fa1c:	9b08      	ldr	r3, [sp, #32]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	f47f aebc 	bne.w	800f79c <_dtoa_r+0x68c>
 800fa24:	4621      	mov	r1, r4
 800fa26:	2205      	movs	r2, #5
 800fa28:	4658      	mov	r0, fp
 800fa2a:	f000 fd73 	bl	8010514 <__multadd>
 800fa2e:	4601      	mov	r1, r0
 800fa30:	4604      	mov	r4, r0
 800fa32:	4648      	mov	r0, r9
 800fa34:	f000 ffce 	bl	80109d4 <__mcmp>
 800fa38:	2800      	cmp	r0, #0
 800fa3a:	f77f aeaf 	ble.w	800f79c <_dtoa_r+0x68c>
 800fa3e:	2331      	movs	r3, #49	@ 0x31
 800fa40:	4656      	mov	r6, sl
 800fa42:	f806 3b01 	strb.w	r3, [r6], #1
 800fa46:	9b04      	ldr	r3, [sp, #16]
 800fa48:	3301      	adds	r3, #1
 800fa4a:	9304      	str	r3, [sp, #16]
 800fa4c:	e6aa      	b.n	800f7a4 <_dtoa_r+0x694>
 800fa4e:	9c07      	ldr	r4, [sp, #28]
 800fa50:	9704      	str	r7, [sp, #16]
 800fa52:	4625      	mov	r5, r4
 800fa54:	e7f3      	b.n	800fa3e <_dtoa_r+0x92e>
 800fa56:	9b07      	ldr	r3, [sp, #28]
 800fa58:	9308      	str	r3, [sp, #32]
 800fa5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	f000 8104 	beq.w	800fc6a <_dtoa_r+0xb5a>
 800fa62:	2e00      	cmp	r6, #0
 800fa64:	dd05      	ble.n	800fa72 <_dtoa_r+0x962>
 800fa66:	4629      	mov	r1, r5
 800fa68:	4632      	mov	r2, r6
 800fa6a:	4658      	mov	r0, fp
 800fa6c:	f000 ff46 	bl	80108fc <__lshift>
 800fa70:	4605      	mov	r5, r0
 800fa72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d05a      	beq.n	800fb2e <_dtoa_r+0xa1e>
 800fa78:	4658      	mov	r0, fp
 800fa7a:	6869      	ldr	r1, [r5, #4]
 800fa7c:	f000 fce8 	bl	8010450 <_Balloc>
 800fa80:	4606      	mov	r6, r0
 800fa82:	b928      	cbnz	r0, 800fa90 <_dtoa_r+0x980>
 800fa84:	4602      	mov	r2, r0
 800fa86:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fa8a:	4b83      	ldr	r3, [pc, #524]	@ (800fc98 <_dtoa_r+0xb88>)
 800fa8c:	f7ff bb54 	b.w	800f138 <_dtoa_r+0x28>
 800fa90:	692a      	ldr	r2, [r5, #16]
 800fa92:	f105 010c 	add.w	r1, r5, #12
 800fa96:	3202      	adds	r2, #2
 800fa98:	0092      	lsls	r2, r2, #2
 800fa9a:	300c      	adds	r0, #12
 800fa9c:	f7ff fa6f 	bl	800ef7e <memcpy>
 800faa0:	2201      	movs	r2, #1
 800faa2:	4631      	mov	r1, r6
 800faa4:	4658      	mov	r0, fp
 800faa6:	f000 ff29 	bl	80108fc <__lshift>
 800faaa:	462f      	mov	r7, r5
 800faac:	4605      	mov	r5, r0
 800faae:	f10a 0301 	add.w	r3, sl, #1
 800fab2:	9307      	str	r3, [sp, #28]
 800fab4:	9b08      	ldr	r3, [sp, #32]
 800fab6:	4453      	add	r3, sl
 800fab8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800faba:	9b02      	ldr	r3, [sp, #8]
 800fabc:	f003 0301 	and.w	r3, r3, #1
 800fac0:	930a      	str	r3, [sp, #40]	@ 0x28
 800fac2:	9b07      	ldr	r3, [sp, #28]
 800fac4:	4621      	mov	r1, r4
 800fac6:	3b01      	subs	r3, #1
 800fac8:	4648      	mov	r0, r9
 800faca:	9302      	str	r3, [sp, #8]
 800facc:	f7ff fa96 	bl	800effc <quorem>
 800fad0:	4639      	mov	r1, r7
 800fad2:	9008      	str	r0, [sp, #32]
 800fad4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fad8:	4648      	mov	r0, r9
 800fada:	f000 ff7b 	bl	80109d4 <__mcmp>
 800fade:	462a      	mov	r2, r5
 800fae0:	9009      	str	r0, [sp, #36]	@ 0x24
 800fae2:	4621      	mov	r1, r4
 800fae4:	4658      	mov	r0, fp
 800fae6:	f000 ff91 	bl	8010a0c <__mdiff>
 800faea:	68c2      	ldr	r2, [r0, #12]
 800faec:	4606      	mov	r6, r0
 800faee:	bb02      	cbnz	r2, 800fb32 <_dtoa_r+0xa22>
 800faf0:	4601      	mov	r1, r0
 800faf2:	4648      	mov	r0, r9
 800faf4:	f000 ff6e 	bl	80109d4 <__mcmp>
 800faf8:	4602      	mov	r2, r0
 800fafa:	4631      	mov	r1, r6
 800fafc:	4658      	mov	r0, fp
 800fafe:	920c      	str	r2, [sp, #48]	@ 0x30
 800fb00:	f000 fce6 	bl	80104d0 <_Bfree>
 800fb04:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800fb06:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fb08:	9e07      	ldr	r6, [sp, #28]
 800fb0a:	ea43 0102 	orr.w	r1, r3, r2
 800fb0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb10:	4319      	orrs	r1, r3
 800fb12:	d110      	bne.n	800fb36 <_dtoa_r+0xa26>
 800fb14:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fb18:	d029      	beq.n	800fb6e <_dtoa_r+0xa5e>
 800fb1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	dd02      	ble.n	800fb26 <_dtoa_r+0xa16>
 800fb20:	9b08      	ldr	r3, [sp, #32]
 800fb22:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800fb26:	9b02      	ldr	r3, [sp, #8]
 800fb28:	f883 8000 	strb.w	r8, [r3]
 800fb2c:	e63b      	b.n	800f7a6 <_dtoa_r+0x696>
 800fb2e:	4628      	mov	r0, r5
 800fb30:	e7bb      	b.n	800faaa <_dtoa_r+0x99a>
 800fb32:	2201      	movs	r2, #1
 800fb34:	e7e1      	b.n	800fafa <_dtoa_r+0x9ea>
 800fb36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	db04      	blt.n	800fb46 <_dtoa_r+0xa36>
 800fb3c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800fb3e:	430b      	orrs	r3, r1
 800fb40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fb42:	430b      	orrs	r3, r1
 800fb44:	d120      	bne.n	800fb88 <_dtoa_r+0xa78>
 800fb46:	2a00      	cmp	r2, #0
 800fb48:	dded      	ble.n	800fb26 <_dtoa_r+0xa16>
 800fb4a:	4649      	mov	r1, r9
 800fb4c:	2201      	movs	r2, #1
 800fb4e:	4658      	mov	r0, fp
 800fb50:	f000 fed4 	bl	80108fc <__lshift>
 800fb54:	4621      	mov	r1, r4
 800fb56:	4681      	mov	r9, r0
 800fb58:	f000 ff3c 	bl	80109d4 <__mcmp>
 800fb5c:	2800      	cmp	r0, #0
 800fb5e:	dc03      	bgt.n	800fb68 <_dtoa_r+0xa58>
 800fb60:	d1e1      	bne.n	800fb26 <_dtoa_r+0xa16>
 800fb62:	f018 0f01 	tst.w	r8, #1
 800fb66:	d0de      	beq.n	800fb26 <_dtoa_r+0xa16>
 800fb68:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fb6c:	d1d8      	bne.n	800fb20 <_dtoa_r+0xa10>
 800fb6e:	2339      	movs	r3, #57	@ 0x39
 800fb70:	9a02      	ldr	r2, [sp, #8]
 800fb72:	7013      	strb	r3, [r2, #0]
 800fb74:	4633      	mov	r3, r6
 800fb76:	461e      	mov	r6, r3
 800fb78:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fb7c:	3b01      	subs	r3, #1
 800fb7e:	2a39      	cmp	r2, #57	@ 0x39
 800fb80:	d052      	beq.n	800fc28 <_dtoa_r+0xb18>
 800fb82:	3201      	adds	r2, #1
 800fb84:	701a      	strb	r2, [r3, #0]
 800fb86:	e60e      	b.n	800f7a6 <_dtoa_r+0x696>
 800fb88:	2a00      	cmp	r2, #0
 800fb8a:	dd07      	ble.n	800fb9c <_dtoa_r+0xa8c>
 800fb8c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fb90:	d0ed      	beq.n	800fb6e <_dtoa_r+0xa5e>
 800fb92:	9a02      	ldr	r2, [sp, #8]
 800fb94:	f108 0301 	add.w	r3, r8, #1
 800fb98:	7013      	strb	r3, [r2, #0]
 800fb9a:	e604      	b.n	800f7a6 <_dtoa_r+0x696>
 800fb9c:	9b07      	ldr	r3, [sp, #28]
 800fb9e:	9a07      	ldr	r2, [sp, #28]
 800fba0:	f803 8c01 	strb.w	r8, [r3, #-1]
 800fba4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fba6:	4293      	cmp	r3, r2
 800fba8:	d028      	beq.n	800fbfc <_dtoa_r+0xaec>
 800fbaa:	4649      	mov	r1, r9
 800fbac:	2300      	movs	r3, #0
 800fbae:	220a      	movs	r2, #10
 800fbb0:	4658      	mov	r0, fp
 800fbb2:	f000 fcaf 	bl	8010514 <__multadd>
 800fbb6:	42af      	cmp	r7, r5
 800fbb8:	4681      	mov	r9, r0
 800fbba:	f04f 0300 	mov.w	r3, #0
 800fbbe:	f04f 020a 	mov.w	r2, #10
 800fbc2:	4639      	mov	r1, r7
 800fbc4:	4658      	mov	r0, fp
 800fbc6:	d107      	bne.n	800fbd8 <_dtoa_r+0xac8>
 800fbc8:	f000 fca4 	bl	8010514 <__multadd>
 800fbcc:	4607      	mov	r7, r0
 800fbce:	4605      	mov	r5, r0
 800fbd0:	9b07      	ldr	r3, [sp, #28]
 800fbd2:	3301      	adds	r3, #1
 800fbd4:	9307      	str	r3, [sp, #28]
 800fbd6:	e774      	b.n	800fac2 <_dtoa_r+0x9b2>
 800fbd8:	f000 fc9c 	bl	8010514 <__multadd>
 800fbdc:	4629      	mov	r1, r5
 800fbde:	4607      	mov	r7, r0
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	220a      	movs	r2, #10
 800fbe4:	4658      	mov	r0, fp
 800fbe6:	f000 fc95 	bl	8010514 <__multadd>
 800fbea:	4605      	mov	r5, r0
 800fbec:	e7f0      	b.n	800fbd0 <_dtoa_r+0xac0>
 800fbee:	9b08      	ldr	r3, [sp, #32]
 800fbf0:	2700      	movs	r7, #0
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	bfcc      	ite	gt
 800fbf6:	461e      	movgt	r6, r3
 800fbf8:	2601      	movle	r6, #1
 800fbfa:	4456      	add	r6, sl
 800fbfc:	4649      	mov	r1, r9
 800fbfe:	2201      	movs	r2, #1
 800fc00:	4658      	mov	r0, fp
 800fc02:	f000 fe7b 	bl	80108fc <__lshift>
 800fc06:	4621      	mov	r1, r4
 800fc08:	4681      	mov	r9, r0
 800fc0a:	f000 fee3 	bl	80109d4 <__mcmp>
 800fc0e:	2800      	cmp	r0, #0
 800fc10:	dcb0      	bgt.n	800fb74 <_dtoa_r+0xa64>
 800fc12:	d102      	bne.n	800fc1a <_dtoa_r+0xb0a>
 800fc14:	f018 0f01 	tst.w	r8, #1
 800fc18:	d1ac      	bne.n	800fb74 <_dtoa_r+0xa64>
 800fc1a:	4633      	mov	r3, r6
 800fc1c:	461e      	mov	r6, r3
 800fc1e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc22:	2a30      	cmp	r2, #48	@ 0x30
 800fc24:	d0fa      	beq.n	800fc1c <_dtoa_r+0xb0c>
 800fc26:	e5be      	b.n	800f7a6 <_dtoa_r+0x696>
 800fc28:	459a      	cmp	sl, r3
 800fc2a:	d1a4      	bne.n	800fb76 <_dtoa_r+0xa66>
 800fc2c:	9b04      	ldr	r3, [sp, #16]
 800fc2e:	3301      	adds	r3, #1
 800fc30:	9304      	str	r3, [sp, #16]
 800fc32:	2331      	movs	r3, #49	@ 0x31
 800fc34:	f88a 3000 	strb.w	r3, [sl]
 800fc38:	e5b5      	b.n	800f7a6 <_dtoa_r+0x696>
 800fc3a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800fc3c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fc9c <_dtoa_r+0xb8c>
 800fc40:	b11b      	cbz	r3, 800fc4a <_dtoa_r+0xb3a>
 800fc42:	f10a 0308 	add.w	r3, sl, #8
 800fc46:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800fc48:	6013      	str	r3, [r2, #0]
 800fc4a:	4650      	mov	r0, sl
 800fc4c:	b017      	add	sp, #92	@ 0x5c
 800fc4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc52:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800fc54:	2b01      	cmp	r3, #1
 800fc56:	f77f ae3d 	ble.w	800f8d4 <_dtoa_r+0x7c4>
 800fc5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc5c:	930a      	str	r3, [sp, #40]	@ 0x28
 800fc5e:	2001      	movs	r0, #1
 800fc60:	e65b      	b.n	800f91a <_dtoa_r+0x80a>
 800fc62:	9b08      	ldr	r3, [sp, #32]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	f77f aed6 	ble.w	800fa16 <_dtoa_r+0x906>
 800fc6a:	4656      	mov	r6, sl
 800fc6c:	4621      	mov	r1, r4
 800fc6e:	4648      	mov	r0, r9
 800fc70:	f7ff f9c4 	bl	800effc <quorem>
 800fc74:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fc78:	9b08      	ldr	r3, [sp, #32]
 800fc7a:	f806 8b01 	strb.w	r8, [r6], #1
 800fc7e:	eba6 020a 	sub.w	r2, r6, sl
 800fc82:	4293      	cmp	r3, r2
 800fc84:	ddb3      	ble.n	800fbee <_dtoa_r+0xade>
 800fc86:	4649      	mov	r1, r9
 800fc88:	2300      	movs	r3, #0
 800fc8a:	220a      	movs	r2, #10
 800fc8c:	4658      	mov	r0, fp
 800fc8e:	f000 fc41 	bl	8010514 <__multadd>
 800fc92:	4681      	mov	r9, r0
 800fc94:	e7ea      	b.n	800fc6c <_dtoa_r+0xb5c>
 800fc96:	bf00      	nop
 800fc98:	080122fb 	.word	0x080122fb
 800fc9c:	08012296 	.word	0x08012296

0800fca0 <_free_r>:
 800fca0:	b538      	push	{r3, r4, r5, lr}
 800fca2:	4605      	mov	r5, r0
 800fca4:	2900      	cmp	r1, #0
 800fca6:	d040      	beq.n	800fd2a <_free_r+0x8a>
 800fca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fcac:	1f0c      	subs	r4, r1, #4
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	bfb8      	it	lt
 800fcb2:	18e4      	addlt	r4, r4, r3
 800fcb4:	f7fc fe04 	bl	800c8c0 <__malloc_lock>
 800fcb8:	4a1c      	ldr	r2, [pc, #112]	@ (800fd2c <_free_r+0x8c>)
 800fcba:	6813      	ldr	r3, [r2, #0]
 800fcbc:	b933      	cbnz	r3, 800fccc <_free_r+0x2c>
 800fcbe:	6063      	str	r3, [r4, #4]
 800fcc0:	6014      	str	r4, [r2, #0]
 800fcc2:	4628      	mov	r0, r5
 800fcc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fcc8:	f7fc be00 	b.w	800c8cc <__malloc_unlock>
 800fccc:	42a3      	cmp	r3, r4
 800fcce:	d908      	bls.n	800fce2 <_free_r+0x42>
 800fcd0:	6820      	ldr	r0, [r4, #0]
 800fcd2:	1821      	adds	r1, r4, r0
 800fcd4:	428b      	cmp	r3, r1
 800fcd6:	bf01      	itttt	eq
 800fcd8:	6819      	ldreq	r1, [r3, #0]
 800fcda:	685b      	ldreq	r3, [r3, #4]
 800fcdc:	1809      	addeq	r1, r1, r0
 800fcde:	6021      	streq	r1, [r4, #0]
 800fce0:	e7ed      	b.n	800fcbe <_free_r+0x1e>
 800fce2:	461a      	mov	r2, r3
 800fce4:	685b      	ldr	r3, [r3, #4]
 800fce6:	b10b      	cbz	r3, 800fcec <_free_r+0x4c>
 800fce8:	42a3      	cmp	r3, r4
 800fcea:	d9fa      	bls.n	800fce2 <_free_r+0x42>
 800fcec:	6811      	ldr	r1, [r2, #0]
 800fcee:	1850      	adds	r0, r2, r1
 800fcf0:	42a0      	cmp	r0, r4
 800fcf2:	d10b      	bne.n	800fd0c <_free_r+0x6c>
 800fcf4:	6820      	ldr	r0, [r4, #0]
 800fcf6:	4401      	add	r1, r0
 800fcf8:	1850      	adds	r0, r2, r1
 800fcfa:	4283      	cmp	r3, r0
 800fcfc:	6011      	str	r1, [r2, #0]
 800fcfe:	d1e0      	bne.n	800fcc2 <_free_r+0x22>
 800fd00:	6818      	ldr	r0, [r3, #0]
 800fd02:	685b      	ldr	r3, [r3, #4]
 800fd04:	4408      	add	r0, r1
 800fd06:	6010      	str	r0, [r2, #0]
 800fd08:	6053      	str	r3, [r2, #4]
 800fd0a:	e7da      	b.n	800fcc2 <_free_r+0x22>
 800fd0c:	d902      	bls.n	800fd14 <_free_r+0x74>
 800fd0e:	230c      	movs	r3, #12
 800fd10:	602b      	str	r3, [r5, #0]
 800fd12:	e7d6      	b.n	800fcc2 <_free_r+0x22>
 800fd14:	6820      	ldr	r0, [r4, #0]
 800fd16:	1821      	adds	r1, r4, r0
 800fd18:	428b      	cmp	r3, r1
 800fd1a:	bf01      	itttt	eq
 800fd1c:	6819      	ldreq	r1, [r3, #0]
 800fd1e:	685b      	ldreq	r3, [r3, #4]
 800fd20:	1809      	addeq	r1, r1, r0
 800fd22:	6021      	streq	r1, [r4, #0]
 800fd24:	6063      	str	r3, [r4, #4]
 800fd26:	6054      	str	r4, [r2, #4]
 800fd28:	e7cb      	b.n	800fcc2 <_free_r+0x22>
 800fd2a:	bd38      	pop	{r3, r4, r5, pc}
 800fd2c:	20005a24 	.word	0x20005a24

0800fd30 <rshift>:
 800fd30:	6903      	ldr	r3, [r0, #16]
 800fd32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd36:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fd3a:	f100 0414 	add.w	r4, r0, #20
 800fd3e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fd42:	dd46      	ble.n	800fdd2 <rshift+0xa2>
 800fd44:	f011 011f 	ands.w	r1, r1, #31
 800fd48:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fd4c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fd50:	d10c      	bne.n	800fd6c <rshift+0x3c>
 800fd52:	4629      	mov	r1, r5
 800fd54:	f100 0710 	add.w	r7, r0, #16
 800fd58:	42b1      	cmp	r1, r6
 800fd5a:	d335      	bcc.n	800fdc8 <rshift+0x98>
 800fd5c:	1a9b      	subs	r3, r3, r2
 800fd5e:	009b      	lsls	r3, r3, #2
 800fd60:	1eea      	subs	r2, r5, #3
 800fd62:	4296      	cmp	r6, r2
 800fd64:	bf38      	it	cc
 800fd66:	2300      	movcc	r3, #0
 800fd68:	4423      	add	r3, r4
 800fd6a:	e015      	b.n	800fd98 <rshift+0x68>
 800fd6c:	46a1      	mov	r9, r4
 800fd6e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fd72:	f1c1 0820 	rsb	r8, r1, #32
 800fd76:	40cf      	lsrs	r7, r1
 800fd78:	f105 0e04 	add.w	lr, r5, #4
 800fd7c:	4576      	cmp	r6, lr
 800fd7e:	46f4      	mov	ip, lr
 800fd80:	d816      	bhi.n	800fdb0 <rshift+0x80>
 800fd82:	1a9a      	subs	r2, r3, r2
 800fd84:	0092      	lsls	r2, r2, #2
 800fd86:	3a04      	subs	r2, #4
 800fd88:	3501      	adds	r5, #1
 800fd8a:	42ae      	cmp	r6, r5
 800fd8c:	bf38      	it	cc
 800fd8e:	2200      	movcc	r2, #0
 800fd90:	18a3      	adds	r3, r4, r2
 800fd92:	50a7      	str	r7, [r4, r2]
 800fd94:	b107      	cbz	r7, 800fd98 <rshift+0x68>
 800fd96:	3304      	adds	r3, #4
 800fd98:	42a3      	cmp	r3, r4
 800fd9a:	eba3 0204 	sub.w	r2, r3, r4
 800fd9e:	bf08      	it	eq
 800fda0:	2300      	moveq	r3, #0
 800fda2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fda6:	6102      	str	r2, [r0, #16]
 800fda8:	bf08      	it	eq
 800fdaa:	6143      	streq	r3, [r0, #20]
 800fdac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdb0:	f8dc c000 	ldr.w	ip, [ip]
 800fdb4:	fa0c fc08 	lsl.w	ip, ip, r8
 800fdb8:	ea4c 0707 	orr.w	r7, ip, r7
 800fdbc:	f849 7b04 	str.w	r7, [r9], #4
 800fdc0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fdc4:	40cf      	lsrs	r7, r1
 800fdc6:	e7d9      	b.n	800fd7c <rshift+0x4c>
 800fdc8:	f851 cb04 	ldr.w	ip, [r1], #4
 800fdcc:	f847 cf04 	str.w	ip, [r7, #4]!
 800fdd0:	e7c2      	b.n	800fd58 <rshift+0x28>
 800fdd2:	4623      	mov	r3, r4
 800fdd4:	e7e0      	b.n	800fd98 <rshift+0x68>

0800fdd6 <__hexdig_fun>:
 800fdd6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800fdda:	2b09      	cmp	r3, #9
 800fddc:	d802      	bhi.n	800fde4 <__hexdig_fun+0xe>
 800fdde:	3820      	subs	r0, #32
 800fde0:	b2c0      	uxtb	r0, r0
 800fde2:	4770      	bx	lr
 800fde4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800fde8:	2b05      	cmp	r3, #5
 800fdea:	d801      	bhi.n	800fdf0 <__hexdig_fun+0x1a>
 800fdec:	3847      	subs	r0, #71	@ 0x47
 800fdee:	e7f7      	b.n	800fde0 <__hexdig_fun+0xa>
 800fdf0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800fdf4:	2b05      	cmp	r3, #5
 800fdf6:	d801      	bhi.n	800fdfc <__hexdig_fun+0x26>
 800fdf8:	3827      	subs	r0, #39	@ 0x27
 800fdfa:	e7f1      	b.n	800fde0 <__hexdig_fun+0xa>
 800fdfc:	2000      	movs	r0, #0
 800fdfe:	4770      	bx	lr

0800fe00 <__gethex>:
 800fe00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe04:	468a      	mov	sl, r1
 800fe06:	4690      	mov	r8, r2
 800fe08:	b085      	sub	sp, #20
 800fe0a:	9302      	str	r3, [sp, #8]
 800fe0c:	680b      	ldr	r3, [r1, #0]
 800fe0e:	9001      	str	r0, [sp, #4]
 800fe10:	1c9c      	adds	r4, r3, #2
 800fe12:	46a1      	mov	r9, r4
 800fe14:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fe18:	2830      	cmp	r0, #48	@ 0x30
 800fe1a:	d0fa      	beq.n	800fe12 <__gethex+0x12>
 800fe1c:	eba9 0303 	sub.w	r3, r9, r3
 800fe20:	f1a3 0b02 	sub.w	fp, r3, #2
 800fe24:	f7ff ffd7 	bl	800fdd6 <__hexdig_fun>
 800fe28:	4605      	mov	r5, r0
 800fe2a:	2800      	cmp	r0, #0
 800fe2c:	d168      	bne.n	800ff00 <__gethex+0x100>
 800fe2e:	2201      	movs	r2, #1
 800fe30:	4648      	mov	r0, r9
 800fe32:	499f      	ldr	r1, [pc, #636]	@ (80100b0 <__gethex+0x2b0>)
 800fe34:	f7fe f9b4 	bl	800e1a0 <strncmp>
 800fe38:	4607      	mov	r7, r0
 800fe3a:	2800      	cmp	r0, #0
 800fe3c:	d167      	bne.n	800ff0e <__gethex+0x10e>
 800fe3e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fe42:	4626      	mov	r6, r4
 800fe44:	f7ff ffc7 	bl	800fdd6 <__hexdig_fun>
 800fe48:	2800      	cmp	r0, #0
 800fe4a:	d062      	beq.n	800ff12 <__gethex+0x112>
 800fe4c:	4623      	mov	r3, r4
 800fe4e:	7818      	ldrb	r0, [r3, #0]
 800fe50:	4699      	mov	r9, r3
 800fe52:	2830      	cmp	r0, #48	@ 0x30
 800fe54:	f103 0301 	add.w	r3, r3, #1
 800fe58:	d0f9      	beq.n	800fe4e <__gethex+0x4e>
 800fe5a:	f7ff ffbc 	bl	800fdd6 <__hexdig_fun>
 800fe5e:	fab0 f580 	clz	r5, r0
 800fe62:	f04f 0b01 	mov.w	fp, #1
 800fe66:	096d      	lsrs	r5, r5, #5
 800fe68:	464a      	mov	r2, r9
 800fe6a:	4616      	mov	r6, r2
 800fe6c:	7830      	ldrb	r0, [r6, #0]
 800fe6e:	3201      	adds	r2, #1
 800fe70:	f7ff ffb1 	bl	800fdd6 <__hexdig_fun>
 800fe74:	2800      	cmp	r0, #0
 800fe76:	d1f8      	bne.n	800fe6a <__gethex+0x6a>
 800fe78:	2201      	movs	r2, #1
 800fe7a:	4630      	mov	r0, r6
 800fe7c:	498c      	ldr	r1, [pc, #560]	@ (80100b0 <__gethex+0x2b0>)
 800fe7e:	f7fe f98f 	bl	800e1a0 <strncmp>
 800fe82:	2800      	cmp	r0, #0
 800fe84:	d13f      	bne.n	800ff06 <__gethex+0x106>
 800fe86:	b944      	cbnz	r4, 800fe9a <__gethex+0x9a>
 800fe88:	1c74      	adds	r4, r6, #1
 800fe8a:	4622      	mov	r2, r4
 800fe8c:	4616      	mov	r6, r2
 800fe8e:	7830      	ldrb	r0, [r6, #0]
 800fe90:	3201      	adds	r2, #1
 800fe92:	f7ff ffa0 	bl	800fdd6 <__hexdig_fun>
 800fe96:	2800      	cmp	r0, #0
 800fe98:	d1f8      	bne.n	800fe8c <__gethex+0x8c>
 800fe9a:	1ba4      	subs	r4, r4, r6
 800fe9c:	00a7      	lsls	r7, r4, #2
 800fe9e:	7833      	ldrb	r3, [r6, #0]
 800fea0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800fea4:	2b50      	cmp	r3, #80	@ 0x50
 800fea6:	d13e      	bne.n	800ff26 <__gethex+0x126>
 800fea8:	7873      	ldrb	r3, [r6, #1]
 800feaa:	2b2b      	cmp	r3, #43	@ 0x2b
 800feac:	d033      	beq.n	800ff16 <__gethex+0x116>
 800feae:	2b2d      	cmp	r3, #45	@ 0x2d
 800feb0:	d034      	beq.n	800ff1c <__gethex+0x11c>
 800feb2:	2400      	movs	r4, #0
 800feb4:	1c71      	adds	r1, r6, #1
 800feb6:	7808      	ldrb	r0, [r1, #0]
 800feb8:	f7ff ff8d 	bl	800fdd6 <__hexdig_fun>
 800febc:	1e43      	subs	r3, r0, #1
 800febe:	b2db      	uxtb	r3, r3
 800fec0:	2b18      	cmp	r3, #24
 800fec2:	d830      	bhi.n	800ff26 <__gethex+0x126>
 800fec4:	f1a0 0210 	sub.w	r2, r0, #16
 800fec8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fecc:	f7ff ff83 	bl	800fdd6 <__hexdig_fun>
 800fed0:	f100 3cff 	add.w	ip, r0, #4294967295
 800fed4:	fa5f fc8c 	uxtb.w	ip, ip
 800fed8:	f1bc 0f18 	cmp.w	ip, #24
 800fedc:	f04f 030a 	mov.w	r3, #10
 800fee0:	d91e      	bls.n	800ff20 <__gethex+0x120>
 800fee2:	b104      	cbz	r4, 800fee6 <__gethex+0xe6>
 800fee4:	4252      	negs	r2, r2
 800fee6:	4417      	add	r7, r2
 800fee8:	f8ca 1000 	str.w	r1, [sl]
 800feec:	b1ed      	cbz	r5, 800ff2a <__gethex+0x12a>
 800feee:	f1bb 0f00 	cmp.w	fp, #0
 800fef2:	bf0c      	ite	eq
 800fef4:	2506      	moveq	r5, #6
 800fef6:	2500      	movne	r5, #0
 800fef8:	4628      	mov	r0, r5
 800fefa:	b005      	add	sp, #20
 800fefc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff00:	2500      	movs	r5, #0
 800ff02:	462c      	mov	r4, r5
 800ff04:	e7b0      	b.n	800fe68 <__gethex+0x68>
 800ff06:	2c00      	cmp	r4, #0
 800ff08:	d1c7      	bne.n	800fe9a <__gethex+0x9a>
 800ff0a:	4627      	mov	r7, r4
 800ff0c:	e7c7      	b.n	800fe9e <__gethex+0x9e>
 800ff0e:	464e      	mov	r6, r9
 800ff10:	462f      	mov	r7, r5
 800ff12:	2501      	movs	r5, #1
 800ff14:	e7c3      	b.n	800fe9e <__gethex+0x9e>
 800ff16:	2400      	movs	r4, #0
 800ff18:	1cb1      	adds	r1, r6, #2
 800ff1a:	e7cc      	b.n	800feb6 <__gethex+0xb6>
 800ff1c:	2401      	movs	r4, #1
 800ff1e:	e7fb      	b.n	800ff18 <__gethex+0x118>
 800ff20:	fb03 0002 	mla	r0, r3, r2, r0
 800ff24:	e7ce      	b.n	800fec4 <__gethex+0xc4>
 800ff26:	4631      	mov	r1, r6
 800ff28:	e7de      	b.n	800fee8 <__gethex+0xe8>
 800ff2a:	4629      	mov	r1, r5
 800ff2c:	eba6 0309 	sub.w	r3, r6, r9
 800ff30:	3b01      	subs	r3, #1
 800ff32:	2b07      	cmp	r3, #7
 800ff34:	dc0a      	bgt.n	800ff4c <__gethex+0x14c>
 800ff36:	9801      	ldr	r0, [sp, #4]
 800ff38:	f000 fa8a 	bl	8010450 <_Balloc>
 800ff3c:	4604      	mov	r4, r0
 800ff3e:	b940      	cbnz	r0, 800ff52 <__gethex+0x152>
 800ff40:	4602      	mov	r2, r0
 800ff42:	21e4      	movs	r1, #228	@ 0xe4
 800ff44:	4b5b      	ldr	r3, [pc, #364]	@ (80100b4 <__gethex+0x2b4>)
 800ff46:	485c      	ldr	r0, [pc, #368]	@ (80100b8 <__gethex+0x2b8>)
 800ff48:	f7ff f832 	bl	800efb0 <__assert_func>
 800ff4c:	3101      	adds	r1, #1
 800ff4e:	105b      	asrs	r3, r3, #1
 800ff50:	e7ef      	b.n	800ff32 <__gethex+0x132>
 800ff52:	2300      	movs	r3, #0
 800ff54:	f100 0a14 	add.w	sl, r0, #20
 800ff58:	4655      	mov	r5, sl
 800ff5a:	469b      	mov	fp, r3
 800ff5c:	45b1      	cmp	r9, r6
 800ff5e:	d337      	bcc.n	800ffd0 <__gethex+0x1d0>
 800ff60:	f845 bb04 	str.w	fp, [r5], #4
 800ff64:	eba5 050a 	sub.w	r5, r5, sl
 800ff68:	10ad      	asrs	r5, r5, #2
 800ff6a:	6125      	str	r5, [r4, #16]
 800ff6c:	4658      	mov	r0, fp
 800ff6e:	f000 fb61 	bl	8010634 <__hi0bits>
 800ff72:	016d      	lsls	r5, r5, #5
 800ff74:	f8d8 6000 	ldr.w	r6, [r8]
 800ff78:	1a2d      	subs	r5, r5, r0
 800ff7a:	42b5      	cmp	r5, r6
 800ff7c:	dd54      	ble.n	8010028 <__gethex+0x228>
 800ff7e:	1bad      	subs	r5, r5, r6
 800ff80:	4629      	mov	r1, r5
 800ff82:	4620      	mov	r0, r4
 800ff84:	f000 fee9 	bl	8010d5a <__any_on>
 800ff88:	4681      	mov	r9, r0
 800ff8a:	b178      	cbz	r0, 800ffac <__gethex+0x1ac>
 800ff8c:	f04f 0901 	mov.w	r9, #1
 800ff90:	1e6b      	subs	r3, r5, #1
 800ff92:	1159      	asrs	r1, r3, #5
 800ff94:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ff98:	f003 021f 	and.w	r2, r3, #31
 800ff9c:	fa09 f202 	lsl.w	r2, r9, r2
 800ffa0:	420a      	tst	r2, r1
 800ffa2:	d003      	beq.n	800ffac <__gethex+0x1ac>
 800ffa4:	454b      	cmp	r3, r9
 800ffa6:	dc36      	bgt.n	8010016 <__gethex+0x216>
 800ffa8:	f04f 0902 	mov.w	r9, #2
 800ffac:	4629      	mov	r1, r5
 800ffae:	4620      	mov	r0, r4
 800ffb0:	f7ff febe 	bl	800fd30 <rshift>
 800ffb4:	442f      	add	r7, r5
 800ffb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ffba:	42bb      	cmp	r3, r7
 800ffbc:	da42      	bge.n	8010044 <__gethex+0x244>
 800ffbe:	4621      	mov	r1, r4
 800ffc0:	9801      	ldr	r0, [sp, #4]
 800ffc2:	f000 fa85 	bl	80104d0 <_Bfree>
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ffca:	25a3      	movs	r5, #163	@ 0xa3
 800ffcc:	6013      	str	r3, [r2, #0]
 800ffce:	e793      	b.n	800fef8 <__gethex+0xf8>
 800ffd0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ffd4:	2a2e      	cmp	r2, #46	@ 0x2e
 800ffd6:	d012      	beq.n	800fffe <__gethex+0x1fe>
 800ffd8:	2b20      	cmp	r3, #32
 800ffda:	d104      	bne.n	800ffe6 <__gethex+0x1e6>
 800ffdc:	f845 bb04 	str.w	fp, [r5], #4
 800ffe0:	f04f 0b00 	mov.w	fp, #0
 800ffe4:	465b      	mov	r3, fp
 800ffe6:	7830      	ldrb	r0, [r6, #0]
 800ffe8:	9303      	str	r3, [sp, #12]
 800ffea:	f7ff fef4 	bl	800fdd6 <__hexdig_fun>
 800ffee:	9b03      	ldr	r3, [sp, #12]
 800fff0:	f000 000f 	and.w	r0, r0, #15
 800fff4:	4098      	lsls	r0, r3
 800fff6:	ea4b 0b00 	orr.w	fp, fp, r0
 800fffa:	3304      	adds	r3, #4
 800fffc:	e7ae      	b.n	800ff5c <__gethex+0x15c>
 800fffe:	45b1      	cmp	r9, r6
 8010000:	d8ea      	bhi.n	800ffd8 <__gethex+0x1d8>
 8010002:	2201      	movs	r2, #1
 8010004:	4630      	mov	r0, r6
 8010006:	492a      	ldr	r1, [pc, #168]	@ (80100b0 <__gethex+0x2b0>)
 8010008:	9303      	str	r3, [sp, #12]
 801000a:	f7fe f8c9 	bl	800e1a0 <strncmp>
 801000e:	9b03      	ldr	r3, [sp, #12]
 8010010:	2800      	cmp	r0, #0
 8010012:	d1e1      	bne.n	800ffd8 <__gethex+0x1d8>
 8010014:	e7a2      	b.n	800ff5c <__gethex+0x15c>
 8010016:	4620      	mov	r0, r4
 8010018:	1ea9      	subs	r1, r5, #2
 801001a:	f000 fe9e 	bl	8010d5a <__any_on>
 801001e:	2800      	cmp	r0, #0
 8010020:	d0c2      	beq.n	800ffa8 <__gethex+0x1a8>
 8010022:	f04f 0903 	mov.w	r9, #3
 8010026:	e7c1      	b.n	800ffac <__gethex+0x1ac>
 8010028:	da09      	bge.n	801003e <__gethex+0x23e>
 801002a:	1b75      	subs	r5, r6, r5
 801002c:	4621      	mov	r1, r4
 801002e:	462a      	mov	r2, r5
 8010030:	9801      	ldr	r0, [sp, #4]
 8010032:	f000 fc63 	bl	80108fc <__lshift>
 8010036:	4604      	mov	r4, r0
 8010038:	1b7f      	subs	r7, r7, r5
 801003a:	f100 0a14 	add.w	sl, r0, #20
 801003e:	f04f 0900 	mov.w	r9, #0
 8010042:	e7b8      	b.n	800ffb6 <__gethex+0x1b6>
 8010044:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010048:	42bd      	cmp	r5, r7
 801004a:	dd6f      	ble.n	801012c <__gethex+0x32c>
 801004c:	1bed      	subs	r5, r5, r7
 801004e:	42ae      	cmp	r6, r5
 8010050:	dc34      	bgt.n	80100bc <__gethex+0x2bc>
 8010052:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010056:	2b02      	cmp	r3, #2
 8010058:	d022      	beq.n	80100a0 <__gethex+0x2a0>
 801005a:	2b03      	cmp	r3, #3
 801005c:	d024      	beq.n	80100a8 <__gethex+0x2a8>
 801005e:	2b01      	cmp	r3, #1
 8010060:	d115      	bne.n	801008e <__gethex+0x28e>
 8010062:	42ae      	cmp	r6, r5
 8010064:	d113      	bne.n	801008e <__gethex+0x28e>
 8010066:	2e01      	cmp	r6, #1
 8010068:	d10b      	bne.n	8010082 <__gethex+0x282>
 801006a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801006e:	9a02      	ldr	r2, [sp, #8]
 8010070:	2562      	movs	r5, #98	@ 0x62
 8010072:	6013      	str	r3, [r2, #0]
 8010074:	2301      	movs	r3, #1
 8010076:	6123      	str	r3, [r4, #16]
 8010078:	f8ca 3000 	str.w	r3, [sl]
 801007c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801007e:	601c      	str	r4, [r3, #0]
 8010080:	e73a      	b.n	800fef8 <__gethex+0xf8>
 8010082:	4620      	mov	r0, r4
 8010084:	1e71      	subs	r1, r6, #1
 8010086:	f000 fe68 	bl	8010d5a <__any_on>
 801008a:	2800      	cmp	r0, #0
 801008c:	d1ed      	bne.n	801006a <__gethex+0x26a>
 801008e:	4621      	mov	r1, r4
 8010090:	9801      	ldr	r0, [sp, #4]
 8010092:	f000 fa1d 	bl	80104d0 <_Bfree>
 8010096:	2300      	movs	r3, #0
 8010098:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801009a:	2550      	movs	r5, #80	@ 0x50
 801009c:	6013      	str	r3, [r2, #0]
 801009e:	e72b      	b.n	800fef8 <__gethex+0xf8>
 80100a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d1f3      	bne.n	801008e <__gethex+0x28e>
 80100a6:	e7e0      	b.n	801006a <__gethex+0x26a>
 80100a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d1dd      	bne.n	801006a <__gethex+0x26a>
 80100ae:	e7ee      	b.n	801008e <__gethex+0x28e>
 80100b0:	08011faa 	.word	0x08011faa
 80100b4:	080122fb 	.word	0x080122fb
 80100b8:	0801230c 	.word	0x0801230c
 80100bc:	1e6f      	subs	r7, r5, #1
 80100be:	f1b9 0f00 	cmp.w	r9, #0
 80100c2:	d130      	bne.n	8010126 <__gethex+0x326>
 80100c4:	b127      	cbz	r7, 80100d0 <__gethex+0x2d0>
 80100c6:	4639      	mov	r1, r7
 80100c8:	4620      	mov	r0, r4
 80100ca:	f000 fe46 	bl	8010d5a <__any_on>
 80100ce:	4681      	mov	r9, r0
 80100d0:	2301      	movs	r3, #1
 80100d2:	4629      	mov	r1, r5
 80100d4:	1b76      	subs	r6, r6, r5
 80100d6:	2502      	movs	r5, #2
 80100d8:	117a      	asrs	r2, r7, #5
 80100da:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80100de:	f007 071f 	and.w	r7, r7, #31
 80100e2:	40bb      	lsls	r3, r7
 80100e4:	4213      	tst	r3, r2
 80100e6:	4620      	mov	r0, r4
 80100e8:	bf18      	it	ne
 80100ea:	f049 0902 	orrne.w	r9, r9, #2
 80100ee:	f7ff fe1f 	bl	800fd30 <rshift>
 80100f2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80100f6:	f1b9 0f00 	cmp.w	r9, #0
 80100fa:	d047      	beq.n	801018c <__gethex+0x38c>
 80100fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010100:	2b02      	cmp	r3, #2
 8010102:	d015      	beq.n	8010130 <__gethex+0x330>
 8010104:	2b03      	cmp	r3, #3
 8010106:	d017      	beq.n	8010138 <__gethex+0x338>
 8010108:	2b01      	cmp	r3, #1
 801010a:	d109      	bne.n	8010120 <__gethex+0x320>
 801010c:	f019 0f02 	tst.w	r9, #2
 8010110:	d006      	beq.n	8010120 <__gethex+0x320>
 8010112:	f8da 3000 	ldr.w	r3, [sl]
 8010116:	ea49 0903 	orr.w	r9, r9, r3
 801011a:	f019 0f01 	tst.w	r9, #1
 801011e:	d10e      	bne.n	801013e <__gethex+0x33e>
 8010120:	f045 0510 	orr.w	r5, r5, #16
 8010124:	e032      	b.n	801018c <__gethex+0x38c>
 8010126:	f04f 0901 	mov.w	r9, #1
 801012a:	e7d1      	b.n	80100d0 <__gethex+0x2d0>
 801012c:	2501      	movs	r5, #1
 801012e:	e7e2      	b.n	80100f6 <__gethex+0x2f6>
 8010130:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010132:	f1c3 0301 	rsb	r3, r3, #1
 8010136:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010138:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801013a:	2b00      	cmp	r3, #0
 801013c:	d0f0      	beq.n	8010120 <__gethex+0x320>
 801013e:	f04f 0c00 	mov.w	ip, #0
 8010142:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010146:	f104 0314 	add.w	r3, r4, #20
 801014a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801014e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010152:	4618      	mov	r0, r3
 8010154:	f853 2b04 	ldr.w	r2, [r3], #4
 8010158:	f1b2 3fff 	cmp.w	r2, #4294967295
 801015c:	d01b      	beq.n	8010196 <__gethex+0x396>
 801015e:	3201      	adds	r2, #1
 8010160:	6002      	str	r2, [r0, #0]
 8010162:	2d02      	cmp	r5, #2
 8010164:	f104 0314 	add.w	r3, r4, #20
 8010168:	d13c      	bne.n	80101e4 <__gethex+0x3e4>
 801016a:	f8d8 2000 	ldr.w	r2, [r8]
 801016e:	3a01      	subs	r2, #1
 8010170:	42b2      	cmp	r2, r6
 8010172:	d109      	bne.n	8010188 <__gethex+0x388>
 8010174:	2201      	movs	r2, #1
 8010176:	1171      	asrs	r1, r6, #5
 8010178:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801017c:	f006 061f 	and.w	r6, r6, #31
 8010180:	fa02 f606 	lsl.w	r6, r2, r6
 8010184:	421e      	tst	r6, r3
 8010186:	d13a      	bne.n	80101fe <__gethex+0x3fe>
 8010188:	f045 0520 	orr.w	r5, r5, #32
 801018c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801018e:	601c      	str	r4, [r3, #0]
 8010190:	9b02      	ldr	r3, [sp, #8]
 8010192:	601f      	str	r7, [r3, #0]
 8010194:	e6b0      	b.n	800fef8 <__gethex+0xf8>
 8010196:	4299      	cmp	r1, r3
 8010198:	f843 cc04 	str.w	ip, [r3, #-4]
 801019c:	d8d9      	bhi.n	8010152 <__gethex+0x352>
 801019e:	68a3      	ldr	r3, [r4, #8]
 80101a0:	459b      	cmp	fp, r3
 80101a2:	db17      	blt.n	80101d4 <__gethex+0x3d4>
 80101a4:	6861      	ldr	r1, [r4, #4]
 80101a6:	9801      	ldr	r0, [sp, #4]
 80101a8:	3101      	adds	r1, #1
 80101aa:	f000 f951 	bl	8010450 <_Balloc>
 80101ae:	4681      	mov	r9, r0
 80101b0:	b918      	cbnz	r0, 80101ba <__gethex+0x3ba>
 80101b2:	4602      	mov	r2, r0
 80101b4:	2184      	movs	r1, #132	@ 0x84
 80101b6:	4b19      	ldr	r3, [pc, #100]	@ (801021c <__gethex+0x41c>)
 80101b8:	e6c5      	b.n	800ff46 <__gethex+0x146>
 80101ba:	6922      	ldr	r2, [r4, #16]
 80101bc:	f104 010c 	add.w	r1, r4, #12
 80101c0:	3202      	adds	r2, #2
 80101c2:	0092      	lsls	r2, r2, #2
 80101c4:	300c      	adds	r0, #12
 80101c6:	f7fe feda 	bl	800ef7e <memcpy>
 80101ca:	4621      	mov	r1, r4
 80101cc:	9801      	ldr	r0, [sp, #4]
 80101ce:	f000 f97f 	bl	80104d0 <_Bfree>
 80101d2:	464c      	mov	r4, r9
 80101d4:	6923      	ldr	r3, [r4, #16]
 80101d6:	1c5a      	adds	r2, r3, #1
 80101d8:	6122      	str	r2, [r4, #16]
 80101da:	2201      	movs	r2, #1
 80101dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80101e0:	615a      	str	r2, [r3, #20]
 80101e2:	e7be      	b.n	8010162 <__gethex+0x362>
 80101e4:	6922      	ldr	r2, [r4, #16]
 80101e6:	455a      	cmp	r2, fp
 80101e8:	dd0b      	ble.n	8010202 <__gethex+0x402>
 80101ea:	2101      	movs	r1, #1
 80101ec:	4620      	mov	r0, r4
 80101ee:	f7ff fd9f 	bl	800fd30 <rshift>
 80101f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80101f6:	3701      	adds	r7, #1
 80101f8:	42bb      	cmp	r3, r7
 80101fa:	f6ff aee0 	blt.w	800ffbe <__gethex+0x1be>
 80101fe:	2501      	movs	r5, #1
 8010200:	e7c2      	b.n	8010188 <__gethex+0x388>
 8010202:	f016 061f 	ands.w	r6, r6, #31
 8010206:	d0fa      	beq.n	80101fe <__gethex+0x3fe>
 8010208:	4453      	add	r3, sl
 801020a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801020e:	f000 fa11 	bl	8010634 <__hi0bits>
 8010212:	f1c6 0620 	rsb	r6, r6, #32
 8010216:	42b0      	cmp	r0, r6
 8010218:	dbe7      	blt.n	80101ea <__gethex+0x3ea>
 801021a:	e7f0      	b.n	80101fe <__gethex+0x3fe>
 801021c:	080122fb 	.word	0x080122fb

08010220 <L_shift>:
 8010220:	f1c2 0208 	rsb	r2, r2, #8
 8010224:	0092      	lsls	r2, r2, #2
 8010226:	b570      	push	{r4, r5, r6, lr}
 8010228:	f1c2 0620 	rsb	r6, r2, #32
 801022c:	6843      	ldr	r3, [r0, #4]
 801022e:	6804      	ldr	r4, [r0, #0]
 8010230:	fa03 f506 	lsl.w	r5, r3, r6
 8010234:	432c      	orrs	r4, r5
 8010236:	40d3      	lsrs	r3, r2
 8010238:	6004      	str	r4, [r0, #0]
 801023a:	f840 3f04 	str.w	r3, [r0, #4]!
 801023e:	4288      	cmp	r0, r1
 8010240:	d3f4      	bcc.n	801022c <L_shift+0xc>
 8010242:	bd70      	pop	{r4, r5, r6, pc}

08010244 <__match>:
 8010244:	b530      	push	{r4, r5, lr}
 8010246:	6803      	ldr	r3, [r0, #0]
 8010248:	3301      	adds	r3, #1
 801024a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801024e:	b914      	cbnz	r4, 8010256 <__match+0x12>
 8010250:	6003      	str	r3, [r0, #0]
 8010252:	2001      	movs	r0, #1
 8010254:	bd30      	pop	{r4, r5, pc}
 8010256:	f813 2b01 	ldrb.w	r2, [r3], #1
 801025a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801025e:	2d19      	cmp	r5, #25
 8010260:	bf98      	it	ls
 8010262:	3220      	addls	r2, #32
 8010264:	42a2      	cmp	r2, r4
 8010266:	d0f0      	beq.n	801024a <__match+0x6>
 8010268:	2000      	movs	r0, #0
 801026a:	e7f3      	b.n	8010254 <__match+0x10>

0801026c <__hexnan>:
 801026c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010270:	2500      	movs	r5, #0
 8010272:	680b      	ldr	r3, [r1, #0]
 8010274:	4682      	mov	sl, r0
 8010276:	115e      	asrs	r6, r3, #5
 8010278:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801027c:	f013 031f 	ands.w	r3, r3, #31
 8010280:	bf18      	it	ne
 8010282:	3604      	addne	r6, #4
 8010284:	1f37      	subs	r7, r6, #4
 8010286:	4690      	mov	r8, r2
 8010288:	46b9      	mov	r9, r7
 801028a:	463c      	mov	r4, r7
 801028c:	46ab      	mov	fp, r5
 801028e:	b087      	sub	sp, #28
 8010290:	6801      	ldr	r1, [r0, #0]
 8010292:	9301      	str	r3, [sp, #4]
 8010294:	f846 5c04 	str.w	r5, [r6, #-4]
 8010298:	9502      	str	r5, [sp, #8]
 801029a:	784a      	ldrb	r2, [r1, #1]
 801029c:	1c4b      	adds	r3, r1, #1
 801029e:	9303      	str	r3, [sp, #12]
 80102a0:	b342      	cbz	r2, 80102f4 <__hexnan+0x88>
 80102a2:	4610      	mov	r0, r2
 80102a4:	9105      	str	r1, [sp, #20]
 80102a6:	9204      	str	r2, [sp, #16]
 80102a8:	f7ff fd95 	bl	800fdd6 <__hexdig_fun>
 80102ac:	2800      	cmp	r0, #0
 80102ae:	d151      	bne.n	8010354 <__hexnan+0xe8>
 80102b0:	9a04      	ldr	r2, [sp, #16]
 80102b2:	9905      	ldr	r1, [sp, #20]
 80102b4:	2a20      	cmp	r2, #32
 80102b6:	d818      	bhi.n	80102ea <__hexnan+0x7e>
 80102b8:	9b02      	ldr	r3, [sp, #8]
 80102ba:	459b      	cmp	fp, r3
 80102bc:	dd13      	ble.n	80102e6 <__hexnan+0x7a>
 80102be:	454c      	cmp	r4, r9
 80102c0:	d206      	bcs.n	80102d0 <__hexnan+0x64>
 80102c2:	2d07      	cmp	r5, #7
 80102c4:	dc04      	bgt.n	80102d0 <__hexnan+0x64>
 80102c6:	462a      	mov	r2, r5
 80102c8:	4649      	mov	r1, r9
 80102ca:	4620      	mov	r0, r4
 80102cc:	f7ff ffa8 	bl	8010220 <L_shift>
 80102d0:	4544      	cmp	r4, r8
 80102d2:	d952      	bls.n	801037a <__hexnan+0x10e>
 80102d4:	2300      	movs	r3, #0
 80102d6:	f1a4 0904 	sub.w	r9, r4, #4
 80102da:	f844 3c04 	str.w	r3, [r4, #-4]
 80102de:	461d      	mov	r5, r3
 80102e0:	464c      	mov	r4, r9
 80102e2:	f8cd b008 	str.w	fp, [sp, #8]
 80102e6:	9903      	ldr	r1, [sp, #12]
 80102e8:	e7d7      	b.n	801029a <__hexnan+0x2e>
 80102ea:	2a29      	cmp	r2, #41	@ 0x29
 80102ec:	d157      	bne.n	801039e <__hexnan+0x132>
 80102ee:	3102      	adds	r1, #2
 80102f0:	f8ca 1000 	str.w	r1, [sl]
 80102f4:	f1bb 0f00 	cmp.w	fp, #0
 80102f8:	d051      	beq.n	801039e <__hexnan+0x132>
 80102fa:	454c      	cmp	r4, r9
 80102fc:	d206      	bcs.n	801030c <__hexnan+0xa0>
 80102fe:	2d07      	cmp	r5, #7
 8010300:	dc04      	bgt.n	801030c <__hexnan+0xa0>
 8010302:	462a      	mov	r2, r5
 8010304:	4649      	mov	r1, r9
 8010306:	4620      	mov	r0, r4
 8010308:	f7ff ff8a 	bl	8010220 <L_shift>
 801030c:	4544      	cmp	r4, r8
 801030e:	d936      	bls.n	801037e <__hexnan+0x112>
 8010310:	4623      	mov	r3, r4
 8010312:	f1a8 0204 	sub.w	r2, r8, #4
 8010316:	f853 1b04 	ldr.w	r1, [r3], #4
 801031a:	429f      	cmp	r7, r3
 801031c:	f842 1f04 	str.w	r1, [r2, #4]!
 8010320:	d2f9      	bcs.n	8010316 <__hexnan+0xaa>
 8010322:	1b3b      	subs	r3, r7, r4
 8010324:	f023 0303 	bic.w	r3, r3, #3
 8010328:	3304      	adds	r3, #4
 801032a:	3401      	adds	r4, #1
 801032c:	3e03      	subs	r6, #3
 801032e:	42b4      	cmp	r4, r6
 8010330:	bf88      	it	hi
 8010332:	2304      	movhi	r3, #4
 8010334:	2200      	movs	r2, #0
 8010336:	4443      	add	r3, r8
 8010338:	f843 2b04 	str.w	r2, [r3], #4
 801033c:	429f      	cmp	r7, r3
 801033e:	d2fb      	bcs.n	8010338 <__hexnan+0xcc>
 8010340:	683b      	ldr	r3, [r7, #0]
 8010342:	b91b      	cbnz	r3, 801034c <__hexnan+0xe0>
 8010344:	4547      	cmp	r7, r8
 8010346:	d128      	bne.n	801039a <__hexnan+0x12e>
 8010348:	2301      	movs	r3, #1
 801034a:	603b      	str	r3, [r7, #0]
 801034c:	2005      	movs	r0, #5
 801034e:	b007      	add	sp, #28
 8010350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010354:	3501      	adds	r5, #1
 8010356:	2d08      	cmp	r5, #8
 8010358:	f10b 0b01 	add.w	fp, fp, #1
 801035c:	dd06      	ble.n	801036c <__hexnan+0x100>
 801035e:	4544      	cmp	r4, r8
 8010360:	d9c1      	bls.n	80102e6 <__hexnan+0x7a>
 8010362:	2300      	movs	r3, #0
 8010364:	2501      	movs	r5, #1
 8010366:	f844 3c04 	str.w	r3, [r4, #-4]
 801036a:	3c04      	subs	r4, #4
 801036c:	6822      	ldr	r2, [r4, #0]
 801036e:	f000 000f 	and.w	r0, r0, #15
 8010372:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010376:	6020      	str	r0, [r4, #0]
 8010378:	e7b5      	b.n	80102e6 <__hexnan+0x7a>
 801037a:	2508      	movs	r5, #8
 801037c:	e7b3      	b.n	80102e6 <__hexnan+0x7a>
 801037e:	9b01      	ldr	r3, [sp, #4]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d0dd      	beq.n	8010340 <__hexnan+0xd4>
 8010384:	f04f 32ff 	mov.w	r2, #4294967295
 8010388:	f1c3 0320 	rsb	r3, r3, #32
 801038c:	40da      	lsrs	r2, r3
 801038e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010392:	4013      	ands	r3, r2
 8010394:	f846 3c04 	str.w	r3, [r6, #-4]
 8010398:	e7d2      	b.n	8010340 <__hexnan+0xd4>
 801039a:	3f04      	subs	r7, #4
 801039c:	e7d0      	b.n	8010340 <__hexnan+0xd4>
 801039e:	2004      	movs	r0, #4
 80103a0:	e7d5      	b.n	801034e <__hexnan+0xe2>
	...

080103a4 <_findenv_r>:
 80103a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103a8:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8010418 <_findenv_r+0x74>
 80103ac:	4606      	mov	r6, r0
 80103ae:	4689      	mov	r9, r1
 80103b0:	4617      	mov	r7, r2
 80103b2:	f001 f851 	bl	8011458 <__env_lock>
 80103b6:	f8da 4000 	ldr.w	r4, [sl]
 80103ba:	b134      	cbz	r4, 80103ca <_findenv_r+0x26>
 80103bc:	464b      	mov	r3, r9
 80103be:	4698      	mov	r8, r3
 80103c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103c4:	b13a      	cbz	r2, 80103d6 <_findenv_r+0x32>
 80103c6:	2a3d      	cmp	r2, #61	@ 0x3d
 80103c8:	d1f9      	bne.n	80103be <_findenv_r+0x1a>
 80103ca:	4630      	mov	r0, r6
 80103cc:	f001 f84a 	bl	8011464 <__env_unlock>
 80103d0:	2000      	movs	r0, #0
 80103d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103d6:	eba8 0809 	sub.w	r8, r8, r9
 80103da:	46a3      	mov	fp, r4
 80103dc:	f854 0b04 	ldr.w	r0, [r4], #4
 80103e0:	2800      	cmp	r0, #0
 80103e2:	d0f2      	beq.n	80103ca <_findenv_r+0x26>
 80103e4:	4642      	mov	r2, r8
 80103e6:	4649      	mov	r1, r9
 80103e8:	f7fd feda 	bl	800e1a0 <strncmp>
 80103ec:	2800      	cmp	r0, #0
 80103ee:	d1f4      	bne.n	80103da <_findenv_r+0x36>
 80103f0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80103f4:	eb03 0508 	add.w	r5, r3, r8
 80103f8:	f813 3008 	ldrb.w	r3, [r3, r8]
 80103fc:	2b3d      	cmp	r3, #61	@ 0x3d
 80103fe:	d1ec      	bne.n	80103da <_findenv_r+0x36>
 8010400:	f8da 3000 	ldr.w	r3, [sl]
 8010404:	4630      	mov	r0, r6
 8010406:	ebab 0303 	sub.w	r3, fp, r3
 801040a:	109b      	asrs	r3, r3, #2
 801040c:	603b      	str	r3, [r7, #0]
 801040e:	f001 f829 	bl	8011464 <__env_unlock>
 8010412:	1c68      	adds	r0, r5, #1
 8010414:	e7dd      	b.n	80103d2 <_findenv_r+0x2e>
 8010416:	bf00      	nop
 8010418:	200000dc 	.word	0x200000dc

0801041c <_getenv_r>:
 801041c:	b507      	push	{r0, r1, r2, lr}
 801041e:	aa01      	add	r2, sp, #4
 8010420:	f7ff ffc0 	bl	80103a4 <_findenv_r>
 8010424:	b003      	add	sp, #12
 8010426:	f85d fb04 	ldr.w	pc, [sp], #4

0801042a <__ascii_mbtowc>:
 801042a:	b082      	sub	sp, #8
 801042c:	b901      	cbnz	r1, 8010430 <__ascii_mbtowc+0x6>
 801042e:	a901      	add	r1, sp, #4
 8010430:	b142      	cbz	r2, 8010444 <__ascii_mbtowc+0x1a>
 8010432:	b14b      	cbz	r3, 8010448 <__ascii_mbtowc+0x1e>
 8010434:	7813      	ldrb	r3, [r2, #0]
 8010436:	600b      	str	r3, [r1, #0]
 8010438:	7812      	ldrb	r2, [r2, #0]
 801043a:	1e10      	subs	r0, r2, #0
 801043c:	bf18      	it	ne
 801043e:	2001      	movne	r0, #1
 8010440:	b002      	add	sp, #8
 8010442:	4770      	bx	lr
 8010444:	4610      	mov	r0, r2
 8010446:	e7fb      	b.n	8010440 <__ascii_mbtowc+0x16>
 8010448:	f06f 0001 	mvn.w	r0, #1
 801044c:	e7f8      	b.n	8010440 <__ascii_mbtowc+0x16>
	...

08010450 <_Balloc>:
 8010450:	b570      	push	{r4, r5, r6, lr}
 8010452:	69c6      	ldr	r6, [r0, #28]
 8010454:	4604      	mov	r4, r0
 8010456:	460d      	mov	r5, r1
 8010458:	b976      	cbnz	r6, 8010478 <_Balloc+0x28>
 801045a:	2010      	movs	r0, #16
 801045c:	f7fc f97e 	bl	800c75c <malloc>
 8010460:	4602      	mov	r2, r0
 8010462:	61e0      	str	r0, [r4, #28]
 8010464:	b920      	cbnz	r0, 8010470 <_Balloc+0x20>
 8010466:	216b      	movs	r1, #107	@ 0x6b
 8010468:	4b17      	ldr	r3, [pc, #92]	@ (80104c8 <_Balloc+0x78>)
 801046a:	4818      	ldr	r0, [pc, #96]	@ (80104cc <_Balloc+0x7c>)
 801046c:	f7fe fda0 	bl	800efb0 <__assert_func>
 8010470:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010474:	6006      	str	r6, [r0, #0]
 8010476:	60c6      	str	r6, [r0, #12]
 8010478:	69e6      	ldr	r6, [r4, #28]
 801047a:	68f3      	ldr	r3, [r6, #12]
 801047c:	b183      	cbz	r3, 80104a0 <_Balloc+0x50>
 801047e:	69e3      	ldr	r3, [r4, #28]
 8010480:	68db      	ldr	r3, [r3, #12]
 8010482:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010486:	b9b8      	cbnz	r0, 80104b8 <_Balloc+0x68>
 8010488:	2101      	movs	r1, #1
 801048a:	fa01 f605 	lsl.w	r6, r1, r5
 801048e:	1d72      	adds	r2, r6, #5
 8010490:	4620      	mov	r0, r4
 8010492:	0092      	lsls	r2, r2, #2
 8010494:	f000 ffcb 	bl	801142e <_calloc_r>
 8010498:	b160      	cbz	r0, 80104b4 <_Balloc+0x64>
 801049a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801049e:	e00e      	b.n	80104be <_Balloc+0x6e>
 80104a0:	2221      	movs	r2, #33	@ 0x21
 80104a2:	2104      	movs	r1, #4
 80104a4:	4620      	mov	r0, r4
 80104a6:	f000 ffc2 	bl	801142e <_calloc_r>
 80104aa:	69e3      	ldr	r3, [r4, #28]
 80104ac:	60f0      	str	r0, [r6, #12]
 80104ae:	68db      	ldr	r3, [r3, #12]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d1e4      	bne.n	801047e <_Balloc+0x2e>
 80104b4:	2000      	movs	r0, #0
 80104b6:	bd70      	pop	{r4, r5, r6, pc}
 80104b8:	6802      	ldr	r2, [r0, #0]
 80104ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80104be:	2300      	movs	r3, #0
 80104c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80104c4:	e7f7      	b.n	80104b6 <_Balloc+0x66>
 80104c6:	bf00      	nop
 80104c8:	08012133 	.word	0x08012133
 80104cc:	0801236c 	.word	0x0801236c

080104d0 <_Bfree>:
 80104d0:	b570      	push	{r4, r5, r6, lr}
 80104d2:	69c6      	ldr	r6, [r0, #28]
 80104d4:	4605      	mov	r5, r0
 80104d6:	460c      	mov	r4, r1
 80104d8:	b976      	cbnz	r6, 80104f8 <_Bfree+0x28>
 80104da:	2010      	movs	r0, #16
 80104dc:	f7fc f93e 	bl	800c75c <malloc>
 80104e0:	4602      	mov	r2, r0
 80104e2:	61e8      	str	r0, [r5, #28]
 80104e4:	b920      	cbnz	r0, 80104f0 <_Bfree+0x20>
 80104e6:	218f      	movs	r1, #143	@ 0x8f
 80104e8:	4b08      	ldr	r3, [pc, #32]	@ (801050c <_Bfree+0x3c>)
 80104ea:	4809      	ldr	r0, [pc, #36]	@ (8010510 <_Bfree+0x40>)
 80104ec:	f7fe fd60 	bl	800efb0 <__assert_func>
 80104f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80104f4:	6006      	str	r6, [r0, #0]
 80104f6:	60c6      	str	r6, [r0, #12]
 80104f8:	b13c      	cbz	r4, 801050a <_Bfree+0x3a>
 80104fa:	69eb      	ldr	r3, [r5, #28]
 80104fc:	6862      	ldr	r2, [r4, #4]
 80104fe:	68db      	ldr	r3, [r3, #12]
 8010500:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010504:	6021      	str	r1, [r4, #0]
 8010506:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801050a:	bd70      	pop	{r4, r5, r6, pc}
 801050c:	08012133 	.word	0x08012133
 8010510:	0801236c 	.word	0x0801236c

08010514 <__multadd>:
 8010514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010518:	4607      	mov	r7, r0
 801051a:	460c      	mov	r4, r1
 801051c:	461e      	mov	r6, r3
 801051e:	2000      	movs	r0, #0
 8010520:	690d      	ldr	r5, [r1, #16]
 8010522:	f101 0c14 	add.w	ip, r1, #20
 8010526:	f8dc 3000 	ldr.w	r3, [ip]
 801052a:	3001      	adds	r0, #1
 801052c:	b299      	uxth	r1, r3
 801052e:	fb02 6101 	mla	r1, r2, r1, r6
 8010532:	0c1e      	lsrs	r6, r3, #16
 8010534:	0c0b      	lsrs	r3, r1, #16
 8010536:	fb02 3306 	mla	r3, r2, r6, r3
 801053a:	b289      	uxth	r1, r1
 801053c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010540:	4285      	cmp	r5, r0
 8010542:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010546:	f84c 1b04 	str.w	r1, [ip], #4
 801054a:	dcec      	bgt.n	8010526 <__multadd+0x12>
 801054c:	b30e      	cbz	r6, 8010592 <__multadd+0x7e>
 801054e:	68a3      	ldr	r3, [r4, #8]
 8010550:	42ab      	cmp	r3, r5
 8010552:	dc19      	bgt.n	8010588 <__multadd+0x74>
 8010554:	6861      	ldr	r1, [r4, #4]
 8010556:	4638      	mov	r0, r7
 8010558:	3101      	adds	r1, #1
 801055a:	f7ff ff79 	bl	8010450 <_Balloc>
 801055e:	4680      	mov	r8, r0
 8010560:	b928      	cbnz	r0, 801056e <__multadd+0x5a>
 8010562:	4602      	mov	r2, r0
 8010564:	21ba      	movs	r1, #186	@ 0xba
 8010566:	4b0c      	ldr	r3, [pc, #48]	@ (8010598 <__multadd+0x84>)
 8010568:	480c      	ldr	r0, [pc, #48]	@ (801059c <__multadd+0x88>)
 801056a:	f7fe fd21 	bl	800efb0 <__assert_func>
 801056e:	6922      	ldr	r2, [r4, #16]
 8010570:	f104 010c 	add.w	r1, r4, #12
 8010574:	3202      	adds	r2, #2
 8010576:	0092      	lsls	r2, r2, #2
 8010578:	300c      	adds	r0, #12
 801057a:	f7fe fd00 	bl	800ef7e <memcpy>
 801057e:	4621      	mov	r1, r4
 8010580:	4638      	mov	r0, r7
 8010582:	f7ff ffa5 	bl	80104d0 <_Bfree>
 8010586:	4644      	mov	r4, r8
 8010588:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801058c:	3501      	adds	r5, #1
 801058e:	615e      	str	r6, [r3, #20]
 8010590:	6125      	str	r5, [r4, #16]
 8010592:	4620      	mov	r0, r4
 8010594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010598:	080122fb 	.word	0x080122fb
 801059c:	0801236c 	.word	0x0801236c

080105a0 <__s2b>:
 80105a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105a4:	4615      	mov	r5, r2
 80105a6:	2209      	movs	r2, #9
 80105a8:	461f      	mov	r7, r3
 80105aa:	3308      	adds	r3, #8
 80105ac:	460c      	mov	r4, r1
 80105ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80105b2:	4606      	mov	r6, r0
 80105b4:	2201      	movs	r2, #1
 80105b6:	2100      	movs	r1, #0
 80105b8:	429a      	cmp	r2, r3
 80105ba:	db09      	blt.n	80105d0 <__s2b+0x30>
 80105bc:	4630      	mov	r0, r6
 80105be:	f7ff ff47 	bl	8010450 <_Balloc>
 80105c2:	b940      	cbnz	r0, 80105d6 <__s2b+0x36>
 80105c4:	4602      	mov	r2, r0
 80105c6:	21d3      	movs	r1, #211	@ 0xd3
 80105c8:	4b18      	ldr	r3, [pc, #96]	@ (801062c <__s2b+0x8c>)
 80105ca:	4819      	ldr	r0, [pc, #100]	@ (8010630 <__s2b+0x90>)
 80105cc:	f7fe fcf0 	bl	800efb0 <__assert_func>
 80105d0:	0052      	lsls	r2, r2, #1
 80105d2:	3101      	adds	r1, #1
 80105d4:	e7f0      	b.n	80105b8 <__s2b+0x18>
 80105d6:	9b08      	ldr	r3, [sp, #32]
 80105d8:	2d09      	cmp	r5, #9
 80105da:	6143      	str	r3, [r0, #20]
 80105dc:	f04f 0301 	mov.w	r3, #1
 80105e0:	6103      	str	r3, [r0, #16]
 80105e2:	dd16      	ble.n	8010612 <__s2b+0x72>
 80105e4:	f104 0909 	add.w	r9, r4, #9
 80105e8:	46c8      	mov	r8, r9
 80105ea:	442c      	add	r4, r5
 80105ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 80105f0:	4601      	mov	r1, r0
 80105f2:	220a      	movs	r2, #10
 80105f4:	4630      	mov	r0, r6
 80105f6:	3b30      	subs	r3, #48	@ 0x30
 80105f8:	f7ff ff8c 	bl	8010514 <__multadd>
 80105fc:	45a0      	cmp	r8, r4
 80105fe:	d1f5      	bne.n	80105ec <__s2b+0x4c>
 8010600:	f1a5 0408 	sub.w	r4, r5, #8
 8010604:	444c      	add	r4, r9
 8010606:	1b2d      	subs	r5, r5, r4
 8010608:	1963      	adds	r3, r4, r5
 801060a:	42bb      	cmp	r3, r7
 801060c:	db04      	blt.n	8010618 <__s2b+0x78>
 801060e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010612:	2509      	movs	r5, #9
 8010614:	340a      	adds	r4, #10
 8010616:	e7f6      	b.n	8010606 <__s2b+0x66>
 8010618:	f814 3b01 	ldrb.w	r3, [r4], #1
 801061c:	4601      	mov	r1, r0
 801061e:	220a      	movs	r2, #10
 8010620:	4630      	mov	r0, r6
 8010622:	3b30      	subs	r3, #48	@ 0x30
 8010624:	f7ff ff76 	bl	8010514 <__multadd>
 8010628:	e7ee      	b.n	8010608 <__s2b+0x68>
 801062a:	bf00      	nop
 801062c:	080122fb 	.word	0x080122fb
 8010630:	0801236c 	.word	0x0801236c

08010634 <__hi0bits>:
 8010634:	4603      	mov	r3, r0
 8010636:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801063a:	bf3a      	itte	cc
 801063c:	0403      	lslcc	r3, r0, #16
 801063e:	2010      	movcc	r0, #16
 8010640:	2000      	movcs	r0, #0
 8010642:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010646:	bf3c      	itt	cc
 8010648:	021b      	lslcc	r3, r3, #8
 801064a:	3008      	addcc	r0, #8
 801064c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010650:	bf3c      	itt	cc
 8010652:	011b      	lslcc	r3, r3, #4
 8010654:	3004      	addcc	r0, #4
 8010656:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801065a:	bf3c      	itt	cc
 801065c:	009b      	lslcc	r3, r3, #2
 801065e:	3002      	addcc	r0, #2
 8010660:	2b00      	cmp	r3, #0
 8010662:	db05      	blt.n	8010670 <__hi0bits+0x3c>
 8010664:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010668:	f100 0001 	add.w	r0, r0, #1
 801066c:	bf08      	it	eq
 801066e:	2020      	moveq	r0, #32
 8010670:	4770      	bx	lr

08010672 <__lo0bits>:
 8010672:	6803      	ldr	r3, [r0, #0]
 8010674:	4602      	mov	r2, r0
 8010676:	f013 0007 	ands.w	r0, r3, #7
 801067a:	d00b      	beq.n	8010694 <__lo0bits+0x22>
 801067c:	07d9      	lsls	r1, r3, #31
 801067e:	d421      	bmi.n	80106c4 <__lo0bits+0x52>
 8010680:	0798      	lsls	r0, r3, #30
 8010682:	bf49      	itett	mi
 8010684:	085b      	lsrmi	r3, r3, #1
 8010686:	089b      	lsrpl	r3, r3, #2
 8010688:	2001      	movmi	r0, #1
 801068a:	6013      	strmi	r3, [r2, #0]
 801068c:	bf5c      	itt	pl
 801068e:	2002      	movpl	r0, #2
 8010690:	6013      	strpl	r3, [r2, #0]
 8010692:	4770      	bx	lr
 8010694:	b299      	uxth	r1, r3
 8010696:	b909      	cbnz	r1, 801069c <__lo0bits+0x2a>
 8010698:	2010      	movs	r0, #16
 801069a:	0c1b      	lsrs	r3, r3, #16
 801069c:	b2d9      	uxtb	r1, r3
 801069e:	b909      	cbnz	r1, 80106a4 <__lo0bits+0x32>
 80106a0:	3008      	adds	r0, #8
 80106a2:	0a1b      	lsrs	r3, r3, #8
 80106a4:	0719      	lsls	r1, r3, #28
 80106a6:	bf04      	itt	eq
 80106a8:	091b      	lsreq	r3, r3, #4
 80106aa:	3004      	addeq	r0, #4
 80106ac:	0799      	lsls	r1, r3, #30
 80106ae:	bf04      	itt	eq
 80106b0:	089b      	lsreq	r3, r3, #2
 80106b2:	3002      	addeq	r0, #2
 80106b4:	07d9      	lsls	r1, r3, #31
 80106b6:	d403      	bmi.n	80106c0 <__lo0bits+0x4e>
 80106b8:	085b      	lsrs	r3, r3, #1
 80106ba:	f100 0001 	add.w	r0, r0, #1
 80106be:	d003      	beq.n	80106c8 <__lo0bits+0x56>
 80106c0:	6013      	str	r3, [r2, #0]
 80106c2:	4770      	bx	lr
 80106c4:	2000      	movs	r0, #0
 80106c6:	4770      	bx	lr
 80106c8:	2020      	movs	r0, #32
 80106ca:	4770      	bx	lr

080106cc <__i2b>:
 80106cc:	b510      	push	{r4, lr}
 80106ce:	460c      	mov	r4, r1
 80106d0:	2101      	movs	r1, #1
 80106d2:	f7ff febd 	bl	8010450 <_Balloc>
 80106d6:	4602      	mov	r2, r0
 80106d8:	b928      	cbnz	r0, 80106e6 <__i2b+0x1a>
 80106da:	f240 1145 	movw	r1, #325	@ 0x145
 80106de:	4b04      	ldr	r3, [pc, #16]	@ (80106f0 <__i2b+0x24>)
 80106e0:	4804      	ldr	r0, [pc, #16]	@ (80106f4 <__i2b+0x28>)
 80106e2:	f7fe fc65 	bl	800efb0 <__assert_func>
 80106e6:	2301      	movs	r3, #1
 80106e8:	6144      	str	r4, [r0, #20]
 80106ea:	6103      	str	r3, [r0, #16]
 80106ec:	bd10      	pop	{r4, pc}
 80106ee:	bf00      	nop
 80106f0:	080122fb 	.word	0x080122fb
 80106f4:	0801236c 	.word	0x0801236c

080106f8 <__multiply>:
 80106f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106fc:	4614      	mov	r4, r2
 80106fe:	690a      	ldr	r2, [r1, #16]
 8010700:	6923      	ldr	r3, [r4, #16]
 8010702:	460f      	mov	r7, r1
 8010704:	429a      	cmp	r2, r3
 8010706:	bfa2      	ittt	ge
 8010708:	4623      	movge	r3, r4
 801070a:	460c      	movge	r4, r1
 801070c:	461f      	movge	r7, r3
 801070e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010712:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010716:	68a3      	ldr	r3, [r4, #8]
 8010718:	6861      	ldr	r1, [r4, #4]
 801071a:	eb0a 0609 	add.w	r6, sl, r9
 801071e:	42b3      	cmp	r3, r6
 8010720:	b085      	sub	sp, #20
 8010722:	bfb8      	it	lt
 8010724:	3101      	addlt	r1, #1
 8010726:	f7ff fe93 	bl	8010450 <_Balloc>
 801072a:	b930      	cbnz	r0, 801073a <__multiply+0x42>
 801072c:	4602      	mov	r2, r0
 801072e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010732:	4b43      	ldr	r3, [pc, #268]	@ (8010840 <__multiply+0x148>)
 8010734:	4843      	ldr	r0, [pc, #268]	@ (8010844 <__multiply+0x14c>)
 8010736:	f7fe fc3b 	bl	800efb0 <__assert_func>
 801073a:	f100 0514 	add.w	r5, r0, #20
 801073e:	462b      	mov	r3, r5
 8010740:	2200      	movs	r2, #0
 8010742:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010746:	4543      	cmp	r3, r8
 8010748:	d321      	bcc.n	801078e <__multiply+0x96>
 801074a:	f107 0114 	add.w	r1, r7, #20
 801074e:	f104 0214 	add.w	r2, r4, #20
 8010752:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010756:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801075a:	9302      	str	r3, [sp, #8]
 801075c:	1b13      	subs	r3, r2, r4
 801075e:	3b15      	subs	r3, #21
 8010760:	f023 0303 	bic.w	r3, r3, #3
 8010764:	3304      	adds	r3, #4
 8010766:	f104 0715 	add.w	r7, r4, #21
 801076a:	42ba      	cmp	r2, r7
 801076c:	bf38      	it	cc
 801076e:	2304      	movcc	r3, #4
 8010770:	9301      	str	r3, [sp, #4]
 8010772:	9b02      	ldr	r3, [sp, #8]
 8010774:	9103      	str	r1, [sp, #12]
 8010776:	428b      	cmp	r3, r1
 8010778:	d80c      	bhi.n	8010794 <__multiply+0x9c>
 801077a:	2e00      	cmp	r6, #0
 801077c:	dd03      	ble.n	8010786 <__multiply+0x8e>
 801077e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010782:	2b00      	cmp	r3, #0
 8010784:	d05a      	beq.n	801083c <__multiply+0x144>
 8010786:	6106      	str	r6, [r0, #16]
 8010788:	b005      	add	sp, #20
 801078a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801078e:	f843 2b04 	str.w	r2, [r3], #4
 8010792:	e7d8      	b.n	8010746 <__multiply+0x4e>
 8010794:	f8b1 a000 	ldrh.w	sl, [r1]
 8010798:	f1ba 0f00 	cmp.w	sl, #0
 801079c:	d023      	beq.n	80107e6 <__multiply+0xee>
 801079e:	46a9      	mov	r9, r5
 80107a0:	f04f 0c00 	mov.w	ip, #0
 80107a4:	f104 0e14 	add.w	lr, r4, #20
 80107a8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80107ac:	f8d9 3000 	ldr.w	r3, [r9]
 80107b0:	fa1f fb87 	uxth.w	fp, r7
 80107b4:	b29b      	uxth	r3, r3
 80107b6:	fb0a 330b 	mla	r3, sl, fp, r3
 80107ba:	4463      	add	r3, ip
 80107bc:	f8d9 c000 	ldr.w	ip, [r9]
 80107c0:	0c3f      	lsrs	r7, r7, #16
 80107c2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80107c6:	fb0a c707 	mla	r7, sl, r7, ip
 80107ca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80107ce:	b29b      	uxth	r3, r3
 80107d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80107d4:	4572      	cmp	r2, lr
 80107d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80107da:	f849 3b04 	str.w	r3, [r9], #4
 80107de:	d8e3      	bhi.n	80107a8 <__multiply+0xb0>
 80107e0:	9b01      	ldr	r3, [sp, #4]
 80107e2:	f845 c003 	str.w	ip, [r5, r3]
 80107e6:	9b03      	ldr	r3, [sp, #12]
 80107e8:	3104      	adds	r1, #4
 80107ea:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80107ee:	f1b9 0f00 	cmp.w	r9, #0
 80107f2:	d021      	beq.n	8010838 <__multiply+0x140>
 80107f4:	46ae      	mov	lr, r5
 80107f6:	f04f 0a00 	mov.w	sl, #0
 80107fa:	682b      	ldr	r3, [r5, #0]
 80107fc:	f104 0c14 	add.w	ip, r4, #20
 8010800:	f8bc b000 	ldrh.w	fp, [ip]
 8010804:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010808:	b29b      	uxth	r3, r3
 801080a:	fb09 770b 	mla	r7, r9, fp, r7
 801080e:	4457      	add	r7, sl
 8010810:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010814:	f84e 3b04 	str.w	r3, [lr], #4
 8010818:	f85c 3b04 	ldr.w	r3, [ip], #4
 801081c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010820:	f8be 3000 	ldrh.w	r3, [lr]
 8010824:	4562      	cmp	r2, ip
 8010826:	fb09 330a 	mla	r3, r9, sl, r3
 801082a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801082e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010832:	d8e5      	bhi.n	8010800 <__multiply+0x108>
 8010834:	9f01      	ldr	r7, [sp, #4]
 8010836:	51eb      	str	r3, [r5, r7]
 8010838:	3504      	adds	r5, #4
 801083a:	e79a      	b.n	8010772 <__multiply+0x7a>
 801083c:	3e01      	subs	r6, #1
 801083e:	e79c      	b.n	801077a <__multiply+0x82>
 8010840:	080122fb 	.word	0x080122fb
 8010844:	0801236c 	.word	0x0801236c

08010848 <__pow5mult>:
 8010848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801084c:	4615      	mov	r5, r2
 801084e:	f012 0203 	ands.w	r2, r2, #3
 8010852:	4607      	mov	r7, r0
 8010854:	460e      	mov	r6, r1
 8010856:	d007      	beq.n	8010868 <__pow5mult+0x20>
 8010858:	4c25      	ldr	r4, [pc, #148]	@ (80108f0 <__pow5mult+0xa8>)
 801085a:	3a01      	subs	r2, #1
 801085c:	2300      	movs	r3, #0
 801085e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010862:	f7ff fe57 	bl	8010514 <__multadd>
 8010866:	4606      	mov	r6, r0
 8010868:	10ad      	asrs	r5, r5, #2
 801086a:	d03d      	beq.n	80108e8 <__pow5mult+0xa0>
 801086c:	69fc      	ldr	r4, [r7, #28]
 801086e:	b97c      	cbnz	r4, 8010890 <__pow5mult+0x48>
 8010870:	2010      	movs	r0, #16
 8010872:	f7fb ff73 	bl	800c75c <malloc>
 8010876:	4602      	mov	r2, r0
 8010878:	61f8      	str	r0, [r7, #28]
 801087a:	b928      	cbnz	r0, 8010888 <__pow5mult+0x40>
 801087c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010880:	4b1c      	ldr	r3, [pc, #112]	@ (80108f4 <__pow5mult+0xac>)
 8010882:	481d      	ldr	r0, [pc, #116]	@ (80108f8 <__pow5mult+0xb0>)
 8010884:	f7fe fb94 	bl	800efb0 <__assert_func>
 8010888:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801088c:	6004      	str	r4, [r0, #0]
 801088e:	60c4      	str	r4, [r0, #12]
 8010890:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010894:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010898:	b94c      	cbnz	r4, 80108ae <__pow5mult+0x66>
 801089a:	f240 2171 	movw	r1, #625	@ 0x271
 801089e:	4638      	mov	r0, r7
 80108a0:	f7ff ff14 	bl	80106cc <__i2b>
 80108a4:	2300      	movs	r3, #0
 80108a6:	4604      	mov	r4, r0
 80108a8:	f8c8 0008 	str.w	r0, [r8, #8]
 80108ac:	6003      	str	r3, [r0, #0]
 80108ae:	f04f 0900 	mov.w	r9, #0
 80108b2:	07eb      	lsls	r3, r5, #31
 80108b4:	d50a      	bpl.n	80108cc <__pow5mult+0x84>
 80108b6:	4631      	mov	r1, r6
 80108b8:	4622      	mov	r2, r4
 80108ba:	4638      	mov	r0, r7
 80108bc:	f7ff ff1c 	bl	80106f8 <__multiply>
 80108c0:	4680      	mov	r8, r0
 80108c2:	4631      	mov	r1, r6
 80108c4:	4638      	mov	r0, r7
 80108c6:	f7ff fe03 	bl	80104d0 <_Bfree>
 80108ca:	4646      	mov	r6, r8
 80108cc:	106d      	asrs	r5, r5, #1
 80108ce:	d00b      	beq.n	80108e8 <__pow5mult+0xa0>
 80108d0:	6820      	ldr	r0, [r4, #0]
 80108d2:	b938      	cbnz	r0, 80108e4 <__pow5mult+0x9c>
 80108d4:	4622      	mov	r2, r4
 80108d6:	4621      	mov	r1, r4
 80108d8:	4638      	mov	r0, r7
 80108da:	f7ff ff0d 	bl	80106f8 <__multiply>
 80108de:	6020      	str	r0, [r4, #0]
 80108e0:	f8c0 9000 	str.w	r9, [r0]
 80108e4:	4604      	mov	r4, r0
 80108e6:	e7e4      	b.n	80108b2 <__pow5mult+0x6a>
 80108e8:	4630      	mov	r0, r6
 80108ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108ee:	bf00      	nop
 80108f0:	080123c8 	.word	0x080123c8
 80108f4:	08012133 	.word	0x08012133
 80108f8:	0801236c 	.word	0x0801236c

080108fc <__lshift>:
 80108fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010900:	460c      	mov	r4, r1
 8010902:	4607      	mov	r7, r0
 8010904:	4691      	mov	r9, r2
 8010906:	6923      	ldr	r3, [r4, #16]
 8010908:	6849      	ldr	r1, [r1, #4]
 801090a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801090e:	68a3      	ldr	r3, [r4, #8]
 8010910:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010914:	f108 0601 	add.w	r6, r8, #1
 8010918:	42b3      	cmp	r3, r6
 801091a:	db0b      	blt.n	8010934 <__lshift+0x38>
 801091c:	4638      	mov	r0, r7
 801091e:	f7ff fd97 	bl	8010450 <_Balloc>
 8010922:	4605      	mov	r5, r0
 8010924:	b948      	cbnz	r0, 801093a <__lshift+0x3e>
 8010926:	4602      	mov	r2, r0
 8010928:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801092c:	4b27      	ldr	r3, [pc, #156]	@ (80109cc <__lshift+0xd0>)
 801092e:	4828      	ldr	r0, [pc, #160]	@ (80109d0 <__lshift+0xd4>)
 8010930:	f7fe fb3e 	bl	800efb0 <__assert_func>
 8010934:	3101      	adds	r1, #1
 8010936:	005b      	lsls	r3, r3, #1
 8010938:	e7ee      	b.n	8010918 <__lshift+0x1c>
 801093a:	2300      	movs	r3, #0
 801093c:	f100 0114 	add.w	r1, r0, #20
 8010940:	f100 0210 	add.w	r2, r0, #16
 8010944:	4618      	mov	r0, r3
 8010946:	4553      	cmp	r3, sl
 8010948:	db33      	blt.n	80109b2 <__lshift+0xb6>
 801094a:	6920      	ldr	r0, [r4, #16]
 801094c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010950:	f104 0314 	add.w	r3, r4, #20
 8010954:	f019 091f 	ands.w	r9, r9, #31
 8010958:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801095c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010960:	d02b      	beq.n	80109ba <__lshift+0xbe>
 8010962:	468a      	mov	sl, r1
 8010964:	2200      	movs	r2, #0
 8010966:	f1c9 0e20 	rsb	lr, r9, #32
 801096a:	6818      	ldr	r0, [r3, #0]
 801096c:	fa00 f009 	lsl.w	r0, r0, r9
 8010970:	4310      	orrs	r0, r2
 8010972:	f84a 0b04 	str.w	r0, [sl], #4
 8010976:	f853 2b04 	ldr.w	r2, [r3], #4
 801097a:	459c      	cmp	ip, r3
 801097c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010980:	d8f3      	bhi.n	801096a <__lshift+0x6e>
 8010982:	ebac 0304 	sub.w	r3, ip, r4
 8010986:	3b15      	subs	r3, #21
 8010988:	f023 0303 	bic.w	r3, r3, #3
 801098c:	3304      	adds	r3, #4
 801098e:	f104 0015 	add.w	r0, r4, #21
 8010992:	4584      	cmp	ip, r0
 8010994:	bf38      	it	cc
 8010996:	2304      	movcc	r3, #4
 8010998:	50ca      	str	r2, [r1, r3]
 801099a:	b10a      	cbz	r2, 80109a0 <__lshift+0xa4>
 801099c:	f108 0602 	add.w	r6, r8, #2
 80109a0:	3e01      	subs	r6, #1
 80109a2:	4638      	mov	r0, r7
 80109a4:	4621      	mov	r1, r4
 80109a6:	612e      	str	r6, [r5, #16]
 80109a8:	f7ff fd92 	bl	80104d0 <_Bfree>
 80109ac:	4628      	mov	r0, r5
 80109ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80109b6:	3301      	adds	r3, #1
 80109b8:	e7c5      	b.n	8010946 <__lshift+0x4a>
 80109ba:	3904      	subs	r1, #4
 80109bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80109c0:	459c      	cmp	ip, r3
 80109c2:	f841 2f04 	str.w	r2, [r1, #4]!
 80109c6:	d8f9      	bhi.n	80109bc <__lshift+0xc0>
 80109c8:	e7ea      	b.n	80109a0 <__lshift+0xa4>
 80109ca:	bf00      	nop
 80109cc:	080122fb 	.word	0x080122fb
 80109d0:	0801236c 	.word	0x0801236c

080109d4 <__mcmp>:
 80109d4:	4603      	mov	r3, r0
 80109d6:	690a      	ldr	r2, [r1, #16]
 80109d8:	6900      	ldr	r0, [r0, #16]
 80109da:	b530      	push	{r4, r5, lr}
 80109dc:	1a80      	subs	r0, r0, r2
 80109de:	d10e      	bne.n	80109fe <__mcmp+0x2a>
 80109e0:	3314      	adds	r3, #20
 80109e2:	3114      	adds	r1, #20
 80109e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80109e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80109ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80109f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80109f4:	4295      	cmp	r5, r2
 80109f6:	d003      	beq.n	8010a00 <__mcmp+0x2c>
 80109f8:	d205      	bcs.n	8010a06 <__mcmp+0x32>
 80109fa:	f04f 30ff 	mov.w	r0, #4294967295
 80109fe:	bd30      	pop	{r4, r5, pc}
 8010a00:	42a3      	cmp	r3, r4
 8010a02:	d3f3      	bcc.n	80109ec <__mcmp+0x18>
 8010a04:	e7fb      	b.n	80109fe <__mcmp+0x2a>
 8010a06:	2001      	movs	r0, #1
 8010a08:	e7f9      	b.n	80109fe <__mcmp+0x2a>
	...

08010a0c <__mdiff>:
 8010a0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a10:	4689      	mov	r9, r1
 8010a12:	4606      	mov	r6, r0
 8010a14:	4611      	mov	r1, r2
 8010a16:	4648      	mov	r0, r9
 8010a18:	4614      	mov	r4, r2
 8010a1a:	f7ff ffdb 	bl	80109d4 <__mcmp>
 8010a1e:	1e05      	subs	r5, r0, #0
 8010a20:	d112      	bne.n	8010a48 <__mdiff+0x3c>
 8010a22:	4629      	mov	r1, r5
 8010a24:	4630      	mov	r0, r6
 8010a26:	f7ff fd13 	bl	8010450 <_Balloc>
 8010a2a:	4602      	mov	r2, r0
 8010a2c:	b928      	cbnz	r0, 8010a3a <__mdiff+0x2e>
 8010a2e:	f240 2137 	movw	r1, #567	@ 0x237
 8010a32:	4b3e      	ldr	r3, [pc, #248]	@ (8010b2c <__mdiff+0x120>)
 8010a34:	483e      	ldr	r0, [pc, #248]	@ (8010b30 <__mdiff+0x124>)
 8010a36:	f7fe fabb 	bl	800efb0 <__assert_func>
 8010a3a:	2301      	movs	r3, #1
 8010a3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010a40:	4610      	mov	r0, r2
 8010a42:	b003      	add	sp, #12
 8010a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a48:	bfbc      	itt	lt
 8010a4a:	464b      	movlt	r3, r9
 8010a4c:	46a1      	movlt	r9, r4
 8010a4e:	4630      	mov	r0, r6
 8010a50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010a54:	bfba      	itte	lt
 8010a56:	461c      	movlt	r4, r3
 8010a58:	2501      	movlt	r5, #1
 8010a5a:	2500      	movge	r5, #0
 8010a5c:	f7ff fcf8 	bl	8010450 <_Balloc>
 8010a60:	4602      	mov	r2, r0
 8010a62:	b918      	cbnz	r0, 8010a6c <__mdiff+0x60>
 8010a64:	f240 2145 	movw	r1, #581	@ 0x245
 8010a68:	4b30      	ldr	r3, [pc, #192]	@ (8010b2c <__mdiff+0x120>)
 8010a6a:	e7e3      	b.n	8010a34 <__mdiff+0x28>
 8010a6c:	f100 0b14 	add.w	fp, r0, #20
 8010a70:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010a74:	f109 0310 	add.w	r3, r9, #16
 8010a78:	60c5      	str	r5, [r0, #12]
 8010a7a:	f04f 0c00 	mov.w	ip, #0
 8010a7e:	f109 0514 	add.w	r5, r9, #20
 8010a82:	46d9      	mov	r9, fp
 8010a84:	6926      	ldr	r6, [r4, #16]
 8010a86:	f104 0e14 	add.w	lr, r4, #20
 8010a8a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010a8e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010a92:	9301      	str	r3, [sp, #4]
 8010a94:	9b01      	ldr	r3, [sp, #4]
 8010a96:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010a9a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010a9e:	b281      	uxth	r1, r0
 8010aa0:	9301      	str	r3, [sp, #4]
 8010aa2:	fa1f f38a 	uxth.w	r3, sl
 8010aa6:	1a5b      	subs	r3, r3, r1
 8010aa8:	0c00      	lsrs	r0, r0, #16
 8010aaa:	4463      	add	r3, ip
 8010aac:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010ab0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010ab4:	b29b      	uxth	r3, r3
 8010ab6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010aba:	4576      	cmp	r6, lr
 8010abc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010ac0:	f849 3b04 	str.w	r3, [r9], #4
 8010ac4:	d8e6      	bhi.n	8010a94 <__mdiff+0x88>
 8010ac6:	1b33      	subs	r3, r6, r4
 8010ac8:	3b15      	subs	r3, #21
 8010aca:	f023 0303 	bic.w	r3, r3, #3
 8010ace:	3415      	adds	r4, #21
 8010ad0:	3304      	adds	r3, #4
 8010ad2:	42a6      	cmp	r6, r4
 8010ad4:	bf38      	it	cc
 8010ad6:	2304      	movcc	r3, #4
 8010ad8:	441d      	add	r5, r3
 8010ada:	445b      	add	r3, fp
 8010adc:	461e      	mov	r6, r3
 8010ade:	462c      	mov	r4, r5
 8010ae0:	4544      	cmp	r4, r8
 8010ae2:	d30e      	bcc.n	8010b02 <__mdiff+0xf6>
 8010ae4:	f108 0103 	add.w	r1, r8, #3
 8010ae8:	1b49      	subs	r1, r1, r5
 8010aea:	f021 0103 	bic.w	r1, r1, #3
 8010aee:	3d03      	subs	r5, #3
 8010af0:	45a8      	cmp	r8, r5
 8010af2:	bf38      	it	cc
 8010af4:	2100      	movcc	r1, #0
 8010af6:	440b      	add	r3, r1
 8010af8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010afc:	b199      	cbz	r1, 8010b26 <__mdiff+0x11a>
 8010afe:	6117      	str	r7, [r2, #16]
 8010b00:	e79e      	b.n	8010a40 <__mdiff+0x34>
 8010b02:	46e6      	mov	lr, ip
 8010b04:	f854 1b04 	ldr.w	r1, [r4], #4
 8010b08:	fa1f fc81 	uxth.w	ip, r1
 8010b0c:	44f4      	add	ip, lr
 8010b0e:	0c08      	lsrs	r0, r1, #16
 8010b10:	4471      	add	r1, lr
 8010b12:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010b16:	b289      	uxth	r1, r1
 8010b18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010b1c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010b20:	f846 1b04 	str.w	r1, [r6], #4
 8010b24:	e7dc      	b.n	8010ae0 <__mdiff+0xd4>
 8010b26:	3f01      	subs	r7, #1
 8010b28:	e7e6      	b.n	8010af8 <__mdiff+0xec>
 8010b2a:	bf00      	nop
 8010b2c:	080122fb 	.word	0x080122fb
 8010b30:	0801236c 	.word	0x0801236c

08010b34 <__ulp>:
 8010b34:	4b0e      	ldr	r3, [pc, #56]	@ (8010b70 <__ulp+0x3c>)
 8010b36:	400b      	ands	r3, r1
 8010b38:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	dc08      	bgt.n	8010b52 <__ulp+0x1e>
 8010b40:	425b      	negs	r3, r3
 8010b42:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010b46:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010b4a:	da04      	bge.n	8010b56 <__ulp+0x22>
 8010b4c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010b50:	4113      	asrs	r3, r2
 8010b52:	2200      	movs	r2, #0
 8010b54:	e008      	b.n	8010b68 <__ulp+0x34>
 8010b56:	f1a2 0314 	sub.w	r3, r2, #20
 8010b5a:	2b1e      	cmp	r3, #30
 8010b5c:	bfd6      	itet	le
 8010b5e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010b62:	2201      	movgt	r2, #1
 8010b64:	40da      	lsrle	r2, r3
 8010b66:	2300      	movs	r3, #0
 8010b68:	4619      	mov	r1, r3
 8010b6a:	4610      	mov	r0, r2
 8010b6c:	4770      	bx	lr
 8010b6e:	bf00      	nop
 8010b70:	7ff00000 	.word	0x7ff00000

08010b74 <__b2d>:
 8010b74:	6902      	ldr	r2, [r0, #16]
 8010b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b78:	f100 0614 	add.w	r6, r0, #20
 8010b7c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8010b80:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8010b84:	4f1e      	ldr	r7, [pc, #120]	@ (8010c00 <__b2d+0x8c>)
 8010b86:	4620      	mov	r0, r4
 8010b88:	f7ff fd54 	bl	8010634 <__hi0bits>
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	f1c0 0020 	rsb	r0, r0, #32
 8010b92:	2b0a      	cmp	r3, #10
 8010b94:	f1a2 0504 	sub.w	r5, r2, #4
 8010b98:	6008      	str	r0, [r1, #0]
 8010b9a:	dc12      	bgt.n	8010bc2 <__b2d+0x4e>
 8010b9c:	42ae      	cmp	r6, r5
 8010b9e:	bf2c      	ite	cs
 8010ba0:	2200      	movcs	r2, #0
 8010ba2:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8010ba6:	f1c3 0c0b 	rsb	ip, r3, #11
 8010baa:	3315      	adds	r3, #21
 8010bac:	fa24 fe0c 	lsr.w	lr, r4, ip
 8010bb0:	fa04 f303 	lsl.w	r3, r4, r3
 8010bb4:	fa22 f20c 	lsr.w	r2, r2, ip
 8010bb8:	ea4e 0107 	orr.w	r1, lr, r7
 8010bbc:	431a      	orrs	r2, r3
 8010bbe:	4610      	mov	r0, r2
 8010bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bc2:	42ae      	cmp	r6, r5
 8010bc4:	bf36      	itet	cc
 8010bc6:	f1a2 0508 	subcc.w	r5, r2, #8
 8010bca:	2200      	movcs	r2, #0
 8010bcc:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8010bd0:	3b0b      	subs	r3, #11
 8010bd2:	d012      	beq.n	8010bfa <__b2d+0x86>
 8010bd4:	f1c3 0720 	rsb	r7, r3, #32
 8010bd8:	fa22 f107 	lsr.w	r1, r2, r7
 8010bdc:	409c      	lsls	r4, r3
 8010bde:	430c      	orrs	r4, r1
 8010be0:	42b5      	cmp	r5, r6
 8010be2:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8010be6:	bf94      	ite	ls
 8010be8:	2400      	movls	r4, #0
 8010bea:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8010bee:	409a      	lsls	r2, r3
 8010bf0:	40fc      	lsrs	r4, r7
 8010bf2:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8010bf6:	4322      	orrs	r2, r4
 8010bf8:	e7e1      	b.n	8010bbe <__b2d+0x4a>
 8010bfa:	ea44 0107 	orr.w	r1, r4, r7
 8010bfe:	e7de      	b.n	8010bbe <__b2d+0x4a>
 8010c00:	3ff00000 	.word	0x3ff00000

08010c04 <__d2b>:
 8010c04:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8010c08:	2101      	movs	r1, #1
 8010c0a:	4690      	mov	r8, r2
 8010c0c:	4699      	mov	r9, r3
 8010c0e:	9e08      	ldr	r6, [sp, #32]
 8010c10:	f7ff fc1e 	bl	8010450 <_Balloc>
 8010c14:	4604      	mov	r4, r0
 8010c16:	b930      	cbnz	r0, 8010c26 <__d2b+0x22>
 8010c18:	4602      	mov	r2, r0
 8010c1a:	f240 310f 	movw	r1, #783	@ 0x30f
 8010c1e:	4b23      	ldr	r3, [pc, #140]	@ (8010cac <__d2b+0xa8>)
 8010c20:	4823      	ldr	r0, [pc, #140]	@ (8010cb0 <__d2b+0xac>)
 8010c22:	f7fe f9c5 	bl	800efb0 <__assert_func>
 8010c26:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010c2a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010c2e:	b10d      	cbz	r5, 8010c34 <__d2b+0x30>
 8010c30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010c34:	9301      	str	r3, [sp, #4]
 8010c36:	f1b8 0300 	subs.w	r3, r8, #0
 8010c3a:	d024      	beq.n	8010c86 <__d2b+0x82>
 8010c3c:	4668      	mov	r0, sp
 8010c3e:	9300      	str	r3, [sp, #0]
 8010c40:	f7ff fd17 	bl	8010672 <__lo0bits>
 8010c44:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010c48:	b1d8      	cbz	r0, 8010c82 <__d2b+0x7e>
 8010c4a:	f1c0 0320 	rsb	r3, r0, #32
 8010c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8010c52:	430b      	orrs	r3, r1
 8010c54:	40c2      	lsrs	r2, r0
 8010c56:	6163      	str	r3, [r4, #20]
 8010c58:	9201      	str	r2, [sp, #4]
 8010c5a:	9b01      	ldr	r3, [sp, #4]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	bf0c      	ite	eq
 8010c60:	2201      	moveq	r2, #1
 8010c62:	2202      	movne	r2, #2
 8010c64:	61a3      	str	r3, [r4, #24]
 8010c66:	6122      	str	r2, [r4, #16]
 8010c68:	b1ad      	cbz	r5, 8010c96 <__d2b+0x92>
 8010c6a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010c6e:	4405      	add	r5, r0
 8010c70:	6035      	str	r5, [r6, #0]
 8010c72:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c78:	6018      	str	r0, [r3, #0]
 8010c7a:	4620      	mov	r0, r4
 8010c7c:	b002      	add	sp, #8
 8010c7e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8010c82:	6161      	str	r1, [r4, #20]
 8010c84:	e7e9      	b.n	8010c5a <__d2b+0x56>
 8010c86:	a801      	add	r0, sp, #4
 8010c88:	f7ff fcf3 	bl	8010672 <__lo0bits>
 8010c8c:	9b01      	ldr	r3, [sp, #4]
 8010c8e:	2201      	movs	r2, #1
 8010c90:	6163      	str	r3, [r4, #20]
 8010c92:	3020      	adds	r0, #32
 8010c94:	e7e7      	b.n	8010c66 <__d2b+0x62>
 8010c96:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010c9a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010c9e:	6030      	str	r0, [r6, #0]
 8010ca0:	6918      	ldr	r0, [r3, #16]
 8010ca2:	f7ff fcc7 	bl	8010634 <__hi0bits>
 8010ca6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010caa:	e7e4      	b.n	8010c76 <__d2b+0x72>
 8010cac:	080122fb 	.word	0x080122fb
 8010cb0:	0801236c 	.word	0x0801236c

08010cb4 <__ratio>:
 8010cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cb8:	b085      	sub	sp, #20
 8010cba:	e9cd 1000 	strd	r1, r0, [sp]
 8010cbe:	a902      	add	r1, sp, #8
 8010cc0:	f7ff ff58 	bl	8010b74 <__b2d>
 8010cc4:	468b      	mov	fp, r1
 8010cc6:	4606      	mov	r6, r0
 8010cc8:	460f      	mov	r7, r1
 8010cca:	9800      	ldr	r0, [sp, #0]
 8010ccc:	a903      	add	r1, sp, #12
 8010cce:	f7ff ff51 	bl	8010b74 <__b2d>
 8010cd2:	460d      	mov	r5, r1
 8010cd4:	9b01      	ldr	r3, [sp, #4]
 8010cd6:	4689      	mov	r9, r1
 8010cd8:	6919      	ldr	r1, [r3, #16]
 8010cda:	9b00      	ldr	r3, [sp, #0]
 8010cdc:	4604      	mov	r4, r0
 8010cde:	691b      	ldr	r3, [r3, #16]
 8010ce0:	4630      	mov	r0, r6
 8010ce2:	1ac9      	subs	r1, r1, r3
 8010ce4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010ce8:	1a9b      	subs	r3, r3, r2
 8010cea:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	bfcd      	iteet	gt
 8010cf2:	463a      	movgt	r2, r7
 8010cf4:	462a      	movle	r2, r5
 8010cf6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010cfa:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8010cfe:	bfd8      	it	le
 8010d00:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8010d04:	464b      	mov	r3, r9
 8010d06:	4622      	mov	r2, r4
 8010d08:	4659      	mov	r1, fp
 8010d0a:	f7ef fd89 	bl	8000820 <__aeabi_ddiv>
 8010d0e:	b005      	add	sp, #20
 8010d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010d14 <__copybits>:
 8010d14:	3901      	subs	r1, #1
 8010d16:	b570      	push	{r4, r5, r6, lr}
 8010d18:	1149      	asrs	r1, r1, #5
 8010d1a:	6914      	ldr	r4, [r2, #16]
 8010d1c:	3101      	adds	r1, #1
 8010d1e:	f102 0314 	add.w	r3, r2, #20
 8010d22:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010d26:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010d2a:	1f05      	subs	r5, r0, #4
 8010d2c:	42a3      	cmp	r3, r4
 8010d2e:	d30c      	bcc.n	8010d4a <__copybits+0x36>
 8010d30:	1aa3      	subs	r3, r4, r2
 8010d32:	3b11      	subs	r3, #17
 8010d34:	f023 0303 	bic.w	r3, r3, #3
 8010d38:	3211      	adds	r2, #17
 8010d3a:	42a2      	cmp	r2, r4
 8010d3c:	bf88      	it	hi
 8010d3e:	2300      	movhi	r3, #0
 8010d40:	4418      	add	r0, r3
 8010d42:	2300      	movs	r3, #0
 8010d44:	4288      	cmp	r0, r1
 8010d46:	d305      	bcc.n	8010d54 <__copybits+0x40>
 8010d48:	bd70      	pop	{r4, r5, r6, pc}
 8010d4a:	f853 6b04 	ldr.w	r6, [r3], #4
 8010d4e:	f845 6f04 	str.w	r6, [r5, #4]!
 8010d52:	e7eb      	b.n	8010d2c <__copybits+0x18>
 8010d54:	f840 3b04 	str.w	r3, [r0], #4
 8010d58:	e7f4      	b.n	8010d44 <__copybits+0x30>

08010d5a <__any_on>:
 8010d5a:	f100 0214 	add.w	r2, r0, #20
 8010d5e:	6900      	ldr	r0, [r0, #16]
 8010d60:	114b      	asrs	r3, r1, #5
 8010d62:	4298      	cmp	r0, r3
 8010d64:	b510      	push	{r4, lr}
 8010d66:	db11      	blt.n	8010d8c <__any_on+0x32>
 8010d68:	dd0a      	ble.n	8010d80 <__any_on+0x26>
 8010d6a:	f011 011f 	ands.w	r1, r1, #31
 8010d6e:	d007      	beq.n	8010d80 <__any_on+0x26>
 8010d70:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010d74:	fa24 f001 	lsr.w	r0, r4, r1
 8010d78:	fa00 f101 	lsl.w	r1, r0, r1
 8010d7c:	428c      	cmp	r4, r1
 8010d7e:	d10b      	bne.n	8010d98 <__any_on+0x3e>
 8010d80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010d84:	4293      	cmp	r3, r2
 8010d86:	d803      	bhi.n	8010d90 <__any_on+0x36>
 8010d88:	2000      	movs	r0, #0
 8010d8a:	bd10      	pop	{r4, pc}
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	e7f7      	b.n	8010d80 <__any_on+0x26>
 8010d90:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010d94:	2900      	cmp	r1, #0
 8010d96:	d0f5      	beq.n	8010d84 <__any_on+0x2a>
 8010d98:	2001      	movs	r0, #1
 8010d9a:	e7f6      	b.n	8010d8a <__any_on+0x30>

08010d9c <_strtoul_l.constprop.0>:
 8010d9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010da0:	4686      	mov	lr, r0
 8010da2:	460d      	mov	r5, r1
 8010da4:	4e33      	ldr	r6, [pc, #204]	@ (8010e74 <_strtoul_l.constprop.0+0xd8>)
 8010da6:	4628      	mov	r0, r5
 8010da8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010dac:	5d37      	ldrb	r7, [r6, r4]
 8010dae:	f017 0708 	ands.w	r7, r7, #8
 8010db2:	d1f8      	bne.n	8010da6 <_strtoul_l.constprop.0+0xa>
 8010db4:	2c2d      	cmp	r4, #45	@ 0x2d
 8010db6:	d12f      	bne.n	8010e18 <_strtoul_l.constprop.0+0x7c>
 8010db8:	2701      	movs	r7, #1
 8010dba:	782c      	ldrb	r4, [r5, #0]
 8010dbc:	1c85      	adds	r5, r0, #2
 8010dbe:	f033 0010 	bics.w	r0, r3, #16
 8010dc2:	d109      	bne.n	8010dd8 <_strtoul_l.constprop.0+0x3c>
 8010dc4:	2c30      	cmp	r4, #48	@ 0x30
 8010dc6:	d12c      	bne.n	8010e22 <_strtoul_l.constprop.0+0x86>
 8010dc8:	7828      	ldrb	r0, [r5, #0]
 8010dca:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8010dce:	2858      	cmp	r0, #88	@ 0x58
 8010dd0:	d127      	bne.n	8010e22 <_strtoul_l.constprop.0+0x86>
 8010dd2:	2310      	movs	r3, #16
 8010dd4:	786c      	ldrb	r4, [r5, #1]
 8010dd6:	3502      	adds	r5, #2
 8010dd8:	f04f 38ff 	mov.w	r8, #4294967295
 8010ddc:	fbb8 f8f3 	udiv	r8, r8, r3
 8010de0:	2600      	movs	r6, #0
 8010de2:	fb03 f908 	mul.w	r9, r3, r8
 8010de6:	4630      	mov	r0, r6
 8010de8:	ea6f 0909 	mvn.w	r9, r9
 8010dec:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8010df0:	f1bc 0f09 	cmp.w	ip, #9
 8010df4:	d81c      	bhi.n	8010e30 <_strtoul_l.constprop.0+0x94>
 8010df6:	4664      	mov	r4, ip
 8010df8:	42a3      	cmp	r3, r4
 8010dfa:	dd2a      	ble.n	8010e52 <_strtoul_l.constprop.0+0xb6>
 8010dfc:	f1b6 3fff 	cmp.w	r6, #4294967295
 8010e00:	d007      	beq.n	8010e12 <_strtoul_l.constprop.0+0x76>
 8010e02:	4580      	cmp	r8, r0
 8010e04:	d322      	bcc.n	8010e4c <_strtoul_l.constprop.0+0xb0>
 8010e06:	d101      	bne.n	8010e0c <_strtoul_l.constprop.0+0x70>
 8010e08:	45a1      	cmp	r9, r4
 8010e0a:	db1f      	blt.n	8010e4c <_strtoul_l.constprop.0+0xb0>
 8010e0c:	2601      	movs	r6, #1
 8010e0e:	fb00 4003 	mla	r0, r0, r3, r4
 8010e12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010e16:	e7e9      	b.n	8010dec <_strtoul_l.constprop.0+0x50>
 8010e18:	2c2b      	cmp	r4, #43	@ 0x2b
 8010e1a:	bf04      	itt	eq
 8010e1c:	782c      	ldrbeq	r4, [r5, #0]
 8010e1e:	1c85      	addeq	r5, r0, #2
 8010e20:	e7cd      	b.n	8010dbe <_strtoul_l.constprop.0+0x22>
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d1d8      	bne.n	8010dd8 <_strtoul_l.constprop.0+0x3c>
 8010e26:	2c30      	cmp	r4, #48	@ 0x30
 8010e28:	bf0c      	ite	eq
 8010e2a:	2308      	moveq	r3, #8
 8010e2c:	230a      	movne	r3, #10
 8010e2e:	e7d3      	b.n	8010dd8 <_strtoul_l.constprop.0+0x3c>
 8010e30:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8010e34:	f1bc 0f19 	cmp.w	ip, #25
 8010e38:	d801      	bhi.n	8010e3e <_strtoul_l.constprop.0+0xa2>
 8010e3a:	3c37      	subs	r4, #55	@ 0x37
 8010e3c:	e7dc      	b.n	8010df8 <_strtoul_l.constprop.0+0x5c>
 8010e3e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8010e42:	f1bc 0f19 	cmp.w	ip, #25
 8010e46:	d804      	bhi.n	8010e52 <_strtoul_l.constprop.0+0xb6>
 8010e48:	3c57      	subs	r4, #87	@ 0x57
 8010e4a:	e7d5      	b.n	8010df8 <_strtoul_l.constprop.0+0x5c>
 8010e4c:	f04f 36ff 	mov.w	r6, #4294967295
 8010e50:	e7df      	b.n	8010e12 <_strtoul_l.constprop.0+0x76>
 8010e52:	1c73      	adds	r3, r6, #1
 8010e54:	d106      	bne.n	8010e64 <_strtoul_l.constprop.0+0xc8>
 8010e56:	2322      	movs	r3, #34	@ 0x22
 8010e58:	4630      	mov	r0, r6
 8010e5a:	f8ce 3000 	str.w	r3, [lr]
 8010e5e:	b932      	cbnz	r2, 8010e6e <_strtoul_l.constprop.0+0xd2>
 8010e60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e64:	b107      	cbz	r7, 8010e68 <_strtoul_l.constprop.0+0xcc>
 8010e66:	4240      	negs	r0, r0
 8010e68:	2a00      	cmp	r2, #0
 8010e6a:	d0f9      	beq.n	8010e60 <_strtoul_l.constprop.0+0xc4>
 8010e6c:	b106      	cbz	r6, 8010e70 <_strtoul_l.constprop.0+0xd4>
 8010e6e:	1e69      	subs	r1, r5, #1
 8010e70:	6011      	str	r1, [r2, #0]
 8010e72:	e7f5      	b.n	8010e60 <_strtoul_l.constprop.0+0xc4>
 8010e74:	08012001 	.word	0x08012001

08010e78 <_strtoul_r>:
 8010e78:	f7ff bf90 	b.w	8010d9c <_strtoul_l.constprop.0>

08010e7c <strtoul>:
 8010e7c:	4613      	mov	r3, r2
 8010e7e:	460a      	mov	r2, r1
 8010e80:	4601      	mov	r1, r0
 8010e82:	4802      	ldr	r0, [pc, #8]	@ (8010e8c <strtoul+0x10>)
 8010e84:	6800      	ldr	r0, [r0, #0]
 8010e86:	f7ff bf89 	b.w	8010d9c <_strtoul_l.constprop.0>
 8010e8a:	bf00      	nop
 8010e8c:	20000284 	.word	0x20000284

08010e90 <__ascii_wctomb>:
 8010e90:	4603      	mov	r3, r0
 8010e92:	4608      	mov	r0, r1
 8010e94:	b141      	cbz	r1, 8010ea8 <__ascii_wctomb+0x18>
 8010e96:	2aff      	cmp	r2, #255	@ 0xff
 8010e98:	d904      	bls.n	8010ea4 <__ascii_wctomb+0x14>
 8010e9a:	228a      	movs	r2, #138	@ 0x8a
 8010e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8010ea0:	601a      	str	r2, [r3, #0]
 8010ea2:	4770      	bx	lr
 8010ea4:	2001      	movs	r0, #1
 8010ea6:	700a      	strb	r2, [r1, #0]
 8010ea8:	4770      	bx	lr

08010eaa <__sfputc_r>:
 8010eaa:	6893      	ldr	r3, [r2, #8]
 8010eac:	b410      	push	{r4}
 8010eae:	3b01      	subs	r3, #1
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	6093      	str	r3, [r2, #8]
 8010eb4:	da07      	bge.n	8010ec6 <__sfputc_r+0x1c>
 8010eb6:	6994      	ldr	r4, [r2, #24]
 8010eb8:	42a3      	cmp	r3, r4
 8010eba:	db01      	blt.n	8010ec0 <__sfputc_r+0x16>
 8010ebc:	290a      	cmp	r1, #10
 8010ebe:	d102      	bne.n	8010ec6 <__sfputc_r+0x1c>
 8010ec0:	bc10      	pop	{r4}
 8010ec2:	f000 ba15 	b.w	80112f0 <__swbuf_r>
 8010ec6:	6813      	ldr	r3, [r2, #0]
 8010ec8:	1c58      	adds	r0, r3, #1
 8010eca:	6010      	str	r0, [r2, #0]
 8010ecc:	7019      	strb	r1, [r3, #0]
 8010ece:	4608      	mov	r0, r1
 8010ed0:	bc10      	pop	{r4}
 8010ed2:	4770      	bx	lr

08010ed4 <__sfputs_r>:
 8010ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ed6:	4606      	mov	r6, r0
 8010ed8:	460f      	mov	r7, r1
 8010eda:	4614      	mov	r4, r2
 8010edc:	18d5      	adds	r5, r2, r3
 8010ede:	42ac      	cmp	r4, r5
 8010ee0:	d101      	bne.n	8010ee6 <__sfputs_r+0x12>
 8010ee2:	2000      	movs	r0, #0
 8010ee4:	e007      	b.n	8010ef6 <__sfputs_r+0x22>
 8010ee6:	463a      	mov	r2, r7
 8010ee8:	4630      	mov	r0, r6
 8010eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010eee:	f7ff ffdc 	bl	8010eaa <__sfputc_r>
 8010ef2:	1c43      	adds	r3, r0, #1
 8010ef4:	d1f3      	bne.n	8010ede <__sfputs_r+0xa>
 8010ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010ef8 <_vfiprintf_r>:
 8010ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010efc:	460d      	mov	r5, r1
 8010efe:	4614      	mov	r4, r2
 8010f00:	4698      	mov	r8, r3
 8010f02:	4606      	mov	r6, r0
 8010f04:	b09d      	sub	sp, #116	@ 0x74
 8010f06:	b118      	cbz	r0, 8010f10 <_vfiprintf_r+0x18>
 8010f08:	6a03      	ldr	r3, [r0, #32]
 8010f0a:	b90b      	cbnz	r3, 8010f10 <_vfiprintf_r+0x18>
 8010f0c:	f7fd f8a6 	bl	800e05c <__sinit>
 8010f10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010f12:	07d9      	lsls	r1, r3, #31
 8010f14:	d405      	bmi.n	8010f22 <_vfiprintf_r+0x2a>
 8010f16:	89ab      	ldrh	r3, [r5, #12]
 8010f18:	059a      	lsls	r2, r3, #22
 8010f1a:	d402      	bmi.n	8010f22 <_vfiprintf_r+0x2a>
 8010f1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010f1e:	f7fe f815 	bl	800ef4c <__retarget_lock_acquire_recursive>
 8010f22:	89ab      	ldrh	r3, [r5, #12]
 8010f24:	071b      	lsls	r3, r3, #28
 8010f26:	d501      	bpl.n	8010f2c <_vfiprintf_r+0x34>
 8010f28:	692b      	ldr	r3, [r5, #16]
 8010f2a:	b99b      	cbnz	r3, 8010f54 <_vfiprintf_r+0x5c>
 8010f2c:	4629      	mov	r1, r5
 8010f2e:	4630      	mov	r0, r6
 8010f30:	f000 fa1c 	bl	801136c <__swsetup_r>
 8010f34:	b170      	cbz	r0, 8010f54 <_vfiprintf_r+0x5c>
 8010f36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010f38:	07dc      	lsls	r4, r3, #31
 8010f3a:	d504      	bpl.n	8010f46 <_vfiprintf_r+0x4e>
 8010f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8010f40:	b01d      	add	sp, #116	@ 0x74
 8010f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f46:	89ab      	ldrh	r3, [r5, #12]
 8010f48:	0598      	lsls	r0, r3, #22
 8010f4a:	d4f7      	bmi.n	8010f3c <_vfiprintf_r+0x44>
 8010f4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010f4e:	f7fd ffff 	bl	800ef50 <__retarget_lock_release_recursive>
 8010f52:	e7f3      	b.n	8010f3c <_vfiprintf_r+0x44>
 8010f54:	2300      	movs	r3, #0
 8010f56:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f58:	2320      	movs	r3, #32
 8010f5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010f5e:	2330      	movs	r3, #48	@ 0x30
 8010f60:	f04f 0901 	mov.w	r9, #1
 8010f64:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f68:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8011114 <_vfiprintf_r+0x21c>
 8010f6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010f70:	4623      	mov	r3, r4
 8010f72:	469a      	mov	sl, r3
 8010f74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f78:	b10a      	cbz	r2, 8010f7e <_vfiprintf_r+0x86>
 8010f7a:	2a25      	cmp	r2, #37	@ 0x25
 8010f7c:	d1f9      	bne.n	8010f72 <_vfiprintf_r+0x7a>
 8010f7e:	ebba 0b04 	subs.w	fp, sl, r4
 8010f82:	d00b      	beq.n	8010f9c <_vfiprintf_r+0xa4>
 8010f84:	465b      	mov	r3, fp
 8010f86:	4622      	mov	r2, r4
 8010f88:	4629      	mov	r1, r5
 8010f8a:	4630      	mov	r0, r6
 8010f8c:	f7ff ffa2 	bl	8010ed4 <__sfputs_r>
 8010f90:	3001      	adds	r0, #1
 8010f92:	f000 80a7 	beq.w	80110e4 <_vfiprintf_r+0x1ec>
 8010f96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010f98:	445a      	add	r2, fp
 8010f9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8010f9c:	f89a 3000 	ldrb.w	r3, [sl]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	f000 809f 	beq.w	80110e4 <_vfiprintf_r+0x1ec>
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8010fac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010fb0:	f10a 0a01 	add.w	sl, sl, #1
 8010fb4:	9304      	str	r3, [sp, #16]
 8010fb6:	9307      	str	r3, [sp, #28]
 8010fb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010fbc:	931a      	str	r3, [sp, #104]	@ 0x68
 8010fbe:	4654      	mov	r4, sl
 8010fc0:	2205      	movs	r2, #5
 8010fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fc6:	4853      	ldr	r0, [pc, #332]	@ (8011114 <_vfiprintf_r+0x21c>)
 8010fc8:	f7fd ffcb 	bl	800ef62 <memchr>
 8010fcc:	9a04      	ldr	r2, [sp, #16]
 8010fce:	b9d8      	cbnz	r0, 8011008 <_vfiprintf_r+0x110>
 8010fd0:	06d1      	lsls	r1, r2, #27
 8010fd2:	bf44      	itt	mi
 8010fd4:	2320      	movmi	r3, #32
 8010fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010fda:	0713      	lsls	r3, r2, #28
 8010fdc:	bf44      	itt	mi
 8010fde:	232b      	movmi	r3, #43	@ 0x2b
 8010fe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8010fe8:	2b2a      	cmp	r3, #42	@ 0x2a
 8010fea:	d015      	beq.n	8011018 <_vfiprintf_r+0x120>
 8010fec:	4654      	mov	r4, sl
 8010fee:	2000      	movs	r0, #0
 8010ff0:	f04f 0c0a 	mov.w	ip, #10
 8010ff4:	9a07      	ldr	r2, [sp, #28]
 8010ff6:	4621      	mov	r1, r4
 8010ff8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ffc:	3b30      	subs	r3, #48	@ 0x30
 8010ffe:	2b09      	cmp	r3, #9
 8011000:	d94b      	bls.n	801109a <_vfiprintf_r+0x1a2>
 8011002:	b1b0      	cbz	r0, 8011032 <_vfiprintf_r+0x13a>
 8011004:	9207      	str	r2, [sp, #28]
 8011006:	e014      	b.n	8011032 <_vfiprintf_r+0x13a>
 8011008:	eba0 0308 	sub.w	r3, r0, r8
 801100c:	fa09 f303 	lsl.w	r3, r9, r3
 8011010:	4313      	orrs	r3, r2
 8011012:	46a2      	mov	sl, r4
 8011014:	9304      	str	r3, [sp, #16]
 8011016:	e7d2      	b.n	8010fbe <_vfiprintf_r+0xc6>
 8011018:	9b03      	ldr	r3, [sp, #12]
 801101a:	1d19      	adds	r1, r3, #4
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	9103      	str	r1, [sp, #12]
 8011020:	2b00      	cmp	r3, #0
 8011022:	bfbb      	ittet	lt
 8011024:	425b      	neglt	r3, r3
 8011026:	f042 0202 	orrlt.w	r2, r2, #2
 801102a:	9307      	strge	r3, [sp, #28]
 801102c:	9307      	strlt	r3, [sp, #28]
 801102e:	bfb8      	it	lt
 8011030:	9204      	strlt	r2, [sp, #16]
 8011032:	7823      	ldrb	r3, [r4, #0]
 8011034:	2b2e      	cmp	r3, #46	@ 0x2e
 8011036:	d10a      	bne.n	801104e <_vfiprintf_r+0x156>
 8011038:	7863      	ldrb	r3, [r4, #1]
 801103a:	2b2a      	cmp	r3, #42	@ 0x2a
 801103c:	d132      	bne.n	80110a4 <_vfiprintf_r+0x1ac>
 801103e:	9b03      	ldr	r3, [sp, #12]
 8011040:	3402      	adds	r4, #2
 8011042:	1d1a      	adds	r2, r3, #4
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	9203      	str	r2, [sp, #12]
 8011048:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801104c:	9305      	str	r3, [sp, #20]
 801104e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8011118 <_vfiprintf_r+0x220>
 8011052:	2203      	movs	r2, #3
 8011054:	4650      	mov	r0, sl
 8011056:	7821      	ldrb	r1, [r4, #0]
 8011058:	f7fd ff83 	bl	800ef62 <memchr>
 801105c:	b138      	cbz	r0, 801106e <_vfiprintf_r+0x176>
 801105e:	2240      	movs	r2, #64	@ 0x40
 8011060:	9b04      	ldr	r3, [sp, #16]
 8011062:	eba0 000a 	sub.w	r0, r0, sl
 8011066:	4082      	lsls	r2, r0
 8011068:	4313      	orrs	r3, r2
 801106a:	3401      	adds	r4, #1
 801106c:	9304      	str	r3, [sp, #16]
 801106e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011072:	2206      	movs	r2, #6
 8011074:	4829      	ldr	r0, [pc, #164]	@ (801111c <_vfiprintf_r+0x224>)
 8011076:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801107a:	f7fd ff72 	bl	800ef62 <memchr>
 801107e:	2800      	cmp	r0, #0
 8011080:	d03f      	beq.n	8011102 <_vfiprintf_r+0x20a>
 8011082:	4b27      	ldr	r3, [pc, #156]	@ (8011120 <_vfiprintf_r+0x228>)
 8011084:	bb1b      	cbnz	r3, 80110ce <_vfiprintf_r+0x1d6>
 8011086:	9b03      	ldr	r3, [sp, #12]
 8011088:	3307      	adds	r3, #7
 801108a:	f023 0307 	bic.w	r3, r3, #7
 801108e:	3308      	adds	r3, #8
 8011090:	9303      	str	r3, [sp, #12]
 8011092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011094:	443b      	add	r3, r7
 8011096:	9309      	str	r3, [sp, #36]	@ 0x24
 8011098:	e76a      	b.n	8010f70 <_vfiprintf_r+0x78>
 801109a:	460c      	mov	r4, r1
 801109c:	2001      	movs	r0, #1
 801109e:	fb0c 3202 	mla	r2, ip, r2, r3
 80110a2:	e7a8      	b.n	8010ff6 <_vfiprintf_r+0xfe>
 80110a4:	2300      	movs	r3, #0
 80110a6:	f04f 0c0a 	mov.w	ip, #10
 80110aa:	4619      	mov	r1, r3
 80110ac:	3401      	adds	r4, #1
 80110ae:	9305      	str	r3, [sp, #20]
 80110b0:	4620      	mov	r0, r4
 80110b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80110b6:	3a30      	subs	r2, #48	@ 0x30
 80110b8:	2a09      	cmp	r2, #9
 80110ba:	d903      	bls.n	80110c4 <_vfiprintf_r+0x1cc>
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d0c6      	beq.n	801104e <_vfiprintf_r+0x156>
 80110c0:	9105      	str	r1, [sp, #20]
 80110c2:	e7c4      	b.n	801104e <_vfiprintf_r+0x156>
 80110c4:	4604      	mov	r4, r0
 80110c6:	2301      	movs	r3, #1
 80110c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80110cc:	e7f0      	b.n	80110b0 <_vfiprintf_r+0x1b8>
 80110ce:	ab03      	add	r3, sp, #12
 80110d0:	9300      	str	r3, [sp, #0]
 80110d2:	462a      	mov	r2, r5
 80110d4:	4630      	mov	r0, r6
 80110d6:	4b13      	ldr	r3, [pc, #76]	@ (8011124 <_vfiprintf_r+0x22c>)
 80110d8:	a904      	add	r1, sp, #16
 80110da:	f7fc fb75 	bl	800d7c8 <_printf_float>
 80110de:	4607      	mov	r7, r0
 80110e0:	1c78      	adds	r0, r7, #1
 80110e2:	d1d6      	bne.n	8011092 <_vfiprintf_r+0x19a>
 80110e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80110e6:	07d9      	lsls	r1, r3, #31
 80110e8:	d405      	bmi.n	80110f6 <_vfiprintf_r+0x1fe>
 80110ea:	89ab      	ldrh	r3, [r5, #12]
 80110ec:	059a      	lsls	r2, r3, #22
 80110ee:	d402      	bmi.n	80110f6 <_vfiprintf_r+0x1fe>
 80110f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80110f2:	f7fd ff2d 	bl	800ef50 <__retarget_lock_release_recursive>
 80110f6:	89ab      	ldrh	r3, [r5, #12]
 80110f8:	065b      	lsls	r3, r3, #25
 80110fa:	f53f af1f 	bmi.w	8010f3c <_vfiprintf_r+0x44>
 80110fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011100:	e71e      	b.n	8010f40 <_vfiprintf_r+0x48>
 8011102:	ab03      	add	r3, sp, #12
 8011104:	9300      	str	r3, [sp, #0]
 8011106:	462a      	mov	r2, r5
 8011108:	4630      	mov	r0, r6
 801110a:	4b06      	ldr	r3, [pc, #24]	@ (8011124 <_vfiprintf_r+0x22c>)
 801110c:	a904      	add	r1, sp, #16
 801110e:	f7fc fdf9 	bl	800dd04 <_printf_i>
 8011112:	e7e4      	b.n	80110de <_vfiprintf_r+0x1e6>
 8011114:	080124c8 	.word	0x080124c8
 8011118:	080124ce 	.word	0x080124ce
 801111c:	080124d2 	.word	0x080124d2
 8011120:	0800d7c9 	.word	0x0800d7c9
 8011124:	08010ed5 	.word	0x08010ed5

08011128 <__sflush_r>:
 8011128:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801112c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801112e:	0716      	lsls	r6, r2, #28
 8011130:	4605      	mov	r5, r0
 8011132:	460c      	mov	r4, r1
 8011134:	d454      	bmi.n	80111e0 <__sflush_r+0xb8>
 8011136:	684b      	ldr	r3, [r1, #4]
 8011138:	2b00      	cmp	r3, #0
 801113a:	dc02      	bgt.n	8011142 <__sflush_r+0x1a>
 801113c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801113e:	2b00      	cmp	r3, #0
 8011140:	dd48      	ble.n	80111d4 <__sflush_r+0xac>
 8011142:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011144:	2e00      	cmp	r6, #0
 8011146:	d045      	beq.n	80111d4 <__sflush_r+0xac>
 8011148:	2300      	movs	r3, #0
 801114a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801114e:	682f      	ldr	r7, [r5, #0]
 8011150:	6a21      	ldr	r1, [r4, #32]
 8011152:	602b      	str	r3, [r5, #0]
 8011154:	d030      	beq.n	80111b8 <__sflush_r+0x90>
 8011156:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011158:	89a3      	ldrh	r3, [r4, #12]
 801115a:	0759      	lsls	r1, r3, #29
 801115c:	d505      	bpl.n	801116a <__sflush_r+0x42>
 801115e:	6863      	ldr	r3, [r4, #4]
 8011160:	1ad2      	subs	r2, r2, r3
 8011162:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011164:	b10b      	cbz	r3, 801116a <__sflush_r+0x42>
 8011166:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011168:	1ad2      	subs	r2, r2, r3
 801116a:	2300      	movs	r3, #0
 801116c:	4628      	mov	r0, r5
 801116e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011170:	6a21      	ldr	r1, [r4, #32]
 8011172:	47b0      	blx	r6
 8011174:	1c43      	adds	r3, r0, #1
 8011176:	89a3      	ldrh	r3, [r4, #12]
 8011178:	d106      	bne.n	8011188 <__sflush_r+0x60>
 801117a:	6829      	ldr	r1, [r5, #0]
 801117c:	291d      	cmp	r1, #29
 801117e:	d82b      	bhi.n	80111d8 <__sflush_r+0xb0>
 8011180:	4a28      	ldr	r2, [pc, #160]	@ (8011224 <__sflush_r+0xfc>)
 8011182:	410a      	asrs	r2, r1
 8011184:	07d6      	lsls	r6, r2, #31
 8011186:	d427      	bmi.n	80111d8 <__sflush_r+0xb0>
 8011188:	2200      	movs	r2, #0
 801118a:	6062      	str	r2, [r4, #4]
 801118c:	6922      	ldr	r2, [r4, #16]
 801118e:	04d9      	lsls	r1, r3, #19
 8011190:	6022      	str	r2, [r4, #0]
 8011192:	d504      	bpl.n	801119e <__sflush_r+0x76>
 8011194:	1c42      	adds	r2, r0, #1
 8011196:	d101      	bne.n	801119c <__sflush_r+0x74>
 8011198:	682b      	ldr	r3, [r5, #0]
 801119a:	b903      	cbnz	r3, 801119e <__sflush_r+0x76>
 801119c:	6560      	str	r0, [r4, #84]	@ 0x54
 801119e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80111a0:	602f      	str	r7, [r5, #0]
 80111a2:	b1b9      	cbz	r1, 80111d4 <__sflush_r+0xac>
 80111a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80111a8:	4299      	cmp	r1, r3
 80111aa:	d002      	beq.n	80111b2 <__sflush_r+0x8a>
 80111ac:	4628      	mov	r0, r5
 80111ae:	f7fe fd77 	bl	800fca0 <_free_r>
 80111b2:	2300      	movs	r3, #0
 80111b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80111b6:	e00d      	b.n	80111d4 <__sflush_r+0xac>
 80111b8:	2301      	movs	r3, #1
 80111ba:	4628      	mov	r0, r5
 80111bc:	47b0      	blx	r6
 80111be:	4602      	mov	r2, r0
 80111c0:	1c50      	adds	r0, r2, #1
 80111c2:	d1c9      	bne.n	8011158 <__sflush_r+0x30>
 80111c4:	682b      	ldr	r3, [r5, #0]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d0c6      	beq.n	8011158 <__sflush_r+0x30>
 80111ca:	2b1d      	cmp	r3, #29
 80111cc:	d001      	beq.n	80111d2 <__sflush_r+0xaa>
 80111ce:	2b16      	cmp	r3, #22
 80111d0:	d11d      	bne.n	801120e <__sflush_r+0xe6>
 80111d2:	602f      	str	r7, [r5, #0]
 80111d4:	2000      	movs	r0, #0
 80111d6:	e021      	b.n	801121c <__sflush_r+0xf4>
 80111d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80111dc:	b21b      	sxth	r3, r3
 80111de:	e01a      	b.n	8011216 <__sflush_r+0xee>
 80111e0:	690f      	ldr	r7, [r1, #16]
 80111e2:	2f00      	cmp	r7, #0
 80111e4:	d0f6      	beq.n	80111d4 <__sflush_r+0xac>
 80111e6:	0793      	lsls	r3, r2, #30
 80111e8:	bf18      	it	ne
 80111ea:	2300      	movne	r3, #0
 80111ec:	680e      	ldr	r6, [r1, #0]
 80111ee:	bf08      	it	eq
 80111f0:	694b      	ldreq	r3, [r1, #20]
 80111f2:	1bf6      	subs	r6, r6, r7
 80111f4:	600f      	str	r7, [r1, #0]
 80111f6:	608b      	str	r3, [r1, #8]
 80111f8:	2e00      	cmp	r6, #0
 80111fa:	ddeb      	ble.n	80111d4 <__sflush_r+0xac>
 80111fc:	4633      	mov	r3, r6
 80111fe:	463a      	mov	r2, r7
 8011200:	4628      	mov	r0, r5
 8011202:	6a21      	ldr	r1, [r4, #32]
 8011204:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8011208:	47e0      	blx	ip
 801120a:	2800      	cmp	r0, #0
 801120c:	dc07      	bgt.n	801121e <__sflush_r+0xf6>
 801120e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011216:	f04f 30ff 	mov.w	r0, #4294967295
 801121a:	81a3      	strh	r3, [r4, #12]
 801121c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801121e:	4407      	add	r7, r0
 8011220:	1a36      	subs	r6, r6, r0
 8011222:	e7e9      	b.n	80111f8 <__sflush_r+0xd0>
 8011224:	dfbffffe 	.word	0xdfbffffe

08011228 <_fflush_r>:
 8011228:	b538      	push	{r3, r4, r5, lr}
 801122a:	690b      	ldr	r3, [r1, #16]
 801122c:	4605      	mov	r5, r0
 801122e:	460c      	mov	r4, r1
 8011230:	b913      	cbnz	r3, 8011238 <_fflush_r+0x10>
 8011232:	2500      	movs	r5, #0
 8011234:	4628      	mov	r0, r5
 8011236:	bd38      	pop	{r3, r4, r5, pc}
 8011238:	b118      	cbz	r0, 8011242 <_fflush_r+0x1a>
 801123a:	6a03      	ldr	r3, [r0, #32]
 801123c:	b90b      	cbnz	r3, 8011242 <_fflush_r+0x1a>
 801123e:	f7fc ff0d 	bl	800e05c <__sinit>
 8011242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d0f3      	beq.n	8011232 <_fflush_r+0xa>
 801124a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801124c:	07d0      	lsls	r0, r2, #31
 801124e:	d404      	bmi.n	801125a <_fflush_r+0x32>
 8011250:	0599      	lsls	r1, r3, #22
 8011252:	d402      	bmi.n	801125a <_fflush_r+0x32>
 8011254:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011256:	f7fd fe79 	bl	800ef4c <__retarget_lock_acquire_recursive>
 801125a:	4628      	mov	r0, r5
 801125c:	4621      	mov	r1, r4
 801125e:	f7ff ff63 	bl	8011128 <__sflush_r>
 8011262:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011264:	4605      	mov	r5, r0
 8011266:	07da      	lsls	r2, r3, #31
 8011268:	d4e4      	bmi.n	8011234 <_fflush_r+0xc>
 801126a:	89a3      	ldrh	r3, [r4, #12]
 801126c:	059b      	lsls	r3, r3, #22
 801126e:	d4e1      	bmi.n	8011234 <_fflush_r+0xc>
 8011270:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011272:	f7fd fe6d 	bl	800ef50 <__retarget_lock_release_recursive>
 8011276:	e7dd      	b.n	8011234 <_fflush_r+0xc>

08011278 <fiprintf>:
 8011278:	b40e      	push	{r1, r2, r3}
 801127a:	b503      	push	{r0, r1, lr}
 801127c:	4601      	mov	r1, r0
 801127e:	ab03      	add	r3, sp, #12
 8011280:	4805      	ldr	r0, [pc, #20]	@ (8011298 <fiprintf+0x20>)
 8011282:	f853 2b04 	ldr.w	r2, [r3], #4
 8011286:	6800      	ldr	r0, [r0, #0]
 8011288:	9301      	str	r3, [sp, #4]
 801128a:	f7ff fe35 	bl	8010ef8 <_vfiprintf_r>
 801128e:	b002      	add	sp, #8
 8011290:	f85d eb04 	ldr.w	lr, [sp], #4
 8011294:	b003      	add	sp, #12
 8011296:	4770      	bx	lr
 8011298:	20000284 	.word	0x20000284

0801129c <siscanf>:
 801129c:	b40e      	push	{r1, r2, r3}
 801129e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80112a2:	b530      	push	{r4, r5, lr}
 80112a4:	b09c      	sub	sp, #112	@ 0x70
 80112a6:	ac1f      	add	r4, sp, #124	@ 0x7c
 80112a8:	f854 5b04 	ldr.w	r5, [r4], #4
 80112ac:	f8ad 2014 	strh.w	r2, [sp, #20]
 80112b0:	9002      	str	r0, [sp, #8]
 80112b2:	9006      	str	r0, [sp, #24]
 80112b4:	f7ee ffc6 	bl	8000244 <strlen>
 80112b8:	4b0b      	ldr	r3, [pc, #44]	@ (80112e8 <siscanf+0x4c>)
 80112ba:	9003      	str	r0, [sp, #12]
 80112bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80112be:	2300      	movs	r3, #0
 80112c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80112c2:	9314      	str	r3, [sp, #80]	@ 0x50
 80112c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80112c8:	9007      	str	r0, [sp, #28]
 80112ca:	4808      	ldr	r0, [pc, #32]	@ (80112ec <siscanf+0x50>)
 80112cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80112d0:	462a      	mov	r2, r5
 80112d2:	4623      	mov	r3, r4
 80112d4:	a902      	add	r1, sp, #8
 80112d6:	6800      	ldr	r0, [r0, #0]
 80112d8:	9401      	str	r4, [sp, #4]
 80112da:	f000 f94f 	bl	801157c <__ssvfiscanf_r>
 80112de:	b01c      	add	sp, #112	@ 0x70
 80112e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80112e4:	b003      	add	sp, #12
 80112e6:	4770      	bx	lr
 80112e8:	0800e10f 	.word	0x0800e10f
 80112ec:	20000284 	.word	0x20000284

080112f0 <__swbuf_r>:
 80112f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112f2:	460e      	mov	r6, r1
 80112f4:	4614      	mov	r4, r2
 80112f6:	4605      	mov	r5, r0
 80112f8:	b118      	cbz	r0, 8011302 <__swbuf_r+0x12>
 80112fa:	6a03      	ldr	r3, [r0, #32]
 80112fc:	b90b      	cbnz	r3, 8011302 <__swbuf_r+0x12>
 80112fe:	f7fc fead 	bl	800e05c <__sinit>
 8011302:	69a3      	ldr	r3, [r4, #24]
 8011304:	60a3      	str	r3, [r4, #8]
 8011306:	89a3      	ldrh	r3, [r4, #12]
 8011308:	071a      	lsls	r2, r3, #28
 801130a:	d501      	bpl.n	8011310 <__swbuf_r+0x20>
 801130c:	6923      	ldr	r3, [r4, #16]
 801130e:	b943      	cbnz	r3, 8011322 <__swbuf_r+0x32>
 8011310:	4621      	mov	r1, r4
 8011312:	4628      	mov	r0, r5
 8011314:	f000 f82a 	bl	801136c <__swsetup_r>
 8011318:	b118      	cbz	r0, 8011322 <__swbuf_r+0x32>
 801131a:	f04f 37ff 	mov.w	r7, #4294967295
 801131e:	4638      	mov	r0, r7
 8011320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011322:	6823      	ldr	r3, [r4, #0]
 8011324:	6922      	ldr	r2, [r4, #16]
 8011326:	b2f6      	uxtb	r6, r6
 8011328:	1a98      	subs	r0, r3, r2
 801132a:	6963      	ldr	r3, [r4, #20]
 801132c:	4637      	mov	r7, r6
 801132e:	4283      	cmp	r3, r0
 8011330:	dc05      	bgt.n	801133e <__swbuf_r+0x4e>
 8011332:	4621      	mov	r1, r4
 8011334:	4628      	mov	r0, r5
 8011336:	f7ff ff77 	bl	8011228 <_fflush_r>
 801133a:	2800      	cmp	r0, #0
 801133c:	d1ed      	bne.n	801131a <__swbuf_r+0x2a>
 801133e:	68a3      	ldr	r3, [r4, #8]
 8011340:	3b01      	subs	r3, #1
 8011342:	60a3      	str	r3, [r4, #8]
 8011344:	6823      	ldr	r3, [r4, #0]
 8011346:	1c5a      	adds	r2, r3, #1
 8011348:	6022      	str	r2, [r4, #0]
 801134a:	701e      	strb	r6, [r3, #0]
 801134c:	6962      	ldr	r2, [r4, #20]
 801134e:	1c43      	adds	r3, r0, #1
 8011350:	429a      	cmp	r2, r3
 8011352:	d004      	beq.n	801135e <__swbuf_r+0x6e>
 8011354:	89a3      	ldrh	r3, [r4, #12]
 8011356:	07db      	lsls	r3, r3, #31
 8011358:	d5e1      	bpl.n	801131e <__swbuf_r+0x2e>
 801135a:	2e0a      	cmp	r6, #10
 801135c:	d1df      	bne.n	801131e <__swbuf_r+0x2e>
 801135e:	4621      	mov	r1, r4
 8011360:	4628      	mov	r0, r5
 8011362:	f7ff ff61 	bl	8011228 <_fflush_r>
 8011366:	2800      	cmp	r0, #0
 8011368:	d0d9      	beq.n	801131e <__swbuf_r+0x2e>
 801136a:	e7d6      	b.n	801131a <__swbuf_r+0x2a>

0801136c <__swsetup_r>:
 801136c:	b538      	push	{r3, r4, r5, lr}
 801136e:	4b29      	ldr	r3, [pc, #164]	@ (8011414 <__swsetup_r+0xa8>)
 8011370:	4605      	mov	r5, r0
 8011372:	6818      	ldr	r0, [r3, #0]
 8011374:	460c      	mov	r4, r1
 8011376:	b118      	cbz	r0, 8011380 <__swsetup_r+0x14>
 8011378:	6a03      	ldr	r3, [r0, #32]
 801137a:	b90b      	cbnz	r3, 8011380 <__swsetup_r+0x14>
 801137c:	f7fc fe6e 	bl	800e05c <__sinit>
 8011380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011384:	0719      	lsls	r1, r3, #28
 8011386:	d422      	bmi.n	80113ce <__swsetup_r+0x62>
 8011388:	06da      	lsls	r2, r3, #27
 801138a:	d407      	bmi.n	801139c <__swsetup_r+0x30>
 801138c:	2209      	movs	r2, #9
 801138e:	602a      	str	r2, [r5, #0]
 8011390:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011394:	f04f 30ff 	mov.w	r0, #4294967295
 8011398:	81a3      	strh	r3, [r4, #12]
 801139a:	e033      	b.n	8011404 <__swsetup_r+0x98>
 801139c:	0758      	lsls	r0, r3, #29
 801139e:	d512      	bpl.n	80113c6 <__swsetup_r+0x5a>
 80113a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80113a2:	b141      	cbz	r1, 80113b6 <__swsetup_r+0x4a>
 80113a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80113a8:	4299      	cmp	r1, r3
 80113aa:	d002      	beq.n	80113b2 <__swsetup_r+0x46>
 80113ac:	4628      	mov	r0, r5
 80113ae:	f7fe fc77 	bl	800fca0 <_free_r>
 80113b2:	2300      	movs	r3, #0
 80113b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80113b6:	89a3      	ldrh	r3, [r4, #12]
 80113b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80113bc:	81a3      	strh	r3, [r4, #12]
 80113be:	2300      	movs	r3, #0
 80113c0:	6063      	str	r3, [r4, #4]
 80113c2:	6923      	ldr	r3, [r4, #16]
 80113c4:	6023      	str	r3, [r4, #0]
 80113c6:	89a3      	ldrh	r3, [r4, #12]
 80113c8:	f043 0308 	orr.w	r3, r3, #8
 80113cc:	81a3      	strh	r3, [r4, #12]
 80113ce:	6923      	ldr	r3, [r4, #16]
 80113d0:	b94b      	cbnz	r3, 80113e6 <__swsetup_r+0x7a>
 80113d2:	89a3      	ldrh	r3, [r4, #12]
 80113d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80113d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80113dc:	d003      	beq.n	80113e6 <__swsetup_r+0x7a>
 80113de:	4621      	mov	r1, r4
 80113e0:	4628      	mov	r0, r5
 80113e2:	f000 fbae 	bl	8011b42 <__smakebuf_r>
 80113e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113ea:	f013 0201 	ands.w	r2, r3, #1
 80113ee:	d00a      	beq.n	8011406 <__swsetup_r+0x9a>
 80113f0:	2200      	movs	r2, #0
 80113f2:	60a2      	str	r2, [r4, #8]
 80113f4:	6962      	ldr	r2, [r4, #20]
 80113f6:	4252      	negs	r2, r2
 80113f8:	61a2      	str	r2, [r4, #24]
 80113fa:	6922      	ldr	r2, [r4, #16]
 80113fc:	b942      	cbnz	r2, 8011410 <__swsetup_r+0xa4>
 80113fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011402:	d1c5      	bne.n	8011390 <__swsetup_r+0x24>
 8011404:	bd38      	pop	{r3, r4, r5, pc}
 8011406:	0799      	lsls	r1, r3, #30
 8011408:	bf58      	it	pl
 801140a:	6962      	ldrpl	r2, [r4, #20]
 801140c:	60a2      	str	r2, [r4, #8]
 801140e:	e7f4      	b.n	80113fa <__swsetup_r+0x8e>
 8011410:	2000      	movs	r0, #0
 8011412:	e7f7      	b.n	8011404 <__swsetup_r+0x98>
 8011414:	20000284 	.word	0x20000284

08011418 <__gettzinfo>:
 8011418:	4800      	ldr	r0, [pc, #0]	@ (801141c <__gettzinfo+0x4>)
 801141a:	4770      	bx	lr
 801141c:	200002d8 	.word	0x200002d8

08011420 <abort>:
 8011420:	2006      	movs	r0, #6
 8011422:	b508      	push	{r3, lr}
 8011424:	f000 fc62 	bl	8011cec <raise>
 8011428:	2001      	movs	r0, #1
 801142a:	f7f2 ffa0 	bl	800436e <_exit>

0801142e <_calloc_r>:
 801142e:	b570      	push	{r4, r5, r6, lr}
 8011430:	fba1 5402 	umull	r5, r4, r1, r2
 8011434:	b93c      	cbnz	r4, 8011446 <_calloc_r+0x18>
 8011436:	4629      	mov	r1, r5
 8011438:	f7fb f9c2 	bl	800c7c0 <_malloc_r>
 801143c:	4606      	mov	r6, r0
 801143e:	b928      	cbnz	r0, 801144c <_calloc_r+0x1e>
 8011440:	2600      	movs	r6, #0
 8011442:	4630      	mov	r0, r6
 8011444:	bd70      	pop	{r4, r5, r6, pc}
 8011446:	220c      	movs	r2, #12
 8011448:	6002      	str	r2, [r0, #0]
 801144a:	e7f9      	b.n	8011440 <_calloc_r+0x12>
 801144c:	462a      	mov	r2, r5
 801144e:	4621      	mov	r1, r4
 8011450:	f7fc fe91 	bl	800e176 <memset>
 8011454:	e7f5      	b.n	8011442 <_calloc_r+0x14>
	...

08011458 <__env_lock>:
 8011458:	4801      	ldr	r0, [pc, #4]	@ (8011460 <__env_lock+0x8>)
 801145a:	f7fd bd77 	b.w	800ef4c <__retarget_lock_acquire_recursive>
 801145e:	bf00      	nop
 8011460:	20005b8d 	.word	0x20005b8d

08011464 <__env_unlock>:
 8011464:	4801      	ldr	r0, [pc, #4]	@ (801146c <__env_unlock+0x8>)
 8011466:	f7fd bd73 	b.w	800ef50 <__retarget_lock_release_recursive>
 801146a:	bf00      	nop
 801146c:	20005b8d 	.word	0x20005b8d

08011470 <_realloc_r>:
 8011470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011474:	4680      	mov	r8, r0
 8011476:	4615      	mov	r5, r2
 8011478:	460c      	mov	r4, r1
 801147a:	b921      	cbnz	r1, 8011486 <_realloc_r+0x16>
 801147c:	4611      	mov	r1, r2
 801147e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011482:	f7fb b99d 	b.w	800c7c0 <_malloc_r>
 8011486:	b92a      	cbnz	r2, 8011494 <_realloc_r+0x24>
 8011488:	f7fe fc0a 	bl	800fca0 <_free_r>
 801148c:	2400      	movs	r4, #0
 801148e:	4620      	mov	r0, r4
 8011490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011494:	f000 fc68 	bl	8011d68 <_malloc_usable_size_r>
 8011498:	4285      	cmp	r5, r0
 801149a:	4606      	mov	r6, r0
 801149c:	d802      	bhi.n	80114a4 <_realloc_r+0x34>
 801149e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80114a2:	d8f4      	bhi.n	801148e <_realloc_r+0x1e>
 80114a4:	4629      	mov	r1, r5
 80114a6:	4640      	mov	r0, r8
 80114a8:	f7fb f98a 	bl	800c7c0 <_malloc_r>
 80114ac:	4607      	mov	r7, r0
 80114ae:	2800      	cmp	r0, #0
 80114b0:	d0ec      	beq.n	801148c <_realloc_r+0x1c>
 80114b2:	42b5      	cmp	r5, r6
 80114b4:	462a      	mov	r2, r5
 80114b6:	4621      	mov	r1, r4
 80114b8:	bf28      	it	cs
 80114ba:	4632      	movcs	r2, r6
 80114bc:	f7fd fd5f 	bl	800ef7e <memcpy>
 80114c0:	4621      	mov	r1, r4
 80114c2:	4640      	mov	r0, r8
 80114c4:	f7fe fbec 	bl	800fca0 <_free_r>
 80114c8:	463c      	mov	r4, r7
 80114ca:	e7e0      	b.n	801148e <_realloc_r+0x1e>

080114cc <_sungetc_r>:
 80114cc:	b538      	push	{r3, r4, r5, lr}
 80114ce:	1c4b      	adds	r3, r1, #1
 80114d0:	4614      	mov	r4, r2
 80114d2:	d103      	bne.n	80114dc <_sungetc_r+0x10>
 80114d4:	f04f 35ff 	mov.w	r5, #4294967295
 80114d8:	4628      	mov	r0, r5
 80114da:	bd38      	pop	{r3, r4, r5, pc}
 80114dc:	8993      	ldrh	r3, [r2, #12]
 80114de:	b2cd      	uxtb	r5, r1
 80114e0:	f023 0320 	bic.w	r3, r3, #32
 80114e4:	8193      	strh	r3, [r2, #12]
 80114e6:	6853      	ldr	r3, [r2, #4]
 80114e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80114ea:	b18a      	cbz	r2, 8011510 <_sungetc_r+0x44>
 80114ec:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80114ee:	429a      	cmp	r2, r3
 80114f0:	dd08      	ble.n	8011504 <_sungetc_r+0x38>
 80114f2:	6823      	ldr	r3, [r4, #0]
 80114f4:	1e5a      	subs	r2, r3, #1
 80114f6:	6022      	str	r2, [r4, #0]
 80114f8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80114fc:	6863      	ldr	r3, [r4, #4]
 80114fe:	3301      	adds	r3, #1
 8011500:	6063      	str	r3, [r4, #4]
 8011502:	e7e9      	b.n	80114d8 <_sungetc_r+0xc>
 8011504:	4621      	mov	r1, r4
 8011506:	f000 fb91 	bl	8011c2c <__submore>
 801150a:	2800      	cmp	r0, #0
 801150c:	d0f1      	beq.n	80114f2 <_sungetc_r+0x26>
 801150e:	e7e1      	b.n	80114d4 <_sungetc_r+0x8>
 8011510:	6921      	ldr	r1, [r4, #16]
 8011512:	6822      	ldr	r2, [r4, #0]
 8011514:	b141      	cbz	r1, 8011528 <_sungetc_r+0x5c>
 8011516:	4291      	cmp	r1, r2
 8011518:	d206      	bcs.n	8011528 <_sungetc_r+0x5c>
 801151a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801151e:	42a9      	cmp	r1, r5
 8011520:	d102      	bne.n	8011528 <_sungetc_r+0x5c>
 8011522:	3a01      	subs	r2, #1
 8011524:	6022      	str	r2, [r4, #0]
 8011526:	e7ea      	b.n	80114fe <_sungetc_r+0x32>
 8011528:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 801152c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011530:	6363      	str	r3, [r4, #52]	@ 0x34
 8011532:	2303      	movs	r3, #3
 8011534:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011536:	4623      	mov	r3, r4
 8011538:	f803 5f46 	strb.w	r5, [r3, #70]!
 801153c:	6023      	str	r3, [r4, #0]
 801153e:	2301      	movs	r3, #1
 8011540:	e7de      	b.n	8011500 <_sungetc_r+0x34>

08011542 <__ssrefill_r>:
 8011542:	b510      	push	{r4, lr}
 8011544:	460c      	mov	r4, r1
 8011546:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011548:	b169      	cbz	r1, 8011566 <__ssrefill_r+0x24>
 801154a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801154e:	4299      	cmp	r1, r3
 8011550:	d001      	beq.n	8011556 <__ssrefill_r+0x14>
 8011552:	f7fe fba5 	bl	800fca0 <_free_r>
 8011556:	2000      	movs	r0, #0
 8011558:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801155a:	6360      	str	r0, [r4, #52]	@ 0x34
 801155c:	6063      	str	r3, [r4, #4]
 801155e:	b113      	cbz	r3, 8011566 <__ssrefill_r+0x24>
 8011560:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011562:	6023      	str	r3, [r4, #0]
 8011564:	bd10      	pop	{r4, pc}
 8011566:	6923      	ldr	r3, [r4, #16]
 8011568:	f04f 30ff 	mov.w	r0, #4294967295
 801156c:	6023      	str	r3, [r4, #0]
 801156e:	2300      	movs	r3, #0
 8011570:	6063      	str	r3, [r4, #4]
 8011572:	89a3      	ldrh	r3, [r4, #12]
 8011574:	f043 0320 	orr.w	r3, r3, #32
 8011578:	81a3      	strh	r3, [r4, #12]
 801157a:	e7f3      	b.n	8011564 <__ssrefill_r+0x22>

0801157c <__ssvfiscanf_r>:
 801157c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011580:	460c      	mov	r4, r1
 8011582:	2100      	movs	r1, #0
 8011584:	4606      	mov	r6, r0
 8011586:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801158a:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801158e:	49aa      	ldr	r1, [pc, #680]	@ (8011838 <__ssvfiscanf_r+0x2bc>)
 8011590:	f10d 0804 	add.w	r8, sp, #4
 8011594:	91a0      	str	r1, [sp, #640]	@ 0x280
 8011596:	49a9      	ldr	r1, [pc, #676]	@ (801183c <__ssvfiscanf_r+0x2c0>)
 8011598:	4fa9      	ldr	r7, [pc, #676]	@ (8011840 <__ssvfiscanf_r+0x2c4>)
 801159a:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801159e:	91a1      	str	r1, [sp, #644]	@ 0x284
 80115a0:	9300      	str	r3, [sp, #0]
 80115a2:	7813      	ldrb	r3, [r2, #0]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	f000 8159 	beq.w	801185c <__ssvfiscanf_r+0x2e0>
 80115aa:	5cf9      	ldrb	r1, [r7, r3]
 80115ac:	1c55      	adds	r5, r2, #1
 80115ae:	f011 0108 	ands.w	r1, r1, #8
 80115b2:	d019      	beq.n	80115e8 <__ssvfiscanf_r+0x6c>
 80115b4:	6863      	ldr	r3, [r4, #4]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	dd0f      	ble.n	80115da <__ssvfiscanf_r+0x5e>
 80115ba:	6823      	ldr	r3, [r4, #0]
 80115bc:	781a      	ldrb	r2, [r3, #0]
 80115be:	5cba      	ldrb	r2, [r7, r2]
 80115c0:	0712      	lsls	r2, r2, #28
 80115c2:	d401      	bmi.n	80115c8 <__ssvfiscanf_r+0x4c>
 80115c4:	462a      	mov	r2, r5
 80115c6:	e7ec      	b.n	80115a2 <__ssvfiscanf_r+0x26>
 80115c8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80115ca:	3301      	adds	r3, #1
 80115cc:	3201      	adds	r2, #1
 80115ce:	9245      	str	r2, [sp, #276]	@ 0x114
 80115d0:	6862      	ldr	r2, [r4, #4]
 80115d2:	6023      	str	r3, [r4, #0]
 80115d4:	3a01      	subs	r2, #1
 80115d6:	6062      	str	r2, [r4, #4]
 80115d8:	e7ec      	b.n	80115b4 <__ssvfiscanf_r+0x38>
 80115da:	4621      	mov	r1, r4
 80115dc:	4630      	mov	r0, r6
 80115de:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80115e0:	4798      	blx	r3
 80115e2:	2800      	cmp	r0, #0
 80115e4:	d0e9      	beq.n	80115ba <__ssvfiscanf_r+0x3e>
 80115e6:	e7ed      	b.n	80115c4 <__ssvfiscanf_r+0x48>
 80115e8:	2b25      	cmp	r3, #37	@ 0x25
 80115ea:	d012      	beq.n	8011612 <__ssvfiscanf_r+0x96>
 80115ec:	4699      	mov	r9, r3
 80115ee:	6863      	ldr	r3, [r4, #4]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	f340 8094 	ble.w	801171e <__ssvfiscanf_r+0x1a2>
 80115f6:	6822      	ldr	r2, [r4, #0]
 80115f8:	7813      	ldrb	r3, [r2, #0]
 80115fa:	454b      	cmp	r3, r9
 80115fc:	f040 812e 	bne.w	801185c <__ssvfiscanf_r+0x2e0>
 8011600:	6863      	ldr	r3, [r4, #4]
 8011602:	3201      	adds	r2, #1
 8011604:	3b01      	subs	r3, #1
 8011606:	6063      	str	r3, [r4, #4]
 8011608:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801160a:	6022      	str	r2, [r4, #0]
 801160c:	3301      	adds	r3, #1
 801160e:	9345      	str	r3, [sp, #276]	@ 0x114
 8011610:	e7d8      	b.n	80115c4 <__ssvfiscanf_r+0x48>
 8011612:	9141      	str	r1, [sp, #260]	@ 0x104
 8011614:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011616:	7853      	ldrb	r3, [r2, #1]
 8011618:	2b2a      	cmp	r3, #42	@ 0x2a
 801161a:	bf04      	itt	eq
 801161c:	2310      	moveq	r3, #16
 801161e:	1c95      	addeq	r5, r2, #2
 8011620:	f04f 020a 	mov.w	r2, #10
 8011624:	bf08      	it	eq
 8011626:	9341      	streq	r3, [sp, #260]	@ 0x104
 8011628:	46a9      	mov	r9, r5
 801162a:	f819 1b01 	ldrb.w	r1, [r9], #1
 801162e:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8011632:	2b09      	cmp	r3, #9
 8011634:	d91e      	bls.n	8011674 <__ssvfiscanf_r+0xf8>
 8011636:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 8011844 <__ssvfiscanf_r+0x2c8>
 801163a:	2203      	movs	r2, #3
 801163c:	4650      	mov	r0, sl
 801163e:	f7fd fc90 	bl	800ef62 <memchr>
 8011642:	b138      	cbz	r0, 8011654 <__ssvfiscanf_r+0xd8>
 8011644:	2301      	movs	r3, #1
 8011646:	464d      	mov	r5, r9
 8011648:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801164a:	eba0 000a 	sub.w	r0, r0, sl
 801164e:	4083      	lsls	r3, r0
 8011650:	4313      	orrs	r3, r2
 8011652:	9341      	str	r3, [sp, #260]	@ 0x104
 8011654:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011658:	2b78      	cmp	r3, #120	@ 0x78
 801165a:	d806      	bhi.n	801166a <__ssvfiscanf_r+0xee>
 801165c:	2b57      	cmp	r3, #87	@ 0x57
 801165e:	d810      	bhi.n	8011682 <__ssvfiscanf_r+0x106>
 8011660:	2b25      	cmp	r3, #37	@ 0x25
 8011662:	d0c3      	beq.n	80115ec <__ssvfiscanf_r+0x70>
 8011664:	d856      	bhi.n	8011714 <__ssvfiscanf_r+0x198>
 8011666:	2b00      	cmp	r3, #0
 8011668:	d064      	beq.n	8011734 <__ssvfiscanf_r+0x1b8>
 801166a:	2303      	movs	r3, #3
 801166c:	9347      	str	r3, [sp, #284]	@ 0x11c
 801166e:	230a      	movs	r3, #10
 8011670:	9342      	str	r3, [sp, #264]	@ 0x108
 8011672:	e077      	b.n	8011764 <__ssvfiscanf_r+0x1e8>
 8011674:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8011676:	464d      	mov	r5, r9
 8011678:	fb02 1103 	mla	r1, r2, r3, r1
 801167c:	3930      	subs	r1, #48	@ 0x30
 801167e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011680:	e7d2      	b.n	8011628 <__ssvfiscanf_r+0xac>
 8011682:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8011686:	2a20      	cmp	r2, #32
 8011688:	d8ef      	bhi.n	801166a <__ssvfiscanf_r+0xee>
 801168a:	a101      	add	r1, pc, #4	@ (adr r1, 8011690 <__ssvfiscanf_r+0x114>)
 801168c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011690:	08011743 	.word	0x08011743
 8011694:	0801166b 	.word	0x0801166b
 8011698:	0801166b 	.word	0x0801166b
 801169c:	0801179d 	.word	0x0801179d
 80116a0:	0801166b 	.word	0x0801166b
 80116a4:	0801166b 	.word	0x0801166b
 80116a8:	0801166b 	.word	0x0801166b
 80116ac:	0801166b 	.word	0x0801166b
 80116b0:	0801166b 	.word	0x0801166b
 80116b4:	0801166b 	.word	0x0801166b
 80116b8:	0801166b 	.word	0x0801166b
 80116bc:	080117b3 	.word	0x080117b3
 80116c0:	08011799 	.word	0x08011799
 80116c4:	0801171b 	.word	0x0801171b
 80116c8:	0801171b 	.word	0x0801171b
 80116cc:	0801171b 	.word	0x0801171b
 80116d0:	0801166b 	.word	0x0801166b
 80116d4:	08011755 	.word	0x08011755
 80116d8:	0801166b 	.word	0x0801166b
 80116dc:	0801166b 	.word	0x0801166b
 80116e0:	0801166b 	.word	0x0801166b
 80116e4:	0801166b 	.word	0x0801166b
 80116e8:	080117c3 	.word	0x080117c3
 80116ec:	0801175d 	.word	0x0801175d
 80116f0:	0801173b 	.word	0x0801173b
 80116f4:	0801166b 	.word	0x0801166b
 80116f8:	0801166b 	.word	0x0801166b
 80116fc:	080117bf 	.word	0x080117bf
 8011700:	0801166b 	.word	0x0801166b
 8011704:	08011799 	.word	0x08011799
 8011708:	0801166b 	.word	0x0801166b
 801170c:	0801166b 	.word	0x0801166b
 8011710:	08011743 	.word	0x08011743
 8011714:	3b45      	subs	r3, #69	@ 0x45
 8011716:	2b02      	cmp	r3, #2
 8011718:	d8a7      	bhi.n	801166a <__ssvfiscanf_r+0xee>
 801171a:	2305      	movs	r3, #5
 801171c:	e021      	b.n	8011762 <__ssvfiscanf_r+0x1e6>
 801171e:	4621      	mov	r1, r4
 8011720:	4630      	mov	r0, r6
 8011722:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011724:	4798      	blx	r3
 8011726:	2800      	cmp	r0, #0
 8011728:	f43f af65 	beq.w	80115f6 <__ssvfiscanf_r+0x7a>
 801172c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801172e:	2800      	cmp	r0, #0
 8011730:	f040 808c 	bne.w	801184c <__ssvfiscanf_r+0x2d0>
 8011734:	f04f 30ff 	mov.w	r0, #4294967295
 8011738:	e08c      	b.n	8011854 <__ssvfiscanf_r+0x2d8>
 801173a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801173c:	f042 0220 	orr.w	r2, r2, #32
 8011740:	9241      	str	r2, [sp, #260]	@ 0x104
 8011742:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011744:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011748:	9241      	str	r2, [sp, #260]	@ 0x104
 801174a:	2210      	movs	r2, #16
 801174c:	2b6e      	cmp	r3, #110	@ 0x6e
 801174e:	9242      	str	r2, [sp, #264]	@ 0x108
 8011750:	d902      	bls.n	8011758 <__ssvfiscanf_r+0x1dc>
 8011752:	e005      	b.n	8011760 <__ssvfiscanf_r+0x1e4>
 8011754:	2300      	movs	r3, #0
 8011756:	9342      	str	r3, [sp, #264]	@ 0x108
 8011758:	2303      	movs	r3, #3
 801175a:	e002      	b.n	8011762 <__ssvfiscanf_r+0x1e6>
 801175c:	2308      	movs	r3, #8
 801175e:	9342      	str	r3, [sp, #264]	@ 0x108
 8011760:	2304      	movs	r3, #4
 8011762:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011764:	6863      	ldr	r3, [r4, #4]
 8011766:	2b00      	cmp	r3, #0
 8011768:	dd39      	ble.n	80117de <__ssvfiscanf_r+0x262>
 801176a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801176c:	0659      	lsls	r1, r3, #25
 801176e:	d404      	bmi.n	801177a <__ssvfiscanf_r+0x1fe>
 8011770:	6823      	ldr	r3, [r4, #0]
 8011772:	781a      	ldrb	r2, [r3, #0]
 8011774:	5cba      	ldrb	r2, [r7, r2]
 8011776:	0712      	lsls	r2, r2, #28
 8011778:	d438      	bmi.n	80117ec <__ssvfiscanf_r+0x270>
 801177a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801177c:	2b02      	cmp	r3, #2
 801177e:	dc47      	bgt.n	8011810 <__ssvfiscanf_r+0x294>
 8011780:	466b      	mov	r3, sp
 8011782:	4622      	mov	r2, r4
 8011784:	4630      	mov	r0, r6
 8011786:	a941      	add	r1, sp, #260	@ 0x104
 8011788:	f000 f86a 	bl	8011860 <_scanf_chars>
 801178c:	2801      	cmp	r0, #1
 801178e:	d065      	beq.n	801185c <__ssvfiscanf_r+0x2e0>
 8011790:	2802      	cmp	r0, #2
 8011792:	f47f af17 	bne.w	80115c4 <__ssvfiscanf_r+0x48>
 8011796:	e7c9      	b.n	801172c <__ssvfiscanf_r+0x1b0>
 8011798:	220a      	movs	r2, #10
 801179a:	e7d7      	b.n	801174c <__ssvfiscanf_r+0x1d0>
 801179c:	4629      	mov	r1, r5
 801179e:	4640      	mov	r0, r8
 80117a0:	f000 fa0b 	bl	8011bba <__sccl>
 80117a4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80117a6:	4605      	mov	r5, r0
 80117a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80117ac:	9341      	str	r3, [sp, #260]	@ 0x104
 80117ae:	2301      	movs	r3, #1
 80117b0:	e7d7      	b.n	8011762 <__ssvfiscanf_r+0x1e6>
 80117b2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80117b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80117b8:	9341      	str	r3, [sp, #260]	@ 0x104
 80117ba:	2300      	movs	r3, #0
 80117bc:	e7d1      	b.n	8011762 <__ssvfiscanf_r+0x1e6>
 80117be:	2302      	movs	r3, #2
 80117c0:	e7cf      	b.n	8011762 <__ssvfiscanf_r+0x1e6>
 80117c2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80117c4:	06c3      	lsls	r3, r0, #27
 80117c6:	f53f aefd 	bmi.w	80115c4 <__ssvfiscanf_r+0x48>
 80117ca:	9b00      	ldr	r3, [sp, #0]
 80117cc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80117ce:	1d19      	adds	r1, r3, #4
 80117d0:	9100      	str	r1, [sp, #0]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	07c0      	lsls	r0, r0, #31
 80117d6:	bf4c      	ite	mi
 80117d8:	801a      	strhmi	r2, [r3, #0]
 80117da:	601a      	strpl	r2, [r3, #0]
 80117dc:	e6f2      	b.n	80115c4 <__ssvfiscanf_r+0x48>
 80117de:	4621      	mov	r1, r4
 80117e0:	4630      	mov	r0, r6
 80117e2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80117e4:	4798      	blx	r3
 80117e6:	2800      	cmp	r0, #0
 80117e8:	d0bf      	beq.n	801176a <__ssvfiscanf_r+0x1ee>
 80117ea:	e79f      	b.n	801172c <__ssvfiscanf_r+0x1b0>
 80117ec:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80117ee:	3201      	adds	r2, #1
 80117f0:	9245      	str	r2, [sp, #276]	@ 0x114
 80117f2:	6862      	ldr	r2, [r4, #4]
 80117f4:	3a01      	subs	r2, #1
 80117f6:	2a00      	cmp	r2, #0
 80117f8:	6062      	str	r2, [r4, #4]
 80117fa:	dd02      	ble.n	8011802 <__ssvfiscanf_r+0x286>
 80117fc:	3301      	adds	r3, #1
 80117fe:	6023      	str	r3, [r4, #0]
 8011800:	e7b6      	b.n	8011770 <__ssvfiscanf_r+0x1f4>
 8011802:	4621      	mov	r1, r4
 8011804:	4630      	mov	r0, r6
 8011806:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011808:	4798      	blx	r3
 801180a:	2800      	cmp	r0, #0
 801180c:	d0b0      	beq.n	8011770 <__ssvfiscanf_r+0x1f4>
 801180e:	e78d      	b.n	801172c <__ssvfiscanf_r+0x1b0>
 8011810:	2b04      	cmp	r3, #4
 8011812:	dc06      	bgt.n	8011822 <__ssvfiscanf_r+0x2a6>
 8011814:	466b      	mov	r3, sp
 8011816:	4622      	mov	r2, r4
 8011818:	4630      	mov	r0, r6
 801181a:	a941      	add	r1, sp, #260	@ 0x104
 801181c:	f000 f87a 	bl	8011914 <_scanf_i>
 8011820:	e7b4      	b.n	801178c <__ssvfiscanf_r+0x210>
 8011822:	4b09      	ldr	r3, [pc, #36]	@ (8011848 <__ssvfiscanf_r+0x2cc>)
 8011824:	2b00      	cmp	r3, #0
 8011826:	f43f aecd 	beq.w	80115c4 <__ssvfiscanf_r+0x48>
 801182a:	466b      	mov	r3, sp
 801182c:	4622      	mov	r2, r4
 801182e:	4630      	mov	r0, r6
 8011830:	a941      	add	r1, sp, #260	@ 0x104
 8011832:	f3af 8000 	nop.w
 8011836:	e7a9      	b.n	801178c <__ssvfiscanf_r+0x210>
 8011838:	080114cd 	.word	0x080114cd
 801183c:	08011543 	.word	0x08011543
 8011840:	08012001 	.word	0x08012001
 8011844:	080124ce 	.word	0x080124ce
 8011848:	00000000 	.word	0x00000000
 801184c:	89a3      	ldrh	r3, [r4, #12]
 801184e:	065b      	lsls	r3, r3, #25
 8011850:	f53f af70 	bmi.w	8011734 <__ssvfiscanf_r+0x1b8>
 8011854:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8011858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801185c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801185e:	e7f9      	b.n	8011854 <__ssvfiscanf_r+0x2d8>

08011860 <_scanf_chars>:
 8011860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011864:	4615      	mov	r5, r2
 8011866:	688a      	ldr	r2, [r1, #8]
 8011868:	4680      	mov	r8, r0
 801186a:	460c      	mov	r4, r1
 801186c:	b932      	cbnz	r2, 801187c <_scanf_chars+0x1c>
 801186e:	698a      	ldr	r2, [r1, #24]
 8011870:	2a00      	cmp	r2, #0
 8011872:	bf14      	ite	ne
 8011874:	f04f 32ff 	movne.w	r2, #4294967295
 8011878:	2201      	moveq	r2, #1
 801187a:	608a      	str	r2, [r1, #8]
 801187c:	2700      	movs	r7, #0
 801187e:	6822      	ldr	r2, [r4, #0]
 8011880:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8011910 <_scanf_chars+0xb0>
 8011884:	06d1      	lsls	r1, r2, #27
 8011886:	bf5f      	itttt	pl
 8011888:	681a      	ldrpl	r2, [r3, #0]
 801188a:	1d11      	addpl	r1, r2, #4
 801188c:	6019      	strpl	r1, [r3, #0]
 801188e:	6816      	ldrpl	r6, [r2, #0]
 8011890:	69a0      	ldr	r0, [r4, #24]
 8011892:	b188      	cbz	r0, 80118b8 <_scanf_chars+0x58>
 8011894:	2801      	cmp	r0, #1
 8011896:	d107      	bne.n	80118a8 <_scanf_chars+0x48>
 8011898:	682b      	ldr	r3, [r5, #0]
 801189a:	781a      	ldrb	r2, [r3, #0]
 801189c:	6963      	ldr	r3, [r4, #20]
 801189e:	5c9b      	ldrb	r3, [r3, r2]
 80118a0:	b953      	cbnz	r3, 80118b8 <_scanf_chars+0x58>
 80118a2:	2f00      	cmp	r7, #0
 80118a4:	d031      	beq.n	801190a <_scanf_chars+0xaa>
 80118a6:	e022      	b.n	80118ee <_scanf_chars+0x8e>
 80118a8:	2802      	cmp	r0, #2
 80118aa:	d120      	bne.n	80118ee <_scanf_chars+0x8e>
 80118ac:	682b      	ldr	r3, [r5, #0]
 80118ae:	781b      	ldrb	r3, [r3, #0]
 80118b0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80118b4:	071b      	lsls	r3, r3, #28
 80118b6:	d41a      	bmi.n	80118ee <_scanf_chars+0x8e>
 80118b8:	6823      	ldr	r3, [r4, #0]
 80118ba:	3701      	adds	r7, #1
 80118bc:	06da      	lsls	r2, r3, #27
 80118be:	bf5e      	ittt	pl
 80118c0:	682b      	ldrpl	r3, [r5, #0]
 80118c2:	781b      	ldrbpl	r3, [r3, #0]
 80118c4:	f806 3b01 	strbpl.w	r3, [r6], #1
 80118c8:	682a      	ldr	r2, [r5, #0]
 80118ca:	686b      	ldr	r3, [r5, #4]
 80118cc:	3201      	adds	r2, #1
 80118ce:	602a      	str	r2, [r5, #0]
 80118d0:	68a2      	ldr	r2, [r4, #8]
 80118d2:	3b01      	subs	r3, #1
 80118d4:	3a01      	subs	r2, #1
 80118d6:	606b      	str	r3, [r5, #4]
 80118d8:	60a2      	str	r2, [r4, #8]
 80118da:	b142      	cbz	r2, 80118ee <_scanf_chars+0x8e>
 80118dc:	2b00      	cmp	r3, #0
 80118de:	dcd7      	bgt.n	8011890 <_scanf_chars+0x30>
 80118e0:	4629      	mov	r1, r5
 80118e2:	4640      	mov	r0, r8
 80118e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80118e8:	4798      	blx	r3
 80118ea:	2800      	cmp	r0, #0
 80118ec:	d0d0      	beq.n	8011890 <_scanf_chars+0x30>
 80118ee:	6823      	ldr	r3, [r4, #0]
 80118f0:	f013 0310 	ands.w	r3, r3, #16
 80118f4:	d105      	bne.n	8011902 <_scanf_chars+0xa2>
 80118f6:	68e2      	ldr	r2, [r4, #12]
 80118f8:	3201      	adds	r2, #1
 80118fa:	60e2      	str	r2, [r4, #12]
 80118fc:	69a2      	ldr	r2, [r4, #24]
 80118fe:	b102      	cbz	r2, 8011902 <_scanf_chars+0xa2>
 8011900:	7033      	strb	r3, [r6, #0]
 8011902:	2000      	movs	r0, #0
 8011904:	6923      	ldr	r3, [r4, #16]
 8011906:	443b      	add	r3, r7
 8011908:	6123      	str	r3, [r4, #16]
 801190a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801190e:	bf00      	nop
 8011910:	08012001 	.word	0x08012001

08011914 <_scanf_i>:
 8011914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011918:	460c      	mov	r4, r1
 801191a:	4698      	mov	r8, r3
 801191c:	4b72      	ldr	r3, [pc, #456]	@ (8011ae8 <_scanf_i+0x1d4>)
 801191e:	b087      	sub	sp, #28
 8011920:	4682      	mov	sl, r0
 8011922:	4616      	mov	r6, r2
 8011924:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011928:	ab03      	add	r3, sp, #12
 801192a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801192e:	4b6f      	ldr	r3, [pc, #444]	@ (8011aec <_scanf_i+0x1d8>)
 8011930:	69a1      	ldr	r1, [r4, #24]
 8011932:	4a6f      	ldr	r2, [pc, #444]	@ (8011af0 <_scanf_i+0x1dc>)
 8011934:	4627      	mov	r7, r4
 8011936:	2903      	cmp	r1, #3
 8011938:	bf08      	it	eq
 801193a:	461a      	moveq	r2, r3
 801193c:	68a3      	ldr	r3, [r4, #8]
 801193e:	9201      	str	r2, [sp, #4]
 8011940:	1e5a      	subs	r2, r3, #1
 8011942:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8011946:	bf81      	itttt	hi
 8011948:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801194c:	eb03 0905 	addhi.w	r9, r3, r5
 8011950:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8011954:	60a3      	strhi	r3, [r4, #8]
 8011956:	f857 3b1c 	ldr.w	r3, [r7], #28
 801195a:	bf98      	it	ls
 801195c:	f04f 0900 	movls.w	r9, #0
 8011960:	463d      	mov	r5, r7
 8011962:	f04f 0b00 	mov.w	fp, #0
 8011966:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801196a:	6023      	str	r3, [r4, #0]
 801196c:	6831      	ldr	r1, [r6, #0]
 801196e:	ab03      	add	r3, sp, #12
 8011970:	2202      	movs	r2, #2
 8011972:	7809      	ldrb	r1, [r1, #0]
 8011974:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8011978:	f7fd faf3 	bl	800ef62 <memchr>
 801197c:	b328      	cbz	r0, 80119ca <_scanf_i+0xb6>
 801197e:	f1bb 0f01 	cmp.w	fp, #1
 8011982:	d159      	bne.n	8011a38 <_scanf_i+0x124>
 8011984:	6862      	ldr	r2, [r4, #4]
 8011986:	b92a      	cbnz	r2, 8011994 <_scanf_i+0x80>
 8011988:	2108      	movs	r1, #8
 801198a:	6822      	ldr	r2, [r4, #0]
 801198c:	6061      	str	r1, [r4, #4]
 801198e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011992:	6022      	str	r2, [r4, #0]
 8011994:	6822      	ldr	r2, [r4, #0]
 8011996:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801199a:	6022      	str	r2, [r4, #0]
 801199c:	68a2      	ldr	r2, [r4, #8]
 801199e:	1e51      	subs	r1, r2, #1
 80119a0:	60a1      	str	r1, [r4, #8]
 80119a2:	b192      	cbz	r2, 80119ca <_scanf_i+0xb6>
 80119a4:	6832      	ldr	r2, [r6, #0]
 80119a6:	1c51      	adds	r1, r2, #1
 80119a8:	6031      	str	r1, [r6, #0]
 80119aa:	7812      	ldrb	r2, [r2, #0]
 80119ac:	f805 2b01 	strb.w	r2, [r5], #1
 80119b0:	6872      	ldr	r2, [r6, #4]
 80119b2:	3a01      	subs	r2, #1
 80119b4:	2a00      	cmp	r2, #0
 80119b6:	6072      	str	r2, [r6, #4]
 80119b8:	dc07      	bgt.n	80119ca <_scanf_i+0xb6>
 80119ba:	4631      	mov	r1, r6
 80119bc:	4650      	mov	r0, sl
 80119be:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80119c2:	4790      	blx	r2
 80119c4:	2800      	cmp	r0, #0
 80119c6:	f040 8085 	bne.w	8011ad4 <_scanf_i+0x1c0>
 80119ca:	f10b 0b01 	add.w	fp, fp, #1
 80119ce:	f1bb 0f03 	cmp.w	fp, #3
 80119d2:	d1cb      	bne.n	801196c <_scanf_i+0x58>
 80119d4:	6863      	ldr	r3, [r4, #4]
 80119d6:	b90b      	cbnz	r3, 80119dc <_scanf_i+0xc8>
 80119d8:	230a      	movs	r3, #10
 80119da:	6063      	str	r3, [r4, #4]
 80119dc:	6863      	ldr	r3, [r4, #4]
 80119de:	4945      	ldr	r1, [pc, #276]	@ (8011af4 <_scanf_i+0x1e0>)
 80119e0:	6960      	ldr	r0, [r4, #20]
 80119e2:	1ac9      	subs	r1, r1, r3
 80119e4:	f000 f8e9 	bl	8011bba <__sccl>
 80119e8:	f04f 0b00 	mov.w	fp, #0
 80119ec:	68a3      	ldr	r3, [r4, #8]
 80119ee:	6822      	ldr	r2, [r4, #0]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d03d      	beq.n	8011a70 <_scanf_i+0x15c>
 80119f4:	6831      	ldr	r1, [r6, #0]
 80119f6:	6960      	ldr	r0, [r4, #20]
 80119f8:	f891 c000 	ldrb.w	ip, [r1]
 80119fc:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011a00:	2800      	cmp	r0, #0
 8011a02:	d035      	beq.n	8011a70 <_scanf_i+0x15c>
 8011a04:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8011a08:	d124      	bne.n	8011a54 <_scanf_i+0x140>
 8011a0a:	0510      	lsls	r0, r2, #20
 8011a0c:	d522      	bpl.n	8011a54 <_scanf_i+0x140>
 8011a0e:	f10b 0b01 	add.w	fp, fp, #1
 8011a12:	f1b9 0f00 	cmp.w	r9, #0
 8011a16:	d003      	beq.n	8011a20 <_scanf_i+0x10c>
 8011a18:	3301      	adds	r3, #1
 8011a1a:	f109 39ff 	add.w	r9, r9, #4294967295
 8011a1e:	60a3      	str	r3, [r4, #8]
 8011a20:	6873      	ldr	r3, [r6, #4]
 8011a22:	3b01      	subs	r3, #1
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	6073      	str	r3, [r6, #4]
 8011a28:	dd1b      	ble.n	8011a62 <_scanf_i+0x14e>
 8011a2a:	6833      	ldr	r3, [r6, #0]
 8011a2c:	3301      	adds	r3, #1
 8011a2e:	6033      	str	r3, [r6, #0]
 8011a30:	68a3      	ldr	r3, [r4, #8]
 8011a32:	3b01      	subs	r3, #1
 8011a34:	60a3      	str	r3, [r4, #8]
 8011a36:	e7d9      	b.n	80119ec <_scanf_i+0xd8>
 8011a38:	f1bb 0f02 	cmp.w	fp, #2
 8011a3c:	d1ae      	bne.n	801199c <_scanf_i+0x88>
 8011a3e:	6822      	ldr	r2, [r4, #0]
 8011a40:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8011a44:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8011a48:	d1bf      	bne.n	80119ca <_scanf_i+0xb6>
 8011a4a:	2110      	movs	r1, #16
 8011a4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011a50:	6061      	str	r1, [r4, #4]
 8011a52:	e7a2      	b.n	801199a <_scanf_i+0x86>
 8011a54:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8011a58:	6022      	str	r2, [r4, #0]
 8011a5a:	780b      	ldrb	r3, [r1, #0]
 8011a5c:	f805 3b01 	strb.w	r3, [r5], #1
 8011a60:	e7de      	b.n	8011a20 <_scanf_i+0x10c>
 8011a62:	4631      	mov	r1, r6
 8011a64:	4650      	mov	r0, sl
 8011a66:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011a6a:	4798      	blx	r3
 8011a6c:	2800      	cmp	r0, #0
 8011a6e:	d0df      	beq.n	8011a30 <_scanf_i+0x11c>
 8011a70:	6823      	ldr	r3, [r4, #0]
 8011a72:	05d9      	lsls	r1, r3, #23
 8011a74:	d50d      	bpl.n	8011a92 <_scanf_i+0x17e>
 8011a76:	42bd      	cmp	r5, r7
 8011a78:	d909      	bls.n	8011a8e <_scanf_i+0x17a>
 8011a7a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011a7e:	4632      	mov	r2, r6
 8011a80:	4650      	mov	r0, sl
 8011a82:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011a86:	f105 39ff 	add.w	r9, r5, #4294967295
 8011a8a:	4798      	blx	r3
 8011a8c:	464d      	mov	r5, r9
 8011a8e:	42bd      	cmp	r5, r7
 8011a90:	d028      	beq.n	8011ae4 <_scanf_i+0x1d0>
 8011a92:	6822      	ldr	r2, [r4, #0]
 8011a94:	f012 0210 	ands.w	r2, r2, #16
 8011a98:	d113      	bne.n	8011ac2 <_scanf_i+0x1ae>
 8011a9a:	702a      	strb	r2, [r5, #0]
 8011a9c:	4639      	mov	r1, r7
 8011a9e:	6863      	ldr	r3, [r4, #4]
 8011aa0:	4650      	mov	r0, sl
 8011aa2:	9e01      	ldr	r6, [sp, #4]
 8011aa4:	47b0      	blx	r6
 8011aa6:	f8d8 3000 	ldr.w	r3, [r8]
 8011aaa:	6821      	ldr	r1, [r4, #0]
 8011aac:	1d1a      	adds	r2, r3, #4
 8011aae:	f8c8 2000 	str.w	r2, [r8]
 8011ab2:	f011 0f20 	tst.w	r1, #32
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	d00f      	beq.n	8011ada <_scanf_i+0x1c6>
 8011aba:	6018      	str	r0, [r3, #0]
 8011abc:	68e3      	ldr	r3, [r4, #12]
 8011abe:	3301      	adds	r3, #1
 8011ac0:	60e3      	str	r3, [r4, #12]
 8011ac2:	2000      	movs	r0, #0
 8011ac4:	6923      	ldr	r3, [r4, #16]
 8011ac6:	1bed      	subs	r5, r5, r7
 8011ac8:	445d      	add	r5, fp
 8011aca:	442b      	add	r3, r5
 8011acc:	6123      	str	r3, [r4, #16]
 8011ace:	b007      	add	sp, #28
 8011ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ad4:	f04f 0b00 	mov.w	fp, #0
 8011ad8:	e7ca      	b.n	8011a70 <_scanf_i+0x15c>
 8011ada:	07ca      	lsls	r2, r1, #31
 8011adc:	bf4c      	ite	mi
 8011ade:	8018      	strhmi	r0, [r3, #0]
 8011ae0:	6018      	strpl	r0, [r3, #0]
 8011ae2:	e7eb      	b.n	8011abc <_scanf_i+0x1a8>
 8011ae4:	2001      	movs	r0, #1
 8011ae6:	e7f2      	b.n	8011ace <_scanf_i+0x1ba>
 8011ae8:	08011f44 	.word	0x08011f44
 8011aec:	0800d675 	.word	0x0800d675
 8011af0:	08010e79 	.word	0x08010e79
 8011af4:	0801254c 	.word	0x0801254c

08011af8 <__swhatbuf_r>:
 8011af8:	b570      	push	{r4, r5, r6, lr}
 8011afa:	460c      	mov	r4, r1
 8011afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b00:	4615      	mov	r5, r2
 8011b02:	2900      	cmp	r1, #0
 8011b04:	461e      	mov	r6, r3
 8011b06:	b096      	sub	sp, #88	@ 0x58
 8011b08:	da0c      	bge.n	8011b24 <__swhatbuf_r+0x2c>
 8011b0a:	89a3      	ldrh	r3, [r4, #12]
 8011b0c:	2100      	movs	r1, #0
 8011b0e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011b12:	bf14      	ite	ne
 8011b14:	2340      	movne	r3, #64	@ 0x40
 8011b16:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011b1a:	2000      	movs	r0, #0
 8011b1c:	6031      	str	r1, [r6, #0]
 8011b1e:	602b      	str	r3, [r5, #0]
 8011b20:	b016      	add	sp, #88	@ 0x58
 8011b22:	bd70      	pop	{r4, r5, r6, pc}
 8011b24:	466a      	mov	r2, sp
 8011b26:	f000 f8e9 	bl	8011cfc <_fstat_r>
 8011b2a:	2800      	cmp	r0, #0
 8011b2c:	dbed      	blt.n	8011b0a <__swhatbuf_r+0x12>
 8011b2e:	9901      	ldr	r1, [sp, #4]
 8011b30:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011b34:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011b38:	4259      	negs	r1, r3
 8011b3a:	4159      	adcs	r1, r3
 8011b3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011b40:	e7eb      	b.n	8011b1a <__swhatbuf_r+0x22>

08011b42 <__smakebuf_r>:
 8011b42:	898b      	ldrh	r3, [r1, #12]
 8011b44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b46:	079d      	lsls	r5, r3, #30
 8011b48:	4606      	mov	r6, r0
 8011b4a:	460c      	mov	r4, r1
 8011b4c:	d507      	bpl.n	8011b5e <__smakebuf_r+0x1c>
 8011b4e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011b52:	6023      	str	r3, [r4, #0]
 8011b54:	6123      	str	r3, [r4, #16]
 8011b56:	2301      	movs	r3, #1
 8011b58:	6163      	str	r3, [r4, #20]
 8011b5a:	b003      	add	sp, #12
 8011b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b5e:	466a      	mov	r2, sp
 8011b60:	ab01      	add	r3, sp, #4
 8011b62:	f7ff ffc9 	bl	8011af8 <__swhatbuf_r>
 8011b66:	9f00      	ldr	r7, [sp, #0]
 8011b68:	4605      	mov	r5, r0
 8011b6a:	4639      	mov	r1, r7
 8011b6c:	4630      	mov	r0, r6
 8011b6e:	f7fa fe27 	bl	800c7c0 <_malloc_r>
 8011b72:	b948      	cbnz	r0, 8011b88 <__smakebuf_r+0x46>
 8011b74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b78:	059a      	lsls	r2, r3, #22
 8011b7a:	d4ee      	bmi.n	8011b5a <__smakebuf_r+0x18>
 8011b7c:	f023 0303 	bic.w	r3, r3, #3
 8011b80:	f043 0302 	orr.w	r3, r3, #2
 8011b84:	81a3      	strh	r3, [r4, #12]
 8011b86:	e7e2      	b.n	8011b4e <__smakebuf_r+0xc>
 8011b88:	89a3      	ldrh	r3, [r4, #12]
 8011b8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011b8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b92:	81a3      	strh	r3, [r4, #12]
 8011b94:	9b01      	ldr	r3, [sp, #4]
 8011b96:	6020      	str	r0, [r4, #0]
 8011b98:	b15b      	cbz	r3, 8011bb2 <__smakebuf_r+0x70>
 8011b9a:	4630      	mov	r0, r6
 8011b9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ba0:	f000 f8be 	bl	8011d20 <_isatty_r>
 8011ba4:	b128      	cbz	r0, 8011bb2 <__smakebuf_r+0x70>
 8011ba6:	89a3      	ldrh	r3, [r4, #12]
 8011ba8:	f023 0303 	bic.w	r3, r3, #3
 8011bac:	f043 0301 	orr.w	r3, r3, #1
 8011bb0:	81a3      	strh	r3, [r4, #12]
 8011bb2:	89a3      	ldrh	r3, [r4, #12]
 8011bb4:	431d      	orrs	r5, r3
 8011bb6:	81a5      	strh	r5, [r4, #12]
 8011bb8:	e7cf      	b.n	8011b5a <__smakebuf_r+0x18>

08011bba <__sccl>:
 8011bba:	b570      	push	{r4, r5, r6, lr}
 8011bbc:	780b      	ldrb	r3, [r1, #0]
 8011bbe:	4604      	mov	r4, r0
 8011bc0:	2b5e      	cmp	r3, #94	@ 0x5e
 8011bc2:	bf0b      	itete	eq
 8011bc4:	784b      	ldrbeq	r3, [r1, #1]
 8011bc6:	1c4a      	addne	r2, r1, #1
 8011bc8:	1c8a      	addeq	r2, r1, #2
 8011bca:	2100      	movne	r1, #0
 8011bcc:	bf08      	it	eq
 8011bce:	2101      	moveq	r1, #1
 8011bd0:	3801      	subs	r0, #1
 8011bd2:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8011bd6:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011bda:	42a8      	cmp	r0, r5
 8011bdc:	d1fb      	bne.n	8011bd6 <__sccl+0x1c>
 8011bde:	b90b      	cbnz	r3, 8011be4 <__sccl+0x2a>
 8011be0:	1e50      	subs	r0, r2, #1
 8011be2:	bd70      	pop	{r4, r5, r6, pc}
 8011be4:	f081 0101 	eor.w	r1, r1, #1
 8011be8:	4610      	mov	r0, r2
 8011bea:	54e1      	strb	r1, [r4, r3]
 8011bec:	4602      	mov	r2, r0
 8011bee:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011bf2:	2d2d      	cmp	r5, #45	@ 0x2d
 8011bf4:	d005      	beq.n	8011c02 <__sccl+0x48>
 8011bf6:	2d5d      	cmp	r5, #93	@ 0x5d
 8011bf8:	d016      	beq.n	8011c28 <__sccl+0x6e>
 8011bfa:	2d00      	cmp	r5, #0
 8011bfc:	d0f1      	beq.n	8011be2 <__sccl+0x28>
 8011bfe:	462b      	mov	r3, r5
 8011c00:	e7f2      	b.n	8011be8 <__sccl+0x2e>
 8011c02:	7846      	ldrb	r6, [r0, #1]
 8011c04:	2e5d      	cmp	r6, #93	@ 0x5d
 8011c06:	d0fa      	beq.n	8011bfe <__sccl+0x44>
 8011c08:	42b3      	cmp	r3, r6
 8011c0a:	dcf8      	bgt.n	8011bfe <__sccl+0x44>
 8011c0c:	461a      	mov	r2, r3
 8011c0e:	3002      	adds	r0, #2
 8011c10:	3201      	adds	r2, #1
 8011c12:	4296      	cmp	r6, r2
 8011c14:	54a1      	strb	r1, [r4, r2]
 8011c16:	dcfb      	bgt.n	8011c10 <__sccl+0x56>
 8011c18:	1af2      	subs	r2, r6, r3
 8011c1a:	3a01      	subs	r2, #1
 8011c1c:	42b3      	cmp	r3, r6
 8011c1e:	bfa8      	it	ge
 8011c20:	2200      	movge	r2, #0
 8011c22:	1c5d      	adds	r5, r3, #1
 8011c24:	18ab      	adds	r3, r5, r2
 8011c26:	e7e1      	b.n	8011bec <__sccl+0x32>
 8011c28:	4610      	mov	r0, r2
 8011c2a:	e7da      	b.n	8011be2 <__sccl+0x28>

08011c2c <__submore>:
 8011c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c30:	460c      	mov	r4, r1
 8011c32:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011c34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011c38:	4299      	cmp	r1, r3
 8011c3a:	d11b      	bne.n	8011c74 <__submore+0x48>
 8011c3c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8011c40:	f7fa fdbe 	bl	800c7c0 <_malloc_r>
 8011c44:	b918      	cbnz	r0, 8011c4e <__submore+0x22>
 8011c46:	f04f 30ff 	mov.w	r0, #4294967295
 8011c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011c52:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011c54:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8011c58:	6360      	str	r0, [r4, #52]	@ 0x34
 8011c5a:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8011c5e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8011c62:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8011c66:	7043      	strb	r3, [r0, #1]
 8011c68:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011c6c:	7003      	strb	r3, [r0, #0]
 8011c6e:	6020      	str	r0, [r4, #0]
 8011c70:	2000      	movs	r0, #0
 8011c72:	e7ea      	b.n	8011c4a <__submore+0x1e>
 8011c74:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8011c76:	0077      	lsls	r7, r6, #1
 8011c78:	463a      	mov	r2, r7
 8011c7a:	f7ff fbf9 	bl	8011470 <_realloc_r>
 8011c7e:	4605      	mov	r5, r0
 8011c80:	2800      	cmp	r0, #0
 8011c82:	d0e0      	beq.n	8011c46 <__submore+0x1a>
 8011c84:	eb00 0806 	add.w	r8, r0, r6
 8011c88:	4601      	mov	r1, r0
 8011c8a:	4632      	mov	r2, r6
 8011c8c:	4640      	mov	r0, r8
 8011c8e:	f7fd f976 	bl	800ef7e <memcpy>
 8011c92:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8011c96:	f8c4 8000 	str.w	r8, [r4]
 8011c9a:	e7e9      	b.n	8011c70 <__submore+0x44>

08011c9c <_raise_r>:
 8011c9c:	291f      	cmp	r1, #31
 8011c9e:	b538      	push	{r3, r4, r5, lr}
 8011ca0:	4605      	mov	r5, r0
 8011ca2:	460c      	mov	r4, r1
 8011ca4:	d904      	bls.n	8011cb0 <_raise_r+0x14>
 8011ca6:	2316      	movs	r3, #22
 8011ca8:	6003      	str	r3, [r0, #0]
 8011caa:	f04f 30ff 	mov.w	r0, #4294967295
 8011cae:	bd38      	pop	{r3, r4, r5, pc}
 8011cb0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011cb2:	b112      	cbz	r2, 8011cba <_raise_r+0x1e>
 8011cb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011cb8:	b94b      	cbnz	r3, 8011cce <_raise_r+0x32>
 8011cba:	4628      	mov	r0, r5
 8011cbc:	f000 f852 	bl	8011d64 <_getpid_r>
 8011cc0:	4622      	mov	r2, r4
 8011cc2:	4601      	mov	r1, r0
 8011cc4:	4628      	mov	r0, r5
 8011cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011cca:	f000 b839 	b.w	8011d40 <_kill_r>
 8011cce:	2b01      	cmp	r3, #1
 8011cd0:	d00a      	beq.n	8011ce8 <_raise_r+0x4c>
 8011cd2:	1c59      	adds	r1, r3, #1
 8011cd4:	d103      	bne.n	8011cde <_raise_r+0x42>
 8011cd6:	2316      	movs	r3, #22
 8011cd8:	6003      	str	r3, [r0, #0]
 8011cda:	2001      	movs	r0, #1
 8011cdc:	e7e7      	b.n	8011cae <_raise_r+0x12>
 8011cde:	2100      	movs	r1, #0
 8011ce0:	4620      	mov	r0, r4
 8011ce2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011ce6:	4798      	blx	r3
 8011ce8:	2000      	movs	r0, #0
 8011cea:	e7e0      	b.n	8011cae <_raise_r+0x12>

08011cec <raise>:
 8011cec:	4b02      	ldr	r3, [pc, #8]	@ (8011cf8 <raise+0xc>)
 8011cee:	4601      	mov	r1, r0
 8011cf0:	6818      	ldr	r0, [r3, #0]
 8011cf2:	f7ff bfd3 	b.w	8011c9c <_raise_r>
 8011cf6:	bf00      	nop
 8011cf8:	20000284 	.word	0x20000284

08011cfc <_fstat_r>:
 8011cfc:	b538      	push	{r3, r4, r5, lr}
 8011cfe:	2300      	movs	r3, #0
 8011d00:	4d06      	ldr	r5, [pc, #24]	@ (8011d1c <_fstat_r+0x20>)
 8011d02:	4604      	mov	r4, r0
 8011d04:	4608      	mov	r0, r1
 8011d06:	4611      	mov	r1, r2
 8011d08:	602b      	str	r3, [r5, #0]
 8011d0a:	f7f2 fb46 	bl	800439a <_fstat>
 8011d0e:	1c43      	adds	r3, r0, #1
 8011d10:	d102      	bne.n	8011d18 <_fstat_r+0x1c>
 8011d12:	682b      	ldr	r3, [r5, #0]
 8011d14:	b103      	cbz	r3, 8011d18 <_fstat_r+0x1c>
 8011d16:	6023      	str	r3, [r4, #0]
 8011d18:	bd38      	pop	{r3, r4, r5, pc}
 8011d1a:	bf00      	nop
 8011d1c:	20005b88 	.word	0x20005b88

08011d20 <_isatty_r>:
 8011d20:	b538      	push	{r3, r4, r5, lr}
 8011d22:	2300      	movs	r3, #0
 8011d24:	4d05      	ldr	r5, [pc, #20]	@ (8011d3c <_isatty_r+0x1c>)
 8011d26:	4604      	mov	r4, r0
 8011d28:	4608      	mov	r0, r1
 8011d2a:	602b      	str	r3, [r5, #0]
 8011d2c:	f7f2 fb44 	bl	80043b8 <_isatty>
 8011d30:	1c43      	adds	r3, r0, #1
 8011d32:	d102      	bne.n	8011d3a <_isatty_r+0x1a>
 8011d34:	682b      	ldr	r3, [r5, #0]
 8011d36:	b103      	cbz	r3, 8011d3a <_isatty_r+0x1a>
 8011d38:	6023      	str	r3, [r4, #0]
 8011d3a:	bd38      	pop	{r3, r4, r5, pc}
 8011d3c:	20005b88 	.word	0x20005b88

08011d40 <_kill_r>:
 8011d40:	b538      	push	{r3, r4, r5, lr}
 8011d42:	2300      	movs	r3, #0
 8011d44:	4d06      	ldr	r5, [pc, #24]	@ (8011d60 <_kill_r+0x20>)
 8011d46:	4604      	mov	r4, r0
 8011d48:	4608      	mov	r0, r1
 8011d4a:	4611      	mov	r1, r2
 8011d4c:	602b      	str	r3, [r5, #0]
 8011d4e:	f7f2 fafe 	bl	800434e <_kill>
 8011d52:	1c43      	adds	r3, r0, #1
 8011d54:	d102      	bne.n	8011d5c <_kill_r+0x1c>
 8011d56:	682b      	ldr	r3, [r5, #0]
 8011d58:	b103      	cbz	r3, 8011d5c <_kill_r+0x1c>
 8011d5a:	6023      	str	r3, [r4, #0]
 8011d5c:	bd38      	pop	{r3, r4, r5, pc}
 8011d5e:	bf00      	nop
 8011d60:	20005b88 	.word	0x20005b88

08011d64 <_getpid_r>:
 8011d64:	f7f2 baec 	b.w	8004340 <_getpid>

08011d68 <_malloc_usable_size_r>:
 8011d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d6c:	1f18      	subs	r0, r3, #4
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	bfbc      	itt	lt
 8011d72:	580b      	ldrlt	r3, [r1, r0]
 8011d74:	18c0      	addlt	r0, r0, r3
 8011d76:	4770      	bx	lr

08011d78 <_init>:
 8011d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d7a:	bf00      	nop
 8011d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d7e:	bc08      	pop	{r3}
 8011d80:	469e      	mov	lr, r3
 8011d82:	4770      	bx	lr

08011d84 <_fini>:
 8011d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d86:	bf00      	nop
 8011d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d8a:	bc08      	pop	{r3}
 8011d8c:	469e      	mov	lr, r3
 8011d8e:	4770      	bx	lr
