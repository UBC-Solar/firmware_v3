
tel_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5bc  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000798  0800d7b0  0800d7b0  0001d7b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df48  0800df48  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800df48  0800df48  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800df48  0800df48  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df48  0800df48  0001df48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df4c  0800df4c  0001df4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800df50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003254  200001d8  0800e128  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000342c  0800e128  0002342c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019a2a  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e6d  00000000  00000000  00039c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001570  00000000  00000000  0003dae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001091  00000000  00000000  0003f050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d4fb  00000000  00000000  000400e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b225  00000000  00000000  0005d5dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3566  00000000  00000000  00078801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006f24  00000000  00000000  0011bd68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00122c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200001d8 	.word	0x200001d8
 800020c:	00000000 	.word	0x00000000
 8000210:	0800d794 	.word	0x0800d794

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200001dc 	.word	0x200001dc
 800022c:	0800d794 	.word	0x0800d794

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_frsub>:
 8000c48:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c4c:	e002      	b.n	8000c54 <__addsf3>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_fsub>:
 8000c50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c54 <__addsf3>:
 8000c54:	0042      	lsls	r2, r0, #1
 8000c56:	bf1f      	itttt	ne
 8000c58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c5c:	ea92 0f03 	teqne	r2, r3
 8000c60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c68:	d06a      	beq.n	8000d40 <__addsf3+0xec>
 8000c6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c72:	bfc1      	itttt	gt
 8000c74:	18d2      	addgt	r2, r2, r3
 8000c76:	4041      	eorgt	r1, r0
 8000c78:	4048      	eorgt	r0, r1
 8000c7a:	4041      	eorgt	r1, r0
 8000c7c:	bfb8      	it	lt
 8000c7e:	425b      	neglt	r3, r3
 8000c80:	2b19      	cmp	r3, #25
 8000c82:	bf88      	it	hi
 8000c84:	4770      	bxhi	lr
 8000c86:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4240      	negne	r0, r0
 8000c96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4249      	negne	r1, r1
 8000ca6:	ea92 0f03 	teq	r2, r3
 8000caa:	d03f      	beq.n	8000d2c <__addsf3+0xd8>
 8000cac:	f1a2 0201 	sub.w	r2, r2, #1
 8000cb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cb4:	eb10 000c 	adds.w	r0, r0, ip
 8000cb8:	f1c3 0320 	rsb	r3, r3, #32
 8000cbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cc0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__addsf3+0x78>
 8000cc6:	4249      	negs	r1, r1
 8000cc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ccc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cd0:	d313      	bcc.n	8000cfa <__addsf3+0xa6>
 8000cd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cd6:	d306      	bcc.n	8000ce6 <__addsf3+0x92>
 8000cd8:	0840      	lsrs	r0, r0, #1
 8000cda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cde:	f102 0201 	add.w	r2, r2, #1
 8000ce2:	2afe      	cmp	r2, #254	; 0xfe
 8000ce4:	d251      	bcs.n	8000d8a <__addsf3+0x136>
 8000ce6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cee:	bf08      	it	eq
 8000cf0:	f020 0001 	biceq.w	r0, r0, #1
 8000cf4:	ea40 0003 	orr.w	r0, r0, r3
 8000cf8:	4770      	bx	lr
 8000cfa:	0049      	lsls	r1, r1, #1
 8000cfc:	eb40 0000 	adc.w	r0, r0, r0
 8000d00:	3a01      	subs	r2, #1
 8000d02:	bf28      	it	cs
 8000d04:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d08:	d2ed      	bcs.n	8000ce6 <__addsf3+0x92>
 8000d0a:	fab0 fc80 	clz	ip, r0
 8000d0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d12:	ebb2 020c 	subs.w	r2, r2, ip
 8000d16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d1a:	bfaa      	itet	ge
 8000d1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d20:	4252      	neglt	r2, r2
 8000d22:	4318      	orrge	r0, r3
 8000d24:	bfbc      	itt	lt
 8000d26:	40d0      	lsrlt	r0, r2
 8000d28:	4318      	orrlt	r0, r3
 8000d2a:	4770      	bx	lr
 8000d2c:	f092 0f00 	teq	r2, #0
 8000d30:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d34:	bf06      	itte	eq
 8000d36:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d3a:	3201      	addeq	r2, #1
 8000d3c:	3b01      	subne	r3, #1
 8000d3e:	e7b5      	b.n	8000cac <__addsf3+0x58>
 8000d40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d48:	bf18      	it	ne
 8000d4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d4e:	d021      	beq.n	8000d94 <__addsf3+0x140>
 8000d50:	ea92 0f03 	teq	r2, r3
 8000d54:	d004      	beq.n	8000d60 <__addsf3+0x10c>
 8000d56:	f092 0f00 	teq	r2, #0
 8000d5a:	bf08      	it	eq
 8000d5c:	4608      	moveq	r0, r1
 8000d5e:	4770      	bx	lr
 8000d60:	ea90 0f01 	teq	r0, r1
 8000d64:	bf1c      	itt	ne
 8000d66:	2000      	movne	r0, #0
 8000d68:	4770      	bxne	lr
 8000d6a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d6e:	d104      	bne.n	8000d7a <__addsf3+0x126>
 8000d70:	0040      	lsls	r0, r0, #1
 8000d72:	bf28      	it	cs
 8000d74:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d78:	4770      	bx	lr
 8000d7a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d7e:	bf3c      	itt	cc
 8000d80:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d84:	4770      	bxcc	lr
 8000d86:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d8a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d98:	bf16      	itet	ne
 8000d9a:	4608      	movne	r0, r1
 8000d9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000da0:	4601      	movne	r1, r0
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	bf06      	itte	eq
 8000da6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000daa:	ea90 0f01 	teqeq	r0, r1
 8000dae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_ui2f>:
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e004      	b.n	8000dc4 <__aeabi_i2f+0x8>
 8000dba:	bf00      	nop

08000dbc <__aeabi_i2f>:
 8000dbc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dc0:	bf48      	it	mi
 8000dc2:	4240      	negmi	r0, r0
 8000dc4:	ea5f 0c00 	movs.w	ip, r0
 8000dc8:	bf08      	it	eq
 8000dca:	4770      	bxeq	lr
 8000dcc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	f04f 0000 	mov.w	r0, #0
 8000dd6:	e01c      	b.n	8000e12 <__aeabi_l2f+0x2a>

08000dd8 <__aeabi_ul2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e00a      	b.n	8000dfc <__aeabi_l2f+0x14>
 8000de6:	bf00      	nop

08000de8 <__aeabi_l2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000df4:	d502      	bpl.n	8000dfc <__aeabi_l2f+0x14>
 8000df6:	4240      	negs	r0, r0
 8000df8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfc:	ea5f 0c01 	movs.w	ip, r1
 8000e00:	bf02      	ittt	eq
 8000e02:	4684      	moveq	ip, r0
 8000e04:	4601      	moveq	r1, r0
 8000e06:	2000      	moveq	r0, #0
 8000e08:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e0c:	bf08      	it	eq
 8000e0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e12:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e16:	fabc f28c 	clz	r2, ip
 8000e1a:	3a08      	subs	r2, #8
 8000e1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e20:	db10      	blt.n	8000e44 <__aeabi_l2f+0x5c>
 8000e22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e26:	4463      	add	r3, ip
 8000e28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2c:	f1c2 0220 	rsb	r2, r2, #32
 8000e30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e34:	fa20 f202 	lsr.w	r2, r0, r2
 8000e38:	eb43 0002 	adc.w	r0, r3, r2
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f102 0220 	add.w	r2, r2, #32
 8000e48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e4c:	f1c2 0220 	rsb	r2, r2, #32
 8000e50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e54:	fa21 f202 	lsr.w	r2, r1, r2
 8000e58:	eb43 0002 	adc.w	r0, r3, r2
 8000e5c:	bf08      	it	eq
 8000e5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e62:	4770      	bx	lr

08000e64 <__aeabi_fmul>:
 8000e64:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e6c:	bf1e      	ittt	ne
 8000e6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e72:	ea92 0f0c 	teqne	r2, ip
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d06f      	beq.n	8000f5c <__aeabi_fmul+0xf8>
 8000e7c:	441a      	add	r2, r3
 8000e7e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e82:	0240      	lsls	r0, r0, #9
 8000e84:	bf18      	it	ne
 8000e86:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e8a:	d01e      	beq.n	8000eca <__aeabi_fmul+0x66>
 8000e8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e90:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e94:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e98:	fba0 3101 	umull	r3, r1, r0, r1
 8000e9c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ea4:	bf3e      	ittt	cc
 8000ea6:	0049      	lslcc	r1, r1, #1
 8000ea8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	ea40 0001 	orr.w	r0, r0, r1
 8000eb2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eb6:	2afd      	cmp	r2, #253	; 0xfd
 8000eb8:	d81d      	bhi.n	8000ef6 <__aeabi_fmul+0x92>
 8000eba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ebe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ec2:	bf08      	it	eq
 8000ec4:	f020 0001 	biceq.w	r0, r0, #1
 8000ec8:	4770      	bx	lr
 8000eca:	f090 0f00 	teq	r0, #0
 8000ece:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ed2:	bf08      	it	eq
 8000ed4:	0249      	lsleq	r1, r1, #9
 8000ed6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eda:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ede:	3a7f      	subs	r2, #127	; 0x7f
 8000ee0:	bfc2      	ittt	gt
 8000ee2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ee6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eea:	4770      	bxgt	lr
 8000eec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef0:	f04f 0300 	mov.w	r3, #0
 8000ef4:	3a01      	subs	r2, #1
 8000ef6:	dc5d      	bgt.n	8000fb4 <__aeabi_fmul+0x150>
 8000ef8:	f112 0f19 	cmn.w	r2, #25
 8000efc:	bfdc      	itt	le
 8000efe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000f02:	4770      	bxle	lr
 8000f04:	f1c2 0200 	rsb	r2, r2, #0
 8000f08:	0041      	lsls	r1, r0, #1
 8000f0a:	fa21 f102 	lsr.w	r1, r1, r2
 8000f0e:	f1c2 0220 	rsb	r2, r2, #32
 8000f12:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f16:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f1a:	f140 0000 	adc.w	r0, r0, #0
 8000f1e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f22:	bf08      	it	eq
 8000f24:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f28:	4770      	bx	lr
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fmul+0xce>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fmul+0xe6>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e78f      	b.n	8000e7c <__aeabi_fmul+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	bf18      	it	ne
 8000f66:	ea93 0f0c 	teqne	r3, ip
 8000f6a:	d00a      	beq.n	8000f82 <__aeabi_fmul+0x11e>
 8000f6c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f70:	bf18      	it	ne
 8000f72:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	d1d8      	bne.n	8000f2a <__aeabi_fmul+0xc6>
 8000f78:	ea80 0001 	eor.w	r0, r0, r1
 8000f7c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f80:	4770      	bx	lr
 8000f82:	f090 0f00 	teq	r0, #0
 8000f86:	bf17      	itett	ne
 8000f88:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f8c:	4608      	moveq	r0, r1
 8000f8e:	f091 0f00 	teqne	r1, #0
 8000f92:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f96:	d014      	beq.n	8000fc2 <__aeabi_fmul+0x15e>
 8000f98:	ea92 0f0c 	teq	r2, ip
 8000f9c:	d101      	bne.n	8000fa2 <__aeabi_fmul+0x13e>
 8000f9e:	0242      	lsls	r2, r0, #9
 8000fa0:	d10f      	bne.n	8000fc2 <__aeabi_fmul+0x15e>
 8000fa2:	ea93 0f0c 	teq	r3, ip
 8000fa6:	d103      	bne.n	8000fb0 <__aeabi_fmul+0x14c>
 8000fa8:	024b      	lsls	r3, r1, #9
 8000faa:	bf18      	it	ne
 8000fac:	4608      	movne	r0, r1
 8000fae:	d108      	bne.n	8000fc2 <__aeabi_fmul+0x15e>
 8000fb0:	ea80 0001 	eor.w	r0, r0, r1
 8000fb4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fc0:	4770      	bx	lr
 8000fc2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fc6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fca:	4770      	bx	lr

08000fcc <__aeabi_fdiv>:
 8000fcc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fd0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fd4:	bf1e      	ittt	ne
 8000fd6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fda:	ea92 0f0c 	teqne	r2, ip
 8000fde:	ea93 0f0c 	teqne	r3, ip
 8000fe2:	d069      	beq.n	80010b8 <__aeabi_fdiv+0xec>
 8000fe4:	eba2 0203 	sub.w	r2, r2, r3
 8000fe8:	ea80 0c01 	eor.w	ip, r0, r1
 8000fec:	0249      	lsls	r1, r1, #9
 8000fee:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ff2:	d037      	beq.n	8001064 <__aeabi_fdiv+0x98>
 8000ff4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ffc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001000:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001004:	428b      	cmp	r3, r1
 8001006:	bf38      	it	cc
 8001008:	005b      	lslcc	r3, r3, #1
 800100a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800100e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8001012:	428b      	cmp	r3, r1
 8001014:	bf24      	itt	cs
 8001016:	1a5b      	subcs	r3, r3, r1
 8001018:	ea40 000c 	orrcs.w	r0, r0, ip
 800101c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001020:	bf24      	itt	cs
 8001022:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001026:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800102a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800102e:	bf24      	itt	cs
 8001030:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001034:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001038:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800103c:	bf24      	itt	cs
 800103e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001042:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001046:	011b      	lsls	r3, r3, #4
 8001048:	bf18      	it	ne
 800104a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800104e:	d1e0      	bne.n	8001012 <__aeabi_fdiv+0x46>
 8001050:	2afd      	cmp	r2, #253	; 0xfd
 8001052:	f63f af50 	bhi.w	8000ef6 <__aeabi_fmul+0x92>
 8001056:	428b      	cmp	r3, r1
 8001058:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800105c:	bf08      	it	eq
 800105e:	f020 0001 	biceq.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001068:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800106c:	327f      	adds	r2, #127	; 0x7f
 800106e:	bfc2      	ittt	gt
 8001070:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001074:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001078:	4770      	bxgt	lr
 800107a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800107e:	f04f 0300 	mov.w	r3, #0
 8001082:	3a01      	subs	r2, #1
 8001084:	e737      	b.n	8000ef6 <__aeabi_fmul+0x92>
 8001086:	f092 0f00 	teq	r2, #0
 800108a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800108e:	bf02      	ittt	eq
 8001090:	0040      	lsleq	r0, r0, #1
 8001092:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001096:	3a01      	subeq	r2, #1
 8001098:	d0f9      	beq.n	800108e <__aeabi_fdiv+0xc2>
 800109a:	ea40 000c 	orr.w	r0, r0, ip
 800109e:	f093 0f00 	teq	r3, #0
 80010a2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80010a6:	bf02      	ittt	eq
 80010a8:	0049      	lsleq	r1, r1, #1
 80010aa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010ae:	3b01      	subeq	r3, #1
 80010b0:	d0f9      	beq.n	80010a6 <__aeabi_fdiv+0xda>
 80010b2:	ea41 010c 	orr.w	r1, r1, ip
 80010b6:	e795      	b.n	8000fe4 <__aeabi_fdiv+0x18>
 80010b8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010bc:	ea92 0f0c 	teq	r2, ip
 80010c0:	d108      	bne.n	80010d4 <__aeabi_fdiv+0x108>
 80010c2:	0242      	lsls	r2, r0, #9
 80010c4:	f47f af7d 	bne.w	8000fc2 <__aeabi_fmul+0x15e>
 80010c8:	ea93 0f0c 	teq	r3, ip
 80010cc:	f47f af70 	bne.w	8000fb0 <__aeabi_fmul+0x14c>
 80010d0:	4608      	mov	r0, r1
 80010d2:	e776      	b.n	8000fc2 <__aeabi_fmul+0x15e>
 80010d4:	ea93 0f0c 	teq	r3, ip
 80010d8:	d104      	bne.n	80010e4 <__aeabi_fdiv+0x118>
 80010da:	024b      	lsls	r3, r1, #9
 80010dc:	f43f af4c 	beq.w	8000f78 <__aeabi_fmul+0x114>
 80010e0:	4608      	mov	r0, r1
 80010e2:	e76e      	b.n	8000fc2 <__aeabi_fmul+0x15e>
 80010e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e8:	bf18      	it	ne
 80010ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010ee:	d1ca      	bne.n	8001086 <__aeabi_fdiv+0xba>
 80010f0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010f4:	f47f af5c 	bne.w	8000fb0 <__aeabi_fmul+0x14c>
 80010f8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010fc:	f47f af3c 	bne.w	8000f78 <__aeabi_fmul+0x114>
 8001100:	e75f      	b.n	8000fc2 <__aeabi_fmul+0x15e>
 8001102:	bf00      	nop

08001104 <__gesf2>:
 8001104:	f04f 3cff 	mov.w	ip, #4294967295
 8001108:	e006      	b.n	8001118 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__lesf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	e002      	b.n	8001118 <__cmpsf2+0x4>
 8001112:	bf00      	nop

08001114 <__cmpsf2>:
 8001114:	f04f 0c01 	mov.w	ip, #1
 8001118:	f84d cd04 	str.w	ip, [sp, #-4]!
 800111c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001120:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001124:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001128:	bf18      	it	ne
 800112a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800112e:	d011      	beq.n	8001154 <__cmpsf2+0x40>
 8001130:	b001      	add	sp, #4
 8001132:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001136:	bf18      	it	ne
 8001138:	ea90 0f01 	teqne	r0, r1
 800113c:	bf58      	it	pl
 800113e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001142:	bf88      	it	hi
 8001144:	17c8      	asrhi	r0, r1, #31
 8001146:	bf38      	it	cc
 8001148:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800114c:	bf18      	it	ne
 800114e:	f040 0001 	orrne.w	r0, r0, #1
 8001152:	4770      	bx	lr
 8001154:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001158:	d102      	bne.n	8001160 <__cmpsf2+0x4c>
 800115a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800115e:	d105      	bne.n	800116c <__cmpsf2+0x58>
 8001160:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001164:	d1e4      	bne.n	8001130 <__cmpsf2+0x1c>
 8001166:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800116a:	d0e1      	beq.n	8001130 <__cmpsf2+0x1c>
 800116c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop

08001174 <__aeabi_cfrcmple>:
 8001174:	4684      	mov	ip, r0
 8001176:	4608      	mov	r0, r1
 8001178:	4661      	mov	r1, ip
 800117a:	e7ff      	b.n	800117c <__aeabi_cfcmpeq>

0800117c <__aeabi_cfcmpeq>:
 800117c:	b50f      	push	{r0, r1, r2, r3, lr}
 800117e:	f7ff ffc9 	bl	8001114 <__cmpsf2>
 8001182:	2800      	cmp	r0, #0
 8001184:	bf48      	it	mi
 8001186:	f110 0f00 	cmnmi.w	r0, #0
 800118a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800118c <__aeabi_fcmpeq>:
 800118c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001190:	f7ff fff4 	bl	800117c <__aeabi_cfcmpeq>
 8001194:	bf0c      	ite	eq
 8001196:	2001      	moveq	r0, #1
 8001198:	2000      	movne	r0, #0
 800119a:	f85d fb08 	ldr.w	pc, [sp], #8
 800119e:	bf00      	nop

080011a0 <__aeabi_fcmplt>:
 80011a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011a4:	f7ff ffea 	bl	800117c <__aeabi_cfcmpeq>
 80011a8:	bf34      	ite	cc
 80011aa:	2001      	movcc	r0, #1
 80011ac:	2000      	movcs	r0, #0
 80011ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80011b2:	bf00      	nop

080011b4 <__aeabi_fcmple>:
 80011b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b8:	f7ff ffe0 	bl	800117c <__aeabi_cfcmpeq>
 80011bc:	bf94      	ite	ls
 80011be:	2001      	movls	r0, #1
 80011c0:	2000      	movhi	r0, #0
 80011c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011c6:	bf00      	nop

080011c8 <__aeabi_fcmpge>:
 80011c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011cc:	f7ff ffd2 	bl	8001174 <__aeabi_cfrcmple>
 80011d0:	bf94      	ite	ls
 80011d2:	2001      	movls	r0, #1
 80011d4:	2000      	movhi	r0, #0
 80011d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011da:	bf00      	nop

080011dc <__aeabi_fcmpgt>:
 80011dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011e0:	f7ff ffc8 	bl	8001174 <__aeabi_cfrcmple>
 80011e4:	bf34      	ite	cc
 80011e6:	2001      	movcc	r0, #1
 80011e8:	2000      	movcs	r0, #0
 80011ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ee:	bf00      	nop

080011f0 <__aeabi_fcmpun>:
 80011f0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011f4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80011f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80011fc:	d102      	bne.n	8001204 <__aeabi_fcmpun+0x14>
 80011fe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001202:	d108      	bne.n	8001216 <__aeabi_fcmpun+0x26>
 8001204:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001208:	d102      	bne.n	8001210 <__aeabi_fcmpun+0x20>
 800120a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800120e:	d102      	bne.n	8001216 <__aeabi_fcmpun+0x26>
 8001210:	f04f 0000 	mov.w	r0, #0
 8001214:	4770      	bx	lr
 8001216:	f04f 0001 	mov.w	r0, #1
 800121a:	4770      	bx	lr

0800121c <__aeabi_d2lz>:
 800121c:	b538      	push	{r3, r4, r5, lr}
 800121e:	4605      	mov	r5, r0
 8001220:	460c      	mov	r4, r1
 8001222:	2200      	movs	r2, #0
 8001224:	2300      	movs	r3, #0
 8001226:	4628      	mov	r0, r5
 8001228:	4621      	mov	r1, r4
 800122a:	f7ff fc37 	bl	8000a9c <__aeabi_dcmplt>
 800122e:	b928      	cbnz	r0, 800123c <__aeabi_d2lz+0x20>
 8001230:	4628      	mov	r0, r5
 8001232:	4621      	mov	r1, r4
 8001234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001238:	f000 b80a 	b.w	8001250 <__aeabi_d2ulz>
 800123c:	4628      	mov	r0, r5
 800123e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001242:	f000 f805 	bl	8001250 <__aeabi_d2ulz>
 8001246:	4240      	negs	r0, r0
 8001248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800124c:	bd38      	pop	{r3, r4, r5, pc}
 800124e:	bf00      	nop

08001250 <__aeabi_d2ulz>:
 8001250:	b5d0      	push	{r4, r6, r7, lr}
 8001252:	2200      	movs	r2, #0
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <__aeabi_d2ulz+0x34>)
 8001256:	4606      	mov	r6, r0
 8001258:	460f      	mov	r7, r1
 800125a:	f7ff f9ad 	bl	80005b8 <__aeabi_dmul>
 800125e:	f7ff fc83 	bl	8000b68 <__aeabi_d2uiz>
 8001262:	4604      	mov	r4, r0
 8001264:	f7ff f92e 	bl	80004c4 <__aeabi_ui2d>
 8001268:	2200      	movs	r2, #0
 800126a:	4b07      	ldr	r3, [pc, #28]	; (8001288 <__aeabi_d2ulz+0x38>)
 800126c:	f7ff f9a4 	bl	80005b8 <__aeabi_dmul>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4630      	mov	r0, r6
 8001276:	4639      	mov	r1, r7
 8001278:	f7fe ffe6 	bl	8000248 <__aeabi_dsub>
 800127c:	f7ff fc74 	bl	8000b68 <__aeabi_d2uiz>
 8001280:	4621      	mov	r1, r4
 8001282:	bdd0      	pop	{r4, r6, r7, pc}
 8001284:	3df00000 	.word	0x3df00000
 8001288:	41f00000 	.word	0x41f00000

0800128c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <MX_CAN_Init+0x64>)
 8001292:	4a18      	ldr	r2, [pc, #96]	; (80012f4 <MX_CAN_Init+0x68>)
 8001294:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8001296:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <MX_CAN_Init+0x64>)
 8001298:	2204      	movs	r2, #4
 800129a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_CAN_Init+0x64>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <MX_CAN_Init+0x64>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_CAN_Init+0x64>)
 80012aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80012ae:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_CAN_Init+0x64>)
 80012b2:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 80012b6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80012b8:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <MX_CAN_Init+0x64>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_CAN_Init+0x64>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <MX_CAN_Init+0x64>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_CAN_Init+0x64>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <MX_CAN_Init+0x64>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_CAN_Init+0x64>)
 80012d8:	2200      	movs	r2, #0
 80012da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	; (80012f0 <MX_CAN_Init+0x64>)
 80012de:	f001 fe6f 	bl	8002fc0 <HAL_CAN_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80012e8:	f000 fedc 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200001f8 	.word	0x200001f8
 80012f4:	40006400 	.word	0x40006400

080012f8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a25      	ldr	r2, [pc, #148]	; (80013a8 <HAL_CAN_MspInit+0xb0>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d143      	bne.n	80013a0 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001318:	4b24      	ldr	r3, [pc, #144]	; (80013ac <HAL_CAN_MspInit+0xb4>)
 800131a:	69db      	ldr	r3, [r3, #28]
 800131c:	4a23      	ldr	r2, [pc, #140]	; (80013ac <HAL_CAN_MspInit+0xb4>)
 800131e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001322:	61d3      	str	r3, [r2, #28]
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <HAL_CAN_MspInit+0xb4>)
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001330:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <HAL_CAN_MspInit+0xb4>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a1d      	ldr	r2, [pc, #116]	; (80013ac <HAL_CAN_MspInit+0xb4>)
 8001336:	f043 0308 	orr.w	r3, r3, #8
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <HAL_CAN_MspInit+0xb4>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0308 	and.w	r3, r3, #8
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001348:	f44f 7380 	mov.w	r3, #256	; 0x100
 800134c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	4814      	ldr	r0, [pc, #80]	; (80013b0 <HAL_CAN_MspInit+0xb8>)
 800135e:	f002 fa89 	bl	8003874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001362:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	480e      	ldr	r0, [pc, #56]	; (80013b0 <HAL_CAN_MspInit+0xb8>)
 8001378:	f002 fa7c 	bl	8003874 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <HAL_CAN_MspInit+0xbc>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
 800139a:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <HAL_CAN_MspInit+0xbc>)
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80013a0:	bf00      	nop
 80013a2:	3728      	adds	r7, #40	; 0x28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40006400 	.word	0x40006400
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40010c00 	.word	0x40010c00
 80013b4:	40010000 	.word	0x40010000

080013b8 <CanFilterSetup>:
}

/* USER CODE BEGIN 1 */

void CanFilterSetup(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* TODO: Review Filter Implementation */
  // Use mask and list mode to filter IDs from the CAN ID BOM

  // Filter for 0x500 and 0x600 IDs
  CAN_filter0.FilterIdHigh = (uint16_t) (0x501 << 5);
 80013bc:	4b23      	ldr	r3, [pc, #140]	; (800144c <CanFilterSetup+0x94>)
 80013be:	f24a 0220 	movw	r2, #40992	; 0xa020
 80013c2:	601a      	str	r2, [r3, #0]
  CAN_filter0.FilterMaskIdHigh = (uint16_t) (0x7F5 << 5);
 80013c4:	4b21      	ldr	r3, [pc, #132]	; (800144c <CanFilterSetup+0x94>)
 80013c6:	f64f 62a0 	movw	r2, #65184	; 0xfea0
 80013ca:	609a      	str	r2, [r3, #8]

  CAN_filter0.FilterIdLow = (uint16_t) (0x620 << 5);
 80013cc:	4b1f      	ldr	r3, [pc, #124]	; (800144c <CanFilterSetup+0x94>)
 80013ce:	f44f 4244 	mov.w	r2, #50176	; 0xc400
 80013d2:	605a      	str	r2, [r3, #4]
  CAN_filter0.FilterMaskIdLow = (uint16_t) (0x7F8 << 5);
 80013d4:	4b1d      	ldr	r3, [pc, #116]	; (800144c <CanFilterSetup+0x94>)
 80013d6:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80013da:	60da      	str	r2, [r3, #12]

  CAN_filter0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	; (800144c <CanFilterSetup+0x94>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  CAN_filter0.FilterBank = (uint32_t) 0;
 80013e2:	4b1a      	ldr	r3, [pc, #104]	; (800144c <CanFilterSetup+0x94>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	615a      	str	r2, [r3, #20]
  CAN_filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 80013e8:	4b18      	ldr	r3, [pc, #96]	; (800144c <CanFilterSetup+0x94>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  CAN_filter0.FilterScale = CAN_FILTERSCALE_16BIT;
 80013ee:	4b17      	ldr	r3, [pc, #92]	; (800144c <CanFilterSetup+0x94>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	61da      	str	r2, [r3, #28]
  CAN_filter0.FilterActivation = CAN_FILTER_ENABLE;
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <CanFilterSetup+0x94>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	621a      	str	r2, [r3, #32]

  // Remaining IDs filtered with list mode
  CAN_filter1.FilterIdHigh = (uint16_t) (0x502 << 5);
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <CanFilterSetup+0x98>)
 80013fc:	f24a 0240 	movw	r2, #41024	; 0xa040
 8001400:	601a      	str	r2, [r3, #0]
  CAN_filter1.FilterMaskIdHigh = (uint16_t) (0x401 << 5);
 8001402:	4b13      	ldr	r3, [pc, #76]	; (8001450 <CanFilterSetup+0x98>)
 8001404:	f248 0220 	movw	r2, #32800	; 0x8020
 8001408:	609a      	str	r2, [r3, #8]

  CAN_filter1.FilterIdLow = (uint16_t) (0x401 << 5);
 800140a:	4b11      	ldr	r3, [pc, #68]	; (8001450 <CanFilterSetup+0x98>)
 800140c:	f248 0220 	movw	r2, #32800	; 0x8020
 8001410:	605a      	str	r2, [r3, #4]
  CAN_filter1.FilterMaskIdLow = (uint16_t) (0x401 << 5);
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <CanFilterSetup+0x98>)
 8001414:	f248 0220 	movw	r2, #32800	; 0x8020
 8001418:	60da      	str	r2, [r3, #12]

  CAN_filter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <CanFilterSetup+0x98>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  CAN_filter1.FilterBank = (uint32_t) 1;
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <CanFilterSetup+0x98>)
 8001422:	2201      	movs	r2, #1
 8001424:	615a      	str	r2, [r3, #20]
  CAN_filter1.FilterMode = CAN_FILTERMODE_IDLIST;
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <CanFilterSetup+0x98>)
 8001428:	2201      	movs	r2, #1
 800142a:	619a      	str	r2, [r3, #24]
  CAN_filter1.FilterScale = CAN_FILTERSCALE_16BIT;
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <CanFilterSetup+0x98>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  CAN_filter1.FilterActivation = CAN_FILTER_ENABLE;
 8001432:	4b07      	ldr	r3, [pc, #28]	; (8001450 <CanFilterSetup+0x98>)
 8001434:	2201      	movs	r2, #1
 8001436:	621a      	str	r2, [r3, #32]

  // Configure reception filters
  HAL_CAN_ConfigFilter(&hcan, &CAN_filter0);
 8001438:	4904      	ldr	r1, [pc, #16]	; (800144c <CanFilterSetup+0x94>)
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <CanFilterSetup+0x9c>)
 800143c:	f001 febb 	bl	80031b6 <HAL_CAN_ConfigFilter>
  HAL_CAN_ConfigFilter(&hcan, &CAN_filter1);
 8001440:	4903      	ldr	r1, [pc, #12]	; (8001450 <CanFilterSetup+0x98>)
 8001442:	4804      	ldr	r0, [pc, #16]	; (8001454 <CanFilterSetup+0x9c>)
 8001444:	f001 feb7 	bl	80031b6 <HAL_CAN_ConfigFilter>

}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000340 	.word	0x20000340
 8001450:	20000368 	.word	0x20000368
 8001454:	200001f8 	.word	0x200001f8

08001458 <Can_Init>:

/*
 * CAN set-up: Sets up the filters, Starts CAN with HAL, and Activates notifications for interrupts.
 */
void Can_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
  CanFilterSetup();
 800145e:	f7ff ffab 	bl	80013b8 <CanFilterSetup>
  can_start = HAL_CAN_Start(&hcan);
 8001462:	4808      	ldr	r0, [pc, #32]	; (8001484 <Can_Init+0x2c>)
 8001464:	f001 ff70 	bl	8003348 <HAL_CAN_Start>
 8001468:	4603      	mov	r3, r0
 800146a:	461a      	mov	r2, r3
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <Can_Init+0x30>)
 800146e:	701a      	strb	r2, [r3, #0]
  assert_param(can_start == HAL_OK);

  HAL_StatusTypeDef can_notification_status = HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001470:	2102      	movs	r1, #2
 8001472:	4804      	ldr	r0, [pc, #16]	; (8001484 <Can_Init+0x2c>)
 8001474:	f002 f8f4 	bl	8003660 <HAL_CAN_ActivateNotification>
 8001478:	4603      	mov	r3, r0
 800147a:	71fb      	strb	r3, [r7, #7]
  assert_param(can_notification_status == HAL_OK);

  /* To avoid warning of unused variable */
  (void) can_notification_status;
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200001f8 	.word	0x200001f8
 8001488:	200001f4 	.word	0x200001f4

0800148c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of canMessageQueue */
  canMessageQueueHandle = osMessageQueueNew (10, sizeof(uint16_t), &canMessageQueue_attributes);
 8001490:	4a2c      	ldr	r2, [pc, #176]	; (8001544 <MX_FREERTOS_Init+0xb8>)
 8001492:	2102      	movs	r1, #2
 8001494:	200a      	movs	r0, #10
 8001496:	f004 ffd1 	bl	800643c <osMessageQueueNew>
 800149a:	4603      	mov	r3, r0
 800149c:	4a2a      	ldr	r2, [pc, #168]	; (8001548 <MX_FREERTOS_Init+0xbc>)
 800149e:	6013      	str	r3, [r2, #0]

  /* creation of imuMessageQueue */
  imuMessageQueueHandle = osMessageQueueNew (10, sizeof(uint16_t), &imuMessageQueue_attributes);
 80014a0:	4a2a      	ldr	r2, [pc, #168]	; (800154c <MX_FREERTOS_Init+0xc0>)
 80014a2:	2102      	movs	r1, #2
 80014a4:	200a      	movs	r0, #10
 80014a6:	f004 ffc9 	bl	800643c <osMessageQueueNew>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4a28      	ldr	r2, [pc, #160]	; (8001550 <MX_FREERTOS_Init+0xc4>)
 80014ae:	6013      	str	r3, [r2, #0]

  /* creation of gpsMessageQueue */
  gpsMessageQueueHandle = osMessageQueueNew (10, sizeof(uint16_t), &gpsMessageQueue_attributes);
 80014b0:	4a28      	ldr	r2, [pc, #160]	; (8001554 <MX_FREERTOS_Init+0xc8>)
 80014b2:	2102      	movs	r1, #2
 80014b4:	200a      	movs	r0, #10
 80014b6:	f004 ffc1 	bl	800643c <osMessageQueueNew>
 80014ba:	4603      	mov	r3, r0
 80014bc:	4a26      	ldr	r2, [pc, #152]	; (8001558 <MX_FREERTOS_Init+0xcc>)
 80014be:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of StartDefaultTask */
  StartDefaultTaskHandle = osThreadNew(startDefaultTask, NULL, &StartDefaultTask_attributes);
 80014c0:	4a26      	ldr	r2, [pc, #152]	; (800155c <MX_FREERTOS_Init+0xd0>)
 80014c2:	2100      	movs	r1, #0
 80014c4:	4826      	ldr	r0, [pc, #152]	; (8001560 <MX_FREERTOS_Init+0xd4>)
 80014c6:	f004 fe1b 	bl	8006100 <osThreadNew>
 80014ca:	4603      	mov	r3, r0
 80014cc:	4a25      	ldr	r2, [pc, #148]	; (8001564 <MX_FREERTOS_Init+0xd8>)
 80014ce:	6013      	str	r3, [r2, #0]

  /* creation of readCANTask */
  readCANTaskHandle = osThreadNew(read_CAN_task, NULL, &readCANTask_attributes);
 80014d0:	4a25      	ldr	r2, [pc, #148]	; (8001568 <MX_FREERTOS_Init+0xdc>)
 80014d2:	2100      	movs	r1, #0
 80014d4:	4825      	ldr	r0, [pc, #148]	; (800156c <MX_FREERTOS_Init+0xe0>)
 80014d6:	f004 fe13 	bl	8006100 <osThreadNew>
 80014da:	4603      	mov	r3, r0
 80014dc:	4a24      	ldr	r2, [pc, #144]	; (8001570 <MX_FREERTOS_Init+0xe4>)
 80014de:	6013      	str	r3, [r2, #0]

  /* creation of transmitCANTask */
  transmitCANTaskHandle = osThreadNew(transmit_CAN_task, NULL, &transmitCANTask_attributes);
 80014e0:	4a24      	ldr	r2, [pc, #144]	; (8001574 <MX_FREERTOS_Init+0xe8>)
 80014e2:	2100      	movs	r1, #0
 80014e4:	4824      	ldr	r0, [pc, #144]	; (8001578 <MX_FREERTOS_Init+0xec>)
 80014e6:	f004 fe0b 	bl	8006100 <osThreadNew>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4a23      	ldr	r2, [pc, #140]	; (800157c <MX_FREERTOS_Init+0xf0>)
 80014ee:	6013      	str	r3, [r2, #0]

  /* creation of readIMUTask */
  readIMUTaskHandle = osThreadNew(read_IMU_task, NULL, &readIMUTask_attributes);
 80014f0:	4a23      	ldr	r2, [pc, #140]	; (8001580 <MX_FREERTOS_Init+0xf4>)
 80014f2:	2100      	movs	r1, #0
 80014f4:	4823      	ldr	r0, [pc, #140]	; (8001584 <MX_FREERTOS_Init+0xf8>)
 80014f6:	f004 fe03 	bl	8006100 <osThreadNew>
 80014fa:	4603      	mov	r3, r0
 80014fc:	4a22      	ldr	r2, [pc, #136]	; (8001588 <MX_FREERTOS_Init+0xfc>)
 80014fe:	6013      	str	r3, [r2, #0]

  /* creation of transmitIMUTask */
  transmitIMUTaskHandle = osThreadNew(transmit_IMU_task, NULL, &transmitIMUTask_attributes);
 8001500:	4a22      	ldr	r2, [pc, #136]	; (800158c <MX_FREERTOS_Init+0x100>)
 8001502:	2100      	movs	r1, #0
 8001504:	4822      	ldr	r0, [pc, #136]	; (8001590 <MX_FREERTOS_Init+0x104>)
 8001506:	f004 fdfb 	bl	8006100 <osThreadNew>
 800150a:	4603      	mov	r3, r0
 800150c:	4a21      	ldr	r2, [pc, #132]	; (8001594 <MX_FREERTOS_Init+0x108>)
 800150e:	6013      	str	r3, [r2, #0]

  /* creation of readGPSTask */
  readGPSTaskHandle = osThreadNew(read_GPS_task, NULL, &readGPSTask_attributes);
 8001510:	4a21      	ldr	r2, [pc, #132]	; (8001598 <MX_FREERTOS_Init+0x10c>)
 8001512:	2100      	movs	r1, #0
 8001514:	4821      	ldr	r0, [pc, #132]	; (800159c <MX_FREERTOS_Init+0x110>)
 8001516:	f004 fdf3 	bl	8006100 <osThreadNew>
 800151a:	4603      	mov	r3, r0
 800151c:	4a20      	ldr	r2, [pc, #128]	; (80015a0 <MX_FREERTOS_Init+0x114>)
 800151e:	6013      	str	r3, [r2, #0]

  /* creation of transmitGPSTask */
  transmitGPSTaskHandle = osThreadNew(transmit_GPS_task, NULL, &transmitGPSTask_attributes);
 8001520:	4a20      	ldr	r2, [pc, #128]	; (80015a4 <MX_FREERTOS_Init+0x118>)
 8001522:	2100      	movs	r1, #0
 8001524:	4820      	ldr	r0, [pc, #128]	; (80015a8 <MX_FREERTOS_Init+0x11c>)
 8001526:	f004 fdeb 	bl	8006100 <osThreadNew>
 800152a:	4603      	mov	r3, r0
 800152c:	4a1f      	ldr	r2, [pc, #124]	; (80015ac <MX_FREERTOS_Init+0x120>)
 800152e:	6013      	str	r3, [r2, #0]

  /* creation of kernelLEDTask */
  kernelLEDTaskHandle = osThreadNew(kernel_LED_task, NULL, &kernelLEDTask_attributes);
 8001530:	4a1f      	ldr	r2, [pc, #124]	; (80015b0 <MX_FREERTOS_Init+0x124>)
 8001532:	2100      	movs	r1, #0
 8001534:	481f      	ldr	r0, [pc, #124]	; (80015b4 <MX_FREERTOS_Init+0x128>)
 8001536:	f004 fde3 	bl	8006100 <osThreadNew>
 800153a:	4603      	mov	r3, r0
 800153c:	4a1e      	ldr	r2, [pc, #120]	; (80015b8 <MX_FREERTOS_Init+0x12c>)
 800153e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	0800da50 	.word	0x0800da50
 8001548:	20000240 	.word	0x20000240
 800154c:	0800da68 	.word	0x0800da68
 8001550:	20000244 	.word	0x20000244
 8001554:	0800da80 	.word	0x0800da80
 8001558:	20000248 	.word	0x20000248
 800155c:	0800d930 	.word	0x0800d930
 8001560:	080015bd 	.word	0x080015bd
 8001564:	20000220 	.word	0x20000220
 8001568:	0800d954 	.word	0x0800d954
 800156c:	080015cd 	.word	0x080015cd
 8001570:	20000224 	.word	0x20000224
 8001574:	0800d978 	.word	0x0800d978
 8001578:	08001675 	.word	0x08001675
 800157c:	20000228 	.word	0x20000228
 8001580:	0800d99c 	.word	0x0800d99c
 8001584:	08001781 	.word	0x08001781
 8001588:	2000022c 	.word	0x2000022c
 800158c:	0800d9c0 	.word	0x0800d9c0
 8001590:	0800181d 	.word	0x0800181d
 8001594:	20000230 	.word	0x20000230
 8001598:	0800d9e4 	.word	0x0800d9e4
 800159c:	080018e9 	.word	0x080018e9
 80015a0:	20000234 	.word	0x20000234
 80015a4:	0800da08 	.word	0x0800da08
 80015a8:	0800192d 	.word	0x0800192d
 80015ac:	20000238 	.word	0x20000238
 80015b0:	0800da2c 	.word	0x0800da2c
 80015b4:	080019c9 	.word	0x080019c9
 80015b8:	2000023c 	.word	0x2000023c

080015bc <startDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startDefaultTask */
void startDefaultTask(void *argument)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80015c4:	2001      	movs	r0, #1
 80015c6:	f004 ff0b 	bl	80063e0 <osDelay>
 80015ca:	e7fb      	b.n	80015c4 <startDefaultTask+0x8>

080015cc <read_CAN_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_CAN_task */
void read_CAN_task(void *argument)
{
 80015cc:	b5b0      	push	{r4, r5, r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  while (1) {

    /* Wait for thread flags to be set in the CAN Rx FIFO0 Interrupt Callback */
    osThreadFlagsWait(CAN_READY, osFlagsWaitAll, osWaitForever);
 80015d4:	f04f 32ff 	mov.w	r2, #4294967295
 80015d8:	2101      	movs	r1, #1
 80015da:	2001      	movs	r0, #1
 80015dc:	f004 fe6c 	bl	80062b8 <osThreadFlagsWait>

    /* If CAN Rx FIFO0 is not empty */
    if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) != 0) {
 80015e0:	2100      	movs	r1, #0
 80015e2:	481e      	ldr	r0, [pc, #120]	; (800165c <read_CAN_task+0x90>)
 80015e4:	f002 f815 	bl	8003612 <HAL_CAN_GetRxFifoFillLevel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d031      	beq.n	8001652 <read_CAN_task+0x86>

      /* There are multiple CAN IDs being passed through the filter, pull out the current message */
      rx_status = HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &can_rx_header, current_can_data);
 80015ee:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <read_CAN_task+0x94>)
 80015f0:	4a1c      	ldr	r2, [pc, #112]	; (8001664 <read_CAN_task+0x98>)
 80015f2:	2100      	movs	r1, #0
 80015f4:	4819      	ldr	r0, [pc, #100]	; (800165c <read_CAN_task+0x90>)
 80015f6:	f001 feeb 	bl	80033d0 <HAL_CAN_GetRxMessage>
 80015fa:	4603      	mov	r3, r0
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <read_CAN_task+0x9c>)
 8001600:	701a      	strb	r2, [r3, #0]

      /* Check the rx status */
      if (rx_status != HAL_OK) {
 8001602:	4b19      	ldr	r3, [pc, #100]	; (8001668 <read_CAN_task+0x9c>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <read_CAN_task+0x42>
	  Error_Handler();
 800160a:	f000 fd4b 	bl	80020a4 <Error_Handler>
      }

      /* Package into CAN_msg_t */
      current_can_message.header = can_rx_header;
 800160e:	4a17      	ldr	r2, [pc, #92]	; (800166c <read_CAN_task+0xa0>)
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <read_CAN_task+0x98>)
 8001612:	4614      	mov	r4, r2
 8001614:	461d      	mov	r5, r3
 8001616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800161a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800161e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

      /* Copy all bytes of data */
      for (uint8_t i = 0; i < 8; i++) {
 8001622:	2300      	movs	r3, #0
 8001624:	73fb      	strb	r3, [r7, #15]
 8001626:	e00a      	b.n	800163e <read_CAN_task+0x72>
	current_can_message.data[i] = current_can_data[i];
 8001628:	7bfa      	ldrb	r2, [r7, #15]
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	490c      	ldr	r1, [pc, #48]	; (8001660 <read_CAN_task+0x94>)
 800162e:	5c89      	ldrb	r1, [r1, r2]
 8001630:	4a0e      	ldr	r2, [pc, #56]	; (800166c <read_CAN_task+0xa0>)
 8001632:	4413      	add	r3, r2
 8001634:	460a      	mov	r2, r1
 8001636:	771a      	strb	r2, [r3, #28]
      for (uint8_t i = 0; i < 8; i++) {
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	3301      	adds	r3, #1
 800163c:	73fb      	strb	r3, [r7, #15]
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	2b07      	cmp	r3, #7
 8001642:	d9f1      	bls.n	8001628 <read_CAN_task+0x5c>
      }

      /* Add CAN message onto canMessageQueue */
      osMessageQueuePut(canMessageQueueHandle, &current_can_message, 0U, 0U);
 8001644:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <read_CAN_task+0xa4>)
 8001646:	6818      	ldr	r0, [r3, #0]
 8001648:	2300      	movs	r3, #0
 800164a:	2200      	movs	r2, #0
 800164c:	4907      	ldr	r1, [pc, #28]	; (800166c <read_CAN_task+0xa0>)
 800164e:	f004 ff7b 	bl	8006548 <osMessageQueuePut>
    }

    /* Enables Interrupts */
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001652:	2102      	movs	r1, #2
 8001654:	4801      	ldr	r0, [pc, #4]	; (800165c <read_CAN_task+0x90>)
 8001656:	f002 f803 	bl	8003660 <HAL_CAN_ActivateNotification>
    osThreadFlagsWait(CAN_READY, osFlagsWaitAll, osWaitForever);
 800165a:	e7bb      	b.n	80015d4 <read_CAN_task+0x8>
 800165c:	200001f8 	.word	0x200001f8
 8001660:	200003ac 	.word	0x200003ac
 8001664:	20000390 	.word	0x20000390
 8001668:	2000024c 	.word	0x2000024c
 800166c:	20000250 	.word	0x20000250
 8001670:	20000240 	.word	0x20000240

08001674 <transmit_CAN_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_CAN_task */
void transmit_CAN_task(void *argument)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08c      	sub	sp, #48	; 0x30
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  while (1) {

    /* Check if there are messages in the queue */
    if (osMessageQueueGetCount(canMessageQueueHandle) == 0) {
 800167c:	4b3c      	ldr	r3, [pc, #240]	; (8001770 <transmit_CAN_task+0xfc>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f005 f847 	bl	8006714 <osMessageQueueGetCount>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <transmit_CAN_task+0x1c>
      osThreadYield();
 800168c:	f004 fde2 	bl	8006254 <osThreadYield>
    }

    /* Retrieve CAN message from queue */
    queue_status = osMessageQueueGet(canMessageQueueHandle, &can_message, NULL, osWaitForever);
 8001690:	4b37      	ldr	r3, [pc, #220]	; (8001770 <transmit_CAN_task+0xfc>)
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	f04f 33ff 	mov.w	r3, #4294967295
 8001698:	2200      	movs	r2, #0
 800169a:	4936      	ldr	r1, [pc, #216]	; (8001774 <transmit_CAN_task+0x100>)
 800169c:	f004 ffc8 	bl	8006630 <osMessageQueueGet>
 80016a0:	62b8      	str	r0, [r7, #40]	; 0x28

    /* Yield if nothing on queue */
    if (queue_status != osOK){
 80016a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <transmit_CAN_task+0x38>
      osThreadYield();
 80016a8:	f004 fdd4 	bl	8006254 <osThreadYield>
    }

    /* Initialize a CAN buffer */
    uint8_t can_buffer[CAN_BUFFER_LEN] = {0};
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	821a      	strh	r2, [r3, #16]

    /* TIMESTAMP: 8 ASCII characters */
    for (uint8_t i=0; i<CAN_BUFFER_LEN - 14; i++) {
 80016c0:	2300      	movs	r3, #0
 80016c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80016c6:	e00b      	b.n	80016e0 <transmit_CAN_task+0x6c>
      /* send 'D' as placeholder */
      can_buffer[i] = 'D';
 80016c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016cc:	3330      	adds	r3, #48	; 0x30
 80016ce:	443b      	add	r3, r7
 80016d0:	2244      	movs	r2, #68	; 0x44
 80016d2:	f803 2c24 	strb.w	r2, [r3, #-36]
    for (uint8_t i=0; i<CAN_BUFFER_LEN - 14; i++) {
 80016d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016da:	3301      	adds	r3, #1
 80016dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80016e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016e4:	2b07      	cmp	r3, #7
 80016e6:	d9ef      	bls.n	80016c8 <transmit_CAN_task+0x54>
    }

    /* CAN MESSAGE IDENTIFIER */
    can_buffer[CAN_BUFFER_LEN - 14] = '#';
 80016e8:	2323      	movs	r3, #35	; 0x23
 80016ea:	753b      	strb	r3, [r7, #20]

    /* CAN ID: 4 ASCII characters */
    uint8_t id_h = 0xFFUL & (can_message.header.StdId >> 8);
 80016ec:	4b21      	ldr	r3, [pc, #132]	; (8001774 <transmit_CAN_task+0x100>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t id_l = 0xFFUL & (can_message.header.StdId);
 80016f6:	4b1f      	ldr	r3, [pc, #124]	; (8001774 <transmit_CAN_task+0x100>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    can_buffer[CAN_BUFFER_LEN - 13] = id_h;
 80016fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001702:	757b      	strb	r3, [r7, #21]
    can_buffer[CAN_BUFFER_LEN - 12] = id_l;
 8001704:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001708:	75bb      	strb	r3, [r7, #22]


    /* CAN DATA: 16 ASCII characters */
    for (uint8_t i=0; i<8; i++) {
 800170a:	2300      	movs	r3, #0
 800170c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001710:	e010      	b.n	8001734 <transmit_CAN_task+0xc0>
      /* Copy each byte */
      can_buffer[i + CAN_BUFFER_LEN - 11]= can_message.data[i];
 8001712:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001716:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800171a:	330b      	adds	r3, #11
 800171c:	4915      	ldr	r1, [pc, #84]	; (8001774 <transmit_CAN_task+0x100>)
 800171e:	440a      	add	r2, r1
 8001720:	7f12      	ldrb	r2, [r2, #28]
 8001722:	3330      	adds	r3, #48	; 0x30
 8001724:	443b      	add	r3, r7
 8001726:	f803 2c24 	strb.w	r2, [r3, #-36]
    for (uint8_t i=0; i<8; i++) {
 800172a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800172e:	3301      	adds	r3, #1
 8001730:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001734:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001738:	2b07      	cmp	r3, #7
 800173a:	d9ea      	bls.n	8001712 <transmit_CAN_task+0x9e>
    }


    /* CAN DATA LENGTH: 1 ASCII character */
    uint8_t length = "0123456789ABCDEF"[ can_message.header.DLC & 0xFUL];
 800173c:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <transmit_CAN_task+0x100>)
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	f003 030f 	and.w	r3, r3, #15
 8001744:	4a0c      	ldr	r2, [pc, #48]	; (8001778 <transmit_CAN_task+0x104>)
 8001746:	5cd3      	ldrb	r3, [r2, r3]
 8001748:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    can_buffer[CAN_BUFFER_LEN - 3] = length;
 800174c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001750:	77fb      	strb	r3, [r7, #31]

    /* NEW LINE: 1 ASCII character */
    can_buffer[CAN_BUFFER_LEN - 2] = '\r';
 8001752:	230d      	movs	r3, #13
 8001754:	f887 3020 	strb.w	r3, [r7, #32]

    /* CARRIAGE RETURN: 1 ASCII character */
    can_buffer[CAN_BUFFER_LEN - 1] = '\n';
 8001758:	230a      	movs	r3, #10
 800175a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    /* Transmit over Radio */
    HAL_UART_Transmit(&huart1, can_buffer, sizeof(can_buffer), 1000);
 800175e:	f107 010c 	add.w	r1, r7, #12
 8001762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001766:	2216      	movs	r2, #22
 8001768:	4804      	ldr	r0, [pc, #16]	; (800177c <transmit_CAN_task+0x108>)
 800176a:	f004 fac1 	bl	8005cf0 <HAL_UART_Transmit>
  while (1) {
 800176e:	e785      	b.n	800167c <transmit_CAN_task+0x8>
 8001770:	20000240 	.word	0x20000240
 8001774:	20000274 	.word	0x20000274
 8001778:	0800d858 	.word	0x0800d858
 800177c:	20000494 	.word	0x20000494

08001780 <read_IMU_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_IMU_task */
void read_IMU_task(void *argument)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  while(1)
  {
    /* Get Data */
    gy_x.float_value = gyro(GYRO_X);
 8001788:	2000      	movs	r0, #0
 800178a:	f000 fb1d 	bl	8001dc8 <gyro>
 800178e:	4603      	mov	r3, r0
 8001790:	61fb      	str	r3, [r7, #28]
    gy_y.float_value = gyro(GYRO_Y);
 8001792:	2001      	movs	r0, #1
 8001794:	f000 fb18 	bl	8001dc8 <gyro>
 8001798:	4603      	mov	r3, r0
 800179a:	61bb      	str	r3, [r7, #24]
    gy_z.float_value = gyro(GYRO_Z);
 800179c:	2002      	movs	r0, #2
 800179e:	f000 fb13 	bl	8001dc8 <gyro>
 80017a2:	4603      	mov	r3, r0
 80017a4:	617b      	str	r3, [r7, #20]
    ax_x.float_value = accel(ACCEL_X);
 80017a6:	2000      	movs	r0, #0
 80017a8:	f000 fb76 	bl	8001e98 <accel>
 80017ac:	4603      	mov	r3, r0
 80017ae:	613b      	str	r3, [r7, #16]
    ax_y.float_value = accel(ACCEL_Y);
 80017b0:	2001      	movs	r0, #1
 80017b2:	f000 fb71 	bl	8001e98 <accel>
 80017b6:	4603      	mov	r3, r0
 80017b8:	60fb      	str	r3, [r7, #12]
    ax_z.float_value = accel(ACCEL_Z);
 80017ba:	2002      	movs	r0, #2
 80017bc:	f000 fb6c 	bl	8001e98 <accel>
 80017c0:	4603      	mov	r3, r0
 80017c2:	60bb      	str	r3, [r7, #8]

    /* Add to IMU Queue */
    add_to_IMU_queue("G", "X", gy_x);
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	4910      	ldr	r1, [pc, #64]	; (8001808 <read_IMU_task+0x88>)
 80017c8:	4810      	ldr	r0, [pc, #64]	; (800180c <read_IMU_task+0x8c>)
 80017ca:	f000 f911 	bl	80019f0 <add_to_IMU_queue>
    add_to_IMU_queue("G", "Y", gy_y);
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	490f      	ldr	r1, [pc, #60]	; (8001810 <read_IMU_task+0x90>)
 80017d2:	480e      	ldr	r0, [pc, #56]	; (800180c <read_IMU_task+0x8c>)
 80017d4:	f000 f90c 	bl	80019f0 <add_to_IMU_queue>
    add_to_IMU_queue("G", "Z", gy_z);
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	490e      	ldr	r1, [pc, #56]	; (8001814 <read_IMU_task+0x94>)
 80017dc:	480b      	ldr	r0, [pc, #44]	; (800180c <read_IMU_task+0x8c>)
 80017de:	f000 f907 	bl	80019f0 <add_to_IMU_queue>
    add_to_IMU_queue("A", "X", ax_x);
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4908      	ldr	r1, [pc, #32]	; (8001808 <read_IMU_task+0x88>)
 80017e6:	480c      	ldr	r0, [pc, #48]	; (8001818 <read_IMU_task+0x98>)
 80017e8:	f000 f902 	bl	80019f0 <add_to_IMU_queue>
    add_to_IMU_queue("A", "Y", ax_y);
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	4908      	ldr	r1, [pc, #32]	; (8001810 <read_IMU_task+0x90>)
 80017f0:	4809      	ldr	r0, [pc, #36]	; (8001818 <read_IMU_task+0x98>)
 80017f2:	f000 f8fd 	bl	80019f0 <add_to_IMU_queue>
    add_to_IMU_queue("A", "Z", ax_z);
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	4906      	ldr	r1, [pc, #24]	; (8001814 <read_IMU_task+0x94>)
 80017fa:	4807      	ldr	r0, [pc, #28]	; (8001818 <read_IMU_task+0x98>)
 80017fc:	f000 f8f8 	bl	80019f0 <add_to_IMU_queue>

    /* Delay */
    osDelay(READ_IMU_DELAY);
 8001800:	2064      	movs	r0, #100	; 0x64
 8001802:	f004 fded 	bl	80063e0 <osDelay>
    gy_x.float_value = gyro(GYRO_X);
 8001806:	e7bf      	b.n	8001788 <read_IMU_task+0x8>
 8001808:	0800d86c 	.word	0x0800d86c
 800180c:	0800d870 	.word	0x0800d870
 8001810:	0800d874 	.word	0x0800d874
 8001814:	0800d878 	.word	0x0800d878
 8001818:	0800d87c 	.word	0x0800d87c

0800181c <transmit_IMU_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_IMU_task */
void transmit_IMU_task(void *argument)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08c      	sub	sp, #48	; 0x30
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  while(1)
  {
    /* Check if there are messages in the queue */
    if (osMessageQueueGetCount(imuMessageQueueHandle) == 0) {
 8001824:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <transmit_IMU_task+0xc4>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f004 ff73 	bl	8006714 <osMessageQueueGetCount>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <transmit_IMU_task+0x1c>
	osThreadYield();
 8001834:	f004 fd0e 	bl	8006254 <osThreadYield>
    }

    /* Get IMU Message from Queue */
    imu_queue_status = osMessageQueueGet(imuMessageQueueHandle, &imu_message, NULL, osWaitForever);
 8001838:	4b29      	ldr	r3, [pc, #164]	; (80018e0 <transmit_IMU_task+0xc4>)
 800183a:	6818      	ldr	r0, [r3, #0]
 800183c:	f107 011c 	add.w	r1, r7, #28
 8001840:	f04f 33ff 	mov.w	r3, #4294967295
 8001844:	2200      	movs	r2, #0
 8001846:	f004 fef3 	bl	8006630 <osMessageQueueGet>
 800184a:	6278      	str	r0, [r7, #36]	; 0x24

    /* Yield thread if status not ok */
    if (imu_queue_status != osOK){
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <transmit_IMU_task+0x3a>
      osThreadYield();
 8001852:	f004 fcff 	bl	8006254 <osThreadYield>
    }

    /* Initialize a IMU buffer */
    uint8_t imu_buffer[IMU_MESSAGE_LEN] = {0};
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	731a      	strb	r2, [r3, #12]

    /* TIMESTAMP */
    for (uint8_t i=0; i<IMU_MESSAGE_LEN - 9; i++) {
 8001868:	2300      	movs	r3, #0
 800186a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800186e:	e00b      	b.n	8001888 <transmit_IMU_task+0x6c>
      /* send 'D' as placeholder */
      imu_buffer[i] = 'D';
 8001870:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001874:	3330      	adds	r3, #48	; 0x30
 8001876:	443b      	add	r3, r7
 8001878:	2244      	movs	r2, #68	; 0x44
 800187a:	f803 2c28 	strb.w	r2, [r3, #-40]
    for (uint8_t i=0; i<IMU_MESSAGE_LEN - 9; i++) {
 800187e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001882:	3301      	adds	r3, #1
 8001884:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001888:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800188c:	2b07      	cmp	r3, #7
 800188e:	d9ef      	bls.n	8001870 <transmit_IMU_task+0x54>
    }

    /* IMU ID */
    imu_buffer[IMU_MESSAGE_LEN - 9] = '@';
 8001890:	2340      	movs	r3, #64	; 0x40
 8001892:	743b      	strb	r3, [r7, #16]

    /* IMU Data from queue */
    imu_buffer[IMU_MESSAGE_LEN - 8] = imu_message.imu_type;
 8001894:	7f3b      	ldrb	r3, [r7, #28]
 8001896:	747b      	strb	r3, [r7, #17]
    imu_buffer[IMU_MESSAGE_LEN - 7] = imu_message.dimension;
 8001898:	7f7b      	ldrb	r3, [r7, #29]
 800189a:	74bb      	strb	r3, [r7, #18]

    /* Copy data */
    for (int i = 0; i < 4; i++) {
 800189c:	2300      	movs	r3, #0
 800189e:	62bb      	str	r3, [r7, #40]	; 0x28
 80018a0:	e00d      	b.n	80018be <transmit_IMU_task+0xa2>
	imu_buffer[i + IMU_MESSAGE_LEN - 6] = imu_message.data[i];
 80018a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a4:	330b      	adds	r3, #11
 80018a6:	f107 011e 	add.w	r1, r7, #30
 80018aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018ac:	440a      	add	r2, r1
 80018ae:	7812      	ldrb	r2, [r2, #0]
 80018b0:	3330      	adds	r3, #48	; 0x30
 80018b2:	443b      	add	r3, r7
 80018b4:	f803 2c28 	strb.w	r2, [r3, #-40]
    for (int i = 0; i < 4; i++) {
 80018b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ba:	3301      	adds	r3, #1
 80018bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80018be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	ddee      	ble.n	80018a2 <transmit_IMU_task+0x86>
    }

    /* NEW LINE */
    imu_buffer[IMU_MESSAGE_LEN - 2] = '\r';
 80018c4:	230d      	movs	r3, #13
 80018c6:	75fb      	strb	r3, [r7, #23]

    /* CARRIAGE RETURN */
    imu_buffer[IMU_MESSAGE_LEN - 1] = '\n';
 80018c8:	230a      	movs	r3, #10
 80018ca:	763b      	strb	r3, [r7, #24]

    /* Transmit over Radio */
    HAL_UART_Transmit(&huart1, imu_buffer, sizeof(imu_buffer), 1000);
 80018cc:	f107 0108 	add.w	r1, r7, #8
 80018d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d4:	2211      	movs	r2, #17
 80018d6:	4803      	ldr	r0, [pc, #12]	; (80018e4 <transmit_IMU_task+0xc8>)
 80018d8:	f004 fa0a 	bl	8005cf0 <HAL_UART_Transmit>
  {
 80018dc:	e7a2      	b.n	8001824 <transmit_IMU_task+0x8>
 80018de:	bf00      	nop
 80018e0:	20000244 	.word	0x20000244
 80018e4:	20000494 	.word	0x20000494

080018e8 <read_GPS_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_GPS_task */
void read_GPS_task(void *argument)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80018f4:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80018f8:	6018      	str	r0, [r3, #0]

    /* Initialize a GPS data struct */
    GPS parsed_GPS_data;

    /* Read in an NMEA message into the buffer */
    readNMEA(&receive_buffer);
 80018fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 fb58 	bl	8001fb4 <readNMEA>

    /* Parse the buffer data --> gets stored in parsed_GPS_data */
    nmea_parse(&parsed_GPS_data, &receive_buffer);
 8001904:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001908:	f107 0308 	add.w	r3, r7, #8
 800190c:	4611      	mov	r1, r2
 800190e:	4618      	mov	r0, r3
 8001910:	f000 ffa2 	bl	8002858 <nmea_parse>

    /* Add to the GPS Queue */
    add_to_GPS_queue(&parsed_GPS_data);
 8001914:	f107 0308 	add.w	r3, r7, #8
 8001918:	4618      	mov	r0, r3
 800191a:	f000 f897 	bl	8001a4c <add_to_GPS_queue>

    /* Delay */
    osDelay(READ_GPS_DELAY);
 800191e:	4802      	ldr	r0, [pc, #8]	; (8001928 <read_GPS_task+0x40>)
 8001920:	f004 fd5e 	bl	80063e0 <osDelay>
  while(1) {
 8001924:	e7e9      	b.n	80018fa <read_GPS_task+0x12>
 8001926:	bf00      	nop
 8001928:	000493e0 	.word	0x000493e0

0800192c <transmit_GPS_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_GPS_task */
void transmit_GPS_task(void *argument)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b0e8      	sub	sp, #416	; 0x1a0
 8001930:	af00      	add	r7, sp, #0
 8001932:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001936:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800193a:	6018      	str	r0, [r3, #0]

  /* Infinite loop */
  while(1) {

    /* Check if there are messages in the queue */
    if (osMessageQueueGetCount(gpsMessageQueueHandle) == 0) {
 800193c:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <transmit_GPS_task+0x94>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f004 fee7 	bl	8006714 <osMessageQueueGetCount>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <transmit_GPS_task+0x24>
      osThreadYield(); // Yield to other tasks if the queue is empty
 800194c:	f004 fc82 	bl	8006254 <osThreadYield>
    }

    /* Get a message from the queue */
    nmea_queue_status = osMessageQueueGet(gpsMessageQueueHandle, &gps_message, NULL, osWaitForever);
 8001950:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <transmit_GPS_task+0x94>)
 8001952:	6818      	ldr	r0, [r3, #0]
 8001954:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8001958:	f04f 33ff 	mov.w	r3, #4294967295
 800195c:	2200      	movs	r2, #0
 800195e:	f004 fe67 	bl	8006630 <osMessageQueueGet>
 8001962:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c

    /* Check if the queue status is OK */
    if (nmea_queue_status != osOK){
 8001966:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800196a:	2b00      	cmp	r3, #0
 800196c:	d002      	beq.n	8001974 <transmit_GPS_task+0x48>
      /* If message retrieval failed, yield and continue the loop */
      osThreadYield();
 800196e:	f004 fc71 	bl	8006254 <osThreadYield>
 8001972:	e7e3      	b.n	800193c <transmit_GPS_task+0x10>
      continue; // Skip the rest of this loop iteration
    }

    /* Initialize an NMEA buffer */
    uint8_t gps_buffer[GPS_MESSAGE_LEN];
    memset(gps_buffer, 0, sizeof(gps_buffer));
 8001974:	f107 030c 	add.w	r3, r7, #12
 8001978:	22c8      	movs	r2, #200	; 0xc8
 800197a:	2100      	movs	r1, #0
 800197c:	4618      	mov	r0, r3
 800197e:	f009 f952 	bl	800ac26 <memset>

    /* Copy the NMEA data into the buffer, ensuring not to exceed the buffer size */
    strncpy((char *)gps_buffer, gps_message.data, GPS_MESSAGE_LEN - 2); // Save space for CR+LF
 8001982:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8001986:	f107 030c 	add.w	r3, r7, #12
 800198a:	22c6      	movs	r2, #198	; 0xc6
 800198c:	4618      	mov	r0, r3
 800198e:	f009 f964 	bl	800ac5a <strncpy>

    /* NEW LINE */
    gps_buffer[GPS_MESSAGE_LEN - 2] = '\r'; // Carriage return
 8001992:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001996:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800199a:	220d      	movs	r2, #13
 800199c:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6

    /* CARRIAGE RETURN */
    gps_buffer[GPS_MESSAGE_LEN - 1] = '\n'; // Line feed
 80019a0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80019a4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80019a8:	220a      	movs	r2, #10
 80019aa:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7

    /* Transmit the NMEA message over UART to radio */
    HAL_UART_Transmit(&huart1, gps_buffer, sizeof(gps_buffer), 1000);
 80019ae:	f107 010c 	add.w	r1, r7, #12
 80019b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b6:	22c8      	movs	r2, #200	; 0xc8
 80019b8:	4802      	ldr	r0, [pc, #8]	; (80019c4 <transmit_GPS_task+0x98>)
 80019ba:	f004 f999 	bl	8005cf0 <HAL_UART_Transmit>
  while(1) {
 80019be:	e7bd      	b.n	800193c <transmit_GPS_task+0x10>
 80019c0:	20000248 	.word	0x20000248
 80019c4:	20000494 	.word	0x20000494

080019c8 <kernel_LED_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_kernel_LED_task */
void kernel_LED_task(void *argument)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  while (1) {

    /* Get the kernel status */
    kernel_status = osKernelGetState();
 80019d0:	f004 fb40 	bl	8006054 <osKernelGetState>
 80019d4:	60f8      	str	r0, [r7, #12]

    /* Check if the kernel status is "Running" */
    if (kernel_status == osKernelRunning) {
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d103      	bne.n	80019e4 <kernel_LED_task+0x1c>

      /* If running, toggle the LED */
      HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 80019dc:	2102      	movs	r1, #2
 80019de:	4803      	ldr	r0, [pc, #12]	; (80019ec <kernel_LED_task+0x24>)
 80019e0:	f002 f8f4 	bl	8003bcc <HAL_GPIO_TogglePin>
    }

    /* Delay */
    osDelay(KERNEL_LED_DELAY);
 80019e4:	20c8      	movs	r0, #200	; 0xc8
 80019e6:	f004 fcfb 	bl	80063e0 <osDelay>
    kernel_status = osKernelGetState();
 80019ea:	e7f1      	b.n	80019d0 <kernel_LED_task+0x8>
 80019ec:	40010800 	.word	0x40010800

080019f0 <add_to_IMU_queue>:


/*
 * Stores the data gathered from the IMU into the queue
 */
void add_to_IMU_queue(char* type, char* dimension, union FloatBytes data){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
    IMU_msg_t imu_message;

    imu_message.imu_type = type[0];
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	753b      	strb	r3, [r7, #20]
    imu_message.dimension = dimension[0];
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	757b      	strb	r3, [r7, #21]
    for (int i = 0; i < 4; i++) {
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61fb      	str	r3, [r7, #28]
 8001a0c:	e00c      	b.n	8001a28 <add_to_IMU_queue+0x38>
        imu_message.data[i] = data.bytes[i];
 8001a0e:	1d3a      	adds	r2, r7, #4
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	4413      	add	r3, r2
 8001a14:	7819      	ldrb	r1, [r3, #0]
 8001a16:	f107 0216 	add.w	r2, r7, #22
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	460a      	mov	r2, r1
 8001a20:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3301      	adds	r3, #1
 8001a26:	61fb      	str	r3, [r7, #28]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	ddef      	ble.n	8001a0e <add_to_IMU_queue+0x1e>
    }

    osMessageQueuePut(imuMessageQueueHandle, &imu_message, 0U, 0U);
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <add_to_IMU_queue+0x58>)
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	f107 0114 	add.w	r1, r7, #20
 8001a36:	2300      	movs	r3, #0
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f004 fd85 	bl	8006548 <osMessageQueuePut>
}
 8001a3e:	bf00      	nop
 8001a40:	3720      	adds	r7, #32
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000244 	.word	0x20000244

08001a4c <add_to_GPS_queue>:

/*
 * Stores the data gathered from the GPS into the queue
 */
void add_to_GPS_queue(GPS *gps_data) {
 8001a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a50:	b0c5      	sub	sp, #276	; 0x114
 8001a52:	af0e      	add	r7, sp, #56	; 0x38
 8001a54:	60f8      	str	r0, [r7, #12]

  /* If there is a fix... */
  if(gps_data->fix == 1){
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d13d      	bne.n	8001ada <add_to_GPS_queue+0x8e>

    /* Create an nmea_msg */
    GPS_msg_t nmea_msg;

    /* Create string */
    sprintf(nmea_msg.data,
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	e9d3 8900 	ldrd	r8, r9, [r3]
	    "Latitude: %.6f %c, Longitude: %.6f %c, Altitude: %.2f meters, HDOP: %.2f, Satellites: %d, Fix: %d, Time: %s",
	    gps_data->latitude, gps_data->latSide,
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	7a1b      	ldrb	r3, [r3, #8]
    sprintf(nmea_msg.data,
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
	    gps_data->longitude, gps_data->lonSide,
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	7e1b      	ldrb	r3, [r3, #24]
    sprintf(nmea_msg.data,
 8001a74:	607b      	str	r3, [r7, #4]
	    gps_data->altitude, gps_data->hdop,
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	69db      	ldr	r3, [r3, #28]
    sprintf(nmea_msg.data,
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fd44 	bl	8000508 <__aeabi_f2d>
 8001a80:	4682      	mov	sl, r0
 8001a82:	468b      	mov	fp, r1
	    gps_data->altitude, gps_data->hdop,
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6a1b      	ldr	r3, [r3, #32]
    sprintf(nmea_msg.data,
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fd3d 	bl	8000508 <__aeabi_f2d>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	    gps_data->satelliteCount, gps_data->fix,
	    gps_data->lastMeasure);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	332c      	adds	r3, #44	; 0x2c
    sprintf(nmea_msg.data,
 8001a9a:	f107 0c10 	add.w	ip, r7, #16
 8001a9e:	930c      	str	r3, [sp, #48]	; 0x30
 8001aa0:	960b      	str	r6, [sp, #44]	; 0x2c
 8001aa2:	920a      	str	r2, [sp, #40]	; 0x28
 8001aa4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001aa8:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	9204      	str	r2, [sp, #16]
 8001ab0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	4642      	mov	r2, r8
 8001aba:	464b      	mov	r3, r9
 8001abc:	4909      	ldr	r1, [pc, #36]	; (8001ae4 <add_to_GPS_queue+0x98>)
 8001abe:	4660      	mov	r0, ip
 8001ac0:	f009 f84e 	bl	800ab60 <siprintf>

    /* Null Terminate */
    nmea_msg.data[sizeof(nmea_msg.data) - 1] = '\0';
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7

    /* Add the message to the queue */
    osMessageQueuePut(gpsMessageQueueHandle, &nmea_msg, 0U, 0U);
 8001aca:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <add_to_GPS_queue+0x9c>)
 8001acc:	6818      	ldr	r0, [r3, #0]
 8001ace:	f107 0110 	add.w	r1, r7, #16
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f004 fd37 	bl	8006548 <osMessageQueuePut>
  }
}
 8001ada:	bf00      	nop
 8001adc:	37dc      	adds	r7, #220	; 0xdc
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ae4:	0800d880 	.word	0x0800d880
 8001ae8:	20000248 	.word	0x20000248

08001aec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af2:	f107 0310 	add.w	r3, r7, #16
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b00:	4b49      	ldr	r3, [pc, #292]	; (8001c28 <MX_GPIO_Init+0x13c>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a48      	ldr	r2, [pc, #288]	; (8001c28 <MX_GPIO_Init+0x13c>)
 8001b06:	f043 0320 	orr.w	r3, r3, #32
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b46      	ldr	r3, [pc, #280]	; (8001c28 <MX_GPIO_Init+0x13c>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0320 	and.w	r3, r3, #32
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b18:	4b43      	ldr	r3, [pc, #268]	; (8001c28 <MX_GPIO_Init+0x13c>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	4a42      	ldr	r2, [pc, #264]	; (8001c28 <MX_GPIO_Init+0x13c>)
 8001b1e:	f043 0310 	orr.w	r3, r3, #16
 8001b22:	6193      	str	r3, [r2, #24]
 8001b24:	4b40      	ldr	r3, [pc, #256]	; (8001c28 <MX_GPIO_Init+0x13c>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f003 0310 	and.w	r3, r3, #16
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b30:	4b3d      	ldr	r3, [pc, #244]	; (8001c28 <MX_GPIO_Init+0x13c>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	4a3c      	ldr	r2, [pc, #240]	; (8001c28 <MX_GPIO_Init+0x13c>)
 8001b36:	f043 0304 	orr.w	r3, r3, #4
 8001b3a:	6193      	str	r3, [r2, #24]
 8001b3c:	4b3a      	ldr	r3, [pc, #232]	; (8001c28 <MX_GPIO_Init+0x13c>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	607b      	str	r3, [r7, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b48:	4b37      	ldr	r3, [pc, #220]	; (8001c28 <MX_GPIO_Init+0x13c>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	4a36      	ldr	r2, [pc, #216]	; (8001c28 <MX_GPIO_Init+0x13c>)
 8001b4e:	f043 0308 	orr.w	r3, r3, #8
 8001b52:	6193      	str	r3, [r2, #24]
 8001b54:	4b34      	ldr	r3, [pc, #208]	; (8001c28 <MX_GPIO_Init+0x13c>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	603b      	str	r3, [r7, #0]
 8001b5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_GPIO_DIO7_Pin|RADIO_GPIO_DIO9_SLEEP_Pin|RADIO_GPIO_DIO11_Pin|RADIO_GPIO_DIO10_Pin, GPIO_PIN_RESET);
 8001b60:	2200      	movs	r2, #0
 8001b62:	2178      	movs	r1, #120	; 0x78
 8001b64:	4831      	ldr	r0, [pc, #196]	; (8001c2c <MX_GPIO_Init+0x140>)
 8001b66:	f002 f819 	bl	8003b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USER_LED_Pin|SDL_CS_Pin, GPIO_PIN_RESET);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2112      	movs	r1, #18
 8001b6e:	4830      	ldr	r0, [pc, #192]	; (8001c30 <MX_GPIO_Init+0x144>)
 8001b70:	f002 f814 	bl	8003b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RADIO_GPIO_DIO4_Pin|RADIO_GPIO_DIO3_Pin|RADIO_GPIO_DIO2_Pin, GPIO_PIN_SET);
 8001b74:	2201      	movs	r2, #1
 8001b76:	f24a 0101 	movw	r1, #40961	; 0xa001
 8001b7a:	482e      	ldr	r0, [pc, #184]	; (8001c34 <MX_GPIO_Init+0x148>)
 8001b7c:	f002 f80e 	bl	8003b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RADIO_GPIO_DIO12_Pin|RADIO_GPIO_DIO6_Pin|RADIO_DIO8_SLEEP_CONTROL_Pin, GPIO_PIN_RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	f245 0102 	movw	r1, #20482	; 0x5002
 8001b86:	482b      	ldr	r0, [pc, #172]	; (8001c34 <MX_GPIO_Init+0x148>)
 8001b88:	f002 f808 	bl	8003b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_GPIO_DIO1_Pin|RADIO_GPIO_DIO0_Pin, GPIO_PIN_SET);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001b92:	4826      	ldr	r0, [pc, #152]	; (8001c2c <MX_GPIO_Init+0x140>)
 8001b94:	f002 f802 	bl	8003b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = RADIO_GPIO_DIO7_Pin|RADIO_GPIO_DIO9_SLEEP_Pin|RADIO_GPIO_DIO11_Pin|RADIO_GPIO_DIO10_Pin
 8001b98:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8001b9c:	613b      	str	r3, [r7, #16]
                          |RADIO_GPIO_DIO1_Pin|RADIO_GPIO_DIO0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001baa:	f107 0310 	add.w	r3, r7, #16
 8001bae:	4619      	mov	r1, r3
 8001bb0:	481e      	ldr	r0, [pc, #120]	; (8001c2c <MX_GPIO_Init+0x140>)
 8001bb2:	f001 fe5f 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USER_LED_Pin|SDL_CS_Pin;
 8001bb6:	2312      	movs	r3, #18
 8001bb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc6:	f107 0310 	add.w	r3, r7, #16
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4818      	ldr	r0, [pc, #96]	; (8001c30 <MX_GPIO_Init+0x144>)
 8001bce:	f001 fe51 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RTC_SYNC_Pin|SDL_CD_Pin;
 8001bd2:	230c      	movs	r3, #12
 8001bd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bde:	f107 0310 	add.w	r3, r7, #16
 8001be2:	4619      	mov	r1, r3
 8001be4:	4812      	ldr	r0, [pc, #72]	; (8001c30 <MX_GPIO_Init+0x144>)
 8001be6:	f001 fe45 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = RADIO_GPIO_DIO4_Pin|RADIO_GPIO_DIO12_Pin|RADIO_GPIO_DIO6_Pin|RADIO_GPIO_DIO3_Pin
 8001bea:	f24f 0303 	movw	r3, #61443	; 0xf003
 8001bee:	613b      	str	r3, [r7, #16]
                          |RADIO_DIO8_SLEEP_CONTROL_Pin|RADIO_GPIO_DIO2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfc:	f107 0310 	add.w	r3, r7, #16
 8001c00:	4619      	mov	r1, r3
 8001c02:	480c      	ldr	r0, [pc, #48]	; (8001c34 <MX_GPIO_Init+0x148>)
 8001c04:	f001 fe36 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001c08:	2304      	movs	r3, #4
 8001c0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001c14:	f107 0310 	add.w	r3, r7, #16
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4806      	ldr	r0, [pc, #24]	; (8001c34 <MX_GPIO_Init+0x148>)
 8001c1c:	f001 fe2a 	bl	8003874 <HAL_GPIO_Init>

}
 8001c20:	bf00      	nop
 8001c22:	3720      	adds	r7, #32
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40011000 	.word	0x40011000
 8001c30:	40010800 	.word	0x40010800
 8001c34:	40010c00 	.word	0x40010c00

08001c38 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <MX_I2C1_Init+0x50>)
 8001c3e:	4a13      	ldr	r2, [pc, #76]	; (8001c8c <MX_I2C1_Init+0x54>)
 8001c40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c42:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <MX_I2C1_Init+0x50>)
 8001c44:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <MX_I2C1_Init+0x58>)
 8001c46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c48:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <MX_I2C1_Init+0x50>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <MX_I2C1_Init+0x50>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <MX_I2C1_Init+0x50>)
 8001c56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <MX_I2C1_Init+0x50>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <MX_I2C1_Init+0x50>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c68:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <MX_I2C1_Init+0x50>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <MX_I2C1_Init+0x50>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c74:	4804      	ldr	r0, [pc, #16]	; (8001c88 <MX_I2C1_Init+0x50>)
 8001c76:	f001 ffc3 	bl	8003c00 <HAL_I2C_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c80:	f000 fa10 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c84:	bf00      	nop
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000298 	.word	0x20000298
 8001c8c:	40005400 	.word	0x40005400
 8001c90:	000186a0 	.word	0x000186a0

08001c94 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c98:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <MX_I2C2_Init+0x50>)
 8001c9a:	4a13      	ldr	r2, [pc, #76]	; (8001ce8 <MX_I2C2_Init+0x54>)
 8001c9c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <MX_I2C2_Init+0x50>)
 8001ca0:	4a12      	ldr	r2, [pc, #72]	; (8001cec <MX_I2C2_Init+0x58>)
 8001ca2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <MX_I2C2_Init+0x50>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <MX_I2C2_Init+0x50>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <MX_I2C2_Init+0x50>)
 8001cb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cb6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <MX_I2C2_Init+0x50>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001cbe:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <MX_I2C2_Init+0x50>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cc4:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <MX_I2C2_Init+0x50>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <MX_I2C2_Init+0x50>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001cd0:	4804      	ldr	r0, [pc, #16]	; (8001ce4 <MX_I2C2_Init+0x50>)
 8001cd2:	f001 ff95 	bl	8003c00 <HAL_I2C_Init>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001cdc:	f000 f9e2 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	200002ec 	.word	0x200002ec
 8001ce8:	40005800 	.word	0x40005800
 8001cec:	000186a0 	.word	0x000186a0

08001cf0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 0318 	add.w	r3, r7, #24
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a2b      	ldr	r2, [pc, #172]	; (8001db8 <HAL_I2C_MspInit+0xc8>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d124      	bne.n	8001d5a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d10:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <HAL_I2C_MspInit+0xcc>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	4a29      	ldr	r2, [pc, #164]	; (8001dbc <HAL_I2C_MspInit+0xcc>)
 8001d16:	f043 0308 	orr.w	r3, r3, #8
 8001d1a:	6193      	str	r3, [r2, #24]
 8001d1c:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <HAL_I2C_MspInit+0xcc>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPS_SCL_Pin|GPS_SDA_Pin;
 8001d28:	23c0      	movs	r3, #192	; 0xc0
 8001d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d2c:	2312      	movs	r3, #18
 8001d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d30:	2303      	movs	r3, #3
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d34:	f107 0318 	add.w	r3, r7, #24
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4821      	ldr	r0, [pc, #132]	; (8001dc0 <HAL_I2C_MspInit+0xd0>)
 8001d3c:	f001 fd9a 	bl	8003874 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d40:	4b1e      	ldr	r3, [pc, #120]	; (8001dbc <HAL_I2C_MspInit+0xcc>)
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	4a1d      	ldr	r2, [pc, #116]	; (8001dbc <HAL_I2C_MspInit+0xcc>)
 8001d46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d4a:	61d3      	str	r3, [r2, #28]
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <HAL_I2C_MspInit+0xcc>)
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001d58:	e029      	b.n	8001dae <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a19      	ldr	r2, [pc, #100]	; (8001dc4 <HAL_I2C_MspInit+0xd4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d124      	bne.n	8001dae <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d64:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <HAL_I2C_MspInit+0xcc>)
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	4a14      	ldr	r2, [pc, #80]	; (8001dbc <HAL_I2C_MspInit+0xcc>)
 8001d6a:	f043 0308 	orr.w	r3, r3, #8
 8001d6e:	6193      	str	r3, [r2, #24]
 8001d70:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <HAL_I2C_MspInit+0xcc>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8001d7c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d82:	2312      	movs	r3, #18
 8001d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d86:	2303      	movs	r3, #3
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8a:	f107 0318 	add.w	r3, r7, #24
 8001d8e:	4619      	mov	r1, r3
 8001d90:	480b      	ldr	r0, [pc, #44]	; (8001dc0 <HAL_I2C_MspInit+0xd0>)
 8001d92:	f001 fd6f 	bl	8003874 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <HAL_I2C_MspInit+0xcc>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	4a08      	ldr	r2, [pc, #32]	; (8001dbc <HAL_I2C_MspInit+0xcc>)
 8001d9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001da0:	61d3      	str	r3, [r2, #28]
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_I2C_MspInit+0xcc>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
}
 8001dae:	bf00      	nop
 8001db0:	3728      	adds	r7, #40	; 0x28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40005400 	.word	0x40005400
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40010c00 	.word	0x40010c00
 8001dc4:	40005800 	.word	0x40005800

08001dc8 <gyro>:


/* IMU -----------------------------------------------------------------------*/

float gyro(enum GyroType type)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af04      	add	r7, sp, #16
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
  int16_t gyro;
  uint8_t OUT_H_G, OUT_L_G;

  /* Goes sequential */
  uint16_t addL = 0x22 + (type * 2);
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	3311      	adds	r3, #17
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	81fb      	strh	r3, [r7, #14]
  uint16_t addH = 0x23 + (type * 2);
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	3323      	adds	r3, #35	; 0x23
 8001de6:	81bb      	strh	r3, [r7, #12]

  /* Read */
  HAL_I2C_Mem_Read(&hi2c1, IMU_DEVICE_ADDRESS, addL, 1, &OUT_L_G, 1, 100);
 8001de8:	89fa      	ldrh	r2, [r7, #14]
 8001dea:	2364      	movs	r3, #100	; 0x64
 8001dec:	9302      	str	r3, [sp, #8]
 8001dee:	2301      	movs	r3, #1
 8001df0:	9301      	str	r3, [sp, #4]
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	2301      	movs	r3, #1
 8001dfa:	21d4      	movs	r1, #212	; 0xd4
 8001dfc:	4824      	ldr	r0, [pc, #144]	; (8001e90 <gyro+0xc8>)
 8001dfe:	f002 fba9 	bl	8004554 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(&hi2c1, IMU_DEVICE_ADDRESS, addH, 1, &OUT_H_G, 1, 100);
 8001e02:	89ba      	ldrh	r2, [r7, #12]
 8001e04:	2364      	movs	r3, #100	; 0x64
 8001e06:	9302      	str	r3, [sp, #8]
 8001e08:	2301      	movs	r3, #1
 8001e0a:	9301      	str	r3, [sp, #4]
 8001e0c:	f107 0309 	add.w	r3, r7, #9
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	2301      	movs	r3, #1
 8001e14:	21d4      	movs	r1, #212	; 0xd4
 8001e16:	481e      	ldr	r0, [pc, #120]	; (8001e90 <gyro+0xc8>)
 8001e18:	f002 fb9c 	bl	8004554 <HAL_I2C_Mem_Read>

  /* The value is expressed as a 16-bit word in two’s complement */
  gyro = (OUT_H_G << 8) | (OUT_L_G);
 8001e1c:	7a7b      	ldrb	r3, [r7, #9]
 8001e1e:	021b      	lsls	r3, r3, #8
 8001e20:	b21a      	sxth	r2, r3
 8001e22:	7a3b      	ldrb	r3, [r7, #8]
 8001e24:	b21b      	sxth	r3, r3
 8001e26:	4313      	orrs	r3, r2
 8001e28:	817b      	strh	r3, [r7, #10]
  gyro = (float) gyro / 8.75; /* See data sheet pg10 */
 8001e2a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe ffc4 	bl	8000dbc <__aeabi_i2f>
 8001e34:	4603      	mov	r3, r0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fb66 	bl	8000508 <__aeabi_f2d>
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <gyro+0xcc>)
 8001e42:	f7fe fce3 	bl	800080c <__aeabi_ddiv>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4610      	mov	r0, r2
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f7fe fe63 	bl	8000b18 <__aeabi_d2iz>
 8001e52:	4603      	mov	r3, r0
 8001e54:	817b      	strh	r3, [r7, #10]

  return (float) gyro * 0.02;
 8001e56:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe ffae 	bl	8000dbc <__aeabi_i2f>
 8001e60:	4603      	mov	r3, r0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe fb50 	bl	8000508 <__aeabi_f2d>
 8001e68:	a307      	add	r3, pc, #28	; (adr r3, 8001e88 <gyro+0xc0>)
 8001e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6e:	f7fe fba3 	bl	80005b8 <__aeabi_dmul>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4610      	mov	r0, r2
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f7fe fe95 	bl	8000ba8 <__aeabi_d2f>
 8001e7e:	4603      	mov	r3, r0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	47ae147b 	.word	0x47ae147b
 8001e8c:	3f947ae1 	.word	0x3f947ae1
 8001e90:	20000298 	.word	0x20000298
 8001e94:	40218000 	.word	0x40218000

08001e98 <accel>:

float accel(enum AccelType type)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af04      	add	r7, sp, #16
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	71fb      	strb	r3, [r7, #7]
  int16_t accel;
  uint8_t OUT_H_A, OUT_L_A;

  /* Goes sequential */
  uint16_t addL = 0x28 + (type * 2);
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	3314      	adds	r3, #20
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	81fb      	strh	r3, [r7, #14]
  uint16_t addH = 0x29 + (type * 2);
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	3329      	adds	r3, #41	; 0x29
 8001eb6:	81bb      	strh	r3, [r7, #12]

  /* Read */
  HAL_I2C_Mem_Read(&hi2c1, IMU_DEVICE_ADDRESS, addL, 1, &OUT_L_A, 1, 100);
 8001eb8:	89fa      	ldrh	r2, [r7, #14]
 8001eba:	2364      	movs	r3, #100	; 0x64
 8001ebc:	9302      	str	r3, [sp, #8]
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	9301      	str	r3, [sp, #4]
 8001ec2:	f107 0308 	add.w	r3, r7, #8
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	2301      	movs	r3, #1
 8001eca:	21d4      	movs	r1, #212	; 0xd4
 8001ecc:	481e      	ldr	r0, [pc, #120]	; (8001f48 <accel+0xb0>)
 8001ece:	f002 fb41 	bl	8004554 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(&hi2c1, IMU_DEVICE_ADDRESS, addH, 1, &OUT_H_A, 1, 100);
 8001ed2:	89ba      	ldrh	r2, [r7, #12]
 8001ed4:	2364      	movs	r3, #100	; 0x64
 8001ed6:	9302      	str	r3, [sp, #8]
 8001ed8:	2301      	movs	r3, #1
 8001eda:	9301      	str	r3, [sp, #4]
 8001edc:	f107 0309 	add.w	r3, r7, #9
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	21d4      	movs	r1, #212	; 0xd4
 8001ee6:	4818      	ldr	r0, [pc, #96]	; (8001f48 <accel+0xb0>)
 8001ee8:	f002 fb34 	bl	8004554 <HAL_I2C_Mem_Read>

  /* The value is expressed as a 16-bit word in two’s complement */
  accel = (OUT_H_A << 8) | (OUT_L_A);
 8001eec:	7a7b      	ldrb	r3, [r7, #9]
 8001eee:	021b      	lsls	r3, r3, #8
 8001ef0:	b21a      	sxth	r2, r3
 8001ef2:	7a3b      	ldrb	r3, [r7, #8]
 8001ef4:	b21b      	sxth	r3, r3
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	817b      	strh	r3, [r7, #10]
  accel = (float) accel * 0.061; /* See data sheet pg10 */
 8001efa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe ff5c 	bl	8000dbc <__aeabi_i2f>
 8001f04:	4603      	mov	r3, r0
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fafe 	bl	8000508 <__aeabi_f2d>
 8001f0c:	a30c      	add	r3, pc, #48	; (adr r3, 8001f40 <accel+0xa8>)
 8001f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f12:	f7fe fb51 	bl	80005b8 <__aeabi_dmul>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f7fe fdfb 	bl	8000b18 <__aeabi_d2iz>
 8001f22:	4603      	mov	r3, r0
 8001f24:	817b      	strh	r3, [r7, #10]

  return (float) accel;
 8001f26:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe ff46 	bl	8000dbc <__aeabi_i2f>
 8001f30:	4603      	mov	r3, r0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	f3af 8000 	nop.w
 8001f40:	5a1cac08 	.word	0x5a1cac08
 8001f44:	3faf3b64 	.word	0x3faf3b64
 8001f48:	20000298 	.word	0x20000298

08001f4c <initIMU>:


void initIMU(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af04      	add	r7, sp, #16
  uint8_t data;

  data = 0x80; // 0b10000000
 8001f52:	2380      	movs	r3, #128	; 0x80
 8001f54:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, IMU_DEVICE_ADDRESS, 0x10, 1, &data, 1, 100);
 8001f56:	2364      	movs	r3, #100	; 0x64
 8001f58:	9302      	str	r3, [sp, #8]
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	9301      	str	r3, [sp, #4]
 8001f5e:	1dfb      	adds	r3, r7, #7
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	2301      	movs	r3, #1
 8001f64:	2210      	movs	r2, #16
 8001f66:	21d4      	movs	r1, #212	; 0xd4
 8001f68:	4811      	ldr	r0, [pc, #68]	; (8001fb0 <initIMU+0x64>)
 8001f6a:	f002 f9f9 	bl	8004360 <HAL_I2C_Mem_Write>

  data = 0x80; // 0b10000000
 8001f6e:	2380      	movs	r3, #128	; 0x80
 8001f70:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, IMU_DEVICE_ADDRESS, 0x11, 1, &data, 1, 100);
 8001f72:	2364      	movs	r3, #100	; 0x64
 8001f74:	9302      	str	r3, [sp, #8]
 8001f76:	2301      	movs	r3, #1
 8001f78:	9301      	str	r3, [sp, #4]
 8001f7a:	1dfb      	adds	r3, r7, #7
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	2301      	movs	r3, #1
 8001f80:	2211      	movs	r2, #17
 8001f82:	21d4      	movs	r1, #212	; 0xd4
 8001f84:	480a      	ldr	r0, [pc, #40]	; (8001fb0 <initIMU+0x64>)
 8001f86:	f002 f9eb 	bl	8004360 <HAL_I2C_Mem_Write>

  data = 0x04; // 0b00000100
 8001f8a:	2304      	movs	r3, #4
 8001f8c:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, IMU_DEVICE_ADDRESS, 0x12, 1, &data, 1, 100);
 8001f8e:	2364      	movs	r3, #100	; 0x64
 8001f90:	9302      	str	r3, [sp, #8]
 8001f92:	2301      	movs	r3, #1
 8001f94:	9301      	str	r3, [sp, #4]
 8001f96:	1dfb      	adds	r3, r7, #7
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	2212      	movs	r2, #18
 8001f9e:	21d4      	movs	r1, #212	; 0xd4
 8001fa0:	4803      	ldr	r0, [pc, #12]	; (8001fb0 <initIMU+0x64>)
 8001fa2:	f002 f9dd 	bl	8004360 <HAL_I2C_Mem_Write>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000298 	.word	0x20000298

08001fb4 <readNMEA>:
//  printf("Altitude: %f\r\n", myData.altitude);
//  printf("Sat Count: %d\r\n", myData.satelliteCount);
//
//}

void readNMEA(uint8_t *buffer){
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af02      	add	r7, sp, #8
 8001fba:	6078      	str	r0, [r7, #4]
  HAL_I2C_Master_Receive(&hi2c1, GPS_DEVICE_ADDRESS, buffer, sizeof(buffer), HAL_MAX_DELAY);
 8001fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2304      	movs	r3, #4
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	2184      	movs	r1, #132	; 0x84
 8001fc8:	4803      	ldr	r0, [pc, #12]	; (8001fd8 <readNMEA+0x24>)
 8001fca:	f001 ff5d 	bl	8003e88 <HAL_I2C_Master_Receive>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000298 	.word	0x20000298

08001fdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fe0:	f000 ff8c 	bl	8002efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fe4:	f000 f819 	bl	800201a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fe8:	f7ff fd80 	bl	8001aec <MX_GPIO_Init>
  MX_CAN_Init();
 8001fec:	f7ff f94e 	bl	800128c <MX_CAN_Init>
  MX_SPI1_Init();
 8001ff0:	f000 fce4 	bl	80029bc <MX_SPI1_Init>
  MX_UART5_Init();
 8001ff4:	f000 fe72 	bl	8002cdc <MX_UART5_Init>
  MX_I2C1_Init();
 8001ff8:	f7ff fe1e 	bl	8001c38 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001ffc:	f7ff fe4a 	bl	8001c94 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8002000:	f000 fe96 	bl	8002d30 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  Can_Init();
 8002004:	f7ff fa28 	bl	8001458 <Can_Init>
  initIMU();
 8002008:	f7ff ffa0 	bl	8001f4c <initIMU>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800200c:	f003 fff0 	bl	8005ff0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002010:	f7ff fa3c 	bl	800148c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002014:	f004 f840 	bl	8006098 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002018:	e7fe      	b.n	8002018 <main+0x3c>

0800201a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b090      	sub	sp, #64	; 0x40
 800201e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002020:	f107 0318 	add.w	r3, r7, #24
 8002024:	2228      	movs	r2, #40	; 0x28
 8002026:	2100      	movs	r1, #0
 8002028:	4618      	mov	r0, r3
 800202a:	f008 fdfc 	bl	800ac26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800202e:	1d3b      	adds	r3, r7, #4
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800203c:	2301      	movs	r3, #1
 800203e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002040:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002044:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002046:	2300      	movs	r3, #0
 8002048:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800204a:	2301      	movs	r3, #1
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800204e:	2302      	movs	r3, #2
 8002050:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002052:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002056:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002058:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800205c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800205e:	f107 0318 	add.w	r3, r7, #24
 8002062:	4618      	mov	r0, r3
 8002064:	f003 f960 	bl	8005328 <HAL_RCC_OscConfig>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800206e:	f000 f819 	bl	80020a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002072:	230f      	movs	r3, #15
 8002074:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002076:	2302      	movs	r3, #2
 8002078:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800207e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002082:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002088:	1d3b      	adds	r3, r7, #4
 800208a:	2102      	movs	r1, #2
 800208c:	4618      	mov	r0, r3
 800208e:	f003 fbcd 	bl	800582c <HAL_RCC_ClockConfig>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002098:	f000 f804 	bl	80020a4 <Error_Handler>
  }
}
 800209c:	bf00      	nop
 800209e:	3740      	adds	r7, #64	; 0x40
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020a8:	b672      	cpsid	i
}
 80020aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020ac:	e7fe      	b.n	80020ac <Error_Handler+0x8>
	...

080020b0 <nmea_GPGGA>:
    else{
        return 0;
    }
}

int nmea_GPGGA(GPS *gps_data, char*inputString){
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b0b7      	sub	sp, #220	; 0xdc
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 80020c0:	f107 0320 	add.w	r3, r7, #32
 80020c4:	2264      	movs	r2, #100	; 0x64
 80020c6:	2100      	movs	r1, #0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f008 fdac 	bl	800ac26 <memset>
    char *marker = strtok(inputString, ",");
 80020ce:	49c5      	ldr	r1, [pc, #788]	; (80023e4 <nmea_GPGGA+0x334>)
 80020d0:	6838      	ldr	r0, [r7, #0]
 80020d2:	f008 fdd5 	bl	800ac80 <strtok>
 80020d6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 80020da:	e027      	b.n	800212c <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 80020dc:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80020e0:	f7fe f8a6 	bl	8000230 <strlen>
 80020e4:	4603      	mov	r3, r0
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 80020ec:	1c63      	adds	r3, r4, #1
 80020ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80020f2:	4610      	mov	r0, r2
 80020f4:	f007 f862 	bl	80091bc <malloc>
 80020f8:	4603      	mov	r3, r0
 80020fa:	461a      	mov	r2, r3
 80020fc:	00a3      	lsls	r3, r4, #2
 80020fe:	33d8      	adds	r3, #216	; 0xd8
 8002100:	443b      	add	r3, r7
 8002102:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8002106:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800210a:	3b01      	subs	r3, #1
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	33d8      	adds	r3, #216	; 0xd8
 8002110:	443b      	add	r3, r7
 8002112:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8002116:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800211a:	4618      	mov	r0, r3
 800211c:	f008 feff 	bl	800af1e <strcpy>
        marker = strtok(NULL, ",");
 8002120:	49b0      	ldr	r1, [pc, #704]	; (80023e4 <nmea_GPGGA+0x334>)
 8002122:	2000      	movs	r0, #0
 8002124:	f008 fdac 	bl	800ac80 <strtok>
 8002128:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 800212c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1d3      	bne.n	80020dc <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8002134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 800213c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	332c      	adds	r3, #44	; 0x2c
 8002148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800214a:	4611      	mov	r1, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f008 fee6 	bl	800af1e <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8002152:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8002156:	2b53      	cmp	r3, #83	; 0x53
 8002158:	d004      	beq.n	8002164 <nmea_GPGGA+0xb4>
 800215a:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800215e:	2b4e      	cmp	r3, #78	; 0x4e
 8002160:	f040 815f 	bne.w	8002422 <nmea_GPGGA+0x372>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8002164:	2300      	movs	r3, #0
 8002166:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800216a:	e010      	b.n	800218e <nmea_GPGGA+0xde>
 800216c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800216e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002172:	4413      	add	r3, r2
 8002174:	7819      	ldrb	r1, [r3, #0]
 8002176:	f107 021c 	add.w	r2, r7, #28
 800217a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800217e:	4413      	add	r3, r2
 8002180:	460a      	mov	r2, r1
 8002182:	701a      	strb	r2, [r3, #0]
 8002184:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002188:	3301      	adds	r3, #1
 800218a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800218e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002192:	2b01      	cmp	r3, #1
 8002194:	ddea      	ble.n	800216c <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8002196:	2300      	movs	r3, #0
 8002198:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800219c:	e011      	b.n	80021c2 <nmea_GPGGA+0x112>
 800219e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80021a4:	3302      	adds	r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	7819      	ldrb	r1, [r3, #0]
 80021aa:	f107 0214 	add.w	r2, r7, #20
 80021ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80021b2:	4413      	add	r3, r2
 80021b4:	460a      	mov	r2, r1
 80021b6:	701a      	strb	r2, [r3, #0]
 80021b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80021bc:	3301      	adds	r3, #1
 80021be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80021c6:	2b05      	cmp	r3, #5
 80021c8:	dde9      	ble.n	800219e <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 80021ca:	f107 031c 	add.w	r3, r7, #28
 80021ce:	220a      	movs	r2, #10
 80021d0:	2100      	movs	r1, #0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f007 ff9a 	bl	800a10c <strtol>
 80021d8:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	2100      	movs	r1, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f007 febc 	bl	8009f60 <strtof>
 80021e8:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 80021ec:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80021f0:	f7fe fde4 	bl	8000dbc <__aeabi_i2f>
 80021f4:	4604      	mov	r4, r0
 80021f6:	497c      	ldr	r1, [pc, #496]	; (80023e8 <nmea_GPGGA+0x338>)
 80021f8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80021fc:	f7fe fee6 	bl	8000fcc <__aeabi_fdiv>
 8002200:	4603      	mov	r3, r0
 8002202:	4619      	mov	r1, r3
 8002204:	4620      	mov	r0, r4
 8002206:	f7fe fd25 	bl	8000c54 <__addsf3>
 800220a:	4603      	mov	r3, r0
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe f97b 	bl	8000508 <__aeabi_f2d>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 800221a:	2300      	movs	r3, #0
 800221c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002220:	e010      	b.n	8002244 <nmea_GPGGA+0x194>
 8002222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002224:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002228:	4413      	add	r3, r2
 800222a:	7819      	ldrb	r1, [r3, #0]
 800222c:	f107 0210 	add.w	r2, r7, #16
 8002230:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002234:	4413      	add	r3, r2
 8002236:	460a      	mov	r2, r1
 8002238:	701a      	strb	r2, [r3, #0]
 800223a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800223e:	3301      	adds	r3, #1
 8002240:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002244:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002248:	2b02      	cmp	r3, #2
 800224a:	ddea      	ble.n	8002222 <nmea_GPGGA+0x172>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 800224c:	2300      	movs	r3, #0
 800224e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002252:	e011      	b.n	8002278 <nmea_GPGGA+0x1c8>
 8002254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002256:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800225a:	3303      	adds	r3, #3
 800225c:	4413      	add	r3, r2
 800225e:	7819      	ldrb	r1, [r3, #0]
 8002260:	f107 0208 	add.w	r2, r7, #8
 8002264:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002268:	4413      	add	r3, r2
 800226a:	460a      	mov	r2, r1
 800226c:	701a      	strb	r2, [r3, #0]
 800226e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002272:	3301      	adds	r3, #1
 8002274:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002278:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800227c:	2b05      	cmp	r3, #5
 800227e:	dde9      	ble.n	8002254 <nmea_GPGGA+0x1a4>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8002280:	f107 0310 	add.w	r3, r7, #16
 8002284:	220a      	movs	r2, #10
 8002286:	2100      	movs	r1, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f007 ff3f 	bl	800a10c <strtol>
 800228e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8002292:	f107 0308 	add.w	r3, r7, #8
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f007 fe61 	bl	8009f60 <strtof>
 800229e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 80022a2:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80022a6:	f7fe fd89 	bl	8000dbc <__aeabi_i2f>
 80022aa:	4604      	mov	r4, r0
 80022ac:	494e      	ldr	r1, [pc, #312]	; (80023e8 <nmea_GPGGA+0x338>)
 80022ae:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80022b2:	f7fe fe8b 	bl	8000fcc <__aeabi_fdiv>
 80022b6:	4603      	mov	r3, r0
 80022b8:	4619      	mov	r1, r3
 80022ba:	4620      	mov	r0, r4
 80022bc:	f7fe fcca 	bl	8000c54 <__addsf3>
 80022c0:	4603      	mov	r3, r0
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe f920 	bl	8000508 <__aeabi_f2d>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	f04f 0300 	mov.w	r3, #0
 80022d8:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80022dc:	f7fe fbd4 	bl	8000a88 <__aeabi_dcmpeq>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d17a      	bne.n	80023dc <nmea_GPGGA+0x32c>
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80022f2:	f7fe fbc9 	bl	8000a88 <__aeabi_dcmpeq>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d16f      	bne.n	80023dc <nmea_GPGGA+0x32c>
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	4b3a      	ldr	r3, [pc, #232]	; (80023ec <nmea_GPGGA+0x33c>)
 8002302:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002306:	f7fe fbc9 	bl	8000a9c <__aeabi_dcmplt>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d065      	beq.n	80023dc <nmea_GPGGA+0x32c>
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <nmea_GPGGA+0x340>)
 8002316:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800231a:	f7fe fbbf 	bl	8000a9c <__aeabi_dcmplt>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d05b      	beq.n	80023dc <nmea_GPGGA+0x32c>
            gps_data->latitude = lat_deg;
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800232a:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 8002334:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800233c:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8002346:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8002348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800234a:	2100      	movs	r1, #0
 800234c:	4618      	mov	r0, r3
 800234e:	f007 fe07 	bl	8009f60 <strtof>
 8002352:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 8002356:	f04f 0100 	mov.w	r1, #0
 800235a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800235e:	f7fe ff15 	bl	800118c <__aeabi_fcmpeq>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <nmea_GPGGA+0x2be>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	e001      	b.n	8002372 <nmea_GPGGA+0x2c2>
 800236e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 8002376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002378:	220a      	movs	r2, #10
 800237a:	2100      	movs	r1, #0
 800237c:	4618      	mov	r0, r3
 800237e:	f007 fec5 	bl	800a10c <strtol>
 8002382:	4602      	mov	r2, r0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8002388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800238a:	220a      	movs	r2, #10
 800238c:	2100      	movs	r1, #0
 800238e:	4618      	mov	r0, r3
 8002390:	f007 febc 	bl	800a10c <strtol>
 8002394:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8002398:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800239c:	2b00      	cmp	r3, #0
 800239e:	bfcc      	ite	gt
 80023a0:	2301      	movgt	r3, #1
 80023a2:	2300      	movle	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	461a      	mov	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 80023ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ae:	2100      	movs	r1, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f007 fdd5 	bl	8009f60 <strtof>
 80023b6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 80023ba:	f04f 0100 	mov.w	r1, #0
 80023be:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80023c2:	f7fe fee3 	bl	800118c <__aeabi_fcmpeq>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <nmea_GPGGA+0x322>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	e001      	b.n	80023d6 <nmea_GPGGA+0x326>
 80023d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 80023da:	e022      	b.n	8002422 <nmea_GPGGA+0x372>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 80023dc:	2300      	movs	r3, #0
 80023de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80023e2:	e016      	b.n	8002412 <nmea_GPGGA+0x362>
 80023e4:	0800d8ec 	.word	0x0800d8ec
 80023e8:	42700000 	.word	0x42700000
 80023ec:	40568000 	.word	0x40568000
 80023f0:	40668000 	.word	0x40668000
 80023f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	33d8      	adds	r3, #216	; 0xd8
 80023fc:	443b      	add	r3, r7
 80023fe:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8002402:	4618      	mov	r0, r3
 8002404:	f006 fee2 	bl	80091cc <free>
 8002408:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800240c:	3301      	adds	r3, #1
 800240e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002412:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002416:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800241a:	429a      	cmp	r2, r3
 800241c:	dbea      	blt.n	80023f4 <nmea_GPGGA+0x344>
            return 0;
 800241e:	2300      	movs	r3, #0
 8002420:	e019      	b.n	8002456 <nmea_GPGGA+0x3a6>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 8002422:	2300      	movs	r3, #0
 8002424:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002428:	e00e      	b.n	8002448 <nmea_GPGGA+0x398>
 800242a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	33d8      	adds	r3, #216	; 0xd8
 8002432:	443b      	add	r3, r7
 8002434:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8002438:	4618      	mov	r0, r3
 800243a:	f006 fec7 	bl	80091cc <free>
 800243e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002442:	3301      	adds	r3, #1
 8002444:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002448:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800244c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002450:	429a      	cmp	r2, r3
 8002452:	dbea      	blt.n	800242a <nmea_GPGGA+0x37a>
    return 1;
 8002454:	2301      	movs	r3, #1
}
 8002456:	4618      	mov	r0, r3
 8002458:	37dc      	adds	r7, #220	; 0xdc
 800245a:	46bd      	mov	sp, r7
 800245c:	bd90      	pop	{r4, r7, pc}
 800245e:	bf00      	nop

08002460 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	b0a3      	sub	sp, #140	; 0x8c
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 800246a:	2300      	movs	r3, #0
 800246c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 8002470:	f107 030c 	add.w	r3, r7, #12
 8002474:	2264      	movs	r2, #100	; 0x64
 8002476:	2100      	movs	r1, #0
 8002478:	4618      	mov	r0, r3
 800247a:	f008 fbd4 	bl	800ac26 <memset>
    char *marker = strtok(inputString, ",");
 800247e:	493b      	ldr	r1, [pc, #236]	; (800256c <nmea_GPGSA+0x10c>)
 8002480:	6838      	ldr	r0, [r7, #0]
 8002482:	f008 fbfd 	bl	800ac80 <strtok>
 8002486:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 800248a:	e027      	b.n	80024dc <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 800248c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002490:	f7fd fece 	bl	8000230 <strlen>
 8002494:	4603      	mov	r3, r0
 8002496:	1c5a      	adds	r2, r3, #1
 8002498:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 800249c:	1c63      	adds	r3, r4, #1
 800249e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80024a2:	4610      	mov	r0, r2
 80024a4:	f006 fe8a 	bl	80091bc <malloc>
 80024a8:	4603      	mov	r3, r0
 80024aa:	461a      	mov	r2, r3
 80024ac:	00a3      	lsls	r3, r4, #2
 80024ae:	3388      	adds	r3, #136	; 0x88
 80024b0:	443b      	add	r3, r7
 80024b2:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 80024b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024ba:	3b01      	subs	r3, #1
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	3388      	adds	r3, #136	; 0x88
 80024c0:	443b      	add	r3, r7
 80024c2:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80024c6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80024ca:	4618      	mov	r0, r3
 80024cc:	f008 fd27 	bl	800af1e <strcpy>
        marker = strtok(NULL, ",");
 80024d0:	4926      	ldr	r1, [pc, #152]	; (800256c <nmea_GPGSA+0x10c>)
 80024d2:	2000      	movs	r0, #0
 80024d4:	f008 fbd4 	bl	800ac80 <strtok>
 80024d8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 80024dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1d3      	bne.n	800248c <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	220a      	movs	r2, #10
 80024e8:	2100      	movs	r1, #0
 80024ea:	4618      	mov	r0, r3
 80024ec:	f007 fe0e 	bl	800a10c <strtol>
 80024f0:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 80024f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	bfcc      	ite	gt
 80024f8:	2301      	movgt	r3, #1
 80024fa:	2300      	movle	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8002508:	2303      	movs	r3, #3
 800250a:	67bb      	str	r3, [r7, #120]	; 0x78
 800250c:	e00e      	b.n	800252c <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 800250e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	3388      	adds	r3, #136	; 0x88
 8002514:	443b      	add	r3, r7
 8002516:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d002      	beq.n	8002526 <nmea_GPGSA+0xc6>
            satelliteCount++;
 8002520:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002522:	3301      	adds	r3, #1
 8002524:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8002526:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002528:	3301      	adds	r3, #1
 800252a:	67bb      	str	r3, [r7, #120]	; 0x78
 800252c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800252e:	2b0e      	cmp	r3, #14
 8002530:	dded      	ble.n	800250e <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002536:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8002538:	2300      	movs	r3, #0
 800253a:	677b      	str	r3, [r7, #116]	; 0x74
 800253c:	e00b      	b.n	8002556 <nmea_GPGSA+0xf6>
 800253e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	3388      	adds	r3, #136	; 0x88
 8002544:	443b      	add	r3, r7
 8002546:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800254a:	4618      	mov	r0, r3
 800254c:	f006 fe3e 	bl	80091cc <free>
 8002550:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002552:	3301      	adds	r3, #1
 8002554:	677b      	str	r3, [r7, #116]	; 0x74
 8002556:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002558:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800255c:	429a      	cmp	r2, r3
 800255e:	dbee      	blt.n	800253e <nmea_GPGSA+0xde>
    return 1;
 8002560:	2301      	movs	r3, #1
}
 8002562:	4618      	mov	r0, r3
 8002564:	378c      	adds	r7, #140	; 0x8c
 8002566:	46bd      	mov	sp, r7
 8002568:	bd90      	pop	{r4, r7, pc}
 800256a:	bf00      	nop
 800256c:	0800d8ec 	.word	0x0800d8ec

08002570 <nmea_GPGLL>:



int nmea_GPGLL(GPS *gps_data, char*inputString) {
 8002570:	b590      	push	{r4, r7, lr}
 8002572:	b0b7      	sub	sp, #220	; 0xdc
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]

    char *values[25];
    int counter = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 8002580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002584:	2264      	movs	r2, #100	; 0x64
 8002586:	2100      	movs	r1, #0
 8002588:	4618      	mov	r0, r3
 800258a:	f008 fb4c 	bl	800ac26 <memset>
    char *marker = strtok(inputString, ",");
 800258e:	49b0      	ldr	r1, [pc, #704]	; (8002850 <nmea_GPGLL+0x2e0>)
 8002590:	6838      	ldr	r0, [r7, #0]
 8002592:	f008 fb75 	bl	800ac80 <strtok>
 8002596:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 800259a:	e027      	b.n	80025ec <nmea_GPGLL+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 800259c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80025a0:	f7fd fe46 	bl	8000230 <strlen>
 80025a4:	4603      	mov	r3, r0
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 80025ac:	1c63      	adds	r3, r4, #1
 80025ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80025b2:	4610      	mov	r0, r2
 80025b4:	f006 fe02 	bl	80091bc <malloc>
 80025b8:	4603      	mov	r3, r0
 80025ba:	461a      	mov	r2, r3
 80025bc:	00a3      	lsls	r3, r4, #2
 80025be:	33d8      	adds	r3, #216	; 0xd8
 80025c0:	443b      	add	r3, r7
 80025c2:	f843 2cb4 	str.w	r2, [r3, #-180]
        strcpy(values[counter - 1], marker);
 80025c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025ca:	3b01      	subs	r3, #1
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	33d8      	adds	r3, #216	; 0xd8
 80025d0:	443b      	add	r3, r7
 80025d2:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 80025d6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80025da:	4618      	mov	r0, r3
 80025dc:	f008 fc9f 	bl	800af1e <strcpy>
        marker = strtok(NULL, ",");
 80025e0:	499b      	ldr	r1, [pc, #620]	; (8002850 <nmea_GPGLL+0x2e0>)
 80025e2:	2000      	movs	r0, #0
 80025e4:	f008 fb4c 	bl	800ac80 <strtok>
 80025e8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 80025ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1d3      	bne.n	800259c <nmea_GPGLL+0x2c>
    }
    char latSide = values[2][0];
 80025f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    if (latSide == 'S' || latSide == 'N') { //check if data is sorta intact
 80025fc:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8002600:	2b53      	cmp	r3, #83	; 0x53
 8002602:	d004      	beq.n	800260e <nmea_GPGLL+0x9e>
 8002604:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8002608:	2b4e      	cmp	r3, #78	; 0x4e
 800260a:	f040 811c 	bne.w	8002846 <nmea_GPGLL+0x2d6>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[1][z];
 800260e:	2300      	movs	r3, #0
 8002610:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002614:	e010      	b.n	8002638 <nmea_GPGLL+0xc8>
 8002616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002618:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800261c:	4413      	add	r3, r2
 800261e:	7819      	ldrb	r1, [r3, #0]
 8002620:	f107 0220 	add.w	r2, r7, #32
 8002624:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002628:	4413      	add	r3, r2
 800262a:	460a      	mov	r2, r1
 800262c:	701a      	strb	r2, [r3, #0]
 800262e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002632:	3301      	adds	r3, #1
 8002634:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002638:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800263c:	2b01      	cmp	r3, #1
 800263e:	ddea      	ble.n	8002616 <nmea_GPGLL+0xa6>
        for (int z = 0; z < 6; z++) lat_m[z] = values[1][z + 2];
 8002640:	2300      	movs	r3, #0
 8002642:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002646:	e011      	b.n	800266c <nmea_GPGLL+0xfc>
 8002648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800264a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800264e:	3302      	adds	r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	7819      	ldrb	r1, [r3, #0]
 8002654:	f107 0218 	add.w	r2, r7, #24
 8002658:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800265c:	4413      	add	r3, r2
 800265e:	460a      	mov	r2, r1
 8002660:	701a      	strb	r2, [r3, #0]
 8002662:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002666:	3301      	adds	r3, #1
 8002668:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800266c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002670:	2b05      	cmp	r3, #5
 8002672:	dde9      	ble.n	8002648 <nmea_GPGLL+0xd8>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8002674:	f107 0320 	add.w	r3, r7, #32
 8002678:	220a      	movs	r2, #10
 800267a:	2100      	movs	r1, #0
 800267c:	4618      	mov	r0, r3
 800267e:	f007 fd45 	bl	800a10c <strtol>
 8002682:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8002686:	f107 0318 	add.w	r3, r7, #24
 800268a:	2100      	movs	r1, #0
 800268c:	4618      	mov	r0, r3
 800268e:	f007 fc67 	bl	8009f60 <strtof>
 8002692:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8002696:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800269a:	f7fe fb8f 	bl	8000dbc <__aeabi_i2f>
 800269e:	4604      	mov	r4, r0
 80026a0:	496c      	ldr	r1, [pc, #432]	; (8002854 <nmea_GPGLL+0x2e4>)
 80026a2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80026a6:	f7fe fc91 	bl	8000fcc <__aeabi_fdiv>
 80026aa:	4603      	mov	r3, r0
 80026ac:	4619      	mov	r1, r3
 80026ae:	4620      	mov	r0, r4
 80026b0:	f7fe fad0 	bl	8000c54 <__addsf3>
 80026b4:	4603      	mov	r3, r0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fd ff26 	bl	8000508 <__aeabi_f2d>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];
        char lonSide = values[4][0];
 80026c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
        for (int z = 0; z < 3; z++) lon_d[z] = values[3][z];
 80026cc:	2300      	movs	r3, #0
 80026ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80026d2:	e010      	b.n	80026f6 <nmea_GPGLL+0x186>
 80026d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026da:	4413      	add	r3, r2
 80026dc:	7819      	ldrb	r1, [r3, #0]
 80026de:	f107 0214 	add.w	r2, r7, #20
 80026e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026e6:	4413      	add	r3, r2
 80026e8:	460a      	mov	r2, r1
 80026ea:	701a      	strb	r2, [r3, #0]
 80026ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026f0:	3301      	adds	r3, #1
 80026f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80026f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	ddea      	ble.n	80026d4 <nmea_GPGLL+0x164>
        for (int z = 0; z < 6; z++) lon_m[z] = values[3][z + 3];
 80026fe:	2300      	movs	r3, #0
 8002700:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002704:	e011      	b.n	800272a <nmea_GPGLL+0x1ba>
 8002706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002708:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800270c:	3303      	adds	r3, #3
 800270e:	4413      	add	r3, r2
 8002710:	7819      	ldrb	r1, [r3, #0]
 8002712:	f107 020c 	add.w	r2, r7, #12
 8002716:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800271a:	4413      	add	r3, r2
 800271c:	460a      	mov	r2, r1
 800271e:	701a      	strb	r2, [r3, #0]
 8002720:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002724:	3301      	adds	r3, #1
 8002726:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800272a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800272e:	2b05      	cmp	r3, #5
 8002730:	dde9      	ble.n	8002706 <nmea_GPGLL+0x196>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8002732:	f107 0314 	add.w	r3, r7, #20
 8002736:	220a      	movs	r2, #10
 8002738:	2100      	movs	r1, #0
 800273a:	4618      	mov	r0, r3
 800273c:	f007 fce6 	bl	800a10c <strtol>
 8002740:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        float lon_min_strtof = strtof(lon_m, NULL);
 8002744:	f107 030c 	add.w	r3, r7, #12
 8002748:	2100      	movs	r1, #0
 800274a:	4618      	mov	r0, r3
 800274c:	f007 fc08 	bl	8009f60 <strtof>
 8002750:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8002754:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002758:	f7fe fb30 	bl	8000dbc <__aeabi_i2f>
 800275c:	4604      	mov	r4, r0
 800275e:	493d      	ldr	r1, [pc, #244]	; (8002854 <nmea_GPGLL+0x2e4>)
 8002760:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8002764:	f7fe fc32 	bl	8000fcc <__aeabi_fdiv>
 8002768:	4603      	mov	r3, r0
 800276a:	4619      	mov	r1, r3
 800276c:	4620      	mov	r0, r4
 800276e:	f7fe fa71 	bl	8000c54 <__addsf3>
 8002772:	4603      	mov	r3, r0
 8002774:	4618      	mov	r0, r3
 8002776:	f7fd fec7 	bl	8000508 <__aeabi_f2d>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        //confirm that we aren't on null island
        if(lon_deg_strtol == 0 || lon_min_strtof == 0 || lat_deg_strtol == 0 || lat_min_strtof == 0) {
 8002782:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002786:	2b00      	cmp	r3, #0
 8002788:	d015      	beq.n	80027b6 <nmea_GPGLL+0x246>
 800278a:	f04f 0100 	mov.w	r1, #0
 800278e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8002792:	f7fe fcfb 	bl	800118c <__aeabi_fcmpeq>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10c      	bne.n	80027b6 <nmea_GPGLL+0x246>
 800279c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <nmea_GPGLL+0x246>
 80027a4:	f04f 0100 	mov.w	r1, #0
 80027a8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80027ac:	f7fe fcee 	bl	800118c <__aeabi_fcmpeq>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d01a      	beq.n	80027ec <nmea_GPGLL+0x27c>
            for(int i = 0; i<counter; i++) free(values[i]);
 80027b6:	2300      	movs	r3, #0
 80027b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80027bc:	e00e      	b.n	80027dc <nmea_GPGLL+0x26c>
 80027be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	33d8      	adds	r3, #216	; 0xd8
 80027c6:	443b      	add	r3, r7
 80027c8:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f006 fcfd 	bl	80091cc <free>
 80027d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027d6:	3301      	adds	r3, #1
 80027d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80027dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027e4:	429a      	cmp	r2, r3
 80027e6:	dbea      	blt.n	80027be <nmea_GPGLL+0x24e>
            return 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	e02d      	b.n	8002848 <nmea_GPGLL+0x2d8>
        }
        else{
            gps_data->latitude = lat_deg;
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80027f2:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->longitude = lon_deg;
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80027fc:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->latSide = latSide;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8002806:	721a      	strb	r2, [r3, #8]
            gps_data->lonSide = lonSide;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 800280e:	761a      	strb	r2, [r3, #24]
            for(int i = 0; i<counter; i++) free(values[i]);
 8002810:	2300      	movs	r3, #0
 8002812:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002816:	e00e      	b.n	8002836 <nmea_GPGLL+0x2c6>
 8002818:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	33d8      	adds	r3, #216	; 0xd8
 8002820:	443b      	add	r3, r7
 8002822:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8002826:	4618      	mov	r0, r3
 8002828:	f006 fcd0 	bl	80091cc <free>
 800282c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002830:	3301      	adds	r3, #1
 8002832:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002836:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800283a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800283e:	429a      	cmp	r2, r3
 8002840:	dbea      	blt.n	8002818 <nmea_GPGLL+0x2a8>
            return 1;
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <nmea_GPGLL+0x2d8>
        }
    }
    else return 0;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	37dc      	adds	r7, #220	; 0xdc
 800284c:	46bd      	mov	sp, r7
 800284e:	bd90      	pop	{r4, r7, pc}
 8002850:	0800d8ec 	.word	0x0800d8ec
 8002854:	42700000 	.word	0x42700000

08002858 <nmea_parse>:

void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8002858:	b590      	push	{r4, r7, lr}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8002862:	223c      	movs	r2, #60	; 0x3c
 8002864:	2100      	movs	r1, #0
 8002866:	484e      	ldr	r0, [pc, #312]	; (80029a0 <nmea_parse+0x148>)
 8002868:	f008 f9dd 	bl	800ac26 <memset>
    char * token = strtok(buffer, "$"); // TODO: Check if buffer can be casted to a char * for strtok argument
 800286c:	494d      	ldr	r1, [pc, #308]	; (80029a4 <nmea_parse+0x14c>)
 800286e:	6838      	ldr	r0, [r7, #0]
 8002870:	f008 fa06 	bl	800ac80 <strtok>
 8002874:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 800287a:	e01d      	b.n	80028b8 <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 800287c:	6978      	ldr	r0, [r7, #20]
 800287e:	f7fd fcd7 	bl	8000230 <strlen>
 8002882:	4603      	mov	r3, r0
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	693c      	ldr	r4, [r7, #16]
 8002888:	1c63      	adds	r3, r4, #1
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	4610      	mov	r0, r2
 800288e:	f006 fc95 	bl	80091bc <malloc>
 8002892:	4603      	mov	r3, r0
 8002894:	461a      	mov	r2, r3
 8002896:	4b42      	ldr	r3, [pc, #264]	; (80029a0 <nmea_parse+0x148>)
 8002898:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	3b01      	subs	r3, #1
 80028a0:	4a3f      	ldr	r2, [pc, #252]	; (80029a0 <nmea_parse+0x148>)
 80028a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a6:	6979      	ldr	r1, [r7, #20]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f008 fb38 	bl	800af1e <strcpy>
        token = strtok(NULL, "$");
 80028ae:	493d      	ldr	r1, [pc, #244]	; (80029a4 <nmea_parse+0x14c>)
 80028b0:	2000      	movs	r0, #0
 80028b2:	f008 f9e5 	bl	800ac80 <strtok>
 80028b6:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1de      	bne.n	800287c <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	e053      	b.n	800296c <nmea_parse+0x114>
       if(strstr(data[i], "\r\n")!=NULL){
 80028c4:	4a36      	ldr	r2, [pc, #216]	; (80029a0 <nmea_parse+0x148>)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028cc:	4936      	ldr	r1, [pc, #216]	; (80029a8 <nmea_parse+0x150>)
 80028ce:	4618      	mov	r0, r3
 80028d0:	f008 fa32 	bl	800ad38 <strstr>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d045      	beq.n	8002966 <nmea_parse+0x10e>
           if(strstr(data[i], "GPGLL")!=NULL){
 80028da:	4a31      	ldr	r2, [pc, #196]	; (80029a0 <nmea_parse+0x148>)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e2:	4932      	ldr	r1, [pc, #200]	; (80029ac <nmea_parse+0x154>)
 80028e4:	4618      	mov	r0, r3
 80028e6:	f008 fa27 	bl	800ad38 <strstr>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <nmea_parse+0xaa>
               nmea_GPGLL(gps_data, data[i]);
 80028f0:	4a2b      	ldr	r2, [pc, #172]	; (80029a0 <nmea_parse+0x148>)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f8:	4619      	mov	r1, r3
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff fe38 	bl	8002570 <nmea_GPGLL>
 8002900:	e031      	b.n	8002966 <nmea_parse+0x10e>
           }
           else if(strstr(data[i], "GPGSA")!=NULL){
 8002902:	4a27      	ldr	r2, [pc, #156]	; (80029a0 <nmea_parse+0x148>)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290a:	4929      	ldr	r1, [pc, #164]	; (80029b0 <nmea_parse+0x158>)
 800290c:	4618      	mov	r0, r3
 800290e:	f008 fa13 	bl	800ad38 <strstr>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d008      	beq.n	800292a <nmea_parse+0xd2>
               nmea_GPGSA(gps_data, data[i]);
 8002918:	4a21      	ldr	r2, [pc, #132]	; (80029a0 <nmea_parse+0x148>)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002920:	4619      	mov	r1, r3
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff fd9c 	bl	8002460 <nmea_GPGSA>
 8002928:	e01d      	b.n	8002966 <nmea_parse+0x10e>
           }
           else if(strstr(data[i], "GNGGA") != NULL || (strstr(data[i], "GPGGA"))!=NULL){
 800292a:	4a1d      	ldr	r2, [pc, #116]	; (80029a0 <nmea_parse+0x148>)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002932:	4920      	ldr	r1, [pc, #128]	; (80029b4 <nmea_parse+0x15c>)
 8002934:	4618      	mov	r0, r3
 8002936:	f008 f9ff 	bl	800ad38 <strstr>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10a      	bne.n	8002956 <nmea_parse+0xfe>
 8002940:	4a17      	ldr	r2, [pc, #92]	; (80029a0 <nmea_parse+0x148>)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002948:	491b      	ldr	r1, [pc, #108]	; (80029b8 <nmea_parse+0x160>)
 800294a:	4618      	mov	r0, r3
 800294c:	f008 f9f4 	bl	800ad38 <strstr>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d007      	beq.n	8002966 <nmea_parse+0x10e>
               nmea_GPGGA(gps_data, data[i]);
 8002956:	4a12      	ldr	r2, [pc, #72]	; (80029a0 <nmea_parse+0x148>)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800295e:	4619      	mov	r1, r3
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff fba5 	bl	80020b0 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	3301      	adds	r3, #1
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	429a      	cmp	r2, r3
 8002972:	dba7      	blt.n	80028c4 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 8002974:	2300      	movs	r3, #0
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	e009      	b.n	800298e <nmea_parse+0x136>
 800297a:	4a09      	ldr	r2, [pc, #36]	; (80029a0 <nmea_parse+0x148>)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002982:	4618      	mov	r0, r3
 8002984:	f006 fc22 	bl	80091cc <free>
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	3301      	adds	r3, #1
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	429a      	cmp	r2, r3
 8002994:	dbf1      	blt.n	800297a <nmea_parse+0x122>


}
 8002996:	bf00      	nop
 8002998:	bf00      	nop
 800299a:	371c      	adds	r7, #28
 800299c:	46bd      	mov	sp, r7
 800299e:	bd90      	pop	{r4, r7, pc}
 80029a0:	200003b4 	.word	0x200003b4
 80029a4:	0800d8f0 	.word	0x0800d8f0
 80029a8:	0800d8f4 	.word	0x0800d8f4
 80029ac:	0800d8f8 	.word	0x0800d8f8
 80029b0:	0800d900 	.word	0x0800d900
 80029b4:	0800d908 	.word	0x0800d908
 80029b8:	0800d910 	.word	0x0800d910

080029bc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80029c0:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029c2:	4a18      	ldr	r2, [pc, #96]	; (8002a24 <MX_SPI1_Init+0x68>)
 80029c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029c6:	4b16      	ldr	r3, [pc, #88]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029ce:	4b14      	ldr	r3, [pc, #80]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029da:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029dc:	2200      	movs	r2, #0
 80029de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029e0:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029e6:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80029ee:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029f0:	2208      	movs	r2, #8
 80029f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029f4:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a00:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <MX_SPI1_Init+0x64>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a06:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <MX_SPI1_Init+0x64>)
 8002a08:	220a      	movs	r2, #10
 8002a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a0c:	4804      	ldr	r0, [pc, #16]	; (8002a20 <MX_SPI1_Init+0x64>)
 8002a0e:	f003 f89b 	bl	8005b48 <HAL_SPI_Init>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002a18:	f7ff fb44 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a1c:	bf00      	nop
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	200003f0 	.word	0x200003f0
 8002a24:	40013000 	.word	0x40013000

08002a28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a30:	f107 0310 	add.w	r3, r7, #16
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a1b      	ldr	r2, [pc, #108]	; (8002ab0 <HAL_SPI_MspInit+0x88>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d12f      	bne.n	8002aa8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a48:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <HAL_SPI_MspInit+0x8c>)
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	4a19      	ldr	r2, [pc, #100]	; (8002ab4 <HAL_SPI_MspInit+0x8c>)
 8002a4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a52:	6193      	str	r3, [r2, #24]
 8002a54:	4b17      	ldr	r3, [pc, #92]	; (8002ab4 <HAL_SPI_MspInit+0x8c>)
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a60:	4b14      	ldr	r3, [pc, #80]	; (8002ab4 <HAL_SPI_MspInit+0x8c>)
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	4a13      	ldr	r2, [pc, #76]	; (8002ab4 <HAL_SPI_MspInit+0x8c>)
 8002a66:	f043 0304 	orr.w	r3, r3, #4
 8002a6a:	6193      	str	r3, [r2, #24]
 8002a6c:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <HAL_SPI_MspInit+0x8c>)
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SDL_CLK_Pin|SDL_MOSI_Pin;
 8002a78:	23a0      	movs	r3, #160	; 0xa0
 8002a7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a80:	2303      	movs	r3, #3
 8002a82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a84:	f107 0310 	add.w	r3, r7, #16
 8002a88:	4619      	mov	r1, r3
 8002a8a:	480b      	ldr	r0, [pc, #44]	; (8002ab8 <HAL_SPI_MspInit+0x90>)
 8002a8c:	f000 fef2 	bl	8003874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDL_MISO_Pin;
 8002a90:	2340      	movs	r3, #64	; 0x40
 8002a92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SDL_MISO_GPIO_Port, &GPIO_InitStruct);
 8002a9c:	f107 0310 	add.w	r3, r7, #16
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4805      	ldr	r0, [pc, #20]	; (8002ab8 <HAL_SPI_MspInit+0x90>)
 8002aa4:	f000 fee6 	bl	8003874 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	3720      	adds	r7, #32
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40013000 	.word	0x40013000
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40010800 	.word	0x40010800

08002abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ac2:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <HAL_MspInit+0x4c>)
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	4a10      	ldr	r2, [pc, #64]	; (8002b08 <HAL_MspInit+0x4c>)
 8002ac8:	f043 0301 	orr.w	r3, r3, #1
 8002acc:	6193      	str	r3, [r2, #24]
 8002ace:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <HAL_MspInit+0x4c>)
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	607b      	str	r3, [r7, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <HAL_MspInit+0x4c>)
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <HAL_MspInit+0x4c>)
 8002ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	61d3      	str	r3, [r2, #28]
 8002ae6:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <HAL_MspInit+0x4c>)
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002af2:	2200      	movs	r2, #0
 8002af4:	210f      	movs	r1, #15
 8002af6:	f06f 0001 	mvn.w	r0, #1
 8002afa:	f000 fe92 	bl	8003822 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40021000 	.word	0x40021000

08002b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b10:	e7fe      	b.n	8002b10 <NMI_Handler+0x4>

08002b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b16:	e7fe      	b.n	8002b16 <HardFault_Handler+0x4>

08002b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b1c:	e7fe      	b.n	8002b1c <MemManage_Handler+0x4>

08002b1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b22:	e7fe      	b.n	8002b22 <BusFault_Handler+0x4>

08002b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b28:	e7fe      	b.n	8002b28 <UsageFault_Handler+0x4>

08002b2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr

08002b36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b3a:	f000 fa25 	bl	8002f88 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002b3e:	f005 fb1f 	bl	8008180 <xTaskGetSchedulerState>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d001      	beq.n	8002b4c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002b48:	f006 f8de 	bl	8008d08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b4c:	bf00      	nop
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return 1;
 8002b54:	2301      	movs	r3, #1
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr

08002b5e <_kill>:

int _kill(int pid, int sig)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b68:	f008 f9ac 	bl	800aec4 <__errno>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2216      	movs	r2, #22
 8002b70:	601a      	str	r2, [r3, #0]
  return -1;
 8002b72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <_exit>:

void _exit (int status)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b082      	sub	sp, #8
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b86:	f04f 31ff 	mov.w	r1, #4294967295
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff ffe7 	bl	8002b5e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b90:	e7fe      	b.n	8002b90 <_exit+0x12>

08002b92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b086      	sub	sp, #24
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	e00a      	b.n	8002bba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ba4:	f3af 8000 	nop.w
 8002ba8:	4601      	mov	r1, r0
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	60ba      	str	r2, [r7, #8]
 8002bb0:	b2ca      	uxtb	r2, r1
 8002bb2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	dbf0      	blt.n	8002ba4 <_read+0x12>
  }

  return len;
 8002bc2:	687b      	ldr	r3, [r7, #4]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3718      	adds	r7, #24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	e009      	b.n	8002bf2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	60ba      	str	r2, [r7, #8]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	dbf1      	blt.n	8002bde <_write+0x12>
  }
  return len;
 8002bfa:	687b      	ldr	r3, [r7, #4]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <_close>:

int _close(int file)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c2a:	605a      	str	r2, [r3, #4]
  return 0;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <_isatty>:

int _isatty(int file)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c40:	2301      	movs	r3, #1
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr

08002c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c6c:	4a14      	ldr	r2, [pc, #80]	; (8002cc0 <_sbrk+0x5c>)
 8002c6e:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <_sbrk+0x60>)
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c78:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <_sbrk+0x64>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d102      	bne.n	8002c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c80:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <_sbrk+0x64>)
 8002c82:	4a12      	ldr	r2, [pc, #72]	; (8002ccc <_sbrk+0x68>)
 8002c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c86:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <_sbrk+0x64>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d207      	bcs.n	8002ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c94:	f008 f916 	bl	800aec4 <__errno>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	220c      	movs	r2, #12
 8002c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca2:	e009      	b.n	8002cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ca4:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <_sbrk+0x64>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002caa:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <_sbrk+0x64>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	4a05      	ldr	r2, [pc, #20]	; (8002cc8 <_sbrk+0x64>)
 8002cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	2000c000 	.word	0x2000c000
 8002cc4:	00000400 	.word	0x00000400
 8002cc8:	20000448 	.word	0x20000448
 8002ccc:	20003430 	.word	0x20003430

08002cd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002ce0:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <MX_UART5_Init+0x4c>)
 8002ce2:	4a12      	ldr	r2, [pc, #72]	; (8002d2c <MX_UART5_Init+0x50>)
 8002ce4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002ce6:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <MX_UART5_Init+0x4c>)
 8002ce8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cec:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002cee:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <MX_UART5_Init+0x4c>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <MX_UART5_Init+0x4c>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002cfa:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <MX_UART5_Init+0x4c>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002d00:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <MX_UART5_Init+0x4c>)
 8002d02:	220c      	movs	r2, #12
 8002d04:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d06:	4b08      	ldr	r3, [pc, #32]	; (8002d28 <MX_UART5_Init+0x4c>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <MX_UART5_Init+0x4c>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002d12:	4805      	ldr	r0, [pc, #20]	; (8002d28 <MX_UART5_Init+0x4c>)
 8002d14:	f002 ff9c 	bl	8005c50 <HAL_UART_Init>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002d1e:	f7ff f9c1 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	2000044c 	.word	0x2000044c
 8002d2c:	40005000 	.word	0x40005000

08002d30 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d34:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <MX_USART1_UART_Init+0x4c>)
 8002d36:	4a12      	ldr	r2, [pc, #72]	; (8002d80 <MX_USART1_UART_Init+0x50>)
 8002d38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d3a:	4b10      	ldr	r3, [pc, #64]	; (8002d7c <MX_USART1_UART_Init+0x4c>)
 8002d3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d42:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <MX_USART1_UART_Init+0x4c>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d48:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <MX_USART1_UART_Init+0x4c>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d4e:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <MX_USART1_UART_Init+0x4c>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d54:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <MX_USART1_UART_Init+0x4c>)
 8002d56:	220c      	movs	r2, #12
 8002d58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d5a:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <MX_USART1_UART_Init+0x4c>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d60:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <MX_USART1_UART_Init+0x4c>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d66:	4805      	ldr	r0, [pc, #20]	; (8002d7c <MX_USART1_UART_Init+0x4c>)
 8002d68:	f002 ff72 	bl	8005c50 <HAL_UART_Init>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002d72:	f7ff f997 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000494 	.word	0x20000494
 8002d80:	40013800 	.word	0x40013800

08002d84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08c      	sub	sp, #48	; 0x30
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d8c:	f107 0320 	add.w	r3, r7, #32
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART5)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a3e      	ldr	r2, [pc, #248]	; (8002e98 <HAL_UART_MspInit+0x114>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d13d      	bne.n	8002e20 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002da4:	4b3d      	ldr	r3, [pc, #244]	; (8002e9c <HAL_UART_MspInit+0x118>)
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	4a3c      	ldr	r2, [pc, #240]	; (8002e9c <HAL_UART_MspInit+0x118>)
 8002daa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dae:	61d3      	str	r3, [r2, #28]
 8002db0:	4b3a      	ldr	r3, [pc, #232]	; (8002e9c <HAL_UART_MspInit+0x118>)
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002db8:	61fb      	str	r3, [r7, #28]
 8002dba:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dbc:	4b37      	ldr	r3, [pc, #220]	; (8002e9c <HAL_UART_MspInit+0x118>)
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	4a36      	ldr	r2, [pc, #216]	; (8002e9c <HAL_UART_MspInit+0x118>)
 8002dc2:	f043 0310 	orr.w	r3, r3, #16
 8002dc6:	6193      	str	r3, [r2, #24]
 8002dc8:	4b34      	ldr	r3, [pc, #208]	; (8002e9c <HAL_UART_MspInit+0x118>)
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	f003 0310 	and.w	r3, r3, #16
 8002dd0:	61bb      	str	r3, [r7, #24]
 8002dd2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dd4:	4b31      	ldr	r3, [pc, #196]	; (8002e9c <HAL_UART_MspInit+0x118>)
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	4a30      	ldr	r2, [pc, #192]	; (8002e9c <HAL_UART_MspInit+0x118>)
 8002dda:	f043 0320 	orr.w	r3, r3, #32
 8002dde:	6193      	str	r3, [r2, #24]
 8002de0:	4b2e      	ldr	r3, [pc, #184]	; (8002e9c <HAL_UART_MspInit+0x118>)
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	f003 0320 	and.w	r3, r3, #32
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df2:	2302      	movs	r3, #2
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002df6:	2303      	movs	r3, #3
 8002df8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dfa:	f107 0320 	add.w	r3, r7, #32
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4827      	ldr	r0, [pc, #156]	; (8002ea0 <HAL_UART_MspInit+0x11c>)
 8002e02:	f000 fd37 	bl	8003874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e06:	2304      	movs	r3, #4
 8002e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e12:	f107 0320 	add.w	r3, r7, #32
 8002e16:	4619      	mov	r1, r3
 8002e18:	4822      	ldr	r0, [pc, #136]	; (8002ea4 <HAL_UART_MspInit+0x120>)
 8002e1a:	f000 fd2b 	bl	8003874 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002e1e:	e036      	b.n	8002e8e <HAL_UART_MspInit+0x10a>
  else if(uartHandle->Instance==USART1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a20      	ldr	r2, [pc, #128]	; (8002ea8 <HAL_UART_MspInit+0x124>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d131      	bne.n	8002e8e <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e2a:	4b1c      	ldr	r3, [pc, #112]	; (8002e9c <HAL_UART_MspInit+0x118>)
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	4a1b      	ldr	r2, [pc, #108]	; (8002e9c <HAL_UART_MspInit+0x118>)
 8002e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e34:	6193      	str	r3, [r2, #24]
 8002e36:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <HAL_UART_MspInit+0x118>)
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e42:	4b16      	ldr	r3, [pc, #88]	; (8002e9c <HAL_UART_MspInit+0x118>)
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	4a15      	ldr	r2, [pc, #84]	; (8002e9c <HAL_UART_MspInit+0x118>)
 8002e48:	f043 0304 	orr.w	r3, r3, #4
 8002e4c:	6193      	str	r3, [r2, #24]
 8002e4e:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <HAL_UART_MspInit+0x118>)
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RADIO_TX_Pin;
 8002e5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e60:	2302      	movs	r3, #2
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e64:	2303      	movs	r3, #3
 8002e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RADIO_TX_GPIO_Port, &GPIO_InitStruct);
 8002e68:	f107 0320 	add.w	r3, r7, #32
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	480f      	ldr	r0, [pc, #60]	; (8002eac <HAL_UART_MspInit+0x128>)
 8002e70:	f000 fd00 	bl	8003874 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RADIO_RX_Pin;
 8002e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RADIO_RX_GPIO_Port, &GPIO_InitStruct);
 8002e82:	f107 0320 	add.w	r3, r7, #32
 8002e86:	4619      	mov	r1, r3
 8002e88:	4808      	ldr	r0, [pc, #32]	; (8002eac <HAL_UART_MspInit+0x128>)
 8002e8a:	f000 fcf3 	bl	8003874 <HAL_GPIO_Init>
}
 8002e8e:	bf00      	nop
 8002e90:	3730      	adds	r7, #48	; 0x30
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40005000 	.word	0x40005000
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40011000 	.word	0x40011000
 8002ea4:	40011400 	.word	0x40011400
 8002ea8:	40013800 	.word	0x40013800
 8002eac:	40010800 	.word	0x40010800

08002eb0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002eb0:	f7ff ff0e 	bl	8002cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002eb4:	480b      	ldr	r0, [pc, #44]	; (8002ee4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002eb6:	490c      	ldr	r1, [pc, #48]	; (8002ee8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002eb8:	4a0c      	ldr	r2, [pc, #48]	; (8002eec <LoopFillZerobss+0x16>)
  movs r3, #0
 8002eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ebc:	e002      	b.n	8002ec4 <LoopCopyDataInit>

08002ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ec2:	3304      	adds	r3, #4

08002ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ec8:	d3f9      	bcc.n	8002ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eca:	4a09      	ldr	r2, [pc, #36]	; (8002ef0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002ecc:	4c09      	ldr	r4, [pc, #36]	; (8002ef4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ed0:	e001      	b.n	8002ed6 <LoopFillZerobss>

08002ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed4:	3204      	adds	r2, #4

08002ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ed8:	d3fb      	bcc.n	8002ed2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002eda:	f007 fff9 	bl	800aed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ede:	f7ff f87d 	bl	8001fdc <main>
  bx lr
 8002ee2:	4770      	bx	lr
  ldr r0, =_sdata
 8002ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ee8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002eec:	0800df50 	.word	0x0800df50
  ldr r2, =_sbss
 8002ef0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002ef4:	2000342c 	.word	0x2000342c

08002ef8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ef8:	e7fe      	b.n	8002ef8 <ADC1_2_IRQHandler>
	...

08002efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f00:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <HAL_Init+0x28>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a07      	ldr	r2, [pc, #28]	; (8002f24 <HAL_Init+0x28>)
 8002f06:	f043 0310 	orr.w	r3, r3, #16
 8002f0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f0c:	2003      	movs	r0, #3
 8002f0e:	f000 fc7d 	bl	800380c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f12:	200f      	movs	r0, #15
 8002f14:	f000 f808 	bl	8002f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f18:	f7ff fdd0 	bl	8002abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40022000 	.word	0x40022000

08002f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f30:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <HAL_InitTick+0x54>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <HAL_InitTick+0x58>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	4619      	mov	r1, r3
 8002f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 fc87 	bl	800385a <HAL_SYSTICK_Config>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e00e      	b.n	8002f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b0f      	cmp	r3, #15
 8002f5a:	d80a      	bhi.n	8002f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	f04f 30ff 	mov.w	r0, #4294967295
 8002f64:	f000 fc5d 	bl	8003822 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f68:	4a06      	ldr	r2, [pc, #24]	; (8002f84 <HAL_InitTick+0x5c>)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e000      	b.n	8002f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	20000000 	.word	0x20000000
 8002f80:	20000008 	.word	0x20000008
 8002f84:	20000004 	.word	0x20000004

08002f88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <HAL_IncTick+0x1c>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	461a      	mov	r2, r3
 8002f92:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <HAL_IncTick+0x20>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4413      	add	r3, r2
 8002f98:	4a03      	ldr	r2, [pc, #12]	; (8002fa8 <HAL_IncTick+0x20>)
 8002f9a:	6013      	str	r3, [r2, #0]
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr
 8002fa4:	20000008 	.word	0x20000008
 8002fa8:	200004dc 	.word	0x200004dc

08002fac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  return uwTick;
 8002fb0:	4b02      	ldr	r3, [pc, #8]	; (8002fbc <HAL_GetTick+0x10>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr
 8002fbc:	200004dc 	.word	0x200004dc

08002fc0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e0ed      	b.n	80031ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d102      	bne.n	8002fe4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fe f98a 	bl	80012f8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0201 	orr.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ff4:	f7ff ffda 	bl	8002fac <HAL_GetTick>
 8002ff8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ffa:	e012      	b.n	8003022 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ffc:	f7ff ffd6 	bl	8002fac <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b0a      	cmp	r3, #10
 8003008:	d90b      	bls.n	8003022 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2205      	movs	r2, #5
 800301a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e0c5      	b.n	80031ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0e5      	beq.n	8002ffc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0202 	bic.w	r2, r2, #2
 800303e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003040:	f7ff ffb4 	bl	8002fac <HAL_GetTick>
 8003044:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003046:	e012      	b.n	800306e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003048:	f7ff ffb0 	bl	8002fac <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b0a      	cmp	r3, #10
 8003054:	d90b      	bls.n	800306e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2205      	movs	r2, #5
 8003066:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e09f      	b.n	80031ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1e5      	bne.n	8003048 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	7e1b      	ldrb	r3, [r3, #24]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d108      	bne.n	8003096 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	e007      	b.n	80030a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	7e5b      	ldrb	r3, [r3, #25]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d108      	bne.n	80030c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	e007      	b.n	80030d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	7e9b      	ldrb	r3, [r3, #26]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d108      	bne.n	80030ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0220 	orr.w	r2, r2, #32
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	e007      	b.n	80030fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0220 	bic.w	r2, r2, #32
 80030f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	7edb      	ldrb	r3, [r3, #27]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d108      	bne.n	8003114 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0210 	bic.w	r2, r2, #16
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	e007      	b.n	8003124 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0210 	orr.w	r2, r2, #16
 8003122:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	7f1b      	ldrb	r3, [r3, #28]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d108      	bne.n	800313e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0208 	orr.w	r2, r2, #8
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	e007      	b.n	800314e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0208 	bic.w	r2, r2, #8
 800314c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	7f5b      	ldrb	r3, [r3, #29]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d108      	bne.n	8003168 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f042 0204 	orr.w	r2, r2, #4
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	e007      	b.n	8003178 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0204 	bic.w	r2, r2, #4
 8003176:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	ea42 0103 	orr.w	r1, r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	1e5a      	subs	r2, r3, #1
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b087      	sub	sp, #28
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031cc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80031ce:	7cfb      	ldrb	r3, [r7, #19]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d003      	beq.n	80031dc <HAL_CAN_ConfigFilter+0x26>
 80031d4:	7cfb      	ldrb	r3, [r7, #19]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	f040 80aa 	bne.w	8003330 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80031e2:	f043 0201 	orr.w	r2, r3, #1
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	f003 031f 	and.w	r3, r3, #31
 80031f4:	2201      	movs	r2, #1
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	43db      	mvns	r3, r3
 8003206:	401a      	ands	r2, r3
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d123      	bne.n	800325e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	43db      	mvns	r3, r3
 8003220:	401a      	ands	r2, r3
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003238:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	3248      	adds	r2, #72	; 0x48
 800323e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003252:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003254:	6979      	ldr	r1, [r7, #20]
 8003256:	3348      	adds	r3, #72	; 0x48
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	440b      	add	r3, r1
 800325c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d122      	bne.n	80032ac <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	431a      	orrs	r2, r3
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003286:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	3248      	adds	r2, #72	; 0x48
 800328c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80032a0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80032a2:	6979      	ldr	r1, [r7, #20]
 80032a4:	3348      	adds	r3, #72	; 0x48
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	440b      	add	r3, r1
 80032aa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d109      	bne.n	80032c8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	43db      	mvns	r3, r3
 80032be:	401a      	ands	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80032c6:	e007      	b.n	80032d8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	431a      	orrs	r2, r3
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d109      	bne.n	80032f4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	43db      	mvns	r3, r3
 80032ea:	401a      	ands	r2, r3
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80032f2:	e007      	b.n	8003304 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	431a      	orrs	r2, r3
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d107      	bne.n	800331c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	431a      	orrs	r2, r3
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003322:	f023 0201 	bic.w	r2, r3, #1
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	e006      	b.n	800333e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
  }
}
 800333e:	4618      	mov	r0, r3
 8003340:	371c      	adds	r7, #28
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr

08003348 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b01      	cmp	r3, #1
 800335a:	d12e      	bne.n	80033ba <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0201 	bic.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003374:	f7ff fe1a 	bl	8002fac <HAL_GetTick>
 8003378:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800337a:	e012      	b.n	80033a2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800337c:	f7ff fe16 	bl	8002fac <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b0a      	cmp	r3, #10
 8003388:	d90b      	bls.n	80033a2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2205      	movs	r2, #5
 800339a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e012      	b.n	80033c8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1e5      	bne.n	800337c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	e006      	b.n	80033c8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
  }
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
 80033dc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033e4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80033e6:	7dfb      	ldrb	r3, [r7, #23]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d003      	beq.n	80033f4 <HAL_CAN_GetRxMessage+0x24>
 80033ec:	7dfb      	ldrb	r3, [r7, #23]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	f040 8103 	bne.w	80035fa <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10e      	bne.n	8003418 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d116      	bne.n	8003436 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e0f7      	b.n	8003608 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d107      	bne.n	8003436 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e0e8      	b.n	8003608 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	331b      	adds	r3, #27
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	4413      	add	r3, r2
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0204 	and.w	r2, r3, #4
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10c      	bne.n	800346e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	331b      	adds	r3, #27
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	4413      	add	r3, r2
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	0d5b      	lsrs	r3, r3, #21
 8003464:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	e00b      	b.n	8003486 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	331b      	adds	r3, #27
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	4413      	add	r3, r2
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	08db      	lsrs	r3, r3, #3
 800347e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	331b      	adds	r3, #27
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	4413      	add	r3, r2
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0202 	and.w	r2, r3, #2
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	331b      	adds	r3, #27
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	4413      	add	r3, r2
 80034a8:	3304      	adds	r3, #4
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2208      	movs	r2, #8
 80034b8:	611a      	str	r2, [r3, #16]
 80034ba:	e00b      	b.n	80034d4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	331b      	adds	r3, #27
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	4413      	add	r3, r2
 80034c8:	3304      	adds	r3, #4
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 020f 	and.w	r2, r3, #15
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	331b      	adds	r3, #27
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	4413      	add	r3, r2
 80034e0:	3304      	adds	r3, #4
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	0a1b      	lsrs	r3, r3, #8
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	331b      	adds	r3, #27
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	4413      	add	r3, r2
 80034f8:	3304      	adds	r3, #4
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	0c1b      	lsrs	r3, r3, #16
 80034fe:	b29a      	uxth	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	4413      	add	r3, r2
 800350e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	b2da      	uxtb	r2, r3
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	4413      	add	r3, r2
 8003524:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	0a1a      	lsrs	r2, r3, #8
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	3301      	adds	r3, #1
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	4413      	add	r3, r2
 800353e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	0c1a      	lsrs	r2, r3, #16
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	3302      	adds	r3, #2
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	4413      	add	r3, r2
 8003558:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	0e1a      	lsrs	r2, r3, #24
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	3303      	adds	r3, #3
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	4413      	add	r3, r2
 8003572:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	3304      	adds	r3, #4
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	4413      	add	r3, r2
 800358a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	0a1a      	lsrs	r2, r3, #8
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	3305      	adds	r3, #5
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	0c1a      	lsrs	r2, r3, #16
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	3306      	adds	r3, #6
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	4413      	add	r3, r2
 80035be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	0e1a      	lsrs	r2, r3, #24
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	3307      	adds	r3, #7
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d108      	bne.n	80035e6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0220 	orr.w	r2, r2, #32
 80035e2:	60da      	str	r2, [r3, #12]
 80035e4:	e007      	b.n	80035f6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	691a      	ldr	r2, [r3, #16]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0220 	orr.w	r2, r2, #32
 80035f4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80035f6:	2300      	movs	r3, #0
 80035f8:	e006      	b.n	8003608 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
  }
}
 8003608:	4618      	mov	r0, r3
 800360a:	371c      	adds	r7, #28
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr

08003612 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8003612:	b480      	push	{r7}
 8003614:	b085      	sub	sp, #20
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003626:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003628:	7afb      	ldrb	r3, [r7, #11]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d002      	beq.n	8003634 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800362e:	7afb      	ldrb	r3, [r7, #11]
 8003630:	2b02      	cmp	r3, #2
 8003632:	d10f      	bne.n	8003654 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0303 	and.w	r3, r3, #3
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	e005      	b.n	8003654 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8003654:	68fb      	ldr	r3, [r7, #12]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr

08003660 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003670:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003672:	7bfb      	ldrb	r3, [r7, #15]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d002      	beq.n	800367e <HAL_CAN_ActivateNotification+0x1e>
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d109      	bne.n	8003692 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6959      	ldr	r1, [r3, #20]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800368e:	2300      	movs	r3, #0
 8003690:	e006      	b.n	80036a0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
  }
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc80      	pop	{r7}
 80036a8:	4770      	bx	lr
	...

080036ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036bc:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <__NVIC_SetPriorityGrouping+0x44>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036c8:	4013      	ands	r3, r2
 80036ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036de:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <__NVIC_SetPriorityGrouping+0x44>)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	60d3      	str	r3, [r2, #12]
}
 80036e4:	bf00      	nop
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bc80      	pop	{r7}
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	e000ed00 	.word	0xe000ed00

080036f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036f8:	4b04      	ldr	r3, [pc, #16]	; (800370c <__NVIC_GetPriorityGrouping+0x18>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	0a1b      	lsrs	r3, r3, #8
 80036fe:	f003 0307 	and.w	r3, r3, #7
}
 8003702:	4618      	mov	r0, r3
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	e000ed00 	.word	0xe000ed00

08003710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	6039      	str	r1, [r7, #0]
 800371a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800371c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003720:	2b00      	cmp	r3, #0
 8003722:	db0a      	blt.n	800373a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	b2da      	uxtb	r2, r3
 8003728:	490c      	ldr	r1, [pc, #48]	; (800375c <__NVIC_SetPriority+0x4c>)
 800372a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372e:	0112      	lsls	r2, r2, #4
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	440b      	add	r3, r1
 8003734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003738:	e00a      	b.n	8003750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	b2da      	uxtb	r2, r3
 800373e:	4908      	ldr	r1, [pc, #32]	; (8003760 <__NVIC_SetPriority+0x50>)
 8003740:	79fb      	ldrb	r3, [r7, #7]
 8003742:	f003 030f 	and.w	r3, r3, #15
 8003746:	3b04      	subs	r3, #4
 8003748:	0112      	lsls	r2, r2, #4
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	440b      	add	r3, r1
 800374e:	761a      	strb	r2, [r3, #24]
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	e000e100 	.word	0xe000e100
 8003760:	e000ed00 	.word	0xe000ed00

08003764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003764:	b480      	push	{r7}
 8003766:	b089      	sub	sp, #36	; 0x24
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f1c3 0307 	rsb	r3, r3, #7
 800377e:	2b04      	cmp	r3, #4
 8003780:	bf28      	it	cs
 8003782:	2304      	movcs	r3, #4
 8003784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	3304      	adds	r3, #4
 800378a:	2b06      	cmp	r3, #6
 800378c:	d902      	bls.n	8003794 <NVIC_EncodePriority+0x30>
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	3b03      	subs	r3, #3
 8003792:	e000      	b.n	8003796 <NVIC_EncodePriority+0x32>
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003798:	f04f 32ff 	mov.w	r2, #4294967295
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43da      	mvns	r2, r3
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	401a      	ands	r2, r3
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037ac:	f04f 31ff 	mov.w	r1, #4294967295
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	fa01 f303 	lsl.w	r3, r1, r3
 80037b6:	43d9      	mvns	r1, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037bc:	4313      	orrs	r3, r2
         );
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3724      	adds	r7, #36	; 0x24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr

080037c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037d8:	d301      	bcc.n	80037de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037da:	2301      	movs	r3, #1
 80037dc:	e00f      	b.n	80037fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037de:	4a0a      	ldr	r2, [pc, #40]	; (8003808 <SysTick_Config+0x40>)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037e6:	210f      	movs	r1, #15
 80037e8:	f04f 30ff 	mov.w	r0, #4294967295
 80037ec:	f7ff ff90 	bl	8003710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037f0:	4b05      	ldr	r3, [pc, #20]	; (8003808 <SysTick_Config+0x40>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037f6:	4b04      	ldr	r3, [pc, #16]	; (8003808 <SysTick_Config+0x40>)
 80037f8:	2207      	movs	r2, #7
 80037fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	e000e010 	.word	0xe000e010

0800380c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff ff49 	bl	80036ac <__NVIC_SetPriorityGrouping>
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003822:	b580      	push	{r7, lr}
 8003824:	b086      	sub	sp, #24
 8003826:	af00      	add	r7, sp, #0
 8003828:	4603      	mov	r3, r0
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	607a      	str	r2, [r7, #4]
 800382e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003830:	2300      	movs	r3, #0
 8003832:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003834:	f7ff ff5e 	bl	80036f4 <__NVIC_GetPriorityGrouping>
 8003838:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	68b9      	ldr	r1, [r7, #8]
 800383e:	6978      	ldr	r0, [r7, #20]
 8003840:	f7ff ff90 	bl	8003764 <NVIC_EncodePriority>
 8003844:	4602      	mov	r2, r0
 8003846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800384a:	4611      	mov	r1, r2
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff ff5f 	bl	8003710 <__NVIC_SetPriority>
}
 8003852:	bf00      	nop
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b082      	sub	sp, #8
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7ff ffb0 	bl	80037c8 <SysTick_Config>
 8003868:	4603      	mov	r3, r0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003874:	b480      	push	{r7}
 8003876:	b08b      	sub	sp, #44	; 0x2c
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800387e:	2300      	movs	r3, #0
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003882:	2300      	movs	r3, #0
 8003884:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003886:	e179      	b.n	8003b7c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003888:	2201      	movs	r2, #1
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	4013      	ands	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	f040 8168 	bne.w	8003b76 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	4a96      	ldr	r2, [pc, #600]	; (8003b04 <HAL_GPIO_Init+0x290>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d05e      	beq.n	800396e <HAL_GPIO_Init+0xfa>
 80038b0:	4a94      	ldr	r2, [pc, #592]	; (8003b04 <HAL_GPIO_Init+0x290>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d875      	bhi.n	80039a2 <HAL_GPIO_Init+0x12e>
 80038b6:	4a94      	ldr	r2, [pc, #592]	; (8003b08 <HAL_GPIO_Init+0x294>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d058      	beq.n	800396e <HAL_GPIO_Init+0xfa>
 80038bc:	4a92      	ldr	r2, [pc, #584]	; (8003b08 <HAL_GPIO_Init+0x294>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d86f      	bhi.n	80039a2 <HAL_GPIO_Init+0x12e>
 80038c2:	4a92      	ldr	r2, [pc, #584]	; (8003b0c <HAL_GPIO_Init+0x298>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d052      	beq.n	800396e <HAL_GPIO_Init+0xfa>
 80038c8:	4a90      	ldr	r2, [pc, #576]	; (8003b0c <HAL_GPIO_Init+0x298>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d869      	bhi.n	80039a2 <HAL_GPIO_Init+0x12e>
 80038ce:	4a90      	ldr	r2, [pc, #576]	; (8003b10 <HAL_GPIO_Init+0x29c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d04c      	beq.n	800396e <HAL_GPIO_Init+0xfa>
 80038d4:	4a8e      	ldr	r2, [pc, #568]	; (8003b10 <HAL_GPIO_Init+0x29c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d863      	bhi.n	80039a2 <HAL_GPIO_Init+0x12e>
 80038da:	4a8e      	ldr	r2, [pc, #568]	; (8003b14 <HAL_GPIO_Init+0x2a0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d046      	beq.n	800396e <HAL_GPIO_Init+0xfa>
 80038e0:	4a8c      	ldr	r2, [pc, #560]	; (8003b14 <HAL_GPIO_Init+0x2a0>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d85d      	bhi.n	80039a2 <HAL_GPIO_Init+0x12e>
 80038e6:	2b12      	cmp	r3, #18
 80038e8:	d82a      	bhi.n	8003940 <HAL_GPIO_Init+0xcc>
 80038ea:	2b12      	cmp	r3, #18
 80038ec:	d859      	bhi.n	80039a2 <HAL_GPIO_Init+0x12e>
 80038ee:	a201      	add	r2, pc, #4	; (adr r2, 80038f4 <HAL_GPIO_Init+0x80>)
 80038f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f4:	0800396f 	.word	0x0800396f
 80038f8:	08003949 	.word	0x08003949
 80038fc:	0800395b 	.word	0x0800395b
 8003900:	0800399d 	.word	0x0800399d
 8003904:	080039a3 	.word	0x080039a3
 8003908:	080039a3 	.word	0x080039a3
 800390c:	080039a3 	.word	0x080039a3
 8003910:	080039a3 	.word	0x080039a3
 8003914:	080039a3 	.word	0x080039a3
 8003918:	080039a3 	.word	0x080039a3
 800391c:	080039a3 	.word	0x080039a3
 8003920:	080039a3 	.word	0x080039a3
 8003924:	080039a3 	.word	0x080039a3
 8003928:	080039a3 	.word	0x080039a3
 800392c:	080039a3 	.word	0x080039a3
 8003930:	080039a3 	.word	0x080039a3
 8003934:	080039a3 	.word	0x080039a3
 8003938:	08003951 	.word	0x08003951
 800393c:	08003965 	.word	0x08003965
 8003940:	4a75      	ldr	r2, [pc, #468]	; (8003b18 <HAL_GPIO_Init+0x2a4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d013      	beq.n	800396e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003946:	e02c      	b.n	80039a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	623b      	str	r3, [r7, #32]
          break;
 800394e:	e029      	b.n	80039a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	3304      	adds	r3, #4
 8003956:	623b      	str	r3, [r7, #32]
          break;
 8003958:	e024      	b.n	80039a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	3308      	adds	r3, #8
 8003960:	623b      	str	r3, [r7, #32]
          break;
 8003962:	e01f      	b.n	80039a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	330c      	adds	r3, #12
 800396a:	623b      	str	r3, [r7, #32]
          break;
 800396c:	e01a      	b.n	80039a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d102      	bne.n	800397c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003976:	2304      	movs	r3, #4
 8003978:	623b      	str	r3, [r7, #32]
          break;
 800397a:	e013      	b.n	80039a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d105      	bne.n	8003990 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003984:	2308      	movs	r3, #8
 8003986:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69fa      	ldr	r2, [r7, #28]
 800398c:	611a      	str	r2, [r3, #16]
          break;
 800398e:	e009      	b.n	80039a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003990:	2308      	movs	r3, #8
 8003992:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69fa      	ldr	r2, [r7, #28]
 8003998:	615a      	str	r2, [r3, #20]
          break;
 800399a:	e003      	b.n	80039a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800399c:	2300      	movs	r3, #0
 800399e:	623b      	str	r3, [r7, #32]
          break;
 80039a0:	e000      	b.n	80039a4 <HAL_GPIO_Init+0x130>
          break;
 80039a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	2bff      	cmp	r3, #255	; 0xff
 80039a8:	d801      	bhi.n	80039ae <HAL_GPIO_Init+0x13a>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	e001      	b.n	80039b2 <HAL_GPIO_Init+0x13e>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3304      	adds	r3, #4
 80039b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	2bff      	cmp	r3, #255	; 0xff
 80039b8:	d802      	bhi.n	80039c0 <HAL_GPIO_Init+0x14c>
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	e002      	b.n	80039c6 <HAL_GPIO_Init+0x152>
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	3b08      	subs	r3, #8
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	210f      	movs	r1, #15
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	fa01 f303 	lsl.w	r3, r1, r3
 80039d4:	43db      	mvns	r3, r3
 80039d6:	401a      	ands	r2, r3
 80039d8:	6a39      	ldr	r1, [r7, #32]
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	fa01 f303 	lsl.w	r3, r1, r3
 80039e0:	431a      	orrs	r2, r3
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 80c1 	beq.w	8003b76 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80039f4:	4b49      	ldr	r3, [pc, #292]	; (8003b1c <HAL_GPIO_Init+0x2a8>)
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	4a48      	ldr	r2, [pc, #288]	; (8003b1c <HAL_GPIO_Init+0x2a8>)
 80039fa:	f043 0301 	orr.w	r3, r3, #1
 80039fe:	6193      	str	r3, [r2, #24]
 8003a00:	4b46      	ldr	r3, [pc, #280]	; (8003b1c <HAL_GPIO_Init+0x2a8>)
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	60bb      	str	r3, [r7, #8]
 8003a0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a0c:	4a44      	ldr	r2, [pc, #272]	; (8003b20 <HAL_GPIO_Init+0x2ac>)
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	089b      	lsrs	r3, r3, #2
 8003a12:	3302      	adds	r3, #2
 8003a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	f003 0303 	and.w	r3, r3, #3
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	220f      	movs	r2, #15
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a3c      	ldr	r2, [pc, #240]	; (8003b24 <HAL_GPIO_Init+0x2b0>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d01f      	beq.n	8003a78 <HAL_GPIO_Init+0x204>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a3b      	ldr	r2, [pc, #236]	; (8003b28 <HAL_GPIO_Init+0x2b4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d019      	beq.n	8003a74 <HAL_GPIO_Init+0x200>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a3a      	ldr	r2, [pc, #232]	; (8003b2c <HAL_GPIO_Init+0x2b8>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d013      	beq.n	8003a70 <HAL_GPIO_Init+0x1fc>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a39      	ldr	r2, [pc, #228]	; (8003b30 <HAL_GPIO_Init+0x2bc>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d00d      	beq.n	8003a6c <HAL_GPIO_Init+0x1f8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a38      	ldr	r2, [pc, #224]	; (8003b34 <HAL_GPIO_Init+0x2c0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d007      	beq.n	8003a68 <HAL_GPIO_Init+0x1f4>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a37      	ldr	r2, [pc, #220]	; (8003b38 <HAL_GPIO_Init+0x2c4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d101      	bne.n	8003a64 <HAL_GPIO_Init+0x1f0>
 8003a60:	2305      	movs	r3, #5
 8003a62:	e00a      	b.n	8003a7a <HAL_GPIO_Init+0x206>
 8003a64:	2306      	movs	r3, #6
 8003a66:	e008      	b.n	8003a7a <HAL_GPIO_Init+0x206>
 8003a68:	2304      	movs	r3, #4
 8003a6a:	e006      	b.n	8003a7a <HAL_GPIO_Init+0x206>
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e004      	b.n	8003a7a <HAL_GPIO_Init+0x206>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e002      	b.n	8003a7a <HAL_GPIO_Init+0x206>
 8003a74:	2301      	movs	r3, #1
 8003a76:	e000      	b.n	8003a7a <HAL_GPIO_Init+0x206>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a7c:	f002 0203 	and.w	r2, r2, #3
 8003a80:	0092      	lsls	r2, r2, #2
 8003a82:	4093      	lsls	r3, r2
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003a8a:	4925      	ldr	r1, [pc, #148]	; (8003b20 <HAL_GPIO_Init+0x2ac>)
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	089b      	lsrs	r3, r3, #2
 8003a90:	3302      	adds	r3, #2
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d006      	beq.n	8003ab2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003aa4:	4b25      	ldr	r3, [pc, #148]	; (8003b3c <HAL_GPIO_Init+0x2c8>)
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	4924      	ldr	r1, [pc, #144]	; (8003b3c <HAL_GPIO_Init+0x2c8>)
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	608b      	str	r3, [r1, #8]
 8003ab0:	e006      	b.n	8003ac0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ab2:	4b22      	ldr	r3, [pc, #136]	; (8003b3c <HAL_GPIO_Init+0x2c8>)
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	4920      	ldr	r1, [pc, #128]	; (8003b3c <HAL_GPIO_Init+0x2c8>)
 8003abc:	4013      	ands	r3, r2
 8003abe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d006      	beq.n	8003ada <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003acc:	4b1b      	ldr	r3, [pc, #108]	; (8003b3c <HAL_GPIO_Init+0x2c8>)
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	491a      	ldr	r1, [pc, #104]	; (8003b3c <HAL_GPIO_Init+0x2c8>)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60cb      	str	r3, [r1, #12]
 8003ad8:	e006      	b.n	8003ae8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ada:	4b18      	ldr	r3, [pc, #96]	; (8003b3c <HAL_GPIO_Init+0x2c8>)
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	4916      	ldr	r1, [pc, #88]	; (8003b3c <HAL_GPIO_Init+0x2c8>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d025      	beq.n	8003b40 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003af4:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <HAL_GPIO_Init+0x2c8>)
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	4910      	ldr	r1, [pc, #64]	; (8003b3c <HAL_GPIO_Init+0x2c8>)
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	604b      	str	r3, [r1, #4]
 8003b00:	e025      	b.n	8003b4e <HAL_GPIO_Init+0x2da>
 8003b02:	bf00      	nop
 8003b04:	10320000 	.word	0x10320000
 8003b08:	10310000 	.word	0x10310000
 8003b0c:	10220000 	.word	0x10220000
 8003b10:	10210000 	.word	0x10210000
 8003b14:	10120000 	.word	0x10120000
 8003b18:	10110000 	.word	0x10110000
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	40010000 	.word	0x40010000
 8003b24:	40010800 	.word	0x40010800
 8003b28:	40010c00 	.word	0x40010c00
 8003b2c:	40011000 	.word	0x40011000
 8003b30:	40011400 	.word	0x40011400
 8003b34:	40011800 	.word	0x40011800
 8003b38:	40011c00 	.word	0x40011c00
 8003b3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003b40:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <HAL_GPIO_Init+0x324>)
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	43db      	mvns	r3, r3
 8003b48:	4913      	ldr	r1, [pc, #76]	; (8003b98 <HAL_GPIO_Init+0x324>)
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d006      	beq.n	8003b68 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003b5a:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <HAL_GPIO_Init+0x324>)
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	490e      	ldr	r1, [pc, #56]	; (8003b98 <HAL_GPIO_Init+0x324>)
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	600b      	str	r3, [r1, #0]
 8003b66:	e006      	b.n	8003b76 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003b68:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <HAL_GPIO_Init+0x324>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	4909      	ldr	r1, [pc, #36]	; (8003b98 <HAL_GPIO_Init+0x324>)
 8003b72:	4013      	ands	r3, r2
 8003b74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	3301      	adds	r3, #1
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	fa22 f303 	lsr.w	r3, r2, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f47f ae7e 	bne.w	8003888 <HAL_GPIO_Init+0x14>
  }
}
 8003b8c:	bf00      	nop
 8003b8e:	bf00      	nop
 8003b90:	372c      	adds	r7, #44	; 0x2c
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr
 8003b98:	40010400 	.word	0x40010400

08003b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	807b      	strh	r3, [r7, #2]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bac:	787b      	ldrb	r3, [r7, #1]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bb2:	887a      	ldrh	r2, [r7, #2]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003bb8:	e003      	b.n	8003bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003bba:	887b      	ldrh	r3, [r7, #2]
 8003bbc:	041a      	lsls	r2, r3, #16
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	611a      	str	r2, [r3, #16]
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr

08003bcc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bde:	887a      	ldrh	r2, [r7, #2]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4013      	ands	r3, r2
 8003be4:	041a      	lsls	r2, r3, #16
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	43d9      	mvns	r1, r3
 8003bea:	887b      	ldrh	r3, [r7, #2]
 8003bec:	400b      	ands	r3, r1
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	611a      	str	r2, [r3, #16]
}
 8003bf4:	bf00      	nop
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc80      	pop	{r7}
 8003bfc:	4770      	bx	lr
	...

08003c00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e12b      	b.n	8003e6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fe f862 	bl	8001cf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2224      	movs	r2, #36	; 0x24
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0201 	bic.w	r2, r2, #1
 8003c42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c64:	f001 ff2a 	bl	8005abc <HAL_RCC_GetPCLK1Freq>
 8003c68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	4a81      	ldr	r2, [pc, #516]	; (8003e74 <HAL_I2C_Init+0x274>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d807      	bhi.n	8003c84 <HAL_I2C_Init+0x84>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4a80      	ldr	r2, [pc, #512]	; (8003e78 <HAL_I2C_Init+0x278>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	bf94      	ite	ls
 8003c7c:	2301      	movls	r3, #1
 8003c7e:	2300      	movhi	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	e006      	b.n	8003c92 <HAL_I2C_Init+0x92>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4a7d      	ldr	r2, [pc, #500]	; (8003e7c <HAL_I2C_Init+0x27c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	bf94      	ite	ls
 8003c8c:	2301      	movls	r3, #1
 8003c8e:	2300      	movhi	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e0e7      	b.n	8003e6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4a78      	ldr	r2, [pc, #480]	; (8003e80 <HAL_I2C_Init+0x280>)
 8003c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca2:	0c9b      	lsrs	r3, r3, #18
 8003ca4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	4a6a      	ldr	r2, [pc, #424]	; (8003e74 <HAL_I2C_Init+0x274>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d802      	bhi.n	8003cd4 <HAL_I2C_Init+0xd4>
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	e009      	b.n	8003ce8 <HAL_I2C_Init+0xe8>
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cda:	fb02 f303 	mul.w	r3, r2, r3
 8003cde:	4a69      	ldr	r2, [pc, #420]	; (8003e84 <HAL_I2C_Init+0x284>)
 8003ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce4:	099b      	lsrs	r3, r3, #6
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	430b      	orrs	r3, r1
 8003cee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cfa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	495c      	ldr	r1, [pc, #368]	; (8003e74 <HAL_I2C_Init+0x274>)
 8003d04:	428b      	cmp	r3, r1
 8003d06:	d819      	bhi.n	8003d3c <HAL_I2C_Init+0x13c>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	1e59      	subs	r1, r3, #1
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d16:	1c59      	adds	r1, r3, #1
 8003d18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d1c:	400b      	ands	r3, r1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <HAL_I2C_Init+0x138>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	1e59      	subs	r1, r3, #1
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d30:	3301      	adds	r3, #1
 8003d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d36:	e051      	b.n	8003ddc <HAL_I2C_Init+0x1dc>
 8003d38:	2304      	movs	r3, #4
 8003d3a:	e04f      	b.n	8003ddc <HAL_I2C_Init+0x1dc>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d111      	bne.n	8003d68 <HAL_I2C_Init+0x168>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	1e58      	subs	r0, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6859      	ldr	r1, [r3, #4]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	440b      	add	r3, r1
 8003d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d56:	3301      	adds	r3, #1
 8003d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	bf0c      	ite	eq
 8003d60:	2301      	moveq	r3, #1
 8003d62:	2300      	movne	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	e012      	b.n	8003d8e <HAL_I2C_Init+0x18e>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	1e58      	subs	r0, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6859      	ldr	r1, [r3, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	0099      	lsls	r1, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d7e:	3301      	adds	r3, #1
 8003d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	bf0c      	ite	eq
 8003d88:	2301      	moveq	r3, #1
 8003d8a:	2300      	movne	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_I2C_Init+0x196>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e022      	b.n	8003ddc <HAL_I2C_Init+0x1dc>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10e      	bne.n	8003dbc <HAL_I2C_Init+0x1bc>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1e58      	subs	r0, r3, #1
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6859      	ldr	r1, [r3, #4]
 8003da6:	460b      	mov	r3, r1
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	440b      	add	r3, r1
 8003dac:	fbb0 f3f3 	udiv	r3, r0, r3
 8003db0:	3301      	adds	r3, #1
 8003db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dba:	e00f      	b.n	8003ddc <HAL_I2C_Init+0x1dc>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	1e58      	subs	r0, r3, #1
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6859      	ldr	r1, [r3, #4]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	0099      	lsls	r1, r3, #2
 8003dcc:	440b      	add	r3, r1
 8003dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	6809      	ldr	r1, [r1, #0]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69da      	ldr	r2, [r3, #28]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6911      	ldr	r1, [r2, #16]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	68d2      	ldr	r2, [r2, #12]
 8003e16:	4311      	orrs	r1, r2
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6812      	ldr	r2, [r2, #0]
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695a      	ldr	r2, [r3, #20]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0201 	orr.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2220      	movs	r2, #32
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	000186a0 	.word	0x000186a0
 8003e78:	001e847f 	.word	0x001e847f
 8003e7c:	003d08ff 	.word	0x003d08ff
 8003e80:	431bde83 	.word	0x431bde83
 8003e84:	10624dd3 	.word	0x10624dd3

08003e88 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08c      	sub	sp, #48	; 0x30
 8003e8c:	af02      	add	r7, sp, #8
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	607a      	str	r2, [r7, #4]
 8003e92:	461a      	mov	r2, r3
 8003e94:	460b      	mov	r3, r1
 8003e96:	817b      	strh	r3, [r7, #10]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ea0:	f7ff f884 	bl	8002fac <HAL_GetTick>
 8003ea4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b20      	cmp	r3, #32
 8003eb0:	f040 824b 	bne.w	800434a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	2319      	movs	r3, #25
 8003eba:	2201      	movs	r2, #1
 8003ebc:	497f      	ldr	r1, [pc, #508]	; (80040bc <HAL_I2C_Master_Receive+0x234>)
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 fffc 	bl	8004ebc <I2C_WaitOnFlagUntilTimeout>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003eca:	2302      	movs	r3, #2
 8003ecc:	e23e      	b.n	800434c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_I2C_Master_Receive+0x54>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e237      	b.n	800434c <HAL_I2C_Master_Receive+0x4c4>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d007      	beq.n	8003f02 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f042 0201 	orr.w	r2, r2, #1
 8003f00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2222      	movs	r2, #34	; 0x22
 8003f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2210      	movs	r2, #16
 8003f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	893a      	ldrh	r2, [r7, #8]
 8003f32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4a5f      	ldr	r2, [pc, #380]	; (80040c0 <HAL_I2C_Master_Receive+0x238>)
 8003f42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f44:	8979      	ldrh	r1, [r7, #10]
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 fd6a 	bl	8004a24 <I2C_MasterRequestRead>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e1f8      	b.n	800434c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d113      	bne.n	8003f8a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f62:	2300      	movs	r3, #0
 8003f64:	61fb      	str	r3, [r7, #28]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	61fb      	str	r3, [r7, #28]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	61fb      	str	r3, [r7, #28]
 8003f76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	e1cc      	b.n	8004324 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d11e      	bne.n	8003fd0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fa2:	b672      	cpsid	i
}
 8003fa4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61bb      	str	r3, [r7, #24]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	61bb      	str	r3, [r7, #24]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	61bb      	str	r3, [r7, #24]
 8003fba:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003fcc:	b662      	cpsie	i
}
 8003fce:	e035      	b.n	800403c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d11e      	bne.n	8004016 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fe6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fe8:	b672      	cpsid	i
}
 8003fea:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fec:	2300      	movs	r3, #0
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	617b      	str	r3, [r7, #20]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	617b      	str	r3, [r7, #20]
 8004000:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004010:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004012:	b662      	cpsie	i
}
 8004014:	e012      	b.n	800403c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004024:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004026:	2300      	movs	r3, #0
 8004028:	613b      	str	r3, [r7, #16]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	613b      	str	r3, [r7, #16]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	613b      	str	r3, [r7, #16]
 800403a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800403c:	e172      	b.n	8004324 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004042:	2b03      	cmp	r3, #3
 8004044:	f200 811f 	bhi.w	8004286 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404c:	2b01      	cmp	r3, #1
 800404e:	d123      	bne.n	8004098 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004052:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f001 f8db 	bl	8005210 <I2C_WaitOnRXNEFlagUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e173      	b.n	800434c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	691a      	ldr	r2, [r3, #16]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	b2d2      	uxtb	r2, r2
 8004070:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004080:	3b01      	subs	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004096:	e145      	b.n	8004324 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409c:	2b02      	cmp	r3, #2
 800409e:	d152      	bne.n	8004146 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a6:	2200      	movs	r2, #0
 80040a8:	4906      	ldr	r1, [pc, #24]	; (80040c4 <HAL_I2C_Master_Receive+0x23c>)
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 ff06 	bl	8004ebc <I2C_WaitOnFlagUntilTimeout>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d008      	beq.n	80040c8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e148      	b.n	800434c <HAL_I2C_Master_Receive+0x4c4>
 80040ba:	bf00      	nop
 80040bc:	00100002 	.word	0x00100002
 80040c0:	ffff0000 	.word	0xffff0000
 80040c4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80040c8:	b672      	cpsid	i
}
 80040ca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691a      	ldr	r2, [r3, #16]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004104:	b29b      	uxth	r3, r3
 8004106:	3b01      	subs	r3, #1
 8004108:	b29a      	uxth	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800410e:	b662      	cpsie	i
}
 8004110:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412e:	3b01      	subs	r3, #1
 8004130:	b29a      	uxth	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004144:	e0ee      	b.n	8004324 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414c:	2200      	movs	r2, #0
 800414e:	4981      	ldr	r1, [pc, #516]	; (8004354 <HAL_I2C_Master_Receive+0x4cc>)
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 feb3 	bl	8004ebc <I2C_WaitOnFlagUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e0f5      	b.n	800434c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800416e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004170:	b672      	cpsid	i
}
 8004172:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419c:	b29b      	uxth	r3, r3
 800419e:	3b01      	subs	r3, #1
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80041a6:	4b6c      	ldr	r3, [pc, #432]	; (8004358 <HAL_I2C_Master_Receive+0x4d0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	08db      	lsrs	r3, r3, #3
 80041ac:	4a6b      	ldr	r2, [pc, #428]	; (800435c <HAL_I2C_Master_Receive+0x4d4>)
 80041ae:	fba2 2303 	umull	r2, r3, r2, r3
 80041b2:	0a1a      	lsrs	r2, r3, #8
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	00da      	lsls	r2, r3, #3
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80041c6:	6a3b      	ldr	r3, [r7, #32]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d118      	bne.n	80041fe <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	f043 0220 	orr.w	r2, r3, #32
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80041ee:	b662      	cpsie	i
}
 80041f0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e0a6      	b.n	800434c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b04      	cmp	r3, #4
 800420a:	d1d9      	bne.n	80041c0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800421a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	691a      	ldr	r2, [r3, #16]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004244:	b29b      	uxth	r3, r3
 8004246:	3b01      	subs	r3, #1
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800424e:	b662      	cpsie	i
}
 8004250:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	691a      	ldr	r2, [r3, #16]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427a:	b29b      	uxth	r3, r3
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004284:	e04e      	b.n	8004324 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004288:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 ffc0 	bl	8005210 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e058      	b.n	800434c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d124      	bne.n	8004324 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042de:	2b03      	cmp	r3, #3
 80042e0:	d107      	bne.n	80042f2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	691a      	ldr	r2, [r3, #16]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	b2d2      	uxtb	r2, r2
 80042fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430e:	3b01      	subs	r3, #1
 8004310:	b29a      	uxth	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431a:	b29b      	uxth	r3, r3
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004328:	2b00      	cmp	r3, #0
 800432a:	f47f ae88 	bne.w	800403e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	e000      	b.n	800434c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800434a:	2302      	movs	r3, #2
  }
}
 800434c:	4618      	mov	r0, r3
 800434e:	3728      	adds	r7, #40	; 0x28
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	00010004 	.word	0x00010004
 8004358:	20000000 	.word	0x20000000
 800435c:	14f8b589 	.word	0x14f8b589

08004360 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af02      	add	r7, sp, #8
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	4608      	mov	r0, r1
 800436a:	4611      	mov	r1, r2
 800436c:	461a      	mov	r2, r3
 800436e:	4603      	mov	r3, r0
 8004370:	817b      	strh	r3, [r7, #10]
 8004372:	460b      	mov	r3, r1
 8004374:	813b      	strh	r3, [r7, #8]
 8004376:	4613      	mov	r3, r2
 8004378:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800437a:	f7fe fe17 	bl	8002fac <HAL_GetTick>
 800437e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b20      	cmp	r3, #32
 800438a:	f040 80d9 	bne.w	8004540 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	2319      	movs	r3, #25
 8004394:	2201      	movs	r2, #1
 8004396:	496d      	ldr	r1, [pc, #436]	; (800454c <HAL_I2C_Mem_Write+0x1ec>)
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 fd8f 	bl	8004ebc <I2C_WaitOnFlagUntilTimeout>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80043a4:	2302      	movs	r3, #2
 80043a6:	e0cc      	b.n	8004542 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_I2C_Mem_Write+0x56>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e0c5      	b.n	8004542 <HAL_I2C_Mem_Write+0x1e2>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d007      	beq.n	80043dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0201 	orr.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2221      	movs	r2, #33	; 0x21
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2240      	movs	r2, #64	; 0x40
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6a3a      	ldr	r2, [r7, #32]
 8004406:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800440c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4a4d      	ldr	r2, [pc, #308]	; (8004550 <HAL_I2C_Mem_Write+0x1f0>)
 800441c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800441e:	88f8      	ldrh	r0, [r7, #6]
 8004420:	893a      	ldrh	r2, [r7, #8]
 8004422:	8979      	ldrh	r1, [r7, #10]
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	9301      	str	r3, [sp, #4]
 8004428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	4603      	mov	r3, r0
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 fbc6 	bl	8004bc0 <I2C_RequestMemoryWrite>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d052      	beq.n	80044e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e081      	b.n	8004542 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 fe54 	bl	80050f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00d      	beq.n	800446a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	2b04      	cmp	r3, #4
 8004454:	d107      	bne.n	8004466 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004464:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e06b      	b.n	8004542 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	781a      	ldrb	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004490:	b29b      	uxth	r3, r3
 8004492:	3b01      	subs	r3, #1
 8004494:	b29a      	uxth	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b04      	cmp	r3, #4
 80044a6:	d11b      	bne.n	80044e0 <HAL_I2C_Mem_Write+0x180>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d017      	beq.n	80044e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	781a      	ldrb	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	1c5a      	adds	r2, r3, #1
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ca:	3b01      	subs	r3, #1
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1aa      	bne.n	800443e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 fe47 	bl	8005180 <I2C_WaitOnBTFFlagUntilTimeout>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00d      	beq.n	8004514 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d107      	bne.n	8004510 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800450e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e016      	b.n	8004542 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004522:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2220      	movs	r2, #32
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	e000      	b.n	8004542 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004540:	2302      	movs	r3, #2
  }
}
 8004542:	4618      	mov	r0, r3
 8004544:	3718      	adds	r7, #24
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	00100002 	.word	0x00100002
 8004550:	ffff0000 	.word	0xffff0000

08004554 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b08c      	sub	sp, #48	; 0x30
 8004558:	af02      	add	r7, sp, #8
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	4608      	mov	r0, r1
 800455e:	4611      	mov	r1, r2
 8004560:	461a      	mov	r2, r3
 8004562:	4603      	mov	r3, r0
 8004564:	817b      	strh	r3, [r7, #10]
 8004566:	460b      	mov	r3, r1
 8004568:	813b      	strh	r3, [r7, #8]
 800456a:	4613      	mov	r3, r2
 800456c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004572:	f7fe fd1b 	bl	8002fac <HAL_GetTick>
 8004576:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b20      	cmp	r3, #32
 8004582:	f040 8244 	bne.w	8004a0e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	2319      	movs	r3, #25
 800458c:	2201      	movs	r2, #1
 800458e:	4982      	ldr	r1, [pc, #520]	; (8004798 <HAL_I2C_Mem_Read+0x244>)
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 fc93 	bl	8004ebc <I2C_WaitOnFlagUntilTimeout>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800459c:	2302      	movs	r3, #2
 800459e:	e237      	b.n	8004a10 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_I2C_Mem_Read+0x5a>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e230      	b.n	8004a10 <HAL_I2C_Mem_Read+0x4bc>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d007      	beq.n	80045d4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0201 	orr.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2222      	movs	r2, #34	; 0x22
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2240      	movs	r2, #64	; 0x40
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004604:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4a62      	ldr	r2, [pc, #392]	; (800479c <HAL_I2C_Mem_Read+0x248>)
 8004614:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004616:	88f8      	ldrh	r0, [r7, #6]
 8004618:	893a      	ldrh	r2, [r7, #8]
 800461a:	8979      	ldrh	r1, [r7, #10]
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	9301      	str	r3, [sp, #4]
 8004620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	4603      	mov	r3, r0
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 fb60 	bl	8004cec <I2C_RequestMemoryRead>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e1ec      	b.n	8004a10 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463a:	2b00      	cmp	r3, #0
 800463c:	d113      	bne.n	8004666 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800463e:	2300      	movs	r3, #0
 8004640:	61fb      	str	r3, [r7, #28]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	61fb      	str	r3, [r7, #28]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	61fb      	str	r3, [r7, #28]
 8004652:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	e1c0      	b.n	80049e8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466a:	2b01      	cmp	r3, #1
 800466c:	d11e      	bne.n	80046ac <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800467c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800467e:	b672      	cpsid	i
}
 8004680:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004682:	2300      	movs	r3, #0
 8004684:	61bb      	str	r3, [r7, #24]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	61bb      	str	r3, [r7, #24]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	61bb      	str	r3, [r7, #24]
 8004696:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80046a8:	b662      	cpsie	i
}
 80046aa:	e035      	b.n	8004718 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d11e      	bne.n	80046f2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80046c4:	b672      	cpsid	i
}
 80046c6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046c8:	2300      	movs	r3, #0
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80046ee:	b662      	cpsie	i
}
 80046f0:	e012      	b.n	8004718 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004700:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004702:	2300      	movs	r3, #0
 8004704:	613b      	str	r3, [r7, #16]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	613b      	str	r3, [r7, #16]
 8004716:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004718:	e166      	b.n	80049e8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800471e:	2b03      	cmp	r3, #3
 8004720:	f200 811f 	bhi.w	8004962 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004728:	2b01      	cmp	r3, #1
 800472a:	d123      	bne.n	8004774 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800472c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800472e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 fd6d 	bl	8005210 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e167      	b.n	8004a10 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	691a      	ldr	r2, [r3, #16]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800475c:	3b01      	subs	r3, #1
 800475e:	b29a      	uxth	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004768:	b29b      	uxth	r3, r3
 800476a:	3b01      	subs	r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004772:	e139      	b.n	80049e8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004778:	2b02      	cmp	r3, #2
 800477a:	d152      	bne.n	8004822 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004782:	2200      	movs	r2, #0
 8004784:	4906      	ldr	r1, [pc, #24]	; (80047a0 <HAL_I2C_Mem_Read+0x24c>)
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 fb98 	bl	8004ebc <I2C_WaitOnFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d008      	beq.n	80047a4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e13c      	b.n	8004a10 <HAL_I2C_Mem_Read+0x4bc>
 8004796:	bf00      	nop
 8004798:	00100002 	.word	0x00100002
 800479c:	ffff0000 	.word	0xffff0000
 80047a0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80047a4:	b672      	cpsid	i
}
 80047a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691a      	ldr	r2, [r3, #16]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d4:	3b01      	subs	r3, #1
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80047ea:	b662      	cpsie	i
}
 80047ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	b2d2      	uxtb	r2, r2
 80047fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800480a:	3b01      	subs	r3, #1
 800480c:	b29a      	uxth	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004816:	b29b      	uxth	r3, r3
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004820:	e0e2      	b.n	80049e8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004828:	2200      	movs	r2, #0
 800482a:	497b      	ldr	r1, [pc, #492]	; (8004a18 <HAL_I2C_Mem_Read+0x4c4>)
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 fb45 	bl	8004ebc <I2C_WaitOnFlagUntilTimeout>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e0e9      	b.n	8004a10 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800484a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800484c:	b672      	cpsid	i
}
 800484e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691a      	ldr	r2, [r3, #16]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004878:	b29b      	uxth	r3, r3
 800487a:	3b01      	subs	r3, #1
 800487c:	b29a      	uxth	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004882:	4b66      	ldr	r3, [pc, #408]	; (8004a1c <HAL_I2C_Mem_Read+0x4c8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	08db      	lsrs	r3, r3, #3
 8004888:	4a65      	ldr	r2, [pc, #404]	; (8004a20 <HAL_I2C_Mem_Read+0x4cc>)
 800488a:	fba2 2303 	umull	r2, r3, r2, r3
 800488e:	0a1a      	lsrs	r2, r3, #8
 8004890:	4613      	mov	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	00da      	lsls	r2, r3, #3
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	3b01      	subs	r3, #1
 80048a0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d118      	bne.n	80048da <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	f043 0220 	orr.w	r2, r3, #32
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80048ca:	b662      	cpsie	i
}
 80048cc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e09a      	b.n	8004a10 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	d1d9      	bne.n	800489c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004920:	b29b      	uxth	r3, r3
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800492a:	b662      	cpsie	i
}
 800492c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	691a      	ldr	r2, [r3, #16]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	b2d2      	uxtb	r2, r2
 800493a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800494a:	3b01      	subs	r3, #1
 800494c:	b29a      	uxth	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004956:	b29b      	uxth	r3, r3
 8004958:	3b01      	subs	r3, #1
 800495a:	b29a      	uxth	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004960:	e042      	b.n	80049e8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004964:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 fc52 	bl	8005210 <I2C_WaitOnRXNEFlagUntilTimeout>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e04c      	b.n	8004a10 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	b2d2      	uxtb	r2, r2
 8004982:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	1c5a      	adds	r2, r3, #1
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004992:	3b01      	subs	r3, #1
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499e:	b29b      	uxth	r3, r3
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	f003 0304 	and.w	r3, r3, #4
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	d118      	bne.n	80049e8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	691a      	ldr	r2, [r3, #16]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d2:	3b01      	subs	r3, #1
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049de:	b29b      	uxth	r3, r3
 80049e0:	3b01      	subs	r3, #1
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f47f ae94 	bne.w	800471a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	e000      	b.n	8004a10 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004a0e:	2302      	movs	r3, #2
  }
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3728      	adds	r7, #40	; 0x28
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	00010004 	.word	0x00010004
 8004a1c:	20000000 	.word	0x20000000
 8004a20:	14f8b589 	.word	0x14f8b589

08004a24 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b088      	sub	sp, #32
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	607a      	str	r2, [r7, #4]
 8004a2e:	603b      	str	r3, [r7, #0]
 8004a30:	460b      	mov	r3, r1
 8004a32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a48:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d006      	beq.n	8004a5e <I2C_MasterRequestRead+0x3a>
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d003      	beq.n	8004a5e <I2C_MasterRequestRead+0x3a>
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a5c:	d108      	bne.n	8004a70 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	e00b      	b.n	8004a88 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a74:	2b11      	cmp	r3, #17
 8004a76:	d107      	bne.n	8004a88 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 fa11 	bl	8004ebc <I2C_WaitOnFlagUntilTimeout>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00d      	beq.n	8004abc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aae:	d103      	bne.n	8004ab8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ab6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e079      	b.n	8004bb0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ac4:	d108      	bne.n	8004ad8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ac6:	897b      	ldrh	r3, [r7, #10]
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	f043 0301 	orr.w	r3, r3, #1
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	611a      	str	r2, [r3, #16]
 8004ad6:	e05f      	b.n	8004b98 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ad8:	897b      	ldrh	r3, [r7, #10]
 8004ada:	11db      	asrs	r3, r3, #7
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	f003 0306 	and.w	r3, r3, #6
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	f063 030f 	orn	r3, r3, #15
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	4930      	ldr	r1, [pc, #192]	; (8004bb8 <I2C_MasterRequestRead+0x194>)
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f000 fa5a 	bl	8004fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e054      	b.n	8004bb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b06:	897b      	ldrh	r3, [r7, #10]
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	4929      	ldr	r1, [pc, #164]	; (8004bbc <I2C_MasterRequestRead+0x198>)
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 fa4a 	bl	8004fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e044      	b.n	8004bb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b26:	2300      	movs	r3, #0
 8004b28:	613b      	str	r3, [r7, #16]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	613b      	str	r3, [r7, #16]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	613b      	str	r3, [r7, #16]
 8004b3a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b4a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 f9af 	bl	8004ebc <I2C_WaitOnFlagUntilTimeout>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00d      	beq.n	8004b80 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b72:	d103      	bne.n	8004b7c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b7a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e017      	b.n	8004bb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004b80:	897b      	ldrh	r3, [r7, #10]
 8004b82:	11db      	asrs	r3, r3, #7
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	f003 0306 	and.w	r3, r3, #6
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	f063 030e 	orn	r3, r3, #14
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	4907      	ldr	r1, [pc, #28]	; (8004bbc <I2C_MasterRequestRead+0x198>)
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 fa06 	bl	8004fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e000      	b.n	8004bb0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	00010008 	.word	0x00010008
 8004bbc:	00010002 	.word	0x00010002

08004bc0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b088      	sub	sp, #32
 8004bc4:	af02      	add	r7, sp, #8
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	4608      	mov	r0, r1
 8004bca:	4611      	mov	r1, r2
 8004bcc:	461a      	mov	r2, r3
 8004bce:	4603      	mov	r3, r0
 8004bd0:	817b      	strh	r3, [r7, #10]
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	813b      	strh	r3, [r7, #8]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004be8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 f960 	bl	8004ebc <I2C_WaitOnFlagUntilTimeout>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00d      	beq.n	8004c1e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c10:	d103      	bne.n	8004c1a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e05f      	b.n	8004cde <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c1e:	897b      	ldrh	r3, [r7, #10]
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	461a      	mov	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	6a3a      	ldr	r2, [r7, #32]
 8004c32:	492d      	ldr	r1, [pc, #180]	; (8004ce8 <I2C_RequestMemoryWrite+0x128>)
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 f9bb 	bl	8004fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e04c      	b.n	8004cde <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c44:	2300      	movs	r3, #0
 8004c46:	617b      	str	r3, [r7, #20]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	617b      	str	r3, [r7, #20]
 8004c58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c5c:	6a39      	ldr	r1, [r7, #32]
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 fa46 	bl	80050f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00d      	beq.n	8004c86 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d107      	bne.n	8004c82 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e02b      	b.n	8004cde <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c86:	88fb      	ldrh	r3, [r7, #6]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d105      	bne.n	8004c98 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c8c:	893b      	ldrh	r3, [r7, #8]
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	611a      	str	r2, [r3, #16]
 8004c96:	e021      	b.n	8004cdc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c98:	893b      	ldrh	r3, [r7, #8]
 8004c9a:	0a1b      	lsrs	r3, r3, #8
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca8:	6a39      	ldr	r1, [r7, #32]
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 fa20 	bl	80050f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00d      	beq.n	8004cd2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d107      	bne.n	8004cce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ccc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e005      	b.n	8004cde <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cd2:	893b      	ldrh	r3, [r7, #8]
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	00010002 	.word	0x00010002

08004cec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af02      	add	r7, sp, #8
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	4608      	mov	r0, r1
 8004cf6:	4611      	mov	r1, r2
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	817b      	strh	r3, [r7, #10]
 8004cfe:	460b      	mov	r3, r1
 8004d00:	813b      	strh	r3, [r7, #8]
 8004d02:	4613      	mov	r3, r2
 8004d04:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d14:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f000 f8c2 	bl	8004ebc <I2C_WaitOnFlagUntilTimeout>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00d      	beq.n	8004d5a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d4c:	d103      	bne.n	8004d56 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e0aa      	b.n	8004eb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d5a:	897b      	ldrh	r3, [r7, #10]
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	461a      	mov	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	6a3a      	ldr	r2, [r7, #32]
 8004d6e:	4952      	ldr	r1, [pc, #328]	; (8004eb8 <I2C_RequestMemoryRead+0x1cc>)
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 f91d 	bl	8004fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e097      	b.n	8004eb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d80:	2300      	movs	r3, #0
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d98:	6a39      	ldr	r1, [r7, #32]
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 f9a8 	bl	80050f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00d      	beq.n	8004dc2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d107      	bne.n	8004dbe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e076      	b.n	8004eb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004dc2:	88fb      	ldrh	r3, [r7, #6]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d105      	bne.n	8004dd4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dc8:	893b      	ldrh	r3, [r7, #8]
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	611a      	str	r2, [r3, #16]
 8004dd2:	e021      	b.n	8004e18 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004dd4:	893b      	ldrh	r3, [r7, #8]
 8004dd6:	0a1b      	lsrs	r3, r3, #8
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de4:	6a39      	ldr	r1, [r7, #32]
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 f982 	bl	80050f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00d      	beq.n	8004e0e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	2b04      	cmp	r3, #4
 8004df8:	d107      	bne.n	8004e0a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e050      	b.n	8004eb0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e0e:	893b      	ldrh	r3, [r7, #8]
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e1a:	6a39      	ldr	r1, [r7, #32]
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 f967 	bl	80050f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00d      	beq.n	8004e44 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d107      	bne.n	8004e40 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e035      	b.n	8004eb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e52:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 f82b 	bl	8004ebc <I2C_WaitOnFlagUntilTimeout>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00d      	beq.n	8004e88 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e7a:	d103      	bne.n	8004e84 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e013      	b.n	8004eb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e88:	897b      	ldrh	r3, [r7, #10]
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	f043 0301 	orr.w	r3, r3, #1
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	6a3a      	ldr	r2, [r7, #32]
 8004e9c:	4906      	ldr	r1, [pc, #24]	; (8004eb8 <I2C_RequestMemoryRead+0x1cc>)
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 f886 	bl	8004fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e000      	b.n	8004eb0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3718      	adds	r7, #24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	00010002 	.word	0x00010002

08004ebc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	603b      	str	r3, [r7, #0]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ecc:	e048      	b.n	8004f60 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed4:	d044      	beq.n	8004f60 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed6:	f7fe f869 	bl	8002fac <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	683a      	ldr	r2, [r7, #0]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d302      	bcc.n	8004eec <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d139      	bne.n	8004f60 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	0c1b      	lsrs	r3, r3, #16
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d10d      	bne.n	8004f12 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	43da      	mvns	r2, r3
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	4013      	ands	r3, r2
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	bf0c      	ite	eq
 8004f08:	2301      	moveq	r3, #1
 8004f0a:	2300      	movne	r3, #0
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	461a      	mov	r2, r3
 8004f10:	e00c      	b.n	8004f2c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	43da      	mvns	r2, r3
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	bf0c      	ite	eq
 8004f24:	2301      	moveq	r3, #1
 8004f26:	2300      	movne	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	79fb      	ldrb	r3, [r7, #7]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d116      	bne.n	8004f60 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4c:	f043 0220 	orr.w	r2, r3, #32
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e023      	b.n	8004fa8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	0c1b      	lsrs	r3, r3, #16
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d10d      	bne.n	8004f86 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	43da      	mvns	r2, r3
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	4013      	ands	r3, r2
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	bf0c      	ite	eq
 8004f7c:	2301      	moveq	r3, #1
 8004f7e:	2300      	movne	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	461a      	mov	r2, r3
 8004f84:	e00c      	b.n	8004fa0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	43da      	mvns	r2, r3
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	4013      	ands	r3, r2
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	bf0c      	ite	eq
 8004f98:	2301      	moveq	r3, #1
 8004f9a:	2300      	movne	r3, #0
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	79fb      	ldrb	r3, [r7, #7]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d093      	beq.n	8004ece <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
 8004fbc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fbe:	e071      	b.n	80050a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fce:	d123      	bne.n	8005018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fde:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fe8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005004:	f043 0204 	orr.w	r2, r3, #4
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e067      	b.n	80050e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501e:	d041      	beq.n	80050a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005020:	f7fd ffc4 	bl	8002fac <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	429a      	cmp	r2, r3
 800502e:	d302      	bcc.n	8005036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d136      	bne.n	80050a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	0c1b      	lsrs	r3, r3, #16
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b01      	cmp	r3, #1
 800503e:	d10c      	bne.n	800505a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	43da      	mvns	r2, r3
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	4013      	ands	r3, r2
 800504c:	b29b      	uxth	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	bf14      	ite	ne
 8005052:	2301      	movne	r3, #1
 8005054:	2300      	moveq	r3, #0
 8005056:	b2db      	uxtb	r3, r3
 8005058:	e00b      	b.n	8005072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	43da      	mvns	r2, r3
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	4013      	ands	r3, r2
 8005066:	b29b      	uxth	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	bf14      	ite	ne
 800506c:	2301      	movne	r3, #1
 800506e:	2300      	moveq	r3, #0
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d016      	beq.n	80050a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2220      	movs	r2, #32
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005090:	f043 0220 	orr.w	r2, r3, #32
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e021      	b.n	80050e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	0c1b      	lsrs	r3, r3, #16
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d10c      	bne.n	80050c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	43da      	mvns	r2, r3
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	4013      	ands	r3, r2
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	bf14      	ite	ne
 80050c0:	2301      	movne	r3, #1
 80050c2:	2300      	moveq	r3, #0
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	e00b      	b.n	80050e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	43da      	mvns	r2, r3
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	4013      	ands	r3, r2
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	bf14      	ite	ne
 80050da:	2301      	movne	r3, #1
 80050dc:	2300      	moveq	r3, #0
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f47f af6d 	bne.w	8004fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050fc:	e034      	b.n	8005168 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 f8e3 	bl	80052ca <I2C_IsAcknowledgeFailed>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e034      	b.n	8005178 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005114:	d028      	beq.n	8005168 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005116:	f7fd ff49 	bl	8002fac <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	429a      	cmp	r2, r3
 8005124:	d302      	bcc.n	800512c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d11d      	bne.n	8005168 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005136:	2b80      	cmp	r3, #128	; 0x80
 8005138:	d016      	beq.n	8005168 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2220      	movs	r2, #32
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005154:	f043 0220 	orr.w	r2, r3, #32
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e007      	b.n	8005178 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005172:	2b80      	cmp	r3, #128	; 0x80
 8005174:	d1c3      	bne.n	80050fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800518c:	e034      	b.n	80051f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 f89b 	bl	80052ca <I2C_IsAcknowledgeFailed>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e034      	b.n	8005208 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a4:	d028      	beq.n	80051f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a6:	f7fd ff01 	bl	8002fac <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d302      	bcc.n	80051bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d11d      	bne.n	80051f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	f003 0304 	and.w	r3, r3, #4
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d016      	beq.n	80051f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e4:	f043 0220 	orr.w	r2, r3, #32
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e007      	b.n	8005208 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	f003 0304 	and.w	r3, r3, #4
 8005202:	2b04      	cmp	r3, #4
 8005204:	d1c3      	bne.n	800518e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800521c:	e049      	b.n	80052b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	f003 0310 	and.w	r3, r3, #16
 8005228:	2b10      	cmp	r3, #16
 800522a:	d119      	bne.n	8005260 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f06f 0210 	mvn.w	r2, #16
 8005234:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2220      	movs	r2, #32
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e030      	b.n	80052c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005260:	f7fd fea4 	bl	8002fac <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	429a      	cmp	r2, r3
 800526e:	d302      	bcc.n	8005276 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d11d      	bne.n	80052b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005280:	2b40      	cmp	r3, #64	; 0x40
 8005282:	d016      	beq.n	80052b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2220      	movs	r2, #32
 800528e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	f043 0220 	orr.w	r2, r3, #32
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e007      	b.n	80052c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052bc:	2b40      	cmp	r3, #64	; 0x40
 80052be:	d1ae      	bne.n	800521e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b083      	sub	sp, #12
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e0:	d11b      	bne.n	800531a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052ea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2220      	movs	r2, #32
 80052f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	f043 0204 	orr.w	r2, r3, #4
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e000      	b.n	800531c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	bc80      	pop	{r7}
 8005324:	4770      	bx	lr
	...

08005328 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e272      	b.n	8005820 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 8087 	beq.w	8005456 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005348:	4b92      	ldr	r3, [pc, #584]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f003 030c 	and.w	r3, r3, #12
 8005350:	2b04      	cmp	r3, #4
 8005352:	d00c      	beq.n	800536e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005354:	4b8f      	ldr	r3, [pc, #572]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f003 030c 	and.w	r3, r3, #12
 800535c:	2b08      	cmp	r3, #8
 800535e:	d112      	bne.n	8005386 <HAL_RCC_OscConfig+0x5e>
 8005360:	4b8c      	ldr	r3, [pc, #560]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800536c:	d10b      	bne.n	8005386 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800536e:	4b89      	ldr	r3, [pc, #548]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d06c      	beq.n	8005454 <HAL_RCC_OscConfig+0x12c>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d168      	bne.n	8005454 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e24c      	b.n	8005820 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800538e:	d106      	bne.n	800539e <HAL_RCC_OscConfig+0x76>
 8005390:	4b80      	ldr	r3, [pc, #512]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a7f      	ldr	r2, [pc, #508]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 8005396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	e02e      	b.n	80053fc <HAL_RCC_OscConfig+0xd4>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10c      	bne.n	80053c0 <HAL_RCC_OscConfig+0x98>
 80053a6:	4b7b      	ldr	r3, [pc, #492]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a7a      	ldr	r2, [pc, #488]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 80053ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053b0:	6013      	str	r3, [r2, #0]
 80053b2:	4b78      	ldr	r3, [pc, #480]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a77      	ldr	r2, [pc, #476]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 80053b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053bc:	6013      	str	r3, [r2, #0]
 80053be:	e01d      	b.n	80053fc <HAL_RCC_OscConfig+0xd4>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053c8:	d10c      	bne.n	80053e4 <HAL_RCC_OscConfig+0xbc>
 80053ca:	4b72      	ldr	r3, [pc, #456]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a71      	ldr	r2, [pc, #452]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 80053d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053d4:	6013      	str	r3, [r2, #0]
 80053d6:	4b6f      	ldr	r3, [pc, #444]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a6e      	ldr	r2, [pc, #440]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 80053dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	e00b      	b.n	80053fc <HAL_RCC_OscConfig+0xd4>
 80053e4:	4b6b      	ldr	r3, [pc, #428]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a6a      	ldr	r2, [pc, #424]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 80053ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ee:	6013      	str	r3, [r2, #0]
 80053f0:	4b68      	ldr	r3, [pc, #416]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a67      	ldr	r2, [pc, #412]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 80053f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d013      	beq.n	800542c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005404:	f7fd fdd2 	bl	8002fac <HAL_GetTick>
 8005408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800540c:	f7fd fdce 	bl	8002fac <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b64      	cmp	r3, #100	; 0x64
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e200      	b.n	8005820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800541e:	4b5d      	ldr	r3, [pc, #372]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0f0      	beq.n	800540c <HAL_RCC_OscConfig+0xe4>
 800542a:	e014      	b.n	8005456 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800542c:	f7fd fdbe 	bl	8002fac <HAL_GetTick>
 8005430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005434:	f7fd fdba 	bl	8002fac <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b64      	cmp	r3, #100	; 0x64
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e1ec      	b.n	8005820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005446:	4b53      	ldr	r3, [pc, #332]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1f0      	bne.n	8005434 <HAL_RCC_OscConfig+0x10c>
 8005452:	e000      	b.n	8005456 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d063      	beq.n	800552a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005462:	4b4c      	ldr	r3, [pc, #304]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f003 030c 	and.w	r3, r3, #12
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00b      	beq.n	8005486 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800546e:	4b49      	ldr	r3, [pc, #292]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f003 030c 	and.w	r3, r3, #12
 8005476:	2b08      	cmp	r3, #8
 8005478:	d11c      	bne.n	80054b4 <HAL_RCC_OscConfig+0x18c>
 800547a:	4b46      	ldr	r3, [pc, #280]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d116      	bne.n	80054b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005486:	4b43      	ldr	r3, [pc, #268]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d005      	beq.n	800549e <HAL_RCC_OscConfig+0x176>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d001      	beq.n	800549e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e1c0      	b.n	8005820 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800549e:	4b3d      	ldr	r3, [pc, #244]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	4939      	ldr	r1, [pc, #228]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054b2:	e03a      	b.n	800552a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d020      	beq.n	80054fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054bc:	4b36      	ldr	r3, [pc, #216]	; (8005598 <HAL_RCC_OscConfig+0x270>)
 80054be:	2201      	movs	r2, #1
 80054c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c2:	f7fd fd73 	bl	8002fac <HAL_GetTick>
 80054c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054c8:	e008      	b.n	80054dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054ca:	f7fd fd6f 	bl	8002fac <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e1a1      	b.n	8005820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054dc:	4b2d      	ldr	r3, [pc, #180]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0f0      	beq.n	80054ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054e8:	4b2a      	ldr	r3, [pc, #168]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	00db      	lsls	r3, r3, #3
 80054f6:	4927      	ldr	r1, [pc, #156]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	600b      	str	r3, [r1, #0]
 80054fc:	e015      	b.n	800552a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054fe:	4b26      	ldr	r3, [pc, #152]	; (8005598 <HAL_RCC_OscConfig+0x270>)
 8005500:	2200      	movs	r2, #0
 8005502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005504:	f7fd fd52 	bl	8002fac <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800550c:	f7fd fd4e 	bl	8002fac <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e180      	b.n	8005820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800551e:	4b1d      	ldr	r3, [pc, #116]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1f0      	bne.n	800550c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0308 	and.w	r3, r3, #8
 8005532:	2b00      	cmp	r3, #0
 8005534:	d03a      	beq.n	80055ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d019      	beq.n	8005572 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800553e:	4b17      	ldr	r3, [pc, #92]	; (800559c <HAL_RCC_OscConfig+0x274>)
 8005540:	2201      	movs	r2, #1
 8005542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005544:	f7fd fd32 	bl	8002fac <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800554c:	f7fd fd2e 	bl	8002fac <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e160      	b.n	8005820 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800555e:	4b0d      	ldr	r3, [pc, #52]	; (8005594 <HAL_RCC_OscConfig+0x26c>)
 8005560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0f0      	beq.n	800554c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800556a:	2001      	movs	r0, #1
 800556c:	f000 face 	bl	8005b0c <RCC_Delay>
 8005570:	e01c      	b.n	80055ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005572:	4b0a      	ldr	r3, [pc, #40]	; (800559c <HAL_RCC_OscConfig+0x274>)
 8005574:	2200      	movs	r2, #0
 8005576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005578:	f7fd fd18 	bl	8002fac <HAL_GetTick>
 800557c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800557e:	e00f      	b.n	80055a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005580:	f7fd fd14 	bl	8002fac <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d908      	bls.n	80055a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e146      	b.n	8005820 <HAL_RCC_OscConfig+0x4f8>
 8005592:	bf00      	nop
 8005594:	40021000 	.word	0x40021000
 8005598:	42420000 	.word	0x42420000
 800559c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055a0:	4b92      	ldr	r3, [pc, #584]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 80055a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1e9      	bne.n	8005580 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 80a6 	beq.w	8005706 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055ba:	2300      	movs	r3, #0
 80055bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055be:	4b8b      	ldr	r3, [pc, #556]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10d      	bne.n	80055e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ca:	4b88      	ldr	r3, [pc, #544]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	4a87      	ldr	r2, [pc, #540]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 80055d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055d4:	61d3      	str	r3, [r2, #28]
 80055d6:	4b85      	ldr	r3, [pc, #532]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055de:	60bb      	str	r3, [r7, #8]
 80055e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055e2:	2301      	movs	r3, #1
 80055e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055e6:	4b82      	ldr	r3, [pc, #520]	; (80057f0 <HAL_RCC_OscConfig+0x4c8>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d118      	bne.n	8005624 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055f2:	4b7f      	ldr	r3, [pc, #508]	; (80057f0 <HAL_RCC_OscConfig+0x4c8>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a7e      	ldr	r2, [pc, #504]	; (80057f0 <HAL_RCC_OscConfig+0x4c8>)
 80055f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055fe:	f7fd fcd5 	bl	8002fac <HAL_GetTick>
 8005602:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005604:	e008      	b.n	8005618 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005606:	f7fd fcd1 	bl	8002fac <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b64      	cmp	r3, #100	; 0x64
 8005612:	d901      	bls.n	8005618 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e103      	b.n	8005820 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005618:	4b75      	ldr	r3, [pc, #468]	; (80057f0 <HAL_RCC_OscConfig+0x4c8>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0f0      	beq.n	8005606 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d106      	bne.n	800563a <HAL_RCC_OscConfig+0x312>
 800562c:	4b6f      	ldr	r3, [pc, #444]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	4a6e      	ldr	r2, [pc, #440]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 8005632:	f043 0301 	orr.w	r3, r3, #1
 8005636:	6213      	str	r3, [r2, #32]
 8005638:	e02d      	b.n	8005696 <HAL_RCC_OscConfig+0x36e>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10c      	bne.n	800565c <HAL_RCC_OscConfig+0x334>
 8005642:	4b6a      	ldr	r3, [pc, #424]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	4a69      	ldr	r2, [pc, #420]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 8005648:	f023 0301 	bic.w	r3, r3, #1
 800564c:	6213      	str	r3, [r2, #32]
 800564e:	4b67      	ldr	r3, [pc, #412]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	4a66      	ldr	r2, [pc, #408]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 8005654:	f023 0304 	bic.w	r3, r3, #4
 8005658:	6213      	str	r3, [r2, #32]
 800565a:	e01c      	b.n	8005696 <HAL_RCC_OscConfig+0x36e>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	2b05      	cmp	r3, #5
 8005662:	d10c      	bne.n	800567e <HAL_RCC_OscConfig+0x356>
 8005664:	4b61      	ldr	r3, [pc, #388]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	4a60      	ldr	r2, [pc, #384]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 800566a:	f043 0304 	orr.w	r3, r3, #4
 800566e:	6213      	str	r3, [r2, #32]
 8005670:	4b5e      	ldr	r3, [pc, #376]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	4a5d      	ldr	r2, [pc, #372]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 8005676:	f043 0301 	orr.w	r3, r3, #1
 800567a:	6213      	str	r3, [r2, #32]
 800567c:	e00b      	b.n	8005696 <HAL_RCC_OscConfig+0x36e>
 800567e:	4b5b      	ldr	r3, [pc, #364]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	4a5a      	ldr	r2, [pc, #360]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 8005684:	f023 0301 	bic.w	r3, r3, #1
 8005688:	6213      	str	r3, [r2, #32]
 800568a:	4b58      	ldr	r3, [pc, #352]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	4a57      	ldr	r2, [pc, #348]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 8005690:	f023 0304 	bic.w	r3, r3, #4
 8005694:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d015      	beq.n	80056ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800569e:	f7fd fc85 	bl	8002fac <HAL_GetTick>
 80056a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a4:	e00a      	b.n	80056bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a6:	f7fd fc81 	bl	8002fac <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d901      	bls.n	80056bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e0b1      	b.n	8005820 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056bc:	4b4b      	ldr	r3, [pc, #300]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d0ee      	beq.n	80056a6 <HAL_RCC_OscConfig+0x37e>
 80056c8:	e014      	b.n	80056f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056ca:	f7fd fc6f 	bl	8002fac <HAL_GetTick>
 80056ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056d0:	e00a      	b.n	80056e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056d2:	f7fd fc6b 	bl	8002fac <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d901      	bls.n	80056e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e09b      	b.n	8005820 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056e8:	4b40      	ldr	r3, [pc, #256]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 80056ea:	6a1b      	ldr	r3, [r3, #32]
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1ee      	bne.n	80056d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80056f4:	7dfb      	ldrb	r3, [r7, #23]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d105      	bne.n	8005706 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056fa:	4b3c      	ldr	r3, [pc, #240]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	4a3b      	ldr	r2, [pc, #236]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 8005700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005704:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	2b00      	cmp	r3, #0
 800570c:	f000 8087 	beq.w	800581e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005710:	4b36      	ldr	r3, [pc, #216]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f003 030c 	and.w	r3, r3, #12
 8005718:	2b08      	cmp	r3, #8
 800571a:	d061      	beq.n	80057e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	2b02      	cmp	r3, #2
 8005722:	d146      	bne.n	80057b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005724:	4b33      	ldr	r3, [pc, #204]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 8005726:	2200      	movs	r2, #0
 8005728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800572a:	f7fd fc3f 	bl	8002fac <HAL_GetTick>
 800572e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005730:	e008      	b.n	8005744 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005732:	f7fd fc3b 	bl	8002fac <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e06d      	b.n	8005820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005744:	4b29      	ldr	r3, [pc, #164]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1f0      	bne.n	8005732 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005758:	d108      	bne.n	800576c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800575a:	4b24      	ldr	r3, [pc, #144]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	4921      	ldr	r1, [pc, #132]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 8005768:	4313      	orrs	r3, r2
 800576a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800576c:	4b1f      	ldr	r3, [pc, #124]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a19      	ldr	r1, [r3, #32]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	430b      	orrs	r3, r1
 800577e:	491b      	ldr	r1, [pc, #108]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 8005780:	4313      	orrs	r3, r2
 8005782:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005784:	4b1b      	ldr	r3, [pc, #108]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 8005786:	2201      	movs	r2, #1
 8005788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800578a:	f7fd fc0f 	bl	8002fac <HAL_GetTick>
 800578e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005790:	e008      	b.n	80057a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005792:	f7fd fc0b 	bl	8002fac <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	2b02      	cmp	r3, #2
 800579e:	d901      	bls.n	80057a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e03d      	b.n	8005820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057a4:	4b11      	ldr	r3, [pc, #68]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d0f0      	beq.n	8005792 <HAL_RCC_OscConfig+0x46a>
 80057b0:	e035      	b.n	800581e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057b2:	4b10      	ldr	r3, [pc, #64]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b8:	f7fd fbf8 	bl	8002fac <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057be:	e008      	b.n	80057d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057c0:	f7fd fbf4 	bl	8002fac <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e026      	b.n	8005820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057d2:	4b06      	ldr	r3, [pc, #24]	; (80057ec <HAL_RCC_OscConfig+0x4c4>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1f0      	bne.n	80057c0 <HAL_RCC_OscConfig+0x498>
 80057de:	e01e      	b.n	800581e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d107      	bne.n	80057f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e019      	b.n	8005820 <HAL_RCC_OscConfig+0x4f8>
 80057ec:	40021000 	.word	0x40021000
 80057f0:	40007000 	.word	0x40007000
 80057f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80057f8:	4b0b      	ldr	r3, [pc, #44]	; (8005828 <HAL_RCC_OscConfig+0x500>)
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	429a      	cmp	r2, r3
 800580a:	d106      	bne.n	800581a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005816:	429a      	cmp	r2, r3
 8005818:	d001      	beq.n	800581e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e000      	b.n	8005820 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	40021000 	.word	0x40021000

0800582c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e0d0      	b.n	80059e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005840:	4b6a      	ldr	r3, [pc, #424]	; (80059ec <HAL_RCC_ClockConfig+0x1c0>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0307 	and.w	r3, r3, #7
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	429a      	cmp	r2, r3
 800584c:	d910      	bls.n	8005870 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800584e:	4b67      	ldr	r3, [pc, #412]	; (80059ec <HAL_RCC_ClockConfig+0x1c0>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f023 0207 	bic.w	r2, r3, #7
 8005856:	4965      	ldr	r1, [pc, #404]	; (80059ec <HAL_RCC_ClockConfig+0x1c0>)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	4313      	orrs	r3, r2
 800585c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800585e:	4b63      	ldr	r3, [pc, #396]	; (80059ec <HAL_RCC_ClockConfig+0x1c0>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	429a      	cmp	r2, r3
 800586a:	d001      	beq.n	8005870 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e0b8      	b.n	80059e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d020      	beq.n	80058be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b00      	cmp	r3, #0
 8005886:	d005      	beq.n	8005894 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005888:	4b59      	ldr	r3, [pc, #356]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	4a58      	ldr	r2, [pc, #352]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 800588e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005892:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0308 	and.w	r3, r3, #8
 800589c:	2b00      	cmp	r3, #0
 800589e:	d005      	beq.n	80058ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058a0:	4b53      	ldr	r3, [pc, #332]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	4a52      	ldr	r2, [pc, #328]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 80058a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80058aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058ac:	4b50      	ldr	r3, [pc, #320]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	494d      	ldr	r1, [pc, #308]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d040      	beq.n	800594c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d107      	bne.n	80058e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058d2:	4b47      	ldr	r3, [pc, #284]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d115      	bne.n	800590a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e07f      	b.n	80059e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d107      	bne.n	80058fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ea:	4b41      	ldr	r3, [pc, #260]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d109      	bne.n	800590a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e073      	b.n	80059e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058fa:	4b3d      	ldr	r3, [pc, #244]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e06b      	b.n	80059e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800590a:	4b39      	ldr	r3, [pc, #228]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f023 0203 	bic.w	r2, r3, #3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	4936      	ldr	r1, [pc, #216]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005918:	4313      	orrs	r3, r2
 800591a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800591c:	f7fd fb46 	bl	8002fac <HAL_GetTick>
 8005920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005922:	e00a      	b.n	800593a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005924:	f7fd fb42 	bl	8002fac <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005932:	4293      	cmp	r3, r2
 8005934:	d901      	bls.n	800593a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e053      	b.n	80059e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800593a:	4b2d      	ldr	r3, [pc, #180]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f003 020c 	and.w	r2, r3, #12
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	429a      	cmp	r2, r3
 800594a:	d1eb      	bne.n	8005924 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800594c:	4b27      	ldr	r3, [pc, #156]	; (80059ec <HAL_RCC_ClockConfig+0x1c0>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0307 	and.w	r3, r3, #7
 8005954:	683a      	ldr	r2, [r7, #0]
 8005956:	429a      	cmp	r2, r3
 8005958:	d210      	bcs.n	800597c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800595a:	4b24      	ldr	r3, [pc, #144]	; (80059ec <HAL_RCC_ClockConfig+0x1c0>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f023 0207 	bic.w	r2, r3, #7
 8005962:	4922      	ldr	r1, [pc, #136]	; (80059ec <HAL_RCC_ClockConfig+0x1c0>)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	4313      	orrs	r3, r2
 8005968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800596a:	4b20      	ldr	r3, [pc, #128]	; (80059ec <HAL_RCC_ClockConfig+0x1c0>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0307 	and.w	r3, r3, #7
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	429a      	cmp	r2, r3
 8005976:	d001      	beq.n	800597c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e032      	b.n	80059e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b00      	cmp	r3, #0
 8005986:	d008      	beq.n	800599a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005988:	4b19      	ldr	r3, [pc, #100]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	4916      	ldr	r1, [pc, #88]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005996:	4313      	orrs	r3, r2
 8005998:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0308 	and.w	r3, r3, #8
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d009      	beq.n	80059ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80059a6:	4b12      	ldr	r3, [pc, #72]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	490e      	ldr	r1, [pc, #56]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80059ba:	f000 f821 	bl	8005a00 <HAL_RCC_GetSysClockFreq>
 80059be:	4602      	mov	r2, r0
 80059c0:	4b0b      	ldr	r3, [pc, #44]	; (80059f0 <HAL_RCC_ClockConfig+0x1c4>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	091b      	lsrs	r3, r3, #4
 80059c6:	f003 030f 	and.w	r3, r3, #15
 80059ca:	490a      	ldr	r1, [pc, #40]	; (80059f4 <HAL_RCC_ClockConfig+0x1c8>)
 80059cc:	5ccb      	ldrb	r3, [r1, r3]
 80059ce:	fa22 f303 	lsr.w	r3, r2, r3
 80059d2:	4a09      	ldr	r2, [pc, #36]	; (80059f8 <HAL_RCC_ClockConfig+0x1cc>)
 80059d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80059d6:	4b09      	ldr	r3, [pc, #36]	; (80059fc <HAL_RCC_ClockConfig+0x1d0>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fd faa4 	bl	8002f28 <HAL_InitTick>

  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	40022000 	.word	0x40022000
 80059f0:	40021000 	.word	0x40021000
 80059f4:	0800da98 	.word	0x0800da98
 80059f8:	20000000 	.word	0x20000000
 80059fc:	20000004 	.word	0x20000004

08005a00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a06:	2300      	movs	r3, #0
 8005a08:	60fb      	str	r3, [r7, #12]
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60bb      	str	r3, [r7, #8]
 8005a0e:	2300      	movs	r3, #0
 8005a10:	617b      	str	r3, [r7, #20]
 8005a12:	2300      	movs	r3, #0
 8005a14:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005a1a:	4b1e      	ldr	r3, [pc, #120]	; (8005a94 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f003 030c 	and.w	r3, r3, #12
 8005a26:	2b04      	cmp	r3, #4
 8005a28:	d002      	beq.n	8005a30 <HAL_RCC_GetSysClockFreq+0x30>
 8005a2a:	2b08      	cmp	r3, #8
 8005a2c:	d003      	beq.n	8005a36 <HAL_RCC_GetSysClockFreq+0x36>
 8005a2e:	e027      	b.n	8005a80 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a30:	4b19      	ldr	r3, [pc, #100]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a32:	613b      	str	r3, [r7, #16]
      break;
 8005a34:	e027      	b.n	8005a86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	0c9b      	lsrs	r3, r3, #18
 8005a3a:	f003 030f 	and.w	r3, r3, #15
 8005a3e:	4a17      	ldr	r2, [pc, #92]	; (8005a9c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005a40:	5cd3      	ldrb	r3, [r2, r3]
 8005a42:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d010      	beq.n	8005a70 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005a4e:	4b11      	ldr	r3, [pc, #68]	; (8005a94 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	0c5b      	lsrs	r3, r3, #17
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	4a11      	ldr	r2, [pc, #68]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005a5a:	5cd3      	ldrb	r3, [r2, r3]
 8005a5c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a0d      	ldr	r2, [pc, #52]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a62:	fb03 f202 	mul.w	r2, r3, r2
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6c:	617b      	str	r3, [r7, #20]
 8005a6e:	e004      	b.n	8005a7a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a0c      	ldr	r2, [pc, #48]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005a74:	fb02 f303 	mul.w	r3, r2, r3
 8005a78:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	613b      	str	r3, [r7, #16]
      break;
 8005a7e:	e002      	b.n	8005a86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a80:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a82:	613b      	str	r3, [r7, #16]
      break;
 8005a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a86:	693b      	ldr	r3, [r7, #16]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	371c      	adds	r7, #28
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bc80      	pop	{r7}
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	40021000 	.word	0x40021000
 8005a98:	007a1200 	.word	0x007a1200
 8005a9c:	0800dab0 	.word	0x0800dab0
 8005aa0:	0800dac0 	.word	0x0800dac0
 8005aa4:	003d0900 	.word	0x003d0900

08005aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005aac:	4b02      	ldr	r3, [pc, #8]	; (8005ab8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005aae:	681b      	ldr	r3, [r3, #0]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bc80      	pop	{r7}
 8005ab6:	4770      	bx	lr
 8005ab8:	20000000 	.word	0x20000000

08005abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ac0:	f7ff fff2 	bl	8005aa8 <HAL_RCC_GetHCLKFreq>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	4b05      	ldr	r3, [pc, #20]	; (8005adc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	0a1b      	lsrs	r3, r3, #8
 8005acc:	f003 0307 	and.w	r3, r3, #7
 8005ad0:	4903      	ldr	r1, [pc, #12]	; (8005ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ad2:	5ccb      	ldrb	r3, [r1, r3]
 8005ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	40021000 	.word	0x40021000
 8005ae0:	0800daa8 	.word	0x0800daa8

08005ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ae8:	f7ff ffde 	bl	8005aa8 <HAL_RCC_GetHCLKFreq>
 8005aec:	4602      	mov	r2, r0
 8005aee:	4b05      	ldr	r3, [pc, #20]	; (8005b04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	0adb      	lsrs	r3, r3, #11
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	4903      	ldr	r1, [pc, #12]	; (8005b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005afa:	5ccb      	ldrb	r3, [r1, r3]
 8005afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	40021000 	.word	0x40021000
 8005b08:	0800daa8 	.word	0x0800daa8

08005b0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005b14:	4b0a      	ldr	r3, [pc, #40]	; (8005b40 <RCC_Delay+0x34>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a0a      	ldr	r2, [pc, #40]	; (8005b44 <RCC_Delay+0x38>)
 8005b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b1e:	0a5b      	lsrs	r3, r3, #9
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	fb02 f303 	mul.w	r3, r2, r3
 8005b26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005b28:	bf00      	nop
  }
  while (Delay --);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	1e5a      	subs	r2, r3, #1
 8005b2e:	60fa      	str	r2, [r7, #12]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1f9      	bne.n	8005b28 <RCC_Delay+0x1c>
}
 8005b34:	bf00      	nop
 8005b36:	bf00      	nop
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bc80      	pop	{r7}
 8005b3e:	4770      	bx	lr
 8005b40:	20000000 	.word	0x20000000
 8005b44:	10624dd3 	.word	0x10624dd3

08005b48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e076      	b.n	8005c48 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d108      	bne.n	8005b74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b6a:	d009      	beq.n	8005b80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	61da      	str	r2, [r3, #28]
 8005b72:	e005      	b.n	8005b80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d106      	bne.n	8005ba0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7fc ff44 	bl	8002a28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	431a      	orrs	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c04:	ea42 0103 	orr.w	r1, r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	430a      	orrs	r2, r1
 8005c16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	0c1a      	lsrs	r2, r3, #16
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f002 0204 	and.w	r2, r2, #4
 8005c26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	69da      	ldr	r2, [r3, #28]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3708      	adds	r7, #8
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e042      	b.n	8005ce8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d106      	bne.n	8005c7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f7fd f884 	bl	8002d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2224      	movs	r2, #36	; 0x24
 8005c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 f91d 	bl	8005ed4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	691a      	ldr	r2, [r3, #16]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ca8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	695a      	ldr	r2, [r3, #20]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b08a      	sub	sp, #40	; 0x28
 8005cf4:	af02      	add	r7, sp, #8
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	603b      	str	r3, [r7, #0]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d00:	2300      	movs	r3, #0
 8005d02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b20      	cmp	r3, #32
 8005d0e:	d16d      	bne.n	8005dec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <HAL_UART_Transmit+0x2c>
 8005d16:	88fb      	ldrh	r3, [r7, #6]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e066      	b.n	8005dee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2221      	movs	r2, #33	; 0x21
 8005d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d2e:	f7fd f93d 	bl	8002fac <HAL_GetTick>
 8005d32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	88fa      	ldrh	r2, [r7, #6]
 8005d38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	88fa      	ldrh	r2, [r7, #6]
 8005d3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d48:	d108      	bne.n	8005d5c <HAL_UART_Transmit+0x6c>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d104      	bne.n	8005d5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005d52:	2300      	movs	r3, #0
 8005d54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	61bb      	str	r3, [r7, #24]
 8005d5a:	e003      	b.n	8005d64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d60:	2300      	movs	r3, #0
 8005d62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d64:	e02a      	b.n	8005dbc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	2180      	movs	r1, #128	; 0x80
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 f840 	bl	8005df6 <UART_WaitOnFlagUntilTimeout>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e036      	b.n	8005dee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10b      	bne.n	8005d9e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	3302      	adds	r3, #2
 8005d9a:	61bb      	str	r3, [r7, #24]
 8005d9c:	e007      	b.n	8005dae <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	781a      	ldrb	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	3301      	adds	r3, #1
 8005dac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1cf      	bne.n	8005d66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	2140      	movs	r1, #64	; 0x40
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 f810 	bl	8005df6 <UART_WaitOnFlagUntilTimeout>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d001      	beq.n	8005de0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e006      	b.n	8005dee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005de8:	2300      	movs	r3, #0
 8005dea:	e000      	b.n	8005dee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005dec:	2302      	movs	r3, #2
  }
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3720      	adds	r7, #32
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b090      	sub	sp, #64	; 0x40
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	60f8      	str	r0, [r7, #12]
 8005dfe:	60b9      	str	r1, [r7, #8]
 8005e00:	603b      	str	r3, [r7, #0]
 8005e02:	4613      	mov	r3, r2
 8005e04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e06:	e050      	b.n	8005eaa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0e:	d04c      	beq.n	8005eaa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d007      	beq.n	8005e26 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e16:	f7fd f8c9 	bl	8002fac <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d241      	bcs.n	8005eaa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	330c      	adds	r3, #12
 8005e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e30:	e853 3f00 	ldrex	r3, [r3]
 8005e34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	330c      	adds	r3, #12
 8005e44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e46:	637a      	str	r2, [r7, #52]	; 0x34
 8005e48:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e4e:	e841 2300 	strex	r3, r2, [r1]
 8005e52:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1e5      	bne.n	8005e26 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3314      	adds	r3, #20
 8005e60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	e853 3f00 	ldrex	r3, [r3]
 8005e68:	613b      	str	r3, [r7, #16]
   return(result);
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	f023 0301 	bic.w	r3, r3, #1
 8005e70:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	3314      	adds	r3, #20
 8005e78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e7a:	623a      	str	r2, [r7, #32]
 8005e7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7e:	69f9      	ldr	r1, [r7, #28]
 8005e80:	6a3a      	ldr	r2, [r7, #32]
 8005e82:	e841 2300 	strex	r3, r2, [r1]
 8005e86:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1e5      	bne.n	8005e5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2220      	movs	r2, #32
 8005e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e00f      	b.n	8005eca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	bf0c      	ite	eq
 8005eba:	2301      	moveq	r3, #1
 8005ebc:	2300      	movne	r3, #0
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	79fb      	ldrb	r3, [r7, #7]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d09f      	beq.n	8005e08 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3740      	adds	r7, #64	; 0x40
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
	...

08005ed4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689a      	ldr	r2, [r3, #8]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	431a      	orrs	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005f0e:	f023 030c 	bic.w	r3, r3, #12
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	6812      	ldr	r2, [r2, #0]
 8005f16:	68b9      	ldr	r1, [r7, #8]
 8005f18:	430b      	orrs	r3, r1
 8005f1a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	699a      	ldr	r2, [r3, #24]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a2c      	ldr	r2, [pc, #176]	; (8005fe8 <UART_SetConfig+0x114>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d103      	bne.n	8005f44 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f3c:	f7ff fdd2 	bl	8005ae4 <HAL_RCC_GetPCLK2Freq>
 8005f40:	60f8      	str	r0, [r7, #12]
 8005f42:	e002      	b.n	8005f4a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005f44:	f7ff fdba 	bl	8005abc <HAL_RCC_GetPCLK1Freq>
 8005f48:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	009a      	lsls	r2, r3, #2
 8005f54:	441a      	add	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f60:	4a22      	ldr	r2, [pc, #136]	; (8005fec <UART_SetConfig+0x118>)
 8005f62:	fba2 2303 	umull	r2, r3, r2, r3
 8005f66:	095b      	lsrs	r3, r3, #5
 8005f68:	0119      	lsls	r1, r3, #4
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	009a      	lsls	r2, r3, #2
 8005f74:	441a      	add	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f80:	4b1a      	ldr	r3, [pc, #104]	; (8005fec <UART_SetConfig+0x118>)
 8005f82:	fba3 0302 	umull	r0, r3, r3, r2
 8005f86:	095b      	lsrs	r3, r3, #5
 8005f88:	2064      	movs	r0, #100	; 0x64
 8005f8a:	fb00 f303 	mul.w	r3, r0, r3
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	011b      	lsls	r3, r3, #4
 8005f92:	3332      	adds	r3, #50	; 0x32
 8005f94:	4a15      	ldr	r2, [pc, #84]	; (8005fec <UART_SetConfig+0x118>)
 8005f96:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9a:	095b      	lsrs	r3, r3, #5
 8005f9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fa0:	4419      	add	r1, r3
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	009a      	lsls	r2, r3, #2
 8005fac:	441a      	add	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fb8:	4b0c      	ldr	r3, [pc, #48]	; (8005fec <UART_SetConfig+0x118>)
 8005fba:	fba3 0302 	umull	r0, r3, r3, r2
 8005fbe:	095b      	lsrs	r3, r3, #5
 8005fc0:	2064      	movs	r0, #100	; 0x64
 8005fc2:	fb00 f303 	mul.w	r3, r0, r3
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	011b      	lsls	r3, r3, #4
 8005fca:	3332      	adds	r3, #50	; 0x32
 8005fcc:	4a07      	ldr	r2, [pc, #28]	; (8005fec <UART_SetConfig+0x118>)
 8005fce:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd2:	095b      	lsrs	r3, r3, #5
 8005fd4:	f003 020f 	and.w	r2, r3, #15
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	440a      	add	r2, r1
 8005fde:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005fe0:	bf00      	nop
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	40013800 	.word	0x40013800
 8005fec:	51eb851f 	.word	0x51eb851f

08005ff0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ff6:	f3ef 8305 	mrs	r3, IPSR
 8005ffa:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ffc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10f      	bne.n	8006022 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006002:	f3ef 8310 	mrs	r3, PRIMASK
 8006006:	607b      	str	r3, [r7, #4]
  return(result);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d109      	bne.n	8006022 <osKernelInitialize+0x32>
 800600e:	4b10      	ldr	r3, [pc, #64]	; (8006050 <osKernelInitialize+0x60>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2b02      	cmp	r3, #2
 8006014:	d109      	bne.n	800602a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006016:	f3ef 8311 	mrs	r3, BASEPRI
 800601a:	603b      	str	r3, [r7, #0]
  return(result);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006022:	f06f 0305 	mvn.w	r3, #5
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	e00c      	b.n	8006044 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800602a:	4b09      	ldr	r3, [pc, #36]	; (8006050 <osKernelInitialize+0x60>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d105      	bne.n	800603e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006032:	4b07      	ldr	r3, [pc, #28]	; (8006050 <osKernelInitialize+0x60>)
 8006034:	2201      	movs	r2, #1
 8006036:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006038:	2300      	movs	r3, #0
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	e002      	b.n	8006044 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800603e:	f04f 33ff 	mov.w	r3, #4294967295
 8006042:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006044:	68fb      	ldr	r3, [r7, #12]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	bc80      	pop	{r7}
 800604e:	4770      	bx	lr
 8006050:	200004e0 	.word	0x200004e0

08006054 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800605a:	f002 f891 	bl	8008180 <xTaskGetSchedulerState>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d004      	beq.n	800606e <osKernelGetState+0x1a>
 8006064:	2b02      	cmp	r3, #2
 8006066:	d105      	bne.n	8006074 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8006068:	2302      	movs	r3, #2
 800606a:	607b      	str	r3, [r7, #4]
      break;
 800606c:	e00c      	b.n	8006088 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800606e:	2303      	movs	r3, #3
 8006070:	607b      	str	r3, [r7, #4]
      break;
 8006072:	e009      	b.n	8006088 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8006074:	4b07      	ldr	r3, [pc, #28]	; (8006094 <osKernelGetState+0x40>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d102      	bne.n	8006082 <osKernelGetState+0x2e>
        state = osKernelReady;
 800607c:	2301      	movs	r3, #1
 800607e:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8006080:	e001      	b.n	8006086 <osKernelGetState+0x32>
        state = osKernelInactive;
 8006082:	2300      	movs	r3, #0
 8006084:	607b      	str	r3, [r7, #4]
      break;
 8006086:	bf00      	nop
  }

  return (state);
 8006088:	687b      	ldr	r3, [r7, #4]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	200004e0 	.word	0x200004e0

08006098 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800609e:	f3ef 8305 	mrs	r3, IPSR
 80060a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80060a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10f      	bne.n	80060ca <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060aa:	f3ef 8310 	mrs	r3, PRIMASK
 80060ae:	607b      	str	r3, [r7, #4]
  return(result);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d109      	bne.n	80060ca <osKernelStart+0x32>
 80060b6:	4b11      	ldr	r3, [pc, #68]	; (80060fc <osKernelStart+0x64>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d109      	bne.n	80060d2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060be:	f3ef 8311 	mrs	r3, BASEPRI
 80060c2:	603b      	str	r3, [r7, #0]
  return(result);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80060ca:	f06f 0305 	mvn.w	r3, #5
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	e00e      	b.n	80060f0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80060d2:	4b0a      	ldr	r3, [pc, #40]	; (80060fc <osKernelStart+0x64>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d107      	bne.n	80060ea <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80060da:	4b08      	ldr	r3, [pc, #32]	; (80060fc <osKernelStart+0x64>)
 80060dc:	2202      	movs	r2, #2
 80060de:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80060e0:	f001 fbec 	bl	80078bc <vTaskStartScheduler>
      stat = osOK;
 80060e4:	2300      	movs	r3, #0
 80060e6:	60fb      	str	r3, [r7, #12]
 80060e8:	e002      	b.n	80060f0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80060ea:	f04f 33ff 	mov.w	r3, #4294967295
 80060ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80060f0:	68fb      	ldr	r3, [r7, #12]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	200004e0 	.word	0x200004e0

08006100 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006100:	b580      	push	{r7, lr}
 8006102:	b092      	sub	sp, #72	; 0x48
 8006104:	af04      	add	r7, sp, #16
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800610c:	2300      	movs	r3, #0
 800610e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006110:	f3ef 8305 	mrs	r3, IPSR
 8006114:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006118:	2b00      	cmp	r3, #0
 800611a:	f040 8094 	bne.w	8006246 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800611e:	f3ef 8310 	mrs	r3, PRIMASK
 8006122:	623b      	str	r3, [r7, #32]
  return(result);
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	2b00      	cmp	r3, #0
 8006128:	f040 808d 	bne.w	8006246 <osThreadNew+0x146>
 800612c:	4b48      	ldr	r3, [pc, #288]	; (8006250 <osThreadNew+0x150>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b02      	cmp	r3, #2
 8006132:	d106      	bne.n	8006142 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006134:	f3ef 8311 	mrs	r3, BASEPRI
 8006138:	61fb      	str	r3, [r7, #28]
  return(result);
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	2b00      	cmp	r3, #0
 800613e:	f040 8082 	bne.w	8006246 <osThreadNew+0x146>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d07e      	beq.n	8006246 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006148:	2380      	movs	r3, #128	; 0x80
 800614a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800614c:	2318      	movs	r3, #24
 800614e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006150:	2300      	movs	r3, #0
 8006152:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006154:	f107 031b 	add.w	r3, r7, #27
 8006158:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800615a:	f04f 33ff 	mov.w	r3, #4294967295
 800615e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d045      	beq.n	80061f2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <osThreadNew+0x74>
        name = attr->name;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006184:	2b00      	cmp	r3, #0
 8006186:	d008      	beq.n	800619a <osThreadNew+0x9a>
 8006188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618a:	2b38      	cmp	r3, #56	; 0x38
 800618c:	d805      	bhi.n	800619a <osThreadNew+0x9a>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <osThreadNew+0x9e>
        return (NULL);
 800619a:	2300      	movs	r3, #0
 800619c:	e054      	b.n	8006248 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d003      	beq.n	80061ae <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	089b      	lsrs	r3, r3, #2
 80061ac:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00e      	beq.n	80061d4 <osThreadNew+0xd4>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	2bb7      	cmp	r3, #183	; 0xb7
 80061bc:	d90a      	bls.n	80061d4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d006      	beq.n	80061d4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <osThreadNew+0xd4>
        mem = 1;
 80061ce:	2301      	movs	r3, #1
 80061d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80061d2:	e010      	b.n	80061f6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10c      	bne.n	80061f6 <osThreadNew+0xf6>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d108      	bne.n	80061f6 <osThreadNew+0xf6>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d104      	bne.n	80061f6 <osThreadNew+0xf6>
          mem = 0;
 80061ec:	2300      	movs	r3, #0
 80061ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80061f0:	e001      	b.n	80061f6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80061f2:	2300      	movs	r3, #0
 80061f4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80061f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d110      	bne.n	800621e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006204:	9202      	str	r2, [sp, #8]
 8006206:	9301      	str	r3, [sp, #4]
 8006208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006210:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f001 f96e 	bl	80074f4 <xTaskCreateStatic>
 8006218:	4603      	mov	r3, r0
 800621a:	617b      	str	r3, [r7, #20]
 800621c:	e013      	b.n	8006246 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800621e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006220:	2b00      	cmp	r3, #0
 8006222:	d110      	bne.n	8006246 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006226:	b29a      	uxth	r2, r3
 8006228:	f107 0314 	add.w	r3, r7, #20
 800622c:	9301      	str	r3, [sp, #4]
 800622e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f001 f9b8 	bl	80075ac <xTaskCreate>
 800623c:	4603      	mov	r3, r0
 800623e:	2b01      	cmp	r3, #1
 8006240:	d001      	beq.n	8006246 <osThreadNew+0x146>
          hTask = NULL;
 8006242:	2300      	movs	r3, #0
 8006244:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006246:	697b      	ldr	r3, [r7, #20]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3738      	adds	r7, #56	; 0x38
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	200004e0 	.word	0x200004e0

08006254 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800625a:	f3ef 8305 	mrs	r3, IPSR
 800625e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006260:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10f      	bne.n	8006286 <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006266:	f3ef 8310 	mrs	r3, PRIMASK
 800626a:	607b      	str	r3, [r7, #4]
  return(result);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d109      	bne.n	8006286 <osThreadYield+0x32>
 8006272:	4b0f      	ldr	r3, [pc, #60]	; (80062b0 <osThreadYield+0x5c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b02      	cmp	r3, #2
 8006278:	d109      	bne.n	800628e <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800627a:	f3ef 8311 	mrs	r3, BASEPRI
 800627e:	603b      	str	r3, [r7, #0]
  return(result);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <osThreadYield+0x3a>
    stat = osErrorISR;
 8006286:	f06f 0305 	mvn.w	r3, #5
 800628a:	60fb      	str	r3, [r7, #12]
 800628c:	e009      	b.n	80062a2 <osThreadYield+0x4e>
  } else {
    stat = osOK;
 800628e:	2300      	movs	r3, #0
 8006290:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 8006292:	4b08      	ldr	r3, [pc, #32]	; (80062b4 <osThreadYield+0x60>)
 8006294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80062a2:	68fb      	ldr	r3, [r7, #12]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bc80      	pop	{r7}
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	200004e0 	.word	0x200004e0
 80062b4:	e000ed04 	.word	0xe000ed04

080062b8 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b08e      	sub	sp, #56	; 0x38
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062c4:	f3ef 8305 	mrs	r3, IPSR
 80062c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80062ca:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10f      	bne.n	80062f0 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062d0:	f3ef 8310 	mrs	r3, PRIMASK
 80062d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d109      	bne.n	80062f0 <osThreadFlagsWait+0x38>
 80062dc:	4b3f      	ldr	r3, [pc, #252]	; (80063dc <osThreadFlagsWait+0x124>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d109      	bne.n	80062f8 <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80062e4:	f3ef 8311 	mrs	r3, BASEPRI
 80062e8:	617b      	str	r3, [r7, #20]
  return(result);
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d003      	beq.n	80062f8 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 80062f0:	f06f 0305 	mvn.w	r3, #5
 80062f4:	637b      	str	r3, [r7, #52]	; 0x34
 80062f6:	e06b      	b.n	80063d0 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	da03      	bge.n	8006306 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 80062fe:	f06f 0303 	mvn.w	r3, #3
 8006302:	637b      	str	r3, [r7, #52]	; 0x34
 8006304:	e064      	b.n	80063d0 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d002      	beq.n	8006316 <osThreadFlagsWait+0x5e>
      clear = 0U;
 8006310:	2300      	movs	r3, #0
 8006312:	633b      	str	r3, [r7, #48]	; 0x30
 8006314:	e001      	b.n	800631a <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800631a:	2300      	movs	r3, #0
 800631c:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 8006322:	f001 fbe7 	bl	8007af4 <xTaskGetTickCount>
 8006326:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8006328:	f107 0210 	add.w	r2, r7, #16
 800632c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006330:	2000      	movs	r0, #0
 8006332:	f001 ffb1 	bl	8008298 <xTaskNotifyWait>
 8006336:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	2b01      	cmp	r3, #1
 800633c:	d137      	bne.n	80063ae <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800633e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	4013      	ands	r3, r2
 8006344:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800634a:	4313      	orrs	r3, r2
 800634c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00c      	beq.n	8006372 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800635c:	4013      	ands	r3, r2
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	429a      	cmp	r2, r3
 8006362:	d032      	beq.n	80063ca <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10f      	bne.n	800638a <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800636a:	f06f 0302 	mvn.w	r3, #2
 800636e:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8006370:	e02e      	b.n	80063d0 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006376:	4013      	ands	r3, r2
 8006378:	2b00      	cmp	r3, #0
 800637a:	d128      	bne.n	80063ce <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d103      	bne.n	800638a <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8006382:	f06f 0302 	mvn.w	r3, #2
 8006386:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8006388:	e022      	b.n	80063d0 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800638a:	f001 fbb3 	bl	8007af4 <xTaskGetTickCount>
 800638e:	4602      	mov	r2, r0
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 8006396:	6a3a      	ldr	r2, [r7, #32]
 8006398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639a:	429a      	cmp	r2, r3
 800639c:	d902      	bls.n	80063a4 <osThreadFlagsWait+0xec>
          tout  = 0;
 800639e:	2300      	movs	r3, #0
 80063a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063a2:	e00e      	b.n	80063c2 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 80063a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063ac:	e009      	b.n	80063c2 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d103      	bne.n	80063bc <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 80063b4:	f06f 0302 	mvn.w	r3, #2
 80063b8:	637b      	str	r3, [r7, #52]	; 0x34
 80063ba:	e002      	b.n	80063c2 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80063bc:	f06f 0301 	mvn.w	r3, #1
 80063c0:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1af      	bne.n	8006328 <osThreadFlagsWait+0x70>
 80063c8:	e002      	b.n	80063d0 <osThreadFlagsWait+0x118>
            break;
 80063ca:	bf00      	nop
 80063cc:	e000      	b.n	80063d0 <osThreadFlagsWait+0x118>
            break;
 80063ce:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80063d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3738      	adds	r7, #56	; 0x38
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	200004e0 	.word	0x200004e0

080063e0 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063e8:	f3ef 8305 	mrs	r3, IPSR
 80063ec:	613b      	str	r3, [r7, #16]
  return(result);
 80063ee:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10f      	bne.n	8006414 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063f4:	f3ef 8310 	mrs	r3, PRIMASK
 80063f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d109      	bne.n	8006414 <osDelay+0x34>
 8006400:	4b0d      	ldr	r3, [pc, #52]	; (8006438 <osDelay+0x58>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2b02      	cmp	r3, #2
 8006406:	d109      	bne.n	800641c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006408:	f3ef 8311 	mrs	r3, BASEPRI
 800640c:	60bb      	str	r3, [r7, #8]
  return(result);
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d003      	beq.n	800641c <osDelay+0x3c>
    stat = osErrorISR;
 8006414:	f06f 0305 	mvn.w	r3, #5
 8006418:	617b      	str	r3, [r7, #20]
 800641a:	e007      	b.n	800642c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800641c:	2300      	movs	r3, #0
 800641e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d002      	beq.n	800642c <osDelay+0x4c>
      vTaskDelay(ticks);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f001 fa14 	bl	8007854 <vTaskDelay>
    }
  }

  return (stat);
 800642c:	697b      	ldr	r3, [r7, #20]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3718      	adds	r7, #24
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	200004e0 	.word	0x200004e0

0800643c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800643c:	b580      	push	{r7, lr}
 800643e:	b08c      	sub	sp, #48	; 0x30
 8006440:	af02      	add	r7, sp, #8
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006448:	2300      	movs	r3, #0
 800644a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800644c:	f3ef 8305 	mrs	r3, IPSR
 8006450:	61bb      	str	r3, [r7, #24]
  return(result);
 8006452:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006454:	2b00      	cmp	r3, #0
 8006456:	d16f      	bne.n	8006538 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006458:	f3ef 8310 	mrs	r3, PRIMASK
 800645c:	617b      	str	r3, [r7, #20]
  return(result);
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d169      	bne.n	8006538 <osMessageQueueNew+0xfc>
 8006464:	4b37      	ldr	r3, [pc, #220]	; (8006544 <osMessageQueueNew+0x108>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b02      	cmp	r3, #2
 800646a:	d105      	bne.n	8006478 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800646c:	f3ef 8311 	mrs	r3, BASEPRI
 8006470:	613b      	str	r3, [r7, #16]
  return(result);
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d15f      	bne.n	8006538 <osMessageQueueNew+0xfc>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d05c      	beq.n	8006538 <osMessageQueueNew+0xfc>
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d059      	beq.n	8006538 <osMessageQueueNew+0xfc>
    mem = -1;
 8006484:	f04f 33ff 	mov.w	r3, #4294967295
 8006488:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d029      	beq.n	80064e4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d012      	beq.n	80064be <osMessageQueueNew+0x82>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	2b4f      	cmp	r3, #79	; 0x4f
 800649e:	d90e      	bls.n	80064be <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00a      	beq.n	80064be <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	695a      	ldr	r2, [r3, #20]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	68b9      	ldr	r1, [r7, #8]
 80064b0:	fb01 f303 	mul.w	r3, r1, r3
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d302      	bcc.n	80064be <osMessageQueueNew+0x82>
        mem = 1;
 80064b8:	2301      	movs	r3, #1
 80064ba:	623b      	str	r3, [r7, #32]
 80064bc:	e014      	b.n	80064e8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d110      	bne.n	80064e8 <osMessageQueueNew+0xac>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10c      	bne.n	80064e8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d108      	bne.n	80064e8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d104      	bne.n	80064e8 <osMessageQueueNew+0xac>
          mem = 0;
 80064de:	2300      	movs	r3, #0
 80064e0:	623b      	str	r3, [r7, #32]
 80064e2:	e001      	b.n	80064e8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80064e4:	2300      	movs	r3, #0
 80064e6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d10b      	bne.n	8006506 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	691a      	ldr	r2, [r3, #16]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	2100      	movs	r1, #0
 80064f8:	9100      	str	r1, [sp, #0]
 80064fa:	68b9      	ldr	r1, [r7, #8]
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f000 fa85 	bl	8006a0c <xQueueGenericCreateStatic>
 8006502:	6278      	str	r0, [r7, #36]	; 0x24
 8006504:	e008      	b.n	8006518 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d105      	bne.n	8006518 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800650c:	2200      	movs	r2, #0
 800650e:	68b9      	ldr	r1, [r7, #8]
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 faf2 	bl	8006afa <xQueueGenericCreate>
 8006516:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00c      	beq.n	8006538 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d003      	beq.n	800652c <osMessageQueueNew+0xf0>
        name = attr->name;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	61fb      	str	r3, [r7, #28]
 800652a:	e001      	b.n	8006530 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800652c:	2300      	movs	r3, #0
 800652e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006530:	69f9      	ldr	r1, [r7, #28]
 8006532:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006534:	f000 ff82 	bl	800743c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800653a:	4618      	mov	r0, r3
 800653c:	3728      	adds	r7, #40	; 0x28
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	200004e0 	.word	0x200004e0

08006548 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006548:	b580      	push	{r7, lr}
 800654a:	b08a      	sub	sp, #40	; 0x28
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	603b      	str	r3, [r7, #0]
 8006554:	4613      	mov	r3, r2
 8006556:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800655c:	2300      	movs	r3, #0
 800655e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006560:	f3ef 8305 	mrs	r3, IPSR
 8006564:	61fb      	str	r3, [r7, #28]
  return(result);
 8006566:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10f      	bne.n	800658c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800656c:	f3ef 8310 	mrs	r3, PRIMASK
 8006570:	61bb      	str	r3, [r7, #24]
  return(result);
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d109      	bne.n	800658c <osMessageQueuePut+0x44>
 8006578:	4b2b      	ldr	r3, [pc, #172]	; (8006628 <osMessageQueuePut+0xe0>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2b02      	cmp	r3, #2
 800657e:	d12e      	bne.n	80065de <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006580:	f3ef 8311 	mrs	r3, BASEPRI
 8006584:	617b      	str	r3, [r7, #20]
  return(result);
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d028      	beq.n	80065de <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d005      	beq.n	800659e <osMessageQueuePut+0x56>
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d002      	beq.n	800659e <osMessageQueuePut+0x56>
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800659e:	f06f 0303 	mvn.w	r3, #3
 80065a2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80065a4:	e039      	b.n	800661a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80065a6:	2300      	movs	r3, #0
 80065a8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80065aa:	f107 0210 	add.w	r2, r7, #16
 80065ae:	2300      	movs	r3, #0
 80065b0:	68b9      	ldr	r1, [r7, #8]
 80065b2:	6a38      	ldr	r0, [r7, #32]
 80065b4:	f000 fc00 	bl	8006db8 <xQueueGenericSendFromISR>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d003      	beq.n	80065c6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80065be:	f06f 0302 	mvn.w	r3, #2
 80065c2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80065c4:	e029      	b.n	800661a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d026      	beq.n	800661a <osMessageQueuePut+0xd2>
 80065cc:	4b17      	ldr	r3, [pc, #92]	; (800662c <osMessageQueuePut+0xe4>)
 80065ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80065dc:	e01d      	b.n	800661a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80065de:	6a3b      	ldr	r3, [r7, #32]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d002      	beq.n	80065ea <osMessageQueuePut+0xa2>
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d103      	bne.n	80065f2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80065ea:	f06f 0303 	mvn.w	r3, #3
 80065ee:	627b      	str	r3, [r7, #36]	; 0x24
 80065f0:	e014      	b.n	800661c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80065f2:	2300      	movs	r3, #0
 80065f4:	683a      	ldr	r2, [r7, #0]
 80065f6:	68b9      	ldr	r1, [r7, #8]
 80065f8:	6a38      	ldr	r0, [r7, #32]
 80065fa:	f000 fadf 	bl	8006bbc <xQueueGenericSend>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b01      	cmp	r3, #1
 8006602:	d00b      	beq.n	800661c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800660a:	f06f 0301 	mvn.w	r3, #1
 800660e:	627b      	str	r3, [r7, #36]	; 0x24
 8006610:	e004      	b.n	800661c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006612:	f06f 0302 	mvn.w	r3, #2
 8006616:	627b      	str	r3, [r7, #36]	; 0x24
 8006618:	e000      	b.n	800661c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800661a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800661e:	4618      	mov	r0, r3
 8006620:	3728      	adds	r7, #40	; 0x28
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	200004e0 	.word	0x200004e0
 800662c:	e000ed04 	.word	0xe000ed04

08006630 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006630:	b580      	push	{r7, lr}
 8006632:	b08a      	sub	sp, #40	; 0x28
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
 800663c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006642:	2300      	movs	r3, #0
 8006644:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006646:	f3ef 8305 	mrs	r3, IPSR
 800664a:	61fb      	str	r3, [r7, #28]
  return(result);
 800664c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10f      	bne.n	8006672 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006652:	f3ef 8310 	mrs	r3, PRIMASK
 8006656:	61bb      	str	r3, [r7, #24]
  return(result);
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d109      	bne.n	8006672 <osMessageQueueGet+0x42>
 800665e:	4b2b      	ldr	r3, [pc, #172]	; (800670c <osMessageQueueGet+0xdc>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2b02      	cmp	r3, #2
 8006664:	d12e      	bne.n	80066c4 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006666:	f3ef 8311 	mrs	r3, BASEPRI
 800666a:	617b      	str	r3, [r7, #20]
  return(result);
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d028      	beq.n	80066c4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d005      	beq.n	8006684 <osMessageQueueGet+0x54>
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d002      	beq.n	8006684 <osMessageQueueGet+0x54>
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d003      	beq.n	800668c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006684:	f06f 0303 	mvn.w	r3, #3
 8006688:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800668a:	e038      	b.n	80066fe <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800668c:	2300      	movs	r3, #0
 800668e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006690:	f107 0310 	add.w	r3, r7, #16
 8006694:	461a      	mov	r2, r3
 8006696:	68b9      	ldr	r1, [r7, #8]
 8006698:	6a38      	ldr	r0, [r7, #32]
 800669a:	f000 fd05 	bl	80070a8 <xQueueReceiveFromISR>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d003      	beq.n	80066ac <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80066a4:	f06f 0302 	mvn.w	r3, #2
 80066a8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80066aa:	e028      	b.n	80066fe <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d025      	beq.n	80066fe <osMessageQueueGet+0xce>
 80066b2:	4b17      	ldr	r3, [pc, #92]	; (8006710 <osMessageQueueGet+0xe0>)
 80066b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066b8:	601a      	str	r2, [r3, #0]
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80066c2:	e01c      	b.n	80066fe <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80066c4:	6a3b      	ldr	r3, [r7, #32]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d002      	beq.n	80066d0 <osMessageQueueGet+0xa0>
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d103      	bne.n	80066d8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80066d0:	f06f 0303 	mvn.w	r3, #3
 80066d4:	627b      	str	r3, [r7, #36]	; 0x24
 80066d6:	e013      	b.n	8006700 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	68b9      	ldr	r1, [r7, #8]
 80066dc:	6a38      	ldr	r0, [r7, #32]
 80066de:	f000 fc03 	bl	8006ee8 <xQueueReceive>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d00b      	beq.n	8006700 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80066ee:	f06f 0301 	mvn.w	r3, #1
 80066f2:	627b      	str	r3, [r7, #36]	; 0x24
 80066f4:	e004      	b.n	8006700 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80066f6:	f06f 0302 	mvn.w	r3, #2
 80066fa:	627b      	str	r3, [r7, #36]	; 0x24
 80066fc:	e000      	b.n	8006700 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80066fe:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006702:	4618      	mov	r0, r3
 8006704:	3728      	adds	r7, #40	; 0x28
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	200004e0 	.word	0x200004e0
 8006710:	e000ed04 	.word	0xe000ed04

08006714 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006714:	b580      	push	{r7, lr}
 8006716:	b088      	sub	sp, #32
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d102      	bne.n	800672c <osMessageQueueGetCount+0x18>
    count = 0U;
 8006726:	2300      	movs	r3, #0
 8006728:	61fb      	str	r3, [r7, #28]
 800672a:	e01e      	b.n	800676a <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800672c:	f3ef 8305 	mrs	r3, IPSR
 8006730:	617b      	str	r3, [r7, #20]
  return(result);
 8006732:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10f      	bne.n	8006758 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006738:	f3ef 8310 	mrs	r3, PRIMASK
 800673c:	613b      	str	r3, [r7, #16]
  return(result);
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d109      	bne.n	8006758 <osMessageQueueGetCount+0x44>
 8006744:	4b0b      	ldr	r3, [pc, #44]	; (8006774 <osMessageQueueGetCount+0x60>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b02      	cmp	r3, #2
 800674a:	d10a      	bne.n	8006762 <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800674c:	f3ef 8311 	mrs	r3, BASEPRI
 8006750:	60fb      	str	r3, [r7, #12]
  return(result);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d004      	beq.n	8006762 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8006758:	69b8      	ldr	r0, [r7, #24]
 800675a:	f000 fd43 	bl	80071e4 <uxQueueMessagesWaitingFromISR>
 800675e:	61f8      	str	r0, [r7, #28]
 8006760:	e003      	b.n	800676a <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8006762:	69b8      	ldr	r0, [r7, #24]
 8006764:	f000 fd20 	bl	80071a8 <uxQueueMessagesWaiting>
 8006768:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800676a:	69fb      	ldr	r3, [r7, #28]
}
 800676c:	4618      	mov	r0, r3
 800676e:	3720      	adds	r7, #32
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	200004e0 	.word	0x200004e0

08006778 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4a06      	ldr	r2, [pc, #24]	; (80067a0 <vApplicationGetIdleTaskMemory+0x28>)
 8006788:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	4a05      	ldr	r2, [pc, #20]	; (80067a4 <vApplicationGetIdleTaskMemory+0x2c>)
 800678e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2280      	movs	r2, #128	; 0x80
 8006794:	601a      	str	r2, [r3, #0]
}
 8006796:	bf00      	nop
 8006798:	3714      	adds	r7, #20
 800679a:	46bd      	mov	sp, r7
 800679c:	bc80      	pop	{r7}
 800679e:	4770      	bx	lr
 80067a0:	200004e4 	.word	0x200004e4
 80067a4:	2000059c 	.word	0x2000059c

080067a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	4a07      	ldr	r2, [pc, #28]	; (80067d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80067b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	4a06      	ldr	r2, [pc, #24]	; (80067d8 <vApplicationGetTimerTaskMemory+0x30>)
 80067be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067c6:	601a      	str	r2, [r3, #0]
}
 80067c8:	bf00      	nop
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bc80      	pop	{r7}
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	2000079c 	.word	0x2000079c
 80067d8:	20000854 	.word	0x20000854

080067dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f103 0208 	add.w	r2, r3, #8
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f04f 32ff 	mov.w	r2, #4294967295
 80067f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f103 0208 	add.w	r2, r3, #8
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f103 0208 	add.w	r2, r3, #8
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	bc80      	pop	{r7}
 8006818:	4770      	bx	lr

0800681a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800681a:	b480      	push	{r7}
 800681c:	b083      	sub	sp, #12
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	bc80      	pop	{r7}
 8006830:	4770      	bx	lr

08006832 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006832:	b480      	push	{r7}
 8006834:	b085      	sub	sp, #20
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	689a      	ldr	r2, [r3, #8]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	683a      	ldr	r2, [r7, #0]
 8006856:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	683a      	ldr	r2, [r7, #0]
 800685c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	1c5a      	adds	r2, r3, #1
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	601a      	str	r2, [r3, #0]
}
 800686e:	bf00      	nop
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	bc80      	pop	{r7}
 8006876:	4770      	bx	lr

08006878 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800688e:	d103      	bne.n	8006898 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	60fb      	str	r3, [r7, #12]
 8006896:	e00c      	b.n	80068b2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3308      	adds	r3, #8
 800689c:	60fb      	str	r3, [r7, #12]
 800689e:	e002      	b.n	80068a6 <vListInsert+0x2e>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	60fb      	str	r3, [r7, #12]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d2f6      	bcs.n	80068a0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	685a      	ldr	r2, [r3, #4]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	1c5a      	adds	r2, r3, #1
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	601a      	str	r2, [r3, #0]
}
 80068de:	bf00      	nop
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bc80      	pop	{r7}
 80068e6:	4770      	bx	lr

080068e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	6892      	ldr	r2, [r2, #8]
 80068fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	6852      	ldr	r2, [r2, #4]
 8006908:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	429a      	cmp	r2, r3
 8006912:	d103      	bne.n	800691c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	689a      	ldr	r2, [r3, #8]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	1e5a      	subs	r2, r3, #1
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	bc80      	pop	{r7}
 8006938:	4770      	bx	lr
	...

0800693c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10a      	bne.n	8006966 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006962:	bf00      	nop
 8006964:	e7fe      	b.n	8006964 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006966:	f002 f951 	bl	8008c0c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006972:	68f9      	ldr	r1, [r7, #12]
 8006974:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006976:	fb01 f303 	mul.w	r3, r1, r3
 800697a:	441a      	add	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006996:	3b01      	subs	r3, #1
 8006998:	68f9      	ldr	r1, [r7, #12]
 800699a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800699c:	fb01 f303 	mul.w	r3, r1, r3
 80069a0:	441a      	add	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	22ff      	movs	r2, #255	; 0xff
 80069aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	22ff      	movs	r2, #255	; 0xff
 80069b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d114      	bne.n	80069e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d01a      	beq.n	80069fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	3310      	adds	r3, #16
 80069c8:	4618      	mov	r0, r3
 80069ca:	f001 fa13 	bl	8007df4 <xTaskRemoveFromEventList>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d012      	beq.n	80069fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80069d4:	4b0c      	ldr	r3, [pc, #48]	; (8006a08 <xQueueGenericReset+0xcc>)
 80069d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069da:	601a      	str	r2, [r3, #0]
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	e009      	b.n	80069fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	3310      	adds	r3, #16
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7ff fef6 	bl	80067dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	3324      	adds	r3, #36	; 0x24
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7ff fef1 	bl	80067dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80069fa:	f002 f937 	bl	8008c6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80069fe:	2301      	movs	r3, #1
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	e000ed04 	.word	0xe000ed04

08006a0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b08e      	sub	sp, #56	; 0x38
 8006a10:	af02      	add	r7, sp, #8
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
 8006a18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10a      	bne.n	8006a36 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a32:	bf00      	nop
 8006a34:	e7fe      	b.n	8006a34 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10a      	bne.n	8006a52 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a4e:	bf00      	nop
 8006a50:	e7fe      	b.n	8006a50 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d002      	beq.n	8006a5e <xQueueGenericCreateStatic+0x52>
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d001      	beq.n	8006a62 <xQueueGenericCreateStatic+0x56>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e000      	b.n	8006a64 <xQueueGenericCreateStatic+0x58>
 8006a62:	2300      	movs	r3, #0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10a      	bne.n	8006a7e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6c:	f383 8811 	msr	BASEPRI, r3
 8006a70:	f3bf 8f6f 	isb	sy
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	623b      	str	r3, [r7, #32]
}
 8006a7a:	bf00      	nop
 8006a7c:	e7fe      	b.n	8006a7c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d102      	bne.n	8006a8a <xQueueGenericCreateStatic+0x7e>
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <xQueueGenericCreateStatic+0x82>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e000      	b.n	8006a90 <xQueueGenericCreateStatic+0x84>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10a      	bne.n	8006aaa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a98:	f383 8811 	msr	BASEPRI, r3
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	f3bf 8f4f 	dsb	sy
 8006aa4:	61fb      	str	r3, [r7, #28]
}
 8006aa6:	bf00      	nop
 8006aa8:	e7fe      	b.n	8006aa8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006aaa:	2350      	movs	r3, #80	; 0x50
 8006aac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	2b50      	cmp	r3, #80	; 0x50
 8006ab2:	d00a      	beq.n	8006aca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	61bb      	str	r3, [r7, #24]
}
 8006ac6:	bf00      	nop
 8006ac8:	e7fe      	b.n	8006ac8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00d      	beq.n	8006af0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006adc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	68b9      	ldr	r1, [r7, #8]
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f000 f843 	bl	8006b76 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3730      	adds	r7, #48	; 0x30
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b08a      	sub	sp, #40	; 0x28
 8006afe:	af02      	add	r7, sp, #8
 8006b00:	60f8      	str	r0, [r7, #12]
 8006b02:	60b9      	str	r1, [r7, #8]
 8006b04:	4613      	mov	r3, r2
 8006b06:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10a      	bne.n	8006b24 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	613b      	str	r3, [r7, #16]
}
 8006b20:	bf00      	nop
 8006b22:	e7fe      	b.n	8006b22 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d102      	bne.n	8006b30 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	61fb      	str	r3, [r7, #28]
 8006b2e:	e004      	b.n	8006b3a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	fb02 f303 	mul.w	r3, r2, r3
 8006b38:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	3350      	adds	r3, #80	; 0x50
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f002 f964 	bl	8008e0c <pvPortMalloc>
 8006b44:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00f      	beq.n	8006b6c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	3350      	adds	r3, #80	; 0x50
 8006b50:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b5a:	79fa      	ldrb	r2, [r7, #7]
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	4613      	mov	r3, r2
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	68b9      	ldr	r1, [r7, #8]
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f000 f805 	bl	8006b76 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006b6c:	69bb      	ldr	r3, [r7, #24]
	}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3720      	adds	r7, #32
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b084      	sub	sp, #16
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	60f8      	str	r0, [r7, #12]
 8006b7e:	60b9      	str	r1, [r7, #8]
 8006b80:	607a      	str	r2, [r7, #4]
 8006b82:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d103      	bne.n	8006b92 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	601a      	str	r2, [r3, #0]
 8006b90:	e002      	b.n	8006b98 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	68ba      	ldr	r2, [r7, #8]
 8006ba2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	69b8      	ldr	r0, [r7, #24]
 8006ba8:	f7ff fec8 	bl	800693c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	78fa      	ldrb	r2, [r7, #3]
 8006bb0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006bb4:	bf00      	nop
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b08e      	sub	sp, #56	; 0x38
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
 8006bc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d10a      	bne.n	8006bee <xQueueGenericSend+0x32>
	__asm volatile
 8006bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bdc:	f383 8811 	msr	BASEPRI, r3
 8006be0:	f3bf 8f6f 	isb	sy
 8006be4:	f3bf 8f4f 	dsb	sy
 8006be8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006bea:	bf00      	nop
 8006bec:	e7fe      	b.n	8006bec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d103      	bne.n	8006bfc <xQueueGenericSend+0x40>
 8006bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d101      	bne.n	8006c00 <xQueueGenericSend+0x44>
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e000      	b.n	8006c02 <xQueueGenericSend+0x46>
 8006c00:	2300      	movs	r3, #0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10a      	bne.n	8006c1c <xQueueGenericSend+0x60>
	__asm volatile
 8006c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c18:	bf00      	nop
 8006c1a:	e7fe      	b.n	8006c1a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d103      	bne.n	8006c2a <xQueueGenericSend+0x6e>
 8006c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d101      	bne.n	8006c2e <xQueueGenericSend+0x72>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e000      	b.n	8006c30 <xQueueGenericSend+0x74>
 8006c2e:	2300      	movs	r3, #0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10a      	bne.n	8006c4a <xQueueGenericSend+0x8e>
	__asm volatile
 8006c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c38:	f383 8811 	msr	BASEPRI, r3
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	623b      	str	r3, [r7, #32]
}
 8006c46:	bf00      	nop
 8006c48:	e7fe      	b.n	8006c48 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c4a:	f001 fa99 	bl	8008180 <xTaskGetSchedulerState>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d102      	bne.n	8006c5a <xQueueGenericSend+0x9e>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <xQueueGenericSend+0xa2>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e000      	b.n	8006c60 <xQueueGenericSend+0xa4>
 8006c5e:	2300      	movs	r3, #0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10a      	bne.n	8006c7a <xQueueGenericSend+0xbe>
	__asm volatile
 8006c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	61fb      	str	r3, [r7, #28]
}
 8006c76:	bf00      	nop
 8006c78:	e7fe      	b.n	8006c78 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c7a:	f001 ffc7 	bl	8008c0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d302      	bcc.n	8006c90 <xQueueGenericSend+0xd4>
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d129      	bne.n	8006ce4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	68b9      	ldr	r1, [r7, #8]
 8006c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c96:	f000 fac0 	bl	800721a <prvCopyDataToQueue>
 8006c9a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d010      	beq.n	8006cc6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca6:	3324      	adds	r3, #36	; 0x24
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f001 f8a3 	bl	8007df4 <xTaskRemoveFromEventList>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d013      	beq.n	8006cdc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006cb4:	4b3f      	ldr	r3, [pc, #252]	; (8006db4 <xQueueGenericSend+0x1f8>)
 8006cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cba:	601a      	str	r2, [r3, #0]
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	f3bf 8f6f 	isb	sy
 8006cc4:	e00a      	b.n	8006cdc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d007      	beq.n	8006cdc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ccc:	4b39      	ldr	r3, [pc, #228]	; (8006db4 <xQueueGenericSend+0x1f8>)
 8006cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	f3bf 8f4f 	dsb	sy
 8006cd8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006cdc:	f001 ffc6 	bl	8008c6c <vPortExitCritical>
				return pdPASS;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e063      	b.n	8006dac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d103      	bne.n	8006cf2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cea:	f001 ffbf 	bl	8008c6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	e05c      	b.n	8006dac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d106      	bne.n	8006d06 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cf8:	f107 0314 	add.w	r3, r7, #20
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f001 f8dd 	bl	8007ebc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d02:	2301      	movs	r3, #1
 8006d04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d06:	f001 ffb1 	bl	8008c6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d0a:	f000 fe47 	bl	800799c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d0e:	f001 ff7d 	bl	8008c0c <vPortEnterCritical>
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d18:	b25b      	sxtb	r3, r3
 8006d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d1e:	d103      	bne.n	8006d28 <xQueueGenericSend+0x16c>
 8006d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d2e:	b25b      	sxtb	r3, r3
 8006d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d34:	d103      	bne.n	8006d3e <xQueueGenericSend+0x182>
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d3e:	f001 ff95 	bl	8008c6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d42:	1d3a      	adds	r2, r7, #4
 8006d44:	f107 0314 	add.w	r3, r7, #20
 8006d48:	4611      	mov	r1, r2
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f001 f8cc 	bl	8007ee8 <xTaskCheckForTimeOut>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d124      	bne.n	8006da0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d58:	f000 fb57 	bl	800740a <prvIsQueueFull>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d018      	beq.n	8006d94 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d64:	3310      	adds	r3, #16
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	4611      	mov	r1, r2
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f000 fff2 	bl	8007d54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d72:	f000 fae2 	bl	800733a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d76:	f000 fe1f 	bl	80079b8 <xTaskResumeAll>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f47f af7c 	bne.w	8006c7a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006d82:	4b0c      	ldr	r3, [pc, #48]	; (8006db4 <xQueueGenericSend+0x1f8>)
 8006d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d88:	601a      	str	r2, [r3, #0]
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	e772      	b.n	8006c7a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d96:	f000 fad0 	bl	800733a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d9a:	f000 fe0d 	bl	80079b8 <xTaskResumeAll>
 8006d9e:	e76c      	b.n	8006c7a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006da0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006da2:	f000 faca 	bl	800733a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006da6:	f000 fe07 	bl	80079b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006daa:	2300      	movs	r3, #0
		}
	}
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3738      	adds	r7, #56	; 0x38
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	e000ed04 	.word	0xe000ed04

08006db8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b08e      	sub	sp, #56	; 0x38
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
 8006dc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d10a      	bne.n	8006de6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006de2:	bf00      	nop
 8006de4:	e7fe      	b.n	8006de4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d103      	bne.n	8006df4 <xQueueGenericSendFromISR+0x3c>
 8006dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <xQueueGenericSendFromISR+0x40>
 8006df4:	2301      	movs	r3, #1
 8006df6:	e000      	b.n	8006dfa <xQueueGenericSendFromISR+0x42>
 8006df8:	2300      	movs	r3, #0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10a      	bne.n	8006e14 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e02:	f383 8811 	msr	BASEPRI, r3
 8006e06:	f3bf 8f6f 	isb	sy
 8006e0a:	f3bf 8f4f 	dsb	sy
 8006e0e:	623b      	str	r3, [r7, #32]
}
 8006e10:	bf00      	nop
 8006e12:	e7fe      	b.n	8006e12 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d103      	bne.n	8006e22 <xQueueGenericSendFromISR+0x6a>
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d101      	bne.n	8006e26 <xQueueGenericSendFromISR+0x6e>
 8006e22:	2301      	movs	r3, #1
 8006e24:	e000      	b.n	8006e28 <xQueueGenericSendFromISR+0x70>
 8006e26:	2300      	movs	r3, #0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10a      	bne.n	8006e42 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e30:	f383 8811 	msr	BASEPRI, r3
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	61fb      	str	r3, [r7, #28]
}
 8006e3e:	bf00      	nop
 8006e40:	e7fe      	b.n	8006e40 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e42:	f001 ffa5 	bl	8008d90 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006e46:	f3ef 8211 	mrs	r2, BASEPRI
 8006e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4e:	f383 8811 	msr	BASEPRI, r3
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	f3bf 8f4f 	dsb	sy
 8006e5a:	61ba      	str	r2, [r7, #24]
 8006e5c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006e5e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d302      	bcc.n	8006e74 <xQueueGenericSendFromISR+0xbc>
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d12c      	bne.n	8006ece <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	68b9      	ldr	r1, [r7, #8]
 8006e82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e84:	f000 f9c9 	bl	800721a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e88:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e90:	d112      	bne.n	8006eb8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d016      	beq.n	8006ec8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9c:	3324      	adds	r3, #36	; 0x24
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 ffa8 	bl	8007df4 <xTaskRemoveFromEventList>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00e      	beq.n	8006ec8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00b      	beq.n	8006ec8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	601a      	str	r2, [r3, #0]
 8006eb6:	e007      	b.n	8006ec8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006eb8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	b25a      	sxtb	r2, r3
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006ecc:	e001      	b.n	8006ed2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006edc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3738      	adds	r7, #56	; 0x38
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b08c      	sub	sp, #48	; 0x30
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10a      	bne.n	8006f18 <xQueueReceive+0x30>
	__asm volatile
 8006f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f06:	f383 8811 	msr	BASEPRI, r3
 8006f0a:	f3bf 8f6f 	isb	sy
 8006f0e:	f3bf 8f4f 	dsb	sy
 8006f12:	623b      	str	r3, [r7, #32]
}
 8006f14:	bf00      	nop
 8006f16:	e7fe      	b.n	8006f16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d103      	bne.n	8006f26 <xQueueReceive+0x3e>
 8006f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d101      	bne.n	8006f2a <xQueueReceive+0x42>
 8006f26:	2301      	movs	r3, #1
 8006f28:	e000      	b.n	8006f2c <xQueueReceive+0x44>
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10a      	bne.n	8006f46 <xQueueReceive+0x5e>
	__asm volatile
 8006f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	61fb      	str	r3, [r7, #28]
}
 8006f42:	bf00      	nop
 8006f44:	e7fe      	b.n	8006f44 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f46:	f001 f91b 	bl	8008180 <xTaskGetSchedulerState>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d102      	bne.n	8006f56 <xQueueReceive+0x6e>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <xQueueReceive+0x72>
 8006f56:	2301      	movs	r3, #1
 8006f58:	e000      	b.n	8006f5c <xQueueReceive+0x74>
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d10a      	bne.n	8006f76 <xQueueReceive+0x8e>
	__asm volatile
 8006f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f64:	f383 8811 	msr	BASEPRI, r3
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	61bb      	str	r3, [r7, #24]
}
 8006f72:	bf00      	nop
 8006f74:	e7fe      	b.n	8006f74 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f76:	f001 fe49 	bl	8008c0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d01f      	beq.n	8006fc6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f86:	68b9      	ldr	r1, [r7, #8]
 8006f88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f8a:	f000 f9b0 	bl	80072ee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f90:	1e5a      	subs	r2, r3, #1
 8006f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f94:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00f      	beq.n	8006fbe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa0:	3310      	adds	r3, #16
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 ff26 	bl	8007df4 <xTaskRemoveFromEventList>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d007      	beq.n	8006fbe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006fae:	4b3d      	ldr	r3, [pc, #244]	; (80070a4 <xQueueReceive+0x1bc>)
 8006fb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	f3bf 8f4f 	dsb	sy
 8006fba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006fbe:	f001 fe55 	bl	8008c6c <vPortExitCritical>
				return pdPASS;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e069      	b.n	800709a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d103      	bne.n	8006fd4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006fcc:	f001 fe4e 	bl	8008c6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	e062      	b.n	800709a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d106      	bne.n	8006fe8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fda:	f107 0310 	add.w	r3, r7, #16
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 ff6c 	bl	8007ebc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fe8:	f001 fe40 	bl	8008c6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fec:	f000 fcd6 	bl	800799c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ff0:	f001 fe0c 	bl	8008c0c <vPortEnterCritical>
 8006ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ffa:	b25b      	sxtb	r3, r3
 8006ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007000:	d103      	bne.n	800700a <xQueueReceive+0x122>
 8007002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007004:	2200      	movs	r2, #0
 8007006:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800700a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007010:	b25b      	sxtb	r3, r3
 8007012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007016:	d103      	bne.n	8007020 <xQueueReceive+0x138>
 8007018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007020:	f001 fe24 	bl	8008c6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007024:	1d3a      	adds	r2, r7, #4
 8007026:	f107 0310 	add.w	r3, r7, #16
 800702a:	4611      	mov	r1, r2
 800702c:	4618      	mov	r0, r3
 800702e:	f000 ff5b 	bl	8007ee8 <xTaskCheckForTimeOut>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d123      	bne.n	8007080 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007038:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800703a:	f000 f9d0 	bl	80073de <prvIsQueueEmpty>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d017      	beq.n	8007074 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007046:	3324      	adds	r3, #36	; 0x24
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	4611      	mov	r1, r2
 800704c:	4618      	mov	r0, r3
 800704e:	f000 fe81 	bl	8007d54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007054:	f000 f971 	bl	800733a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007058:	f000 fcae 	bl	80079b8 <xTaskResumeAll>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d189      	bne.n	8006f76 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007062:	4b10      	ldr	r3, [pc, #64]	; (80070a4 <xQueueReceive+0x1bc>)
 8007064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	e780      	b.n	8006f76 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007076:	f000 f960 	bl	800733a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800707a:	f000 fc9d 	bl	80079b8 <xTaskResumeAll>
 800707e:	e77a      	b.n	8006f76 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007080:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007082:	f000 f95a 	bl	800733a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007086:	f000 fc97 	bl	80079b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800708a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800708c:	f000 f9a7 	bl	80073de <prvIsQueueEmpty>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	f43f af6f 	beq.w	8006f76 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007098:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800709a:	4618      	mov	r0, r3
 800709c:	3730      	adds	r7, #48	; 0x30
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	e000ed04 	.word	0xe000ed04

080070a8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b08e      	sub	sp, #56	; 0x38
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80070b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10a      	bne.n	80070d4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80070be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c2:	f383 8811 	msr	BASEPRI, r3
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	623b      	str	r3, [r7, #32]
}
 80070d0:	bf00      	nop
 80070d2:	e7fe      	b.n	80070d2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d103      	bne.n	80070e2 <xQueueReceiveFromISR+0x3a>
 80070da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <xQueueReceiveFromISR+0x3e>
 80070e2:	2301      	movs	r3, #1
 80070e4:	e000      	b.n	80070e8 <xQueueReceiveFromISR+0x40>
 80070e6:	2300      	movs	r3, #0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10a      	bne.n	8007102 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80070ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	61fb      	str	r3, [r7, #28]
}
 80070fe:	bf00      	nop
 8007100:	e7fe      	b.n	8007100 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007102:	f001 fe45 	bl	8008d90 <vPortValidateInterruptPriority>
	__asm volatile
 8007106:	f3ef 8211 	mrs	r2, BASEPRI
 800710a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	61ba      	str	r2, [r7, #24]
 800711c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800711e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007120:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007126:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712a:	2b00      	cmp	r3, #0
 800712c:	d02f      	beq.n	800718e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800712e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007130:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007138:	68b9      	ldr	r1, [r7, #8]
 800713a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800713c:	f000 f8d7 	bl	80072ee <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007142:	1e5a      	subs	r2, r3, #1
 8007144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007146:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007148:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800714c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007150:	d112      	bne.n	8007178 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d016      	beq.n	8007188 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800715a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715c:	3310      	adds	r3, #16
 800715e:	4618      	mov	r0, r3
 8007160:	f000 fe48 	bl	8007df4 <xTaskRemoveFromEventList>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00e      	beq.n	8007188 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00b      	beq.n	8007188 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	e007      	b.n	8007188 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800717c:	3301      	adds	r3, #1
 800717e:	b2db      	uxtb	r3, r3
 8007180:	b25a      	sxtb	r2, r3
 8007182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007188:	2301      	movs	r3, #1
 800718a:	637b      	str	r3, [r7, #52]	; 0x34
 800718c:	e001      	b.n	8007192 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800718e:	2300      	movs	r3, #0
 8007190:	637b      	str	r3, [r7, #52]	; 0x34
 8007192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007194:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	f383 8811 	msr	BASEPRI, r3
}
 800719c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800719e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3738      	adds	r7, #56	; 0x38
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10a      	bne.n	80071cc <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80071b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	60bb      	str	r3, [r7, #8]
}
 80071c8:	bf00      	nop
 80071ca:	e7fe      	b.n	80071ca <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80071cc:	f001 fd1e 	bl	8008c0c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80071d6:	f001 fd49 	bl	8008c6c <vPortExitCritical>

	return uxReturn;
 80071da:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10a      	bne.n	8007208 <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 80071f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f6:	f383 8811 	msr	BASEPRI, r3
 80071fa:	f3bf 8f6f 	isb	sy
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	60bb      	str	r3, [r7, #8]
}
 8007204:	bf00      	nop
 8007206:	e7fe      	b.n	8007206 <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720c:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 800720e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007210:	4618      	mov	r0, r3
 8007212:	3714      	adds	r7, #20
 8007214:	46bd      	mov	sp, r7
 8007216:	bc80      	pop	{r7}
 8007218:	4770      	bx	lr

0800721a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b086      	sub	sp, #24
 800721e:	af00      	add	r7, sp, #0
 8007220:	60f8      	str	r0, [r7, #12]
 8007222:	60b9      	str	r1, [r7, #8]
 8007224:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007226:	2300      	movs	r3, #0
 8007228:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10d      	bne.n	8007254 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d14d      	bne.n	80072dc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	4618      	mov	r0, r3
 8007246:	f000 ffb9 	bl	80081bc <xTaskPriorityDisinherit>
 800724a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	605a      	str	r2, [r3, #4]
 8007252:	e043      	b.n	80072dc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d119      	bne.n	800728e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6898      	ldr	r0, [r3, #8]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	461a      	mov	r2, r3
 8007264:	68b9      	ldr	r1, [r7, #8]
 8007266:	f003 fe70 	bl	800af4a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	689a      	ldr	r2, [r3, #8]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	441a      	add	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	429a      	cmp	r2, r3
 8007282:	d32b      	bcc.n	80072dc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	609a      	str	r2, [r3, #8]
 800728c:	e026      	b.n	80072dc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	68d8      	ldr	r0, [r3, #12]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007296:	461a      	mov	r2, r3
 8007298:	68b9      	ldr	r1, [r7, #8]
 800729a:	f003 fe56 	bl	800af4a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a6:	425b      	negs	r3, r3
 80072a8:	441a      	add	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	68da      	ldr	r2, [r3, #12]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d207      	bcs.n	80072ca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c2:	425b      	negs	r3, r3
 80072c4:	441a      	add	r2, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d105      	bne.n	80072dc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d002      	beq.n	80072dc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	3b01      	subs	r3, #1
 80072da:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	1c5a      	adds	r2, r3, #1
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80072e4:	697b      	ldr	r3, [r7, #20]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3718      	adds	r7, #24
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b082      	sub	sp, #8
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d018      	beq.n	8007332 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	68da      	ldr	r2, [r3, #12]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007308:	441a      	add	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68da      	ldr	r2, [r3, #12]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	429a      	cmp	r2, r3
 8007318:	d303      	bcc.n	8007322 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	68d9      	ldr	r1, [r3, #12]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732a:	461a      	mov	r2, r3
 800732c:	6838      	ldr	r0, [r7, #0]
 800732e:	f003 fe0c 	bl	800af4a <memcpy>
	}
}
 8007332:	bf00      	nop
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b084      	sub	sp, #16
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007342:	f001 fc63 	bl	8008c0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800734c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800734e:	e011      	b.n	8007374 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	2b00      	cmp	r3, #0
 8007356:	d012      	beq.n	800737e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	3324      	adds	r3, #36	; 0x24
 800735c:	4618      	mov	r0, r3
 800735e:	f000 fd49 	bl	8007df4 <xTaskRemoveFromEventList>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d001      	beq.n	800736c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007368:	f000 fe20 	bl	8007fac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800736c:	7bfb      	ldrb	r3, [r7, #15]
 800736e:	3b01      	subs	r3, #1
 8007370:	b2db      	uxtb	r3, r3
 8007372:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007374:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007378:	2b00      	cmp	r3, #0
 800737a:	dce9      	bgt.n	8007350 <prvUnlockQueue+0x16>
 800737c:	e000      	b.n	8007380 <prvUnlockQueue+0x46>
					break;
 800737e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	22ff      	movs	r2, #255	; 0xff
 8007384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007388:	f001 fc70 	bl	8008c6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800738c:	f001 fc3e 	bl	8008c0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007396:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007398:	e011      	b.n	80073be <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d012      	beq.n	80073c8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	3310      	adds	r3, #16
 80073a6:	4618      	mov	r0, r3
 80073a8:	f000 fd24 	bl	8007df4 <xTaskRemoveFromEventList>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d001      	beq.n	80073b6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80073b2:	f000 fdfb 	bl	8007fac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80073b6:	7bbb      	ldrb	r3, [r7, #14]
 80073b8:	3b01      	subs	r3, #1
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	dce9      	bgt.n	800739a <prvUnlockQueue+0x60>
 80073c6:	e000      	b.n	80073ca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80073c8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	22ff      	movs	r2, #255	; 0xff
 80073ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80073d2:	f001 fc4b 	bl	8008c6c <vPortExitCritical>
}
 80073d6:	bf00      	nop
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b084      	sub	sp, #16
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073e6:	f001 fc11 	bl	8008c0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d102      	bne.n	80073f8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80073f2:	2301      	movs	r3, #1
 80073f4:	60fb      	str	r3, [r7, #12]
 80073f6:	e001      	b.n	80073fc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80073f8:	2300      	movs	r3, #0
 80073fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073fc:	f001 fc36 	bl	8008c6c <vPortExitCritical>

	return xReturn;
 8007400:	68fb      	ldr	r3, [r7, #12]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b084      	sub	sp, #16
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007412:	f001 fbfb 	bl	8008c0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800741e:	429a      	cmp	r2, r3
 8007420:	d102      	bne.n	8007428 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007422:	2301      	movs	r3, #1
 8007424:	60fb      	str	r3, [r7, #12]
 8007426:	e001      	b.n	800742c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007428:	2300      	movs	r3, #0
 800742a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800742c:	f001 fc1e 	bl	8008c6c <vPortExitCritical>

	return xReturn;
 8007430:	68fb      	ldr	r3, [r7, #12]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
	...

0800743c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007446:	2300      	movs	r3, #0
 8007448:	60fb      	str	r3, [r7, #12]
 800744a:	e014      	b.n	8007476 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800744c:	4a0e      	ldr	r2, [pc, #56]	; (8007488 <vQueueAddToRegistry+0x4c>)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10b      	bne.n	8007470 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007458:	490b      	ldr	r1, [pc, #44]	; (8007488 <vQueueAddToRegistry+0x4c>)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	683a      	ldr	r2, [r7, #0]
 800745e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007462:	4a09      	ldr	r2, [pc, #36]	; (8007488 <vQueueAddToRegistry+0x4c>)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	00db      	lsls	r3, r3, #3
 8007468:	4413      	add	r3, r2
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800746e:	e006      	b.n	800747e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	3301      	adds	r3, #1
 8007474:	60fb      	str	r3, [r7, #12]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2b07      	cmp	r3, #7
 800747a:	d9e7      	bls.n	800744c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800747c:	bf00      	nop
 800747e:	bf00      	nop
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	bc80      	pop	{r7}
 8007486:	4770      	bx	lr
 8007488:	20000c54 	.word	0x20000c54

0800748c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800749c:	f001 fbb6 	bl	8008c0c <vPortEnterCritical>
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074a6:	b25b      	sxtb	r3, r3
 80074a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ac:	d103      	bne.n	80074b6 <vQueueWaitForMessageRestricted+0x2a>
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074bc:	b25b      	sxtb	r3, r3
 80074be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c2:	d103      	bne.n	80074cc <vQueueWaitForMessageRestricted+0x40>
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074cc:	f001 fbce 	bl	8008c6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d106      	bne.n	80074e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	3324      	adds	r3, #36	; 0x24
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	68b9      	ldr	r1, [r7, #8]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f000 fc5b 	bl	8007d9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80074e6:	6978      	ldr	r0, [r7, #20]
 80074e8:	f7ff ff27 	bl	800733a <prvUnlockQueue>
	}
 80074ec:	bf00      	nop
 80074ee:	3718      	adds	r7, #24
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b08e      	sub	sp, #56	; 0x38
 80074f8:	af04      	add	r7, sp, #16
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
 8007500:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007504:	2b00      	cmp	r3, #0
 8007506:	d10a      	bne.n	800751e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750c:	f383 8811 	msr	BASEPRI, r3
 8007510:	f3bf 8f6f 	isb	sy
 8007514:	f3bf 8f4f 	dsb	sy
 8007518:	623b      	str	r3, [r7, #32]
}
 800751a:	bf00      	nop
 800751c:	e7fe      	b.n	800751c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800751e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10a      	bne.n	800753a <xTaskCreateStatic+0x46>
	__asm volatile
 8007524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007528:	f383 8811 	msr	BASEPRI, r3
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	61fb      	str	r3, [r7, #28]
}
 8007536:	bf00      	nop
 8007538:	e7fe      	b.n	8007538 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800753a:	23b8      	movs	r3, #184	; 0xb8
 800753c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	2bb8      	cmp	r3, #184	; 0xb8
 8007542:	d00a      	beq.n	800755a <xTaskCreateStatic+0x66>
	__asm volatile
 8007544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	61bb      	str	r3, [r7, #24]
}
 8007556:	bf00      	nop
 8007558:	e7fe      	b.n	8007558 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800755a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755c:	2b00      	cmp	r3, #0
 800755e:	d01e      	beq.n	800759e <xTaskCreateStatic+0xaa>
 8007560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007562:	2b00      	cmp	r3, #0
 8007564:	d01b      	beq.n	800759e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007568:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800756e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007572:	2202      	movs	r2, #2
 8007574:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007578:	2300      	movs	r3, #0
 800757a:	9303      	str	r3, [sp, #12]
 800757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757e:	9302      	str	r3, [sp, #8]
 8007580:	f107 0314 	add.w	r3, r7, #20
 8007584:	9301      	str	r3, [sp, #4]
 8007586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007588:	9300      	str	r3, [sp, #0]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	68b9      	ldr	r1, [r7, #8]
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f000 f851 	bl	8007638 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007596:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007598:	f000 f8ec 	bl	8007774 <prvAddNewTaskToReadyList>
 800759c:	e001      	b.n	80075a2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800759e:	2300      	movs	r3, #0
 80075a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80075a2:	697b      	ldr	r3, [r7, #20]
	}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3728      	adds	r7, #40	; 0x28
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b08c      	sub	sp, #48	; 0x30
 80075b0:	af04      	add	r7, sp, #16
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	603b      	str	r3, [r7, #0]
 80075b8:	4613      	mov	r3, r2
 80075ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075bc:	88fb      	ldrh	r3, [r7, #6]
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	4618      	mov	r0, r3
 80075c2:	f001 fc23 	bl	8008e0c <pvPortMalloc>
 80075c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00e      	beq.n	80075ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80075ce:	20b8      	movs	r0, #184	; 0xb8
 80075d0:	f001 fc1c 	bl	8008e0c <pvPortMalloc>
 80075d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d003      	beq.n	80075e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	697a      	ldr	r2, [r7, #20]
 80075e0:	631a      	str	r2, [r3, #48]	; 0x30
 80075e2:	e005      	b.n	80075f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80075e4:	6978      	ldr	r0, [r7, #20]
 80075e6:	f001 fcd5 	bl	8008f94 <vPortFree>
 80075ea:	e001      	b.n	80075f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80075ec:	2300      	movs	r3, #0
 80075ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d017      	beq.n	8007626 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80075fe:	88fa      	ldrh	r2, [r7, #6]
 8007600:	2300      	movs	r3, #0
 8007602:	9303      	str	r3, [sp, #12]
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	9302      	str	r3, [sp, #8]
 8007608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760a:	9301      	str	r3, [sp, #4]
 800760c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	68b9      	ldr	r1, [r7, #8]
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f000 f80f 	bl	8007638 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800761a:	69f8      	ldr	r0, [r7, #28]
 800761c:	f000 f8aa 	bl	8007774 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007620:	2301      	movs	r3, #1
 8007622:	61bb      	str	r3, [r7, #24]
 8007624:	e002      	b.n	800762c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007626:	f04f 33ff 	mov.w	r3, #4294967295
 800762a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800762c:	69bb      	ldr	r3, [r7, #24]
	}
 800762e:	4618      	mov	r0, r3
 8007630:	3720      	adds	r7, #32
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
	...

08007638 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b088      	sub	sp, #32
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
 8007644:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007648:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	461a      	mov	r2, r3
 8007650:	21a5      	movs	r1, #165	; 0xa5
 8007652:	f003 fae8 	bl	800ac26 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007660:	3b01      	subs	r3, #1
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4413      	add	r3, r2
 8007666:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	f023 0307 	bic.w	r3, r3, #7
 800766e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	f003 0307 	and.w	r3, r3, #7
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00a      	beq.n	8007690 <prvInitialiseNewTask+0x58>
	__asm volatile
 800767a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	617b      	str	r3, [r7, #20]
}
 800768c:	bf00      	nop
 800768e:	e7fe      	b.n	800768e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007690:	2300      	movs	r3, #0
 8007692:	61fb      	str	r3, [r7, #28]
 8007694:	e012      	b.n	80076bc <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	4413      	add	r3, r2
 800769c:	7819      	ldrb	r1, [r3, #0]
 800769e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	4413      	add	r3, r2
 80076a4:	3334      	adds	r3, #52	; 0x34
 80076a6:	460a      	mov	r2, r1
 80076a8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	4413      	add	r3, r2
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d006      	beq.n	80076c4 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	3301      	adds	r3, #1
 80076ba:	61fb      	str	r3, [r7, #28]
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	2b1f      	cmp	r3, #31
 80076c0:	d9e9      	bls.n	8007696 <prvInitialiseNewTask+0x5e>
 80076c2:	e000      	b.n	80076c6 <prvInitialiseNewTask+0x8e>
		{
			break;
 80076c4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80076c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80076ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d0:	2b37      	cmp	r3, #55	; 0x37
 80076d2:	d901      	bls.n	80076d8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80076d4:	2337      	movs	r3, #55	; 0x37
 80076d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80076d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80076de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076e2:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 80076e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e6:	2200      	movs	r2, #0
 80076e8:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80076ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ec:	3304      	adds	r3, #4
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7ff f893 	bl	800681a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80076f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f6:	3318      	adds	r3, #24
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7ff f88e 	bl	800681a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80076fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007702:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007706:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800770e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007712:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007716:	2200      	movs	r2, #0
 8007718:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800771c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771e:	2200      	movs	r2, #0
 8007720:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007726:	3364      	adds	r3, #100	; 0x64
 8007728:	224c      	movs	r2, #76	; 0x4c
 800772a:	2100      	movs	r1, #0
 800772c:	4618      	mov	r0, r3
 800772e:	f003 fa7a 	bl	800ac26 <memset>
 8007732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007734:	4a0c      	ldr	r2, [pc, #48]	; (8007768 <prvInitialiseNewTask+0x130>)
 8007736:	669a      	str	r2, [r3, #104]	; 0x68
 8007738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773a:	4a0c      	ldr	r2, [pc, #48]	; (800776c <prvInitialiseNewTask+0x134>)
 800773c:	66da      	str	r2, [r3, #108]	; 0x6c
 800773e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007740:	4a0b      	ldr	r2, [pc, #44]	; (8007770 <prvInitialiseNewTask+0x138>)
 8007742:	671a      	str	r2, [r3, #112]	; 0x70
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007744:	683a      	ldr	r2, [r7, #0]
 8007746:	68f9      	ldr	r1, [r7, #12]
 8007748:	69b8      	ldr	r0, [r7, #24]
 800774a:	f001 f96b 	bl	8008a24 <pxPortInitialiseStack>
 800774e:	4602      	mov	r2, r0
 8007750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007752:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007756:	2b00      	cmp	r3, #0
 8007758:	d002      	beq.n	8007760 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800775a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800775e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007760:	bf00      	nop
 8007762:	3720      	adds	r7, #32
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	200032e8 	.word	0x200032e8
 800776c:	20003350 	.word	0x20003350
 8007770:	200033b8 	.word	0x200033b8

08007774 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800777c:	f001 fa46 	bl	8008c0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007780:	4b2d      	ldr	r3, [pc, #180]	; (8007838 <prvAddNewTaskToReadyList+0xc4>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	3301      	adds	r3, #1
 8007786:	4a2c      	ldr	r2, [pc, #176]	; (8007838 <prvAddNewTaskToReadyList+0xc4>)
 8007788:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800778a:	4b2c      	ldr	r3, [pc, #176]	; (800783c <prvAddNewTaskToReadyList+0xc8>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d109      	bne.n	80077a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007792:	4a2a      	ldr	r2, [pc, #168]	; (800783c <prvAddNewTaskToReadyList+0xc8>)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007798:	4b27      	ldr	r3, [pc, #156]	; (8007838 <prvAddNewTaskToReadyList+0xc4>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d110      	bne.n	80077c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80077a0:	f000 fc28 	bl	8007ff4 <prvInitialiseTaskLists>
 80077a4:	e00d      	b.n	80077c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80077a6:	4b26      	ldr	r3, [pc, #152]	; (8007840 <prvAddNewTaskToReadyList+0xcc>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d109      	bne.n	80077c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80077ae:	4b23      	ldr	r3, [pc, #140]	; (800783c <prvAddNewTaskToReadyList+0xc8>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d802      	bhi.n	80077c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80077bc:	4a1f      	ldr	r2, [pc, #124]	; (800783c <prvAddNewTaskToReadyList+0xc8>)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80077c2:	4b20      	ldr	r3, [pc, #128]	; (8007844 <prvAddNewTaskToReadyList+0xd0>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	3301      	adds	r3, #1
 80077c8:	4a1e      	ldr	r2, [pc, #120]	; (8007844 <prvAddNewTaskToReadyList+0xd0>)
 80077ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80077cc:	4b1d      	ldr	r3, [pc, #116]	; (8007844 <prvAddNewTaskToReadyList+0xd0>)
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d8:	4b1b      	ldr	r3, [pc, #108]	; (8007848 <prvAddNewTaskToReadyList+0xd4>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d903      	bls.n	80077e8 <prvAddNewTaskToReadyList+0x74>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e4:	4a18      	ldr	r2, [pc, #96]	; (8007848 <prvAddNewTaskToReadyList+0xd4>)
 80077e6:	6013      	str	r3, [r2, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ec:	4613      	mov	r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	4413      	add	r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4a15      	ldr	r2, [pc, #84]	; (800784c <prvAddNewTaskToReadyList+0xd8>)
 80077f6:	441a      	add	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	3304      	adds	r3, #4
 80077fc:	4619      	mov	r1, r3
 80077fe:	4610      	mov	r0, r2
 8007800:	f7ff f817 	bl	8006832 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007804:	f001 fa32 	bl	8008c6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007808:	4b0d      	ldr	r3, [pc, #52]	; (8007840 <prvAddNewTaskToReadyList+0xcc>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00e      	beq.n	800782e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007810:	4b0a      	ldr	r3, [pc, #40]	; (800783c <prvAddNewTaskToReadyList+0xc8>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781a:	429a      	cmp	r2, r3
 800781c:	d207      	bcs.n	800782e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800781e:	4b0c      	ldr	r3, [pc, #48]	; (8007850 <prvAddNewTaskToReadyList+0xdc>)
 8007820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800782e:	bf00      	nop
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	20001168 	.word	0x20001168
 800783c:	20000c94 	.word	0x20000c94
 8007840:	20001174 	.word	0x20001174
 8007844:	20001184 	.word	0x20001184
 8007848:	20001170 	.word	0x20001170
 800784c:	20000c98 	.word	0x20000c98
 8007850:	e000ed04 	.word	0xe000ed04

08007854 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800785c:	2300      	movs	r3, #0
 800785e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d017      	beq.n	8007896 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007866:	4b13      	ldr	r3, [pc, #76]	; (80078b4 <vTaskDelay+0x60>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00a      	beq.n	8007884 <vTaskDelay+0x30>
	__asm volatile
 800786e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	60bb      	str	r3, [r7, #8]
}
 8007880:	bf00      	nop
 8007882:	e7fe      	b.n	8007882 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007884:	f000 f88a 	bl	800799c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007888:	2100      	movs	r1, #0
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fd64 	bl	8008358 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007890:	f000 f892 	bl	80079b8 <xTaskResumeAll>
 8007894:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d107      	bne.n	80078ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800789c:	4b06      	ldr	r3, [pc, #24]	; (80078b8 <vTaskDelay+0x64>)
 800789e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078ac:	bf00      	nop
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	20001190 	.word	0x20001190
 80078b8:	e000ed04 	.word	0xe000ed04

080078bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b08a      	sub	sp, #40	; 0x28
 80078c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80078c2:	2300      	movs	r3, #0
 80078c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80078c6:	2300      	movs	r3, #0
 80078c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80078ca:	463a      	mov	r2, r7
 80078cc:	1d39      	adds	r1, r7, #4
 80078ce:	f107 0308 	add.w	r3, r7, #8
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7fe ff50 	bl	8006778 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80078d8:	6839      	ldr	r1, [r7, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	9202      	str	r2, [sp, #8]
 80078e0:	9301      	str	r3, [sp, #4]
 80078e2:	2300      	movs	r3, #0
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	2300      	movs	r3, #0
 80078e8:	460a      	mov	r2, r1
 80078ea:	4924      	ldr	r1, [pc, #144]	; (800797c <vTaskStartScheduler+0xc0>)
 80078ec:	4824      	ldr	r0, [pc, #144]	; (8007980 <vTaskStartScheduler+0xc4>)
 80078ee:	f7ff fe01 	bl	80074f4 <xTaskCreateStatic>
 80078f2:	4603      	mov	r3, r0
 80078f4:	4a23      	ldr	r2, [pc, #140]	; (8007984 <vTaskStartScheduler+0xc8>)
 80078f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80078f8:	4b22      	ldr	r3, [pc, #136]	; (8007984 <vTaskStartScheduler+0xc8>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d002      	beq.n	8007906 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007900:	2301      	movs	r3, #1
 8007902:	617b      	str	r3, [r7, #20]
 8007904:	e001      	b.n	800790a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007906:	2300      	movs	r3, #0
 8007908:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d102      	bne.n	8007916 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007910:	f000 fd76 	bl	8008400 <xTimerCreateTimerTask>
 8007914:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2b01      	cmp	r3, #1
 800791a:	d11b      	bne.n	8007954 <vTaskStartScheduler+0x98>
	__asm volatile
 800791c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	613b      	str	r3, [r7, #16]
}
 800792e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007930:	4b15      	ldr	r3, [pc, #84]	; (8007988 <vTaskStartScheduler+0xcc>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	3364      	adds	r3, #100	; 0x64
 8007936:	4a15      	ldr	r2, [pc, #84]	; (800798c <vTaskStartScheduler+0xd0>)
 8007938:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800793a:	4b15      	ldr	r3, [pc, #84]	; (8007990 <vTaskStartScheduler+0xd4>)
 800793c:	f04f 32ff 	mov.w	r2, #4294967295
 8007940:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007942:	4b14      	ldr	r3, [pc, #80]	; (8007994 <vTaskStartScheduler+0xd8>)
 8007944:	2201      	movs	r2, #1
 8007946:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007948:	4b13      	ldr	r3, [pc, #76]	; (8007998 <vTaskStartScheduler+0xdc>)
 800794a:	2200      	movs	r2, #0
 800794c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800794e:	f001 f8eb 	bl	8008b28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007952:	e00e      	b.n	8007972 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800795a:	d10a      	bne.n	8007972 <vTaskStartScheduler+0xb6>
	__asm volatile
 800795c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007960:	f383 8811 	msr	BASEPRI, r3
 8007964:	f3bf 8f6f 	isb	sy
 8007968:	f3bf 8f4f 	dsb	sy
 800796c:	60fb      	str	r3, [r7, #12]
}
 800796e:	bf00      	nop
 8007970:	e7fe      	b.n	8007970 <vTaskStartScheduler+0xb4>
}
 8007972:	bf00      	nop
 8007974:	3718      	adds	r7, #24
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	0800d918 	.word	0x0800d918
 8007980:	08007fc5 	.word	0x08007fc5
 8007984:	2000118c 	.word	0x2000118c
 8007988:	20000c94 	.word	0x20000c94
 800798c:	200001d4 	.word	0x200001d4
 8007990:	20001188 	.word	0x20001188
 8007994:	20001174 	.word	0x20001174
 8007998:	2000116c 	.word	0x2000116c

0800799c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800799c:	b480      	push	{r7}
 800799e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80079a0:	4b04      	ldr	r3, [pc, #16]	; (80079b4 <vTaskSuspendAll+0x18>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	3301      	adds	r3, #1
 80079a6:	4a03      	ldr	r2, [pc, #12]	; (80079b4 <vTaskSuspendAll+0x18>)
 80079a8:	6013      	str	r3, [r2, #0]
}
 80079aa:	bf00      	nop
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bc80      	pop	{r7}
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	20001190 	.word	0x20001190

080079b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80079be:	2300      	movs	r3, #0
 80079c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80079c2:	2300      	movs	r3, #0
 80079c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80079c6:	4b42      	ldr	r3, [pc, #264]	; (8007ad0 <xTaskResumeAll+0x118>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10a      	bne.n	80079e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80079ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	603b      	str	r3, [r7, #0]
}
 80079e0:	bf00      	nop
 80079e2:	e7fe      	b.n	80079e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80079e4:	f001 f912 	bl	8008c0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80079e8:	4b39      	ldr	r3, [pc, #228]	; (8007ad0 <xTaskResumeAll+0x118>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3b01      	subs	r3, #1
 80079ee:	4a38      	ldr	r2, [pc, #224]	; (8007ad0 <xTaskResumeAll+0x118>)
 80079f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079f2:	4b37      	ldr	r3, [pc, #220]	; (8007ad0 <xTaskResumeAll+0x118>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d162      	bne.n	8007ac0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80079fa:	4b36      	ldr	r3, [pc, #216]	; (8007ad4 <xTaskResumeAll+0x11c>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d05e      	beq.n	8007ac0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a02:	e02f      	b.n	8007a64 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007a04:	4b34      	ldr	r3, [pc, #208]	; (8007ad8 <xTaskResumeAll+0x120>)
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	3318      	adds	r3, #24
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7fe ff69 	bl	80068e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	3304      	adds	r3, #4
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7fe ff64 	bl	80068e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a24:	4b2d      	ldr	r3, [pc, #180]	; (8007adc <xTaskResumeAll+0x124>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d903      	bls.n	8007a34 <xTaskResumeAll+0x7c>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a30:	4a2a      	ldr	r2, [pc, #168]	; (8007adc <xTaskResumeAll+0x124>)
 8007a32:	6013      	str	r3, [r2, #0]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a38:	4613      	mov	r3, r2
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	4413      	add	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4a27      	ldr	r2, [pc, #156]	; (8007ae0 <xTaskResumeAll+0x128>)
 8007a42:	441a      	add	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	3304      	adds	r3, #4
 8007a48:	4619      	mov	r1, r3
 8007a4a:	4610      	mov	r0, r2
 8007a4c:	f7fe fef1 	bl	8006832 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a54:	4b23      	ldr	r3, [pc, #140]	; (8007ae4 <xTaskResumeAll+0x12c>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d302      	bcc.n	8007a64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007a5e:	4b22      	ldr	r3, [pc, #136]	; (8007ae8 <xTaskResumeAll+0x130>)
 8007a60:	2201      	movs	r2, #1
 8007a62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a64:	4b1c      	ldr	r3, [pc, #112]	; (8007ad8 <xTaskResumeAll+0x120>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1cb      	bne.n	8007a04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a72:	f000 fb61 	bl	8008138 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007a76:	4b1d      	ldr	r3, [pc, #116]	; (8007aec <xTaskResumeAll+0x134>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d010      	beq.n	8007aa4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a82:	f000 f845 	bl	8007b10 <xTaskIncrementTick>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d002      	beq.n	8007a92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007a8c:	4b16      	ldr	r3, [pc, #88]	; (8007ae8 <xTaskResumeAll+0x130>)
 8007a8e:	2201      	movs	r2, #1
 8007a90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	3b01      	subs	r3, #1
 8007a96:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1f1      	bne.n	8007a82 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007a9e:	4b13      	ldr	r3, [pc, #76]	; (8007aec <xTaskResumeAll+0x134>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007aa4:	4b10      	ldr	r3, [pc, #64]	; (8007ae8 <xTaskResumeAll+0x130>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d009      	beq.n	8007ac0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007aac:	2301      	movs	r3, #1
 8007aae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007ab0:	4b0f      	ldr	r3, [pc, #60]	; (8007af0 <xTaskResumeAll+0x138>)
 8007ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ab6:	601a      	str	r2, [r3, #0]
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ac0:	f001 f8d4 	bl	8008c6c <vPortExitCritical>

	return xAlreadyYielded;
 8007ac4:	68bb      	ldr	r3, [r7, #8]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	20001190 	.word	0x20001190
 8007ad4:	20001168 	.word	0x20001168
 8007ad8:	20001128 	.word	0x20001128
 8007adc:	20001170 	.word	0x20001170
 8007ae0:	20000c98 	.word	0x20000c98
 8007ae4:	20000c94 	.word	0x20000c94
 8007ae8:	2000117c 	.word	0x2000117c
 8007aec:	20001178 	.word	0x20001178
 8007af0:	e000ed04 	.word	0xe000ed04

08007af4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007afa:	4b04      	ldr	r3, [pc, #16]	; (8007b0c <xTaskGetTickCount+0x18>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007b00:	687b      	ldr	r3, [r7, #4]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bc80      	pop	{r7}
 8007b0a:	4770      	bx	lr
 8007b0c:	2000116c 	.word	0x2000116c

08007b10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b16:	2300      	movs	r3, #0
 8007b18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b1a:	4b51      	ldr	r3, [pc, #324]	; (8007c60 <xTaskIncrementTick+0x150>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f040 808e 	bne.w	8007c40 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b24:	4b4f      	ldr	r3, [pc, #316]	; (8007c64 <xTaskIncrementTick+0x154>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b2c:	4a4d      	ldr	r2, [pc, #308]	; (8007c64 <xTaskIncrementTick+0x154>)
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d120      	bne.n	8007b7a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b38:	4b4b      	ldr	r3, [pc, #300]	; (8007c68 <xTaskIncrementTick+0x158>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00a      	beq.n	8007b58 <xTaskIncrementTick+0x48>
	__asm volatile
 8007b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b46:	f383 8811 	msr	BASEPRI, r3
 8007b4a:	f3bf 8f6f 	isb	sy
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	603b      	str	r3, [r7, #0]
}
 8007b54:	bf00      	nop
 8007b56:	e7fe      	b.n	8007b56 <xTaskIncrementTick+0x46>
 8007b58:	4b43      	ldr	r3, [pc, #268]	; (8007c68 <xTaskIncrementTick+0x158>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	60fb      	str	r3, [r7, #12]
 8007b5e:	4b43      	ldr	r3, [pc, #268]	; (8007c6c <xTaskIncrementTick+0x15c>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a41      	ldr	r2, [pc, #260]	; (8007c68 <xTaskIncrementTick+0x158>)
 8007b64:	6013      	str	r3, [r2, #0]
 8007b66:	4a41      	ldr	r2, [pc, #260]	; (8007c6c <xTaskIncrementTick+0x15c>)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6013      	str	r3, [r2, #0]
 8007b6c:	4b40      	ldr	r3, [pc, #256]	; (8007c70 <xTaskIncrementTick+0x160>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	3301      	adds	r3, #1
 8007b72:	4a3f      	ldr	r2, [pc, #252]	; (8007c70 <xTaskIncrementTick+0x160>)
 8007b74:	6013      	str	r3, [r2, #0]
 8007b76:	f000 fadf 	bl	8008138 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b7a:	4b3e      	ldr	r3, [pc, #248]	; (8007c74 <xTaskIncrementTick+0x164>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d34e      	bcc.n	8007c22 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b84:	4b38      	ldr	r3, [pc, #224]	; (8007c68 <xTaskIncrementTick+0x158>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d101      	bne.n	8007b92 <xTaskIncrementTick+0x82>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e000      	b.n	8007b94 <xTaskIncrementTick+0x84>
 8007b92:	2300      	movs	r3, #0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d004      	beq.n	8007ba2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b98:	4b36      	ldr	r3, [pc, #216]	; (8007c74 <xTaskIncrementTick+0x164>)
 8007b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b9e:	601a      	str	r2, [r3, #0]
					break;
 8007ba0:	e03f      	b.n	8007c22 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007ba2:	4b31      	ldr	r3, [pc, #196]	; (8007c68 <xTaskIncrementTick+0x158>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007bb2:	693a      	ldr	r2, [r7, #16]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d203      	bcs.n	8007bc2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007bba:	4a2e      	ldr	r2, [pc, #184]	; (8007c74 <xTaskIncrementTick+0x164>)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6013      	str	r3, [r2, #0]
						break;
 8007bc0:	e02f      	b.n	8007c22 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	3304      	adds	r3, #4
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fe fe8e 	bl	80068e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d004      	beq.n	8007bde <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	3318      	adds	r3, #24
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7fe fe85 	bl	80068e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be2:	4b25      	ldr	r3, [pc, #148]	; (8007c78 <xTaskIncrementTick+0x168>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d903      	bls.n	8007bf2 <xTaskIncrementTick+0xe2>
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bee:	4a22      	ldr	r2, [pc, #136]	; (8007c78 <xTaskIncrementTick+0x168>)
 8007bf0:	6013      	str	r3, [r2, #0]
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4413      	add	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4a1f      	ldr	r2, [pc, #124]	; (8007c7c <xTaskIncrementTick+0x16c>)
 8007c00:	441a      	add	r2, r3
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	3304      	adds	r3, #4
 8007c06:	4619      	mov	r1, r3
 8007c08:	4610      	mov	r0, r2
 8007c0a:	f7fe fe12 	bl	8006832 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c12:	4b1b      	ldr	r3, [pc, #108]	; (8007c80 <xTaskIncrementTick+0x170>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d3b3      	bcc.n	8007b84 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c20:	e7b0      	b.n	8007b84 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c22:	4b17      	ldr	r3, [pc, #92]	; (8007c80 <xTaskIncrementTick+0x170>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c28:	4914      	ldr	r1, [pc, #80]	; (8007c7c <xTaskIncrementTick+0x16c>)
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	4413      	add	r3, r2
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	440b      	add	r3, r1
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d907      	bls.n	8007c4a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	617b      	str	r3, [r7, #20]
 8007c3e:	e004      	b.n	8007c4a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007c40:	4b10      	ldr	r3, [pc, #64]	; (8007c84 <xTaskIncrementTick+0x174>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	3301      	adds	r3, #1
 8007c46:	4a0f      	ldr	r2, [pc, #60]	; (8007c84 <xTaskIncrementTick+0x174>)
 8007c48:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007c4a:	4b0f      	ldr	r3, [pc, #60]	; (8007c88 <xTaskIncrementTick+0x178>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d001      	beq.n	8007c56 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007c52:	2301      	movs	r3, #1
 8007c54:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007c56:	697b      	ldr	r3, [r7, #20]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3718      	adds	r7, #24
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	20001190 	.word	0x20001190
 8007c64:	2000116c 	.word	0x2000116c
 8007c68:	20001120 	.word	0x20001120
 8007c6c:	20001124 	.word	0x20001124
 8007c70:	20001180 	.word	0x20001180
 8007c74:	20001188 	.word	0x20001188
 8007c78:	20001170 	.word	0x20001170
 8007c7c:	20000c98 	.word	0x20000c98
 8007c80:	20000c94 	.word	0x20000c94
 8007c84:	20001178 	.word	0x20001178
 8007c88:	2000117c 	.word	0x2000117c

08007c8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c92:	4b2a      	ldr	r3, [pc, #168]	; (8007d3c <vTaskSwitchContext+0xb0>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d003      	beq.n	8007ca2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c9a:	4b29      	ldr	r3, [pc, #164]	; (8007d40 <vTaskSwitchContext+0xb4>)
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ca0:	e046      	b.n	8007d30 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007ca2:	4b27      	ldr	r3, [pc, #156]	; (8007d40 <vTaskSwitchContext+0xb4>)
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007ca8:	4b26      	ldr	r3, [pc, #152]	; (8007d44 <vTaskSwitchContext+0xb8>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	60fb      	str	r3, [r7, #12]
 8007cae:	e010      	b.n	8007cd2 <vTaskSwitchContext+0x46>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10a      	bne.n	8007ccc <vTaskSwitchContext+0x40>
	__asm volatile
 8007cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cba:	f383 8811 	msr	BASEPRI, r3
 8007cbe:	f3bf 8f6f 	isb	sy
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	607b      	str	r3, [r7, #4]
}
 8007cc8:	bf00      	nop
 8007cca:	e7fe      	b.n	8007cca <vTaskSwitchContext+0x3e>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	60fb      	str	r3, [r7, #12]
 8007cd2:	491d      	ldr	r1, [pc, #116]	; (8007d48 <vTaskSwitchContext+0xbc>)
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4413      	add	r3, r2
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	440b      	add	r3, r1
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d0e4      	beq.n	8007cb0 <vTaskSwitchContext+0x24>
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	4613      	mov	r3, r2
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	4413      	add	r3, r2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4a15      	ldr	r2, [pc, #84]	; (8007d48 <vTaskSwitchContext+0xbc>)
 8007cf2:	4413      	add	r3, r2
 8007cf4:	60bb      	str	r3, [r7, #8]
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	605a      	str	r2, [r3, #4]
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	3308      	adds	r3, #8
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d104      	bne.n	8007d16 <vTaskSwitchContext+0x8a>
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	685a      	ldr	r2, [r3, #4]
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	605a      	str	r2, [r3, #4]
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	4a0b      	ldr	r2, [pc, #44]	; (8007d4c <vTaskSwitchContext+0xc0>)
 8007d1e:	6013      	str	r3, [r2, #0]
 8007d20:	4a08      	ldr	r2, [pc, #32]	; (8007d44 <vTaskSwitchContext+0xb8>)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007d26:	4b09      	ldr	r3, [pc, #36]	; (8007d4c <vTaskSwitchContext+0xc0>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3364      	adds	r3, #100	; 0x64
 8007d2c:	4a08      	ldr	r2, [pc, #32]	; (8007d50 <vTaskSwitchContext+0xc4>)
 8007d2e:	6013      	str	r3, [r2, #0]
}
 8007d30:	bf00      	nop
 8007d32:	3714      	adds	r7, #20
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bc80      	pop	{r7}
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	20001190 	.word	0x20001190
 8007d40:	2000117c 	.word	0x2000117c
 8007d44:	20001170 	.word	0x20001170
 8007d48:	20000c98 	.word	0x20000c98
 8007d4c:	20000c94 	.word	0x20000c94
 8007d50:	200001d4 	.word	0x200001d4

08007d54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10a      	bne.n	8007d7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	60fb      	str	r3, [r7, #12]
}
 8007d76:	bf00      	nop
 8007d78:	e7fe      	b.n	8007d78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d7a:	4b07      	ldr	r3, [pc, #28]	; (8007d98 <vTaskPlaceOnEventList+0x44>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	3318      	adds	r3, #24
 8007d80:	4619      	mov	r1, r3
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f7fe fd78 	bl	8006878 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d88:	2101      	movs	r1, #1
 8007d8a:	6838      	ldr	r0, [r7, #0]
 8007d8c:	f000 fae4 	bl	8008358 <prvAddCurrentTaskToDelayedList>
}
 8007d90:	bf00      	nop
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	20000c94 	.word	0x20000c94

08007d9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d10a      	bne.n	8007dc4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db2:	f383 8811 	msr	BASEPRI, r3
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	f3bf 8f4f 	dsb	sy
 8007dbe:	617b      	str	r3, [r7, #20]
}
 8007dc0:	bf00      	nop
 8007dc2:	e7fe      	b.n	8007dc2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007dc4:	4b0a      	ldr	r3, [pc, #40]	; (8007df0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	3318      	adds	r3, #24
 8007dca:	4619      	mov	r1, r3
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f7fe fd30 	bl	8006832 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d002      	beq.n	8007dde <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8007ddc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007dde:	6879      	ldr	r1, [r7, #4]
 8007de0:	68b8      	ldr	r0, [r7, #8]
 8007de2:	f000 fab9 	bl	8008358 <prvAddCurrentTaskToDelayedList>
	}
 8007de6:	bf00      	nop
 8007de8:	3718      	adds	r7, #24
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	20000c94 	.word	0x20000c94

08007df4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10a      	bne.n	8007e20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0e:	f383 8811 	msr	BASEPRI, r3
 8007e12:	f3bf 8f6f 	isb	sy
 8007e16:	f3bf 8f4f 	dsb	sy
 8007e1a:	60fb      	str	r3, [r7, #12]
}
 8007e1c:	bf00      	nop
 8007e1e:	e7fe      	b.n	8007e1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	3318      	adds	r3, #24
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7fe fd5f 	bl	80068e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e2a:	4b1e      	ldr	r3, [pc, #120]	; (8007ea4 <xTaskRemoveFromEventList+0xb0>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d11d      	bne.n	8007e6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	3304      	adds	r3, #4
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7fe fd56 	bl	80068e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e40:	4b19      	ldr	r3, [pc, #100]	; (8007ea8 <xTaskRemoveFromEventList+0xb4>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d903      	bls.n	8007e50 <xTaskRemoveFromEventList+0x5c>
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4c:	4a16      	ldr	r2, [pc, #88]	; (8007ea8 <xTaskRemoveFromEventList+0xb4>)
 8007e4e:	6013      	str	r3, [r2, #0]
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e54:	4613      	mov	r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	4a13      	ldr	r2, [pc, #76]	; (8007eac <xTaskRemoveFromEventList+0xb8>)
 8007e5e:	441a      	add	r2, r3
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	3304      	adds	r3, #4
 8007e64:	4619      	mov	r1, r3
 8007e66:	4610      	mov	r0, r2
 8007e68:	f7fe fce3 	bl	8006832 <vListInsertEnd>
 8007e6c:	e005      	b.n	8007e7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	3318      	adds	r3, #24
 8007e72:	4619      	mov	r1, r3
 8007e74:	480e      	ldr	r0, [pc, #56]	; (8007eb0 <xTaskRemoveFromEventList+0xbc>)
 8007e76:	f7fe fcdc 	bl	8006832 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e7e:	4b0d      	ldr	r3, [pc, #52]	; (8007eb4 <xTaskRemoveFromEventList+0xc0>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d905      	bls.n	8007e94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e8c:	4b0a      	ldr	r3, [pc, #40]	; (8007eb8 <xTaskRemoveFromEventList+0xc4>)
 8007e8e:	2201      	movs	r2, #1
 8007e90:	601a      	str	r2, [r3, #0]
 8007e92:	e001      	b.n	8007e98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007e94:	2300      	movs	r3, #0
 8007e96:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007e98:	697b      	ldr	r3, [r7, #20]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3718      	adds	r7, #24
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	20001190 	.word	0x20001190
 8007ea8:	20001170 	.word	0x20001170
 8007eac:	20000c98 	.word	0x20000c98
 8007eb0:	20001128 	.word	0x20001128
 8007eb4:	20000c94 	.word	0x20000c94
 8007eb8:	2000117c 	.word	0x2000117c

08007ebc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ec4:	4b06      	ldr	r3, [pc, #24]	; (8007ee0 <vTaskInternalSetTimeOutState+0x24>)
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ecc:	4b05      	ldr	r3, [pc, #20]	; (8007ee4 <vTaskInternalSetTimeOutState+0x28>)
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	605a      	str	r2, [r3, #4]
}
 8007ed4:	bf00      	nop
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bc80      	pop	{r7}
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	20001180 	.word	0x20001180
 8007ee4:	2000116c 	.word	0x2000116c

08007ee8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b088      	sub	sp, #32
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d10a      	bne.n	8007f0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efc:	f383 8811 	msr	BASEPRI, r3
 8007f00:	f3bf 8f6f 	isb	sy
 8007f04:	f3bf 8f4f 	dsb	sy
 8007f08:	613b      	str	r3, [r7, #16]
}
 8007f0a:	bf00      	nop
 8007f0c:	e7fe      	b.n	8007f0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10a      	bne.n	8007f2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	60fb      	str	r3, [r7, #12]
}
 8007f26:	bf00      	nop
 8007f28:	e7fe      	b.n	8007f28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007f2a:	f000 fe6f 	bl	8008c0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f2e:	4b1d      	ldr	r3, [pc, #116]	; (8007fa4 <xTaskCheckForTimeOut+0xbc>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	69ba      	ldr	r2, [r7, #24]
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f46:	d102      	bne.n	8007f4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	61fb      	str	r3, [r7, #28]
 8007f4c:	e023      	b.n	8007f96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	4b15      	ldr	r3, [pc, #84]	; (8007fa8 <xTaskCheckForTimeOut+0xc0>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d007      	beq.n	8007f6a <xTaskCheckForTimeOut+0x82>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	69ba      	ldr	r2, [r7, #24]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d302      	bcc.n	8007f6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f64:	2301      	movs	r3, #1
 8007f66:	61fb      	str	r3, [r7, #28]
 8007f68:	e015      	b.n	8007f96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d20b      	bcs.n	8007f8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	1ad2      	subs	r2, r2, r3
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f7ff ff9b 	bl	8007ebc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f86:	2300      	movs	r3, #0
 8007f88:	61fb      	str	r3, [r7, #28]
 8007f8a:	e004      	b.n	8007f96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f92:	2301      	movs	r3, #1
 8007f94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f96:	f000 fe69 	bl	8008c6c <vPortExitCritical>

	return xReturn;
 8007f9a:	69fb      	ldr	r3, [r7, #28]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3720      	adds	r7, #32
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	2000116c 	.word	0x2000116c
 8007fa8:	20001180 	.word	0x20001180

08007fac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007fac:	b480      	push	{r7}
 8007fae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007fb0:	4b03      	ldr	r3, [pc, #12]	; (8007fc0 <vTaskMissedYield+0x14>)
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	601a      	str	r2, [r3, #0]
}
 8007fb6:	bf00      	nop
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bc80      	pop	{r7}
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	2000117c 	.word	0x2000117c

08007fc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007fcc:	f000 f852 	bl	8008074 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007fd0:	4b06      	ldr	r3, [pc, #24]	; (8007fec <prvIdleTask+0x28>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d9f9      	bls.n	8007fcc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007fd8:	4b05      	ldr	r3, [pc, #20]	; (8007ff0 <prvIdleTask+0x2c>)
 8007fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fde:	601a      	str	r2, [r3, #0]
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007fe8:	e7f0      	b.n	8007fcc <prvIdleTask+0x8>
 8007fea:	bf00      	nop
 8007fec:	20000c98 	.word	0x20000c98
 8007ff0:	e000ed04 	.word	0xe000ed04

08007ff4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	607b      	str	r3, [r7, #4]
 8007ffe:	e00c      	b.n	800801a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	4613      	mov	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4413      	add	r3, r2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4a12      	ldr	r2, [pc, #72]	; (8008054 <prvInitialiseTaskLists+0x60>)
 800800c:	4413      	add	r3, r2
 800800e:	4618      	mov	r0, r3
 8008010:	f7fe fbe4 	bl	80067dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	3301      	adds	r3, #1
 8008018:	607b      	str	r3, [r7, #4]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2b37      	cmp	r3, #55	; 0x37
 800801e:	d9ef      	bls.n	8008000 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008020:	480d      	ldr	r0, [pc, #52]	; (8008058 <prvInitialiseTaskLists+0x64>)
 8008022:	f7fe fbdb 	bl	80067dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008026:	480d      	ldr	r0, [pc, #52]	; (800805c <prvInitialiseTaskLists+0x68>)
 8008028:	f7fe fbd8 	bl	80067dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800802c:	480c      	ldr	r0, [pc, #48]	; (8008060 <prvInitialiseTaskLists+0x6c>)
 800802e:	f7fe fbd5 	bl	80067dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008032:	480c      	ldr	r0, [pc, #48]	; (8008064 <prvInitialiseTaskLists+0x70>)
 8008034:	f7fe fbd2 	bl	80067dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008038:	480b      	ldr	r0, [pc, #44]	; (8008068 <prvInitialiseTaskLists+0x74>)
 800803a:	f7fe fbcf 	bl	80067dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800803e:	4b0b      	ldr	r3, [pc, #44]	; (800806c <prvInitialiseTaskLists+0x78>)
 8008040:	4a05      	ldr	r2, [pc, #20]	; (8008058 <prvInitialiseTaskLists+0x64>)
 8008042:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008044:	4b0a      	ldr	r3, [pc, #40]	; (8008070 <prvInitialiseTaskLists+0x7c>)
 8008046:	4a05      	ldr	r2, [pc, #20]	; (800805c <prvInitialiseTaskLists+0x68>)
 8008048:	601a      	str	r2, [r3, #0]
}
 800804a:	bf00      	nop
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	20000c98 	.word	0x20000c98
 8008058:	200010f8 	.word	0x200010f8
 800805c:	2000110c 	.word	0x2000110c
 8008060:	20001128 	.word	0x20001128
 8008064:	2000113c 	.word	0x2000113c
 8008068:	20001154 	.word	0x20001154
 800806c:	20001120 	.word	0x20001120
 8008070:	20001124 	.word	0x20001124

08008074 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800807a:	e019      	b.n	80080b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800807c:	f000 fdc6 	bl	8008c0c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008080:	4b10      	ldr	r3, [pc, #64]	; (80080c4 <prvCheckTasksWaitingTermination+0x50>)
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	3304      	adds	r3, #4
 800808c:	4618      	mov	r0, r3
 800808e:	f7fe fc2b 	bl	80068e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008092:	4b0d      	ldr	r3, [pc, #52]	; (80080c8 <prvCheckTasksWaitingTermination+0x54>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	3b01      	subs	r3, #1
 8008098:	4a0b      	ldr	r2, [pc, #44]	; (80080c8 <prvCheckTasksWaitingTermination+0x54>)
 800809a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800809c:	4b0b      	ldr	r3, [pc, #44]	; (80080cc <prvCheckTasksWaitingTermination+0x58>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	3b01      	subs	r3, #1
 80080a2:	4a0a      	ldr	r2, [pc, #40]	; (80080cc <prvCheckTasksWaitingTermination+0x58>)
 80080a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80080a6:	f000 fde1 	bl	8008c6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f810 	bl	80080d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080b0:	4b06      	ldr	r3, [pc, #24]	; (80080cc <prvCheckTasksWaitingTermination+0x58>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1e1      	bne.n	800807c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80080b8:	bf00      	nop
 80080ba:	bf00      	nop
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	2000113c 	.word	0x2000113c
 80080c8:	20001168 	.word	0x20001168
 80080cc:	20001150 	.word	0x20001150

080080d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	3364      	adds	r3, #100	; 0x64
 80080dc:	4618      	mov	r0, r3
 80080de:	f002 fe55 	bl	800ad8c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d108      	bne.n	80080fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f0:	4618      	mov	r0, r3
 80080f2:	f000 ff4f 	bl	8008f94 <vPortFree>
				vPortFree( pxTCB );
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 ff4c 	bl	8008f94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80080fc:	e018      	b.n	8008130 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8008104:	2b01      	cmp	r3, #1
 8008106:	d103      	bne.n	8008110 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 ff43 	bl	8008f94 <vPortFree>
	}
 800810e:	e00f      	b.n	8008130 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8008116:	2b02      	cmp	r3, #2
 8008118:	d00a      	beq.n	8008130 <prvDeleteTCB+0x60>
	__asm volatile
 800811a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	60fb      	str	r3, [r7, #12]
}
 800812c:	bf00      	nop
 800812e:	e7fe      	b.n	800812e <prvDeleteTCB+0x5e>
	}
 8008130:	bf00      	nop
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800813e:	4b0e      	ldr	r3, [pc, #56]	; (8008178 <prvResetNextTaskUnblockTime+0x40>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d101      	bne.n	800814c <prvResetNextTaskUnblockTime+0x14>
 8008148:	2301      	movs	r3, #1
 800814a:	e000      	b.n	800814e <prvResetNextTaskUnblockTime+0x16>
 800814c:	2300      	movs	r3, #0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d004      	beq.n	800815c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008152:	4b0a      	ldr	r3, [pc, #40]	; (800817c <prvResetNextTaskUnblockTime+0x44>)
 8008154:	f04f 32ff 	mov.w	r2, #4294967295
 8008158:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800815a:	e008      	b.n	800816e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800815c:	4b06      	ldr	r3, [pc, #24]	; (8008178 <prvResetNextTaskUnblockTime+0x40>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	4a04      	ldr	r2, [pc, #16]	; (800817c <prvResetNextTaskUnblockTime+0x44>)
 800816c:	6013      	str	r3, [r2, #0]
}
 800816e:	bf00      	nop
 8008170:	370c      	adds	r7, #12
 8008172:	46bd      	mov	sp, r7
 8008174:	bc80      	pop	{r7}
 8008176:	4770      	bx	lr
 8008178:	20001120 	.word	0x20001120
 800817c:	20001188 	.word	0x20001188

08008180 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008186:	4b0b      	ldr	r3, [pc, #44]	; (80081b4 <xTaskGetSchedulerState+0x34>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d102      	bne.n	8008194 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800818e:	2301      	movs	r3, #1
 8008190:	607b      	str	r3, [r7, #4]
 8008192:	e008      	b.n	80081a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008194:	4b08      	ldr	r3, [pc, #32]	; (80081b8 <xTaskGetSchedulerState+0x38>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d102      	bne.n	80081a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800819c:	2302      	movs	r3, #2
 800819e:	607b      	str	r3, [r7, #4]
 80081a0:	e001      	b.n	80081a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80081a2:	2300      	movs	r3, #0
 80081a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80081a6:	687b      	ldr	r3, [r7, #4]
	}
 80081a8:	4618      	mov	r0, r3
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bc80      	pop	{r7}
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	20001174 	.word	0x20001174
 80081b8:	20001190 	.word	0x20001190

080081bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80081c8:	2300      	movs	r3, #0
 80081ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d056      	beq.n	8008280 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80081d2:	4b2e      	ldr	r3, [pc, #184]	; (800828c <xTaskPriorityDisinherit+0xd0>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	693a      	ldr	r2, [r7, #16]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d00a      	beq.n	80081f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80081dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e0:	f383 8811 	msr	BASEPRI, r3
 80081e4:	f3bf 8f6f 	isb	sy
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	60fb      	str	r3, [r7, #12]
}
 80081ee:	bf00      	nop
 80081f0:	e7fe      	b.n	80081f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10a      	bne.n	8008210 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80081fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fe:	f383 8811 	msr	BASEPRI, r3
 8008202:	f3bf 8f6f 	isb	sy
 8008206:	f3bf 8f4f 	dsb	sy
 800820a:	60bb      	str	r3, [r7, #8]
}
 800820c:	bf00      	nop
 800820e:	e7fe      	b.n	800820e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008214:	1e5a      	subs	r2, r3, #1
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008222:	429a      	cmp	r2, r3
 8008224:	d02c      	beq.n	8008280 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800822a:	2b00      	cmp	r3, #0
 800822c:	d128      	bne.n	8008280 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	3304      	adds	r3, #4
 8008232:	4618      	mov	r0, r3
 8008234:	f7fe fb58 	bl	80068e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008244:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008250:	4b0f      	ldr	r3, [pc, #60]	; (8008290 <xTaskPriorityDisinherit+0xd4>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	429a      	cmp	r2, r3
 8008256:	d903      	bls.n	8008260 <xTaskPriorityDisinherit+0xa4>
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825c:	4a0c      	ldr	r2, [pc, #48]	; (8008290 <xTaskPriorityDisinherit+0xd4>)
 800825e:	6013      	str	r3, [r2, #0]
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008264:	4613      	mov	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4413      	add	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	4a09      	ldr	r2, [pc, #36]	; (8008294 <xTaskPriorityDisinherit+0xd8>)
 800826e:	441a      	add	r2, r3
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	3304      	adds	r3, #4
 8008274:	4619      	mov	r1, r3
 8008276:	4610      	mov	r0, r2
 8008278:	f7fe fadb 	bl	8006832 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800827c:	2301      	movs	r3, #1
 800827e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008280:	697b      	ldr	r3, [r7, #20]
	}
 8008282:	4618      	mov	r0, r3
 8008284:	3718      	adds	r7, #24
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	20000c94 	.word	0x20000c94
 8008290:	20001170 	.word	0x20001170
 8008294:	20000c98 	.word	0x20000c98

08008298 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8008298:	b580      	push	{r7, lr}
 800829a:	b086      	sub	sp, #24
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]
 80082a4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80082a6:	f000 fcb1 	bl	8008c0c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80082aa:	4b29      	ldr	r3, [pc, #164]	; (8008350 <xTaskNotifyWait+0xb8>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d01c      	beq.n	80082f2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80082b8:	4b25      	ldr	r3, [pc, #148]	; (8008350 <xTaskNotifyWait+0xb8>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	43d2      	mvns	r2, r2
 80082c4:	400a      	ands	r2, r1
 80082c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80082ca:	4b21      	ldr	r3, [pc, #132]	; (8008350 <xTaskNotifyWait+0xb8>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

				if( xTicksToWait > ( TickType_t ) 0 )
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00b      	beq.n	80082f2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80082da:	2101      	movs	r1, #1
 80082dc:	6838      	ldr	r0, [r7, #0]
 80082de:	f000 f83b 	bl	8008358 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80082e2:	4b1c      	ldr	r3, [pc, #112]	; (8008354 <xTaskNotifyWait+0xbc>)
 80082e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082e8:	601a      	str	r2, [r3, #0]
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80082f2:	f000 fcbb 	bl	8008c6c <vPortExitCritical>

		taskENTER_CRITICAL();
 80082f6:	f000 fc89 	bl	8008c0c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d005      	beq.n	800830c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008300:	4b13      	ldr	r3, [pc, #76]	; (8008350 <xTaskNotifyWait+0xb8>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800830c:	4b10      	ldr	r3, [pc, #64]	; (8008350 <xTaskNotifyWait+0xb8>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8008314:	b2db      	uxtb	r3, r3
 8008316:	2b02      	cmp	r3, #2
 8008318:	d002      	beq.n	8008320 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800831a:	2300      	movs	r3, #0
 800831c:	617b      	str	r3, [r7, #20]
 800831e:	e00a      	b.n	8008336 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8008320:	4b0b      	ldr	r3, [pc, #44]	; (8008350 <xTaskNotifyWait+0xb8>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	43d2      	mvns	r2, r2
 800832c:	400a      	ands	r2, r1
 800832e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
				xReturn = pdTRUE;
 8008332:	2301      	movs	r3, #1
 8008334:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008336:	4b06      	ldr	r3, [pc, #24]	; (8008350 <xTaskNotifyWait+0xb8>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2200      	movs	r2, #0
 800833c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		}
		taskEXIT_CRITICAL();
 8008340:	f000 fc94 	bl	8008c6c <vPortExitCritical>

		return xReturn;
 8008344:	697b      	ldr	r3, [r7, #20]
	}
 8008346:	4618      	mov	r0, r3
 8008348:	3718      	adds	r7, #24
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	20000c94 	.word	0x20000c94
 8008354:	e000ed04 	.word	0xe000ed04

08008358 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008362:	4b21      	ldr	r3, [pc, #132]	; (80083e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008368:	4b20      	ldr	r3, [pc, #128]	; (80083ec <prvAddCurrentTaskToDelayedList+0x94>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3304      	adds	r3, #4
 800836e:	4618      	mov	r0, r3
 8008370:	f7fe faba 	bl	80068e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800837a:	d10a      	bne.n	8008392 <prvAddCurrentTaskToDelayedList+0x3a>
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d007      	beq.n	8008392 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008382:	4b1a      	ldr	r3, [pc, #104]	; (80083ec <prvAddCurrentTaskToDelayedList+0x94>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3304      	adds	r3, #4
 8008388:	4619      	mov	r1, r3
 800838a:	4819      	ldr	r0, [pc, #100]	; (80083f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800838c:	f7fe fa51 	bl	8006832 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008390:	e026      	b.n	80083e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	4413      	add	r3, r2
 8008398:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800839a:	4b14      	ldr	r3, [pc, #80]	; (80083ec <prvAddCurrentTaskToDelayedList+0x94>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d209      	bcs.n	80083be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083aa:	4b12      	ldr	r3, [pc, #72]	; (80083f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	4b0f      	ldr	r3, [pc, #60]	; (80083ec <prvAddCurrentTaskToDelayedList+0x94>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	3304      	adds	r3, #4
 80083b4:	4619      	mov	r1, r3
 80083b6:	4610      	mov	r0, r2
 80083b8:	f7fe fa5e 	bl	8006878 <vListInsert>
}
 80083bc:	e010      	b.n	80083e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083be:	4b0e      	ldr	r3, [pc, #56]	; (80083f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	4b0a      	ldr	r3, [pc, #40]	; (80083ec <prvAddCurrentTaskToDelayedList+0x94>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	3304      	adds	r3, #4
 80083c8:	4619      	mov	r1, r3
 80083ca:	4610      	mov	r0, r2
 80083cc:	f7fe fa54 	bl	8006878 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80083d0:	4b0a      	ldr	r3, [pc, #40]	; (80083fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d202      	bcs.n	80083e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80083da:	4a08      	ldr	r2, [pc, #32]	; (80083fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	6013      	str	r3, [r2, #0]
}
 80083e0:	bf00      	nop
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	2000116c 	.word	0x2000116c
 80083ec:	20000c94 	.word	0x20000c94
 80083f0:	20001154 	.word	0x20001154
 80083f4:	20001124 	.word	0x20001124
 80083f8:	20001120 	.word	0x20001120
 80083fc:	20001188 	.word	0x20001188

08008400 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b08a      	sub	sp, #40	; 0x28
 8008404:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008406:	2300      	movs	r3, #0
 8008408:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800840a:	f000 facb 	bl	80089a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800840e:	4b1c      	ldr	r3, [pc, #112]	; (8008480 <xTimerCreateTimerTask+0x80>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d021      	beq.n	800845a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008416:	2300      	movs	r3, #0
 8008418:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800841a:	2300      	movs	r3, #0
 800841c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800841e:	1d3a      	adds	r2, r7, #4
 8008420:	f107 0108 	add.w	r1, r7, #8
 8008424:	f107 030c 	add.w	r3, r7, #12
 8008428:	4618      	mov	r0, r3
 800842a:	f7fe f9bd 	bl	80067a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800842e:	6879      	ldr	r1, [r7, #4]
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	9202      	str	r2, [sp, #8]
 8008436:	9301      	str	r3, [sp, #4]
 8008438:	2302      	movs	r3, #2
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	2300      	movs	r3, #0
 800843e:	460a      	mov	r2, r1
 8008440:	4910      	ldr	r1, [pc, #64]	; (8008484 <xTimerCreateTimerTask+0x84>)
 8008442:	4811      	ldr	r0, [pc, #68]	; (8008488 <xTimerCreateTimerTask+0x88>)
 8008444:	f7ff f856 	bl	80074f4 <xTaskCreateStatic>
 8008448:	4603      	mov	r3, r0
 800844a:	4a10      	ldr	r2, [pc, #64]	; (800848c <xTimerCreateTimerTask+0x8c>)
 800844c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800844e:	4b0f      	ldr	r3, [pc, #60]	; (800848c <xTimerCreateTimerTask+0x8c>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d001      	beq.n	800845a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008456:	2301      	movs	r3, #1
 8008458:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d10a      	bne.n	8008476 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	613b      	str	r3, [r7, #16]
}
 8008472:	bf00      	nop
 8008474:	e7fe      	b.n	8008474 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008476:	697b      	ldr	r3, [r7, #20]
}
 8008478:	4618      	mov	r0, r3
 800847a:	3718      	adds	r7, #24
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	200011c4 	.word	0x200011c4
 8008484:	0800d920 	.word	0x0800d920
 8008488:	080085ad 	.word	0x080085ad
 800848c:	200011c8 	.word	0x200011c8

08008490 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b08a      	sub	sp, #40	; 0x28
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	607a      	str	r2, [r7, #4]
 800849c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800849e:	2300      	movs	r3, #0
 80084a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d10a      	bne.n	80084be <xTimerGenericCommand+0x2e>
	__asm volatile
 80084a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ac:	f383 8811 	msr	BASEPRI, r3
 80084b0:	f3bf 8f6f 	isb	sy
 80084b4:	f3bf 8f4f 	dsb	sy
 80084b8:	623b      	str	r3, [r7, #32]
}
 80084ba:	bf00      	nop
 80084bc:	e7fe      	b.n	80084bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80084be:	4b1a      	ldr	r3, [pc, #104]	; (8008528 <xTimerGenericCommand+0x98>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d02a      	beq.n	800851c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	2b05      	cmp	r3, #5
 80084d6:	dc18      	bgt.n	800850a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80084d8:	f7ff fe52 	bl	8008180 <xTaskGetSchedulerState>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d109      	bne.n	80084f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80084e2:	4b11      	ldr	r3, [pc, #68]	; (8008528 <xTimerGenericCommand+0x98>)
 80084e4:	6818      	ldr	r0, [r3, #0]
 80084e6:	f107 0110 	add.w	r1, r7, #16
 80084ea:	2300      	movs	r3, #0
 80084ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084ee:	f7fe fb65 	bl	8006bbc <xQueueGenericSend>
 80084f2:	6278      	str	r0, [r7, #36]	; 0x24
 80084f4:	e012      	b.n	800851c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80084f6:	4b0c      	ldr	r3, [pc, #48]	; (8008528 <xTimerGenericCommand+0x98>)
 80084f8:	6818      	ldr	r0, [r3, #0]
 80084fa:	f107 0110 	add.w	r1, r7, #16
 80084fe:	2300      	movs	r3, #0
 8008500:	2200      	movs	r2, #0
 8008502:	f7fe fb5b 	bl	8006bbc <xQueueGenericSend>
 8008506:	6278      	str	r0, [r7, #36]	; 0x24
 8008508:	e008      	b.n	800851c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800850a:	4b07      	ldr	r3, [pc, #28]	; (8008528 <xTimerGenericCommand+0x98>)
 800850c:	6818      	ldr	r0, [r3, #0]
 800850e:	f107 0110 	add.w	r1, r7, #16
 8008512:	2300      	movs	r3, #0
 8008514:	683a      	ldr	r2, [r7, #0]
 8008516:	f7fe fc4f 	bl	8006db8 <xQueueGenericSendFromISR>
 800851a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800851e:	4618      	mov	r0, r3
 8008520:	3728      	adds	r7, #40	; 0x28
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	200011c4 	.word	0x200011c4

0800852c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b088      	sub	sp, #32
 8008530:	af02      	add	r7, sp, #8
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008536:	4b1c      	ldr	r3, [pc, #112]	; (80085a8 <prvProcessExpiredTimer+0x7c>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	3304      	adds	r3, #4
 8008544:	4618      	mov	r0, r3
 8008546:	f7fe f9cf 	bl	80068e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	69db      	ldr	r3, [r3, #28]
 800854e:	2b01      	cmp	r3, #1
 8008550:	d122      	bne.n	8008598 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	699a      	ldr	r2, [r3, #24]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	18d1      	adds	r1, r2, r3
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	6978      	ldr	r0, [r7, #20]
 8008560:	f000 f8c8 	bl	80086f4 <prvInsertTimerInActiveList>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d016      	beq.n	8008598 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800856a:	2300      	movs	r3, #0
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	2300      	movs	r3, #0
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	2100      	movs	r1, #0
 8008574:	6978      	ldr	r0, [r7, #20]
 8008576:	f7ff ff8b 	bl	8008490 <xTimerGenericCommand>
 800857a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10a      	bne.n	8008598 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8008582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008586:	f383 8811 	msr	BASEPRI, r3
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	60fb      	str	r3, [r7, #12]
}
 8008594:	bf00      	nop
 8008596:	e7fe      	b.n	8008596 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859c:	6978      	ldr	r0, [r7, #20]
 800859e:	4798      	blx	r3
}
 80085a0:	bf00      	nop
 80085a2:	3718      	adds	r7, #24
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	200011bc 	.word	0x200011bc

080085ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80085b4:	f107 0308 	add.w	r3, r7, #8
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 f857 	bl	800866c <prvGetNextExpireTime>
 80085be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	4619      	mov	r1, r3
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f000 f803 	bl	80085d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80085ca:	f000 f8d5 	bl	8008778 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80085ce:	e7f1      	b.n	80085b4 <prvTimerTask+0x8>

080085d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80085da:	f7ff f9df 	bl	800799c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80085de:	f107 0308 	add.w	r3, r7, #8
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 f866 	bl	80086b4 <prvSampleTimeNow>
 80085e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d130      	bne.n	8008652 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d10a      	bne.n	800860c <prvProcessTimerOrBlockTask+0x3c>
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d806      	bhi.n	800860c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80085fe:	f7ff f9db 	bl	80079b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008602:	68f9      	ldr	r1, [r7, #12]
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f7ff ff91 	bl	800852c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800860a:	e024      	b.n	8008656 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d008      	beq.n	8008624 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008612:	4b13      	ldr	r3, [pc, #76]	; (8008660 <prvProcessTimerOrBlockTask+0x90>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	bf0c      	ite	eq
 800861c:	2301      	moveq	r3, #1
 800861e:	2300      	movne	r3, #0
 8008620:	b2db      	uxtb	r3, r3
 8008622:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008624:	4b0f      	ldr	r3, [pc, #60]	; (8008664 <prvProcessTimerOrBlockTask+0x94>)
 8008626:	6818      	ldr	r0, [r3, #0]
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	683a      	ldr	r2, [r7, #0]
 8008630:	4619      	mov	r1, r3
 8008632:	f7fe ff2b 	bl	800748c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008636:	f7ff f9bf 	bl	80079b8 <xTaskResumeAll>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d10a      	bne.n	8008656 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008640:	4b09      	ldr	r3, [pc, #36]	; (8008668 <prvProcessTimerOrBlockTask+0x98>)
 8008642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008646:	601a      	str	r2, [r3, #0]
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	f3bf 8f6f 	isb	sy
}
 8008650:	e001      	b.n	8008656 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008652:	f7ff f9b1 	bl	80079b8 <xTaskResumeAll>
}
 8008656:	bf00      	nop
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	200011c0 	.word	0x200011c0
 8008664:	200011c4 	.word	0x200011c4
 8008668:	e000ed04 	.word	0xe000ed04

0800866c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008674:	4b0e      	ldr	r3, [pc, #56]	; (80086b0 <prvGetNextExpireTime+0x44>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	bf0c      	ite	eq
 800867e:	2301      	moveq	r3, #1
 8008680:	2300      	movne	r3, #0
 8008682:	b2db      	uxtb	r3, r3
 8008684:	461a      	mov	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d105      	bne.n	800869e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008692:	4b07      	ldr	r3, [pc, #28]	; (80086b0 <prvGetNextExpireTime+0x44>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	60fb      	str	r3, [r7, #12]
 800869c:	e001      	b.n	80086a2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800869e:	2300      	movs	r3, #0
 80086a0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80086a2:	68fb      	ldr	r3, [r7, #12]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3714      	adds	r7, #20
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bc80      	pop	{r7}
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	200011bc 	.word	0x200011bc

080086b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80086bc:	f7ff fa1a 	bl	8007af4 <xTaskGetTickCount>
 80086c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80086c2:	4b0b      	ldr	r3, [pc, #44]	; (80086f0 <prvSampleTimeNow+0x3c>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68fa      	ldr	r2, [r7, #12]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d205      	bcs.n	80086d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80086cc:	f000 f908 	bl	80088e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	601a      	str	r2, [r3, #0]
 80086d6:	e002      	b.n	80086de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80086de:	4a04      	ldr	r2, [pc, #16]	; (80086f0 <prvSampleTimeNow+0x3c>)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80086e4:	68fb      	ldr	r3, [r7, #12]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	200011cc 	.word	0x200011cc

080086f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b086      	sub	sp, #24
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	607a      	str	r2, [r7, #4]
 8008700:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008702:	2300      	movs	r3, #0
 8008704:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	68ba      	ldr	r2, [r7, #8]
 800870a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	429a      	cmp	r2, r3
 8008718:	d812      	bhi.n	8008740 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	1ad2      	subs	r2, r2, r3
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	429a      	cmp	r2, r3
 8008726:	d302      	bcc.n	800872e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008728:	2301      	movs	r3, #1
 800872a:	617b      	str	r3, [r7, #20]
 800872c:	e01b      	b.n	8008766 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800872e:	4b10      	ldr	r3, [pc, #64]	; (8008770 <prvInsertTimerInActiveList+0x7c>)
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	3304      	adds	r3, #4
 8008736:	4619      	mov	r1, r3
 8008738:	4610      	mov	r0, r2
 800873a:	f7fe f89d 	bl	8006878 <vListInsert>
 800873e:	e012      	b.n	8008766 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	429a      	cmp	r2, r3
 8008746:	d206      	bcs.n	8008756 <prvInsertTimerInActiveList+0x62>
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	429a      	cmp	r2, r3
 800874e:	d302      	bcc.n	8008756 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008750:	2301      	movs	r3, #1
 8008752:	617b      	str	r3, [r7, #20]
 8008754:	e007      	b.n	8008766 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008756:	4b07      	ldr	r3, [pc, #28]	; (8008774 <prvInsertTimerInActiveList+0x80>)
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	3304      	adds	r3, #4
 800875e:	4619      	mov	r1, r3
 8008760:	4610      	mov	r0, r2
 8008762:	f7fe f889 	bl	8006878 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008766:	697b      	ldr	r3, [r7, #20]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3718      	adds	r7, #24
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	200011c0 	.word	0x200011c0
 8008774:	200011bc 	.word	0x200011bc

08008778 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b08e      	sub	sp, #56	; 0x38
 800877c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800877e:	e09d      	b.n	80088bc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2b00      	cmp	r3, #0
 8008784:	da18      	bge.n	80087b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008786:	1d3b      	adds	r3, r7, #4
 8008788:	3304      	adds	r3, #4
 800878a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800878c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10a      	bne.n	80087a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008796:	f383 8811 	msr	BASEPRI, r3
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	61fb      	str	r3, [r7, #28]
}
 80087a4:	bf00      	nop
 80087a6:	e7fe      	b.n	80087a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80087a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087ae:	6850      	ldr	r0, [r2, #4]
 80087b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087b2:	6892      	ldr	r2, [r2, #8]
 80087b4:	4611      	mov	r1, r2
 80087b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	db7e      	blt.n	80088bc <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80087c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c4:	695b      	ldr	r3, [r3, #20]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d004      	beq.n	80087d4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087cc:	3304      	adds	r3, #4
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7fe f88a 	bl	80068e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80087d4:	463b      	mov	r3, r7
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7ff ff6c 	bl	80086b4 <prvSampleTimeNow>
 80087dc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2b09      	cmp	r3, #9
 80087e2:	d86a      	bhi.n	80088ba <prvProcessReceivedCommands+0x142>
 80087e4:	a201      	add	r2, pc, #4	; (adr r2, 80087ec <prvProcessReceivedCommands+0x74>)
 80087e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ea:	bf00      	nop
 80087ec:	08008815 	.word	0x08008815
 80087f0:	08008815 	.word	0x08008815
 80087f4:	08008815 	.word	0x08008815
 80087f8:	080088bd 	.word	0x080088bd
 80087fc:	08008871 	.word	0x08008871
 8008800:	080088a9 	.word	0x080088a9
 8008804:	08008815 	.word	0x08008815
 8008808:	08008815 	.word	0x08008815
 800880c:	080088bd 	.word	0x080088bd
 8008810:	08008871 	.word	0x08008871
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008814:	68ba      	ldr	r2, [r7, #8]
 8008816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008818:	699b      	ldr	r3, [r3, #24]
 800881a:	18d1      	adds	r1, r2, r3
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008822:	f7ff ff67 	bl	80086f4 <prvInsertTimerInActiveList>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d047      	beq.n	80088bc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800882c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008832:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008836:	69db      	ldr	r3, [r3, #28]
 8008838:	2b01      	cmp	r3, #1
 800883a:	d13f      	bne.n	80088bc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008840:	699b      	ldr	r3, [r3, #24]
 8008842:	441a      	add	r2, r3
 8008844:	2300      	movs	r3, #0
 8008846:	9300      	str	r3, [sp, #0]
 8008848:	2300      	movs	r3, #0
 800884a:	2100      	movs	r1, #0
 800884c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800884e:	f7ff fe1f 	bl	8008490 <xTimerGenericCommand>
 8008852:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008854:	6a3b      	ldr	r3, [r7, #32]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d130      	bne.n	80088bc <prvProcessReceivedCommands+0x144>
	__asm volatile
 800885a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885e:	f383 8811 	msr	BASEPRI, r3
 8008862:	f3bf 8f6f 	isb	sy
 8008866:	f3bf 8f4f 	dsb	sy
 800886a:	61bb      	str	r3, [r7, #24]
}
 800886c:	bf00      	nop
 800886e:	e7fe      	b.n	800886e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008874:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008878:	699b      	ldr	r3, [r3, #24]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d10a      	bne.n	8008894 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800887e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	617b      	str	r3, [r7, #20]
}
 8008890:	bf00      	nop
 8008892:	e7fe      	b.n	8008892 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008896:	699a      	ldr	r2, [r3, #24]
 8008898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889a:	18d1      	adds	r1, r2, r3
 800889c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088a2:	f7ff ff27 	bl	80086f4 <prvInsertTimerInActiveList>
					break;
 80088a6:	e009      	b.n	80088bc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80088a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d104      	bne.n	80088bc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80088b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088b4:	f000 fb6e 	bl	8008f94 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80088b8:	e000      	b.n	80088bc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 80088ba:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80088bc:	4b07      	ldr	r3, [pc, #28]	; (80088dc <prvProcessReceivedCommands+0x164>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	1d39      	adds	r1, r7, #4
 80088c2:	2200      	movs	r2, #0
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7fe fb0f 	bl	8006ee8 <xQueueReceive>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f47f af57 	bne.w	8008780 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80088d2:	bf00      	nop
 80088d4:	bf00      	nop
 80088d6:	3730      	adds	r7, #48	; 0x30
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	200011c4 	.word	0x200011c4

080088e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b088      	sub	sp, #32
 80088e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088e6:	e045      	b.n	8008974 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088e8:	4b2c      	ldr	r3, [pc, #176]	; (800899c <prvSwitchTimerLists+0xbc>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088f2:	4b2a      	ldr	r3, [pc, #168]	; (800899c <prvSwitchTimerLists+0xbc>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	3304      	adds	r3, #4
 8008900:	4618      	mov	r0, r3
 8008902:	f7fd fff1 	bl	80068e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	69db      	ldr	r3, [r3, #28]
 8008912:	2b01      	cmp	r3, #1
 8008914:	d12e      	bne.n	8008974 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	693a      	ldr	r2, [r7, #16]
 800891c:	4413      	add	r3, r2
 800891e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008920:	68ba      	ldr	r2, [r7, #8]
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	429a      	cmp	r2, r3
 8008926:	d90e      	bls.n	8008946 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	68ba      	ldr	r2, [r7, #8]
 800892c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	68fa      	ldr	r2, [r7, #12]
 8008932:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008934:	4b19      	ldr	r3, [pc, #100]	; (800899c <prvSwitchTimerLists+0xbc>)
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	3304      	adds	r3, #4
 800893c:	4619      	mov	r1, r3
 800893e:	4610      	mov	r0, r2
 8008940:	f7fd ff9a 	bl	8006878 <vListInsert>
 8008944:	e016      	b.n	8008974 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008946:	2300      	movs	r3, #0
 8008948:	9300      	str	r3, [sp, #0]
 800894a:	2300      	movs	r3, #0
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	2100      	movs	r1, #0
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f7ff fd9d 	bl	8008490 <xTimerGenericCommand>
 8008956:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d10a      	bne.n	8008974 <prvSwitchTimerLists+0x94>
	__asm volatile
 800895e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008962:	f383 8811 	msr	BASEPRI, r3
 8008966:	f3bf 8f6f 	isb	sy
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	603b      	str	r3, [r7, #0]
}
 8008970:	bf00      	nop
 8008972:	e7fe      	b.n	8008972 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008974:	4b09      	ldr	r3, [pc, #36]	; (800899c <prvSwitchTimerLists+0xbc>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1b4      	bne.n	80088e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800897e:	4b07      	ldr	r3, [pc, #28]	; (800899c <prvSwitchTimerLists+0xbc>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008984:	4b06      	ldr	r3, [pc, #24]	; (80089a0 <prvSwitchTimerLists+0xc0>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a04      	ldr	r2, [pc, #16]	; (800899c <prvSwitchTimerLists+0xbc>)
 800898a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800898c:	4a04      	ldr	r2, [pc, #16]	; (80089a0 <prvSwitchTimerLists+0xc0>)
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	6013      	str	r3, [r2, #0]
}
 8008992:	bf00      	nop
 8008994:	3718      	adds	r7, #24
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop
 800899c:	200011bc 	.word	0x200011bc
 80089a0:	200011c0 	.word	0x200011c0

080089a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80089aa:	f000 f92f 	bl	8008c0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80089ae:	4b15      	ldr	r3, [pc, #84]	; (8008a04 <prvCheckForValidListAndQueue+0x60>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d120      	bne.n	80089f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80089b6:	4814      	ldr	r0, [pc, #80]	; (8008a08 <prvCheckForValidListAndQueue+0x64>)
 80089b8:	f7fd ff10 	bl	80067dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80089bc:	4813      	ldr	r0, [pc, #76]	; (8008a0c <prvCheckForValidListAndQueue+0x68>)
 80089be:	f7fd ff0d 	bl	80067dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80089c2:	4b13      	ldr	r3, [pc, #76]	; (8008a10 <prvCheckForValidListAndQueue+0x6c>)
 80089c4:	4a10      	ldr	r2, [pc, #64]	; (8008a08 <prvCheckForValidListAndQueue+0x64>)
 80089c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80089c8:	4b12      	ldr	r3, [pc, #72]	; (8008a14 <prvCheckForValidListAndQueue+0x70>)
 80089ca:	4a10      	ldr	r2, [pc, #64]	; (8008a0c <prvCheckForValidListAndQueue+0x68>)
 80089cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80089ce:	2300      	movs	r3, #0
 80089d0:	9300      	str	r3, [sp, #0]
 80089d2:	4b11      	ldr	r3, [pc, #68]	; (8008a18 <prvCheckForValidListAndQueue+0x74>)
 80089d4:	4a11      	ldr	r2, [pc, #68]	; (8008a1c <prvCheckForValidListAndQueue+0x78>)
 80089d6:	2110      	movs	r1, #16
 80089d8:	200a      	movs	r0, #10
 80089da:	f7fe f817 	bl	8006a0c <xQueueGenericCreateStatic>
 80089de:	4603      	mov	r3, r0
 80089e0:	4a08      	ldr	r2, [pc, #32]	; (8008a04 <prvCheckForValidListAndQueue+0x60>)
 80089e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80089e4:	4b07      	ldr	r3, [pc, #28]	; (8008a04 <prvCheckForValidListAndQueue+0x60>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d005      	beq.n	80089f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80089ec:	4b05      	ldr	r3, [pc, #20]	; (8008a04 <prvCheckForValidListAndQueue+0x60>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	490b      	ldr	r1, [pc, #44]	; (8008a20 <prvCheckForValidListAndQueue+0x7c>)
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fe fd22 	bl	800743c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089f8:	f000 f938 	bl	8008c6c <vPortExitCritical>
}
 80089fc:	bf00      	nop
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	200011c4 	.word	0x200011c4
 8008a08:	20001194 	.word	0x20001194
 8008a0c:	200011a8 	.word	0x200011a8
 8008a10:	200011bc 	.word	0x200011bc
 8008a14:	200011c0 	.word	0x200011c0
 8008a18:	20001270 	.word	0x20001270
 8008a1c:	200011d0 	.word	0x200011d0
 8008a20:	0800d928 	.word	0x0800d928

08008a24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	3b04      	subs	r3, #4
 8008a34:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008a3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	3b04      	subs	r3, #4
 8008a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	f023 0201 	bic.w	r2, r3, #1
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	3b04      	subs	r3, #4
 8008a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a54:	4a08      	ldr	r2, [pc, #32]	; (8008a78 <pxPortInitialiseStack+0x54>)
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	3b14      	subs	r3, #20
 8008a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	3b20      	subs	r3, #32
 8008a6a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3714      	adds	r7, #20
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bc80      	pop	{r7}
 8008a76:	4770      	bx	lr
 8008a78:	08008a7d 	.word	0x08008a7d

08008a7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008a82:	2300      	movs	r3, #0
 8008a84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a86:	4b12      	ldr	r3, [pc, #72]	; (8008ad0 <prvTaskExitError+0x54>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a8e:	d00a      	beq.n	8008aa6 <prvTaskExitError+0x2a>
	__asm volatile
 8008a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	60fb      	str	r3, [r7, #12]
}
 8008aa2:	bf00      	nop
 8008aa4:	e7fe      	b.n	8008aa4 <prvTaskExitError+0x28>
	__asm volatile
 8008aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aaa:	f383 8811 	msr	BASEPRI, r3
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	f3bf 8f4f 	dsb	sy
 8008ab6:	60bb      	str	r3, [r7, #8]
}
 8008ab8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008aba:	bf00      	nop
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d0fc      	beq.n	8008abc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ac2:	bf00      	nop
 8008ac4:	bf00      	nop
 8008ac6:	3714      	adds	r7, #20
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bc80      	pop	{r7}
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	2000000c 	.word	0x2000000c
	...

08008ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ae0:	4b07      	ldr	r3, [pc, #28]	; (8008b00 <pxCurrentTCBConst2>)
 8008ae2:	6819      	ldr	r1, [r3, #0]
 8008ae4:	6808      	ldr	r0, [r1, #0]
 8008ae6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008aea:	f380 8809 	msr	PSP, r0
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	f04f 0000 	mov.w	r0, #0
 8008af6:	f380 8811 	msr	BASEPRI, r0
 8008afa:	f04e 0e0d 	orr.w	lr, lr, #13
 8008afe:	4770      	bx	lr

08008b00 <pxCurrentTCBConst2>:
 8008b00:	20000c94 	.word	0x20000c94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008b04:	bf00      	nop
 8008b06:	bf00      	nop

08008b08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008b08:	4806      	ldr	r0, [pc, #24]	; (8008b24 <prvPortStartFirstTask+0x1c>)
 8008b0a:	6800      	ldr	r0, [r0, #0]
 8008b0c:	6800      	ldr	r0, [r0, #0]
 8008b0e:	f380 8808 	msr	MSP, r0
 8008b12:	b662      	cpsie	i
 8008b14:	b661      	cpsie	f
 8008b16:	f3bf 8f4f 	dsb	sy
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	df00      	svc	0
 8008b20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b22:	bf00      	nop
 8008b24:	e000ed08 	.word	0xe000ed08

08008b28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008b2e:	4b32      	ldr	r3, [pc, #200]	; (8008bf8 <xPortStartScheduler+0xd0>)
 8008b30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	22ff      	movs	r2, #255	; 0xff
 8008b3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b48:	78fb      	ldrb	r3, [r7, #3]
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008b50:	b2da      	uxtb	r2, r3
 8008b52:	4b2a      	ldr	r3, [pc, #168]	; (8008bfc <xPortStartScheduler+0xd4>)
 8008b54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b56:	4b2a      	ldr	r3, [pc, #168]	; (8008c00 <xPortStartScheduler+0xd8>)
 8008b58:	2207      	movs	r2, #7
 8008b5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b5c:	e009      	b.n	8008b72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008b5e:	4b28      	ldr	r3, [pc, #160]	; (8008c00 <xPortStartScheduler+0xd8>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	3b01      	subs	r3, #1
 8008b64:	4a26      	ldr	r2, [pc, #152]	; (8008c00 <xPortStartScheduler+0xd8>)
 8008b66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b68:	78fb      	ldrb	r3, [r7, #3]
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	005b      	lsls	r3, r3, #1
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b72:	78fb      	ldrb	r3, [r7, #3]
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b7a:	2b80      	cmp	r3, #128	; 0x80
 8008b7c:	d0ef      	beq.n	8008b5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b7e:	4b20      	ldr	r3, [pc, #128]	; (8008c00 <xPortStartScheduler+0xd8>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f1c3 0307 	rsb	r3, r3, #7
 8008b86:	2b04      	cmp	r3, #4
 8008b88:	d00a      	beq.n	8008ba0 <xPortStartScheduler+0x78>
	__asm volatile
 8008b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8e:	f383 8811 	msr	BASEPRI, r3
 8008b92:	f3bf 8f6f 	isb	sy
 8008b96:	f3bf 8f4f 	dsb	sy
 8008b9a:	60bb      	str	r3, [r7, #8]
}
 8008b9c:	bf00      	nop
 8008b9e:	e7fe      	b.n	8008b9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ba0:	4b17      	ldr	r3, [pc, #92]	; (8008c00 <xPortStartScheduler+0xd8>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	021b      	lsls	r3, r3, #8
 8008ba6:	4a16      	ldr	r2, [pc, #88]	; (8008c00 <xPortStartScheduler+0xd8>)
 8008ba8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008baa:	4b15      	ldr	r3, [pc, #84]	; (8008c00 <xPortStartScheduler+0xd8>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008bb2:	4a13      	ldr	r2, [pc, #76]	; (8008c00 <xPortStartScheduler+0xd8>)
 8008bb4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	b2da      	uxtb	r2, r3
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008bbe:	4b11      	ldr	r3, [pc, #68]	; (8008c04 <xPortStartScheduler+0xdc>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a10      	ldr	r2, [pc, #64]	; (8008c04 <xPortStartScheduler+0xdc>)
 8008bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008bc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008bca:	4b0e      	ldr	r3, [pc, #56]	; (8008c04 <xPortStartScheduler+0xdc>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a0d      	ldr	r2, [pc, #52]	; (8008c04 <xPortStartScheduler+0xdc>)
 8008bd0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008bd4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008bd6:	f000 f8b9 	bl	8008d4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008bda:	4b0b      	ldr	r3, [pc, #44]	; (8008c08 <xPortStartScheduler+0xe0>)
 8008bdc:	2200      	movs	r2, #0
 8008bde:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008be0:	f7ff ff92 	bl	8008b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008be4:	f7ff f852 	bl	8007c8c <vTaskSwitchContext>
	prvTaskExitError();
 8008be8:	f7ff ff48 	bl	8008a7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	e000e400 	.word	0xe000e400
 8008bfc:	200012c0 	.word	0x200012c0
 8008c00:	200012c4 	.word	0x200012c4
 8008c04:	e000ed20 	.word	0xe000ed20
 8008c08:	2000000c 	.word	0x2000000c

08008c0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
	__asm volatile
 8008c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	607b      	str	r3, [r7, #4]
}
 8008c24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c26:	4b0f      	ldr	r3, [pc, #60]	; (8008c64 <vPortEnterCritical+0x58>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	4a0d      	ldr	r2, [pc, #52]	; (8008c64 <vPortEnterCritical+0x58>)
 8008c2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c30:	4b0c      	ldr	r3, [pc, #48]	; (8008c64 <vPortEnterCritical+0x58>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d10f      	bne.n	8008c58 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c38:	4b0b      	ldr	r3, [pc, #44]	; (8008c68 <vPortEnterCritical+0x5c>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00a      	beq.n	8008c58 <vPortEnterCritical+0x4c>
	__asm volatile
 8008c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c46:	f383 8811 	msr	BASEPRI, r3
 8008c4a:	f3bf 8f6f 	isb	sy
 8008c4e:	f3bf 8f4f 	dsb	sy
 8008c52:	603b      	str	r3, [r7, #0]
}
 8008c54:	bf00      	nop
 8008c56:	e7fe      	b.n	8008c56 <vPortEnterCritical+0x4a>
	}
}
 8008c58:	bf00      	nop
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bc80      	pop	{r7}
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	2000000c 	.word	0x2000000c
 8008c68:	e000ed04 	.word	0xe000ed04

08008c6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c72:	4b11      	ldr	r3, [pc, #68]	; (8008cb8 <vPortExitCritical+0x4c>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d10a      	bne.n	8008c90 <vPortExitCritical+0x24>
	__asm volatile
 8008c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	607b      	str	r3, [r7, #4]
}
 8008c8c:	bf00      	nop
 8008c8e:	e7fe      	b.n	8008c8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c90:	4b09      	ldr	r3, [pc, #36]	; (8008cb8 <vPortExitCritical+0x4c>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	3b01      	subs	r3, #1
 8008c96:	4a08      	ldr	r2, [pc, #32]	; (8008cb8 <vPortExitCritical+0x4c>)
 8008c98:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c9a:	4b07      	ldr	r3, [pc, #28]	; (8008cb8 <vPortExitCritical+0x4c>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d105      	bne.n	8008cae <vPortExitCritical+0x42>
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	f383 8811 	msr	BASEPRI, r3
}
 8008cac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008cae:	bf00      	nop
 8008cb0:	370c      	adds	r7, #12
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bc80      	pop	{r7}
 8008cb6:	4770      	bx	lr
 8008cb8:	2000000c 	.word	0x2000000c
 8008cbc:	00000000 	.word	0x00000000

08008cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008cc0:	f3ef 8009 	mrs	r0, PSP
 8008cc4:	f3bf 8f6f 	isb	sy
 8008cc8:	4b0d      	ldr	r3, [pc, #52]	; (8008d00 <pxCurrentTCBConst>)
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008cd0:	6010      	str	r0, [r2, #0]
 8008cd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008cd6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008cda:	f380 8811 	msr	BASEPRI, r0
 8008cde:	f7fe ffd5 	bl	8007c8c <vTaskSwitchContext>
 8008ce2:	f04f 0000 	mov.w	r0, #0
 8008ce6:	f380 8811 	msr	BASEPRI, r0
 8008cea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008cee:	6819      	ldr	r1, [r3, #0]
 8008cf0:	6808      	ldr	r0, [r1, #0]
 8008cf2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008cf6:	f380 8809 	msr	PSP, r0
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	4770      	bx	lr

08008d00 <pxCurrentTCBConst>:
 8008d00:	20000c94 	.word	0x20000c94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d04:	bf00      	nop
 8008d06:	bf00      	nop

08008d08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d12:	f383 8811 	msr	BASEPRI, r3
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	607b      	str	r3, [r7, #4]
}
 8008d20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d22:	f7fe fef5 	bl	8007b10 <xTaskIncrementTick>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d003      	beq.n	8008d34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d2c:	4b06      	ldr	r3, [pc, #24]	; (8008d48 <xPortSysTickHandler+0x40>)
 8008d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	2300      	movs	r3, #0
 8008d36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	f383 8811 	msr	BASEPRI, r3
}
 8008d3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d40:	bf00      	nop
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	e000ed04 	.word	0xe000ed04

08008d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d50:	4b0a      	ldr	r3, [pc, #40]	; (8008d7c <vPortSetupTimerInterrupt+0x30>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d56:	4b0a      	ldr	r3, [pc, #40]	; (8008d80 <vPortSetupTimerInterrupt+0x34>)
 8008d58:	2200      	movs	r2, #0
 8008d5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d5c:	4b09      	ldr	r3, [pc, #36]	; (8008d84 <vPortSetupTimerInterrupt+0x38>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a09      	ldr	r2, [pc, #36]	; (8008d88 <vPortSetupTimerInterrupt+0x3c>)
 8008d62:	fba2 2303 	umull	r2, r3, r2, r3
 8008d66:	099b      	lsrs	r3, r3, #6
 8008d68:	4a08      	ldr	r2, [pc, #32]	; (8008d8c <vPortSetupTimerInterrupt+0x40>)
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d6e:	4b03      	ldr	r3, [pc, #12]	; (8008d7c <vPortSetupTimerInterrupt+0x30>)
 8008d70:	2207      	movs	r2, #7
 8008d72:	601a      	str	r2, [r3, #0]
}
 8008d74:	bf00      	nop
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bc80      	pop	{r7}
 8008d7a:	4770      	bx	lr
 8008d7c:	e000e010 	.word	0xe000e010
 8008d80:	e000e018 	.word	0xe000e018
 8008d84:	20000000 	.word	0x20000000
 8008d88:	10624dd3 	.word	0x10624dd3
 8008d8c:	e000e014 	.word	0xe000e014

08008d90 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d90:	b480      	push	{r7}
 8008d92:	b085      	sub	sp, #20
 8008d94:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d96:	f3ef 8305 	mrs	r3, IPSR
 8008d9a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2b0f      	cmp	r3, #15
 8008da0:	d914      	bls.n	8008dcc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008da2:	4a16      	ldr	r2, [pc, #88]	; (8008dfc <vPortValidateInterruptPriority+0x6c>)
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	4413      	add	r3, r2
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008dac:	4b14      	ldr	r3, [pc, #80]	; (8008e00 <vPortValidateInterruptPriority+0x70>)
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	7afa      	ldrb	r2, [r7, #11]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d20a      	bcs.n	8008dcc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dba:	f383 8811 	msr	BASEPRI, r3
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	607b      	str	r3, [r7, #4]
}
 8008dc8:	bf00      	nop
 8008dca:	e7fe      	b.n	8008dca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008dcc:	4b0d      	ldr	r3, [pc, #52]	; (8008e04 <vPortValidateInterruptPriority+0x74>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008dd4:	4b0c      	ldr	r3, [pc, #48]	; (8008e08 <vPortValidateInterruptPriority+0x78>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d90a      	bls.n	8008df2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de0:	f383 8811 	msr	BASEPRI, r3
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	f3bf 8f4f 	dsb	sy
 8008dec:	603b      	str	r3, [r7, #0]
}
 8008dee:	bf00      	nop
 8008df0:	e7fe      	b.n	8008df0 <vPortValidateInterruptPriority+0x60>
	}
 8008df2:	bf00      	nop
 8008df4:	3714      	adds	r7, #20
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bc80      	pop	{r7}
 8008dfa:	4770      	bx	lr
 8008dfc:	e000e3f0 	.word	0xe000e3f0
 8008e00:	200012c0 	.word	0x200012c0
 8008e04:	e000ed0c 	.word	0xe000ed0c
 8008e08:	200012c4 	.word	0x200012c4

08008e0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b08a      	sub	sp, #40	; 0x28
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e14:	2300      	movs	r3, #0
 8008e16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e18:	f7fe fdc0 	bl	800799c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e1c:	4b58      	ldr	r3, [pc, #352]	; (8008f80 <pvPortMalloc+0x174>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d101      	bne.n	8008e28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e24:	f000 f910 	bl	8009048 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e28:	4b56      	ldr	r3, [pc, #344]	; (8008f84 <pvPortMalloc+0x178>)
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4013      	ands	r3, r2
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f040 808e 	bne.w	8008f52 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d01d      	beq.n	8008e78 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008e3c:	2208      	movs	r2, #8
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4413      	add	r3, r2
 8008e42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f003 0307 	and.w	r3, r3, #7
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d014      	beq.n	8008e78 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f023 0307 	bic.w	r3, r3, #7
 8008e54:	3308      	adds	r3, #8
 8008e56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f003 0307 	and.w	r3, r3, #7
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d00a      	beq.n	8008e78 <pvPortMalloc+0x6c>
	__asm volatile
 8008e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e66:	f383 8811 	msr	BASEPRI, r3
 8008e6a:	f3bf 8f6f 	isb	sy
 8008e6e:	f3bf 8f4f 	dsb	sy
 8008e72:	617b      	str	r3, [r7, #20]
}
 8008e74:	bf00      	nop
 8008e76:	e7fe      	b.n	8008e76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d069      	beq.n	8008f52 <pvPortMalloc+0x146>
 8008e7e:	4b42      	ldr	r3, [pc, #264]	; (8008f88 <pvPortMalloc+0x17c>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d864      	bhi.n	8008f52 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e88:	4b40      	ldr	r3, [pc, #256]	; (8008f8c <pvPortMalloc+0x180>)
 8008e8a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e8c:	4b3f      	ldr	r3, [pc, #252]	; (8008f8c <pvPortMalloc+0x180>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e92:	e004      	b.n	8008e9e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e96:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d903      	bls.n	8008eb0 <pvPortMalloc+0xa4>
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d1f1      	bne.n	8008e94 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008eb0:	4b33      	ldr	r3, [pc, #204]	; (8008f80 <pvPortMalloc+0x174>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d04b      	beq.n	8008f52 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008eba:	6a3b      	ldr	r3, [r7, #32]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2208      	movs	r2, #8
 8008ec0:	4413      	add	r3, r2
 8008ec2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	6a3b      	ldr	r3, [r7, #32]
 8008eca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ece:	685a      	ldr	r2, [r3, #4]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	1ad2      	subs	r2, r2, r3
 8008ed4:	2308      	movs	r3, #8
 8008ed6:	005b      	lsls	r3, r3, #1
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d91f      	bls.n	8008f1c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ee4:	69bb      	ldr	r3, [r7, #24]
 8008ee6:	f003 0307 	and.w	r3, r3, #7
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00a      	beq.n	8008f04 <pvPortMalloc+0xf8>
	__asm volatile
 8008eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef2:	f383 8811 	msr	BASEPRI, r3
 8008ef6:	f3bf 8f6f 	isb	sy
 8008efa:	f3bf 8f4f 	dsb	sy
 8008efe:	613b      	str	r3, [r7, #16]
}
 8008f00:	bf00      	nop
 8008f02:	e7fe      	b.n	8008f02 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f06:	685a      	ldr	r2, [r3, #4]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	1ad2      	subs	r2, r2, r3
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f16:	69b8      	ldr	r0, [r7, #24]
 8008f18:	f000 f8f8 	bl	800910c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f1c:	4b1a      	ldr	r3, [pc, #104]	; (8008f88 <pvPortMalloc+0x17c>)
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	1ad3      	subs	r3, r2, r3
 8008f26:	4a18      	ldr	r2, [pc, #96]	; (8008f88 <pvPortMalloc+0x17c>)
 8008f28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f2a:	4b17      	ldr	r3, [pc, #92]	; (8008f88 <pvPortMalloc+0x17c>)
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	4b18      	ldr	r3, [pc, #96]	; (8008f90 <pvPortMalloc+0x184>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d203      	bcs.n	8008f3e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f36:	4b14      	ldr	r3, [pc, #80]	; (8008f88 <pvPortMalloc+0x17c>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a15      	ldr	r2, [pc, #84]	; (8008f90 <pvPortMalloc+0x184>)
 8008f3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f40:	685a      	ldr	r2, [r3, #4]
 8008f42:	4b10      	ldr	r3, [pc, #64]	; (8008f84 <pvPortMalloc+0x178>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	431a      	orrs	r2, r3
 8008f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4e:	2200      	movs	r2, #0
 8008f50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f52:	f7fe fd31 	bl	80079b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	f003 0307 	and.w	r3, r3, #7
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00a      	beq.n	8008f76 <pvPortMalloc+0x16a>
	__asm volatile
 8008f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f64:	f383 8811 	msr	BASEPRI, r3
 8008f68:	f3bf 8f6f 	isb	sy
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	60fb      	str	r3, [r7, #12]
}
 8008f72:	bf00      	nop
 8008f74:	e7fe      	b.n	8008f74 <pvPortMalloc+0x168>
	return pvReturn;
 8008f76:	69fb      	ldr	r3, [r7, #28]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3728      	adds	r7, #40	; 0x28
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	200032d0 	.word	0x200032d0
 8008f84:	200032dc 	.word	0x200032dc
 8008f88:	200032d4 	.word	0x200032d4
 8008f8c:	200032c8 	.word	0x200032c8
 8008f90:	200032d8 	.word	0x200032d8

08008f94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d048      	beq.n	8009038 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008fa6:	2308      	movs	r3, #8
 8008fa8:	425b      	negs	r3, r3
 8008faa:	697a      	ldr	r2, [r7, #20]
 8008fac:	4413      	add	r3, r2
 8008fae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	685a      	ldr	r2, [r3, #4]
 8008fb8:	4b21      	ldr	r3, [pc, #132]	; (8009040 <vPortFree+0xac>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4013      	ands	r3, r2
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d10a      	bne.n	8008fd8 <vPortFree+0x44>
	__asm volatile
 8008fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc6:	f383 8811 	msr	BASEPRI, r3
 8008fca:	f3bf 8f6f 	isb	sy
 8008fce:	f3bf 8f4f 	dsb	sy
 8008fd2:	60fb      	str	r3, [r7, #12]
}
 8008fd4:	bf00      	nop
 8008fd6:	e7fe      	b.n	8008fd6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00a      	beq.n	8008ff6 <vPortFree+0x62>
	__asm volatile
 8008fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe4:	f383 8811 	msr	BASEPRI, r3
 8008fe8:	f3bf 8f6f 	isb	sy
 8008fec:	f3bf 8f4f 	dsb	sy
 8008ff0:	60bb      	str	r3, [r7, #8]
}
 8008ff2:	bf00      	nop
 8008ff4:	e7fe      	b.n	8008ff4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	685a      	ldr	r2, [r3, #4]
 8008ffa:	4b11      	ldr	r3, [pc, #68]	; (8009040 <vPortFree+0xac>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4013      	ands	r3, r2
 8009000:	2b00      	cmp	r3, #0
 8009002:	d019      	beq.n	8009038 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d115      	bne.n	8009038 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	685a      	ldr	r2, [r3, #4]
 8009010:	4b0b      	ldr	r3, [pc, #44]	; (8009040 <vPortFree+0xac>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	43db      	mvns	r3, r3
 8009016:	401a      	ands	r2, r3
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800901c:	f7fe fcbe 	bl	800799c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	685a      	ldr	r2, [r3, #4]
 8009024:	4b07      	ldr	r3, [pc, #28]	; (8009044 <vPortFree+0xb0>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4413      	add	r3, r2
 800902a:	4a06      	ldr	r2, [pc, #24]	; (8009044 <vPortFree+0xb0>)
 800902c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800902e:	6938      	ldr	r0, [r7, #16]
 8009030:	f000 f86c 	bl	800910c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009034:	f7fe fcc0 	bl	80079b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009038:	bf00      	nop
 800903a:	3718      	adds	r7, #24
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	200032dc 	.word	0x200032dc
 8009044:	200032d4 	.word	0x200032d4

08009048 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009048:	b480      	push	{r7}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800904e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009052:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009054:	4b27      	ldr	r3, [pc, #156]	; (80090f4 <prvHeapInit+0xac>)
 8009056:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f003 0307 	and.w	r3, r3, #7
 800905e:	2b00      	cmp	r3, #0
 8009060:	d00c      	beq.n	800907c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	3307      	adds	r3, #7
 8009066:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f023 0307 	bic.w	r3, r3, #7
 800906e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	1ad3      	subs	r3, r2, r3
 8009076:	4a1f      	ldr	r2, [pc, #124]	; (80090f4 <prvHeapInit+0xac>)
 8009078:	4413      	add	r3, r2
 800907a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009080:	4a1d      	ldr	r2, [pc, #116]	; (80090f8 <prvHeapInit+0xb0>)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009086:	4b1c      	ldr	r3, [pc, #112]	; (80090f8 <prvHeapInit+0xb0>)
 8009088:	2200      	movs	r2, #0
 800908a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	4413      	add	r3, r2
 8009092:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009094:	2208      	movs	r2, #8
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	1a9b      	subs	r3, r3, r2
 800909a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f023 0307 	bic.w	r3, r3, #7
 80090a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	4a15      	ldr	r2, [pc, #84]	; (80090fc <prvHeapInit+0xb4>)
 80090a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090aa:	4b14      	ldr	r3, [pc, #80]	; (80090fc <prvHeapInit+0xb4>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2200      	movs	r2, #0
 80090b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090b2:	4b12      	ldr	r3, [pc, #72]	; (80090fc <prvHeapInit+0xb4>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2200      	movs	r2, #0
 80090b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	1ad2      	subs	r2, r2, r3
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80090c8:	4b0c      	ldr	r3, [pc, #48]	; (80090fc <prvHeapInit+0xb4>)
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	4a0a      	ldr	r2, [pc, #40]	; (8009100 <prvHeapInit+0xb8>)
 80090d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	4a09      	ldr	r2, [pc, #36]	; (8009104 <prvHeapInit+0xbc>)
 80090de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80090e0:	4b09      	ldr	r3, [pc, #36]	; (8009108 <prvHeapInit+0xc0>)
 80090e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80090e6:	601a      	str	r2, [r3, #0]
}
 80090e8:	bf00      	nop
 80090ea:	3714      	adds	r7, #20
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bc80      	pop	{r7}
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	200012c8 	.word	0x200012c8
 80090f8:	200032c8 	.word	0x200032c8
 80090fc:	200032d0 	.word	0x200032d0
 8009100:	200032d8 	.word	0x200032d8
 8009104:	200032d4 	.word	0x200032d4
 8009108:	200032dc 	.word	0x200032dc

0800910c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800910c:	b480      	push	{r7}
 800910e:	b085      	sub	sp, #20
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009114:	4b27      	ldr	r3, [pc, #156]	; (80091b4 <prvInsertBlockIntoFreeList+0xa8>)
 8009116:	60fb      	str	r3, [r7, #12]
 8009118:	e002      	b.n	8009120 <prvInsertBlockIntoFreeList+0x14>
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	429a      	cmp	r2, r3
 8009128:	d8f7      	bhi.n	800911a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	68ba      	ldr	r2, [r7, #8]
 8009134:	4413      	add	r3, r2
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	429a      	cmp	r2, r3
 800913a:	d108      	bne.n	800914e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	685a      	ldr	r2, [r3, #4]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	441a      	add	r2, r3
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	68ba      	ldr	r2, [r7, #8]
 8009158:	441a      	add	r2, r3
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	429a      	cmp	r2, r3
 8009160:	d118      	bne.n	8009194 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	4b14      	ldr	r3, [pc, #80]	; (80091b8 <prvInsertBlockIntoFreeList+0xac>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	429a      	cmp	r2, r3
 800916c:	d00d      	beq.n	800918a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	685a      	ldr	r2, [r3, #4]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	441a      	add	r2, r3
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	601a      	str	r2, [r3, #0]
 8009188:	e008      	b.n	800919c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800918a:	4b0b      	ldr	r3, [pc, #44]	; (80091b8 <prvInsertBlockIntoFreeList+0xac>)
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	601a      	str	r2, [r3, #0]
 8009192:	e003      	b.n	800919c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d002      	beq.n	80091aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091aa:	bf00      	nop
 80091ac:	3714      	adds	r7, #20
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bc80      	pop	{r7}
 80091b2:	4770      	bx	lr
 80091b4:	200032c8 	.word	0x200032c8
 80091b8:	200032d0 	.word	0x200032d0

080091bc <malloc>:
 80091bc:	4b02      	ldr	r3, [pc, #8]	; (80091c8 <malloc+0xc>)
 80091be:	4601      	mov	r1, r0
 80091c0:	6818      	ldr	r0, [r3, #0]
 80091c2:	f000 b82b 	b.w	800921c <_malloc_r>
 80091c6:	bf00      	nop
 80091c8:	200001d4 	.word	0x200001d4

080091cc <free>:
 80091cc:	4b02      	ldr	r3, [pc, #8]	; (80091d8 <free+0xc>)
 80091ce:	4601      	mov	r1, r0
 80091d0:	6818      	ldr	r0, [r3, #0]
 80091d2:	f002 bd61 	b.w	800bc98 <_free_r>
 80091d6:	bf00      	nop
 80091d8:	200001d4 	.word	0x200001d4

080091dc <sbrk_aligned>:
 80091dc:	b570      	push	{r4, r5, r6, lr}
 80091de:	4e0e      	ldr	r6, [pc, #56]	; (8009218 <sbrk_aligned+0x3c>)
 80091e0:	460c      	mov	r4, r1
 80091e2:	6831      	ldr	r1, [r6, #0]
 80091e4:	4605      	mov	r5, r0
 80091e6:	b911      	cbnz	r1, 80091ee <sbrk_aligned+0x12>
 80091e8:	f001 fe4a 	bl	800ae80 <_sbrk_r>
 80091ec:	6030      	str	r0, [r6, #0]
 80091ee:	4621      	mov	r1, r4
 80091f0:	4628      	mov	r0, r5
 80091f2:	f001 fe45 	bl	800ae80 <_sbrk_r>
 80091f6:	1c43      	adds	r3, r0, #1
 80091f8:	d00a      	beq.n	8009210 <sbrk_aligned+0x34>
 80091fa:	1cc4      	adds	r4, r0, #3
 80091fc:	f024 0403 	bic.w	r4, r4, #3
 8009200:	42a0      	cmp	r0, r4
 8009202:	d007      	beq.n	8009214 <sbrk_aligned+0x38>
 8009204:	1a21      	subs	r1, r4, r0
 8009206:	4628      	mov	r0, r5
 8009208:	f001 fe3a 	bl	800ae80 <_sbrk_r>
 800920c:	3001      	adds	r0, #1
 800920e:	d101      	bne.n	8009214 <sbrk_aligned+0x38>
 8009210:	f04f 34ff 	mov.w	r4, #4294967295
 8009214:	4620      	mov	r0, r4
 8009216:	bd70      	pop	{r4, r5, r6, pc}
 8009218:	200032e4 	.word	0x200032e4

0800921c <_malloc_r>:
 800921c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009220:	1ccd      	adds	r5, r1, #3
 8009222:	f025 0503 	bic.w	r5, r5, #3
 8009226:	3508      	adds	r5, #8
 8009228:	2d0c      	cmp	r5, #12
 800922a:	bf38      	it	cc
 800922c:	250c      	movcc	r5, #12
 800922e:	2d00      	cmp	r5, #0
 8009230:	4607      	mov	r7, r0
 8009232:	db01      	blt.n	8009238 <_malloc_r+0x1c>
 8009234:	42a9      	cmp	r1, r5
 8009236:	d905      	bls.n	8009244 <_malloc_r+0x28>
 8009238:	230c      	movs	r3, #12
 800923a:	2600      	movs	r6, #0
 800923c:	603b      	str	r3, [r7, #0]
 800923e:	4630      	mov	r0, r6
 8009240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009244:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009318 <_malloc_r+0xfc>
 8009248:	f000 f868 	bl	800931c <__malloc_lock>
 800924c:	f8d8 3000 	ldr.w	r3, [r8]
 8009250:	461c      	mov	r4, r3
 8009252:	bb5c      	cbnz	r4, 80092ac <_malloc_r+0x90>
 8009254:	4629      	mov	r1, r5
 8009256:	4638      	mov	r0, r7
 8009258:	f7ff ffc0 	bl	80091dc <sbrk_aligned>
 800925c:	1c43      	adds	r3, r0, #1
 800925e:	4604      	mov	r4, r0
 8009260:	d155      	bne.n	800930e <_malloc_r+0xf2>
 8009262:	f8d8 4000 	ldr.w	r4, [r8]
 8009266:	4626      	mov	r6, r4
 8009268:	2e00      	cmp	r6, #0
 800926a:	d145      	bne.n	80092f8 <_malloc_r+0xdc>
 800926c:	2c00      	cmp	r4, #0
 800926e:	d048      	beq.n	8009302 <_malloc_r+0xe6>
 8009270:	6823      	ldr	r3, [r4, #0]
 8009272:	4631      	mov	r1, r6
 8009274:	4638      	mov	r0, r7
 8009276:	eb04 0903 	add.w	r9, r4, r3
 800927a:	f001 fe01 	bl	800ae80 <_sbrk_r>
 800927e:	4581      	cmp	r9, r0
 8009280:	d13f      	bne.n	8009302 <_malloc_r+0xe6>
 8009282:	6821      	ldr	r1, [r4, #0]
 8009284:	4638      	mov	r0, r7
 8009286:	1a6d      	subs	r5, r5, r1
 8009288:	4629      	mov	r1, r5
 800928a:	f7ff ffa7 	bl	80091dc <sbrk_aligned>
 800928e:	3001      	adds	r0, #1
 8009290:	d037      	beq.n	8009302 <_malloc_r+0xe6>
 8009292:	6823      	ldr	r3, [r4, #0]
 8009294:	442b      	add	r3, r5
 8009296:	6023      	str	r3, [r4, #0]
 8009298:	f8d8 3000 	ldr.w	r3, [r8]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d038      	beq.n	8009312 <_malloc_r+0xf6>
 80092a0:	685a      	ldr	r2, [r3, #4]
 80092a2:	42a2      	cmp	r2, r4
 80092a4:	d12b      	bne.n	80092fe <_malloc_r+0xe2>
 80092a6:	2200      	movs	r2, #0
 80092a8:	605a      	str	r2, [r3, #4]
 80092aa:	e00f      	b.n	80092cc <_malloc_r+0xb0>
 80092ac:	6822      	ldr	r2, [r4, #0]
 80092ae:	1b52      	subs	r2, r2, r5
 80092b0:	d41f      	bmi.n	80092f2 <_malloc_r+0xd6>
 80092b2:	2a0b      	cmp	r2, #11
 80092b4:	d917      	bls.n	80092e6 <_malloc_r+0xca>
 80092b6:	1961      	adds	r1, r4, r5
 80092b8:	42a3      	cmp	r3, r4
 80092ba:	6025      	str	r5, [r4, #0]
 80092bc:	bf18      	it	ne
 80092be:	6059      	strne	r1, [r3, #4]
 80092c0:	6863      	ldr	r3, [r4, #4]
 80092c2:	bf08      	it	eq
 80092c4:	f8c8 1000 	streq.w	r1, [r8]
 80092c8:	5162      	str	r2, [r4, r5]
 80092ca:	604b      	str	r3, [r1, #4]
 80092cc:	4638      	mov	r0, r7
 80092ce:	f104 060b 	add.w	r6, r4, #11
 80092d2:	f000 f829 	bl	8009328 <__malloc_unlock>
 80092d6:	f026 0607 	bic.w	r6, r6, #7
 80092da:	1d23      	adds	r3, r4, #4
 80092dc:	1af2      	subs	r2, r6, r3
 80092de:	d0ae      	beq.n	800923e <_malloc_r+0x22>
 80092e0:	1b9b      	subs	r3, r3, r6
 80092e2:	50a3      	str	r3, [r4, r2]
 80092e4:	e7ab      	b.n	800923e <_malloc_r+0x22>
 80092e6:	42a3      	cmp	r3, r4
 80092e8:	6862      	ldr	r2, [r4, #4]
 80092ea:	d1dd      	bne.n	80092a8 <_malloc_r+0x8c>
 80092ec:	f8c8 2000 	str.w	r2, [r8]
 80092f0:	e7ec      	b.n	80092cc <_malloc_r+0xb0>
 80092f2:	4623      	mov	r3, r4
 80092f4:	6864      	ldr	r4, [r4, #4]
 80092f6:	e7ac      	b.n	8009252 <_malloc_r+0x36>
 80092f8:	4634      	mov	r4, r6
 80092fa:	6876      	ldr	r6, [r6, #4]
 80092fc:	e7b4      	b.n	8009268 <_malloc_r+0x4c>
 80092fe:	4613      	mov	r3, r2
 8009300:	e7cc      	b.n	800929c <_malloc_r+0x80>
 8009302:	230c      	movs	r3, #12
 8009304:	4638      	mov	r0, r7
 8009306:	603b      	str	r3, [r7, #0]
 8009308:	f000 f80e 	bl	8009328 <__malloc_unlock>
 800930c:	e797      	b.n	800923e <_malloc_r+0x22>
 800930e:	6025      	str	r5, [r4, #0]
 8009310:	e7dc      	b.n	80092cc <_malloc_r+0xb0>
 8009312:	605b      	str	r3, [r3, #4]
 8009314:	deff      	udf	#255	; 0xff
 8009316:	bf00      	nop
 8009318:	200032e0 	.word	0x200032e0

0800931c <__malloc_lock>:
 800931c:	4801      	ldr	r0, [pc, #4]	; (8009324 <__malloc_lock+0x8>)
 800931e:	f001 bdfc 	b.w	800af1a <__retarget_lock_acquire_recursive>
 8009322:	bf00      	nop
 8009324:	20003428 	.word	0x20003428

08009328 <__malloc_unlock>:
 8009328:	4801      	ldr	r0, [pc, #4]	; (8009330 <__malloc_unlock+0x8>)
 800932a:	f001 bdf7 	b.w	800af1c <__retarget_lock_release_recursive>
 800932e:	bf00      	nop
 8009330:	20003428 	.word	0x20003428

08009334 <sulp>:
 8009334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009338:	460f      	mov	r7, r1
 800933a:	4690      	mov	r8, r2
 800933c:	f003 fbcc 	bl	800cad8 <__ulp>
 8009340:	4604      	mov	r4, r0
 8009342:	460d      	mov	r5, r1
 8009344:	f1b8 0f00 	cmp.w	r8, #0
 8009348:	d011      	beq.n	800936e <sulp+0x3a>
 800934a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800934e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009352:	2b00      	cmp	r3, #0
 8009354:	dd0b      	ble.n	800936e <sulp+0x3a>
 8009356:	2400      	movs	r4, #0
 8009358:	051b      	lsls	r3, r3, #20
 800935a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800935e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009362:	4622      	mov	r2, r4
 8009364:	462b      	mov	r3, r5
 8009366:	f7f7 f927 	bl	80005b8 <__aeabi_dmul>
 800936a:	4604      	mov	r4, r0
 800936c:	460d      	mov	r5, r1
 800936e:	4620      	mov	r0, r4
 8009370:	4629      	mov	r1, r5
 8009372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009378 <_strtod_l>:
 8009378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800937c:	b09f      	sub	sp, #124	; 0x7c
 800937e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009380:	2200      	movs	r2, #0
 8009382:	4604      	mov	r4, r0
 8009384:	921a      	str	r2, [sp, #104]	; 0x68
 8009386:	460d      	mov	r5, r1
 8009388:	f04f 0800 	mov.w	r8, #0
 800938c:	f04f 0900 	mov.w	r9, #0
 8009390:	460a      	mov	r2, r1
 8009392:	9219      	str	r2, [sp, #100]	; 0x64
 8009394:	7811      	ldrb	r1, [r2, #0]
 8009396:	292b      	cmp	r1, #43	; 0x2b
 8009398:	d04a      	beq.n	8009430 <_strtod_l+0xb8>
 800939a:	d838      	bhi.n	800940e <_strtod_l+0x96>
 800939c:	290d      	cmp	r1, #13
 800939e:	d832      	bhi.n	8009406 <_strtod_l+0x8e>
 80093a0:	2908      	cmp	r1, #8
 80093a2:	d832      	bhi.n	800940a <_strtod_l+0x92>
 80093a4:	2900      	cmp	r1, #0
 80093a6:	d03b      	beq.n	8009420 <_strtod_l+0xa8>
 80093a8:	2200      	movs	r2, #0
 80093aa:	920e      	str	r2, [sp, #56]	; 0x38
 80093ac:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80093ae:	7832      	ldrb	r2, [r6, #0]
 80093b0:	2a30      	cmp	r2, #48	; 0x30
 80093b2:	f040 80b2 	bne.w	800951a <_strtod_l+0x1a2>
 80093b6:	7872      	ldrb	r2, [r6, #1]
 80093b8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80093bc:	2a58      	cmp	r2, #88	; 0x58
 80093be:	d16e      	bne.n	800949e <_strtod_l+0x126>
 80093c0:	9302      	str	r3, [sp, #8]
 80093c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093c4:	4620      	mov	r0, r4
 80093c6:	9301      	str	r3, [sp, #4]
 80093c8:	ab1a      	add	r3, sp, #104	; 0x68
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	4a8c      	ldr	r2, [pc, #560]	; (8009600 <_strtod_l+0x288>)
 80093ce:	ab1b      	add	r3, sp, #108	; 0x6c
 80093d0:	a919      	add	r1, sp, #100	; 0x64
 80093d2:	f002 fd11 	bl	800bdf8 <__gethex>
 80093d6:	f010 070f 	ands.w	r7, r0, #15
 80093da:	4605      	mov	r5, r0
 80093dc:	d005      	beq.n	80093ea <_strtod_l+0x72>
 80093de:	2f06      	cmp	r7, #6
 80093e0:	d128      	bne.n	8009434 <_strtod_l+0xbc>
 80093e2:	2300      	movs	r3, #0
 80093e4:	3601      	adds	r6, #1
 80093e6:	9619      	str	r6, [sp, #100]	; 0x64
 80093e8:	930e      	str	r3, [sp, #56]	; 0x38
 80093ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	f040 85a0 	bne.w	8009f32 <_strtod_l+0xbba>
 80093f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093f4:	b1cb      	cbz	r3, 800942a <_strtod_l+0xb2>
 80093f6:	4642      	mov	r2, r8
 80093f8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80093fc:	4610      	mov	r0, r2
 80093fe:	4619      	mov	r1, r3
 8009400:	b01f      	add	sp, #124	; 0x7c
 8009402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009406:	2920      	cmp	r1, #32
 8009408:	d1ce      	bne.n	80093a8 <_strtod_l+0x30>
 800940a:	3201      	adds	r2, #1
 800940c:	e7c1      	b.n	8009392 <_strtod_l+0x1a>
 800940e:	292d      	cmp	r1, #45	; 0x2d
 8009410:	d1ca      	bne.n	80093a8 <_strtod_l+0x30>
 8009412:	2101      	movs	r1, #1
 8009414:	910e      	str	r1, [sp, #56]	; 0x38
 8009416:	1c51      	adds	r1, r2, #1
 8009418:	9119      	str	r1, [sp, #100]	; 0x64
 800941a:	7852      	ldrb	r2, [r2, #1]
 800941c:	2a00      	cmp	r2, #0
 800941e:	d1c5      	bne.n	80093ac <_strtod_l+0x34>
 8009420:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009422:	9519      	str	r5, [sp, #100]	; 0x64
 8009424:	2b00      	cmp	r3, #0
 8009426:	f040 8582 	bne.w	8009f2e <_strtod_l+0xbb6>
 800942a:	4642      	mov	r2, r8
 800942c:	464b      	mov	r3, r9
 800942e:	e7e5      	b.n	80093fc <_strtod_l+0x84>
 8009430:	2100      	movs	r1, #0
 8009432:	e7ef      	b.n	8009414 <_strtod_l+0x9c>
 8009434:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009436:	b13a      	cbz	r2, 8009448 <_strtod_l+0xd0>
 8009438:	2135      	movs	r1, #53	; 0x35
 800943a:	a81c      	add	r0, sp, #112	; 0x70
 800943c:	f003 fc38 	bl	800ccb0 <__copybits>
 8009440:	4620      	mov	r0, r4
 8009442:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009444:	f003 f81c 	bl	800c480 <_Bfree>
 8009448:	3f01      	subs	r7, #1
 800944a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800944c:	2f04      	cmp	r7, #4
 800944e:	d806      	bhi.n	800945e <_strtod_l+0xe6>
 8009450:	e8df f007 	tbb	[pc, r7]
 8009454:	201d0314 	.word	0x201d0314
 8009458:	14          	.byte	0x14
 8009459:	00          	.byte	0x00
 800945a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800945e:	05e9      	lsls	r1, r5, #23
 8009460:	bf48      	it	mi
 8009462:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009466:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800946a:	0d1b      	lsrs	r3, r3, #20
 800946c:	051b      	lsls	r3, r3, #20
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1bb      	bne.n	80093ea <_strtod_l+0x72>
 8009472:	f001 fd27 	bl	800aec4 <__errno>
 8009476:	2322      	movs	r3, #34	; 0x22
 8009478:	6003      	str	r3, [r0, #0]
 800947a:	e7b6      	b.n	80093ea <_strtod_l+0x72>
 800947c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009480:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8009484:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009488:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800948c:	e7e7      	b.n	800945e <_strtod_l+0xe6>
 800948e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8009604 <_strtod_l+0x28c>
 8009492:	e7e4      	b.n	800945e <_strtod_l+0xe6>
 8009494:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009498:	f04f 38ff 	mov.w	r8, #4294967295
 800949c:	e7df      	b.n	800945e <_strtod_l+0xe6>
 800949e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80094a0:	1c5a      	adds	r2, r3, #1
 80094a2:	9219      	str	r2, [sp, #100]	; 0x64
 80094a4:	785b      	ldrb	r3, [r3, #1]
 80094a6:	2b30      	cmp	r3, #48	; 0x30
 80094a8:	d0f9      	beq.n	800949e <_strtod_l+0x126>
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d09d      	beq.n	80093ea <_strtod_l+0x72>
 80094ae:	2301      	movs	r3, #1
 80094b0:	f04f 0a00 	mov.w	sl, #0
 80094b4:	220a      	movs	r2, #10
 80094b6:	46d3      	mov	fp, sl
 80094b8:	9305      	str	r3, [sp, #20]
 80094ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80094bc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80094c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80094c2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80094c4:	7806      	ldrb	r6, [r0, #0]
 80094c6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80094ca:	b2d9      	uxtb	r1, r3
 80094cc:	2909      	cmp	r1, #9
 80094ce:	d926      	bls.n	800951e <_strtod_l+0x1a6>
 80094d0:	2201      	movs	r2, #1
 80094d2:	494d      	ldr	r1, [pc, #308]	; (8009608 <_strtod_l+0x290>)
 80094d4:	f001 fbaf 	bl	800ac36 <strncmp>
 80094d8:	2800      	cmp	r0, #0
 80094da:	d030      	beq.n	800953e <_strtod_l+0x1c6>
 80094dc:	2000      	movs	r0, #0
 80094de:	4632      	mov	r2, r6
 80094e0:	4603      	mov	r3, r0
 80094e2:	465e      	mov	r6, fp
 80094e4:	9008      	str	r0, [sp, #32]
 80094e6:	2a65      	cmp	r2, #101	; 0x65
 80094e8:	d001      	beq.n	80094ee <_strtod_l+0x176>
 80094ea:	2a45      	cmp	r2, #69	; 0x45
 80094ec:	d113      	bne.n	8009516 <_strtod_l+0x19e>
 80094ee:	b91e      	cbnz	r6, 80094f8 <_strtod_l+0x180>
 80094f0:	9a05      	ldr	r2, [sp, #20]
 80094f2:	4302      	orrs	r2, r0
 80094f4:	d094      	beq.n	8009420 <_strtod_l+0xa8>
 80094f6:	2600      	movs	r6, #0
 80094f8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80094fa:	1c6a      	adds	r2, r5, #1
 80094fc:	9219      	str	r2, [sp, #100]	; 0x64
 80094fe:	786a      	ldrb	r2, [r5, #1]
 8009500:	2a2b      	cmp	r2, #43	; 0x2b
 8009502:	d074      	beq.n	80095ee <_strtod_l+0x276>
 8009504:	2a2d      	cmp	r2, #45	; 0x2d
 8009506:	d078      	beq.n	80095fa <_strtod_l+0x282>
 8009508:	f04f 0c00 	mov.w	ip, #0
 800950c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009510:	2909      	cmp	r1, #9
 8009512:	d97f      	bls.n	8009614 <_strtod_l+0x29c>
 8009514:	9519      	str	r5, [sp, #100]	; 0x64
 8009516:	2700      	movs	r7, #0
 8009518:	e09e      	b.n	8009658 <_strtod_l+0x2e0>
 800951a:	2300      	movs	r3, #0
 800951c:	e7c8      	b.n	80094b0 <_strtod_l+0x138>
 800951e:	f1bb 0f08 	cmp.w	fp, #8
 8009522:	bfd8      	it	le
 8009524:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8009526:	f100 0001 	add.w	r0, r0, #1
 800952a:	bfd6      	itet	le
 800952c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009530:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009534:	930a      	strle	r3, [sp, #40]	; 0x28
 8009536:	f10b 0b01 	add.w	fp, fp, #1
 800953a:	9019      	str	r0, [sp, #100]	; 0x64
 800953c:	e7c1      	b.n	80094c2 <_strtod_l+0x14a>
 800953e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009540:	1c5a      	adds	r2, r3, #1
 8009542:	9219      	str	r2, [sp, #100]	; 0x64
 8009544:	785a      	ldrb	r2, [r3, #1]
 8009546:	f1bb 0f00 	cmp.w	fp, #0
 800954a:	d037      	beq.n	80095bc <_strtod_l+0x244>
 800954c:	465e      	mov	r6, fp
 800954e:	9008      	str	r0, [sp, #32]
 8009550:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009554:	2b09      	cmp	r3, #9
 8009556:	d912      	bls.n	800957e <_strtod_l+0x206>
 8009558:	2301      	movs	r3, #1
 800955a:	e7c4      	b.n	80094e6 <_strtod_l+0x16e>
 800955c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800955e:	3001      	adds	r0, #1
 8009560:	1c5a      	adds	r2, r3, #1
 8009562:	9219      	str	r2, [sp, #100]	; 0x64
 8009564:	785a      	ldrb	r2, [r3, #1]
 8009566:	2a30      	cmp	r2, #48	; 0x30
 8009568:	d0f8      	beq.n	800955c <_strtod_l+0x1e4>
 800956a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800956e:	2b08      	cmp	r3, #8
 8009570:	f200 84e4 	bhi.w	8009f3c <_strtod_l+0xbc4>
 8009574:	9008      	str	r0, [sp, #32]
 8009576:	2000      	movs	r0, #0
 8009578:	4606      	mov	r6, r0
 800957a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800957c:	930b      	str	r3, [sp, #44]	; 0x2c
 800957e:	3a30      	subs	r2, #48	; 0x30
 8009580:	f100 0301 	add.w	r3, r0, #1
 8009584:	d014      	beq.n	80095b0 <_strtod_l+0x238>
 8009586:	9908      	ldr	r1, [sp, #32]
 8009588:	eb00 0c06 	add.w	ip, r0, r6
 800958c:	4419      	add	r1, r3
 800958e:	9108      	str	r1, [sp, #32]
 8009590:	4633      	mov	r3, r6
 8009592:	210a      	movs	r1, #10
 8009594:	4563      	cmp	r3, ip
 8009596:	d113      	bne.n	80095c0 <_strtod_l+0x248>
 8009598:	1833      	adds	r3, r6, r0
 800959a:	2b08      	cmp	r3, #8
 800959c:	f106 0601 	add.w	r6, r6, #1
 80095a0:	4406      	add	r6, r0
 80095a2:	dc1a      	bgt.n	80095da <_strtod_l+0x262>
 80095a4:	230a      	movs	r3, #10
 80095a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80095a8:	fb03 2301 	mla	r3, r3, r1, r2
 80095ac:	930a      	str	r3, [sp, #40]	; 0x28
 80095ae:	2300      	movs	r3, #0
 80095b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80095b2:	4618      	mov	r0, r3
 80095b4:	1c51      	adds	r1, r2, #1
 80095b6:	9119      	str	r1, [sp, #100]	; 0x64
 80095b8:	7852      	ldrb	r2, [r2, #1]
 80095ba:	e7c9      	b.n	8009550 <_strtod_l+0x1d8>
 80095bc:	4658      	mov	r0, fp
 80095be:	e7d2      	b.n	8009566 <_strtod_l+0x1ee>
 80095c0:	2b08      	cmp	r3, #8
 80095c2:	f103 0301 	add.w	r3, r3, #1
 80095c6:	dc03      	bgt.n	80095d0 <_strtod_l+0x258>
 80095c8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80095ca:	434f      	muls	r7, r1
 80095cc:	970a      	str	r7, [sp, #40]	; 0x28
 80095ce:	e7e1      	b.n	8009594 <_strtod_l+0x21c>
 80095d0:	2b10      	cmp	r3, #16
 80095d2:	bfd8      	it	le
 80095d4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80095d8:	e7dc      	b.n	8009594 <_strtod_l+0x21c>
 80095da:	2e10      	cmp	r6, #16
 80095dc:	bfdc      	itt	le
 80095de:	230a      	movle	r3, #10
 80095e0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80095e4:	e7e3      	b.n	80095ae <_strtod_l+0x236>
 80095e6:	2300      	movs	r3, #0
 80095e8:	9308      	str	r3, [sp, #32]
 80095ea:	2301      	movs	r3, #1
 80095ec:	e780      	b.n	80094f0 <_strtod_l+0x178>
 80095ee:	f04f 0c00 	mov.w	ip, #0
 80095f2:	1caa      	adds	r2, r5, #2
 80095f4:	9219      	str	r2, [sp, #100]	; 0x64
 80095f6:	78aa      	ldrb	r2, [r5, #2]
 80095f8:	e788      	b.n	800950c <_strtod_l+0x194>
 80095fa:	f04f 0c01 	mov.w	ip, #1
 80095fe:	e7f8      	b.n	80095f2 <_strtod_l+0x27a>
 8009600:	0800dac4 	.word	0x0800dac4
 8009604:	7ff00000 	.word	0x7ff00000
 8009608:	0800dac2 	.word	0x0800dac2
 800960c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800960e:	1c51      	adds	r1, r2, #1
 8009610:	9119      	str	r1, [sp, #100]	; 0x64
 8009612:	7852      	ldrb	r2, [r2, #1]
 8009614:	2a30      	cmp	r2, #48	; 0x30
 8009616:	d0f9      	beq.n	800960c <_strtod_l+0x294>
 8009618:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800961c:	2908      	cmp	r1, #8
 800961e:	f63f af7a 	bhi.w	8009516 <_strtod_l+0x19e>
 8009622:	3a30      	subs	r2, #48	; 0x30
 8009624:	9209      	str	r2, [sp, #36]	; 0x24
 8009626:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009628:	920c      	str	r2, [sp, #48]	; 0x30
 800962a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800962c:	1c57      	adds	r7, r2, #1
 800962e:	9719      	str	r7, [sp, #100]	; 0x64
 8009630:	7852      	ldrb	r2, [r2, #1]
 8009632:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009636:	f1be 0f09 	cmp.w	lr, #9
 800963a:	d938      	bls.n	80096ae <_strtod_l+0x336>
 800963c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800963e:	1a7f      	subs	r7, r7, r1
 8009640:	2f08      	cmp	r7, #8
 8009642:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009646:	dc03      	bgt.n	8009650 <_strtod_l+0x2d8>
 8009648:	9909      	ldr	r1, [sp, #36]	; 0x24
 800964a:	428f      	cmp	r7, r1
 800964c:	bfa8      	it	ge
 800964e:	460f      	movge	r7, r1
 8009650:	f1bc 0f00 	cmp.w	ip, #0
 8009654:	d000      	beq.n	8009658 <_strtod_l+0x2e0>
 8009656:	427f      	negs	r7, r7
 8009658:	2e00      	cmp	r6, #0
 800965a:	d14f      	bne.n	80096fc <_strtod_l+0x384>
 800965c:	9905      	ldr	r1, [sp, #20]
 800965e:	4301      	orrs	r1, r0
 8009660:	f47f aec3 	bne.w	80093ea <_strtod_l+0x72>
 8009664:	2b00      	cmp	r3, #0
 8009666:	f47f aedb 	bne.w	8009420 <_strtod_l+0xa8>
 800966a:	2a69      	cmp	r2, #105	; 0x69
 800966c:	d029      	beq.n	80096c2 <_strtod_l+0x34a>
 800966e:	dc26      	bgt.n	80096be <_strtod_l+0x346>
 8009670:	2a49      	cmp	r2, #73	; 0x49
 8009672:	d026      	beq.n	80096c2 <_strtod_l+0x34a>
 8009674:	2a4e      	cmp	r2, #78	; 0x4e
 8009676:	f47f aed3 	bne.w	8009420 <_strtod_l+0xa8>
 800967a:	499a      	ldr	r1, [pc, #616]	; (80098e4 <_strtod_l+0x56c>)
 800967c:	a819      	add	r0, sp, #100	; 0x64
 800967e:	f002 fdfd 	bl	800c27c <__match>
 8009682:	2800      	cmp	r0, #0
 8009684:	f43f aecc 	beq.w	8009420 <_strtod_l+0xa8>
 8009688:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	2b28      	cmp	r3, #40	; 0x28
 800968e:	d12f      	bne.n	80096f0 <_strtod_l+0x378>
 8009690:	4995      	ldr	r1, [pc, #596]	; (80098e8 <_strtod_l+0x570>)
 8009692:	aa1c      	add	r2, sp, #112	; 0x70
 8009694:	a819      	add	r0, sp, #100	; 0x64
 8009696:	f002 fe05 	bl	800c2a4 <__hexnan>
 800969a:	2805      	cmp	r0, #5
 800969c:	d128      	bne.n	80096f0 <_strtod_l+0x378>
 800969e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80096a0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80096a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80096a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80096ac:	e69d      	b.n	80093ea <_strtod_l+0x72>
 80096ae:	210a      	movs	r1, #10
 80096b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80096b2:	fb01 2107 	mla	r1, r1, r7, r2
 80096b6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80096ba:	9209      	str	r2, [sp, #36]	; 0x24
 80096bc:	e7b5      	b.n	800962a <_strtod_l+0x2b2>
 80096be:	2a6e      	cmp	r2, #110	; 0x6e
 80096c0:	e7d9      	b.n	8009676 <_strtod_l+0x2fe>
 80096c2:	498a      	ldr	r1, [pc, #552]	; (80098ec <_strtod_l+0x574>)
 80096c4:	a819      	add	r0, sp, #100	; 0x64
 80096c6:	f002 fdd9 	bl	800c27c <__match>
 80096ca:	2800      	cmp	r0, #0
 80096cc:	f43f aea8 	beq.w	8009420 <_strtod_l+0xa8>
 80096d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80096d2:	4987      	ldr	r1, [pc, #540]	; (80098f0 <_strtod_l+0x578>)
 80096d4:	3b01      	subs	r3, #1
 80096d6:	a819      	add	r0, sp, #100	; 0x64
 80096d8:	9319      	str	r3, [sp, #100]	; 0x64
 80096da:	f002 fdcf 	bl	800c27c <__match>
 80096de:	b910      	cbnz	r0, 80096e6 <_strtod_l+0x36e>
 80096e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80096e2:	3301      	adds	r3, #1
 80096e4:	9319      	str	r3, [sp, #100]	; 0x64
 80096e6:	f04f 0800 	mov.w	r8, #0
 80096ea:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80098f4 <_strtod_l+0x57c>
 80096ee:	e67c      	b.n	80093ea <_strtod_l+0x72>
 80096f0:	4881      	ldr	r0, [pc, #516]	; (80098f8 <_strtod_l+0x580>)
 80096f2:	f001 fc39 	bl	800af68 <nan>
 80096f6:	4680      	mov	r8, r0
 80096f8:	4689      	mov	r9, r1
 80096fa:	e676      	b.n	80093ea <_strtod_l+0x72>
 80096fc:	9b08      	ldr	r3, [sp, #32]
 80096fe:	f1bb 0f00 	cmp.w	fp, #0
 8009702:	bf08      	it	eq
 8009704:	46b3      	moveq	fp, r6
 8009706:	1afb      	subs	r3, r7, r3
 8009708:	2e10      	cmp	r6, #16
 800970a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800970c:	4635      	mov	r5, r6
 800970e:	9309      	str	r3, [sp, #36]	; 0x24
 8009710:	bfa8      	it	ge
 8009712:	2510      	movge	r5, #16
 8009714:	f7f6 fed6 	bl	80004c4 <__aeabi_ui2d>
 8009718:	2e09      	cmp	r6, #9
 800971a:	4680      	mov	r8, r0
 800971c:	4689      	mov	r9, r1
 800971e:	dd13      	ble.n	8009748 <_strtod_l+0x3d0>
 8009720:	4b76      	ldr	r3, [pc, #472]	; (80098fc <_strtod_l+0x584>)
 8009722:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009726:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800972a:	f7f6 ff45 	bl	80005b8 <__aeabi_dmul>
 800972e:	4680      	mov	r8, r0
 8009730:	4650      	mov	r0, sl
 8009732:	4689      	mov	r9, r1
 8009734:	f7f6 fec6 	bl	80004c4 <__aeabi_ui2d>
 8009738:	4602      	mov	r2, r0
 800973a:	460b      	mov	r3, r1
 800973c:	4640      	mov	r0, r8
 800973e:	4649      	mov	r1, r9
 8009740:	f7f6 fd84 	bl	800024c <__adddf3>
 8009744:	4680      	mov	r8, r0
 8009746:	4689      	mov	r9, r1
 8009748:	2e0f      	cmp	r6, #15
 800974a:	dc36      	bgt.n	80097ba <_strtod_l+0x442>
 800974c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800974e:	2b00      	cmp	r3, #0
 8009750:	f43f ae4b 	beq.w	80093ea <_strtod_l+0x72>
 8009754:	dd22      	ble.n	800979c <_strtod_l+0x424>
 8009756:	2b16      	cmp	r3, #22
 8009758:	dc09      	bgt.n	800976e <_strtod_l+0x3f6>
 800975a:	4968      	ldr	r1, [pc, #416]	; (80098fc <_strtod_l+0x584>)
 800975c:	4642      	mov	r2, r8
 800975e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009762:	464b      	mov	r3, r9
 8009764:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009768:	f7f6 ff26 	bl	80005b8 <__aeabi_dmul>
 800976c:	e7c3      	b.n	80096f6 <_strtod_l+0x37e>
 800976e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009770:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009774:	4293      	cmp	r3, r2
 8009776:	db20      	blt.n	80097ba <_strtod_l+0x442>
 8009778:	4c60      	ldr	r4, [pc, #384]	; (80098fc <_strtod_l+0x584>)
 800977a:	f1c6 060f 	rsb	r6, r6, #15
 800977e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009782:	4642      	mov	r2, r8
 8009784:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009788:	464b      	mov	r3, r9
 800978a:	f7f6 ff15 	bl	80005b8 <__aeabi_dmul>
 800978e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009790:	1b9e      	subs	r6, r3, r6
 8009792:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009796:	e9d4 2300 	ldrd	r2, r3, [r4]
 800979a:	e7e5      	b.n	8009768 <_strtod_l+0x3f0>
 800979c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800979e:	3316      	adds	r3, #22
 80097a0:	db0b      	blt.n	80097ba <_strtod_l+0x442>
 80097a2:	9b08      	ldr	r3, [sp, #32]
 80097a4:	4640      	mov	r0, r8
 80097a6:	1bdf      	subs	r7, r3, r7
 80097a8:	4b54      	ldr	r3, [pc, #336]	; (80098fc <_strtod_l+0x584>)
 80097aa:	4649      	mov	r1, r9
 80097ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80097b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097b4:	f7f7 f82a 	bl	800080c <__aeabi_ddiv>
 80097b8:	e79d      	b.n	80096f6 <_strtod_l+0x37e>
 80097ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097bc:	1b75      	subs	r5, r6, r5
 80097be:	441d      	add	r5, r3
 80097c0:	2d00      	cmp	r5, #0
 80097c2:	dd70      	ble.n	80098a6 <_strtod_l+0x52e>
 80097c4:	f015 030f 	ands.w	r3, r5, #15
 80097c8:	d00a      	beq.n	80097e0 <_strtod_l+0x468>
 80097ca:	494c      	ldr	r1, [pc, #304]	; (80098fc <_strtod_l+0x584>)
 80097cc:	4642      	mov	r2, r8
 80097ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80097d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097d6:	464b      	mov	r3, r9
 80097d8:	f7f6 feee 	bl	80005b8 <__aeabi_dmul>
 80097dc:	4680      	mov	r8, r0
 80097de:	4689      	mov	r9, r1
 80097e0:	f035 050f 	bics.w	r5, r5, #15
 80097e4:	d04d      	beq.n	8009882 <_strtod_l+0x50a>
 80097e6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80097ea:	dd22      	ble.n	8009832 <_strtod_l+0x4ba>
 80097ec:	2600      	movs	r6, #0
 80097ee:	46b3      	mov	fp, r6
 80097f0:	960b      	str	r6, [sp, #44]	; 0x2c
 80097f2:	9608      	str	r6, [sp, #32]
 80097f4:	2322      	movs	r3, #34	; 0x22
 80097f6:	f04f 0800 	mov.w	r8, #0
 80097fa:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80098f4 <_strtod_l+0x57c>
 80097fe:	6023      	str	r3, [r4, #0]
 8009800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009802:	2b00      	cmp	r3, #0
 8009804:	f43f adf1 	beq.w	80093ea <_strtod_l+0x72>
 8009808:	4620      	mov	r0, r4
 800980a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800980c:	f002 fe38 	bl	800c480 <_Bfree>
 8009810:	4620      	mov	r0, r4
 8009812:	9908      	ldr	r1, [sp, #32]
 8009814:	f002 fe34 	bl	800c480 <_Bfree>
 8009818:	4659      	mov	r1, fp
 800981a:	4620      	mov	r0, r4
 800981c:	f002 fe30 	bl	800c480 <_Bfree>
 8009820:	4620      	mov	r0, r4
 8009822:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009824:	f002 fe2c 	bl	800c480 <_Bfree>
 8009828:	4631      	mov	r1, r6
 800982a:	4620      	mov	r0, r4
 800982c:	f002 fe28 	bl	800c480 <_Bfree>
 8009830:	e5db      	b.n	80093ea <_strtod_l+0x72>
 8009832:	4b33      	ldr	r3, [pc, #204]	; (8009900 <_strtod_l+0x588>)
 8009834:	4640      	mov	r0, r8
 8009836:	9305      	str	r3, [sp, #20]
 8009838:	2300      	movs	r3, #0
 800983a:	4649      	mov	r1, r9
 800983c:	469a      	mov	sl, r3
 800983e:	112d      	asrs	r5, r5, #4
 8009840:	2d01      	cmp	r5, #1
 8009842:	dc21      	bgt.n	8009888 <_strtod_l+0x510>
 8009844:	b10b      	cbz	r3, 800984a <_strtod_l+0x4d2>
 8009846:	4680      	mov	r8, r0
 8009848:	4689      	mov	r9, r1
 800984a:	492d      	ldr	r1, [pc, #180]	; (8009900 <_strtod_l+0x588>)
 800984c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009850:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009854:	4642      	mov	r2, r8
 8009856:	e9d1 0100 	ldrd	r0, r1, [r1]
 800985a:	464b      	mov	r3, r9
 800985c:	f7f6 feac 	bl	80005b8 <__aeabi_dmul>
 8009860:	4b24      	ldr	r3, [pc, #144]	; (80098f4 <_strtod_l+0x57c>)
 8009862:	460a      	mov	r2, r1
 8009864:	400b      	ands	r3, r1
 8009866:	4927      	ldr	r1, [pc, #156]	; (8009904 <_strtod_l+0x58c>)
 8009868:	4680      	mov	r8, r0
 800986a:	428b      	cmp	r3, r1
 800986c:	d8be      	bhi.n	80097ec <_strtod_l+0x474>
 800986e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009872:	428b      	cmp	r3, r1
 8009874:	bf86      	itte	hi
 8009876:	f04f 38ff 	movhi.w	r8, #4294967295
 800987a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8009908 <_strtod_l+0x590>
 800987e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009882:	2300      	movs	r3, #0
 8009884:	9305      	str	r3, [sp, #20]
 8009886:	e07b      	b.n	8009980 <_strtod_l+0x608>
 8009888:	07ea      	lsls	r2, r5, #31
 800988a:	d505      	bpl.n	8009898 <_strtod_l+0x520>
 800988c:	9b05      	ldr	r3, [sp, #20]
 800988e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009892:	f7f6 fe91 	bl	80005b8 <__aeabi_dmul>
 8009896:	2301      	movs	r3, #1
 8009898:	9a05      	ldr	r2, [sp, #20]
 800989a:	f10a 0a01 	add.w	sl, sl, #1
 800989e:	3208      	adds	r2, #8
 80098a0:	106d      	asrs	r5, r5, #1
 80098a2:	9205      	str	r2, [sp, #20]
 80098a4:	e7cc      	b.n	8009840 <_strtod_l+0x4c8>
 80098a6:	d0ec      	beq.n	8009882 <_strtod_l+0x50a>
 80098a8:	426d      	negs	r5, r5
 80098aa:	f015 020f 	ands.w	r2, r5, #15
 80098ae:	d00a      	beq.n	80098c6 <_strtod_l+0x54e>
 80098b0:	4b12      	ldr	r3, [pc, #72]	; (80098fc <_strtod_l+0x584>)
 80098b2:	4640      	mov	r0, r8
 80098b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098b8:	4649      	mov	r1, r9
 80098ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098be:	f7f6 ffa5 	bl	800080c <__aeabi_ddiv>
 80098c2:	4680      	mov	r8, r0
 80098c4:	4689      	mov	r9, r1
 80098c6:	112d      	asrs	r5, r5, #4
 80098c8:	d0db      	beq.n	8009882 <_strtod_l+0x50a>
 80098ca:	2d1f      	cmp	r5, #31
 80098cc:	dd1e      	ble.n	800990c <_strtod_l+0x594>
 80098ce:	2600      	movs	r6, #0
 80098d0:	46b3      	mov	fp, r6
 80098d2:	960b      	str	r6, [sp, #44]	; 0x2c
 80098d4:	9608      	str	r6, [sp, #32]
 80098d6:	2322      	movs	r3, #34	; 0x22
 80098d8:	f04f 0800 	mov.w	r8, #0
 80098dc:	f04f 0900 	mov.w	r9, #0
 80098e0:	6023      	str	r3, [r4, #0]
 80098e2:	e78d      	b.n	8009800 <_strtod_l+0x488>
 80098e4:	0800dc26 	.word	0x0800dc26
 80098e8:	0800dad8 	.word	0x0800dad8
 80098ec:	0800dc1e 	.word	0x0800dc1e
 80098f0:	0800dd05 	.word	0x0800dd05
 80098f4:	7ff00000 	.word	0x7ff00000
 80098f8:	0800dd01 	.word	0x0800dd01
 80098fc:	0800de60 	.word	0x0800de60
 8009900:	0800de38 	.word	0x0800de38
 8009904:	7ca00000 	.word	0x7ca00000
 8009908:	7fefffff 	.word	0x7fefffff
 800990c:	f015 0310 	ands.w	r3, r5, #16
 8009910:	bf18      	it	ne
 8009912:	236a      	movne	r3, #106	; 0x6a
 8009914:	4640      	mov	r0, r8
 8009916:	9305      	str	r3, [sp, #20]
 8009918:	4649      	mov	r1, r9
 800991a:	2300      	movs	r3, #0
 800991c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8009be8 <_strtod_l+0x870>
 8009920:	07ea      	lsls	r2, r5, #31
 8009922:	d504      	bpl.n	800992e <_strtod_l+0x5b6>
 8009924:	e9da 2300 	ldrd	r2, r3, [sl]
 8009928:	f7f6 fe46 	bl	80005b8 <__aeabi_dmul>
 800992c:	2301      	movs	r3, #1
 800992e:	106d      	asrs	r5, r5, #1
 8009930:	f10a 0a08 	add.w	sl, sl, #8
 8009934:	d1f4      	bne.n	8009920 <_strtod_l+0x5a8>
 8009936:	b10b      	cbz	r3, 800993c <_strtod_l+0x5c4>
 8009938:	4680      	mov	r8, r0
 800993a:	4689      	mov	r9, r1
 800993c:	9b05      	ldr	r3, [sp, #20]
 800993e:	b1bb      	cbz	r3, 8009970 <_strtod_l+0x5f8>
 8009940:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009944:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009948:	2b00      	cmp	r3, #0
 800994a:	4649      	mov	r1, r9
 800994c:	dd10      	ble.n	8009970 <_strtod_l+0x5f8>
 800994e:	2b1f      	cmp	r3, #31
 8009950:	f340 8128 	ble.w	8009ba4 <_strtod_l+0x82c>
 8009954:	2b34      	cmp	r3, #52	; 0x34
 8009956:	bfd8      	it	le
 8009958:	f04f 33ff 	movle.w	r3, #4294967295
 800995c:	f04f 0800 	mov.w	r8, #0
 8009960:	bfcf      	iteee	gt
 8009962:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009966:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800996a:	4093      	lslle	r3, r2
 800996c:	ea03 0901 	andle.w	r9, r3, r1
 8009970:	2200      	movs	r2, #0
 8009972:	2300      	movs	r3, #0
 8009974:	4640      	mov	r0, r8
 8009976:	4649      	mov	r1, r9
 8009978:	f7f7 f886 	bl	8000a88 <__aeabi_dcmpeq>
 800997c:	2800      	cmp	r0, #0
 800997e:	d1a6      	bne.n	80098ce <_strtod_l+0x556>
 8009980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009982:	465a      	mov	r2, fp
 8009984:	9300      	str	r3, [sp, #0]
 8009986:	4620      	mov	r0, r4
 8009988:	4633      	mov	r3, r6
 800998a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800998c:	f002 fde0 	bl	800c550 <__s2b>
 8009990:	900b      	str	r0, [sp, #44]	; 0x2c
 8009992:	2800      	cmp	r0, #0
 8009994:	f43f af2a 	beq.w	80097ec <_strtod_l+0x474>
 8009998:	2600      	movs	r6, #0
 800999a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800999c:	9b08      	ldr	r3, [sp, #32]
 800999e:	2a00      	cmp	r2, #0
 80099a0:	eba3 0307 	sub.w	r3, r3, r7
 80099a4:	bfa8      	it	ge
 80099a6:	2300      	movge	r3, #0
 80099a8:	46b3      	mov	fp, r6
 80099aa:	9312      	str	r3, [sp, #72]	; 0x48
 80099ac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80099b0:	9316      	str	r3, [sp, #88]	; 0x58
 80099b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099b4:	4620      	mov	r0, r4
 80099b6:	6859      	ldr	r1, [r3, #4]
 80099b8:	f002 fd22 	bl	800c400 <_Balloc>
 80099bc:	9008      	str	r0, [sp, #32]
 80099be:	2800      	cmp	r0, #0
 80099c0:	f43f af18 	beq.w	80097f4 <_strtod_l+0x47c>
 80099c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099c6:	300c      	adds	r0, #12
 80099c8:	691a      	ldr	r2, [r3, #16]
 80099ca:	f103 010c 	add.w	r1, r3, #12
 80099ce:	3202      	adds	r2, #2
 80099d0:	0092      	lsls	r2, r2, #2
 80099d2:	f001 faba 	bl	800af4a <memcpy>
 80099d6:	ab1c      	add	r3, sp, #112	; 0x70
 80099d8:	9301      	str	r3, [sp, #4]
 80099da:	ab1b      	add	r3, sp, #108	; 0x6c
 80099dc:	9300      	str	r3, [sp, #0]
 80099de:	4642      	mov	r2, r8
 80099e0:	464b      	mov	r3, r9
 80099e2:	4620      	mov	r0, r4
 80099e4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80099e8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80099ec:	f003 f8dc 	bl	800cba8 <__d2b>
 80099f0:	901a      	str	r0, [sp, #104]	; 0x68
 80099f2:	2800      	cmp	r0, #0
 80099f4:	f43f aefe 	beq.w	80097f4 <_strtod_l+0x47c>
 80099f8:	2101      	movs	r1, #1
 80099fa:	4620      	mov	r0, r4
 80099fc:	f002 fe40 	bl	800c680 <__i2b>
 8009a00:	4683      	mov	fp, r0
 8009a02:	2800      	cmp	r0, #0
 8009a04:	f43f aef6 	beq.w	80097f4 <_strtod_l+0x47c>
 8009a08:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8009a0a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009a0c:	2f00      	cmp	r7, #0
 8009a0e:	bfab      	itete	ge
 8009a10:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8009a12:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009a14:	eb07 0a03 	addge.w	sl, r7, r3
 8009a18:	1bdd      	sublt	r5, r3, r7
 8009a1a:	9b05      	ldr	r3, [sp, #20]
 8009a1c:	bfa8      	it	ge
 8009a1e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009a20:	eba7 0703 	sub.w	r7, r7, r3
 8009a24:	4417      	add	r7, r2
 8009a26:	4b71      	ldr	r3, [pc, #452]	; (8009bec <_strtod_l+0x874>)
 8009a28:	f107 37ff 	add.w	r7, r7, #4294967295
 8009a2c:	bfb8      	it	lt
 8009a2e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8009a32:	429f      	cmp	r7, r3
 8009a34:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009a38:	f280 80c7 	bge.w	8009bca <_strtod_l+0x852>
 8009a3c:	1bdb      	subs	r3, r3, r7
 8009a3e:	2b1f      	cmp	r3, #31
 8009a40:	f04f 0101 	mov.w	r1, #1
 8009a44:	eba2 0203 	sub.w	r2, r2, r3
 8009a48:	f300 80b3 	bgt.w	8009bb2 <_strtod_l+0x83a>
 8009a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8009a50:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a52:	2300      	movs	r3, #0
 8009a54:	9310      	str	r3, [sp, #64]	; 0x40
 8009a56:	eb0a 0702 	add.w	r7, sl, r2
 8009a5a:	9b05      	ldr	r3, [sp, #20]
 8009a5c:	45ba      	cmp	sl, r7
 8009a5e:	4415      	add	r5, r2
 8009a60:	441d      	add	r5, r3
 8009a62:	4653      	mov	r3, sl
 8009a64:	bfa8      	it	ge
 8009a66:	463b      	movge	r3, r7
 8009a68:	42ab      	cmp	r3, r5
 8009a6a:	bfa8      	it	ge
 8009a6c:	462b      	movge	r3, r5
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	bfc2      	ittt	gt
 8009a72:	1aff      	subgt	r7, r7, r3
 8009a74:	1aed      	subgt	r5, r5, r3
 8009a76:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009a7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	dd17      	ble.n	8009ab0 <_strtod_l+0x738>
 8009a80:	4659      	mov	r1, fp
 8009a82:	461a      	mov	r2, r3
 8009a84:	4620      	mov	r0, r4
 8009a86:	f002 feb9 	bl	800c7fc <__pow5mult>
 8009a8a:	4683      	mov	fp, r0
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	f43f aeb1 	beq.w	80097f4 <_strtod_l+0x47c>
 8009a92:	4601      	mov	r1, r0
 8009a94:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009a96:	4620      	mov	r0, r4
 8009a98:	f002 fe08 	bl	800c6ac <__multiply>
 8009a9c:	900a      	str	r0, [sp, #40]	; 0x28
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	f43f aea8 	beq.w	80097f4 <_strtod_l+0x47c>
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009aa8:	f002 fcea 	bl	800c480 <_Bfree>
 8009aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aae:	931a      	str	r3, [sp, #104]	; 0x68
 8009ab0:	2f00      	cmp	r7, #0
 8009ab2:	f300 808f 	bgt.w	8009bd4 <_strtod_l+0x85c>
 8009ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	dd08      	ble.n	8009ace <_strtod_l+0x756>
 8009abc:	4620      	mov	r0, r4
 8009abe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009ac0:	9908      	ldr	r1, [sp, #32]
 8009ac2:	f002 fe9b 	bl	800c7fc <__pow5mult>
 8009ac6:	9008      	str	r0, [sp, #32]
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	f43f ae93 	beq.w	80097f4 <_strtod_l+0x47c>
 8009ace:	2d00      	cmp	r5, #0
 8009ad0:	dd08      	ble.n	8009ae4 <_strtod_l+0x76c>
 8009ad2:	462a      	mov	r2, r5
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	9908      	ldr	r1, [sp, #32]
 8009ad8:	f002 feea 	bl	800c8b0 <__lshift>
 8009adc:	9008      	str	r0, [sp, #32]
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	f43f ae88 	beq.w	80097f4 <_strtod_l+0x47c>
 8009ae4:	f1ba 0f00 	cmp.w	sl, #0
 8009ae8:	dd08      	ble.n	8009afc <_strtod_l+0x784>
 8009aea:	4659      	mov	r1, fp
 8009aec:	4652      	mov	r2, sl
 8009aee:	4620      	mov	r0, r4
 8009af0:	f002 fede 	bl	800c8b0 <__lshift>
 8009af4:	4683      	mov	fp, r0
 8009af6:	2800      	cmp	r0, #0
 8009af8:	f43f ae7c 	beq.w	80097f4 <_strtod_l+0x47c>
 8009afc:	4620      	mov	r0, r4
 8009afe:	9a08      	ldr	r2, [sp, #32]
 8009b00:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009b02:	f002 ff5d 	bl	800c9c0 <__mdiff>
 8009b06:	4606      	mov	r6, r0
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	f43f ae73 	beq.w	80097f4 <_strtod_l+0x47c>
 8009b0e:	2500      	movs	r5, #0
 8009b10:	68c3      	ldr	r3, [r0, #12]
 8009b12:	4659      	mov	r1, fp
 8009b14:	60c5      	str	r5, [r0, #12]
 8009b16:	930a      	str	r3, [sp, #40]	; 0x28
 8009b18:	f002 ff36 	bl	800c988 <__mcmp>
 8009b1c:	42a8      	cmp	r0, r5
 8009b1e:	da6b      	bge.n	8009bf8 <_strtod_l+0x880>
 8009b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b22:	ea53 0308 	orrs.w	r3, r3, r8
 8009b26:	f040 808f 	bne.w	8009c48 <_strtod_l+0x8d0>
 8009b2a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	f040 808a 	bne.w	8009c48 <_strtod_l+0x8d0>
 8009b34:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009b38:	0d1b      	lsrs	r3, r3, #20
 8009b3a:	051b      	lsls	r3, r3, #20
 8009b3c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009b40:	f240 8082 	bls.w	8009c48 <_strtod_l+0x8d0>
 8009b44:	6973      	ldr	r3, [r6, #20]
 8009b46:	b913      	cbnz	r3, 8009b4e <_strtod_l+0x7d6>
 8009b48:	6933      	ldr	r3, [r6, #16]
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	dd7c      	ble.n	8009c48 <_strtod_l+0x8d0>
 8009b4e:	4631      	mov	r1, r6
 8009b50:	2201      	movs	r2, #1
 8009b52:	4620      	mov	r0, r4
 8009b54:	f002 feac 	bl	800c8b0 <__lshift>
 8009b58:	4659      	mov	r1, fp
 8009b5a:	4606      	mov	r6, r0
 8009b5c:	f002 ff14 	bl	800c988 <__mcmp>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	dd71      	ble.n	8009c48 <_strtod_l+0x8d0>
 8009b64:	9905      	ldr	r1, [sp, #20]
 8009b66:	464b      	mov	r3, r9
 8009b68:	4a21      	ldr	r2, [pc, #132]	; (8009bf0 <_strtod_l+0x878>)
 8009b6a:	2900      	cmp	r1, #0
 8009b6c:	f000 808d 	beq.w	8009c8a <_strtod_l+0x912>
 8009b70:	ea02 0109 	and.w	r1, r2, r9
 8009b74:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009b78:	f300 8087 	bgt.w	8009c8a <_strtod_l+0x912>
 8009b7c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009b80:	f77f aea9 	ble.w	80098d6 <_strtod_l+0x55e>
 8009b84:	4640      	mov	r0, r8
 8009b86:	4649      	mov	r1, r9
 8009b88:	4b1a      	ldr	r3, [pc, #104]	; (8009bf4 <_strtod_l+0x87c>)
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f7f6 fd14 	bl	80005b8 <__aeabi_dmul>
 8009b90:	4b17      	ldr	r3, [pc, #92]	; (8009bf0 <_strtod_l+0x878>)
 8009b92:	4680      	mov	r8, r0
 8009b94:	400b      	ands	r3, r1
 8009b96:	4689      	mov	r9, r1
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f47f ae35 	bne.w	8009808 <_strtod_l+0x490>
 8009b9e:	2322      	movs	r3, #34	; 0x22
 8009ba0:	6023      	str	r3, [r4, #0]
 8009ba2:	e631      	b.n	8009808 <_strtod_l+0x490>
 8009ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bac:	ea03 0808 	and.w	r8, r3, r8
 8009bb0:	e6de      	b.n	8009970 <_strtod_l+0x5f8>
 8009bb2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8009bb6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8009bba:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8009bbe:	37e2      	adds	r7, #226	; 0xe2
 8009bc0:	fa01 f307 	lsl.w	r3, r1, r7
 8009bc4:	9310      	str	r3, [sp, #64]	; 0x40
 8009bc6:	9113      	str	r1, [sp, #76]	; 0x4c
 8009bc8:	e745      	b.n	8009a56 <_strtod_l+0x6de>
 8009bca:	2300      	movs	r3, #0
 8009bcc:	9310      	str	r3, [sp, #64]	; 0x40
 8009bce:	2301      	movs	r3, #1
 8009bd0:	9313      	str	r3, [sp, #76]	; 0x4c
 8009bd2:	e740      	b.n	8009a56 <_strtod_l+0x6de>
 8009bd4:	463a      	mov	r2, r7
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009bda:	f002 fe69 	bl	800c8b0 <__lshift>
 8009bde:	901a      	str	r0, [sp, #104]	; 0x68
 8009be0:	2800      	cmp	r0, #0
 8009be2:	f47f af68 	bne.w	8009ab6 <_strtod_l+0x73e>
 8009be6:	e605      	b.n	80097f4 <_strtod_l+0x47c>
 8009be8:	0800daf0 	.word	0x0800daf0
 8009bec:	fffffc02 	.word	0xfffffc02
 8009bf0:	7ff00000 	.word	0x7ff00000
 8009bf4:	39500000 	.word	0x39500000
 8009bf8:	46ca      	mov	sl, r9
 8009bfa:	d165      	bne.n	8009cc8 <_strtod_l+0x950>
 8009bfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bfe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c02:	b352      	cbz	r2, 8009c5a <_strtod_l+0x8e2>
 8009c04:	4a9e      	ldr	r2, [pc, #632]	; (8009e80 <_strtod_l+0xb08>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d12a      	bne.n	8009c60 <_strtod_l+0x8e8>
 8009c0a:	9b05      	ldr	r3, [sp, #20]
 8009c0c:	4641      	mov	r1, r8
 8009c0e:	b1fb      	cbz	r3, 8009c50 <_strtod_l+0x8d8>
 8009c10:	4b9c      	ldr	r3, [pc, #624]	; (8009e84 <_strtod_l+0xb0c>)
 8009c12:	f04f 32ff 	mov.w	r2, #4294967295
 8009c16:	ea09 0303 	and.w	r3, r9, r3
 8009c1a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009c1e:	d81a      	bhi.n	8009c56 <_strtod_l+0x8de>
 8009c20:	0d1b      	lsrs	r3, r3, #20
 8009c22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009c26:	fa02 f303 	lsl.w	r3, r2, r3
 8009c2a:	4299      	cmp	r1, r3
 8009c2c:	d118      	bne.n	8009c60 <_strtod_l+0x8e8>
 8009c2e:	4b96      	ldr	r3, [pc, #600]	; (8009e88 <_strtod_l+0xb10>)
 8009c30:	459a      	cmp	sl, r3
 8009c32:	d102      	bne.n	8009c3a <_strtod_l+0x8c2>
 8009c34:	3101      	adds	r1, #1
 8009c36:	f43f addd 	beq.w	80097f4 <_strtod_l+0x47c>
 8009c3a:	f04f 0800 	mov.w	r8, #0
 8009c3e:	4b91      	ldr	r3, [pc, #580]	; (8009e84 <_strtod_l+0xb0c>)
 8009c40:	ea0a 0303 	and.w	r3, sl, r3
 8009c44:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009c48:	9b05      	ldr	r3, [sp, #20]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d19a      	bne.n	8009b84 <_strtod_l+0x80c>
 8009c4e:	e5db      	b.n	8009808 <_strtod_l+0x490>
 8009c50:	f04f 33ff 	mov.w	r3, #4294967295
 8009c54:	e7e9      	b.n	8009c2a <_strtod_l+0x8b2>
 8009c56:	4613      	mov	r3, r2
 8009c58:	e7e7      	b.n	8009c2a <_strtod_l+0x8b2>
 8009c5a:	ea53 0308 	orrs.w	r3, r3, r8
 8009c5e:	d081      	beq.n	8009b64 <_strtod_l+0x7ec>
 8009c60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c62:	b1e3      	cbz	r3, 8009c9e <_strtod_l+0x926>
 8009c64:	ea13 0f0a 	tst.w	r3, sl
 8009c68:	d0ee      	beq.n	8009c48 <_strtod_l+0x8d0>
 8009c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c6c:	4640      	mov	r0, r8
 8009c6e:	4649      	mov	r1, r9
 8009c70:	9a05      	ldr	r2, [sp, #20]
 8009c72:	b1c3      	cbz	r3, 8009ca6 <_strtod_l+0x92e>
 8009c74:	f7ff fb5e 	bl	8009334 <sulp>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009c7e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009c80:	f7f6 fae4 	bl	800024c <__adddf3>
 8009c84:	4680      	mov	r8, r0
 8009c86:	4689      	mov	r9, r1
 8009c88:	e7de      	b.n	8009c48 <_strtod_l+0x8d0>
 8009c8a:	4013      	ands	r3, r2
 8009c8c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009c90:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009c94:	f04f 38ff 	mov.w	r8, #4294967295
 8009c98:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009c9c:	e7d4      	b.n	8009c48 <_strtod_l+0x8d0>
 8009c9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ca0:	ea13 0f08 	tst.w	r3, r8
 8009ca4:	e7e0      	b.n	8009c68 <_strtod_l+0x8f0>
 8009ca6:	f7ff fb45 	bl	8009334 <sulp>
 8009caa:	4602      	mov	r2, r0
 8009cac:	460b      	mov	r3, r1
 8009cae:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009cb0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009cb2:	f7f6 fac9 	bl	8000248 <__aeabi_dsub>
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	2300      	movs	r3, #0
 8009cba:	4680      	mov	r8, r0
 8009cbc:	4689      	mov	r9, r1
 8009cbe:	f7f6 fee3 	bl	8000a88 <__aeabi_dcmpeq>
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	d0c0      	beq.n	8009c48 <_strtod_l+0x8d0>
 8009cc6:	e606      	b.n	80098d6 <_strtod_l+0x55e>
 8009cc8:	4659      	mov	r1, fp
 8009cca:	4630      	mov	r0, r6
 8009ccc:	f002 ffc2 	bl	800cc54 <__ratio>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009cde:	f7f6 fee7 	bl	8000ab0 <__aeabi_dcmple>
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	d06f      	beq.n	8009dc6 <_strtod_l+0xa4e>
 8009ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d17c      	bne.n	8009de6 <_strtod_l+0xa6e>
 8009cec:	f1b8 0f00 	cmp.w	r8, #0
 8009cf0:	d159      	bne.n	8009da6 <_strtod_l+0xa2e>
 8009cf2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d17b      	bne.n	8009df2 <_strtod_l+0xa7a>
 8009cfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009cfe:	2200      	movs	r2, #0
 8009d00:	4b62      	ldr	r3, [pc, #392]	; (8009e8c <_strtod_l+0xb14>)
 8009d02:	f7f6 fecb 	bl	8000a9c <__aeabi_dcmplt>
 8009d06:	2800      	cmp	r0, #0
 8009d08:	d15a      	bne.n	8009dc0 <_strtod_l+0xa48>
 8009d0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009d0e:	2200      	movs	r2, #0
 8009d10:	4b5f      	ldr	r3, [pc, #380]	; (8009e90 <_strtod_l+0xb18>)
 8009d12:	f7f6 fc51 	bl	80005b8 <__aeabi_dmul>
 8009d16:	4605      	mov	r5, r0
 8009d18:	460f      	mov	r7, r1
 8009d1a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009d1e:	9506      	str	r5, [sp, #24]
 8009d20:	9307      	str	r3, [sp, #28]
 8009d22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d26:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009d2a:	4b56      	ldr	r3, [pc, #344]	; (8009e84 <_strtod_l+0xb0c>)
 8009d2c:	4a55      	ldr	r2, [pc, #340]	; (8009e84 <_strtod_l+0xb0c>)
 8009d2e:	ea0a 0303 	and.w	r3, sl, r3
 8009d32:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d34:	4b57      	ldr	r3, [pc, #348]	; (8009e94 <_strtod_l+0xb1c>)
 8009d36:	ea0a 0202 	and.w	r2, sl, r2
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	f040 80b0 	bne.w	8009ea0 <_strtod_l+0xb28>
 8009d40:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009d44:	4640      	mov	r0, r8
 8009d46:	4649      	mov	r1, r9
 8009d48:	f002 fec6 	bl	800cad8 <__ulp>
 8009d4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d50:	f7f6 fc32 	bl	80005b8 <__aeabi_dmul>
 8009d54:	4642      	mov	r2, r8
 8009d56:	464b      	mov	r3, r9
 8009d58:	f7f6 fa78 	bl	800024c <__adddf3>
 8009d5c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8009e84 <_strtod_l+0xb0c>
 8009d60:	4a4d      	ldr	r2, [pc, #308]	; (8009e98 <_strtod_l+0xb20>)
 8009d62:	ea01 0a0a 	and.w	sl, r1, sl
 8009d66:	4592      	cmp	sl, r2
 8009d68:	4680      	mov	r8, r0
 8009d6a:	d948      	bls.n	8009dfe <_strtod_l+0xa86>
 8009d6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d6e:	4b46      	ldr	r3, [pc, #280]	; (8009e88 <_strtod_l+0xb10>)
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d103      	bne.n	8009d7c <_strtod_l+0xa04>
 8009d74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d76:	3301      	adds	r3, #1
 8009d78:	f43f ad3c 	beq.w	80097f4 <_strtod_l+0x47c>
 8009d7c:	f04f 38ff 	mov.w	r8, #4294967295
 8009d80:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8009e88 <_strtod_l+0xb10>
 8009d84:	4620      	mov	r0, r4
 8009d86:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009d88:	f002 fb7a 	bl	800c480 <_Bfree>
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	9908      	ldr	r1, [sp, #32]
 8009d90:	f002 fb76 	bl	800c480 <_Bfree>
 8009d94:	4659      	mov	r1, fp
 8009d96:	4620      	mov	r0, r4
 8009d98:	f002 fb72 	bl	800c480 <_Bfree>
 8009d9c:	4631      	mov	r1, r6
 8009d9e:	4620      	mov	r0, r4
 8009da0:	f002 fb6e 	bl	800c480 <_Bfree>
 8009da4:	e605      	b.n	80099b2 <_strtod_l+0x63a>
 8009da6:	f1b8 0f01 	cmp.w	r8, #1
 8009daa:	d103      	bne.n	8009db4 <_strtod_l+0xa3c>
 8009dac:	f1b9 0f00 	cmp.w	r9, #0
 8009db0:	f43f ad91 	beq.w	80098d6 <_strtod_l+0x55e>
 8009db4:	2200      	movs	r2, #0
 8009db6:	4b39      	ldr	r3, [pc, #228]	; (8009e9c <_strtod_l+0xb24>)
 8009db8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009dba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009dbe:	e016      	b.n	8009dee <_strtod_l+0xa76>
 8009dc0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009dc2:	4f33      	ldr	r7, [pc, #204]	; (8009e90 <_strtod_l+0xb18>)
 8009dc4:	e7a9      	b.n	8009d1a <_strtod_l+0x9a2>
 8009dc6:	4b32      	ldr	r3, [pc, #200]	; (8009e90 <_strtod_l+0xb18>)
 8009dc8:	2200      	movs	r2, #0
 8009dca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009dce:	f7f6 fbf3 	bl	80005b8 <__aeabi_dmul>
 8009dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dd4:	4605      	mov	r5, r0
 8009dd6:	460f      	mov	r7, r1
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d09e      	beq.n	8009d1a <_strtod_l+0x9a2>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	460b      	mov	r3, r1
 8009de0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009de4:	e79d      	b.n	8009d22 <_strtod_l+0x9aa>
 8009de6:	2200      	movs	r2, #0
 8009de8:	4b28      	ldr	r3, [pc, #160]	; (8009e8c <_strtod_l+0xb14>)
 8009dea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009dee:	4f27      	ldr	r7, [pc, #156]	; (8009e8c <_strtod_l+0xb14>)
 8009df0:	e797      	b.n	8009d22 <_strtod_l+0x9aa>
 8009df2:	2200      	movs	r2, #0
 8009df4:	4b29      	ldr	r3, [pc, #164]	; (8009e9c <_strtod_l+0xb24>)
 8009df6:	4645      	mov	r5, r8
 8009df8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009dfc:	e7f7      	b.n	8009dee <_strtod_l+0xa76>
 8009dfe:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8009e02:	9b05      	ldr	r3, [sp, #20]
 8009e04:	46ca      	mov	sl, r9
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d1bc      	bne.n	8009d84 <_strtod_l+0xa0c>
 8009e0a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009e0e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009e10:	0d1b      	lsrs	r3, r3, #20
 8009e12:	051b      	lsls	r3, r3, #20
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d1b5      	bne.n	8009d84 <_strtod_l+0xa0c>
 8009e18:	4628      	mov	r0, r5
 8009e1a:	4639      	mov	r1, r7
 8009e1c:	f7f7 f9fe 	bl	800121c <__aeabi_d2lz>
 8009e20:	f7f6 fb9c 	bl	800055c <__aeabi_l2d>
 8009e24:	4602      	mov	r2, r0
 8009e26:	460b      	mov	r3, r1
 8009e28:	4628      	mov	r0, r5
 8009e2a:	4639      	mov	r1, r7
 8009e2c:	f7f6 fa0c 	bl	8000248 <__aeabi_dsub>
 8009e30:	460b      	mov	r3, r1
 8009e32:	4602      	mov	r2, r0
 8009e34:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8009e38:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e3e:	ea4a 0a08 	orr.w	sl, sl, r8
 8009e42:	ea5a 0a03 	orrs.w	sl, sl, r3
 8009e46:	d06c      	beq.n	8009f22 <_strtod_l+0xbaa>
 8009e48:	a309      	add	r3, pc, #36	; (adr r3, 8009e70 <_strtod_l+0xaf8>)
 8009e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4e:	f7f6 fe25 	bl	8000a9c <__aeabi_dcmplt>
 8009e52:	2800      	cmp	r0, #0
 8009e54:	f47f acd8 	bne.w	8009808 <_strtod_l+0x490>
 8009e58:	a307      	add	r3, pc, #28	; (adr r3, 8009e78 <_strtod_l+0xb00>)
 8009e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e62:	f7f6 fe39 	bl	8000ad8 <__aeabi_dcmpgt>
 8009e66:	2800      	cmp	r0, #0
 8009e68:	d08c      	beq.n	8009d84 <_strtod_l+0xa0c>
 8009e6a:	e4cd      	b.n	8009808 <_strtod_l+0x490>
 8009e6c:	f3af 8000 	nop.w
 8009e70:	94a03595 	.word	0x94a03595
 8009e74:	3fdfffff 	.word	0x3fdfffff
 8009e78:	35afe535 	.word	0x35afe535
 8009e7c:	3fe00000 	.word	0x3fe00000
 8009e80:	000fffff 	.word	0x000fffff
 8009e84:	7ff00000 	.word	0x7ff00000
 8009e88:	7fefffff 	.word	0x7fefffff
 8009e8c:	3ff00000 	.word	0x3ff00000
 8009e90:	3fe00000 	.word	0x3fe00000
 8009e94:	7fe00000 	.word	0x7fe00000
 8009e98:	7c9fffff 	.word	0x7c9fffff
 8009e9c:	bff00000 	.word	0xbff00000
 8009ea0:	9b05      	ldr	r3, [sp, #20]
 8009ea2:	b333      	cbz	r3, 8009ef2 <_strtod_l+0xb7a>
 8009ea4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ea6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009eaa:	d822      	bhi.n	8009ef2 <_strtod_l+0xb7a>
 8009eac:	a328      	add	r3, pc, #160	; (adr r3, 8009f50 <_strtod_l+0xbd8>)
 8009eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	4639      	mov	r1, r7
 8009eb6:	f7f6 fdfb 	bl	8000ab0 <__aeabi_dcmple>
 8009eba:	b1a0      	cbz	r0, 8009ee6 <_strtod_l+0xb6e>
 8009ebc:	4639      	mov	r1, r7
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	f7f6 fe52 	bl	8000b68 <__aeabi_d2uiz>
 8009ec4:	2801      	cmp	r0, #1
 8009ec6:	bf38      	it	cc
 8009ec8:	2001      	movcc	r0, #1
 8009eca:	f7f6 fafb 	bl	80004c4 <__aeabi_ui2d>
 8009ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ed0:	4605      	mov	r5, r0
 8009ed2:	460f      	mov	r7, r1
 8009ed4:	bb03      	cbnz	r3, 8009f18 <_strtod_l+0xba0>
 8009ed6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009eda:	9014      	str	r0, [sp, #80]	; 0x50
 8009edc:	9315      	str	r3, [sp, #84]	; 0x54
 8009ede:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009ee2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009ee6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ee8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009eea:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009eee:	1a9b      	subs	r3, r3, r2
 8009ef0:	9311      	str	r3, [sp, #68]	; 0x44
 8009ef2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009ef4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009ef6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8009efa:	f002 fded 	bl	800cad8 <__ulp>
 8009efe:	4602      	mov	r2, r0
 8009f00:	460b      	mov	r3, r1
 8009f02:	4640      	mov	r0, r8
 8009f04:	4649      	mov	r1, r9
 8009f06:	f7f6 fb57 	bl	80005b8 <__aeabi_dmul>
 8009f0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f0e:	f7f6 f99d 	bl	800024c <__adddf3>
 8009f12:	4680      	mov	r8, r0
 8009f14:	4689      	mov	r9, r1
 8009f16:	e774      	b.n	8009e02 <_strtod_l+0xa8a>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009f20:	e7dd      	b.n	8009ede <_strtod_l+0xb66>
 8009f22:	a30d      	add	r3, pc, #52	; (adr r3, 8009f58 <_strtod_l+0xbe0>)
 8009f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f28:	f7f6 fdb8 	bl	8000a9c <__aeabi_dcmplt>
 8009f2c:	e79b      	b.n	8009e66 <_strtod_l+0xaee>
 8009f2e:	2300      	movs	r3, #0
 8009f30:	930e      	str	r3, [sp, #56]	; 0x38
 8009f32:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009f34:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009f36:	6013      	str	r3, [r2, #0]
 8009f38:	f7ff ba5b 	b.w	80093f2 <_strtod_l+0x7a>
 8009f3c:	2a65      	cmp	r2, #101	; 0x65
 8009f3e:	f43f ab52 	beq.w	80095e6 <_strtod_l+0x26e>
 8009f42:	2a45      	cmp	r2, #69	; 0x45
 8009f44:	f43f ab4f 	beq.w	80095e6 <_strtod_l+0x26e>
 8009f48:	2301      	movs	r3, #1
 8009f4a:	f7ff bb87 	b.w	800965c <_strtod_l+0x2e4>
 8009f4e:	bf00      	nop
 8009f50:	ffc00000 	.word	0xffc00000
 8009f54:	41dfffff 	.word	0x41dfffff
 8009f58:	94a03595 	.word	0x94a03595
 8009f5c:	3fcfffff 	.word	0x3fcfffff

08009f60 <strtof>:
 8009f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f64:	4f24      	ldr	r7, [pc, #144]	; (8009ff8 <strtof+0x98>)
 8009f66:	460a      	mov	r2, r1
 8009f68:	4b24      	ldr	r3, [pc, #144]	; (8009ffc <strtof+0x9c>)
 8009f6a:	4601      	mov	r1, r0
 8009f6c:	6838      	ldr	r0, [r7, #0]
 8009f6e:	f7ff fa03 	bl	8009378 <_strtod_l>
 8009f72:	4602      	mov	r2, r0
 8009f74:	460b      	mov	r3, r1
 8009f76:	4606      	mov	r6, r0
 8009f78:	460c      	mov	r4, r1
 8009f7a:	f7f6 fdb7 	bl	8000aec <__aeabi_dcmpun>
 8009f7e:	b168      	cbz	r0, 8009f9c <strtof+0x3c>
 8009f80:	2c00      	cmp	r4, #0
 8009f82:	481f      	ldr	r0, [pc, #124]	; (800a000 <strtof+0xa0>)
 8009f84:	da06      	bge.n	8009f94 <strtof+0x34>
 8009f86:	f000 fff5 	bl	800af74 <nanf>
 8009f8a:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 8009f8e:	4628      	mov	r0, r5
 8009f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f98:	f000 bfec 	b.w	800af74 <nanf>
 8009f9c:	4621      	mov	r1, r4
 8009f9e:	4630      	mov	r0, r6
 8009fa0:	f7f6 fe02 	bl	8000ba8 <__aeabi_d2f>
 8009fa4:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8009fa8:	4605      	mov	r5, r0
 8009faa:	4916      	ldr	r1, [pc, #88]	; (800a004 <strtof+0xa4>)
 8009fac:	4640      	mov	r0, r8
 8009fae:	f7f7 f91f 	bl	80011f0 <__aeabi_fcmpun>
 8009fb2:	b9b0      	cbnz	r0, 8009fe2 <strtof+0x82>
 8009fb4:	4640      	mov	r0, r8
 8009fb6:	4913      	ldr	r1, [pc, #76]	; (800a004 <strtof+0xa4>)
 8009fb8:	f7f7 f8fc 	bl	80011b4 <__aeabi_fcmple>
 8009fbc:	b988      	cbnz	r0, 8009fe2 <strtof+0x82>
 8009fbe:	f024 4800 	bic.w	r8, r4, #2147483648	; 0x80000000
 8009fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	4641      	mov	r1, r8
 8009fca:	4b0f      	ldr	r3, [pc, #60]	; (800a008 <strtof+0xa8>)
 8009fcc:	f7f6 fd8e 	bl	8000aec <__aeabi_dcmpun>
 8009fd0:	b970      	cbnz	r0, 8009ff0 <strtof+0x90>
 8009fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	4641      	mov	r1, r8
 8009fda:	4b0b      	ldr	r3, [pc, #44]	; (800a008 <strtof+0xa8>)
 8009fdc:	f7f6 fd68 	bl	8000ab0 <__aeabi_dcmple>
 8009fe0:	b930      	cbnz	r0, 8009ff0 <strtof+0x90>
 8009fe2:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8009fe6:	d1d2      	bne.n	8009f8e <strtof+0x2e>
 8009fe8:	4b08      	ldr	r3, [pc, #32]	; (800a00c <strtof+0xac>)
 8009fea:	4023      	ands	r3, r4
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d0ce      	beq.n	8009f8e <strtof+0x2e>
 8009ff0:	2222      	movs	r2, #34	; 0x22
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	601a      	str	r2, [r3, #0]
 8009ff6:	e7ca      	b.n	8009f8e <strtof+0x2e>
 8009ff8:	200001d4 	.word	0x200001d4
 8009ffc:	2000001c 	.word	0x2000001c
 800a000:	0800dd01 	.word	0x0800dd01
 800a004:	7f7fffff 	.word	0x7f7fffff
 800a008:	7fefffff 	.word	0x7fefffff
 800a00c:	7ff00000 	.word	0x7ff00000

0800a010 <_strtol_l.constprop.0>:
 800a010:	2b01      	cmp	r3, #1
 800a012:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a016:	4686      	mov	lr, r0
 800a018:	4690      	mov	r8, r2
 800a01a:	d001      	beq.n	800a020 <_strtol_l.constprop.0+0x10>
 800a01c:	2b24      	cmp	r3, #36	; 0x24
 800a01e:	d906      	bls.n	800a02e <_strtol_l.constprop.0+0x1e>
 800a020:	f000 ff50 	bl	800aec4 <__errno>
 800a024:	2316      	movs	r3, #22
 800a026:	6003      	str	r3, [r0, #0]
 800a028:	2000      	movs	r0, #0
 800a02a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a02e:	460d      	mov	r5, r1
 800a030:	4835      	ldr	r0, [pc, #212]	; (800a108 <_strtol_l.constprop.0+0xf8>)
 800a032:	462a      	mov	r2, r5
 800a034:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a038:	5d06      	ldrb	r6, [r0, r4]
 800a03a:	f016 0608 	ands.w	r6, r6, #8
 800a03e:	d1f8      	bne.n	800a032 <_strtol_l.constprop.0+0x22>
 800a040:	2c2d      	cmp	r4, #45	; 0x2d
 800a042:	d12e      	bne.n	800a0a2 <_strtol_l.constprop.0+0x92>
 800a044:	2601      	movs	r6, #1
 800a046:	782c      	ldrb	r4, [r5, #0]
 800a048:	1c95      	adds	r5, r2, #2
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d057      	beq.n	800a0fe <_strtol_l.constprop.0+0xee>
 800a04e:	2b10      	cmp	r3, #16
 800a050:	d109      	bne.n	800a066 <_strtol_l.constprop.0+0x56>
 800a052:	2c30      	cmp	r4, #48	; 0x30
 800a054:	d107      	bne.n	800a066 <_strtol_l.constprop.0+0x56>
 800a056:	782a      	ldrb	r2, [r5, #0]
 800a058:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a05c:	2a58      	cmp	r2, #88	; 0x58
 800a05e:	d149      	bne.n	800a0f4 <_strtol_l.constprop.0+0xe4>
 800a060:	2310      	movs	r3, #16
 800a062:	786c      	ldrb	r4, [r5, #1]
 800a064:	3502      	adds	r5, #2
 800a066:	2200      	movs	r2, #0
 800a068:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800a06c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a070:	fbbc f9f3 	udiv	r9, ip, r3
 800a074:	4610      	mov	r0, r2
 800a076:	fb03 ca19 	mls	sl, r3, r9, ip
 800a07a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a07e:	2f09      	cmp	r7, #9
 800a080:	d814      	bhi.n	800a0ac <_strtol_l.constprop.0+0x9c>
 800a082:	463c      	mov	r4, r7
 800a084:	42a3      	cmp	r3, r4
 800a086:	dd20      	ble.n	800a0ca <_strtol_l.constprop.0+0xba>
 800a088:	1c57      	adds	r7, r2, #1
 800a08a:	d007      	beq.n	800a09c <_strtol_l.constprop.0+0x8c>
 800a08c:	4581      	cmp	r9, r0
 800a08e:	d319      	bcc.n	800a0c4 <_strtol_l.constprop.0+0xb4>
 800a090:	d101      	bne.n	800a096 <_strtol_l.constprop.0+0x86>
 800a092:	45a2      	cmp	sl, r4
 800a094:	db16      	blt.n	800a0c4 <_strtol_l.constprop.0+0xb4>
 800a096:	2201      	movs	r2, #1
 800a098:	fb00 4003 	mla	r0, r0, r3, r4
 800a09c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0a0:	e7eb      	b.n	800a07a <_strtol_l.constprop.0+0x6a>
 800a0a2:	2c2b      	cmp	r4, #43	; 0x2b
 800a0a4:	bf04      	itt	eq
 800a0a6:	782c      	ldrbeq	r4, [r5, #0]
 800a0a8:	1c95      	addeq	r5, r2, #2
 800a0aa:	e7ce      	b.n	800a04a <_strtol_l.constprop.0+0x3a>
 800a0ac:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a0b0:	2f19      	cmp	r7, #25
 800a0b2:	d801      	bhi.n	800a0b8 <_strtol_l.constprop.0+0xa8>
 800a0b4:	3c37      	subs	r4, #55	; 0x37
 800a0b6:	e7e5      	b.n	800a084 <_strtol_l.constprop.0+0x74>
 800a0b8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a0bc:	2f19      	cmp	r7, #25
 800a0be:	d804      	bhi.n	800a0ca <_strtol_l.constprop.0+0xba>
 800a0c0:	3c57      	subs	r4, #87	; 0x57
 800a0c2:	e7df      	b.n	800a084 <_strtol_l.constprop.0+0x74>
 800a0c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0c8:	e7e8      	b.n	800a09c <_strtol_l.constprop.0+0x8c>
 800a0ca:	1c53      	adds	r3, r2, #1
 800a0cc:	d108      	bne.n	800a0e0 <_strtol_l.constprop.0+0xd0>
 800a0ce:	2322      	movs	r3, #34	; 0x22
 800a0d0:	4660      	mov	r0, ip
 800a0d2:	f8ce 3000 	str.w	r3, [lr]
 800a0d6:	f1b8 0f00 	cmp.w	r8, #0
 800a0da:	d0a6      	beq.n	800a02a <_strtol_l.constprop.0+0x1a>
 800a0dc:	1e69      	subs	r1, r5, #1
 800a0de:	e006      	b.n	800a0ee <_strtol_l.constprop.0+0xde>
 800a0e0:	b106      	cbz	r6, 800a0e4 <_strtol_l.constprop.0+0xd4>
 800a0e2:	4240      	negs	r0, r0
 800a0e4:	f1b8 0f00 	cmp.w	r8, #0
 800a0e8:	d09f      	beq.n	800a02a <_strtol_l.constprop.0+0x1a>
 800a0ea:	2a00      	cmp	r2, #0
 800a0ec:	d1f6      	bne.n	800a0dc <_strtol_l.constprop.0+0xcc>
 800a0ee:	f8c8 1000 	str.w	r1, [r8]
 800a0f2:	e79a      	b.n	800a02a <_strtol_l.constprop.0+0x1a>
 800a0f4:	2430      	movs	r4, #48	; 0x30
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d1b5      	bne.n	800a066 <_strtol_l.constprop.0+0x56>
 800a0fa:	2308      	movs	r3, #8
 800a0fc:	e7b3      	b.n	800a066 <_strtol_l.constprop.0+0x56>
 800a0fe:	2c30      	cmp	r4, #48	; 0x30
 800a100:	d0a9      	beq.n	800a056 <_strtol_l.constprop.0+0x46>
 800a102:	230a      	movs	r3, #10
 800a104:	e7af      	b.n	800a066 <_strtol_l.constprop.0+0x56>
 800a106:	bf00      	nop
 800a108:	0800db19 	.word	0x0800db19

0800a10c <strtol>:
 800a10c:	4613      	mov	r3, r2
 800a10e:	460a      	mov	r2, r1
 800a110:	4601      	mov	r1, r0
 800a112:	4802      	ldr	r0, [pc, #8]	; (800a11c <strtol+0x10>)
 800a114:	6800      	ldr	r0, [r0, #0]
 800a116:	f7ff bf7b 	b.w	800a010 <_strtol_l.constprop.0>
 800a11a:	bf00      	nop
 800a11c:	200001d4 	.word	0x200001d4

0800a120 <__cvt>:
 800a120:	2b00      	cmp	r3, #0
 800a122:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a126:	461f      	mov	r7, r3
 800a128:	bfbb      	ittet	lt
 800a12a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800a12e:	461f      	movlt	r7, r3
 800a130:	2300      	movge	r3, #0
 800a132:	232d      	movlt	r3, #45	; 0x2d
 800a134:	b088      	sub	sp, #32
 800a136:	4614      	mov	r4, r2
 800a138:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a13a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a13c:	7013      	strb	r3, [r2, #0]
 800a13e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a140:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800a144:	f023 0820 	bic.w	r8, r3, #32
 800a148:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a14c:	d005      	beq.n	800a15a <__cvt+0x3a>
 800a14e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a152:	d100      	bne.n	800a156 <__cvt+0x36>
 800a154:	3501      	adds	r5, #1
 800a156:	2302      	movs	r3, #2
 800a158:	e000      	b.n	800a15c <__cvt+0x3c>
 800a15a:	2303      	movs	r3, #3
 800a15c:	aa07      	add	r2, sp, #28
 800a15e:	9204      	str	r2, [sp, #16]
 800a160:	aa06      	add	r2, sp, #24
 800a162:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a166:	e9cd 3500 	strd	r3, r5, [sp]
 800a16a:	4622      	mov	r2, r4
 800a16c:	463b      	mov	r3, r7
 800a16e:	f000 ffaf 	bl	800b0d0 <_dtoa_r>
 800a172:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a176:	4606      	mov	r6, r0
 800a178:	d102      	bne.n	800a180 <__cvt+0x60>
 800a17a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a17c:	07db      	lsls	r3, r3, #31
 800a17e:	d522      	bpl.n	800a1c6 <__cvt+0xa6>
 800a180:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a184:	eb06 0905 	add.w	r9, r6, r5
 800a188:	d110      	bne.n	800a1ac <__cvt+0x8c>
 800a18a:	7833      	ldrb	r3, [r6, #0]
 800a18c:	2b30      	cmp	r3, #48	; 0x30
 800a18e:	d10a      	bne.n	800a1a6 <__cvt+0x86>
 800a190:	2200      	movs	r2, #0
 800a192:	2300      	movs	r3, #0
 800a194:	4620      	mov	r0, r4
 800a196:	4639      	mov	r1, r7
 800a198:	f7f6 fc76 	bl	8000a88 <__aeabi_dcmpeq>
 800a19c:	b918      	cbnz	r0, 800a1a6 <__cvt+0x86>
 800a19e:	f1c5 0501 	rsb	r5, r5, #1
 800a1a2:	f8ca 5000 	str.w	r5, [sl]
 800a1a6:	f8da 3000 	ldr.w	r3, [sl]
 800a1aa:	4499      	add	r9, r3
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	4639      	mov	r1, r7
 800a1b4:	f7f6 fc68 	bl	8000a88 <__aeabi_dcmpeq>
 800a1b8:	b108      	cbz	r0, 800a1be <__cvt+0x9e>
 800a1ba:	f8cd 901c 	str.w	r9, [sp, #28]
 800a1be:	2230      	movs	r2, #48	; 0x30
 800a1c0:	9b07      	ldr	r3, [sp, #28]
 800a1c2:	454b      	cmp	r3, r9
 800a1c4:	d307      	bcc.n	800a1d6 <__cvt+0xb6>
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	9b07      	ldr	r3, [sp, #28]
 800a1ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a1cc:	1b9b      	subs	r3, r3, r6
 800a1ce:	6013      	str	r3, [r2, #0]
 800a1d0:	b008      	add	sp, #32
 800a1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1d6:	1c59      	adds	r1, r3, #1
 800a1d8:	9107      	str	r1, [sp, #28]
 800a1da:	701a      	strb	r2, [r3, #0]
 800a1dc:	e7f0      	b.n	800a1c0 <__cvt+0xa0>

0800a1de <__exponent>:
 800a1de:	4603      	mov	r3, r0
 800a1e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1e2:	2900      	cmp	r1, #0
 800a1e4:	f803 2b02 	strb.w	r2, [r3], #2
 800a1e8:	bfb6      	itet	lt
 800a1ea:	222d      	movlt	r2, #45	; 0x2d
 800a1ec:	222b      	movge	r2, #43	; 0x2b
 800a1ee:	4249      	neglt	r1, r1
 800a1f0:	2909      	cmp	r1, #9
 800a1f2:	7042      	strb	r2, [r0, #1]
 800a1f4:	dd2a      	ble.n	800a24c <__exponent+0x6e>
 800a1f6:	f10d 0207 	add.w	r2, sp, #7
 800a1fa:	4617      	mov	r7, r2
 800a1fc:	260a      	movs	r6, #10
 800a1fe:	fb91 f5f6 	sdiv	r5, r1, r6
 800a202:	4694      	mov	ip, r2
 800a204:	fb06 1415 	mls	r4, r6, r5, r1
 800a208:	3430      	adds	r4, #48	; 0x30
 800a20a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a20e:	460c      	mov	r4, r1
 800a210:	2c63      	cmp	r4, #99	; 0x63
 800a212:	4629      	mov	r1, r5
 800a214:	f102 32ff 	add.w	r2, r2, #4294967295
 800a218:	dcf1      	bgt.n	800a1fe <__exponent+0x20>
 800a21a:	3130      	adds	r1, #48	; 0x30
 800a21c:	f1ac 0402 	sub.w	r4, ip, #2
 800a220:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a224:	4622      	mov	r2, r4
 800a226:	1c41      	adds	r1, r0, #1
 800a228:	42ba      	cmp	r2, r7
 800a22a:	d30a      	bcc.n	800a242 <__exponent+0x64>
 800a22c:	f10d 0209 	add.w	r2, sp, #9
 800a230:	eba2 020c 	sub.w	r2, r2, ip
 800a234:	42bc      	cmp	r4, r7
 800a236:	bf88      	it	hi
 800a238:	2200      	movhi	r2, #0
 800a23a:	4413      	add	r3, r2
 800a23c:	1a18      	subs	r0, r3, r0
 800a23e:	b003      	add	sp, #12
 800a240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a242:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a246:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a24a:	e7ed      	b.n	800a228 <__exponent+0x4a>
 800a24c:	2330      	movs	r3, #48	; 0x30
 800a24e:	3130      	adds	r1, #48	; 0x30
 800a250:	7083      	strb	r3, [r0, #2]
 800a252:	70c1      	strb	r1, [r0, #3]
 800a254:	1d03      	adds	r3, r0, #4
 800a256:	e7f1      	b.n	800a23c <__exponent+0x5e>

0800a258 <_printf_float>:
 800a258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a25c:	b091      	sub	sp, #68	; 0x44
 800a25e:	460c      	mov	r4, r1
 800a260:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800a264:	4616      	mov	r6, r2
 800a266:	461f      	mov	r7, r3
 800a268:	4605      	mov	r5, r0
 800a26a:	f000 fd7b 	bl	800ad64 <_localeconv_r>
 800a26e:	6803      	ldr	r3, [r0, #0]
 800a270:	4618      	mov	r0, r3
 800a272:	9309      	str	r3, [sp, #36]	; 0x24
 800a274:	f7f5 ffdc 	bl	8000230 <strlen>
 800a278:	2300      	movs	r3, #0
 800a27a:	930e      	str	r3, [sp, #56]	; 0x38
 800a27c:	f8d8 3000 	ldr.w	r3, [r8]
 800a280:	900a      	str	r0, [sp, #40]	; 0x28
 800a282:	3307      	adds	r3, #7
 800a284:	f023 0307 	bic.w	r3, r3, #7
 800a288:	f103 0208 	add.w	r2, r3, #8
 800a28c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a290:	f8d4 b000 	ldr.w	fp, [r4]
 800a294:	f8c8 2000 	str.w	r2, [r8]
 800a298:	e9d3 a800 	ldrd	sl, r8, [r3]
 800a29c:	4652      	mov	r2, sl
 800a29e:	4643      	mov	r3, r8
 800a2a0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a2a4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800a2a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ae:	4650      	mov	r0, sl
 800a2b0:	4b9c      	ldr	r3, [pc, #624]	; (800a524 <_printf_float+0x2cc>)
 800a2b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2b4:	f7f6 fc1a 	bl	8000aec <__aeabi_dcmpun>
 800a2b8:	bb70      	cbnz	r0, 800a318 <_printf_float+0xc0>
 800a2ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a2be:	4650      	mov	r0, sl
 800a2c0:	4b98      	ldr	r3, [pc, #608]	; (800a524 <_printf_float+0x2cc>)
 800a2c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2c4:	f7f6 fbf4 	bl	8000ab0 <__aeabi_dcmple>
 800a2c8:	bb30      	cbnz	r0, 800a318 <_printf_float+0xc0>
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	4650      	mov	r0, sl
 800a2d0:	4641      	mov	r1, r8
 800a2d2:	f7f6 fbe3 	bl	8000a9c <__aeabi_dcmplt>
 800a2d6:	b110      	cbz	r0, 800a2de <_printf_float+0x86>
 800a2d8:	232d      	movs	r3, #45	; 0x2d
 800a2da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2de:	4a92      	ldr	r2, [pc, #584]	; (800a528 <_printf_float+0x2d0>)
 800a2e0:	4b92      	ldr	r3, [pc, #584]	; (800a52c <_printf_float+0x2d4>)
 800a2e2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a2e6:	bf94      	ite	ls
 800a2e8:	4690      	movls	r8, r2
 800a2ea:	4698      	movhi	r8, r3
 800a2ec:	2303      	movs	r3, #3
 800a2ee:	f04f 0a00 	mov.w	sl, #0
 800a2f2:	6123      	str	r3, [r4, #16]
 800a2f4:	f02b 0304 	bic.w	r3, fp, #4
 800a2f8:	6023      	str	r3, [r4, #0]
 800a2fa:	4633      	mov	r3, r6
 800a2fc:	4621      	mov	r1, r4
 800a2fe:	4628      	mov	r0, r5
 800a300:	9700      	str	r7, [sp, #0]
 800a302:	aa0f      	add	r2, sp, #60	; 0x3c
 800a304:	f000 f9d6 	bl	800a6b4 <_printf_common>
 800a308:	3001      	adds	r0, #1
 800a30a:	f040 8090 	bne.w	800a42e <_printf_float+0x1d6>
 800a30e:	f04f 30ff 	mov.w	r0, #4294967295
 800a312:	b011      	add	sp, #68	; 0x44
 800a314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a318:	4652      	mov	r2, sl
 800a31a:	4643      	mov	r3, r8
 800a31c:	4650      	mov	r0, sl
 800a31e:	4641      	mov	r1, r8
 800a320:	f7f6 fbe4 	bl	8000aec <__aeabi_dcmpun>
 800a324:	b148      	cbz	r0, 800a33a <_printf_float+0xe2>
 800a326:	f1b8 0f00 	cmp.w	r8, #0
 800a32a:	bfb8      	it	lt
 800a32c:	232d      	movlt	r3, #45	; 0x2d
 800a32e:	4a80      	ldr	r2, [pc, #512]	; (800a530 <_printf_float+0x2d8>)
 800a330:	bfb8      	it	lt
 800a332:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a336:	4b7f      	ldr	r3, [pc, #508]	; (800a534 <_printf_float+0x2dc>)
 800a338:	e7d3      	b.n	800a2e2 <_printf_float+0x8a>
 800a33a:	6863      	ldr	r3, [r4, #4]
 800a33c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a340:	1c5a      	adds	r2, r3, #1
 800a342:	d142      	bne.n	800a3ca <_printf_float+0x172>
 800a344:	2306      	movs	r3, #6
 800a346:	6063      	str	r3, [r4, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	9206      	str	r2, [sp, #24]
 800a34c:	aa0e      	add	r2, sp, #56	; 0x38
 800a34e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800a352:	aa0d      	add	r2, sp, #52	; 0x34
 800a354:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800a358:	9203      	str	r2, [sp, #12]
 800a35a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800a35e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a362:	6023      	str	r3, [r4, #0]
 800a364:	6863      	ldr	r3, [r4, #4]
 800a366:	4652      	mov	r2, sl
 800a368:	9300      	str	r3, [sp, #0]
 800a36a:	4628      	mov	r0, r5
 800a36c:	4643      	mov	r3, r8
 800a36e:	910b      	str	r1, [sp, #44]	; 0x2c
 800a370:	f7ff fed6 	bl	800a120 <__cvt>
 800a374:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a376:	4680      	mov	r8, r0
 800a378:	2947      	cmp	r1, #71	; 0x47
 800a37a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a37c:	d108      	bne.n	800a390 <_printf_float+0x138>
 800a37e:	1cc8      	adds	r0, r1, #3
 800a380:	db02      	blt.n	800a388 <_printf_float+0x130>
 800a382:	6863      	ldr	r3, [r4, #4]
 800a384:	4299      	cmp	r1, r3
 800a386:	dd40      	ble.n	800a40a <_printf_float+0x1b2>
 800a388:	f1a9 0902 	sub.w	r9, r9, #2
 800a38c:	fa5f f989 	uxtb.w	r9, r9
 800a390:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a394:	d81f      	bhi.n	800a3d6 <_printf_float+0x17e>
 800a396:	464a      	mov	r2, r9
 800a398:	3901      	subs	r1, #1
 800a39a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a39e:	910d      	str	r1, [sp, #52]	; 0x34
 800a3a0:	f7ff ff1d 	bl	800a1de <__exponent>
 800a3a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3a6:	4682      	mov	sl, r0
 800a3a8:	1813      	adds	r3, r2, r0
 800a3aa:	2a01      	cmp	r2, #1
 800a3ac:	6123      	str	r3, [r4, #16]
 800a3ae:	dc02      	bgt.n	800a3b6 <_printf_float+0x15e>
 800a3b0:	6822      	ldr	r2, [r4, #0]
 800a3b2:	07d2      	lsls	r2, r2, #31
 800a3b4:	d501      	bpl.n	800a3ba <_printf_float+0x162>
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	6123      	str	r3, [r4, #16]
 800a3ba:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d09b      	beq.n	800a2fa <_printf_float+0xa2>
 800a3c2:	232d      	movs	r3, #45	; 0x2d
 800a3c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3c8:	e797      	b.n	800a2fa <_printf_float+0xa2>
 800a3ca:	2947      	cmp	r1, #71	; 0x47
 800a3cc:	d1bc      	bne.n	800a348 <_printf_float+0xf0>
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d1ba      	bne.n	800a348 <_printf_float+0xf0>
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e7b7      	b.n	800a346 <_printf_float+0xee>
 800a3d6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a3da:	d118      	bne.n	800a40e <_printf_float+0x1b6>
 800a3dc:	2900      	cmp	r1, #0
 800a3de:	6863      	ldr	r3, [r4, #4]
 800a3e0:	dd0b      	ble.n	800a3fa <_printf_float+0x1a2>
 800a3e2:	6121      	str	r1, [r4, #16]
 800a3e4:	b913      	cbnz	r3, 800a3ec <_printf_float+0x194>
 800a3e6:	6822      	ldr	r2, [r4, #0]
 800a3e8:	07d0      	lsls	r0, r2, #31
 800a3ea:	d502      	bpl.n	800a3f2 <_printf_float+0x19a>
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	440b      	add	r3, r1
 800a3f0:	6123      	str	r3, [r4, #16]
 800a3f2:	f04f 0a00 	mov.w	sl, #0
 800a3f6:	65a1      	str	r1, [r4, #88]	; 0x58
 800a3f8:	e7df      	b.n	800a3ba <_printf_float+0x162>
 800a3fa:	b913      	cbnz	r3, 800a402 <_printf_float+0x1aa>
 800a3fc:	6822      	ldr	r2, [r4, #0]
 800a3fe:	07d2      	lsls	r2, r2, #31
 800a400:	d501      	bpl.n	800a406 <_printf_float+0x1ae>
 800a402:	3302      	adds	r3, #2
 800a404:	e7f4      	b.n	800a3f0 <_printf_float+0x198>
 800a406:	2301      	movs	r3, #1
 800a408:	e7f2      	b.n	800a3f0 <_printf_float+0x198>
 800a40a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a40e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a410:	4299      	cmp	r1, r3
 800a412:	db05      	blt.n	800a420 <_printf_float+0x1c8>
 800a414:	6823      	ldr	r3, [r4, #0]
 800a416:	6121      	str	r1, [r4, #16]
 800a418:	07d8      	lsls	r0, r3, #31
 800a41a:	d5ea      	bpl.n	800a3f2 <_printf_float+0x19a>
 800a41c:	1c4b      	adds	r3, r1, #1
 800a41e:	e7e7      	b.n	800a3f0 <_printf_float+0x198>
 800a420:	2900      	cmp	r1, #0
 800a422:	bfcc      	ite	gt
 800a424:	2201      	movgt	r2, #1
 800a426:	f1c1 0202 	rsble	r2, r1, #2
 800a42a:	4413      	add	r3, r2
 800a42c:	e7e0      	b.n	800a3f0 <_printf_float+0x198>
 800a42e:	6823      	ldr	r3, [r4, #0]
 800a430:	055a      	lsls	r2, r3, #21
 800a432:	d407      	bmi.n	800a444 <_printf_float+0x1ec>
 800a434:	6923      	ldr	r3, [r4, #16]
 800a436:	4642      	mov	r2, r8
 800a438:	4631      	mov	r1, r6
 800a43a:	4628      	mov	r0, r5
 800a43c:	47b8      	blx	r7
 800a43e:	3001      	adds	r0, #1
 800a440:	d12b      	bne.n	800a49a <_printf_float+0x242>
 800a442:	e764      	b.n	800a30e <_printf_float+0xb6>
 800a444:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a448:	f240 80dd 	bls.w	800a606 <_printf_float+0x3ae>
 800a44c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a450:	2200      	movs	r2, #0
 800a452:	2300      	movs	r3, #0
 800a454:	f7f6 fb18 	bl	8000a88 <__aeabi_dcmpeq>
 800a458:	2800      	cmp	r0, #0
 800a45a:	d033      	beq.n	800a4c4 <_printf_float+0x26c>
 800a45c:	2301      	movs	r3, #1
 800a45e:	4631      	mov	r1, r6
 800a460:	4628      	mov	r0, r5
 800a462:	4a35      	ldr	r2, [pc, #212]	; (800a538 <_printf_float+0x2e0>)
 800a464:	47b8      	blx	r7
 800a466:	3001      	adds	r0, #1
 800a468:	f43f af51 	beq.w	800a30e <_printf_float+0xb6>
 800a46c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a470:	429a      	cmp	r2, r3
 800a472:	db02      	blt.n	800a47a <_printf_float+0x222>
 800a474:	6823      	ldr	r3, [r4, #0]
 800a476:	07d8      	lsls	r0, r3, #31
 800a478:	d50f      	bpl.n	800a49a <_printf_float+0x242>
 800a47a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a47e:	4631      	mov	r1, r6
 800a480:	4628      	mov	r0, r5
 800a482:	47b8      	blx	r7
 800a484:	3001      	adds	r0, #1
 800a486:	f43f af42 	beq.w	800a30e <_printf_float+0xb6>
 800a48a:	f04f 0800 	mov.w	r8, #0
 800a48e:	f104 091a 	add.w	r9, r4, #26
 800a492:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a494:	3b01      	subs	r3, #1
 800a496:	4543      	cmp	r3, r8
 800a498:	dc09      	bgt.n	800a4ae <_printf_float+0x256>
 800a49a:	6823      	ldr	r3, [r4, #0]
 800a49c:	079b      	lsls	r3, r3, #30
 800a49e:	f100 8104 	bmi.w	800a6aa <_printf_float+0x452>
 800a4a2:	68e0      	ldr	r0, [r4, #12]
 800a4a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4a6:	4298      	cmp	r0, r3
 800a4a8:	bfb8      	it	lt
 800a4aa:	4618      	movlt	r0, r3
 800a4ac:	e731      	b.n	800a312 <_printf_float+0xba>
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	464a      	mov	r2, r9
 800a4b2:	4631      	mov	r1, r6
 800a4b4:	4628      	mov	r0, r5
 800a4b6:	47b8      	blx	r7
 800a4b8:	3001      	adds	r0, #1
 800a4ba:	f43f af28 	beq.w	800a30e <_printf_float+0xb6>
 800a4be:	f108 0801 	add.w	r8, r8, #1
 800a4c2:	e7e6      	b.n	800a492 <_printf_float+0x23a>
 800a4c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	dc38      	bgt.n	800a53c <_printf_float+0x2e4>
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	4631      	mov	r1, r6
 800a4ce:	4628      	mov	r0, r5
 800a4d0:	4a19      	ldr	r2, [pc, #100]	; (800a538 <_printf_float+0x2e0>)
 800a4d2:	47b8      	blx	r7
 800a4d4:	3001      	adds	r0, #1
 800a4d6:	f43f af1a 	beq.w	800a30e <_printf_float+0xb6>
 800a4da:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	d102      	bne.n	800a4e8 <_printf_float+0x290>
 800a4e2:	6823      	ldr	r3, [r4, #0]
 800a4e4:	07d9      	lsls	r1, r3, #31
 800a4e6:	d5d8      	bpl.n	800a49a <_printf_float+0x242>
 800a4e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4ec:	4631      	mov	r1, r6
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	47b8      	blx	r7
 800a4f2:	3001      	adds	r0, #1
 800a4f4:	f43f af0b 	beq.w	800a30e <_printf_float+0xb6>
 800a4f8:	f04f 0900 	mov.w	r9, #0
 800a4fc:	f104 0a1a 	add.w	sl, r4, #26
 800a500:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a502:	425b      	negs	r3, r3
 800a504:	454b      	cmp	r3, r9
 800a506:	dc01      	bgt.n	800a50c <_printf_float+0x2b4>
 800a508:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a50a:	e794      	b.n	800a436 <_printf_float+0x1de>
 800a50c:	2301      	movs	r3, #1
 800a50e:	4652      	mov	r2, sl
 800a510:	4631      	mov	r1, r6
 800a512:	4628      	mov	r0, r5
 800a514:	47b8      	blx	r7
 800a516:	3001      	adds	r0, #1
 800a518:	f43f aef9 	beq.w	800a30e <_printf_float+0xb6>
 800a51c:	f109 0901 	add.w	r9, r9, #1
 800a520:	e7ee      	b.n	800a500 <_printf_float+0x2a8>
 800a522:	bf00      	nop
 800a524:	7fefffff 	.word	0x7fefffff
 800a528:	0800dc19 	.word	0x0800dc19
 800a52c:	0800dc1d 	.word	0x0800dc1d
 800a530:	0800dc21 	.word	0x0800dc21
 800a534:	0800dc25 	.word	0x0800dc25
 800a538:	0800dc29 	.word	0x0800dc29
 800a53c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a53e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a540:	429a      	cmp	r2, r3
 800a542:	bfa8      	it	ge
 800a544:	461a      	movge	r2, r3
 800a546:	2a00      	cmp	r2, #0
 800a548:	4691      	mov	r9, r2
 800a54a:	dc37      	bgt.n	800a5bc <_printf_float+0x364>
 800a54c:	f04f 0b00 	mov.w	fp, #0
 800a550:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a554:	f104 021a 	add.w	r2, r4, #26
 800a558:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a55c:	ebaa 0309 	sub.w	r3, sl, r9
 800a560:	455b      	cmp	r3, fp
 800a562:	dc33      	bgt.n	800a5cc <_printf_float+0x374>
 800a564:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a568:	429a      	cmp	r2, r3
 800a56a:	db3b      	blt.n	800a5e4 <_printf_float+0x38c>
 800a56c:	6823      	ldr	r3, [r4, #0]
 800a56e:	07da      	lsls	r2, r3, #31
 800a570:	d438      	bmi.n	800a5e4 <_printf_float+0x38c>
 800a572:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800a576:	eba2 0903 	sub.w	r9, r2, r3
 800a57a:	eba2 020a 	sub.w	r2, r2, sl
 800a57e:	4591      	cmp	r9, r2
 800a580:	bfa8      	it	ge
 800a582:	4691      	movge	r9, r2
 800a584:	f1b9 0f00 	cmp.w	r9, #0
 800a588:	dc34      	bgt.n	800a5f4 <_printf_float+0x39c>
 800a58a:	f04f 0800 	mov.w	r8, #0
 800a58e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a592:	f104 0a1a 	add.w	sl, r4, #26
 800a596:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a59a:	1a9b      	subs	r3, r3, r2
 800a59c:	eba3 0309 	sub.w	r3, r3, r9
 800a5a0:	4543      	cmp	r3, r8
 800a5a2:	f77f af7a 	ble.w	800a49a <_printf_float+0x242>
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	4652      	mov	r2, sl
 800a5aa:	4631      	mov	r1, r6
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	47b8      	blx	r7
 800a5b0:	3001      	adds	r0, #1
 800a5b2:	f43f aeac 	beq.w	800a30e <_printf_float+0xb6>
 800a5b6:	f108 0801 	add.w	r8, r8, #1
 800a5ba:	e7ec      	b.n	800a596 <_printf_float+0x33e>
 800a5bc:	4613      	mov	r3, r2
 800a5be:	4631      	mov	r1, r6
 800a5c0:	4642      	mov	r2, r8
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	47b8      	blx	r7
 800a5c6:	3001      	adds	r0, #1
 800a5c8:	d1c0      	bne.n	800a54c <_printf_float+0x2f4>
 800a5ca:	e6a0      	b.n	800a30e <_printf_float+0xb6>
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	4631      	mov	r1, r6
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	920b      	str	r2, [sp, #44]	; 0x2c
 800a5d4:	47b8      	blx	r7
 800a5d6:	3001      	adds	r0, #1
 800a5d8:	f43f ae99 	beq.w	800a30e <_printf_float+0xb6>
 800a5dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a5de:	f10b 0b01 	add.w	fp, fp, #1
 800a5e2:	e7b9      	b.n	800a558 <_printf_float+0x300>
 800a5e4:	4631      	mov	r1, r6
 800a5e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5ea:	4628      	mov	r0, r5
 800a5ec:	47b8      	blx	r7
 800a5ee:	3001      	adds	r0, #1
 800a5f0:	d1bf      	bne.n	800a572 <_printf_float+0x31a>
 800a5f2:	e68c      	b.n	800a30e <_printf_float+0xb6>
 800a5f4:	464b      	mov	r3, r9
 800a5f6:	4631      	mov	r1, r6
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	eb08 020a 	add.w	r2, r8, sl
 800a5fe:	47b8      	blx	r7
 800a600:	3001      	adds	r0, #1
 800a602:	d1c2      	bne.n	800a58a <_printf_float+0x332>
 800a604:	e683      	b.n	800a30e <_printf_float+0xb6>
 800a606:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a608:	2a01      	cmp	r2, #1
 800a60a:	dc01      	bgt.n	800a610 <_printf_float+0x3b8>
 800a60c:	07db      	lsls	r3, r3, #31
 800a60e:	d539      	bpl.n	800a684 <_printf_float+0x42c>
 800a610:	2301      	movs	r3, #1
 800a612:	4642      	mov	r2, r8
 800a614:	4631      	mov	r1, r6
 800a616:	4628      	mov	r0, r5
 800a618:	47b8      	blx	r7
 800a61a:	3001      	adds	r0, #1
 800a61c:	f43f ae77 	beq.w	800a30e <_printf_float+0xb6>
 800a620:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a624:	4631      	mov	r1, r6
 800a626:	4628      	mov	r0, r5
 800a628:	47b8      	blx	r7
 800a62a:	3001      	adds	r0, #1
 800a62c:	f43f ae6f 	beq.w	800a30e <_printf_float+0xb6>
 800a630:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a634:	2200      	movs	r2, #0
 800a636:	2300      	movs	r3, #0
 800a638:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800a63c:	f7f6 fa24 	bl	8000a88 <__aeabi_dcmpeq>
 800a640:	b9d8      	cbnz	r0, 800a67a <_printf_float+0x422>
 800a642:	f109 33ff 	add.w	r3, r9, #4294967295
 800a646:	f108 0201 	add.w	r2, r8, #1
 800a64a:	4631      	mov	r1, r6
 800a64c:	4628      	mov	r0, r5
 800a64e:	47b8      	blx	r7
 800a650:	3001      	adds	r0, #1
 800a652:	d10e      	bne.n	800a672 <_printf_float+0x41a>
 800a654:	e65b      	b.n	800a30e <_printf_float+0xb6>
 800a656:	2301      	movs	r3, #1
 800a658:	464a      	mov	r2, r9
 800a65a:	4631      	mov	r1, r6
 800a65c:	4628      	mov	r0, r5
 800a65e:	47b8      	blx	r7
 800a660:	3001      	adds	r0, #1
 800a662:	f43f ae54 	beq.w	800a30e <_printf_float+0xb6>
 800a666:	f108 0801 	add.w	r8, r8, #1
 800a66a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a66c:	3b01      	subs	r3, #1
 800a66e:	4543      	cmp	r3, r8
 800a670:	dcf1      	bgt.n	800a656 <_printf_float+0x3fe>
 800a672:	4653      	mov	r3, sl
 800a674:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a678:	e6de      	b.n	800a438 <_printf_float+0x1e0>
 800a67a:	f04f 0800 	mov.w	r8, #0
 800a67e:	f104 091a 	add.w	r9, r4, #26
 800a682:	e7f2      	b.n	800a66a <_printf_float+0x412>
 800a684:	2301      	movs	r3, #1
 800a686:	4642      	mov	r2, r8
 800a688:	e7df      	b.n	800a64a <_printf_float+0x3f2>
 800a68a:	2301      	movs	r3, #1
 800a68c:	464a      	mov	r2, r9
 800a68e:	4631      	mov	r1, r6
 800a690:	4628      	mov	r0, r5
 800a692:	47b8      	blx	r7
 800a694:	3001      	adds	r0, #1
 800a696:	f43f ae3a 	beq.w	800a30e <_printf_float+0xb6>
 800a69a:	f108 0801 	add.w	r8, r8, #1
 800a69e:	68e3      	ldr	r3, [r4, #12]
 800a6a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a6a2:	1a5b      	subs	r3, r3, r1
 800a6a4:	4543      	cmp	r3, r8
 800a6a6:	dcf0      	bgt.n	800a68a <_printf_float+0x432>
 800a6a8:	e6fb      	b.n	800a4a2 <_printf_float+0x24a>
 800a6aa:	f04f 0800 	mov.w	r8, #0
 800a6ae:	f104 0919 	add.w	r9, r4, #25
 800a6b2:	e7f4      	b.n	800a69e <_printf_float+0x446>

0800a6b4 <_printf_common>:
 800a6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6b8:	4616      	mov	r6, r2
 800a6ba:	4699      	mov	r9, r3
 800a6bc:	688a      	ldr	r2, [r1, #8]
 800a6be:	690b      	ldr	r3, [r1, #16]
 800a6c0:	4607      	mov	r7, r0
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	bfb8      	it	lt
 800a6c6:	4613      	movlt	r3, r2
 800a6c8:	6033      	str	r3, [r6, #0]
 800a6ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a6ce:	460c      	mov	r4, r1
 800a6d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a6d4:	b10a      	cbz	r2, 800a6da <_printf_common+0x26>
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	6033      	str	r3, [r6, #0]
 800a6da:	6823      	ldr	r3, [r4, #0]
 800a6dc:	0699      	lsls	r1, r3, #26
 800a6de:	bf42      	ittt	mi
 800a6e0:	6833      	ldrmi	r3, [r6, #0]
 800a6e2:	3302      	addmi	r3, #2
 800a6e4:	6033      	strmi	r3, [r6, #0]
 800a6e6:	6825      	ldr	r5, [r4, #0]
 800a6e8:	f015 0506 	ands.w	r5, r5, #6
 800a6ec:	d106      	bne.n	800a6fc <_printf_common+0x48>
 800a6ee:	f104 0a19 	add.w	sl, r4, #25
 800a6f2:	68e3      	ldr	r3, [r4, #12]
 800a6f4:	6832      	ldr	r2, [r6, #0]
 800a6f6:	1a9b      	subs	r3, r3, r2
 800a6f8:	42ab      	cmp	r3, r5
 800a6fa:	dc2b      	bgt.n	800a754 <_printf_common+0xa0>
 800a6fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a700:	1e13      	subs	r3, r2, #0
 800a702:	6822      	ldr	r2, [r4, #0]
 800a704:	bf18      	it	ne
 800a706:	2301      	movne	r3, #1
 800a708:	0692      	lsls	r2, r2, #26
 800a70a:	d430      	bmi.n	800a76e <_printf_common+0xba>
 800a70c:	4649      	mov	r1, r9
 800a70e:	4638      	mov	r0, r7
 800a710:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a714:	47c0      	blx	r8
 800a716:	3001      	adds	r0, #1
 800a718:	d023      	beq.n	800a762 <_printf_common+0xae>
 800a71a:	6823      	ldr	r3, [r4, #0]
 800a71c:	6922      	ldr	r2, [r4, #16]
 800a71e:	f003 0306 	and.w	r3, r3, #6
 800a722:	2b04      	cmp	r3, #4
 800a724:	bf14      	ite	ne
 800a726:	2500      	movne	r5, #0
 800a728:	6833      	ldreq	r3, [r6, #0]
 800a72a:	f04f 0600 	mov.w	r6, #0
 800a72e:	bf08      	it	eq
 800a730:	68e5      	ldreq	r5, [r4, #12]
 800a732:	f104 041a 	add.w	r4, r4, #26
 800a736:	bf08      	it	eq
 800a738:	1aed      	subeq	r5, r5, r3
 800a73a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a73e:	bf08      	it	eq
 800a740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a744:	4293      	cmp	r3, r2
 800a746:	bfc4      	itt	gt
 800a748:	1a9b      	subgt	r3, r3, r2
 800a74a:	18ed      	addgt	r5, r5, r3
 800a74c:	42b5      	cmp	r5, r6
 800a74e:	d11a      	bne.n	800a786 <_printf_common+0xd2>
 800a750:	2000      	movs	r0, #0
 800a752:	e008      	b.n	800a766 <_printf_common+0xb2>
 800a754:	2301      	movs	r3, #1
 800a756:	4652      	mov	r2, sl
 800a758:	4649      	mov	r1, r9
 800a75a:	4638      	mov	r0, r7
 800a75c:	47c0      	blx	r8
 800a75e:	3001      	adds	r0, #1
 800a760:	d103      	bne.n	800a76a <_printf_common+0xb6>
 800a762:	f04f 30ff 	mov.w	r0, #4294967295
 800a766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a76a:	3501      	adds	r5, #1
 800a76c:	e7c1      	b.n	800a6f2 <_printf_common+0x3e>
 800a76e:	2030      	movs	r0, #48	; 0x30
 800a770:	18e1      	adds	r1, r4, r3
 800a772:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a776:	1c5a      	adds	r2, r3, #1
 800a778:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a77c:	4422      	add	r2, r4
 800a77e:	3302      	adds	r3, #2
 800a780:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a784:	e7c2      	b.n	800a70c <_printf_common+0x58>
 800a786:	2301      	movs	r3, #1
 800a788:	4622      	mov	r2, r4
 800a78a:	4649      	mov	r1, r9
 800a78c:	4638      	mov	r0, r7
 800a78e:	47c0      	blx	r8
 800a790:	3001      	adds	r0, #1
 800a792:	d0e6      	beq.n	800a762 <_printf_common+0xae>
 800a794:	3601      	adds	r6, #1
 800a796:	e7d9      	b.n	800a74c <_printf_common+0x98>

0800a798 <_printf_i>:
 800a798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a79c:	7e0f      	ldrb	r7, [r1, #24]
 800a79e:	4691      	mov	r9, r2
 800a7a0:	2f78      	cmp	r7, #120	; 0x78
 800a7a2:	4680      	mov	r8, r0
 800a7a4:	460c      	mov	r4, r1
 800a7a6:	469a      	mov	sl, r3
 800a7a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a7aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a7ae:	d807      	bhi.n	800a7c0 <_printf_i+0x28>
 800a7b0:	2f62      	cmp	r7, #98	; 0x62
 800a7b2:	d80a      	bhi.n	800a7ca <_printf_i+0x32>
 800a7b4:	2f00      	cmp	r7, #0
 800a7b6:	f000 80d5 	beq.w	800a964 <_printf_i+0x1cc>
 800a7ba:	2f58      	cmp	r7, #88	; 0x58
 800a7bc:	f000 80c1 	beq.w	800a942 <_printf_i+0x1aa>
 800a7c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a7c8:	e03a      	b.n	800a840 <_printf_i+0xa8>
 800a7ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a7ce:	2b15      	cmp	r3, #21
 800a7d0:	d8f6      	bhi.n	800a7c0 <_printf_i+0x28>
 800a7d2:	a101      	add	r1, pc, #4	; (adr r1, 800a7d8 <_printf_i+0x40>)
 800a7d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7d8:	0800a831 	.word	0x0800a831
 800a7dc:	0800a845 	.word	0x0800a845
 800a7e0:	0800a7c1 	.word	0x0800a7c1
 800a7e4:	0800a7c1 	.word	0x0800a7c1
 800a7e8:	0800a7c1 	.word	0x0800a7c1
 800a7ec:	0800a7c1 	.word	0x0800a7c1
 800a7f0:	0800a845 	.word	0x0800a845
 800a7f4:	0800a7c1 	.word	0x0800a7c1
 800a7f8:	0800a7c1 	.word	0x0800a7c1
 800a7fc:	0800a7c1 	.word	0x0800a7c1
 800a800:	0800a7c1 	.word	0x0800a7c1
 800a804:	0800a94b 	.word	0x0800a94b
 800a808:	0800a871 	.word	0x0800a871
 800a80c:	0800a905 	.word	0x0800a905
 800a810:	0800a7c1 	.word	0x0800a7c1
 800a814:	0800a7c1 	.word	0x0800a7c1
 800a818:	0800a96d 	.word	0x0800a96d
 800a81c:	0800a7c1 	.word	0x0800a7c1
 800a820:	0800a871 	.word	0x0800a871
 800a824:	0800a7c1 	.word	0x0800a7c1
 800a828:	0800a7c1 	.word	0x0800a7c1
 800a82c:	0800a90d 	.word	0x0800a90d
 800a830:	682b      	ldr	r3, [r5, #0]
 800a832:	1d1a      	adds	r2, r3, #4
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	602a      	str	r2, [r5, #0]
 800a838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a83c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a840:	2301      	movs	r3, #1
 800a842:	e0a0      	b.n	800a986 <_printf_i+0x1ee>
 800a844:	6820      	ldr	r0, [r4, #0]
 800a846:	682b      	ldr	r3, [r5, #0]
 800a848:	0607      	lsls	r7, r0, #24
 800a84a:	f103 0104 	add.w	r1, r3, #4
 800a84e:	6029      	str	r1, [r5, #0]
 800a850:	d501      	bpl.n	800a856 <_printf_i+0xbe>
 800a852:	681e      	ldr	r6, [r3, #0]
 800a854:	e003      	b.n	800a85e <_printf_i+0xc6>
 800a856:	0646      	lsls	r6, r0, #25
 800a858:	d5fb      	bpl.n	800a852 <_printf_i+0xba>
 800a85a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a85e:	2e00      	cmp	r6, #0
 800a860:	da03      	bge.n	800a86a <_printf_i+0xd2>
 800a862:	232d      	movs	r3, #45	; 0x2d
 800a864:	4276      	negs	r6, r6
 800a866:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a86a:	230a      	movs	r3, #10
 800a86c:	4859      	ldr	r0, [pc, #356]	; (800a9d4 <_printf_i+0x23c>)
 800a86e:	e012      	b.n	800a896 <_printf_i+0xfe>
 800a870:	682b      	ldr	r3, [r5, #0]
 800a872:	6820      	ldr	r0, [r4, #0]
 800a874:	1d19      	adds	r1, r3, #4
 800a876:	6029      	str	r1, [r5, #0]
 800a878:	0605      	lsls	r5, r0, #24
 800a87a:	d501      	bpl.n	800a880 <_printf_i+0xe8>
 800a87c:	681e      	ldr	r6, [r3, #0]
 800a87e:	e002      	b.n	800a886 <_printf_i+0xee>
 800a880:	0641      	lsls	r1, r0, #25
 800a882:	d5fb      	bpl.n	800a87c <_printf_i+0xe4>
 800a884:	881e      	ldrh	r6, [r3, #0]
 800a886:	2f6f      	cmp	r7, #111	; 0x6f
 800a888:	bf0c      	ite	eq
 800a88a:	2308      	moveq	r3, #8
 800a88c:	230a      	movne	r3, #10
 800a88e:	4851      	ldr	r0, [pc, #324]	; (800a9d4 <_printf_i+0x23c>)
 800a890:	2100      	movs	r1, #0
 800a892:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a896:	6865      	ldr	r5, [r4, #4]
 800a898:	2d00      	cmp	r5, #0
 800a89a:	bfa8      	it	ge
 800a89c:	6821      	ldrge	r1, [r4, #0]
 800a89e:	60a5      	str	r5, [r4, #8]
 800a8a0:	bfa4      	itt	ge
 800a8a2:	f021 0104 	bicge.w	r1, r1, #4
 800a8a6:	6021      	strge	r1, [r4, #0]
 800a8a8:	b90e      	cbnz	r6, 800a8ae <_printf_i+0x116>
 800a8aa:	2d00      	cmp	r5, #0
 800a8ac:	d04b      	beq.n	800a946 <_printf_i+0x1ae>
 800a8ae:	4615      	mov	r5, r2
 800a8b0:	fbb6 f1f3 	udiv	r1, r6, r3
 800a8b4:	fb03 6711 	mls	r7, r3, r1, r6
 800a8b8:	5dc7      	ldrb	r7, [r0, r7]
 800a8ba:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a8be:	4637      	mov	r7, r6
 800a8c0:	42bb      	cmp	r3, r7
 800a8c2:	460e      	mov	r6, r1
 800a8c4:	d9f4      	bls.n	800a8b0 <_printf_i+0x118>
 800a8c6:	2b08      	cmp	r3, #8
 800a8c8:	d10b      	bne.n	800a8e2 <_printf_i+0x14a>
 800a8ca:	6823      	ldr	r3, [r4, #0]
 800a8cc:	07de      	lsls	r6, r3, #31
 800a8ce:	d508      	bpl.n	800a8e2 <_printf_i+0x14a>
 800a8d0:	6923      	ldr	r3, [r4, #16]
 800a8d2:	6861      	ldr	r1, [r4, #4]
 800a8d4:	4299      	cmp	r1, r3
 800a8d6:	bfde      	ittt	le
 800a8d8:	2330      	movle	r3, #48	; 0x30
 800a8da:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a8de:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a8e2:	1b52      	subs	r2, r2, r5
 800a8e4:	6122      	str	r2, [r4, #16]
 800a8e6:	464b      	mov	r3, r9
 800a8e8:	4621      	mov	r1, r4
 800a8ea:	4640      	mov	r0, r8
 800a8ec:	f8cd a000 	str.w	sl, [sp]
 800a8f0:	aa03      	add	r2, sp, #12
 800a8f2:	f7ff fedf 	bl	800a6b4 <_printf_common>
 800a8f6:	3001      	adds	r0, #1
 800a8f8:	d14a      	bne.n	800a990 <_printf_i+0x1f8>
 800a8fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a8fe:	b004      	add	sp, #16
 800a900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a904:	6823      	ldr	r3, [r4, #0]
 800a906:	f043 0320 	orr.w	r3, r3, #32
 800a90a:	6023      	str	r3, [r4, #0]
 800a90c:	2778      	movs	r7, #120	; 0x78
 800a90e:	4832      	ldr	r0, [pc, #200]	; (800a9d8 <_printf_i+0x240>)
 800a910:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a914:	6823      	ldr	r3, [r4, #0]
 800a916:	6829      	ldr	r1, [r5, #0]
 800a918:	061f      	lsls	r7, r3, #24
 800a91a:	f851 6b04 	ldr.w	r6, [r1], #4
 800a91e:	d402      	bmi.n	800a926 <_printf_i+0x18e>
 800a920:	065f      	lsls	r7, r3, #25
 800a922:	bf48      	it	mi
 800a924:	b2b6      	uxthmi	r6, r6
 800a926:	07df      	lsls	r7, r3, #31
 800a928:	bf48      	it	mi
 800a92a:	f043 0320 	orrmi.w	r3, r3, #32
 800a92e:	6029      	str	r1, [r5, #0]
 800a930:	bf48      	it	mi
 800a932:	6023      	strmi	r3, [r4, #0]
 800a934:	b91e      	cbnz	r6, 800a93e <_printf_i+0x1a6>
 800a936:	6823      	ldr	r3, [r4, #0]
 800a938:	f023 0320 	bic.w	r3, r3, #32
 800a93c:	6023      	str	r3, [r4, #0]
 800a93e:	2310      	movs	r3, #16
 800a940:	e7a6      	b.n	800a890 <_printf_i+0xf8>
 800a942:	4824      	ldr	r0, [pc, #144]	; (800a9d4 <_printf_i+0x23c>)
 800a944:	e7e4      	b.n	800a910 <_printf_i+0x178>
 800a946:	4615      	mov	r5, r2
 800a948:	e7bd      	b.n	800a8c6 <_printf_i+0x12e>
 800a94a:	682b      	ldr	r3, [r5, #0]
 800a94c:	6826      	ldr	r6, [r4, #0]
 800a94e:	1d18      	adds	r0, r3, #4
 800a950:	6961      	ldr	r1, [r4, #20]
 800a952:	6028      	str	r0, [r5, #0]
 800a954:	0635      	lsls	r5, r6, #24
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	d501      	bpl.n	800a95e <_printf_i+0x1c6>
 800a95a:	6019      	str	r1, [r3, #0]
 800a95c:	e002      	b.n	800a964 <_printf_i+0x1cc>
 800a95e:	0670      	lsls	r0, r6, #25
 800a960:	d5fb      	bpl.n	800a95a <_printf_i+0x1c2>
 800a962:	8019      	strh	r1, [r3, #0]
 800a964:	2300      	movs	r3, #0
 800a966:	4615      	mov	r5, r2
 800a968:	6123      	str	r3, [r4, #16]
 800a96a:	e7bc      	b.n	800a8e6 <_printf_i+0x14e>
 800a96c:	682b      	ldr	r3, [r5, #0]
 800a96e:	2100      	movs	r1, #0
 800a970:	1d1a      	adds	r2, r3, #4
 800a972:	602a      	str	r2, [r5, #0]
 800a974:	681d      	ldr	r5, [r3, #0]
 800a976:	6862      	ldr	r2, [r4, #4]
 800a978:	4628      	mov	r0, r5
 800a97a:	f000 fad8 	bl	800af2e <memchr>
 800a97e:	b108      	cbz	r0, 800a984 <_printf_i+0x1ec>
 800a980:	1b40      	subs	r0, r0, r5
 800a982:	6060      	str	r0, [r4, #4]
 800a984:	6863      	ldr	r3, [r4, #4]
 800a986:	6123      	str	r3, [r4, #16]
 800a988:	2300      	movs	r3, #0
 800a98a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a98e:	e7aa      	b.n	800a8e6 <_printf_i+0x14e>
 800a990:	462a      	mov	r2, r5
 800a992:	4649      	mov	r1, r9
 800a994:	4640      	mov	r0, r8
 800a996:	6923      	ldr	r3, [r4, #16]
 800a998:	47d0      	blx	sl
 800a99a:	3001      	adds	r0, #1
 800a99c:	d0ad      	beq.n	800a8fa <_printf_i+0x162>
 800a99e:	6823      	ldr	r3, [r4, #0]
 800a9a0:	079b      	lsls	r3, r3, #30
 800a9a2:	d413      	bmi.n	800a9cc <_printf_i+0x234>
 800a9a4:	68e0      	ldr	r0, [r4, #12]
 800a9a6:	9b03      	ldr	r3, [sp, #12]
 800a9a8:	4298      	cmp	r0, r3
 800a9aa:	bfb8      	it	lt
 800a9ac:	4618      	movlt	r0, r3
 800a9ae:	e7a6      	b.n	800a8fe <_printf_i+0x166>
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	4632      	mov	r2, r6
 800a9b4:	4649      	mov	r1, r9
 800a9b6:	4640      	mov	r0, r8
 800a9b8:	47d0      	blx	sl
 800a9ba:	3001      	adds	r0, #1
 800a9bc:	d09d      	beq.n	800a8fa <_printf_i+0x162>
 800a9be:	3501      	adds	r5, #1
 800a9c0:	68e3      	ldr	r3, [r4, #12]
 800a9c2:	9903      	ldr	r1, [sp, #12]
 800a9c4:	1a5b      	subs	r3, r3, r1
 800a9c6:	42ab      	cmp	r3, r5
 800a9c8:	dcf2      	bgt.n	800a9b0 <_printf_i+0x218>
 800a9ca:	e7eb      	b.n	800a9a4 <_printf_i+0x20c>
 800a9cc:	2500      	movs	r5, #0
 800a9ce:	f104 0619 	add.w	r6, r4, #25
 800a9d2:	e7f5      	b.n	800a9c0 <_printf_i+0x228>
 800a9d4:	0800dc2b 	.word	0x0800dc2b
 800a9d8:	0800dc3c 	.word	0x0800dc3c

0800a9dc <std>:
 800a9dc:	2300      	movs	r3, #0
 800a9de:	b510      	push	{r4, lr}
 800a9e0:	4604      	mov	r4, r0
 800a9e2:	e9c0 3300 	strd	r3, r3, [r0]
 800a9e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9ea:	6083      	str	r3, [r0, #8]
 800a9ec:	8181      	strh	r1, [r0, #12]
 800a9ee:	6643      	str	r3, [r0, #100]	; 0x64
 800a9f0:	81c2      	strh	r2, [r0, #14]
 800a9f2:	6183      	str	r3, [r0, #24]
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	2208      	movs	r2, #8
 800a9f8:	305c      	adds	r0, #92	; 0x5c
 800a9fa:	f000 f914 	bl	800ac26 <memset>
 800a9fe:	4b0d      	ldr	r3, [pc, #52]	; (800aa34 <std+0x58>)
 800aa00:	6224      	str	r4, [r4, #32]
 800aa02:	6263      	str	r3, [r4, #36]	; 0x24
 800aa04:	4b0c      	ldr	r3, [pc, #48]	; (800aa38 <std+0x5c>)
 800aa06:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa08:	4b0c      	ldr	r3, [pc, #48]	; (800aa3c <std+0x60>)
 800aa0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa0c:	4b0c      	ldr	r3, [pc, #48]	; (800aa40 <std+0x64>)
 800aa0e:	6323      	str	r3, [r4, #48]	; 0x30
 800aa10:	4b0c      	ldr	r3, [pc, #48]	; (800aa44 <std+0x68>)
 800aa12:	429c      	cmp	r4, r3
 800aa14:	d006      	beq.n	800aa24 <std+0x48>
 800aa16:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800aa1a:	4294      	cmp	r4, r2
 800aa1c:	d002      	beq.n	800aa24 <std+0x48>
 800aa1e:	33d0      	adds	r3, #208	; 0xd0
 800aa20:	429c      	cmp	r4, r3
 800aa22:	d105      	bne.n	800aa30 <std+0x54>
 800aa24:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa2c:	f000 ba74 	b.w	800af18 <__retarget_lock_init_recursive>
 800aa30:	bd10      	pop	{r4, pc}
 800aa32:	bf00      	nop
 800aa34:	0800aba1 	.word	0x0800aba1
 800aa38:	0800abc3 	.word	0x0800abc3
 800aa3c:	0800abfb 	.word	0x0800abfb
 800aa40:	0800ac1f 	.word	0x0800ac1f
 800aa44:	200032e8 	.word	0x200032e8

0800aa48 <stdio_exit_handler>:
 800aa48:	4a02      	ldr	r2, [pc, #8]	; (800aa54 <stdio_exit_handler+0xc>)
 800aa4a:	4903      	ldr	r1, [pc, #12]	; (800aa58 <stdio_exit_handler+0x10>)
 800aa4c:	4803      	ldr	r0, [pc, #12]	; (800aa5c <stdio_exit_handler+0x14>)
 800aa4e:	f000 b869 	b.w	800ab24 <_fwalk_sglue>
 800aa52:	bf00      	nop
 800aa54:	20000010 	.word	0x20000010
 800aa58:	0800d109 	.word	0x0800d109
 800aa5c:	20000188 	.word	0x20000188

0800aa60 <cleanup_stdio>:
 800aa60:	6841      	ldr	r1, [r0, #4]
 800aa62:	4b0c      	ldr	r3, [pc, #48]	; (800aa94 <cleanup_stdio+0x34>)
 800aa64:	b510      	push	{r4, lr}
 800aa66:	4299      	cmp	r1, r3
 800aa68:	4604      	mov	r4, r0
 800aa6a:	d001      	beq.n	800aa70 <cleanup_stdio+0x10>
 800aa6c:	f002 fb4c 	bl	800d108 <_fflush_r>
 800aa70:	68a1      	ldr	r1, [r4, #8]
 800aa72:	4b09      	ldr	r3, [pc, #36]	; (800aa98 <cleanup_stdio+0x38>)
 800aa74:	4299      	cmp	r1, r3
 800aa76:	d002      	beq.n	800aa7e <cleanup_stdio+0x1e>
 800aa78:	4620      	mov	r0, r4
 800aa7a:	f002 fb45 	bl	800d108 <_fflush_r>
 800aa7e:	68e1      	ldr	r1, [r4, #12]
 800aa80:	4b06      	ldr	r3, [pc, #24]	; (800aa9c <cleanup_stdio+0x3c>)
 800aa82:	4299      	cmp	r1, r3
 800aa84:	d004      	beq.n	800aa90 <cleanup_stdio+0x30>
 800aa86:	4620      	mov	r0, r4
 800aa88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa8c:	f002 bb3c 	b.w	800d108 <_fflush_r>
 800aa90:	bd10      	pop	{r4, pc}
 800aa92:	bf00      	nop
 800aa94:	200032e8 	.word	0x200032e8
 800aa98:	20003350 	.word	0x20003350
 800aa9c:	200033b8 	.word	0x200033b8

0800aaa0 <global_stdio_init.part.0>:
 800aaa0:	b510      	push	{r4, lr}
 800aaa2:	4b0b      	ldr	r3, [pc, #44]	; (800aad0 <global_stdio_init.part.0+0x30>)
 800aaa4:	4c0b      	ldr	r4, [pc, #44]	; (800aad4 <global_stdio_init.part.0+0x34>)
 800aaa6:	4a0c      	ldr	r2, [pc, #48]	; (800aad8 <global_stdio_init.part.0+0x38>)
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	601a      	str	r2, [r3, #0]
 800aaac:	2104      	movs	r1, #4
 800aaae:	2200      	movs	r2, #0
 800aab0:	f7ff ff94 	bl	800a9dc <std>
 800aab4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800aab8:	2201      	movs	r2, #1
 800aaba:	2109      	movs	r1, #9
 800aabc:	f7ff ff8e 	bl	800a9dc <std>
 800aac0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800aac4:	2202      	movs	r2, #2
 800aac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaca:	2112      	movs	r1, #18
 800aacc:	f7ff bf86 	b.w	800a9dc <std>
 800aad0:	20003420 	.word	0x20003420
 800aad4:	200032e8 	.word	0x200032e8
 800aad8:	0800aa49 	.word	0x0800aa49

0800aadc <__sfp_lock_acquire>:
 800aadc:	4801      	ldr	r0, [pc, #4]	; (800aae4 <__sfp_lock_acquire+0x8>)
 800aade:	f000 ba1c 	b.w	800af1a <__retarget_lock_acquire_recursive>
 800aae2:	bf00      	nop
 800aae4:	20003429 	.word	0x20003429

0800aae8 <__sfp_lock_release>:
 800aae8:	4801      	ldr	r0, [pc, #4]	; (800aaf0 <__sfp_lock_release+0x8>)
 800aaea:	f000 ba17 	b.w	800af1c <__retarget_lock_release_recursive>
 800aaee:	bf00      	nop
 800aaf0:	20003429 	.word	0x20003429

0800aaf4 <__sinit>:
 800aaf4:	b510      	push	{r4, lr}
 800aaf6:	4604      	mov	r4, r0
 800aaf8:	f7ff fff0 	bl	800aadc <__sfp_lock_acquire>
 800aafc:	6a23      	ldr	r3, [r4, #32]
 800aafe:	b11b      	cbz	r3, 800ab08 <__sinit+0x14>
 800ab00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab04:	f7ff bff0 	b.w	800aae8 <__sfp_lock_release>
 800ab08:	4b04      	ldr	r3, [pc, #16]	; (800ab1c <__sinit+0x28>)
 800ab0a:	6223      	str	r3, [r4, #32]
 800ab0c:	4b04      	ldr	r3, [pc, #16]	; (800ab20 <__sinit+0x2c>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d1f5      	bne.n	800ab00 <__sinit+0xc>
 800ab14:	f7ff ffc4 	bl	800aaa0 <global_stdio_init.part.0>
 800ab18:	e7f2      	b.n	800ab00 <__sinit+0xc>
 800ab1a:	bf00      	nop
 800ab1c:	0800aa61 	.word	0x0800aa61
 800ab20:	20003420 	.word	0x20003420

0800ab24 <_fwalk_sglue>:
 800ab24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab28:	4607      	mov	r7, r0
 800ab2a:	4688      	mov	r8, r1
 800ab2c:	4614      	mov	r4, r2
 800ab2e:	2600      	movs	r6, #0
 800ab30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab34:	f1b9 0901 	subs.w	r9, r9, #1
 800ab38:	d505      	bpl.n	800ab46 <_fwalk_sglue+0x22>
 800ab3a:	6824      	ldr	r4, [r4, #0]
 800ab3c:	2c00      	cmp	r4, #0
 800ab3e:	d1f7      	bne.n	800ab30 <_fwalk_sglue+0xc>
 800ab40:	4630      	mov	r0, r6
 800ab42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab46:	89ab      	ldrh	r3, [r5, #12]
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	d907      	bls.n	800ab5c <_fwalk_sglue+0x38>
 800ab4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab50:	3301      	adds	r3, #1
 800ab52:	d003      	beq.n	800ab5c <_fwalk_sglue+0x38>
 800ab54:	4629      	mov	r1, r5
 800ab56:	4638      	mov	r0, r7
 800ab58:	47c0      	blx	r8
 800ab5a:	4306      	orrs	r6, r0
 800ab5c:	3568      	adds	r5, #104	; 0x68
 800ab5e:	e7e9      	b.n	800ab34 <_fwalk_sglue+0x10>

0800ab60 <siprintf>:
 800ab60:	b40e      	push	{r1, r2, r3}
 800ab62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ab66:	b500      	push	{lr}
 800ab68:	b09c      	sub	sp, #112	; 0x70
 800ab6a:	ab1d      	add	r3, sp, #116	; 0x74
 800ab6c:	9002      	str	r0, [sp, #8]
 800ab6e:	9006      	str	r0, [sp, #24]
 800ab70:	9107      	str	r1, [sp, #28]
 800ab72:	9104      	str	r1, [sp, #16]
 800ab74:	4808      	ldr	r0, [pc, #32]	; (800ab98 <siprintf+0x38>)
 800ab76:	4909      	ldr	r1, [pc, #36]	; (800ab9c <siprintf+0x3c>)
 800ab78:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab7c:	9105      	str	r1, [sp, #20]
 800ab7e:	6800      	ldr	r0, [r0, #0]
 800ab80:	a902      	add	r1, sp, #8
 800ab82:	9301      	str	r3, [sp, #4]
 800ab84:	f002 f940 	bl	800ce08 <_svfiprintf_r>
 800ab88:	2200      	movs	r2, #0
 800ab8a:	9b02      	ldr	r3, [sp, #8]
 800ab8c:	701a      	strb	r2, [r3, #0]
 800ab8e:	b01c      	add	sp, #112	; 0x70
 800ab90:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab94:	b003      	add	sp, #12
 800ab96:	4770      	bx	lr
 800ab98:	200001d4 	.word	0x200001d4
 800ab9c:	ffff0208 	.word	0xffff0208

0800aba0 <__sread>:
 800aba0:	b510      	push	{r4, lr}
 800aba2:	460c      	mov	r4, r1
 800aba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aba8:	f000 f958 	bl	800ae5c <_read_r>
 800abac:	2800      	cmp	r0, #0
 800abae:	bfab      	itete	ge
 800abb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800abb2:	89a3      	ldrhlt	r3, [r4, #12]
 800abb4:	181b      	addge	r3, r3, r0
 800abb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800abba:	bfac      	ite	ge
 800abbc:	6563      	strge	r3, [r4, #84]	; 0x54
 800abbe:	81a3      	strhlt	r3, [r4, #12]
 800abc0:	bd10      	pop	{r4, pc}

0800abc2 <__swrite>:
 800abc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abc6:	461f      	mov	r7, r3
 800abc8:	898b      	ldrh	r3, [r1, #12]
 800abca:	4605      	mov	r5, r0
 800abcc:	05db      	lsls	r3, r3, #23
 800abce:	460c      	mov	r4, r1
 800abd0:	4616      	mov	r6, r2
 800abd2:	d505      	bpl.n	800abe0 <__swrite+0x1e>
 800abd4:	2302      	movs	r3, #2
 800abd6:	2200      	movs	r2, #0
 800abd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abdc:	f000 f92c 	bl	800ae38 <_lseek_r>
 800abe0:	89a3      	ldrh	r3, [r4, #12]
 800abe2:	4632      	mov	r2, r6
 800abe4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abe8:	81a3      	strh	r3, [r4, #12]
 800abea:	4628      	mov	r0, r5
 800abec:	463b      	mov	r3, r7
 800abee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abf6:	f000 b953 	b.w	800aea0 <_write_r>

0800abfa <__sseek>:
 800abfa:	b510      	push	{r4, lr}
 800abfc:	460c      	mov	r4, r1
 800abfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac02:	f000 f919 	bl	800ae38 <_lseek_r>
 800ac06:	1c43      	adds	r3, r0, #1
 800ac08:	89a3      	ldrh	r3, [r4, #12]
 800ac0a:	bf15      	itete	ne
 800ac0c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ac0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ac12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ac16:	81a3      	strheq	r3, [r4, #12]
 800ac18:	bf18      	it	ne
 800ac1a:	81a3      	strhne	r3, [r4, #12]
 800ac1c:	bd10      	pop	{r4, pc}

0800ac1e <__sclose>:
 800ac1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac22:	f000 b8a3 	b.w	800ad6c <_close_r>

0800ac26 <memset>:
 800ac26:	4603      	mov	r3, r0
 800ac28:	4402      	add	r2, r0
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d100      	bne.n	800ac30 <memset+0xa>
 800ac2e:	4770      	bx	lr
 800ac30:	f803 1b01 	strb.w	r1, [r3], #1
 800ac34:	e7f9      	b.n	800ac2a <memset+0x4>

0800ac36 <strncmp>:
 800ac36:	b510      	push	{r4, lr}
 800ac38:	b16a      	cbz	r2, 800ac56 <strncmp+0x20>
 800ac3a:	3901      	subs	r1, #1
 800ac3c:	1884      	adds	r4, r0, r2
 800ac3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac42:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d103      	bne.n	800ac52 <strncmp+0x1c>
 800ac4a:	42a0      	cmp	r0, r4
 800ac4c:	d001      	beq.n	800ac52 <strncmp+0x1c>
 800ac4e:	2a00      	cmp	r2, #0
 800ac50:	d1f5      	bne.n	800ac3e <strncmp+0x8>
 800ac52:	1ad0      	subs	r0, r2, r3
 800ac54:	bd10      	pop	{r4, pc}
 800ac56:	4610      	mov	r0, r2
 800ac58:	e7fc      	b.n	800ac54 <strncmp+0x1e>

0800ac5a <strncpy>:
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	b510      	push	{r4, lr}
 800ac5e:	3901      	subs	r1, #1
 800ac60:	b132      	cbz	r2, 800ac70 <strncpy+0x16>
 800ac62:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ac66:	3a01      	subs	r2, #1
 800ac68:	f803 4b01 	strb.w	r4, [r3], #1
 800ac6c:	2c00      	cmp	r4, #0
 800ac6e:	d1f7      	bne.n	800ac60 <strncpy+0x6>
 800ac70:	2100      	movs	r1, #0
 800ac72:	441a      	add	r2, r3
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d100      	bne.n	800ac7a <strncpy+0x20>
 800ac78:	bd10      	pop	{r4, pc}
 800ac7a:	f803 1b01 	strb.w	r1, [r3], #1
 800ac7e:	e7f9      	b.n	800ac74 <strncpy+0x1a>

0800ac80 <strtok>:
 800ac80:	4b16      	ldr	r3, [pc, #88]	; (800acdc <strtok+0x5c>)
 800ac82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac86:	681f      	ldr	r7, [r3, #0]
 800ac88:	4605      	mov	r5, r0
 800ac8a:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800ac8c:	460e      	mov	r6, r1
 800ac8e:	b9ec      	cbnz	r4, 800accc <strtok+0x4c>
 800ac90:	2050      	movs	r0, #80	; 0x50
 800ac92:	f7fe fa93 	bl	80091bc <malloc>
 800ac96:	4602      	mov	r2, r0
 800ac98:	6478      	str	r0, [r7, #68]	; 0x44
 800ac9a:	b920      	cbnz	r0, 800aca6 <strtok+0x26>
 800ac9c:	215b      	movs	r1, #91	; 0x5b
 800ac9e:	4b10      	ldr	r3, [pc, #64]	; (800ace0 <strtok+0x60>)
 800aca0:	4810      	ldr	r0, [pc, #64]	; (800ace4 <strtok+0x64>)
 800aca2:	f000 f96b 	bl	800af7c <__assert_func>
 800aca6:	e9c0 4400 	strd	r4, r4, [r0]
 800acaa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800acae:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800acb2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800acb6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800acba:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800acbe:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800acc2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800acc6:	6184      	str	r4, [r0, #24]
 800acc8:	7704      	strb	r4, [r0, #28]
 800acca:	6244      	str	r4, [r0, #36]	; 0x24
 800accc:	4631      	mov	r1, r6
 800acce:	4628      	mov	r0, r5
 800acd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800acd2:	2301      	movs	r3, #1
 800acd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acd8:	f000 b806 	b.w	800ace8 <__strtok_r>
 800acdc:	200001d4 	.word	0x200001d4
 800ace0:	0800dc4d 	.word	0x0800dc4d
 800ace4:	0800dc64 	.word	0x0800dc64

0800ace8 <__strtok_r>:
 800ace8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acea:	b908      	cbnz	r0, 800acf0 <__strtok_r+0x8>
 800acec:	6810      	ldr	r0, [r2, #0]
 800acee:	b188      	cbz	r0, 800ad14 <__strtok_r+0x2c>
 800acf0:	4604      	mov	r4, r0
 800acf2:	460f      	mov	r7, r1
 800acf4:	4620      	mov	r0, r4
 800acf6:	f814 5b01 	ldrb.w	r5, [r4], #1
 800acfa:	f817 6b01 	ldrb.w	r6, [r7], #1
 800acfe:	b91e      	cbnz	r6, 800ad08 <__strtok_r+0x20>
 800ad00:	b965      	cbnz	r5, 800ad1c <__strtok_r+0x34>
 800ad02:	4628      	mov	r0, r5
 800ad04:	6015      	str	r5, [r2, #0]
 800ad06:	e005      	b.n	800ad14 <__strtok_r+0x2c>
 800ad08:	42b5      	cmp	r5, r6
 800ad0a:	d1f6      	bne.n	800acfa <__strtok_r+0x12>
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d1f0      	bne.n	800acf2 <__strtok_r+0xa>
 800ad10:	6014      	str	r4, [r2, #0]
 800ad12:	7003      	strb	r3, [r0, #0]
 800ad14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad16:	461c      	mov	r4, r3
 800ad18:	e00c      	b.n	800ad34 <__strtok_r+0x4c>
 800ad1a:	b915      	cbnz	r5, 800ad22 <__strtok_r+0x3a>
 800ad1c:	460e      	mov	r6, r1
 800ad1e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ad22:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ad26:	42ab      	cmp	r3, r5
 800ad28:	d1f7      	bne.n	800ad1a <__strtok_r+0x32>
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d0f3      	beq.n	800ad16 <__strtok_r+0x2e>
 800ad2e:	2300      	movs	r3, #0
 800ad30:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ad34:	6014      	str	r4, [r2, #0]
 800ad36:	e7ed      	b.n	800ad14 <__strtok_r+0x2c>

0800ad38 <strstr>:
 800ad38:	780a      	ldrb	r2, [r1, #0]
 800ad3a:	b570      	push	{r4, r5, r6, lr}
 800ad3c:	b96a      	cbnz	r2, 800ad5a <strstr+0x22>
 800ad3e:	bd70      	pop	{r4, r5, r6, pc}
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d109      	bne.n	800ad58 <strstr+0x20>
 800ad44:	460c      	mov	r4, r1
 800ad46:	4605      	mov	r5, r0
 800ad48:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d0f6      	beq.n	800ad3e <strstr+0x6>
 800ad50:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ad54:	429e      	cmp	r6, r3
 800ad56:	d0f7      	beq.n	800ad48 <strstr+0x10>
 800ad58:	3001      	adds	r0, #1
 800ad5a:	7803      	ldrb	r3, [r0, #0]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d1ef      	bne.n	800ad40 <strstr+0x8>
 800ad60:	4618      	mov	r0, r3
 800ad62:	e7ec      	b.n	800ad3e <strstr+0x6>

0800ad64 <_localeconv_r>:
 800ad64:	4800      	ldr	r0, [pc, #0]	; (800ad68 <_localeconv_r+0x4>)
 800ad66:	4770      	bx	lr
 800ad68:	2000010c 	.word	0x2000010c

0800ad6c <_close_r>:
 800ad6c:	b538      	push	{r3, r4, r5, lr}
 800ad6e:	2300      	movs	r3, #0
 800ad70:	4d05      	ldr	r5, [pc, #20]	; (800ad88 <_close_r+0x1c>)
 800ad72:	4604      	mov	r4, r0
 800ad74:	4608      	mov	r0, r1
 800ad76:	602b      	str	r3, [r5, #0]
 800ad78:	f7f7 ff44 	bl	8002c04 <_close>
 800ad7c:	1c43      	adds	r3, r0, #1
 800ad7e:	d102      	bne.n	800ad86 <_close_r+0x1a>
 800ad80:	682b      	ldr	r3, [r5, #0]
 800ad82:	b103      	cbz	r3, 800ad86 <_close_r+0x1a>
 800ad84:	6023      	str	r3, [r4, #0]
 800ad86:	bd38      	pop	{r3, r4, r5, pc}
 800ad88:	20003424 	.word	0x20003424

0800ad8c <_reclaim_reent>:
 800ad8c:	4b29      	ldr	r3, [pc, #164]	; (800ae34 <_reclaim_reent+0xa8>)
 800ad8e:	b570      	push	{r4, r5, r6, lr}
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4604      	mov	r4, r0
 800ad94:	4283      	cmp	r3, r0
 800ad96:	d04b      	beq.n	800ae30 <_reclaim_reent+0xa4>
 800ad98:	69c3      	ldr	r3, [r0, #28]
 800ad9a:	b143      	cbz	r3, 800adae <_reclaim_reent+0x22>
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d144      	bne.n	800ae2c <_reclaim_reent+0xa0>
 800ada2:	69e3      	ldr	r3, [r4, #28]
 800ada4:	6819      	ldr	r1, [r3, #0]
 800ada6:	b111      	cbz	r1, 800adae <_reclaim_reent+0x22>
 800ada8:	4620      	mov	r0, r4
 800adaa:	f000 ff75 	bl	800bc98 <_free_r>
 800adae:	6961      	ldr	r1, [r4, #20]
 800adb0:	b111      	cbz	r1, 800adb8 <_reclaim_reent+0x2c>
 800adb2:	4620      	mov	r0, r4
 800adb4:	f000 ff70 	bl	800bc98 <_free_r>
 800adb8:	69e1      	ldr	r1, [r4, #28]
 800adba:	b111      	cbz	r1, 800adc2 <_reclaim_reent+0x36>
 800adbc:	4620      	mov	r0, r4
 800adbe:	f000 ff6b 	bl	800bc98 <_free_r>
 800adc2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800adc4:	b111      	cbz	r1, 800adcc <_reclaim_reent+0x40>
 800adc6:	4620      	mov	r0, r4
 800adc8:	f000 ff66 	bl	800bc98 <_free_r>
 800adcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adce:	b111      	cbz	r1, 800add6 <_reclaim_reent+0x4a>
 800add0:	4620      	mov	r0, r4
 800add2:	f000 ff61 	bl	800bc98 <_free_r>
 800add6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800add8:	b111      	cbz	r1, 800ade0 <_reclaim_reent+0x54>
 800adda:	4620      	mov	r0, r4
 800addc:	f000 ff5c 	bl	800bc98 <_free_r>
 800ade0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ade2:	b111      	cbz	r1, 800adea <_reclaim_reent+0x5e>
 800ade4:	4620      	mov	r0, r4
 800ade6:	f000 ff57 	bl	800bc98 <_free_r>
 800adea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800adec:	b111      	cbz	r1, 800adf4 <_reclaim_reent+0x68>
 800adee:	4620      	mov	r0, r4
 800adf0:	f000 ff52 	bl	800bc98 <_free_r>
 800adf4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800adf6:	b111      	cbz	r1, 800adfe <_reclaim_reent+0x72>
 800adf8:	4620      	mov	r0, r4
 800adfa:	f000 ff4d 	bl	800bc98 <_free_r>
 800adfe:	6a23      	ldr	r3, [r4, #32]
 800ae00:	b1b3      	cbz	r3, 800ae30 <_reclaim_reent+0xa4>
 800ae02:	4620      	mov	r0, r4
 800ae04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae08:	4718      	bx	r3
 800ae0a:	5949      	ldr	r1, [r1, r5]
 800ae0c:	b941      	cbnz	r1, 800ae20 <_reclaim_reent+0x94>
 800ae0e:	3504      	adds	r5, #4
 800ae10:	69e3      	ldr	r3, [r4, #28]
 800ae12:	2d80      	cmp	r5, #128	; 0x80
 800ae14:	68d9      	ldr	r1, [r3, #12]
 800ae16:	d1f8      	bne.n	800ae0a <_reclaim_reent+0x7e>
 800ae18:	4620      	mov	r0, r4
 800ae1a:	f000 ff3d 	bl	800bc98 <_free_r>
 800ae1e:	e7c0      	b.n	800ada2 <_reclaim_reent+0x16>
 800ae20:	680e      	ldr	r6, [r1, #0]
 800ae22:	4620      	mov	r0, r4
 800ae24:	f000 ff38 	bl	800bc98 <_free_r>
 800ae28:	4631      	mov	r1, r6
 800ae2a:	e7ef      	b.n	800ae0c <_reclaim_reent+0x80>
 800ae2c:	2500      	movs	r5, #0
 800ae2e:	e7ef      	b.n	800ae10 <_reclaim_reent+0x84>
 800ae30:	bd70      	pop	{r4, r5, r6, pc}
 800ae32:	bf00      	nop
 800ae34:	200001d4 	.word	0x200001d4

0800ae38 <_lseek_r>:
 800ae38:	b538      	push	{r3, r4, r5, lr}
 800ae3a:	4604      	mov	r4, r0
 800ae3c:	4608      	mov	r0, r1
 800ae3e:	4611      	mov	r1, r2
 800ae40:	2200      	movs	r2, #0
 800ae42:	4d05      	ldr	r5, [pc, #20]	; (800ae58 <_lseek_r+0x20>)
 800ae44:	602a      	str	r2, [r5, #0]
 800ae46:	461a      	mov	r2, r3
 800ae48:	f7f7 ff00 	bl	8002c4c <_lseek>
 800ae4c:	1c43      	adds	r3, r0, #1
 800ae4e:	d102      	bne.n	800ae56 <_lseek_r+0x1e>
 800ae50:	682b      	ldr	r3, [r5, #0]
 800ae52:	b103      	cbz	r3, 800ae56 <_lseek_r+0x1e>
 800ae54:	6023      	str	r3, [r4, #0]
 800ae56:	bd38      	pop	{r3, r4, r5, pc}
 800ae58:	20003424 	.word	0x20003424

0800ae5c <_read_r>:
 800ae5c:	b538      	push	{r3, r4, r5, lr}
 800ae5e:	4604      	mov	r4, r0
 800ae60:	4608      	mov	r0, r1
 800ae62:	4611      	mov	r1, r2
 800ae64:	2200      	movs	r2, #0
 800ae66:	4d05      	ldr	r5, [pc, #20]	; (800ae7c <_read_r+0x20>)
 800ae68:	602a      	str	r2, [r5, #0]
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	f7f7 fe91 	bl	8002b92 <_read>
 800ae70:	1c43      	adds	r3, r0, #1
 800ae72:	d102      	bne.n	800ae7a <_read_r+0x1e>
 800ae74:	682b      	ldr	r3, [r5, #0]
 800ae76:	b103      	cbz	r3, 800ae7a <_read_r+0x1e>
 800ae78:	6023      	str	r3, [r4, #0]
 800ae7a:	bd38      	pop	{r3, r4, r5, pc}
 800ae7c:	20003424 	.word	0x20003424

0800ae80 <_sbrk_r>:
 800ae80:	b538      	push	{r3, r4, r5, lr}
 800ae82:	2300      	movs	r3, #0
 800ae84:	4d05      	ldr	r5, [pc, #20]	; (800ae9c <_sbrk_r+0x1c>)
 800ae86:	4604      	mov	r4, r0
 800ae88:	4608      	mov	r0, r1
 800ae8a:	602b      	str	r3, [r5, #0]
 800ae8c:	f7f7 feea 	bl	8002c64 <_sbrk>
 800ae90:	1c43      	adds	r3, r0, #1
 800ae92:	d102      	bne.n	800ae9a <_sbrk_r+0x1a>
 800ae94:	682b      	ldr	r3, [r5, #0]
 800ae96:	b103      	cbz	r3, 800ae9a <_sbrk_r+0x1a>
 800ae98:	6023      	str	r3, [r4, #0]
 800ae9a:	bd38      	pop	{r3, r4, r5, pc}
 800ae9c:	20003424 	.word	0x20003424

0800aea0 <_write_r>:
 800aea0:	b538      	push	{r3, r4, r5, lr}
 800aea2:	4604      	mov	r4, r0
 800aea4:	4608      	mov	r0, r1
 800aea6:	4611      	mov	r1, r2
 800aea8:	2200      	movs	r2, #0
 800aeaa:	4d05      	ldr	r5, [pc, #20]	; (800aec0 <_write_r+0x20>)
 800aeac:	602a      	str	r2, [r5, #0]
 800aeae:	461a      	mov	r2, r3
 800aeb0:	f7f7 fe8c 	bl	8002bcc <_write>
 800aeb4:	1c43      	adds	r3, r0, #1
 800aeb6:	d102      	bne.n	800aebe <_write_r+0x1e>
 800aeb8:	682b      	ldr	r3, [r5, #0]
 800aeba:	b103      	cbz	r3, 800aebe <_write_r+0x1e>
 800aebc:	6023      	str	r3, [r4, #0]
 800aebe:	bd38      	pop	{r3, r4, r5, pc}
 800aec0:	20003424 	.word	0x20003424

0800aec4 <__errno>:
 800aec4:	4b01      	ldr	r3, [pc, #4]	; (800aecc <__errno+0x8>)
 800aec6:	6818      	ldr	r0, [r3, #0]
 800aec8:	4770      	bx	lr
 800aeca:	bf00      	nop
 800aecc:	200001d4 	.word	0x200001d4

0800aed0 <__libc_init_array>:
 800aed0:	b570      	push	{r4, r5, r6, lr}
 800aed2:	2600      	movs	r6, #0
 800aed4:	4d0c      	ldr	r5, [pc, #48]	; (800af08 <__libc_init_array+0x38>)
 800aed6:	4c0d      	ldr	r4, [pc, #52]	; (800af0c <__libc_init_array+0x3c>)
 800aed8:	1b64      	subs	r4, r4, r5
 800aeda:	10a4      	asrs	r4, r4, #2
 800aedc:	42a6      	cmp	r6, r4
 800aede:	d109      	bne.n	800aef4 <__libc_init_array+0x24>
 800aee0:	f002 fc58 	bl	800d794 <_init>
 800aee4:	2600      	movs	r6, #0
 800aee6:	4d0a      	ldr	r5, [pc, #40]	; (800af10 <__libc_init_array+0x40>)
 800aee8:	4c0a      	ldr	r4, [pc, #40]	; (800af14 <__libc_init_array+0x44>)
 800aeea:	1b64      	subs	r4, r4, r5
 800aeec:	10a4      	asrs	r4, r4, #2
 800aeee:	42a6      	cmp	r6, r4
 800aef0:	d105      	bne.n	800aefe <__libc_init_array+0x2e>
 800aef2:	bd70      	pop	{r4, r5, r6, pc}
 800aef4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aef8:	4798      	blx	r3
 800aefa:	3601      	adds	r6, #1
 800aefc:	e7ee      	b.n	800aedc <__libc_init_array+0xc>
 800aefe:	f855 3b04 	ldr.w	r3, [r5], #4
 800af02:	4798      	blx	r3
 800af04:	3601      	adds	r6, #1
 800af06:	e7f2      	b.n	800aeee <__libc_init_array+0x1e>
 800af08:	0800df48 	.word	0x0800df48
 800af0c:	0800df48 	.word	0x0800df48
 800af10:	0800df48 	.word	0x0800df48
 800af14:	0800df4c 	.word	0x0800df4c

0800af18 <__retarget_lock_init_recursive>:
 800af18:	4770      	bx	lr

0800af1a <__retarget_lock_acquire_recursive>:
 800af1a:	4770      	bx	lr

0800af1c <__retarget_lock_release_recursive>:
 800af1c:	4770      	bx	lr

0800af1e <strcpy>:
 800af1e:	4603      	mov	r3, r0
 800af20:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af24:	f803 2b01 	strb.w	r2, [r3], #1
 800af28:	2a00      	cmp	r2, #0
 800af2a:	d1f9      	bne.n	800af20 <strcpy+0x2>
 800af2c:	4770      	bx	lr

0800af2e <memchr>:
 800af2e:	4603      	mov	r3, r0
 800af30:	b510      	push	{r4, lr}
 800af32:	b2c9      	uxtb	r1, r1
 800af34:	4402      	add	r2, r0
 800af36:	4293      	cmp	r3, r2
 800af38:	4618      	mov	r0, r3
 800af3a:	d101      	bne.n	800af40 <memchr+0x12>
 800af3c:	2000      	movs	r0, #0
 800af3e:	e003      	b.n	800af48 <memchr+0x1a>
 800af40:	7804      	ldrb	r4, [r0, #0]
 800af42:	3301      	adds	r3, #1
 800af44:	428c      	cmp	r4, r1
 800af46:	d1f6      	bne.n	800af36 <memchr+0x8>
 800af48:	bd10      	pop	{r4, pc}

0800af4a <memcpy>:
 800af4a:	440a      	add	r2, r1
 800af4c:	4291      	cmp	r1, r2
 800af4e:	f100 33ff 	add.w	r3, r0, #4294967295
 800af52:	d100      	bne.n	800af56 <memcpy+0xc>
 800af54:	4770      	bx	lr
 800af56:	b510      	push	{r4, lr}
 800af58:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af5c:	4291      	cmp	r1, r2
 800af5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af62:	d1f9      	bne.n	800af58 <memcpy+0xe>
 800af64:	bd10      	pop	{r4, pc}
	...

0800af68 <nan>:
 800af68:	2000      	movs	r0, #0
 800af6a:	4901      	ldr	r1, [pc, #4]	; (800af70 <nan+0x8>)
 800af6c:	4770      	bx	lr
 800af6e:	bf00      	nop
 800af70:	7ff80000 	.word	0x7ff80000

0800af74 <nanf>:
 800af74:	4800      	ldr	r0, [pc, #0]	; (800af78 <nanf+0x4>)
 800af76:	4770      	bx	lr
 800af78:	7fc00000 	.word	0x7fc00000

0800af7c <__assert_func>:
 800af7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af7e:	4614      	mov	r4, r2
 800af80:	461a      	mov	r2, r3
 800af82:	4b09      	ldr	r3, [pc, #36]	; (800afa8 <__assert_func+0x2c>)
 800af84:	4605      	mov	r5, r0
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	68d8      	ldr	r0, [r3, #12]
 800af8a:	b14c      	cbz	r4, 800afa0 <__assert_func+0x24>
 800af8c:	4b07      	ldr	r3, [pc, #28]	; (800afac <__assert_func+0x30>)
 800af8e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af92:	9100      	str	r1, [sp, #0]
 800af94:	462b      	mov	r3, r5
 800af96:	4906      	ldr	r1, [pc, #24]	; (800afb0 <__assert_func+0x34>)
 800af98:	f002 f8de 	bl	800d158 <fiprintf>
 800af9c:	f002 f908 	bl	800d1b0 <abort>
 800afa0:	4b04      	ldr	r3, [pc, #16]	; (800afb4 <__assert_func+0x38>)
 800afa2:	461c      	mov	r4, r3
 800afa4:	e7f3      	b.n	800af8e <__assert_func+0x12>
 800afa6:	bf00      	nop
 800afa8:	200001d4 	.word	0x200001d4
 800afac:	0800dcc6 	.word	0x0800dcc6
 800afb0:	0800dcd3 	.word	0x0800dcd3
 800afb4:	0800dd01 	.word	0x0800dd01

0800afb8 <quorem>:
 800afb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afbc:	6903      	ldr	r3, [r0, #16]
 800afbe:	690c      	ldr	r4, [r1, #16]
 800afc0:	4607      	mov	r7, r0
 800afc2:	42a3      	cmp	r3, r4
 800afc4:	db7f      	blt.n	800b0c6 <quorem+0x10e>
 800afc6:	3c01      	subs	r4, #1
 800afc8:	f100 0514 	add.w	r5, r0, #20
 800afcc:	f101 0814 	add.w	r8, r1, #20
 800afd0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afd4:	9301      	str	r3, [sp, #4]
 800afd6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800afda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800afde:	3301      	adds	r3, #1
 800afe0:	429a      	cmp	r2, r3
 800afe2:	fbb2 f6f3 	udiv	r6, r2, r3
 800afe6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800afea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800afee:	d331      	bcc.n	800b054 <quorem+0x9c>
 800aff0:	f04f 0e00 	mov.w	lr, #0
 800aff4:	4640      	mov	r0, r8
 800aff6:	46ac      	mov	ip, r5
 800aff8:	46f2      	mov	sl, lr
 800affa:	f850 2b04 	ldr.w	r2, [r0], #4
 800affe:	b293      	uxth	r3, r2
 800b000:	fb06 e303 	mla	r3, r6, r3, lr
 800b004:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b008:	0c1a      	lsrs	r2, r3, #16
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	fb06 220e 	mla	r2, r6, lr, r2
 800b010:	ebaa 0303 	sub.w	r3, sl, r3
 800b014:	f8dc a000 	ldr.w	sl, [ip]
 800b018:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b01c:	fa1f fa8a 	uxth.w	sl, sl
 800b020:	4453      	add	r3, sl
 800b022:	f8dc a000 	ldr.w	sl, [ip]
 800b026:	b292      	uxth	r2, r2
 800b028:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b02c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b030:	b29b      	uxth	r3, r3
 800b032:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b036:	4581      	cmp	r9, r0
 800b038:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b03c:	f84c 3b04 	str.w	r3, [ip], #4
 800b040:	d2db      	bcs.n	800affa <quorem+0x42>
 800b042:	f855 300b 	ldr.w	r3, [r5, fp]
 800b046:	b92b      	cbnz	r3, 800b054 <quorem+0x9c>
 800b048:	9b01      	ldr	r3, [sp, #4]
 800b04a:	3b04      	subs	r3, #4
 800b04c:	429d      	cmp	r5, r3
 800b04e:	461a      	mov	r2, r3
 800b050:	d32d      	bcc.n	800b0ae <quorem+0xf6>
 800b052:	613c      	str	r4, [r7, #16]
 800b054:	4638      	mov	r0, r7
 800b056:	f001 fc97 	bl	800c988 <__mcmp>
 800b05a:	2800      	cmp	r0, #0
 800b05c:	db23      	blt.n	800b0a6 <quorem+0xee>
 800b05e:	4629      	mov	r1, r5
 800b060:	2000      	movs	r0, #0
 800b062:	3601      	adds	r6, #1
 800b064:	f858 2b04 	ldr.w	r2, [r8], #4
 800b068:	f8d1 c000 	ldr.w	ip, [r1]
 800b06c:	b293      	uxth	r3, r2
 800b06e:	1ac3      	subs	r3, r0, r3
 800b070:	0c12      	lsrs	r2, r2, #16
 800b072:	fa1f f08c 	uxth.w	r0, ip
 800b076:	4403      	add	r3, r0
 800b078:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b07c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b080:	b29b      	uxth	r3, r3
 800b082:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b086:	45c1      	cmp	r9, r8
 800b088:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b08c:	f841 3b04 	str.w	r3, [r1], #4
 800b090:	d2e8      	bcs.n	800b064 <quorem+0xac>
 800b092:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b096:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b09a:	b922      	cbnz	r2, 800b0a6 <quorem+0xee>
 800b09c:	3b04      	subs	r3, #4
 800b09e:	429d      	cmp	r5, r3
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	d30a      	bcc.n	800b0ba <quorem+0x102>
 800b0a4:	613c      	str	r4, [r7, #16]
 800b0a6:	4630      	mov	r0, r6
 800b0a8:	b003      	add	sp, #12
 800b0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ae:	6812      	ldr	r2, [r2, #0]
 800b0b0:	3b04      	subs	r3, #4
 800b0b2:	2a00      	cmp	r2, #0
 800b0b4:	d1cd      	bne.n	800b052 <quorem+0x9a>
 800b0b6:	3c01      	subs	r4, #1
 800b0b8:	e7c8      	b.n	800b04c <quorem+0x94>
 800b0ba:	6812      	ldr	r2, [r2, #0]
 800b0bc:	3b04      	subs	r3, #4
 800b0be:	2a00      	cmp	r2, #0
 800b0c0:	d1f0      	bne.n	800b0a4 <quorem+0xec>
 800b0c2:	3c01      	subs	r4, #1
 800b0c4:	e7eb      	b.n	800b09e <quorem+0xe6>
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	e7ee      	b.n	800b0a8 <quorem+0xf0>
 800b0ca:	0000      	movs	r0, r0
 800b0cc:	0000      	movs	r0, r0
	...

0800b0d0 <_dtoa_r>:
 800b0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d4:	4616      	mov	r6, r2
 800b0d6:	461f      	mov	r7, r3
 800b0d8:	69c4      	ldr	r4, [r0, #28]
 800b0da:	b099      	sub	sp, #100	; 0x64
 800b0dc:	4605      	mov	r5, r0
 800b0de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b0e2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b0e6:	b974      	cbnz	r4, 800b106 <_dtoa_r+0x36>
 800b0e8:	2010      	movs	r0, #16
 800b0ea:	f7fe f867 	bl	80091bc <malloc>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	61e8      	str	r0, [r5, #28]
 800b0f2:	b920      	cbnz	r0, 800b0fe <_dtoa_r+0x2e>
 800b0f4:	21ef      	movs	r1, #239	; 0xef
 800b0f6:	4bac      	ldr	r3, [pc, #688]	; (800b3a8 <_dtoa_r+0x2d8>)
 800b0f8:	48ac      	ldr	r0, [pc, #688]	; (800b3ac <_dtoa_r+0x2dc>)
 800b0fa:	f7ff ff3f 	bl	800af7c <__assert_func>
 800b0fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b102:	6004      	str	r4, [r0, #0]
 800b104:	60c4      	str	r4, [r0, #12]
 800b106:	69eb      	ldr	r3, [r5, #28]
 800b108:	6819      	ldr	r1, [r3, #0]
 800b10a:	b151      	cbz	r1, 800b122 <_dtoa_r+0x52>
 800b10c:	685a      	ldr	r2, [r3, #4]
 800b10e:	2301      	movs	r3, #1
 800b110:	4093      	lsls	r3, r2
 800b112:	604a      	str	r2, [r1, #4]
 800b114:	608b      	str	r3, [r1, #8]
 800b116:	4628      	mov	r0, r5
 800b118:	f001 f9b2 	bl	800c480 <_Bfree>
 800b11c:	2200      	movs	r2, #0
 800b11e:	69eb      	ldr	r3, [r5, #28]
 800b120:	601a      	str	r2, [r3, #0]
 800b122:	1e3b      	subs	r3, r7, #0
 800b124:	bfaf      	iteee	ge
 800b126:	2300      	movge	r3, #0
 800b128:	2201      	movlt	r2, #1
 800b12a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b12e:	9305      	strlt	r3, [sp, #20]
 800b130:	bfa8      	it	ge
 800b132:	f8c8 3000 	strge.w	r3, [r8]
 800b136:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b13a:	4b9d      	ldr	r3, [pc, #628]	; (800b3b0 <_dtoa_r+0x2e0>)
 800b13c:	bfb8      	it	lt
 800b13e:	f8c8 2000 	strlt.w	r2, [r8]
 800b142:	ea33 0309 	bics.w	r3, r3, r9
 800b146:	d119      	bne.n	800b17c <_dtoa_r+0xac>
 800b148:	f242 730f 	movw	r3, #9999	; 0x270f
 800b14c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b14e:	6013      	str	r3, [r2, #0]
 800b150:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b154:	4333      	orrs	r3, r6
 800b156:	f000 8589 	beq.w	800bc6c <_dtoa_r+0xb9c>
 800b15a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b15c:	b953      	cbnz	r3, 800b174 <_dtoa_r+0xa4>
 800b15e:	4b95      	ldr	r3, [pc, #596]	; (800b3b4 <_dtoa_r+0x2e4>)
 800b160:	e023      	b.n	800b1aa <_dtoa_r+0xda>
 800b162:	4b95      	ldr	r3, [pc, #596]	; (800b3b8 <_dtoa_r+0x2e8>)
 800b164:	9303      	str	r3, [sp, #12]
 800b166:	3308      	adds	r3, #8
 800b168:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b16a:	6013      	str	r3, [r2, #0]
 800b16c:	9803      	ldr	r0, [sp, #12]
 800b16e:	b019      	add	sp, #100	; 0x64
 800b170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b174:	4b8f      	ldr	r3, [pc, #572]	; (800b3b4 <_dtoa_r+0x2e4>)
 800b176:	9303      	str	r3, [sp, #12]
 800b178:	3303      	adds	r3, #3
 800b17a:	e7f5      	b.n	800b168 <_dtoa_r+0x98>
 800b17c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b180:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b184:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b188:	2200      	movs	r2, #0
 800b18a:	2300      	movs	r3, #0
 800b18c:	f7f5 fc7c 	bl	8000a88 <__aeabi_dcmpeq>
 800b190:	4680      	mov	r8, r0
 800b192:	b160      	cbz	r0, 800b1ae <_dtoa_r+0xde>
 800b194:	2301      	movs	r3, #1
 800b196:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b198:	6013      	str	r3, [r2, #0]
 800b19a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	f000 8562 	beq.w	800bc66 <_dtoa_r+0xb96>
 800b1a2:	4b86      	ldr	r3, [pc, #536]	; (800b3bc <_dtoa_r+0x2ec>)
 800b1a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b1a6:	6013      	str	r3, [r2, #0]
 800b1a8:	3b01      	subs	r3, #1
 800b1aa:	9303      	str	r3, [sp, #12]
 800b1ac:	e7de      	b.n	800b16c <_dtoa_r+0x9c>
 800b1ae:	ab16      	add	r3, sp, #88	; 0x58
 800b1b0:	9301      	str	r3, [sp, #4]
 800b1b2:	ab17      	add	r3, sp, #92	; 0x5c
 800b1b4:	9300      	str	r3, [sp, #0]
 800b1b6:	4628      	mov	r0, r5
 800b1b8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b1bc:	f001 fcf4 	bl	800cba8 <__d2b>
 800b1c0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b1c4:	4682      	mov	sl, r0
 800b1c6:	2c00      	cmp	r4, #0
 800b1c8:	d07e      	beq.n	800b2c8 <_dtoa_r+0x1f8>
 800b1ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b1ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1d0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b1d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1d8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b1dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b1e0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b1e4:	4619      	mov	r1, r3
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	4b75      	ldr	r3, [pc, #468]	; (800b3c0 <_dtoa_r+0x2f0>)
 800b1ea:	f7f5 f82d 	bl	8000248 <__aeabi_dsub>
 800b1ee:	a368      	add	r3, pc, #416	; (adr r3, 800b390 <_dtoa_r+0x2c0>)
 800b1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f4:	f7f5 f9e0 	bl	80005b8 <__aeabi_dmul>
 800b1f8:	a367      	add	r3, pc, #412	; (adr r3, 800b398 <_dtoa_r+0x2c8>)
 800b1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fe:	f7f5 f825 	bl	800024c <__adddf3>
 800b202:	4606      	mov	r6, r0
 800b204:	4620      	mov	r0, r4
 800b206:	460f      	mov	r7, r1
 800b208:	f7f5 f96c 	bl	80004e4 <__aeabi_i2d>
 800b20c:	a364      	add	r3, pc, #400	; (adr r3, 800b3a0 <_dtoa_r+0x2d0>)
 800b20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b212:	f7f5 f9d1 	bl	80005b8 <__aeabi_dmul>
 800b216:	4602      	mov	r2, r0
 800b218:	460b      	mov	r3, r1
 800b21a:	4630      	mov	r0, r6
 800b21c:	4639      	mov	r1, r7
 800b21e:	f7f5 f815 	bl	800024c <__adddf3>
 800b222:	4606      	mov	r6, r0
 800b224:	460f      	mov	r7, r1
 800b226:	f7f5 fc77 	bl	8000b18 <__aeabi_d2iz>
 800b22a:	2200      	movs	r2, #0
 800b22c:	4683      	mov	fp, r0
 800b22e:	2300      	movs	r3, #0
 800b230:	4630      	mov	r0, r6
 800b232:	4639      	mov	r1, r7
 800b234:	f7f5 fc32 	bl	8000a9c <__aeabi_dcmplt>
 800b238:	b148      	cbz	r0, 800b24e <_dtoa_r+0x17e>
 800b23a:	4658      	mov	r0, fp
 800b23c:	f7f5 f952 	bl	80004e4 <__aeabi_i2d>
 800b240:	4632      	mov	r2, r6
 800b242:	463b      	mov	r3, r7
 800b244:	f7f5 fc20 	bl	8000a88 <__aeabi_dcmpeq>
 800b248:	b908      	cbnz	r0, 800b24e <_dtoa_r+0x17e>
 800b24a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b24e:	f1bb 0f16 	cmp.w	fp, #22
 800b252:	d857      	bhi.n	800b304 <_dtoa_r+0x234>
 800b254:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b258:	4b5a      	ldr	r3, [pc, #360]	; (800b3c4 <_dtoa_r+0x2f4>)
 800b25a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b262:	f7f5 fc1b 	bl	8000a9c <__aeabi_dcmplt>
 800b266:	2800      	cmp	r0, #0
 800b268:	d04e      	beq.n	800b308 <_dtoa_r+0x238>
 800b26a:	2300      	movs	r3, #0
 800b26c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b270:	930f      	str	r3, [sp, #60]	; 0x3c
 800b272:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b274:	1b1b      	subs	r3, r3, r4
 800b276:	1e5a      	subs	r2, r3, #1
 800b278:	bf46      	itte	mi
 800b27a:	f1c3 0901 	rsbmi	r9, r3, #1
 800b27e:	2300      	movmi	r3, #0
 800b280:	f04f 0900 	movpl.w	r9, #0
 800b284:	9209      	str	r2, [sp, #36]	; 0x24
 800b286:	bf48      	it	mi
 800b288:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b28a:	f1bb 0f00 	cmp.w	fp, #0
 800b28e:	db3d      	blt.n	800b30c <_dtoa_r+0x23c>
 800b290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b292:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800b296:	445b      	add	r3, fp
 800b298:	9309      	str	r3, [sp, #36]	; 0x24
 800b29a:	2300      	movs	r3, #0
 800b29c:	930a      	str	r3, [sp, #40]	; 0x28
 800b29e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b2a0:	2b09      	cmp	r3, #9
 800b2a2:	d867      	bhi.n	800b374 <_dtoa_r+0x2a4>
 800b2a4:	2b05      	cmp	r3, #5
 800b2a6:	bfc4      	itt	gt
 800b2a8:	3b04      	subgt	r3, #4
 800b2aa:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b2ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b2ae:	bfc8      	it	gt
 800b2b0:	2400      	movgt	r4, #0
 800b2b2:	f1a3 0302 	sub.w	r3, r3, #2
 800b2b6:	bfd8      	it	le
 800b2b8:	2401      	movle	r4, #1
 800b2ba:	2b03      	cmp	r3, #3
 800b2bc:	f200 8086 	bhi.w	800b3cc <_dtoa_r+0x2fc>
 800b2c0:	e8df f003 	tbb	[pc, r3]
 800b2c4:	5637392c 	.word	0x5637392c
 800b2c8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b2cc:	441c      	add	r4, r3
 800b2ce:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b2d2:	2b20      	cmp	r3, #32
 800b2d4:	bfc1      	itttt	gt
 800b2d6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b2da:	fa09 f903 	lslgt.w	r9, r9, r3
 800b2de:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800b2e2:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b2e6:	bfd6      	itet	le
 800b2e8:	f1c3 0320 	rsble	r3, r3, #32
 800b2ec:	ea49 0003 	orrgt.w	r0, r9, r3
 800b2f0:	fa06 f003 	lslle.w	r0, r6, r3
 800b2f4:	f7f5 f8e6 	bl	80004c4 <__aeabi_ui2d>
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b2fe:	3c01      	subs	r4, #1
 800b300:	9213      	str	r2, [sp, #76]	; 0x4c
 800b302:	e76f      	b.n	800b1e4 <_dtoa_r+0x114>
 800b304:	2301      	movs	r3, #1
 800b306:	e7b3      	b.n	800b270 <_dtoa_r+0x1a0>
 800b308:	900f      	str	r0, [sp, #60]	; 0x3c
 800b30a:	e7b2      	b.n	800b272 <_dtoa_r+0x1a2>
 800b30c:	f1cb 0300 	rsb	r3, fp, #0
 800b310:	930a      	str	r3, [sp, #40]	; 0x28
 800b312:	2300      	movs	r3, #0
 800b314:	eba9 090b 	sub.w	r9, r9, fp
 800b318:	930e      	str	r3, [sp, #56]	; 0x38
 800b31a:	e7c0      	b.n	800b29e <_dtoa_r+0x1ce>
 800b31c:	2300      	movs	r3, #0
 800b31e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b320:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b322:	2b00      	cmp	r3, #0
 800b324:	dc55      	bgt.n	800b3d2 <_dtoa_r+0x302>
 800b326:	2301      	movs	r3, #1
 800b328:	461a      	mov	r2, r3
 800b32a:	9306      	str	r3, [sp, #24]
 800b32c:	9308      	str	r3, [sp, #32]
 800b32e:	9223      	str	r2, [sp, #140]	; 0x8c
 800b330:	e00b      	b.n	800b34a <_dtoa_r+0x27a>
 800b332:	2301      	movs	r3, #1
 800b334:	e7f3      	b.n	800b31e <_dtoa_r+0x24e>
 800b336:	2300      	movs	r3, #0
 800b338:	930b      	str	r3, [sp, #44]	; 0x2c
 800b33a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b33c:	445b      	add	r3, fp
 800b33e:	9306      	str	r3, [sp, #24]
 800b340:	3301      	adds	r3, #1
 800b342:	2b01      	cmp	r3, #1
 800b344:	9308      	str	r3, [sp, #32]
 800b346:	bfb8      	it	lt
 800b348:	2301      	movlt	r3, #1
 800b34a:	2100      	movs	r1, #0
 800b34c:	2204      	movs	r2, #4
 800b34e:	69e8      	ldr	r0, [r5, #28]
 800b350:	f102 0614 	add.w	r6, r2, #20
 800b354:	429e      	cmp	r6, r3
 800b356:	d940      	bls.n	800b3da <_dtoa_r+0x30a>
 800b358:	6041      	str	r1, [r0, #4]
 800b35a:	4628      	mov	r0, r5
 800b35c:	f001 f850 	bl	800c400 <_Balloc>
 800b360:	9003      	str	r0, [sp, #12]
 800b362:	2800      	cmp	r0, #0
 800b364:	d13c      	bne.n	800b3e0 <_dtoa_r+0x310>
 800b366:	4602      	mov	r2, r0
 800b368:	f240 11af 	movw	r1, #431	; 0x1af
 800b36c:	4b16      	ldr	r3, [pc, #88]	; (800b3c8 <_dtoa_r+0x2f8>)
 800b36e:	e6c3      	b.n	800b0f8 <_dtoa_r+0x28>
 800b370:	2301      	movs	r3, #1
 800b372:	e7e1      	b.n	800b338 <_dtoa_r+0x268>
 800b374:	2401      	movs	r4, #1
 800b376:	2300      	movs	r3, #0
 800b378:	940b      	str	r4, [sp, #44]	; 0x2c
 800b37a:	9322      	str	r3, [sp, #136]	; 0x88
 800b37c:	f04f 33ff 	mov.w	r3, #4294967295
 800b380:	2200      	movs	r2, #0
 800b382:	9306      	str	r3, [sp, #24]
 800b384:	9308      	str	r3, [sp, #32]
 800b386:	2312      	movs	r3, #18
 800b388:	e7d1      	b.n	800b32e <_dtoa_r+0x25e>
 800b38a:	bf00      	nop
 800b38c:	f3af 8000 	nop.w
 800b390:	636f4361 	.word	0x636f4361
 800b394:	3fd287a7 	.word	0x3fd287a7
 800b398:	8b60c8b3 	.word	0x8b60c8b3
 800b39c:	3fc68a28 	.word	0x3fc68a28
 800b3a0:	509f79fb 	.word	0x509f79fb
 800b3a4:	3fd34413 	.word	0x3fd34413
 800b3a8:	0800dc4d 	.word	0x0800dc4d
 800b3ac:	0800dd0f 	.word	0x0800dd0f
 800b3b0:	7ff00000 	.word	0x7ff00000
 800b3b4:	0800dd0b 	.word	0x0800dd0b
 800b3b8:	0800dd02 	.word	0x0800dd02
 800b3bc:	0800dc2a 	.word	0x0800dc2a
 800b3c0:	3ff80000 	.word	0x3ff80000
 800b3c4:	0800de60 	.word	0x0800de60
 800b3c8:	0800dd67 	.word	0x0800dd67
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3d0:	e7d4      	b.n	800b37c <_dtoa_r+0x2ac>
 800b3d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b3d4:	9306      	str	r3, [sp, #24]
 800b3d6:	9308      	str	r3, [sp, #32]
 800b3d8:	e7b7      	b.n	800b34a <_dtoa_r+0x27a>
 800b3da:	3101      	adds	r1, #1
 800b3dc:	0052      	lsls	r2, r2, #1
 800b3de:	e7b7      	b.n	800b350 <_dtoa_r+0x280>
 800b3e0:	69eb      	ldr	r3, [r5, #28]
 800b3e2:	9a03      	ldr	r2, [sp, #12]
 800b3e4:	601a      	str	r2, [r3, #0]
 800b3e6:	9b08      	ldr	r3, [sp, #32]
 800b3e8:	2b0e      	cmp	r3, #14
 800b3ea:	f200 80a8 	bhi.w	800b53e <_dtoa_r+0x46e>
 800b3ee:	2c00      	cmp	r4, #0
 800b3f0:	f000 80a5 	beq.w	800b53e <_dtoa_r+0x46e>
 800b3f4:	f1bb 0f00 	cmp.w	fp, #0
 800b3f8:	dd34      	ble.n	800b464 <_dtoa_r+0x394>
 800b3fa:	4b9a      	ldr	r3, [pc, #616]	; (800b664 <_dtoa_r+0x594>)
 800b3fc:	f00b 020f 	and.w	r2, fp, #15
 800b400:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b404:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b408:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b40c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b410:	ea4f 142b 	mov.w	r4, fp, asr #4
 800b414:	d016      	beq.n	800b444 <_dtoa_r+0x374>
 800b416:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b41a:	4b93      	ldr	r3, [pc, #588]	; (800b668 <_dtoa_r+0x598>)
 800b41c:	2703      	movs	r7, #3
 800b41e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b422:	f7f5 f9f3 	bl	800080c <__aeabi_ddiv>
 800b426:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b42a:	f004 040f 	and.w	r4, r4, #15
 800b42e:	4e8e      	ldr	r6, [pc, #568]	; (800b668 <_dtoa_r+0x598>)
 800b430:	b954      	cbnz	r4, 800b448 <_dtoa_r+0x378>
 800b432:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b436:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b43a:	f7f5 f9e7 	bl	800080c <__aeabi_ddiv>
 800b43e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b442:	e029      	b.n	800b498 <_dtoa_r+0x3c8>
 800b444:	2702      	movs	r7, #2
 800b446:	e7f2      	b.n	800b42e <_dtoa_r+0x35e>
 800b448:	07e1      	lsls	r1, r4, #31
 800b44a:	d508      	bpl.n	800b45e <_dtoa_r+0x38e>
 800b44c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b450:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b454:	f7f5 f8b0 	bl	80005b8 <__aeabi_dmul>
 800b458:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b45c:	3701      	adds	r7, #1
 800b45e:	1064      	asrs	r4, r4, #1
 800b460:	3608      	adds	r6, #8
 800b462:	e7e5      	b.n	800b430 <_dtoa_r+0x360>
 800b464:	f000 80a5 	beq.w	800b5b2 <_dtoa_r+0x4e2>
 800b468:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b46c:	f1cb 0400 	rsb	r4, fp, #0
 800b470:	4b7c      	ldr	r3, [pc, #496]	; (800b664 <_dtoa_r+0x594>)
 800b472:	f004 020f 	and.w	r2, r4, #15
 800b476:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47e:	f7f5 f89b 	bl	80005b8 <__aeabi_dmul>
 800b482:	2702      	movs	r7, #2
 800b484:	2300      	movs	r3, #0
 800b486:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b48a:	4e77      	ldr	r6, [pc, #476]	; (800b668 <_dtoa_r+0x598>)
 800b48c:	1124      	asrs	r4, r4, #4
 800b48e:	2c00      	cmp	r4, #0
 800b490:	f040 8084 	bne.w	800b59c <_dtoa_r+0x4cc>
 800b494:	2b00      	cmp	r3, #0
 800b496:	d1d2      	bne.n	800b43e <_dtoa_r+0x36e>
 800b498:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b49c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b4a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	f000 8087 	beq.w	800b5b6 <_dtoa_r+0x4e6>
 800b4a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	4b6f      	ldr	r3, [pc, #444]	; (800b66c <_dtoa_r+0x59c>)
 800b4b0:	f7f5 faf4 	bl	8000a9c <__aeabi_dcmplt>
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	d07e      	beq.n	800b5b6 <_dtoa_r+0x4e6>
 800b4b8:	9b08      	ldr	r3, [sp, #32]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d07b      	beq.n	800b5b6 <_dtoa_r+0x4e6>
 800b4be:	9b06      	ldr	r3, [sp, #24]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	dd38      	ble.n	800b536 <_dtoa_r+0x466>
 800b4c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	4b69      	ldr	r3, [pc, #420]	; (800b670 <_dtoa_r+0x5a0>)
 800b4cc:	f7f5 f874 	bl	80005b8 <__aeabi_dmul>
 800b4d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b4d4:	9c06      	ldr	r4, [sp, #24]
 800b4d6:	f10b 38ff 	add.w	r8, fp, #4294967295
 800b4da:	3701      	adds	r7, #1
 800b4dc:	4638      	mov	r0, r7
 800b4de:	f7f5 f801 	bl	80004e4 <__aeabi_i2d>
 800b4e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4e6:	f7f5 f867 	bl	80005b8 <__aeabi_dmul>
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	4b61      	ldr	r3, [pc, #388]	; (800b674 <_dtoa_r+0x5a4>)
 800b4ee:	f7f4 fead 	bl	800024c <__adddf3>
 800b4f2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b4f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b4fa:	9611      	str	r6, [sp, #68]	; 0x44
 800b4fc:	2c00      	cmp	r4, #0
 800b4fe:	d15d      	bne.n	800b5bc <_dtoa_r+0x4ec>
 800b500:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b504:	2200      	movs	r2, #0
 800b506:	4b5c      	ldr	r3, [pc, #368]	; (800b678 <_dtoa_r+0x5a8>)
 800b508:	f7f4 fe9e 	bl	8000248 <__aeabi_dsub>
 800b50c:	4602      	mov	r2, r0
 800b50e:	460b      	mov	r3, r1
 800b510:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b514:	4633      	mov	r3, r6
 800b516:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b518:	f7f5 fade 	bl	8000ad8 <__aeabi_dcmpgt>
 800b51c:	2800      	cmp	r0, #0
 800b51e:	f040 8295 	bne.w	800ba4c <_dtoa_r+0x97c>
 800b522:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b526:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b528:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b52c:	f7f5 fab6 	bl	8000a9c <__aeabi_dcmplt>
 800b530:	2800      	cmp	r0, #0
 800b532:	f040 8289 	bne.w	800ba48 <_dtoa_r+0x978>
 800b536:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b53a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b53e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b540:	2b00      	cmp	r3, #0
 800b542:	f2c0 8151 	blt.w	800b7e8 <_dtoa_r+0x718>
 800b546:	f1bb 0f0e 	cmp.w	fp, #14
 800b54a:	f300 814d 	bgt.w	800b7e8 <_dtoa_r+0x718>
 800b54e:	4b45      	ldr	r3, [pc, #276]	; (800b664 <_dtoa_r+0x594>)
 800b550:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b554:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b558:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b55c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b55e:	2b00      	cmp	r3, #0
 800b560:	f280 80da 	bge.w	800b718 <_dtoa_r+0x648>
 800b564:	9b08      	ldr	r3, [sp, #32]
 800b566:	2b00      	cmp	r3, #0
 800b568:	f300 80d6 	bgt.w	800b718 <_dtoa_r+0x648>
 800b56c:	f040 826b 	bne.w	800ba46 <_dtoa_r+0x976>
 800b570:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b574:	2200      	movs	r2, #0
 800b576:	4b40      	ldr	r3, [pc, #256]	; (800b678 <_dtoa_r+0x5a8>)
 800b578:	f7f5 f81e 	bl	80005b8 <__aeabi_dmul>
 800b57c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b580:	f7f5 faa0 	bl	8000ac4 <__aeabi_dcmpge>
 800b584:	9c08      	ldr	r4, [sp, #32]
 800b586:	4626      	mov	r6, r4
 800b588:	2800      	cmp	r0, #0
 800b58a:	f040 8241 	bne.w	800ba10 <_dtoa_r+0x940>
 800b58e:	2331      	movs	r3, #49	; 0x31
 800b590:	9f03      	ldr	r7, [sp, #12]
 800b592:	f10b 0b01 	add.w	fp, fp, #1
 800b596:	f807 3b01 	strb.w	r3, [r7], #1
 800b59a:	e23d      	b.n	800ba18 <_dtoa_r+0x948>
 800b59c:	07e2      	lsls	r2, r4, #31
 800b59e:	d505      	bpl.n	800b5ac <_dtoa_r+0x4dc>
 800b5a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b5a4:	f7f5 f808 	bl	80005b8 <__aeabi_dmul>
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	3701      	adds	r7, #1
 800b5ac:	1064      	asrs	r4, r4, #1
 800b5ae:	3608      	adds	r6, #8
 800b5b0:	e76d      	b.n	800b48e <_dtoa_r+0x3be>
 800b5b2:	2702      	movs	r7, #2
 800b5b4:	e770      	b.n	800b498 <_dtoa_r+0x3c8>
 800b5b6:	46d8      	mov	r8, fp
 800b5b8:	9c08      	ldr	r4, [sp, #32]
 800b5ba:	e78f      	b.n	800b4dc <_dtoa_r+0x40c>
 800b5bc:	9903      	ldr	r1, [sp, #12]
 800b5be:	4b29      	ldr	r3, [pc, #164]	; (800b664 <_dtoa_r+0x594>)
 800b5c0:	4421      	add	r1, r4
 800b5c2:	9112      	str	r1, [sp, #72]	; 0x48
 800b5c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b5c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b5ca:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b5ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b5d2:	2900      	cmp	r1, #0
 800b5d4:	d054      	beq.n	800b680 <_dtoa_r+0x5b0>
 800b5d6:	2000      	movs	r0, #0
 800b5d8:	4928      	ldr	r1, [pc, #160]	; (800b67c <_dtoa_r+0x5ac>)
 800b5da:	f7f5 f917 	bl	800080c <__aeabi_ddiv>
 800b5de:	463b      	mov	r3, r7
 800b5e0:	4632      	mov	r2, r6
 800b5e2:	f7f4 fe31 	bl	8000248 <__aeabi_dsub>
 800b5e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b5ea:	9f03      	ldr	r7, [sp, #12]
 800b5ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5f0:	f7f5 fa92 	bl	8000b18 <__aeabi_d2iz>
 800b5f4:	4604      	mov	r4, r0
 800b5f6:	f7f4 ff75 	bl	80004e4 <__aeabi_i2d>
 800b5fa:	4602      	mov	r2, r0
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b602:	f7f4 fe21 	bl	8000248 <__aeabi_dsub>
 800b606:	4602      	mov	r2, r0
 800b608:	460b      	mov	r3, r1
 800b60a:	3430      	adds	r4, #48	; 0x30
 800b60c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b610:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b614:	f807 4b01 	strb.w	r4, [r7], #1
 800b618:	f7f5 fa40 	bl	8000a9c <__aeabi_dcmplt>
 800b61c:	2800      	cmp	r0, #0
 800b61e:	d173      	bne.n	800b708 <_dtoa_r+0x638>
 800b620:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b624:	2000      	movs	r0, #0
 800b626:	4911      	ldr	r1, [pc, #68]	; (800b66c <_dtoa_r+0x59c>)
 800b628:	f7f4 fe0e 	bl	8000248 <__aeabi_dsub>
 800b62c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b630:	f7f5 fa34 	bl	8000a9c <__aeabi_dcmplt>
 800b634:	2800      	cmp	r0, #0
 800b636:	f040 80b6 	bne.w	800b7a6 <_dtoa_r+0x6d6>
 800b63a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b63c:	429f      	cmp	r7, r3
 800b63e:	f43f af7a 	beq.w	800b536 <_dtoa_r+0x466>
 800b642:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b646:	2200      	movs	r2, #0
 800b648:	4b09      	ldr	r3, [pc, #36]	; (800b670 <_dtoa_r+0x5a0>)
 800b64a:	f7f4 ffb5 	bl	80005b8 <__aeabi_dmul>
 800b64e:	2200      	movs	r2, #0
 800b650:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b654:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b658:	4b05      	ldr	r3, [pc, #20]	; (800b670 <_dtoa_r+0x5a0>)
 800b65a:	f7f4 ffad 	bl	80005b8 <__aeabi_dmul>
 800b65e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b662:	e7c3      	b.n	800b5ec <_dtoa_r+0x51c>
 800b664:	0800de60 	.word	0x0800de60
 800b668:	0800de38 	.word	0x0800de38
 800b66c:	3ff00000 	.word	0x3ff00000
 800b670:	40240000 	.word	0x40240000
 800b674:	401c0000 	.word	0x401c0000
 800b678:	40140000 	.word	0x40140000
 800b67c:	3fe00000 	.word	0x3fe00000
 800b680:	4630      	mov	r0, r6
 800b682:	4639      	mov	r1, r7
 800b684:	f7f4 ff98 	bl	80005b8 <__aeabi_dmul>
 800b688:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b68a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b68e:	9c03      	ldr	r4, [sp, #12]
 800b690:	9314      	str	r3, [sp, #80]	; 0x50
 800b692:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b696:	f7f5 fa3f 	bl	8000b18 <__aeabi_d2iz>
 800b69a:	9015      	str	r0, [sp, #84]	; 0x54
 800b69c:	f7f4 ff22 	bl	80004e4 <__aeabi_i2d>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	460b      	mov	r3, r1
 800b6a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6a8:	f7f4 fdce 	bl	8000248 <__aeabi_dsub>
 800b6ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6ae:	4606      	mov	r6, r0
 800b6b0:	3330      	adds	r3, #48	; 0x30
 800b6b2:	f804 3b01 	strb.w	r3, [r4], #1
 800b6b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b6b8:	460f      	mov	r7, r1
 800b6ba:	429c      	cmp	r4, r3
 800b6bc:	f04f 0200 	mov.w	r2, #0
 800b6c0:	d124      	bne.n	800b70c <_dtoa_r+0x63c>
 800b6c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b6c6:	4baf      	ldr	r3, [pc, #700]	; (800b984 <_dtoa_r+0x8b4>)
 800b6c8:	f7f4 fdc0 	bl	800024c <__adddf3>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	4639      	mov	r1, r7
 800b6d4:	f7f5 fa00 	bl	8000ad8 <__aeabi_dcmpgt>
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	d163      	bne.n	800b7a4 <_dtoa_r+0x6d4>
 800b6dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b6e0:	2000      	movs	r0, #0
 800b6e2:	49a8      	ldr	r1, [pc, #672]	; (800b984 <_dtoa_r+0x8b4>)
 800b6e4:	f7f4 fdb0 	bl	8000248 <__aeabi_dsub>
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	4630      	mov	r0, r6
 800b6ee:	4639      	mov	r1, r7
 800b6f0:	f7f5 f9d4 	bl	8000a9c <__aeabi_dcmplt>
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	f43f af1e 	beq.w	800b536 <_dtoa_r+0x466>
 800b6fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b6fc:	1e7b      	subs	r3, r7, #1
 800b6fe:	9314      	str	r3, [sp, #80]	; 0x50
 800b700:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b704:	2b30      	cmp	r3, #48	; 0x30
 800b706:	d0f8      	beq.n	800b6fa <_dtoa_r+0x62a>
 800b708:	46c3      	mov	fp, r8
 800b70a:	e03b      	b.n	800b784 <_dtoa_r+0x6b4>
 800b70c:	4b9e      	ldr	r3, [pc, #632]	; (800b988 <_dtoa_r+0x8b8>)
 800b70e:	f7f4 ff53 	bl	80005b8 <__aeabi_dmul>
 800b712:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b716:	e7bc      	b.n	800b692 <_dtoa_r+0x5c2>
 800b718:	9f03      	ldr	r7, [sp, #12]
 800b71a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b71e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b722:	4640      	mov	r0, r8
 800b724:	4649      	mov	r1, r9
 800b726:	f7f5 f871 	bl	800080c <__aeabi_ddiv>
 800b72a:	f7f5 f9f5 	bl	8000b18 <__aeabi_d2iz>
 800b72e:	4604      	mov	r4, r0
 800b730:	f7f4 fed8 	bl	80004e4 <__aeabi_i2d>
 800b734:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b738:	f7f4 ff3e 	bl	80005b8 <__aeabi_dmul>
 800b73c:	4602      	mov	r2, r0
 800b73e:	460b      	mov	r3, r1
 800b740:	4640      	mov	r0, r8
 800b742:	4649      	mov	r1, r9
 800b744:	f7f4 fd80 	bl	8000248 <__aeabi_dsub>
 800b748:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b74c:	f807 6b01 	strb.w	r6, [r7], #1
 800b750:	9e03      	ldr	r6, [sp, #12]
 800b752:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b756:	1bbe      	subs	r6, r7, r6
 800b758:	45b4      	cmp	ip, r6
 800b75a:	4602      	mov	r2, r0
 800b75c:	460b      	mov	r3, r1
 800b75e:	d136      	bne.n	800b7ce <_dtoa_r+0x6fe>
 800b760:	f7f4 fd74 	bl	800024c <__adddf3>
 800b764:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b768:	4680      	mov	r8, r0
 800b76a:	4689      	mov	r9, r1
 800b76c:	f7f5 f9b4 	bl	8000ad8 <__aeabi_dcmpgt>
 800b770:	bb58      	cbnz	r0, 800b7ca <_dtoa_r+0x6fa>
 800b772:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b776:	4640      	mov	r0, r8
 800b778:	4649      	mov	r1, r9
 800b77a:	f7f5 f985 	bl	8000a88 <__aeabi_dcmpeq>
 800b77e:	b108      	cbz	r0, 800b784 <_dtoa_r+0x6b4>
 800b780:	07e3      	lsls	r3, r4, #31
 800b782:	d422      	bmi.n	800b7ca <_dtoa_r+0x6fa>
 800b784:	4651      	mov	r1, sl
 800b786:	4628      	mov	r0, r5
 800b788:	f000 fe7a 	bl	800c480 <_Bfree>
 800b78c:	2300      	movs	r3, #0
 800b78e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b790:	703b      	strb	r3, [r7, #0]
 800b792:	f10b 0301 	add.w	r3, fp, #1
 800b796:	6013      	str	r3, [r2, #0]
 800b798:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	f43f ace6 	beq.w	800b16c <_dtoa_r+0x9c>
 800b7a0:	601f      	str	r7, [r3, #0]
 800b7a2:	e4e3      	b.n	800b16c <_dtoa_r+0x9c>
 800b7a4:	4627      	mov	r7, r4
 800b7a6:	463b      	mov	r3, r7
 800b7a8:	461f      	mov	r7, r3
 800b7aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7ae:	2a39      	cmp	r2, #57	; 0x39
 800b7b0:	d107      	bne.n	800b7c2 <_dtoa_r+0x6f2>
 800b7b2:	9a03      	ldr	r2, [sp, #12]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d1f7      	bne.n	800b7a8 <_dtoa_r+0x6d8>
 800b7b8:	2230      	movs	r2, #48	; 0x30
 800b7ba:	9903      	ldr	r1, [sp, #12]
 800b7bc:	f108 0801 	add.w	r8, r8, #1
 800b7c0:	700a      	strb	r2, [r1, #0]
 800b7c2:	781a      	ldrb	r2, [r3, #0]
 800b7c4:	3201      	adds	r2, #1
 800b7c6:	701a      	strb	r2, [r3, #0]
 800b7c8:	e79e      	b.n	800b708 <_dtoa_r+0x638>
 800b7ca:	46d8      	mov	r8, fp
 800b7cc:	e7eb      	b.n	800b7a6 <_dtoa_r+0x6d6>
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	4b6d      	ldr	r3, [pc, #436]	; (800b988 <_dtoa_r+0x8b8>)
 800b7d2:	f7f4 fef1 	bl	80005b8 <__aeabi_dmul>
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	2300      	movs	r3, #0
 800b7da:	4680      	mov	r8, r0
 800b7dc:	4689      	mov	r9, r1
 800b7de:	f7f5 f953 	bl	8000a88 <__aeabi_dcmpeq>
 800b7e2:	2800      	cmp	r0, #0
 800b7e4:	d09b      	beq.n	800b71e <_dtoa_r+0x64e>
 800b7e6:	e7cd      	b.n	800b784 <_dtoa_r+0x6b4>
 800b7e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b7ea:	2a00      	cmp	r2, #0
 800b7ec:	f000 80c4 	beq.w	800b978 <_dtoa_r+0x8a8>
 800b7f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b7f2:	2a01      	cmp	r2, #1
 800b7f4:	f300 80a8 	bgt.w	800b948 <_dtoa_r+0x878>
 800b7f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b7fa:	2a00      	cmp	r2, #0
 800b7fc:	f000 80a0 	beq.w	800b940 <_dtoa_r+0x870>
 800b800:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b804:	464f      	mov	r7, r9
 800b806:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b808:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b80a:	2101      	movs	r1, #1
 800b80c:	441a      	add	r2, r3
 800b80e:	4628      	mov	r0, r5
 800b810:	4499      	add	r9, r3
 800b812:	9209      	str	r2, [sp, #36]	; 0x24
 800b814:	f000 ff34 	bl	800c680 <__i2b>
 800b818:	4606      	mov	r6, r0
 800b81a:	b15f      	cbz	r7, 800b834 <_dtoa_r+0x764>
 800b81c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b81e:	2b00      	cmp	r3, #0
 800b820:	dd08      	ble.n	800b834 <_dtoa_r+0x764>
 800b822:	42bb      	cmp	r3, r7
 800b824:	bfa8      	it	ge
 800b826:	463b      	movge	r3, r7
 800b828:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b82a:	eba9 0903 	sub.w	r9, r9, r3
 800b82e:	1aff      	subs	r7, r7, r3
 800b830:	1ad3      	subs	r3, r2, r3
 800b832:	9309      	str	r3, [sp, #36]	; 0x24
 800b834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b836:	b1f3      	cbz	r3, 800b876 <_dtoa_r+0x7a6>
 800b838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	f000 80a0 	beq.w	800b980 <_dtoa_r+0x8b0>
 800b840:	2c00      	cmp	r4, #0
 800b842:	dd10      	ble.n	800b866 <_dtoa_r+0x796>
 800b844:	4631      	mov	r1, r6
 800b846:	4622      	mov	r2, r4
 800b848:	4628      	mov	r0, r5
 800b84a:	f000 ffd7 	bl	800c7fc <__pow5mult>
 800b84e:	4652      	mov	r2, sl
 800b850:	4601      	mov	r1, r0
 800b852:	4606      	mov	r6, r0
 800b854:	4628      	mov	r0, r5
 800b856:	f000 ff29 	bl	800c6ac <__multiply>
 800b85a:	4680      	mov	r8, r0
 800b85c:	4651      	mov	r1, sl
 800b85e:	4628      	mov	r0, r5
 800b860:	f000 fe0e 	bl	800c480 <_Bfree>
 800b864:	46c2      	mov	sl, r8
 800b866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b868:	1b1a      	subs	r2, r3, r4
 800b86a:	d004      	beq.n	800b876 <_dtoa_r+0x7a6>
 800b86c:	4651      	mov	r1, sl
 800b86e:	4628      	mov	r0, r5
 800b870:	f000 ffc4 	bl	800c7fc <__pow5mult>
 800b874:	4682      	mov	sl, r0
 800b876:	2101      	movs	r1, #1
 800b878:	4628      	mov	r0, r5
 800b87a:	f000 ff01 	bl	800c680 <__i2b>
 800b87e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b880:	4604      	mov	r4, r0
 800b882:	2b00      	cmp	r3, #0
 800b884:	f340 8082 	ble.w	800b98c <_dtoa_r+0x8bc>
 800b888:	461a      	mov	r2, r3
 800b88a:	4601      	mov	r1, r0
 800b88c:	4628      	mov	r0, r5
 800b88e:	f000 ffb5 	bl	800c7fc <__pow5mult>
 800b892:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b894:	4604      	mov	r4, r0
 800b896:	2b01      	cmp	r3, #1
 800b898:	dd7b      	ble.n	800b992 <_dtoa_r+0x8c2>
 800b89a:	f04f 0800 	mov.w	r8, #0
 800b89e:	6923      	ldr	r3, [r4, #16]
 800b8a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b8a4:	6918      	ldr	r0, [r3, #16]
 800b8a6:	f000 fe9d 	bl	800c5e4 <__hi0bits>
 800b8aa:	f1c0 0020 	rsb	r0, r0, #32
 800b8ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8b0:	4418      	add	r0, r3
 800b8b2:	f010 001f 	ands.w	r0, r0, #31
 800b8b6:	f000 8092 	beq.w	800b9de <_dtoa_r+0x90e>
 800b8ba:	f1c0 0320 	rsb	r3, r0, #32
 800b8be:	2b04      	cmp	r3, #4
 800b8c0:	f340 8085 	ble.w	800b9ce <_dtoa_r+0x8fe>
 800b8c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8c6:	f1c0 001c 	rsb	r0, r0, #28
 800b8ca:	4403      	add	r3, r0
 800b8cc:	4481      	add	r9, r0
 800b8ce:	4407      	add	r7, r0
 800b8d0:	9309      	str	r3, [sp, #36]	; 0x24
 800b8d2:	f1b9 0f00 	cmp.w	r9, #0
 800b8d6:	dd05      	ble.n	800b8e4 <_dtoa_r+0x814>
 800b8d8:	4651      	mov	r1, sl
 800b8da:	464a      	mov	r2, r9
 800b8dc:	4628      	mov	r0, r5
 800b8de:	f000 ffe7 	bl	800c8b0 <__lshift>
 800b8e2:	4682      	mov	sl, r0
 800b8e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	dd05      	ble.n	800b8f6 <_dtoa_r+0x826>
 800b8ea:	4621      	mov	r1, r4
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	4628      	mov	r0, r5
 800b8f0:	f000 ffde 	bl	800c8b0 <__lshift>
 800b8f4:	4604      	mov	r4, r0
 800b8f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d072      	beq.n	800b9e2 <_dtoa_r+0x912>
 800b8fc:	4621      	mov	r1, r4
 800b8fe:	4650      	mov	r0, sl
 800b900:	f001 f842 	bl	800c988 <__mcmp>
 800b904:	2800      	cmp	r0, #0
 800b906:	da6c      	bge.n	800b9e2 <_dtoa_r+0x912>
 800b908:	2300      	movs	r3, #0
 800b90a:	4651      	mov	r1, sl
 800b90c:	220a      	movs	r2, #10
 800b90e:	4628      	mov	r0, r5
 800b910:	f000 fdd8 	bl	800c4c4 <__multadd>
 800b914:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b916:	4682      	mov	sl, r0
 800b918:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f000 81ac 	beq.w	800bc7a <_dtoa_r+0xbaa>
 800b922:	2300      	movs	r3, #0
 800b924:	4631      	mov	r1, r6
 800b926:	220a      	movs	r2, #10
 800b928:	4628      	mov	r0, r5
 800b92a:	f000 fdcb 	bl	800c4c4 <__multadd>
 800b92e:	9b06      	ldr	r3, [sp, #24]
 800b930:	4606      	mov	r6, r0
 800b932:	2b00      	cmp	r3, #0
 800b934:	f300 8093 	bgt.w	800ba5e <_dtoa_r+0x98e>
 800b938:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b93a:	2b02      	cmp	r3, #2
 800b93c:	dc59      	bgt.n	800b9f2 <_dtoa_r+0x922>
 800b93e:	e08e      	b.n	800ba5e <_dtoa_r+0x98e>
 800b940:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b942:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b946:	e75d      	b.n	800b804 <_dtoa_r+0x734>
 800b948:	9b08      	ldr	r3, [sp, #32]
 800b94a:	1e5c      	subs	r4, r3, #1
 800b94c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b94e:	42a3      	cmp	r3, r4
 800b950:	bfbf      	itttt	lt
 800b952:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b954:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800b956:	1ae3      	sublt	r3, r4, r3
 800b958:	18d2      	addlt	r2, r2, r3
 800b95a:	bfa8      	it	ge
 800b95c:	1b1c      	subge	r4, r3, r4
 800b95e:	9b08      	ldr	r3, [sp, #32]
 800b960:	bfbe      	ittt	lt
 800b962:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b964:	920e      	strlt	r2, [sp, #56]	; 0x38
 800b966:	2400      	movlt	r4, #0
 800b968:	2b00      	cmp	r3, #0
 800b96a:	bfb5      	itete	lt
 800b96c:	eba9 0703 	sublt.w	r7, r9, r3
 800b970:	464f      	movge	r7, r9
 800b972:	2300      	movlt	r3, #0
 800b974:	9b08      	ldrge	r3, [sp, #32]
 800b976:	e747      	b.n	800b808 <_dtoa_r+0x738>
 800b978:	464f      	mov	r7, r9
 800b97a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b97c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b97e:	e74c      	b.n	800b81a <_dtoa_r+0x74a>
 800b980:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b982:	e773      	b.n	800b86c <_dtoa_r+0x79c>
 800b984:	3fe00000 	.word	0x3fe00000
 800b988:	40240000 	.word	0x40240000
 800b98c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b98e:	2b01      	cmp	r3, #1
 800b990:	dc18      	bgt.n	800b9c4 <_dtoa_r+0x8f4>
 800b992:	9b04      	ldr	r3, [sp, #16]
 800b994:	b9b3      	cbnz	r3, 800b9c4 <_dtoa_r+0x8f4>
 800b996:	9b05      	ldr	r3, [sp, #20]
 800b998:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b99c:	b993      	cbnz	r3, 800b9c4 <_dtoa_r+0x8f4>
 800b99e:	9b05      	ldr	r3, [sp, #20]
 800b9a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b9a4:	0d1b      	lsrs	r3, r3, #20
 800b9a6:	051b      	lsls	r3, r3, #20
 800b9a8:	b17b      	cbz	r3, 800b9ca <_dtoa_r+0x8fa>
 800b9aa:	f04f 0801 	mov.w	r8, #1
 800b9ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9b0:	f109 0901 	add.w	r9, r9, #1
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b9b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	f47f af6f 	bne.w	800b89e <_dtoa_r+0x7ce>
 800b9c0:	2001      	movs	r0, #1
 800b9c2:	e774      	b.n	800b8ae <_dtoa_r+0x7de>
 800b9c4:	f04f 0800 	mov.w	r8, #0
 800b9c8:	e7f6      	b.n	800b9b8 <_dtoa_r+0x8e8>
 800b9ca:	4698      	mov	r8, r3
 800b9cc:	e7f4      	b.n	800b9b8 <_dtoa_r+0x8e8>
 800b9ce:	d080      	beq.n	800b8d2 <_dtoa_r+0x802>
 800b9d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9d2:	331c      	adds	r3, #28
 800b9d4:	441a      	add	r2, r3
 800b9d6:	4499      	add	r9, r3
 800b9d8:	441f      	add	r7, r3
 800b9da:	9209      	str	r2, [sp, #36]	; 0x24
 800b9dc:	e779      	b.n	800b8d2 <_dtoa_r+0x802>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	e7f6      	b.n	800b9d0 <_dtoa_r+0x900>
 800b9e2:	9b08      	ldr	r3, [sp, #32]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	dc34      	bgt.n	800ba52 <_dtoa_r+0x982>
 800b9e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b9ea:	2b02      	cmp	r3, #2
 800b9ec:	dd31      	ble.n	800ba52 <_dtoa_r+0x982>
 800b9ee:	9b08      	ldr	r3, [sp, #32]
 800b9f0:	9306      	str	r3, [sp, #24]
 800b9f2:	9b06      	ldr	r3, [sp, #24]
 800b9f4:	b963      	cbnz	r3, 800ba10 <_dtoa_r+0x940>
 800b9f6:	4621      	mov	r1, r4
 800b9f8:	2205      	movs	r2, #5
 800b9fa:	4628      	mov	r0, r5
 800b9fc:	f000 fd62 	bl	800c4c4 <__multadd>
 800ba00:	4601      	mov	r1, r0
 800ba02:	4604      	mov	r4, r0
 800ba04:	4650      	mov	r0, sl
 800ba06:	f000 ffbf 	bl	800c988 <__mcmp>
 800ba0a:	2800      	cmp	r0, #0
 800ba0c:	f73f adbf 	bgt.w	800b58e <_dtoa_r+0x4be>
 800ba10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ba12:	9f03      	ldr	r7, [sp, #12]
 800ba14:	ea6f 0b03 	mvn.w	fp, r3
 800ba18:	f04f 0800 	mov.w	r8, #0
 800ba1c:	4621      	mov	r1, r4
 800ba1e:	4628      	mov	r0, r5
 800ba20:	f000 fd2e 	bl	800c480 <_Bfree>
 800ba24:	2e00      	cmp	r6, #0
 800ba26:	f43f aead 	beq.w	800b784 <_dtoa_r+0x6b4>
 800ba2a:	f1b8 0f00 	cmp.w	r8, #0
 800ba2e:	d005      	beq.n	800ba3c <_dtoa_r+0x96c>
 800ba30:	45b0      	cmp	r8, r6
 800ba32:	d003      	beq.n	800ba3c <_dtoa_r+0x96c>
 800ba34:	4641      	mov	r1, r8
 800ba36:	4628      	mov	r0, r5
 800ba38:	f000 fd22 	bl	800c480 <_Bfree>
 800ba3c:	4631      	mov	r1, r6
 800ba3e:	4628      	mov	r0, r5
 800ba40:	f000 fd1e 	bl	800c480 <_Bfree>
 800ba44:	e69e      	b.n	800b784 <_dtoa_r+0x6b4>
 800ba46:	2400      	movs	r4, #0
 800ba48:	4626      	mov	r6, r4
 800ba4a:	e7e1      	b.n	800ba10 <_dtoa_r+0x940>
 800ba4c:	46c3      	mov	fp, r8
 800ba4e:	4626      	mov	r6, r4
 800ba50:	e59d      	b.n	800b58e <_dtoa_r+0x4be>
 800ba52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	f000 80c8 	beq.w	800bbea <_dtoa_r+0xb1a>
 800ba5a:	9b08      	ldr	r3, [sp, #32]
 800ba5c:	9306      	str	r3, [sp, #24]
 800ba5e:	2f00      	cmp	r7, #0
 800ba60:	dd05      	ble.n	800ba6e <_dtoa_r+0x99e>
 800ba62:	4631      	mov	r1, r6
 800ba64:	463a      	mov	r2, r7
 800ba66:	4628      	mov	r0, r5
 800ba68:	f000 ff22 	bl	800c8b0 <__lshift>
 800ba6c:	4606      	mov	r6, r0
 800ba6e:	f1b8 0f00 	cmp.w	r8, #0
 800ba72:	d05b      	beq.n	800bb2c <_dtoa_r+0xa5c>
 800ba74:	4628      	mov	r0, r5
 800ba76:	6871      	ldr	r1, [r6, #4]
 800ba78:	f000 fcc2 	bl	800c400 <_Balloc>
 800ba7c:	4607      	mov	r7, r0
 800ba7e:	b928      	cbnz	r0, 800ba8c <_dtoa_r+0x9bc>
 800ba80:	4602      	mov	r2, r0
 800ba82:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ba86:	4b81      	ldr	r3, [pc, #516]	; (800bc8c <_dtoa_r+0xbbc>)
 800ba88:	f7ff bb36 	b.w	800b0f8 <_dtoa_r+0x28>
 800ba8c:	6932      	ldr	r2, [r6, #16]
 800ba8e:	f106 010c 	add.w	r1, r6, #12
 800ba92:	3202      	adds	r2, #2
 800ba94:	0092      	lsls	r2, r2, #2
 800ba96:	300c      	adds	r0, #12
 800ba98:	f7ff fa57 	bl	800af4a <memcpy>
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	4639      	mov	r1, r7
 800baa0:	4628      	mov	r0, r5
 800baa2:	f000 ff05 	bl	800c8b0 <__lshift>
 800baa6:	46b0      	mov	r8, r6
 800baa8:	4606      	mov	r6, r0
 800baaa:	9b03      	ldr	r3, [sp, #12]
 800baac:	9a03      	ldr	r2, [sp, #12]
 800baae:	3301      	adds	r3, #1
 800bab0:	9308      	str	r3, [sp, #32]
 800bab2:	9b06      	ldr	r3, [sp, #24]
 800bab4:	4413      	add	r3, r2
 800bab6:	930b      	str	r3, [sp, #44]	; 0x2c
 800bab8:	9b04      	ldr	r3, [sp, #16]
 800baba:	f003 0301 	and.w	r3, r3, #1
 800babe:	930a      	str	r3, [sp, #40]	; 0x28
 800bac0:	9b08      	ldr	r3, [sp, #32]
 800bac2:	4621      	mov	r1, r4
 800bac4:	3b01      	subs	r3, #1
 800bac6:	4650      	mov	r0, sl
 800bac8:	9304      	str	r3, [sp, #16]
 800baca:	f7ff fa75 	bl	800afb8 <quorem>
 800bace:	4641      	mov	r1, r8
 800bad0:	9006      	str	r0, [sp, #24]
 800bad2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bad6:	4650      	mov	r0, sl
 800bad8:	f000 ff56 	bl	800c988 <__mcmp>
 800badc:	4632      	mov	r2, r6
 800bade:	9009      	str	r0, [sp, #36]	; 0x24
 800bae0:	4621      	mov	r1, r4
 800bae2:	4628      	mov	r0, r5
 800bae4:	f000 ff6c 	bl	800c9c0 <__mdiff>
 800bae8:	68c2      	ldr	r2, [r0, #12]
 800baea:	4607      	mov	r7, r0
 800baec:	bb02      	cbnz	r2, 800bb30 <_dtoa_r+0xa60>
 800baee:	4601      	mov	r1, r0
 800baf0:	4650      	mov	r0, sl
 800baf2:	f000 ff49 	bl	800c988 <__mcmp>
 800baf6:	4602      	mov	r2, r0
 800baf8:	4639      	mov	r1, r7
 800bafa:	4628      	mov	r0, r5
 800bafc:	920c      	str	r2, [sp, #48]	; 0x30
 800bafe:	f000 fcbf 	bl	800c480 <_Bfree>
 800bb02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bb04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb06:	9f08      	ldr	r7, [sp, #32]
 800bb08:	ea43 0102 	orr.w	r1, r3, r2
 800bb0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb0e:	4319      	orrs	r1, r3
 800bb10:	d110      	bne.n	800bb34 <_dtoa_r+0xa64>
 800bb12:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bb16:	d029      	beq.n	800bb6c <_dtoa_r+0xa9c>
 800bb18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	dd02      	ble.n	800bb24 <_dtoa_r+0xa54>
 800bb1e:	9b06      	ldr	r3, [sp, #24]
 800bb20:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800bb24:	9b04      	ldr	r3, [sp, #16]
 800bb26:	f883 9000 	strb.w	r9, [r3]
 800bb2a:	e777      	b.n	800ba1c <_dtoa_r+0x94c>
 800bb2c:	4630      	mov	r0, r6
 800bb2e:	e7ba      	b.n	800baa6 <_dtoa_r+0x9d6>
 800bb30:	2201      	movs	r2, #1
 800bb32:	e7e1      	b.n	800baf8 <_dtoa_r+0xa28>
 800bb34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	db04      	blt.n	800bb44 <_dtoa_r+0xa74>
 800bb3a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800bb3c:	430b      	orrs	r3, r1
 800bb3e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bb40:	430b      	orrs	r3, r1
 800bb42:	d120      	bne.n	800bb86 <_dtoa_r+0xab6>
 800bb44:	2a00      	cmp	r2, #0
 800bb46:	dded      	ble.n	800bb24 <_dtoa_r+0xa54>
 800bb48:	4651      	mov	r1, sl
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	4628      	mov	r0, r5
 800bb4e:	f000 feaf 	bl	800c8b0 <__lshift>
 800bb52:	4621      	mov	r1, r4
 800bb54:	4682      	mov	sl, r0
 800bb56:	f000 ff17 	bl	800c988 <__mcmp>
 800bb5a:	2800      	cmp	r0, #0
 800bb5c:	dc03      	bgt.n	800bb66 <_dtoa_r+0xa96>
 800bb5e:	d1e1      	bne.n	800bb24 <_dtoa_r+0xa54>
 800bb60:	f019 0f01 	tst.w	r9, #1
 800bb64:	d0de      	beq.n	800bb24 <_dtoa_r+0xa54>
 800bb66:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bb6a:	d1d8      	bne.n	800bb1e <_dtoa_r+0xa4e>
 800bb6c:	2339      	movs	r3, #57	; 0x39
 800bb6e:	9a04      	ldr	r2, [sp, #16]
 800bb70:	7013      	strb	r3, [r2, #0]
 800bb72:	463b      	mov	r3, r7
 800bb74:	461f      	mov	r7, r3
 800bb76:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800bb7a:	3b01      	subs	r3, #1
 800bb7c:	2a39      	cmp	r2, #57	; 0x39
 800bb7e:	d06b      	beq.n	800bc58 <_dtoa_r+0xb88>
 800bb80:	3201      	adds	r2, #1
 800bb82:	701a      	strb	r2, [r3, #0]
 800bb84:	e74a      	b.n	800ba1c <_dtoa_r+0x94c>
 800bb86:	2a00      	cmp	r2, #0
 800bb88:	dd07      	ble.n	800bb9a <_dtoa_r+0xaca>
 800bb8a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bb8e:	d0ed      	beq.n	800bb6c <_dtoa_r+0xa9c>
 800bb90:	9a04      	ldr	r2, [sp, #16]
 800bb92:	f109 0301 	add.w	r3, r9, #1
 800bb96:	7013      	strb	r3, [r2, #0]
 800bb98:	e740      	b.n	800ba1c <_dtoa_r+0x94c>
 800bb9a:	9b08      	ldr	r3, [sp, #32]
 800bb9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bb9e:	f803 9c01 	strb.w	r9, [r3, #-1]
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d042      	beq.n	800bc2c <_dtoa_r+0xb5c>
 800bba6:	4651      	mov	r1, sl
 800bba8:	2300      	movs	r3, #0
 800bbaa:	220a      	movs	r2, #10
 800bbac:	4628      	mov	r0, r5
 800bbae:	f000 fc89 	bl	800c4c4 <__multadd>
 800bbb2:	45b0      	cmp	r8, r6
 800bbb4:	4682      	mov	sl, r0
 800bbb6:	f04f 0300 	mov.w	r3, #0
 800bbba:	f04f 020a 	mov.w	r2, #10
 800bbbe:	4641      	mov	r1, r8
 800bbc0:	4628      	mov	r0, r5
 800bbc2:	d107      	bne.n	800bbd4 <_dtoa_r+0xb04>
 800bbc4:	f000 fc7e 	bl	800c4c4 <__multadd>
 800bbc8:	4680      	mov	r8, r0
 800bbca:	4606      	mov	r6, r0
 800bbcc:	9b08      	ldr	r3, [sp, #32]
 800bbce:	3301      	adds	r3, #1
 800bbd0:	9308      	str	r3, [sp, #32]
 800bbd2:	e775      	b.n	800bac0 <_dtoa_r+0x9f0>
 800bbd4:	f000 fc76 	bl	800c4c4 <__multadd>
 800bbd8:	4631      	mov	r1, r6
 800bbda:	4680      	mov	r8, r0
 800bbdc:	2300      	movs	r3, #0
 800bbde:	220a      	movs	r2, #10
 800bbe0:	4628      	mov	r0, r5
 800bbe2:	f000 fc6f 	bl	800c4c4 <__multadd>
 800bbe6:	4606      	mov	r6, r0
 800bbe8:	e7f0      	b.n	800bbcc <_dtoa_r+0xafc>
 800bbea:	9b08      	ldr	r3, [sp, #32]
 800bbec:	9306      	str	r3, [sp, #24]
 800bbee:	9f03      	ldr	r7, [sp, #12]
 800bbf0:	4621      	mov	r1, r4
 800bbf2:	4650      	mov	r0, sl
 800bbf4:	f7ff f9e0 	bl	800afb8 <quorem>
 800bbf8:	9b03      	ldr	r3, [sp, #12]
 800bbfa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bbfe:	f807 9b01 	strb.w	r9, [r7], #1
 800bc02:	1afa      	subs	r2, r7, r3
 800bc04:	9b06      	ldr	r3, [sp, #24]
 800bc06:	4293      	cmp	r3, r2
 800bc08:	dd07      	ble.n	800bc1a <_dtoa_r+0xb4a>
 800bc0a:	4651      	mov	r1, sl
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	220a      	movs	r2, #10
 800bc10:	4628      	mov	r0, r5
 800bc12:	f000 fc57 	bl	800c4c4 <__multadd>
 800bc16:	4682      	mov	sl, r0
 800bc18:	e7ea      	b.n	800bbf0 <_dtoa_r+0xb20>
 800bc1a:	9b06      	ldr	r3, [sp, #24]
 800bc1c:	f04f 0800 	mov.w	r8, #0
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	bfcc      	ite	gt
 800bc24:	461f      	movgt	r7, r3
 800bc26:	2701      	movle	r7, #1
 800bc28:	9b03      	ldr	r3, [sp, #12]
 800bc2a:	441f      	add	r7, r3
 800bc2c:	4651      	mov	r1, sl
 800bc2e:	2201      	movs	r2, #1
 800bc30:	4628      	mov	r0, r5
 800bc32:	f000 fe3d 	bl	800c8b0 <__lshift>
 800bc36:	4621      	mov	r1, r4
 800bc38:	4682      	mov	sl, r0
 800bc3a:	f000 fea5 	bl	800c988 <__mcmp>
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	dc97      	bgt.n	800bb72 <_dtoa_r+0xaa2>
 800bc42:	d102      	bne.n	800bc4a <_dtoa_r+0xb7a>
 800bc44:	f019 0f01 	tst.w	r9, #1
 800bc48:	d193      	bne.n	800bb72 <_dtoa_r+0xaa2>
 800bc4a:	463b      	mov	r3, r7
 800bc4c:	461f      	mov	r7, r3
 800bc4e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc52:	2a30      	cmp	r2, #48	; 0x30
 800bc54:	d0fa      	beq.n	800bc4c <_dtoa_r+0xb7c>
 800bc56:	e6e1      	b.n	800ba1c <_dtoa_r+0x94c>
 800bc58:	9a03      	ldr	r2, [sp, #12]
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d18a      	bne.n	800bb74 <_dtoa_r+0xaa4>
 800bc5e:	2331      	movs	r3, #49	; 0x31
 800bc60:	f10b 0b01 	add.w	fp, fp, #1
 800bc64:	e797      	b.n	800bb96 <_dtoa_r+0xac6>
 800bc66:	4b0a      	ldr	r3, [pc, #40]	; (800bc90 <_dtoa_r+0xbc0>)
 800bc68:	f7ff ba9f 	b.w	800b1aa <_dtoa_r+0xda>
 800bc6c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	f47f aa77 	bne.w	800b162 <_dtoa_r+0x92>
 800bc74:	4b07      	ldr	r3, [pc, #28]	; (800bc94 <_dtoa_r+0xbc4>)
 800bc76:	f7ff ba98 	b.w	800b1aa <_dtoa_r+0xda>
 800bc7a:	9b06      	ldr	r3, [sp, #24]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	dcb6      	bgt.n	800bbee <_dtoa_r+0xb1e>
 800bc80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bc82:	2b02      	cmp	r3, #2
 800bc84:	f73f aeb5 	bgt.w	800b9f2 <_dtoa_r+0x922>
 800bc88:	e7b1      	b.n	800bbee <_dtoa_r+0xb1e>
 800bc8a:	bf00      	nop
 800bc8c:	0800dd67 	.word	0x0800dd67
 800bc90:	0800dc29 	.word	0x0800dc29
 800bc94:	0800dd02 	.word	0x0800dd02

0800bc98 <_free_r>:
 800bc98:	b538      	push	{r3, r4, r5, lr}
 800bc9a:	4605      	mov	r5, r0
 800bc9c:	2900      	cmp	r1, #0
 800bc9e:	d040      	beq.n	800bd22 <_free_r+0x8a>
 800bca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bca4:	1f0c      	subs	r4, r1, #4
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	bfb8      	it	lt
 800bcaa:	18e4      	addlt	r4, r4, r3
 800bcac:	f7fd fb36 	bl	800931c <__malloc_lock>
 800bcb0:	4a1c      	ldr	r2, [pc, #112]	; (800bd24 <_free_r+0x8c>)
 800bcb2:	6813      	ldr	r3, [r2, #0]
 800bcb4:	b933      	cbnz	r3, 800bcc4 <_free_r+0x2c>
 800bcb6:	6063      	str	r3, [r4, #4]
 800bcb8:	6014      	str	r4, [r2, #0]
 800bcba:	4628      	mov	r0, r5
 800bcbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcc0:	f7fd bb32 	b.w	8009328 <__malloc_unlock>
 800bcc4:	42a3      	cmp	r3, r4
 800bcc6:	d908      	bls.n	800bcda <_free_r+0x42>
 800bcc8:	6820      	ldr	r0, [r4, #0]
 800bcca:	1821      	adds	r1, r4, r0
 800bccc:	428b      	cmp	r3, r1
 800bcce:	bf01      	itttt	eq
 800bcd0:	6819      	ldreq	r1, [r3, #0]
 800bcd2:	685b      	ldreq	r3, [r3, #4]
 800bcd4:	1809      	addeq	r1, r1, r0
 800bcd6:	6021      	streq	r1, [r4, #0]
 800bcd8:	e7ed      	b.n	800bcb6 <_free_r+0x1e>
 800bcda:	461a      	mov	r2, r3
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	b10b      	cbz	r3, 800bce4 <_free_r+0x4c>
 800bce0:	42a3      	cmp	r3, r4
 800bce2:	d9fa      	bls.n	800bcda <_free_r+0x42>
 800bce4:	6811      	ldr	r1, [r2, #0]
 800bce6:	1850      	adds	r0, r2, r1
 800bce8:	42a0      	cmp	r0, r4
 800bcea:	d10b      	bne.n	800bd04 <_free_r+0x6c>
 800bcec:	6820      	ldr	r0, [r4, #0]
 800bcee:	4401      	add	r1, r0
 800bcf0:	1850      	adds	r0, r2, r1
 800bcf2:	4283      	cmp	r3, r0
 800bcf4:	6011      	str	r1, [r2, #0]
 800bcf6:	d1e0      	bne.n	800bcba <_free_r+0x22>
 800bcf8:	6818      	ldr	r0, [r3, #0]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	4408      	add	r0, r1
 800bcfe:	6010      	str	r0, [r2, #0]
 800bd00:	6053      	str	r3, [r2, #4]
 800bd02:	e7da      	b.n	800bcba <_free_r+0x22>
 800bd04:	d902      	bls.n	800bd0c <_free_r+0x74>
 800bd06:	230c      	movs	r3, #12
 800bd08:	602b      	str	r3, [r5, #0]
 800bd0a:	e7d6      	b.n	800bcba <_free_r+0x22>
 800bd0c:	6820      	ldr	r0, [r4, #0]
 800bd0e:	1821      	adds	r1, r4, r0
 800bd10:	428b      	cmp	r3, r1
 800bd12:	bf01      	itttt	eq
 800bd14:	6819      	ldreq	r1, [r3, #0]
 800bd16:	685b      	ldreq	r3, [r3, #4]
 800bd18:	1809      	addeq	r1, r1, r0
 800bd1a:	6021      	streq	r1, [r4, #0]
 800bd1c:	6063      	str	r3, [r4, #4]
 800bd1e:	6054      	str	r4, [r2, #4]
 800bd20:	e7cb      	b.n	800bcba <_free_r+0x22>
 800bd22:	bd38      	pop	{r3, r4, r5, pc}
 800bd24:	200032e0 	.word	0x200032e0

0800bd28 <rshift>:
 800bd28:	6903      	ldr	r3, [r0, #16]
 800bd2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd2e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bd32:	f100 0414 	add.w	r4, r0, #20
 800bd36:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bd3a:	dd46      	ble.n	800bdca <rshift+0xa2>
 800bd3c:	f011 011f 	ands.w	r1, r1, #31
 800bd40:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bd44:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bd48:	d10c      	bne.n	800bd64 <rshift+0x3c>
 800bd4a:	4629      	mov	r1, r5
 800bd4c:	f100 0710 	add.w	r7, r0, #16
 800bd50:	42b1      	cmp	r1, r6
 800bd52:	d335      	bcc.n	800bdc0 <rshift+0x98>
 800bd54:	1a9b      	subs	r3, r3, r2
 800bd56:	009b      	lsls	r3, r3, #2
 800bd58:	1eea      	subs	r2, r5, #3
 800bd5a:	4296      	cmp	r6, r2
 800bd5c:	bf38      	it	cc
 800bd5e:	2300      	movcc	r3, #0
 800bd60:	4423      	add	r3, r4
 800bd62:	e015      	b.n	800bd90 <rshift+0x68>
 800bd64:	46a1      	mov	r9, r4
 800bd66:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bd6a:	f1c1 0820 	rsb	r8, r1, #32
 800bd6e:	40cf      	lsrs	r7, r1
 800bd70:	f105 0e04 	add.w	lr, r5, #4
 800bd74:	4576      	cmp	r6, lr
 800bd76:	46f4      	mov	ip, lr
 800bd78:	d816      	bhi.n	800bda8 <rshift+0x80>
 800bd7a:	1a9a      	subs	r2, r3, r2
 800bd7c:	0092      	lsls	r2, r2, #2
 800bd7e:	3a04      	subs	r2, #4
 800bd80:	3501      	adds	r5, #1
 800bd82:	42ae      	cmp	r6, r5
 800bd84:	bf38      	it	cc
 800bd86:	2200      	movcc	r2, #0
 800bd88:	18a3      	adds	r3, r4, r2
 800bd8a:	50a7      	str	r7, [r4, r2]
 800bd8c:	b107      	cbz	r7, 800bd90 <rshift+0x68>
 800bd8e:	3304      	adds	r3, #4
 800bd90:	42a3      	cmp	r3, r4
 800bd92:	eba3 0204 	sub.w	r2, r3, r4
 800bd96:	bf08      	it	eq
 800bd98:	2300      	moveq	r3, #0
 800bd9a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bd9e:	6102      	str	r2, [r0, #16]
 800bda0:	bf08      	it	eq
 800bda2:	6143      	streq	r3, [r0, #20]
 800bda4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bda8:	f8dc c000 	ldr.w	ip, [ip]
 800bdac:	fa0c fc08 	lsl.w	ip, ip, r8
 800bdb0:	ea4c 0707 	orr.w	r7, ip, r7
 800bdb4:	f849 7b04 	str.w	r7, [r9], #4
 800bdb8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bdbc:	40cf      	lsrs	r7, r1
 800bdbe:	e7d9      	b.n	800bd74 <rshift+0x4c>
 800bdc0:	f851 cb04 	ldr.w	ip, [r1], #4
 800bdc4:	f847 cf04 	str.w	ip, [r7, #4]!
 800bdc8:	e7c2      	b.n	800bd50 <rshift+0x28>
 800bdca:	4623      	mov	r3, r4
 800bdcc:	e7e0      	b.n	800bd90 <rshift+0x68>

0800bdce <__hexdig_fun>:
 800bdce:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bdd2:	2b09      	cmp	r3, #9
 800bdd4:	d802      	bhi.n	800bddc <__hexdig_fun+0xe>
 800bdd6:	3820      	subs	r0, #32
 800bdd8:	b2c0      	uxtb	r0, r0
 800bdda:	4770      	bx	lr
 800bddc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bde0:	2b05      	cmp	r3, #5
 800bde2:	d801      	bhi.n	800bde8 <__hexdig_fun+0x1a>
 800bde4:	3847      	subs	r0, #71	; 0x47
 800bde6:	e7f7      	b.n	800bdd8 <__hexdig_fun+0xa>
 800bde8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bdec:	2b05      	cmp	r3, #5
 800bdee:	d801      	bhi.n	800bdf4 <__hexdig_fun+0x26>
 800bdf0:	3827      	subs	r0, #39	; 0x27
 800bdf2:	e7f1      	b.n	800bdd8 <__hexdig_fun+0xa>
 800bdf4:	2000      	movs	r0, #0
 800bdf6:	4770      	bx	lr

0800bdf8 <__gethex>:
 800bdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdfc:	4681      	mov	r9, r0
 800bdfe:	468a      	mov	sl, r1
 800be00:	4617      	mov	r7, r2
 800be02:	680a      	ldr	r2, [r1, #0]
 800be04:	b085      	sub	sp, #20
 800be06:	f102 0b02 	add.w	fp, r2, #2
 800be0a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800be0e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800be12:	9302      	str	r3, [sp, #8]
 800be14:	32fe      	adds	r2, #254	; 0xfe
 800be16:	eb02 030b 	add.w	r3, r2, fp
 800be1a:	46d8      	mov	r8, fp
 800be1c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800be20:	9301      	str	r3, [sp, #4]
 800be22:	2830      	cmp	r0, #48	; 0x30
 800be24:	d0f7      	beq.n	800be16 <__gethex+0x1e>
 800be26:	f7ff ffd2 	bl	800bdce <__hexdig_fun>
 800be2a:	4604      	mov	r4, r0
 800be2c:	2800      	cmp	r0, #0
 800be2e:	d138      	bne.n	800bea2 <__gethex+0xaa>
 800be30:	2201      	movs	r2, #1
 800be32:	4640      	mov	r0, r8
 800be34:	49a7      	ldr	r1, [pc, #668]	; (800c0d4 <__gethex+0x2dc>)
 800be36:	f7fe fefe 	bl	800ac36 <strncmp>
 800be3a:	4606      	mov	r6, r0
 800be3c:	2800      	cmp	r0, #0
 800be3e:	d169      	bne.n	800bf14 <__gethex+0x11c>
 800be40:	f898 0001 	ldrb.w	r0, [r8, #1]
 800be44:	465d      	mov	r5, fp
 800be46:	f7ff ffc2 	bl	800bdce <__hexdig_fun>
 800be4a:	2800      	cmp	r0, #0
 800be4c:	d064      	beq.n	800bf18 <__gethex+0x120>
 800be4e:	465a      	mov	r2, fp
 800be50:	7810      	ldrb	r0, [r2, #0]
 800be52:	4690      	mov	r8, r2
 800be54:	2830      	cmp	r0, #48	; 0x30
 800be56:	f102 0201 	add.w	r2, r2, #1
 800be5a:	d0f9      	beq.n	800be50 <__gethex+0x58>
 800be5c:	f7ff ffb7 	bl	800bdce <__hexdig_fun>
 800be60:	2301      	movs	r3, #1
 800be62:	fab0 f480 	clz	r4, r0
 800be66:	465e      	mov	r6, fp
 800be68:	0964      	lsrs	r4, r4, #5
 800be6a:	9301      	str	r3, [sp, #4]
 800be6c:	4642      	mov	r2, r8
 800be6e:	4615      	mov	r5, r2
 800be70:	7828      	ldrb	r0, [r5, #0]
 800be72:	3201      	adds	r2, #1
 800be74:	f7ff ffab 	bl	800bdce <__hexdig_fun>
 800be78:	2800      	cmp	r0, #0
 800be7a:	d1f8      	bne.n	800be6e <__gethex+0x76>
 800be7c:	2201      	movs	r2, #1
 800be7e:	4628      	mov	r0, r5
 800be80:	4994      	ldr	r1, [pc, #592]	; (800c0d4 <__gethex+0x2dc>)
 800be82:	f7fe fed8 	bl	800ac36 <strncmp>
 800be86:	b978      	cbnz	r0, 800bea8 <__gethex+0xb0>
 800be88:	b946      	cbnz	r6, 800be9c <__gethex+0xa4>
 800be8a:	1c6e      	adds	r6, r5, #1
 800be8c:	4632      	mov	r2, r6
 800be8e:	4615      	mov	r5, r2
 800be90:	7828      	ldrb	r0, [r5, #0]
 800be92:	3201      	adds	r2, #1
 800be94:	f7ff ff9b 	bl	800bdce <__hexdig_fun>
 800be98:	2800      	cmp	r0, #0
 800be9a:	d1f8      	bne.n	800be8e <__gethex+0x96>
 800be9c:	1b73      	subs	r3, r6, r5
 800be9e:	009e      	lsls	r6, r3, #2
 800bea0:	e004      	b.n	800beac <__gethex+0xb4>
 800bea2:	2400      	movs	r4, #0
 800bea4:	4626      	mov	r6, r4
 800bea6:	e7e1      	b.n	800be6c <__gethex+0x74>
 800bea8:	2e00      	cmp	r6, #0
 800beaa:	d1f7      	bne.n	800be9c <__gethex+0xa4>
 800beac:	782b      	ldrb	r3, [r5, #0]
 800beae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800beb2:	2b50      	cmp	r3, #80	; 0x50
 800beb4:	d13d      	bne.n	800bf32 <__gethex+0x13a>
 800beb6:	786b      	ldrb	r3, [r5, #1]
 800beb8:	2b2b      	cmp	r3, #43	; 0x2b
 800beba:	d02f      	beq.n	800bf1c <__gethex+0x124>
 800bebc:	2b2d      	cmp	r3, #45	; 0x2d
 800bebe:	d031      	beq.n	800bf24 <__gethex+0x12c>
 800bec0:	f04f 0b00 	mov.w	fp, #0
 800bec4:	1c69      	adds	r1, r5, #1
 800bec6:	7808      	ldrb	r0, [r1, #0]
 800bec8:	f7ff ff81 	bl	800bdce <__hexdig_fun>
 800becc:	1e42      	subs	r2, r0, #1
 800bece:	b2d2      	uxtb	r2, r2
 800bed0:	2a18      	cmp	r2, #24
 800bed2:	d82e      	bhi.n	800bf32 <__gethex+0x13a>
 800bed4:	f1a0 0210 	sub.w	r2, r0, #16
 800bed8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bedc:	f7ff ff77 	bl	800bdce <__hexdig_fun>
 800bee0:	f100 3cff 	add.w	ip, r0, #4294967295
 800bee4:	fa5f fc8c 	uxtb.w	ip, ip
 800bee8:	f1bc 0f18 	cmp.w	ip, #24
 800beec:	d91d      	bls.n	800bf2a <__gethex+0x132>
 800beee:	f1bb 0f00 	cmp.w	fp, #0
 800bef2:	d000      	beq.n	800bef6 <__gethex+0xfe>
 800bef4:	4252      	negs	r2, r2
 800bef6:	4416      	add	r6, r2
 800bef8:	f8ca 1000 	str.w	r1, [sl]
 800befc:	b1dc      	cbz	r4, 800bf36 <__gethex+0x13e>
 800befe:	9b01      	ldr	r3, [sp, #4]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	bf14      	ite	ne
 800bf04:	f04f 0800 	movne.w	r8, #0
 800bf08:	f04f 0806 	moveq.w	r8, #6
 800bf0c:	4640      	mov	r0, r8
 800bf0e:	b005      	add	sp, #20
 800bf10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf14:	4645      	mov	r5, r8
 800bf16:	4626      	mov	r6, r4
 800bf18:	2401      	movs	r4, #1
 800bf1a:	e7c7      	b.n	800beac <__gethex+0xb4>
 800bf1c:	f04f 0b00 	mov.w	fp, #0
 800bf20:	1ca9      	adds	r1, r5, #2
 800bf22:	e7d0      	b.n	800bec6 <__gethex+0xce>
 800bf24:	f04f 0b01 	mov.w	fp, #1
 800bf28:	e7fa      	b.n	800bf20 <__gethex+0x128>
 800bf2a:	230a      	movs	r3, #10
 800bf2c:	fb03 0002 	mla	r0, r3, r2, r0
 800bf30:	e7d0      	b.n	800bed4 <__gethex+0xdc>
 800bf32:	4629      	mov	r1, r5
 800bf34:	e7e0      	b.n	800bef8 <__gethex+0x100>
 800bf36:	4621      	mov	r1, r4
 800bf38:	eba5 0308 	sub.w	r3, r5, r8
 800bf3c:	3b01      	subs	r3, #1
 800bf3e:	2b07      	cmp	r3, #7
 800bf40:	dc0a      	bgt.n	800bf58 <__gethex+0x160>
 800bf42:	4648      	mov	r0, r9
 800bf44:	f000 fa5c 	bl	800c400 <_Balloc>
 800bf48:	4604      	mov	r4, r0
 800bf4a:	b940      	cbnz	r0, 800bf5e <__gethex+0x166>
 800bf4c:	4602      	mov	r2, r0
 800bf4e:	21e4      	movs	r1, #228	; 0xe4
 800bf50:	4b61      	ldr	r3, [pc, #388]	; (800c0d8 <__gethex+0x2e0>)
 800bf52:	4862      	ldr	r0, [pc, #392]	; (800c0dc <__gethex+0x2e4>)
 800bf54:	f7ff f812 	bl	800af7c <__assert_func>
 800bf58:	3101      	adds	r1, #1
 800bf5a:	105b      	asrs	r3, r3, #1
 800bf5c:	e7ef      	b.n	800bf3e <__gethex+0x146>
 800bf5e:	2300      	movs	r3, #0
 800bf60:	469b      	mov	fp, r3
 800bf62:	f100 0a14 	add.w	sl, r0, #20
 800bf66:	f8cd a004 	str.w	sl, [sp, #4]
 800bf6a:	45a8      	cmp	r8, r5
 800bf6c:	d344      	bcc.n	800bff8 <__gethex+0x200>
 800bf6e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bf72:	4658      	mov	r0, fp
 800bf74:	f848 bb04 	str.w	fp, [r8], #4
 800bf78:	eba8 080a 	sub.w	r8, r8, sl
 800bf7c:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800bf80:	6122      	str	r2, [r4, #16]
 800bf82:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800bf86:	f000 fb2d 	bl	800c5e4 <__hi0bits>
 800bf8a:	683d      	ldr	r5, [r7, #0]
 800bf8c:	eba8 0800 	sub.w	r8, r8, r0
 800bf90:	45a8      	cmp	r8, r5
 800bf92:	dd59      	ble.n	800c048 <__gethex+0x250>
 800bf94:	eba8 0805 	sub.w	r8, r8, r5
 800bf98:	4641      	mov	r1, r8
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	f000 feab 	bl	800ccf6 <__any_on>
 800bfa0:	4683      	mov	fp, r0
 800bfa2:	b1b8      	cbz	r0, 800bfd4 <__gethex+0x1dc>
 800bfa4:	f04f 0b01 	mov.w	fp, #1
 800bfa8:	f108 33ff 	add.w	r3, r8, #4294967295
 800bfac:	1159      	asrs	r1, r3, #5
 800bfae:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bfb2:	f003 021f 	and.w	r2, r3, #31
 800bfb6:	fa0b f202 	lsl.w	r2, fp, r2
 800bfba:	420a      	tst	r2, r1
 800bfbc:	d00a      	beq.n	800bfd4 <__gethex+0x1dc>
 800bfbe:	455b      	cmp	r3, fp
 800bfc0:	dd06      	ble.n	800bfd0 <__gethex+0x1d8>
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	f1a8 0102 	sub.w	r1, r8, #2
 800bfc8:	f000 fe95 	bl	800ccf6 <__any_on>
 800bfcc:	2800      	cmp	r0, #0
 800bfce:	d138      	bne.n	800c042 <__gethex+0x24a>
 800bfd0:	f04f 0b02 	mov.w	fp, #2
 800bfd4:	4641      	mov	r1, r8
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	f7ff fea6 	bl	800bd28 <rshift>
 800bfdc:	4446      	add	r6, r8
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	42b3      	cmp	r3, r6
 800bfe2:	da41      	bge.n	800c068 <__gethex+0x270>
 800bfe4:	4621      	mov	r1, r4
 800bfe6:	4648      	mov	r0, r9
 800bfe8:	f000 fa4a 	bl	800c480 <_Bfree>
 800bfec:	2300      	movs	r3, #0
 800bfee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bff0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800bff4:	6013      	str	r3, [r2, #0]
 800bff6:	e789      	b.n	800bf0c <__gethex+0x114>
 800bff8:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800bffc:	2a2e      	cmp	r2, #46	; 0x2e
 800bffe:	d014      	beq.n	800c02a <__gethex+0x232>
 800c000:	2b20      	cmp	r3, #32
 800c002:	d106      	bne.n	800c012 <__gethex+0x21a>
 800c004:	9b01      	ldr	r3, [sp, #4]
 800c006:	f843 bb04 	str.w	fp, [r3], #4
 800c00a:	f04f 0b00 	mov.w	fp, #0
 800c00e:	9301      	str	r3, [sp, #4]
 800c010:	465b      	mov	r3, fp
 800c012:	7828      	ldrb	r0, [r5, #0]
 800c014:	9303      	str	r3, [sp, #12]
 800c016:	f7ff feda 	bl	800bdce <__hexdig_fun>
 800c01a:	9b03      	ldr	r3, [sp, #12]
 800c01c:	f000 000f 	and.w	r0, r0, #15
 800c020:	4098      	lsls	r0, r3
 800c022:	ea4b 0b00 	orr.w	fp, fp, r0
 800c026:	3304      	adds	r3, #4
 800c028:	e79f      	b.n	800bf6a <__gethex+0x172>
 800c02a:	45a8      	cmp	r8, r5
 800c02c:	d8e8      	bhi.n	800c000 <__gethex+0x208>
 800c02e:	2201      	movs	r2, #1
 800c030:	4628      	mov	r0, r5
 800c032:	4928      	ldr	r1, [pc, #160]	; (800c0d4 <__gethex+0x2dc>)
 800c034:	9303      	str	r3, [sp, #12]
 800c036:	f7fe fdfe 	bl	800ac36 <strncmp>
 800c03a:	9b03      	ldr	r3, [sp, #12]
 800c03c:	2800      	cmp	r0, #0
 800c03e:	d1df      	bne.n	800c000 <__gethex+0x208>
 800c040:	e793      	b.n	800bf6a <__gethex+0x172>
 800c042:	f04f 0b03 	mov.w	fp, #3
 800c046:	e7c5      	b.n	800bfd4 <__gethex+0x1dc>
 800c048:	da0b      	bge.n	800c062 <__gethex+0x26a>
 800c04a:	eba5 0808 	sub.w	r8, r5, r8
 800c04e:	4621      	mov	r1, r4
 800c050:	4642      	mov	r2, r8
 800c052:	4648      	mov	r0, r9
 800c054:	f000 fc2c 	bl	800c8b0 <__lshift>
 800c058:	4604      	mov	r4, r0
 800c05a:	eba6 0608 	sub.w	r6, r6, r8
 800c05e:	f100 0a14 	add.w	sl, r0, #20
 800c062:	f04f 0b00 	mov.w	fp, #0
 800c066:	e7ba      	b.n	800bfde <__gethex+0x1e6>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	42b3      	cmp	r3, r6
 800c06c:	dd74      	ble.n	800c158 <__gethex+0x360>
 800c06e:	1b9e      	subs	r6, r3, r6
 800c070:	42b5      	cmp	r5, r6
 800c072:	dc35      	bgt.n	800c0e0 <__gethex+0x2e8>
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2b02      	cmp	r3, #2
 800c078:	d023      	beq.n	800c0c2 <__gethex+0x2ca>
 800c07a:	2b03      	cmp	r3, #3
 800c07c:	d025      	beq.n	800c0ca <__gethex+0x2d2>
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d115      	bne.n	800c0ae <__gethex+0x2b6>
 800c082:	42b5      	cmp	r5, r6
 800c084:	d113      	bne.n	800c0ae <__gethex+0x2b6>
 800c086:	2d01      	cmp	r5, #1
 800c088:	d10b      	bne.n	800c0a2 <__gethex+0x2aa>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	9a02      	ldr	r2, [sp, #8]
 800c08e:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c092:	6013      	str	r3, [r2, #0]
 800c094:	2301      	movs	r3, #1
 800c096:	6123      	str	r3, [r4, #16]
 800c098:	f8ca 3000 	str.w	r3, [sl]
 800c09c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c09e:	601c      	str	r4, [r3, #0]
 800c0a0:	e734      	b.n	800bf0c <__gethex+0x114>
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	1e69      	subs	r1, r5, #1
 800c0a6:	f000 fe26 	bl	800ccf6 <__any_on>
 800c0aa:	2800      	cmp	r0, #0
 800c0ac:	d1ed      	bne.n	800c08a <__gethex+0x292>
 800c0ae:	4621      	mov	r1, r4
 800c0b0:	4648      	mov	r0, r9
 800c0b2:	f000 f9e5 	bl	800c480 <_Bfree>
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c0ba:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c0be:	6013      	str	r3, [r2, #0]
 800c0c0:	e724      	b.n	800bf0c <__gethex+0x114>
 800c0c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d1f2      	bne.n	800c0ae <__gethex+0x2b6>
 800c0c8:	e7df      	b.n	800c08a <__gethex+0x292>
 800c0ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d1dc      	bne.n	800c08a <__gethex+0x292>
 800c0d0:	e7ed      	b.n	800c0ae <__gethex+0x2b6>
 800c0d2:	bf00      	nop
 800c0d4:	0800dac2 	.word	0x0800dac2
 800c0d8:	0800dd67 	.word	0x0800dd67
 800c0dc:	0800dd78 	.word	0x0800dd78
 800c0e0:	f106 38ff 	add.w	r8, r6, #4294967295
 800c0e4:	f1bb 0f00 	cmp.w	fp, #0
 800c0e8:	d133      	bne.n	800c152 <__gethex+0x35a>
 800c0ea:	f1b8 0f00 	cmp.w	r8, #0
 800c0ee:	d004      	beq.n	800c0fa <__gethex+0x302>
 800c0f0:	4641      	mov	r1, r8
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	f000 fdff 	bl	800ccf6 <__any_on>
 800c0f8:	4683      	mov	fp, r0
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c100:	f008 081f 	and.w	r8, r8, #31
 800c104:	fa03 f308 	lsl.w	r3, r3, r8
 800c108:	f04f 0802 	mov.w	r8, #2
 800c10c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c110:	4631      	mov	r1, r6
 800c112:	4213      	tst	r3, r2
 800c114:	4620      	mov	r0, r4
 800c116:	bf18      	it	ne
 800c118:	f04b 0b02 	orrne.w	fp, fp, #2
 800c11c:	1bad      	subs	r5, r5, r6
 800c11e:	f7ff fe03 	bl	800bd28 <rshift>
 800c122:	687e      	ldr	r6, [r7, #4]
 800c124:	f1bb 0f00 	cmp.w	fp, #0
 800c128:	d04a      	beq.n	800c1c0 <__gethex+0x3c8>
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2b02      	cmp	r3, #2
 800c12e:	d016      	beq.n	800c15e <__gethex+0x366>
 800c130:	2b03      	cmp	r3, #3
 800c132:	d018      	beq.n	800c166 <__gethex+0x36e>
 800c134:	2b01      	cmp	r3, #1
 800c136:	d109      	bne.n	800c14c <__gethex+0x354>
 800c138:	f01b 0f02 	tst.w	fp, #2
 800c13c:	d006      	beq.n	800c14c <__gethex+0x354>
 800c13e:	f8da 3000 	ldr.w	r3, [sl]
 800c142:	ea4b 0b03 	orr.w	fp, fp, r3
 800c146:	f01b 0f01 	tst.w	fp, #1
 800c14a:	d10f      	bne.n	800c16c <__gethex+0x374>
 800c14c:	f048 0810 	orr.w	r8, r8, #16
 800c150:	e036      	b.n	800c1c0 <__gethex+0x3c8>
 800c152:	f04f 0b01 	mov.w	fp, #1
 800c156:	e7d0      	b.n	800c0fa <__gethex+0x302>
 800c158:	f04f 0801 	mov.w	r8, #1
 800c15c:	e7e2      	b.n	800c124 <__gethex+0x32c>
 800c15e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c160:	f1c3 0301 	rsb	r3, r3, #1
 800c164:	930f      	str	r3, [sp, #60]	; 0x3c
 800c166:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d0ef      	beq.n	800c14c <__gethex+0x354>
 800c16c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c170:	f104 0214 	add.w	r2, r4, #20
 800c174:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c178:	9301      	str	r3, [sp, #4]
 800c17a:	2300      	movs	r3, #0
 800c17c:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c180:	4694      	mov	ip, r2
 800c182:	f852 1b04 	ldr.w	r1, [r2], #4
 800c186:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c18a:	d01e      	beq.n	800c1ca <__gethex+0x3d2>
 800c18c:	3101      	adds	r1, #1
 800c18e:	f8cc 1000 	str.w	r1, [ip]
 800c192:	f1b8 0f02 	cmp.w	r8, #2
 800c196:	f104 0214 	add.w	r2, r4, #20
 800c19a:	d13d      	bne.n	800c218 <__gethex+0x420>
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	3b01      	subs	r3, #1
 800c1a0:	42ab      	cmp	r3, r5
 800c1a2:	d10b      	bne.n	800c1bc <__gethex+0x3c4>
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	1169      	asrs	r1, r5, #5
 800c1a8:	f005 051f 	and.w	r5, r5, #31
 800c1ac:	fa03 f505 	lsl.w	r5, r3, r5
 800c1b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1b4:	421d      	tst	r5, r3
 800c1b6:	bf18      	it	ne
 800c1b8:	f04f 0801 	movne.w	r8, #1
 800c1bc:	f048 0820 	orr.w	r8, r8, #32
 800c1c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1c2:	601c      	str	r4, [r3, #0]
 800c1c4:	9b02      	ldr	r3, [sp, #8]
 800c1c6:	601e      	str	r6, [r3, #0]
 800c1c8:	e6a0      	b.n	800bf0c <__gethex+0x114>
 800c1ca:	4290      	cmp	r0, r2
 800c1cc:	f842 3c04 	str.w	r3, [r2, #-4]
 800c1d0:	d8d6      	bhi.n	800c180 <__gethex+0x388>
 800c1d2:	68a2      	ldr	r2, [r4, #8]
 800c1d4:	4593      	cmp	fp, r2
 800c1d6:	db17      	blt.n	800c208 <__gethex+0x410>
 800c1d8:	6861      	ldr	r1, [r4, #4]
 800c1da:	4648      	mov	r0, r9
 800c1dc:	3101      	adds	r1, #1
 800c1de:	f000 f90f 	bl	800c400 <_Balloc>
 800c1e2:	4682      	mov	sl, r0
 800c1e4:	b918      	cbnz	r0, 800c1ee <__gethex+0x3f6>
 800c1e6:	4602      	mov	r2, r0
 800c1e8:	2184      	movs	r1, #132	; 0x84
 800c1ea:	4b1a      	ldr	r3, [pc, #104]	; (800c254 <__gethex+0x45c>)
 800c1ec:	e6b1      	b.n	800bf52 <__gethex+0x15a>
 800c1ee:	6922      	ldr	r2, [r4, #16]
 800c1f0:	f104 010c 	add.w	r1, r4, #12
 800c1f4:	3202      	adds	r2, #2
 800c1f6:	0092      	lsls	r2, r2, #2
 800c1f8:	300c      	adds	r0, #12
 800c1fa:	f7fe fea6 	bl	800af4a <memcpy>
 800c1fe:	4621      	mov	r1, r4
 800c200:	4648      	mov	r0, r9
 800c202:	f000 f93d 	bl	800c480 <_Bfree>
 800c206:	4654      	mov	r4, sl
 800c208:	6922      	ldr	r2, [r4, #16]
 800c20a:	1c51      	adds	r1, r2, #1
 800c20c:	6121      	str	r1, [r4, #16]
 800c20e:	2101      	movs	r1, #1
 800c210:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c214:	6151      	str	r1, [r2, #20]
 800c216:	e7bc      	b.n	800c192 <__gethex+0x39a>
 800c218:	6921      	ldr	r1, [r4, #16]
 800c21a:	4559      	cmp	r1, fp
 800c21c:	dd0b      	ble.n	800c236 <__gethex+0x43e>
 800c21e:	2101      	movs	r1, #1
 800c220:	4620      	mov	r0, r4
 800c222:	f7ff fd81 	bl	800bd28 <rshift>
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	3601      	adds	r6, #1
 800c22a:	42b3      	cmp	r3, r6
 800c22c:	f6ff aeda 	blt.w	800bfe4 <__gethex+0x1ec>
 800c230:	f04f 0801 	mov.w	r8, #1
 800c234:	e7c2      	b.n	800c1bc <__gethex+0x3c4>
 800c236:	f015 051f 	ands.w	r5, r5, #31
 800c23a:	d0f9      	beq.n	800c230 <__gethex+0x438>
 800c23c:	9b01      	ldr	r3, [sp, #4]
 800c23e:	f1c5 0520 	rsb	r5, r5, #32
 800c242:	441a      	add	r2, r3
 800c244:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c248:	f000 f9cc 	bl	800c5e4 <__hi0bits>
 800c24c:	42a8      	cmp	r0, r5
 800c24e:	dbe6      	blt.n	800c21e <__gethex+0x426>
 800c250:	e7ee      	b.n	800c230 <__gethex+0x438>
 800c252:	bf00      	nop
 800c254:	0800dd67 	.word	0x0800dd67

0800c258 <L_shift>:
 800c258:	f1c2 0208 	rsb	r2, r2, #8
 800c25c:	0092      	lsls	r2, r2, #2
 800c25e:	b570      	push	{r4, r5, r6, lr}
 800c260:	f1c2 0620 	rsb	r6, r2, #32
 800c264:	6843      	ldr	r3, [r0, #4]
 800c266:	6804      	ldr	r4, [r0, #0]
 800c268:	fa03 f506 	lsl.w	r5, r3, r6
 800c26c:	432c      	orrs	r4, r5
 800c26e:	40d3      	lsrs	r3, r2
 800c270:	6004      	str	r4, [r0, #0]
 800c272:	f840 3f04 	str.w	r3, [r0, #4]!
 800c276:	4288      	cmp	r0, r1
 800c278:	d3f4      	bcc.n	800c264 <L_shift+0xc>
 800c27a:	bd70      	pop	{r4, r5, r6, pc}

0800c27c <__match>:
 800c27c:	b530      	push	{r4, r5, lr}
 800c27e:	6803      	ldr	r3, [r0, #0]
 800c280:	3301      	adds	r3, #1
 800c282:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c286:	b914      	cbnz	r4, 800c28e <__match+0x12>
 800c288:	6003      	str	r3, [r0, #0]
 800c28a:	2001      	movs	r0, #1
 800c28c:	bd30      	pop	{r4, r5, pc}
 800c28e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c292:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c296:	2d19      	cmp	r5, #25
 800c298:	bf98      	it	ls
 800c29a:	3220      	addls	r2, #32
 800c29c:	42a2      	cmp	r2, r4
 800c29e:	d0f0      	beq.n	800c282 <__match+0x6>
 800c2a0:	2000      	movs	r0, #0
 800c2a2:	e7f3      	b.n	800c28c <__match+0x10>

0800c2a4 <__hexnan>:
 800c2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2a8:	2500      	movs	r5, #0
 800c2aa:	680b      	ldr	r3, [r1, #0]
 800c2ac:	4682      	mov	sl, r0
 800c2ae:	115e      	asrs	r6, r3, #5
 800c2b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c2b4:	f013 031f 	ands.w	r3, r3, #31
 800c2b8:	bf18      	it	ne
 800c2ba:	3604      	addne	r6, #4
 800c2bc:	1f37      	subs	r7, r6, #4
 800c2be:	4690      	mov	r8, r2
 800c2c0:	46b9      	mov	r9, r7
 800c2c2:	463c      	mov	r4, r7
 800c2c4:	46ab      	mov	fp, r5
 800c2c6:	b087      	sub	sp, #28
 800c2c8:	6801      	ldr	r1, [r0, #0]
 800c2ca:	9301      	str	r3, [sp, #4]
 800c2cc:	f846 5c04 	str.w	r5, [r6, #-4]
 800c2d0:	9502      	str	r5, [sp, #8]
 800c2d2:	784a      	ldrb	r2, [r1, #1]
 800c2d4:	1c4b      	adds	r3, r1, #1
 800c2d6:	9303      	str	r3, [sp, #12]
 800c2d8:	b342      	cbz	r2, 800c32c <__hexnan+0x88>
 800c2da:	4610      	mov	r0, r2
 800c2dc:	9105      	str	r1, [sp, #20]
 800c2de:	9204      	str	r2, [sp, #16]
 800c2e0:	f7ff fd75 	bl	800bdce <__hexdig_fun>
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	d14f      	bne.n	800c388 <__hexnan+0xe4>
 800c2e8:	9a04      	ldr	r2, [sp, #16]
 800c2ea:	9905      	ldr	r1, [sp, #20]
 800c2ec:	2a20      	cmp	r2, #32
 800c2ee:	d818      	bhi.n	800c322 <__hexnan+0x7e>
 800c2f0:	9b02      	ldr	r3, [sp, #8]
 800c2f2:	459b      	cmp	fp, r3
 800c2f4:	dd13      	ble.n	800c31e <__hexnan+0x7a>
 800c2f6:	454c      	cmp	r4, r9
 800c2f8:	d206      	bcs.n	800c308 <__hexnan+0x64>
 800c2fa:	2d07      	cmp	r5, #7
 800c2fc:	dc04      	bgt.n	800c308 <__hexnan+0x64>
 800c2fe:	462a      	mov	r2, r5
 800c300:	4649      	mov	r1, r9
 800c302:	4620      	mov	r0, r4
 800c304:	f7ff ffa8 	bl	800c258 <L_shift>
 800c308:	4544      	cmp	r4, r8
 800c30a:	d950      	bls.n	800c3ae <__hexnan+0x10a>
 800c30c:	2300      	movs	r3, #0
 800c30e:	f1a4 0904 	sub.w	r9, r4, #4
 800c312:	f844 3c04 	str.w	r3, [r4, #-4]
 800c316:	461d      	mov	r5, r3
 800c318:	464c      	mov	r4, r9
 800c31a:	f8cd b008 	str.w	fp, [sp, #8]
 800c31e:	9903      	ldr	r1, [sp, #12]
 800c320:	e7d7      	b.n	800c2d2 <__hexnan+0x2e>
 800c322:	2a29      	cmp	r2, #41	; 0x29
 800c324:	d155      	bne.n	800c3d2 <__hexnan+0x12e>
 800c326:	3102      	adds	r1, #2
 800c328:	f8ca 1000 	str.w	r1, [sl]
 800c32c:	f1bb 0f00 	cmp.w	fp, #0
 800c330:	d04f      	beq.n	800c3d2 <__hexnan+0x12e>
 800c332:	454c      	cmp	r4, r9
 800c334:	d206      	bcs.n	800c344 <__hexnan+0xa0>
 800c336:	2d07      	cmp	r5, #7
 800c338:	dc04      	bgt.n	800c344 <__hexnan+0xa0>
 800c33a:	462a      	mov	r2, r5
 800c33c:	4649      	mov	r1, r9
 800c33e:	4620      	mov	r0, r4
 800c340:	f7ff ff8a 	bl	800c258 <L_shift>
 800c344:	4544      	cmp	r4, r8
 800c346:	d934      	bls.n	800c3b2 <__hexnan+0x10e>
 800c348:	4623      	mov	r3, r4
 800c34a:	f1a8 0204 	sub.w	r2, r8, #4
 800c34e:	f853 1b04 	ldr.w	r1, [r3], #4
 800c352:	429f      	cmp	r7, r3
 800c354:	f842 1f04 	str.w	r1, [r2, #4]!
 800c358:	d2f9      	bcs.n	800c34e <__hexnan+0xaa>
 800c35a:	1b3b      	subs	r3, r7, r4
 800c35c:	f023 0303 	bic.w	r3, r3, #3
 800c360:	3304      	adds	r3, #4
 800c362:	3e03      	subs	r6, #3
 800c364:	3401      	adds	r4, #1
 800c366:	42a6      	cmp	r6, r4
 800c368:	bf38      	it	cc
 800c36a:	2304      	movcc	r3, #4
 800c36c:	2200      	movs	r2, #0
 800c36e:	4443      	add	r3, r8
 800c370:	f843 2b04 	str.w	r2, [r3], #4
 800c374:	429f      	cmp	r7, r3
 800c376:	d2fb      	bcs.n	800c370 <__hexnan+0xcc>
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	b91b      	cbnz	r3, 800c384 <__hexnan+0xe0>
 800c37c:	4547      	cmp	r7, r8
 800c37e:	d126      	bne.n	800c3ce <__hexnan+0x12a>
 800c380:	2301      	movs	r3, #1
 800c382:	603b      	str	r3, [r7, #0]
 800c384:	2005      	movs	r0, #5
 800c386:	e025      	b.n	800c3d4 <__hexnan+0x130>
 800c388:	3501      	adds	r5, #1
 800c38a:	2d08      	cmp	r5, #8
 800c38c:	f10b 0b01 	add.w	fp, fp, #1
 800c390:	dd06      	ble.n	800c3a0 <__hexnan+0xfc>
 800c392:	4544      	cmp	r4, r8
 800c394:	d9c3      	bls.n	800c31e <__hexnan+0x7a>
 800c396:	2300      	movs	r3, #0
 800c398:	2501      	movs	r5, #1
 800c39a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c39e:	3c04      	subs	r4, #4
 800c3a0:	6822      	ldr	r2, [r4, #0]
 800c3a2:	f000 000f 	and.w	r0, r0, #15
 800c3a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c3aa:	6020      	str	r0, [r4, #0]
 800c3ac:	e7b7      	b.n	800c31e <__hexnan+0x7a>
 800c3ae:	2508      	movs	r5, #8
 800c3b0:	e7b5      	b.n	800c31e <__hexnan+0x7a>
 800c3b2:	9b01      	ldr	r3, [sp, #4]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d0df      	beq.n	800c378 <__hexnan+0xd4>
 800c3b8:	f04f 32ff 	mov.w	r2, #4294967295
 800c3bc:	f1c3 0320 	rsb	r3, r3, #32
 800c3c0:	40da      	lsrs	r2, r3
 800c3c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c3c6:	4013      	ands	r3, r2
 800c3c8:	f846 3c04 	str.w	r3, [r6, #-4]
 800c3cc:	e7d4      	b.n	800c378 <__hexnan+0xd4>
 800c3ce:	3f04      	subs	r7, #4
 800c3d0:	e7d2      	b.n	800c378 <__hexnan+0xd4>
 800c3d2:	2004      	movs	r0, #4
 800c3d4:	b007      	add	sp, #28
 800c3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c3da <__ascii_mbtowc>:
 800c3da:	b082      	sub	sp, #8
 800c3dc:	b901      	cbnz	r1, 800c3e0 <__ascii_mbtowc+0x6>
 800c3de:	a901      	add	r1, sp, #4
 800c3e0:	b142      	cbz	r2, 800c3f4 <__ascii_mbtowc+0x1a>
 800c3e2:	b14b      	cbz	r3, 800c3f8 <__ascii_mbtowc+0x1e>
 800c3e4:	7813      	ldrb	r3, [r2, #0]
 800c3e6:	600b      	str	r3, [r1, #0]
 800c3e8:	7812      	ldrb	r2, [r2, #0]
 800c3ea:	1e10      	subs	r0, r2, #0
 800c3ec:	bf18      	it	ne
 800c3ee:	2001      	movne	r0, #1
 800c3f0:	b002      	add	sp, #8
 800c3f2:	4770      	bx	lr
 800c3f4:	4610      	mov	r0, r2
 800c3f6:	e7fb      	b.n	800c3f0 <__ascii_mbtowc+0x16>
 800c3f8:	f06f 0001 	mvn.w	r0, #1
 800c3fc:	e7f8      	b.n	800c3f0 <__ascii_mbtowc+0x16>
	...

0800c400 <_Balloc>:
 800c400:	b570      	push	{r4, r5, r6, lr}
 800c402:	69c6      	ldr	r6, [r0, #28]
 800c404:	4604      	mov	r4, r0
 800c406:	460d      	mov	r5, r1
 800c408:	b976      	cbnz	r6, 800c428 <_Balloc+0x28>
 800c40a:	2010      	movs	r0, #16
 800c40c:	f7fc fed6 	bl	80091bc <malloc>
 800c410:	4602      	mov	r2, r0
 800c412:	61e0      	str	r0, [r4, #28]
 800c414:	b920      	cbnz	r0, 800c420 <_Balloc+0x20>
 800c416:	216b      	movs	r1, #107	; 0x6b
 800c418:	4b17      	ldr	r3, [pc, #92]	; (800c478 <_Balloc+0x78>)
 800c41a:	4818      	ldr	r0, [pc, #96]	; (800c47c <_Balloc+0x7c>)
 800c41c:	f7fe fdae 	bl	800af7c <__assert_func>
 800c420:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c424:	6006      	str	r6, [r0, #0]
 800c426:	60c6      	str	r6, [r0, #12]
 800c428:	69e6      	ldr	r6, [r4, #28]
 800c42a:	68f3      	ldr	r3, [r6, #12]
 800c42c:	b183      	cbz	r3, 800c450 <_Balloc+0x50>
 800c42e:	69e3      	ldr	r3, [r4, #28]
 800c430:	68db      	ldr	r3, [r3, #12]
 800c432:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c436:	b9b8      	cbnz	r0, 800c468 <_Balloc+0x68>
 800c438:	2101      	movs	r1, #1
 800c43a:	fa01 f605 	lsl.w	r6, r1, r5
 800c43e:	1d72      	adds	r2, r6, #5
 800c440:	4620      	mov	r0, r4
 800c442:	0092      	lsls	r2, r2, #2
 800c444:	f000 febb 	bl	800d1be <_calloc_r>
 800c448:	b160      	cbz	r0, 800c464 <_Balloc+0x64>
 800c44a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c44e:	e00e      	b.n	800c46e <_Balloc+0x6e>
 800c450:	2221      	movs	r2, #33	; 0x21
 800c452:	2104      	movs	r1, #4
 800c454:	4620      	mov	r0, r4
 800c456:	f000 feb2 	bl	800d1be <_calloc_r>
 800c45a:	69e3      	ldr	r3, [r4, #28]
 800c45c:	60f0      	str	r0, [r6, #12]
 800c45e:	68db      	ldr	r3, [r3, #12]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d1e4      	bne.n	800c42e <_Balloc+0x2e>
 800c464:	2000      	movs	r0, #0
 800c466:	bd70      	pop	{r4, r5, r6, pc}
 800c468:	6802      	ldr	r2, [r0, #0]
 800c46a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c46e:	2300      	movs	r3, #0
 800c470:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c474:	e7f7      	b.n	800c466 <_Balloc+0x66>
 800c476:	bf00      	nop
 800c478:	0800dc4d 	.word	0x0800dc4d
 800c47c:	0800ddd8 	.word	0x0800ddd8

0800c480 <_Bfree>:
 800c480:	b570      	push	{r4, r5, r6, lr}
 800c482:	69c6      	ldr	r6, [r0, #28]
 800c484:	4605      	mov	r5, r0
 800c486:	460c      	mov	r4, r1
 800c488:	b976      	cbnz	r6, 800c4a8 <_Bfree+0x28>
 800c48a:	2010      	movs	r0, #16
 800c48c:	f7fc fe96 	bl	80091bc <malloc>
 800c490:	4602      	mov	r2, r0
 800c492:	61e8      	str	r0, [r5, #28]
 800c494:	b920      	cbnz	r0, 800c4a0 <_Bfree+0x20>
 800c496:	218f      	movs	r1, #143	; 0x8f
 800c498:	4b08      	ldr	r3, [pc, #32]	; (800c4bc <_Bfree+0x3c>)
 800c49a:	4809      	ldr	r0, [pc, #36]	; (800c4c0 <_Bfree+0x40>)
 800c49c:	f7fe fd6e 	bl	800af7c <__assert_func>
 800c4a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4a4:	6006      	str	r6, [r0, #0]
 800c4a6:	60c6      	str	r6, [r0, #12]
 800c4a8:	b13c      	cbz	r4, 800c4ba <_Bfree+0x3a>
 800c4aa:	69eb      	ldr	r3, [r5, #28]
 800c4ac:	6862      	ldr	r2, [r4, #4]
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c4b4:	6021      	str	r1, [r4, #0]
 800c4b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c4ba:	bd70      	pop	{r4, r5, r6, pc}
 800c4bc:	0800dc4d 	.word	0x0800dc4d
 800c4c0:	0800ddd8 	.word	0x0800ddd8

0800c4c4 <__multadd>:
 800c4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4c8:	4607      	mov	r7, r0
 800c4ca:	460c      	mov	r4, r1
 800c4cc:	461e      	mov	r6, r3
 800c4ce:	2000      	movs	r0, #0
 800c4d0:	690d      	ldr	r5, [r1, #16]
 800c4d2:	f101 0c14 	add.w	ip, r1, #20
 800c4d6:	f8dc 3000 	ldr.w	r3, [ip]
 800c4da:	3001      	adds	r0, #1
 800c4dc:	b299      	uxth	r1, r3
 800c4de:	fb02 6101 	mla	r1, r2, r1, r6
 800c4e2:	0c1e      	lsrs	r6, r3, #16
 800c4e4:	0c0b      	lsrs	r3, r1, #16
 800c4e6:	fb02 3306 	mla	r3, r2, r6, r3
 800c4ea:	b289      	uxth	r1, r1
 800c4ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c4f0:	4285      	cmp	r5, r0
 800c4f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c4f6:	f84c 1b04 	str.w	r1, [ip], #4
 800c4fa:	dcec      	bgt.n	800c4d6 <__multadd+0x12>
 800c4fc:	b30e      	cbz	r6, 800c542 <__multadd+0x7e>
 800c4fe:	68a3      	ldr	r3, [r4, #8]
 800c500:	42ab      	cmp	r3, r5
 800c502:	dc19      	bgt.n	800c538 <__multadd+0x74>
 800c504:	6861      	ldr	r1, [r4, #4]
 800c506:	4638      	mov	r0, r7
 800c508:	3101      	adds	r1, #1
 800c50a:	f7ff ff79 	bl	800c400 <_Balloc>
 800c50e:	4680      	mov	r8, r0
 800c510:	b928      	cbnz	r0, 800c51e <__multadd+0x5a>
 800c512:	4602      	mov	r2, r0
 800c514:	21ba      	movs	r1, #186	; 0xba
 800c516:	4b0c      	ldr	r3, [pc, #48]	; (800c548 <__multadd+0x84>)
 800c518:	480c      	ldr	r0, [pc, #48]	; (800c54c <__multadd+0x88>)
 800c51a:	f7fe fd2f 	bl	800af7c <__assert_func>
 800c51e:	6922      	ldr	r2, [r4, #16]
 800c520:	f104 010c 	add.w	r1, r4, #12
 800c524:	3202      	adds	r2, #2
 800c526:	0092      	lsls	r2, r2, #2
 800c528:	300c      	adds	r0, #12
 800c52a:	f7fe fd0e 	bl	800af4a <memcpy>
 800c52e:	4621      	mov	r1, r4
 800c530:	4638      	mov	r0, r7
 800c532:	f7ff ffa5 	bl	800c480 <_Bfree>
 800c536:	4644      	mov	r4, r8
 800c538:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c53c:	3501      	adds	r5, #1
 800c53e:	615e      	str	r6, [r3, #20]
 800c540:	6125      	str	r5, [r4, #16]
 800c542:	4620      	mov	r0, r4
 800c544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c548:	0800dd67 	.word	0x0800dd67
 800c54c:	0800ddd8 	.word	0x0800ddd8

0800c550 <__s2b>:
 800c550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c554:	4615      	mov	r5, r2
 800c556:	2209      	movs	r2, #9
 800c558:	461f      	mov	r7, r3
 800c55a:	3308      	adds	r3, #8
 800c55c:	460c      	mov	r4, r1
 800c55e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c562:	4606      	mov	r6, r0
 800c564:	2201      	movs	r2, #1
 800c566:	2100      	movs	r1, #0
 800c568:	429a      	cmp	r2, r3
 800c56a:	db09      	blt.n	800c580 <__s2b+0x30>
 800c56c:	4630      	mov	r0, r6
 800c56e:	f7ff ff47 	bl	800c400 <_Balloc>
 800c572:	b940      	cbnz	r0, 800c586 <__s2b+0x36>
 800c574:	4602      	mov	r2, r0
 800c576:	21d3      	movs	r1, #211	; 0xd3
 800c578:	4b18      	ldr	r3, [pc, #96]	; (800c5dc <__s2b+0x8c>)
 800c57a:	4819      	ldr	r0, [pc, #100]	; (800c5e0 <__s2b+0x90>)
 800c57c:	f7fe fcfe 	bl	800af7c <__assert_func>
 800c580:	0052      	lsls	r2, r2, #1
 800c582:	3101      	adds	r1, #1
 800c584:	e7f0      	b.n	800c568 <__s2b+0x18>
 800c586:	9b08      	ldr	r3, [sp, #32]
 800c588:	2d09      	cmp	r5, #9
 800c58a:	6143      	str	r3, [r0, #20]
 800c58c:	f04f 0301 	mov.w	r3, #1
 800c590:	6103      	str	r3, [r0, #16]
 800c592:	dd16      	ble.n	800c5c2 <__s2b+0x72>
 800c594:	f104 0909 	add.w	r9, r4, #9
 800c598:	46c8      	mov	r8, r9
 800c59a:	442c      	add	r4, r5
 800c59c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c5a0:	4601      	mov	r1, r0
 800c5a2:	220a      	movs	r2, #10
 800c5a4:	4630      	mov	r0, r6
 800c5a6:	3b30      	subs	r3, #48	; 0x30
 800c5a8:	f7ff ff8c 	bl	800c4c4 <__multadd>
 800c5ac:	45a0      	cmp	r8, r4
 800c5ae:	d1f5      	bne.n	800c59c <__s2b+0x4c>
 800c5b0:	f1a5 0408 	sub.w	r4, r5, #8
 800c5b4:	444c      	add	r4, r9
 800c5b6:	1b2d      	subs	r5, r5, r4
 800c5b8:	1963      	adds	r3, r4, r5
 800c5ba:	42bb      	cmp	r3, r7
 800c5bc:	db04      	blt.n	800c5c8 <__s2b+0x78>
 800c5be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5c2:	2509      	movs	r5, #9
 800c5c4:	340a      	adds	r4, #10
 800c5c6:	e7f6      	b.n	800c5b6 <__s2b+0x66>
 800c5c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c5cc:	4601      	mov	r1, r0
 800c5ce:	220a      	movs	r2, #10
 800c5d0:	4630      	mov	r0, r6
 800c5d2:	3b30      	subs	r3, #48	; 0x30
 800c5d4:	f7ff ff76 	bl	800c4c4 <__multadd>
 800c5d8:	e7ee      	b.n	800c5b8 <__s2b+0x68>
 800c5da:	bf00      	nop
 800c5dc:	0800dd67 	.word	0x0800dd67
 800c5e0:	0800ddd8 	.word	0x0800ddd8

0800c5e4 <__hi0bits>:
 800c5e4:	0c02      	lsrs	r2, r0, #16
 800c5e6:	0412      	lsls	r2, r2, #16
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	b9ca      	cbnz	r2, 800c620 <__hi0bits+0x3c>
 800c5ec:	0403      	lsls	r3, r0, #16
 800c5ee:	2010      	movs	r0, #16
 800c5f0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c5f4:	bf04      	itt	eq
 800c5f6:	021b      	lsleq	r3, r3, #8
 800c5f8:	3008      	addeq	r0, #8
 800c5fa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c5fe:	bf04      	itt	eq
 800c600:	011b      	lsleq	r3, r3, #4
 800c602:	3004      	addeq	r0, #4
 800c604:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c608:	bf04      	itt	eq
 800c60a:	009b      	lsleq	r3, r3, #2
 800c60c:	3002      	addeq	r0, #2
 800c60e:	2b00      	cmp	r3, #0
 800c610:	db05      	blt.n	800c61e <__hi0bits+0x3a>
 800c612:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c616:	f100 0001 	add.w	r0, r0, #1
 800c61a:	bf08      	it	eq
 800c61c:	2020      	moveq	r0, #32
 800c61e:	4770      	bx	lr
 800c620:	2000      	movs	r0, #0
 800c622:	e7e5      	b.n	800c5f0 <__hi0bits+0xc>

0800c624 <__lo0bits>:
 800c624:	6803      	ldr	r3, [r0, #0]
 800c626:	4602      	mov	r2, r0
 800c628:	f013 0007 	ands.w	r0, r3, #7
 800c62c:	d00b      	beq.n	800c646 <__lo0bits+0x22>
 800c62e:	07d9      	lsls	r1, r3, #31
 800c630:	d421      	bmi.n	800c676 <__lo0bits+0x52>
 800c632:	0798      	lsls	r0, r3, #30
 800c634:	bf49      	itett	mi
 800c636:	085b      	lsrmi	r3, r3, #1
 800c638:	089b      	lsrpl	r3, r3, #2
 800c63a:	2001      	movmi	r0, #1
 800c63c:	6013      	strmi	r3, [r2, #0]
 800c63e:	bf5c      	itt	pl
 800c640:	2002      	movpl	r0, #2
 800c642:	6013      	strpl	r3, [r2, #0]
 800c644:	4770      	bx	lr
 800c646:	b299      	uxth	r1, r3
 800c648:	b909      	cbnz	r1, 800c64e <__lo0bits+0x2a>
 800c64a:	2010      	movs	r0, #16
 800c64c:	0c1b      	lsrs	r3, r3, #16
 800c64e:	b2d9      	uxtb	r1, r3
 800c650:	b909      	cbnz	r1, 800c656 <__lo0bits+0x32>
 800c652:	3008      	adds	r0, #8
 800c654:	0a1b      	lsrs	r3, r3, #8
 800c656:	0719      	lsls	r1, r3, #28
 800c658:	bf04      	itt	eq
 800c65a:	091b      	lsreq	r3, r3, #4
 800c65c:	3004      	addeq	r0, #4
 800c65e:	0799      	lsls	r1, r3, #30
 800c660:	bf04      	itt	eq
 800c662:	089b      	lsreq	r3, r3, #2
 800c664:	3002      	addeq	r0, #2
 800c666:	07d9      	lsls	r1, r3, #31
 800c668:	d403      	bmi.n	800c672 <__lo0bits+0x4e>
 800c66a:	085b      	lsrs	r3, r3, #1
 800c66c:	f100 0001 	add.w	r0, r0, #1
 800c670:	d003      	beq.n	800c67a <__lo0bits+0x56>
 800c672:	6013      	str	r3, [r2, #0]
 800c674:	4770      	bx	lr
 800c676:	2000      	movs	r0, #0
 800c678:	4770      	bx	lr
 800c67a:	2020      	movs	r0, #32
 800c67c:	4770      	bx	lr
	...

0800c680 <__i2b>:
 800c680:	b510      	push	{r4, lr}
 800c682:	460c      	mov	r4, r1
 800c684:	2101      	movs	r1, #1
 800c686:	f7ff febb 	bl	800c400 <_Balloc>
 800c68a:	4602      	mov	r2, r0
 800c68c:	b928      	cbnz	r0, 800c69a <__i2b+0x1a>
 800c68e:	f240 1145 	movw	r1, #325	; 0x145
 800c692:	4b04      	ldr	r3, [pc, #16]	; (800c6a4 <__i2b+0x24>)
 800c694:	4804      	ldr	r0, [pc, #16]	; (800c6a8 <__i2b+0x28>)
 800c696:	f7fe fc71 	bl	800af7c <__assert_func>
 800c69a:	2301      	movs	r3, #1
 800c69c:	6144      	str	r4, [r0, #20]
 800c69e:	6103      	str	r3, [r0, #16]
 800c6a0:	bd10      	pop	{r4, pc}
 800c6a2:	bf00      	nop
 800c6a4:	0800dd67 	.word	0x0800dd67
 800c6a8:	0800ddd8 	.word	0x0800ddd8

0800c6ac <__multiply>:
 800c6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b0:	4691      	mov	r9, r2
 800c6b2:	690a      	ldr	r2, [r1, #16]
 800c6b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c6b8:	460c      	mov	r4, r1
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	bfbe      	ittt	lt
 800c6be:	460b      	movlt	r3, r1
 800c6c0:	464c      	movlt	r4, r9
 800c6c2:	4699      	movlt	r9, r3
 800c6c4:	6927      	ldr	r7, [r4, #16]
 800c6c6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c6ca:	68a3      	ldr	r3, [r4, #8]
 800c6cc:	6861      	ldr	r1, [r4, #4]
 800c6ce:	eb07 060a 	add.w	r6, r7, sl
 800c6d2:	42b3      	cmp	r3, r6
 800c6d4:	b085      	sub	sp, #20
 800c6d6:	bfb8      	it	lt
 800c6d8:	3101      	addlt	r1, #1
 800c6da:	f7ff fe91 	bl	800c400 <_Balloc>
 800c6de:	b930      	cbnz	r0, 800c6ee <__multiply+0x42>
 800c6e0:	4602      	mov	r2, r0
 800c6e2:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c6e6:	4b43      	ldr	r3, [pc, #268]	; (800c7f4 <__multiply+0x148>)
 800c6e8:	4843      	ldr	r0, [pc, #268]	; (800c7f8 <__multiply+0x14c>)
 800c6ea:	f7fe fc47 	bl	800af7c <__assert_func>
 800c6ee:	f100 0514 	add.w	r5, r0, #20
 800c6f2:	462b      	mov	r3, r5
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c6fa:	4543      	cmp	r3, r8
 800c6fc:	d321      	bcc.n	800c742 <__multiply+0x96>
 800c6fe:	f104 0314 	add.w	r3, r4, #20
 800c702:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c706:	f109 0314 	add.w	r3, r9, #20
 800c70a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c70e:	9202      	str	r2, [sp, #8]
 800c710:	1b3a      	subs	r2, r7, r4
 800c712:	3a15      	subs	r2, #21
 800c714:	f022 0203 	bic.w	r2, r2, #3
 800c718:	3204      	adds	r2, #4
 800c71a:	f104 0115 	add.w	r1, r4, #21
 800c71e:	428f      	cmp	r7, r1
 800c720:	bf38      	it	cc
 800c722:	2204      	movcc	r2, #4
 800c724:	9201      	str	r2, [sp, #4]
 800c726:	9a02      	ldr	r2, [sp, #8]
 800c728:	9303      	str	r3, [sp, #12]
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d80c      	bhi.n	800c748 <__multiply+0x9c>
 800c72e:	2e00      	cmp	r6, #0
 800c730:	dd03      	ble.n	800c73a <__multiply+0x8e>
 800c732:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c736:	2b00      	cmp	r3, #0
 800c738:	d05a      	beq.n	800c7f0 <__multiply+0x144>
 800c73a:	6106      	str	r6, [r0, #16]
 800c73c:	b005      	add	sp, #20
 800c73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c742:	f843 2b04 	str.w	r2, [r3], #4
 800c746:	e7d8      	b.n	800c6fa <__multiply+0x4e>
 800c748:	f8b3 a000 	ldrh.w	sl, [r3]
 800c74c:	f1ba 0f00 	cmp.w	sl, #0
 800c750:	d023      	beq.n	800c79a <__multiply+0xee>
 800c752:	46a9      	mov	r9, r5
 800c754:	f04f 0c00 	mov.w	ip, #0
 800c758:	f104 0e14 	add.w	lr, r4, #20
 800c75c:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c760:	f8d9 1000 	ldr.w	r1, [r9]
 800c764:	fa1f fb82 	uxth.w	fp, r2
 800c768:	b289      	uxth	r1, r1
 800c76a:	fb0a 110b 	mla	r1, sl, fp, r1
 800c76e:	4461      	add	r1, ip
 800c770:	f8d9 c000 	ldr.w	ip, [r9]
 800c774:	0c12      	lsrs	r2, r2, #16
 800c776:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c77a:	fb0a c202 	mla	r2, sl, r2, ip
 800c77e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c782:	b289      	uxth	r1, r1
 800c784:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c788:	4577      	cmp	r7, lr
 800c78a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c78e:	f849 1b04 	str.w	r1, [r9], #4
 800c792:	d8e3      	bhi.n	800c75c <__multiply+0xb0>
 800c794:	9a01      	ldr	r2, [sp, #4]
 800c796:	f845 c002 	str.w	ip, [r5, r2]
 800c79a:	9a03      	ldr	r2, [sp, #12]
 800c79c:	3304      	adds	r3, #4
 800c79e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c7a2:	f1b9 0f00 	cmp.w	r9, #0
 800c7a6:	d021      	beq.n	800c7ec <__multiply+0x140>
 800c7a8:	46ae      	mov	lr, r5
 800c7aa:	f04f 0a00 	mov.w	sl, #0
 800c7ae:	6829      	ldr	r1, [r5, #0]
 800c7b0:	f104 0c14 	add.w	ip, r4, #20
 800c7b4:	f8bc b000 	ldrh.w	fp, [ip]
 800c7b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c7bc:	b289      	uxth	r1, r1
 800c7be:	fb09 220b 	mla	r2, r9, fp, r2
 800c7c2:	4452      	add	r2, sl
 800c7c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c7c8:	f84e 1b04 	str.w	r1, [lr], #4
 800c7cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c7d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c7d4:	f8be 1000 	ldrh.w	r1, [lr]
 800c7d8:	4567      	cmp	r7, ip
 800c7da:	fb09 110a 	mla	r1, r9, sl, r1
 800c7de:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c7e2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c7e6:	d8e5      	bhi.n	800c7b4 <__multiply+0x108>
 800c7e8:	9a01      	ldr	r2, [sp, #4]
 800c7ea:	50a9      	str	r1, [r5, r2]
 800c7ec:	3504      	adds	r5, #4
 800c7ee:	e79a      	b.n	800c726 <__multiply+0x7a>
 800c7f0:	3e01      	subs	r6, #1
 800c7f2:	e79c      	b.n	800c72e <__multiply+0x82>
 800c7f4:	0800dd67 	.word	0x0800dd67
 800c7f8:	0800ddd8 	.word	0x0800ddd8

0800c7fc <__pow5mult>:
 800c7fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c800:	4615      	mov	r5, r2
 800c802:	f012 0203 	ands.w	r2, r2, #3
 800c806:	4606      	mov	r6, r0
 800c808:	460f      	mov	r7, r1
 800c80a:	d007      	beq.n	800c81c <__pow5mult+0x20>
 800c80c:	4c25      	ldr	r4, [pc, #148]	; (800c8a4 <__pow5mult+0xa8>)
 800c80e:	3a01      	subs	r2, #1
 800c810:	2300      	movs	r3, #0
 800c812:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c816:	f7ff fe55 	bl	800c4c4 <__multadd>
 800c81a:	4607      	mov	r7, r0
 800c81c:	10ad      	asrs	r5, r5, #2
 800c81e:	d03d      	beq.n	800c89c <__pow5mult+0xa0>
 800c820:	69f4      	ldr	r4, [r6, #28]
 800c822:	b97c      	cbnz	r4, 800c844 <__pow5mult+0x48>
 800c824:	2010      	movs	r0, #16
 800c826:	f7fc fcc9 	bl	80091bc <malloc>
 800c82a:	4602      	mov	r2, r0
 800c82c:	61f0      	str	r0, [r6, #28]
 800c82e:	b928      	cbnz	r0, 800c83c <__pow5mult+0x40>
 800c830:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c834:	4b1c      	ldr	r3, [pc, #112]	; (800c8a8 <__pow5mult+0xac>)
 800c836:	481d      	ldr	r0, [pc, #116]	; (800c8ac <__pow5mult+0xb0>)
 800c838:	f7fe fba0 	bl	800af7c <__assert_func>
 800c83c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c840:	6004      	str	r4, [r0, #0]
 800c842:	60c4      	str	r4, [r0, #12]
 800c844:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c848:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c84c:	b94c      	cbnz	r4, 800c862 <__pow5mult+0x66>
 800c84e:	f240 2171 	movw	r1, #625	; 0x271
 800c852:	4630      	mov	r0, r6
 800c854:	f7ff ff14 	bl	800c680 <__i2b>
 800c858:	2300      	movs	r3, #0
 800c85a:	4604      	mov	r4, r0
 800c85c:	f8c8 0008 	str.w	r0, [r8, #8]
 800c860:	6003      	str	r3, [r0, #0]
 800c862:	f04f 0900 	mov.w	r9, #0
 800c866:	07eb      	lsls	r3, r5, #31
 800c868:	d50a      	bpl.n	800c880 <__pow5mult+0x84>
 800c86a:	4639      	mov	r1, r7
 800c86c:	4622      	mov	r2, r4
 800c86e:	4630      	mov	r0, r6
 800c870:	f7ff ff1c 	bl	800c6ac <__multiply>
 800c874:	4680      	mov	r8, r0
 800c876:	4639      	mov	r1, r7
 800c878:	4630      	mov	r0, r6
 800c87a:	f7ff fe01 	bl	800c480 <_Bfree>
 800c87e:	4647      	mov	r7, r8
 800c880:	106d      	asrs	r5, r5, #1
 800c882:	d00b      	beq.n	800c89c <__pow5mult+0xa0>
 800c884:	6820      	ldr	r0, [r4, #0]
 800c886:	b938      	cbnz	r0, 800c898 <__pow5mult+0x9c>
 800c888:	4622      	mov	r2, r4
 800c88a:	4621      	mov	r1, r4
 800c88c:	4630      	mov	r0, r6
 800c88e:	f7ff ff0d 	bl	800c6ac <__multiply>
 800c892:	6020      	str	r0, [r4, #0]
 800c894:	f8c0 9000 	str.w	r9, [r0]
 800c898:	4604      	mov	r4, r0
 800c89a:	e7e4      	b.n	800c866 <__pow5mult+0x6a>
 800c89c:	4638      	mov	r0, r7
 800c89e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8a2:	bf00      	nop
 800c8a4:	0800df28 	.word	0x0800df28
 800c8a8:	0800dc4d 	.word	0x0800dc4d
 800c8ac:	0800ddd8 	.word	0x0800ddd8

0800c8b0 <__lshift>:
 800c8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8b4:	460c      	mov	r4, r1
 800c8b6:	4607      	mov	r7, r0
 800c8b8:	4691      	mov	r9, r2
 800c8ba:	6923      	ldr	r3, [r4, #16]
 800c8bc:	6849      	ldr	r1, [r1, #4]
 800c8be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c8c2:	68a3      	ldr	r3, [r4, #8]
 800c8c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c8c8:	f108 0601 	add.w	r6, r8, #1
 800c8cc:	42b3      	cmp	r3, r6
 800c8ce:	db0b      	blt.n	800c8e8 <__lshift+0x38>
 800c8d0:	4638      	mov	r0, r7
 800c8d2:	f7ff fd95 	bl	800c400 <_Balloc>
 800c8d6:	4605      	mov	r5, r0
 800c8d8:	b948      	cbnz	r0, 800c8ee <__lshift+0x3e>
 800c8da:	4602      	mov	r2, r0
 800c8dc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c8e0:	4b27      	ldr	r3, [pc, #156]	; (800c980 <__lshift+0xd0>)
 800c8e2:	4828      	ldr	r0, [pc, #160]	; (800c984 <__lshift+0xd4>)
 800c8e4:	f7fe fb4a 	bl	800af7c <__assert_func>
 800c8e8:	3101      	adds	r1, #1
 800c8ea:	005b      	lsls	r3, r3, #1
 800c8ec:	e7ee      	b.n	800c8cc <__lshift+0x1c>
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	f100 0114 	add.w	r1, r0, #20
 800c8f4:	f100 0210 	add.w	r2, r0, #16
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	4553      	cmp	r3, sl
 800c8fc:	db33      	blt.n	800c966 <__lshift+0xb6>
 800c8fe:	6920      	ldr	r0, [r4, #16]
 800c900:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c904:	f104 0314 	add.w	r3, r4, #20
 800c908:	f019 091f 	ands.w	r9, r9, #31
 800c90c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c910:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c914:	d02b      	beq.n	800c96e <__lshift+0xbe>
 800c916:	468a      	mov	sl, r1
 800c918:	2200      	movs	r2, #0
 800c91a:	f1c9 0e20 	rsb	lr, r9, #32
 800c91e:	6818      	ldr	r0, [r3, #0]
 800c920:	fa00 f009 	lsl.w	r0, r0, r9
 800c924:	4310      	orrs	r0, r2
 800c926:	f84a 0b04 	str.w	r0, [sl], #4
 800c92a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c92e:	459c      	cmp	ip, r3
 800c930:	fa22 f20e 	lsr.w	r2, r2, lr
 800c934:	d8f3      	bhi.n	800c91e <__lshift+0x6e>
 800c936:	ebac 0304 	sub.w	r3, ip, r4
 800c93a:	3b15      	subs	r3, #21
 800c93c:	f023 0303 	bic.w	r3, r3, #3
 800c940:	3304      	adds	r3, #4
 800c942:	f104 0015 	add.w	r0, r4, #21
 800c946:	4584      	cmp	ip, r0
 800c948:	bf38      	it	cc
 800c94a:	2304      	movcc	r3, #4
 800c94c:	50ca      	str	r2, [r1, r3]
 800c94e:	b10a      	cbz	r2, 800c954 <__lshift+0xa4>
 800c950:	f108 0602 	add.w	r6, r8, #2
 800c954:	3e01      	subs	r6, #1
 800c956:	4638      	mov	r0, r7
 800c958:	4621      	mov	r1, r4
 800c95a:	612e      	str	r6, [r5, #16]
 800c95c:	f7ff fd90 	bl	800c480 <_Bfree>
 800c960:	4628      	mov	r0, r5
 800c962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c966:	f842 0f04 	str.w	r0, [r2, #4]!
 800c96a:	3301      	adds	r3, #1
 800c96c:	e7c5      	b.n	800c8fa <__lshift+0x4a>
 800c96e:	3904      	subs	r1, #4
 800c970:	f853 2b04 	ldr.w	r2, [r3], #4
 800c974:	459c      	cmp	ip, r3
 800c976:	f841 2f04 	str.w	r2, [r1, #4]!
 800c97a:	d8f9      	bhi.n	800c970 <__lshift+0xc0>
 800c97c:	e7ea      	b.n	800c954 <__lshift+0xa4>
 800c97e:	bf00      	nop
 800c980:	0800dd67 	.word	0x0800dd67
 800c984:	0800ddd8 	.word	0x0800ddd8

0800c988 <__mcmp>:
 800c988:	4603      	mov	r3, r0
 800c98a:	690a      	ldr	r2, [r1, #16]
 800c98c:	6900      	ldr	r0, [r0, #16]
 800c98e:	b530      	push	{r4, r5, lr}
 800c990:	1a80      	subs	r0, r0, r2
 800c992:	d10d      	bne.n	800c9b0 <__mcmp+0x28>
 800c994:	3314      	adds	r3, #20
 800c996:	3114      	adds	r1, #20
 800c998:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c99c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c9a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c9a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c9a8:	4295      	cmp	r5, r2
 800c9aa:	d002      	beq.n	800c9b2 <__mcmp+0x2a>
 800c9ac:	d304      	bcc.n	800c9b8 <__mcmp+0x30>
 800c9ae:	2001      	movs	r0, #1
 800c9b0:	bd30      	pop	{r4, r5, pc}
 800c9b2:	42a3      	cmp	r3, r4
 800c9b4:	d3f4      	bcc.n	800c9a0 <__mcmp+0x18>
 800c9b6:	e7fb      	b.n	800c9b0 <__mcmp+0x28>
 800c9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9bc:	e7f8      	b.n	800c9b0 <__mcmp+0x28>
	...

0800c9c0 <__mdiff>:
 800c9c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9c4:	460d      	mov	r5, r1
 800c9c6:	4607      	mov	r7, r0
 800c9c8:	4611      	mov	r1, r2
 800c9ca:	4628      	mov	r0, r5
 800c9cc:	4614      	mov	r4, r2
 800c9ce:	f7ff ffdb 	bl	800c988 <__mcmp>
 800c9d2:	1e06      	subs	r6, r0, #0
 800c9d4:	d111      	bne.n	800c9fa <__mdiff+0x3a>
 800c9d6:	4631      	mov	r1, r6
 800c9d8:	4638      	mov	r0, r7
 800c9da:	f7ff fd11 	bl	800c400 <_Balloc>
 800c9de:	4602      	mov	r2, r0
 800c9e0:	b928      	cbnz	r0, 800c9ee <__mdiff+0x2e>
 800c9e2:	f240 2137 	movw	r1, #567	; 0x237
 800c9e6:	4b3a      	ldr	r3, [pc, #232]	; (800cad0 <__mdiff+0x110>)
 800c9e8:	483a      	ldr	r0, [pc, #232]	; (800cad4 <__mdiff+0x114>)
 800c9ea:	f7fe fac7 	bl	800af7c <__assert_func>
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c9f4:	4610      	mov	r0, r2
 800c9f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9fa:	bfa4      	itt	ge
 800c9fc:	4623      	movge	r3, r4
 800c9fe:	462c      	movge	r4, r5
 800ca00:	4638      	mov	r0, r7
 800ca02:	6861      	ldr	r1, [r4, #4]
 800ca04:	bfa6      	itte	ge
 800ca06:	461d      	movge	r5, r3
 800ca08:	2600      	movge	r6, #0
 800ca0a:	2601      	movlt	r6, #1
 800ca0c:	f7ff fcf8 	bl	800c400 <_Balloc>
 800ca10:	4602      	mov	r2, r0
 800ca12:	b918      	cbnz	r0, 800ca1c <__mdiff+0x5c>
 800ca14:	f240 2145 	movw	r1, #581	; 0x245
 800ca18:	4b2d      	ldr	r3, [pc, #180]	; (800cad0 <__mdiff+0x110>)
 800ca1a:	e7e5      	b.n	800c9e8 <__mdiff+0x28>
 800ca1c:	f102 0814 	add.w	r8, r2, #20
 800ca20:	46c2      	mov	sl, r8
 800ca22:	f04f 0c00 	mov.w	ip, #0
 800ca26:	6927      	ldr	r7, [r4, #16]
 800ca28:	60c6      	str	r6, [r0, #12]
 800ca2a:	692e      	ldr	r6, [r5, #16]
 800ca2c:	f104 0014 	add.w	r0, r4, #20
 800ca30:	f105 0914 	add.w	r9, r5, #20
 800ca34:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800ca38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ca3c:	3410      	adds	r4, #16
 800ca3e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800ca42:	f859 3b04 	ldr.w	r3, [r9], #4
 800ca46:	fa1f f18b 	uxth.w	r1, fp
 800ca4a:	4461      	add	r1, ip
 800ca4c:	fa1f fc83 	uxth.w	ip, r3
 800ca50:	0c1b      	lsrs	r3, r3, #16
 800ca52:	eba1 010c 	sub.w	r1, r1, ip
 800ca56:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ca5a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ca5e:	b289      	uxth	r1, r1
 800ca60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800ca64:	454e      	cmp	r6, r9
 800ca66:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ca6a:	f84a 1b04 	str.w	r1, [sl], #4
 800ca6e:	d8e6      	bhi.n	800ca3e <__mdiff+0x7e>
 800ca70:	1b73      	subs	r3, r6, r5
 800ca72:	3b15      	subs	r3, #21
 800ca74:	f023 0303 	bic.w	r3, r3, #3
 800ca78:	3515      	adds	r5, #21
 800ca7a:	3304      	adds	r3, #4
 800ca7c:	42ae      	cmp	r6, r5
 800ca7e:	bf38      	it	cc
 800ca80:	2304      	movcc	r3, #4
 800ca82:	4418      	add	r0, r3
 800ca84:	4443      	add	r3, r8
 800ca86:	461e      	mov	r6, r3
 800ca88:	4605      	mov	r5, r0
 800ca8a:	4575      	cmp	r5, lr
 800ca8c:	d30e      	bcc.n	800caac <__mdiff+0xec>
 800ca8e:	f10e 0103 	add.w	r1, lr, #3
 800ca92:	1a09      	subs	r1, r1, r0
 800ca94:	f021 0103 	bic.w	r1, r1, #3
 800ca98:	3803      	subs	r0, #3
 800ca9a:	4586      	cmp	lr, r0
 800ca9c:	bf38      	it	cc
 800ca9e:	2100      	movcc	r1, #0
 800caa0:	440b      	add	r3, r1
 800caa2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800caa6:	b189      	cbz	r1, 800cacc <__mdiff+0x10c>
 800caa8:	6117      	str	r7, [r2, #16]
 800caaa:	e7a3      	b.n	800c9f4 <__mdiff+0x34>
 800caac:	f855 8b04 	ldr.w	r8, [r5], #4
 800cab0:	fa1f f188 	uxth.w	r1, r8
 800cab4:	4461      	add	r1, ip
 800cab6:	140c      	asrs	r4, r1, #16
 800cab8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cabc:	b289      	uxth	r1, r1
 800cabe:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800cac2:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800cac6:	f846 1b04 	str.w	r1, [r6], #4
 800caca:	e7de      	b.n	800ca8a <__mdiff+0xca>
 800cacc:	3f01      	subs	r7, #1
 800cace:	e7e8      	b.n	800caa2 <__mdiff+0xe2>
 800cad0:	0800dd67 	.word	0x0800dd67
 800cad4:	0800ddd8 	.word	0x0800ddd8

0800cad8 <__ulp>:
 800cad8:	4b0e      	ldr	r3, [pc, #56]	; (800cb14 <__ulp+0x3c>)
 800cada:	400b      	ands	r3, r1
 800cadc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	dc08      	bgt.n	800caf6 <__ulp+0x1e>
 800cae4:	425b      	negs	r3, r3
 800cae6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800caea:	ea4f 5223 	mov.w	r2, r3, asr #20
 800caee:	da04      	bge.n	800cafa <__ulp+0x22>
 800caf0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800caf4:	4113      	asrs	r3, r2
 800caf6:	2200      	movs	r2, #0
 800caf8:	e008      	b.n	800cb0c <__ulp+0x34>
 800cafa:	f1a2 0314 	sub.w	r3, r2, #20
 800cafe:	2b1e      	cmp	r3, #30
 800cb00:	bfd6      	itet	le
 800cb02:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800cb06:	2201      	movgt	r2, #1
 800cb08:	40da      	lsrle	r2, r3
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	4610      	mov	r0, r2
 800cb10:	4770      	bx	lr
 800cb12:	bf00      	nop
 800cb14:	7ff00000 	.word	0x7ff00000

0800cb18 <__b2d>:
 800cb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb1a:	6905      	ldr	r5, [r0, #16]
 800cb1c:	f100 0714 	add.w	r7, r0, #20
 800cb20:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cb24:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cb28:	1f2e      	subs	r6, r5, #4
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	f7ff fd5a 	bl	800c5e4 <__hi0bits>
 800cb30:	f1c0 0220 	rsb	r2, r0, #32
 800cb34:	280a      	cmp	r0, #10
 800cb36:	4603      	mov	r3, r0
 800cb38:	f8df c068 	ldr.w	ip, [pc, #104]	; 800cba4 <__b2d+0x8c>
 800cb3c:	600a      	str	r2, [r1, #0]
 800cb3e:	dc12      	bgt.n	800cb66 <__b2d+0x4e>
 800cb40:	f1c0 0e0b 	rsb	lr, r0, #11
 800cb44:	fa24 f20e 	lsr.w	r2, r4, lr
 800cb48:	42b7      	cmp	r7, r6
 800cb4a:	ea42 010c 	orr.w	r1, r2, ip
 800cb4e:	bf2c      	ite	cs
 800cb50:	2200      	movcs	r2, #0
 800cb52:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800cb56:	3315      	adds	r3, #21
 800cb58:	fa04 f303 	lsl.w	r3, r4, r3
 800cb5c:	fa22 f20e 	lsr.w	r2, r2, lr
 800cb60:	431a      	orrs	r2, r3
 800cb62:	4610      	mov	r0, r2
 800cb64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb66:	42b7      	cmp	r7, r6
 800cb68:	bf2e      	itee	cs
 800cb6a:	2200      	movcs	r2, #0
 800cb6c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800cb70:	f1a5 0608 	subcc.w	r6, r5, #8
 800cb74:	3b0b      	subs	r3, #11
 800cb76:	d012      	beq.n	800cb9e <__b2d+0x86>
 800cb78:	f1c3 0520 	rsb	r5, r3, #32
 800cb7c:	fa22 f105 	lsr.w	r1, r2, r5
 800cb80:	409c      	lsls	r4, r3
 800cb82:	430c      	orrs	r4, r1
 800cb84:	42be      	cmp	r6, r7
 800cb86:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800cb8a:	bf94      	ite	ls
 800cb8c:	2400      	movls	r4, #0
 800cb8e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cb92:	409a      	lsls	r2, r3
 800cb94:	40ec      	lsrs	r4, r5
 800cb96:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800cb9a:	4322      	orrs	r2, r4
 800cb9c:	e7e1      	b.n	800cb62 <__b2d+0x4a>
 800cb9e:	ea44 010c 	orr.w	r1, r4, ip
 800cba2:	e7de      	b.n	800cb62 <__b2d+0x4a>
 800cba4:	3ff00000 	.word	0x3ff00000

0800cba8 <__d2b>:
 800cba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbaa:	2101      	movs	r1, #1
 800cbac:	4617      	mov	r7, r2
 800cbae:	461c      	mov	r4, r3
 800cbb0:	9e08      	ldr	r6, [sp, #32]
 800cbb2:	f7ff fc25 	bl	800c400 <_Balloc>
 800cbb6:	4605      	mov	r5, r0
 800cbb8:	b930      	cbnz	r0, 800cbc8 <__d2b+0x20>
 800cbba:	4602      	mov	r2, r0
 800cbbc:	f240 310f 	movw	r1, #783	; 0x30f
 800cbc0:	4b22      	ldr	r3, [pc, #136]	; (800cc4c <__d2b+0xa4>)
 800cbc2:	4823      	ldr	r0, [pc, #140]	; (800cc50 <__d2b+0xa8>)
 800cbc4:	f7fe f9da 	bl	800af7c <__assert_func>
 800cbc8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800cbcc:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800cbd0:	bb24      	cbnz	r4, 800cc1c <__d2b+0x74>
 800cbd2:	2f00      	cmp	r7, #0
 800cbd4:	9301      	str	r3, [sp, #4]
 800cbd6:	d026      	beq.n	800cc26 <__d2b+0x7e>
 800cbd8:	4668      	mov	r0, sp
 800cbda:	9700      	str	r7, [sp, #0]
 800cbdc:	f7ff fd22 	bl	800c624 <__lo0bits>
 800cbe0:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cbe4:	b1e8      	cbz	r0, 800cc22 <__d2b+0x7a>
 800cbe6:	f1c0 0320 	rsb	r3, r0, #32
 800cbea:	fa02 f303 	lsl.w	r3, r2, r3
 800cbee:	430b      	orrs	r3, r1
 800cbf0:	40c2      	lsrs	r2, r0
 800cbf2:	616b      	str	r3, [r5, #20]
 800cbf4:	9201      	str	r2, [sp, #4]
 800cbf6:	9b01      	ldr	r3, [sp, #4]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	bf14      	ite	ne
 800cbfc:	2102      	movne	r1, #2
 800cbfe:	2101      	moveq	r1, #1
 800cc00:	61ab      	str	r3, [r5, #24]
 800cc02:	6129      	str	r1, [r5, #16]
 800cc04:	b1bc      	cbz	r4, 800cc36 <__d2b+0x8e>
 800cc06:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800cc0a:	4404      	add	r4, r0
 800cc0c:	6034      	str	r4, [r6, #0]
 800cc0e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cc12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc14:	6018      	str	r0, [r3, #0]
 800cc16:	4628      	mov	r0, r5
 800cc18:	b003      	add	sp, #12
 800cc1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc20:	e7d7      	b.n	800cbd2 <__d2b+0x2a>
 800cc22:	6169      	str	r1, [r5, #20]
 800cc24:	e7e7      	b.n	800cbf6 <__d2b+0x4e>
 800cc26:	a801      	add	r0, sp, #4
 800cc28:	f7ff fcfc 	bl	800c624 <__lo0bits>
 800cc2c:	9b01      	ldr	r3, [sp, #4]
 800cc2e:	2101      	movs	r1, #1
 800cc30:	616b      	str	r3, [r5, #20]
 800cc32:	3020      	adds	r0, #32
 800cc34:	e7e5      	b.n	800cc02 <__d2b+0x5a>
 800cc36:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cc3a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800cc3e:	6030      	str	r0, [r6, #0]
 800cc40:	6918      	ldr	r0, [r3, #16]
 800cc42:	f7ff fccf 	bl	800c5e4 <__hi0bits>
 800cc46:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800cc4a:	e7e2      	b.n	800cc12 <__d2b+0x6a>
 800cc4c:	0800dd67 	.word	0x0800dd67
 800cc50:	0800ddd8 	.word	0x0800ddd8

0800cc54 <__ratio>:
 800cc54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc58:	4688      	mov	r8, r1
 800cc5a:	4669      	mov	r1, sp
 800cc5c:	4681      	mov	r9, r0
 800cc5e:	f7ff ff5b 	bl	800cb18 <__b2d>
 800cc62:	460f      	mov	r7, r1
 800cc64:	4604      	mov	r4, r0
 800cc66:	460d      	mov	r5, r1
 800cc68:	4640      	mov	r0, r8
 800cc6a:	a901      	add	r1, sp, #4
 800cc6c:	f7ff ff54 	bl	800cb18 <__b2d>
 800cc70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cc74:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cc78:	468b      	mov	fp, r1
 800cc7a:	eba3 0c02 	sub.w	ip, r3, r2
 800cc7e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cc82:	1a9b      	subs	r3, r3, r2
 800cc84:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	bfd5      	itete	le
 800cc8c:	460a      	movle	r2, r1
 800cc8e:	462a      	movgt	r2, r5
 800cc90:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cc94:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cc98:	bfd8      	it	le
 800cc9a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cc9e:	465b      	mov	r3, fp
 800cca0:	4602      	mov	r2, r0
 800cca2:	4639      	mov	r1, r7
 800cca4:	4620      	mov	r0, r4
 800cca6:	f7f3 fdb1 	bl	800080c <__aeabi_ddiv>
 800ccaa:	b003      	add	sp, #12
 800ccac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ccb0 <__copybits>:
 800ccb0:	3901      	subs	r1, #1
 800ccb2:	b570      	push	{r4, r5, r6, lr}
 800ccb4:	1149      	asrs	r1, r1, #5
 800ccb6:	6914      	ldr	r4, [r2, #16]
 800ccb8:	3101      	adds	r1, #1
 800ccba:	f102 0314 	add.w	r3, r2, #20
 800ccbe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ccc2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ccc6:	1f05      	subs	r5, r0, #4
 800ccc8:	42a3      	cmp	r3, r4
 800ccca:	d30c      	bcc.n	800cce6 <__copybits+0x36>
 800cccc:	1aa3      	subs	r3, r4, r2
 800ccce:	3b11      	subs	r3, #17
 800ccd0:	f023 0303 	bic.w	r3, r3, #3
 800ccd4:	3211      	adds	r2, #17
 800ccd6:	42a2      	cmp	r2, r4
 800ccd8:	bf88      	it	hi
 800ccda:	2300      	movhi	r3, #0
 800ccdc:	4418      	add	r0, r3
 800ccde:	2300      	movs	r3, #0
 800cce0:	4288      	cmp	r0, r1
 800cce2:	d305      	bcc.n	800ccf0 <__copybits+0x40>
 800cce4:	bd70      	pop	{r4, r5, r6, pc}
 800cce6:	f853 6b04 	ldr.w	r6, [r3], #4
 800ccea:	f845 6f04 	str.w	r6, [r5, #4]!
 800ccee:	e7eb      	b.n	800ccc8 <__copybits+0x18>
 800ccf0:	f840 3b04 	str.w	r3, [r0], #4
 800ccf4:	e7f4      	b.n	800cce0 <__copybits+0x30>

0800ccf6 <__any_on>:
 800ccf6:	f100 0214 	add.w	r2, r0, #20
 800ccfa:	6900      	ldr	r0, [r0, #16]
 800ccfc:	114b      	asrs	r3, r1, #5
 800ccfe:	4298      	cmp	r0, r3
 800cd00:	b510      	push	{r4, lr}
 800cd02:	db11      	blt.n	800cd28 <__any_on+0x32>
 800cd04:	dd0a      	ble.n	800cd1c <__any_on+0x26>
 800cd06:	f011 011f 	ands.w	r1, r1, #31
 800cd0a:	d007      	beq.n	800cd1c <__any_on+0x26>
 800cd0c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cd10:	fa24 f001 	lsr.w	r0, r4, r1
 800cd14:	fa00 f101 	lsl.w	r1, r0, r1
 800cd18:	428c      	cmp	r4, r1
 800cd1a:	d10b      	bne.n	800cd34 <__any_on+0x3e>
 800cd1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cd20:	4293      	cmp	r3, r2
 800cd22:	d803      	bhi.n	800cd2c <__any_on+0x36>
 800cd24:	2000      	movs	r0, #0
 800cd26:	bd10      	pop	{r4, pc}
 800cd28:	4603      	mov	r3, r0
 800cd2a:	e7f7      	b.n	800cd1c <__any_on+0x26>
 800cd2c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cd30:	2900      	cmp	r1, #0
 800cd32:	d0f5      	beq.n	800cd20 <__any_on+0x2a>
 800cd34:	2001      	movs	r0, #1
 800cd36:	e7f6      	b.n	800cd26 <__any_on+0x30>

0800cd38 <__ascii_wctomb>:
 800cd38:	4603      	mov	r3, r0
 800cd3a:	4608      	mov	r0, r1
 800cd3c:	b141      	cbz	r1, 800cd50 <__ascii_wctomb+0x18>
 800cd3e:	2aff      	cmp	r2, #255	; 0xff
 800cd40:	d904      	bls.n	800cd4c <__ascii_wctomb+0x14>
 800cd42:	228a      	movs	r2, #138	; 0x8a
 800cd44:	f04f 30ff 	mov.w	r0, #4294967295
 800cd48:	601a      	str	r2, [r3, #0]
 800cd4a:	4770      	bx	lr
 800cd4c:	2001      	movs	r0, #1
 800cd4e:	700a      	strb	r2, [r1, #0]
 800cd50:	4770      	bx	lr

0800cd52 <__ssputs_r>:
 800cd52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd56:	461f      	mov	r7, r3
 800cd58:	688e      	ldr	r6, [r1, #8]
 800cd5a:	4682      	mov	sl, r0
 800cd5c:	42be      	cmp	r6, r7
 800cd5e:	460c      	mov	r4, r1
 800cd60:	4690      	mov	r8, r2
 800cd62:	680b      	ldr	r3, [r1, #0]
 800cd64:	d82c      	bhi.n	800cdc0 <__ssputs_r+0x6e>
 800cd66:	898a      	ldrh	r2, [r1, #12]
 800cd68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cd6c:	d026      	beq.n	800cdbc <__ssputs_r+0x6a>
 800cd6e:	6965      	ldr	r5, [r4, #20]
 800cd70:	6909      	ldr	r1, [r1, #16]
 800cd72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd76:	eba3 0901 	sub.w	r9, r3, r1
 800cd7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd7e:	1c7b      	adds	r3, r7, #1
 800cd80:	444b      	add	r3, r9
 800cd82:	106d      	asrs	r5, r5, #1
 800cd84:	429d      	cmp	r5, r3
 800cd86:	bf38      	it	cc
 800cd88:	461d      	movcc	r5, r3
 800cd8a:	0553      	lsls	r3, r2, #21
 800cd8c:	d527      	bpl.n	800cdde <__ssputs_r+0x8c>
 800cd8e:	4629      	mov	r1, r5
 800cd90:	f7fc fa44 	bl	800921c <_malloc_r>
 800cd94:	4606      	mov	r6, r0
 800cd96:	b360      	cbz	r0, 800cdf2 <__ssputs_r+0xa0>
 800cd98:	464a      	mov	r2, r9
 800cd9a:	6921      	ldr	r1, [r4, #16]
 800cd9c:	f7fe f8d5 	bl	800af4a <memcpy>
 800cda0:	89a3      	ldrh	r3, [r4, #12]
 800cda2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cda6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdaa:	81a3      	strh	r3, [r4, #12]
 800cdac:	6126      	str	r6, [r4, #16]
 800cdae:	444e      	add	r6, r9
 800cdb0:	6026      	str	r6, [r4, #0]
 800cdb2:	463e      	mov	r6, r7
 800cdb4:	6165      	str	r5, [r4, #20]
 800cdb6:	eba5 0509 	sub.w	r5, r5, r9
 800cdba:	60a5      	str	r5, [r4, #8]
 800cdbc:	42be      	cmp	r6, r7
 800cdbe:	d900      	bls.n	800cdc2 <__ssputs_r+0x70>
 800cdc0:	463e      	mov	r6, r7
 800cdc2:	4632      	mov	r2, r6
 800cdc4:	4641      	mov	r1, r8
 800cdc6:	6820      	ldr	r0, [r4, #0]
 800cdc8:	f000 f9d8 	bl	800d17c <memmove>
 800cdcc:	2000      	movs	r0, #0
 800cdce:	68a3      	ldr	r3, [r4, #8]
 800cdd0:	1b9b      	subs	r3, r3, r6
 800cdd2:	60a3      	str	r3, [r4, #8]
 800cdd4:	6823      	ldr	r3, [r4, #0]
 800cdd6:	4433      	add	r3, r6
 800cdd8:	6023      	str	r3, [r4, #0]
 800cdda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdde:	462a      	mov	r2, r5
 800cde0:	f000 fa01 	bl	800d1e6 <_realloc_r>
 800cde4:	4606      	mov	r6, r0
 800cde6:	2800      	cmp	r0, #0
 800cde8:	d1e0      	bne.n	800cdac <__ssputs_r+0x5a>
 800cdea:	4650      	mov	r0, sl
 800cdec:	6921      	ldr	r1, [r4, #16]
 800cdee:	f7fe ff53 	bl	800bc98 <_free_r>
 800cdf2:	230c      	movs	r3, #12
 800cdf4:	f8ca 3000 	str.w	r3, [sl]
 800cdf8:	89a3      	ldrh	r3, [r4, #12]
 800cdfa:	f04f 30ff 	mov.w	r0, #4294967295
 800cdfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce02:	81a3      	strh	r3, [r4, #12]
 800ce04:	e7e9      	b.n	800cdda <__ssputs_r+0x88>
	...

0800ce08 <_svfiprintf_r>:
 800ce08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce0c:	4698      	mov	r8, r3
 800ce0e:	898b      	ldrh	r3, [r1, #12]
 800ce10:	4607      	mov	r7, r0
 800ce12:	061b      	lsls	r3, r3, #24
 800ce14:	460d      	mov	r5, r1
 800ce16:	4614      	mov	r4, r2
 800ce18:	b09d      	sub	sp, #116	; 0x74
 800ce1a:	d50e      	bpl.n	800ce3a <_svfiprintf_r+0x32>
 800ce1c:	690b      	ldr	r3, [r1, #16]
 800ce1e:	b963      	cbnz	r3, 800ce3a <_svfiprintf_r+0x32>
 800ce20:	2140      	movs	r1, #64	; 0x40
 800ce22:	f7fc f9fb 	bl	800921c <_malloc_r>
 800ce26:	6028      	str	r0, [r5, #0]
 800ce28:	6128      	str	r0, [r5, #16]
 800ce2a:	b920      	cbnz	r0, 800ce36 <_svfiprintf_r+0x2e>
 800ce2c:	230c      	movs	r3, #12
 800ce2e:	603b      	str	r3, [r7, #0]
 800ce30:	f04f 30ff 	mov.w	r0, #4294967295
 800ce34:	e0d0      	b.n	800cfd8 <_svfiprintf_r+0x1d0>
 800ce36:	2340      	movs	r3, #64	; 0x40
 800ce38:	616b      	str	r3, [r5, #20]
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce3e:	2320      	movs	r3, #32
 800ce40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce44:	2330      	movs	r3, #48	; 0x30
 800ce46:	f04f 0901 	mov.w	r9, #1
 800ce4a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce4e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800cff0 <_svfiprintf_r+0x1e8>
 800ce52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce56:	4623      	mov	r3, r4
 800ce58:	469a      	mov	sl, r3
 800ce5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce5e:	b10a      	cbz	r2, 800ce64 <_svfiprintf_r+0x5c>
 800ce60:	2a25      	cmp	r2, #37	; 0x25
 800ce62:	d1f9      	bne.n	800ce58 <_svfiprintf_r+0x50>
 800ce64:	ebba 0b04 	subs.w	fp, sl, r4
 800ce68:	d00b      	beq.n	800ce82 <_svfiprintf_r+0x7a>
 800ce6a:	465b      	mov	r3, fp
 800ce6c:	4622      	mov	r2, r4
 800ce6e:	4629      	mov	r1, r5
 800ce70:	4638      	mov	r0, r7
 800ce72:	f7ff ff6e 	bl	800cd52 <__ssputs_r>
 800ce76:	3001      	adds	r0, #1
 800ce78:	f000 80a9 	beq.w	800cfce <_svfiprintf_r+0x1c6>
 800ce7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce7e:	445a      	add	r2, fp
 800ce80:	9209      	str	r2, [sp, #36]	; 0x24
 800ce82:	f89a 3000 	ldrb.w	r3, [sl]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	f000 80a1 	beq.w	800cfce <_svfiprintf_r+0x1c6>
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce96:	f10a 0a01 	add.w	sl, sl, #1
 800ce9a:	9304      	str	r3, [sp, #16]
 800ce9c:	9307      	str	r3, [sp, #28]
 800ce9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cea2:	931a      	str	r3, [sp, #104]	; 0x68
 800cea4:	4654      	mov	r4, sl
 800cea6:	2205      	movs	r2, #5
 800cea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceac:	4850      	ldr	r0, [pc, #320]	; (800cff0 <_svfiprintf_r+0x1e8>)
 800ceae:	f7fe f83e 	bl	800af2e <memchr>
 800ceb2:	9a04      	ldr	r2, [sp, #16]
 800ceb4:	b9d8      	cbnz	r0, 800ceee <_svfiprintf_r+0xe6>
 800ceb6:	06d0      	lsls	r0, r2, #27
 800ceb8:	bf44      	itt	mi
 800ceba:	2320      	movmi	r3, #32
 800cebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cec0:	0711      	lsls	r1, r2, #28
 800cec2:	bf44      	itt	mi
 800cec4:	232b      	movmi	r3, #43	; 0x2b
 800cec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ceca:	f89a 3000 	ldrb.w	r3, [sl]
 800cece:	2b2a      	cmp	r3, #42	; 0x2a
 800ced0:	d015      	beq.n	800cefe <_svfiprintf_r+0xf6>
 800ced2:	4654      	mov	r4, sl
 800ced4:	2000      	movs	r0, #0
 800ced6:	f04f 0c0a 	mov.w	ip, #10
 800ceda:	9a07      	ldr	r2, [sp, #28]
 800cedc:	4621      	mov	r1, r4
 800cede:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cee2:	3b30      	subs	r3, #48	; 0x30
 800cee4:	2b09      	cmp	r3, #9
 800cee6:	d94d      	bls.n	800cf84 <_svfiprintf_r+0x17c>
 800cee8:	b1b0      	cbz	r0, 800cf18 <_svfiprintf_r+0x110>
 800ceea:	9207      	str	r2, [sp, #28]
 800ceec:	e014      	b.n	800cf18 <_svfiprintf_r+0x110>
 800ceee:	eba0 0308 	sub.w	r3, r0, r8
 800cef2:	fa09 f303 	lsl.w	r3, r9, r3
 800cef6:	4313      	orrs	r3, r2
 800cef8:	46a2      	mov	sl, r4
 800cefa:	9304      	str	r3, [sp, #16]
 800cefc:	e7d2      	b.n	800cea4 <_svfiprintf_r+0x9c>
 800cefe:	9b03      	ldr	r3, [sp, #12]
 800cf00:	1d19      	adds	r1, r3, #4
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	9103      	str	r1, [sp, #12]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	bfbb      	ittet	lt
 800cf0a:	425b      	neglt	r3, r3
 800cf0c:	f042 0202 	orrlt.w	r2, r2, #2
 800cf10:	9307      	strge	r3, [sp, #28]
 800cf12:	9307      	strlt	r3, [sp, #28]
 800cf14:	bfb8      	it	lt
 800cf16:	9204      	strlt	r2, [sp, #16]
 800cf18:	7823      	ldrb	r3, [r4, #0]
 800cf1a:	2b2e      	cmp	r3, #46	; 0x2e
 800cf1c:	d10c      	bne.n	800cf38 <_svfiprintf_r+0x130>
 800cf1e:	7863      	ldrb	r3, [r4, #1]
 800cf20:	2b2a      	cmp	r3, #42	; 0x2a
 800cf22:	d134      	bne.n	800cf8e <_svfiprintf_r+0x186>
 800cf24:	9b03      	ldr	r3, [sp, #12]
 800cf26:	3402      	adds	r4, #2
 800cf28:	1d1a      	adds	r2, r3, #4
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	9203      	str	r2, [sp, #12]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	bfb8      	it	lt
 800cf32:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf36:	9305      	str	r3, [sp, #20]
 800cf38:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800cff4 <_svfiprintf_r+0x1ec>
 800cf3c:	2203      	movs	r2, #3
 800cf3e:	4650      	mov	r0, sl
 800cf40:	7821      	ldrb	r1, [r4, #0]
 800cf42:	f7fd fff4 	bl	800af2e <memchr>
 800cf46:	b138      	cbz	r0, 800cf58 <_svfiprintf_r+0x150>
 800cf48:	2240      	movs	r2, #64	; 0x40
 800cf4a:	9b04      	ldr	r3, [sp, #16]
 800cf4c:	eba0 000a 	sub.w	r0, r0, sl
 800cf50:	4082      	lsls	r2, r0
 800cf52:	4313      	orrs	r3, r2
 800cf54:	3401      	adds	r4, #1
 800cf56:	9304      	str	r3, [sp, #16]
 800cf58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf5c:	2206      	movs	r2, #6
 800cf5e:	4826      	ldr	r0, [pc, #152]	; (800cff8 <_svfiprintf_r+0x1f0>)
 800cf60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf64:	f7fd ffe3 	bl	800af2e <memchr>
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	d038      	beq.n	800cfde <_svfiprintf_r+0x1d6>
 800cf6c:	4b23      	ldr	r3, [pc, #140]	; (800cffc <_svfiprintf_r+0x1f4>)
 800cf6e:	bb1b      	cbnz	r3, 800cfb8 <_svfiprintf_r+0x1b0>
 800cf70:	9b03      	ldr	r3, [sp, #12]
 800cf72:	3307      	adds	r3, #7
 800cf74:	f023 0307 	bic.w	r3, r3, #7
 800cf78:	3308      	adds	r3, #8
 800cf7a:	9303      	str	r3, [sp, #12]
 800cf7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf7e:	4433      	add	r3, r6
 800cf80:	9309      	str	r3, [sp, #36]	; 0x24
 800cf82:	e768      	b.n	800ce56 <_svfiprintf_r+0x4e>
 800cf84:	460c      	mov	r4, r1
 800cf86:	2001      	movs	r0, #1
 800cf88:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf8c:	e7a6      	b.n	800cedc <_svfiprintf_r+0xd4>
 800cf8e:	2300      	movs	r3, #0
 800cf90:	f04f 0c0a 	mov.w	ip, #10
 800cf94:	4619      	mov	r1, r3
 800cf96:	3401      	adds	r4, #1
 800cf98:	9305      	str	r3, [sp, #20]
 800cf9a:	4620      	mov	r0, r4
 800cf9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfa0:	3a30      	subs	r2, #48	; 0x30
 800cfa2:	2a09      	cmp	r2, #9
 800cfa4:	d903      	bls.n	800cfae <_svfiprintf_r+0x1a6>
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d0c6      	beq.n	800cf38 <_svfiprintf_r+0x130>
 800cfaa:	9105      	str	r1, [sp, #20]
 800cfac:	e7c4      	b.n	800cf38 <_svfiprintf_r+0x130>
 800cfae:	4604      	mov	r4, r0
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfb6:	e7f0      	b.n	800cf9a <_svfiprintf_r+0x192>
 800cfb8:	ab03      	add	r3, sp, #12
 800cfba:	9300      	str	r3, [sp, #0]
 800cfbc:	462a      	mov	r2, r5
 800cfbe:	4638      	mov	r0, r7
 800cfc0:	4b0f      	ldr	r3, [pc, #60]	; (800d000 <_svfiprintf_r+0x1f8>)
 800cfc2:	a904      	add	r1, sp, #16
 800cfc4:	f7fd f948 	bl	800a258 <_printf_float>
 800cfc8:	1c42      	adds	r2, r0, #1
 800cfca:	4606      	mov	r6, r0
 800cfcc:	d1d6      	bne.n	800cf7c <_svfiprintf_r+0x174>
 800cfce:	89ab      	ldrh	r3, [r5, #12]
 800cfd0:	065b      	lsls	r3, r3, #25
 800cfd2:	f53f af2d 	bmi.w	800ce30 <_svfiprintf_r+0x28>
 800cfd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfd8:	b01d      	add	sp, #116	; 0x74
 800cfda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfde:	ab03      	add	r3, sp, #12
 800cfe0:	9300      	str	r3, [sp, #0]
 800cfe2:	462a      	mov	r2, r5
 800cfe4:	4638      	mov	r0, r7
 800cfe6:	4b06      	ldr	r3, [pc, #24]	; (800d000 <_svfiprintf_r+0x1f8>)
 800cfe8:	a904      	add	r1, sp, #16
 800cfea:	f7fd fbd5 	bl	800a798 <_printf_i>
 800cfee:	e7eb      	b.n	800cfc8 <_svfiprintf_r+0x1c0>
 800cff0:	0800df34 	.word	0x0800df34
 800cff4:	0800df3a 	.word	0x0800df3a
 800cff8:	0800df3e 	.word	0x0800df3e
 800cffc:	0800a259 	.word	0x0800a259
 800d000:	0800cd53 	.word	0x0800cd53

0800d004 <__sflush_r>:
 800d004:	898a      	ldrh	r2, [r1, #12]
 800d006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d008:	4605      	mov	r5, r0
 800d00a:	0710      	lsls	r0, r2, #28
 800d00c:	460c      	mov	r4, r1
 800d00e:	d457      	bmi.n	800d0c0 <__sflush_r+0xbc>
 800d010:	684b      	ldr	r3, [r1, #4]
 800d012:	2b00      	cmp	r3, #0
 800d014:	dc04      	bgt.n	800d020 <__sflush_r+0x1c>
 800d016:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d018:	2b00      	cmp	r3, #0
 800d01a:	dc01      	bgt.n	800d020 <__sflush_r+0x1c>
 800d01c:	2000      	movs	r0, #0
 800d01e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d020:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d022:	2e00      	cmp	r6, #0
 800d024:	d0fa      	beq.n	800d01c <__sflush_r+0x18>
 800d026:	2300      	movs	r3, #0
 800d028:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d02c:	682f      	ldr	r7, [r5, #0]
 800d02e:	6a21      	ldr	r1, [r4, #32]
 800d030:	602b      	str	r3, [r5, #0]
 800d032:	d032      	beq.n	800d09a <__sflush_r+0x96>
 800d034:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d036:	89a3      	ldrh	r3, [r4, #12]
 800d038:	075a      	lsls	r2, r3, #29
 800d03a:	d505      	bpl.n	800d048 <__sflush_r+0x44>
 800d03c:	6863      	ldr	r3, [r4, #4]
 800d03e:	1ac0      	subs	r0, r0, r3
 800d040:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d042:	b10b      	cbz	r3, 800d048 <__sflush_r+0x44>
 800d044:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d046:	1ac0      	subs	r0, r0, r3
 800d048:	2300      	movs	r3, #0
 800d04a:	4602      	mov	r2, r0
 800d04c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d04e:	4628      	mov	r0, r5
 800d050:	6a21      	ldr	r1, [r4, #32]
 800d052:	47b0      	blx	r6
 800d054:	1c43      	adds	r3, r0, #1
 800d056:	89a3      	ldrh	r3, [r4, #12]
 800d058:	d106      	bne.n	800d068 <__sflush_r+0x64>
 800d05a:	6829      	ldr	r1, [r5, #0]
 800d05c:	291d      	cmp	r1, #29
 800d05e:	d82b      	bhi.n	800d0b8 <__sflush_r+0xb4>
 800d060:	4a28      	ldr	r2, [pc, #160]	; (800d104 <__sflush_r+0x100>)
 800d062:	410a      	asrs	r2, r1
 800d064:	07d6      	lsls	r6, r2, #31
 800d066:	d427      	bmi.n	800d0b8 <__sflush_r+0xb4>
 800d068:	2200      	movs	r2, #0
 800d06a:	6062      	str	r2, [r4, #4]
 800d06c:	6922      	ldr	r2, [r4, #16]
 800d06e:	04d9      	lsls	r1, r3, #19
 800d070:	6022      	str	r2, [r4, #0]
 800d072:	d504      	bpl.n	800d07e <__sflush_r+0x7a>
 800d074:	1c42      	adds	r2, r0, #1
 800d076:	d101      	bne.n	800d07c <__sflush_r+0x78>
 800d078:	682b      	ldr	r3, [r5, #0]
 800d07a:	b903      	cbnz	r3, 800d07e <__sflush_r+0x7a>
 800d07c:	6560      	str	r0, [r4, #84]	; 0x54
 800d07e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d080:	602f      	str	r7, [r5, #0]
 800d082:	2900      	cmp	r1, #0
 800d084:	d0ca      	beq.n	800d01c <__sflush_r+0x18>
 800d086:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d08a:	4299      	cmp	r1, r3
 800d08c:	d002      	beq.n	800d094 <__sflush_r+0x90>
 800d08e:	4628      	mov	r0, r5
 800d090:	f7fe fe02 	bl	800bc98 <_free_r>
 800d094:	2000      	movs	r0, #0
 800d096:	6360      	str	r0, [r4, #52]	; 0x34
 800d098:	e7c1      	b.n	800d01e <__sflush_r+0x1a>
 800d09a:	2301      	movs	r3, #1
 800d09c:	4628      	mov	r0, r5
 800d09e:	47b0      	blx	r6
 800d0a0:	1c41      	adds	r1, r0, #1
 800d0a2:	d1c8      	bne.n	800d036 <__sflush_r+0x32>
 800d0a4:	682b      	ldr	r3, [r5, #0]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d0c5      	beq.n	800d036 <__sflush_r+0x32>
 800d0aa:	2b1d      	cmp	r3, #29
 800d0ac:	d001      	beq.n	800d0b2 <__sflush_r+0xae>
 800d0ae:	2b16      	cmp	r3, #22
 800d0b0:	d101      	bne.n	800d0b6 <__sflush_r+0xb2>
 800d0b2:	602f      	str	r7, [r5, #0]
 800d0b4:	e7b2      	b.n	800d01c <__sflush_r+0x18>
 800d0b6:	89a3      	ldrh	r3, [r4, #12]
 800d0b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0bc:	81a3      	strh	r3, [r4, #12]
 800d0be:	e7ae      	b.n	800d01e <__sflush_r+0x1a>
 800d0c0:	690f      	ldr	r7, [r1, #16]
 800d0c2:	2f00      	cmp	r7, #0
 800d0c4:	d0aa      	beq.n	800d01c <__sflush_r+0x18>
 800d0c6:	0793      	lsls	r3, r2, #30
 800d0c8:	bf18      	it	ne
 800d0ca:	2300      	movne	r3, #0
 800d0cc:	680e      	ldr	r6, [r1, #0]
 800d0ce:	bf08      	it	eq
 800d0d0:	694b      	ldreq	r3, [r1, #20]
 800d0d2:	1bf6      	subs	r6, r6, r7
 800d0d4:	600f      	str	r7, [r1, #0]
 800d0d6:	608b      	str	r3, [r1, #8]
 800d0d8:	2e00      	cmp	r6, #0
 800d0da:	dd9f      	ble.n	800d01c <__sflush_r+0x18>
 800d0dc:	4633      	mov	r3, r6
 800d0de:	463a      	mov	r2, r7
 800d0e0:	4628      	mov	r0, r5
 800d0e2:	6a21      	ldr	r1, [r4, #32]
 800d0e4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d0e8:	47e0      	blx	ip
 800d0ea:	2800      	cmp	r0, #0
 800d0ec:	dc06      	bgt.n	800d0fc <__sflush_r+0xf8>
 800d0ee:	89a3      	ldrh	r3, [r4, #12]
 800d0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0f8:	81a3      	strh	r3, [r4, #12]
 800d0fa:	e790      	b.n	800d01e <__sflush_r+0x1a>
 800d0fc:	4407      	add	r7, r0
 800d0fe:	1a36      	subs	r6, r6, r0
 800d100:	e7ea      	b.n	800d0d8 <__sflush_r+0xd4>
 800d102:	bf00      	nop
 800d104:	dfbffffe 	.word	0xdfbffffe

0800d108 <_fflush_r>:
 800d108:	b538      	push	{r3, r4, r5, lr}
 800d10a:	690b      	ldr	r3, [r1, #16]
 800d10c:	4605      	mov	r5, r0
 800d10e:	460c      	mov	r4, r1
 800d110:	b913      	cbnz	r3, 800d118 <_fflush_r+0x10>
 800d112:	2500      	movs	r5, #0
 800d114:	4628      	mov	r0, r5
 800d116:	bd38      	pop	{r3, r4, r5, pc}
 800d118:	b118      	cbz	r0, 800d122 <_fflush_r+0x1a>
 800d11a:	6a03      	ldr	r3, [r0, #32]
 800d11c:	b90b      	cbnz	r3, 800d122 <_fflush_r+0x1a>
 800d11e:	f7fd fce9 	bl	800aaf4 <__sinit>
 800d122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d0f3      	beq.n	800d112 <_fflush_r+0xa>
 800d12a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d12c:	07d0      	lsls	r0, r2, #31
 800d12e:	d404      	bmi.n	800d13a <_fflush_r+0x32>
 800d130:	0599      	lsls	r1, r3, #22
 800d132:	d402      	bmi.n	800d13a <_fflush_r+0x32>
 800d134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d136:	f7fd fef0 	bl	800af1a <__retarget_lock_acquire_recursive>
 800d13a:	4628      	mov	r0, r5
 800d13c:	4621      	mov	r1, r4
 800d13e:	f7ff ff61 	bl	800d004 <__sflush_r>
 800d142:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d144:	4605      	mov	r5, r0
 800d146:	07da      	lsls	r2, r3, #31
 800d148:	d4e4      	bmi.n	800d114 <_fflush_r+0xc>
 800d14a:	89a3      	ldrh	r3, [r4, #12]
 800d14c:	059b      	lsls	r3, r3, #22
 800d14e:	d4e1      	bmi.n	800d114 <_fflush_r+0xc>
 800d150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d152:	f7fd fee3 	bl	800af1c <__retarget_lock_release_recursive>
 800d156:	e7dd      	b.n	800d114 <_fflush_r+0xc>

0800d158 <fiprintf>:
 800d158:	b40e      	push	{r1, r2, r3}
 800d15a:	b503      	push	{r0, r1, lr}
 800d15c:	4601      	mov	r1, r0
 800d15e:	ab03      	add	r3, sp, #12
 800d160:	4805      	ldr	r0, [pc, #20]	; (800d178 <fiprintf+0x20>)
 800d162:	f853 2b04 	ldr.w	r2, [r3], #4
 800d166:	6800      	ldr	r0, [r0, #0]
 800d168:	9301      	str	r3, [sp, #4]
 800d16a:	f000 f893 	bl	800d294 <_vfiprintf_r>
 800d16e:	b002      	add	sp, #8
 800d170:	f85d eb04 	ldr.w	lr, [sp], #4
 800d174:	b003      	add	sp, #12
 800d176:	4770      	bx	lr
 800d178:	200001d4 	.word	0x200001d4

0800d17c <memmove>:
 800d17c:	4288      	cmp	r0, r1
 800d17e:	b510      	push	{r4, lr}
 800d180:	eb01 0402 	add.w	r4, r1, r2
 800d184:	d902      	bls.n	800d18c <memmove+0x10>
 800d186:	4284      	cmp	r4, r0
 800d188:	4623      	mov	r3, r4
 800d18a:	d807      	bhi.n	800d19c <memmove+0x20>
 800d18c:	1e43      	subs	r3, r0, #1
 800d18e:	42a1      	cmp	r1, r4
 800d190:	d008      	beq.n	800d1a4 <memmove+0x28>
 800d192:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d196:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d19a:	e7f8      	b.n	800d18e <memmove+0x12>
 800d19c:	4601      	mov	r1, r0
 800d19e:	4402      	add	r2, r0
 800d1a0:	428a      	cmp	r2, r1
 800d1a2:	d100      	bne.n	800d1a6 <memmove+0x2a>
 800d1a4:	bd10      	pop	{r4, pc}
 800d1a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d1aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d1ae:	e7f7      	b.n	800d1a0 <memmove+0x24>

0800d1b0 <abort>:
 800d1b0:	2006      	movs	r0, #6
 800d1b2:	b508      	push	{r3, lr}
 800d1b4:	f000 fa46 	bl	800d644 <raise>
 800d1b8:	2001      	movs	r0, #1
 800d1ba:	f7f5 fce0 	bl	8002b7e <_exit>

0800d1be <_calloc_r>:
 800d1be:	b570      	push	{r4, r5, r6, lr}
 800d1c0:	fba1 5402 	umull	r5, r4, r1, r2
 800d1c4:	b934      	cbnz	r4, 800d1d4 <_calloc_r+0x16>
 800d1c6:	4629      	mov	r1, r5
 800d1c8:	f7fc f828 	bl	800921c <_malloc_r>
 800d1cc:	4606      	mov	r6, r0
 800d1ce:	b928      	cbnz	r0, 800d1dc <_calloc_r+0x1e>
 800d1d0:	4630      	mov	r0, r6
 800d1d2:	bd70      	pop	{r4, r5, r6, pc}
 800d1d4:	220c      	movs	r2, #12
 800d1d6:	2600      	movs	r6, #0
 800d1d8:	6002      	str	r2, [r0, #0]
 800d1da:	e7f9      	b.n	800d1d0 <_calloc_r+0x12>
 800d1dc:	462a      	mov	r2, r5
 800d1de:	4621      	mov	r1, r4
 800d1e0:	f7fd fd21 	bl	800ac26 <memset>
 800d1e4:	e7f4      	b.n	800d1d0 <_calloc_r+0x12>

0800d1e6 <_realloc_r>:
 800d1e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ea:	4680      	mov	r8, r0
 800d1ec:	4614      	mov	r4, r2
 800d1ee:	460e      	mov	r6, r1
 800d1f0:	b921      	cbnz	r1, 800d1fc <_realloc_r+0x16>
 800d1f2:	4611      	mov	r1, r2
 800d1f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1f8:	f7fc b810 	b.w	800921c <_malloc_r>
 800d1fc:	b92a      	cbnz	r2, 800d20a <_realloc_r+0x24>
 800d1fe:	f7fe fd4b 	bl	800bc98 <_free_r>
 800d202:	4625      	mov	r5, r4
 800d204:	4628      	mov	r0, r5
 800d206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d20a:	f000 fa37 	bl	800d67c <_malloc_usable_size_r>
 800d20e:	4284      	cmp	r4, r0
 800d210:	4607      	mov	r7, r0
 800d212:	d802      	bhi.n	800d21a <_realloc_r+0x34>
 800d214:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d218:	d812      	bhi.n	800d240 <_realloc_r+0x5a>
 800d21a:	4621      	mov	r1, r4
 800d21c:	4640      	mov	r0, r8
 800d21e:	f7fb fffd 	bl	800921c <_malloc_r>
 800d222:	4605      	mov	r5, r0
 800d224:	2800      	cmp	r0, #0
 800d226:	d0ed      	beq.n	800d204 <_realloc_r+0x1e>
 800d228:	42bc      	cmp	r4, r7
 800d22a:	4622      	mov	r2, r4
 800d22c:	4631      	mov	r1, r6
 800d22e:	bf28      	it	cs
 800d230:	463a      	movcs	r2, r7
 800d232:	f7fd fe8a 	bl	800af4a <memcpy>
 800d236:	4631      	mov	r1, r6
 800d238:	4640      	mov	r0, r8
 800d23a:	f7fe fd2d 	bl	800bc98 <_free_r>
 800d23e:	e7e1      	b.n	800d204 <_realloc_r+0x1e>
 800d240:	4635      	mov	r5, r6
 800d242:	e7df      	b.n	800d204 <_realloc_r+0x1e>

0800d244 <__sfputc_r>:
 800d244:	6893      	ldr	r3, [r2, #8]
 800d246:	b410      	push	{r4}
 800d248:	3b01      	subs	r3, #1
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	6093      	str	r3, [r2, #8]
 800d24e:	da07      	bge.n	800d260 <__sfputc_r+0x1c>
 800d250:	6994      	ldr	r4, [r2, #24]
 800d252:	42a3      	cmp	r3, r4
 800d254:	db01      	blt.n	800d25a <__sfputc_r+0x16>
 800d256:	290a      	cmp	r1, #10
 800d258:	d102      	bne.n	800d260 <__sfputc_r+0x1c>
 800d25a:	bc10      	pop	{r4}
 800d25c:	f000 b934 	b.w	800d4c8 <__swbuf_r>
 800d260:	6813      	ldr	r3, [r2, #0]
 800d262:	1c58      	adds	r0, r3, #1
 800d264:	6010      	str	r0, [r2, #0]
 800d266:	7019      	strb	r1, [r3, #0]
 800d268:	4608      	mov	r0, r1
 800d26a:	bc10      	pop	{r4}
 800d26c:	4770      	bx	lr

0800d26e <__sfputs_r>:
 800d26e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d270:	4606      	mov	r6, r0
 800d272:	460f      	mov	r7, r1
 800d274:	4614      	mov	r4, r2
 800d276:	18d5      	adds	r5, r2, r3
 800d278:	42ac      	cmp	r4, r5
 800d27a:	d101      	bne.n	800d280 <__sfputs_r+0x12>
 800d27c:	2000      	movs	r0, #0
 800d27e:	e007      	b.n	800d290 <__sfputs_r+0x22>
 800d280:	463a      	mov	r2, r7
 800d282:	4630      	mov	r0, r6
 800d284:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d288:	f7ff ffdc 	bl	800d244 <__sfputc_r>
 800d28c:	1c43      	adds	r3, r0, #1
 800d28e:	d1f3      	bne.n	800d278 <__sfputs_r+0xa>
 800d290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d294 <_vfiprintf_r>:
 800d294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d298:	460d      	mov	r5, r1
 800d29a:	4614      	mov	r4, r2
 800d29c:	4698      	mov	r8, r3
 800d29e:	4606      	mov	r6, r0
 800d2a0:	b09d      	sub	sp, #116	; 0x74
 800d2a2:	b118      	cbz	r0, 800d2ac <_vfiprintf_r+0x18>
 800d2a4:	6a03      	ldr	r3, [r0, #32]
 800d2a6:	b90b      	cbnz	r3, 800d2ac <_vfiprintf_r+0x18>
 800d2a8:	f7fd fc24 	bl	800aaf4 <__sinit>
 800d2ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2ae:	07d9      	lsls	r1, r3, #31
 800d2b0:	d405      	bmi.n	800d2be <_vfiprintf_r+0x2a>
 800d2b2:	89ab      	ldrh	r3, [r5, #12]
 800d2b4:	059a      	lsls	r2, r3, #22
 800d2b6:	d402      	bmi.n	800d2be <_vfiprintf_r+0x2a>
 800d2b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2ba:	f7fd fe2e 	bl	800af1a <__retarget_lock_acquire_recursive>
 800d2be:	89ab      	ldrh	r3, [r5, #12]
 800d2c0:	071b      	lsls	r3, r3, #28
 800d2c2:	d501      	bpl.n	800d2c8 <_vfiprintf_r+0x34>
 800d2c4:	692b      	ldr	r3, [r5, #16]
 800d2c6:	b99b      	cbnz	r3, 800d2f0 <_vfiprintf_r+0x5c>
 800d2c8:	4629      	mov	r1, r5
 800d2ca:	4630      	mov	r0, r6
 800d2cc:	f000 f93a 	bl	800d544 <__swsetup_r>
 800d2d0:	b170      	cbz	r0, 800d2f0 <_vfiprintf_r+0x5c>
 800d2d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2d4:	07dc      	lsls	r4, r3, #31
 800d2d6:	d504      	bpl.n	800d2e2 <_vfiprintf_r+0x4e>
 800d2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d2dc:	b01d      	add	sp, #116	; 0x74
 800d2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2e2:	89ab      	ldrh	r3, [r5, #12]
 800d2e4:	0598      	lsls	r0, r3, #22
 800d2e6:	d4f7      	bmi.n	800d2d8 <_vfiprintf_r+0x44>
 800d2e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2ea:	f7fd fe17 	bl	800af1c <__retarget_lock_release_recursive>
 800d2ee:	e7f3      	b.n	800d2d8 <_vfiprintf_r+0x44>
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	9309      	str	r3, [sp, #36]	; 0x24
 800d2f4:	2320      	movs	r3, #32
 800d2f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2fa:	2330      	movs	r3, #48	; 0x30
 800d2fc:	f04f 0901 	mov.w	r9, #1
 800d300:	f8cd 800c 	str.w	r8, [sp, #12]
 800d304:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800d4b4 <_vfiprintf_r+0x220>
 800d308:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d30c:	4623      	mov	r3, r4
 800d30e:	469a      	mov	sl, r3
 800d310:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d314:	b10a      	cbz	r2, 800d31a <_vfiprintf_r+0x86>
 800d316:	2a25      	cmp	r2, #37	; 0x25
 800d318:	d1f9      	bne.n	800d30e <_vfiprintf_r+0x7a>
 800d31a:	ebba 0b04 	subs.w	fp, sl, r4
 800d31e:	d00b      	beq.n	800d338 <_vfiprintf_r+0xa4>
 800d320:	465b      	mov	r3, fp
 800d322:	4622      	mov	r2, r4
 800d324:	4629      	mov	r1, r5
 800d326:	4630      	mov	r0, r6
 800d328:	f7ff ffa1 	bl	800d26e <__sfputs_r>
 800d32c:	3001      	adds	r0, #1
 800d32e:	f000 80a9 	beq.w	800d484 <_vfiprintf_r+0x1f0>
 800d332:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d334:	445a      	add	r2, fp
 800d336:	9209      	str	r2, [sp, #36]	; 0x24
 800d338:	f89a 3000 	ldrb.w	r3, [sl]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	f000 80a1 	beq.w	800d484 <_vfiprintf_r+0x1f0>
 800d342:	2300      	movs	r3, #0
 800d344:	f04f 32ff 	mov.w	r2, #4294967295
 800d348:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d34c:	f10a 0a01 	add.w	sl, sl, #1
 800d350:	9304      	str	r3, [sp, #16]
 800d352:	9307      	str	r3, [sp, #28]
 800d354:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d358:	931a      	str	r3, [sp, #104]	; 0x68
 800d35a:	4654      	mov	r4, sl
 800d35c:	2205      	movs	r2, #5
 800d35e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d362:	4854      	ldr	r0, [pc, #336]	; (800d4b4 <_vfiprintf_r+0x220>)
 800d364:	f7fd fde3 	bl	800af2e <memchr>
 800d368:	9a04      	ldr	r2, [sp, #16]
 800d36a:	b9d8      	cbnz	r0, 800d3a4 <_vfiprintf_r+0x110>
 800d36c:	06d1      	lsls	r1, r2, #27
 800d36e:	bf44      	itt	mi
 800d370:	2320      	movmi	r3, #32
 800d372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d376:	0713      	lsls	r3, r2, #28
 800d378:	bf44      	itt	mi
 800d37a:	232b      	movmi	r3, #43	; 0x2b
 800d37c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d380:	f89a 3000 	ldrb.w	r3, [sl]
 800d384:	2b2a      	cmp	r3, #42	; 0x2a
 800d386:	d015      	beq.n	800d3b4 <_vfiprintf_r+0x120>
 800d388:	4654      	mov	r4, sl
 800d38a:	2000      	movs	r0, #0
 800d38c:	f04f 0c0a 	mov.w	ip, #10
 800d390:	9a07      	ldr	r2, [sp, #28]
 800d392:	4621      	mov	r1, r4
 800d394:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d398:	3b30      	subs	r3, #48	; 0x30
 800d39a:	2b09      	cmp	r3, #9
 800d39c:	d94d      	bls.n	800d43a <_vfiprintf_r+0x1a6>
 800d39e:	b1b0      	cbz	r0, 800d3ce <_vfiprintf_r+0x13a>
 800d3a0:	9207      	str	r2, [sp, #28]
 800d3a2:	e014      	b.n	800d3ce <_vfiprintf_r+0x13a>
 800d3a4:	eba0 0308 	sub.w	r3, r0, r8
 800d3a8:	fa09 f303 	lsl.w	r3, r9, r3
 800d3ac:	4313      	orrs	r3, r2
 800d3ae:	46a2      	mov	sl, r4
 800d3b0:	9304      	str	r3, [sp, #16]
 800d3b2:	e7d2      	b.n	800d35a <_vfiprintf_r+0xc6>
 800d3b4:	9b03      	ldr	r3, [sp, #12]
 800d3b6:	1d19      	adds	r1, r3, #4
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	9103      	str	r1, [sp, #12]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	bfbb      	ittet	lt
 800d3c0:	425b      	neglt	r3, r3
 800d3c2:	f042 0202 	orrlt.w	r2, r2, #2
 800d3c6:	9307      	strge	r3, [sp, #28]
 800d3c8:	9307      	strlt	r3, [sp, #28]
 800d3ca:	bfb8      	it	lt
 800d3cc:	9204      	strlt	r2, [sp, #16]
 800d3ce:	7823      	ldrb	r3, [r4, #0]
 800d3d0:	2b2e      	cmp	r3, #46	; 0x2e
 800d3d2:	d10c      	bne.n	800d3ee <_vfiprintf_r+0x15a>
 800d3d4:	7863      	ldrb	r3, [r4, #1]
 800d3d6:	2b2a      	cmp	r3, #42	; 0x2a
 800d3d8:	d134      	bne.n	800d444 <_vfiprintf_r+0x1b0>
 800d3da:	9b03      	ldr	r3, [sp, #12]
 800d3dc:	3402      	adds	r4, #2
 800d3de:	1d1a      	adds	r2, r3, #4
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	9203      	str	r2, [sp, #12]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	bfb8      	it	lt
 800d3e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3ec:	9305      	str	r3, [sp, #20]
 800d3ee:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d4b8 <_vfiprintf_r+0x224>
 800d3f2:	2203      	movs	r2, #3
 800d3f4:	4650      	mov	r0, sl
 800d3f6:	7821      	ldrb	r1, [r4, #0]
 800d3f8:	f7fd fd99 	bl	800af2e <memchr>
 800d3fc:	b138      	cbz	r0, 800d40e <_vfiprintf_r+0x17a>
 800d3fe:	2240      	movs	r2, #64	; 0x40
 800d400:	9b04      	ldr	r3, [sp, #16]
 800d402:	eba0 000a 	sub.w	r0, r0, sl
 800d406:	4082      	lsls	r2, r0
 800d408:	4313      	orrs	r3, r2
 800d40a:	3401      	adds	r4, #1
 800d40c:	9304      	str	r3, [sp, #16]
 800d40e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d412:	2206      	movs	r2, #6
 800d414:	4829      	ldr	r0, [pc, #164]	; (800d4bc <_vfiprintf_r+0x228>)
 800d416:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d41a:	f7fd fd88 	bl	800af2e <memchr>
 800d41e:	2800      	cmp	r0, #0
 800d420:	d03f      	beq.n	800d4a2 <_vfiprintf_r+0x20e>
 800d422:	4b27      	ldr	r3, [pc, #156]	; (800d4c0 <_vfiprintf_r+0x22c>)
 800d424:	bb1b      	cbnz	r3, 800d46e <_vfiprintf_r+0x1da>
 800d426:	9b03      	ldr	r3, [sp, #12]
 800d428:	3307      	adds	r3, #7
 800d42a:	f023 0307 	bic.w	r3, r3, #7
 800d42e:	3308      	adds	r3, #8
 800d430:	9303      	str	r3, [sp, #12]
 800d432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d434:	443b      	add	r3, r7
 800d436:	9309      	str	r3, [sp, #36]	; 0x24
 800d438:	e768      	b.n	800d30c <_vfiprintf_r+0x78>
 800d43a:	460c      	mov	r4, r1
 800d43c:	2001      	movs	r0, #1
 800d43e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d442:	e7a6      	b.n	800d392 <_vfiprintf_r+0xfe>
 800d444:	2300      	movs	r3, #0
 800d446:	f04f 0c0a 	mov.w	ip, #10
 800d44a:	4619      	mov	r1, r3
 800d44c:	3401      	adds	r4, #1
 800d44e:	9305      	str	r3, [sp, #20]
 800d450:	4620      	mov	r0, r4
 800d452:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d456:	3a30      	subs	r2, #48	; 0x30
 800d458:	2a09      	cmp	r2, #9
 800d45a:	d903      	bls.n	800d464 <_vfiprintf_r+0x1d0>
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d0c6      	beq.n	800d3ee <_vfiprintf_r+0x15a>
 800d460:	9105      	str	r1, [sp, #20]
 800d462:	e7c4      	b.n	800d3ee <_vfiprintf_r+0x15a>
 800d464:	4604      	mov	r4, r0
 800d466:	2301      	movs	r3, #1
 800d468:	fb0c 2101 	mla	r1, ip, r1, r2
 800d46c:	e7f0      	b.n	800d450 <_vfiprintf_r+0x1bc>
 800d46e:	ab03      	add	r3, sp, #12
 800d470:	9300      	str	r3, [sp, #0]
 800d472:	462a      	mov	r2, r5
 800d474:	4630      	mov	r0, r6
 800d476:	4b13      	ldr	r3, [pc, #76]	; (800d4c4 <_vfiprintf_r+0x230>)
 800d478:	a904      	add	r1, sp, #16
 800d47a:	f7fc feed 	bl	800a258 <_printf_float>
 800d47e:	4607      	mov	r7, r0
 800d480:	1c78      	adds	r0, r7, #1
 800d482:	d1d6      	bne.n	800d432 <_vfiprintf_r+0x19e>
 800d484:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d486:	07d9      	lsls	r1, r3, #31
 800d488:	d405      	bmi.n	800d496 <_vfiprintf_r+0x202>
 800d48a:	89ab      	ldrh	r3, [r5, #12]
 800d48c:	059a      	lsls	r2, r3, #22
 800d48e:	d402      	bmi.n	800d496 <_vfiprintf_r+0x202>
 800d490:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d492:	f7fd fd43 	bl	800af1c <__retarget_lock_release_recursive>
 800d496:	89ab      	ldrh	r3, [r5, #12]
 800d498:	065b      	lsls	r3, r3, #25
 800d49a:	f53f af1d 	bmi.w	800d2d8 <_vfiprintf_r+0x44>
 800d49e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4a0:	e71c      	b.n	800d2dc <_vfiprintf_r+0x48>
 800d4a2:	ab03      	add	r3, sp, #12
 800d4a4:	9300      	str	r3, [sp, #0]
 800d4a6:	462a      	mov	r2, r5
 800d4a8:	4630      	mov	r0, r6
 800d4aa:	4b06      	ldr	r3, [pc, #24]	; (800d4c4 <_vfiprintf_r+0x230>)
 800d4ac:	a904      	add	r1, sp, #16
 800d4ae:	f7fd f973 	bl	800a798 <_printf_i>
 800d4b2:	e7e4      	b.n	800d47e <_vfiprintf_r+0x1ea>
 800d4b4:	0800df34 	.word	0x0800df34
 800d4b8:	0800df3a 	.word	0x0800df3a
 800d4bc:	0800df3e 	.word	0x0800df3e
 800d4c0:	0800a259 	.word	0x0800a259
 800d4c4:	0800d26f 	.word	0x0800d26f

0800d4c8 <__swbuf_r>:
 800d4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ca:	460e      	mov	r6, r1
 800d4cc:	4614      	mov	r4, r2
 800d4ce:	4605      	mov	r5, r0
 800d4d0:	b118      	cbz	r0, 800d4da <__swbuf_r+0x12>
 800d4d2:	6a03      	ldr	r3, [r0, #32]
 800d4d4:	b90b      	cbnz	r3, 800d4da <__swbuf_r+0x12>
 800d4d6:	f7fd fb0d 	bl	800aaf4 <__sinit>
 800d4da:	69a3      	ldr	r3, [r4, #24]
 800d4dc:	60a3      	str	r3, [r4, #8]
 800d4de:	89a3      	ldrh	r3, [r4, #12]
 800d4e0:	071a      	lsls	r2, r3, #28
 800d4e2:	d525      	bpl.n	800d530 <__swbuf_r+0x68>
 800d4e4:	6923      	ldr	r3, [r4, #16]
 800d4e6:	b31b      	cbz	r3, 800d530 <__swbuf_r+0x68>
 800d4e8:	6823      	ldr	r3, [r4, #0]
 800d4ea:	6922      	ldr	r2, [r4, #16]
 800d4ec:	b2f6      	uxtb	r6, r6
 800d4ee:	1a98      	subs	r0, r3, r2
 800d4f0:	6963      	ldr	r3, [r4, #20]
 800d4f2:	4637      	mov	r7, r6
 800d4f4:	4283      	cmp	r3, r0
 800d4f6:	dc04      	bgt.n	800d502 <__swbuf_r+0x3a>
 800d4f8:	4621      	mov	r1, r4
 800d4fa:	4628      	mov	r0, r5
 800d4fc:	f7ff fe04 	bl	800d108 <_fflush_r>
 800d500:	b9e0      	cbnz	r0, 800d53c <__swbuf_r+0x74>
 800d502:	68a3      	ldr	r3, [r4, #8]
 800d504:	3b01      	subs	r3, #1
 800d506:	60a3      	str	r3, [r4, #8]
 800d508:	6823      	ldr	r3, [r4, #0]
 800d50a:	1c5a      	adds	r2, r3, #1
 800d50c:	6022      	str	r2, [r4, #0]
 800d50e:	701e      	strb	r6, [r3, #0]
 800d510:	6962      	ldr	r2, [r4, #20]
 800d512:	1c43      	adds	r3, r0, #1
 800d514:	429a      	cmp	r2, r3
 800d516:	d004      	beq.n	800d522 <__swbuf_r+0x5a>
 800d518:	89a3      	ldrh	r3, [r4, #12]
 800d51a:	07db      	lsls	r3, r3, #31
 800d51c:	d506      	bpl.n	800d52c <__swbuf_r+0x64>
 800d51e:	2e0a      	cmp	r6, #10
 800d520:	d104      	bne.n	800d52c <__swbuf_r+0x64>
 800d522:	4621      	mov	r1, r4
 800d524:	4628      	mov	r0, r5
 800d526:	f7ff fdef 	bl	800d108 <_fflush_r>
 800d52a:	b938      	cbnz	r0, 800d53c <__swbuf_r+0x74>
 800d52c:	4638      	mov	r0, r7
 800d52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d530:	4621      	mov	r1, r4
 800d532:	4628      	mov	r0, r5
 800d534:	f000 f806 	bl	800d544 <__swsetup_r>
 800d538:	2800      	cmp	r0, #0
 800d53a:	d0d5      	beq.n	800d4e8 <__swbuf_r+0x20>
 800d53c:	f04f 37ff 	mov.w	r7, #4294967295
 800d540:	e7f4      	b.n	800d52c <__swbuf_r+0x64>
	...

0800d544 <__swsetup_r>:
 800d544:	b538      	push	{r3, r4, r5, lr}
 800d546:	4b2a      	ldr	r3, [pc, #168]	; (800d5f0 <__swsetup_r+0xac>)
 800d548:	4605      	mov	r5, r0
 800d54a:	6818      	ldr	r0, [r3, #0]
 800d54c:	460c      	mov	r4, r1
 800d54e:	b118      	cbz	r0, 800d558 <__swsetup_r+0x14>
 800d550:	6a03      	ldr	r3, [r0, #32]
 800d552:	b90b      	cbnz	r3, 800d558 <__swsetup_r+0x14>
 800d554:	f7fd face 	bl	800aaf4 <__sinit>
 800d558:	89a3      	ldrh	r3, [r4, #12]
 800d55a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d55e:	0718      	lsls	r0, r3, #28
 800d560:	d422      	bmi.n	800d5a8 <__swsetup_r+0x64>
 800d562:	06d9      	lsls	r1, r3, #27
 800d564:	d407      	bmi.n	800d576 <__swsetup_r+0x32>
 800d566:	2309      	movs	r3, #9
 800d568:	602b      	str	r3, [r5, #0]
 800d56a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d56e:	f04f 30ff 	mov.w	r0, #4294967295
 800d572:	81a3      	strh	r3, [r4, #12]
 800d574:	e034      	b.n	800d5e0 <__swsetup_r+0x9c>
 800d576:	0758      	lsls	r0, r3, #29
 800d578:	d512      	bpl.n	800d5a0 <__swsetup_r+0x5c>
 800d57a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d57c:	b141      	cbz	r1, 800d590 <__swsetup_r+0x4c>
 800d57e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d582:	4299      	cmp	r1, r3
 800d584:	d002      	beq.n	800d58c <__swsetup_r+0x48>
 800d586:	4628      	mov	r0, r5
 800d588:	f7fe fb86 	bl	800bc98 <_free_r>
 800d58c:	2300      	movs	r3, #0
 800d58e:	6363      	str	r3, [r4, #52]	; 0x34
 800d590:	89a3      	ldrh	r3, [r4, #12]
 800d592:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d596:	81a3      	strh	r3, [r4, #12]
 800d598:	2300      	movs	r3, #0
 800d59a:	6063      	str	r3, [r4, #4]
 800d59c:	6923      	ldr	r3, [r4, #16]
 800d59e:	6023      	str	r3, [r4, #0]
 800d5a0:	89a3      	ldrh	r3, [r4, #12]
 800d5a2:	f043 0308 	orr.w	r3, r3, #8
 800d5a6:	81a3      	strh	r3, [r4, #12]
 800d5a8:	6923      	ldr	r3, [r4, #16]
 800d5aa:	b94b      	cbnz	r3, 800d5c0 <__swsetup_r+0x7c>
 800d5ac:	89a3      	ldrh	r3, [r4, #12]
 800d5ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d5b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5b6:	d003      	beq.n	800d5c0 <__swsetup_r+0x7c>
 800d5b8:	4621      	mov	r1, r4
 800d5ba:	4628      	mov	r0, r5
 800d5bc:	f000 f88b 	bl	800d6d6 <__smakebuf_r>
 800d5c0:	89a0      	ldrh	r0, [r4, #12]
 800d5c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5c6:	f010 0301 	ands.w	r3, r0, #1
 800d5ca:	d00a      	beq.n	800d5e2 <__swsetup_r+0x9e>
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	60a3      	str	r3, [r4, #8]
 800d5d0:	6963      	ldr	r3, [r4, #20]
 800d5d2:	425b      	negs	r3, r3
 800d5d4:	61a3      	str	r3, [r4, #24]
 800d5d6:	6923      	ldr	r3, [r4, #16]
 800d5d8:	b943      	cbnz	r3, 800d5ec <__swsetup_r+0xa8>
 800d5da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d5de:	d1c4      	bne.n	800d56a <__swsetup_r+0x26>
 800d5e0:	bd38      	pop	{r3, r4, r5, pc}
 800d5e2:	0781      	lsls	r1, r0, #30
 800d5e4:	bf58      	it	pl
 800d5e6:	6963      	ldrpl	r3, [r4, #20]
 800d5e8:	60a3      	str	r3, [r4, #8]
 800d5ea:	e7f4      	b.n	800d5d6 <__swsetup_r+0x92>
 800d5ec:	2000      	movs	r0, #0
 800d5ee:	e7f7      	b.n	800d5e0 <__swsetup_r+0x9c>
 800d5f0:	200001d4 	.word	0x200001d4

0800d5f4 <_raise_r>:
 800d5f4:	291f      	cmp	r1, #31
 800d5f6:	b538      	push	{r3, r4, r5, lr}
 800d5f8:	4604      	mov	r4, r0
 800d5fa:	460d      	mov	r5, r1
 800d5fc:	d904      	bls.n	800d608 <_raise_r+0x14>
 800d5fe:	2316      	movs	r3, #22
 800d600:	6003      	str	r3, [r0, #0]
 800d602:	f04f 30ff 	mov.w	r0, #4294967295
 800d606:	bd38      	pop	{r3, r4, r5, pc}
 800d608:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d60a:	b112      	cbz	r2, 800d612 <_raise_r+0x1e>
 800d60c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d610:	b94b      	cbnz	r3, 800d626 <_raise_r+0x32>
 800d612:	4620      	mov	r0, r4
 800d614:	f000 f830 	bl	800d678 <_getpid_r>
 800d618:	462a      	mov	r2, r5
 800d61a:	4601      	mov	r1, r0
 800d61c:	4620      	mov	r0, r4
 800d61e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d622:	f000 b817 	b.w	800d654 <_kill_r>
 800d626:	2b01      	cmp	r3, #1
 800d628:	d00a      	beq.n	800d640 <_raise_r+0x4c>
 800d62a:	1c59      	adds	r1, r3, #1
 800d62c:	d103      	bne.n	800d636 <_raise_r+0x42>
 800d62e:	2316      	movs	r3, #22
 800d630:	6003      	str	r3, [r0, #0]
 800d632:	2001      	movs	r0, #1
 800d634:	e7e7      	b.n	800d606 <_raise_r+0x12>
 800d636:	2400      	movs	r4, #0
 800d638:	4628      	mov	r0, r5
 800d63a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d63e:	4798      	blx	r3
 800d640:	2000      	movs	r0, #0
 800d642:	e7e0      	b.n	800d606 <_raise_r+0x12>

0800d644 <raise>:
 800d644:	4b02      	ldr	r3, [pc, #8]	; (800d650 <raise+0xc>)
 800d646:	4601      	mov	r1, r0
 800d648:	6818      	ldr	r0, [r3, #0]
 800d64a:	f7ff bfd3 	b.w	800d5f4 <_raise_r>
 800d64e:	bf00      	nop
 800d650:	200001d4 	.word	0x200001d4

0800d654 <_kill_r>:
 800d654:	b538      	push	{r3, r4, r5, lr}
 800d656:	2300      	movs	r3, #0
 800d658:	4d06      	ldr	r5, [pc, #24]	; (800d674 <_kill_r+0x20>)
 800d65a:	4604      	mov	r4, r0
 800d65c:	4608      	mov	r0, r1
 800d65e:	4611      	mov	r1, r2
 800d660:	602b      	str	r3, [r5, #0]
 800d662:	f7f5 fa7c 	bl	8002b5e <_kill>
 800d666:	1c43      	adds	r3, r0, #1
 800d668:	d102      	bne.n	800d670 <_kill_r+0x1c>
 800d66a:	682b      	ldr	r3, [r5, #0]
 800d66c:	b103      	cbz	r3, 800d670 <_kill_r+0x1c>
 800d66e:	6023      	str	r3, [r4, #0]
 800d670:	bd38      	pop	{r3, r4, r5, pc}
 800d672:	bf00      	nop
 800d674:	20003424 	.word	0x20003424

0800d678 <_getpid_r>:
 800d678:	f7f5 ba6a 	b.w	8002b50 <_getpid>

0800d67c <_malloc_usable_size_r>:
 800d67c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d680:	1f18      	subs	r0, r3, #4
 800d682:	2b00      	cmp	r3, #0
 800d684:	bfbc      	itt	lt
 800d686:	580b      	ldrlt	r3, [r1, r0]
 800d688:	18c0      	addlt	r0, r0, r3
 800d68a:	4770      	bx	lr

0800d68c <__swhatbuf_r>:
 800d68c:	b570      	push	{r4, r5, r6, lr}
 800d68e:	460c      	mov	r4, r1
 800d690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d694:	4615      	mov	r5, r2
 800d696:	2900      	cmp	r1, #0
 800d698:	461e      	mov	r6, r3
 800d69a:	b096      	sub	sp, #88	; 0x58
 800d69c:	da0c      	bge.n	800d6b8 <__swhatbuf_r+0x2c>
 800d69e:	89a3      	ldrh	r3, [r4, #12]
 800d6a0:	2100      	movs	r1, #0
 800d6a2:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d6a6:	bf0c      	ite	eq
 800d6a8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d6ac:	2340      	movne	r3, #64	; 0x40
 800d6ae:	2000      	movs	r0, #0
 800d6b0:	6031      	str	r1, [r6, #0]
 800d6b2:	602b      	str	r3, [r5, #0]
 800d6b4:	b016      	add	sp, #88	; 0x58
 800d6b6:	bd70      	pop	{r4, r5, r6, pc}
 800d6b8:	466a      	mov	r2, sp
 800d6ba:	f000 f849 	bl	800d750 <_fstat_r>
 800d6be:	2800      	cmp	r0, #0
 800d6c0:	dbed      	blt.n	800d69e <__swhatbuf_r+0x12>
 800d6c2:	9901      	ldr	r1, [sp, #4]
 800d6c4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d6c8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d6cc:	4259      	negs	r1, r3
 800d6ce:	4159      	adcs	r1, r3
 800d6d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6d4:	e7eb      	b.n	800d6ae <__swhatbuf_r+0x22>

0800d6d6 <__smakebuf_r>:
 800d6d6:	898b      	ldrh	r3, [r1, #12]
 800d6d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d6da:	079d      	lsls	r5, r3, #30
 800d6dc:	4606      	mov	r6, r0
 800d6de:	460c      	mov	r4, r1
 800d6e0:	d507      	bpl.n	800d6f2 <__smakebuf_r+0x1c>
 800d6e2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d6e6:	6023      	str	r3, [r4, #0]
 800d6e8:	6123      	str	r3, [r4, #16]
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	6163      	str	r3, [r4, #20]
 800d6ee:	b002      	add	sp, #8
 800d6f0:	bd70      	pop	{r4, r5, r6, pc}
 800d6f2:	466a      	mov	r2, sp
 800d6f4:	ab01      	add	r3, sp, #4
 800d6f6:	f7ff ffc9 	bl	800d68c <__swhatbuf_r>
 800d6fa:	9900      	ldr	r1, [sp, #0]
 800d6fc:	4605      	mov	r5, r0
 800d6fe:	4630      	mov	r0, r6
 800d700:	f7fb fd8c 	bl	800921c <_malloc_r>
 800d704:	b948      	cbnz	r0, 800d71a <__smakebuf_r+0x44>
 800d706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d70a:	059a      	lsls	r2, r3, #22
 800d70c:	d4ef      	bmi.n	800d6ee <__smakebuf_r+0x18>
 800d70e:	f023 0303 	bic.w	r3, r3, #3
 800d712:	f043 0302 	orr.w	r3, r3, #2
 800d716:	81a3      	strh	r3, [r4, #12]
 800d718:	e7e3      	b.n	800d6e2 <__smakebuf_r+0xc>
 800d71a:	89a3      	ldrh	r3, [r4, #12]
 800d71c:	6020      	str	r0, [r4, #0]
 800d71e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d722:	81a3      	strh	r3, [r4, #12]
 800d724:	9b00      	ldr	r3, [sp, #0]
 800d726:	6120      	str	r0, [r4, #16]
 800d728:	6163      	str	r3, [r4, #20]
 800d72a:	9b01      	ldr	r3, [sp, #4]
 800d72c:	b15b      	cbz	r3, 800d746 <__smakebuf_r+0x70>
 800d72e:	4630      	mov	r0, r6
 800d730:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d734:	f000 f81e 	bl	800d774 <_isatty_r>
 800d738:	b128      	cbz	r0, 800d746 <__smakebuf_r+0x70>
 800d73a:	89a3      	ldrh	r3, [r4, #12]
 800d73c:	f023 0303 	bic.w	r3, r3, #3
 800d740:	f043 0301 	orr.w	r3, r3, #1
 800d744:	81a3      	strh	r3, [r4, #12]
 800d746:	89a3      	ldrh	r3, [r4, #12]
 800d748:	431d      	orrs	r5, r3
 800d74a:	81a5      	strh	r5, [r4, #12]
 800d74c:	e7cf      	b.n	800d6ee <__smakebuf_r+0x18>
	...

0800d750 <_fstat_r>:
 800d750:	b538      	push	{r3, r4, r5, lr}
 800d752:	2300      	movs	r3, #0
 800d754:	4d06      	ldr	r5, [pc, #24]	; (800d770 <_fstat_r+0x20>)
 800d756:	4604      	mov	r4, r0
 800d758:	4608      	mov	r0, r1
 800d75a:	4611      	mov	r1, r2
 800d75c:	602b      	str	r3, [r5, #0]
 800d75e:	f7f5 fa5c 	bl	8002c1a <_fstat>
 800d762:	1c43      	adds	r3, r0, #1
 800d764:	d102      	bne.n	800d76c <_fstat_r+0x1c>
 800d766:	682b      	ldr	r3, [r5, #0]
 800d768:	b103      	cbz	r3, 800d76c <_fstat_r+0x1c>
 800d76a:	6023      	str	r3, [r4, #0]
 800d76c:	bd38      	pop	{r3, r4, r5, pc}
 800d76e:	bf00      	nop
 800d770:	20003424 	.word	0x20003424

0800d774 <_isatty_r>:
 800d774:	b538      	push	{r3, r4, r5, lr}
 800d776:	2300      	movs	r3, #0
 800d778:	4d05      	ldr	r5, [pc, #20]	; (800d790 <_isatty_r+0x1c>)
 800d77a:	4604      	mov	r4, r0
 800d77c:	4608      	mov	r0, r1
 800d77e:	602b      	str	r3, [r5, #0]
 800d780:	f7f5 fa5a 	bl	8002c38 <_isatty>
 800d784:	1c43      	adds	r3, r0, #1
 800d786:	d102      	bne.n	800d78e <_isatty_r+0x1a>
 800d788:	682b      	ldr	r3, [r5, #0]
 800d78a:	b103      	cbz	r3, 800d78e <_isatty_r+0x1a>
 800d78c:	6023      	str	r3, [r4, #0]
 800d78e:	bd38      	pop	{r3, r4, r5, pc}
 800d790:	20003424 	.word	0x20003424

0800d794 <_init>:
 800d794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d796:	bf00      	nop
 800d798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d79a:	bc08      	pop	{r3}
 800d79c:	469e      	mov	lr, r3
 800d79e:	4770      	bx	lr

0800d7a0 <_fini>:
 800d7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7a2:	bf00      	nop
 800d7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7a6:	bc08      	pop	{r3}
 800d7a8:	469e      	mov	lr, r3
 800d7aa:	4770      	bx	lr
