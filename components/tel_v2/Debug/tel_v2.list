
tel_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000101dc  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000091c  080103d0  080103d0  000203d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010cec  08010cec  00030240  2**0
                  CONTENTS
  4 .ARM          00000000  08010cec  08010cec  00030240  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010cec  08010cec  00030240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010cec  08010cec  00020cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010cf0  08010cf0  00020cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  08010cf4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003290  20000240  08010f34  00030240  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200034d0  08010f34  000334d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030269  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bece  00000000  00000000  000302ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004791  00000000  00000000  0004c17a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a0  00000000  00000000  00050910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001236  00000000  00000000  000520b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e5db  00000000  00000000  000532e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e9ee  00000000  00000000  000718c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a5f73  00000000  00000000  000902af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007c6c  00000000  00000000  00136224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0013de90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000240 	.word	0x20000240
 800020c:	00000000 	.word	0x00000000
 8000210:	080103b4 	.word	0x080103b4

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000244 	.word	0x20000244
 800022c:	080103b4 	.word	0x080103b4

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <strlen>:
 8000244:	4603      	mov	r3, r0
 8000246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800024a:	2a00      	cmp	r2, #0
 800024c:	d1fb      	bne.n	8000246 <strlen+0x2>
 800024e:	1a18      	subs	r0, r3, r0
 8000250:	3801      	subs	r0, #1
 8000252:	4770      	bx	lr

08000254 <__aeabi_drsub>:
 8000254:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000258:	e002      	b.n	8000260 <__adddf3>
 800025a:	bf00      	nop

0800025c <__aeabi_dsub>:
 800025c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000260 <__adddf3>:
 8000260:	b530      	push	{r4, r5, lr}
 8000262:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000266:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800026a:	ea94 0f05 	teq	r4, r5
 800026e:	bf08      	it	eq
 8000270:	ea90 0f02 	teqeq	r0, r2
 8000274:	bf1f      	itttt	ne
 8000276:	ea54 0c00 	orrsne.w	ip, r4, r0
 800027a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000282:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000286:	f000 80e2 	beq.w	800044e <__adddf3+0x1ee>
 800028a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000292:	bfb8      	it	lt
 8000294:	426d      	neglt	r5, r5
 8000296:	dd0c      	ble.n	80002b2 <__adddf3+0x52>
 8000298:	442c      	add	r4, r5
 800029a:	ea80 0202 	eor.w	r2, r0, r2
 800029e:	ea81 0303 	eor.w	r3, r1, r3
 80002a2:	ea82 0000 	eor.w	r0, r2, r0
 80002a6:	ea83 0101 	eor.w	r1, r3, r1
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	2d36      	cmp	r5, #54	; 0x36
 80002b4:	bf88      	it	hi
 80002b6:	bd30      	pophi	{r4, r5, pc}
 80002b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x70>
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002dc:	d002      	beq.n	80002e4 <__adddf3+0x84>
 80002de:	4252      	negs	r2, r2
 80002e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e4:	ea94 0f05 	teq	r4, r5
 80002e8:	f000 80a7 	beq.w	800043a <__adddf3+0x1da>
 80002ec:	f1a4 0401 	sub.w	r4, r4, #1
 80002f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f4:	db0d      	blt.n	8000312 <__adddf3+0xb2>
 80002f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002fa:	fa22 f205 	lsr.w	r2, r2, r5
 80002fe:	1880      	adds	r0, r0, r2
 8000300:	f141 0100 	adc.w	r1, r1, #0
 8000304:	fa03 f20e 	lsl.w	r2, r3, lr
 8000308:	1880      	adds	r0, r0, r2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	4159      	adcs	r1, r3
 8000310:	e00e      	b.n	8000330 <__adddf3+0xd0>
 8000312:	f1a5 0520 	sub.w	r5, r5, #32
 8000316:	f10e 0e20 	add.w	lr, lr, #32
 800031a:	2a01      	cmp	r2, #1
 800031c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000320:	bf28      	it	cs
 8000322:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	18c0      	adds	r0, r0, r3
 800032c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000330:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000334:	d507      	bpl.n	8000346 <__adddf3+0xe6>
 8000336:	f04f 0e00 	mov.w	lr, #0
 800033a:	f1dc 0c00 	rsbs	ip, ip, #0
 800033e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000342:	eb6e 0101 	sbc.w	r1, lr, r1
 8000346:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800034a:	d31b      	bcc.n	8000384 <__adddf3+0x124>
 800034c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000350:	d30c      	bcc.n	800036c <__adddf3+0x10c>
 8000352:	0849      	lsrs	r1, r1, #1
 8000354:	ea5f 0030 	movs.w	r0, r0, rrx
 8000358:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800035c:	f104 0401 	add.w	r4, r4, #1
 8000360:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000364:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000368:	f080 809a 	bcs.w	80004a0 <__adddf3+0x240>
 800036c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000370:	bf08      	it	eq
 8000372:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000376:	f150 0000 	adcs.w	r0, r0, #0
 800037a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037e:	ea41 0105 	orr.w	r1, r1, r5
 8000382:	bd30      	pop	{r4, r5, pc}
 8000384:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000388:	4140      	adcs	r0, r0
 800038a:	eb41 0101 	adc.w	r1, r1, r1
 800038e:	3c01      	subs	r4, #1
 8000390:	bf28      	it	cs
 8000392:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000396:	d2e9      	bcs.n	800036c <__adddf3+0x10c>
 8000398:	f091 0f00 	teq	r1, #0
 800039c:	bf04      	itt	eq
 800039e:	4601      	moveq	r1, r0
 80003a0:	2000      	moveq	r0, #0
 80003a2:	fab1 f381 	clz	r3, r1
 80003a6:	bf08      	it	eq
 80003a8:	3320      	addeq	r3, #32
 80003aa:	f1a3 030b 	sub.w	r3, r3, #11
 80003ae:	f1b3 0220 	subs.w	r2, r3, #32
 80003b2:	da0c      	bge.n	80003ce <__adddf3+0x16e>
 80003b4:	320c      	adds	r2, #12
 80003b6:	dd08      	ble.n	80003ca <__adddf3+0x16a>
 80003b8:	f102 0c14 	add.w	ip, r2, #20
 80003bc:	f1c2 020c 	rsb	r2, r2, #12
 80003c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c4:	fa21 f102 	lsr.w	r1, r1, r2
 80003c8:	e00c      	b.n	80003e4 <__adddf3+0x184>
 80003ca:	f102 0214 	add.w	r2, r2, #20
 80003ce:	bfd8      	it	le
 80003d0:	f1c2 0c20 	rsble	ip, r2, #32
 80003d4:	fa01 f102 	lsl.w	r1, r1, r2
 80003d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003dc:	bfdc      	itt	le
 80003de:	ea41 010c 	orrle.w	r1, r1, ip
 80003e2:	4090      	lslle	r0, r2
 80003e4:	1ae4      	subs	r4, r4, r3
 80003e6:	bfa2      	ittt	ge
 80003e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003ec:	4329      	orrge	r1, r5
 80003ee:	bd30      	popge	{r4, r5, pc}
 80003f0:	ea6f 0404 	mvn.w	r4, r4
 80003f4:	3c1f      	subs	r4, #31
 80003f6:	da1c      	bge.n	8000432 <__adddf3+0x1d2>
 80003f8:	340c      	adds	r4, #12
 80003fa:	dc0e      	bgt.n	800041a <__adddf3+0x1ba>
 80003fc:	f104 0414 	add.w	r4, r4, #20
 8000400:	f1c4 0220 	rsb	r2, r4, #32
 8000404:	fa20 f004 	lsr.w	r0, r0, r4
 8000408:	fa01 f302 	lsl.w	r3, r1, r2
 800040c:	ea40 0003 	orr.w	r0, r0, r3
 8000410:	fa21 f304 	lsr.w	r3, r1, r4
 8000414:	ea45 0103 	orr.w	r1, r5, r3
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	f1c4 040c 	rsb	r4, r4, #12
 800041e:	f1c4 0220 	rsb	r2, r4, #32
 8000422:	fa20 f002 	lsr.w	r0, r0, r2
 8000426:	fa01 f304 	lsl.w	r3, r1, r4
 800042a:	ea40 0003 	orr.w	r0, r0, r3
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	fa21 f004 	lsr.w	r0, r1, r4
 8000436:	4629      	mov	r1, r5
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	f094 0f00 	teq	r4, #0
 800043e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000442:	bf06      	itte	eq
 8000444:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000448:	3401      	addeq	r4, #1
 800044a:	3d01      	subne	r5, #1
 800044c:	e74e      	b.n	80002ec <__adddf3+0x8c>
 800044e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000452:	bf18      	it	ne
 8000454:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000458:	d029      	beq.n	80004ae <__adddf3+0x24e>
 800045a:	ea94 0f05 	teq	r4, r5
 800045e:	bf08      	it	eq
 8000460:	ea90 0f02 	teqeq	r0, r2
 8000464:	d005      	beq.n	8000472 <__adddf3+0x212>
 8000466:	ea54 0c00 	orrs.w	ip, r4, r0
 800046a:	bf04      	itt	eq
 800046c:	4619      	moveq	r1, r3
 800046e:	4610      	moveq	r0, r2
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea91 0f03 	teq	r1, r3
 8000476:	bf1e      	ittt	ne
 8000478:	2100      	movne	r1, #0
 800047a:	2000      	movne	r0, #0
 800047c:	bd30      	popne	{r4, r5, pc}
 800047e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000482:	d105      	bne.n	8000490 <__adddf3+0x230>
 8000484:	0040      	lsls	r0, r0, #1
 8000486:	4149      	adcs	r1, r1
 8000488:	bf28      	it	cs
 800048a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000494:	bf3c      	itt	cc
 8000496:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800049a:	bd30      	popcc	{r4, r5, pc}
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a8:	f04f 0000 	mov.w	r0, #0
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf1a      	itte	ne
 80004b4:	4619      	movne	r1, r3
 80004b6:	4610      	movne	r0, r2
 80004b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004bc:	bf1c      	itt	ne
 80004be:	460b      	movne	r3, r1
 80004c0:	4602      	movne	r2, r0
 80004c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c6:	bf06      	itte	eq
 80004c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004cc:	ea91 0f03 	teqeq	r1, r3
 80004d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	bf00      	nop

080004d8 <__aeabi_ui2d>:
 80004d8:	f090 0f00 	teq	r0, #0
 80004dc:	bf04      	itt	eq
 80004de:	2100      	moveq	r1, #0
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ec:	f04f 0500 	mov.w	r5, #0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e750      	b.n	8000398 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_i2d>:
 80004f8:	f090 0f00 	teq	r0, #0
 80004fc:	bf04      	itt	eq
 80004fe:	2100      	moveq	r1, #0
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000508:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000510:	bf48      	it	mi
 8000512:	4240      	negmi	r0, r0
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	e73e      	b.n	8000398 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_f2d>:
 800051c:	0042      	lsls	r2, r0, #1
 800051e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000522:	ea4f 0131 	mov.w	r1, r1, rrx
 8000526:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800052a:	bf1f      	itttt	ne
 800052c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000530:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000534:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000538:	4770      	bxne	lr
 800053a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053e:	bf08      	it	eq
 8000540:	4770      	bxeq	lr
 8000542:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000546:	bf04      	itt	eq
 8000548:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000554:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000558:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800055c:	e71c      	b.n	8000398 <__adddf3+0x138>
 800055e:	bf00      	nop

08000560 <__aeabi_ul2d>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	f04f 0500 	mov.w	r5, #0
 800056e:	e00a      	b.n	8000586 <__aeabi_l2d+0x16>

08000570 <__aeabi_l2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057e:	d502      	bpl.n	8000586 <__aeabi_l2d+0x16>
 8000580:	4240      	negs	r0, r0
 8000582:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000586:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000592:	f43f aed8 	beq.w	8000346 <__adddf3+0xe6>
 8000596:	f04f 0203 	mov.w	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a6:	bf18      	it	ne
 80005a8:	3203      	addne	r2, #3
 80005aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ae:	f1c2 0320 	rsb	r3, r2, #32
 80005b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80005be:	ea40 000e 	orr.w	r0, r0, lr
 80005c2:	fa21 f102 	lsr.w	r1, r1, r2
 80005c6:	4414      	add	r4, r2
 80005c8:	e6bd      	b.n	8000346 <__adddf3+0xe6>
 80005ca:	bf00      	nop

080005cc <__aeabi_dmul>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005da:	bf1d      	ittte	ne
 80005dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005e0:	ea94 0f0c 	teqne	r4, ip
 80005e4:	ea95 0f0c 	teqne	r5, ip
 80005e8:	f000 f8de 	bleq	80007a8 <__aeabi_dmul+0x1dc>
 80005ec:	442c      	add	r4, r5
 80005ee:	ea81 0603 	eor.w	r6, r1, r3
 80005f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fe:	bf18      	it	ne
 8000600:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000604:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800060c:	d038      	beq.n	8000680 <__aeabi_dmul+0xb4>
 800060e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000612:	f04f 0500 	mov.w	r5, #0
 8000616:	fbe1 e502 	umlal	lr, r5, r1, r2
 800061a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000622:	f04f 0600 	mov.w	r6, #0
 8000626:	fbe1 5603 	umlal	r5, r6, r1, r3
 800062a:	f09c 0f00 	teq	ip, #0
 800062e:	bf18      	it	ne
 8000630:	f04e 0e01 	orrne.w	lr, lr, #1
 8000634:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000638:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800063c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000640:	d204      	bcs.n	800064c <__aeabi_dmul+0x80>
 8000642:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000646:	416d      	adcs	r5, r5
 8000648:	eb46 0606 	adc.w	r6, r6, r6
 800064c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000650:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000654:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000658:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800065c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000660:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000664:	bf88      	it	hi
 8000666:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800066a:	d81e      	bhi.n	80006aa <__aeabi_dmul+0xde>
 800066c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000670:	bf08      	it	eq
 8000672:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000676:	f150 0000 	adcs.w	r0, r0, #0
 800067a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000684:	ea46 0101 	orr.w	r1, r6, r1
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	ea81 0103 	eor.w	r1, r1, r3
 8000690:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000694:	bfc2      	ittt	gt
 8000696:	ebd4 050c 	rsbsgt	r5, r4, ip
 800069a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069e:	bd70      	popgt	{r4, r5, r6, pc}
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f04f 0e00 	mov.w	lr, #0
 80006a8:	3c01      	subs	r4, #1
 80006aa:	f300 80ab 	bgt.w	8000804 <__aeabi_dmul+0x238>
 80006ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006b2:	bfde      	ittt	le
 80006b4:	2000      	movle	r0, #0
 80006b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ba:	bd70      	pople	{r4, r5, r6, pc}
 80006bc:	f1c4 0400 	rsb	r4, r4, #0
 80006c0:	3c20      	subs	r4, #32
 80006c2:	da35      	bge.n	8000730 <__aeabi_dmul+0x164>
 80006c4:	340c      	adds	r4, #12
 80006c6:	dc1b      	bgt.n	8000700 <__aeabi_dmul+0x134>
 80006c8:	f104 0414 	add.w	r4, r4, #20
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f305 	lsl.w	r3, r0, r5
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	fa21 f604 	lsr.w	r6, r1, r4
 80006f0:	eb42 0106 	adc.w	r1, r2, r6
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f1c4 040c 	rsb	r4, r4, #12
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f304 	lsl.w	r3, r0, r4
 800070c:	fa20 f005 	lsr.w	r0, r0, r5
 8000710:	fa01 f204 	lsl.w	r2, r1, r4
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	f141 0100 	adc.w	r1, r1, #0
 8000724:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000728:	bf08      	it	eq
 800072a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072e:	bd70      	pop	{r4, r5, r6, pc}
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f205 	lsl.w	r2, r0, r5
 8000738:	ea4e 0e02 	orr.w	lr, lr, r2
 800073c:	fa20 f304 	lsr.w	r3, r0, r4
 8000740:	fa01 f205 	lsl.w	r2, r1, r5
 8000744:	ea43 0302 	orr.w	r3, r3, r2
 8000748:	fa21 f004 	lsr.w	r0, r1, r4
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	fa21 f204 	lsr.w	r2, r1, r4
 8000754:	ea20 0002 	bic.w	r0, r0, r2
 8000758:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800075c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000760:	bf08      	it	eq
 8000762:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000766:	bd70      	pop	{r4, r5, r6, pc}
 8000768:	f094 0f00 	teq	r4, #0
 800076c:	d10f      	bne.n	800078e <__aeabi_dmul+0x1c2>
 800076e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000772:	0040      	lsls	r0, r0, #1
 8000774:	eb41 0101 	adc.w	r1, r1, r1
 8000778:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800077c:	bf08      	it	eq
 800077e:	3c01      	subeq	r4, #1
 8000780:	d0f7      	beq.n	8000772 <__aeabi_dmul+0x1a6>
 8000782:	ea41 0106 	orr.w	r1, r1, r6
 8000786:	f095 0f00 	teq	r5, #0
 800078a:	bf18      	it	ne
 800078c:	4770      	bxne	lr
 800078e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000792:	0052      	lsls	r2, r2, #1
 8000794:	eb43 0303 	adc.w	r3, r3, r3
 8000798:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800079c:	bf08      	it	eq
 800079e:	3d01      	subeq	r5, #1
 80007a0:	d0f7      	beq.n	8000792 <__aeabi_dmul+0x1c6>
 80007a2:	ea43 0306 	orr.w	r3, r3, r6
 80007a6:	4770      	bx	lr
 80007a8:	ea94 0f0c 	teq	r4, ip
 80007ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007b0:	bf18      	it	ne
 80007b2:	ea95 0f0c 	teqne	r5, ip
 80007b6:	d00c      	beq.n	80007d2 <__aeabi_dmul+0x206>
 80007b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007bc:	bf18      	it	ne
 80007be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c2:	d1d1      	bne.n	8000768 <__aeabi_dmul+0x19c>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d6:	bf06      	itte	eq
 80007d8:	4610      	moveq	r0, r2
 80007da:	4619      	moveq	r1, r3
 80007dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e0:	d019      	beq.n	8000816 <__aeabi_dmul+0x24a>
 80007e2:	ea94 0f0c 	teq	r4, ip
 80007e6:	d102      	bne.n	80007ee <__aeabi_dmul+0x222>
 80007e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007ec:	d113      	bne.n	8000816 <__aeabi_dmul+0x24a>
 80007ee:	ea95 0f0c 	teq	r5, ip
 80007f2:	d105      	bne.n	8000800 <__aeabi_dmul+0x234>
 80007f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f8:	bf1c      	itt	ne
 80007fa:	4610      	movne	r0, r2
 80007fc:	4619      	movne	r1, r3
 80007fe:	d10a      	bne.n	8000816 <__aeabi_dmul+0x24a>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081e:	bd70      	pop	{r4, r5, r6, pc}

08000820 <__aeabi_ddiv>:
 8000820:	b570      	push	{r4, r5, r6, lr}
 8000822:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000826:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800082a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082e:	bf1d      	ittte	ne
 8000830:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000834:	ea94 0f0c 	teqne	r4, ip
 8000838:	ea95 0f0c 	teqne	r5, ip
 800083c:	f000 f8a7 	bleq	800098e <__aeabi_ddiv+0x16e>
 8000840:	eba4 0405 	sub.w	r4, r4, r5
 8000844:	ea81 0e03 	eor.w	lr, r1, r3
 8000848:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800084c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000850:	f000 8088 	beq.w	8000964 <__aeabi_ddiv+0x144>
 8000854:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000858:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800085c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000860:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000864:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000868:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800086c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000870:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000874:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000878:	429d      	cmp	r5, r3
 800087a:	bf08      	it	eq
 800087c:	4296      	cmpeq	r6, r2
 800087e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000882:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000886:	d202      	bcs.n	800088e <__aeabi_ddiv+0x6e>
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	1ab6      	subs	r6, r6, r2
 8000890:	eb65 0503 	sbc.w	r5, r5, r3
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008aa:	bf22      	ittt	cs
 80008ac:	1ab6      	subcs	r6, r6, r2
 80008ae:	4675      	movcs	r5, lr
 80008b0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80008be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c2:	bf22      	ittt	cs
 80008c4:	1ab6      	subcs	r6, r6, r2
 80008c6:	4675      	movcs	r5, lr
 80008c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008da:	bf22      	ittt	cs
 80008dc:	1ab6      	subcs	r6, r6, r2
 80008de:	4675      	movcs	r5, lr
 80008e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f2:	bf22      	ittt	cs
 80008f4:	1ab6      	subcs	r6, r6, r2
 80008f6:	4675      	movcs	r5, lr
 80008f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008fc:	ea55 0e06 	orrs.w	lr, r5, r6
 8000900:	d018      	beq.n	8000934 <__aeabi_ddiv+0x114>
 8000902:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000906:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800090a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000912:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000916:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800091a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091e:	d1c0      	bne.n	80008a2 <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	d10b      	bne.n	800093e <__aeabi_ddiv+0x11e>
 8000926:	ea41 0100 	orr.w	r1, r1, r0
 800092a:	f04f 0000 	mov.w	r0, #0
 800092e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000932:	e7b6      	b.n	80008a2 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	bf04      	itt	eq
 800093a:	4301      	orreq	r1, r0
 800093c:	2000      	moveq	r0, #0
 800093e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000942:	bf88      	it	hi
 8000944:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000948:	f63f aeaf 	bhi.w	80006aa <__aeabi_dmul+0xde>
 800094c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000950:	bf04      	itt	eq
 8000952:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000956:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800095a:	f150 0000 	adcs.w	r0, r0, #0
 800095e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000962:	bd70      	pop	{r4, r5, r6, pc}
 8000964:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000968:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800096c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000970:	bfc2      	ittt	gt
 8000972:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000976:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800097a:	bd70      	popgt	{r4, r5, r6, pc}
 800097c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000980:	f04f 0e00 	mov.w	lr, #0
 8000984:	3c01      	subs	r4, #1
 8000986:	e690      	b.n	80006aa <__aeabi_dmul+0xde>
 8000988:	ea45 0e06 	orr.w	lr, r5, r6
 800098c:	e68d      	b.n	80006aa <__aeabi_dmul+0xde>
 800098e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000992:	ea94 0f0c 	teq	r4, ip
 8000996:	bf08      	it	eq
 8000998:	ea95 0f0c 	teqeq	r5, ip
 800099c:	f43f af3b 	beq.w	8000816 <__aeabi_dmul+0x24a>
 80009a0:	ea94 0f0c 	teq	r4, ip
 80009a4:	d10a      	bne.n	80009bc <__aeabi_ddiv+0x19c>
 80009a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009aa:	f47f af34 	bne.w	8000816 <__aeabi_dmul+0x24a>
 80009ae:	ea95 0f0c 	teq	r5, ip
 80009b2:	f47f af25 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e72c      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009bc:	ea95 0f0c 	teq	r5, ip
 80009c0:	d106      	bne.n	80009d0 <__aeabi_ddiv+0x1b0>
 80009c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c6:	f43f aefd 	beq.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e722      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d4:	bf18      	it	ne
 80009d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009da:	f47f aec5 	bne.w	8000768 <__aeabi_dmul+0x19c>
 80009de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009e2:	f47f af0d 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ea:	f47f aeeb 	bne.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ee:	e712      	b.n	8000816 <__aeabi_dmul+0x24a>

080009f0 <__gedf2>:
 80009f0:	f04f 3cff 	mov.w	ip, #4294967295
 80009f4:	e006      	b.n	8000a04 <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__ledf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	e002      	b.n	8000a04 <__cmpdf2+0x4>
 80009fe:	bf00      	nop

08000a00 <__cmpdf2>:
 8000a00:	f04f 0c01 	mov.w	ip, #1
 8000a04:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a1a:	d01b      	beq.n	8000a54 <__cmpdf2+0x54>
 8000a1c:	b001      	add	sp, #4
 8000a1e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a22:	bf0c      	ite	eq
 8000a24:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a28:	ea91 0f03 	teqne	r1, r3
 8000a2c:	bf02      	ittt	eq
 8000a2e:	ea90 0f02 	teqeq	r0, r2
 8000a32:	2000      	moveq	r0, #0
 8000a34:	4770      	bxeq	lr
 8000a36:	f110 0f00 	cmn.w	r0, #0
 8000a3a:	ea91 0f03 	teq	r1, r3
 8000a3e:	bf58      	it	pl
 8000a40:	4299      	cmppl	r1, r3
 8000a42:	bf08      	it	eq
 8000a44:	4290      	cmpeq	r0, r2
 8000a46:	bf2c      	ite	cs
 8000a48:	17d8      	asrcs	r0, r3, #31
 8000a4a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4e:	f040 0001 	orr.w	r0, r0, #1
 8000a52:	4770      	bx	lr
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	d102      	bne.n	8000a64 <__cmpdf2+0x64>
 8000a5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a62:	d107      	bne.n	8000a74 <__cmpdf2+0x74>
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d1d6      	bne.n	8000a1c <__cmpdf2+0x1c>
 8000a6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a72:	d0d3      	beq.n	8000a1c <__cmpdf2+0x1c>
 8000a74:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_cdrcmple>:
 8000a7c:	4684      	mov	ip, r0
 8000a7e:	4610      	mov	r0, r2
 8000a80:	4662      	mov	r2, ip
 8000a82:	468c      	mov	ip, r1
 8000a84:	4619      	mov	r1, r3
 8000a86:	4663      	mov	r3, ip
 8000a88:	e000      	b.n	8000a8c <__aeabi_cdcmpeq>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdcmpeq>:
 8000a8c:	b501      	push	{r0, lr}
 8000a8e:	f7ff ffb7 	bl	8000a00 <__cmpdf2>
 8000a92:	2800      	cmp	r0, #0
 8000a94:	bf48      	it	mi
 8000a96:	f110 0f00 	cmnmi.w	r0, #0
 8000a9a:	bd01      	pop	{r0, pc}

08000a9c <__aeabi_dcmpeq>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff fff4 	bl	8000a8c <__aeabi_cdcmpeq>
 8000aa4:	bf0c      	ite	eq
 8000aa6:	2001      	moveq	r0, #1
 8000aa8:	2000      	movne	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmplt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffea 	bl	8000a8c <__aeabi_cdcmpeq>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmple>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffe0 	bl	8000a8c <__aeabi_cdcmpeq>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpge>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffce 	bl	8000a7c <__aeabi_cdrcmple>
 8000ae0:	bf94      	ite	ls
 8000ae2:	2001      	movls	r0, #1
 8000ae4:	2000      	movhi	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpgt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffc4 	bl	8000a7c <__aeabi_cdrcmple>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmpun>:
 8000b00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d102      	bne.n	8000b10 <__aeabi_dcmpun+0x10>
 8000b0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0e:	d10a      	bne.n	8000b26 <__aeabi_dcmpun+0x26>
 8000b10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x20>
 8000b1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_dcmpun+0x26>
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0001 	mov.w	r0, #1
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_frsub>:
 8000c5c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c60:	e002      	b.n	8000c68 <__addsf3>
 8000c62:	bf00      	nop

08000c64 <__aeabi_fsub>:
 8000c64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c68 <__addsf3>:
 8000c68:	0042      	lsls	r2, r0, #1
 8000c6a:	bf1f      	itttt	ne
 8000c6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c70:	ea92 0f03 	teqne	r2, r3
 8000c74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7c:	d06a      	beq.n	8000d54 <__addsf3+0xec>
 8000c7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c86:	bfc1      	itttt	gt
 8000c88:	18d2      	addgt	r2, r2, r3
 8000c8a:	4041      	eorgt	r1, r0
 8000c8c:	4048      	eorgt	r0, r1
 8000c8e:	4041      	eorgt	r1, r0
 8000c90:	bfb8      	it	lt
 8000c92:	425b      	neglt	r3, r3
 8000c94:	2b19      	cmp	r3, #25
 8000c96:	bf88      	it	hi
 8000c98:	4770      	bxhi	lr
 8000c9a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ca6:	bf18      	it	ne
 8000ca8:	4240      	negne	r0, r0
 8000caa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cb2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cb6:	bf18      	it	ne
 8000cb8:	4249      	negne	r1, r1
 8000cba:	ea92 0f03 	teq	r2, r3
 8000cbe:	d03f      	beq.n	8000d40 <__addsf3+0xd8>
 8000cc0:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc4:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc8:	eb10 000c 	adds.w	r0, r0, ip
 8000ccc:	f1c3 0320 	rsb	r3, r3, #32
 8000cd0:	fa01 f103 	lsl.w	r1, r1, r3
 8000cd4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__addsf3+0x78>
 8000cda:	4249      	negs	r1, r1
 8000cdc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ce0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ce4:	d313      	bcc.n	8000d0e <__addsf3+0xa6>
 8000ce6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cea:	d306      	bcc.n	8000cfa <__addsf3+0x92>
 8000cec:	0840      	lsrs	r0, r0, #1
 8000cee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cf2:	f102 0201 	add.w	r2, r2, #1
 8000cf6:	2afe      	cmp	r2, #254	; 0xfe
 8000cf8:	d251      	bcs.n	8000d9e <__addsf3+0x136>
 8000cfa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	ea40 0003 	orr.w	r0, r0, r3
 8000d0c:	4770      	bx	lr
 8000d0e:	0049      	lsls	r1, r1, #1
 8000d10:	eb40 0000 	adc.w	r0, r0, r0
 8000d14:	3a01      	subs	r2, #1
 8000d16:	bf28      	it	cs
 8000d18:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d1c:	d2ed      	bcs.n	8000cfa <__addsf3+0x92>
 8000d1e:	fab0 fc80 	clz	ip, r0
 8000d22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d26:	ebb2 020c 	subs.w	r2, r2, ip
 8000d2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d2e:	bfaa      	itet	ge
 8000d30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d34:	4252      	neglt	r2, r2
 8000d36:	4318      	orrge	r0, r3
 8000d38:	bfbc      	itt	lt
 8000d3a:	40d0      	lsrlt	r0, r2
 8000d3c:	4318      	orrlt	r0, r3
 8000d3e:	4770      	bx	lr
 8000d40:	f092 0f00 	teq	r2, #0
 8000d44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d48:	bf06      	itte	eq
 8000d4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d4e:	3201      	addeq	r2, #1
 8000d50:	3b01      	subne	r3, #1
 8000d52:	e7b5      	b.n	8000cc0 <__addsf3+0x58>
 8000d54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d5c:	bf18      	it	ne
 8000d5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d62:	d021      	beq.n	8000da8 <__addsf3+0x140>
 8000d64:	ea92 0f03 	teq	r2, r3
 8000d68:	d004      	beq.n	8000d74 <__addsf3+0x10c>
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	bf08      	it	eq
 8000d70:	4608      	moveq	r0, r1
 8000d72:	4770      	bx	lr
 8000d74:	ea90 0f01 	teq	r0, r1
 8000d78:	bf1c      	itt	ne
 8000d7a:	2000      	movne	r0, #0
 8000d7c:	4770      	bxne	lr
 8000d7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d82:	d104      	bne.n	8000d8e <__addsf3+0x126>
 8000d84:	0040      	lsls	r0, r0, #1
 8000d86:	bf28      	it	cs
 8000d88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d8c:	4770      	bx	lr
 8000d8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d92:	bf3c      	itt	cc
 8000d94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d98:	4770      	bxcc	lr
 8000d9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000da2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da6:	4770      	bx	lr
 8000da8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dac:	bf16      	itet	ne
 8000dae:	4608      	movne	r0, r1
 8000db0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000db4:	4601      	movne	r1, r0
 8000db6:	0242      	lsls	r2, r0, #9
 8000db8:	bf06      	itte	eq
 8000dba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dbe:	ea90 0f01 	teqeq	r0, r1
 8000dc2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dc6:	4770      	bx	lr

08000dc8 <__aeabi_ui2f>:
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	e004      	b.n	8000dd8 <__aeabi_i2f+0x8>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_i2f>:
 8000dd0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dd4:	bf48      	it	mi
 8000dd6:	4240      	negmi	r0, r0
 8000dd8:	ea5f 0c00 	movs.w	ip, r0
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000de4:	4601      	mov	r1, r0
 8000de6:	f04f 0000 	mov.w	r0, #0
 8000dea:	e01c      	b.n	8000e26 <__aeabi_l2f+0x2a>

08000dec <__aeabi_ul2f>:
 8000dec:	ea50 0201 	orrs.w	r2, r0, r1
 8000df0:	bf08      	it	eq
 8000df2:	4770      	bxeq	lr
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e00a      	b.n	8000e10 <__aeabi_l2f+0x14>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_l2f>:
 8000dfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000e00:	bf08      	it	eq
 8000e02:	4770      	bxeq	lr
 8000e04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e08:	d502      	bpl.n	8000e10 <__aeabi_l2f+0x14>
 8000e0a:	4240      	negs	r0, r0
 8000e0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e10:	ea5f 0c01 	movs.w	ip, r1
 8000e14:	bf02      	ittt	eq
 8000e16:	4684      	moveq	ip, r0
 8000e18:	4601      	moveq	r1, r0
 8000e1a:	2000      	moveq	r0, #0
 8000e1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e20:	bf08      	it	eq
 8000e22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e2a:	fabc f28c 	clz	r2, ip
 8000e2e:	3a08      	subs	r2, #8
 8000e30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e34:	db10      	blt.n	8000e58 <__aeabi_l2f+0x5c>
 8000e36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e40:	f1c2 0220 	rsb	r2, r2, #32
 8000e44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e48:	fa20 f202 	lsr.w	r2, r0, r2
 8000e4c:	eb43 0002 	adc.w	r0, r3, r2
 8000e50:	bf08      	it	eq
 8000e52:	f020 0001 	biceq.w	r0, r0, #1
 8000e56:	4770      	bx	lr
 8000e58:	f102 0220 	add.w	r2, r2, #32
 8000e5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e60:	f1c2 0220 	rsb	r2, r2, #32
 8000e64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e68:	fa21 f202 	lsr.w	r2, r1, r2
 8000e6c:	eb43 0002 	adc.w	r0, r3, r2
 8000e70:	bf08      	it	eq
 8000e72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e76:	4770      	bx	lr

08000e78 <__aeabi_fmul>:
 8000e78:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e80:	bf1e      	ittt	ne
 8000e82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e86:	ea92 0f0c 	teqne	r2, ip
 8000e8a:	ea93 0f0c 	teqne	r3, ip
 8000e8e:	d06f      	beq.n	8000f70 <__aeabi_fmul+0xf8>
 8000e90:	441a      	add	r2, r3
 8000e92:	ea80 0c01 	eor.w	ip, r0, r1
 8000e96:	0240      	lsls	r0, r0, #9
 8000e98:	bf18      	it	ne
 8000e9a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e9e:	d01e      	beq.n	8000ede <__aeabi_fmul+0x66>
 8000ea0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ea4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ea8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000eac:	fba0 3101 	umull	r3, r1, r0, r1
 8000eb0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000eb4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000eb8:	bf3e      	ittt	cc
 8000eba:	0049      	lslcc	r1, r1, #1
 8000ebc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ec0:	005b      	lslcc	r3, r3, #1
 8000ec2:	ea40 0001 	orr.w	r0, r0, r1
 8000ec6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eca:	2afd      	cmp	r2, #253	; 0xfd
 8000ecc:	d81d      	bhi.n	8000f0a <__aeabi_fmul+0x92>
 8000ece:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ed2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ed6:	bf08      	it	eq
 8000ed8:	f020 0001 	biceq.w	r0, r0, #1
 8000edc:	4770      	bx	lr
 8000ede:	f090 0f00 	teq	r0, #0
 8000ee2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee6:	bf08      	it	eq
 8000ee8:	0249      	lsleq	r1, r1, #9
 8000eea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ef2:	3a7f      	subs	r2, #127	; 0x7f
 8000ef4:	bfc2      	ittt	gt
 8000ef6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000efa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000efe:	4770      	bxgt	lr
 8000f00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f04:	f04f 0300 	mov.w	r3, #0
 8000f08:	3a01      	subs	r2, #1
 8000f0a:	dc5d      	bgt.n	8000fc8 <__aeabi_fmul+0x150>
 8000f0c:	f112 0f19 	cmn.w	r2, #25
 8000f10:	bfdc      	itt	le
 8000f12:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000f16:	4770      	bxle	lr
 8000f18:	f1c2 0200 	rsb	r2, r2, #0
 8000f1c:	0041      	lsls	r1, r0, #1
 8000f1e:	fa21 f102 	lsr.w	r1, r1, r2
 8000f22:	f1c2 0220 	rsb	r2, r2, #32
 8000f26:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f2a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f2e:	f140 0000 	adc.w	r0, r0, #0
 8000f32:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f36:	bf08      	it	eq
 8000f38:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f3c:	4770      	bx	lr
 8000f3e:	f092 0f00 	teq	r2, #0
 8000f42:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f46:	bf02      	ittt	eq
 8000f48:	0040      	lsleq	r0, r0, #1
 8000f4a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f4e:	3a01      	subeq	r2, #1
 8000f50:	d0f9      	beq.n	8000f46 <__aeabi_fmul+0xce>
 8000f52:	ea40 000c 	orr.w	r0, r0, ip
 8000f56:	f093 0f00 	teq	r3, #0
 8000f5a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0049      	lsleq	r1, r1, #1
 8000f62:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f66:	3b01      	subeq	r3, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fmul+0xe6>
 8000f6a:	ea41 010c 	orr.w	r1, r1, ip
 8000f6e:	e78f      	b.n	8000e90 <__aeabi_fmul+0x18>
 8000f70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f74:	ea92 0f0c 	teq	r2, ip
 8000f78:	bf18      	it	ne
 8000f7a:	ea93 0f0c 	teqne	r3, ip
 8000f7e:	d00a      	beq.n	8000f96 <__aeabi_fmul+0x11e>
 8000f80:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f84:	bf18      	it	ne
 8000f86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f8a:	d1d8      	bne.n	8000f3e <__aeabi_fmul+0xc6>
 8000f8c:	ea80 0001 	eor.w	r0, r0, r1
 8000f90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f94:	4770      	bx	lr
 8000f96:	f090 0f00 	teq	r0, #0
 8000f9a:	bf17      	itett	ne
 8000f9c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000fa0:	4608      	moveq	r0, r1
 8000fa2:	f091 0f00 	teqne	r1, #0
 8000fa6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000faa:	d014      	beq.n	8000fd6 <__aeabi_fmul+0x15e>
 8000fac:	ea92 0f0c 	teq	r2, ip
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_fmul+0x13e>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	d10f      	bne.n	8000fd6 <__aeabi_fmul+0x15e>
 8000fb6:	ea93 0f0c 	teq	r3, ip
 8000fba:	d103      	bne.n	8000fc4 <__aeabi_fmul+0x14c>
 8000fbc:	024b      	lsls	r3, r1, #9
 8000fbe:	bf18      	it	ne
 8000fc0:	4608      	movne	r0, r1
 8000fc2:	d108      	bne.n	8000fd6 <__aeabi_fmul+0x15e>
 8000fc4:	ea80 0001 	eor.w	r0, r0, r1
 8000fc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd4:	4770      	bx	lr
 8000fd6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fda:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fde:	4770      	bx	lr

08000fe0 <__aeabi_fdiv>:
 8000fe0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fe4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fe8:	bf1e      	ittt	ne
 8000fea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fee:	ea92 0f0c 	teqne	r2, ip
 8000ff2:	ea93 0f0c 	teqne	r3, ip
 8000ff6:	d069      	beq.n	80010cc <__aeabi_fdiv+0xec>
 8000ff8:	eba2 0203 	sub.w	r2, r2, r3
 8000ffc:	ea80 0c01 	eor.w	ip, r0, r1
 8001000:	0249      	lsls	r1, r1, #9
 8001002:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8001006:	d037      	beq.n	8001078 <__aeabi_fdiv+0x98>
 8001008:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800100c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8001010:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001014:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001018:	428b      	cmp	r3, r1
 800101a:	bf38      	it	cc
 800101c:	005b      	lslcc	r3, r3, #1
 800101e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001022:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8001026:	428b      	cmp	r3, r1
 8001028:	bf24      	itt	cs
 800102a:	1a5b      	subcs	r3, r3, r1
 800102c:	ea40 000c 	orrcs.w	r0, r0, ip
 8001030:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001034:	bf24      	itt	cs
 8001036:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800103a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800103e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001042:	bf24      	itt	cs
 8001044:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001048:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800104c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001050:	bf24      	itt	cs
 8001052:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001056:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	bf18      	it	ne
 800105e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001062:	d1e0      	bne.n	8001026 <__aeabi_fdiv+0x46>
 8001064:	2afd      	cmp	r2, #253	; 0xfd
 8001066:	f63f af50 	bhi.w	8000f0a <__aeabi_fmul+0x92>
 800106a:	428b      	cmp	r3, r1
 800106c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001070:	bf08      	it	eq
 8001072:	f020 0001 	biceq.w	r0, r0, #1
 8001076:	4770      	bx	lr
 8001078:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800107c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001080:	327f      	adds	r2, #127	; 0x7f
 8001082:	bfc2      	ittt	gt
 8001084:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001088:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800108c:	4770      	bxgt	lr
 800108e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	3a01      	subs	r2, #1
 8001098:	e737      	b.n	8000f0a <__aeabi_fmul+0x92>
 800109a:	f092 0f00 	teq	r2, #0
 800109e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80010a2:	bf02      	ittt	eq
 80010a4:	0040      	lsleq	r0, r0, #1
 80010a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80010aa:	3a01      	subeq	r2, #1
 80010ac:	d0f9      	beq.n	80010a2 <__aeabi_fdiv+0xc2>
 80010ae:	ea40 000c 	orr.w	r0, r0, ip
 80010b2:	f093 0f00 	teq	r3, #0
 80010b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80010ba:	bf02      	ittt	eq
 80010bc:	0049      	lsleq	r1, r1, #1
 80010be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010c2:	3b01      	subeq	r3, #1
 80010c4:	d0f9      	beq.n	80010ba <__aeabi_fdiv+0xda>
 80010c6:	ea41 010c 	orr.w	r1, r1, ip
 80010ca:	e795      	b.n	8000ff8 <__aeabi_fdiv+0x18>
 80010cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010d0:	ea92 0f0c 	teq	r2, ip
 80010d4:	d108      	bne.n	80010e8 <__aeabi_fdiv+0x108>
 80010d6:	0242      	lsls	r2, r0, #9
 80010d8:	f47f af7d 	bne.w	8000fd6 <__aeabi_fmul+0x15e>
 80010dc:	ea93 0f0c 	teq	r3, ip
 80010e0:	f47f af70 	bne.w	8000fc4 <__aeabi_fmul+0x14c>
 80010e4:	4608      	mov	r0, r1
 80010e6:	e776      	b.n	8000fd6 <__aeabi_fmul+0x15e>
 80010e8:	ea93 0f0c 	teq	r3, ip
 80010ec:	d104      	bne.n	80010f8 <__aeabi_fdiv+0x118>
 80010ee:	024b      	lsls	r3, r1, #9
 80010f0:	f43f af4c 	beq.w	8000f8c <__aeabi_fmul+0x114>
 80010f4:	4608      	mov	r0, r1
 80010f6:	e76e      	b.n	8000fd6 <__aeabi_fmul+0x15e>
 80010f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010fc:	bf18      	it	ne
 80010fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001102:	d1ca      	bne.n	800109a <__aeabi_fdiv+0xba>
 8001104:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001108:	f47f af5c 	bne.w	8000fc4 <__aeabi_fmul+0x14c>
 800110c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001110:	f47f af3c 	bne.w	8000f8c <__aeabi_fmul+0x114>
 8001114:	e75f      	b.n	8000fd6 <__aeabi_fmul+0x15e>
 8001116:	bf00      	nop

08001118 <__gesf2>:
 8001118:	f04f 3cff 	mov.w	ip, #4294967295
 800111c:	e006      	b.n	800112c <__cmpsf2+0x4>
 800111e:	bf00      	nop

08001120 <__lesf2>:
 8001120:	f04f 0c01 	mov.w	ip, #1
 8001124:	e002      	b.n	800112c <__cmpsf2+0x4>
 8001126:	bf00      	nop

08001128 <__cmpsf2>:
 8001128:	f04f 0c01 	mov.w	ip, #1
 800112c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001130:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001134:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001138:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800113c:	bf18      	it	ne
 800113e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001142:	d011      	beq.n	8001168 <__cmpsf2+0x40>
 8001144:	b001      	add	sp, #4
 8001146:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800114a:	bf18      	it	ne
 800114c:	ea90 0f01 	teqne	r0, r1
 8001150:	bf58      	it	pl
 8001152:	ebb2 0003 	subspl.w	r0, r2, r3
 8001156:	bf88      	it	hi
 8001158:	17c8      	asrhi	r0, r1, #31
 800115a:	bf38      	it	cc
 800115c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001160:	bf18      	it	ne
 8001162:	f040 0001 	orrne.w	r0, r0, #1
 8001166:	4770      	bx	lr
 8001168:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800116c:	d102      	bne.n	8001174 <__cmpsf2+0x4c>
 800116e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001172:	d105      	bne.n	8001180 <__cmpsf2+0x58>
 8001174:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001178:	d1e4      	bne.n	8001144 <__cmpsf2+0x1c>
 800117a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800117e:	d0e1      	beq.n	8001144 <__cmpsf2+0x1c>
 8001180:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <__aeabi_cfrcmple>:
 8001188:	4684      	mov	ip, r0
 800118a:	4608      	mov	r0, r1
 800118c:	4661      	mov	r1, ip
 800118e:	e7ff      	b.n	8001190 <__aeabi_cfcmpeq>

08001190 <__aeabi_cfcmpeq>:
 8001190:	b50f      	push	{r0, r1, r2, r3, lr}
 8001192:	f7ff ffc9 	bl	8001128 <__cmpsf2>
 8001196:	2800      	cmp	r0, #0
 8001198:	bf48      	it	mi
 800119a:	f110 0f00 	cmnmi.w	r0, #0
 800119e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080011a0 <__aeabi_fcmpeq>:
 80011a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011a4:	f7ff fff4 	bl	8001190 <__aeabi_cfcmpeq>
 80011a8:	bf0c      	ite	eq
 80011aa:	2001      	moveq	r0, #1
 80011ac:	2000      	movne	r0, #0
 80011ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80011b2:	bf00      	nop

080011b4 <__aeabi_fcmplt>:
 80011b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b8:	f7ff ffea 	bl	8001190 <__aeabi_cfcmpeq>
 80011bc:	bf34      	ite	cc
 80011be:	2001      	movcc	r0, #1
 80011c0:	2000      	movcs	r0, #0
 80011c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011c6:	bf00      	nop

080011c8 <__aeabi_fcmple>:
 80011c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011cc:	f7ff ffe0 	bl	8001190 <__aeabi_cfcmpeq>
 80011d0:	bf94      	ite	ls
 80011d2:	2001      	movls	r0, #1
 80011d4:	2000      	movhi	r0, #0
 80011d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011da:	bf00      	nop

080011dc <__aeabi_fcmpge>:
 80011dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011e0:	f7ff ffd2 	bl	8001188 <__aeabi_cfrcmple>
 80011e4:	bf94      	ite	ls
 80011e6:	2001      	movls	r0, #1
 80011e8:	2000      	movhi	r0, #0
 80011ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ee:	bf00      	nop

080011f0 <__aeabi_fcmpgt>:
 80011f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011f4:	f7ff ffc8 	bl	8001188 <__aeabi_cfrcmple>
 80011f8:	bf34      	ite	cc
 80011fa:	2001      	movcc	r0, #1
 80011fc:	2000      	movcs	r0, #0
 80011fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001202:	bf00      	nop

08001204 <__aeabi_fcmpun>:
 8001204:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001208:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800120c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001210:	d102      	bne.n	8001218 <__aeabi_fcmpun+0x14>
 8001212:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001216:	d108      	bne.n	800122a <__aeabi_fcmpun+0x26>
 8001218:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800121c:	d102      	bne.n	8001224 <__aeabi_fcmpun+0x20>
 800121e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001222:	d102      	bne.n	800122a <__aeabi_fcmpun+0x26>
 8001224:	f04f 0000 	mov.w	r0, #0
 8001228:	4770      	bx	lr
 800122a:	f04f 0001 	mov.w	r0, #1
 800122e:	4770      	bx	lr

08001230 <__aeabi_d2lz>:
 8001230:	b538      	push	{r3, r4, r5, lr}
 8001232:	4605      	mov	r5, r0
 8001234:	460c      	mov	r4, r1
 8001236:	2200      	movs	r2, #0
 8001238:	2300      	movs	r3, #0
 800123a:	4628      	mov	r0, r5
 800123c:	4621      	mov	r1, r4
 800123e:	f7ff fc37 	bl	8000ab0 <__aeabi_dcmplt>
 8001242:	b928      	cbnz	r0, 8001250 <__aeabi_d2lz+0x20>
 8001244:	4628      	mov	r0, r5
 8001246:	4621      	mov	r1, r4
 8001248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800124c:	f000 b80a 	b.w	8001264 <__aeabi_d2ulz>
 8001250:	4628      	mov	r0, r5
 8001252:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001256:	f000 f805 	bl	8001264 <__aeabi_d2ulz>
 800125a:	4240      	negs	r0, r0
 800125c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001260:	bd38      	pop	{r3, r4, r5, pc}
 8001262:	bf00      	nop

08001264 <__aeabi_d2ulz>:
 8001264:	b5d0      	push	{r4, r6, r7, lr}
 8001266:	2200      	movs	r2, #0
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <__aeabi_d2ulz+0x34>)
 800126a:	4606      	mov	r6, r0
 800126c:	460f      	mov	r7, r1
 800126e:	f7ff f9ad 	bl	80005cc <__aeabi_dmul>
 8001272:	f7ff fc83 	bl	8000b7c <__aeabi_d2uiz>
 8001276:	4604      	mov	r4, r0
 8001278:	f7ff f92e 	bl	80004d8 <__aeabi_ui2d>
 800127c:	2200      	movs	r2, #0
 800127e:	4b07      	ldr	r3, [pc, #28]	; (800129c <__aeabi_d2ulz+0x38>)
 8001280:	f7ff f9a4 	bl	80005cc <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4630      	mov	r0, r6
 800128a:	4639      	mov	r1, r7
 800128c:	f7fe ffe6 	bl	800025c <__aeabi_dsub>
 8001290:	f7ff fc74 	bl	8000b7c <__aeabi_d2uiz>
 8001294:	4621      	mov	r1, r4
 8001296:	bdd0      	pop	{r4, r6, r7, pc}
 8001298:	3df00000 	.word	0x3df00000
 800129c:	41f00000 	.word	0x41f00000

080012a0 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80012a4:	4b17      	ldr	r3, [pc, #92]	; (8001304 <MX_CAN_Init+0x64>)
 80012a6:	4a18      	ldr	r2, [pc, #96]	; (8001308 <MX_CAN_Init+0x68>)
 80012a8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <MX_CAN_Init+0x64>)
 80012ac:	2204      	movs	r2, #4
 80012ae:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <MX_CAN_Init+0x64>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <MX_CAN_Init+0x64>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <MX_CAN_Init+0x64>)
 80012be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80012c2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_CAN_Init+0x64>)
 80012c6:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 80012ca:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80012cc:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <MX_CAN_Init+0x64>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_CAN_Init+0x64>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80012d8:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <MX_CAN_Init+0x64>)
 80012da:	2200      	movs	r2, #0
 80012dc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_CAN_Init+0x64>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80012e4:	4b07      	ldr	r3, [pc, #28]	; (8001304 <MX_CAN_Init+0x64>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_CAN_Init+0x64>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <MX_CAN_Init+0x64>)
 80012f2:	f002 f9f5 	bl	80036e0 <HAL_CAN_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80012fc:	f000 ff77 	bl	80021ee <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000260 	.word	0x20000260
 8001308:	40006400 	.word	0x40006400

0800130c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a25      	ldr	r2, [pc, #148]	; (80013bc <HAL_CAN_MspInit+0xb0>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d143      	bne.n	80013b4 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800132c:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <HAL_CAN_MspInit+0xb4>)
 800132e:	69db      	ldr	r3, [r3, #28]
 8001330:	4a23      	ldr	r2, [pc, #140]	; (80013c0 <HAL_CAN_MspInit+0xb4>)
 8001332:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001336:	61d3      	str	r3, [r2, #28]
 8001338:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <HAL_CAN_MspInit+0xb4>)
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001344:	4b1e      	ldr	r3, [pc, #120]	; (80013c0 <HAL_CAN_MspInit+0xb4>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	4a1d      	ldr	r2, [pc, #116]	; (80013c0 <HAL_CAN_MspInit+0xb4>)
 800134a:	f043 0308 	orr.w	r3, r3, #8
 800134e:	6193      	str	r3, [r2, #24]
 8001350:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <HAL_CAN_MspInit+0xb4>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	f003 0308 	and.w	r3, r3, #8
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800135c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001362:	2300      	movs	r3, #0
 8001364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	4814      	ldr	r0, [pc, #80]	; (80013c4 <HAL_CAN_MspInit+0xb8>)
 8001372:	f002 fe0f 	bl	8003f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001376:	f44f 7300 	mov.w	r3, #512	; 0x200
 800137a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4619      	mov	r1, r3
 800138a:	480e      	ldr	r0, [pc, #56]	; (80013c4 <HAL_CAN_MspInit+0xb8>)
 800138c:	f002 fe02 	bl	8003f94 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001390:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <HAL_CAN_MspInit+0xbc>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
 80013ae:	4a06      	ldr	r2, [pc, #24]	; (80013c8 <HAL_CAN_MspInit+0xbc>)
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80013b4:	bf00      	nop
 80013b6:	3728      	adds	r7, #40	; 0x28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40006400 	.word	0x40006400
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40010c00 	.word	0x40010c00
 80013c8:	40010000 	.word	0x40010000

080013cc <CanFilterSetup>:
}

/* USER CODE BEGIN 1 */

void CanFilterSetup(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* TODO: Review Filter Implementation */
  // Use mask and list mode to filter IDs from the CAN ID BOM

  // Filter for 0x500 and 0x600 IDs
  CAN_filter0.FilterIdHigh = (uint16_t) (0x501 << 5);
 80013d0:	4b23      	ldr	r3, [pc, #140]	; (8001460 <CanFilterSetup+0x94>)
 80013d2:	f24a 0220 	movw	r2, #40992	; 0xa020
 80013d6:	601a      	str	r2, [r3, #0]
  CAN_filter0.FilterMaskIdHigh = (uint16_t) (0x7F5 << 5);
 80013d8:	4b21      	ldr	r3, [pc, #132]	; (8001460 <CanFilterSetup+0x94>)
 80013da:	f64f 62a0 	movw	r2, #65184	; 0xfea0
 80013de:	609a      	str	r2, [r3, #8]

  CAN_filter0.FilterIdLow = (uint16_t) (0x620 << 5);
 80013e0:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <CanFilterSetup+0x94>)
 80013e2:	f44f 4244 	mov.w	r2, #50176	; 0xc400
 80013e6:	605a      	str	r2, [r3, #4]
  CAN_filter0.FilterMaskIdLow = (uint16_t) (0x7F8 << 5);
 80013e8:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <CanFilterSetup+0x94>)
 80013ea:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80013ee:	60da      	str	r2, [r3, #12]

  CAN_filter0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80013f0:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <CanFilterSetup+0x94>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  CAN_filter0.FilterBank = (uint32_t) 0;
 80013f6:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <CanFilterSetup+0x94>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	615a      	str	r2, [r3, #20]
  CAN_filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 80013fc:	4b18      	ldr	r3, [pc, #96]	; (8001460 <CanFilterSetup+0x94>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
  CAN_filter0.FilterScale = CAN_FILTERSCALE_16BIT;
 8001402:	4b17      	ldr	r3, [pc, #92]	; (8001460 <CanFilterSetup+0x94>)
 8001404:	2200      	movs	r2, #0
 8001406:	61da      	str	r2, [r3, #28]
  CAN_filter0.FilterActivation = CAN_FILTER_ENABLE;
 8001408:	4b15      	ldr	r3, [pc, #84]	; (8001460 <CanFilterSetup+0x94>)
 800140a:	2201      	movs	r2, #1
 800140c:	621a      	str	r2, [r3, #32]

  // Remaining IDs filtered with list mode
  CAN_filter1.FilterIdHigh = (uint16_t) (0x502 << 5);
 800140e:	4b15      	ldr	r3, [pc, #84]	; (8001464 <CanFilterSetup+0x98>)
 8001410:	f24a 0240 	movw	r2, #41024	; 0xa040
 8001414:	601a      	str	r2, [r3, #0]
  CAN_filter1.FilterMaskIdHigh = (uint16_t) (0x401 << 5);
 8001416:	4b13      	ldr	r3, [pc, #76]	; (8001464 <CanFilterSetup+0x98>)
 8001418:	f248 0220 	movw	r2, #32800	; 0x8020
 800141c:	609a      	str	r2, [r3, #8]

  CAN_filter1.FilterIdLow = (uint16_t) (0x401 << 5);
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <CanFilterSetup+0x98>)
 8001420:	f248 0220 	movw	r2, #32800	; 0x8020
 8001424:	605a      	str	r2, [r3, #4]
  CAN_filter1.FilterMaskIdLow = (uint16_t) (0x401 << 5);
 8001426:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <CanFilterSetup+0x98>)
 8001428:	f248 0220 	movw	r2, #32800	; 0x8020
 800142c:	60da      	str	r2, [r3, #12]

  CAN_filter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800142e:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <CanFilterSetup+0x98>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  CAN_filter1.FilterBank = (uint32_t) 1;
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <CanFilterSetup+0x98>)
 8001436:	2201      	movs	r2, #1
 8001438:	615a      	str	r2, [r3, #20]
  CAN_filter1.FilterMode = CAN_FILTERMODE_IDLIST;
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <CanFilterSetup+0x98>)
 800143c:	2201      	movs	r2, #1
 800143e:	619a      	str	r2, [r3, #24]
  CAN_filter1.FilterScale = CAN_FILTERSCALE_16BIT;
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <CanFilterSetup+0x98>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  CAN_filter1.FilterActivation = CAN_FILTER_ENABLE;
 8001446:	4b07      	ldr	r3, [pc, #28]	; (8001464 <CanFilterSetup+0x98>)
 8001448:	2201      	movs	r2, #1
 800144a:	621a      	str	r2, [r3, #32]

  // Configure reception filters
  HAL_CAN_ConfigFilter(&hcan, &CAN_filter0);
 800144c:	4904      	ldr	r1, [pc, #16]	; (8001460 <CanFilterSetup+0x94>)
 800144e:	4806      	ldr	r0, [pc, #24]	; (8001468 <CanFilterSetup+0x9c>)
 8001450:	f002 fa41 	bl	80038d6 <HAL_CAN_ConfigFilter>
  HAL_CAN_ConfigFilter(&hcan, &CAN_filter1);
 8001454:	4903      	ldr	r1, [pc, #12]	; (8001464 <CanFilterSetup+0x98>)
 8001456:	4804      	ldr	r0, [pc, #16]	; (8001468 <CanFilterSetup+0x9c>)
 8001458:	f002 fa3d 	bl	80038d6 <HAL_CAN_ConfigFilter>

}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	200003a8 	.word	0x200003a8
 8001464:	200003d0 	.word	0x200003d0
 8001468:	20000260 	.word	0x20000260

0800146c <Can_Init>:

/*
 * CAN set-up: Sets up the filters, Starts CAN with HAL, and Activates notifications for interrupts.
 */
void Can_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
  CanFilterSetup();
 8001472:	f7ff ffab 	bl	80013cc <CanFilterSetup>
  can_start = HAL_CAN_Start(&hcan);
 8001476:	4808      	ldr	r0, [pc, #32]	; (8001498 <Can_Init+0x2c>)
 8001478:	f002 faf6 	bl	8003a68 <HAL_CAN_Start>
 800147c:	4603      	mov	r3, r0
 800147e:	461a      	mov	r2, r3
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <Can_Init+0x30>)
 8001482:	701a      	strb	r2, [r3, #0]
  assert_param(can_start == HAL_OK);

  HAL_StatusTypeDef can_notification_status = HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001484:	2102      	movs	r1, #2
 8001486:	4804      	ldr	r0, [pc, #16]	; (8001498 <Can_Init+0x2c>)
 8001488:	f002 fc7a 	bl	8003d80 <HAL_CAN_ActivateNotification>
 800148c:	4603      	mov	r3, r0
 800148e:	71fb      	strb	r3, [r7, #7]
  assert_param(can_notification_status == HAL_OK);

  /* To avoid warning of unused variable */
  (void) can_notification_status;
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000260 	.word	0x20000260
 800149c:	2000025c 	.word	0x2000025c

080014a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of canMessageQueue */
  canMessageQueueHandle = osMessageQueueNew (10, sizeof(uint16_t), &canMessageQueue_attributes);
 80014a4:	4a2c      	ldr	r2, [pc, #176]	; (8001558 <MX_FREERTOS_Init+0xb8>)
 80014a6:	2102      	movs	r1, #2
 80014a8:	200a      	movs	r0, #10
 80014aa:	f006 fbdd 	bl	8007c68 <osMessageQueueNew>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4a2a      	ldr	r2, [pc, #168]	; (800155c <MX_FREERTOS_Init+0xbc>)
 80014b2:	6013      	str	r3, [r2, #0]

  /* creation of imuMessageQueue */
  imuMessageQueueHandle = osMessageQueueNew (10, sizeof(uint16_t), &imuMessageQueue_attributes);
 80014b4:	4a2a      	ldr	r2, [pc, #168]	; (8001560 <MX_FREERTOS_Init+0xc0>)
 80014b6:	2102      	movs	r1, #2
 80014b8:	200a      	movs	r0, #10
 80014ba:	f006 fbd5 	bl	8007c68 <osMessageQueueNew>
 80014be:	4603      	mov	r3, r0
 80014c0:	4a28      	ldr	r2, [pc, #160]	; (8001564 <MX_FREERTOS_Init+0xc4>)
 80014c2:	6013      	str	r3, [r2, #0]

  /* creation of gpsMessageQueue */
  gpsMessageQueueHandle = osMessageQueueNew (10, sizeof(uint16_t), &gpsMessageQueue_attributes);
 80014c4:	4a28      	ldr	r2, [pc, #160]	; (8001568 <MX_FREERTOS_Init+0xc8>)
 80014c6:	2102      	movs	r1, #2
 80014c8:	200a      	movs	r0, #10
 80014ca:	f006 fbcd 	bl	8007c68 <osMessageQueueNew>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4a26      	ldr	r2, [pc, #152]	; (800156c <MX_FREERTOS_Init+0xcc>)
 80014d2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of StartDefaultTask */
  StartDefaultTaskHandle = osThreadNew(startDefaultTask, NULL, &StartDefaultTask_attributes);
 80014d4:	4a26      	ldr	r2, [pc, #152]	; (8001570 <MX_FREERTOS_Init+0xd0>)
 80014d6:	2100      	movs	r1, #0
 80014d8:	4826      	ldr	r0, [pc, #152]	; (8001574 <MX_FREERTOS_Init+0xd4>)
 80014da:	f006 fa27 	bl	800792c <osThreadNew>
 80014de:	4603      	mov	r3, r0
 80014e0:	4a25      	ldr	r2, [pc, #148]	; (8001578 <MX_FREERTOS_Init+0xd8>)
 80014e2:	6013      	str	r3, [r2, #0]

  /* creation of readCANTask */
  readCANTaskHandle = osThreadNew(read_CAN_task, NULL, &readCANTask_attributes);
 80014e4:	4a25      	ldr	r2, [pc, #148]	; (800157c <MX_FREERTOS_Init+0xdc>)
 80014e6:	2100      	movs	r1, #0
 80014e8:	4825      	ldr	r0, [pc, #148]	; (8001580 <MX_FREERTOS_Init+0xe0>)
 80014ea:	f006 fa1f 	bl	800792c <osThreadNew>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a24      	ldr	r2, [pc, #144]	; (8001584 <MX_FREERTOS_Init+0xe4>)
 80014f2:	6013      	str	r3, [r2, #0]

  /* creation of transmitCANTask */
  transmitCANTaskHandle = osThreadNew(transmit_CAN_task, NULL, &transmitCANTask_attributes);
 80014f4:	4a24      	ldr	r2, [pc, #144]	; (8001588 <MX_FREERTOS_Init+0xe8>)
 80014f6:	2100      	movs	r1, #0
 80014f8:	4824      	ldr	r0, [pc, #144]	; (800158c <MX_FREERTOS_Init+0xec>)
 80014fa:	f006 fa17 	bl	800792c <osThreadNew>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a23      	ldr	r2, [pc, #140]	; (8001590 <MX_FREERTOS_Init+0xf0>)
 8001502:	6013      	str	r3, [r2, #0]

  /* creation of readIMUTask */
  readIMUTaskHandle = osThreadNew(read_IMU_task, NULL, &readIMUTask_attributes);
 8001504:	4a23      	ldr	r2, [pc, #140]	; (8001594 <MX_FREERTOS_Init+0xf4>)
 8001506:	2100      	movs	r1, #0
 8001508:	4823      	ldr	r0, [pc, #140]	; (8001598 <MX_FREERTOS_Init+0xf8>)
 800150a:	f006 fa0f 	bl	800792c <osThreadNew>
 800150e:	4603      	mov	r3, r0
 8001510:	4a22      	ldr	r2, [pc, #136]	; (800159c <MX_FREERTOS_Init+0xfc>)
 8001512:	6013      	str	r3, [r2, #0]

  /* creation of transmitIMUTask */
  transmitIMUTaskHandle = osThreadNew(transmit_IMU_task, NULL, &transmitIMUTask_attributes);
 8001514:	4a22      	ldr	r2, [pc, #136]	; (80015a0 <MX_FREERTOS_Init+0x100>)
 8001516:	2100      	movs	r1, #0
 8001518:	4822      	ldr	r0, [pc, #136]	; (80015a4 <MX_FREERTOS_Init+0x104>)
 800151a:	f006 fa07 	bl	800792c <osThreadNew>
 800151e:	4603      	mov	r3, r0
 8001520:	4a21      	ldr	r2, [pc, #132]	; (80015a8 <MX_FREERTOS_Init+0x108>)
 8001522:	6013      	str	r3, [r2, #0]

  /* creation of readGPSTask */
  readGPSTaskHandle = osThreadNew(read_GPS_task, NULL, &readGPSTask_attributes);
 8001524:	4a21      	ldr	r2, [pc, #132]	; (80015ac <MX_FREERTOS_Init+0x10c>)
 8001526:	2100      	movs	r1, #0
 8001528:	4821      	ldr	r0, [pc, #132]	; (80015b0 <MX_FREERTOS_Init+0x110>)
 800152a:	f006 f9ff 	bl	800792c <osThreadNew>
 800152e:	4603      	mov	r3, r0
 8001530:	4a20      	ldr	r2, [pc, #128]	; (80015b4 <MX_FREERTOS_Init+0x114>)
 8001532:	6013      	str	r3, [r2, #0]

  /* creation of transmitGPSTask */
  transmitGPSTaskHandle = osThreadNew(transmit_GPS_task, NULL, &transmitGPSTask_attributes);
 8001534:	4a20      	ldr	r2, [pc, #128]	; (80015b8 <MX_FREERTOS_Init+0x118>)
 8001536:	2100      	movs	r1, #0
 8001538:	4820      	ldr	r0, [pc, #128]	; (80015bc <MX_FREERTOS_Init+0x11c>)
 800153a:	f006 f9f7 	bl	800792c <osThreadNew>
 800153e:	4603      	mov	r3, r0
 8001540:	4a1f      	ldr	r2, [pc, #124]	; (80015c0 <MX_FREERTOS_Init+0x120>)
 8001542:	6013      	str	r3, [r2, #0]

  /* creation of kernelLEDTask */
  kernelLEDTaskHandle = osThreadNew(kernel_LED_task, NULL, &kernelLEDTask_attributes);
 8001544:	4a1f      	ldr	r2, [pc, #124]	; (80015c4 <MX_FREERTOS_Init+0x124>)
 8001546:	2100      	movs	r1, #0
 8001548:	481f      	ldr	r0, [pc, #124]	; (80015c8 <MX_FREERTOS_Init+0x128>)
 800154a:	f006 f9ef 	bl	800792c <osThreadNew>
 800154e:	4603      	mov	r3, r0
 8001550:	4a1e      	ldr	r2, [pc, #120]	; (80015cc <MX_FREERTOS_Init+0x12c>)
 8001552:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	080106bc 	.word	0x080106bc
 800155c:	200002a8 	.word	0x200002a8
 8001560:	080106d4 	.word	0x080106d4
 8001564:	200002ac 	.word	0x200002ac
 8001568:	080106ec 	.word	0x080106ec
 800156c:	200002b0 	.word	0x200002b0
 8001570:	0801059c 	.word	0x0801059c
 8001574:	080015d1 	.word	0x080015d1
 8001578:	20000288 	.word	0x20000288
 800157c:	080105c0 	.word	0x080105c0
 8001580:	080015e1 	.word	0x080015e1
 8001584:	2000028c 	.word	0x2000028c
 8001588:	080105e4 	.word	0x080105e4
 800158c:	08001689 	.word	0x08001689
 8001590:	20000290 	.word	0x20000290
 8001594:	08010608 	.word	0x08010608
 8001598:	080017c9 	.word	0x080017c9
 800159c:	20000294 	.word	0x20000294
 80015a0:	0801062c 	.word	0x0801062c
 80015a4:	08001865 	.word	0x08001865
 80015a8:	20000298 	.word	0x20000298
 80015ac:	08010650 	.word	0x08010650
 80015b0:	08001965 	.word	0x08001965
 80015b4:	2000029c 	.word	0x2000029c
 80015b8:	08010674 	.word	0x08010674
 80015bc:	080019a9 	.word	0x080019a9
 80015c0:	200002a0 	.word	0x200002a0
 80015c4:	08010698 	.word	0x08010698
 80015c8:	08001aad 	.word	0x08001aad
 80015cc:	200002a4 	.word	0x200002a4

080015d0 <startDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startDefaultTask */
void startDefaultTask(void *argument)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80015d8:	2001      	movs	r0, #1
 80015da:	f006 fb17 	bl	8007c0c <osDelay>
 80015de:	e7fb      	b.n	80015d8 <startDefaultTask+0x8>

080015e0 <read_CAN_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_CAN_task */
void read_CAN_task(void *argument)
{
 80015e0:	b5b0      	push	{r4, r5, r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  while (1) {

    /* Wait for thread flags to be set in the CAN Rx FIFO0 Interrupt Callback */
    osThreadFlagsWait(CAN_READY, osFlagsWaitAll, osWaitForever);
 80015e8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ec:	2101      	movs	r1, #1
 80015ee:	2001      	movs	r0, #1
 80015f0:	f006 fa78 	bl	8007ae4 <osThreadFlagsWait>

    /* If CAN Rx FIFO0 is not empty */
    if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) != 0) {
 80015f4:	2100      	movs	r1, #0
 80015f6:	481e      	ldr	r0, [pc, #120]	; (8001670 <read_CAN_task+0x90>)
 80015f8:	f002 fb9b 	bl	8003d32 <HAL_CAN_GetRxFifoFillLevel>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d031      	beq.n	8001666 <read_CAN_task+0x86>

      /* There are multiple CAN IDs being passed through the filter, pull out the current message */
      rx_status = HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &can_rx_header, current_can_data);
 8001602:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <read_CAN_task+0x94>)
 8001604:	4a1c      	ldr	r2, [pc, #112]	; (8001678 <read_CAN_task+0x98>)
 8001606:	2100      	movs	r1, #0
 8001608:	4819      	ldr	r0, [pc, #100]	; (8001670 <read_CAN_task+0x90>)
 800160a:	f002 fa71 	bl	8003af0 <HAL_CAN_GetRxMessage>
 800160e:	4603      	mov	r3, r0
 8001610:	461a      	mov	r2, r3
 8001612:	4b1a      	ldr	r3, [pc, #104]	; (800167c <read_CAN_task+0x9c>)
 8001614:	701a      	strb	r2, [r3, #0]

      /* Check the rx status */
      if (rx_status != HAL_OK) {
 8001616:	4b19      	ldr	r3, [pc, #100]	; (800167c <read_CAN_task+0x9c>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <read_CAN_task+0x42>
	  Error_Handler();
 800161e:	f000 fde6 	bl	80021ee <Error_Handler>
      }

      /* Package into CAN_msg_t */
      current_can_message.header = can_rx_header;
 8001622:	4a17      	ldr	r2, [pc, #92]	; (8001680 <read_CAN_task+0xa0>)
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <read_CAN_task+0x98>)
 8001626:	4614      	mov	r4, r2
 8001628:	461d      	mov	r5, r3
 800162a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800162c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800162e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001632:	e884 0007 	stmia.w	r4, {r0, r1, r2}

      /* Copy all bytes of data */
      for (uint8_t i = 0; i < 8; i++) {
 8001636:	2300      	movs	r3, #0
 8001638:	73fb      	strb	r3, [r7, #15]
 800163a:	e00a      	b.n	8001652 <read_CAN_task+0x72>
	current_can_message.data[i] = current_can_data[i];
 800163c:	7bfa      	ldrb	r2, [r7, #15]
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	490c      	ldr	r1, [pc, #48]	; (8001674 <read_CAN_task+0x94>)
 8001642:	5c89      	ldrb	r1, [r1, r2]
 8001644:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <read_CAN_task+0xa0>)
 8001646:	4413      	add	r3, r2
 8001648:	460a      	mov	r2, r1
 800164a:	771a      	strb	r2, [r3, #28]
      for (uint8_t i = 0; i < 8; i++) {
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	3301      	adds	r3, #1
 8001650:	73fb      	strb	r3, [r7, #15]
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	2b07      	cmp	r3, #7
 8001656:	d9f1      	bls.n	800163c <read_CAN_task+0x5c>
      }

      /* Add CAN message onto canMessageQueue */
      osMessageQueuePut(canMessageQueueHandle, &current_can_message, 0U, 0U);
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <read_CAN_task+0xa4>)
 800165a:	6818      	ldr	r0, [r3, #0]
 800165c:	2300      	movs	r3, #0
 800165e:	2200      	movs	r2, #0
 8001660:	4907      	ldr	r1, [pc, #28]	; (8001680 <read_CAN_task+0xa0>)
 8001662:	f006 fb87 	bl	8007d74 <osMessageQueuePut>
    }

    /* Enables Interrupts */
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001666:	2102      	movs	r1, #2
 8001668:	4801      	ldr	r0, [pc, #4]	; (8001670 <read_CAN_task+0x90>)
 800166a:	f002 fb89 	bl	8003d80 <HAL_CAN_ActivateNotification>
    osThreadFlagsWait(CAN_READY, osFlagsWaitAll, osWaitForever);
 800166e:	e7bb      	b.n	80015e8 <read_CAN_task+0x8>
 8001670:	20000260 	.word	0x20000260
 8001674:	20000414 	.word	0x20000414
 8001678:	200003f8 	.word	0x200003f8
 800167c:	200002b4 	.word	0x200002b4
 8001680:	200002b8 	.word	0x200002b8
 8001684:	200002a8 	.word	0x200002a8

08001688 <transmit_CAN_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_CAN_task */
void transmit_CAN_task(void *argument)
{
 8001688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800168a:	b08f      	sub	sp, #60	; 0x3c
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  while (1) {

    /* Check if there are messages in the queue */
    if (osMessageQueueGetCount(canMessageQueueHandle) == 0) {
 8001690:	4b49      	ldr	r3, [pc, #292]	; (80017b8 <transmit_CAN_task+0x130>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f006 fc53 	bl	8007f40 <osMessageQueueGetCount>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <transmit_CAN_task+0x1c>
      osThreadYield();
 80016a0:	f006 f9ee 	bl	8007a80 <osThreadYield>
    }

    /* Retrieve CAN message from queue */
    queue_status = osMessageQueueGet(canMessageQueueHandle, &can_message, NULL, osWaitForever);
 80016a4:	4b44      	ldr	r3, [pc, #272]	; (80017b8 <transmit_CAN_task+0x130>)
 80016a6:	6818      	ldr	r0, [r3, #0]
 80016a8:	f04f 33ff 	mov.w	r3, #4294967295
 80016ac:	2200      	movs	r2, #0
 80016ae:	4943      	ldr	r1, [pc, #268]	; (80017bc <transmit_CAN_task+0x134>)
 80016b0:	f006 fbd4 	bl	8007e5c <osMessageQueueGet>
 80016b4:	6338      	str	r0, [r7, #48]	; 0x30

    /* Yield if nothing on queue */
    if (queue_status != osOK){
 80016b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <transmit_CAN_task+0x38>
      osThreadYield();
 80016bc:	f006 f9e0 	bl	8007a80 <osThreadYield>
    }

    /* Initialize a CAN buffer */
    uint8_t can_buffer[CAN_BUFFER_LEN] = {0};
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	821a      	strh	r2, [r3, #16]

    /* Get current epoch Time Stamp */
    time_t current_timestamp = get_current_timestamp();
 80016d4:	f001 fc40 	bl	8002f58 <get_current_timestamp>
 80016d8:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28

    /* TIMESTAMP: 8 Bytes */
    for (uint8_t i=0; i<CAN_BUFFER_LEN - 14; i++) {
 80016dc:	2300      	movs	r3, #0
 80016de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80016e2:	e020      	b.n	8001726 <transmit_CAN_task+0x9e>
      /* Put each byte in position 'i' */
      can_buffer[i] = TIMESTAMP_BYTE(i, current_timestamp);
 80016e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80016e8:	00d9      	lsls	r1, r3, #3
 80016ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80016ee:	f1c1 0620 	rsb	r6, r1, #32
 80016f2:	f1b1 0020 	subs.w	r0, r1, #32
 80016f6:	fa22 f401 	lsr.w	r4, r2, r1
 80016fa:	fa03 f606 	lsl.w	r6, r3, r6
 80016fe:	ea44 0406 	orr.w	r4, r4, r6
 8001702:	d402      	bmi.n	800170a <transmit_CAN_task+0x82>
 8001704:	fa43 f000 	asr.w	r0, r3, r0
 8001708:	4304      	orrs	r4, r0
 800170a:	fa43 f501 	asr.w	r5, r3, r1
 800170e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001712:	b2e2      	uxtb	r2, r4
 8001714:	3338      	adds	r3, #56	; 0x38
 8001716:	443b      	add	r3, r7
 8001718:	f803 2c2c 	strb.w	r2, [r3, #-44]
    for (uint8_t i=0; i<CAN_BUFFER_LEN - 14; i++) {
 800171c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001720:	3301      	adds	r3, #1
 8001722:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001726:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800172a:	2b07      	cmp	r3, #7
 800172c:	d9da      	bls.n	80016e4 <transmit_CAN_task+0x5c>
    }

    /* CAN MESSAGE IDENTIFIER */
    can_buffer[CAN_BUFFER_LEN - 14] = '#';
 800172e:	2323      	movs	r3, #35	; 0x23
 8001730:	753b      	strb	r3, [r7, #20]

    /* CAN ID: 4 ASCII characters */
    uint8_t id_h = 0xFFUL & (can_message.header.StdId >> 8);
 8001732:	4b22      	ldr	r3, [pc, #136]	; (80017bc <transmit_CAN_task+0x134>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	0a1b      	lsrs	r3, r3, #8
 8001738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t id_l = 0xFFUL & (can_message.header.StdId);
 800173c:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <transmit_CAN_task+0x134>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    can_buffer[CAN_BUFFER_LEN - 13] = id_h;
 8001744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001748:	757b      	strb	r3, [r7, #21]
    can_buffer[CAN_BUFFER_LEN - 12] = id_l;
 800174a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800174e:	75bb      	strb	r3, [r7, #22]


    /* CAN DATA: 16 ASCII characters */
    for (uint8_t i=0; i<8; i++) {
 8001750:	2300      	movs	r3, #0
 8001752:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001756:	e010      	b.n	800177a <transmit_CAN_task+0xf2>
      /* Copy each byte */
      can_buffer[i + CAN_BUFFER_LEN - 11]= can_message.data[i];
 8001758:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800175c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001760:	330b      	adds	r3, #11
 8001762:	4916      	ldr	r1, [pc, #88]	; (80017bc <transmit_CAN_task+0x134>)
 8001764:	440a      	add	r2, r1
 8001766:	7f12      	ldrb	r2, [r2, #28]
 8001768:	3338      	adds	r3, #56	; 0x38
 800176a:	443b      	add	r3, r7
 800176c:	f803 2c2c 	strb.w	r2, [r3, #-44]
    for (uint8_t i=0; i<8; i++) {
 8001770:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001774:	3301      	adds	r3, #1
 8001776:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800177a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800177e:	2b07      	cmp	r3, #7
 8001780:	d9ea      	bls.n	8001758 <transmit_CAN_task+0xd0>
    }


    /* CAN DATA LENGTH: 1 ASCII character */
    uint8_t length = "0123456789ABCDEF"[ can_message.header.DLC & 0xFUL];
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <transmit_CAN_task+0x134>)
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	4a0d      	ldr	r2, [pc, #52]	; (80017c0 <transmit_CAN_task+0x138>)
 800178c:	5cd3      	ldrb	r3, [r2, r3]
 800178e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    can_buffer[CAN_BUFFER_LEN - 3] = length;
 8001792:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001796:	77fb      	strb	r3, [r7, #31]

    /* NEW LINE: 1 ASCII character */
    can_buffer[CAN_BUFFER_LEN - 2] = '\r';
 8001798:	230d      	movs	r3, #13
 800179a:	f887 3020 	strb.w	r3, [r7, #32]

    /* CARRIAGE RETURN: 1 ASCII character */
    can_buffer[CAN_BUFFER_LEN - 1] = '\n';
 800179e:	230a      	movs	r3, #10
 80017a0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    /* Transmit over Radio */
    HAL_UART_Transmit(&huart1, can_buffer, sizeof(can_buffer), 1000);
 80017a4:	f107 010c 	add.w	r1, r7, #12
 80017a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ac:	2216      	movs	r2, #22
 80017ae:	4805      	ldr	r0, [pc, #20]	; (80017c4 <transmit_CAN_task+0x13c>)
 80017b0:	f005 feb4 	bl	800751c <HAL_UART_Transmit>
  while (1) {
 80017b4:	e76c      	b.n	8001690 <transmit_CAN_task+0x8>
 80017b6:	bf00      	nop
 80017b8:	200002a8 	.word	0x200002a8
 80017bc:	200002dc 	.word	0x200002dc
 80017c0:	08010478 	.word	0x08010478
 80017c4:	20000514 	.word	0x20000514

080017c8 <read_IMU_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_IMU_task */
void read_IMU_task(void *argument)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  while(1)
  {
    /* Get Data */
    gy_x.float_value = gyro(GYRO_X);
 80017d0:	2000      	movs	r0, #0
 80017d2:	f000 fb6d 	bl	8001eb0 <gyro>
 80017d6:	4603      	mov	r3, r0
 80017d8:	61fb      	str	r3, [r7, #28]
    gy_y.float_value = gyro(GYRO_Y);
 80017da:	2001      	movs	r0, #1
 80017dc:	f000 fb68 	bl	8001eb0 <gyro>
 80017e0:	4603      	mov	r3, r0
 80017e2:	61bb      	str	r3, [r7, #24]
    gy_z.float_value = gyro(GYRO_Z);
 80017e4:	2002      	movs	r0, #2
 80017e6:	f000 fb63 	bl	8001eb0 <gyro>
 80017ea:	4603      	mov	r3, r0
 80017ec:	617b      	str	r3, [r7, #20]
    ax_x.float_value = accel(ACCEL_X);
 80017ee:	2000      	movs	r0, #0
 80017f0:	f000 fbc6 	bl	8001f80 <accel>
 80017f4:	4603      	mov	r3, r0
 80017f6:	613b      	str	r3, [r7, #16]
    ax_y.float_value = accel(ACCEL_Y);
 80017f8:	2001      	movs	r0, #1
 80017fa:	f000 fbc1 	bl	8001f80 <accel>
 80017fe:	4603      	mov	r3, r0
 8001800:	60fb      	str	r3, [r7, #12]
    ax_z.float_value = accel(ACCEL_Z);
 8001802:	2002      	movs	r0, #2
 8001804:	f000 fbbc 	bl	8001f80 <accel>
 8001808:	4603      	mov	r3, r0
 800180a:	60bb      	str	r3, [r7, #8]

    /* Add to IMU Queue */
    add_to_IMU_queue("G", "X", gy_x);
 800180c:	69fa      	ldr	r2, [r7, #28]
 800180e:	4910      	ldr	r1, [pc, #64]	; (8001850 <read_IMU_task+0x88>)
 8001810:	4810      	ldr	r0, [pc, #64]	; (8001854 <read_IMU_task+0x8c>)
 8001812:	f000 f95f 	bl	8001ad4 <add_to_IMU_queue>
    add_to_IMU_queue("G", "Y", gy_y);
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	490f      	ldr	r1, [pc, #60]	; (8001858 <read_IMU_task+0x90>)
 800181a:	480e      	ldr	r0, [pc, #56]	; (8001854 <read_IMU_task+0x8c>)
 800181c:	f000 f95a 	bl	8001ad4 <add_to_IMU_queue>
    add_to_IMU_queue("G", "Z", gy_z);
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	490e      	ldr	r1, [pc, #56]	; (800185c <read_IMU_task+0x94>)
 8001824:	480b      	ldr	r0, [pc, #44]	; (8001854 <read_IMU_task+0x8c>)
 8001826:	f000 f955 	bl	8001ad4 <add_to_IMU_queue>
    add_to_IMU_queue("A", "X", ax_x);
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4908      	ldr	r1, [pc, #32]	; (8001850 <read_IMU_task+0x88>)
 800182e:	480c      	ldr	r0, [pc, #48]	; (8001860 <read_IMU_task+0x98>)
 8001830:	f000 f950 	bl	8001ad4 <add_to_IMU_queue>
    add_to_IMU_queue("A", "Y", ax_y);
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	4908      	ldr	r1, [pc, #32]	; (8001858 <read_IMU_task+0x90>)
 8001838:	4809      	ldr	r0, [pc, #36]	; (8001860 <read_IMU_task+0x98>)
 800183a:	f000 f94b 	bl	8001ad4 <add_to_IMU_queue>
    add_to_IMU_queue("A", "Z", ax_z);
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	4906      	ldr	r1, [pc, #24]	; (800185c <read_IMU_task+0x94>)
 8001842:	4807      	ldr	r0, [pc, #28]	; (8001860 <read_IMU_task+0x98>)
 8001844:	f000 f946 	bl	8001ad4 <add_to_IMU_queue>

    /* Delay */
    osDelay(READ_IMU_DELAY);
 8001848:	2064      	movs	r0, #100	; 0x64
 800184a:	f006 f9df 	bl	8007c0c <osDelay>
    gy_x.float_value = gyro(GYRO_X);
 800184e:	e7bf      	b.n	80017d0 <read_IMU_task+0x8>
 8001850:	0801048c 	.word	0x0801048c
 8001854:	08010490 	.word	0x08010490
 8001858:	08010494 	.word	0x08010494
 800185c:	08010498 	.word	0x08010498
 8001860:	0801049c 	.word	0x0801049c

08001864 <transmit_IMU_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_IMU_task */
void transmit_IMU_task(void *argument)
{
 8001864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001866:	b091      	sub	sp, #68	; 0x44
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  while(1)
  {
    /* Check if there are messages in the queue */
    if (osMessageQueueGetCount(imuMessageQueueHandle) == 0) {
 800186c:	4b3b      	ldr	r3, [pc, #236]	; (800195c <transmit_IMU_task+0xf8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f006 fb65 	bl	8007f40 <osMessageQueueGetCount>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <transmit_IMU_task+0x1c>
	osThreadYield();
 800187c:	f006 f900 	bl	8007a80 <osThreadYield>
    }

    /* Get IMU Message from Queue */
    imu_queue_status = osMessageQueueGet(imuMessageQueueHandle, &imu_message, NULL, osWaitForever);
 8001880:	4b36      	ldr	r3, [pc, #216]	; (800195c <transmit_IMU_task+0xf8>)
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	f107 0120 	add.w	r1, r7, #32
 8001888:	f04f 33ff 	mov.w	r3, #4294967295
 800188c:	2200      	movs	r2, #0
 800188e:	f006 fae5 	bl	8007e5c <osMessageQueueGet>
 8001892:	6378      	str	r0, [r7, #52]	; 0x34

    /* Yield thread if status not ok */
    if (imu_queue_status != osOK){
 8001894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <transmit_IMU_task+0x3a>
      osThreadYield();
 800189a:	f006 f8f1 	bl	8007a80 <osThreadYield>
    }

    /* Initialize a IMU buffer */
    uint8_t imu_buffer[IMU_MESSAGE_LEN] = {0};
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	f107 0310 	add.w	r3, r7, #16
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	731a      	strb	r2, [r3, #12]

    /* Get current epoch Time Stamp */
    time_t current_timestamp = get_current_timestamp();
 80018b0:	f001 fb52 	bl	8002f58 <get_current_timestamp>
 80018b4:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28

    /* TIMESTAMP: 8 Bytes */
    for (uint8_t i=0; i<IMU_MESSAGE_LEN - 9; i++) {
 80018b8:	2300      	movs	r3, #0
 80018ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80018be:	e020      	b.n	8001902 <transmit_IMU_task+0x9e>
      /* Put each byte in position 'i' */
      imu_buffer[i] = TIMESTAMP_BYTE(i, current_timestamp);
 80018c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018c4:	00d9      	lsls	r1, r3, #3
 80018c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018ca:	f1c1 0620 	rsb	r6, r1, #32
 80018ce:	f1b1 0020 	subs.w	r0, r1, #32
 80018d2:	fa22 f401 	lsr.w	r4, r2, r1
 80018d6:	fa03 f606 	lsl.w	r6, r3, r6
 80018da:	ea44 0406 	orr.w	r4, r4, r6
 80018de:	d402      	bmi.n	80018e6 <transmit_IMU_task+0x82>
 80018e0:	fa43 f000 	asr.w	r0, r3, r0
 80018e4:	4304      	orrs	r4, r0
 80018e6:	fa43 f501 	asr.w	r5, r3, r1
 80018ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018ee:	b2e2      	uxtb	r2, r4
 80018f0:	3340      	adds	r3, #64	; 0x40
 80018f2:	443b      	add	r3, r7
 80018f4:	f803 2c34 	strb.w	r2, [r3, #-52]
    for (uint8_t i=0; i<IMU_MESSAGE_LEN - 9; i++) {
 80018f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018fc:	3301      	adds	r3, #1
 80018fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001902:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001906:	2b07      	cmp	r3, #7
 8001908:	d9da      	bls.n	80018c0 <transmit_IMU_task+0x5c>
    }

    /* IMU ID */
    imu_buffer[IMU_MESSAGE_LEN - 9] = '@';
 800190a:	2340      	movs	r3, #64	; 0x40
 800190c:	753b      	strb	r3, [r7, #20]

    /* IMU Data from queue */
    imu_buffer[IMU_MESSAGE_LEN - 8] = imu_message.imu_type;
 800190e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001912:	757b      	strb	r3, [r7, #21]
    imu_buffer[IMU_MESSAGE_LEN - 7] = imu_message.dimension;
 8001914:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001918:	75bb      	strb	r3, [r7, #22]

    /* Copy data */
    for (int i = 0; i < 4; i++) {
 800191a:	2300      	movs	r3, #0
 800191c:	63bb      	str	r3, [r7, #56]	; 0x38
 800191e:	e00d      	b.n	800193c <transmit_IMU_task+0xd8>
	imu_buffer[i + IMU_MESSAGE_LEN - 6] = imu_message.data[i];
 8001920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001922:	330b      	adds	r3, #11
 8001924:	f107 0122 	add.w	r1, r7, #34	; 0x22
 8001928:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800192a:	440a      	add	r2, r1
 800192c:	7812      	ldrb	r2, [r2, #0]
 800192e:	3340      	adds	r3, #64	; 0x40
 8001930:	443b      	add	r3, r7
 8001932:	f803 2c34 	strb.w	r2, [r3, #-52]
    for (int i = 0; i < 4; i++) {
 8001936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001938:	3301      	adds	r3, #1
 800193a:	63bb      	str	r3, [r7, #56]	; 0x38
 800193c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800193e:	2b03      	cmp	r3, #3
 8001940:	ddee      	ble.n	8001920 <transmit_IMU_task+0xbc>
    }

    /* NEW LINE */
    imu_buffer[IMU_MESSAGE_LEN - 2] = '\r';
 8001942:	230d      	movs	r3, #13
 8001944:	76fb      	strb	r3, [r7, #27]

    /* CARRIAGE RETURN */
    imu_buffer[IMU_MESSAGE_LEN - 1] = '\n';
 8001946:	230a      	movs	r3, #10
 8001948:	773b      	strb	r3, [r7, #28]

    /* Transmit over Radio */
    HAL_UART_Transmit(&huart1, imu_buffer, sizeof(imu_buffer), 1000);
 800194a:	f107 010c 	add.w	r1, r7, #12
 800194e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001952:	2211      	movs	r2, #17
 8001954:	4802      	ldr	r0, [pc, #8]	; (8001960 <transmit_IMU_task+0xfc>)
 8001956:	f005 fde1 	bl	800751c <HAL_UART_Transmit>
  {
 800195a:	e787      	b.n	800186c <transmit_IMU_task+0x8>
 800195c:	200002ac 	.word	0x200002ac
 8001960:	20000514 	.word	0x20000514

08001964 <read_GPS_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_GPS_task */
void read_GPS_task(void *argument)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 800196a:	af00      	add	r7, sp, #0
 800196c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8001970:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8001974:	6018      	str	r0, [r3, #0]

    /* Initialize a GPS data struct */
    GPS parsed_GPS_data;

    /* Read in an NMEA message into the buffer */
    readNMEA(&receive_buffer);
 8001976:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800197a:	4618      	mov	r0, r3
 800197c:	f000 fb8e 	bl	800209c <readNMEA>

    /* Parse the buffer data --> gets stored in parsed_GPS_data */
    nmea_parse(&parsed_GPS_data, &receive_buffer);
 8001980:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001984:	f107 0308 	add.w	r3, r7, #8
 8001988:	4611      	mov	r1, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f001 f8c2 	bl	8002b14 <nmea_parse>

    /* Add to the GPS Queue */
    add_to_GPS_queue(&parsed_GPS_data);
 8001990:	f107 0308 	add.w	r3, r7, #8
 8001994:	4618      	mov	r0, r3
 8001996:	f000 f8cb 	bl	8001b30 <add_to_GPS_queue>

    /* Delay */
    osDelay(READ_GPS_DELAY);
 800199a:	4802      	ldr	r0, [pc, #8]	; (80019a4 <read_GPS_task+0x40>)
 800199c:	f006 f936 	bl	8007c0c <osDelay>
  while(1) {
 80019a0:	e7e9      	b.n	8001976 <read_GPS_task+0x12>
 80019a2:	bf00      	nop
 80019a4:	000493e0 	.word	0x000493e0

080019a8 <transmit_GPS_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_GPS_task */
void transmit_GPS_task(void *argument)
{
 80019a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019aa:	b0df      	sub	sp, #380	; 0x17c
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80019b2:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80019b6:	6018      	str	r0, [r3, #0]

  /* Infinite loop */
  while(1) {

    /* Check if there are messages in the queue */
    if (osMessageQueueGetCount(gpsMessageQueueHandle) == 0) {
 80019b8:	4b3a      	ldr	r3, [pc, #232]	; (8001aa4 <transmit_GPS_task+0xfc>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f006 fabf 	bl	8007f40 <osMessageQueueGetCount>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <transmit_GPS_task+0x24>
      osThreadYield(); // Yield to other tasks if the queue is empty
 80019c8:	f006 f85a 	bl	8007a80 <osThreadYield>
    }

    /* Get a message from the queue */
    nmea_queue_status = osMessageQueueGet(gpsMessageQueueHandle, &gps_message, NULL, osWaitForever);
 80019cc:	4b35      	ldr	r3, [pc, #212]	; (8001aa4 <transmit_GPS_task+0xfc>)
 80019ce:	6818      	ldr	r0, [r3, #0]
 80019d0:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80019d4:	f04f 33ff 	mov.w	r3, #4294967295
 80019d8:	2200      	movs	r2, #0
 80019da:	f006 fa3f 	bl	8007e5c <osMessageQueueGet>
 80019de:	f8c7 0170 	str.w	r0, [r7, #368]	; 0x170

    /* Check if the queue status is OK */
    if (nmea_queue_status != osOK){
 80019e2:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d002      	beq.n	80019f0 <transmit_GPS_task+0x48>
      /* If message retrieval failed, yield and continue the loop */
      osThreadYield();
 80019ea:	f006 f849 	bl	8007a80 <osThreadYield>
 80019ee:	e7e3      	b.n	80019b8 <transmit_GPS_task+0x10>
      continue; // Skip the rest of this loop iteration
    }

    /* Initialize an NMEA buffer */
    uint8_t gps_buffer[GPS_MESSAGE_LEN] = {0};
 80019f0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80019f4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	3304      	adds	r3, #4
 80019fe:	22c4      	movs	r2, #196	; 0xc4
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f00a fd23 	bl	800c44e <memset>

    /* Get current epoch Time Stamp */
    time_t current_timestamp = get_current_timestamp();
 8001a08:	f001 faa6 	bl	8002f58 <get_current_timestamp>
 8001a0c:	e9c7 015a 	strd	r0, r1, [r7, #360]	; 0x168

    /* TIMESTAMP: 8 Bytes */
    for (uint8_t i=0; i<8; i++) {
 8001a10:	2300      	movs	r3, #0
 8001a12:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8001a16:	e021      	b.n	8001a5c <transmit_GPS_task+0xb4>
      /* Put each byte in position 'i' */
      gps_buffer[i] = TIMESTAMP_BYTE(i, current_timestamp);
 8001a18:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8001a1c:	00d9      	lsls	r1, r3, #3
 8001a1e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8001a22:	f1c1 0620 	rsb	r6, r1, #32
 8001a26:	f1b1 0020 	subs.w	r0, r1, #32
 8001a2a:	fa22 f401 	lsr.w	r4, r2, r1
 8001a2e:	fa03 f606 	lsl.w	r6, r3, r6
 8001a32:	ea44 0406 	orr.w	r4, r4, r6
 8001a36:	d402      	bmi.n	8001a3e <transmit_GPS_task+0x96>
 8001a38:	fa43 f000 	asr.w	r0, r3, r0
 8001a3c:	4304      	orrs	r4, r0
 8001a3e:	fa43 f501 	asr.w	r5, r3, r1
 8001a42:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8001a46:	b2e1      	uxtb	r1, r4
 8001a48:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8001a4c:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 8001a50:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i=0; i<8; i++) {
 8001a52:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8001a56:	3301      	adds	r3, #1
 8001a58:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8001a5c:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8001a60:	2b07      	cmp	r3, #7
 8001a62:	d9d9      	bls.n	8001a18 <transmit_GPS_task+0x70>

    /*
     * Copy the NMEA data into the buffer, ensuring not to exceed the buffer size
     * Adds 8 to the start to skip the time stamp
     */
    strncpy(gps_buffer + 8, gps_message.data, 150); // Save space for CR+LF
 8001a64:	f107 0308 	add.w	r3, r7, #8
 8001a68:	3308      	adds	r3, #8
 8001a6a:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8001a6e:	2296      	movs	r2, #150	; 0x96
 8001a70:	4618      	mov	r0, r3
 8001a72:	f00a fd13 	bl	800c49c <strncpy>

    /* NEW LINE */
    gps_buffer[GPS_MESSAGE_LEN - 2] = '\r'; // Carriage return
 8001a76:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001a7a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a7e:	220d      	movs	r2, #13
 8001a80:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6

    /* CARRIAGE RETURN */
    gps_buffer[GPS_MESSAGE_LEN - 1] = '\n'; // Line feed
 8001a84:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001a88:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a8c:	220a      	movs	r2, #10
 8001a8e:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7

    /* Transmit the NMEA message over UART to radio */
    HAL_UART_Transmit(&huart1, gps_buffer, sizeof(gps_buffer), 1000);
 8001a92:	f107 0108 	add.w	r1, r7, #8
 8001a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9a:	22c8      	movs	r2, #200	; 0xc8
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <transmit_GPS_task+0x100>)
 8001a9e:	f005 fd3d 	bl	800751c <HAL_UART_Transmit>
  while(1) {
 8001aa2:	e789      	b.n	80019b8 <transmit_GPS_task+0x10>
 8001aa4:	200002b0 	.word	0x200002b0
 8001aa8:	20000514 	.word	0x20000514

08001aac <kernel_LED_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_kernel_LED_task */
void kernel_LED_task(void *argument)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  while (1) {

    /* Get the kernel status */
    kernel_status = osKernelGetState();
 8001ab4:	f005 fee4 	bl	8007880 <osKernelGetState>
 8001ab8:	60f8      	str	r0, [r7, #12]

    /* Check if the kernel status is "Running" */
    if (kernel_status == osKernelRunning) {
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d103      	bne.n	8001ac8 <kernel_LED_task+0x1c>

      /* If running, toggle the LED */
      HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 8001ac0:	2102      	movs	r1, #2
 8001ac2:	4803      	ldr	r0, [pc, #12]	; (8001ad0 <kernel_LED_task+0x24>)
 8001ac4:	f002 fc29 	bl	800431a <HAL_GPIO_TogglePin>
    }

    /* Delay */
    osDelay(KERNEL_LED_DELAY);
 8001ac8:	20c8      	movs	r0, #200	; 0xc8
 8001aca:	f006 f89f 	bl	8007c0c <osDelay>
    kernel_status = osKernelGetState();
 8001ace:	e7f1      	b.n	8001ab4 <kernel_LED_task+0x8>
 8001ad0:	40010800 	.word	0x40010800

08001ad4 <add_to_IMU_queue>:


/*
 * Stores the data gathered from the IMU into the queue
 */
void add_to_IMU_queue(char* type, char* dimension, union FloatBytes data){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
    IMU_msg_t imu_message;

    imu_message.imu_type = type[0];
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	753b      	strb	r3, [r7, #20]
    imu_message.dimension = dimension[0];
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	757b      	strb	r3, [r7, #21]
    for (int i = 0; i < 4; i++) {
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
 8001af0:	e00c      	b.n	8001b0c <add_to_IMU_queue+0x38>
        imu_message.data[i] = data.bytes[i];
 8001af2:	1d3a      	adds	r2, r7, #4
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	4413      	add	r3, r2
 8001af8:	7819      	ldrb	r1, [r3, #0]
 8001afa:	f107 0216 	add.w	r2, r7, #22
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	4413      	add	r3, r2
 8001b02:	460a      	mov	r2, r1
 8001b04:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	61fb      	str	r3, [r7, #28]
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	ddef      	ble.n	8001af2 <add_to_IMU_queue+0x1e>
    }

    osMessageQueuePut(imuMessageQueueHandle, &imu_message, 0U, 0U);
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <add_to_IMU_queue+0x58>)
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	f107 0114 	add.w	r1, r7, #20
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f006 f929 	bl	8007d74 <osMessageQueuePut>
}
 8001b22:	bf00      	nop
 8001b24:	3720      	adds	r7, #32
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	200002ac 	.word	0x200002ac

08001b30 <add_to_GPS_queue>:

/*
 * Stores the data gathered from the GPS into the queue
 */
void add_to_GPS_queue(GPS *gps_data) {
 8001b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b34:	b0b9      	sub	sp, #228	; 0xe4
 8001b36:	af0e      	add	r7, sp, #56	; 0x38
 8001b38:	60f8      	str	r0, [r7, #12]

  /* If there is a fix... */
  if(gps_data->fix == 1){
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d13d      	bne.n	8001bbe <add_to_GPS_queue+0x8e>

    /* Create an nmea_msg */
    GPS_msg_t nmea_msg;

    /* Create string */
    sprintf(nmea_msg.data,
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	e9d3 8900 	ldrd	r8, r9, [r3]
	    "Latitude: %.6f %c, Longitude: %.6f %c, Altitude: %.2f meters, HDOP: %.2f, Satellites: %d, Fix: %d, Time: %s",
	    gps_data->latitude, gps_data->latSide,
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	7a1b      	ldrb	r3, [r3, #8]
    sprintf(nmea_msg.data,
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
	    gps_data->longitude, gps_data->lonSide,
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	7e1b      	ldrb	r3, [r3, #24]
    sprintf(nmea_msg.data,
 8001b58:	607b      	str	r3, [r7, #4]
	    gps_data->altitude, gps_data->hdop,
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	69db      	ldr	r3, [r3, #28]
    sprintf(nmea_msg.data,
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fcdc 	bl	800051c <__aeabi_f2d>
 8001b64:	4682      	mov	sl, r0
 8001b66:	468b      	mov	fp, r1
	    gps_data->altitude, gps_data->hdop,
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
    sprintf(nmea_msg.data,
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fcd5 	bl	800051c <__aeabi_f2d>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	    gps_data->satelliteCount, gps_data->fix,
	    gps_data->lastMeasure);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	332c      	adds	r3, #44	; 0x2c
    sprintf(nmea_msg.data,
 8001b7e:	f107 0c10 	add.w	ip, r7, #16
 8001b82:	930c      	str	r3, [sp, #48]	; 0x30
 8001b84:	960b      	str	r6, [sp, #44]	; 0x2c
 8001b86:	920a      	str	r2, [sp, #40]	; 0x28
 8001b88:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001b8c:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	9204      	str	r2, [sp, #16]
 8001b94:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	4642      	mov	r2, r8
 8001b9e:	464b      	mov	r3, r9
 8001ba0:	4909      	ldr	r1, [pc, #36]	; (8001bc8 <add_to_GPS_queue+0x98>)
 8001ba2:	4660      	mov	r0, ip
 8001ba4:	f00a fbee 	bl	800c384 <siprintf>

    /* Null Terminate */
    nmea_msg.data[sizeof(nmea_msg.data) - 1] = '\0';
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5

    /* Add the message to the queue */
    osMessageQueuePut(gpsMessageQueueHandle, &nmea_msg, 0U, 0U);
 8001bae:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <add_to_GPS_queue+0x9c>)
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	f107 0110 	add.w	r1, r7, #16
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f006 f8db 	bl	8007d74 <osMessageQueuePut>
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	37ac      	adds	r7, #172	; 0xac
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bc8:	080104a0 	.word	0x080104a0
 8001bcc:	200002b0 	.word	0x200002b0

08001bd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd6:	f107 0310 	add.w	r3, r7, #16
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be4:	4b49      	ldr	r3, [pc, #292]	; (8001d0c <MX_GPIO_Init+0x13c>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	4a48      	ldr	r2, [pc, #288]	; (8001d0c <MX_GPIO_Init+0x13c>)
 8001bea:	f043 0310 	orr.w	r3, r3, #16
 8001bee:	6193      	str	r3, [r2, #24]
 8001bf0:	4b46      	ldr	r3, [pc, #280]	; (8001d0c <MX_GPIO_Init+0x13c>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bfc:	4b43      	ldr	r3, [pc, #268]	; (8001d0c <MX_GPIO_Init+0x13c>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	4a42      	ldr	r2, [pc, #264]	; (8001d0c <MX_GPIO_Init+0x13c>)
 8001c02:	f043 0320 	orr.w	r3, r3, #32
 8001c06:	6193      	str	r3, [r2, #24]
 8001c08:	4b40      	ldr	r3, [pc, #256]	; (8001d0c <MX_GPIO_Init+0x13c>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f003 0320 	and.w	r3, r3, #32
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c14:	4b3d      	ldr	r3, [pc, #244]	; (8001d0c <MX_GPIO_Init+0x13c>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	4a3c      	ldr	r2, [pc, #240]	; (8001d0c <MX_GPIO_Init+0x13c>)
 8001c1a:	f043 0304 	orr.w	r3, r3, #4
 8001c1e:	6193      	str	r3, [r2, #24]
 8001c20:	4b3a      	ldr	r3, [pc, #232]	; (8001d0c <MX_GPIO_Init+0x13c>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2c:	4b37      	ldr	r3, [pc, #220]	; (8001d0c <MX_GPIO_Init+0x13c>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	4a36      	ldr	r2, [pc, #216]	; (8001d0c <MX_GPIO_Init+0x13c>)
 8001c32:	f043 0308 	orr.w	r3, r3, #8
 8001c36:	6193      	str	r3, [r2, #24]
 8001c38:	4b34      	ldr	r3, [pc, #208]	; (8001d0c <MX_GPIO_Init+0x13c>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	603b      	str	r3, [r7, #0]
 8001c42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_GPIO_DIO7_Pin|RADIO_GPIO_DIO9_SLEEP_Pin|RADIO_GPIO_DIO11_Pin|RADIO_GPIO_DIO10_Pin, GPIO_PIN_RESET);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2178      	movs	r1, #120	; 0x78
 8001c48:	4831      	ldr	r0, [pc, #196]	; (8001d10 <MX_GPIO_Init+0x140>)
 8001c4a:	f002 fb4e 	bl	80042ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USER_LED_Pin|SDL_CS_Pin, GPIO_PIN_RESET);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2112      	movs	r1, #18
 8001c52:	4830      	ldr	r0, [pc, #192]	; (8001d14 <MX_GPIO_Init+0x144>)
 8001c54:	f002 fb49 	bl	80042ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RADIO_GPIO_DIO4_Pin|RADIO_GPIO_DIO3_Pin|RADIO_GPIO_DIO2_Pin, GPIO_PIN_SET);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f24a 0101 	movw	r1, #40961	; 0xa001
 8001c5e:	482e      	ldr	r0, [pc, #184]	; (8001d18 <MX_GPIO_Init+0x148>)
 8001c60:	f002 fb43 	bl	80042ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RADIO_GPIO_DIO12_Pin|RADIO_GPIO_DIO6_Pin|RADIO_DIO8_SLEEP_CONTROL_Pin, GPIO_PIN_RESET);
 8001c64:	2200      	movs	r2, #0
 8001c66:	f245 0102 	movw	r1, #20482	; 0x5002
 8001c6a:	482b      	ldr	r0, [pc, #172]	; (8001d18 <MX_GPIO_Init+0x148>)
 8001c6c:	f002 fb3d 	bl	80042ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_GPIO_DIO1_Pin|RADIO_GPIO_DIO0_Pin, GPIO_PIN_SET);
 8001c70:	2201      	movs	r2, #1
 8001c72:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001c76:	4826      	ldr	r0, [pc, #152]	; (8001d10 <MX_GPIO_Init+0x140>)
 8001c78:	f002 fb37 	bl	80042ea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = RADIO_GPIO_DIO7_Pin|RADIO_GPIO_DIO9_SLEEP_Pin|RADIO_GPIO_DIO11_Pin|RADIO_GPIO_DIO10_Pin
 8001c7c:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8001c80:	613b      	str	r3, [r7, #16]
                          |RADIO_GPIO_DIO1_Pin|RADIO_GPIO_DIO0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c82:	2301      	movs	r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c8e:	f107 0310 	add.w	r3, r7, #16
 8001c92:	4619      	mov	r1, r3
 8001c94:	481e      	ldr	r0, [pc, #120]	; (8001d10 <MX_GPIO_Init+0x140>)
 8001c96:	f002 f97d 	bl	8003f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USER_LED_Pin|SDL_CS_Pin;
 8001c9a:	2312      	movs	r3, #18
 8001c9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	f107 0310 	add.w	r3, r7, #16
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4818      	ldr	r0, [pc, #96]	; (8001d14 <MX_GPIO_Init+0x144>)
 8001cb2:	f002 f96f 	bl	8003f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RTC_SYNC_Pin|SDL_CD_Pin;
 8001cb6:	230c      	movs	r3, #12
 8001cb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc2:	f107 0310 	add.w	r3, r7, #16
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4812      	ldr	r0, [pc, #72]	; (8001d14 <MX_GPIO_Init+0x144>)
 8001cca:	f002 f963 	bl	8003f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = RADIO_GPIO_DIO4_Pin|RADIO_GPIO_DIO12_Pin|RADIO_GPIO_DIO6_Pin|RADIO_GPIO_DIO3_Pin
 8001cce:	f24f 0303 	movw	r3, #61443	; 0xf003
 8001cd2:	613b      	str	r3, [r7, #16]
                          |RADIO_DIO8_SLEEP_CONTROL_Pin|RADIO_GPIO_DIO2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce0:	f107 0310 	add.w	r3, r7, #16
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	480c      	ldr	r0, [pc, #48]	; (8001d18 <MX_GPIO_Init+0x148>)
 8001ce8:	f002 f954 	bl	8003f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001cec:	2304      	movs	r3, #4
 8001cee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001cf8:	f107 0310 	add.w	r3, r7, #16
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4806      	ldr	r0, [pc, #24]	; (8001d18 <MX_GPIO_Init+0x148>)
 8001d00:	f002 f948 	bl	8003f94 <HAL_GPIO_Init>

}
 8001d04:	bf00      	nop
 8001d06:	3720      	adds	r7, #32
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40011000 	.word	0x40011000
 8001d14:	40010800 	.word	0x40010800
 8001d18:	40010c00 	.word	0x40010c00

08001d1c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d22:	4a13      	ldr	r2, [pc, #76]	; (8001d70 <MX_I2C1_Init+0x54>)
 8001d24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d28:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <MX_I2C1_Init+0x58>)
 8001d2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d40:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d4c:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d58:	4804      	ldr	r0, [pc, #16]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d5a:	f002 faf7 	bl	800434c <HAL_I2C_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d64:	f000 fa43 	bl	80021ee <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d68:	bf00      	nop
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000300 	.word	0x20000300
 8001d70:	40005400 	.word	0x40005400
 8001d74:	000186a0 	.word	0x000186a0

08001d78 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <MX_I2C2_Init+0x50>)
 8001d7e:	4a13      	ldr	r2, [pc, #76]	; (8001dcc <MX_I2C2_Init+0x54>)
 8001d80:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <MX_I2C2_Init+0x50>)
 8001d84:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <MX_I2C2_Init+0x58>)
 8001d86:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d88:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <MX_I2C2_Init+0x50>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <MX_I2C2_Init+0x50>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <MX_I2C2_Init+0x50>)
 8001d96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d9a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <MX_I2C2_Init+0x50>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <MX_I2C2_Init+0x50>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001da8:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <MX_I2C2_Init+0x50>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <MX_I2C2_Init+0x50>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001db4:	4804      	ldr	r0, [pc, #16]	; (8001dc8 <MX_I2C2_Init+0x50>)
 8001db6:	f002 fac9 	bl	800434c <HAL_I2C_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001dc0:	f000 fa15 	bl	80021ee <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000354 	.word	0x20000354
 8001dcc:	40005800 	.word	0x40005800
 8001dd0:	000186a0 	.word	0x000186a0

08001dd4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	; 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0318 	add.w	r3, r7, #24
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a2b      	ldr	r2, [pc, #172]	; (8001e9c <HAL_I2C_MspInit+0xc8>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d124      	bne.n	8001e3e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df4:	4b2a      	ldr	r3, [pc, #168]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	4a29      	ldr	r2, [pc, #164]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001dfa:	f043 0308 	orr.w	r3, r3, #8
 8001dfe:	6193      	str	r3, [r2, #24]
 8001e00:	4b27      	ldr	r3, [pc, #156]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPS_SCL_Pin|GPS_SDA_Pin;
 8001e0c:	23c0      	movs	r3, #192	; 0xc0
 8001e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e10:	2312      	movs	r3, #18
 8001e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e14:	2303      	movs	r3, #3
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e18:	f107 0318 	add.w	r3, r7, #24
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4821      	ldr	r0, [pc, #132]	; (8001ea4 <HAL_I2C_MspInit+0xd0>)
 8001e20:	f002 f8b8 	bl	8003f94 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e24:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	4a1d      	ldr	r2, [pc, #116]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001e2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e2e:	61d3      	str	r3, [r2, #28]
 8001e30:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001e3c:	e029      	b.n	8001e92 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a19      	ldr	r2, [pc, #100]	; (8001ea8 <HAL_I2C_MspInit+0xd4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d124      	bne.n	8001e92 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e48:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	4a14      	ldr	r2, [pc, #80]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001e4e:	f043 0308 	orr.w	r3, r3, #8
 8001e52:	6193      	str	r3, [r2, #24]
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8001e60:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e66:	2312      	movs	r3, #18
 8001e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6e:	f107 0318 	add.w	r3, r7, #24
 8001e72:	4619      	mov	r1, r3
 8001e74:	480b      	ldr	r0, [pc, #44]	; (8001ea4 <HAL_I2C_MspInit+0xd0>)
 8001e76:	f002 f88d 	bl	8003f94 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	4a08      	ldr	r2, [pc, #32]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001e80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e84:	61d3      	str	r3, [r2, #28]
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
}
 8001e92:	bf00      	nop
 8001e94:	3728      	adds	r7, #40	; 0x28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40005400 	.word	0x40005400
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40010c00 	.word	0x40010c00
 8001ea8:	40005800 	.word	0x40005800
 8001eac:	00000000 	.word	0x00000000

08001eb0 <gyro>:


/* IMU -----------------------------------------------------------------------*/

float gyro(enum GyroType type)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af04      	add	r7, sp, #16
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
  int16_t gyro;
  uint8_t OUT_H_G, OUT_L_G;

  /* Goes sequential */
  uint16_t addL = 0x22 + (type * 2);
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	3311      	adds	r3, #17
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	81fb      	strh	r3, [r7, #14]
  uint16_t addH = 0x23 + (type * 2);
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	3323      	adds	r3, #35	; 0x23
 8001ece:	81bb      	strh	r3, [r7, #12]

  /* Read */
  HAL_I2C_Mem_Read(&hi2c1, IMU_DEVICE_ADDRESS, addL, 1, &OUT_L_G, 1, 100);
 8001ed0:	89fa      	ldrh	r2, [r7, #14]
 8001ed2:	2364      	movs	r3, #100	; 0x64
 8001ed4:	9302      	str	r3, [sp, #8]
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	9301      	str	r3, [sp, #4]
 8001eda:	f107 0308 	add.w	r3, r7, #8
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	21d4      	movs	r1, #212	; 0xd4
 8001ee4:	4824      	ldr	r0, [pc, #144]	; (8001f78 <gyro+0xc8>)
 8001ee6:	f002 fedb 	bl	8004ca0 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(&hi2c1, IMU_DEVICE_ADDRESS, addH, 1, &OUT_H_G, 1, 100);
 8001eea:	89ba      	ldrh	r2, [r7, #12]
 8001eec:	2364      	movs	r3, #100	; 0x64
 8001eee:	9302      	str	r3, [sp, #8]
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	f107 0309 	add.w	r3, r7, #9
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	2301      	movs	r3, #1
 8001efc:	21d4      	movs	r1, #212	; 0xd4
 8001efe:	481e      	ldr	r0, [pc, #120]	; (8001f78 <gyro+0xc8>)
 8001f00:	f002 fece 	bl	8004ca0 <HAL_I2C_Mem_Read>

  /* The value is expressed as a 16-bit word in two’s complement */
  gyro = (OUT_H_G << 8) | (OUT_L_G);
 8001f04:	7a7b      	ldrb	r3, [r7, #9]
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	b21a      	sxth	r2, r3
 8001f0a:	7a3b      	ldrb	r3, [r7, #8]
 8001f0c:	b21b      	sxth	r3, r3
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	817b      	strh	r3, [r7, #10]
  gyro = (float) gyro / 8.75; /* See data sheet pg10 */
 8001f12:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe ff5a 	bl	8000dd0 <__aeabi_i2f>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fafc 	bl	800051c <__aeabi_f2d>
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <gyro+0xcc>)
 8001f2a:	f7fe fc79 	bl	8000820 <__aeabi_ddiv>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4610      	mov	r0, r2
 8001f34:	4619      	mov	r1, r3
 8001f36:	f7fe fdf9 	bl	8000b2c <__aeabi_d2iz>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	817b      	strh	r3, [r7, #10]

  return (float) gyro * 0.02;
 8001f3e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe ff44 	bl	8000dd0 <__aeabi_i2f>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe fae6 	bl	800051c <__aeabi_f2d>
 8001f50:	a307      	add	r3, pc, #28	; (adr r3, 8001f70 <gyro+0xc0>)
 8001f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f56:	f7fe fb39 	bl	80005cc <__aeabi_dmul>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4610      	mov	r0, r2
 8001f60:	4619      	mov	r1, r3
 8001f62:	f7fe fe2b 	bl	8000bbc <__aeabi_d2f>
 8001f66:	4603      	mov	r3, r0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	47ae147b 	.word	0x47ae147b
 8001f74:	3f947ae1 	.word	0x3f947ae1
 8001f78:	20000300 	.word	0x20000300
 8001f7c:	40218000 	.word	0x40218000

08001f80 <accel>:

float accel(enum AccelType type)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af04      	add	r7, sp, #16
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
  int16_t accel;
  uint8_t OUT_H_A, OUT_L_A;

  /* Goes sequential */
  uint16_t addL = 0x28 + (type * 2);
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	3314      	adds	r3, #20
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	81fb      	strh	r3, [r7, #14]
  uint16_t addH = 0x29 + (type * 2);
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	3329      	adds	r3, #41	; 0x29
 8001f9e:	81bb      	strh	r3, [r7, #12]

  /* Read */
  HAL_I2C_Mem_Read(&hi2c1, IMU_DEVICE_ADDRESS, addL, 1, &OUT_L_A, 1, 100);
 8001fa0:	89fa      	ldrh	r2, [r7, #14]
 8001fa2:	2364      	movs	r3, #100	; 0x64
 8001fa4:	9302      	str	r3, [sp, #8]
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	9301      	str	r3, [sp, #4]
 8001faa:	f107 0308 	add.w	r3, r7, #8
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	21d4      	movs	r1, #212	; 0xd4
 8001fb4:	481e      	ldr	r0, [pc, #120]	; (8002030 <accel+0xb0>)
 8001fb6:	f002 fe73 	bl	8004ca0 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(&hi2c1, IMU_DEVICE_ADDRESS, addH, 1, &OUT_H_A, 1, 100);
 8001fba:	89ba      	ldrh	r2, [r7, #12]
 8001fbc:	2364      	movs	r3, #100	; 0x64
 8001fbe:	9302      	str	r3, [sp, #8]
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	f107 0309 	add.w	r3, r7, #9
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	2301      	movs	r3, #1
 8001fcc:	21d4      	movs	r1, #212	; 0xd4
 8001fce:	4818      	ldr	r0, [pc, #96]	; (8002030 <accel+0xb0>)
 8001fd0:	f002 fe66 	bl	8004ca0 <HAL_I2C_Mem_Read>

  /* The value is expressed as a 16-bit word in two’s complement */
  accel = (OUT_H_A << 8) | (OUT_L_A);
 8001fd4:	7a7b      	ldrb	r3, [r7, #9]
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	b21a      	sxth	r2, r3
 8001fda:	7a3b      	ldrb	r3, [r7, #8]
 8001fdc:	b21b      	sxth	r3, r3
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	817b      	strh	r3, [r7, #10]
  accel = (float) accel * 0.061; /* See data sheet pg10 */
 8001fe2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fef2 	bl	8000dd0 <__aeabi_i2f>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fa94 	bl	800051c <__aeabi_f2d>
 8001ff4:	a30c      	add	r3, pc, #48	; (adr r3, 8002028 <accel+0xa8>)
 8001ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffa:	f7fe fae7 	bl	80005cc <__aeabi_dmul>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4610      	mov	r0, r2
 8002004:	4619      	mov	r1, r3
 8002006:	f7fe fd91 	bl	8000b2c <__aeabi_d2iz>
 800200a:	4603      	mov	r3, r0
 800200c:	817b      	strh	r3, [r7, #10]

  return (float) accel;
 800200e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fedc 	bl	8000dd0 <__aeabi_i2f>
 8002018:	4603      	mov	r3, r0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	f3af 8000 	nop.w
 8002028:	5a1cac08 	.word	0x5a1cac08
 800202c:	3faf3b64 	.word	0x3faf3b64
 8002030:	20000300 	.word	0x20000300

08002034 <initIMU>:


void initIMU(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af04      	add	r7, sp, #16
  uint8_t data;

  data = 0x80; // 0b10000000
 800203a:	2380      	movs	r3, #128	; 0x80
 800203c:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, IMU_DEVICE_ADDRESS, 0x10, 1, &data, 1, 100);
 800203e:	2364      	movs	r3, #100	; 0x64
 8002040:	9302      	str	r3, [sp, #8]
 8002042:	2301      	movs	r3, #1
 8002044:	9301      	str	r3, [sp, #4]
 8002046:	1dfb      	adds	r3, r7, #7
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	2301      	movs	r3, #1
 800204c:	2210      	movs	r2, #16
 800204e:	21d4      	movs	r1, #212	; 0xd4
 8002050:	4811      	ldr	r0, [pc, #68]	; (8002098 <initIMU+0x64>)
 8002052:	f002 fd2b 	bl	8004aac <HAL_I2C_Mem_Write>

  data = 0x80; // 0b10000000
 8002056:	2380      	movs	r3, #128	; 0x80
 8002058:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, IMU_DEVICE_ADDRESS, 0x11, 1, &data, 1, 100);
 800205a:	2364      	movs	r3, #100	; 0x64
 800205c:	9302      	str	r3, [sp, #8]
 800205e:	2301      	movs	r3, #1
 8002060:	9301      	str	r3, [sp, #4]
 8002062:	1dfb      	adds	r3, r7, #7
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	2301      	movs	r3, #1
 8002068:	2211      	movs	r2, #17
 800206a:	21d4      	movs	r1, #212	; 0xd4
 800206c:	480a      	ldr	r0, [pc, #40]	; (8002098 <initIMU+0x64>)
 800206e:	f002 fd1d 	bl	8004aac <HAL_I2C_Mem_Write>

  data = 0x04; // 0b00000100
 8002072:	2304      	movs	r3, #4
 8002074:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, IMU_DEVICE_ADDRESS, 0x12, 1, &data, 1, 100);
 8002076:	2364      	movs	r3, #100	; 0x64
 8002078:	9302      	str	r3, [sp, #8]
 800207a:	2301      	movs	r3, #1
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	1dfb      	adds	r3, r7, #7
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	2301      	movs	r3, #1
 8002084:	2212      	movs	r2, #18
 8002086:	21d4      	movs	r1, #212	; 0xd4
 8002088:	4803      	ldr	r0, [pc, #12]	; (8002098 <initIMU+0x64>)
 800208a:	f002 fd0f 	bl	8004aac <HAL_I2C_Mem_Write>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000300 	.word	0x20000300

0800209c <readNMEA>:
//  printf("Altitude: %f\r\n", myData.altitude);
//  printf("Sat Count: %d\r\n", myData.satelliteCount);
//
//}

void readNMEA(uint8_t *buffer){
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af02      	add	r7, sp, #8
 80020a2:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_IsDeviceReady(&hi2c1, GPS_DEVICE_ADDRESS, 1, HAL_MAX_DELAY) == HAL_OK) {
 80020a4:	f04f 33ff 	mov.w	r3, #4294967295
 80020a8:	2201      	movs	r2, #1
 80020aa:	2184      	movs	r1, #132	; 0x84
 80020ac:	4809      	ldr	r0, [pc, #36]	; (80020d4 <readNMEA+0x38>)
 80020ae:	f003 f85f 	bl	8005170 <HAL_I2C_IsDeviceReady>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d108      	bne.n	80020ca <readNMEA+0x2e>
      HAL_I2C_Master_Receive(&hi2c1, GPS_DEVICE_ADDRESS, buffer, sizeof(buffer), HAL_MAX_DELAY);
 80020b8:	f04f 33ff 	mov.w	r3, #4294967295
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2304      	movs	r3, #4
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	2184      	movs	r1, #132	; 0x84
 80020c4:	4803      	ldr	r0, [pc, #12]	; (80020d4 <readNMEA+0x38>)
 80020c6:	f002 fa85 	bl	80045d4 <HAL_I2C_Master_Receive>
  }
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000300 	.word	0x20000300

080020d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020dc:	f001 fa9e 	bl	800361c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020e0:	f000 f826 	bl	8002130 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020e4:	f7ff fd74 	bl	8001bd0 <MX_GPIO_Init>
  MX_CAN_Init();
 80020e8:	f7ff f8da 	bl	80012a0 <MX_CAN_Init>
  MX_SPI1_Init();
 80020ec:	f000 ffe6 	bl	80030bc <MX_SPI1_Init>
  MX_UART5_Init();
 80020f0:	f001 f984 	bl	80033fc <MX_UART5_Init>
  MX_I2C1_Init();
 80020f4:	f7ff fe12 	bl	8001d1c <MX_I2C1_Init>
  MX_I2C2_Init();
 80020f8:	f7ff fe3e 	bl	8001d78 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80020fc:	f001 f9a8 	bl	8003450 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8002100:	f000 fdde 	bl	8002cc0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* Sync the RTC with GPS if GPIO is set to high*/
  if (HAL_GPIO_ReadPin(RTC_SYNC_GPIO_Port, RTC_SYNC_Pin) == GPIO_PIN_SET) {
 8002104:	2104      	movs	r1, #4
 8002106:	4809      	ldr	r0, [pc, #36]	; (800212c <main+0x54>)
 8002108:	f002 f8d8 	bl	80042bc <HAL_GPIO_ReadPin>
 800210c:	4603      	mov	r3, r0
 800210e:	2b01      	cmp	r3, #1
 8002110:	d101      	bne.n	8002116 <main+0x3e>
      Sync_RTC_With_GPS();
 8002112:	f000 fe43 	bl	8002d9c <Sync_RTC_With_GPS>
  }

  Can_Init();
 8002116:	f7ff f9a9 	bl	800146c <Can_Init>
  initIMU();
 800211a:	f7ff ff8b 	bl	8002034 <initIMU>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800211e:	f005 fb7d 	bl	800781c <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002122:	f7ff f9bd 	bl	80014a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002126:	f005 fbcd 	bl	80078c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800212a:	e7fe      	b.n	800212a <main+0x52>
 800212c:	40010800 	.word	0x40010800

08002130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b096      	sub	sp, #88	; 0x58
 8002134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002136:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800213a:	2228      	movs	r2, #40	; 0x28
 800213c:	2100      	movs	r1, #0
 800213e:	4618      	mov	r0, r3
 8002140:	f00a f985 	bl	800c44e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002144:	f107 031c 	add.w	r3, r7, #28
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002154:	1d3b      	adds	r3, r7, #4
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	605a      	str	r2, [r3, #4]
 800215c:	609a      	str	r2, [r3, #8]
 800215e:	60da      	str	r2, [r3, #12]
 8002160:	611a      	str	r2, [r3, #16]
 8002162:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002164:	2309      	movs	r3, #9
 8002166:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002168:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800216c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800216e:	2300      	movs	r3, #0
 8002170:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002172:	2301      	movs	r3, #1
 8002174:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002176:	2301      	movs	r3, #1
 8002178:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800217a:	2302      	movs	r3, #2
 800217c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800217e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002182:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002184:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002188:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800218a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800218e:	4618      	mov	r0, r3
 8002190:	f003 fdaa 	bl	8005ce8 <HAL_RCC_OscConfig>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800219a:	f000 f828 	bl	80021ee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800219e:	230f      	movs	r3, #15
 80021a0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021a2:	2302      	movs	r3, #2
 80021a4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021a6:	2300      	movs	r3, #0
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021b0:	2300      	movs	r3, #0
 80021b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021b4:	f107 031c 	add.w	r3, r7, #28
 80021b8:	2102      	movs	r1, #2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f004 f816 	bl	80061ec <HAL_RCC_ClockConfig>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80021c6:	f000 f812 	bl	80021ee <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021ca:	2301      	movs	r3, #1
 80021cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80021ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021d2:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	4618      	mov	r0, r3
 80021d8:	f004 f996 	bl	8006508 <HAL_RCCEx_PeriphCLKConfig>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80021e2:	f000 f804 	bl	80021ee <Error_Handler>
  }
}
 80021e6:	bf00      	nop
 80021e8:	3758      	adds	r7, #88	; 0x58
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021f2:	b672      	cpsid	i
}
 80021f4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021f6:	e7fe      	b.n	80021f6 <Error_Handler+0x8>

080021f8 <nmea_GPGGA>:
    else{
        return 0;
    }
}

int nmea_GPGGA(GPS *gps_data, char*inputString){
 80021f8:	b590      	push	{r4, r7, lr}
 80021fa:	b0b7      	sub	sp, #220	; 0xdc
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 8002208:	f107 0320 	add.w	r3, r7, #32
 800220c:	2264      	movs	r2, #100	; 0x64
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f00a f91c 	bl	800c44e <memset>
    char *marker = strtok(inputString, ",");
 8002216:	49c5      	ldr	r1, [pc, #788]	; (800252c <nmea_GPGGA+0x334>)
 8002218:	6838      	ldr	r0, [r7, #0]
 800221a:	f00a f953 	bl	800c4c4 <strtok>
 800221e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8002222:	e027      	b.n	8002274 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8002224:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8002228:	f7fe f80c 	bl	8000244 <strlen>
 800222c:	4603      	mov	r3, r0
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8002234:	1c63      	adds	r3, r4, #1
 8002236:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800223a:	4610      	mov	r0, r2
 800223c:	f008 fbce 	bl	800a9dc <malloc>
 8002240:	4603      	mov	r3, r0
 8002242:	461a      	mov	r2, r3
 8002244:	00a3      	lsls	r3, r4, #2
 8002246:	33d8      	adds	r3, #216	; 0xd8
 8002248:	443b      	add	r3, r7
 800224a:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 800224e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002252:	3b01      	subs	r3, #1
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	33d8      	adds	r3, #216	; 0xd8
 8002258:	443b      	add	r3, r7
 800225a:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 800225e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002262:	4618      	mov	r0, r3
 8002264:	f00a ffcb 	bl	800d1fe <strcpy>
        marker = strtok(NULL, ",");
 8002268:	49b0      	ldr	r1, [pc, #704]	; (800252c <nmea_GPGGA+0x334>)
 800226a:	2000      	movs	r0, #0
 800226c:	f00a f92a 	bl	800c4c4 <strtok>
 8002270:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8002274:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1d3      	bne.n	8002224 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 800227c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 8002284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	332c      	adds	r3, #44	; 0x2c
 8002290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002292:	4611      	mov	r1, r2
 8002294:	4618      	mov	r0, r3
 8002296:	f00a ffb2 	bl	800d1fe <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 800229a:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800229e:	2b53      	cmp	r3, #83	; 0x53
 80022a0:	d004      	beq.n	80022ac <nmea_GPGGA+0xb4>
 80022a2:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80022a6:	2b4e      	cmp	r3, #78	; 0x4e
 80022a8:	f040 815f 	bne.w	800256a <nmea_GPGGA+0x372>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 80022ac:	2300      	movs	r3, #0
 80022ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80022b2:	e010      	b.n	80022d6 <nmea_GPGGA+0xde>
 80022b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022ba:	4413      	add	r3, r2
 80022bc:	7819      	ldrb	r1, [r3, #0]
 80022be:	f107 021c 	add.w	r2, r7, #28
 80022c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022c6:	4413      	add	r3, r2
 80022c8:	460a      	mov	r2, r1
 80022ca:	701a      	strb	r2, [r3, #0]
 80022cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022d0:	3301      	adds	r3, #1
 80022d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80022d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022da:	2b01      	cmp	r3, #1
 80022dc:	ddea      	ble.n	80022b4 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 80022de:	2300      	movs	r3, #0
 80022e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80022e4:	e011      	b.n	800230a <nmea_GPGGA+0x112>
 80022e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80022ec:	3302      	adds	r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	7819      	ldrb	r1, [r3, #0]
 80022f2:	f107 0214 	add.w	r2, r7, #20
 80022f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80022fa:	4413      	add	r3, r2
 80022fc:	460a      	mov	r2, r1
 80022fe:	701a      	strb	r2, [r3, #0]
 8002300:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002304:	3301      	adds	r3, #1
 8002306:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800230a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800230e:	2b05      	cmp	r3, #5
 8002310:	dde9      	ble.n	80022e6 <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8002312:	f107 031c 	add.w	r3, r7, #28
 8002316:	220a      	movs	r2, #10
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f009 fb08 	bl	800b930 <strtol>
 8002320:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f009 fa28 	bl	800b780 <strtof>
 8002330:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8002334:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8002338:	f7fe fd4a 	bl	8000dd0 <__aeabi_i2f>
 800233c:	4604      	mov	r4, r0
 800233e:	497c      	ldr	r1, [pc, #496]	; (8002530 <nmea_GPGGA+0x338>)
 8002340:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8002344:	f7fe fe4c 	bl	8000fe0 <__aeabi_fdiv>
 8002348:	4603      	mov	r3, r0
 800234a:	4619      	mov	r1, r3
 800234c:	4620      	mov	r0, r4
 800234e:	f7fe fc8b 	bl	8000c68 <__addsf3>
 8002352:	4603      	mov	r3, r0
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe f8e1 	bl	800051c <__aeabi_f2d>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8002362:	2300      	movs	r3, #0
 8002364:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002368:	e010      	b.n	800238c <nmea_GPGGA+0x194>
 800236a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800236c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002370:	4413      	add	r3, r2
 8002372:	7819      	ldrb	r1, [r3, #0]
 8002374:	f107 0210 	add.w	r2, r7, #16
 8002378:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800237c:	4413      	add	r3, r2
 800237e:	460a      	mov	r2, r1
 8002380:	701a      	strb	r2, [r3, #0]
 8002382:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002386:	3301      	adds	r3, #1
 8002388:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800238c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002390:	2b02      	cmp	r3, #2
 8002392:	ddea      	ble.n	800236a <nmea_GPGGA+0x172>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 8002394:	2300      	movs	r3, #0
 8002396:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800239a:	e011      	b.n	80023c0 <nmea_GPGGA+0x1c8>
 800239c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800239e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023a2:	3303      	adds	r3, #3
 80023a4:	4413      	add	r3, r2
 80023a6:	7819      	ldrb	r1, [r3, #0]
 80023a8:	f107 0208 	add.w	r2, r7, #8
 80023ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023b0:	4413      	add	r3, r2
 80023b2:	460a      	mov	r2, r1
 80023b4:	701a      	strb	r2, [r3, #0]
 80023b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023ba:	3301      	adds	r3, #1
 80023bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80023c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023c4:	2b05      	cmp	r3, #5
 80023c6:	dde9      	ble.n	800239c <nmea_GPGGA+0x1a4>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 80023c8:	f107 0310 	add.w	r3, r7, #16
 80023cc:	220a      	movs	r2, #10
 80023ce:	2100      	movs	r1, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f009 faad 	bl	800b930 <strtol>
 80023d6:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 80023da:	f107 0308 	add.w	r3, r7, #8
 80023de:	2100      	movs	r1, #0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f009 f9cd 	bl	800b780 <strtof>
 80023e6:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 80023ea:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80023ee:	f7fe fcef 	bl	8000dd0 <__aeabi_i2f>
 80023f2:	4604      	mov	r4, r0
 80023f4:	494e      	ldr	r1, [pc, #312]	; (8002530 <nmea_GPGGA+0x338>)
 80023f6:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80023fa:	f7fe fdf1 	bl	8000fe0 <__aeabi_fdiv>
 80023fe:	4603      	mov	r3, r0
 8002400:	4619      	mov	r1, r3
 8002402:	4620      	mov	r0, r4
 8002404:	f7fe fc30 	bl	8000c68 <__addsf3>
 8002408:	4603      	mov	r3, r0
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe f886 	bl	800051c <__aeabi_f2d>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002424:	f7fe fb3a 	bl	8000a9c <__aeabi_dcmpeq>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d17a      	bne.n	8002524 <nmea_GPGGA+0x32c>
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	f04f 0300 	mov.w	r3, #0
 8002436:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800243a:	f7fe fb2f 	bl	8000a9c <__aeabi_dcmpeq>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d16f      	bne.n	8002524 <nmea_GPGGA+0x32c>
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	4b3a      	ldr	r3, [pc, #232]	; (8002534 <nmea_GPGGA+0x33c>)
 800244a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800244e:	f7fe fb2f 	bl	8000ab0 <__aeabi_dcmplt>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d065      	beq.n	8002524 <nmea_GPGGA+0x32c>
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	4b36      	ldr	r3, [pc, #216]	; (8002538 <nmea_GPGGA+0x340>)
 800245e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8002462:	f7fe fb25 	bl	8000ab0 <__aeabi_dcmplt>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d05b      	beq.n	8002524 <nmea_GPGGA+0x32c>
            gps_data->latitude = lat_deg;
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002472:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 800247c:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8002484:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 800248e:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8002490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002492:	2100      	movs	r1, #0
 8002494:	4618      	mov	r0, r3
 8002496:	f009 f973 	bl	800b780 <strtof>
 800249a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 800249e:	f04f 0100 	mov.w	r1, #0
 80024a2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80024a6:	f7fe fe7b 	bl	80011a0 <__aeabi_fcmpeq>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d002      	beq.n	80024b6 <nmea_GPGGA+0x2be>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	e001      	b.n	80024ba <nmea_GPGGA+0x2c2>
 80024b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 80024be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c0:	220a      	movs	r2, #10
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f009 fa33 	bl	800b930 <strtol>
 80024ca:	4602      	mov	r2, r0
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 80024d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d2:	220a      	movs	r2, #10
 80024d4:	2100      	movs	r1, #0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f009 fa2a 	bl	800b930 <strtol>
 80024dc:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 80024e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	bfcc      	ite	gt
 80024e8:	2301      	movgt	r3, #1
 80024ea:	2300      	movle	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 80024f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024f6:	2100      	movs	r1, #0
 80024f8:	4618      	mov	r0, r3
 80024fa:	f009 f941 	bl	800b780 <strtof>
 80024fe:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8002502:	f04f 0100 	mov.w	r1, #0
 8002506:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800250a:	f7fe fe49 	bl	80011a0 <__aeabi_fcmpeq>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <nmea_GPGGA+0x322>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	e001      	b.n	800251e <nmea_GPGGA+0x326>
 800251a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8002522:	e022      	b.n	800256a <nmea_GPGGA+0x372>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8002524:	2300      	movs	r3, #0
 8002526:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800252a:	e016      	b.n	800255a <nmea_GPGGA+0x362>
 800252c:	0801050c 	.word	0x0801050c
 8002530:	42700000 	.word	0x42700000
 8002534:	40568000 	.word	0x40568000
 8002538:	40668000 	.word	0x40668000
 800253c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	33d8      	adds	r3, #216	; 0xd8
 8002544:	443b      	add	r3, r7
 8002546:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 800254a:	4618      	mov	r0, r3
 800254c:	f008 fa4e 	bl	800a9ec <free>
 8002550:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002554:	3301      	adds	r3, #1
 8002556:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800255a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800255e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002562:	429a      	cmp	r2, r3
 8002564:	dbea      	blt.n	800253c <nmea_GPGGA+0x344>
            return 0;
 8002566:	2300      	movs	r3, #0
 8002568:	e019      	b.n	800259e <nmea_GPGGA+0x3a6>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 800256a:	2300      	movs	r3, #0
 800256c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002570:	e00e      	b.n	8002590 <nmea_GPGGA+0x398>
 8002572:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	33d8      	adds	r3, #216	; 0xd8
 800257a:	443b      	add	r3, r7
 800257c:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8002580:	4618      	mov	r0, r3
 8002582:	f008 fa33 	bl	800a9ec <free>
 8002586:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800258a:	3301      	adds	r3, #1
 800258c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002590:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002594:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002598:	429a      	cmp	r2, r3
 800259a:	dbea      	blt.n	8002572 <nmea_GPGGA+0x37a>
    return 1;
 800259c:	2301      	movs	r3, #1
}
 800259e:	4618      	mov	r0, r3
 80025a0:	37dc      	adds	r7, #220	; 0xdc
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd90      	pop	{r4, r7, pc}
 80025a6:	bf00      	nop

080025a8 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b0a3      	sub	sp, #140	; 0x8c
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 80025b8:	f107 030c 	add.w	r3, r7, #12
 80025bc:	2264      	movs	r2, #100	; 0x64
 80025be:	2100      	movs	r1, #0
 80025c0:	4618      	mov	r0, r3
 80025c2:	f009 ff44 	bl	800c44e <memset>
    char *marker = strtok(inputString, ",");
 80025c6:	493b      	ldr	r1, [pc, #236]	; (80026b4 <nmea_GPGSA+0x10c>)
 80025c8:	6838      	ldr	r0, [r7, #0]
 80025ca:	f009 ff7b 	bl	800c4c4 <strtok>
 80025ce:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 80025d2:	e027      	b.n	8002624 <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 80025d4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80025d8:	f7fd fe34 	bl	8000244 <strlen>
 80025dc:	4603      	mov	r3, r0
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 80025e4:	1c63      	adds	r3, r4, #1
 80025e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80025ea:	4610      	mov	r0, r2
 80025ec:	f008 f9f6 	bl	800a9dc <malloc>
 80025f0:	4603      	mov	r3, r0
 80025f2:	461a      	mov	r2, r3
 80025f4:	00a3      	lsls	r3, r4, #2
 80025f6:	3388      	adds	r3, #136	; 0x88
 80025f8:	443b      	add	r3, r7
 80025fa:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 80025fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002602:	3b01      	subs	r3, #1
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	3388      	adds	r3, #136	; 0x88
 8002608:	443b      	add	r3, r7
 800260a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800260e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002612:	4618      	mov	r0, r3
 8002614:	f00a fdf3 	bl	800d1fe <strcpy>
        marker = strtok(NULL, ",");
 8002618:	4926      	ldr	r1, [pc, #152]	; (80026b4 <nmea_GPGSA+0x10c>)
 800261a:	2000      	movs	r0, #0
 800261c:	f009 ff52 	bl	800c4c4 <strtok>
 8002620:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8002624:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1d3      	bne.n	80025d4 <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	220a      	movs	r2, #10
 8002630:	2100      	movs	r1, #0
 8002632:	4618      	mov	r0, r3
 8002634:	f009 f97c 	bl	800b930 <strtol>
 8002638:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 800263a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800263c:	2b01      	cmp	r3, #1
 800263e:	bfcc      	ite	gt
 8002640:	2301      	movgt	r3, #1
 8002642:	2300      	movle	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8002650:	2303      	movs	r3, #3
 8002652:	67bb      	str	r3, [r7, #120]	; 0x78
 8002654:	e00e      	b.n	8002674 <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8002656:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	3388      	adds	r3, #136	; 0x88
 800265c:	443b      	add	r3, r7
 800265e:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <nmea_GPGSA+0xc6>
            satelliteCount++;
 8002668:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800266a:	3301      	adds	r3, #1
 800266c:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 800266e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002670:	3301      	adds	r3, #1
 8002672:	67bb      	str	r3, [r7, #120]	; 0x78
 8002674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002676:	2b0e      	cmp	r3, #14
 8002678:	dded      	ble.n	8002656 <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800267e:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8002680:	2300      	movs	r3, #0
 8002682:	677b      	str	r3, [r7, #116]	; 0x74
 8002684:	e00b      	b.n	800269e <nmea_GPGSA+0xf6>
 8002686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	3388      	adds	r3, #136	; 0x88
 800268c:	443b      	add	r3, r7
 800268e:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8002692:	4618      	mov	r0, r3
 8002694:	f008 f9aa 	bl	800a9ec <free>
 8002698:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800269a:	3301      	adds	r3, #1
 800269c:	677b      	str	r3, [r7, #116]	; 0x74
 800269e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80026a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026a4:	429a      	cmp	r2, r3
 80026a6:	dbee      	blt.n	8002686 <nmea_GPGSA+0xde>
    return 1;
 80026a8:	2301      	movs	r3, #1
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	378c      	adds	r7, #140	; 0x8c
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd90      	pop	{r4, r7, pc}
 80026b2:	bf00      	nop
 80026b4:	0801050c 	.word	0x0801050c

080026b8 <nmea_GPGLL>:



int nmea_GPGLL(GPS *gps_data, char*inputString) {
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b0b7      	sub	sp, #220	; 0xdc
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]

    char *values[25];
    int counter = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 80026c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026cc:	2264      	movs	r2, #100	; 0x64
 80026ce:	2100      	movs	r1, #0
 80026d0:	4618      	mov	r0, r3
 80026d2:	f009 febc 	bl	800c44e <memset>
    char *marker = strtok(inputString, ",");
 80026d6:	49b0      	ldr	r1, [pc, #704]	; (8002998 <nmea_GPGLL+0x2e0>)
 80026d8:	6838      	ldr	r0, [r7, #0]
 80026da:	f009 fef3 	bl	800c4c4 <strtok>
 80026de:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 80026e2:	e027      	b.n	8002734 <nmea_GPGLL+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 80026e4:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80026e8:	f7fd fdac 	bl	8000244 <strlen>
 80026ec:	4603      	mov	r3, r0
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 80026f4:	1c63      	adds	r3, r4, #1
 80026f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80026fa:	4610      	mov	r0, r2
 80026fc:	f008 f96e 	bl	800a9dc <malloc>
 8002700:	4603      	mov	r3, r0
 8002702:	461a      	mov	r2, r3
 8002704:	00a3      	lsls	r3, r4, #2
 8002706:	33d8      	adds	r3, #216	; 0xd8
 8002708:	443b      	add	r3, r7
 800270a:	f843 2cb4 	str.w	r2, [r3, #-180]
        strcpy(values[counter - 1], marker);
 800270e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002712:	3b01      	subs	r3, #1
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	33d8      	adds	r3, #216	; 0xd8
 8002718:	443b      	add	r3, r7
 800271a:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 800271e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002722:	4618      	mov	r0, r3
 8002724:	f00a fd6b 	bl	800d1fe <strcpy>
        marker = strtok(NULL, ",");
 8002728:	499b      	ldr	r1, [pc, #620]	; (8002998 <nmea_GPGLL+0x2e0>)
 800272a:	2000      	movs	r0, #0
 800272c:	f009 feca 	bl	800c4c4 <strtok>
 8002730:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8002734:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1d3      	bne.n	80026e4 <nmea_GPGLL+0x2c>
    }
    char latSide = values[2][0];
 800273c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    if (latSide == 'S' || latSide == 'N') { //check if data is sorta intact
 8002744:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8002748:	2b53      	cmp	r3, #83	; 0x53
 800274a:	d004      	beq.n	8002756 <nmea_GPGLL+0x9e>
 800274c:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8002750:	2b4e      	cmp	r3, #78	; 0x4e
 8002752:	f040 811c 	bne.w	800298e <nmea_GPGLL+0x2d6>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[1][z];
 8002756:	2300      	movs	r3, #0
 8002758:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800275c:	e010      	b.n	8002780 <nmea_GPGLL+0xc8>
 800275e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002760:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002764:	4413      	add	r3, r2
 8002766:	7819      	ldrb	r1, [r3, #0]
 8002768:	f107 0220 	add.w	r2, r7, #32
 800276c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002770:	4413      	add	r3, r2
 8002772:	460a      	mov	r2, r1
 8002774:	701a      	strb	r2, [r3, #0]
 8002776:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800277a:	3301      	adds	r3, #1
 800277c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002780:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002784:	2b01      	cmp	r3, #1
 8002786:	ddea      	ble.n	800275e <nmea_GPGLL+0xa6>
        for (int z = 0; z < 6; z++) lat_m[z] = values[1][z + 2];
 8002788:	2300      	movs	r3, #0
 800278a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800278e:	e011      	b.n	80027b4 <nmea_GPGLL+0xfc>
 8002790:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002792:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002796:	3302      	adds	r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	7819      	ldrb	r1, [r3, #0]
 800279c:	f107 0218 	add.w	r2, r7, #24
 80027a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027a4:	4413      	add	r3, r2
 80027a6:	460a      	mov	r2, r1
 80027a8:	701a      	strb	r2, [r3, #0]
 80027aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027ae:	3301      	adds	r3, #1
 80027b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027b8:	2b05      	cmp	r3, #5
 80027ba:	dde9      	ble.n	8002790 <nmea_GPGLL+0xd8>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 80027bc:	f107 0320 	add.w	r3, r7, #32
 80027c0:	220a      	movs	r2, #10
 80027c2:	2100      	movs	r1, #0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f009 f8b3 	bl	800b930 <strtol>
 80027ca:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 80027ce:	f107 0318 	add.w	r3, r7, #24
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f008 ffd3 	bl	800b780 <strtof>
 80027da:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 80027de:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80027e2:	f7fe faf5 	bl	8000dd0 <__aeabi_i2f>
 80027e6:	4604      	mov	r4, r0
 80027e8:	496c      	ldr	r1, [pc, #432]	; (800299c <nmea_GPGLL+0x2e4>)
 80027ea:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80027ee:	f7fe fbf7 	bl	8000fe0 <__aeabi_fdiv>
 80027f2:	4603      	mov	r3, r0
 80027f4:	4619      	mov	r1, r3
 80027f6:	4620      	mov	r0, r4
 80027f8:	f7fe fa36 	bl	8000c68 <__addsf3>
 80027fc:	4603      	mov	r3, r0
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fd fe8c 	bl	800051c <__aeabi_f2d>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];
        char lonSide = values[4][0];
 800280c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
        for (int z = 0; z < 3; z++) lon_d[z] = values[3][z];
 8002814:	2300      	movs	r3, #0
 8002816:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800281a:	e010      	b.n	800283e <nmea_GPGLL+0x186>
 800281c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800281e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002822:	4413      	add	r3, r2
 8002824:	7819      	ldrb	r1, [r3, #0]
 8002826:	f107 0214 	add.w	r2, r7, #20
 800282a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800282e:	4413      	add	r3, r2
 8002830:	460a      	mov	r2, r1
 8002832:	701a      	strb	r2, [r3, #0]
 8002834:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002838:	3301      	adds	r3, #1
 800283a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800283e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002842:	2b02      	cmp	r3, #2
 8002844:	ddea      	ble.n	800281c <nmea_GPGLL+0x164>
        for (int z = 0; z < 6; z++) lon_m[z] = values[3][z + 3];
 8002846:	2300      	movs	r3, #0
 8002848:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800284c:	e011      	b.n	8002872 <nmea_GPGLL+0x1ba>
 800284e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002850:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002854:	3303      	adds	r3, #3
 8002856:	4413      	add	r3, r2
 8002858:	7819      	ldrb	r1, [r3, #0]
 800285a:	f107 020c 	add.w	r2, r7, #12
 800285e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002862:	4413      	add	r3, r2
 8002864:	460a      	mov	r2, r1
 8002866:	701a      	strb	r2, [r3, #0]
 8002868:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800286c:	3301      	adds	r3, #1
 800286e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002872:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002876:	2b05      	cmp	r3, #5
 8002878:	dde9      	ble.n	800284e <nmea_GPGLL+0x196>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 800287a:	f107 0314 	add.w	r3, r7, #20
 800287e:	220a      	movs	r2, #10
 8002880:	2100      	movs	r1, #0
 8002882:	4618      	mov	r0, r3
 8002884:	f009 f854 	bl	800b930 <strtol>
 8002888:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        float lon_min_strtof = strtof(lon_m, NULL);
 800288c:	f107 030c 	add.w	r3, r7, #12
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f008 ff74 	bl	800b780 <strtof>
 8002898:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 800289c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80028a0:	f7fe fa96 	bl	8000dd0 <__aeabi_i2f>
 80028a4:	4604      	mov	r4, r0
 80028a6:	493d      	ldr	r1, [pc, #244]	; (800299c <nmea_GPGLL+0x2e4>)
 80028a8:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80028ac:	f7fe fb98 	bl	8000fe0 <__aeabi_fdiv>
 80028b0:	4603      	mov	r3, r0
 80028b2:	4619      	mov	r1, r3
 80028b4:	4620      	mov	r0, r4
 80028b6:	f7fe f9d7 	bl	8000c68 <__addsf3>
 80028ba:	4603      	mov	r3, r0
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fd fe2d 	bl	800051c <__aeabi_f2d>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        //confirm that we aren't on null island
        if(lon_deg_strtol == 0 || lon_min_strtof == 0 || lat_deg_strtol == 0 || lat_min_strtof == 0) {
 80028ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d015      	beq.n	80028fe <nmea_GPGLL+0x246>
 80028d2:	f04f 0100 	mov.w	r1, #0
 80028d6:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80028da:	f7fe fc61 	bl	80011a0 <__aeabi_fcmpeq>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10c      	bne.n	80028fe <nmea_GPGLL+0x246>
 80028e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d008      	beq.n	80028fe <nmea_GPGLL+0x246>
 80028ec:	f04f 0100 	mov.w	r1, #0
 80028f0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80028f4:	f7fe fc54 	bl	80011a0 <__aeabi_fcmpeq>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d01a      	beq.n	8002934 <nmea_GPGLL+0x27c>
            for(int i = 0; i<counter; i++) free(values[i]);
 80028fe:	2300      	movs	r3, #0
 8002900:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002904:	e00e      	b.n	8002924 <nmea_GPGLL+0x26c>
 8002906:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	33d8      	adds	r3, #216	; 0xd8
 800290e:	443b      	add	r3, r7
 8002910:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8002914:	4618      	mov	r0, r3
 8002916:	f008 f869 	bl	800a9ec <free>
 800291a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800291e:	3301      	adds	r3, #1
 8002920:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002924:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002928:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800292c:	429a      	cmp	r2, r3
 800292e:	dbea      	blt.n	8002906 <nmea_GPGLL+0x24e>
            return 0;
 8002930:	2300      	movs	r3, #0
 8002932:	e02d      	b.n	8002990 <nmea_GPGLL+0x2d8>
        }
        else{
            gps_data->latitude = lat_deg;
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800293a:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->longitude = lon_deg;
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002944:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->latSide = latSide;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 800294e:	721a      	strb	r2, [r3, #8]
            gps_data->lonSide = lonSide;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8002956:	761a      	strb	r2, [r3, #24]
            for(int i = 0; i<counter; i++) free(values[i]);
 8002958:	2300      	movs	r3, #0
 800295a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800295e:	e00e      	b.n	800297e <nmea_GPGLL+0x2c6>
 8002960:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	33d8      	adds	r3, #216	; 0xd8
 8002968:	443b      	add	r3, r7
 800296a:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 800296e:	4618      	mov	r0, r3
 8002970:	f008 f83c 	bl	800a9ec <free>
 8002974:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002978:	3301      	adds	r3, #1
 800297a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800297e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002982:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002986:	429a      	cmp	r2, r3
 8002988:	dbea      	blt.n	8002960 <nmea_GPGLL+0x2a8>
            return 1;
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <nmea_GPGLL+0x2d8>
        }
    }
    else return 0;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	37dc      	adds	r7, #220	; 0xdc
 8002994:	46bd      	mov	sp, r7
 8002996:	bd90      	pop	{r4, r7, pc}
 8002998:	0801050c 	.word	0x0801050c
 800299c:	42700000 	.word	0x42700000

080029a0 <nmea_GPRMC>:


int nmea_GPRMC(GPS *gps_data, char* inputString) {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b0a0      	sub	sp, #128	; 0x80
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]

    char *values[25];
    int counter = 0;
 80029aa:	2300      	movs	r3, #0
 80029ac:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(values, 0, sizeof(values));
 80029ae:	f107 0308 	add.w	r3, r7, #8
 80029b2:	2264      	movs	r2, #100	; 0x64
 80029b4:	2100      	movs	r1, #0
 80029b6:	4618      	mov	r0, r3
 80029b8:	f009 fd49 	bl	800c44e <memset>
    char *start = inputString;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	67bb      	str	r3, [r7, #120]	; 0x78
    char *end;

    // Loop until the end of the string is reached.
    while (start != NULL && *start != '\0') {
 80029c0:	e058      	b.n	8002a74 <nmea_GPRMC+0xd4>
        end = strchr(start, ',');
 80029c2:	212c      	movs	r1, #44	; 0x2c
 80029c4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80029c6:	f009 fd4a 	bl	800c45e <strchr>
 80029ca:	6778      	str	r0, [r7, #116]	; 0x74
        if (end == NULL) {
 80029cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d106      	bne.n	80029e0 <nmea_GPRMC+0x40>
            // Last token reached.
            end = start + strlen(start);
 80029d2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80029d4:	f7fd fc36 	bl	8000244 <strlen>
 80029d8:	4602      	mov	r2, r0
 80029da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029dc:	4413      	add	r3, r2
 80029de:	677b      	str	r3, [r7, #116]	; 0x74
        }

        if (end == start) {
 80029e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80029e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d113      	bne.n	8002a10 <nmea_GPRMC+0x70>
            // Empty field found.
            values[counter] = malloc(1); // Allocate space for a single character
 80029e8:	2001      	movs	r0, #1
 80029ea:	f007 fff7 	bl	800a9dc <malloc>
 80029ee:	4603      	mov	r3, r0
 80029f0:	461a      	mov	r2, r3
 80029f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	3380      	adds	r3, #128	; 0x80
 80029f8:	443b      	add	r3, r7
 80029fa:	f843 2c78 	str.w	r2, [r3, #-120]
            values[counter][0] = '\0';   // Set it to the empty string
 80029fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	3380      	adds	r3, #128	; 0x80
 8002a04:	443b      	add	r3, r7
 8002a06:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	701a      	strb	r2, [r3, #0]
 8002a0e:	e027      	b.n	8002a60 <nmea_GPRMC+0xc0>
        } else {
            // Non-empty field found.
            values[counter] = malloc(end - start + 1); // Allocate space for the token
 8002a10:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002a12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	3301      	adds	r3, #1
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f007 ffdf 	bl	800a9dc <malloc>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	461a      	mov	r2, r3
 8002a22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	3380      	adds	r3, #128	; 0x80
 8002a28:	443b      	add	r3, r7
 8002a2a:	f843 2c78 	str.w	r2, [r3, #-120]
            strncpy(values[counter], start, end - start); // Copy the token
 8002a2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	3380      	adds	r3, #128	; 0x80
 8002a34:	443b      	add	r3, r7
 8002a36:	f853 0c78 	ldr.w	r0, [r3, #-120]
 8002a3a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002a3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	461a      	mov	r2, r3
 8002a42:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002a44:	f009 fd2a 	bl	800c49c <strncpy>
            values[counter][end - start] = '\0'; // Null-terminate it
 8002a48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	3380      	adds	r3, #128	; 0x80
 8002a4e:	443b      	add	r3, r7
 8002a50:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8002a54:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002a56:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002a58:	1a8a      	subs	r2, r1, r2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]
        }

        counter++;
 8002a60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a62:	3301      	adds	r3, #1
 8002a64:	67fb      	str	r3, [r7, #124]	; 0x7c
        if (*end == '\0') {
 8002a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <nmea_GPRMC+0xe4>
            // End of the string reached.
            break;
        }
        start = end + 1; // Move to the start of the next token.
 8002a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a70:	3301      	adds	r3, #1
 8002a72:	67bb      	str	r3, [r7, #120]	; 0x78
    while (start != NULL && *start != '\0') {
 8002a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <nmea_GPRMC+0xe6>
 8002a7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d19f      	bne.n	80029c2 <nmea_GPRMC+0x22>
 8002a82:	e000      	b.n	8002a86 <nmea_GPRMC+0xe6>
            break;
 8002a84:	bf00      	nop
    }

    // ... (Rest of your code for checking and handling the date and freeing memory)

    // Make sure to check if the date was successfully extracted
    if (counter > 9 && strlen(values[9]) == 6) {
 8002a86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a88:	2b09      	cmp	r3, #9
 8002a8a:	dd2a      	ble.n	8002ae2 <nmea_GPRMC+0x142>
 8002a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fd fbd8 	bl	8000244 <strlen>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b06      	cmp	r3, #6
 8002a98:	d123      	bne.n	8002ae2 <nmea_GPRMC+0x142>
        strncpy(gps_data->date, values[9], 6);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3336      	adds	r3, #54	; 0x36
 8002a9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002aa0:	2206      	movs	r2, #6
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f009 fcfa 	bl	800c49c <strncpy>
        gps_data->date[6] = '\0';
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        // Free allocated memory
        for (int i = 0; i < counter; i++) free(values[i]);
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	673b      	str	r3, [r7, #112]	; 0x70
 8002ab4:	e00b      	b.n	8002ace <nmea_GPRMC+0x12e>
 8002ab6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	3380      	adds	r3, #128	; 0x80
 8002abc:	443b      	add	r3, r7
 8002abe:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f007 ff92 	bl	800a9ec <free>
 8002ac8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002aca:	3301      	adds	r3, #1
 8002acc:	673b      	str	r3, [r7, #112]	; 0x70
 8002ace:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002ad0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	dbef      	blt.n	8002ab6 <nmea_GPRMC+0x116>
        gps_data->RMC_Flag = 1;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        return 1; // Success
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e013      	b.n	8002b0a <nmea_GPRMC+0x16a>
    } else {
        // Free allocated memory before returning
        for (int i = 0; i < counter; i++) free(values[i]);
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ae6:	e00b      	b.n	8002b00 <nmea_GPRMC+0x160>
 8002ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	3380      	adds	r3, #128	; 0x80
 8002aee:	443b      	add	r3, r7
 8002af0:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f007 ff79 	bl	800a9ec <free>
 8002afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002afc:	3301      	adds	r3, #1
 8002afe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b04:	429a      	cmp	r2, r3
 8002b06:	dbef      	blt.n	8002ae8 <nmea_GPRMC+0x148>
        return 0; // Failure
 8002b08:	2300      	movs	r3, #0
    }
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3780      	adds	r7, #128	; 0x80
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
	...

08002b14 <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8002b14:	b590      	push	{r4, r7, lr}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8002b1e:	223c      	movs	r2, #60	; 0x3c
 8002b20:	2100      	movs	r1, #0
 8002b22:	485e      	ldr	r0, [pc, #376]	; (8002c9c <nmea_parse+0x188>)
 8002b24:	f009 fc93 	bl	800c44e <memset>
    char * token = strtok(buffer, "$"); // TODO: Check if buffer can be casted to a char * for strtok argument
 8002b28:	495d      	ldr	r1, [pc, #372]	; (8002ca0 <nmea_parse+0x18c>)
 8002b2a:	6838      	ldr	r0, [r7, #0]
 8002b2c:	f009 fcca 	bl	800c4c4 <strtok>
 8002b30:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 8002b36:	e01d      	b.n	8002b74 <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8002b38:	6978      	ldr	r0, [r7, #20]
 8002b3a:	f7fd fb83 	bl	8000244 <strlen>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	693c      	ldr	r4, [r7, #16]
 8002b44:	1c63      	adds	r3, r4, #1
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	4610      	mov	r0, r2
 8002b4a:	f007 ff47 	bl	800a9dc <malloc>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b52      	ldr	r3, [pc, #328]	; (8002c9c <nmea_parse+0x188>)
 8002b54:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	4a4f      	ldr	r2, [pc, #316]	; (8002c9c <nmea_parse+0x188>)
 8002b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b62:	6979      	ldr	r1, [r7, #20]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f00a fb4a 	bl	800d1fe <strcpy>
        token = strtok(NULL, "$");
 8002b6a:	494d      	ldr	r1, [pc, #308]	; (8002ca0 <nmea_parse+0x18c>)
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f009 fca9 	bl	800c4c4 <strtok>
 8002b72:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1de      	bne.n	8002b38 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	e072      	b.n	8002c66 <nmea_parse+0x152>
       if(strstr(data[i], "\r\n")!=NULL){
 8002b80:	4a46      	ldr	r2, [pc, #280]	; (8002c9c <nmea_parse+0x188>)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b88:	4946      	ldr	r1, [pc, #280]	; (8002ca4 <nmea_parse+0x190>)
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f009 fcf6 	bl	800c57c <strstr>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d064      	beq.n	8002c60 <nmea_parse+0x14c>
           if(strstr(data[i], "GPGLL")!=NULL){
 8002b96:	4a41      	ldr	r2, [pc, #260]	; (8002c9c <nmea_parse+0x188>)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b9e:	4942      	ldr	r1, [pc, #264]	; (8002ca8 <nmea_parse+0x194>)
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f009 fceb 	bl	800c57c <strstr>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <nmea_parse+0xaa>
               nmea_GPGLL(gps_data, data[i]);
 8002bac:	4a3b      	ldr	r2, [pc, #236]	; (8002c9c <nmea_parse+0x188>)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7ff fd7e 	bl	80026b8 <nmea_GPGLL>
 8002bbc:	e050      	b.n	8002c60 <nmea_parse+0x14c>
           }
           else if(strstr(data[i], "GPGSA")!=NULL){
 8002bbe:	4a37      	ldr	r2, [pc, #220]	; (8002c9c <nmea_parse+0x188>)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc6:	4939      	ldr	r1, [pc, #228]	; (8002cac <nmea_parse+0x198>)
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f009 fcd7 	bl	800c57c <strstr>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d008      	beq.n	8002be6 <nmea_parse+0xd2>
               nmea_GPGSA(gps_data, data[i]);
 8002bd4:	4a31      	ldr	r2, [pc, #196]	; (8002c9c <nmea_parse+0x188>)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bdc:	4619      	mov	r1, r3
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff fce2 	bl	80025a8 <nmea_GPGSA>
 8002be4:	e03c      	b.n	8002c60 <nmea_parse+0x14c>
           }
           else if(strstr(data[i], "GNGGA") != NULL || (strstr(data[i], "GPGGA"))!=NULL){
 8002be6:	4a2d      	ldr	r2, [pc, #180]	; (8002c9c <nmea_parse+0x188>)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bee:	4930      	ldr	r1, [pc, #192]	; (8002cb0 <nmea_parse+0x19c>)
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f009 fcc3 	bl	800c57c <strstr>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10a      	bne.n	8002c12 <nmea_parse+0xfe>
 8002bfc:	4a27      	ldr	r2, [pc, #156]	; (8002c9c <nmea_parse+0x188>)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c04:	492b      	ldr	r1, [pc, #172]	; (8002cb4 <nmea_parse+0x1a0>)
 8002c06:	4618      	mov	r0, r3
 8002c08:	f009 fcb8 	bl	800c57c <strstr>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d008      	beq.n	8002c24 <nmea_parse+0x110>
               nmea_GPGGA(gps_data, data[i]);
 8002c12:	4a22      	ldr	r2, [pc, #136]	; (8002c9c <nmea_parse+0x188>)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7ff faeb 	bl	80021f8 <nmea_GPGGA>
 8002c22:	e01d      	b.n	8002c60 <nmea_parse+0x14c>
           }
           else if(strstr(data[i], "GNRMC") != NULL || (strstr(data[i], "GPRMC"))!=NULL){
 8002c24:	4a1d      	ldr	r2, [pc, #116]	; (8002c9c <nmea_parse+0x188>)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c2c:	4922      	ldr	r1, [pc, #136]	; (8002cb8 <nmea_parse+0x1a4>)
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f009 fca4 	bl	800c57c <strstr>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10a      	bne.n	8002c50 <nmea_parse+0x13c>
 8002c3a:	4a18      	ldr	r2, [pc, #96]	; (8002c9c <nmea_parse+0x188>)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c42:	491e      	ldr	r1, [pc, #120]	; (8002cbc <nmea_parse+0x1a8>)
 8002c44:	4618      	mov	r0, r3
 8002c46:	f009 fc99 	bl	800c57c <strstr>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d007      	beq.n	8002c60 <nmea_parse+0x14c>
	       nmea_GPRMC(gps_data, data[i]);
 8002c50:	4a12      	ldr	r2, [pc, #72]	; (8002c9c <nmea_parse+0x188>)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c58:	4619      	mov	r1, r3
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff fea0 	bl	80029a0 <nmea_GPRMC>
    for(int i = 0; i<cnt; i++){
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	3301      	adds	r3, #1
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	db88      	blt.n	8002b80 <nmea_parse+0x6c>
	   }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	e009      	b.n	8002c88 <nmea_parse+0x174>
 8002c74:	4a09      	ldr	r2, [pc, #36]	; (8002c9c <nmea_parse+0x188>)
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f007 feb5 	bl	800a9ec <free>
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	3301      	adds	r3, #1
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	dbf1      	blt.n	8002c74 <nmea_parse+0x160>


}
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
 8002c94:	371c      	adds	r7, #28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd90      	pop	{r4, r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	2000041c 	.word	0x2000041c
 8002ca0:	08010510 	.word	0x08010510
 8002ca4:	08010514 	.word	0x08010514
 8002ca8:	08010518 	.word	0x08010518
 8002cac:	08010520 	.word	0x08010520
 8002cb0:	08010528 	.word	0x08010528
 8002cb4:	08010530 	.word	0x08010530
 8002cb8:	08010538 	.word	0x08010538
 8002cbc:	08010540 	.word	0x08010540

08002cc0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002cc6:	1d3b      	adds	r3, r7, #4
 8002cc8:	2100      	movs	r1, #0
 8002cca:	460a      	mov	r2, r1
 8002ccc:	801a      	strh	r2, [r3, #0]
 8002cce:	460a      	mov	r2, r1
 8002cd0:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002cd6:	4b1d      	ldr	r3, [pc, #116]	; (8002d4c <MX_RTC_Init+0x8c>)
 8002cd8:	4a1d      	ldr	r2, [pc, #116]	; (8002d50 <MX_RTC_Init+0x90>)
 8002cda:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002cdc:	4b1b      	ldr	r3, [pc, #108]	; (8002d4c <MX_RTC_Init+0x8c>)
 8002cde:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce2:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002ce4:	4b19      	ldr	r3, [pc, #100]	; (8002d4c <MX_RTC_Init+0x8c>)
 8002ce6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cea:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002cec:	4817      	ldr	r0, [pc, #92]	; (8002d4c <MX_RTC_Init+0x8c>)
 8002cee:	f003 fd99 	bl	8006824 <HAL_RTC_Init>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8002cf8:	f7ff fa79 	bl	80021ee <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002d08:	1d3b      	adds	r3, r7, #4
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	480f      	ldr	r0, [pc, #60]	; (8002d4c <MX_RTC_Init+0x8c>)
 8002d10:	f003 fe14 	bl	800693c <HAL_RTC_SetTime>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8002d1a:	f7ff fa68 	bl	80021ee <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002d22:	2301      	movs	r3, #1
 8002d24:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8002d26:	2301      	movs	r3, #1
 8002d28:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8002d2e:	463b      	mov	r3, r7
 8002d30:	2201      	movs	r2, #1
 8002d32:	4619      	mov	r1, r3
 8002d34:	4805      	ldr	r0, [pc, #20]	; (8002d4c <MX_RTC_Init+0x8c>)
 8002d36:	f003 ff71 	bl	8006c1c <HAL_RTC_SetDate>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002d40:	f7ff fa55 	bl	80021ee <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002d44:	bf00      	nop
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20000458 	.word	0x20000458
 8002d50:	40002800 	.word	0x40002800

08002d54 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a0b      	ldr	r2, [pc, #44]	; (8002d90 <HAL_RTC_MspInit+0x3c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d110      	bne.n	8002d88 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002d66:	f002 ffb3 	bl	8005cd0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002d6a:	4b0a      	ldr	r3, [pc, #40]	; (8002d94 <HAL_RTC_MspInit+0x40>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	4a09      	ldr	r2, [pc, #36]	; (8002d94 <HAL_RTC_MspInit+0x40>)
 8002d70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d74:	61d3      	str	r3, [r2, #28]
 8002d76:	4b07      	ldr	r3, [pc, #28]	; (8002d94 <HAL_RTC_MspInit+0x40>)
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d82:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <HAL_RTC_MspInit+0x44>)
 8002d84:	2201      	movs	r2, #1
 8002d86:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002d88:	bf00      	nop
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40002800 	.word	0x40002800
 8002d94:	40021000 	.word	0x40021000
 8002d98:	4242043c 	.word	0x4242043c

08002d9c <Sync_RTC_With_GPS>:

/* USER CODE BEGIN 1 */


void Sync_RTC_With_GPS()
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8002da2:	af00      	add	r7, sp, #0
  /* Buffers for the GPSTime and GPSDate */
  char GPSTime[256];
  char GPSDate[256];

  /* Flag to track if the sync is complete */
  uint8_t RTC_Sync_Flag = 0;
 8002da4:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002da8:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8002dac:	2200      	movs	r2, #0
 8002dae:	701a      	strb	r2, [r3, #0]

  while(RTC_Sync_Flag == 0) {
 8002db0:	e00d      	b.n	8002dce <Sync_RTC_With_GPS+0x32>
    /* Read in an NMEA message into the buffer */
    readNMEA(&receive_buffer);
 8002db2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff f970 	bl	800209c <readNMEA>

    /*
     * Get the date and time and Sync the RTC
     * The function will set RTC_Sync_Flag = 1 when the RTC is sync'd
     */
    getGPSDateTime(receive_buffer, GPSTime, GPSDate, &RTC_Sync_Flag);
 8002dbc:	1dfb      	adds	r3, r7, #7
 8002dbe:	f107 0208 	add.w	r2, r7, #8
 8002dc2:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002dc6:	f507 7002 	add.w	r0, r7, #520	; 0x208
 8002dca:	f000 f80d 	bl	8002de8 <getGPSDateTime>
  while(RTC_Sync_Flag == 0) {
 8002dce:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002dd2:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0ea      	beq.n	8002db2 <Sync_RTC_With_GPS+0x16>
  }

  /* Can turn on the TEL board LED here to indicate that the RTC is SYNC'd  */
}
 8002ddc:	bf00      	nop
 8002dde:	bf00      	nop
 8002de0:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <getGPSDateTime>:


void getGPSDateTime(uint8_t *buffer, char *GPSTime, char *GPSDate, uint8_t *RTC_Sync_Flag)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b096      	sub	sp, #88	; 0x58
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
 8002df4:	603b      	str	r3, [r7, #0]
  GPS myData;
  nmea_parse(&myData, buffer);
 8002df6:	f107 0318 	add.w	r3, r7, #24
 8002dfa:	68f9      	ldr	r1, [r7, #12]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fe89 	bl	8002b14 <nmea_parse>

  /*
   * lastMeasure is a null-terminated string and has the format hhmmss.sss
   * Make sure there's a valid fix and that there is an RMC message
   */
  if(myData.fix == 1 && myData.RMC_Flag == 1) {
 8002e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	f040 80a1 	bne.w	8002f4c <getGPSDateTime+0x164>
 8002e0a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	f040 809c 	bne.w	8002f4c <getGPSDateTime+0x164>

    /* Copy the GPS time to GPSTime */
    strncpy(GPSTime, myData.lastMeasure, 10);
 8002e14:	f107 0318 	add.w	r3, r7, #24
 8002e18:	332c      	adds	r3, #44	; 0x2c
 8002e1a:	220a      	movs	r2, #10
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	68b8      	ldr	r0, [r7, #8]
 8002e20:	f009 fb3c 	bl	800c49c <strncpy>
    GPSTime[10] = '\0'; // Ensure null termination
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	330a      	adds	r3, #10
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]

    /* Copy the GPS date to GPSDate */
    strncpy(GPSDate, myData.date, 6);
 8002e2c:	f107 0318 	add.w	r3, r7, #24
 8002e30:	3336      	adds	r3, #54	; 0x36
 8002e32:	2206      	movs	r2, #6
 8002e34:	4619      	mov	r1, r3
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f009 fb30 	bl	800c49c <strncpy>
    GPSDate[6] = '\0'; // Ensure null termination
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3306      	adds	r3, #6
 8002e40:	2200      	movs	r2, #0
 8002e42:	701a      	strb	r2, [r3, #0]

    /* Initialize Time and Date Objects */
    RTC_TimeTypeDef sTime = {0};
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	2100      	movs	r1, #0
 8002e4a:	460a      	mov	r2, r1
 8002e4c:	801a      	strh	r2, [r3, #0]
 8002e4e:	460a      	mov	r2, r1
 8002e50:	709a      	strb	r2, [r3, #2]
    RTC_DateTypeDef sDate = {0};
 8002e52:	2300      	movs	r3, #0
 8002e54:	613b      	str	r3, [r7, #16]

    /* Manually parsing the hours, minutes, and seconds */
    sTime.Hours   = (GPSTime[0] - '0') * 10 + (GPSTime[1] - '0');
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	3b30      	subs	r3, #48	; 0x30
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	461a      	mov	r2, r3
 8002e60:	0092      	lsls	r2, r2, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	4413      	add	r3, r2
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	3b30      	subs	r3, #48	; 0x30
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	753b      	strb	r3, [r7, #20]
    sTime.Minutes = (GPSTime[2] - '0') * 10 + (GPSTime[3] - '0');
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	3302      	adds	r3, #2
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	3b30      	subs	r3, #48	; 0x30
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	461a      	mov	r2, r3
 8002e84:	0092      	lsls	r2, r2, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	3303      	adds	r3, #3
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	4413      	add	r3, r2
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	3b30      	subs	r3, #48	; 0x30
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	757b      	strb	r3, [r7, #21]
    sTime.Seconds = (GPSTime[4] - '0') * 10 + (GPSTime[5] - '0');
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	3304      	adds	r3, #4
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	3b30      	subs	r3, #48	; 0x30
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	0092      	lsls	r2, r2, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	3305      	adds	r3, #5
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	3b30      	subs	r3, #48	; 0x30
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	75bb      	strb	r3, [r7, #22]

    /* Set the RTC time with these settings */
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002ec0:	f107 0314 	add.w	r3, r7, #20
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4822      	ldr	r0, [pc, #136]	; (8002f54 <getGPSDateTime+0x16c>)
 8002eca:	f003 fd37 	bl	800693c <HAL_RTC_SetTime>

    /* Manually parsing the date, month, and year */
    sDate.Date  = (GPSDate[0] - '0') * 10 + (GPSDate[1] - '0');
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	3b30      	subs	r3, #48	; 0x30
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	0092      	lsls	r2, r2, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	3b30      	subs	r3, #48	; 0x30
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	74bb      	strb	r3, [r7, #18]
    sDate.Month = (GPSDate[2] - '0') * 10 + (GPSDate[3] - '0');
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3302      	adds	r3, #2
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	3b30      	subs	r3, #48	; 0x30
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	0092      	lsls	r2, r2, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3303      	adds	r3, #3
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	3b30      	subs	r3, #48	; 0x30
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	747b      	strb	r3, [r7, #17]
    sDate.Year  = (GPSDate[4] - '0') * 10 + (GPSDate[5] - '0');
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3304      	adds	r3, #4
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	3b30      	subs	r3, #48	; 0x30
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	0092      	lsls	r2, r2, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3305      	adds	r3, #5
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	4413      	add	r3, r2
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	3b30      	subs	r3, #48	; 0x30
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	74fb      	strb	r3, [r7, #19]

    /* Set the RTC Date with these settings */
    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002f38:	f107 0310 	add.w	r3, r7, #16
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4804      	ldr	r0, [pc, #16]	; (8002f54 <getGPSDateTime+0x16c>)
 8002f42:	f003 fe6b 	bl	8006c1c <HAL_RTC_SetDate>

    /* Set the flag to 1 indicating that the RTC has been sync'd */
    *RTC_Sync_Flag = 1;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	701a      	strb	r2, [r3, #0]
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	3758      	adds	r7, #88	; 0x58
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20000458 	.word	0x20000458

08002f58 <get_current_timestamp>:

time_t get_current_timestamp()
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
  /* Initialize Time and Date objects */
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;

  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002f5e:	1d3b      	adds	r3, r7, #4
 8002f60:	2200      	movs	r2, #0
 8002f62:	4619      	mov	r1, r3
 8002f64:	480b      	ldr	r0, [pc, #44]	; (8002f94 <get_current_timestamp+0x3c>)
 8002f66:	f003 fd81 	bl	8006a6c <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002f6a:	463b      	mov	r3, r7
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4808      	ldr	r0, [pc, #32]	; (8002f94 <get_current_timestamp+0x3c>)
 8002f72:	f003 ff09 	bl	8006d88 <HAL_RTC_GetDate>

  /* Convert to Epoch Time */
  time_t epochTime = convertToEpochTime(&sTime, &sDate);
 8002f76:	463a      	mov	r2, r7
 8002f78:	1d3b      	adds	r3, r7, #4
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 f80b 	bl	8002f98 <convertToEpochTime>
 8002f82:	e9c7 0102 	strd	r0, r1, [r7, #8]

  /* Return the resulting epoch time */
  return epochTime;
 8002f86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	20000458 	.word	0x20000458

08002f98 <convertToEpochTime>:

/* Used to get current time stamp */
time_t convertToEpochTime(RTC_TimeTypeDef *sTime, RTC_DateTypeDef *sDate)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08c      	sub	sp, #48	; 0x30
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
    /* Initialize tm struct - from time.h library */
    struct tm t;

    /* Populate the tm structure fields from the RTC time and date */
    t.tm_year = sDate->Year + 100;  // Year since 1900, so add 100 to the year from the RTC (which starts at 2000).
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	78db      	ldrb	r3, [r3, #3]
 8002fa6:	3364      	adds	r3, #100	; 0x64
 8002fa8:	623b      	str	r3, [r7, #32]
    t.tm_mon = sDate->Month - 1;    // tm_mon is 0-11, so subtract 1 from the RTC month (which starts at 1).
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	785b      	ldrb	r3, [r3, #1]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	61fb      	str	r3, [r7, #28]
    t.tm_mday = sDate->Date;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	789b      	ldrb	r3, [r3, #2]
 8002fb6:	61bb      	str	r3, [r7, #24]
    t.tm_hour = sTime->Hours;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	617b      	str	r3, [r7, #20]
    t.tm_min = sTime->Minutes;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	785b      	ldrb	r3, [r3, #1]
 8002fc2:	613b      	str	r3, [r7, #16]
    t.tm_sec = sTime->Seconds;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	789b      	ldrb	r3, [r3, #2]
 8002fc8:	60fb      	str	r3, [r7, #12]
    t.tm_isdst = -1;                // Disable daylight saving time adjustments.
 8002fca:	f04f 33ff 	mov.w	r3, #4294967295
 8002fce:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Subtract 8 hours with roll-back feature */
    t.tm_hour -= 8;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	3b08      	subs	r3, #8
 8002fd4:	617b      	str	r3, [r7, #20]
    if (t.tm_hour < 0) {
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	da1d      	bge.n	8003018 <convertToEpochTime+0x80>
        t.tm_hour += 24;  // Adjust the hour to ensure it's not less than 0.
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	3318      	adds	r3, #24
 8002fe0:	617b      	str	r3, [r7, #20]
        t.tm_mday--;      // Decrement the day to reflect the day change.
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	61bb      	str	r3, [r7, #24]

        /* Adjust the month and year if needed when day rolls below 1 */
        if (t.tm_mday < 1) {
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	dc14      	bgt.n	8003018 <convertToEpochTime+0x80>
            t.tm_mon--;  // Decrement the month.
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	61fb      	str	r3, [r7, #28]
            if (t.tm_mon < 0) { // If month rolls below January
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	da04      	bge.n	8003004 <convertToEpochTime+0x6c>
                t.tm_mon = 11; // Set month to December
 8002ffa:	230b      	movs	r3, #11
 8002ffc:	61fb      	str	r3, [r7, #28]
                t.tm_year--;   // Decrement the year
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	3b01      	subs	r3, #1
 8003002:	623b      	str	r3, [r7, #32]
            }
            /* Set day to last day of the new month */
            t.tm_mday = lastDayOfMonth(t.tm_mon, t.tm_year + 1900);
 8003004:	69fa      	ldr	r2, [r7, #28]
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800300c:	4619      	mov	r1, r3
 800300e:	4610      	mov	r0, r2
 8003010:	f000 f80e 	bl	8003030 <lastDayOfMonth>
 8003014:	4603      	mov	r3, r0
 8003016:	61bb      	str	r3, [r7, #24]
        }
    }

    /* Convert to epoch time - Function from time.h library */
    return mktime(&t);
 8003018:	f107 030c 	add.w	r3, r7, #12
 800301c:	4618      	mov	r0, r3
 800301e:	f009 fb99 	bl	800c754 <mktime>
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
}
 8003026:	4610      	mov	r0, r2
 8003028:	4619      	mov	r1, r3
 800302a:	3730      	adds	r7, #48	; 0x30
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <lastDayOfMonth>:

/* Function to return the last day of a month */
int lastDayOfMonth(int month, int year)
{
 8003030:	b4b0      	push	{r4, r5, r7}
 8003032:	b08f      	sub	sp, #60	; 0x3c
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  /* Array to hold the number of days in each month */
  int daysInMonth[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 800303a:	4b1e      	ldr	r3, [pc, #120]	; (80030b4 <lastDayOfMonth+0x84>)
 800303c:	f107 0408 	add.w	r4, r7, #8
 8003040:	461d      	mov	r5, r3
 8003042:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003044:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800304a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800304e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  /* Check for leap year in February */
  if (month == 1) { // February case
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d121      	bne.n	800309c <lastDayOfMonth+0x6c>
    if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10c      	bne.n	800307c <lastDayOfMonth+0x4c>
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <lastDayOfMonth+0x88>)
 8003066:	fb83 1302 	smull	r1, r3, r3, r2
 800306a:	1159      	asrs	r1, r3, #5
 800306c:	17d3      	asrs	r3, r2, #31
 800306e:	1acb      	subs	r3, r1, r3
 8003070:	2164      	movs	r1, #100	; 0x64
 8003072:	fb01 f303 	mul.w	r3, r1, r3
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10d      	bne.n	8003098 <lastDayOfMonth+0x68>
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	4b0e      	ldr	r3, [pc, #56]	; (80030b8 <lastDayOfMonth+0x88>)
 8003080:	fb83 1302 	smull	r1, r3, r3, r2
 8003084:	11d9      	asrs	r1, r3, #7
 8003086:	17d3      	asrs	r3, r2, #31
 8003088:	1acb      	subs	r3, r1, r3
 800308a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800308e:	fb01 f303 	mul.w	r3, r1, r3
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <lastDayOfMonth+0x6c>
      return 29;
 8003098:	231d      	movs	r3, #29
 800309a:	e005      	b.n	80030a8 <lastDayOfMonth+0x78>
    }
  }
  return daysInMonth[month];
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	3338      	adds	r3, #56	; 0x38
 80030a2:	443b      	add	r3, r7
 80030a4:	f853 3c30 	ldr.w	r3, [r3, #-48]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	373c      	adds	r7, #60	; 0x3c
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bcb0      	pop	{r4, r5, r7}
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	08010548 	.word	0x08010548
 80030b8:	51eb851f 	.word	0x51eb851f

080030bc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80030c0:	4b17      	ldr	r3, [pc, #92]	; (8003120 <MX_SPI1_Init+0x64>)
 80030c2:	4a18      	ldr	r2, [pc, #96]	; (8003124 <MX_SPI1_Init+0x68>)
 80030c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80030c6:	4b16      	ldr	r3, [pc, #88]	; (8003120 <MX_SPI1_Init+0x64>)
 80030c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80030cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80030ce:	4b14      	ldr	r3, [pc, #80]	; (8003120 <MX_SPI1_Init+0x64>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80030d4:	4b12      	ldr	r3, [pc, #72]	; (8003120 <MX_SPI1_Init+0x64>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030da:	4b11      	ldr	r3, [pc, #68]	; (8003120 <MX_SPI1_Init+0x64>)
 80030dc:	2200      	movs	r2, #0
 80030de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030e0:	4b0f      	ldr	r3, [pc, #60]	; (8003120 <MX_SPI1_Init+0x64>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80030e6:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <MX_SPI1_Init+0x64>)
 80030e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80030ee:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <MX_SPI1_Init+0x64>)
 80030f0:	2208      	movs	r2, #8
 80030f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030f4:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <MX_SPI1_Init+0x64>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030fa:	4b09      	ldr	r3, [pc, #36]	; (8003120 <MX_SPI1_Init+0x64>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003100:	4b07      	ldr	r3, [pc, #28]	; (8003120 <MX_SPI1_Init+0x64>)
 8003102:	2200      	movs	r2, #0
 8003104:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003106:	4b06      	ldr	r3, [pc, #24]	; (8003120 <MX_SPI1_Init+0x64>)
 8003108:	220a      	movs	r2, #10
 800310a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800310c:	4804      	ldr	r0, [pc, #16]	; (8003120 <MX_SPI1_Init+0x64>)
 800310e:	f004 f931 	bl	8007374 <HAL_SPI_Init>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003118:	f7ff f869 	bl	80021ee <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800311c:	bf00      	nop
 800311e:	bd80      	pop	{r7, pc}
 8003120:	2000046c 	.word	0x2000046c
 8003124:	40013000 	.word	0x40013000

08003128 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003130:	f107 0310 	add.w	r3, r7, #16
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	605a      	str	r2, [r3, #4]
 800313a:	609a      	str	r2, [r3, #8]
 800313c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a1b      	ldr	r2, [pc, #108]	; (80031b0 <HAL_SPI_MspInit+0x88>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d12f      	bne.n	80031a8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003148:	4b1a      	ldr	r3, [pc, #104]	; (80031b4 <HAL_SPI_MspInit+0x8c>)
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	4a19      	ldr	r2, [pc, #100]	; (80031b4 <HAL_SPI_MspInit+0x8c>)
 800314e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003152:	6193      	str	r3, [r2, #24]
 8003154:	4b17      	ldr	r3, [pc, #92]	; (80031b4 <HAL_SPI_MspInit+0x8c>)
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003160:	4b14      	ldr	r3, [pc, #80]	; (80031b4 <HAL_SPI_MspInit+0x8c>)
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	4a13      	ldr	r2, [pc, #76]	; (80031b4 <HAL_SPI_MspInit+0x8c>)
 8003166:	f043 0304 	orr.w	r3, r3, #4
 800316a:	6193      	str	r3, [r2, #24]
 800316c:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <HAL_SPI_MspInit+0x8c>)
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SDL_CLK_Pin|SDL_MOSI_Pin;
 8003178:	23a0      	movs	r3, #160	; 0xa0
 800317a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317c:	2302      	movs	r3, #2
 800317e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003180:	2303      	movs	r3, #3
 8003182:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003184:	f107 0310 	add.w	r3, r7, #16
 8003188:	4619      	mov	r1, r3
 800318a:	480b      	ldr	r0, [pc, #44]	; (80031b8 <HAL_SPI_MspInit+0x90>)
 800318c:	f000 ff02 	bl	8003f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDL_MISO_Pin;
 8003190:	2340      	movs	r3, #64	; 0x40
 8003192:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003198:	2300      	movs	r3, #0
 800319a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SDL_MISO_GPIO_Port, &GPIO_InitStruct);
 800319c:	f107 0310 	add.w	r3, r7, #16
 80031a0:	4619      	mov	r1, r3
 80031a2:	4805      	ldr	r0, [pc, #20]	; (80031b8 <HAL_SPI_MspInit+0x90>)
 80031a4:	f000 fef6 	bl	8003f94 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80031a8:	bf00      	nop
 80031aa:	3720      	adds	r7, #32
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40013000 	.word	0x40013000
 80031b4:	40021000 	.word	0x40021000
 80031b8:	40010800 	.word	0x40010800

080031bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80031c2:	4b18      	ldr	r3, [pc, #96]	; (8003224 <HAL_MspInit+0x68>)
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	4a17      	ldr	r2, [pc, #92]	; (8003224 <HAL_MspInit+0x68>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	6193      	str	r3, [r2, #24]
 80031ce:	4b15      	ldr	r3, [pc, #84]	; (8003224 <HAL_MspInit+0x68>)
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	60bb      	str	r3, [r7, #8]
 80031d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031da:	4b12      	ldr	r3, [pc, #72]	; (8003224 <HAL_MspInit+0x68>)
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	4a11      	ldr	r2, [pc, #68]	; (8003224 <HAL_MspInit+0x68>)
 80031e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e4:	61d3      	str	r3, [r2, #28]
 80031e6:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <HAL_MspInit+0x68>)
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ee:	607b      	str	r3, [r7, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80031f2:	2200      	movs	r2, #0
 80031f4:	210f      	movs	r1, #15
 80031f6:	f06f 0001 	mvn.w	r0, #1
 80031fa:	f000 fea2 	bl	8003f42 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80031fe:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <HAL_MspInit+0x6c>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	4a04      	ldr	r2, [pc, #16]	; (8003228 <HAL_MspInit+0x6c>)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800321a:	bf00      	nop
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40021000 	.word	0x40021000
 8003228:	40010000 	.word	0x40010000

0800322c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003230:	e7fe      	b.n	8003230 <NMI_Handler+0x4>

08003232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003232:	b480      	push	{r7}
 8003234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003236:	e7fe      	b.n	8003236 <HardFault_Handler+0x4>

08003238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800323c:	e7fe      	b.n	800323c <MemManage_Handler+0x4>

0800323e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800323e:	b480      	push	{r7}
 8003240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003242:	e7fe      	b.n	8003242 <BusFault_Handler+0x4>

08003244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003248:	e7fe      	b.n	8003248 <UsageFault_Handler+0x4>

0800324a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800324a:	b480      	push	{r7}
 800324c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800324e:	bf00      	nop
 8003250:	46bd      	mov	sp, r7
 8003252:	bc80      	pop	{r7}
 8003254:	4770      	bx	lr

08003256 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800325a:	f000 fa25 	bl	80036a8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800325e:	f006 fba5 	bl	80099ac <xTaskGetSchedulerState>
 8003262:	4603      	mov	r3, r0
 8003264:	2b01      	cmp	r3, #1
 8003266:	d001      	beq.n	800326c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003268:	f007 f95e 	bl	800a528 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800326c:	bf00      	nop
 800326e:	bd80      	pop	{r7, pc}

08003270 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return 1;
 8003274:	2301      	movs	r3, #1
}
 8003276:	4618      	mov	r0, r3
 8003278:	46bd      	mov	sp, r7
 800327a:	bc80      	pop	{r7}
 800327c:	4770      	bx	lr

0800327e <_kill>:

int _kill(int pid, int sig)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003288:	f009 ff8a 	bl	800d1a0 <__errno>
 800328c:	4603      	mov	r3, r0
 800328e:	2216      	movs	r2, #22
 8003290:	601a      	str	r2, [r3, #0]
  return -1;
 8003292:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <_exit>:

void _exit (int status)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b082      	sub	sp, #8
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032a6:	f04f 31ff 	mov.w	r1, #4294967295
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7ff ffe7 	bl	800327e <_kill>
  while (1) {}    /* Make sure we hang here */
 80032b0:	e7fe      	b.n	80032b0 <_exit+0x12>

080032b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b086      	sub	sp, #24
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032be:	2300      	movs	r3, #0
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	e00a      	b.n	80032da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032c4:	f3af 8000 	nop.w
 80032c8:	4601      	mov	r1, r0
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	60ba      	str	r2, [r7, #8]
 80032d0:	b2ca      	uxtb	r2, r1
 80032d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	3301      	adds	r3, #1
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	429a      	cmp	r2, r3
 80032e0:	dbf0      	blt.n	80032c4 <_read+0x12>
  }

  return len;
 80032e2:	687b      	ldr	r3, [r7, #4]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032f8:	2300      	movs	r3, #0
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	e009      	b.n	8003312 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	60ba      	str	r2, [r7, #8]
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	3301      	adds	r3, #1
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	429a      	cmp	r2, r3
 8003318:	dbf1      	blt.n	80032fe <_write+0x12>
  }
  return len;
 800331a:	687b      	ldr	r3, [r7, #4]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <_close>:

int _close(int file)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800332c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003330:	4618      	mov	r0, r3
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr

0800333a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800334a:	605a      	str	r2, [r3, #4]
  return 0;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr

08003358 <_isatty>:

int _isatty(int file)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003360:	2301      	movs	r3, #1
}
 8003362:	4618      	mov	r0, r3
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr

0800336c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr

08003384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800338c:	4a14      	ldr	r2, [pc, #80]	; (80033e0 <_sbrk+0x5c>)
 800338e:	4b15      	ldr	r3, [pc, #84]	; (80033e4 <_sbrk+0x60>)
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003398:	4b13      	ldr	r3, [pc, #76]	; (80033e8 <_sbrk+0x64>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d102      	bne.n	80033a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033a0:	4b11      	ldr	r3, [pc, #68]	; (80033e8 <_sbrk+0x64>)
 80033a2:	4a12      	ldr	r2, [pc, #72]	; (80033ec <_sbrk+0x68>)
 80033a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033a6:	4b10      	ldr	r3, [pc, #64]	; (80033e8 <_sbrk+0x64>)
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4413      	add	r3, r2
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d207      	bcs.n	80033c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033b4:	f009 fef4 	bl	800d1a0 <__errno>
 80033b8:	4603      	mov	r3, r0
 80033ba:	220c      	movs	r2, #12
 80033bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033be:	f04f 33ff 	mov.w	r3, #4294967295
 80033c2:	e009      	b.n	80033d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033c4:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <_sbrk+0x64>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033ca:	4b07      	ldr	r3, [pc, #28]	; (80033e8 <_sbrk+0x64>)
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4413      	add	r3, r2
 80033d2:	4a05      	ldr	r2, [pc, #20]	; (80033e8 <_sbrk+0x64>)
 80033d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033d6:	68fb      	ldr	r3, [r7, #12]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	2000c000 	.word	0x2000c000
 80033e4:	00000400 	.word	0x00000400
 80033e8:	200004c8 	.word	0x200004c8
 80033ec:	200034d0 	.word	0x200034d0

080033f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033f4:	bf00      	nop
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr

080033fc <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003400:	4b11      	ldr	r3, [pc, #68]	; (8003448 <MX_UART5_Init+0x4c>)
 8003402:	4a12      	ldr	r2, [pc, #72]	; (800344c <MX_UART5_Init+0x50>)
 8003404:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003406:	4b10      	ldr	r3, [pc, #64]	; (8003448 <MX_UART5_Init+0x4c>)
 8003408:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800340c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800340e:	4b0e      	ldr	r3, [pc, #56]	; (8003448 <MX_UART5_Init+0x4c>)
 8003410:	2200      	movs	r2, #0
 8003412:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003414:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <MX_UART5_Init+0x4c>)
 8003416:	2200      	movs	r2, #0
 8003418:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800341a:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <MX_UART5_Init+0x4c>)
 800341c:	2200      	movs	r2, #0
 800341e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003420:	4b09      	ldr	r3, [pc, #36]	; (8003448 <MX_UART5_Init+0x4c>)
 8003422:	220c      	movs	r2, #12
 8003424:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003426:	4b08      	ldr	r3, [pc, #32]	; (8003448 <MX_UART5_Init+0x4c>)
 8003428:	2200      	movs	r2, #0
 800342a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800342c:	4b06      	ldr	r3, [pc, #24]	; (8003448 <MX_UART5_Init+0x4c>)
 800342e:	2200      	movs	r2, #0
 8003430:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003432:	4805      	ldr	r0, [pc, #20]	; (8003448 <MX_UART5_Init+0x4c>)
 8003434:	f004 f822 	bl	800747c <HAL_UART_Init>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800343e:	f7fe fed6 	bl	80021ee <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	200004cc 	.word	0x200004cc
 800344c:	40005000 	.word	0x40005000

08003450 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003454:	4b11      	ldr	r3, [pc, #68]	; (800349c <MX_USART1_UART_Init+0x4c>)
 8003456:	4a12      	ldr	r2, [pc, #72]	; (80034a0 <MX_USART1_UART_Init+0x50>)
 8003458:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800345a:	4b10      	ldr	r3, [pc, #64]	; (800349c <MX_USART1_UART_Init+0x4c>)
 800345c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003460:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003462:	4b0e      	ldr	r3, [pc, #56]	; (800349c <MX_USART1_UART_Init+0x4c>)
 8003464:	2200      	movs	r2, #0
 8003466:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003468:	4b0c      	ldr	r3, [pc, #48]	; (800349c <MX_USART1_UART_Init+0x4c>)
 800346a:	2200      	movs	r2, #0
 800346c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800346e:	4b0b      	ldr	r3, [pc, #44]	; (800349c <MX_USART1_UART_Init+0x4c>)
 8003470:	2200      	movs	r2, #0
 8003472:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003474:	4b09      	ldr	r3, [pc, #36]	; (800349c <MX_USART1_UART_Init+0x4c>)
 8003476:	220c      	movs	r2, #12
 8003478:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800347a:	4b08      	ldr	r3, [pc, #32]	; (800349c <MX_USART1_UART_Init+0x4c>)
 800347c:	2200      	movs	r2, #0
 800347e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003480:	4b06      	ldr	r3, [pc, #24]	; (800349c <MX_USART1_UART_Init+0x4c>)
 8003482:	2200      	movs	r2, #0
 8003484:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003486:	4805      	ldr	r0, [pc, #20]	; (800349c <MX_USART1_UART_Init+0x4c>)
 8003488:	f003 fff8 	bl	800747c <HAL_UART_Init>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003492:	f7fe feac 	bl	80021ee <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003496:	bf00      	nop
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	20000514 	.word	0x20000514
 80034a0:	40013800 	.word	0x40013800

080034a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08c      	sub	sp, #48	; 0x30
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ac:	f107 0320 	add.w	r3, r7, #32
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART5)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a3e      	ldr	r2, [pc, #248]	; (80035b8 <HAL_UART_MspInit+0x114>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d13d      	bne.n	8003540 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80034c4:	4b3d      	ldr	r3, [pc, #244]	; (80035bc <HAL_UART_MspInit+0x118>)
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	4a3c      	ldr	r2, [pc, #240]	; (80035bc <HAL_UART_MspInit+0x118>)
 80034ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034ce:	61d3      	str	r3, [r2, #28]
 80034d0:	4b3a      	ldr	r3, [pc, #232]	; (80035bc <HAL_UART_MspInit+0x118>)
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034d8:	61fb      	str	r3, [r7, #28]
 80034da:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034dc:	4b37      	ldr	r3, [pc, #220]	; (80035bc <HAL_UART_MspInit+0x118>)
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	4a36      	ldr	r2, [pc, #216]	; (80035bc <HAL_UART_MspInit+0x118>)
 80034e2:	f043 0310 	orr.w	r3, r3, #16
 80034e6:	6193      	str	r3, [r2, #24]
 80034e8:	4b34      	ldr	r3, [pc, #208]	; (80035bc <HAL_UART_MspInit+0x118>)
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	f003 0310 	and.w	r3, r3, #16
 80034f0:	61bb      	str	r3, [r7, #24]
 80034f2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034f4:	4b31      	ldr	r3, [pc, #196]	; (80035bc <HAL_UART_MspInit+0x118>)
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	4a30      	ldr	r2, [pc, #192]	; (80035bc <HAL_UART_MspInit+0x118>)
 80034fa:	f043 0320 	orr.w	r3, r3, #32
 80034fe:	6193      	str	r3, [r2, #24]
 8003500:	4b2e      	ldr	r3, [pc, #184]	; (80035bc <HAL_UART_MspInit+0x118>)
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	f003 0320 	and.w	r3, r3, #32
 8003508:	617b      	str	r3, [r7, #20]
 800350a:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800350c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003512:	2302      	movs	r3, #2
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003516:	2303      	movs	r3, #3
 8003518:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800351a:	f107 0320 	add.w	r3, r7, #32
 800351e:	4619      	mov	r1, r3
 8003520:	4827      	ldr	r0, [pc, #156]	; (80035c0 <HAL_UART_MspInit+0x11c>)
 8003522:	f000 fd37 	bl	8003f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003526:	2304      	movs	r3, #4
 8003528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800352a:	2300      	movs	r3, #0
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352e:	2300      	movs	r3, #0
 8003530:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003532:	f107 0320 	add.w	r3, r7, #32
 8003536:	4619      	mov	r1, r3
 8003538:	4822      	ldr	r0, [pc, #136]	; (80035c4 <HAL_UART_MspInit+0x120>)
 800353a:	f000 fd2b 	bl	8003f94 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800353e:	e036      	b.n	80035ae <HAL_UART_MspInit+0x10a>
  else if(uartHandle->Instance==USART1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a20      	ldr	r2, [pc, #128]	; (80035c8 <HAL_UART_MspInit+0x124>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d131      	bne.n	80035ae <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART1_CLK_ENABLE();
 800354a:	4b1c      	ldr	r3, [pc, #112]	; (80035bc <HAL_UART_MspInit+0x118>)
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	4a1b      	ldr	r2, [pc, #108]	; (80035bc <HAL_UART_MspInit+0x118>)
 8003550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003554:	6193      	str	r3, [r2, #24]
 8003556:	4b19      	ldr	r3, [pc, #100]	; (80035bc <HAL_UART_MspInit+0x118>)
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003562:	4b16      	ldr	r3, [pc, #88]	; (80035bc <HAL_UART_MspInit+0x118>)
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	4a15      	ldr	r2, [pc, #84]	; (80035bc <HAL_UART_MspInit+0x118>)
 8003568:	f043 0304 	orr.w	r3, r3, #4
 800356c:	6193      	str	r3, [r2, #24]
 800356e:	4b13      	ldr	r3, [pc, #76]	; (80035bc <HAL_UART_MspInit+0x118>)
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	f003 0304 	and.w	r3, r3, #4
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RADIO_TX_Pin;
 800357a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800357e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003580:	2302      	movs	r3, #2
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003584:	2303      	movs	r3, #3
 8003586:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RADIO_TX_GPIO_Port, &GPIO_InitStruct);
 8003588:	f107 0320 	add.w	r3, r7, #32
 800358c:	4619      	mov	r1, r3
 800358e:	480f      	ldr	r0, [pc, #60]	; (80035cc <HAL_UART_MspInit+0x128>)
 8003590:	f000 fd00 	bl	8003f94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RADIO_RX_Pin;
 8003594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800359a:	2300      	movs	r3, #0
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359e:	2300      	movs	r3, #0
 80035a0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RADIO_RX_GPIO_Port, &GPIO_InitStruct);
 80035a2:	f107 0320 	add.w	r3, r7, #32
 80035a6:	4619      	mov	r1, r3
 80035a8:	4808      	ldr	r0, [pc, #32]	; (80035cc <HAL_UART_MspInit+0x128>)
 80035aa:	f000 fcf3 	bl	8003f94 <HAL_GPIO_Init>
}
 80035ae:	bf00      	nop
 80035b0:	3730      	adds	r7, #48	; 0x30
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40005000 	.word	0x40005000
 80035bc:	40021000 	.word	0x40021000
 80035c0:	40011000 	.word	0x40011000
 80035c4:	40011400 	.word	0x40011400
 80035c8:	40013800 	.word	0x40013800
 80035cc:	40010800 	.word	0x40010800

080035d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80035d0:	f7ff ff0e 	bl	80033f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035d4:	480b      	ldr	r0, [pc, #44]	; (8003604 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80035d6:	490c      	ldr	r1, [pc, #48]	; (8003608 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80035d8:	4a0c      	ldr	r2, [pc, #48]	; (800360c <LoopFillZerobss+0x16>)
  movs r3, #0
 80035da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035dc:	e002      	b.n	80035e4 <LoopCopyDataInit>

080035de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035e2:	3304      	adds	r3, #4

080035e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035e8:	d3f9      	bcc.n	80035de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035ea:	4a09      	ldr	r2, [pc, #36]	; (8003610 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80035ec:	4c09      	ldr	r4, [pc, #36]	; (8003614 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035f0:	e001      	b.n	80035f6 <LoopFillZerobss>

080035f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035f4:	3204      	adds	r2, #4

080035f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035f8:	d3fb      	bcc.n	80035f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035fa:	f009 fdd7 	bl	800d1ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035fe:	f7fe fd6b 	bl	80020d8 <main>
  bx lr
 8003602:	4770      	bx	lr
  ldr r0, =_sdata
 8003604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003608:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 800360c:	08010cf4 	.word	0x08010cf4
  ldr r2, =_sbss
 8003610:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8003614:	200034d0 	.word	0x200034d0

08003618 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003618:	e7fe      	b.n	8003618 <ADC1_2_IRQHandler>
	...

0800361c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003620:	4b08      	ldr	r3, [pc, #32]	; (8003644 <HAL_Init+0x28>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a07      	ldr	r2, [pc, #28]	; (8003644 <HAL_Init+0x28>)
 8003626:	f043 0310 	orr.w	r3, r3, #16
 800362a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800362c:	2003      	movs	r0, #3
 800362e:	f000 fc7d 	bl	8003f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003632:	200f      	movs	r0, #15
 8003634:	f000 f808 	bl	8003648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003638:	f7ff fdc0 	bl	80031bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40022000 	.word	0x40022000

08003648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003650:	4b12      	ldr	r3, [pc, #72]	; (800369c <HAL_InitTick+0x54>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <HAL_InitTick+0x58>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	4619      	mov	r1, r3
 800365a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800365e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003662:	fbb2 f3f3 	udiv	r3, r2, r3
 8003666:	4618      	mov	r0, r3
 8003668:	f000 fc87 	bl	8003f7a <HAL_SYSTICK_Config>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e00e      	b.n	8003694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b0f      	cmp	r3, #15
 800367a:	d80a      	bhi.n	8003692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800367c:	2200      	movs	r2, #0
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	f04f 30ff 	mov.w	r0, #4294967295
 8003684:	f000 fc5d 	bl	8003f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003688:	4a06      	ldr	r2, [pc, #24]	; (80036a4 <HAL_InitTick+0x5c>)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800368e:	2300      	movs	r3, #0
 8003690:	e000      	b.n	8003694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
}
 8003694:	4618      	mov	r0, r3
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	20000004 	.word	0x20000004
 80036a0:	2000000c 	.word	0x2000000c
 80036a4:	20000008 	.word	0x20000008

080036a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036ac:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_IncTick+0x1c>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	461a      	mov	r2, r3
 80036b2:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <HAL_IncTick+0x20>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4413      	add	r3, r2
 80036b8:	4a03      	ldr	r2, [pc, #12]	; (80036c8 <HAL_IncTick+0x20>)
 80036ba:	6013      	str	r3, [r2, #0]
}
 80036bc:	bf00      	nop
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr
 80036c4:	2000000c 	.word	0x2000000c
 80036c8:	2000055c 	.word	0x2000055c

080036cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  return uwTick;
 80036d0:	4b02      	ldr	r3, [pc, #8]	; (80036dc <HAL_GetTick+0x10>)
 80036d2:	681b      	ldr	r3, [r3, #0]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr
 80036dc:	2000055c 	.word	0x2000055c

080036e0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e0ed      	b.n	80038ce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d102      	bne.n	8003704 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7fd fe04 	bl	800130c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003714:	f7ff ffda 	bl	80036cc <HAL_GetTick>
 8003718:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800371a:	e012      	b.n	8003742 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800371c:	f7ff ffd6 	bl	80036cc <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b0a      	cmp	r3, #10
 8003728:	d90b      	bls.n	8003742 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2205      	movs	r2, #5
 800373a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e0c5      	b.n	80038ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0e5      	beq.n	800371c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0202 	bic.w	r2, r2, #2
 800375e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003760:	f7ff ffb4 	bl	80036cc <HAL_GetTick>
 8003764:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003766:	e012      	b.n	800378e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003768:	f7ff ffb0 	bl	80036cc <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b0a      	cmp	r3, #10
 8003774:	d90b      	bls.n	800378e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2205      	movs	r2, #5
 8003786:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e09f      	b.n	80038ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1e5      	bne.n	8003768 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	7e1b      	ldrb	r3, [r3, #24]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d108      	bne.n	80037b6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	e007      	b.n	80037c6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	7e5b      	ldrb	r3, [r3, #25]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d108      	bne.n	80037e0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	e007      	b.n	80037f0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	7e9b      	ldrb	r3, [r3, #26]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d108      	bne.n	800380a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0220 	orr.w	r2, r2, #32
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	e007      	b.n	800381a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0220 	bic.w	r2, r2, #32
 8003818:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	7edb      	ldrb	r3, [r3, #27]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d108      	bne.n	8003834 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0210 	bic.w	r2, r2, #16
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	e007      	b.n	8003844 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0210 	orr.w	r2, r2, #16
 8003842:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	7f1b      	ldrb	r3, [r3, #28]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d108      	bne.n	800385e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0208 	orr.w	r2, r2, #8
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	e007      	b.n	800386e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0208 	bic.w	r2, r2, #8
 800386c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	7f5b      	ldrb	r3, [r3, #29]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d108      	bne.n	8003888 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f042 0204 	orr.w	r2, r2, #4
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	e007      	b.n	8003898 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0204 	bic.w	r2, r2, #4
 8003896:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	431a      	orrs	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	ea42 0103 	orr.w	r1, r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	1e5a      	subs	r2, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b087      	sub	sp, #28
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
 80038de:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038ec:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80038ee:	7cfb      	ldrb	r3, [r7, #19]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d003      	beq.n	80038fc <HAL_CAN_ConfigFilter+0x26>
 80038f4:	7cfb      	ldrb	r3, [r7, #19]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	f040 80aa 	bne.w	8003a50 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003902:	f043 0201 	orr.w	r2, r3, #1
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	f003 031f 	and.w	r3, r3, #31
 8003914:	2201      	movs	r2, #1
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	43db      	mvns	r3, r3
 8003926:	401a      	ands	r2, r3
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d123      	bne.n	800397e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	43db      	mvns	r3, r3
 8003940:	401a      	ands	r2, r3
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003958:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	3248      	adds	r2, #72	; 0x48
 800395e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003972:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003974:	6979      	ldr	r1, [r7, #20]
 8003976:	3348      	adds	r3, #72	; 0x48
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	440b      	add	r3, r1
 800397c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d122      	bne.n	80039cc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	431a      	orrs	r2, r3
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80039a6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	3248      	adds	r2, #72	; 0x48
 80039ac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039c0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039c2:	6979      	ldr	r1, [r7, #20]
 80039c4:	3348      	adds	r3, #72	; 0x48
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	440b      	add	r3, r1
 80039ca:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d109      	bne.n	80039e8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	43db      	mvns	r3, r3
 80039de:	401a      	ands	r2, r3
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80039e6:	e007      	b.n	80039f8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	431a      	orrs	r2, r3
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d109      	bne.n	8003a14 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	401a      	ands	r2, r3
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003a12:	e007      	b.n	8003a24 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d107      	bne.n	8003a3c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	431a      	orrs	r2, r3
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a42:	f023 0201 	bic.w	r2, r3, #1
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	e006      	b.n	8003a5e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
  }
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	371c      	adds	r7, #28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr

08003a68 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d12e      	bne.n	8003ada <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0201 	bic.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a94:	f7ff fe1a 	bl	80036cc <HAL_GetTick>
 8003a98:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003a9a:	e012      	b.n	8003ac2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a9c:	f7ff fe16 	bl	80036cc <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b0a      	cmp	r3, #10
 8003aa8:	d90b      	bls.n	8003ac2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2205      	movs	r2, #5
 8003aba:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e012      	b.n	8003ae8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e5      	bne.n	8003a9c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	e006      	b.n	8003ae8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
  }
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b04:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b06:	7dfb      	ldrb	r3, [r7, #23]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d003      	beq.n	8003b14 <HAL_CAN_GetRxMessage+0x24>
 8003b0c:	7dfb      	ldrb	r3, [r7, #23]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	f040 8103 	bne.w	8003d1a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10e      	bne.n	8003b38 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0303 	and.w	r3, r3, #3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d116      	bne.n	8003b56 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e0f7      	b.n	8003d28 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d107      	bne.n	8003b56 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e0e8      	b.n	8003d28 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	331b      	adds	r3, #27
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	4413      	add	r3, r2
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0204 	and.w	r2, r3, #4
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10c      	bne.n	8003b8e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	331b      	adds	r3, #27
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	4413      	add	r3, r2
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	0d5b      	lsrs	r3, r3, #21
 8003b84:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	e00b      	b.n	8003ba6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	331b      	adds	r3, #27
 8003b96:	011b      	lsls	r3, r3, #4
 8003b98:	4413      	add	r3, r2
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	08db      	lsrs	r3, r3, #3
 8003b9e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	331b      	adds	r3, #27
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	4413      	add	r3, r2
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0202 	and.w	r2, r3, #2
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	331b      	adds	r3, #27
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	4413      	add	r3, r2
 8003bc8:	3304      	adds	r3, #4
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0308 	and.w	r3, r3, #8
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2208      	movs	r2, #8
 8003bd8:	611a      	str	r2, [r3, #16]
 8003bda:	e00b      	b.n	8003bf4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	331b      	adds	r3, #27
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	4413      	add	r3, r2
 8003be8:	3304      	adds	r3, #4
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 020f 	and.w	r2, r3, #15
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	331b      	adds	r3, #27
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	4413      	add	r3, r2
 8003c00:	3304      	adds	r3, #4
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	0a1b      	lsrs	r3, r3, #8
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	331b      	adds	r3, #27
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	4413      	add	r3, r2
 8003c18:	3304      	adds	r3, #4
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	0c1b      	lsrs	r3, r3, #16
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	0a1a      	lsrs	r2, r3, #8
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	0c1a      	lsrs	r2, r3, #16
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	3302      	adds	r3, #2
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	0e1a      	lsrs	r2, r3, #24
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	3303      	adds	r3, #3
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	0a1a      	lsrs	r2, r3, #8
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	3305      	adds	r3, #5
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	0c1a      	lsrs	r2, r3, #16
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	3306      	adds	r3, #6
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	0e1a      	lsrs	r2, r3, #24
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	3307      	adds	r3, #7
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d108      	bne.n	8003d06 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0220 	orr.w	r2, r2, #32
 8003d02:	60da      	str	r2, [r3, #12]
 8003d04:	e007      	b.n	8003d16 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 0220 	orr.w	r2, r2, #32
 8003d14:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	e006      	b.n	8003d28 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
  }
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	371c      	adds	r7, #28
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr

08003d32 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b085      	sub	sp, #20
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
 8003d3a:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d46:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d48:	7afb      	ldrb	r3, [r7, #11]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d002      	beq.n	8003d54 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8003d4e:	7afb      	ldrb	r3, [r7, #11]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d10f      	bne.n	8003d74 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d106      	bne.n	8003d68 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	e005      	b.n	8003d74 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8003d74:	68fb      	ldr	r3, [r7, #12]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bc80      	pop	{r7}
 8003d7e:	4770      	bx	lr

08003d80 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d90:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d002      	beq.n	8003d9e <HAL_CAN_ActivateNotification+0x1e>
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d109      	bne.n	8003db2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6959      	ldr	r1, [r3, #20]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003dae:	2300      	movs	r3, #0
 8003db0:	e006      	b.n	8003dc0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
  }
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bc80      	pop	{r7}
 8003dc8:	4770      	bx	lr
	...

08003dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ddc:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <__NVIC_SetPriorityGrouping+0x44>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003de8:	4013      	ands	r3, r2
 8003dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dfe:	4a04      	ldr	r2, [pc, #16]	; (8003e10 <__NVIC_SetPriorityGrouping+0x44>)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	60d3      	str	r3, [r2, #12]
}
 8003e04:	bf00      	nop
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bc80      	pop	{r7}
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	e000ed00 	.word	0xe000ed00

08003e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e18:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <__NVIC_GetPriorityGrouping+0x18>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	0a1b      	lsrs	r3, r3, #8
 8003e1e:	f003 0307 	and.w	r3, r3, #7
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	e000ed00 	.word	0xe000ed00

08003e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	6039      	str	r1, [r7, #0]
 8003e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	db0a      	blt.n	8003e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	490c      	ldr	r1, [pc, #48]	; (8003e7c <__NVIC_SetPriority+0x4c>)
 8003e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4e:	0112      	lsls	r2, r2, #4
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	440b      	add	r3, r1
 8003e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e58:	e00a      	b.n	8003e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	4908      	ldr	r1, [pc, #32]	; (8003e80 <__NVIC_SetPriority+0x50>)
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	3b04      	subs	r3, #4
 8003e68:	0112      	lsls	r2, r2, #4
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	761a      	strb	r2, [r3, #24]
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	e000e100 	.word	0xe000e100
 8003e80:	e000ed00 	.word	0xe000ed00

08003e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b089      	sub	sp, #36	; 0x24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	f1c3 0307 	rsb	r3, r3, #7
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	bf28      	it	cs
 8003ea2:	2304      	movcs	r3, #4
 8003ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	2b06      	cmp	r3, #6
 8003eac:	d902      	bls.n	8003eb4 <NVIC_EncodePriority+0x30>
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	3b03      	subs	r3, #3
 8003eb2:	e000      	b.n	8003eb6 <NVIC_EncodePriority+0x32>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	43da      	mvns	r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	401a      	ands	r2, r3
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed6:	43d9      	mvns	r1, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003edc:	4313      	orrs	r3, r2
         );
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3724      	adds	r7, #36	; 0x24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr

08003ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ef8:	d301      	bcc.n	8003efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003efa:	2301      	movs	r3, #1
 8003efc:	e00f      	b.n	8003f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003efe:	4a0a      	ldr	r2, [pc, #40]	; (8003f28 <SysTick_Config+0x40>)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3b01      	subs	r3, #1
 8003f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f06:	210f      	movs	r1, #15
 8003f08:	f04f 30ff 	mov.w	r0, #4294967295
 8003f0c:	f7ff ff90 	bl	8003e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f10:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <SysTick_Config+0x40>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f16:	4b04      	ldr	r3, [pc, #16]	; (8003f28 <SysTick_Config+0x40>)
 8003f18:	2207      	movs	r2, #7
 8003f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	e000e010 	.word	0xe000e010

08003f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7ff ff49 	bl	8003dcc <__NVIC_SetPriorityGrouping>
}
 8003f3a:	bf00      	nop
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b086      	sub	sp, #24
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	4603      	mov	r3, r0
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	607a      	str	r2, [r7, #4]
 8003f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f54:	f7ff ff5e 	bl	8003e14 <__NVIC_GetPriorityGrouping>
 8003f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	68b9      	ldr	r1, [r7, #8]
 8003f5e:	6978      	ldr	r0, [r7, #20]
 8003f60:	f7ff ff90 	bl	8003e84 <NVIC_EncodePriority>
 8003f64:	4602      	mov	r2, r0
 8003f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff ff5f 	bl	8003e30 <__NVIC_SetPriority>
}
 8003f72:	bf00      	nop
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b082      	sub	sp, #8
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff ffb0 	bl	8003ee8 <SysTick_Config>
 8003f88:	4603      	mov	r3, r0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b08b      	sub	sp, #44	; 0x2c
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fa6:	e179      	b.n	800429c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003fa8:	2201      	movs	r2, #1
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	69fa      	ldr	r2, [r7, #28]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	f040 8168 	bne.w	8004296 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	4a96      	ldr	r2, [pc, #600]	; (8004224 <HAL_GPIO_Init+0x290>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d05e      	beq.n	800408e <HAL_GPIO_Init+0xfa>
 8003fd0:	4a94      	ldr	r2, [pc, #592]	; (8004224 <HAL_GPIO_Init+0x290>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d875      	bhi.n	80040c2 <HAL_GPIO_Init+0x12e>
 8003fd6:	4a94      	ldr	r2, [pc, #592]	; (8004228 <HAL_GPIO_Init+0x294>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d058      	beq.n	800408e <HAL_GPIO_Init+0xfa>
 8003fdc:	4a92      	ldr	r2, [pc, #584]	; (8004228 <HAL_GPIO_Init+0x294>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d86f      	bhi.n	80040c2 <HAL_GPIO_Init+0x12e>
 8003fe2:	4a92      	ldr	r2, [pc, #584]	; (800422c <HAL_GPIO_Init+0x298>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d052      	beq.n	800408e <HAL_GPIO_Init+0xfa>
 8003fe8:	4a90      	ldr	r2, [pc, #576]	; (800422c <HAL_GPIO_Init+0x298>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d869      	bhi.n	80040c2 <HAL_GPIO_Init+0x12e>
 8003fee:	4a90      	ldr	r2, [pc, #576]	; (8004230 <HAL_GPIO_Init+0x29c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d04c      	beq.n	800408e <HAL_GPIO_Init+0xfa>
 8003ff4:	4a8e      	ldr	r2, [pc, #568]	; (8004230 <HAL_GPIO_Init+0x29c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d863      	bhi.n	80040c2 <HAL_GPIO_Init+0x12e>
 8003ffa:	4a8e      	ldr	r2, [pc, #568]	; (8004234 <HAL_GPIO_Init+0x2a0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d046      	beq.n	800408e <HAL_GPIO_Init+0xfa>
 8004000:	4a8c      	ldr	r2, [pc, #560]	; (8004234 <HAL_GPIO_Init+0x2a0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d85d      	bhi.n	80040c2 <HAL_GPIO_Init+0x12e>
 8004006:	2b12      	cmp	r3, #18
 8004008:	d82a      	bhi.n	8004060 <HAL_GPIO_Init+0xcc>
 800400a:	2b12      	cmp	r3, #18
 800400c:	d859      	bhi.n	80040c2 <HAL_GPIO_Init+0x12e>
 800400e:	a201      	add	r2, pc, #4	; (adr r2, 8004014 <HAL_GPIO_Init+0x80>)
 8004010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004014:	0800408f 	.word	0x0800408f
 8004018:	08004069 	.word	0x08004069
 800401c:	0800407b 	.word	0x0800407b
 8004020:	080040bd 	.word	0x080040bd
 8004024:	080040c3 	.word	0x080040c3
 8004028:	080040c3 	.word	0x080040c3
 800402c:	080040c3 	.word	0x080040c3
 8004030:	080040c3 	.word	0x080040c3
 8004034:	080040c3 	.word	0x080040c3
 8004038:	080040c3 	.word	0x080040c3
 800403c:	080040c3 	.word	0x080040c3
 8004040:	080040c3 	.word	0x080040c3
 8004044:	080040c3 	.word	0x080040c3
 8004048:	080040c3 	.word	0x080040c3
 800404c:	080040c3 	.word	0x080040c3
 8004050:	080040c3 	.word	0x080040c3
 8004054:	080040c3 	.word	0x080040c3
 8004058:	08004071 	.word	0x08004071
 800405c:	08004085 	.word	0x08004085
 8004060:	4a75      	ldr	r2, [pc, #468]	; (8004238 <HAL_GPIO_Init+0x2a4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d013      	beq.n	800408e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004066:	e02c      	b.n	80040c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	623b      	str	r3, [r7, #32]
          break;
 800406e:	e029      	b.n	80040c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	3304      	adds	r3, #4
 8004076:	623b      	str	r3, [r7, #32]
          break;
 8004078:	e024      	b.n	80040c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	3308      	adds	r3, #8
 8004080:	623b      	str	r3, [r7, #32]
          break;
 8004082:	e01f      	b.n	80040c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	330c      	adds	r3, #12
 800408a:	623b      	str	r3, [r7, #32]
          break;
 800408c:	e01a      	b.n	80040c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d102      	bne.n	800409c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004096:	2304      	movs	r3, #4
 8004098:	623b      	str	r3, [r7, #32]
          break;
 800409a:	e013      	b.n	80040c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d105      	bne.n	80040b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80040a4:	2308      	movs	r3, #8
 80040a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69fa      	ldr	r2, [r7, #28]
 80040ac:	611a      	str	r2, [r3, #16]
          break;
 80040ae:	e009      	b.n	80040c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80040b0:	2308      	movs	r3, #8
 80040b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	615a      	str	r2, [r3, #20]
          break;
 80040ba:	e003      	b.n	80040c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80040bc:	2300      	movs	r3, #0
 80040be:	623b      	str	r3, [r7, #32]
          break;
 80040c0:	e000      	b.n	80040c4 <HAL_GPIO_Init+0x130>
          break;
 80040c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	2bff      	cmp	r3, #255	; 0xff
 80040c8:	d801      	bhi.n	80040ce <HAL_GPIO_Init+0x13a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	e001      	b.n	80040d2 <HAL_GPIO_Init+0x13e>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3304      	adds	r3, #4
 80040d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	2bff      	cmp	r3, #255	; 0xff
 80040d8:	d802      	bhi.n	80040e0 <HAL_GPIO_Init+0x14c>
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	e002      	b.n	80040e6 <HAL_GPIO_Init+0x152>
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	3b08      	subs	r3, #8
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	210f      	movs	r1, #15
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	fa01 f303 	lsl.w	r3, r1, r3
 80040f4:	43db      	mvns	r3, r3
 80040f6:	401a      	ands	r2, r3
 80040f8:	6a39      	ldr	r1, [r7, #32]
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004100:	431a      	orrs	r2, r3
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 80c1 	beq.w	8004296 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004114:	4b49      	ldr	r3, [pc, #292]	; (800423c <HAL_GPIO_Init+0x2a8>)
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	4a48      	ldr	r2, [pc, #288]	; (800423c <HAL_GPIO_Init+0x2a8>)
 800411a:	f043 0301 	orr.w	r3, r3, #1
 800411e:	6193      	str	r3, [r2, #24]
 8004120:	4b46      	ldr	r3, [pc, #280]	; (800423c <HAL_GPIO_Init+0x2a8>)
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	60bb      	str	r3, [r7, #8]
 800412a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800412c:	4a44      	ldr	r2, [pc, #272]	; (8004240 <HAL_GPIO_Init+0x2ac>)
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	089b      	lsrs	r3, r3, #2
 8004132:	3302      	adds	r3, #2
 8004134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004138:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	f003 0303 	and.w	r3, r3, #3
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	220f      	movs	r2, #15
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	43db      	mvns	r3, r3
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4013      	ands	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a3c      	ldr	r2, [pc, #240]	; (8004244 <HAL_GPIO_Init+0x2b0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d01f      	beq.n	8004198 <HAL_GPIO_Init+0x204>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a3b      	ldr	r2, [pc, #236]	; (8004248 <HAL_GPIO_Init+0x2b4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d019      	beq.n	8004194 <HAL_GPIO_Init+0x200>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a3a      	ldr	r2, [pc, #232]	; (800424c <HAL_GPIO_Init+0x2b8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d013      	beq.n	8004190 <HAL_GPIO_Init+0x1fc>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a39      	ldr	r2, [pc, #228]	; (8004250 <HAL_GPIO_Init+0x2bc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d00d      	beq.n	800418c <HAL_GPIO_Init+0x1f8>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a38      	ldr	r2, [pc, #224]	; (8004254 <HAL_GPIO_Init+0x2c0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d007      	beq.n	8004188 <HAL_GPIO_Init+0x1f4>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a37      	ldr	r2, [pc, #220]	; (8004258 <HAL_GPIO_Init+0x2c4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d101      	bne.n	8004184 <HAL_GPIO_Init+0x1f0>
 8004180:	2305      	movs	r3, #5
 8004182:	e00a      	b.n	800419a <HAL_GPIO_Init+0x206>
 8004184:	2306      	movs	r3, #6
 8004186:	e008      	b.n	800419a <HAL_GPIO_Init+0x206>
 8004188:	2304      	movs	r3, #4
 800418a:	e006      	b.n	800419a <HAL_GPIO_Init+0x206>
 800418c:	2303      	movs	r3, #3
 800418e:	e004      	b.n	800419a <HAL_GPIO_Init+0x206>
 8004190:	2302      	movs	r3, #2
 8004192:	e002      	b.n	800419a <HAL_GPIO_Init+0x206>
 8004194:	2301      	movs	r3, #1
 8004196:	e000      	b.n	800419a <HAL_GPIO_Init+0x206>
 8004198:	2300      	movs	r3, #0
 800419a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419c:	f002 0203 	and.w	r2, r2, #3
 80041a0:	0092      	lsls	r2, r2, #2
 80041a2:	4093      	lsls	r3, r2
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80041aa:	4925      	ldr	r1, [pc, #148]	; (8004240 <HAL_GPIO_Init+0x2ac>)
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	089b      	lsrs	r3, r3, #2
 80041b0:	3302      	adds	r3, #2
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d006      	beq.n	80041d2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80041c4:	4b25      	ldr	r3, [pc, #148]	; (800425c <HAL_GPIO_Init+0x2c8>)
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	4924      	ldr	r1, [pc, #144]	; (800425c <HAL_GPIO_Init+0x2c8>)
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	608b      	str	r3, [r1, #8]
 80041d0:	e006      	b.n	80041e0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80041d2:	4b22      	ldr	r3, [pc, #136]	; (800425c <HAL_GPIO_Init+0x2c8>)
 80041d4:	689a      	ldr	r2, [r3, #8]
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	43db      	mvns	r3, r3
 80041da:	4920      	ldr	r1, [pc, #128]	; (800425c <HAL_GPIO_Init+0x2c8>)
 80041dc:	4013      	ands	r3, r2
 80041de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d006      	beq.n	80041fa <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80041ec:	4b1b      	ldr	r3, [pc, #108]	; (800425c <HAL_GPIO_Init+0x2c8>)
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	491a      	ldr	r1, [pc, #104]	; (800425c <HAL_GPIO_Init+0x2c8>)
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60cb      	str	r3, [r1, #12]
 80041f8:	e006      	b.n	8004208 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80041fa:	4b18      	ldr	r3, [pc, #96]	; (800425c <HAL_GPIO_Init+0x2c8>)
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	43db      	mvns	r3, r3
 8004202:	4916      	ldr	r1, [pc, #88]	; (800425c <HAL_GPIO_Init+0x2c8>)
 8004204:	4013      	ands	r3, r2
 8004206:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d025      	beq.n	8004260 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004214:	4b11      	ldr	r3, [pc, #68]	; (800425c <HAL_GPIO_Init+0x2c8>)
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	4910      	ldr	r1, [pc, #64]	; (800425c <HAL_GPIO_Init+0x2c8>)
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	4313      	orrs	r3, r2
 800421e:	604b      	str	r3, [r1, #4]
 8004220:	e025      	b.n	800426e <HAL_GPIO_Init+0x2da>
 8004222:	bf00      	nop
 8004224:	10320000 	.word	0x10320000
 8004228:	10310000 	.word	0x10310000
 800422c:	10220000 	.word	0x10220000
 8004230:	10210000 	.word	0x10210000
 8004234:	10120000 	.word	0x10120000
 8004238:	10110000 	.word	0x10110000
 800423c:	40021000 	.word	0x40021000
 8004240:	40010000 	.word	0x40010000
 8004244:	40010800 	.word	0x40010800
 8004248:	40010c00 	.word	0x40010c00
 800424c:	40011000 	.word	0x40011000
 8004250:	40011400 	.word	0x40011400
 8004254:	40011800 	.word	0x40011800
 8004258:	40011c00 	.word	0x40011c00
 800425c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004260:	4b15      	ldr	r3, [pc, #84]	; (80042b8 <HAL_GPIO_Init+0x324>)
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	43db      	mvns	r3, r3
 8004268:	4913      	ldr	r1, [pc, #76]	; (80042b8 <HAL_GPIO_Init+0x324>)
 800426a:	4013      	ands	r3, r2
 800426c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d006      	beq.n	8004288 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800427a:	4b0f      	ldr	r3, [pc, #60]	; (80042b8 <HAL_GPIO_Init+0x324>)
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	490e      	ldr	r1, [pc, #56]	; (80042b8 <HAL_GPIO_Init+0x324>)
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	4313      	orrs	r3, r2
 8004284:	600b      	str	r3, [r1, #0]
 8004286:	e006      	b.n	8004296 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004288:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <HAL_GPIO_Init+0x324>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	43db      	mvns	r3, r3
 8004290:	4909      	ldr	r1, [pc, #36]	; (80042b8 <HAL_GPIO_Init+0x324>)
 8004292:	4013      	ands	r3, r2
 8004294:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	3301      	adds	r3, #1
 800429a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	fa22 f303 	lsr.w	r3, r2, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f47f ae7e 	bne.w	8003fa8 <HAL_GPIO_Init+0x14>
  }
}
 80042ac:	bf00      	nop
 80042ae:	bf00      	nop
 80042b0:	372c      	adds	r7, #44	; 0x2c
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr
 80042b8:	40010400 	.word	0x40010400

080042bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	887b      	ldrh	r3, [r7, #2]
 80042ce:	4013      	ands	r3, r2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042d4:	2301      	movs	r3, #1
 80042d6:	73fb      	strb	r3, [r7, #15]
 80042d8:	e001      	b.n	80042de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042da:	2300      	movs	r3, #0
 80042dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042de:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bc80      	pop	{r7}
 80042e8:	4770      	bx	lr

080042ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b083      	sub	sp, #12
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
 80042f2:	460b      	mov	r3, r1
 80042f4:	807b      	strh	r3, [r7, #2]
 80042f6:	4613      	mov	r3, r2
 80042f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042fa:	787b      	ldrb	r3, [r7, #1]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004300:	887a      	ldrh	r2, [r7, #2]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004306:	e003      	b.n	8004310 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004308:	887b      	ldrh	r3, [r7, #2]
 800430a:	041a      	lsls	r2, r3, #16
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	611a      	str	r2, [r3, #16]
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	bc80      	pop	{r7}
 8004318:	4770      	bx	lr

0800431a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800431a:	b480      	push	{r7}
 800431c:	b085      	sub	sp, #20
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	460b      	mov	r3, r1
 8004324:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800432c:	887a      	ldrh	r2, [r7, #2]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4013      	ands	r3, r2
 8004332:	041a      	lsls	r2, r3, #16
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	43d9      	mvns	r1, r3
 8004338:	887b      	ldrh	r3, [r7, #2]
 800433a:	400b      	ands	r3, r1
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	611a      	str	r2, [r3, #16]
}
 8004342:	bf00      	nop
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr

0800434c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e12b      	b.n	80045b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fd fd2e 	bl	8001dd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2224      	movs	r2, #36	; 0x24
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0201 	bic.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800439e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043b0:	f002 f864 	bl	800647c <HAL_RCC_GetPCLK1Freq>
 80043b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	4a81      	ldr	r2, [pc, #516]	; (80045c0 <HAL_I2C_Init+0x274>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d807      	bhi.n	80043d0 <HAL_I2C_Init+0x84>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4a80      	ldr	r2, [pc, #512]	; (80045c4 <HAL_I2C_Init+0x278>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	bf94      	ite	ls
 80043c8:	2301      	movls	r3, #1
 80043ca:	2300      	movhi	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	e006      	b.n	80043de <HAL_I2C_Init+0x92>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4a7d      	ldr	r2, [pc, #500]	; (80045c8 <HAL_I2C_Init+0x27c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	bf94      	ite	ls
 80043d8:	2301      	movls	r3, #1
 80043da:	2300      	movhi	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e0e7      	b.n	80045b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4a78      	ldr	r2, [pc, #480]	; (80045cc <HAL_I2C_Init+0x280>)
 80043ea:	fba2 2303 	umull	r2, r3, r2, r3
 80043ee:	0c9b      	lsrs	r3, r3, #18
 80043f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	430a      	orrs	r2, r1
 8004404:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	4a6a      	ldr	r2, [pc, #424]	; (80045c0 <HAL_I2C_Init+0x274>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d802      	bhi.n	8004420 <HAL_I2C_Init+0xd4>
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	3301      	adds	r3, #1
 800441e:	e009      	b.n	8004434 <HAL_I2C_Init+0xe8>
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004426:	fb02 f303 	mul.w	r3, r2, r3
 800442a:	4a69      	ldr	r2, [pc, #420]	; (80045d0 <HAL_I2C_Init+0x284>)
 800442c:	fba2 2303 	umull	r2, r3, r2, r3
 8004430:	099b      	lsrs	r3, r3, #6
 8004432:	3301      	adds	r3, #1
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6812      	ldr	r2, [r2, #0]
 8004438:	430b      	orrs	r3, r1
 800443a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004446:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	495c      	ldr	r1, [pc, #368]	; (80045c0 <HAL_I2C_Init+0x274>)
 8004450:	428b      	cmp	r3, r1
 8004452:	d819      	bhi.n	8004488 <HAL_I2C_Init+0x13c>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	1e59      	subs	r1, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004462:	1c59      	adds	r1, r3, #1
 8004464:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004468:	400b      	ands	r3, r1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <HAL_I2C_Init+0x138>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	1e59      	subs	r1, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	fbb1 f3f3 	udiv	r3, r1, r3
 800447c:	3301      	adds	r3, #1
 800447e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004482:	e051      	b.n	8004528 <HAL_I2C_Init+0x1dc>
 8004484:	2304      	movs	r3, #4
 8004486:	e04f      	b.n	8004528 <HAL_I2C_Init+0x1dc>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d111      	bne.n	80044b4 <HAL_I2C_Init+0x168>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	1e58      	subs	r0, r3, #1
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6859      	ldr	r1, [r3, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	440b      	add	r3, r1
 800449e:	fbb0 f3f3 	udiv	r3, r0, r3
 80044a2:	3301      	adds	r3, #1
 80044a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	bf0c      	ite	eq
 80044ac:	2301      	moveq	r3, #1
 80044ae:	2300      	movne	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	e012      	b.n	80044da <HAL_I2C_Init+0x18e>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	1e58      	subs	r0, r3, #1
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6859      	ldr	r1, [r3, #4]
 80044bc:	460b      	mov	r3, r1
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	0099      	lsls	r1, r3, #2
 80044c4:	440b      	add	r3, r1
 80044c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044ca:	3301      	adds	r3, #1
 80044cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	bf0c      	ite	eq
 80044d4:	2301      	moveq	r3, #1
 80044d6:	2300      	movne	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <HAL_I2C_Init+0x196>
 80044de:	2301      	movs	r3, #1
 80044e0:	e022      	b.n	8004528 <HAL_I2C_Init+0x1dc>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10e      	bne.n	8004508 <HAL_I2C_Init+0x1bc>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1e58      	subs	r0, r3, #1
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6859      	ldr	r1, [r3, #4]
 80044f2:	460b      	mov	r3, r1
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	440b      	add	r3, r1
 80044f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80044fc:	3301      	adds	r3, #1
 80044fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004506:	e00f      	b.n	8004528 <HAL_I2C_Init+0x1dc>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	1e58      	subs	r0, r3, #1
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6859      	ldr	r1, [r3, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	0099      	lsls	r1, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	fbb0 f3f3 	udiv	r3, r0, r3
 800451e:	3301      	adds	r3, #1
 8004520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004524:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	6809      	ldr	r1, [r1, #0]
 800452c:	4313      	orrs	r3, r2
 800452e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69da      	ldr	r2, [r3, #28]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004556:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6911      	ldr	r1, [r2, #16]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	68d2      	ldr	r2, [r2, #12]
 8004562:	4311      	orrs	r1, r2
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6812      	ldr	r2, [r2, #0]
 8004568:	430b      	orrs	r3, r1
 800456a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	695a      	ldr	r2, [r3, #20]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	000186a0 	.word	0x000186a0
 80045c4:	001e847f 	.word	0x001e847f
 80045c8:	003d08ff 	.word	0x003d08ff
 80045cc:	431bde83 	.word	0x431bde83
 80045d0:	10624dd3 	.word	0x10624dd3

080045d4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08c      	sub	sp, #48	; 0x30
 80045d8:	af02      	add	r7, sp, #8
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	607a      	str	r2, [r7, #4]
 80045de:	461a      	mov	r2, r3
 80045e0:	460b      	mov	r3, r1
 80045e2:	817b      	strh	r3, [r7, #10]
 80045e4:	4613      	mov	r3, r2
 80045e6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045ec:	f7ff f86e 	bl	80036cc <HAL_GetTick>
 80045f0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b20      	cmp	r3, #32
 80045fc:	f040 824b 	bne.w	8004a96 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	9300      	str	r3, [sp, #0]
 8004604:	2319      	movs	r3, #25
 8004606:	2201      	movs	r2, #1
 8004608:	497f      	ldr	r1, [pc, #508]	; (8004808 <HAL_I2C_Master_Receive+0x234>)
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f001 f92a 	bl	8005864 <I2C_WaitOnFlagUntilTimeout>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004616:	2302      	movs	r3, #2
 8004618:	e23e      	b.n	8004a98 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004620:	2b01      	cmp	r3, #1
 8004622:	d101      	bne.n	8004628 <HAL_I2C_Master_Receive+0x54>
 8004624:	2302      	movs	r3, #2
 8004626:	e237      	b.n	8004a98 <HAL_I2C_Master_Receive+0x4c4>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b01      	cmp	r3, #1
 800463c:	d007      	beq.n	800464e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f042 0201 	orr.w	r2, r2, #1
 800464c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800465c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2222      	movs	r2, #34	; 0x22
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2210      	movs	r2, #16
 800466a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	893a      	ldrh	r2, [r7, #8]
 800467e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004684:	b29a      	uxth	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4a5f      	ldr	r2, [pc, #380]	; (800480c <HAL_I2C_Master_Receive+0x238>)
 800468e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004690:	8979      	ldrh	r1, [r7, #10]
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 fe98 	bl	80053cc <I2C_MasterRequestRead>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e1f8      	b.n	8004a98 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d113      	bne.n	80046d6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ae:	2300      	movs	r3, #0
 80046b0:	61fb      	str	r3, [r7, #28]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	61fb      	str	r3, [r7, #28]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	61fb      	str	r3, [r7, #28]
 80046c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	e1cc      	b.n	8004a70 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d11e      	bne.n	800471c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80046ee:	b672      	cpsid	i
}
 80046f0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046f2:	2300      	movs	r3, #0
 80046f4:	61bb      	str	r3, [r7, #24]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	61bb      	str	r3, [r7, #24]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	61bb      	str	r3, [r7, #24]
 8004706:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004716:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004718:	b662      	cpsie	i
}
 800471a:	e035      	b.n	8004788 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004720:	2b02      	cmp	r3, #2
 8004722:	d11e      	bne.n	8004762 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004732:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004734:	b672      	cpsid	i
}
 8004736:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800475c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800475e:	b662      	cpsie	i
}
 8004760:	e012      	b.n	8004788 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004770:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004772:	2300      	movs	r3, #0
 8004774:	613b      	str	r3, [r7, #16]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	613b      	str	r3, [r7, #16]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	613b      	str	r3, [r7, #16]
 8004786:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004788:	e172      	b.n	8004a70 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478e:	2b03      	cmp	r3, #3
 8004790:	f200 811f 	bhi.w	80049d2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004798:	2b01      	cmp	r3, #1
 800479a:	d123      	bne.n	80047e4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800479c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800479e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f001 fa09 	bl	8005bb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e173      	b.n	8004a98 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	691a      	ldr	r2, [r3, #16]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	1c5a      	adds	r2, r3, #1
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d8:	b29b      	uxth	r3, r3
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047e2:	e145      	b.n	8004a70 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d152      	bne.n	8004892 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f2:	2200      	movs	r2, #0
 80047f4:	4906      	ldr	r1, [pc, #24]	; (8004810 <HAL_I2C_Master_Receive+0x23c>)
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f001 f834 	bl	8005864 <I2C_WaitOnFlagUntilTimeout>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d008      	beq.n	8004814 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e148      	b.n	8004a98 <HAL_I2C_Master_Receive+0x4c4>
 8004806:	bf00      	nop
 8004808:	00100002 	.word	0x00100002
 800480c:	ffff0000 	.word	0xffff0000
 8004810:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004814:	b672      	cpsid	i
}
 8004816:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004826:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	691a      	ldr	r2, [r3, #16]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004844:	3b01      	subs	r3, #1
 8004846:	b29a      	uxth	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004850:	b29b      	uxth	r3, r3
 8004852:	3b01      	subs	r3, #1
 8004854:	b29a      	uxth	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800485a:	b662      	cpsie	i
}
 800485c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	691a      	ldr	r2, [r3, #16]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487a:	3b01      	subs	r3, #1
 800487c:	b29a      	uxth	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004886:	b29b      	uxth	r3, r3
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004890:	e0ee      	b.n	8004a70 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004898:	2200      	movs	r2, #0
 800489a:	4981      	ldr	r1, [pc, #516]	; (8004aa0 <HAL_I2C_Master_Receive+0x4cc>)
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 ffe1 	bl	8005864 <I2C_WaitOnFlagUntilTimeout>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0f5      	b.n	8004a98 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80048bc:	b672      	cpsid	i
}
 80048be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691a      	ldr	r2, [r3, #16]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	1c5a      	adds	r2, r3, #1
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048dc:	3b01      	subs	r3, #1
 80048de:	b29a      	uxth	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80048f2:	4b6c      	ldr	r3, [pc, #432]	; (8004aa4 <HAL_I2C_Master_Receive+0x4d0>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	08db      	lsrs	r3, r3, #3
 80048f8:	4a6b      	ldr	r2, [pc, #428]	; (8004aa8 <HAL_I2C_Master_Receive+0x4d4>)
 80048fa:	fba2 2303 	umull	r2, r3, r2, r3
 80048fe:	0a1a      	lsrs	r2, r3, #8
 8004900:	4613      	mov	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	00da      	lsls	r2, r3, #3
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800490c:	6a3b      	ldr	r3, [r7, #32]
 800490e:	3b01      	subs	r3, #1
 8004910:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d118      	bne.n	800494a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2220      	movs	r2, #32
 8004922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f043 0220 	orr.w	r2, r3, #32
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800493a:	b662      	cpsie	i
}
 800493c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e0a6      	b.n	8004a98 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b04      	cmp	r3, #4
 8004956:	d1d9      	bne.n	800490c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004966:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	691a      	ldr	r2, [r3, #16]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	b2d2      	uxtb	r2, r2
 8004974:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004984:	3b01      	subs	r3, #1
 8004986:	b29a      	uxth	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004990:	b29b      	uxth	r3, r3
 8004992:	3b01      	subs	r3, #1
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800499a:	b662      	cpsie	i
}
 800499c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	b2d2      	uxtb	r2, r2
 80049aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ba:	3b01      	subs	r3, #1
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049d0:	e04e      	b.n	8004a70 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f001 f8ee 	bl	8005bb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e058      	b.n	8004a98 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	691a      	ldr	r2, [r3, #16]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	f003 0304 	and.w	r3, r3, #4
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	d124      	bne.n	8004a70 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a2a:	2b03      	cmp	r3, #3
 8004a2c:	d107      	bne.n	8004a3e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a3c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	691a      	ldr	r2, [r3, #16]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a48:	b2d2      	uxtb	r2, r2
 8004a4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f47f ae88 	bne.w	800478a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a92:	2300      	movs	r3, #0
 8004a94:	e000      	b.n	8004a98 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8004a96:	2302      	movs	r3, #2
  }
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3728      	adds	r7, #40	; 0x28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	00010004 	.word	0x00010004
 8004aa4:	20000004 	.word	0x20000004
 8004aa8:	14f8b589 	.word	0x14f8b589

08004aac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af02      	add	r7, sp, #8
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	4608      	mov	r0, r1
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	461a      	mov	r2, r3
 8004aba:	4603      	mov	r3, r0
 8004abc:	817b      	strh	r3, [r7, #10]
 8004abe:	460b      	mov	r3, r1
 8004ac0:	813b      	strh	r3, [r7, #8]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ac6:	f7fe fe01 	bl	80036cc <HAL_GetTick>
 8004aca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b20      	cmp	r3, #32
 8004ad6:	f040 80d9 	bne.w	8004c8c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	2319      	movs	r3, #25
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	496d      	ldr	r1, [pc, #436]	; (8004c98 <HAL_I2C_Mem_Write+0x1ec>)
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 febd 	bl	8005864 <I2C_WaitOnFlagUntilTimeout>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004af0:	2302      	movs	r3, #2
 8004af2:	e0cc      	b.n	8004c8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d101      	bne.n	8004b02 <HAL_I2C_Mem_Write+0x56>
 8004afe:	2302      	movs	r3, #2
 8004b00:	e0c5      	b.n	8004c8e <HAL_I2C_Mem_Write+0x1e2>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d007      	beq.n	8004b28 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0201 	orr.w	r2, r2, #1
 8004b26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2221      	movs	r2, #33	; 0x21
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2240      	movs	r2, #64	; 0x40
 8004b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a3a      	ldr	r2, [r7, #32]
 8004b52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4a4d      	ldr	r2, [pc, #308]	; (8004c9c <HAL_I2C_Mem_Write+0x1f0>)
 8004b68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b6a:	88f8      	ldrh	r0, [r7, #6]
 8004b6c:	893a      	ldrh	r2, [r7, #8]
 8004b6e:	8979      	ldrh	r1, [r7, #10]
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	9301      	str	r3, [sp, #4]
 8004b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	4603      	mov	r3, r0
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 fcf4 	bl	8005568 <I2C_RequestMemoryWrite>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d052      	beq.n	8004c2c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e081      	b.n	8004c8e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 ff82 	bl	8005a98 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00d      	beq.n	8004bb6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d107      	bne.n	8004bb2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e06b      	b.n	8004c8e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	781a      	ldrb	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	1c5a      	adds	r2, r3, #1
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b04      	cmp	r3, #4
 8004bf2:	d11b      	bne.n	8004c2c <HAL_I2C_Mem_Write+0x180>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d017      	beq.n	8004c2c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	781a      	ldrb	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	1c5a      	adds	r2, r3, #1
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	3b01      	subs	r3, #1
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1aa      	bne.n	8004b8a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 ff75 	bl	8005b28 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00d      	beq.n	8004c60 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c48:	2b04      	cmp	r3, #4
 8004c4a:	d107      	bne.n	8004c5c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c5a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e016      	b.n	8004c8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	e000      	b.n	8004c8e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c8c:	2302      	movs	r3, #2
  }
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	00100002 	.word	0x00100002
 8004c9c:	ffff0000 	.word	0xffff0000

08004ca0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08c      	sub	sp, #48	; 0x30
 8004ca4:	af02      	add	r7, sp, #8
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	4608      	mov	r0, r1
 8004caa:	4611      	mov	r1, r2
 8004cac:	461a      	mov	r2, r3
 8004cae:	4603      	mov	r3, r0
 8004cb0:	817b      	strh	r3, [r7, #10]
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	813b      	strh	r3, [r7, #8]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cbe:	f7fe fd05 	bl	80036cc <HAL_GetTick>
 8004cc2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	f040 8244 	bne.w	800515a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	2319      	movs	r3, #25
 8004cd8:	2201      	movs	r2, #1
 8004cda:	4982      	ldr	r1, [pc, #520]	; (8004ee4 <HAL_I2C_Mem_Read+0x244>)
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 fdc1 	bl	8005864 <I2C_WaitOnFlagUntilTimeout>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e237      	b.n	800515c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d101      	bne.n	8004cfa <HAL_I2C_Mem_Read+0x5a>
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	e230      	b.n	800515c <HAL_I2C_Mem_Read+0x4bc>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d007      	beq.n	8004d20 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0201 	orr.w	r2, r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2222      	movs	r2, #34	; 0x22
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2240      	movs	r2, #64	; 0x40
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004d50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4a62      	ldr	r2, [pc, #392]	; (8004ee8 <HAL_I2C_Mem_Read+0x248>)
 8004d60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d62:	88f8      	ldrh	r0, [r7, #6]
 8004d64:	893a      	ldrh	r2, [r7, #8]
 8004d66:	8979      	ldrh	r1, [r7, #10]
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	9301      	str	r3, [sp, #4]
 8004d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	4603      	mov	r3, r0
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 fc8e 	bl	8005694 <I2C_RequestMemoryRead>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e1ec      	b.n	800515c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d113      	bne.n	8004db2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61fb      	str	r3, [r7, #28]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	61fb      	str	r3, [r7, #28]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	61fb      	str	r3, [r7, #28]
 8004d9e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	e1c0      	b.n	8005134 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d11e      	bne.n	8004df8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dc8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004dca:	b672      	cpsid	i
}
 8004dcc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	61bb      	str	r3, [r7, #24]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	61bb      	str	r3, [r7, #24]
 8004de2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004df2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004df4:	b662      	cpsie	i
}
 8004df6:	e035      	b.n	8004e64 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d11e      	bne.n	8004e3e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e0e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e10:	b672      	cpsid	i
}
 8004e12:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e14:	2300      	movs	r3, #0
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	617b      	str	r3, [r7, #20]
 8004e28:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004e3a:	b662      	cpsie	i
}
 8004e3c:	e012      	b.n	8004e64 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e4c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e4e:	2300      	movs	r3, #0
 8004e50:	613b      	str	r3, [r7, #16]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	613b      	str	r3, [r7, #16]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	613b      	str	r3, [r7, #16]
 8004e62:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004e64:	e166      	b.n	8005134 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e6a:	2b03      	cmp	r3, #3
 8004e6c:	f200 811f 	bhi.w	80050ae <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d123      	bne.n	8004ec0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f000 fe9b 	bl	8005bb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e167      	b.n	800515c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691a      	ldr	r2, [r3, #16]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	b2d2      	uxtb	r2, r2
 8004e98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ebe:	e139      	b.n	8005134 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d152      	bne.n	8004f6e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ece:	2200      	movs	r2, #0
 8004ed0:	4906      	ldr	r1, [pc, #24]	; (8004eec <HAL_I2C_Mem_Read+0x24c>)
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 fcc6 	bl	8005864 <I2C_WaitOnFlagUntilTimeout>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d008      	beq.n	8004ef0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e13c      	b.n	800515c <HAL_I2C_Mem_Read+0x4bc>
 8004ee2:	bf00      	nop
 8004ee4:	00100002 	.word	0x00100002
 8004ee8:	ffff0000 	.word	0xffff0000
 8004eec:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004ef0:	b672      	cpsid	i
}
 8004ef2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691a      	ldr	r2, [r3, #16]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004f36:	b662      	cpsie	i
}
 8004f38:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f6c:	e0e2      	b.n	8005134 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f74:	2200      	movs	r2, #0
 8004f76:	497b      	ldr	r1, [pc, #492]	; (8005164 <HAL_I2C_Mem_Read+0x4c4>)
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 fc73 	bl	8005864 <I2C_WaitOnFlagUntilTimeout>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e0e9      	b.n	800515c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f98:	b672      	cpsid	i
}
 8004f9a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	691a      	ldr	r2, [r3, #16]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004fce:	4b66      	ldr	r3, [pc, #408]	; (8005168 <HAL_I2C_Mem_Read+0x4c8>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	08db      	lsrs	r3, r3, #3
 8004fd4:	4a65      	ldr	r2, [pc, #404]	; (800516c <HAL_I2C_Mem_Read+0x4cc>)
 8004fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fda:	0a1a      	lsrs	r2, r3, #8
 8004fdc:	4613      	mov	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	00da      	lsls	r2, r3, #3
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	3b01      	subs	r3, #1
 8004fec:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d118      	bne.n	8005026 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	f043 0220 	orr.w	r2, r3, #32
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005016:	b662      	cpsie	i
}
 8005018:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e09a      	b.n	800515c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	f003 0304 	and.w	r3, r3, #4
 8005030:	2b04      	cmp	r3, #4
 8005032:	d1d9      	bne.n	8004fe8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005042:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	691a      	ldr	r2, [r3, #16]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	b2d2      	uxtb	r2, r2
 8005050:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	1c5a      	adds	r2, r3, #1
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005060:	3b01      	subs	r3, #1
 8005062:	b29a      	uxth	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506c:	b29b      	uxth	r3, r3
 800506e:	3b01      	subs	r3, #1
 8005070:	b29a      	uxth	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005076:	b662      	cpsie	i
}
 8005078:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	691a      	ldr	r2, [r3, #16]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005096:	3b01      	subs	r3, #1
 8005098:	b29a      	uxth	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050ac:	e042      	b.n	8005134 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 fd80 	bl	8005bb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e04c      	b.n	800515c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	691a      	ldr	r2, [r3, #16]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	b2d2      	uxtb	r2, r2
 80050ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050de:	3b01      	subs	r3, #1
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	f003 0304 	and.w	r3, r3, #4
 80050fe:	2b04      	cmp	r3, #4
 8005100:	d118      	bne.n	8005134 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	691a      	ldr	r2, [r3, #16]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512a:	b29b      	uxth	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005138:	2b00      	cmp	r3, #0
 800513a:	f47f ae94 	bne.w	8004e66 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2220      	movs	r2, #32
 8005142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005156:	2300      	movs	r3, #0
 8005158:	e000      	b.n	800515c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800515a:	2302      	movs	r3, #2
  }
}
 800515c:	4618      	mov	r0, r3
 800515e:	3728      	adds	r7, #40	; 0x28
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	00010004 	.word	0x00010004
 8005168:	20000004 	.word	0x20000004
 800516c:	14f8b589 	.word	0x14f8b589

08005170 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b08a      	sub	sp, #40	; 0x28
 8005174:	af02      	add	r7, sp, #8
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	607a      	str	r2, [r7, #4]
 800517a:	603b      	str	r3, [r7, #0]
 800517c:	460b      	mov	r3, r1
 800517e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005180:	f7fe faa4 	bl	80036cc <HAL_GetTick>
 8005184:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b20      	cmp	r3, #32
 8005194:	f040 8111 	bne.w	80053ba <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	2319      	movs	r3, #25
 800519e:	2201      	movs	r2, #1
 80051a0:	4988      	ldr	r1, [pc, #544]	; (80053c4 <HAL_I2C_IsDeviceReady+0x254>)
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 fb5e 	bl	8005864 <I2C_WaitOnFlagUntilTimeout>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80051ae:	2302      	movs	r3, #2
 80051b0:	e104      	b.n	80053bc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <HAL_I2C_IsDeviceReady+0x50>
 80051bc:	2302      	movs	r3, #2
 80051be:	e0fd      	b.n	80053bc <HAL_I2C_IsDeviceReady+0x24c>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d007      	beq.n	80051e6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f042 0201 	orr.w	r2, r2, #1
 80051e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2224      	movs	r2, #36	; 0x24
 80051fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4a70      	ldr	r2, [pc, #448]	; (80053c8 <HAL_I2C_IsDeviceReady+0x258>)
 8005208:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005218:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2200      	movs	r2, #0
 8005222:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 fb1c 	bl	8005864 <I2C_WaitOnFlagUntilTimeout>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00d      	beq.n	800524e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005240:	d103      	bne.n	800524a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005248:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e0b6      	b.n	80053bc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800524e:	897b      	ldrh	r3, [r7, #10]
 8005250:	b2db      	uxtb	r3, r3
 8005252:	461a      	mov	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800525c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800525e:	f7fe fa35 	bl	80036cc <HAL_GetTick>
 8005262:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b02      	cmp	r3, #2
 8005270:	bf0c      	ite	eq
 8005272:	2301      	moveq	r3, #1
 8005274:	2300      	movne	r3, #0
 8005276:	b2db      	uxtb	r3, r3
 8005278:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005288:	bf0c      	ite	eq
 800528a:	2301      	moveq	r3, #1
 800528c:	2300      	movne	r3, #0
 800528e:	b2db      	uxtb	r3, r3
 8005290:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005292:	e025      	b.n	80052e0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005294:	f7fe fa1a 	bl	80036cc <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d302      	bcc.n	80052aa <HAL_I2C_IsDeviceReady+0x13a>
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d103      	bne.n	80052b2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	22a0      	movs	r2, #160	; 0xa0
 80052ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b02      	cmp	r3, #2
 80052be:	bf0c      	ite	eq
 80052c0:	2301      	moveq	r3, #1
 80052c2:	2300      	movne	r3, #0
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052d6:	bf0c      	ite	eq
 80052d8:	2301      	moveq	r3, #1
 80052da:	2300      	movne	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2ba0      	cmp	r3, #160	; 0xa0
 80052ea:	d005      	beq.n	80052f8 <HAL_I2C_IsDeviceReady+0x188>
 80052ec:	7dfb      	ldrb	r3, [r7, #23]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d102      	bne.n	80052f8 <HAL_I2C_IsDeviceReady+0x188>
 80052f2:	7dbb      	ldrb	r3, [r7, #22]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d0cd      	beq.n	8005294 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b02      	cmp	r3, #2
 800530c:	d129      	bne.n	8005362 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800531c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800531e:	2300      	movs	r3, #0
 8005320:	613b      	str	r3, [r7, #16]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	613b      	str	r3, [r7, #16]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	613b      	str	r3, [r7, #16]
 8005332:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	2319      	movs	r3, #25
 800533a:	2201      	movs	r2, #1
 800533c:	4921      	ldr	r1, [pc, #132]	; (80053c4 <HAL_I2C_IsDeviceReady+0x254>)
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 fa90 	bl	8005864 <I2C_WaitOnFlagUntilTimeout>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e036      	b.n	80053bc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2220      	movs	r2, #32
 8005352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	e02c      	b.n	80053bc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005370:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800537a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	2319      	movs	r3, #25
 8005382:	2201      	movs	r2, #1
 8005384:	490f      	ldr	r1, [pc, #60]	; (80053c4 <HAL_I2C_IsDeviceReady+0x254>)
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f000 fa6c 	bl	8005864 <I2C_WaitOnFlagUntilTimeout>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e012      	b.n	80053bc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	3301      	adds	r3, #1
 800539a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	f4ff af32 	bcc.w	800520a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2220      	movs	r2, #32
 80053aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e000      	b.n	80053bc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80053ba:	2302      	movs	r3, #2
  }
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3720      	adds	r7, #32
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	00100002 	.word	0x00100002
 80053c8:	ffff0000 	.word	0xffff0000

080053cc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b088      	sub	sp, #32
 80053d0:	af02      	add	r7, sp, #8
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	607a      	str	r2, [r7, #4]
 80053d6:	603b      	str	r3, [r7, #0]
 80053d8:	460b      	mov	r3, r1
 80053da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053f0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	2b08      	cmp	r3, #8
 80053f6:	d006      	beq.n	8005406 <I2C_MasterRequestRead+0x3a>
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d003      	beq.n	8005406 <I2C_MasterRequestRead+0x3a>
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005404:	d108      	bne.n	8005418 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005414:	601a      	str	r2, [r3, #0]
 8005416:	e00b      	b.n	8005430 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541c:	2b11      	cmp	r3, #17
 800541e:	d107      	bne.n	8005430 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800542e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 fa11 	bl	8005864 <I2C_WaitOnFlagUntilTimeout>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00d      	beq.n	8005464 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005456:	d103      	bne.n	8005460 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800545e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e079      	b.n	8005558 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800546c:	d108      	bne.n	8005480 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800546e:	897b      	ldrh	r3, [r7, #10]
 8005470:	b2db      	uxtb	r3, r3
 8005472:	f043 0301 	orr.w	r3, r3, #1
 8005476:	b2da      	uxtb	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	611a      	str	r2, [r3, #16]
 800547e:	e05f      	b.n	8005540 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005480:	897b      	ldrh	r3, [r7, #10]
 8005482:	11db      	asrs	r3, r3, #7
 8005484:	b2db      	uxtb	r3, r3
 8005486:	f003 0306 	and.w	r3, r3, #6
 800548a:	b2db      	uxtb	r3, r3
 800548c:	f063 030f 	orn	r3, r3, #15
 8005490:	b2da      	uxtb	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	4930      	ldr	r1, [pc, #192]	; (8005560 <I2C_MasterRequestRead+0x194>)
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f000 fa5a 	bl	8005958 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e054      	b.n	8005558 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054ae:	897b      	ldrh	r3, [r7, #10]
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	4929      	ldr	r1, [pc, #164]	; (8005564 <I2C_MasterRequestRead+0x198>)
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f000 fa4a 	bl	8005958 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d001      	beq.n	80054ce <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e044      	b.n	8005558 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ce:	2300      	movs	r3, #0
 80054d0:	613b      	str	r3, [r7, #16]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	613b      	str	r3, [r7, #16]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	613b      	str	r3, [r7, #16]
 80054e2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054f2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 f9af 	bl	8005864 <I2C_WaitOnFlagUntilTimeout>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00d      	beq.n	8005528 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800551a:	d103      	bne.n	8005524 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005522:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e017      	b.n	8005558 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005528:	897b      	ldrh	r3, [r7, #10]
 800552a:	11db      	asrs	r3, r3, #7
 800552c:	b2db      	uxtb	r3, r3
 800552e:	f003 0306 	and.w	r3, r3, #6
 8005532:	b2db      	uxtb	r3, r3
 8005534:	f063 030e 	orn	r3, r3, #14
 8005538:	b2da      	uxtb	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	4907      	ldr	r1, [pc, #28]	; (8005564 <I2C_MasterRequestRead+0x198>)
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 fa06 	bl	8005958 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e000      	b.n	8005558 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	00010008 	.word	0x00010008
 8005564:	00010002 	.word	0x00010002

08005568 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af02      	add	r7, sp, #8
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	4608      	mov	r0, r1
 8005572:	4611      	mov	r1, r2
 8005574:	461a      	mov	r2, r3
 8005576:	4603      	mov	r3, r0
 8005578:	817b      	strh	r3, [r7, #10]
 800557a:	460b      	mov	r3, r1
 800557c:	813b      	strh	r3, [r7, #8]
 800557e:	4613      	mov	r3, r2
 8005580:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005590:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	2200      	movs	r2, #0
 800559a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 f960 	bl	8005864 <I2C_WaitOnFlagUntilTimeout>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00d      	beq.n	80055c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055b8:	d103      	bne.n	80055c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e05f      	b.n	8005686 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055c6:	897b      	ldrh	r3, [r7, #10]
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	461a      	mov	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	6a3a      	ldr	r2, [r7, #32]
 80055da:	492d      	ldr	r1, [pc, #180]	; (8005690 <I2C_RequestMemoryWrite+0x128>)
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f000 f9bb 	bl	8005958 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e04c      	b.n	8005686 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ec:	2300      	movs	r3, #0
 80055ee:	617b      	str	r3, [r7, #20]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	617b      	str	r3, [r7, #20]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	617b      	str	r3, [r7, #20]
 8005600:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005604:	6a39      	ldr	r1, [r7, #32]
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 fa46 	bl	8005a98 <I2C_WaitOnTXEFlagUntilTimeout>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00d      	beq.n	800562e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	2b04      	cmp	r3, #4
 8005618:	d107      	bne.n	800562a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005628:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e02b      	b.n	8005686 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800562e:	88fb      	ldrh	r3, [r7, #6]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d105      	bne.n	8005640 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005634:	893b      	ldrh	r3, [r7, #8]
 8005636:	b2da      	uxtb	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	611a      	str	r2, [r3, #16]
 800563e:	e021      	b.n	8005684 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005640:	893b      	ldrh	r3, [r7, #8]
 8005642:	0a1b      	lsrs	r3, r3, #8
 8005644:	b29b      	uxth	r3, r3
 8005646:	b2da      	uxtb	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800564e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005650:	6a39      	ldr	r1, [r7, #32]
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f000 fa20 	bl	8005a98 <I2C_WaitOnTXEFlagUntilTimeout>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00d      	beq.n	800567a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	2b04      	cmp	r3, #4
 8005664:	d107      	bne.n	8005676 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005674:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e005      	b.n	8005686 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800567a:	893b      	ldrh	r3, [r7, #8]
 800567c:	b2da      	uxtb	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	00010002 	.word	0x00010002

08005694 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b088      	sub	sp, #32
 8005698:	af02      	add	r7, sp, #8
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	4608      	mov	r0, r1
 800569e:	4611      	mov	r1, r2
 80056a0:	461a      	mov	r2, r3
 80056a2:	4603      	mov	r3, r0
 80056a4:	817b      	strh	r3, [r7, #10]
 80056a6:	460b      	mov	r3, r1
 80056a8:	813b      	strh	r3, [r7, #8]
 80056aa:	4613      	mov	r3, r2
 80056ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 f8c2 	bl	8005864 <I2C_WaitOnFlagUntilTimeout>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00d      	beq.n	8005702 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056f4:	d103      	bne.n	80056fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e0aa      	b.n	8005858 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005702:	897b      	ldrh	r3, [r7, #10]
 8005704:	b2db      	uxtb	r3, r3
 8005706:	461a      	mov	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005710:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	6a3a      	ldr	r2, [r7, #32]
 8005716:	4952      	ldr	r1, [pc, #328]	; (8005860 <I2C_RequestMemoryRead+0x1cc>)
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 f91d 	bl	8005958 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e097      	b.n	8005858 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005728:	2300      	movs	r3, #0
 800572a:	617b      	str	r3, [r7, #20]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	617b      	str	r3, [r7, #20]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	617b      	str	r3, [r7, #20]
 800573c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800573e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005740:	6a39      	ldr	r1, [r7, #32]
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f000 f9a8 	bl	8005a98 <I2C_WaitOnTXEFlagUntilTimeout>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00d      	beq.n	800576a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	2b04      	cmp	r3, #4
 8005754:	d107      	bne.n	8005766 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005764:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e076      	b.n	8005858 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800576a:	88fb      	ldrh	r3, [r7, #6]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d105      	bne.n	800577c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005770:	893b      	ldrh	r3, [r7, #8]
 8005772:	b2da      	uxtb	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	611a      	str	r2, [r3, #16]
 800577a:	e021      	b.n	80057c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800577c:	893b      	ldrh	r3, [r7, #8]
 800577e:	0a1b      	lsrs	r3, r3, #8
 8005780:	b29b      	uxth	r3, r3
 8005782:	b2da      	uxtb	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800578a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800578c:	6a39      	ldr	r1, [r7, #32]
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 f982 	bl	8005a98 <I2C_WaitOnTXEFlagUntilTimeout>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00d      	beq.n	80057b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579e:	2b04      	cmp	r3, #4
 80057a0:	d107      	bne.n	80057b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e050      	b.n	8005858 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057b6:	893b      	ldrh	r3, [r7, #8]
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c2:	6a39      	ldr	r1, [r7, #32]
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 f967 	bl	8005a98 <I2C_WaitOnTXEFlagUntilTimeout>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00d      	beq.n	80057ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d4:	2b04      	cmp	r3, #4
 80057d6:	d107      	bne.n	80057e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e035      	b.n	8005858 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	2200      	movs	r2, #0
 8005804:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f000 f82b 	bl	8005864 <I2C_WaitOnFlagUntilTimeout>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00d      	beq.n	8005830 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005822:	d103      	bne.n	800582c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800582a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e013      	b.n	8005858 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005830:	897b      	ldrh	r3, [r7, #10]
 8005832:	b2db      	uxtb	r3, r3
 8005834:	f043 0301 	orr.w	r3, r3, #1
 8005838:	b2da      	uxtb	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	6a3a      	ldr	r2, [r7, #32]
 8005844:	4906      	ldr	r1, [pc, #24]	; (8005860 <I2C_RequestMemoryRead+0x1cc>)
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f000 f886 	bl	8005958 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e000      	b.n	8005858 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	00010002 	.word	0x00010002

08005864 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	603b      	str	r3, [r7, #0]
 8005870:	4613      	mov	r3, r2
 8005872:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005874:	e048      	b.n	8005908 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587c:	d044      	beq.n	8005908 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800587e:	f7fd ff25 	bl	80036cc <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d302      	bcc.n	8005894 <I2C_WaitOnFlagUntilTimeout+0x30>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d139      	bne.n	8005908 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	0c1b      	lsrs	r3, r3, #16
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b01      	cmp	r3, #1
 800589c:	d10d      	bne.n	80058ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	43da      	mvns	r2, r3
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	4013      	ands	r3, r2
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	bf0c      	ite	eq
 80058b0:	2301      	moveq	r3, #1
 80058b2:	2300      	movne	r3, #0
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	461a      	mov	r2, r3
 80058b8:	e00c      	b.n	80058d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	43da      	mvns	r2, r3
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	4013      	ands	r3, r2
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	bf0c      	ite	eq
 80058cc:	2301      	moveq	r3, #1
 80058ce:	2300      	movne	r3, #0
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	461a      	mov	r2, r3
 80058d4:	79fb      	ldrb	r3, [r7, #7]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d116      	bne.n	8005908 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f4:	f043 0220 	orr.w	r2, r3, #32
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e023      	b.n	8005950 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	0c1b      	lsrs	r3, r3, #16
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b01      	cmp	r3, #1
 8005910:	d10d      	bne.n	800592e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	43da      	mvns	r2, r3
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	4013      	ands	r3, r2
 800591e:	b29b      	uxth	r3, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	bf0c      	ite	eq
 8005924:	2301      	moveq	r3, #1
 8005926:	2300      	movne	r3, #0
 8005928:	b2db      	uxtb	r3, r3
 800592a:	461a      	mov	r2, r3
 800592c:	e00c      	b.n	8005948 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	43da      	mvns	r2, r3
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	4013      	ands	r3, r2
 800593a:	b29b      	uxth	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	bf0c      	ite	eq
 8005940:	2301      	moveq	r3, #1
 8005942:	2300      	movne	r3, #0
 8005944:	b2db      	uxtb	r3, r3
 8005946:	461a      	mov	r2, r3
 8005948:	79fb      	ldrb	r3, [r7, #7]
 800594a:	429a      	cmp	r2, r3
 800594c:	d093      	beq.n	8005876 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005966:	e071      	b.n	8005a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005976:	d123      	bne.n	80059c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005986:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005990:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2220      	movs	r2, #32
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ac:	f043 0204 	orr.w	r2, r3, #4
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e067      	b.n	8005a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c6:	d041      	beq.n	8005a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059c8:	f7fd fe80 	bl	80036cc <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d302      	bcc.n	80059de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d136      	bne.n	8005a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	0c1b      	lsrs	r3, r3, #16
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d10c      	bne.n	8005a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	43da      	mvns	r2, r3
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	4013      	ands	r3, r2
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	bf14      	ite	ne
 80059fa:	2301      	movne	r3, #1
 80059fc:	2300      	moveq	r3, #0
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	e00b      	b.n	8005a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	43da      	mvns	r2, r3
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	bf14      	ite	ne
 8005a14:	2301      	movne	r3, #1
 8005a16:	2300      	moveq	r3, #0
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d016      	beq.n	8005a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2220      	movs	r2, #32
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a38:	f043 0220 	orr.w	r2, r3, #32
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e021      	b.n	8005a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	0c1b      	lsrs	r3, r3, #16
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d10c      	bne.n	8005a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	43da      	mvns	r2, r3
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	4013      	ands	r3, r2
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	bf14      	ite	ne
 8005a68:	2301      	movne	r3, #1
 8005a6a:	2300      	moveq	r3, #0
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	e00b      	b.n	8005a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	43da      	mvns	r2, r3
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	bf14      	ite	ne
 8005a82:	2301      	movne	r3, #1
 8005a84:	2300      	moveq	r3, #0
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f47f af6d 	bne.w	8005968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005aa4:	e034      	b.n	8005b10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 f8e3 	bl	8005c72 <I2C_IsAcknowledgeFailed>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e034      	b.n	8005b20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005abc:	d028      	beq.n	8005b10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005abe:	f7fd fe05 	bl	80036cc <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d302      	bcc.n	8005ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d11d      	bne.n	8005b10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ade:	2b80      	cmp	r3, #128	; 0x80
 8005ae0:	d016      	beq.n	8005b10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2220      	movs	r2, #32
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afc:	f043 0220 	orr.w	r2, r3, #32
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e007      	b.n	8005b20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b1a:	2b80      	cmp	r3, #128	; 0x80
 8005b1c:	d1c3      	bne.n	8005aa6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b34:	e034      	b.n	8005ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f000 f89b 	bl	8005c72 <I2C_IsAcknowledgeFailed>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e034      	b.n	8005bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4c:	d028      	beq.n	8005ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b4e:	f7fd fdbd 	bl	80036cc <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d302      	bcc.n	8005b64 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d11d      	bne.n	8005ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	f003 0304 	and.w	r3, r3, #4
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	d016      	beq.n	8005ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8c:	f043 0220 	orr.w	r2, r3, #32
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e007      	b.n	8005bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	f003 0304 	and.w	r3, r3, #4
 8005baa:	2b04      	cmp	r3, #4
 8005bac:	d1c3      	bne.n	8005b36 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005bc4:	e049      	b.n	8005c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	f003 0310 	and.w	r3, r3, #16
 8005bd0:	2b10      	cmp	r3, #16
 8005bd2:	d119      	bne.n	8005c08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f06f 0210 	mvn.w	r2, #16
 8005bdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e030      	b.n	8005c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c08:	f7fd fd60 	bl	80036cc <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d302      	bcc.n	8005c1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d11d      	bne.n	8005c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c28:	2b40      	cmp	r3, #64	; 0x40
 8005c2a:	d016      	beq.n	8005c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	f043 0220 	orr.w	r2, r3, #32
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e007      	b.n	8005c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c64:	2b40      	cmp	r3, #64	; 0x40
 8005c66:	d1ae      	bne.n	8005bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c88:	d11b      	bne.n	8005cc2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c92:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	f043 0204 	orr.w	r2, r3, #4
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e000      	b.n	8005cc4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bc80      	pop	{r7}
 8005ccc:	4770      	bx	lr
	...

08005cd0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005cd4:	4b03      	ldr	r3, [pc, #12]	; (8005ce4 <HAL_PWR_EnableBkUpAccess+0x14>)
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	601a      	str	r2, [r3, #0]
}
 8005cda:	bf00      	nop
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bc80      	pop	{r7}
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	420e0020 	.word	0x420e0020

08005ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e272      	b.n	80061e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 8087 	beq.w	8005e16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d08:	4b92      	ldr	r3, [pc, #584]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f003 030c 	and.w	r3, r3, #12
 8005d10:	2b04      	cmp	r3, #4
 8005d12:	d00c      	beq.n	8005d2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005d14:	4b8f      	ldr	r3, [pc, #572]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f003 030c 	and.w	r3, r3, #12
 8005d1c:	2b08      	cmp	r3, #8
 8005d1e:	d112      	bne.n	8005d46 <HAL_RCC_OscConfig+0x5e>
 8005d20:	4b8c      	ldr	r3, [pc, #560]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d2c:	d10b      	bne.n	8005d46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d2e:	4b89      	ldr	r3, [pc, #548]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d06c      	beq.n	8005e14 <HAL_RCC_OscConfig+0x12c>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d168      	bne.n	8005e14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e24c      	b.n	80061e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d4e:	d106      	bne.n	8005d5e <HAL_RCC_OscConfig+0x76>
 8005d50:	4b80      	ldr	r3, [pc, #512]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a7f      	ldr	r2, [pc, #508]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d5a:	6013      	str	r3, [r2, #0]
 8005d5c:	e02e      	b.n	8005dbc <HAL_RCC_OscConfig+0xd4>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10c      	bne.n	8005d80 <HAL_RCC_OscConfig+0x98>
 8005d66:	4b7b      	ldr	r3, [pc, #492]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a7a      	ldr	r2, [pc, #488]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d70:	6013      	str	r3, [r2, #0]
 8005d72:	4b78      	ldr	r3, [pc, #480]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a77      	ldr	r2, [pc, #476]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	e01d      	b.n	8005dbc <HAL_RCC_OscConfig+0xd4>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d88:	d10c      	bne.n	8005da4 <HAL_RCC_OscConfig+0xbc>
 8005d8a:	4b72      	ldr	r3, [pc, #456]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a71      	ldr	r2, [pc, #452]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	4b6f      	ldr	r3, [pc, #444]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a6e      	ldr	r2, [pc, #440]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005da0:	6013      	str	r3, [r2, #0]
 8005da2:	e00b      	b.n	8005dbc <HAL_RCC_OscConfig+0xd4>
 8005da4:	4b6b      	ldr	r3, [pc, #428]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a6a      	ldr	r2, [pc, #424]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dae:	6013      	str	r3, [r2, #0]
 8005db0:	4b68      	ldr	r3, [pc, #416]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a67      	ldr	r2, [pc, #412]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d013      	beq.n	8005dec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc4:	f7fd fc82 	bl	80036cc <HAL_GetTick>
 8005dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dca:	e008      	b.n	8005dde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dcc:	f7fd fc7e 	bl	80036cc <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b64      	cmp	r3, #100	; 0x64
 8005dd8:	d901      	bls.n	8005dde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e200      	b.n	80061e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dde:	4b5d      	ldr	r3, [pc, #372]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d0f0      	beq.n	8005dcc <HAL_RCC_OscConfig+0xe4>
 8005dea:	e014      	b.n	8005e16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dec:	f7fd fc6e 	bl	80036cc <HAL_GetTick>
 8005df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005df2:	e008      	b.n	8005e06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005df4:	f7fd fc6a 	bl	80036cc <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	2b64      	cmp	r3, #100	; 0x64
 8005e00:	d901      	bls.n	8005e06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e1ec      	b.n	80061e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e06:	4b53      	ldr	r3, [pc, #332]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1f0      	bne.n	8005df4 <HAL_RCC_OscConfig+0x10c>
 8005e12:	e000      	b.n	8005e16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d063      	beq.n	8005eea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e22:	4b4c      	ldr	r3, [pc, #304]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f003 030c 	and.w	r3, r3, #12
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00b      	beq.n	8005e46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005e2e:	4b49      	ldr	r3, [pc, #292]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f003 030c 	and.w	r3, r3, #12
 8005e36:	2b08      	cmp	r3, #8
 8005e38:	d11c      	bne.n	8005e74 <HAL_RCC_OscConfig+0x18c>
 8005e3a:	4b46      	ldr	r3, [pc, #280]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d116      	bne.n	8005e74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e46:	4b43      	ldr	r3, [pc, #268]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d005      	beq.n	8005e5e <HAL_RCC_OscConfig+0x176>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d001      	beq.n	8005e5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e1c0      	b.n	80061e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e5e:	4b3d      	ldr	r3, [pc, #244]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	00db      	lsls	r3, r3, #3
 8005e6c:	4939      	ldr	r1, [pc, #228]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e72:	e03a      	b.n	8005eea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d020      	beq.n	8005ebe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e7c:	4b36      	ldr	r3, [pc, #216]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005e7e:	2201      	movs	r2, #1
 8005e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e82:	f7fd fc23 	bl	80036cc <HAL_GetTick>
 8005e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e88:	e008      	b.n	8005e9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e8a:	f7fd fc1f 	bl	80036cc <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d901      	bls.n	8005e9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e1a1      	b.n	80061e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e9c:	4b2d      	ldr	r3, [pc, #180]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d0f0      	beq.n	8005e8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ea8:	4b2a      	ldr	r3, [pc, #168]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	00db      	lsls	r3, r3, #3
 8005eb6:	4927      	ldr	r1, [pc, #156]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	600b      	str	r3, [r1, #0]
 8005ebc:	e015      	b.n	8005eea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ebe:	4b26      	ldr	r3, [pc, #152]	; (8005f58 <HAL_RCC_OscConfig+0x270>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec4:	f7fd fc02 	bl	80036cc <HAL_GetTick>
 8005ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eca:	e008      	b.n	8005ede <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ecc:	f7fd fbfe 	bl	80036cc <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d901      	bls.n	8005ede <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e180      	b.n	80061e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ede:	4b1d      	ldr	r3, [pc, #116]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1f0      	bne.n	8005ecc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0308 	and.w	r3, r3, #8
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d03a      	beq.n	8005f6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d019      	beq.n	8005f32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005efe:	4b17      	ldr	r3, [pc, #92]	; (8005f5c <HAL_RCC_OscConfig+0x274>)
 8005f00:	2201      	movs	r2, #1
 8005f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f04:	f7fd fbe2 	bl	80036cc <HAL_GetTick>
 8005f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f0a:	e008      	b.n	8005f1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f0c:	f7fd fbde 	bl	80036cc <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e160      	b.n	80061e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f1e:	4b0d      	ldr	r3, [pc, #52]	; (8005f54 <HAL_RCC_OscConfig+0x26c>)
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	f003 0302 	and.w	r3, r3, #2
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d0f0      	beq.n	8005f0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005f2a:	2001      	movs	r0, #1
 8005f2c:	f000 face 	bl	80064cc <RCC_Delay>
 8005f30:	e01c      	b.n	8005f6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f32:	4b0a      	ldr	r3, [pc, #40]	; (8005f5c <HAL_RCC_OscConfig+0x274>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f38:	f7fd fbc8 	bl	80036cc <HAL_GetTick>
 8005f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f3e:	e00f      	b.n	8005f60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f40:	f7fd fbc4 	bl	80036cc <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d908      	bls.n	8005f60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e146      	b.n	80061e0 <HAL_RCC_OscConfig+0x4f8>
 8005f52:	bf00      	nop
 8005f54:	40021000 	.word	0x40021000
 8005f58:	42420000 	.word	0x42420000
 8005f5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f60:	4b92      	ldr	r3, [pc, #584]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 8005f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1e9      	bne.n	8005f40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0304 	and.w	r3, r3, #4
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f000 80a6 	beq.w	80060c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f7e:	4b8b      	ldr	r3, [pc, #556]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10d      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f8a:	4b88      	ldr	r3, [pc, #544]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	4a87      	ldr	r2, [pc, #540]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 8005f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f94:	61d3      	str	r3, [r2, #28]
 8005f96:	4b85      	ldr	r3, [pc, #532]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f9e:	60bb      	str	r3, [r7, #8]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fa6:	4b82      	ldr	r3, [pc, #520]	; (80061b0 <HAL_RCC_OscConfig+0x4c8>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d118      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fb2:	4b7f      	ldr	r3, [pc, #508]	; (80061b0 <HAL_RCC_OscConfig+0x4c8>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a7e      	ldr	r2, [pc, #504]	; (80061b0 <HAL_RCC_OscConfig+0x4c8>)
 8005fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fbe:	f7fd fb85 	bl	80036cc <HAL_GetTick>
 8005fc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fc4:	e008      	b.n	8005fd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fc6:	f7fd fb81 	bl	80036cc <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b64      	cmp	r3, #100	; 0x64
 8005fd2:	d901      	bls.n	8005fd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e103      	b.n	80061e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fd8:	4b75      	ldr	r3, [pc, #468]	; (80061b0 <HAL_RCC_OscConfig+0x4c8>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d0f0      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d106      	bne.n	8005ffa <HAL_RCC_OscConfig+0x312>
 8005fec:	4b6f      	ldr	r3, [pc, #444]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	4a6e      	ldr	r2, [pc, #440]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 8005ff2:	f043 0301 	orr.w	r3, r3, #1
 8005ff6:	6213      	str	r3, [r2, #32]
 8005ff8:	e02d      	b.n	8006056 <HAL_RCC_OscConfig+0x36e>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10c      	bne.n	800601c <HAL_RCC_OscConfig+0x334>
 8006002:	4b6a      	ldr	r3, [pc, #424]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	4a69      	ldr	r2, [pc, #420]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 8006008:	f023 0301 	bic.w	r3, r3, #1
 800600c:	6213      	str	r3, [r2, #32]
 800600e:	4b67      	ldr	r3, [pc, #412]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	4a66      	ldr	r2, [pc, #408]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 8006014:	f023 0304 	bic.w	r3, r3, #4
 8006018:	6213      	str	r3, [r2, #32]
 800601a:	e01c      	b.n	8006056 <HAL_RCC_OscConfig+0x36e>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	2b05      	cmp	r3, #5
 8006022:	d10c      	bne.n	800603e <HAL_RCC_OscConfig+0x356>
 8006024:	4b61      	ldr	r3, [pc, #388]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	4a60      	ldr	r2, [pc, #384]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 800602a:	f043 0304 	orr.w	r3, r3, #4
 800602e:	6213      	str	r3, [r2, #32]
 8006030:	4b5e      	ldr	r3, [pc, #376]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	4a5d      	ldr	r2, [pc, #372]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 8006036:	f043 0301 	orr.w	r3, r3, #1
 800603a:	6213      	str	r3, [r2, #32]
 800603c:	e00b      	b.n	8006056 <HAL_RCC_OscConfig+0x36e>
 800603e:	4b5b      	ldr	r3, [pc, #364]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	4a5a      	ldr	r2, [pc, #360]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 8006044:	f023 0301 	bic.w	r3, r3, #1
 8006048:	6213      	str	r3, [r2, #32]
 800604a:	4b58      	ldr	r3, [pc, #352]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	4a57      	ldr	r2, [pc, #348]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 8006050:	f023 0304 	bic.w	r3, r3, #4
 8006054:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d015      	beq.n	800608a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800605e:	f7fd fb35 	bl	80036cc <HAL_GetTick>
 8006062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006064:	e00a      	b.n	800607c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006066:	f7fd fb31 	bl	80036cc <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	f241 3288 	movw	r2, #5000	; 0x1388
 8006074:	4293      	cmp	r3, r2
 8006076:	d901      	bls.n	800607c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e0b1      	b.n	80061e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800607c:	4b4b      	ldr	r3, [pc, #300]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b00      	cmp	r3, #0
 8006086:	d0ee      	beq.n	8006066 <HAL_RCC_OscConfig+0x37e>
 8006088:	e014      	b.n	80060b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800608a:	f7fd fb1f 	bl	80036cc <HAL_GetTick>
 800608e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006090:	e00a      	b.n	80060a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006092:	f7fd fb1b 	bl	80036cc <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	f241 3288 	movw	r2, #5000	; 0x1388
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d901      	bls.n	80060a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e09b      	b.n	80061e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060a8:	4b40      	ldr	r3, [pc, #256]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1ee      	bne.n	8006092 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80060b4:	7dfb      	ldrb	r3, [r7, #23]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d105      	bne.n	80060c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060ba:	4b3c      	ldr	r3, [pc, #240]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	4a3b      	ldr	r2, [pc, #236]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 80060c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 8087 	beq.w	80061de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060d0:	4b36      	ldr	r3, [pc, #216]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f003 030c 	and.w	r3, r3, #12
 80060d8:	2b08      	cmp	r3, #8
 80060da:	d061      	beq.n	80061a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	69db      	ldr	r3, [r3, #28]
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d146      	bne.n	8006172 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060e4:	4b33      	ldr	r3, [pc, #204]	; (80061b4 <HAL_RCC_OscConfig+0x4cc>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ea:	f7fd faef 	bl	80036cc <HAL_GetTick>
 80060ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060f0:	e008      	b.n	8006104 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060f2:	f7fd faeb 	bl	80036cc <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d901      	bls.n	8006104 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e06d      	b.n	80061e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006104:	4b29      	ldr	r3, [pc, #164]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1f0      	bne.n	80060f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006118:	d108      	bne.n	800612c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800611a:	4b24      	ldr	r3, [pc, #144]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	4921      	ldr	r1, [pc, #132]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 8006128:	4313      	orrs	r3, r2
 800612a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800612c:	4b1f      	ldr	r3, [pc, #124]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a19      	ldr	r1, [r3, #32]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613c:	430b      	orrs	r3, r1
 800613e:	491b      	ldr	r1, [pc, #108]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 8006140:	4313      	orrs	r3, r2
 8006142:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006144:	4b1b      	ldr	r3, [pc, #108]	; (80061b4 <HAL_RCC_OscConfig+0x4cc>)
 8006146:	2201      	movs	r2, #1
 8006148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800614a:	f7fd fabf 	bl	80036cc <HAL_GetTick>
 800614e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006150:	e008      	b.n	8006164 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006152:	f7fd fabb 	bl	80036cc <HAL_GetTick>
 8006156:	4602      	mov	r2, r0
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	2b02      	cmp	r3, #2
 800615e:	d901      	bls.n	8006164 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e03d      	b.n	80061e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006164:	4b11      	ldr	r3, [pc, #68]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d0f0      	beq.n	8006152 <HAL_RCC_OscConfig+0x46a>
 8006170:	e035      	b.n	80061de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006172:	4b10      	ldr	r3, [pc, #64]	; (80061b4 <HAL_RCC_OscConfig+0x4cc>)
 8006174:	2200      	movs	r2, #0
 8006176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006178:	f7fd faa8 	bl	80036cc <HAL_GetTick>
 800617c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800617e:	e008      	b.n	8006192 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006180:	f7fd faa4 	bl	80036cc <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b02      	cmp	r3, #2
 800618c:	d901      	bls.n	8006192 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e026      	b.n	80061e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006192:	4b06      	ldr	r3, [pc, #24]	; (80061ac <HAL_RCC_OscConfig+0x4c4>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1f0      	bne.n	8006180 <HAL_RCC_OscConfig+0x498>
 800619e:	e01e      	b.n	80061de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	69db      	ldr	r3, [r3, #28]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d107      	bne.n	80061b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e019      	b.n	80061e0 <HAL_RCC_OscConfig+0x4f8>
 80061ac:	40021000 	.word	0x40021000
 80061b0:	40007000 	.word	0x40007000
 80061b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80061b8:	4b0b      	ldr	r3, [pc, #44]	; (80061e8 <HAL_RCC_OscConfig+0x500>)
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d106      	bne.n	80061da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d001      	beq.n	80061de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e000      	b.n	80061e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3718      	adds	r7, #24
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	40021000 	.word	0x40021000

080061ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e0d0      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006200:	4b6a      	ldr	r3, [pc, #424]	; (80063ac <HAL_RCC_ClockConfig+0x1c0>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0307 	and.w	r3, r3, #7
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	429a      	cmp	r2, r3
 800620c:	d910      	bls.n	8006230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800620e:	4b67      	ldr	r3, [pc, #412]	; (80063ac <HAL_RCC_ClockConfig+0x1c0>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f023 0207 	bic.w	r2, r3, #7
 8006216:	4965      	ldr	r1, [pc, #404]	; (80063ac <HAL_RCC_ClockConfig+0x1c0>)
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	4313      	orrs	r3, r2
 800621c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800621e:	4b63      	ldr	r3, [pc, #396]	; (80063ac <HAL_RCC_ClockConfig+0x1c0>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0307 	and.w	r3, r3, #7
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	429a      	cmp	r2, r3
 800622a:	d001      	beq.n	8006230 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e0b8      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0302 	and.w	r3, r3, #2
 8006238:	2b00      	cmp	r3, #0
 800623a:	d020      	beq.n	800627e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0304 	and.w	r3, r3, #4
 8006244:	2b00      	cmp	r3, #0
 8006246:	d005      	beq.n	8006254 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006248:	4b59      	ldr	r3, [pc, #356]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	4a58      	ldr	r2, [pc, #352]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 800624e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006252:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0308 	and.w	r3, r3, #8
 800625c:	2b00      	cmp	r3, #0
 800625e:	d005      	beq.n	800626c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006260:	4b53      	ldr	r3, [pc, #332]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	4a52      	ldr	r2, [pc, #328]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006266:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800626a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800626c:	4b50      	ldr	r3, [pc, #320]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	494d      	ldr	r1, [pc, #308]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 800627a:	4313      	orrs	r3, r2
 800627c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d040      	beq.n	800630c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d107      	bne.n	80062a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006292:	4b47      	ldr	r3, [pc, #284]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d115      	bne.n	80062ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e07f      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d107      	bne.n	80062ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062aa:	4b41      	ldr	r3, [pc, #260]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d109      	bne.n	80062ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e073      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062ba:	4b3d      	ldr	r3, [pc, #244]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e06b      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062ca:	4b39      	ldr	r3, [pc, #228]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f023 0203 	bic.w	r2, r3, #3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	4936      	ldr	r1, [pc, #216]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062dc:	f7fd f9f6 	bl	80036cc <HAL_GetTick>
 80062e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062e2:	e00a      	b.n	80062fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062e4:	f7fd f9f2 	bl	80036cc <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d901      	bls.n	80062fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e053      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062fa:	4b2d      	ldr	r3, [pc, #180]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f003 020c 	and.w	r2, r3, #12
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	429a      	cmp	r2, r3
 800630a:	d1eb      	bne.n	80062e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800630c:	4b27      	ldr	r3, [pc, #156]	; (80063ac <HAL_RCC_ClockConfig+0x1c0>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0307 	and.w	r3, r3, #7
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	429a      	cmp	r2, r3
 8006318:	d210      	bcs.n	800633c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800631a:	4b24      	ldr	r3, [pc, #144]	; (80063ac <HAL_RCC_ClockConfig+0x1c0>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f023 0207 	bic.w	r2, r3, #7
 8006322:	4922      	ldr	r1, [pc, #136]	; (80063ac <HAL_RCC_ClockConfig+0x1c0>)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	4313      	orrs	r3, r2
 8006328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800632a:	4b20      	ldr	r3, [pc, #128]	; (80063ac <HAL_RCC_ClockConfig+0x1c0>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0307 	and.w	r3, r3, #7
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	429a      	cmp	r2, r3
 8006336:	d001      	beq.n	800633c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e032      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0304 	and.w	r3, r3, #4
 8006344:	2b00      	cmp	r3, #0
 8006346:	d008      	beq.n	800635a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006348:	4b19      	ldr	r3, [pc, #100]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	4916      	ldr	r1, [pc, #88]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006356:	4313      	orrs	r3, r2
 8006358:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0308 	and.w	r3, r3, #8
 8006362:	2b00      	cmp	r3, #0
 8006364:	d009      	beq.n	800637a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006366:	4b12      	ldr	r3, [pc, #72]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	490e      	ldr	r1, [pc, #56]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006376:	4313      	orrs	r3, r2
 8006378:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800637a:	f000 f821 	bl	80063c0 <HAL_RCC_GetSysClockFreq>
 800637e:	4602      	mov	r2, r0
 8006380:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	091b      	lsrs	r3, r3, #4
 8006386:	f003 030f 	and.w	r3, r3, #15
 800638a:	490a      	ldr	r1, [pc, #40]	; (80063b4 <HAL_RCC_ClockConfig+0x1c8>)
 800638c:	5ccb      	ldrb	r3, [r1, r3]
 800638e:	fa22 f303 	lsr.w	r3, r2, r3
 8006392:	4a09      	ldr	r2, [pc, #36]	; (80063b8 <HAL_RCC_ClockConfig+0x1cc>)
 8006394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006396:	4b09      	ldr	r3, [pc, #36]	; (80063bc <HAL_RCC_ClockConfig+0x1d0>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4618      	mov	r0, r3
 800639c:	f7fd f954 	bl	8003648 <HAL_InitTick>

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	40022000 	.word	0x40022000
 80063b0:	40021000 	.word	0x40021000
 80063b4:	08010704 	.word	0x08010704
 80063b8:	20000004 	.word	0x20000004
 80063bc:	20000008 	.word	0x20000008

080063c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b087      	sub	sp, #28
 80063c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80063c6:	2300      	movs	r3, #0
 80063c8:	60fb      	str	r3, [r7, #12]
 80063ca:	2300      	movs	r3, #0
 80063cc:	60bb      	str	r3, [r7, #8]
 80063ce:	2300      	movs	r3, #0
 80063d0:	617b      	str	r3, [r7, #20]
 80063d2:	2300      	movs	r3, #0
 80063d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80063da:	4b1e      	ldr	r3, [pc, #120]	; (8006454 <HAL_RCC_GetSysClockFreq+0x94>)
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f003 030c 	and.w	r3, r3, #12
 80063e6:	2b04      	cmp	r3, #4
 80063e8:	d002      	beq.n	80063f0 <HAL_RCC_GetSysClockFreq+0x30>
 80063ea:	2b08      	cmp	r3, #8
 80063ec:	d003      	beq.n	80063f6 <HAL_RCC_GetSysClockFreq+0x36>
 80063ee:	e027      	b.n	8006440 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80063f0:	4b19      	ldr	r3, [pc, #100]	; (8006458 <HAL_RCC_GetSysClockFreq+0x98>)
 80063f2:	613b      	str	r3, [r7, #16]
      break;
 80063f4:	e027      	b.n	8006446 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	0c9b      	lsrs	r3, r3, #18
 80063fa:	f003 030f 	and.w	r3, r3, #15
 80063fe:	4a17      	ldr	r2, [pc, #92]	; (800645c <HAL_RCC_GetSysClockFreq+0x9c>)
 8006400:	5cd3      	ldrb	r3, [r2, r3]
 8006402:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d010      	beq.n	8006430 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800640e:	4b11      	ldr	r3, [pc, #68]	; (8006454 <HAL_RCC_GetSysClockFreq+0x94>)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	0c5b      	lsrs	r3, r3, #17
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	4a11      	ldr	r2, [pc, #68]	; (8006460 <HAL_RCC_GetSysClockFreq+0xa0>)
 800641a:	5cd3      	ldrb	r3, [r2, r3]
 800641c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a0d      	ldr	r2, [pc, #52]	; (8006458 <HAL_RCC_GetSysClockFreq+0x98>)
 8006422:	fb03 f202 	mul.w	r2, r3, r2
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	fbb2 f3f3 	udiv	r3, r2, r3
 800642c:	617b      	str	r3, [r7, #20]
 800642e:	e004      	b.n	800643a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a0c      	ldr	r2, [pc, #48]	; (8006464 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006434:	fb02 f303 	mul.w	r3, r2, r3
 8006438:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	613b      	str	r3, [r7, #16]
      break;
 800643e:	e002      	b.n	8006446 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006440:	4b05      	ldr	r3, [pc, #20]	; (8006458 <HAL_RCC_GetSysClockFreq+0x98>)
 8006442:	613b      	str	r3, [r7, #16]
      break;
 8006444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006446:	693b      	ldr	r3, [r7, #16]
}
 8006448:	4618      	mov	r0, r3
 800644a:	371c      	adds	r7, #28
 800644c:	46bd      	mov	sp, r7
 800644e:	bc80      	pop	{r7}
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	40021000 	.word	0x40021000
 8006458:	007a1200 	.word	0x007a1200
 800645c:	0801071c 	.word	0x0801071c
 8006460:	0801072c 	.word	0x0801072c
 8006464:	003d0900 	.word	0x003d0900

08006468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800646c:	4b02      	ldr	r3, [pc, #8]	; (8006478 <HAL_RCC_GetHCLKFreq+0x10>)
 800646e:	681b      	ldr	r3, [r3, #0]
}
 8006470:	4618      	mov	r0, r3
 8006472:	46bd      	mov	sp, r7
 8006474:	bc80      	pop	{r7}
 8006476:	4770      	bx	lr
 8006478:	20000004 	.word	0x20000004

0800647c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006480:	f7ff fff2 	bl	8006468 <HAL_RCC_GetHCLKFreq>
 8006484:	4602      	mov	r2, r0
 8006486:	4b05      	ldr	r3, [pc, #20]	; (800649c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	0a1b      	lsrs	r3, r3, #8
 800648c:	f003 0307 	and.w	r3, r3, #7
 8006490:	4903      	ldr	r1, [pc, #12]	; (80064a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006492:	5ccb      	ldrb	r3, [r1, r3]
 8006494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006498:	4618      	mov	r0, r3
 800649a:	bd80      	pop	{r7, pc}
 800649c:	40021000 	.word	0x40021000
 80064a0:	08010714 	.word	0x08010714

080064a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80064a8:	f7ff ffde 	bl	8006468 <HAL_RCC_GetHCLKFreq>
 80064ac:	4602      	mov	r2, r0
 80064ae:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	0adb      	lsrs	r3, r3, #11
 80064b4:	f003 0307 	and.w	r3, r3, #7
 80064b8:	4903      	ldr	r1, [pc, #12]	; (80064c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064ba:	5ccb      	ldrb	r3, [r1, r3]
 80064bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	40021000 	.word	0x40021000
 80064c8:	08010714 	.word	0x08010714

080064cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80064d4:	4b0a      	ldr	r3, [pc, #40]	; (8006500 <RCC_Delay+0x34>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a0a      	ldr	r2, [pc, #40]	; (8006504 <RCC_Delay+0x38>)
 80064da:	fba2 2303 	umull	r2, r3, r2, r3
 80064de:	0a5b      	lsrs	r3, r3, #9
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	fb02 f303 	mul.w	r3, r2, r3
 80064e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80064e8:	bf00      	nop
  }
  while (Delay --);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	1e5a      	subs	r2, r3, #1
 80064ee:	60fa      	str	r2, [r7, #12]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1f9      	bne.n	80064e8 <RCC_Delay+0x1c>
}
 80064f4:	bf00      	nop
 80064f6:	bf00      	nop
 80064f8:	3714      	adds	r7, #20
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bc80      	pop	{r7}
 80064fe:	4770      	bx	lr
 8006500:	20000004 	.word	0x20000004
 8006504:	10624dd3 	.word	0x10624dd3

08006508 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006510:	2300      	movs	r3, #0
 8006512:	613b      	str	r3, [r7, #16]
 8006514:	2300      	movs	r3, #0
 8006516:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	2b00      	cmp	r3, #0
 8006522:	d07d      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006524:	2300      	movs	r3, #0
 8006526:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006528:	4b4f      	ldr	r3, [pc, #316]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800652a:	69db      	ldr	r3, [r3, #28]
 800652c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10d      	bne.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006534:	4b4c      	ldr	r3, [pc, #304]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006536:	69db      	ldr	r3, [r3, #28]
 8006538:	4a4b      	ldr	r2, [pc, #300]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800653a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800653e:	61d3      	str	r3, [r2, #28]
 8006540:	4b49      	ldr	r3, [pc, #292]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006542:	69db      	ldr	r3, [r3, #28]
 8006544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006548:	60bb      	str	r3, [r7, #8]
 800654a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800654c:	2301      	movs	r3, #1
 800654e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006550:	4b46      	ldr	r3, [pc, #280]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006558:	2b00      	cmp	r3, #0
 800655a:	d118      	bne.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800655c:	4b43      	ldr	r3, [pc, #268]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a42      	ldr	r2, [pc, #264]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006566:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006568:	f7fd f8b0 	bl	80036cc <HAL_GetTick>
 800656c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800656e:	e008      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006570:	f7fd f8ac 	bl	80036cc <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	2b64      	cmp	r3, #100	; 0x64
 800657c:	d901      	bls.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e06d      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006582:	4b3a      	ldr	r3, [pc, #232]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0f0      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800658e:	4b36      	ldr	r3, [pc, #216]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006596:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d02e      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d027      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065ac:	4b2e      	ldr	r3, [pc, #184]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80065b6:	4b2e      	ldr	r3, [pc, #184]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80065b8:	2201      	movs	r2, #1
 80065ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80065bc:	4b2c      	ldr	r3, [pc, #176]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80065be:	2200      	movs	r2, #0
 80065c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80065c2:	4a29      	ldr	r2, [pc, #164]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d014      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d2:	f7fd f87b 	bl	80036cc <HAL_GetTick>
 80065d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065d8:	e00a      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065da:	f7fd f877 	bl	80036cc <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d901      	bls.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e036      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065f0:	4b1d      	ldr	r3, [pc, #116]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d0ee      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065fc:	4b1a      	ldr	r3, [pc, #104]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	4917      	ldr	r1, [pc, #92]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800660a:	4313      	orrs	r3, r2
 800660c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800660e:	7dfb      	ldrb	r3, [r7, #23]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d105      	bne.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006614:	4b14      	ldr	r3, [pc, #80]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	4a13      	ldr	r2, [pc, #76]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800661a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800661e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b00      	cmp	r3, #0
 800662a:	d008      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800662c:	4b0e      	ldr	r3, [pc, #56]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	490b      	ldr	r1, [pc, #44]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800663a:	4313      	orrs	r3, r2
 800663c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0310 	and.w	r3, r3, #16
 8006646:	2b00      	cmp	r3, #0
 8006648:	d008      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800664a:	4b07      	ldr	r3, [pc, #28]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	4904      	ldr	r1, [pc, #16]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006658:	4313      	orrs	r3, r2
 800665a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	40021000 	.word	0x40021000
 800666c:	40007000 	.word	0x40007000
 8006670:	42420440 	.word	0x42420440

08006674 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b088      	sub	sp, #32
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800667c:	2300      	movs	r3, #0
 800667e:	617b      	str	r3, [r7, #20]
 8006680:	2300      	movs	r3, #0
 8006682:	61fb      	str	r3, [r7, #28]
 8006684:	2300      	movs	r3, #0
 8006686:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006688:	2300      	movs	r3, #0
 800668a:	60fb      	str	r3, [r7, #12]
 800668c:	2300      	movs	r3, #0
 800668e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	3b01      	subs	r3, #1
 8006694:	2b0f      	cmp	r3, #15
 8006696:	f200 80af 	bhi.w	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 800669a:	a201      	add	r2, pc, #4	; (adr r2, 80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800669c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a0:	08006777 	.word	0x08006777
 80066a4:	080067dd 	.word	0x080067dd
 80066a8:	080067f9 	.word	0x080067f9
 80066ac:	08006767 	.word	0x08006767
 80066b0:	080067f9 	.word	0x080067f9
 80066b4:	080067f9 	.word	0x080067f9
 80066b8:	080067f9 	.word	0x080067f9
 80066bc:	0800676f 	.word	0x0800676f
 80066c0:	080067f9 	.word	0x080067f9
 80066c4:	080067f9 	.word	0x080067f9
 80066c8:	080067f9 	.word	0x080067f9
 80066cc:	080067f9 	.word	0x080067f9
 80066d0:	080067f9 	.word	0x080067f9
 80066d4:	080067f9 	.word	0x080067f9
 80066d8:	080067f9 	.word	0x080067f9
 80066dc:	080066e1 	.word	0x080066e1
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80066e0:	4b4a      	ldr	r3, [pc, #296]	; (800680c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80066e6:	4b49      	ldr	r3, [pc, #292]	; (800680c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f000 8084 	beq.w	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	0c9b      	lsrs	r3, r3, #18
 80066f8:	f003 030f 	and.w	r3, r3, #15
 80066fc:	4a44      	ldr	r2, [pc, #272]	; (8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 80066fe:	5cd3      	ldrb	r3, [r2, r3]
 8006700:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d015      	beq.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800670c:	4b3f      	ldr	r3, [pc, #252]	; (800680c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	0c5b      	lsrs	r3, r3, #17
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	4a3f      	ldr	r2, [pc, #252]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8006718:	5cd3      	ldrb	r3, [r2, r3]
 800671a:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00d      	beq.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006726:	4a3c      	ldr	r2, [pc, #240]	; (8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	fbb2 f2f3 	udiv	r2, r2, r3
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	fb02 f303 	mul.w	r3, r2, r3
 8006734:	61fb      	str	r3, [r7, #28]
 8006736:	e004      	b.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	4a38      	ldr	r2, [pc, #224]	; (800681c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 800673c:	fb02 f303 	mul.w	r3, r2, r3
 8006740:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006742:	4b32      	ldr	r3, [pc, #200]	; (800680c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800674a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800674e:	d102      	bne.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8006754:	e052      	b.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	005b      	lsls	r3, r3, #1
 800675a:	4a31      	ldr	r2, [pc, #196]	; (8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 800675c:	fba2 2303 	umull	r2, r3, r2, r3
 8006760:	085b      	lsrs	r3, r3, #1
 8006762:	61bb      	str	r3, [r7, #24]
      break;
 8006764:	e04a      	b.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8006766:	f7ff fe2b 	bl	80063c0 <HAL_RCC_GetSysClockFreq>
 800676a:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800676c:	e049      	b.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800676e:	f7ff fe27 	bl	80063c0 <HAL_RCC_GetSysClockFreq>
 8006772:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8006774:	e045      	b.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8006776:	4b25      	ldr	r3, [pc, #148]	; (800680c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006786:	d108      	bne.n	800679a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8006792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006796:	61bb      	str	r3, [r7, #24]
 8006798:	e01f      	b.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a4:	d109      	bne.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80067a6:	4b19      	ldr	r3, [pc, #100]	; (800680c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	f003 0302 	and.w	r3, r3, #2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 80067b2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80067b6:	61bb      	str	r3, [r7, #24]
 80067b8:	e00f      	b.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067c4:	d11c      	bne.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80067c6:	4b11      	ldr	r3, [pc, #68]	; (800680c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d016      	beq.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 80067d2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80067d6:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80067d8:	e012      	b.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80067da:	e011      	b.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80067dc:	f7ff fe62 	bl	80064a4 <HAL_RCC_GetPCLK2Freq>
 80067e0:	4602      	mov	r2, r0
 80067e2:	4b0a      	ldr	r3, [pc, #40]	; (800680c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	0b9b      	lsrs	r3, r3, #14
 80067e8:	f003 0303 	and.w	r3, r3, #3
 80067ec:	3301      	adds	r3, #1
 80067ee:	005b      	lsls	r3, r3, #1
 80067f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f4:	61bb      	str	r3, [r7, #24]
      break;
 80067f6:	e004      	b.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 80067f8:	bf00      	nop
 80067fa:	e002      	b.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80067fc:	bf00      	nop
 80067fe:	e000      	b.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8006800:	bf00      	nop
    }
  }
  return (frequency);
 8006802:	69bb      	ldr	r3, [r7, #24]
}
 8006804:	4618      	mov	r0, r3
 8006806:	3720      	adds	r7, #32
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	40021000 	.word	0x40021000
 8006810:	08010730 	.word	0x08010730
 8006814:	08010740 	.word	0x08010740
 8006818:	007a1200 	.word	0x007a1200
 800681c:	003d0900 	.word	0x003d0900
 8006820:	aaaaaaab 	.word	0xaaaaaaab

08006824 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800682c:	2300      	movs	r3, #0
 800682e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e07a      	b.n	8006930 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	7c5b      	ldrb	r3, [r3, #17]
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b00      	cmp	r3, #0
 8006842:	d105      	bne.n	8006850 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f7fc fa82 	bl	8002d54 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2202      	movs	r2, #2
 8006854:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 faea 	bl	8006e30 <HAL_RTC_WaitForSynchro>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d004      	beq.n	800686c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2204      	movs	r2, #4
 8006866:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e061      	b.n	8006930 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fba3 	bl	8006fb8 <RTC_EnterInitMode>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d004      	beq.n	8006882 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2204      	movs	r2, #4
 800687c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e056      	b.n	8006930 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0207 	bic.w	r2, r2, #7
 8006890:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d005      	beq.n	80068a6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800689a:	4b27      	ldr	r3, [pc, #156]	; (8006938 <HAL_RTC_Init+0x114>)
 800689c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689e:	4a26      	ldr	r2, [pc, #152]	; (8006938 <HAL_RTC_Init+0x114>)
 80068a0:	f023 0301 	bic.w	r3, r3, #1
 80068a4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80068a6:	4b24      	ldr	r3, [pc, #144]	; (8006938 <HAL_RTC_Init+0x114>)
 80068a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068aa:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	4921      	ldr	r1, [pc, #132]	; (8006938 <HAL_RTC_Init+0x114>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c0:	d003      	beq.n	80068ca <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	e00e      	b.n	80068e8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80068ca:	2001      	movs	r0, #1
 80068cc:	f7ff fed2 	bl	8006674 <HAL_RCCEx_GetPeriphCLKFreq>
 80068d0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d104      	bne.n	80068e2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2204      	movs	r2, #4
 80068dc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e026      	b.n	8006930 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3b01      	subs	r3, #1
 80068e6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	0c1a      	lsrs	r2, r3, #16
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f002 020f 	and.w	r2, r2, #15
 80068f4:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	b292      	uxth	r2, r2
 80068fe:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fb81 	bl	8007008 <RTC_ExitInitMode>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d004      	beq.n	8006916 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2204      	movs	r2, #4
 8006910:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e00c      	b.n	8006930 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800692e:	2300      	movs	r3, #0
  }
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	40006c00 	.word	0x40006c00

0800693c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800693c:	b590      	push	{r4, r7, lr}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	617b      	str	r3, [r7, #20]
 800694c:	2300      	movs	r3, #0
 800694e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d002      	beq.n	800695c <HAL_RTC_SetTime+0x20>
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d101      	bne.n	8006960 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e080      	b.n	8006a62 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	7c1b      	ldrb	r3, [r3, #16]
 8006964:	2b01      	cmp	r3, #1
 8006966:	d101      	bne.n	800696c <HAL_RTC_SetTime+0x30>
 8006968:	2302      	movs	r3, #2
 800696a:	e07a      	b.n	8006a62 <HAL_RTC_SetTime+0x126>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2201      	movs	r2, #1
 8006970:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2202      	movs	r2, #2
 8006976:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d113      	bne.n	80069a6 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	461a      	mov	r2, r3
 8006984:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006988:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	785b      	ldrb	r3, [r3, #1]
 8006990:	4619      	mov	r1, r3
 8006992:	460b      	mov	r3, r1
 8006994:	011b      	lsls	r3, r3, #4
 8006996:	1a5b      	subs	r3, r3, r1
 8006998:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800699a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80069a0:	4413      	add	r3, r2
 80069a2:	617b      	str	r3, [r7, #20]
 80069a4:	e01e      	b.n	80069e4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 fb71 	bl	8007092 <RTC_Bcd2ToByte>
 80069b0:	4603      	mov	r3, r0
 80069b2:	461a      	mov	r2, r3
 80069b4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80069b8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	785b      	ldrb	r3, [r3, #1]
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 fb66 	bl	8007092 <RTC_Bcd2ToByte>
 80069c6:	4603      	mov	r3, r0
 80069c8:	461a      	mov	r2, r3
 80069ca:	4613      	mov	r3, r2
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	1a9b      	subs	r3, r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80069d2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	789b      	ldrb	r3, [r3, #2]
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 fb5a 	bl	8007092 <RTC_Bcd2ToByte>
 80069de:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80069e0:	4423      	add	r3, r4
 80069e2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80069e4:	6979      	ldr	r1, [r7, #20]
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f000 fa7f 	bl	8006eea <RTC_WriteTimeCounter>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d007      	beq.n	8006a02 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2204      	movs	r2, #4
 80069f6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e02f      	b.n	8006a62 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 0205 	bic.w	r2, r2, #5
 8006a10:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f000 fa90 	bl	8006f38 <RTC_ReadAlarmCounter>
 8006a18:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a20:	d018      	beq.n	8006a54 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d214      	bcs.n	8006a54 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8006a30:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006a34:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006a36:	6939      	ldr	r1, [r7, #16]
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f000 fa96 	bl	8006f6a <RTC_WriteAlarmCounter>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d007      	beq.n	8006a54 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2204      	movs	r2, #4
 8006a48:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e006      	b.n	8006a62 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2201      	movs	r2, #1
 8006a58:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8006a60:	2300      	movs	r3, #0
  }
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	371c      	adds	r7, #28
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd90      	pop	{r4, r7, pc}
	...

08006a6c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b088      	sub	sp, #32
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	61bb      	str	r3, [r7, #24]
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	61fb      	str	r3, [r7, #28]
 8006a80:	2300      	movs	r3, #0
 8006a82:	617b      	str	r3, [r7, #20]
 8006a84:	2300      	movs	r3, #0
 8006a86:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d002      	beq.n	8006a94 <HAL_RTC_GetTime+0x28>
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d101      	bne.n	8006a98 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e0b5      	b.n	8006c04 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f003 0304 	and.w	r3, r3, #4
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e0ac      	b.n	8006c04 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 f9ed 	bl	8006e8a <RTC_ReadTimeCounter>
 8006ab0:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	4a55      	ldr	r2, [pc, #340]	; (8006c0c <HAL_RTC_GetTime+0x1a0>)
 8006ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aba:	0adb      	lsrs	r3, r3, #11
 8006abc:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8006abe:	69ba      	ldr	r2, [r7, #24]
 8006ac0:	4b52      	ldr	r3, [pc, #328]	; (8006c0c <HAL_RTC_GetTime+0x1a0>)
 8006ac2:	fba3 1302 	umull	r1, r3, r3, r2
 8006ac6:	0adb      	lsrs	r3, r3, #11
 8006ac8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006acc:	fb01 f303 	mul.w	r3, r1, r3
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	4a4f      	ldr	r2, [pc, #316]	; (8006c10 <HAL_RTC_GetTime+0x1a4>)
 8006ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad8:	095b      	lsrs	r3, r3, #5
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	4a4a      	ldr	r2, [pc, #296]	; (8006c0c <HAL_RTC_GetTime+0x1a0>)
 8006ae4:	fba2 1203 	umull	r1, r2, r2, r3
 8006ae8:	0ad2      	lsrs	r2, r2, #11
 8006aea:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006aee:	fb01 f202 	mul.w	r2, r1, r2
 8006af2:	1a9a      	subs	r2, r3, r2
 8006af4:	4b46      	ldr	r3, [pc, #280]	; (8006c10 <HAL_RTC_GetTime+0x1a4>)
 8006af6:	fba3 1302 	umull	r1, r3, r3, r2
 8006afa:	0959      	lsrs	r1, r3, #5
 8006afc:	460b      	mov	r3, r1
 8006afe:	011b      	lsls	r3, r3, #4
 8006b00:	1a5b      	subs	r3, r3, r1
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	1ad1      	subs	r1, r2, r3
 8006b06:	b2ca      	uxtb	r2, r1
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	2b17      	cmp	r3, #23
 8006b10:	d955      	bls.n	8006bbe <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	4a3f      	ldr	r2, [pc, #252]	; (8006c14 <HAL_RTC_GetTime+0x1a8>)
 8006b16:	fba2 2303 	umull	r2, r3, r2, r3
 8006b1a:	091b      	lsrs	r3, r3, #4
 8006b1c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8006b1e:	6939      	ldr	r1, [r7, #16]
 8006b20:	4b3c      	ldr	r3, [pc, #240]	; (8006c14 <HAL_RTC_GetTime+0x1a8>)
 8006b22:	fba3 2301 	umull	r2, r3, r3, r1
 8006b26:	091a      	lsrs	r2, r3, #4
 8006b28:	4613      	mov	r3, r2
 8006b2a:	005b      	lsls	r3, r3, #1
 8006b2c:	4413      	add	r3, r2
 8006b2e:	00db      	lsls	r3, r3, #3
 8006b30:	1aca      	subs	r2, r1, r3
 8006b32:	b2d2      	uxtb	r2, r2
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 f9fd 	bl	8006f38 <RTC_ReadAlarmCounter>
 8006b3e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b46:	d008      	beq.n	8006b5a <HAL_RTC_GetTime+0xee>
 8006b48:	69fa      	ldr	r2, [r7, #28]
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d904      	bls.n	8006b5a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8006b50:	69fa      	ldr	r2, [r7, #28]
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	61fb      	str	r3, [r7, #28]
 8006b58:	e002      	b.n	8006b60 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8006b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b5e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	4a2d      	ldr	r2, [pc, #180]	; (8006c18 <HAL_RTC_GetTime+0x1ac>)
 8006b64:	fb02 f303 	mul.w	r3, r2, r3
 8006b68:	69ba      	ldr	r2, [r7, #24]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006b6e:	69b9      	ldr	r1, [r7, #24]
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f000 f9ba 	bl	8006eea <RTC_WriteTimeCounter>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d001      	beq.n	8006b80 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e041      	b.n	8006c04 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b86:	d00c      	beq.n	8006ba2 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8006b88:	69fa      	ldr	r2, [r7, #28]
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006b90:	69f9      	ldr	r1, [r7, #28]
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 f9e9 	bl	8006f6a <RTC_WriteAlarmCounter>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00a      	beq.n	8006bb4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e030      	b.n	8006c04 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006ba2:	69f9      	ldr	r1, [r7, #28]
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f000 f9e0 	bl	8006f6a <RTC_WriteAlarmCounter>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d001      	beq.n	8006bb4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e027      	b.n	8006c04 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8006bb4:	6979      	ldr	r1, [r7, #20]
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f000 fa88 	bl	80070cc <RTC_DateUpdate>
 8006bbc:	e003      	b.n	8006bc6 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	b2da      	uxtb	r2, r3
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d01a      	beq.n	8006c02 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 fa41 	bl	8007058 <RTC_ByteToBcd2>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	461a      	mov	r2, r3
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	785b      	ldrb	r3, [r3, #1]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 fa38 	bl	8007058 <RTC_ByteToBcd2>
 8006be8:	4603      	mov	r3, r0
 8006bea:	461a      	mov	r2, r3
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	789b      	ldrb	r3, [r3, #2]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 fa2f 	bl	8007058 <RTC_ByteToBcd2>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3720      	adds	r7, #32
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	91a2b3c5 	.word	0x91a2b3c5
 8006c10:	88888889 	.word	0x88888889
 8006c14:	aaaaaaab 	.word	0xaaaaaaab
 8006c18:	00015180 	.word	0x00015180

08006c1c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b088      	sub	sp, #32
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	61fb      	str	r3, [r7, #28]
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	61bb      	str	r3, [r7, #24]
 8006c30:	2300      	movs	r3, #0
 8006c32:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d002      	beq.n	8006c40 <HAL_RTC_SetDate+0x24>
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e097      	b.n	8006d74 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	7c1b      	ldrb	r3, [r3, #16]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d101      	bne.n	8006c50 <HAL_RTC_SetDate+0x34>
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	e091      	b.n	8006d74 <HAL_RTC_SetDate+0x158>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2201      	movs	r2, #1
 8006c54:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2202      	movs	r2, #2
 8006c5a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10c      	bne.n	8006c7c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	78da      	ldrb	r2, [r3, #3]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	785a      	ldrb	r2, [r3, #1]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	789a      	ldrb	r2, [r3, #2]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	739a      	strb	r2, [r3, #14]
 8006c7a:	e01a      	b.n	8006cb2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	78db      	ldrb	r3, [r3, #3]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 fa06 	bl	8007092 <RTC_Bcd2ToByte>
 8006c86:	4603      	mov	r3, r0
 8006c88:	461a      	mov	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	785b      	ldrb	r3, [r3, #1]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 f9fd 	bl	8007092 <RTC_Bcd2ToByte>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	789b      	ldrb	r3, [r3, #2]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 f9f4 	bl	8007092 <RTC_Bcd2ToByte>
 8006caa:	4603      	mov	r3, r0
 8006cac:	461a      	mov	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	7bdb      	ldrb	r3, [r3, #15]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	7b59      	ldrb	r1, [r3, #13]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	7b9b      	ldrb	r3, [r3, #14]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	f000 fadf 	bl	8007284 <RTC_WeekDayNum>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	461a      	mov	r2, r3
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	7b1a      	ldrb	r2, [r3, #12]
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 f8d7 	bl	8006e8a <RTC_ReadTimeCounter>
 8006cdc:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	4a26      	ldr	r2, [pc, #152]	; (8006d7c <HAL_RTC_SetDate+0x160>)
 8006ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce6:	0adb      	lsrs	r3, r3, #11
 8006ce8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2b18      	cmp	r3, #24
 8006cee:	d93a      	bls.n	8006d66 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	4a23      	ldr	r2, [pc, #140]	; (8006d80 <HAL_RTC_SetDate+0x164>)
 8006cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf8:	091b      	lsrs	r3, r3, #4
 8006cfa:	4a22      	ldr	r2, [pc, #136]	; (8006d84 <HAL_RTC_SetDate+0x168>)
 8006cfc:	fb02 f303 	mul.w	r3, r2, r3
 8006d00:	69fa      	ldr	r2, [r7, #28]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006d06:	69f9      	ldr	r1, [r7, #28]
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f000 f8ee 	bl	8006eea <RTC_WriteTimeCounter>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d007      	beq.n	8006d24 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2204      	movs	r2, #4
 8006d18:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e027      	b.n	8006d74 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f000 f907 	bl	8006f38 <RTC_ReadAlarmCounter>
 8006d2a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d32:	d018      	beq.n	8006d66 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8006d34:	69ba      	ldr	r2, [r7, #24]
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d214      	bcs.n	8006d66 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8006d42:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006d46:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006d48:	69b9      	ldr	r1, [r7, #24]
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f000 f90d 	bl	8006f6a <RTC_WriteAlarmCounter>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d007      	beq.n	8006d66 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2204      	movs	r2, #4
 8006d5a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e006      	b.n	8006d74 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3720      	adds	r7, #32
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	91a2b3c5 	.word	0x91a2b3c5
 8006d80:	aaaaaaab 	.word	0xaaaaaaab
 8006d84:	00015180 	.word	0x00015180

08006d88 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8006d94:	f107 0314 	add.w	r3, r7, #20
 8006d98:	2100      	movs	r1, #0
 8006d9a:	460a      	mov	r2, r1
 8006d9c:	801a      	strh	r2, [r3, #0]
 8006d9e:	460a      	mov	r2, r1
 8006da0:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d002      	beq.n	8006dae <HAL_RTC_GetDate+0x26>
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e03a      	b.n	8006e28 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8006db2:	f107 0314 	add.w	r3, r7, #20
 8006db6:	2200      	movs	r2, #0
 8006db8:	4619      	mov	r1, r3
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f7ff fe56 	bl	8006a6c <HAL_RTC_GetTime>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e02e      	b.n	8006e28 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	7b1a      	ldrb	r2, [r3, #12]
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	7bda      	ldrb	r2, [r3, #15]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	7b5a      	ldrb	r2, [r3, #13]
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	7b9a      	ldrb	r2, [r3, #14]
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d01a      	beq.n	8006e26 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	78db      	ldrb	r3, [r3, #3]
 8006df4:	4618      	mov	r0, r3
 8006df6:	f000 f92f 	bl	8007058 <RTC_ByteToBcd2>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	785b      	ldrb	r3, [r3, #1]
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 f926 	bl	8007058 <RTC_ByteToBcd2>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	461a      	mov	r2, r3
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	789b      	ldrb	r3, [r3, #2]
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f000 f91d 	bl	8007058 <RTC_ByteToBcd2>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	461a      	mov	r2, r3
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3718      	adds	r7, #24
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e01d      	b.n	8006e82 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f022 0208 	bic.w	r2, r2, #8
 8006e54:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006e56:	f7fc fc39 	bl	80036cc <HAL_GetTick>
 8006e5a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006e5c:	e009      	b.n	8006e72 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006e5e:	f7fc fc35 	bl	80036cc <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e6c:	d901      	bls.n	8006e72 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e007      	b.n	8006e82 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f003 0308 	and.w	r3, r3, #8
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d0ee      	beq.n	8006e5e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b087      	sub	sp, #28
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	827b      	strh	r3, [r7, #18]
 8006e96:	2300      	movs	r3, #0
 8006e98:	823b      	strh	r3, [r7, #16]
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	69db      	ldr	r3, [r3, #28]
 8006eb0:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8006eba:	8a7a      	ldrh	r2, [r7, #18]
 8006ebc:	8a3b      	ldrh	r3, [r7, #16]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d008      	beq.n	8006ed4 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8006ec2:	8a3b      	ldrh	r3, [r7, #16]
 8006ec4:	041a      	lsls	r2, r3, #16
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	69db      	ldr	r3, [r3, #28]
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	617b      	str	r3, [r7, #20]
 8006ed2:	e004      	b.n	8006ede <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8006ed4:	8a7b      	ldrh	r3, [r7, #18]
 8006ed6:	041a      	lsls	r2, r3, #16
 8006ed8:	89fb      	ldrh	r3, [r7, #14]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8006ede:	697b      	ldr	r3, [r7, #20]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	371c      	adds	r7, #28
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bc80      	pop	{r7}
 8006ee8:	4770      	bx	lr

08006eea <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b084      	sub	sp, #16
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
 8006ef2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 f85d 	bl	8006fb8 <RTC_EnterInitMode>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d002      	beq.n	8006f0a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	73fb      	strb	r3, [r7, #15]
 8006f08:	e011      	b.n	8006f2e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	0c12      	lsrs	r2, r2, #16
 8006f12:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	683a      	ldr	r2, [r7, #0]
 8006f1a:	b292      	uxth	r2, r2
 8006f1c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f872 	bl	8007008 <RTC_ExitInitMode>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8006f40:	2300      	movs	r3, #0
 8006f42:	81fb      	strh	r3, [r7, #14]
 8006f44:	2300      	movs	r3, #0
 8006f46:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f56:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8006f58:	89fb      	ldrh	r3, [r7, #14]
 8006f5a:	041a      	lsls	r2, r3, #16
 8006f5c:	89bb      	ldrh	r3, [r7, #12]
 8006f5e:	4313      	orrs	r3, r2
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bc80      	pop	{r7}
 8006f68:	4770      	bx	lr

08006f6a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b084      	sub	sp, #16
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
 8006f72:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f81d 	bl	8006fb8 <RTC_EnterInitMode>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d002      	beq.n	8006f8a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	73fb      	strb	r3, [r7, #15]
 8006f88:	e011      	b.n	8006fae <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	683a      	ldr	r2, [r7, #0]
 8006f90:	0c12      	lsrs	r2, r2, #16
 8006f92:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	683a      	ldr	r2, [r7, #0]
 8006f9a:	b292      	uxth	r2, r2
 8006f9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f832 	bl	8007008 <RTC_ExitInitMode>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8006fc4:	f7fc fb82 	bl	80036cc <HAL_GetTick>
 8006fc8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006fca:	e009      	b.n	8006fe0 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006fcc:	f7fc fb7e 	bl	80036cc <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fda:	d901      	bls.n	8006fe0 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e00f      	b.n	8007000 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f003 0320 	and.w	r3, r3, #32
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d0ee      	beq.n	8006fcc <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f042 0210 	orr.w	r2, r2, #16
 8006ffc:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007010:	2300      	movs	r3, #0
 8007012:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685a      	ldr	r2, [r3, #4]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0210 	bic.w	r2, r2, #16
 8007022:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007024:	f7fc fb52 	bl	80036cc <HAL_GetTick>
 8007028:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800702a:	e009      	b.n	8007040 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800702c:	f7fc fb4e 	bl	80036cc <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800703a:	d901      	bls.n	8007040 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e007      	b.n	8007050 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f003 0320 	and.w	r3, r3, #32
 800704a:	2b00      	cmp	r3, #0
 800704c:	d0ee      	beq.n	800702c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	4603      	mov	r3, r0
 8007060:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007062:	2300      	movs	r3, #0
 8007064:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8007066:	e005      	b.n	8007074 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	3301      	adds	r3, #1
 800706c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800706e:	79fb      	ldrb	r3, [r7, #7]
 8007070:	3b0a      	subs	r3, #10
 8007072:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8007074:	79fb      	ldrb	r3, [r7, #7]
 8007076:	2b09      	cmp	r3, #9
 8007078:	d8f6      	bhi.n	8007068 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	b2db      	uxtb	r3, r3
 800707e:	011b      	lsls	r3, r3, #4
 8007080:	b2da      	uxtb	r2, r3
 8007082:	79fb      	ldrb	r3, [r7, #7]
 8007084:	4313      	orrs	r3, r2
 8007086:	b2db      	uxtb	r3, r3
}
 8007088:	4618      	mov	r0, r3
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	bc80      	pop	{r7}
 8007090:	4770      	bx	lr

08007092 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007092:	b480      	push	{r7}
 8007094:	b085      	sub	sp, #20
 8007096:	af00      	add	r7, sp, #0
 8007098:	4603      	mov	r3, r0
 800709a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800709c:	2300      	movs	r3, #0
 800709e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80070a0:	79fb      	ldrb	r3, [r7, #7]
 80070a2:	091b      	lsrs	r3, r3, #4
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	461a      	mov	r2, r3
 80070a8:	4613      	mov	r3, r2
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	4413      	add	r3, r2
 80070ae:	005b      	lsls	r3, r3, #1
 80070b0:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80070b2:	79fb      	ldrb	r3, [r7, #7]
 80070b4:	f003 030f 	and.w	r3, r3, #15
 80070b8:	b2da      	uxtb	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	4413      	add	r3, r2
 80070c0:	b2db      	uxtb	r3, r3
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3714      	adds	r7, #20
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bc80      	pop	{r7}
 80070ca:	4770      	bx	lr

080070cc <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80070d6:	2300      	movs	r3, #0
 80070d8:	617b      	str	r3, [r7, #20]
 80070da:	2300      	movs	r3, #0
 80070dc:	613b      	str	r3, [r7, #16]
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	7bdb      	ldrb	r3, [r3, #15]
 80070ea:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	7b5b      	ldrb	r3, [r3, #13]
 80070f0:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	7b9b      	ldrb	r3, [r3, #14]
 80070f6:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80070f8:	2300      	movs	r3, #0
 80070fa:	60bb      	str	r3, [r7, #8]
 80070fc:	e06f      	b.n	80071de <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d011      	beq.n	8007128 <RTC_DateUpdate+0x5c>
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	2b03      	cmp	r3, #3
 8007108:	d00e      	beq.n	8007128 <RTC_DateUpdate+0x5c>
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	2b05      	cmp	r3, #5
 800710e:	d00b      	beq.n	8007128 <RTC_DateUpdate+0x5c>
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	2b07      	cmp	r3, #7
 8007114:	d008      	beq.n	8007128 <RTC_DateUpdate+0x5c>
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	2b08      	cmp	r3, #8
 800711a:	d005      	beq.n	8007128 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	2b0a      	cmp	r3, #10
 8007120:	d002      	beq.n	8007128 <RTC_DateUpdate+0x5c>
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	2b0c      	cmp	r3, #12
 8007126:	d117      	bne.n	8007158 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2b1e      	cmp	r3, #30
 800712c:	d803      	bhi.n	8007136 <RTC_DateUpdate+0x6a>
      {
        day++;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	3301      	adds	r3, #1
 8007132:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8007134:	e050      	b.n	80071d8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	2b0c      	cmp	r3, #12
 800713a:	d005      	beq.n	8007148 <RTC_DateUpdate+0x7c>
        {
          month++;
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	3301      	adds	r3, #1
 8007140:	613b      	str	r3, [r7, #16]
          day = 1U;
 8007142:	2301      	movs	r3, #1
 8007144:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8007146:	e047      	b.n	80071d8 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8007148:	2301      	movs	r3, #1
 800714a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800714c:	2301      	movs	r3, #1
 800714e:	60fb      	str	r3, [r7, #12]
          year++;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	3301      	adds	r3, #1
 8007154:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8007156:	e03f      	b.n	80071d8 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	2b04      	cmp	r3, #4
 800715c:	d008      	beq.n	8007170 <RTC_DateUpdate+0xa4>
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	2b06      	cmp	r3, #6
 8007162:	d005      	beq.n	8007170 <RTC_DateUpdate+0xa4>
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	2b09      	cmp	r3, #9
 8007168:	d002      	beq.n	8007170 <RTC_DateUpdate+0xa4>
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	2b0b      	cmp	r3, #11
 800716e:	d10c      	bne.n	800718a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2b1d      	cmp	r3, #29
 8007174:	d803      	bhi.n	800717e <RTC_DateUpdate+0xb2>
      {
        day++;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	3301      	adds	r3, #1
 800717a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800717c:	e02c      	b.n	80071d8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	3301      	adds	r3, #1
 8007182:	613b      	str	r3, [r7, #16]
        day = 1U;
 8007184:	2301      	movs	r3, #1
 8007186:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8007188:	e026      	b.n	80071d8 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	2b02      	cmp	r3, #2
 800718e:	d123      	bne.n	80071d8 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2b1b      	cmp	r3, #27
 8007194:	d803      	bhi.n	800719e <RTC_DateUpdate+0xd2>
      {
        day++;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	3301      	adds	r3, #1
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	e01c      	b.n	80071d8 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b1c      	cmp	r3, #28
 80071a2:	d111      	bne.n	80071c8 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	4618      	mov	r0, r3
 80071aa:	f000 f839 	bl	8007220 <RTC_IsLeapYear>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d003      	beq.n	80071bc <RTC_DateUpdate+0xf0>
        {
          day++;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	3301      	adds	r3, #1
 80071b8:	60fb      	str	r3, [r7, #12]
 80071ba:	e00d      	b.n	80071d8 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	3301      	adds	r3, #1
 80071c0:	613b      	str	r3, [r7, #16]
          day = 1U;
 80071c2:	2301      	movs	r3, #1
 80071c4:	60fb      	str	r3, [r7, #12]
 80071c6:	e007      	b.n	80071d8 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2b1d      	cmp	r3, #29
 80071cc:	d104      	bne.n	80071d8 <RTC_DateUpdate+0x10c>
      {
        month++;
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	3301      	adds	r3, #1
 80071d2:	613b      	str	r3, [r7, #16]
        day = 1U;
 80071d4:	2301      	movs	r3, #1
 80071d6:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	3301      	adds	r3, #1
 80071dc:	60bb      	str	r3, [r7, #8]
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d38b      	bcc.n	80070fe <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	b2da      	uxtb	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	b2da      	uxtb	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	b2db      	uxtb	r3, r3
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	b2d2      	uxtb	r2, r2
 8007206:	4619      	mov	r1, r3
 8007208:	6978      	ldr	r0, [r7, #20]
 800720a:	f000 f83b 	bl	8007284 <RTC_WeekDayNum>
 800720e:	4603      	mov	r3, r0
 8007210:	461a      	mov	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	731a      	strb	r2, [r3, #12]
}
 8007216:	bf00      	nop
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
	...

08007220 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	4603      	mov	r3, r0
 8007228:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800722a:	88fb      	ldrh	r3, [r7, #6]
 800722c:	f003 0303 	and.w	r3, r3, #3
 8007230:	b29b      	uxth	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8007236:	2300      	movs	r3, #0
 8007238:	e01d      	b.n	8007276 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800723a:	88fb      	ldrh	r3, [r7, #6]
 800723c:	4a10      	ldr	r2, [pc, #64]	; (8007280 <RTC_IsLeapYear+0x60>)
 800723e:	fba2 1203 	umull	r1, r2, r2, r3
 8007242:	0952      	lsrs	r2, r2, #5
 8007244:	2164      	movs	r1, #100	; 0x64
 8007246:	fb01 f202 	mul.w	r2, r1, r2
 800724a:	1a9b      	subs	r3, r3, r2
 800724c:	b29b      	uxth	r3, r3
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8007252:	2301      	movs	r3, #1
 8007254:	e00f      	b.n	8007276 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8007256:	88fb      	ldrh	r3, [r7, #6]
 8007258:	4a09      	ldr	r2, [pc, #36]	; (8007280 <RTC_IsLeapYear+0x60>)
 800725a:	fba2 1203 	umull	r1, r2, r2, r3
 800725e:	09d2      	lsrs	r2, r2, #7
 8007260:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007264:	fb01 f202 	mul.w	r2, r1, r2
 8007268:	1a9b      	subs	r3, r3, r2
 800726a:	b29b      	uxth	r3, r3
 800726c:	2b00      	cmp	r3, #0
 800726e:	d101      	bne.n	8007274 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8007270:	2301      	movs	r3, #1
 8007272:	e000      	b.n	8007276 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8007274:	2300      	movs	r3, #0
  }
}
 8007276:	4618      	mov	r0, r3
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	bc80      	pop	{r7}
 800727e:	4770      	bx	lr
 8007280:	51eb851f 	.word	0x51eb851f

08007284 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	460b      	mov	r3, r1
 800728e:	70fb      	strb	r3, [r7, #3]
 8007290:	4613      	mov	r3, r2
 8007292:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8007294:	2300      	movs	r3, #0
 8007296:	60bb      	str	r3, [r7, #8]
 8007298:	2300      	movs	r3, #0
 800729a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80072a2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80072a4:	78fb      	ldrb	r3, [r7, #3]
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d82d      	bhi.n	8007306 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80072aa:	78fa      	ldrb	r2, [r7, #3]
 80072ac:	4613      	mov	r3, r2
 80072ae:	005b      	lsls	r3, r3, #1
 80072b0:	4413      	add	r3, r2
 80072b2:	00db      	lsls	r3, r3, #3
 80072b4:	1a9b      	subs	r3, r3, r2
 80072b6:	4a2c      	ldr	r2, [pc, #176]	; (8007368 <RTC_WeekDayNum+0xe4>)
 80072b8:	fba2 2303 	umull	r2, r3, r2, r3
 80072bc:	085a      	lsrs	r2, r3, #1
 80072be:	78bb      	ldrb	r3, [r7, #2]
 80072c0:	441a      	add	r2, r3
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	441a      	add	r2, r3
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	3b01      	subs	r3, #1
 80072ca:	089b      	lsrs	r3, r3, #2
 80072cc:	441a      	add	r2, r3
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	3b01      	subs	r3, #1
 80072d2:	4926      	ldr	r1, [pc, #152]	; (800736c <RTC_WeekDayNum+0xe8>)
 80072d4:	fba1 1303 	umull	r1, r3, r1, r3
 80072d8:	095b      	lsrs	r3, r3, #5
 80072da:	1ad2      	subs	r2, r2, r3
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	3b01      	subs	r3, #1
 80072e0:	4922      	ldr	r1, [pc, #136]	; (800736c <RTC_WeekDayNum+0xe8>)
 80072e2:	fba1 1303 	umull	r1, r3, r1, r3
 80072e6:	09db      	lsrs	r3, r3, #7
 80072e8:	4413      	add	r3, r2
 80072ea:	1d1a      	adds	r2, r3, #4
 80072ec:	4b20      	ldr	r3, [pc, #128]	; (8007370 <RTC_WeekDayNum+0xec>)
 80072ee:	fba3 1302 	umull	r1, r3, r3, r2
 80072f2:	1ad1      	subs	r1, r2, r3
 80072f4:	0849      	lsrs	r1, r1, #1
 80072f6:	440b      	add	r3, r1
 80072f8:	0899      	lsrs	r1, r3, #2
 80072fa:	460b      	mov	r3, r1
 80072fc:	00db      	lsls	r3, r3, #3
 80072fe:	1a5b      	subs	r3, r3, r1
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	60fb      	str	r3, [r7, #12]
 8007304:	e029      	b.n	800735a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8007306:	78fa      	ldrb	r2, [r7, #3]
 8007308:	4613      	mov	r3, r2
 800730a:	005b      	lsls	r3, r3, #1
 800730c:	4413      	add	r3, r2
 800730e:	00db      	lsls	r3, r3, #3
 8007310:	1a9b      	subs	r3, r3, r2
 8007312:	4a15      	ldr	r2, [pc, #84]	; (8007368 <RTC_WeekDayNum+0xe4>)
 8007314:	fba2 2303 	umull	r2, r3, r2, r3
 8007318:	085a      	lsrs	r2, r3, #1
 800731a:	78bb      	ldrb	r3, [r7, #2]
 800731c:	441a      	add	r2, r3
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	441a      	add	r2, r3
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	089b      	lsrs	r3, r3, #2
 8007326:	441a      	add	r2, r3
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	4910      	ldr	r1, [pc, #64]	; (800736c <RTC_WeekDayNum+0xe8>)
 800732c:	fba1 1303 	umull	r1, r3, r1, r3
 8007330:	095b      	lsrs	r3, r3, #5
 8007332:	1ad2      	subs	r2, r2, r3
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	490d      	ldr	r1, [pc, #52]	; (800736c <RTC_WeekDayNum+0xe8>)
 8007338:	fba1 1303 	umull	r1, r3, r1, r3
 800733c:	09db      	lsrs	r3, r3, #7
 800733e:	4413      	add	r3, r2
 8007340:	1c9a      	adds	r2, r3, #2
 8007342:	4b0b      	ldr	r3, [pc, #44]	; (8007370 <RTC_WeekDayNum+0xec>)
 8007344:	fba3 1302 	umull	r1, r3, r3, r2
 8007348:	1ad1      	subs	r1, r2, r3
 800734a:	0849      	lsrs	r1, r1, #1
 800734c:	440b      	add	r3, r1
 800734e:	0899      	lsrs	r1, r3, #2
 8007350:	460b      	mov	r3, r1
 8007352:	00db      	lsls	r3, r3, #3
 8007354:	1a5b      	subs	r3, r3, r1
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	b2db      	uxtb	r3, r3
}
 800735e:	4618      	mov	r0, r3
 8007360:	3714      	adds	r7, #20
 8007362:	46bd      	mov	sp, r7
 8007364:	bc80      	pop	{r7}
 8007366:	4770      	bx	lr
 8007368:	38e38e39 	.word	0x38e38e39
 800736c:	51eb851f 	.word	0x51eb851f
 8007370:	24924925 	.word	0x24924925

08007374 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d101      	bne.n	8007386 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e076      	b.n	8007474 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738a:	2b00      	cmp	r3, #0
 800738c:	d108      	bne.n	80073a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007396:	d009      	beq.n	80073ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	61da      	str	r2, [r3, #28]
 800739e:	e005      	b.n	80073ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d106      	bne.n	80073cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f7fb feae 	bl	8003128 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2202      	movs	r2, #2
 80073d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80073f4:	431a      	orrs	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073fe:	431a      	orrs	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	f003 0302 	and.w	r3, r3, #2
 8007408:	431a      	orrs	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	431a      	orrs	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800741c:	431a      	orrs	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007426:	431a      	orrs	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a1b      	ldr	r3, [r3, #32]
 800742c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007430:	ea42 0103 	orr.w	r1, r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007438:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	430a      	orrs	r2, r1
 8007442:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	0c1a      	lsrs	r2, r3, #16
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f002 0204 	and.w	r2, r2, #4
 8007452:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	69da      	ldr	r2, [r3, #28]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007462:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e042      	b.n	8007514 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d106      	bne.n	80074a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f7fb fffe 	bl	80034a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2224      	movs	r2, #36	; 0x24
 80074ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68da      	ldr	r2, [r3, #12]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f91d 	bl	8007700 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	691a      	ldr	r2, [r3, #16]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	695a      	ldr	r2, [r3, #20]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68da      	ldr	r2, [r3, #12]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2220      	movs	r2, #32
 8007500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2220      	movs	r2, #32
 8007508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b08a      	sub	sp, #40	; 0x28
 8007520:	af02      	add	r7, sp, #8
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	603b      	str	r3, [r7, #0]
 8007528:	4613      	mov	r3, r2
 800752a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800752c:	2300      	movs	r3, #0
 800752e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007536:	b2db      	uxtb	r3, r3
 8007538:	2b20      	cmp	r3, #32
 800753a:	d16d      	bne.n	8007618 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d002      	beq.n	8007548 <HAL_UART_Transmit+0x2c>
 8007542:	88fb      	ldrh	r3, [r7, #6]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d101      	bne.n	800754c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e066      	b.n	800761a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2221      	movs	r2, #33	; 0x21
 8007556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800755a:	f7fc f8b7 	bl	80036cc <HAL_GetTick>
 800755e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	88fa      	ldrh	r2, [r7, #6]
 8007564:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	88fa      	ldrh	r2, [r7, #6]
 800756a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007574:	d108      	bne.n	8007588 <HAL_UART_Transmit+0x6c>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d104      	bne.n	8007588 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800757e:	2300      	movs	r3, #0
 8007580:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	61bb      	str	r3, [r7, #24]
 8007586:	e003      	b.n	8007590 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800758c:	2300      	movs	r3, #0
 800758e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007590:	e02a      	b.n	80075e8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	2200      	movs	r2, #0
 800759a:	2180      	movs	r1, #128	; 0x80
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 f840 	bl	8007622 <UART_WaitOnFlagUntilTimeout>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d001      	beq.n	80075ac <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e036      	b.n	800761a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10b      	bne.n	80075ca <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	881b      	ldrh	r3, [r3, #0]
 80075b6:	461a      	mov	r2, r3
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	3302      	adds	r3, #2
 80075c6:	61bb      	str	r3, [r7, #24]
 80075c8:	e007      	b.n	80075da <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	781a      	ldrb	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	3301      	adds	r3, #1
 80075d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075de:	b29b      	uxth	r3, r3
 80075e0:	3b01      	subs	r3, #1
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1cf      	bne.n	8007592 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	9300      	str	r3, [sp, #0]
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	2200      	movs	r2, #0
 80075fa:	2140      	movs	r1, #64	; 0x40
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f000 f810 	bl	8007622 <UART_WaitOnFlagUntilTimeout>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d001      	beq.n	800760c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007608:	2303      	movs	r3, #3
 800760a:	e006      	b.n	800761a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2220      	movs	r2, #32
 8007610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007614:	2300      	movs	r3, #0
 8007616:	e000      	b.n	800761a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007618:	2302      	movs	r3, #2
  }
}
 800761a:	4618      	mov	r0, r3
 800761c:	3720      	adds	r7, #32
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b090      	sub	sp, #64	; 0x40
 8007626:	af00      	add	r7, sp, #0
 8007628:	60f8      	str	r0, [r7, #12]
 800762a:	60b9      	str	r1, [r7, #8]
 800762c:	603b      	str	r3, [r7, #0]
 800762e:	4613      	mov	r3, r2
 8007630:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007632:	e050      	b.n	80076d6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763a:	d04c      	beq.n	80076d6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800763c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800763e:	2b00      	cmp	r3, #0
 8007640:	d007      	beq.n	8007652 <UART_WaitOnFlagUntilTimeout+0x30>
 8007642:	f7fc f843 	bl	80036cc <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800764e:	429a      	cmp	r2, r3
 8007650:	d241      	bcs.n	80076d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	330c      	adds	r3, #12
 8007658:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765c:	e853 3f00 	ldrex	r3, [r3]
 8007660:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007664:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007668:	63fb      	str	r3, [r7, #60]	; 0x3c
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	330c      	adds	r3, #12
 8007670:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007672:	637a      	str	r2, [r7, #52]	; 0x34
 8007674:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007676:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007678:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800767a:	e841 2300 	strex	r3, r2, [r1]
 800767e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1e5      	bne.n	8007652 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	3314      	adds	r3, #20
 800768c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	e853 3f00 	ldrex	r3, [r3]
 8007694:	613b      	str	r3, [r7, #16]
   return(result);
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	f023 0301 	bic.w	r3, r3, #1
 800769c:	63bb      	str	r3, [r7, #56]	; 0x38
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	3314      	adds	r3, #20
 80076a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076a6:	623a      	str	r2, [r7, #32]
 80076a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076aa:	69f9      	ldr	r1, [r7, #28]
 80076ac:	6a3a      	ldr	r2, [r7, #32]
 80076ae:	e841 2300 	strex	r3, r2, [r1]
 80076b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1e5      	bne.n	8007686 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2220      	movs	r2, #32
 80076be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2220      	movs	r2, #32
 80076c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e00f      	b.n	80076f6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	4013      	ands	r3, r2
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	bf0c      	ite	eq
 80076e6:	2301      	moveq	r3, #1
 80076e8:	2300      	movne	r3, #0
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	461a      	mov	r2, r3
 80076ee:	79fb      	ldrb	r3, [r7, #7]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d09f      	beq.n	8007634 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3740      	adds	r7, #64	; 0x40
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
	...

08007700 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	68da      	ldr	r2, [r3, #12]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	689a      	ldr	r2, [r3, #8]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	431a      	orrs	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	695b      	ldr	r3, [r3, #20]
 800772c:	4313      	orrs	r3, r2
 800772e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800773a:	f023 030c 	bic.w	r3, r3, #12
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	6812      	ldr	r2, [r2, #0]
 8007742:	68b9      	ldr	r1, [r7, #8]
 8007744:	430b      	orrs	r3, r1
 8007746:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	699a      	ldr	r2, [r3, #24]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	430a      	orrs	r2, r1
 800775c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a2c      	ldr	r2, [pc, #176]	; (8007814 <UART_SetConfig+0x114>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d103      	bne.n	8007770 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007768:	f7fe fe9c 	bl	80064a4 <HAL_RCC_GetPCLK2Freq>
 800776c:	60f8      	str	r0, [r7, #12]
 800776e:	e002      	b.n	8007776 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007770:	f7fe fe84 	bl	800647c <HAL_RCC_GetPCLK1Freq>
 8007774:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	4613      	mov	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	009a      	lsls	r2, r3, #2
 8007780:	441a      	add	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	fbb2 f3f3 	udiv	r3, r2, r3
 800778c:	4a22      	ldr	r2, [pc, #136]	; (8007818 <UART_SetConfig+0x118>)
 800778e:	fba2 2303 	umull	r2, r3, r2, r3
 8007792:	095b      	lsrs	r3, r3, #5
 8007794:	0119      	lsls	r1, r3, #4
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	4613      	mov	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4413      	add	r3, r2
 800779e:	009a      	lsls	r2, r3, #2
 80077a0:	441a      	add	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80077ac:	4b1a      	ldr	r3, [pc, #104]	; (8007818 <UART_SetConfig+0x118>)
 80077ae:	fba3 0302 	umull	r0, r3, r3, r2
 80077b2:	095b      	lsrs	r3, r3, #5
 80077b4:	2064      	movs	r0, #100	; 0x64
 80077b6:	fb00 f303 	mul.w	r3, r0, r3
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	011b      	lsls	r3, r3, #4
 80077be:	3332      	adds	r3, #50	; 0x32
 80077c0:	4a15      	ldr	r2, [pc, #84]	; (8007818 <UART_SetConfig+0x118>)
 80077c2:	fba2 2303 	umull	r2, r3, r2, r3
 80077c6:	095b      	lsrs	r3, r3, #5
 80077c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077cc:	4419      	add	r1, r3
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	4613      	mov	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	009a      	lsls	r2, r3, #2
 80077d8:	441a      	add	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80077e4:	4b0c      	ldr	r3, [pc, #48]	; (8007818 <UART_SetConfig+0x118>)
 80077e6:	fba3 0302 	umull	r0, r3, r3, r2
 80077ea:	095b      	lsrs	r3, r3, #5
 80077ec:	2064      	movs	r0, #100	; 0x64
 80077ee:	fb00 f303 	mul.w	r3, r0, r3
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	011b      	lsls	r3, r3, #4
 80077f6:	3332      	adds	r3, #50	; 0x32
 80077f8:	4a07      	ldr	r2, [pc, #28]	; (8007818 <UART_SetConfig+0x118>)
 80077fa:	fba2 2303 	umull	r2, r3, r2, r3
 80077fe:	095b      	lsrs	r3, r3, #5
 8007800:	f003 020f 	and.w	r2, r3, #15
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	440a      	add	r2, r1
 800780a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800780c:	bf00      	nop
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	40013800 	.word	0x40013800
 8007818:	51eb851f 	.word	0x51eb851f

0800781c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007822:	f3ef 8305 	mrs	r3, IPSR
 8007826:	60bb      	str	r3, [r7, #8]
  return(result);
 8007828:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10f      	bne.n	800784e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800782e:	f3ef 8310 	mrs	r3, PRIMASK
 8007832:	607b      	str	r3, [r7, #4]
  return(result);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d109      	bne.n	800784e <osKernelInitialize+0x32>
 800783a:	4b10      	ldr	r3, [pc, #64]	; (800787c <osKernelInitialize+0x60>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2b02      	cmp	r3, #2
 8007840:	d109      	bne.n	8007856 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007842:	f3ef 8311 	mrs	r3, BASEPRI
 8007846:	603b      	str	r3, [r7, #0]
  return(result);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d003      	beq.n	8007856 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800784e:	f06f 0305 	mvn.w	r3, #5
 8007852:	60fb      	str	r3, [r7, #12]
 8007854:	e00c      	b.n	8007870 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007856:	4b09      	ldr	r3, [pc, #36]	; (800787c <osKernelInitialize+0x60>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d105      	bne.n	800786a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800785e:	4b07      	ldr	r3, [pc, #28]	; (800787c <osKernelInitialize+0x60>)
 8007860:	2201      	movs	r2, #1
 8007862:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007864:	2300      	movs	r3, #0
 8007866:	60fb      	str	r3, [r7, #12]
 8007868:	e002      	b.n	8007870 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800786a:	f04f 33ff 	mov.w	r3, #4294967295
 800786e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007870:	68fb      	ldr	r3, [r7, #12]
}
 8007872:	4618      	mov	r0, r3
 8007874:	3714      	adds	r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	bc80      	pop	{r7}
 800787a:	4770      	bx	lr
 800787c:	20000560 	.word	0x20000560

08007880 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8007886:	f002 f891 	bl	80099ac <xTaskGetSchedulerState>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d004      	beq.n	800789a <osKernelGetState+0x1a>
 8007890:	2b02      	cmp	r3, #2
 8007892:	d105      	bne.n	80078a0 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8007894:	2302      	movs	r3, #2
 8007896:	607b      	str	r3, [r7, #4]
      break;
 8007898:	e00c      	b.n	80078b4 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800789a:	2303      	movs	r3, #3
 800789c:	607b      	str	r3, [r7, #4]
      break;
 800789e:	e009      	b.n	80078b4 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 80078a0:	4b07      	ldr	r3, [pc, #28]	; (80078c0 <osKernelGetState+0x40>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d102      	bne.n	80078ae <osKernelGetState+0x2e>
        state = osKernelReady;
 80078a8:	2301      	movs	r3, #1
 80078aa:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 80078ac:	e001      	b.n	80078b2 <osKernelGetState+0x32>
        state = osKernelInactive;
 80078ae:	2300      	movs	r3, #0
 80078b0:	607b      	str	r3, [r7, #4]
      break;
 80078b2:	bf00      	nop
  }

  return (state);
 80078b4:	687b      	ldr	r3, [r7, #4]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	20000560 	.word	0x20000560

080078c4 <osKernelStart>:

osStatus_t osKernelStart (void) {
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078ca:	f3ef 8305 	mrs	r3, IPSR
 80078ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80078d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10f      	bne.n	80078f6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078d6:	f3ef 8310 	mrs	r3, PRIMASK
 80078da:	607b      	str	r3, [r7, #4]
  return(result);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d109      	bne.n	80078f6 <osKernelStart+0x32>
 80078e2:	4b11      	ldr	r3, [pc, #68]	; (8007928 <osKernelStart+0x64>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d109      	bne.n	80078fe <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078ea:	f3ef 8311 	mrs	r3, BASEPRI
 80078ee:	603b      	str	r3, [r7, #0]
  return(result);
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <osKernelStart+0x3a>
    stat = osErrorISR;
 80078f6:	f06f 0305 	mvn.w	r3, #5
 80078fa:	60fb      	str	r3, [r7, #12]
 80078fc:	e00e      	b.n	800791c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80078fe:	4b0a      	ldr	r3, [pc, #40]	; (8007928 <osKernelStart+0x64>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d107      	bne.n	8007916 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8007906:	4b08      	ldr	r3, [pc, #32]	; (8007928 <osKernelStart+0x64>)
 8007908:	2202      	movs	r2, #2
 800790a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800790c:	f001 fbec 	bl	80090e8 <vTaskStartScheduler>
      stat = osOK;
 8007910:	2300      	movs	r3, #0
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	e002      	b.n	800791c <osKernelStart+0x58>
    } else {
      stat = osError;
 8007916:	f04f 33ff 	mov.w	r3, #4294967295
 800791a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800791c:	68fb      	ldr	r3, [r7, #12]
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	20000560 	.word	0x20000560

0800792c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800792c:	b580      	push	{r7, lr}
 800792e:	b092      	sub	sp, #72	; 0x48
 8007930:	af04      	add	r7, sp, #16
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007938:	2300      	movs	r3, #0
 800793a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800793c:	f3ef 8305 	mrs	r3, IPSR
 8007940:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007942:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8007944:	2b00      	cmp	r3, #0
 8007946:	f040 8094 	bne.w	8007a72 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800794a:	f3ef 8310 	mrs	r3, PRIMASK
 800794e:	623b      	str	r3, [r7, #32]
  return(result);
 8007950:	6a3b      	ldr	r3, [r7, #32]
 8007952:	2b00      	cmp	r3, #0
 8007954:	f040 808d 	bne.w	8007a72 <osThreadNew+0x146>
 8007958:	4b48      	ldr	r3, [pc, #288]	; (8007a7c <osThreadNew+0x150>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2b02      	cmp	r3, #2
 800795e:	d106      	bne.n	800796e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007960:	f3ef 8311 	mrs	r3, BASEPRI
 8007964:	61fb      	str	r3, [r7, #28]
  return(result);
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	2b00      	cmp	r3, #0
 800796a:	f040 8082 	bne.w	8007a72 <osThreadNew+0x146>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d07e      	beq.n	8007a72 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8007974:	2380      	movs	r3, #128	; 0x80
 8007976:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007978:	2318      	movs	r3, #24
 800797a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800797c:	2300      	movs	r3, #0
 800797e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007980:	f107 031b 	add.w	r3, r7, #27
 8007984:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8007986:	f04f 33ff 	mov.w	r3, #4294967295
 800798a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d045      	beq.n	8007a1e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d002      	beq.n	80079a0 <osThreadNew+0x74>
        name = attr->name;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	699b      	ldr	r3, [r3, #24]
 80079ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80079ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d008      	beq.n	80079c6 <osThreadNew+0x9a>
 80079b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b6:	2b38      	cmp	r3, #56	; 0x38
 80079b8:	d805      	bhi.n	80079c6 <osThreadNew+0x9a>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	f003 0301 	and.w	r3, r3, #1
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d001      	beq.n	80079ca <osThreadNew+0x9e>
        return (NULL);
 80079c6:	2300      	movs	r3, #0
 80079c8:	e054      	b.n	8007a74 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	089b      	lsrs	r3, r3, #2
 80079d8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00e      	beq.n	8007a00 <osThreadNew+0xd4>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	2bb7      	cmp	r3, #183	; 0xb7
 80079e8:	d90a      	bls.n	8007a00 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d006      	beq.n	8007a00 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d002      	beq.n	8007a00 <osThreadNew+0xd4>
        mem = 1;
 80079fa:	2301      	movs	r3, #1
 80079fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80079fe:	e010      	b.n	8007a22 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10c      	bne.n	8007a22 <osThreadNew+0xf6>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d108      	bne.n	8007a22 <osThreadNew+0xf6>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d104      	bne.n	8007a22 <osThreadNew+0xf6>
          mem = 0;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a1c:	e001      	b.n	8007a22 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8007a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d110      	bne.n	8007a4a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a30:	9202      	str	r2, [sp, #8]
 8007a32:	9301      	str	r3, [sp, #4]
 8007a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a36:	9300      	str	r3, [sp, #0]
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	f001 f96e 	bl	8008d20 <xTaskCreateStatic>
 8007a44:	4603      	mov	r3, r0
 8007a46:	617b      	str	r3, [r7, #20]
 8007a48:	e013      	b.n	8007a72 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8007a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d110      	bne.n	8007a72 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	f107 0314 	add.w	r3, r7, #20
 8007a58:	9301      	str	r3, [sp, #4]
 8007a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5c:	9300      	str	r3, [sp, #0]
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f001 f9b8 	bl	8008dd8 <xTaskCreate>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d001      	beq.n	8007a72 <osThreadNew+0x146>
          hTask = NULL;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007a72:	697b      	ldr	r3, [r7, #20]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3738      	adds	r7, #56	; 0x38
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	20000560 	.word	0x20000560

08007a80 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a86:	f3ef 8305 	mrs	r3, IPSR
 8007a8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a8c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10f      	bne.n	8007ab2 <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a92:	f3ef 8310 	mrs	r3, PRIMASK
 8007a96:	607b      	str	r3, [r7, #4]
  return(result);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d109      	bne.n	8007ab2 <osThreadYield+0x32>
 8007a9e:	4b0f      	ldr	r3, [pc, #60]	; (8007adc <osThreadYield+0x5c>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d109      	bne.n	8007aba <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007aa6:	f3ef 8311 	mrs	r3, BASEPRI
 8007aaa:	603b      	str	r3, [r7, #0]
  return(result);
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <osThreadYield+0x3a>
    stat = osErrorISR;
 8007ab2:	f06f 0305 	mvn.w	r3, #5
 8007ab6:	60fb      	str	r3, [r7, #12]
 8007ab8:	e009      	b.n	8007ace <osThreadYield+0x4e>
  } else {
    stat = osOK;
 8007aba:	2300      	movs	r3, #0
 8007abc:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 8007abe:	4b08      	ldr	r3, [pc, #32]	; (8007ae0 <osThreadYield+0x60>)
 8007ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ac4:	601a      	str	r2, [r3, #0]
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8007ace:	68fb      	ldr	r3, [r7, #12]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3714      	adds	r7, #20
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bc80      	pop	{r7}
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	20000560 	.word	0x20000560
 8007ae0:	e000ed04 	.word	0xe000ed04

08007ae4 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b08e      	sub	sp, #56	; 0x38
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007af0:	f3ef 8305 	mrs	r3, IPSR
 8007af4:	61fb      	str	r3, [r7, #28]
  return(result);
 8007af6:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d10f      	bne.n	8007b1c <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007afc:	f3ef 8310 	mrs	r3, PRIMASK
 8007b00:	61bb      	str	r3, [r7, #24]
  return(result);
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d109      	bne.n	8007b1c <osThreadFlagsWait+0x38>
 8007b08:	4b3f      	ldr	r3, [pc, #252]	; (8007c08 <osThreadFlagsWait+0x124>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d109      	bne.n	8007b24 <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b10:	f3ef 8311 	mrs	r3, BASEPRI
 8007b14:	617b      	str	r3, [r7, #20]
  return(result);
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d003      	beq.n	8007b24 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 8007b1c:	f06f 0305 	mvn.w	r3, #5
 8007b20:	637b      	str	r3, [r7, #52]	; 0x34
 8007b22:	e06b      	b.n	8007bfc <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	da03      	bge.n	8007b32 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 8007b2a:	f06f 0303 	mvn.w	r3, #3
 8007b2e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b30:	e064      	b.n	8007bfc <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	f003 0302 	and.w	r3, r3, #2
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d002      	beq.n	8007b42 <osThreadFlagsWait+0x5e>
      clear = 0U;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	633b      	str	r3, [r7, #48]	; 0x30
 8007b40:	e001      	b.n	8007b46 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 8007b4e:	f001 fbe7 	bl	8009320 <xTaskGetTickCount>
 8007b52:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8007b54:	f107 0210 	add.w	r2, r7, #16
 8007b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	f001 ffb1 	bl	8009ac4 <xTaskNotifyWait>
 8007b62:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 8007b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d137      	bne.n	8007bda <osThreadFlagsWait+0xf6>
        rflags &= flags;
 8007b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	4013      	ands	r3, r2
 8007b70:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b76:	4313      	orrs	r3, r2
 8007b78:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	f003 0301 	and.w	r3, r3, #1
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00c      	beq.n	8007b9e <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b88:	4013      	ands	r3, r2
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d032      	beq.n	8007bf6 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10f      	bne.n	8007bb6 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8007b96:	f06f 0302 	mvn.w	r3, #2
 8007b9a:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8007b9c:	e02e      	b.n	8007bfc <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d128      	bne.n	8007bfa <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d103      	bne.n	8007bb6 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8007bae:	f06f 0302 	mvn.w	r3, #2
 8007bb2:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8007bb4:	e022      	b.n	8007bfc <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8007bb6:	f001 fbb3 	bl	8009320 <xTaskGetTickCount>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 8007bc2:	6a3a      	ldr	r2, [r7, #32]
 8007bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d902      	bls.n	8007bd0 <osThreadFlagsWait+0xec>
          tout  = 0;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bce:	e00e      	b.n	8007bee <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 8007bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bd2:	6a3b      	ldr	r3, [r7, #32]
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bd8:	e009      	b.n	8007bee <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d103      	bne.n	8007be8 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 8007be0:	f06f 0302 	mvn.w	r3, #2
 8007be4:	637b      	str	r3, [r7, #52]	; 0x34
 8007be6:	e002      	b.n	8007bee <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8007be8:	f06f 0301 	mvn.w	r3, #1
 8007bec:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 8007bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1af      	bne.n	8007b54 <osThreadFlagsWait+0x70>
 8007bf4:	e002      	b.n	8007bfc <osThreadFlagsWait+0x118>
            break;
 8007bf6:	bf00      	nop
 8007bf8:	e000      	b.n	8007bfc <osThreadFlagsWait+0x118>
            break;
 8007bfa:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8007bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3738      	adds	r7, #56	; 0x38
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	20000560 	.word	0x20000560

08007c0c <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b086      	sub	sp, #24
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c14:	f3ef 8305 	mrs	r3, IPSR
 8007c18:	613b      	str	r3, [r7, #16]
  return(result);
 8007c1a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d10f      	bne.n	8007c40 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c20:	f3ef 8310 	mrs	r3, PRIMASK
 8007c24:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d109      	bne.n	8007c40 <osDelay+0x34>
 8007c2c:	4b0d      	ldr	r3, [pc, #52]	; (8007c64 <osDelay+0x58>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d109      	bne.n	8007c48 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c34:	f3ef 8311 	mrs	r3, BASEPRI
 8007c38:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d003      	beq.n	8007c48 <osDelay+0x3c>
    stat = osErrorISR;
 8007c40:	f06f 0305 	mvn.w	r3, #5
 8007c44:	617b      	str	r3, [r7, #20]
 8007c46:	e007      	b.n	8007c58 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d002      	beq.n	8007c58 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f001 fa14 	bl	8009080 <vTaskDelay>
    }
  }

  return (stat);
 8007c58:	697b      	ldr	r3, [r7, #20]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3718      	adds	r7, #24
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	20000560 	.word	0x20000560

08007c68 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b08c      	sub	sp, #48	; 0x30
 8007c6c:	af02      	add	r7, sp, #8
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007c74:	2300      	movs	r3, #0
 8007c76:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c78:	f3ef 8305 	mrs	r3, IPSR
 8007c7c:	61bb      	str	r3, [r7, #24]
  return(result);
 8007c7e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d16f      	bne.n	8007d64 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c84:	f3ef 8310 	mrs	r3, PRIMASK
 8007c88:	617b      	str	r3, [r7, #20]
  return(result);
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d169      	bne.n	8007d64 <osMessageQueueNew+0xfc>
 8007c90:	4b37      	ldr	r3, [pc, #220]	; (8007d70 <osMessageQueueNew+0x108>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d105      	bne.n	8007ca4 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c98:	f3ef 8311 	mrs	r3, BASEPRI
 8007c9c:	613b      	str	r3, [r7, #16]
  return(result);
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d15f      	bne.n	8007d64 <osMessageQueueNew+0xfc>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d05c      	beq.n	8007d64 <osMessageQueueNew+0xfc>
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d059      	beq.n	8007d64 <osMessageQueueNew+0xfc>
    mem = -1;
 8007cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8007cb4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d029      	beq.n	8007d10 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d012      	beq.n	8007cea <osMessageQueueNew+0x82>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	2b4f      	cmp	r3, #79	; 0x4f
 8007cca:	d90e      	bls.n	8007cea <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00a      	beq.n	8007cea <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	695a      	ldr	r2, [r3, #20]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	68b9      	ldr	r1, [r7, #8]
 8007cdc:	fb01 f303 	mul.w	r3, r1, r3
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d302      	bcc.n	8007cea <osMessageQueueNew+0x82>
        mem = 1;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	623b      	str	r3, [r7, #32]
 8007ce8:	e014      	b.n	8007d14 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d110      	bne.n	8007d14 <osMessageQueueNew+0xac>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d10c      	bne.n	8007d14 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d108      	bne.n	8007d14 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	695b      	ldr	r3, [r3, #20]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d104      	bne.n	8007d14 <osMessageQueueNew+0xac>
          mem = 0;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	623b      	str	r3, [r7, #32]
 8007d0e:	e001      	b.n	8007d14 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007d10:	2300      	movs	r3, #0
 8007d12:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007d14:	6a3b      	ldr	r3, [r7, #32]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d10b      	bne.n	8007d32 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	691a      	ldr	r2, [r3, #16]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	2100      	movs	r1, #0
 8007d24:	9100      	str	r1, [sp, #0]
 8007d26:	68b9      	ldr	r1, [r7, #8]
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f000 fa85 	bl	8008238 <xQueueGenericCreateStatic>
 8007d2e:	6278      	str	r0, [r7, #36]	; 0x24
 8007d30:	e008      	b.n	8007d44 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8007d32:	6a3b      	ldr	r3, [r7, #32]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d105      	bne.n	8007d44 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007d38:	2200      	movs	r2, #0
 8007d3a:	68b9      	ldr	r1, [r7, #8]
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f000 faf2 	bl	8008326 <xQueueGenericCreate>
 8007d42:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00c      	beq.n	8007d64 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d003      	beq.n	8007d58 <osMessageQueueNew+0xf0>
        name = attr->name;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	61fb      	str	r3, [r7, #28]
 8007d56:	e001      	b.n	8007d5c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8007d5c:	69f9      	ldr	r1, [r7, #28]
 8007d5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d60:	f000 ff82 	bl	8008c68 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3728      	adds	r7, #40	; 0x28
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	20000560 	.word	0x20000560

08007d74 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b08a      	sub	sp, #40	; 0x28
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	603b      	str	r3, [r7, #0]
 8007d80:	4613      	mov	r3, r2
 8007d82:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d8c:	f3ef 8305 	mrs	r3, IPSR
 8007d90:	61fb      	str	r3, [r7, #28]
  return(result);
 8007d92:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10f      	bne.n	8007db8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d98:	f3ef 8310 	mrs	r3, PRIMASK
 8007d9c:	61bb      	str	r3, [r7, #24]
  return(result);
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d109      	bne.n	8007db8 <osMessageQueuePut+0x44>
 8007da4:	4b2b      	ldr	r3, [pc, #172]	; (8007e54 <osMessageQueuePut+0xe0>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d12e      	bne.n	8007e0a <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007dac:	f3ef 8311 	mrs	r3, BASEPRI
 8007db0:	617b      	str	r3, [r7, #20]
  return(result);
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d028      	beq.n	8007e0a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007db8:	6a3b      	ldr	r3, [r7, #32]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d005      	beq.n	8007dca <osMessageQueuePut+0x56>
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d002      	beq.n	8007dca <osMessageQueuePut+0x56>
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d003      	beq.n	8007dd2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8007dca:	f06f 0303 	mvn.w	r3, #3
 8007dce:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007dd0:	e039      	b.n	8007e46 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007dd6:	f107 0210 	add.w	r2, r7, #16
 8007dda:	2300      	movs	r3, #0
 8007ddc:	68b9      	ldr	r1, [r7, #8]
 8007dde:	6a38      	ldr	r0, [r7, #32]
 8007de0:	f000 fc00 	bl	80085e4 <xQueueGenericSendFromISR>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d003      	beq.n	8007df2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8007dea:	f06f 0302 	mvn.w	r3, #2
 8007dee:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007df0:	e029      	b.n	8007e46 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d026      	beq.n	8007e46 <osMessageQueuePut+0xd2>
 8007df8:	4b17      	ldr	r3, [pc, #92]	; (8007e58 <osMessageQueuePut+0xe4>)
 8007dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dfe:	601a      	str	r2, [r3, #0]
 8007e00:	f3bf 8f4f 	dsb	sy
 8007e04:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007e08:	e01d      	b.n	8007e46 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007e0a:	6a3b      	ldr	r3, [r7, #32]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d002      	beq.n	8007e16 <osMessageQueuePut+0xa2>
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d103      	bne.n	8007e1e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8007e16:	f06f 0303 	mvn.w	r3, #3
 8007e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e1c:	e014      	b.n	8007e48 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007e1e:	2300      	movs	r3, #0
 8007e20:	683a      	ldr	r2, [r7, #0]
 8007e22:	68b9      	ldr	r1, [r7, #8]
 8007e24:	6a38      	ldr	r0, [r7, #32]
 8007e26:	f000 fadf 	bl	80083e8 <xQueueGenericSend>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d00b      	beq.n	8007e48 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8007e36:	f06f 0301 	mvn.w	r3, #1
 8007e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e3c:	e004      	b.n	8007e48 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8007e3e:	f06f 0302 	mvn.w	r3, #2
 8007e42:	627b      	str	r3, [r7, #36]	; 0x24
 8007e44:	e000      	b.n	8007e48 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007e46:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3728      	adds	r7, #40	; 0x28
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20000560 	.word	0x20000560
 8007e58:	e000ed04 	.word	0xe000ed04

08007e5c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b08a      	sub	sp, #40	; 0x28
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	607a      	str	r2, [r7, #4]
 8007e68:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e72:	f3ef 8305 	mrs	r3, IPSR
 8007e76:	61fb      	str	r3, [r7, #28]
  return(result);
 8007e78:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10f      	bne.n	8007e9e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8007e82:	61bb      	str	r3, [r7, #24]
  return(result);
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d109      	bne.n	8007e9e <osMessageQueueGet+0x42>
 8007e8a:	4b2b      	ldr	r3, [pc, #172]	; (8007f38 <osMessageQueueGet+0xdc>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d12e      	bne.n	8007ef0 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e92:	f3ef 8311 	mrs	r3, BASEPRI
 8007e96:	617b      	str	r3, [r7, #20]
  return(result);
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d028      	beq.n	8007ef0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d005      	beq.n	8007eb0 <osMessageQueueGet+0x54>
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d002      	beq.n	8007eb0 <osMessageQueueGet+0x54>
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d003      	beq.n	8007eb8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8007eb0:	f06f 0303 	mvn.w	r3, #3
 8007eb4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007eb6:	e038      	b.n	8007f2a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007ebc:	f107 0310 	add.w	r3, r7, #16
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	68b9      	ldr	r1, [r7, #8]
 8007ec4:	6a38      	ldr	r0, [r7, #32]
 8007ec6:	f000 fd05 	bl	80088d4 <xQueueReceiveFromISR>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d003      	beq.n	8007ed8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8007ed0:	f06f 0302 	mvn.w	r3, #2
 8007ed4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007ed6:	e028      	b.n	8007f2a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d025      	beq.n	8007f2a <osMessageQueueGet+0xce>
 8007ede:	4b17      	ldr	r3, [pc, #92]	; (8007f3c <osMessageQueueGet+0xe0>)
 8007ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007eee:	e01c      	b.n	8007f2a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007ef0:	6a3b      	ldr	r3, [r7, #32]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d002      	beq.n	8007efc <osMessageQueueGet+0xa0>
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d103      	bne.n	8007f04 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8007efc:	f06f 0303 	mvn.w	r3, #3
 8007f00:	627b      	str	r3, [r7, #36]	; 0x24
 8007f02:	e013      	b.n	8007f2c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007f04:	683a      	ldr	r2, [r7, #0]
 8007f06:	68b9      	ldr	r1, [r7, #8]
 8007f08:	6a38      	ldr	r0, [r7, #32]
 8007f0a:	f000 fc03 	bl	8008714 <xQueueReceive>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d00b      	beq.n	8007f2c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d003      	beq.n	8007f22 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8007f1a:	f06f 0301 	mvn.w	r3, #1
 8007f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f20:	e004      	b.n	8007f2c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8007f22:	f06f 0302 	mvn.w	r3, #2
 8007f26:	627b      	str	r3, [r7, #36]	; 0x24
 8007f28:	e000      	b.n	8007f2c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007f2a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3728      	adds	r7, #40	; 0x28
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	20000560 	.word	0x20000560
 8007f3c:	e000ed04 	.word	0xe000ed04

08007f40 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b088      	sub	sp, #32
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d102      	bne.n	8007f58 <osMessageQueueGetCount+0x18>
    count = 0U;
 8007f52:	2300      	movs	r3, #0
 8007f54:	61fb      	str	r3, [r7, #28]
 8007f56:	e01e      	b.n	8007f96 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f58:	f3ef 8305 	mrs	r3, IPSR
 8007f5c:	617b      	str	r3, [r7, #20]
  return(result);
 8007f5e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10f      	bne.n	8007f84 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f64:	f3ef 8310 	mrs	r3, PRIMASK
 8007f68:	613b      	str	r3, [r7, #16]
  return(result);
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d109      	bne.n	8007f84 <osMessageQueueGetCount+0x44>
 8007f70:	4b0b      	ldr	r3, [pc, #44]	; (8007fa0 <osMessageQueueGetCount+0x60>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d10a      	bne.n	8007f8e <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f78:	f3ef 8311 	mrs	r3, BASEPRI
 8007f7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d004      	beq.n	8007f8e <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8007f84:	69b8      	ldr	r0, [r7, #24]
 8007f86:	f000 fd43 	bl	8008a10 <uxQueueMessagesWaitingFromISR>
 8007f8a:	61f8      	str	r0, [r7, #28]
 8007f8c:	e003      	b.n	8007f96 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8007f8e:	69b8      	ldr	r0, [r7, #24]
 8007f90:	f000 fd20 	bl	80089d4 <uxQueueMessagesWaiting>
 8007f94:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8007f96:	69fb      	ldr	r3, [r7, #28]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3720      	adds	r7, #32
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	20000560 	.word	0x20000560

08007fa4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	4a06      	ldr	r2, [pc, #24]	; (8007fcc <vApplicationGetIdleTaskMemory+0x28>)
 8007fb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	4a05      	ldr	r2, [pc, #20]	; (8007fd0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007fba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2280      	movs	r2, #128	; 0x80
 8007fc0:	601a      	str	r2, [r3, #0]
}
 8007fc2:	bf00      	nop
 8007fc4:	3714      	adds	r7, #20
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bc80      	pop	{r7}
 8007fca:	4770      	bx	lr
 8007fcc:	20000564 	.word	0x20000564
 8007fd0:	2000061c 	.word	0x2000061c

08007fd4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	4a07      	ldr	r2, [pc, #28]	; (8008000 <vApplicationGetTimerTaskMemory+0x2c>)
 8007fe4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	4a06      	ldr	r2, [pc, #24]	; (8008004 <vApplicationGetTimerTaskMemory+0x30>)
 8007fea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ff2:	601a      	str	r2, [r3, #0]
}
 8007ff4:	bf00      	nop
 8007ff6:	3714      	adds	r7, #20
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bc80      	pop	{r7}
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	2000081c 	.word	0x2000081c
 8008004:	200008d4 	.word	0x200008d4

08008008 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f103 0208 	add.w	r2, r3, #8
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f04f 32ff 	mov.w	r2, #4294967295
 8008020:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f103 0208 	add.w	r2, r3, #8
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f103 0208 	add.w	r2, r3, #8
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	bc80      	pop	{r7}
 8008044:	4770      	bx	lr

08008046 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008046:	b480      	push	{r7}
 8008048:	b083      	sub	sp, #12
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008054:	bf00      	nop
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	bc80      	pop	{r7}
 800805c:	4770      	bx	lr

0800805e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800805e:	b480      	push	{r7}
 8008060:	b085      	sub	sp, #20
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	689a      	ldr	r2, [r3, #8]
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	683a      	ldr	r2, [r7, #0]
 8008082:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	1c5a      	adds	r2, r3, #1
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	601a      	str	r2, [r3, #0]
}
 800809a:	bf00      	nop
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	bc80      	pop	{r7}
 80080a2:	4770      	bx	lr

080080a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ba:	d103      	bne.n	80080c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	691b      	ldr	r3, [r3, #16]
 80080c0:	60fb      	str	r3, [r7, #12]
 80080c2:	e00c      	b.n	80080de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	3308      	adds	r3, #8
 80080c8:	60fb      	str	r3, [r7, #12]
 80080ca:	e002      	b.n	80080d2 <vListInsert+0x2e>
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	60fb      	str	r3, [r7, #12]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d2f6      	bcs.n	80080cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	685a      	ldr	r2, [r3, #4]
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	683a      	ldr	r2, [r7, #0]
 80080ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	1c5a      	adds	r2, r3, #1
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	601a      	str	r2, [r3, #0]
}
 800810a:	bf00      	nop
 800810c:	3714      	adds	r7, #20
 800810e:	46bd      	mov	sp, r7
 8008110:	bc80      	pop	{r7}
 8008112:	4770      	bx	lr

08008114 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	6892      	ldr	r2, [r2, #8]
 800812a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	6852      	ldr	r2, [r2, #4]
 8008134:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	429a      	cmp	r2, r3
 800813e:	d103      	bne.n	8008148 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	689a      	ldr	r2, [r3, #8]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	1e5a      	subs	r2, r3, #1
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
}
 800815c:	4618      	mov	r0, r3
 800815e:	3714      	adds	r7, #20
 8008160:	46bd      	mov	sp, r7
 8008162:	bc80      	pop	{r7}
 8008164:	4770      	bx	lr
	...

08008168 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d10a      	bne.n	8008192 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800817c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008180:	f383 8811 	msr	BASEPRI, r3
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800818e:	bf00      	nop
 8008190:	e7fe      	b.n	8008190 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008192:	f002 f94b 	bl	800a42c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800819e:	68f9      	ldr	r1, [r7, #12]
 80081a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80081a2:	fb01 f303 	mul.w	r3, r1, r3
 80081a6:	441a      	add	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c2:	3b01      	subs	r3, #1
 80081c4:	68f9      	ldr	r1, [r7, #12]
 80081c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80081c8:	fb01 f303 	mul.w	r3, r1, r3
 80081cc:	441a      	add	r2, r3
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	22ff      	movs	r2, #255	; 0xff
 80081d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	22ff      	movs	r2, #255	; 0xff
 80081de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d114      	bne.n	8008212 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d01a      	beq.n	8008226 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	3310      	adds	r3, #16
 80081f4:	4618      	mov	r0, r3
 80081f6:	f001 fa13 	bl	8009620 <xTaskRemoveFromEventList>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d012      	beq.n	8008226 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008200:	4b0c      	ldr	r3, [pc, #48]	; (8008234 <xQueueGenericReset+0xcc>)
 8008202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008206:	601a      	str	r2, [r3, #0]
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	e009      	b.n	8008226 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	3310      	adds	r3, #16
 8008216:	4618      	mov	r0, r3
 8008218:	f7ff fef6 	bl	8008008 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	3324      	adds	r3, #36	; 0x24
 8008220:	4618      	mov	r0, r3
 8008222:	f7ff fef1 	bl	8008008 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008226:	f002 f931 	bl	800a48c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800822a:	2301      	movs	r3, #1
}
 800822c:	4618      	mov	r0, r3
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	e000ed04 	.word	0xe000ed04

08008238 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008238:	b580      	push	{r7, lr}
 800823a:	b08e      	sub	sp, #56	; 0x38
 800823c:	af02      	add	r7, sp, #8
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
 8008244:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10a      	bne.n	8008262 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800824c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008250:	f383 8811 	msr	BASEPRI, r3
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	f3bf 8f4f 	dsb	sy
 800825c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800825e:	bf00      	nop
 8008260:	e7fe      	b.n	8008260 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10a      	bne.n	800827e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826c:	f383 8811 	msr	BASEPRI, r3
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	627b      	str	r3, [r7, #36]	; 0x24
}
 800827a:	bf00      	nop
 800827c:	e7fe      	b.n	800827c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d002      	beq.n	800828a <xQueueGenericCreateStatic+0x52>
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d001      	beq.n	800828e <xQueueGenericCreateStatic+0x56>
 800828a:	2301      	movs	r3, #1
 800828c:	e000      	b.n	8008290 <xQueueGenericCreateStatic+0x58>
 800828e:	2300      	movs	r3, #0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10a      	bne.n	80082aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008298:	f383 8811 	msr	BASEPRI, r3
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	f3bf 8f4f 	dsb	sy
 80082a4:	623b      	str	r3, [r7, #32]
}
 80082a6:	bf00      	nop
 80082a8:	e7fe      	b.n	80082a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d102      	bne.n	80082b6 <xQueueGenericCreateStatic+0x7e>
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d101      	bne.n	80082ba <xQueueGenericCreateStatic+0x82>
 80082b6:	2301      	movs	r3, #1
 80082b8:	e000      	b.n	80082bc <xQueueGenericCreateStatic+0x84>
 80082ba:	2300      	movs	r3, #0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10a      	bne.n	80082d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	61fb      	str	r3, [r7, #28]
}
 80082d2:	bf00      	nop
 80082d4:	e7fe      	b.n	80082d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80082d6:	2350      	movs	r3, #80	; 0x50
 80082d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	2b50      	cmp	r3, #80	; 0x50
 80082de:	d00a      	beq.n	80082f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80082e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e4:	f383 8811 	msr	BASEPRI, r3
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	61bb      	str	r3, [r7, #24]
}
 80082f2:	bf00      	nop
 80082f4:	e7fe      	b.n	80082f4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80082fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00d      	beq.n	800831c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008302:	2201      	movs	r2, #1
 8008304:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008308:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800830c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	4613      	mov	r3, r2
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	68b9      	ldr	r1, [r7, #8]
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f000 f843 	bl	80083a2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800831c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800831e:	4618      	mov	r0, r3
 8008320:	3730      	adds	r7, #48	; 0x30
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008326:	b580      	push	{r7, lr}
 8008328:	b08a      	sub	sp, #40	; 0x28
 800832a:	af02      	add	r7, sp, #8
 800832c:	60f8      	str	r0, [r7, #12]
 800832e:	60b9      	str	r1, [r7, #8]
 8008330:	4613      	mov	r3, r2
 8008332:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d10a      	bne.n	8008350 <xQueueGenericCreate+0x2a>
	__asm volatile
 800833a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833e:	f383 8811 	msr	BASEPRI, r3
 8008342:	f3bf 8f6f 	isb	sy
 8008346:	f3bf 8f4f 	dsb	sy
 800834a:	613b      	str	r3, [r7, #16]
}
 800834c:	bf00      	nop
 800834e:	e7fe      	b.n	800834e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d102      	bne.n	800835c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008356:	2300      	movs	r3, #0
 8008358:	61fb      	str	r3, [r7, #28]
 800835a:	e004      	b.n	8008366 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	68ba      	ldr	r2, [r7, #8]
 8008360:	fb02 f303 	mul.w	r3, r2, r3
 8008364:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	3350      	adds	r3, #80	; 0x50
 800836a:	4618      	mov	r0, r3
 800836c:	f002 f95e 	bl	800a62c <pvPortMalloc>
 8008370:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00f      	beq.n	8008398 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	3350      	adds	r3, #80	; 0x50
 800837c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008386:	79fa      	ldrb	r2, [r7, #7]
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	9300      	str	r3, [sp, #0]
 800838c:	4613      	mov	r3, r2
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	68b9      	ldr	r1, [r7, #8]
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f000 f805 	bl	80083a2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008398:	69bb      	ldr	r3, [r7, #24]
	}
 800839a:	4618      	mov	r0, r3
 800839c:	3720      	adds	r7, #32
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b084      	sub	sp, #16
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	60f8      	str	r0, [r7, #12]
 80083aa:	60b9      	str	r1, [r7, #8]
 80083ac:	607a      	str	r2, [r7, #4]
 80083ae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d103      	bne.n	80083be <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	69ba      	ldr	r2, [r7, #24]
 80083ba:	601a      	str	r2, [r3, #0]
 80083bc:	e002      	b.n	80083c4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	68ba      	ldr	r2, [r7, #8]
 80083ce:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80083d0:	2101      	movs	r1, #1
 80083d2:	69b8      	ldr	r0, [r7, #24]
 80083d4:	f7ff fec8 	bl	8008168 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	78fa      	ldrb	r2, [r7, #3]
 80083dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80083e0:	bf00      	nop
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b08e      	sub	sp, #56	; 0x38
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
 80083f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80083f6:	2300      	movs	r3, #0
 80083f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80083fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008400:	2b00      	cmp	r3, #0
 8008402:	d10a      	bne.n	800841a <xQueueGenericSend+0x32>
	__asm volatile
 8008404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008408:	f383 8811 	msr	BASEPRI, r3
 800840c:	f3bf 8f6f 	isb	sy
 8008410:	f3bf 8f4f 	dsb	sy
 8008414:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008416:	bf00      	nop
 8008418:	e7fe      	b.n	8008418 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d103      	bne.n	8008428 <xQueueGenericSend+0x40>
 8008420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008424:	2b00      	cmp	r3, #0
 8008426:	d101      	bne.n	800842c <xQueueGenericSend+0x44>
 8008428:	2301      	movs	r3, #1
 800842a:	e000      	b.n	800842e <xQueueGenericSend+0x46>
 800842c:	2300      	movs	r3, #0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d10a      	bne.n	8008448 <xQueueGenericSend+0x60>
	__asm volatile
 8008432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008436:	f383 8811 	msr	BASEPRI, r3
 800843a:	f3bf 8f6f 	isb	sy
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008444:	bf00      	nop
 8008446:	e7fe      	b.n	8008446 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	2b02      	cmp	r3, #2
 800844c:	d103      	bne.n	8008456 <xQueueGenericSend+0x6e>
 800844e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008452:	2b01      	cmp	r3, #1
 8008454:	d101      	bne.n	800845a <xQueueGenericSend+0x72>
 8008456:	2301      	movs	r3, #1
 8008458:	e000      	b.n	800845c <xQueueGenericSend+0x74>
 800845a:	2300      	movs	r3, #0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d10a      	bne.n	8008476 <xQueueGenericSend+0x8e>
	__asm volatile
 8008460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	623b      	str	r3, [r7, #32]
}
 8008472:	bf00      	nop
 8008474:	e7fe      	b.n	8008474 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008476:	f001 fa99 	bl	80099ac <xTaskGetSchedulerState>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d102      	bne.n	8008486 <xQueueGenericSend+0x9e>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d101      	bne.n	800848a <xQueueGenericSend+0xa2>
 8008486:	2301      	movs	r3, #1
 8008488:	e000      	b.n	800848c <xQueueGenericSend+0xa4>
 800848a:	2300      	movs	r3, #0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d10a      	bne.n	80084a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8008490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008494:	f383 8811 	msr	BASEPRI, r3
 8008498:	f3bf 8f6f 	isb	sy
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	61fb      	str	r3, [r7, #28]
}
 80084a2:	bf00      	nop
 80084a4:	e7fe      	b.n	80084a4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084a6:	f001 ffc1 	bl	800a42c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80084aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d302      	bcc.n	80084bc <xQueueGenericSend+0xd4>
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d129      	bne.n	8008510 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80084bc:	683a      	ldr	r2, [r7, #0]
 80084be:	68b9      	ldr	r1, [r7, #8]
 80084c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084c2:	f000 fac0 	bl	8008a46 <prvCopyDataToQueue>
 80084c6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d010      	beq.n	80084f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d2:	3324      	adds	r3, #36	; 0x24
 80084d4:	4618      	mov	r0, r3
 80084d6:	f001 f8a3 	bl	8009620 <xTaskRemoveFromEventList>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d013      	beq.n	8008508 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80084e0:	4b3f      	ldr	r3, [pc, #252]	; (80085e0 <xQueueGenericSend+0x1f8>)
 80084e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084e6:	601a      	str	r2, [r3, #0]
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	f3bf 8f6f 	isb	sy
 80084f0:	e00a      	b.n	8008508 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80084f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d007      	beq.n	8008508 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80084f8:	4b39      	ldr	r3, [pc, #228]	; (80085e0 <xQueueGenericSend+0x1f8>)
 80084fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084fe:	601a      	str	r2, [r3, #0]
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008508:	f001 ffc0 	bl	800a48c <vPortExitCritical>
				return pdPASS;
 800850c:	2301      	movs	r3, #1
 800850e:	e063      	b.n	80085d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d103      	bne.n	800851e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008516:	f001 ffb9 	bl	800a48c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800851a:	2300      	movs	r3, #0
 800851c:	e05c      	b.n	80085d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800851e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008520:	2b00      	cmp	r3, #0
 8008522:	d106      	bne.n	8008532 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008524:	f107 0314 	add.w	r3, r7, #20
 8008528:	4618      	mov	r0, r3
 800852a:	f001 f8dd 	bl	80096e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800852e:	2301      	movs	r3, #1
 8008530:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008532:	f001 ffab 	bl	800a48c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008536:	f000 fe47 	bl	80091c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800853a:	f001 ff77 	bl	800a42c <vPortEnterCritical>
 800853e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008540:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008544:	b25b      	sxtb	r3, r3
 8008546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854a:	d103      	bne.n	8008554 <xQueueGenericSend+0x16c>
 800854c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854e:	2200      	movs	r2, #0
 8008550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008556:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800855a:	b25b      	sxtb	r3, r3
 800855c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008560:	d103      	bne.n	800856a <xQueueGenericSend+0x182>
 8008562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008564:	2200      	movs	r2, #0
 8008566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800856a:	f001 ff8f 	bl	800a48c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800856e:	1d3a      	adds	r2, r7, #4
 8008570:	f107 0314 	add.w	r3, r7, #20
 8008574:	4611      	mov	r1, r2
 8008576:	4618      	mov	r0, r3
 8008578:	f001 f8cc 	bl	8009714 <xTaskCheckForTimeOut>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d124      	bne.n	80085cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008582:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008584:	f000 fb57 	bl	8008c36 <prvIsQueueFull>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d018      	beq.n	80085c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008590:	3310      	adds	r3, #16
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	4611      	mov	r1, r2
 8008596:	4618      	mov	r0, r3
 8008598:	f000 fff2 	bl	8009580 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800859c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800859e:	f000 fae2 	bl	8008b66 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80085a2:	f000 fe1f 	bl	80091e4 <xTaskResumeAll>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f47f af7c 	bne.w	80084a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80085ae:	4b0c      	ldr	r3, [pc, #48]	; (80085e0 <xQueueGenericSend+0x1f8>)
 80085b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085b4:	601a      	str	r2, [r3, #0]
 80085b6:	f3bf 8f4f 	dsb	sy
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	e772      	b.n	80084a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80085c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085c2:	f000 fad0 	bl	8008b66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085c6:	f000 fe0d 	bl	80091e4 <xTaskResumeAll>
 80085ca:	e76c      	b.n	80084a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80085cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085ce:	f000 faca 	bl	8008b66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085d2:	f000 fe07 	bl	80091e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80085d6:	2300      	movs	r3, #0
		}
	}
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3738      	adds	r7, #56	; 0x38
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	e000ed04 	.word	0xe000ed04

080085e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b08e      	sub	sp, #56	; 0x38
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
 80085f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80085f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10a      	bne.n	8008612 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80085fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800860e:	bf00      	nop
 8008610:	e7fe      	b.n	8008610 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d103      	bne.n	8008620 <xQueueGenericSendFromISR+0x3c>
 8008618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861c:	2b00      	cmp	r3, #0
 800861e:	d101      	bne.n	8008624 <xQueueGenericSendFromISR+0x40>
 8008620:	2301      	movs	r3, #1
 8008622:	e000      	b.n	8008626 <xQueueGenericSendFromISR+0x42>
 8008624:	2300      	movs	r3, #0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d10a      	bne.n	8008640 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800862a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862e:	f383 8811 	msr	BASEPRI, r3
 8008632:	f3bf 8f6f 	isb	sy
 8008636:	f3bf 8f4f 	dsb	sy
 800863a:	623b      	str	r3, [r7, #32]
}
 800863c:	bf00      	nop
 800863e:	e7fe      	b.n	800863e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	2b02      	cmp	r3, #2
 8008644:	d103      	bne.n	800864e <xQueueGenericSendFromISR+0x6a>
 8008646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800864a:	2b01      	cmp	r3, #1
 800864c:	d101      	bne.n	8008652 <xQueueGenericSendFromISR+0x6e>
 800864e:	2301      	movs	r3, #1
 8008650:	e000      	b.n	8008654 <xQueueGenericSendFromISR+0x70>
 8008652:	2300      	movs	r3, #0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d10a      	bne.n	800866e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865c:	f383 8811 	msr	BASEPRI, r3
 8008660:	f3bf 8f6f 	isb	sy
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	61fb      	str	r3, [r7, #28]
}
 800866a:	bf00      	nop
 800866c:	e7fe      	b.n	800866c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800866e:	f001 ff9f 	bl	800a5b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008672:	f3ef 8211 	mrs	r2, BASEPRI
 8008676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867a:	f383 8811 	msr	BASEPRI, r3
 800867e:	f3bf 8f6f 	isb	sy
 8008682:	f3bf 8f4f 	dsb	sy
 8008686:	61ba      	str	r2, [r7, #24]
 8008688:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800868a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800868c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800868e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008696:	429a      	cmp	r2, r3
 8008698:	d302      	bcc.n	80086a0 <xQueueGenericSendFromISR+0xbc>
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	2b02      	cmp	r3, #2
 800869e:	d12c      	bne.n	80086fa <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80086a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	68b9      	ldr	r1, [r7, #8]
 80086ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086b0:	f000 f9c9 	bl	8008a46 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80086b4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80086b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086bc:	d112      	bne.n	80086e4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d016      	beq.n	80086f4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c8:	3324      	adds	r3, #36	; 0x24
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 ffa8 	bl	8009620 <xTaskRemoveFromEventList>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00e      	beq.n	80086f4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00b      	beq.n	80086f4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	601a      	str	r2, [r3, #0]
 80086e2:	e007      	b.n	80086f4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80086e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80086e8:	3301      	adds	r3, #1
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	b25a      	sxtb	r2, r3
 80086ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80086f4:	2301      	movs	r3, #1
 80086f6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80086f8:	e001      	b.n	80086fe <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80086fa:	2300      	movs	r3, #0
 80086fc:	637b      	str	r3, [r7, #52]	; 0x34
 80086fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008700:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008708:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800870a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800870c:	4618      	mov	r0, r3
 800870e:	3738      	adds	r7, #56	; 0x38
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b08c      	sub	sp, #48	; 0x30
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008720:	2300      	movs	r3, #0
 8008722:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10a      	bne.n	8008744 <xQueueReceive+0x30>
	__asm volatile
 800872e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	623b      	str	r3, [r7, #32]
}
 8008740:	bf00      	nop
 8008742:	e7fe      	b.n	8008742 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d103      	bne.n	8008752 <xQueueReceive+0x3e>
 800874a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874e:	2b00      	cmp	r3, #0
 8008750:	d101      	bne.n	8008756 <xQueueReceive+0x42>
 8008752:	2301      	movs	r3, #1
 8008754:	e000      	b.n	8008758 <xQueueReceive+0x44>
 8008756:	2300      	movs	r3, #0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10a      	bne.n	8008772 <xQueueReceive+0x5e>
	__asm volatile
 800875c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008760:	f383 8811 	msr	BASEPRI, r3
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	61fb      	str	r3, [r7, #28]
}
 800876e:	bf00      	nop
 8008770:	e7fe      	b.n	8008770 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008772:	f001 f91b 	bl	80099ac <xTaskGetSchedulerState>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d102      	bne.n	8008782 <xQueueReceive+0x6e>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d101      	bne.n	8008786 <xQueueReceive+0x72>
 8008782:	2301      	movs	r3, #1
 8008784:	e000      	b.n	8008788 <xQueueReceive+0x74>
 8008786:	2300      	movs	r3, #0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10a      	bne.n	80087a2 <xQueueReceive+0x8e>
	__asm volatile
 800878c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008790:	f383 8811 	msr	BASEPRI, r3
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	61bb      	str	r3, [r7, #24]
}
 800879e:	bf00      	nop
 80087a0:	e7fe      	b.n	80087a0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80087a2:	f001 fe43 	bl	800a42c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d01f      	beq.n	80087f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80087b2:	68b9      	ldr	r1, [r7, #8]
 80087b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087b6:	f000 f9b0 	bl	8008b1a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	1e5a      	subs	r2, r3, #1
 80087be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00f      	beq.n	80087ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087cc:	3310      	adds	r3, #16
 80087ce:	4618      	mov	r0, r3
 80087d0:	f000 ff26 	bl	8009620 <xTaskRemoveFromEventList>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d007      	beq.n	80087ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80087da:	4b3d      	ldr	r3, [pc, #244]	; (80088d0 <xQueueReceive+0x1bc>)
 80087dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087e0:	601a      	str	r2, [r3, #0]
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80087ea:	f001 fe4f 	bl	800a48c <vPortExitCritical>
				return pdPASS;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e069      	b.n	80088c6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d103      	bne.n	8008800 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80087f8:	f001 fe48 	bl	800a48c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80087fc:	2300      	movs	r3, #0
 80087fe:	e062      	b.n	80088c6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008802:	2b00      	cmp	r3, #0
 8008804:	d106      	bne.n	8008814 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008806:	f107 0310 	add.w	r3, r7, #16
 800880a:	4618      	mov	r0, r3
 800880c:	f000 ff6c 	bl	80096e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008810:	2301      	movs	r3, #1
 8008812:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008814:	f001 fe3a 	bl	800a48c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008818:	f000 fcd6 	bl	80091c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800881c:	f001 fe06 	bl	800a42c <vPortEnterCritical>
 8008820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008822:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008826:	b25b      	sxtb	r3, r3
 8008828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882c:	d103      	bne.n	8008836 <xQueueReceive+0x122>
 800882e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008830:	2200      	movs	r2, #0
 8008832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008838:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800883c:	b25b      	sxtb	r3, r3
 800883e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008842:	d103      	bne.n	800884c <xQueueReceive+0x138>
 8008844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008846:	2200      	movs	r2, #0
 8008848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800884c:	f001 fe1e 	bl	800a48c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008850:	1d3a      	adds	r2, r7, #4
 8008852:	f107 0310 	add.w	r3, r7, #16
 8008856:	4611      	mov	r1, r2
 8008858:	4618      	mov	r0, r3
 800885a:	f000 ff5b 	bl	8009714 <xTaskCheckForTimeOut>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d123      	bne.n	80088ac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008866:	f000 f9d0 	bl	8008c0a <prvIsQueueEmpty>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d017      	beq.n	80088a0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008872:	3324      	adds	r3, #36	; 0x24
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	4611      	mov	r1, r2
 8008878:	4618      	mov	r0, r3
 800887a:	f000 fe81 	bl	8009580 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800887e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008880:	f000 f971 	bl	8008b66 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008884:	f000 fcae 	bl	80091e4 <xTaskResumeAll>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d189      	bne.n	80087a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800888e:	4b10      	ldr	r3, [pc, #64]	; (80088d0 <xQueueReceive+0x1bc>)
 8008890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008894:	601a      	str	r2, [r3, #0]
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	f3bf 8f6f 	isb	sy
 800889e:	e780      	b.n	80087a2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80088a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088a2:	f000 f960 	bl	8008b66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088a6:	f000 fc9d 	bl	80091e4 <xTaskResumeAll>
 80088aa:	e77a      	b.n	80087a2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80088ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088ae:	f000 f95a 	bl	8008b66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088b2:	f000 fc97 	bl	80091e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088b8:	f000 f9a7 	bl	8008c0a <prvIsQueueEmpty>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f43f af6f 	beq.w	80087a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80088c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3730      	adds	r7, #48	; 0x30
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	e000ed04 	.word	0xe000ed04

080088d4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b08e      	sub	sp, #56	; 0x38
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80088e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10a      	bne.n	8008900 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80088ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ee:	f383 8811 	msr	BASEPRI, r3
 80088f2:	f3bf 8f6f 	isb	sy
 80088f6:	f3bf 8f4f 	dsb	sy
 80088fa:	623b      	str	r3, [r7, #32]
}
 80088fc:	bf00      	nop
 80088fe:	e7fe      	b.n	80088fe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d103      	bne.n	800890e <xQueueReceiveFromISR+0x3a>
 8008906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890a:	2b00      	cmp	r3, #0
 800890c:	d101      	bne.n	8008912 <xQueueReceiveFromISR+0x3e>
 800890e:	2301      	movs	r3, #1
 8008910:	e000      	b.n	8008914 <xQueueReceiveFromISR+0x40>
 8008912:	2300      	movs	r3, #0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d10a      	bne.n	800892e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891c:	f383 8811 	msr	BASEPRI, r3
 8008920:	f3bf 8f6f 	isb	sy
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	61fb      	str	r3, [r7, #28]
}
 800892a:	bf00      	nop
 800892c:	e7fe      	b.n	800892c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800892e:	f001 fe3f 	bl	800a5b0 <vPortValidateInterruptPriority>
	__asm volatile
 8008932:	f3ef 8211 	mrs	r2, BASEPRI
 8008936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893a:	f383 8811 	msr	BASEPRI, r3
 800893e:	f3bf 8f6f 	isb	sy
 8008942:	f3bf 8f4f 	dsb	sy
 8008946:	61ba      	str	r2, [r7, #24]
 8008948:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800894a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800894c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800894e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008952:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008956:	2b00      	cmp	r3, #0
 8008958:	d02f      	beq.n	80089ba <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800895a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008964:	68b9      	ldr	r1, [r7, #8]
 8008966:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008968:	f000 f8d7 	bl	8008b1a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800896c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896e:	1e5a      	subs	r2, r3, #1
 8008970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008972:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008974:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897c:	d112      	bne.n	80089a4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800897e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008980:	691b      	ldr	r3, [r3, #16]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d016      	beq.n	80089b4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008988:	3310      	adds	r3, #16
 800898a:	4618      	mov	r0, r3
 800898c:	f000 fe48 	bl	8009620 <xTaskRemoveFromEventList>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00e      	beq.n	80089b4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00b      	beq.n	80089b4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	601a      	str	r2, [r3, #0]
 80089a2:	e007      	b.n	80089b4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80089a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089a8:	3301      	adds	r3, #1
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	b25a      	sxtb	r2, r3
 80089ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80089b4:	2301      	movs	r3, #1
 80089b6:	637b      	str	r3, [r7, #52]	; 0x34
 80089b8:	e001      	b.n	80089be <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80089ba:	2300      	movs	r3, #0
 80089bc:	637b      	str	r3, [r7, #52]	; 0x34
 80089be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	f383 8811 	msr	BASEPRI, r3
}
 80089c8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80089ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3738      	adds	r7, #56	; 0x38
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d10a      	bne.n	80089f8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80089e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e6:	f383 8811 	msr	BASEPRI, r3
 80089ea:	f3bf 8f6f 	isb	sy
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	60bb      	str	r3, [r7, #8]
}
 80089f4:	bf00      	nop
 80089f6:	e7fe      	b.n	80089f6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80089f8:	f001 fd18 	bl	800a42c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a00:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008a02:	f001 fd43 	bl	800a48c <vPortExitCritical>

	return uxReturn;
 8008a06:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3710      	adds	r7, #16
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8008a10:	b480      	push	{r7}
 8008a12:	b085      	sub	sp, #20
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d10a      	bne.n	8008a34 <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	60bb      	str	r3, [r7, #8]
}
 8008a30:	bf00      	nop
 8008a32:	e7fe      	b.n	8008a32 <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a38:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bc80      	pop	{r7}
 8008a44:	4770      	bx	lr

08008a46 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b086      	sub	sp, #24
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	60f8      	str	r0, [r7, #12]
 8008a4e:	60b9      	str	r1, [r7, #8]
 8008a50:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008a52:	2300      	movs	r3, #0
 8008a54:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a5a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10d      	bne.n	8008a80 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d14d      	bne.n	8008b08 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	4618      	mov	r0, r3
 8008a72:	f000 ffb9 	bl	80099e8 <xTaskPriorityDisinherit>
 8008a76:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	605a      	str	r2, [r3, #4]
 8008a7e:	e043      	b.n	8008b08 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d119      	bne.n	8008aba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6898      	ldr	r0, [r3, #8]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8e:	461a      	mov	r2, r3
 8008a90:	68b9      	ldr	r1, [r7, #8]
 8008a92:	f004 fbca 	bl	800d22a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	689a      	ldr	r2, [r3, #8]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9e:	441a      	add	r2, r3
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	689a      	ldr	r2, [r3, #8]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d32b      	bcc.n	8008b08 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	609a      	str	r2, [r3, #8]
 8008ab8:	e026      	b.n	8008b08 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	68d8      	ldr	r0, [r3, #12]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	68b9      	ldr	r1, [r7, #8]
 8008ac6:	f004 fbb0 	bl	800d22a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	68da      	ldr	r2, [r3, #12]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad2:	425b      	negs	r3, r3
 8008ad4:	441a      	add	r2, r3
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	68da      	ldr	r2, [r3, #12]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d207      	bcs.n	8008af6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	685a      	ldr	r2, [r3, #4]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aee:	425b      	negs	r3, r3
 8008af0:	441a      	add	r2, r3
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2b02      	cmp	r3, #2
 8008afa:	d105      	bne.n	8008b08 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d002      	beq.n	8008b08 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	3b01      	subs	r3, #1
 8008b06:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	1c5a      	adds	r2, r3, #1
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008b10:	697b      	ldr	r3, [r7, #20]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3718      	adds	r7, #24
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b082      	sub	sp, #8
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
 8008b22:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d018      	beq.n	8008b5e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	68da      	ldr	r2, [r3, #12]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b34:	441a      	add	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	68da      	ldr	r2, [r3, #12]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d303      	bcc.n	8008b4e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	68d9      	ldr	r1, [r3, #12]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b56:	461a      	mov	r2, r3
 8008b58:	6838      	ldr	r0, [r7, #0]
 8008b5a:	f004 fb66 	bl	800d22a <memcpy>
	}
}
 8008b5e:	bf00      	nop
 8008b60:	3708      	adds	r7, #8
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b084      	sub	sp, #16
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008b6e:	f001 fc5d 	bl	800a42c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b78:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b7a:	e011      	b.n	8008ba0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d012      	beq.n	8008baa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	3324      	adds	r3, #36	; 0x24
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f000 fd49 	bl	8009620 <xTaskRemoveFromEventList>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d001      	beq.n	8008b98 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008b94:	f000 fe20 	bl	80097d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008b98:	7bfb      	ldrb	r3, [r7, #15]
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	dce9      	bgt.n	8008b7c <prvUnlockQueue+0x16>
 8008ba8:	e000      	b.n	8008bac <prvUnlockQueue+0x46>
					break;
 8008baa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	22ff      	movs	r2, #255	; 0xff
 8008bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008bb4:	f001 fc6a 	bl	800a48c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008bb8:	f001 fc38 	bl	800a42c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bc2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008bc4:	e011      	b.n	8008bea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d012      	beq.n	8008bf4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	3310      	adds	r3, #16
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f000 fd24 	bl	8009620 <xTaskRemoveFromEventList>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d001      	beq.n	8008be2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008bde:	f000 fdfb 	bl	80097d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008be2:	7bbb      	ldrb	r3, [r7, #14]
 8008be4:	3b01      	subs	r3, #1
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008bea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	dce9      	bgt.n	8008bc6 <prvUnlockQueue+0x60>
 8008bf2:	e000      	b.n	8008bf6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008bf4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	22ff      	movs	r2, #255	; 0xff
 8008bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008bfe:	f001 fc45 	bl	800a48c <vPortExitCritical>
}
 8008c02:	bf00      	nop
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b084      	sub	sp, #16
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c12:	f001 fc0b 	bl	800a42c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d102      	bne.n	8008c24 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	60fb      	str	r3, [r7, #12]
 8008c22:	e001      	b.n	8008c28 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008c24:	2300      	movs	r3, #0
 8008c26:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c28:	f001 fc30 	bl	800a48c <vPortExitCritical>

	return xReturn;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b084      	sub	sp, #16
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c3e:	f001 fbf5 	bl	800a42c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d102      	bne.n	8008c54 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	60fb      	str	r3, [r7, #12]
 8008c52:	e001      	b.n	8008c58 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008c54:	2300      	movs	r3, #0
 8008c56:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c58:	f001 fc18 	bl	800a48c <vPortExitCritical>

	return xReturn;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
	...

08008c68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c72:	2300      	movs	r3, #0
 8008c74:	60fb      	str	r3, [r7, #12]
 8008c76:	e014      	b.n	8008ca2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008c78:	4a0e      	ldr	r2, [pc, #56]	; (8008cb4 <vQueueAddToRegistry+0x4c>)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d10b      	bne.n	8008c9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008c84:	490b      	ldr	r1, [pc, #44]	; (8008cb4 <vQueueAddToRegistry+0x4c>)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	683a      	ldr	r2, [r7, #0]
 8008c8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008c8e:	4a09      	ldr	r2, [pc, #36]	; (8008cb4 <vQueueAddToRegistry+0x4c>)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	00db      	lsls	r3, r3, #3
 8008c94:	4413      	add	r3, r2
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008c9a:	e006      	b.n	8008caa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	60fb      	str	r3, [r7, #12]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2b07      	cmp	r3, #7
 8008ca6:	d9e7      	bls.n	8008c78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ca8:	bf00      	nop
 8008caa:	bf00      	nop
 8008cac:	3714      	adds	r7, #20
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bc80      	pop	{r7}
 8008cb2:	4770      	bx	lr
 8008cb4:	20000cd4 	.word	0x20000cd4

08008cb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008cc8:	f001 fbb0 	bl	800a42c <vPortEnterCritical>
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cd2:	b25b      	sxtb	r3, r3
 8008cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd8:	d103      	bne.n	8008ce2 <vQueueWaitForMessageRestricted+0x2a>
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ce8:	b25b      	sxtb	r3, r3
 8008cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cee:	d103      	bne.n	8008cf8 <vQueueWaitForMessageRestricted+0x40>
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cf8:	f001 fbc8 	bl	800a48c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d106      	bne.n	8008d12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	3324      	adds	r3, #36	; 0x24
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	68b9      	ldr	r1, [r7, #8]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f000 fc5b 	bl	80095c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008d12:	6978      	ldr	r0, [r7, #20]
 8008d14:	f7ff ff27 	bl	8008b66 <prvUnlockQueue>
	}
 8008d18:	bf00      	nop
 8008d1a:	3718      	adds	r7, #24
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b08e      	sub	sp, #56	; 0x38
 8008d24:	af04      	add	r7, sp, #16
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	607a      	str	r2, [r7, #4]
 8008d2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d10a      	bne.n	8008d4a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d38:	f383 8811 	msr	BASEPRI, r3
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	623b      	str	r3, [r7, #32]
}
 8008d46:	bf00      	nop
 8008d48:	e7fe      	b.n	8008d48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10a      	bne.n	8008d66 <xTaskCreateStatic+0x46>
	__asm volatile
 8008d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d54:	f383 8811 	msr	BASEPRI, r3
 8008d58:	f3bf 8f6f 	isb	sy
 8008d5c:	f3bf 8f4f 	dsb	sy
 8008d60:	61fb      	str	r3, [r7, #28]
}
 8008d62:	bf00      	nop
 8008d64:	e7fe      	b.n	8008d64 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008d66:	23b8      	movs	r3, #184	; 0xb8
 8008d68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	2bb8      	cmp	r3, #184	; 0xb8
 8008d6e:	d00a      	beq.n	8008d86 <xTaskCreateStatic+0x66>
	__asm volatile
 8008d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	61bb      	str	r3, [r7, #24]
}
 8008d82:	bf00      	nop
 8008d84:	e7fe      	b.n	8008d84 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d01e      	beq.n	8008dca <xTaskCreateStatic+0xaa>
 8008d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d01b      	beq.n	8008dca <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d94:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d9a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9e:	2202      	movs	r2, #2
 8008da0:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008da4:	2300      	movs	r3, #0
 8008da6:	9303      	str	r3, [sp, #12]
 8008da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008daa:	9302      	str	r3, [sp, #8]
 8008dac:	f107 0314 	add.w	r3, r7, #20
 8008db0:	9301      	str	r3, [sp, #4]
 8008db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	68b9      	ldr	r1, [r7, #8]
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f000 f851 	bl	8008e64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008dc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008dc4:	f000 f8ec 	bl	8008fa0 <prvAddNewTaskToReadyList>
 8008dc8:	e001      	b.n	8008dce <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008dce:	697b      	ldr	r3, [r7, #20]
	}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3728      	adds	r7, #40	; 0x28
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b08c      	sub	sp, #48	; 0x30
 8008ddc:	af04      	add	r7, sp, #16
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	603b      	str	r3, [r7, #0]
 8008de4:	4613      	mov	r3, r2
 8008de6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008de8:	88fb      	ldrh	r3, [r7, #6]
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	4618      	mov	r0, r3
 8008dee:	f001 fc1d 	bl	800a62c <pvPortMalloc>
 8008df2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00e      	beq.n	8008e18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008dfa:	20b8      	movs	r0, #184	; 0xb8
 8008dfc:	f001 fc16 	bl	800a62c <pvPortMalloc>
 8008e00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d003      	beq.n	8008e10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	631a      	str	r2, [r3, #48]	; 0x30
 8008e0e:	e005      	b.n	8008e1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008e10:	6978      	ldr	r0, [r7, #20]
 8008e12:	f001 fccf 	bl	800a7b4 <vPortFree>
 8008e16:	e001      	b.n	8008e1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d017      	beq.n	8008e52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008e2a:	88fa      	ldrh	r2, [r7, #6]
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	9303      	str	r3, [sp, #12]
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	9302      	str	r3, [sp, #8]
 8008e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e36:	9301      	str	r3, [sp, #4]
 8008e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	68b9      	ldr	r1, [r7, #8]
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f000 f80f 	bl	8008e64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e46:	69f8      	ldr	r0, [r7, #28]
 8008e48:	f000 f8aa 	bl	8008fa0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	61bb      	str	r3, [r7, #24]
 8008e50:	e002      	b.n	8008e58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e52:	f04f 33ff 	mov.w	r3, #4294967295
 8008e56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008e58:	69bb      	ldr	r3, [r7, #24]
	}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3720      	adds	r7, #32
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
	...

08008e64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b088      	sub	sp, #32
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	607a      	str	r2, [r7, #4]
 8008e70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e74:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	21a5      	movs	r1, #165	; 0xa5
 8008e7e:	f003 fae6 	bl	800c44e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	4413      	add	r3, r2
 8008e92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	f023 0307 	bic.w	r3, r3, #7
 8008e9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	f003 0307 	and.w	r3, r3, #7
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00a      	beq.n	8008ebc <prvInitialiseNewTask+0x58>
	__asm volatile
 8008ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eaa:	f383 8811 	msr	BASEPRI, r3
 8008eae:	f3bf 8f6f 	isb	sy
 8008eb2:	f3bf 8f4f 	dsb	sy
 8008eb6:	617b      	str	r3, [r7, #20]
}
 8008eb8:	bf00      	nop
 8008eba:	e7fe      	b.n	8008eba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	61fb      	str	r3, [r7, #28]
 8008ec0:	e012      	b.n	8008ee8 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ec2:	68ba      	ldr	r2, [r7, #8]
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	7819      	ldrb	r1, [r3, #0]
 8008eca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	4413      	add	r3, r2
 8008ed0:	3334      	adds	r3, #52	; 0x34
 8008ed2:	460a      	mov	r2, r1
 8008ed4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008ed6:	68ba      	ldr	r2, [r7, #8]
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	4413      	add	r3, r2
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d006      	beq.n	8008ef0 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	61fb      	str	r3, [r7, #28]
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	2b1f      	cmp	r3, #31
 8008eec:	d9e9      	bls.n	8008ec2 <prvInitialiseNewTask+0x5e>
 8008eee:	e000      	b.n	8008ef2 <prvInitialiseNewTask+0x8e>
		{
			break;
 8008ef0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efc:	2b37      	cmp	r3, #55	; 0x37
 8008efe:	d901      	bls.n	8008f04 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008f00:	2337      	movs	r3, #55	; 0x37
 8008f02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f0e:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8008f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f12:	2200      	movs	r2, #0
 8008f14:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f18:	3304      	adds	r3, #4
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7ff f893 	bl	8008046 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f22:	3318      	adds	r3, #24
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7ff f88e 	bl	8008046 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f42:	2200      	movs	r2, #0
 8008f44:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f52:	3364      	adds	r3, #100	; 0x64
 8008f54:	224c      	movs	r2, #76	; 0x4c
 8008f56:	2100      	movs	r1, #0
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f003 fa78 	bl	800c44e <memset>
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f60:	4a0c      	ldr	r2, [pc, #48]	; (8008f94 <prvInitialiseNewTask+0x130>)
 8008f62:	669a      	str	r2, [r3, #104]	; 0x68
 8008f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f66:	4a0c      	ldr	r2, [pc, #48]	; (8008f98 <prvInitialiseNewTask+0x134>)
 8008f68:	66da      	str	r2, [r3, #108]	; 0x6c
 8008f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6c:	4a0b      	ldr	r2, [pc, #44]	; (8008f9c <prvInitialiseNewTask+0x138>)
 8008f6e:	671a      	str	r2, [r3, #112]	; 0x70
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f70:	683a      	ldr	r2, [r7, #0]
 8008f72:	68f9      	ldr	r1, [r7, #12]
 8008f74:	69b8      	ldr	r0, [r7, #24]
 8008f76:	f001 f96b 	bl	800a250 <pxPortInitialiseStack>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d002      	beq.n	8008f8c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f8a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f8c:	bf00      	nop
 8008f8e:	3720      	adds	r7, #32
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	20003368 	.word	0x20003368
 8008f98:	200033d0 	.word	0x200033d0
 8008f9c:	20003438 	.word	0x20003438

08008fa0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008fa8:	f001 fa40 	bl	800a42c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008fac:	4b2d      	ldr	r3, [pc, #180]	; (8009064 <prvAddNewTaskToReadyList+0xc4>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	4a2c      	ldr	r2, [pc, #176]	; (8009064 <prvAddNewTaskToReadyList+0xc4>)
 8008fb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008fb6:	4b2c      	ldr	r3, [pc, #176]	; (8009068 <prvAddNewTaskToReadyList+0xc8>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d109      	bne.n	8008fd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008fbe:	4a2a      	ldr	r2, [pc, #168]	; (8009068 <prvAddNewTaskToReadyList+0xc8>)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008fc4:	4b27      	ldr	r3, [pc, #156]	; (8009064 <prvAddNewTaskToReadyList+0xc4>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d110      	bne.n	8008fee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008fcc:	f000 fc28 	bl	8009820 <prvInitialiseTaskLists>
 8008fd0:	e00d      	b.n	8008fee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008fd2:	4b26      	ldr	r3, [pc, #152]	; (800906c <prvAddNewTaskToReadyList+0xcc>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d109      	bne.n	8008fee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008fda:	4b23      	ldr	r3, [pc, #140]	; (8009068 <prvAddNewTaskToReadyList+0xc8>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d802      	bhi.n	8008fee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008fe8:	4a1f      	ldr	r2, [pc, #124]	; (8009068 <prvAddNewTaskToReadyList+0xc8>)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008fee:	4b20      	ldr	r3, [pc, #128]	; (8009070 <prvAddNewTaskToReadyList+0xd0>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	4a1e      	ldr	r2, [pc, #120]	; (8009070 <prvAddNewTaskToReadyList+0xd0>)
 8008ff6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008ff8:	4b1d      	ldr	r3, [pc, #116]	; (8009070 <prvAddNewTaskToReadyList+0xd0>)
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009004:	4b1b      	ldr	r3, [pc, #108]	; (8009074 <prvAddNewTaskToReadyList+0xd4>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	429a      	cmp	r2, r3
 800900a:	d903      	bls.n	8009014 <prvAddNewTaskToReadyList+0x74>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009010:	4a18      	ldr	r2, [pc, #96]	; (8009074 <prvAddNewTaskToReadyList+0xd4>)
 8009012:	6013      	str	r3, [r2, #0]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009018:	4613      	mov	r3, r2
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	4413      	add	r3, r2
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	4a15      	ldr	r2, [pc, #84]	; (8009078 <prvAddNewTaskToReadyList+0xd8>)
 8009022:	441a      	add	r2, r3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	3304      	adds	r3, #4
 8009028:	4619      	mov	r1, r3
 800902a:	4610      	mov	r0, r2
 800902c:	f7ff f817 	bl	800805e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009030:	f001 fa2c 	bl	800a48c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009034:	4b0d      	ldr	r3, [pc, #52]	; (800906c <prvAddNewTaskToReadyList+0xcc>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00e      	beq.n	800905a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800903c:	4b0a      	ldr	r3, [pc, #40]	; (8009068 <prvAddNewTaskToReadyList+0xc8>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009046:	429a      	cmp	r2, r3
 8009048:	d207      	bcs.n	800905a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800904a:	4b0c      	ldr	r3, [pc, #48]	; (800907c <prvAddNewTaskToReadyList+0xdc>)
 800904c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009050:	601a      	str	r2, [r3, #0]
 8009052:	f3bf 8f4f 	dsb	sy
 8009056:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800905a:	bf00      	nop
 800905c:	3708      	adds	r7, #8
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	200011e8 	.word	0x200011e8
 8009068:	20000d14 	.word	0x20000d14
 800906c:	200011f4 	.word	0x200011f4
 8009070:	20001204 	.word	0x20001204
 8009074:	200011f0 	.word	0x200011f0
 8009078:	20000d18 	.word	0x20000d18
 800907c:	e000ed04 	.word	0xe000ed04

08009080 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009088:	2300      	movs	r3, #0
 800908a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d017      	beq.n	80090c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009092:	4b13      	ldr	r3, [pc, #76]	; (80090e0 <vTaskDelay+0x60>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00a      	beq.n	80090b0 <vTaskDelay+0x30>
	__asm volatile
 800909a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909e:	f383 8811 	msr	BASEPRI, r3
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	f3bf 8f4f 	dsb	sy
 80090aa:	60bb      	str	r3, [r7, #8]
}
 80090ac:	bf00      	nop
 80090ae:	e7fe      	b.n	80090ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80090b0:	f000 f88a 	bl	80091c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80090b4:	2100      	movs	r1, #0
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fd64 	bl	8009b84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80090bc:	f000 f892 	bl	80091e4 <xTaskResumeAll>
 80090c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d107      	bne.n	80090d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80090c8:	4b06      	ldr	r3, [pc, #24]	; (80090e4 <vTaskDelay+0x64>)
 80090ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ce:	601a      	str	r2, [r3, #0]
 80090d0:	f3bf 8f4f 	dsb	sy
 80090d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80090d8:	bf00      	nop
 80090da:	3710      	adds	r7, #16
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	20001210 	.word	0x20001210
 80090e4:	e000ed04 	.word	0xe000ed04

080090e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b08a      	sub	sp, #40	; 0x28
 80090ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80090ee:	2300      	movs	r3, #0
 80090f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80090f2:	2300      	movs	r3, #0
 80090f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80090f6:	463a      	mov	r2, r7
 80090f8:	1d39      	adds	r1, r7, #4
 80090fa:	f107 0308 	add.w	r3, r7, #8
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fe ff50 	bl	8007fa4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009104:	6839      	ldr	r1, [r7, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	68ba      	ldr	r2, [r7, #8]
 800910a:	9202      	str	r2, [sp, #8]
 800910c:	9301      	str	r3, [sp, #4]
 800910e:	2300      	movs	r3, #0
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	2300      	movs	r3, #0
 8009114:	460a      	mov	r2, r1
 8009116:	4924      	ldr	r1, [pc, #144]	; (80091a8 <vTaskStartScheduler+0xc0>)
 8009118:	4824      	ldr	r0, [pc, #144]	; (80091ac <vTaskStartScheduler+0xc4>)
 800911a:	f7ff fe01 	bl	8008d20 <xTaskCreateStatic>
 800911e:	4603      	mov	r3, r0
 8009120:	4a23      	ldr	r2, [pc, #140]	; (80091b0 <vTaskStartScheduler+0xc8>)
 8009122:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009124:	4b22      	ldr	r3, [pc, #136]	; (80091b0 <vTaskStartScheduler+0xc8>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d002      	beq.n	8009132 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800912c:	2301      	movs	r3, #1
 800912e:	617b      	str	r3, [r7, #20]
 8009130:	e001      	b.n	8009136 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009132:	2300      	movs	r3, #0
 8009134:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	2b01      	cmp	r3, #1
 800913a:	d102      	bne.n	8009142 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800913c:	f000 fd76 	bl	8009c2c <xTimerCreateTimerTask>
 8009140:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d11b      	bne.n	8009180 <vTaskStartScheduler+0x98>
	__asm volatile
 8009148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914c:	f383 8811 	msr	BASEPRI, r3
 8009150:	f3bf 8f6f 	isb	sy
 8009154:	f3bf 8f4f 	dsb	sy
 8009158:	613b      	str	r3, [r7, #16]
}
 800915a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800915c:	4b15      	ldr	r3, [pc, #84]	; (80091b4 <vTaskStartScheduler+0xcc>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	3364      	adds	r3, #100	; 0x64
 8009162:	4a15      	ldr	r2, [pc, #84]	; (80091b8 <vTaskStartScheduler+0xd0>)
 8009164:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009166:	4b15      	ldr	r3, [pc, #84]	; (80091bc <vTaskStartScheduler+0xd4>)
 8009168:	f04f 32ff 	mov.w	r2, #4294967295
 800916c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800916e:	4b14      	ldr	r3, [pc, #80]	; (80091c0 <vTaskStartScheduler+0xd8>)
 8009170:	2201      	movs	r2, #1
 8009172:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009174:	4b13      	ldr	r3, [pc, #76]	; (80091c4 <vTaskStartScheduler+0xdc>)
 8009176:	2200      	movs	r2, #0
 8009178:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800917a:	f001 f8e5 	bl	800a348 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800917e:	e00e      	b.n	800919e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009186:	d10a      	bne.n	800919e <vTaskStartScheduler+0xb6>
	__asm volatile
 8009188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918c:	f383 8811 	msr	BASEPRI, r3
 8009190:	f3bf 8f6f 	isb	sy
 8009194:	f3bf 8f4f 	dsb	sy
 8009198:	60fb      	str	r3, [r7, #12]
}
 800919a:	bf00      	nop
 800919c:	e7fe      	b.n	800919c <vTaskStartScheduler+0xb4>
}
 800919e:	bf00      	nop
 80091a0:	3718      	adds	r7, #24
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	08010578 	.word	0x08010578
 80091ac:	080097f1 	.word	0x080097f1
 80091b0:	2000120c 	.word	0x2000120c
 80091b4:	20000d14 	.word	0x20000d14
 80091b8:	200001e0 	.word	0x200001e0
 80091bc:	20001208 	.word	0x20001208
 80091c0:	200011f4 	.word	0x200011f4
 80091c4:	200011ec 	.word	0x200011ec

080091c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80091c8:	b480      	push	{r7}
 80091ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80091cc:	4b04      	ldr	r3, [pc, #16]	; (80091e0 <vTaskSuspendAll+0x18>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	3301      	adds	r3, #1
 80091d2:	4a03      	ldr	r2, [pc, #12]	; (80091e0 <vTaskSuspendAll+0x18>)
 80091d4:	6013      	str	r3, [r2, #0]
}
 80091d6:	bf00      	nop
 80091d8:	46bd      	mov	sp, r7
 80091da:	bc80      	pop	{r7}
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop
 80091e0:	20001210 	.word	0x20001210

080091e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80091ea:	2300      	movs	r3, #0
 80091ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80091ee:	2300      	movs	r3, #0
 80091f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80091f2:	4b42      	ldr	r3, [pc, #264]	; (80092fc <xTaskResumeAll+0x118>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d10a      	bne.n	8009210 <xTaskResumeAll+0x2c>
	__asm volatile
 80091fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fe:	f383 8811 	msr	BASEPRI, r3
 8009202:	f3bf 8f6f 	isb	sy
 8009206:	f3bf 8f4f 	dsb	sy
 800920a:	603b      	str	r3, [r7, #0]
}
 800920c:	bf00      	nop
 800920e:	e7fe      	b.n	800920e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009210:	f001 f90c 	bl	800a42c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009214:	4b39      	ldr	r3, [pc, #228]	; (80092fc <xTaskResumeAll+0x118>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	3b01      	subs	r3, #1
 800921a:	4a38      	ldr	r2, [pc, #224]	; (80092fc <xTaskResumeAll+0x118>)
 800921c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800921e:	4b37      	ldr	r3, [pc, #220]	; (80092fc <xTaskResumeAll+0x118>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d162      	bne.n	80092ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009226:	4b36      	ldr	r3, [pc, #216]	; (8009300 <xTaskResumeAll+0x11c>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d05e      	beq.n	80092ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800922e:	e02f      	b.n	8009290 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009230:	4b34      	ldr	r3, [pc, #208]	; (8009304 <xTaskResumeAll+0x120>)
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	3318      	adds	r3, #24
 800923c:	4618      	mov	r0, r3
 800923e:	f7fe ff69 	bl	8008114 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	3304      	adds	r3, #4
 8009246:	4618      	mov	r0, r3
 8009248:	f7fe ff64 	bl	8008114 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009250:	4b2d      	ldr	r3, [pc, #180]	; (8009308 <xTaskResumeAll+0x124>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	429a      	cmp	r2, r3
 8009256:	d903      	bls.n	8009260 <xTaskResumeAll+0x7c>
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800925c:	4a2a      	ldr	r2, [pc, #168]	; (8009308 <xTaskResumeAll+0x124>)
 800925e:	6013      	str	r3, [r2, #0]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009264:	4613      	mov	r3, r2
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	4413      	add	r3, r2
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	4a27      	ldr	r2, [pc, #156]	; (800930c <xTaskResumeAll+0x128>)
 800926e:	441a      	add	r2, r3
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	3304      	adds	r3, #4
 8009274:	4619      	mov	r1, r3
 8009276:	4610      	mov	r0, r2
 8009278:	f7fe fef1 	bl	800805e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009280:	4b23      	ldr	r3, [pc, #140]	; (8009310 <xTaskResumeAll+0x12c>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009286:	429a      	cmp	r2, r3
 8009288:	d302      	bcc.n	8009290 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800928a:	4b22      	ldr	r3, [pc, #136]	; (8009314 <xTaskResumeAll+0x130>)
 800928c:	2201      	movs	r2, #1
 800928e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009290:	4b1c      	ldr	r3, [pc, #112]	; (8009304 <xTaskResumeAll+0x120>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1cb      	bne.n	8009230 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d001      	beq.n	80092a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800929e:	f000 fb61 	bl	8009964 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80092a2:	4b1d      	ldr	r3, [pc, #116]	; (8009318 <xTaskResumeAll+0x134>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d010      	beq.n	80092d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80092ae:	f000 f845 	bl	800933c <xTaskIncrementTick>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d002      	beq.n	80092be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80092b8:	4b16      	ldr	r3, [pc, #88]	; (8009314 <xTaskResumeAll+0x130>)
 80092ba:	2201      	movs	r2, #1
 80092bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	3b01      	subs	r3, #1
 80092c2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1f1      	bne.n	80092ae <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80092ca:	4b13      	ldr	r3, [pc, #76]	; (8009318 <xTaskResumeAll+0x134>)
 80092cc:	2200      	movs	r2, #0
 80092ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80092d0:	4b10      	ldr	r3, [pc, #64]	; (8009314 <xTaskResumeAll+0x130>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d009      	beq.n	80092ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80092d8:	2301      	movs	r3, #1
 80092da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80092dc:	4b0f      	ldr	r3, [pc, #60]	; (800931c <xTaskResumeAll+0x138>)
 80092de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092e2:	601a      	str	r2, [r3, #0]
 80092e4:	f3bf 8f4f 	dsb	sy
 80092e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80092ec:	f001 f8ce 	bl	800a48c <vPortExitCritical>

	return xAlreadyYielded;
 80092f0:	68bb      	ldr	r3, [r7, #8]
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	20001210 	.word	0x20001210
 8009300:	200011e8 	.word	0x200011e8
 8009304:	200011a8 	.word	0x200011a8
 8009308:	200011f0 	.word	0x200011f0
 800930c:	20000d18 	.word	0x20000d18
 8009310:	20000d14 	.word	0x20000d14
 8009314:	200011fc 	.word	0x200011fc
 8009318:	200011f8 	.word	0x200011f8
 800931c:	e000ed04 	.word	0xe000ed04

08009320 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009326:	4b04      	ldr	r3, [pc, #16]	; (8009338 <xTaskGetTickCount+0x18>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800932c:	687b      	ldr	r3, [r7, #4]
}
 800932e:	4618      	mov	r0, r3
 8009330:	370c      	adds	r7, #12
 8009332:	46bd      	mov	sp, r7
 8009334:	bc80      	pop	{r7}
 8009336:	4770      	bx	lr
 8009338:	200011ec 	.word	0x200011ec

0800933c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b086      	sub	sp, #24
 8009340:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009342:	2300      	movs	r3, #0
 8009344:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009346:	4b51      	ldr	r3, [pc, #324]	; (800948c <xTaskIncrementTick+0x150>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	f040 808e 	bne.w	800946c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009350:	4b4f      	ldr	r3, [pc, #316]	; (8009490 <xTaskIncrementTick+0x154>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	3301      	adds	r3, #1
 8009356:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009358:	4a4d      	ldr	r2, [pc, #308]	; (8009490 <xTaskIncrementTick+0x154>)
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d120      	bne.n	80093a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009364:	4b4b      	ldr	r3, [pc, #300]	; (8009494 <xTaskIncrementTick+0x158>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d00a      	beq.n	8009384 <xTaskIncrementTick+0x48>
	__asm volatile
 800936e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009372:	f383 8811 	msr	BASEPRI, r3
 8009376:	f3bf 8f6f 	isb	sy
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	603b      	str	r3, [r7, #0]
}
 8009380:	bf00      	nop
 8009382:	e7fe      	b.n	8009382 <xTaskIncrementTick+0x46>
 8009384:	4b43      	ldr	r3, [pc, #268]	; (8009494 <xTaskIncrementTick+0x158>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	60fb      	str	r3, [r7, #12]
 800938a:	4b43      	ldr	r3, [pc, #268]	; (8009498 <xTaskIncrementTick+0x15c>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a41      	ldr	r2, [pc, #260]	; (8009494 <xTaskIncrementTick+0x158>)
 8009390:	6013      	str	r3, [r2, #0]
 8009392:	4a41      	ldr	r2, [pc, #260]	; (8009498 <xTaskIncrementTick+0x15c>)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6013      	str	r3, [r2, #0]
 8009398:	4b40      	ldr	r3, [pc, #256]	; (800949c <xTaskIncrementTick+0x160>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	3301      	adds	r3, #1
 800939e:	4a3f      	ldr	r2, [pc, #252]	; (800949c <xTaskIncrementTick+0x160>)
 80093a0:	6013      	str	r3, [r2, #0]
 80093a2:	f000 fadf 	bl	8009964 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80093a6:	4b3e      	ldr	r3, [pc, #248]	; (80094a0 <xTaskIncrementTick+0x164>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	693a      	ldr	r2, [r7, #16]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d34e      	bcc.n	800944e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093b0:	4b38      	ldr	r3, [pc, #224]	; (8009494 <xTaskIncrementTick+0x158>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d101      	bne.n	80093be <xTaskIncrementTick+0x82>
 80093ba:	2301      	movs	r3, #1
 80093bc:	e000      	b.n	80093c0 <xTaskIncrementTick+0x84>
 80093be:	2300      	movs	r3, #0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d004      	beq.n	80093ce <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093c4:	4b36      	ldr	r3, [pc, #216]	; (80094a0 <xTaskIncrementTick+0x164>)
 80093c6:	f04f 32ff 	mov.w	r2, #4294967295
 80093ca:	601a      	str	r2, [r3, #0]
					break;
 80093cc:	e03f      	b.n	800944e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80093ce:	4b31      	ldr	r3, [pc, #196]	; (8009494 <xTaskIncrementTick+0x158>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	68db      	ldr	r3, [r3, #12]
 80093d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80093de:	693a      	ldr	r2, [r7, #16]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d203      	bcs.n	80093ee <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80093e6:	4a2e      	ldr	r2, [pc, #184]	; (80094a0 <xTaskIncrementTick+0x164>)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6013      	str	r3, [r2, #0]
						break;
 80093ec:	e02f      	b.n	800944e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	3304      	adds	r3, #4
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7fe fe8e 	bl	8008114 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d004      	beq.n	800940a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	3318      	adds	r3, #24
 8009404:	4618      	mov	r0, r3
 8009406:	f7fe fe85 	bl	8008114 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800940e:	4b25      	ldr	r3, [pc, #148]	; (80094a4 <xTaskIncrementTick+0x168>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	429a      	cmp	r2, r3
 8009414:	d903      	bls.n	800941e <xTaskIncrementTick+0xe2>
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800941a:	4a22      	ldr	r2, [pc, #136]	; (80094a4 <xTaskIncrementTick+0x168>)
 800941c:	6013      	str	r3, [r2, #0]
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009422:	4613      	mov	r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	4413      	add	r3, r2
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	4a1f      	ldr	r2, [pc, #124]	; (80094a8 <xTaskIncrementTick+0x16c>)
 800942c:	441a      	add	r2, r3
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	3304      	adds	r3, #4
 8009432:	4619      	mov	r1, r3
 8009434:	4610      	mov	r0, r2
 8009436:	f7fe fe12 	bl	800805e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800943e:	4b1b      	ldr	r3, [pc, #108]	; (80094ac <xTaskIncrementTick+0x170>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009444:	429a      	cmp	r2, r3
 8009446:	d3b3      	bcc.n	80093b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009448:	2301      	movs	r3, #1
 800944a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800944c:	e7b0      	b.n	80093b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800944e:	4b17      	ldr	r3, [pc, #92]	; (80094ac <xTaskIncrementTick+0x170>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009454:	4914      	ldr	r1, [pc, #80]	; (80094a8 <xTaskIncrementTick+0x16c>)
 8009456:	4613      	mov	r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	4413      	add	r3, r2
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	440b      	add	r3, r1
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2b01      	cmp	r3, #1
 8009464:	d907      	bls.n	8009476 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009466:	2301      	movs	r3, #1
 8009468:	617b      	str	r3, [r7, #20]
 800946a:	e004      	b.n	8009476 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800946c:	4b10      	ldr	r3, [pc, #64]	; (80094b0 <xTaskIncrementTick+0x174>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	3301      	adds	r3, #1
 8009472:	4a0f      	ldr	r2, [pc, #60]	; (80094b0 <xTaskIncrementTick+0x174>)
 8009474:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009476:	4b0f      	ldr	r3, [pc, #60]	; (80094b4 <xTaskIncrementTick+0x178>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d001      	beq.n	8009482 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800947e:	2301      	movs	r3, #1
 8009480:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009482:	697b      	ldr	r3, [r7, #20]
}
 8009484:	4618      	mov	r0, r3
 8009486:	3718      	adds	r7, #24
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}
 800948c:	20001210 	.word	0x20001210
 8009490:	200011ec 	.word	0x200011ec
 8009494:	200011a0 	.word	0x200011a0
 8009498:	200011a4 	.word	0x200011a4
 800949c:	20001200 	.word	0x20001200
 80094a0:	20001208 	.word	0x20001208
 80094a4:	200011f0 	.word	0x200011f0
 80094a8:	20000d18 	.word	0x20000d18
 80094ac:	20000d14 	.word	0x20000d14
 80094b0:	200011f8 	.word	0x200011f8
 80094b4:	200011fc 	.word	0x200011fc

080094b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80094be:	4b2a      	ldr	r3, [pc, #168]	; (8009568 <vTaskSwitchContext+0xb0>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d003      	beq.n	80094ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80094c6:	4b29      	ldr	r3, [pc, #164]	; (800956c <vTaskSwitchContext+0xb4>)
 80094c8:	2201      	movs	r2, #1
 80094ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80094cc:	e046      	b.n	800955c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80094ce:	4b27      	ldr	r3, [pc, #156]	; (800956c <vTaskSwitchContext+0xb4>)
 80094d0:	2200      	movs	r2, #0
 80094d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80094d4:	4b26      	ldr	r3, [pc, #152]	; (8009570 <vTaskSwitchContext+0xb8>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	60fb      	str	r3, [r7, #12]
 80094da:	e010      	b.n	80094fe <vTaskSwitchContext+0x46>
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d10a      	bne.n	80094f8 <vTaskSwitchContext+0x40>
	__asm volatile
 80094e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e6:	f383 8811 	msr	BASEPRI, r3
 80094ea:	f3bf 8f6f 	isb	sy
 80094ee:	f3bf 8f4f 	dsb	sy
 80094f2:	607b      	str	r3, [r7, #4]
}
 80094f4:	bf00      	nop
 80094f6:	e7fe      	b.n	80094f6 <vTaskSwitchContext+0x3e>
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	3b01      	subs	r3, #1
 80094fc:	60fb      	str	r3, [r7, #12]
 80094fe:	491d      	ldr	r1, [pc, #116]	; (8009574 <vTaskSwitchContext+0xbc>)
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	4613      	mov	r3, r2
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	4413      	add	r3, r2
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	440b      	add	r3, r1
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d0e4      	beq.n	80094dc <vTaskSwitchContext+0x24>
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	4613      	mov	r3, r2
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	4413      	add	r3, r2
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	4a15      	ldr	r2, [pc, #84]	; (8009574 <vTaskSwitchContext+0xbc>)
 800951e:	4413      	add	r3, r2
 8009520:	60bb      	str	r3, [r7, #8]
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	685a      	ldr	r2, [r3, #4]
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	605a      	str	r2, [r3, #4]
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	685a      	ldr	r2, [r3, #4]
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	3308      	adds	r3, #8
 8009534:	429a      	cmp	r2, r3
 8009536:	d104      	bne.n	8009542 <vTaskSwitchContext+0x8a>
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	685a      	ldr	r2, [r3, #4]
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	605a      	str	r2, [r3, #4]
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	4a0b      	ldr	r2, [pc, #44]	; (8009578 <vTaskSwitchContext+0xc0>)
 800954a:	6013      	str	r3, [r2, #0]
 800954c:	4a08      	ldr	r2, [pc, #32]	; (8009570 <vTaskSwitchContext+0xb8>)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009552:	4b09      	ldr	r3, [pc, #36]	; (8009578 <vTaskSwitchContext+0xc0>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	3364      	adds	r3, #100	; 0x64
 8009558:	4a08      	ldr	r2, [pc, #32]	; (800957c <vTaskSwitchContext+0xc4>)
 800955a:	6013      	str	r3, [r2, #0]
}
 800955c:	bf00      	nop
 800955e:	3714      	adds	r7, #20
 8009560:	46bd      	mov	sp, r7
 8009562:	bc80      	pop	{r7}
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	20001210 	.word	0x20001210
 800956c:	200011fc 	.word	0x200011fc
 8009570:	200011f0 	.word	0x200011f0
 8009574:	20000d18 	.word	0x20000d18
 8009578:	20000d14 	.word	0x20000d14
 800957c:	200001e0 	.word	0x200001e0

08009580 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d10a      	bne.n	80095a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009594:	f383 8811 	msr	BASEPRI, r3
 8009598:	f3bf 8f6f 	isb	sy
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	60fb      	str	r3, [r7, #12]
}
 80095a2:	bf00      	nop
 80095a4:	e7fe      	b.n	80095a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095a6:	4b07      	ldr	r3, [pc, #28]	; (80095c4 <vTaskPlaceOnEventList+0x44>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	3318      	adds	r3, #24
 80095ac:	4619      	mov	r1, r3
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f7fe fd78 	bl	80080a4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80095b4:	2101      	movs	r1, #1
 80095b6:	6838      	ldr	r0, [r7, #0]
 80095b8:	f000 fae4 	bl	8009b84 <prvAddCurrentTaskToDelayedList>
}
 80095bc:	bf00      	nop
 80095be:	3710      	adds	r7, #16
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	20000d14 	.word	0x20000d14

080095c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b086      	sub	sp, #24
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d10a      	bne.n	80095f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80095da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095de:	f383 8811 	msr	BASEPRI, r3
 80095e2:	f3bf 8f6f 	isb	sy
 80095e6:	f3bf 8f4f 	dsb	sy
 80095ea:	617b      	str	r3, [r7, #20]
}
 80095ec:	bf00      	nop
 80095ee:	e7fe      	b.n	80095ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095f0:	4b0a      	ldr	r3, [pc, #40]	; (800961c <vTaskPlaceOnEventListRestricted+0x54>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	3318      	adds	r3, #24
 80095f6:	4619      	mov	r1, r3
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f7fe fd30 	bl	800805e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d002      	beq.n	800960a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009604:	f04f 33ff 	mov.w	r3, #4294967295
 8009608:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800960a:	6879      	ldr	r1, [r7, #4]
 800960c:	68b8      	ldr	r0, [r7, #8]
 800960e:	f000 fab9 	bl	8009b84 <prvAddCurrentTaskToDelayedList>
	}
 8009612:	bf00      	nop
 8009614:	3718      	adds	r7, #24
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	20000d14 	.word	0x20000d14

08009620 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b086      	sub	sp, #24
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d10a      	bne.n	800964c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963a:	f383 8811 	msr	BASEPRI, r3
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f3bf 8f4f 	dsb	sy
 8009646:	60fb      	str	r3, [r7, #12]
}
 8009648:	bf00      	nop
 800964a:	e7fe      	b.n	800964a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	3318      	adds	r3, #24
 8009650:	4618      	mov	r0, r3
 8009652:	f7fe fd5f 	bl	8008114 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009656:	4b1e      	ldr	r3, [pc, #120]	; (80096d0 <xTaskRemoveFromEventList+0xb0>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d11d      	bne.n	800969a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	3304      	adds	r3, #4
 8009662:	4618      	mov	r0, r3
 8009664:	f7fe fd56 	bl	8008114 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800966c:	4b19      	ldr	r3, [pc, #100]	; (80096d4 <xTaskRemoveFromEventList+0xb4>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	429a      	cmp	r2, r3
 8009672:	d903      	bls.n	800967c <xTaskRemoveFromEventList+0x5c>
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009678:	4a16      	ldr	r2, [pc, #88]	; (80096d4 <xTaskRemoveFromEventList+0xb4>)
 800967a:	6013      	str	r3, [r2, #0]
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009680:	4613      	mov	r3, r2
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	4413      	add	r3, r2
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	4a13      	ldr	r2, [pc, #76]	; (80096d8 <xTaskRemoveFromEventList+0xb8>)
 800968a:	441a      	add	r2, r3
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	3304      	adds	r3, #4
 8009690:	4619      	mov	r1, r3
 8009692:	4610      	mov	r0, r2
 8009694:	f7fe fce3 	bl	800805e <vListInsertEnd>
 8009698:	e005      	b.n	80096a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	3318      	adds	r3, #24
 800969e:	4619      	mov	r1, r3
 80096a0:	480e      	ldr	r0, [pc, #56]	; (80096dc <xTaskRemoveFromEventList+0xbc>)
 80096a2:	f7fe fcdc 	bl	800805e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096aa:	4b0d      	ldr	r3, [pc, #52]	; (80096e0 <xTaskRemoveFromEventList+0xc0>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d905      	bls.n	80096c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80096b4:	2301      	movs	r3, #1
 80096b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80096b8:	4b0a      	ldr	r3, [pc, #40]	; (80096e4 <xTaskRemoveFromEventList+0xc4>)
 80096ba:	2201      	movs	r2, #1
 80096bc:	601a      	str	r2, [r3, #0]
 80096be:	e001      	b.n	80096c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80096c0:	2300      	movs	r3, #0
 80096c2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80096c4:	697b      	ldr	r3, [r7, #20]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3718      	adds	r7, #24
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	20001210 	.word	0x20001210
 80096d4:	200011f0 	.word	0x200011f0
 80096d8:	20000d18 	.word	0x20000d18
 80096dc:	200011a8 	.word	0x200011a8
 80096e0:	20000d14 	.word	0x20000d14
 80096e4:	200011fc 	.word	0x200011fc

080096e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80096f0:	4b06      	ldr	r3, [pc, #24]	; (800970c <vTaskInternalSetTimeOutState+0x24>)
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80096f8:	4b05      	ldr	r3, [pc, #20]	; (8009710 <vTaskInternalSetTimeOutState+0x28>)
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	605a      	str	r2, [r3, #4]
}
 8009700:	bf00      	nop
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	bc80      	pop	{r7}
 8009708:	4770      	bx	lr
 800970a:	bf00      	nop
 800970c:	20001200 	.word	0x20001200
 8009710:	200011ec 	.word	0x200011ec

08009714 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b088      	sub	sp, #32
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d10a      	bne.n	800973a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009728:	f383 8811 	msr	BASEPRI, r3
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	f3bf 8f4f 	dsb	sy
 8009734:	613b      	str	r3, [r7, #16]
}
 8009736:	bf00      	nop
 8009738:	e7fe      	b.n	8009738 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d10a      	bne.n	8009756 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009744:	f383 8811 	msr	BASEPRI, r3
 8009748:	f3bf 8f6f 	isb	sy
 800974c:	f3bf 8f4f 	dsb	sy
 8009750:	60fb      	str	r3, [r7, #12]
}
 8009752:	bf00      	nop
 8009754:	e7fe      	b.n	8009754 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009756:	f000 fe69 	bl	800a42c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800975a:	4b1d      	ldr	r3, [pc, #116]	; (80097d0 <xTaskCheckForTimeOut+0xbc>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	69ba      	ldr	r2, [r7, #24]
 8009766:	1ad3      	subs	r3, r2, r3
 8009768:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009772:	d102      	bne.n	800977a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009774:	2300      	movs	r3, #0
 8009776:	61fb      	str	r3, [r7, #28]
 8009778:	e023      	b.n	80097c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	4b15      	ldr	r3, [pc, #84]	; (80097d4 <xTaskCheckForTimeOut+0xc0>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	429a      	cmp	r2, r3
 8009784:	d007      	beq.n	8009796 <xTaskCheckForTimeOut+0x82>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	69ba      	ldr	r2, [r7, #24]
 800978c:	429a      	cmp	r2, r3
 800978e:	d302      	bcc.n	8009796 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009790:	2301      	movs	r3, #1
 8009792:	61fb      	str	r3, [r7, #28]
 8009794:	e015      	b.n	80097c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	697a      	ldr	r2, [r7, #20]
 800979c:	429a      	cmp	r2, r3
 800979e:	d20b      	bcs.n	80097b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	1ad2      	subs	r2, r2, r3
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f7ff ff9b 	bl	80096e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80097b2:	2300      	movs	r3, #0
 80097b4:	61fb      	str	r3, [r7, #28]
 80097b6:	e004      	b.n	80097c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	2200      	movs	r2, #0
 80097bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80097be:	2301      	movs	r3, #1
 80097c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80097c2:	f000 fe63 	bl	800a48c <vPortExitCritical>

	return xReturn;
 80097c6:	69fb      	ldr	r3, [r7, #28]
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3720      	adds	r7, #32
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	200011ec 	.word	0x200011ec
 80097d4:	20001200 	.word	0x20001200

080097d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80097d8:	b480      	push	{r7}
 80097da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80097dc:	4b03      	ldr	r3, [pc, #12]	; (80097ec <vTaskMissedYield+0x14>)
 80097de:	2201      	movs	r2, #1
 80097e0:	601a      	str	r2, [r3, #0]
}
 80097e2:	bf00      	nop
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bc80      	pop	{r7}
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	200011fc 	.word	0x200011fc

080097f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80097f8:	f000 f852 	bl	80098a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80097fc:	4b06      	ldr	r3, [pc, #24]	; (8009818 <prvIdleTask+0x28>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2b01      	cmp	r3, #1
 8009802:	d9f9      	bls.n	80097f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009804:	4b05      	ldr	r3, [pc, #20]	; (800981c <prvIdleTask+0x2c>)
 8009806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800980a:	601a      	str	r2, [r3, #0]
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009814:	e7f0      	b.n	80097f8 <prvIdleTask+0x8>
 8009816:	bf00      	nop
 8009818:	20000d18 	.word	0x20000d18
 800981c:	e000ed04 	.word	0xe000ed04

08009820 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009826:	2300      	movs	r3, #0
 8009828:	607b      	str	r3, [r7, #4]
 800982a:	e00c      	b.n	8009846 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	4613      	mov	r3, r2
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	4413      	add	r3, r2
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	4a12      	ldr	r2, [pc, #72]	; (8009880 <prvInitialiseTaskLists+0x60>)
 8009838:	4413      	add	r3, r2
 800983a:	4618      	mov	r0, r3
 800983c:	f7fe fbe4 	bl	8008008 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	3301      	adds	r3, #1
 8009844:	607b      	str	r3, [r7, #4]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2b37      	cmp	r3, #55	; 0x37
 800984a:	d9ef      	bls.n	800982c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800984c:	480d      	ldr	r0, [pc, #52]	; (8009884 <prvInitialiseTaskLists+0x64>)
 800984e:	f7fe fbdb 	bl	8008008 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009852:	480d      	ldr	r0, [pc, #52]	; (8009888 <prvInitialiseTaskLists+0x68>)
 8009854:	f7fe fbd8 	bl	8008008 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009858:	480c      	ldr	r0, [pc, #48]	; (800988c <prvInitialiseTaskLists+0x6c>)
 800985a:	f7fe fbd5 	bl	8008008 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800985e:	480c      	ldr	r0, [pc, #48]	; (8009890 <prvInitialiseTaskLists+0x70>)
 8009860:	f7fe fbd2 	bl	8008008 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009864:	480b      	ldr	r0, [pc, #44]	; (8009894 <prvInitialiseTaskLists+0x74>)
 8009866:	f7fe fbcf 	bl	8008008 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800986a:	4b0b      	ldr	r3, [pc, #44]	; (8009898 <prvInitialiseTaskLists+0x78>)
 800986c:	4a05      	ldr	r2, [pc, #20]	; (8009884 <prvInitialiseTaskLists+0x64>)
 800986e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009870:	4b0a      	ldr	r3, [pc, #40]	; (800989c <prvInitialiseTaskLists+0x7c>)
 8009872:	4a05      	ldr	r2, [pc, #20]	; (8009888 <prvInitialiseTaskLists+0x68>)
 8009874:	601a      	str	r2, [r3, #0]
}
 8009876:	bf00      	nop
 8009878:	3708      	adds	r7, #8
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	20000d18 	.word	0x20000d18
 8009884:	20001178 	.word	0x20001178
 8009888:	2000118c 	.word	0x2000118c
 800988c:	200011a8 	.word	0x200011a8
 8009890:	200011bc 	.word	0x200011bc
 8009894:	200011d4 	.word	0x200011d4
 8009898:	200011a0 	.word	0x200011a0
 800989c:	200011a4 	.word	0x200011a4

080098a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098a6:	e019      	b.n	80098dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80098a8:	f000 fdc0 	bl	800a42c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80098ac:	4b10      	ldr	r3, [pc, #64]	; (80098f0 <prvCheckTasksWaitingTermination+0x50>)
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	3304      	adds	r3, #4
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7fe fc2b 	bl	8008114 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80098be:	4b0d      	ldr	r3, [pc, #52]	; (80098f4 <prvCheckTasksWaitingTermination+0x54>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	3b01      	subs	r3, #1
 80098c4:	4a0b      	ldr	r2, [pc, #44]	; (80098f4 <prvCheckTasksWaitingTermination+0x54>)
 80098c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80098c8:	4b0b      	ldr	r3, [pc, #44]	; (80098f8 <prvCheckTasksWaitingTermination+0x58>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	3b01      	subs	r3, #1
 80098ce:	4a0a      	ldr	r2, [pc, #40]	; (80098f8 <prvCheckTasksWaitingTermination+0x58>)
 80098d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80098d2:	f000 fddb 	bl	800a48c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 f810 	bl	80098fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098dc:	4b06      	ldr	r3, [pc, #24]	; (80098f8 <prvCheckTasksWaitingTermination+0x58>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d1e1      	bne.n	80098a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80098e4:	bf00      	nop
 80098e6:	bf00      	nop
 80098e8:	3708      	adds	r7, #8
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	200011bc 	.word	0x200011bc
 80098f4:	200011e8 	.word	0x200011e8
 80098f8:	200011d0 	.word	0x200011d0

080098fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	3364      	adds	r3, #100	; 0x64
 8009908:	4618      	mov	r0, r3
 800990a:	f003 fbad 	bl	800d068 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8009914:	2b00      	cmp	r3, #0
 8009916:	d108      	bne.n	800992a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800991c:	4618      	mov	r0, r3
 800991e:	f000 ff49 	bl	800a7b4 <vPortFree>
				vPortFree( pxTCB );
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 ff46 	bl	800a7b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009928:	e018      	b.n	800995c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8009930:	2b01      	cmp	r3, #1
 8009932:	d103      	bne.n	800993c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 ff3d 	bl	800a7b4 <vPortFree>
	}
 800993a:	e00f      	b.n	800995c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8009942:	2b02      	cmp	r3, #2
 8009944:	d00a      	beq.n	800995c <prvDeleteTCB+0x60>
	__asm volatile
 8009946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994a:	f383 8811 	msr	BASEPRI, r3
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	60fb      	str	r3, [r7, #12]
}
 8009958:	bf00      	nop
 800995a:	e7fe      	b.n	800995a <prvDeleteTCB+0x5e>
	}
 800995c:	bf00      	nop
 800995e:	3710      	adds	r7, #16
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800996a:	4b0e      	ldr	r3, [pc, #56]	; (80099a4 <prvResetNextTaskUnblockTime+0x40>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d101      	bne.n	8009978 <prvResetNextTaskUnblockTime+0x14>
 8009974:	2301      	movs	r3, #1
 8009976:	e000      	b.n	800997a <prvResetNextTaskUnblockTime+0x16>
 8009978:	2300      	movs	r3, #0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d004      	beq.n	8009988 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800997e:	4b0a      	ldr	r3, [pc, #40]	; (80099a8 <prvResetNextTaskUnblockTime+0x44>)
 8009980:	f04f 32ff 	mov.w	r2, #4294967295
 8009984:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009986:	e008      	b.n	800999a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009988:	4b06      	ldr	r3, [pc, #24]	; (80099a4 <prvResetNextTaskUnblockTime+0x40>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	4a04      	ldr	r2, [pc, #16]	; (80099a8 <prvResetNextTaskUnblockTime+0x44>)
 8009998:	6013      	str	r3, [r2, #0]
}
 800999a:	bf00      	nop
 800999c:	370c      	adds	r7, #12
 800999e:	46bd      	mov	sp, r7
 80099a0:	bc80      	pop	{r7}
 80099a2:	4770      	bx	lr
 80099a4:	200011a0 	.word	0x200011a0
 80099a8:	20001208 	.word	0x20001208

080099ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80099b2:	4b0b      	ldr	r3, [pc, #44]	; (80099e0 <xTaskGetSchedulerState+0x34>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d102      	bne.n	80099c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80099ba:	2301      	movs	r3, #1
 80099bc:	607b      	str	r3, [r7, #4]
 80099be:	e008      	b.n	80099d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099c0:	4b08      	ldr	r3, [pc, #32]	; (80099e4 <xTaskGetSchedulerState+0x38>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d102      	bne.n	80099ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80099c8:	2302      	movs	r3, #2
 80099ca:	607b      	str	r3, [r7, #4]
 80099cc:	e001      	b.n	80099d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80099ce:	2300      	movs	r3, #0
 80099d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80099d2:	687b      	ldr	r3, [r7, #4]
	}
 80099d4:	4618      	mov	r0, r3
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	bc80      	pop	{r7}
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop
 80099e0:	200011f4 	.word	0x200011f4
 80099e4:	20001210 	.word	0x20001210

080099e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b086      	sub	sp, #24
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80099f4:	2300      	movs	r3, #0
 80099f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d056      	beq.n	8009aac <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80099fe:	4b2e      	ldr	r3, [pc, #184]	; (8009ab8 <xTaskPriorityDisinherit+0xd0>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	693a      	ldr	r2, [r7, #16]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d00a      	beq.n	8009a1e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0c:	f383 8811 	msr	BASEPRI, r3
 8009a10:	f3bf 8f6f 	isb	sy
 8009a14:	f3bf 8f4f 	dsb	sy
 8009a18:	60fb      	str	r3, [r7, #12]
}
 8009a1a:	bf00      	nop
 8009a1c:	e7fe      	b.n	8009a1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d10a      	bne.n	8009a3c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2a:	f383 8811 	msr	BASEPRI, r3
 8009a2e:	f3bf 8f6f 	isb	sy
 8009a32:	f3bf 8f4f 	dsb	sy
 8009a36:	60bb      	str	r3, [r7, #8]
}
 8009a38:	bf00      	nop
 8009a3a:	e7fe      	b.n	8009a3a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a40:	1e5a      	subs	r2, r3, #1
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d02c      	beq.n	8009aac <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d128      	bne.n	8009aac <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	3304      	adds	r3, #4
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7fe fb58 	bl	8008114 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a70:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a7c:	4b0f      	ldr	r3, [pc, #60]	; (8009abc <xTaskPriorityDisinherit+0xd4>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d903      	bls.n	8009a8c <xTaskPriorityDisinherit+0xa4>
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a88:	4a0c      	ldr	r2, [pc, #48]	; (8009abc <xTaskPriorityDisinherit+0xd4>)
 8009a8a:	6013      	str	r3, [r2, #0]
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a90:	4613      	mov	r3, r2
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	4413      	add	r3, r2
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	4a09      	ldr	r2, [pc, #36]	; (8009ac0 <xTaskPriorityDisinherit+0xd8>)
 8009a9a:	441a      	add	r2, r3
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	4610      	mov	r0, r2
 8009aa4:	f7fe fadb 	bl	800805e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009aac:	697b      	ldr	r3, [r7, #20]
	}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3718      	adds	r7, #24
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	20000d14 	.word	0x20000d14
 8009abc:	200011f0 	.word	0x200011f0
 8009ac0:	20000d18 	.word	0x20000d18

08009ac4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b086      	sub	sp, #24
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	607a      	str	r2, [r7, #4]
 8009ad0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009ad2:	f000 fcab 	bl	800a42c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009ad6:	4b29      	ldr	r3, [pc, #164]	; (8009b7c <xTaskNotifyWait+0xb8>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	d01c      	beq.n	8009b1e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009ae4:	4b25      	ldr	r3, [pc, #148]	; (8009b7c <xTaskNotifyWait+0xb8>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8009aec:	68fa      	ldr	r2, [r7, #12]
 8009aee:	43d2      	mvns	r2, r2
 8009af0:	400a      	ands	r2, r1
 8009af2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009af6:	4b21      	ldr	r3, [pc, #132]	; (8009b7c <xTaskNotifyWait+0xb8>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

				if( xTicksToWait > ( TickType_t ) 0 )
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00b      	beq.n	8009b1e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b06:	2101      	movs	r1, #1
 8009b08:	6838      	ldr	r0, [r7, #0]
 8009b0a:	f000 f83b 	bl	8009b84 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009b0e:	4b1c      	ldr	r3, [pc, #112]	; (8009b80 <xTaskNotifyWait+0xbc>)
 8009b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b14:	601a      	str	r2, [r3, #0]
 8009b16:	f3bf 8f4f 	dsb	sy
 8009b1a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009b1e:	f000 fcb5 	bl	800a48c <vPortExitCritical>

		taskENTER_CRITICAL();
 8009b22:	f000 fc83 	bl	800a42c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d005      	beq.n	8009b38 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009b2c:	4b13      	ldr	r3, [pc, #76]	; (8009b7c <xTaskNotifyWait+0xb8>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009b38:	4b10      	ldr	r3, [pc, #64]	; (8009b7c <xTaskNotifyWait+0xb8>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	2b02      	cmp	r3, #2
 8009b44:	d002      	beq.n	8009b4c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009b46:	2300      	movs	r3, #0
 8009b48:	617b      	str	r3, [r7, #20]
 8009b4a:	e00a      	b.n	8009b62 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009b4c:	4b0b      	ldr	r3, [pc, #44]	; (8009b7c <xTaskNotifyWait+0xb8>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8009b54:	68ba      	ldr	r2, [r7, #8]
 8009b56:	43d2      	mvns	r2, r2
 8009b58:	400a      	ands	r2, r1
 8009b5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
				xReturn = pdTRUE;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b62:	4b06      	ldr	r3, [pc, #24]	; (8009b7c <xTaskNotifyWait+0xb8>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		}
		taskEXIT_CRITICAL();
 8009b6c:	f000 fc8e 	bl	800a48c <vPortExitCritical>

		return xReturn;
 8009b70:	697b      	ldr	r3, [r7, #20]
	}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3718      	adds	r7, #24
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	20000d14 	.word	0x20000d14
 8009b80:	e000ed04 	.word	0xe000ed04

08009b84 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009b8e:	4b21      	ldr	r3, [pc, #132]	; (8009c14 <prvAddCurrentTaskToDelayedList+0x90>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b94:	4b20      	ldr	r3, [pc, #128]	; (8009c18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	3304      	adds	r3, #4
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7fe faba 	bl	8008114 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ba6:	d10a      	bne.n	8009bbe <prvAddCurrentTaskToDelayedList+0x3a>
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d007      	beq.n	8009bbe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bae:	4b1a      	ldr	r3, [pc, #104]	; (8009c18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	3304      	adds	r3, #4
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	4819      	ldr	r0, [pc, #100]	; (8009c1c <prvAddCurrentTaskToDelayedList+0x98>)
 8009bb8:	f7fe fa51 	bl	800805e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009bbc:	e026      	b.n	8009c0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009bbe:	68fa      	ldr	r2, [r7, #12]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009bc6:	4b14      	ldr	r3, [pc, #80]	; (8009c18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	68ba      	ldr	r2, [r7, #8]
 8009bcc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009bce:	68ba      	ldr	r2, [r7, #8]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d209      	bcs.n	8009bea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bd6:	4b12      	ldr	r3, [pc, #72]	; (8009c20 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	4b0f      	ldr	r3, [pc, #60]	; (8009c18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	3304      	adds	r3, #4
 8009be0:	4619      	mov	r1, r3
 8009be2:	4610      	mov	r0, r2
 8009be4:	f7fe fa5e 	bl	80080a4 <vListInsert>
}
 8009be8:	e010      	b.n	8009c0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bea:	4b0e      	ldr	r3, [pc, #56]	; (8009c24 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	4b0a      	ldr	r3, [pc, #40]	; (8009c18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	3304      	adds	r3, #4
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	4610      	mov	r0, r2
 8009bf8:	f7fe fa54 	bl	80080a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009bfc:	4b0a      	ldr	r3, [pc, #40]	; (8009c28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68ba      	ldr	r2, [r7, #8]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d202      	bcs.n	8009c0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009c06:	4a08      	ldr	r2, [pc, #32]	; (8009c28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	6013      	str	r3, [r2, #0]
}
 8009c0c:	bf00      	nop
 8009c0e:	3710      	adds	r7, #16
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	200011ec 	.word	0x200011ec
 8009c18:	20000d14 	.word	0x20000d14
 8009c1c:	200011d4 	.word	0x200011d4
 8009c20:	200011a4 	.word	0x200011a4
 8009c24:	200011a0 	.word	0x200011a0
 8009c28:	20001208 	.word	0x20001208

08009c2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b08a      	sub	sp, #40	; 0x28
 8009c30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009c32:	2300      	movs	r3, #0
 8009c34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009c36:	f000 facb 	bl	800a1d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009c3a:	4b1c      	ldr	r3, [pc, #112]	; (8009cac <xTimerCreateTimerTask+0x80>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d021      	beq.n	8009c86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009c42:	2300      	movs	r3, #0
 8009c44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009c46:	2300      	movs	r3, #0
 8009c48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009c4a:	1d3a      	adds	r2, r7, #4
 8009c4c:	f107 0108 	add.w	r1, r7, #8
 8009c50:	f107 030c 	add.w	r3, r7, #12
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7fe f9bd 	bl	8007fd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009c5a:	6879      	ldr	r1, [r7, #4]
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	68fa      	ldr	r2, [r7, #12]
 8009c60:	9202      	str	r2, [sp, #8]
 8009c62:	9301      	str	r3, [sp, #4]
 8009c64:	2302      	movs	r3, #2
 8009c66:	9300      	str	r3, [sp, #0]
 8009c68:	2300      	movs	r3, #0
 8009c6a:	460a      	mov	r2, r1
 8009c6c:	4910      	ldr	r1, [pc, #64]	; (8009cb0 <xTimerCreateTimerTask+0x84>)
 8009c6e:	4811      	ldr	r0, [pc, #68]	; (8009cb4 <xTimerCreateTimerTask+0x88>)
 8009c70:	f7ff f856 	bl	8008d20 <xTaskCreateStatic>
 8009c74:	4603      	mov	r3, r0
 8009c76:	4a10      	ldr	r2, [pc, #64]	; (8009cb8 <xTimerCreateTimerTask+0x8c>)
 8009c78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009c7a:	4b0f      	ldr	r3, [pc, #60]	; (8009cb8 <xTimerCreateTimerTask+0x8c>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d001      	beq.n	8009c86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009c82:	2301      	movs	r3, #1
 8009c84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d10a      	bne.n	8009ca2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c90:	f383 8811 	msr	BASEPRI, r3
 8009c94:	f3bf 8f6f 	isb	sy
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	613b      	str	r3, [r7, #16]
}
 8009c9e:	bf00      	nop
 8009ca0:	e7fe      	b.n	8009ca0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009ca2:	697b      	ldr	r3, [r7, #20]
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3718      	adds	r7, #24
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	20001244 	.word	0x20001244
 8009cb0:	08010580 	.word	0x08010580
 8009cb4:	08009dd9 	.word	0x08009dd9
 8009cb8:	20001248 	.word	0x20001248

08009cbc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b08a      	sub	sp, #40	; 0x28
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	607a      	str	r2, [r7, #4]
 8009cc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d10a      	bne.n	8009cea <xTimerGenericCommand+0x2e>
	__asm volatile
 8009cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd8:	f383 8811 	msr	BASEPRI, r3
 8009cdc:	f3bf 8f6f 	isb	sy
 8009ce0:	f3bf 8f4f 	dsb	sy
 8009ce4:	623b      	str	r3, [r7, #32]
}
 8009ce6:	bf00      	nop
 8009ce8:	e7fe      	b.n	8009ce8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009cea:	4b1a      	ldr	r3, [pc, #104]	; (8009d54 <xTimerGenericCommand+0x98>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d02a      	beq.n	8009d48 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	2b05      	cmp	r3, #5
 8009d02:	dc18      	bgt.n	8009d36 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009d04:	f7ff fe52 	bl	80099ac <xTaskGetSchedulerState>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b02      	cmp	r3, #2
 8009d0c:	d109      	bne.n	8009d22 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009d0e:	4b11      	ldr	r3, [pc, #68]	; (8009d54 <xTimerGenericCommand+0x98>)
 8009d10:	6818      	ldr	r0, [r3, #0]
 8009d12:	f107 0110 	add.w	r1, r7, #16
 8009d16:	2300      	movs	r3, #0
 8009d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d1a:	f7fe fb65 	bl	80083e8 <xQueueGenericSend>
 8009d1e:	6278      	str	r0, [r7, #36]	; 0x24
 8009d20:	e012      	b.n	8009d48 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009d22:	4b0c      	ldr	r3, [pc, #48]	; (8009d54 <xTimerGenericCommand+0x98>)
 8009d24:	6818      	ldr	r0, [r3, #0]
 8009d26:	f107 0110 	add.w	r1, r7, #16
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f7fe fb5b 	bl	80083e8 <xQueueGenericSend>
 8009d32:	6278      	str	r0, [r7, #36]	; 0x24
 8009d34:	e008      	b.n	8009d48 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009d36:	4b07      	ldr	r3, [pc, #28]	; (8009d54 <xTimerGenericCommand+0x98>)
 8009d38:	6818      	ldr	r0, [r3, #0]
 8009d3a:	f107 0110 	add.w	r1, r7, #16
 8009d3e:	2300      	movs	r3, #0
 8009d40:	683a      	ldr	r2, [r7, #0]
 8009d42:	f7fe fc4f 	bl	80085e4 <xQueueGenericSendFromISR>
 8009d46:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3728      	adds	r7, #40	; 0x28
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	20001244 	.word	0x20001244

08009d58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b088      	sub	sp, #32
 8009d5c:	af02      	add	r7, sp, #8
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d62:	4b1c      	ldr	r3, [pc, #112]	; (8009dd4 <prvProcessExpiredTimer+0x7c>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	3304      	adds	r3, #4
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7fe f9cf 	bl	8008114 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	69db      	ldr	r3, [r3, #28]
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d122      	bne.n	8009dc4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	699a      	ldr	r2, [r3, #24]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	18d1      	adds	r1, r2, r3
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	683a      	ldr	r2, [r7, #0]
 8009d8a:	6978      	ldr	r0, [r7, #20]
 8009d8c:	f000 f8c8 	bl	8009f20 <prvInsertTimerInActiveList>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d016      	beq.n	8009dc4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d96:	2300      	movs	r3, #0
 8009d98:	9300      	str	r3, [sp, #0]
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	2100      	movs	r1, #0
 8009da0:	6978      	ldr	r0, [r7, #20]
 8009da2:	f7ff ff8b 	bl	8009cbc <xTimerGenericCommand>
 8009da6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d10a      	bne.n	8009dc4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	60fb      	str	r3, [r7, #12]
}
 8009dc0:	bf00      	nop
 8009dc2:	e7fe      	b.n	8009dc2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc8:	6978      	ldr	r0, [r7, #20]
 8009dca:	4798      	blx	r3
}
 8009dcc:	bf00      	nop
 8009dce:	3718      	adds	r7, #24
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	2000123c 	.word	0x2000123c

08009dd8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009de0:	f107 0308 	add.w	r3, r7, #8
 8009de4:	4618      	mov	r0, r3
 8009de6:	f000 f857 	bl	8009e98 <prvGetNextExpireTime>
 8009dea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	4619      	mov	r1, r3
 8009df0:	68f8      	ldr	r0, [r7, #12]
 8009df2:	f000 f803 	bl	8009dfc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009df6:	f000 f8d5 	bl	8009fa4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009dfa:	e7f1      	b.n	8009de0 <prvTimerTask+0x8>

08009dfc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009e06:	f7ff f9df 	bl	80091c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e0a:	f107 0308 	add.w	r3, r7, #8
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f000 f866 	bl	8009ee0 <prvSampleTimeNow>
 8009e14:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d130      	bne.n	8009e7e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d10a      	bne.n	8009e38 <prvProcessTimerOrBlockTask+0x3c>
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d806      	bhi.n	8009e38 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009e2a:	f7ff f9db 	bl	80091e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009e2e:	68f9      	ldr	r1, [r7, #12]
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f7ff ff91 	bl	8009d58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009e36:	e024      	b.n	8009e82 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d008      	beq.n	8009e50 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009e3e:	4b13      	ldr	r3, [pc, #76]	; (8009e8c <prvProcessTimerOrBlockTask+0x90>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	bf0c      	ite	eq
 8009e48:	2301      	moveq	r3, #1
 8009e4a:	2300      	movne	r3, #0
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009e50:	4b0f      	ldr	r3, [pc, #60]	; (8009e90 <prvProcessTimerOrBlockTask+0x94>)
 8009e52:	6818      	ldr	r0, [r3, #0]
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	1ad3      	subs	r3, r2, r3
 8009e5a:	683a      	ldr	r2, [r7, #0]
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	f7fe ff2b 	bl	8008cb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009e62:	f7ff f9bf 	bl	80091e4 <xTaskResumeAll>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d10a      	bne.n	8009e82 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009e6c:	4b09      	ldr	r3, [pc, #36]	; (8009e94 <prvProcessTimerOrBlockTask+0x98>)
 8009e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e72:	601a      	str	r2, [r3, #0]
 8009e74:	f3bf 8f4f 	dsb	sy
 8009e78:	f3bf 8f6f 	isb	sy
}
 8009e7c:	e001      	b.n	8009e82 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009e7e:	f7ff f9b1 	bl	80091e4 <xTaskResumeAll>
}
 8009e82:	bf00      	nop
 8009e84:	3710      	adds	r7, #16
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	20001240 	.word	0x20001240
 8009e90:	20001244 	.word	0x20001244
 8009e94:	e000ed04 	.word	0xe000ed04

08009e98 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ea0:	4b0e      	ldr	r3, [pc, #56]	; (8009edc <prvGetNextExpireTime+0x44>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	bf0c      	ite	eq
 8009eaa:	2301      	moveq	r3, #1
 8009eac:	2300      	movne	r3, #0
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d105      	bne.n	8009eca <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ebe:	4b07      	ldr	r3, [pc, #28]	; (8009edc <prvGetNextExpireTime+0x44>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	60fb      	str	r3, [r7, #12]
 8009ec8:	e001      	b.n	8009ece <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009ece:	68fb      	ldr	r3, [r7, #12]
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3714      	adds	r7, #20
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bc80      	pop	{r7}
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	2000123c 	.word	0x2000123c

08009ee0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009ee8:	f7ff fa1a 	bl	8009320 <xTaskGetTickCount>
 8009eec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009eee:	4b0b      	ldr	r3, [pc, #44]	; (8009f1c <prvSampleTimeNow+0x3c>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	68fa      	ldr	r2, [r7, #12]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d205      	bcs.n	8009f04 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009ef8:	f000 f908 	bl	800a10c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2201      	movs	r2, #1
 8009f00:	601a      	str	r2, [r3, #0]
 8009f02:	e002      	b.n	8009f0a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009f0a:	4a04      	ldr	r2, [pc, #16]	; (8009f1c <prvSampleTimeNow+0x3c>)
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009f10:	68fb      	ldr	r3, [r7, #12]
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	2000124c 	.word	0x2000124c

08009f20 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b086      	sub	sp, #24
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
 8009f2c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	68ba      	ldr	r2, [r7, #8]
 8009f36:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d812      	bhi.n	8009f6c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	1ad2      	subs	r2, r2, r3
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	699b      	ldr	r3, [r3, #24]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d302      	bcc.n	8009f5a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009f54:	2301      	movs	r3, #1
 8009f56:	617b      	str	r3, [r7, #20]
 8009f58:	e01b      	b.n	8009f92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009f5a:	4b10      	ldr	r3, [pc, #64]	; (8009f9c <prvInsertTimerInActiveList+0x7c>)
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	3304      	adds	r3, #4
 8009f62:	4619      	mov	r1, r3
 8009f64:	4610      	mov	r0, r2
 8009f66:	f7fe f89d 	bl	80080a4 <vListInsert>
 8009f6a:	e012      	b.n	8009f92 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d206      	bcs.n	8009f82 <prvInsertTimerInActiveList+0x62>
 8009f74:	68ba      	ldr	r2, [r7, #8]
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d302      	bcc.n	8009f82 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	617b      	str	r3, [r7, #20]
 8009f80:	e007      	b.n	8009f92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f82:	4b07      	ldr	r3, [pc, #28]	; (8009fa0 <prvInsertTimerInActiveList+0x80>)
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	3304      	adds	r3, #4
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	4610      	mov	r0, r2
 8009f8e:	f7fe f889 	bl	80080a4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009f92:	697b      	ldr	r3, [r7, #20]
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3718      	adds	r7, #24
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	20001240 	.word	0x20001240
 8009fa0:	2000123c 	.word	0x2000123c

08009fa4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b08e      	sub	sp, #56	; 0x38
 8009fa8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009faa:	e09d      	b.n	800a0e8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	da18      	bge.n	8009fe4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009fb2:	1d3b      	adds	r3, r7, #4
 8009fb4:	3304      	adds	r3, #4
 8009fb6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d10a      	bne.n	8009fd4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc2:	f383 8811 	msr	BASEPRI, r3
 8009fc6:	f3bf 8f6f 	isb	sy
 8009fca:	f3bf 8f4f 	dsb	sy
 8009fce:	61fb      	str	r3, [r7, #28]
}
 8009fd0:	bf00      	nop
 8009fd2:	e7fe      	b.n	8009fd2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fda:	6850      	ldr	r0, [r2, #4]
 8009fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fde:	6892      	ldr	r2, [r2, #8]
 8009fe0:	4611      	mov	r1, r2
 8009fe2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	db7e      	blt.n	800a0e8 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff0:	695b      	ldr	r3, [r3, #20]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d004      	beq.n	800a000 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff8:	3304      	adds	r3, #4
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7fe f88a 	bl	8008114 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a000:	463b      	mov	r3, r7
 800a002:	4618      	mov	r0, r3
 800a004:	f7ff ff6c 	bl	8009ee0 <prvSampleTimeNow>
 800a008:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2b09      	cmp	r3, #9
 800a00e:	d86a      	bhi.n	800a0e6 <prvProcessReceivedCommands+0x142>
 800a010:	a201      	add	r2, pc, #4	; (adr r2, 800a018 <prvProcessReceivedCommands+0x74>)
 800a012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a016:	bf00      	nop
 800a018:	0800a041 	.word	0x0800a041
 800a01c:	0800a041 	.word	0x0800a041
 800a020:	0800a041 	.word	0x0800a041
 800a024:	0800a0e9 	.word	0x0800a0e9
 800a028:	0800a09d 	.word	0x0800a09d
 800a02c:	0800a0d5 	.word	0x0800a0d5
 800a030:	0800a041 	.word	0x0800a041
 800a034:	0800a041 	.word	0x0800a041
 800a038:	0800a0e9 	.word	0x0800a0e9
 800a03c:	0800a09d 	.word	0x0800a09d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a040:	68ba      	ldr	r2, [r7, #8]
 800a042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a044:	699b      	ldr	r3, [r3, #24]
 800a046:	18d1      	adds	r1, r2, r3
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a04c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a04e:	f7ff ff67 	bl	8009f20 <prvInsertTimerInActiveList>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d047      	beq.n	800a0e8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a05e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a062:	69db      	ldr	r3, [r3, #28]
 800a064:	2b01      	cmp	r3, #1
 800a066:	d13f      	bne.n	800a0e8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a068:	68ba      	ldr	r2, [r7, #8]
 800a06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06c:	699b      	ldr	r3, [r3, #24]
 800a06e:	441a      	add	r2, r3
 800a070:	2300      	movs	r3, #0
 800a072:	9300      	str	r3, [sp, #0]
 800a074:	2300      	movs	r3, #0
 800a076:	2100      	movs	r1, #0
 800a078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a07a:	f7ff fe1f 	bl	8009cbc <xTimerGenericCommand>
 800a07e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a080:	6a3b      	ldr	r3, [r7, #32]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d130      	bne.n	800a0e8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800a086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08a:	f383 8811 	msr	BASEPRI, r3
 800a08e:	f3bf 8f6f 	isb	sy
 800a092:	f3bf 8f4f 	dsb	sy
 800a096:	61bb      	str	r3, [r7, #24]
}
 800a098:	bf00      	nop
 800a09a:	e7fe      	b.n	800a09a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a09c:	68ba      	ldr	r2, [r7, #8]
 800a09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a4:	699b      	ldr	r3, [r3, #24]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d10a      	bne.n	800a0c0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800a0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ae:	f383 8811 	msr	BASEPRI, r3
 800a0b2:	f3bf 8f6f 	isb	sy
 800a0b6:	f3bf 8f4f 	dsb	sy
 800a0ba:	617b      	str	r3, [r7, #20]
}
 800a0bc:	bf00      	nop
 800a0be:	e7fe      	b.n	800a0be <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c2:	699a      	ldr	r2, [r3, #24]
 800a0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c6:	18d1      	adds	r1, r2, r3
 800a0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0ce:	f7ff ff27 	bl	8009f20 <prvInsertTimerInActiveList>
					break;
 800a0d2:	e009      	b.n	800a0e8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d104      	bne.n	800a0e8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800a0de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0e0:	f000 fb68 	bl	800a7b4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a0e4:	e000      	b.n	800a0e8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800a0e6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a0e8:	4b07      	ldr	r3, [pc, #28]	; (800a108 <prvProcessReceivedCommands+0x164>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	1d39      	adds	r1, r7, #4
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7fe fb0f 	bl	8008714 <xQueueReceive>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f47f af57 	bne.w	8009fac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a0fe:	bf00      	nop
 800a100:	bf00      	nop
 800a102:	3730      	adds	r7, #48	; 0x30
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}
 800a108:	20001244 	.word	0x20001244

0800a10c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b088      	sub	sp, #32
 800a110:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a112:	e045      	b.n	800a1a0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a114:	4b2c      	ldr	r3, [pc, #176]	; (800a1c8 <prvSwitchTimerLists+0xbc>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	68db      	ldr	r3, [r3, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a11e:	4b2a      	ldr	r3, [pc, #168]	; (800a1c8 <prvSwitchTimerLists+0xbc>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	3304      	adds	r3, #4
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7fd fff1 	bl	8008114 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	69db      	ldr	r3, [r3, #28]
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d12e      	bne.n	800a1a0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	699b      	ldr	r3, [r3, #24]
 800a146:	693a      	ldr	r2, [r7, #16]
 800a148:	4413      	add	r3, r2
 800a14a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a14c:	68ba      	ldr	r2, [r7, #8]
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	429a      	cmp	r2, r3
 800a152:	d90e      	bls.n	800a172 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	68ba      	ldr	r2, [r7, #8]
 800a158:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	68fa      	ldr	r2, [r7, #12]
 800a15e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a160:	4b19      	ldr	r3, [pc, #100]	; (800a1c8 <prvSwitchTimerLists+0xbc>)
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	3304      	adds	r3, #4
 800a168:	4619      	mov	r1, r3
 800a16a:	4610      	mov	r0, r2
 800a16c:	f7fd ff9a 	bl	80080a4 <vListInsert>
 800a170:	e016      	b.n	800a1a0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a172:	2300      	movs	r3, #0
 800a174:	9300      	str	r3, [sp, #0]
 800a176:	2300      	movs	r3, #0
 800a178:	693a      	ldr	r2, [r7, #16]
 800a17a:	2100      	movs	r1, #0
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	f7ff fd9d 	bl	8009cbc <xTimerGenericCommand>
 800a182:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d10a      	bne.n	800a1a0 <prvSwitchTimerLists+0x94>
	__asm volatile
 800a18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	603b      	str	r3, [r7, #0]
}
 800a19c:	bf00      	nop
 800a19e:	e7fe      	b.n	800a19e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a1a0:	4b09      	ldr	r3, [pc, #36]	; (800a1c8 <prvSwitchTimerLists+0xbc>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d1b4      	bne.n	800a114 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a1aa:	4b07      	ldr	r3, [pc, #28]	; (800a1c8 <prvSwitchTimerLists+0xbc>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a1b0:	4b06      	ldr	r3, [pc, #24]	; (800a1cc <prvSwitchTimerLists+0xc0>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a04      	ldr	r2, [pc, #16]	; (800a1c8 <prvSwitchTimerLists+0xbc>)
 800a1b6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a1b8:	4a04      	ldr	r2, [pc, #16]	; (800a1cc <prvSwitchTimerLists+0xc0>)
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	6013      	str	r3, [r2, #0]
}
 800a1be:	bf00      	nop
 800a1c0:	3718      	adds	r7, #24
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	2000123c 	.word	0x2000123c
 800a1cc:	20001240 	.word	0x20001240

0800a1d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a1d6:	f000 f929 	bl	800a42c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a1da:	4b15      	ldr	r3, [pc, #84]	; (800a230 <prvCheckForValidListAndQueue+0x60>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d120      	bne.n	800a224 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a1e2:	4814      	ldr	r0, [pc, #80]	; (800a234 <prvCheckForValidListAndQueue+0x64>)
 800a1e4:	f7fd ff10 	bl	8008008 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a1e8:	4813      	ldr	r0, [pc, #76]	; (800a238 <prvCheckForValidListAndQueue+0x68>)
 800a1ea:	f7fd ff0d 	bl	8008008 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a1ee:	4b13      	ldr	r3, [pc, #76]	; (800a23c <prvCheckForValidListAndQueue+0x6c>)
 800a1f0:	4a10      	ldr	r2, [pc, #64]	; (800a234 <prvCheckForValidListAndQueue+0x64>)
 800a1f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a1f4:	4b12      	ldr	r3, [pc, #72]	; (800a240 <prvCheckForValidListAndQueue+0x70>)
 800a1f6:	4a10      	ldr	r2, [pc, #64]	; (800a238 <prvCheckForValidListAndQueue+0x68>)
 800a1f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	9300      	str	r3, [sp, #0]
 800a1fe:	4b11      	ldr	r3, [pc, #68]	; (800a244 <prvCheckForValidListAndQueue+0x74>)
 800a200:	4a11      	ldr	r2, [pc, #68]	; (800a248 <prvCheckForValidListAndQueue+0x78>)
 800a202:	2110      	movs	r1, #16
 800a204:	200a      	movs	r0, #10
 800a206:	f7fe f817 	bl	8008238 <xQueueGenericCreateStatic>
 800a20a:	4603      	mov	r3, r0
 800a20c:	4a08      	ldr	r2, [pc, #32]	; (800a230 <prvCheckForValidListAndQueue+0x60>)
 800a20e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a210:	4b07      	ldr	r3, [pc, #28]	; (800a230 <prvCheckForValidListAndQueue+0x60>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d005      	beq.n	800a224 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a218:	4b05      	ldr	r3, [pc, #20]	; (800a230 <prvCheckForValidListAndQueue+0x60>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	490b      	ldr	r1, [pc, #44]	; (800a24c <prvCheckForValidListAndQueue+0x7c>)
 800a21e:	4618      	mov	r0, r3
 800a220:	f7fe fd22 	bl	8008c68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a224:	f000 f932 	bl	800a48c <vPortExitCritical>
}
 800a228:	bf00      	nop
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	20001244 	.word	0x20001244
 800a234:	20001214 	.word	0x20001214
 800a238:	20001228 	.word	0x20001228
 800a23c:	2000123c 	.word	0x2000123c
 800a240:	20001240 	.word	0x20001240
 800a244:	200012f0 	.word	0x200012f0
 800a248:	20001250 	.word	0x20001250
 800a24c:	08010588 	.word	0x08010588

0800a250 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a250:	b480      	push	{r7}
 800a252:	b085      	sub	sp, #20
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	3b04      	subs	r3, #4
 800a260:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a268:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	3b04      	subs	r3, #4
 800a26e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	f023 0201 	bic.w	r2, r3, #1
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	3b04      	subs	r3, #4
 800a27e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a280:	4a08      	ldr	r2, [pc, #32]	; (800a2a4 <pxPortInitialiseStack+0x54>)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	3b14      	subs	r3, #20
 800a28a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	3b20      	subs	r3, #32
 800a296:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a298:	68fb      	ldr	r3, [r7, #12]
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3714      	adds	r7, #20
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bc80      	pop	{r7}
 800a2a2:	4770      	bx	lr
 800a2a4:	0800a2a9 	.word	0x0800a2a9

0800a2a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a2b2:	4b12      	ldr	r3, [pc, #72]	; (800a2fc <prvTaskExitError+0x54>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ba:	d00a      	beq.n	800a2d2 <prvTaskExitError+0x2a>
	__asm volatile
 800a2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c0:	f383 8811 	msr	BASEPRI, r3
 800a2c4:	f3bf 8f6f 	isb	sy
 800a2c8:	f3bf 8f4f 	dsb	sy
 800a2cc:	60fb      	str	r3, [r7, #12]
}
 800a2ce:	bf00      	nop
 800a2d0:	e7fe      	b.n	800a2d0 <prvTaskExitError+0x28>
	__asm volatile
 800a2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d6:	f383 8811 	msr	BASEPRI, r3
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	60bb      	str	r3, [r7, #8]
}
 800a2e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a2e6:	bf00      	nop
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d0fc      	beq.n	800a2e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a2ee:	bf00      	nop
 800a2f0:	bf00      	nop
 800a2f2:	3714      	adds	r7, #20
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bc80      	pop	{r7}
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop
 800a2fc:	20000010 	.word	0x20000010

0800a300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a300:	4b07      	ldr	r3, [pc, #28]	; (800a320 <pxCurrentTCBConst2>)
 800a302:	6819      	ldr	r1, [r3, #0]
 800a304:	6808      	ldr	r0, [r1, #0]
 800a306:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a30a:	f380 8809 	msr	PSP, r0
 800a30e:	f3bf 8f6f 	isb	sy
 800a312:	f04f 0000 	mov.w	r0, #0
 800a316:	f380 8811 	msr	BASEPRI, r0
 800a31a:	f04e 0e0d 	orr.w	lr, lr, #13
 800a31e:	4770      	bx	lr

0800a320 <pxCurrentTCBConst2>:
 800a320:	20000d14 	.word	0x20000d14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a324:	bf00      	nop
 800a326:	bf00      	nop

0800a328 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a328:	4806      	ldr	r0, [pc, #24]	; (800a344 <prvPortStartFirstTask+0x1c>)
 800a32a:	6800      	ldr	r0, [r0, #0]
 800a32c:	6800      	ldr	r0, [r0, #0]
 800a32e:	f380 8808 	msr	MSP, r0
 800a332:	b662      	cpsie	i
 800a334:	b661      	cpsie	f
 800a336:	f3bf 8f4f 	dsb	sy
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	df00      	svc	0
 800a340:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a342:	bf00      	nop
 800a344:	e000ed08 	.word	0xe000ed08

0800a348 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a34e:	4b32      	ldr	r3, [pc, #200]	; (800a418 <xPortStartScheduler+0xd0>)
 800a350:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	b2db      	uxtb	r3, r3
 800a358:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	22ff      	movs	r2, #255	; 0xff
 800a35e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	b2db      	uxtb	r3, r3
 800a366:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a368:	78fb      	ldrb	r3, [r7, #3]
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a370:	b2da      	uxtb	r2, r3
 800a372:	4b2a      	ldr	r3, [pc, #168]	; (800a41c <xPortStartScheduler+0xd4>)
 800a374:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a376:	4b2a      	ldr	r3, [pc, #168]	; (800a420 <xPortStartScheduler+0xd8>)
 800a378:	2207      	movs	r2, #7
 800a37a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a37c:	e009      	b.n	800a392 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a37e:	4b28      	ldr	r3, [pc, #160]	; (800a420 <xPortStartScheduler+0xd8>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	3b01      	subs	r3, #1
 800a384:	4a26      	ldr	r2, [pc, #152]	; (800a420 <xPortStartScheduler+0xd8>)
 800a386:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a388:	78fb      	ldrb	r3, [r7, #3]
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	005b      	lsls	r3, r3, #1
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a392:	78fb      	ldrb	r3, [r7, #3]
 800a394:	b2db      	uxtb	r3, r3
 800a396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a39a:	2b80      	cmp	r3, #128	; 0x80
 800a39c:	d0ef      	beq.n	800a37e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a39e:	4b20      	ldr	r3, [pc, #128]	; (800a420 <xPortStartScheduler+0xd8>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f1c3 0307 	rsb	r3, r3, #7
 800a3a6:	2b04      	cmp	r3, #4
 800a3a8:	d00a      	beq.n	800a3c0 <xPortStartScheduler+0x78>
	__asm volatile
 800a3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ae:	f383 8811 	msr	BASEPRI, r3
 800a3b2:	f3bf 8f6f 	isb	sy
 800a3b6:	f3bf 8f4f 	dsb	sy
 800a3ba:	60bb      	str	r3, [r7, #8]
}
 800a3bc:	bf00      	nop
 800a3be:	e7fe      	b.n	800a3be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a3c0:	4b17      	ldr	r3, [pc, #92]	; (800a420 <xPortStartScheduler+0xd8>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	021b      	lsls	r3, r3, #8
 800a3c6:	4a16      	ldr	r2, [pc, #88]	; (800a420 <xPortStartScheduler+0xd8>)
 800a3c8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a3ca:	4b15      	ldr	r3, [pc, #84]	; (800a420 <xPortStartScheduler+0xd8>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a3d2:	4a13      	ldr	r2, [pc, #76]	; (800a420 <xPortStartScheduler+0xd8>)
 800a3d4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	b2da      	uxtb	r2, r3
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a3de:	4b11      	ldr	r3, [pc, #68]	; (800a424 <xPortStartScheduler+0xdc>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4a10      	ldr	r2, [pc, #64]	; (800a424 <xPortStartScheduler+0xdc>)
 800a3e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a3e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a3ea:	4b0e      	ldr	r3, [pc, #56]	; (800a424 <xPortStartScheduler+0xdc>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a0d      	ldr	r2, [pc, #52]	; (800a424 <xPortStartScheduler+0xdc>)
 800a3f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a3f4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a3f6:	f000 f8b9 	bl	800a56c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a3fa:	4b0b      	ldr	r3, [pc, #44]	; (800a428 <xPortStartScheduler+0xe0>)
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a400:	f7ff ff92 	bl	800a328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a404:	f7ff f858 	bl	80094b8 <vTaskSwitchContext>
	prvTaskExitError();
 800a408:	f7ff ff4e 	bl	800a2a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a40c:	2300      	movs	r3, #0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3710      	adds	r7, #16
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	e000e400 	.word	0xe000e400
 800a41c:	20001340 	.word	0x20001340
 800a420:	20001344 	.word	0x20001344
 800a424:	e000ed20 	.word	0xe000ed20
 800a428:	20000010 	.word	0x20000010

0800a42c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
	__asm volatile
 800a432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a436:	f383 8811 	msr	BASEPRI, r3
 800a43a:	f3bf 8f6f 	isb	sy
 800a43e:	f3bf 8f4f 	dsb	sy
 800a442:	607b      	str	r3, [r7, #4]
}
 800a444:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a446:	4b0f      	ldr	r3, [pc, #60]	; (800a484 <vPortEnterCritical+0x58>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	3301      	adds	r3, #1
 800a44c:	4a0d      	ldr	r2, [pc, #52]	; (800a484 <vPortEnterCritical+0x58>)
 800a44e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a450:	4b0c      	ldr	r3, [pc, #48]	; (800a484 <vPortEnterCritical+0x58>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2b01      	cmp	r3, #1
 800a456:	d10f      	bne.n	800a478 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a458:	4b0b      	ldr	r3, [pc, #44]	; (800a488 <vPortEnterCritical+0x5c>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d00a      	beq.n	800a478 <vPortEnterCritical+0x4c>
	__asm volatile
 800a462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a466:	f383 8811 	msr	BASEPRI, r3
 800a46a:	f3bf 8f6f 	isb	sy
 800a46e:	f3bf 8f4f 	dsb	sy
 800a472:	603b      	str	r3, [r7, #0]
}
 800a474:	bf00      	nop
 800a476:	e7fe      	b.n	800a476 <vPortEnterCritical+0x4a>
	}
}
 800a478:	bf00      	nop
 800a47a:	370c      	adds	r7, #12
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bc80      	pop	{r7}
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop
 800a484:	20000010 	.word	0x20000010
 800a488:	e000ed04 	.word	0xe000ed04

0800a48c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a492:	4b11      	ldr	r3, [pc, #68]	; (800a4d8 <vPortExitCritical+0x4c>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d10a      	bne.n	800a4b0 <vPortExitCritical+0x24>
	__asm volatile
 800a49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49e:	f383 8811 	msr	BASEPRI, r3
 800a4a2:	f3bf 8f6f 	isb	sy
 800a4a6:	f3bf 8f4f 	dsb	sy
 800a4aa:	607b      	str	r3, [r7, #4]
}
 800a4ac:	bf00      	nop
 800a4ae:	e7fe      	b.n	800a4ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a4b0:	4b09      	ldr	r3, [pc, #36]	; (800a4d8 <vPortExitCritical+0x4c>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	4a08      	ldr	r2, [pc, #32]	; (800a4d8 <vPortExitCritical+0x4c>)
 800a4b8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a4ba:	4b07      	ldr	r3, [pc, #28]	; (800a4d8 <vPortExitCritical+0x4c>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d105      	bne.n	800a4ce <vPortExitCritical+0x42>
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	f383 8811 	msr	BASEPRI, r3
}
 800a4cc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a4ce:	bf00      	nop
 800a4d0:	370c      	adds	r7, #12
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bc80      	pop	{r7}
 800a4d6:	4770      	bx	lr
 800a4d8:	20000010 	.word	0x20000010
 800a4dc:	00000000 	.word	0x00000000

0800a4e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a4e0:	f3ef 8009 	mrs	r0, PSP
 800a4e4:	f3bf 8f6f 	isb	sy
 800a4e8:	4b0d      	ldr	r3, [pc, #52]	; (800a520 <pxCurrentTCBConst>)
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a4f0:	6010      	str	r0, [r2, #0]
 800a4f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a4f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a4fa:	f380 8811 	msr	BASEPRI, r0
 800a4fe:	f7fe ffdb 	bl	80094b8 <vTaskSwitchContext>
 800a502:	f04f 0000 	mov.w	r0, #0
 800a506:	f380 8811 	msr	BASEPRI, r0
 800a50a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a50e:	6819      	ldr	r1, [r3, #0]
 800a510:	6808      	ldr	r0, [r1, #0]
 800a512:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a516:	f380 8809 	msr	PSP, r0
 800a51a:	f3bf 8f6f 	isb	sy
 800a51e:	4770      	bx	lr

0800a520 <pxCurrentTCBConst>:
 800a520:	20000d14 	.word	0x20000d14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a524:	bf00      	nop
 800a526:	bf00      	nop

0800a528 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
	__asm volatile
 800a52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a532:	f383 8811 	msr	BASEPRI, r3
 800a536:	f3bf 8f6f 	isb	sy
 800a53a:	f3bf 8f4f 	dsb	sy
 800a53e:	607b      	str	r3, [r7, #4]
}
 800a540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a542:	f7fe fefb 	bl	800933c <xTaskIncrementTick>
 800a546:	4603      	mov	r3, r0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d003      	beq.n	800a554 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a54c:	4b06      	ldr	r3, [pc, #24]	; (800a568 <xPortSysTickHandler+0x40>)
 800a54e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a552:	601a      	str	r2, [r3, #0]
 800a554:	2300      	movs	r3, #0
 800a556:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	f383 8811 	msr	BASEPRI, r3
}
 800a55e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a560:	bf00      	nop
 800a562:	3708      	adds	r7, #8
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}
 800a568:	e000ed04 	.word	0xe000ed04

0800a56c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a56c:	b480      	push	{r7}
 800a56e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a570:	4b0a      	ldr	r3, [pc, #40]	; (800a59c <vPortSetupTimerInterrupt+0x30>)
 800a572:	2200      	movs	r2, #0
 800a574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a576:	4b0a      	ldr	r3, [pc, #40]	; (800a5a0 <vPortSetupTimerInterrupt+0x34>)
 800a578:	2200      	movs	r2, #0
 800a57a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a57c:	4b09      	ldr	r3, [pc, #36]	; (800a5a4 <vPortSetupTimerInterrupt+0x38>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a09      	ldr	r2, [pc, #36]	; (800a5a8 <vPortSetupTimerInterrupt+0x3c>)
 800a582:	fba2 2303 	umull	r2, r3, r2, r3
 800a586:	099b      	lsrs	r3, r3, #6
 800a588:	4a08      	ldr	r2, [pc, #32]	; (800a5ac <vPortSetupTimerInterrupt+0x40>)
 800a58a:	3b01      	subs	r3, #1
 800a58c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a58e:	4b03      	ldr	r3, [pc, #12]	; (800a59c <vPortSetupTimerInterrupt+0x30>)
 800a590:	2207      	movs	r2, #7
 800a592:	601a      	str	r2, [r3, #0]
}
 800a594:	bf00      	nop
 800a596:	46bd      	mov	sp, r7
 800a598:	bc80      	pop	{r7}
 800a59a:	4770      	bx	lr
 800a59c:	e000e010 	.word	0xe000e010
 800a5a0:	e000e018 	.word	0xe000e018
 800a5a4:	20000004 	.word	0x20000004
 800a5a8:	10624dd3 	.word	0x10624dd3
 800a5ac:	e000e014 	.word	0xe000e014

0800a5b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b085      	sub	sp, #20
 800a5b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a5b6:	f3ef 8305 	mrs	r3, IPSR
 800a5ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2b0f      	cmp	r3, #15
 800a5c0:	d914      	bls.n	800a5ec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a5c2:	4a16      	ldr	r2, [pc, #88]	; (800a61c <vPortValidateInterruptPriority+0x6c>)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	4413      	add	r3, r2
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a5cc:	4b14      	ldr	r3, [pc, #80]	; (800a620 <vPortValidateInterruptPriority+0x70>)
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	7afa      	ldrb	r2, [r7, #11]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d20a      	bcs.n	800a5ec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5da:	f383 8811 	msr	BASEPRI, r3
 800a5de:	f3bf 8f6f 	isb	sy
 800a5e2:	f3bf 8f4f 	dsb	sy
 800a5e6:	607b      	str	r3, [r7, #4]
}
 800a5e8:	bf00      	nop
 800a5ea:	e7fe      	b.n	800a5ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a5ec:	4b0d      	ldr	r3, [pc, #52]	; (800a624 <vPortValidateInterruptPriority+0x74>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a5f4:	4b0c      	ldr	r3, [pc, #48]	; (800a628 <vPortValidateInterruptPriority+0x78>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d90a      	bls.n	800a612 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a600:	f383 8811 	msr	BASEPRI, r3
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	603b      	str	r3, [r7, #0]
}
 800a60e:	bf00      	nop
 800a610:	e7fe      	b.n	800a610 <vPortValidateInterruptPriority+0x60>
	}
 800a612:	bf00      	nop
 800a614:	3714      	adds	r7, #20
 800a616:	46bd      	mov	sp, r7
 800a618:	bc80      	pop	{r7}
 800a61a:	4770      	bx	lr
 800a61c:	e000e3f0 	.word	0xe000e3f0
 800a620:	20001340 	.word	0x20001340
 800a624:	e000ed0c 	.word	0xe000ed0c
 800a628:	20001344 	.word	0x20001344

0800a62c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b08a      	sub	sp, #40	; 0x28
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a634:	2300      	movs	r3, #0
 800a636:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a638:	f7fe fdc6 	bl	80091c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a63c:	4b58      	ldr	r3, [pc, #352]	; (800a7a0 <pvPortMalloc+0x174>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d101      	bne.n	800a648 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a644:	f000 f910 	bl	800a868 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a648:	4b56      	ldr	r3, [pc, #344]	; (800a7a4 <pvPortMalloc+0x178>)
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	4013      	ands	r3, r2
 800a650:	2b00      	cmp	r3, #0
 800a652:	f040 808e 	bne.w	800a772 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d01d      	beq.n	800a698 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a65c:	2208      	movs	r2, #8
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	4413      	add	r3, r2
 800a662:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f003 0307 	and.w	r3, r3, #7
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d014      	beq.n	800a698 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f023 0307 	bic.w	r3, r3, #7
 800a674:	3308      	adds	r3, #8
 800a676:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f003 0307 	and.w	r3, r3, #7
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d00a      	beq.n	800a698 <pvPortMalloc+0x6c>
	__asm volatile
 800a682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a686:	f383 8811 	msr	BASEPRI, r3
 800a68a:	f3bf 8f6f 	isb	sy
 800a68e:	f3bf 8f4f 	dsb	sy
 800a692:	617b      	str	r3, [r7, #20]
}
 800a694:	bf00      	nop
 800a696:	e7fe      	b.n	800a696 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d069      	beq.n	800a772 <pvPortMalloc+0x146>
 800a69e:	4b42      	ldr	r3, [pc, #264]	; (800a7a8 <pvPortMalloc+0x17c>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d864      	bhi.n	800a772 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a6a8:	4b40      	ldr	r3, [pc, #256]	; (800a7ac <pvPortMalloc+0x180>)
 800a6aa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a6ac:	4b3f      	ldr	r3, [pc, #252]	; (800a7ac <pvPortMalloc+0x180>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6b2:	e004      	b.n	800a6be <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d903      	bls.n	800a6d0 <pvPortMalloc+0xa4>
 800a6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d1f1      	bne.n	800a6b4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a6d0:	4b33      	ldr	r3, [pc, #204]	; (800a7a0 <pvPortMalloc+0x174>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d04b      	beq.n	800a772 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a6da:	6a3b      	ldr	r3, [r7, #32]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2208      	movs	r2, #8
 800a6e0:	4413      	add	r3, r2
 800a6e2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	6a3b      	ldr	r3, [r7, #32]
 800a6ea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ee:	685a      	ldr	r2, [r3, #4]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	1ad2      	subs	r2, r2, r3
 800a6f4:	2308      	movs	r3, #8
 800a6f6:	005b      	lsls	r3, r3, #1
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d91f      	bls.n	800a73c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a6fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	4413      	add	r3, r2
 800a702:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a704:	69bb      	ldr	r3, [r7, #24]
 800a706:	f003 0307 	and.w	r3, r3, #7
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d00a      	beq.n	800a724 <pvPortMalloc+0xf8>
	__asm volatile
 800a70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a712:	f383 8811 	msr	BASEPRI, r3
 800a716:	f3bf 8f6f 	isb	sy
 800a71a:	f3bf 8f4f 	dsb	sy
 800a71e:	613b      	str	r3, [r7, #16]
}
 800a720:	bf00      	nop
 800a722:	e7fe      	b.n	800a722 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a726:	685a      	ldr	r2, [r3, #4]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	1ad2      	subs	r2, r2, r3
 800a72c:	69bb      	ldr	r3, [r7, #24]
 800a72e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a736:	69b8      	ldr	r0, [r7, #24]
 800a738:	f000 f8f8 	bl	800a92c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a73c:	4b1a      	ldr	r3, [pc, #104]	; (800a7a8 <pvPortMalloc+0x17c>)
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	1ad3      	subs	r3, r2, r3
 800a746:	4a18      	ldr	r2, [pc, #96]	; (800a7a8 <pvPortMalloc+0x17c>)
 800a748:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a74a:	4b17      	ldr	r3, [pc, #92]	; (800a7a8 <pvPortMalloc+0x17c>)
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	4b18      	ldr	r3, [pc, #96]	; (800a7b0 <pvPortMalloc+0x184>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	429a      	cmp	r2, r3
 800a754:	d203      	bcs.n	800a75e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a756:	4b14      	ldr	r3, [pc, #80]	; (800a7a8 <pvPortMalloc+0x17c>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4a15      	ldr	r2, [pc, #84]	; (800a7b0 <pvPortMalloc+0x184>)
 800a75c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a760:	685a      	ldr	r2, [r3, #4]
 800a762:	4b10      	ldr	r3, [pc, #64]	; (800a7a4 <pvPortMalloc+0x178>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	431a      	orrs	r2, r3
 800a768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76e:	2200      	movs	r2, #0
 800a770:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a772:	f7fe fd37 	bl	80091e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a776:	69fb      	ldr	r3, [r7, #28]
 800a778:	f003 0307 	and.w	r3, r3, #7
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d00a      	beq.n	800a796 <pvPortMalloc+0x16a>
	__asm volatile
 800a780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a784:	f383 8811 	msr	BASEPRI, r3
 800a788:	f3bf 8f6f 	isb	sy
 800a78c:	f3bf 8f4f 	dsb	sy
 800a790:	60fb      	str	r3, [r7, #12]
}
 800a792:	bf00      	nop
 800a794:	e7fe      	b.n	800a794 <pvPortMalloc+0x168>
	return pvReturn;
 800a796:	69fb      	ldr	r3, [r7, #28]
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3728      	adds	r7, #40	; 0x28
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}
 800a7a0:	20003350 	.word	0x20003350
 800a7a4:	2000335c 	.word	0x2000335c
 800a7a8:	20003354 	.word	0x20003354
 800a7ac:	20003348 	.word	0x20003348
 800a7b0:	20003358 	.word	0x20003358

0800a7b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b086      	sub	sp, #24
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d048      	beq.n	800a858 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a7c6:	2308      	movs	r3, #8
 800a7c8:	425b      	negs	r3, r3
 800a7ca:	697a      	ldr	r2, [r7, #20]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	685a      	ldr	r2, [r3, #4]
 800a7d8:	4b21      	ldr	r3, [pc, #132]	; (800a860 <vPortFree+0xac>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4013      	ands	r3, r2
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d10a      	bne.n	800a7f8 <vPortFree+0x44>
	__asm volatile
 800a7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e6:	f383 8811 	msr	BASEPRI, r3
 800a7ea:	f3bf 8f6f 	isb	sy
 800a7ee:	f3bf 8f4f 	dsb	sy
 800a7f2:	60fb      	str	r3, [r7, #12]
}
 800a7f4:	bf00      	nop
 800a7f6:	e7fe      	b.n	800a7f6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d00a      	beq.n	800a816 <vPortFree+0x62>
	__asm volatile
 800a800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a804:	f383 8811 	msr	BASEPRI, r3
 800a808:	f3bf 8f6f 	isb	sy
 800a80c:	f3bf 8f4f 	dsb	sy
 800a810:	60bb      	str	r3, [r7, #8]
}
 800a812:	bf00      	nop
 800a814:	e7fe      	b.n	800a814 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	685a      	ldr	r2, [r3, #4]
 800a81a:	4b11      	ldr	r3, [pc, #68]	; (800a860 <vPortFree+0xac>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4013      	ands	r3, r2
 800a820:	2b00      	cmp	r3, #0
 800a822:	d019      	beq.n	800a858 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d115      	bne.n	800a858 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	685a      	ldr	r2, [r3, #4]
 800a830:	4b0b      	ldr	r3, [pc, #44]	; (800a860 <vPortFree+0xac>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	43db      	mvns	r3, r3
 800a836:	401a      	ands	r2, r3
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a83c:	f7fe fcc4 	bl	80091c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	685a      	ldr	r2, [r3, #4]
 800a844:	4b07      	ldr	r3, [pc, #28]	; (800a864 <vPortFree+0xb0>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4413      	add	r3, r2
 800a84a:	4a06      	ldr	r2, [pc, #24]	; (800a864 <vPortFree+0xb0>)
 800a84c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a84e:	6938      	ldr	r0, [r7, #16]
 800a850:	f000 f86c 	bl	800a92c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a854:	f7fe fcc6 	bl	80091e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a858:	bf00      	nop
 800a85a:	3718      	adds	r7, #24
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	2000335c 	.word	0x2000335c
 800a864:	20003354 	.word	0x20003354

0800a868 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a868:	b480      	push	{r7}
 800a86a:	b085      	sub	sp, #20
 800a86c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a86e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a872:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a874:	4b27      	ldr	r3, [pc, #156]	; (800a914 <prvHeapInit+0xac>)
 800a876:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f003 0307 	and.w	r3, r3, #7
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d00c      	beq.n	800a89c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	3307      	adds	r3, #7
 800a886:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f023 0307 	bic.w	r3, r3, #7
 800a88e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a890:	68ba      	ldr	r2, [r7, #8]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	1ad3      	subs	r3, r2, r3
 800a896:	4a1f      	ldr	r2, [pc, #124]	; (800a914 <prvHeapInit+0xac>)
 800a898:	4413      	add	r3, r2
 800a89a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a8a0:	4a1d      	ldr	r2, [pc, #116]	; (800a918 <prvHeapInit+0xb0>)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a8a6:	4b1c      	ldr	r3, [pc, #112]	; (800a918 <prvHeapInit+0xb0>)
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	68ba      	ldr	r2, [r7, #8]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a8b4:	2208      	movs	r2, #8
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	1a9b      	subs	r3, r3, r2
 800a8ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f023 0307 	bic.w	r3, r3, #7
 800a8c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	4a15      	ldr	r2, [pc, #84]	; (800a91c <prvHeapInit+0xb4>)
 800a8c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a8ca:	4b14      	ldr	r3, [pc, #80]	; (800a91c <prvHeapInit+0xb4>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a8d2:	4b12      	ldr	r3, [pc, #72]	; (800a91c <prvHeapInit+0xb4>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	68fa      	ldr	r2, [r7, #12]
 800a8e2:	1ad2      	subs	r2, r2, r3
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a8e8:	4b0c      	ldr	r3, [pc, #48]	; (800a91c <prvHeapInit+0xb4>)
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	4a0a      	ldr	r2, [pc, #40]	; (800a920 <prvHeapInit+0xb8>)
 800a8f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	4a09      	ldr	r2, [pc, #36]	; (800a924 <prvHeapInit+0xbc>)
 800a8fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a900:	4b09      	ldr	r3, [pc, #36]	; (800a928 <prvHeapInit+0xc0>)
 800a902:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a906:	601a      	str	r2, [r3, #0]
}
 800a908:	bf00      	nop
 800a90a:	3714      	adds	r7, #20
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bc80      	pop	{r7}
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop
 800a914:	20001348 	.word	0x20001348
 800a918:	20003348 	.word	0x20003348
 800a91c:	20003350 	.word	0x20003350
 800a920:	20003358 	.word	0x20003358
 800a924:	20003354 	.word	0x20003354
 800a928:	2000335c 	.word	0x2000335c

0800a92c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a92c:	b480      	push	{r7}
 800a92e:	b085      	sub	sp, #20
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a934:	4b27      	ldr	r3, [pc, #156]	; (800a9d4 <prvInsertBlockIntoFreeList+0xa8>)
 800a936:	60fb      	str	r3, [r7, #12]
 800a938:	e002      	b.n	800a940 <prvInsertBlockIntoFreeList+0x14>
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	60fb      	str	r3, [r7, #12]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	429a      	cmp	r2, r3
 800a948:	d8f7      	bhi.n	800a93a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	68ba      	ldr	r2, [r7, #8]
 800a954:	4413      	add	r3, r2
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d108      	bne.n	800a96e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	685a      	ldr	r2, [r3, #4]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	441a      	add	r2, r3
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	68ba      	ldr	r2, [r7, #8]
 800a978:	441a      	add	r2, r3
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	429a      	cmp	r2, r3
 800a980:	d118      	bne.n	800a9b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	4b14      	ldr	r3, [pc, #80]	; (800a9d8 <prvInsertBlockIntoFreeList+0xac>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d00d      	beq.n	800a9aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	685a      	ldr	r2, [r3, #4]
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	441a      	add	r2, r3
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	601a      	str	r2, [r3, #0]
 800a9a8:	e008      	b.n	800a9bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a9aa:	4b0b      	ldr	r3, [pc, #44]	; (800a9d8 <prvInsertBlockIntoFreeList+0xac>)
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	601a      	str	r2, [r3, #0]
 800a9b2:	e003      	b.n	800a9bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a9bc:	68fa      	ldr	r2, [r7, #12]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d002      	beq.n	800a9ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a9ca:	bf00      	nop
 800a9cc:	3714      	adds	r7, #20
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bc80      	pop	{r7}
 800a9d2:	4770      	bx	lr
 800a9d4:	20003348 	.word	0x20003348
 800a9d8:	20003350 	.word	0x20003350

0800a9dc <malloc>:
 800a9dc:	4b02      	ldr	r3, [pc, #8]	; (800a9e8 <malloc+0xc>)
 800a9de:	4601      	mov	r1, r0
 800a9e0:	6818      	ldr	r0, [r3, #0]
 800a9e2:	f000 b82b 	b.w	800aa3c <_malloc_r>
 800a9e6:	bf00      	nop
 800a9e8:	200001e0 	.word	0x200001e0

0800a9ec <free>:
 800a9ec:	4b02      	ldr	r3, [pc, #8]	; (800a9f8 <free+0xc>)
 800a9ee:	4601      	mov	r1, r0
 800a9f0:	6818      	ldr	r0, [r3, #0]
 800a9f2:	f003 bad5 	b.w	800dfa0 <_free_r>
 800a9f6:	bf00      	nop
 800a9f8:	200001e0 	.word	0x200001e0

0800a9fc <sbrk_aligned>:
 800a9fc:	b570      	push	{r4, r5, r6, lr}
 800a9fe:	4e0e      	ldr	r6, [pc, #56]	; (800aa38 <sbrk_aligned+0x3c>)
 800aa00:	460c      	mov	r4, r1
 800aa02:	6831      	ldr	r1, [r6, #0]
 800aa04:	4605      	mov	r5, r0
 800aa06:	b911      	cbnz	r1, 800aa0e <sbrk_aligned+0x12>
 800aa08:	f002 fba8 	bl	800d15c <_sbrk_r>
 800aa0c:	6030      	str	r0, [r6, #0]
 800aa0e:	4621      	mov	r1, r4
 800aa10:	4628      	mov	r0, r5
 800aa12:	f002 fba3 	bl	800d15c <_sbrk_r>
 800aa16:	1c43      	adds	r3, r0, #1
 800aa18:	d00a      	beq.n	800aa30 <sbrk_aligned+0x34>
 800aa1a:	1cc4      	adds	r4, r0, #3
 800aa1c:	f024 0403 	bic.w	r4, r4, #3
 800aa20:	42a0      	cmp	r0, r4
 800aa22:	d007      	beq.n	800aa34 <sbrk_aligned+0x38>
 800aa24:	1a21      	subs	r1, r4, r0
 800aa26:	4628      	mov	r0, r5
 800aa28:	f002 fb98 	bl	800d15c <_sbrk_r>
 800aa2c:	3001      	adds	r0, #1
 800aa2e:	d101      	bne.n	800aa34 <sbrk_aligned+0x38>
 800aa30:	f04f 34ff 	mov.w	r4, #4294967295
 800aa34:	4620      	mov	r0, r4
 800aa36:	bd70      	pop	{r4, r5, r6, pc}
 800aa38:	20003364 	.word	0x20003364

0800aa3c <_malloc_r>:
 800aa3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa40:	1ccd      	adds	r5, r1, #3
 800aa42:	f025 0503 	bic.w	r5, r5, #3
 800aa46:	3508      	adds	r5, #8
 800aa48:	2d0c      	cmp	r5, #12
 800aa4a:	bf38      	it	cc
 800aa4c:	250c      	movcc	r5, #12
 800aa4e:	2d00      	cmp	r5, #0
 800aa50:	4607      	mov	r7, r0
 800aa52:	db01      	blt.n	800aa58 <_malloc_r+0x1c>
 800aa54:	42a9      	cmp	r1, r5
 800aa56:	d905      	bls.n	800aa64 <_malloc_r+0x28>
 800aa58:	230c      	movs	r3, #12
 800aa5a:	2600      	movs	r6, #0
 800aa5c:	603b      	str	r3, [r7, #0]
 800aa5e:	4630      	mov	r0, r6
 800aa60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ab38 <_malloc_r+0xfc>
 800aa68:	f000 f868 	bl	800ab3c <__malloc_lock>
 800aa6c:	f8d8 3000 	ldr.w	r3, [r8]
 800aa70:	461c      	mov	r4, r3
 800aa72:	bb5c      	cbnz	r4, 800aacc <_malloc_r+0x90>
 800aa74:	4629      	mov	r1, r5
 800aa76:	4638      	mov	r0, r7
 800aa78:	f7ff ffc0 	bl	800a9fc <sbrk_aligned>
 800aa7c:	1c43      	adds	r3, r0, #1
 800aa7e:	4604      	mov	r4, r0
 800aa80:	d155      	bne.n	800ab2e <_malloc_r+0xf2>
 800aa82:	f8d8 4000 	ldr.w	r4, [r8]
 800aa86:	4626      	mov	r6, r4
 800aa88:	2e00      	cmp	r6, #0
 800aa8a:	d145      	bne.n	800ab18 <_malloc_r+0xdc>
 800aa8c:	2c00      	cmp	r4, #0
 800aa8e:	d048      	beq.n	800ab22 <_malloc_r+0xe6>
 800aa90:	6823      	ldr	r3, [r4, #0]
 800aa92:	4631      	mov	r1, r6
 800aa94:	4638      	mov	r0, r7
 800aa96:	eb04 0903 	add.w	r9, r4, r3
 800aa9a:	f002 fb5f 	bl	800d15c <_sbrk_r>
 800aa9e:	4581      	cmp	r9, r0
 800aaa0:	d13f      	bne.n	800ab22 <_malloc_r+0xe6>
 800aaa2:	6821      	ldr	r1, [r4, #0]
 800aaa4:	4638      	mov	r0, r7
 800aaa6:	1a6d      	subs	r5, r5, r1
 800aaa8:	4629      	mov	r1, r5
 800aaaa:	f7ff ffa7 	bl	800a9fc <sbrk_aligned>
 800aaae:	3001      	adds	r0, #1
 800aab0:	d037      	beq.n	800ab22 <_malloc_r+0xe6>
 800aab2:	6823      	ldr	r3, [r4, #0]
 800aab4:	442b      	add	r3, r5
 800aab6:	6023      	str	r3, [r4, #0]
 800aab8:	f8d8 3000 	ldr.w	r3, [r8]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d038      	beq.n	800ab32 <_malloc_r+0xf6>
 800aac0:	685a      	ldr	r2, [r3, #4]
 800aac2:	42a2      	cmp	r2, r4
 800aac4:	d12b      	bne.n	800ab1e <_malloc_r+0xe2>
 800aac6:	2200      	movs	r2, #0
 800aac8:	605a      	str	r2, [r3, #4]
 800aaca:	e00f      	b.n	800aaec <_malloc_r+0xb0>
 800aacc:	6822      	ldr	r2, [r4, #0]
 800aace:	1b52      	subs	r2, r2, r5
 800aad0:	d41f      	bmi.n	800ab12 <_malloc_r+0xd6>
 800aad2:	2a0b      	cmp	r2, #11
 800aad4:	d917      	bls.n	800ab06 <_malloc_r+0xca>
 800aad6:	1961      	adds	r1, r4, r5
 800aad8:	42a3      	cmp	r3, r4
 800aada:	6025      	str	r5, [r4, #0]
 800aadc:	bf18      	it	ne
 800aade:	6059      	strne	r1, [r3, #4]
 800aae0:	6863      	ldr	r3, [r4, #4]
 800aae2:	bf08      	it	eq
 800aae4:	f8c8 1000 	streq.w	r1, [r8]
 800aae8:	5162      	str	r2, [r4, r5]
 800aaea:	604b      	str	r3, [r1, #4]
 800aaec:	4638      	mov	r0, r7
 800aaee:	f104 060b 	add.w	r6, r4, #11
 800aaf2:	f000 f829 	bl	800ab48 <__malloc_unlock>
 800aaf6:	f026 0607 	bic.w	r6, r6, #7
 800aafa:	1d23      	adds	r3, r4, #4
 800aafc:	1af2      	subs	r2, r6, r3
 800aafe:	d0ae      	beq.n	800aa5e <_malloc_r+0x22>
 800ab00:	1b9b      	subs	r3, r3, r6
 800ab02:	50a3      	str	r3, [r4, r2]
 800ab04:	e7ab      	b.n	800aa5e <_malloc_r+0x22>
 800ab06:	42a3      	cmp	r3, r4
 800ab08:	6862      	ldr	r2, [r4, #4]
 800ab0a:	d1dd      	bne.n	800aac8 <_malloc_r+0x8c>
 800ab0c:	f8c8 2000 	str.w	r2, [r8]
 800ab10:	e7ec      	b.n	800aaec <_malloc_r+0xb0>
 800ab12:	4623      	mov	r3, r4
 800ab14:	6864      	ldr	r4, [r4, #4]
 800ab16:	e7ac      	b.n	800aa72 <_malloc_r+0x36>
 800ab18:	4634      	mov	r4, r6
 800ab1a:	6876      	ldr	r6, [r6, #4]
 800ab1c:	e7b4      	b.n	800aa88 <_malloc_r+0x4c>
 800ab1e:	4613      	mov	r3, r2
 800ab20:	e7cc      	b.n	800aabc <_malloc_r+0x80>
 800ab22:	230c      	movs	r3, #12
 800ab24:	4638      	mov	r0, r7
 800ab26:	603b      	str	r3, [r7, #0]
 800ab28:	f000 f80e 	bl	800ab48 <__malloc_unlock>
 800ab2c:	e797      	b.n	800aa5e <_malloc_r+0x22>
 800ab2e:	6025      	str	r5, [r4, #0]
 800ab30:	e7dc      	b.n	800aaec <_malloc_r+0xb0>
 800ab32:	605b      	str	r3, [r3, #4]
 800ab34:	deff      	udf	#255	; 0xff
 800ab36:	bf00      	nop
 800ab38:	20003360 	.word	0x20003360

0800ab3c <__malloc_lock>:
 800ab3c:	4801      	ldr	r0, [pc, #4]	; (800ab44 <__malloc_lock+0x8>)
 800ab3e:	f002 bb5b 	b.w	800d1f8 <__retarget_lock_acquire_recursive>
 800ab42:	bf00      	nop
 800ab44:	200034cd 	.word	0x200034cd

0800ab48 <__malloc_unlock>:
 800ab48:	4801      	ldr	r0, [pc, #4]	; (800ab50 <__malloc_unlock+0x8>)
 800ab4a:	f002 bb57 	b.w	800d1fc <__retarget_lock_release_recursive>
 800ab4e:	bf00      	nop
 800ab50:	200034cd 	.word	0x200034cd

0800ab54 <sulp>:
 800ab54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab58:	460f      	mov	r7, r1
 800ab5a:	4690      	mov	r8, r2
 800ab5c:	f004 f984 	bl	800ee68 <__ulp>
 800ab60:	4604      	mov	r4, r0
 800ab62:	460d      	mov	r5, r1
 800ab64:	f1b8 0f00 	cmp.w	r8, #0
 800ab68:	d011      	beq.n	800ab8e <sulp+0x3a>
 800ab6a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800ab6e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	dd0b      	ble.n	800ab8e <sulp+0x3a>
 800ab76:	2400      	movs	r4, #0
 800ab78:	051b      	lsls	r3, r3, #20
 800ab7a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ab7e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ab82:	4622      	mov	r2, r4
 800ab84:	462b      	mov	r3, r5
 800ab86:	f7f5 fd21 	bl	80005cc <__aeabi_dmul>
 800ab8a:	4604      	mov	r4, r0
 800ab8c:	460d      	mov	r5, r1
 800ab8e:	4620      	mov	r0, r4
 800ab90:	4629      	mov	r1, r5
 800ab92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800ab98 <_strtod_l>:
 800ab98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab9c:	b09f      	sub	sp, #124	; 0x7c
 800ab9e:	9217      	str	r2, [sp, #92]	; 0x5c
 800aba0:	2200      	movs	r2, #0
 800aba2:	4604      	mov	r4, r0
 800aba4:	921a      	str	r2, [sp, #104]	; 0x68
 800aba6:	460d      	mov	r5, r1
 800aba8:	f04f 0800 	mov.w	r8, #0
 800abac:	f04f 0900 	mov.w	r9, #0
 800abb0:	460a      	mov	r2, r1
 800abb2:	9219      	str	r2, [sp, #100]	; 0x64
 800abb4:	7811      	ldrb	r1, [r2, #0]
 800abb6:	292b      	cmp	r1, #43	; 0x2b
 800abb8:	d04a      	beq.n	800ac50 <_strtod_l+0xb8>
 800abba:	d838      	bhi.n	800ac2e <_strtod_l+0x96>
 800abbc:	290d      	cmp	r1, #13
 800abbe:	d832      	bhi.n	800ac26 <_strtod_l+0x8e>
 800abc0:	2908      	cmp	r1, #8
 800abc2:	d832      	bhi.n	800ac2a <_strtod_l+0x92>
 800abc4:	2900      	cmp	r1, #0
 800abc6:	d03b      	beq.n	800ac40 <_strtod_l+0xa8>
 800abc8:	2200      	movs	r2, #0
 800abca:	920e      	str	r2, [sp, #56]	; 0x38
 800abcc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800abce:	7832      	ldrb	r2, [r6, #0]
 800abd0:	2a30      	cmp	r2, #48	; 0x30
 800abd2:	f040 80b2 	bne.w	800ad3a <_strtod_l+0x1a2>
 800abd6:	7872      	ldrb	r2, [r6, #1]
 800abd8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800abdc:	2a58      	cmp	r2, #88	; 0x58
 800abde:	d16e      	bne.n	800acbe <_strtod_l+0x126>
 800abe0:	9302      	str	r3, [sp, #8]
 800abe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abe4:	4620      	mov	r0, r4
 800abe6:	9301      	str	r3, [sp, #4]
 800abe8:	ab1a      	add	r3, sp, #104	; 0x68
 800abea:	9300      	str	r3, [sp, #0]
 800abec:	4a8c      	ldr	r2, [pc, #560]	; (800ae20 <_strtod_l+0x288>)
 800abee:	ab1b      	add	r3, sp, #108	; 0x6c
 800abf0:	a919      	add	r1, sp, #100	; 0x64
 800abf2:	f003 fa85 	bl	800e100 <__gethex>
 800abf6:	f010 070f 	ands.w	r7, r0, #15
 800abfa:	4605      	mov	r5, r0
 800abfc:	d005      	beq.n	800ac0a <_strtod_l+0x72>
 800abfe:	2f06      	cmp	r7, #6
 800ac00:	d128      	bne.n	800ac54 <_strtod_l+0xbc>
 800ac02:	2300      	movs	r3, #0
 800ac04:	3601      	adds	r6, #1
 800ac06:	9619      	str	r6, [sp, #100]	; 0x64
 800ac08:	930e      	str	r3, [sp, #56]	; 0x38
 800ac0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	f040 85a0 	bne.w	800b752 <_strtod_l+0xbba>
 800ac12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac14:	b1cb      	cbz	r3, 800ac4a <_strtod_l+0xb2>
 800ac16:	4642      	mov	r2, r8
 800ac18:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ac1c:	4610      	mov	r0, r2
 800ac1e:	4619      	mov	r1, r3
 800ac20:	b01f      	add	sp, #124	; 0x7c
 800ac22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac26:	2920      	cmp	r1, #32
 800ac28:	d1ce      	bne.n	800abc8 <_strtod_l+0x30>
 800ac2a:	3201      	adds	r2, #1
 800ac2c:	e7c1      	b.n	800abb2 <_strtod_l+0x1a>
 800ac2e:	292d      	cmp	r1, #45	; 0x2d
 800ac30:	d1ca      	bne.n	800abc8 <_strtod_l+0x30>
 800ac32:	2101      	movs	r1, #1
 800ac34:	910e      	str	r1, [sp, #56]	; 0x38
 800ac36:	1c51      	adds	r1, r2, #1
 800ac38:	9119      	str	r1, [sp, #100]	; 0x64
 800ac3a:	7852      	ldrb	r2, [r2, #1]
 800ac3c:	2a00      	cmp	r2, #0
 800ac3e:	d1c5      	bne.n	800abcc <_strtod_l+0x34>
 800ac40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac42:	9519      	str	r5, [sp, #100]	; 0x64
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f040 8582 	bne.w	800b74e <_strtod_l+0xbb6>
 800ac4a:	4642      	mov	r2, r8
 800ac4c:	464b      	mov	r3, r9
 800ac4e:	e7e5      	b.n	800ac1c <_strtod_l+0x84>
 800ac50:	2100      	movs	r1, #0
 800ac52:	e7ef      	b.n	800ac34 <_strtod_l+0x9c>
 800ac54:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ac56:	b13a      	cbz	r2, 800ac68 <_strtod_l+0xd0>
 800ac58:	2135      	movs	r1, #53	; 0x35
 800ac5a:	a81c      	add	r0, sp, #112	; 0x70
 800ac5c:	f004 f9f0 	bl	800f040 <__copybits>
 800ac60:	4620      	mov	r0, r4
 800ac62:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ac64:	f003 fdd4 	bl	800e810 <_Bfree>
 800ac68:	3f01      	subs	r7, #1
 800ac6a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ac6c:	2f04      	cmp	r7, #4
 800ac6e:	d806      	bhi.n	800ac7e <_strtod_l+0xe6>
 800ac70:	e8df f007 	tbb	[pc, r7]
 800ac74:	201d0314 	.word	0x201d0314
 800ac78:	14          	.byte	0x14
 800ac79:	00          	.byte	0x00
 800ac7a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800ac7e:	05e9      	lsls	r1, r5, #23
 800ac80:	bf48      	it	mi
 800ac82:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ac86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac8a:	0d1b      	lsrs	r3, r3, #20
 800ac8c:	051b      	lsls	r3, r3, #20
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d1bb      	bne.n	800ac0a <_strtod_l+0x72>
 800ac92:	f002 fa85 	bl	800d1a0 <__errno>
 800ac96:	2322      	movs	r3, #34	; 0x22
 800ac98:	6003      	str	r3, [r0, #0]
 800ac9a:	e7b6      	b.n	800ac0a <_strtod_l+0x72>
 800ac9c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800aca0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800aca4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800aca8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800acac:	e7e7      	b.n	800ac7e <_strtod_l+0xe6>
 800acae:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800ae24 <_strtod_l+0x28c>
 800acb2:	e7e4      	b.n	800ac7e <_strtod_l+0xe6>
 800acb4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800acb8:	f04f 38ff 	mov.w	r8, #4294967295
 800acbc:	e7df      	b.n	800ac7e <_strtod_l+0xe6>
 800acbe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800acc0:	1c5a      	adds	r2, r3, #1
 800acc2:	9219      	str	r2, [sp, #100]	; 0x64
 800acc4:	785b      	ldrb	r3, [r3, #1]
 800acc6:	2b30      	cmp	r3, #48	; 0x30
 800acc8:	d0f9      	beq.n	800acbe <_strtod_l+0x126>
 800acca:	2b00      	cmp	r3, #0
 800accc:	d09d      	beq.n	800ac0a <_strtod_l+0x72>
 800acce:	2301      	movs	r3, #1
 800acd0:	f04f 0a00 	mov.w	sl, #0
 800acd4:	220a      	movs	r2, #10
 800acd6:	46d3      	mov	fp, sl
 800acd8:	9305      	str	r3, [sp, #20]
 800acda:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800acdc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800ace0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ace2:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ace4:	7806      	ldrb	r6, [r0, #0]
 800ace6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800acea:	b2d9      	uxtb	r1, r3
 800acec:	2909      	cmp	r1, #9
 800acee:	d926      	bls.n	800ad3e <_strtod_l+0x1a6>
 800acf0:	2201      	movs	r2, #1
 800acf2:	494d      	ldr	r1, [pc, #308]	; (800ae28 <_strtod_l+0x290>)
 800acf4:	f001 fbc0 	bl	800c478 <strncmp>
 800acf8:	2800      	cmp	r0, #0
 800acfa:	d030      	beq.n	800ad5e <_strtod_l+0x1c6>
 800acfc:	2000      	movs	r0, #0
 800acfe:	4632      	mov	r2, r6
 800ad00:	4603      	mov	r3, r0
 800ad02:	465e      	mov	r6, fp
 800ad04:	9008      	str	r0, [sp, #32]
 800ad06:	2a65      	cmp	r2, #101	; 0x65
 800ad08:	d001      	beq.n	800ad0e <_strtod_l+0x176>
 800ad0a:	2a45      	cmp	r2, #69	; 0x45
 800ad0c:	d113      	bne.n	800ad36 <_strtod_l+0x19e>
 800ad0e:	b91e      	cbnz	r6, 800ad18 <_strtod_l+0x180>
 800ad10:	9a05      	ldr	r2, [sp, #20]
 800ad12:	4302      	orrs	r2, r0
 800ad14:	d094      	beq.n	800ac40 <_strtod_l+0xa8>
 800ad16:	2600      	movs	r6, #0
 800ad18:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800ad1a:	1c6a      	adds	r2, r5, #1
 800ad1c:	9219      	str	r2, [sp, #100]	; 0x64
 800ad1e:	786a      	ldrb	r2, [r5, #1]
 800ad20:	2a2b      	cmp	r2, #43	; 0x2b
 800ad22:	d074      	beq.n	800ae0e <_strtod_l+0x276>
 800ad24:	2a2d      	cmp	r2, #45	; 0x2d
 800ad26:	d078      	beq.n	800ae1a <_strtod_l+0x282>
 800ad28:	f04f 0c00 	mov.w	ip, #0
 800ad2c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ad30:	2909      	cmp	r1, #9
 800ad32:	d97f      	bls.n	800ae34 <_strtod_l+0x29c>
 800ad34:	9519      	str	r5, [sp, #100]	; 0x64
 800ad36:	2700      	movs	r7, #0
 800ad38:	e09e      	b.n	800ae78 <_strtod_l+0x2e0>
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	e7c8      	b.n	800acd0 <_strtod_l+0x138>
 800ad3e:	f1bb 0f08 	cmp.w	fp, #8
 800ad42:	bfd8      	it	le
 800ad44:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800ad46:	f100 0001 	add.w	r0, r0, #1
 800ad4a:	bfd6      	itet	le
 800ad4c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ad50:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800ad54:	930a      	strle	r3, [sp, #40]	; 0x28
 800ad56:	f10b 0b01 	add.w	fp, fp, #1
 800ad5a:	9019      	str	r0, [sp, #100]	; 0x64
 800ad5c:	e7c1      	b.n	800ace2 <_strtod_l+0x14a>
 800ad5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad60:	1c5a      	adds	r2, r3, #1
 800ad62:	9219      	str	r2, [sp, #100]	; 0x64
 800ad64:	785a      	ldrb	r2, [r3, #1]
 800ad66:	f1bb 0f00 	cmp.w	fp, #0
 800ad6a:	d037      	beq.n	800addc <_strtod_l+0x244>
 800ad6c:	465e      	mov	r6, fp
 800ad6e:	9008      	str	r0, [sp, #32]
 800ad70:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ad74:	2b09      	cmp	r3, #9
 800ad76:	d912      	bls.n	800ad9e <_strtod_l+0x206>
 800ad78:	2301      	movs	r3, #1
 800ad7a:	e7c4      	b.n	800ad06 <_strtod_l+0x16e>
 800ad7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad7e:	3001      	adds	r0, #1
 800ad80:	1c5a      	adds	r2, r3, #1
 800ad82:	9219      	str	r2, [sp, #100]	; 0x64
 800ad84:	785a      	ldrb	r2, [r3, #1]
 800ad86:	2a30      	cmp	r2, #48	; 0x30
 800ad88:	d0f8      	beq.n	800ad7c <_strtod_l+0x1e4>
 800ad8a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ad8e:	2b08      	cmp	r3, #8
 800ad90:	f200 84e4 	bhi.w	800b75c <_strtod_l+0xbc4>
 800ad94:	9008      	str	r0, [sp, #32]
 800ad96:	2000      	movs	r0, #0
 800ad98:	4606      	mov	r6, r0
 800ad9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad9c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad9e:	3a30      	subs	r2, #48	; 0x30
 800ada0:	f100 0301 	add.w	r3, r0, #1
 800ada4:	d014      	beq.n	800add0 <_strtod_l+0x238>
 800ada6:	9908      	ldr	r1, [sp, #32]
 800ada8:	eb00 0c06 	add.w	ip, r0, r6
 800adac:	4419      	add	r1, r3
 800adae:	9108      	str	r1, [sp, #32]
 800adb0:	4633      	mov	r3, r6
 800adb2:	210a      	movs	r1, #10
 800adb4:	4563      	cmp	r3, ip
 800adb6:	d113      	bne.n	800ade0 <_strtod_l+0x248>
 800adb8:	1833      	adds	r3, r6, r0
 800adba:	2b08      	cmp	r3, #8
 800adbc:	f106 0601 	add.w	r6, r6, #1
 800adc0:	4406      	add	r6, r0
 800adc2:	dc1a      	bgt.n	800adfa <_strtod_l+0x262>
 800adc4:	230a      	movs	r3, #10
 800adc6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800adc8:	fb03 2301 	mla	r3, r3, r1, r2
 800adcc:	930a      	str	r3, [sp, #40]	; 0x28
 800adce:	2300      	movs	r3, #0
 800add0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800add2:	4618      	mov	r0, r3
 800add4:	1c51      	adds	r1, r2, #1
 800add6:	9119      	str	r1, [sp, #100]	; 0x64
 800add8:	7852      	ldrb	r2, [r2, #1]
 800adda:	e7c9      	b.n	800ad70 <_strtod_l+0x1d8>
 800addc:	4658      	mov	r0, fp
 800adde:	e7d2      	b.n	800ad86 <_strtod_l+0x1ee>
 800ade0:	2b08      	cmp	r3, #8
 800ade2:	f103 0301 	add.w	r3, r3, #1
 800ade6:	dc03      	bgt.n	800adf0 <_strtod_l+0x258>
 800ade8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800adea:	434f      	muls	r7, r1
 800adec:	970a      	str	r7, [sp, #40]	; 0x28
 800adee:	e7e1      	b.n	800adb4 <_strtod_l+0x21c>
 800adf0:	2b10      	cmp	r3, #16
 800adf2:	bfd8      	it	le
 800adf4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800adf8:	e7dc      	b.n	800adb4 <_strtod_l+0x21c>
 800adfa:	2e10      	cmp	r6, #16
 800adfc:	bfdc      	itt	le
 800adfe:	230a      	movle	r3, #10
 800ae00:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800ae04:	e7e3      	b.n	800adce <_strtod_l+0x236>
 800ae06:	2300      	movs	r3, #0
 800ae08:	9308      	str	r3, [sp, #32]
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e780      	b.n	800ad10 <_strtod_l+0x178>
 800ae0e:	f04f 0c00 	mov.w	ip, #0
 800ae12:	1caa      	adds	r2, r5, #2
 800ae14:	9219      	str	r2, [sp, #100]	; 0x64
 800ae16:	78aa      	ldrb	r2, [r5, #2]
 800ae18:	e788      	b.n	800ad2c <_strtod_l+0x194>
 800ae1a:	f04f 0c01 	mov.w	ip, #1
 800ae1e:	e7f8      	b.n	800ae12 <_strtod_l+0x27a>
 800ae20:	08010744 	.word	0x08010744
 800ae24:	7ff00000 	.word	0x7ff00000
 800ae28:	08010742 	.word	0x08010742
 800ae2c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ae2e:	1c51      	adds	r1, r2, #1
 800ae30:	9119      	str	r1, [sp, #100]	; 0x64
 800ae32:	7852      	ldrb	r2, [r2, #1]
 800ae34:	2a30      	cmp	r2, #48	; 0x30
 800ae36:	d0f9      	beq.n	800ae2c <_strtod_l+0x294>
 800ae38:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ae3c:	2908      	cmp	r1, #8
 800ae3e:	f63f af7a 	bhi.w	800ad36 <_strtod_l+0x19e>
 800ae42:	3a30      	subs	r2, #48	; 0x30
 800ae44:	9209      	str	r2, [sp, #36]	; 0x24
 800ae46:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ae48:	920c      	str	r2, [sp, #48]	; 0x30
 800ae4a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ae4c:	1c57      	adds	r7, r2, #1
 800ae4e:	9719      	str	r7, [sp, #100]	; 0x64
 800ae50:	7852      	ldrb	r2, [r2, #1]
 800ae52:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ae56:	f1be 0f09 	cmp.w	lr, #9
 800ae5a:	d938      	bls.n	800aece <_strtod_l+0x336>
 800ae5c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ae5e:	1a7f      	subs	r7, r7, r1
 800ae60:	2f08      	cmp	r7, #8
 800ae62:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ae66:	dc03      	bgt.n	800ae70 <_strtod_l+0x2d8>
 800ae68:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae6a:	428f      	cmp	r7, r1
 800ae6c:	bfa8      	it	ge
 800ae6e:	460f      	movge	r7, r1
 800ae70:	f1bc 0f00 	cmp.w	ip, #0
 800ae74:	d000      	beq.n	800ae78 <_strtod_l+0x2e0>
 800ae76:	427f      	negs	r7, r7
 800ae78:	2e00      	cmp	r6, #0
 800ae7a:	d14f      	bne.n	800af1c <_strtod_l+0x384>
 800ae7c:	9905      	ldr	r1, [sp, #20]
 800ae7e:	4301      	orrs	r1, r0
 800ae80:	f47f aec3 	bne.w	800ac0a <_strtod_l+0x72>
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	f47f aedb 	bne.w	800ac40 <_strtod_l+0xa8>
 800ae8a:	2a69      	cmp	r2, #105	; 0x69
 800ae8c:	d029      	beq.n	800aee2 <_strtod_l+0x34a>
 800ae8e:	dc26      	bgt.n	800aede <_strtod_l+0x346>
 800ae90:	2a49      	cmp	r2, #73	; 0x49
 800ae92:	d026      	beq.n	800aee2 <_strtod_l+0x34a>
 800ae94:	2a4e      	cmp	r2, #78	; 0x4e
 800ae96:	f47f aed3 	bne.w	800ac40 <_strtod_l+0xa8>
 800ae9a:	499a      	ldr	r1, [pc, #616]	; (800b104 <_strtod_l+0x56c>)
 800ae9c:	a819      	add	r0, sp, #100	; 0x64
 800ae9e:	f003 fb71 	bl	800e584 <__match>
 800aea2:	2800      	cmp	r0, #0
 800aea4:	f43f aecc 	beq.w	800ac40 <_strtod_l+0xa8>
 800aea8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	2b28      	cmp	r3, #40	; 0x28
 800aeae:	d12f      	bne.n	800af10 <_strtod_l+0x378>
 800aeb0:	4995      	ldr	r1, [pc, #596]	; (800b108 <_strtod_l+0x570>)
 800aeb2:	aa1c      	add	r2, sp, #112	; 0x70
 800aeb4:	a819      	add	r0, sp, #100	; 0x64
 800aeb6:	f003 fb79 	bl	800e5ac <__hexnan>
 800aeba:	2805      	cmp	r0, #5
 800aebc:	d128      	bne.n	800af10 <_strtod_l+0x378>
 800aebe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aec0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800aec4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800aec8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800aecc:	e69d      	b.n	800ac0a <_strtod_l+0x72>
 800aece:	210a      	movs	r1, #10
 800aed0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aed2:	fb01 2107 	mla	r1, r1, r7, r2
 800aed6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800aeda:	9209      	str	r2, [sp, #36]	; 0x24
 800aedc:	e7b5      	b.n	800ae4a <_strtod_l+0x2b2>
 800aede:	2a6e      	cmp	r2, #110	; 0x6e
 800aee0:	e7d9      	b.n	800ae96 <_strtod_l+0x2fe>
 800aee2:	498a      	ldr	r1, [pc, #552]	; (800b10c <_strtod_l+0x574>)
 800aee4:	a819      	add	r0, sp, #100	; 0x64
 800aee6:	f003 fb4d 	bl	800e584 <__match>
 800aeea:	2800      	cmp	r0, #0
 800aeec:	f43f aea8 	beq.w	800ac40 <_strtod_l+0xa8>
 800aef0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aef2:	4987      	ldr	r1, [pc, #540]	; (800b110 <_strtod_l+0x578>)
 800aef4:	3b01      	subs	r3, #1
 800aef6:	a819      	add	r0, sp, #100	; 0x64
 800aef8:	9319      	str	r3, [sp, #100]	; 0x64
 800aefa:	f003 fb43 	bl	800e584 <__match>
 800aefe:	b910      	cbnz	r0, 800af06 <_strtod_l+0x36e>
 800af00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af02:	3301      	adds	r3, #1
 800af04:	9319      	str	r3, [sp, #100]	; 0x64
 800af06:	f04f 0800 	mov.w	r8, #0
 800af0a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800b114 <_strtod_l+0x57c>
 800af0e:	e67c      	b.n	800ac0a <_strtod_l+0x72>
 800af10:	4881      	ldr	r0, [pc, #516]	; (800b118 <_strtod_l+0x580>)
 800af12:	f002 f999 	bl	800d248 <nan>
 800af16:	4680      	mov	r8, r0
 800af18:	4689      	mov	r9, r1
 800af1a:	e676      	b.n	800ac0a <_strtod_l+0x72>
 800af1c:	9b08      	ldr	r3, [sp, #32]
 800af1e:	f1bb 0f00 	cmp.w	fp, #0
 800af22:	bf08      	it	eq
 800af24:	46b3      	moveq	fp, r6
 800af26:	1afb      	subs	r3, r7, r3
 800af28:	2e10      	cmp	r6, #16
 800af2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af2c:	4635      	mov	r5, r6
 800af2e:	9309      	str	r3, [sp, #36]	; 0x24
 800af30:	bfa8      	it	ge
 800af32:	2510      	movge	r5, #16
 800af34:	f7f5 fad0 	bl	80004d8 <__aeabi_ui2d>
 800af38:	2e09      	cmp	r6, #9
 800af3a:	4680      	mov	r8, r0
 800af3c:	4689      	mov	r9, r1
 800af3e:	dd13      	ble.n	800af68 <_strtod_l+0x3d0>
 800af40:	4b76      	ldr	r3, [pc, #472]	; (800b11c <_strtod_l+0x584>)
 800af42:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800af46:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800af4a:	f7f5 fb3f 	bl	80005cc <__aeabi_dmul>
 800af4e:	4680      	mov	r8, r0
 800af50:	4650      	mov	r0, sl
 800af52:	4689      	mov	r9, r1
 800af54:	f7f5 fac0 	bl	80004d8 <__aeabi_ui2d>
 800af58:	4602      	mov	r2, r0
 800af5a:	460b      	mov	r3, r1
 800af5c:	4640      	mov	r0, r8
 800af5e:	4649      	mov	r1, r9
 800af60:	f7f5 f97e 	bl	8000260 <__adddf3>
 800af64:	4680      	mov	r8, r0
 800af66:	4689      	mov	r9, r1
 800af68:	2e0f      	cmp	r6, #15
 800af6a:	dc36      	bgt.n	800afda <_strtod_l+0x442>
 800af6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af6e:	2b00      	cmp	r3, #0
 800af70:	f43f ae4b 	beq.w	800ac0a <_strtod_l+0x72>
 800af74:	dd22      	ble.n	800afbc <_strtod_l+0x424>
 800af76:	2b16      	cmp	r3, #22
 800af78:	dc09      	bgt.n	800af8e <_strtod_l+0x3f6>
 800af7a:	4968      	ldr	r1, [pc, #416]	; (800b11c <_strtod_l+0x584>)
 800af7c:	4642      	mov	r2, r8
 800af7e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af82:	464b      	mov	r3, r9
 800af84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af88:	f7f5 fb20 	bl	80005cc <__aeabi_dmul>
 800af8c:	e7c3      	b.n	800af16 <_strtod_l+0x37e>
 800af8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af90:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800af94:	4293      	cmp	r3, r2
 800af96:	db20      	blt.n	800afda <_strtod_l+0x442>
 800af98:	4c60      	ldr	r4, [pc, #384]	; (800b11c <_strtod_l+0x584>)
 800af9a:	f1c6 060f 	rsb	r6, r6, #15
 800af9e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800afa2:	4642      	mov	r2, r8
 800afa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afa8:	464b      	mov	r3, r9
 800afaa:	f7f5 fb0f 	bl	80005cc <__aeabi_dmul>
 800afae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afb0:	1b9e      	subs	r6, r3, r6
 800afb2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800afb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800afba:	e7e5      	b.n	800af88 <_strtod_l+0x3f0>
 800afbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afbe:	3316      	adds	r3, #22
 800afc0:	db0b      	blt.n	800afda <_strtod_l+0x442>
 800afc2:	9b08      	ldr	r3, [sp, #32]
 800afc4:	4640      	mov	r0, r8
 800afc6:	1bdf      	subs	r7, r3, r7
 800afc8:	4b54      	ldr	r3, [pc, #336]	; (800b11c <_strtod_l+0x584>)
 800afca:	4649      	mov	r1, r9
 800afcc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800afd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afd4:	f7f5 fc24 	bl	8000820 <__aeabi_ddiv>
 800afd8:	e79d      	b.n	800af16 <_strtod_l+0x37e>
 800afda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afdc:	1b75      	subs	r5, r6, r5
 800afde:	441d      	add	r5, r3
 800afe0:	2d00      	cmp	r5, #0
 800afe2:	dd70      	ble.n	800b0c6 <_strtod_l+0x52e>
 800afe4:	f015 030f 	ands.w	r3, r5, #15
 800afe8:	d00a      	beq.n	800b000 <_strtod_l+0x468>
 800afea:	494c      	ldr	r1, [pc, #304]	; (800b11c <_strtod_l+0x584>)
 800afec:	4642      	mov	r2, r8
 800afee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aff2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aff6:	464b      	mov	r3, r9
 800aff8:	f7f5 fae8 	bl	80005cc <__aeabi_dmul>
 800affc:	4680      	mov	r8, r0
 800affe:	4689      	mov	r9, r1
 800b000:	f035 050f 	bics.w	r5, r5, #15
 800b004:	d04d      	beq.n	800b0a2 <_strtod_l+0x50a>
 800b006:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b00a:	dd22      	ble.n	800b052 <_strtod_l+0x4ba>
 800b00c:	2600      	movs	r6, #0
 800b00e:	46b3      	mov	fp, r6
 800b010:	960b      	str	r6, [sp, #44]	; 0x2c
 800b012:	9608      	str	r6, [sp, #32]
 800b014:	2322      	movs	r3, #34	; 0x22
 800b016:	f04f 0800 	mov.w	r8, #0
 800b01a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800b114 <_strtod_l+0x57c>
 800b01e:	6023      	str	r3, [r4, #0]
 800b020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b022:	2b00      	cmp	r3, #0
 800b024:	f43f adf1 	beq.w	800ac0a <_strtod_l+0x72>
 800b028:	4620      	mov	r0, r4
 800b02a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b02c:	f003 fbf0 	bl	800e810 <_Bfree>
 800b030:	4620      	mov	r0, r4
 800b032:	9908      	ldr	r1, [sp, #32]
 800b034:	f003 fbec 	bl	800e810 <_Bfree>
 800b038:	4659      	mov	r1, fp
 800b03a:	4620      	mov	r0, r4
 800b03c:	f003 fbe8 	bl	800e810 <_Bfree>
 800b040:	4620      	mov	r0, r4
 800b042:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b044:	f003 fbe4 	bl	800e810 <_Bfree>
 800b048:	4631      	mov	r1, r6
 800b04a:	4620      	mov	r0, r4
 800b04c:	f003 fbe0 	bl	800e810 <_Bfree>
 800b050:	e5db      	b.n	800ac0a <_strtod_l+0x72>
 800b052:	4b33      	ldr	r3, [pc, #204]	; (800b120 <_strtod_l+0x588>)
 800b054:	4640      	mov	r0, r8
 800b056:	9305      	str	r3, [sp, #20]
 800b058:	2300      	movs	r3, #0
 800b05a:	4649      	mov	r1, r9
 800b05c:	469a      	mov	sl, r3
 800b05e:	112d      	asrs	r5, r5, #4
 800b060:	2d01      	cmp	r5, #1
 800b062:	dc21      	bgt.n	800b0a8 <_strtod_l+0x510>
 800b064:	b10b      	cbz	r3, 800b06a <_strtod_l+0x4d2>
 800b066:	4680      	mov	r8, r0
 800b068:	4689      	mov	r9, r1
 800b06a:	492d      	ldr	r1, [pc, #180]	; (800b120 <_strtod_l+0x588>)
 800b06c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b070:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b074:	4642      	mov	r2, r8
 800b076:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b07a:	464b      	mov	r3, r9
 800b07c:	f7f5 faa6 	bl	80005cc <__aeabi_dmul>
 800b080:	4b24      	ldr	r3, [pc, #144]	; (800b114 <_strtod_l+0x57c>)
 800b082:	460a      	mov	r2, r1
 800b084:	400b      	ands	r3, r1
 800b086:	4927      	ldr	r1, [pc, #156]	; (800b124 <_strtod_l+0x58c>)
 800b088:	4680      	mov	r8, r0
 800b08a:	428b      	cmp	r3, r1
 800b08c:	d8be      	bhi.n	800b00c <_strtod_l+0x474>
 800b08e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b092:	428b      	cmp	r3, r1
 800b094:	bf86      	itte	hi
 800b096:	f04f 38ff 	movhi.w	r8, #4294967295
 800b09a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800b128 <_strtod_l+0x590>
 800b09e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	9305      	str	r3, [sp, #20]
 800b0a6:	e07b      	b.n	800b1a0 <_strtod_l+0x608>
 800b0a8:	07ea      	lsls	r2, r5, #31
 800b0aa:	d505      	bpl.n	800b0b8 <_strtod_l+0x520>
 800b0ac:	9b05      	ldr	r3, [sp, #20]
 800b0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b2:	f7f5 fa8b 	bl	80005cc <__aeabi_dmul>
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	9a05      	ldr	r2, [sp, #20]
 800b0ba:	f10a 0a01 	add.w	sl, sl, #1
 800b0be:	3208      	adds	r2, #8
 800b0c0:	106d      	asrs	r5, r5, #1
 800b0c2:	9205      	str	r2, [sp, #20]
 800b0c4:	e7cc      	b.n	800b060 <_strtod_l+0x4c8>
 800b0c6:	d0ec      	beq.n	800b0a2 <_strtod_l+0x50a>
 800b0c8:	426d      	negs	r5, r5
 800b0ca:	f015 020f 	ands.w	r2, r5, #15
 800b0ce:	d00a      	beq.n	800b0e6 <_strtod_l+0x54e>
 800b0d0:	4b12      	ldr	r3, [pc, #72]	; (800b11c <_strtod_l+0x584>)
 800b0d2:	4640      	mov	r0, r8
 800b0d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0d8:	4649      	mov	r1, r9
 800b0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0de:	f7f5 fb9f 	bl	8000820 <__aeabi_ddiv>
 800b0e2:	4680      	mov	r8, r0
 800b0e4:	4689      	mov	r9, r1
 800b0e6:	112d      	asrs	r5, r5, #4
 800b0e8:	d0db      	beq.n	800b0a2 <_strtod_l+0x50a>
 800b0ea:	2d1f      	cmp	r5, #31
 800b0ec:	dd1e      	ble.n	800b12c <_strtod_l+0x594>
 800b0ee:	2600      	movs	r6, #0
 800b0f0:	46b3      	mov	fp, r6
 800b0f2:	960b      	str	r6, [sp, #44]	; 0x2c
 800b0f4:	9608      	str	r6, [sp, #32]
 800b0f6:	2322      	movs	r3, #34	; 0x22
 800b0f8:	f04f 0800 	mov.w	r8, #0
 800b0fc:	f04f 0900 	mov.w	r9, #0
 800b100:	6023      	str	r3, [r4, #0]
 800b102:	e78d      	b.n	800b020 <_strtod_l+0x488>
 800b104:	080108a6 	.word	0x080108a6
 800b108:	08010758 	.word	0x08010758
 800b10c:	0801089e 	.word	0x0801089e
 800b110:	08010a31 	.word	0x08010a31
 800b114:	7ff00000 	.word	0x7ff00000
 800b118:	08010a2d 	.word	0x08010a2d
 800b11c:	08010b88 	.word	0x08010b88
 800b120:	08010b60 	.word	0x08010b60
 800b124:	7ca00000 	.word	0x7ca00000
 800b128:	7fefffff 	.word	0x7fefffff
 800b12c:	f015 0310 	ands.w	r3, r5, #16
 800b130:	bf18      	it	ne
 800b132:	236a      	movne	r3, #106	; 0x6a
 800b134:	4640      	mov	r0, r8
 800b136:	9305      	str	r3, [sp, #20]
 800b138:	4649      	mov	r1, r9
 800b13a:	2300      	movs	r3, #0
 800b13c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800b408 <_strtod_l+0x870>
 800b140:	07ea      	lsls	r2, r5, #31
 800b142:	d504      	bpl.n	800b14e <_strtod_l+0x5b6>
 800b144:	e9da 2300 	ldrd	r2, r3, [sl]
 800b148:	f7f5 fa40 	bl	80005cc <__aeabi_dmul>
 800b14c:	2301      	movs	r3, #1
 800b14e:	106d      	asrs	r5, r5, #1
 800b150:	f10a 0a08 	add.w	sl, sl, #8
 800b154:	d1f4      	bne.n	800b140 <_strtod_l+0x5a8>
 800b156:	b10b      	cbz	r3, 800b15c <_strtod_l+0x5c4>
 800b158:	4680      	mov	r8, r0
 800b15a:	4689      	mov	r9, r1
 800b15c:	9b05      	ldr	r3, [sp, #20]
 800b15e:	b1bb      	cbz	r3, 800b190 <_strtod_l+0x5f8>
 800b160:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b164:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b168:	2b00      	cmp	r3, #0
 800b16a:	4649      	mov	r1, r9
 800b16c:	dd10      	ble.n	800b190 <_strtod_l+0x5f8>
 800b16e:	2b1f      	cmp	r3, #31
 800b170:	f340 8128 	ble.w	800b3c4 <_strtod_l+0x82c>
 800b174:	2b34      	cmp	r3, #52	; 0x34
 800b176:	bfd8      	it	le
 800b178:	f04f 33ff 	movle.w	r3, #4294967295
 800b17c:	f04f 0800 	mov.w	r8, #0
 800b180:	bfcf      	iteee	gt
 800b182:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b186:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b18a:	4093      	lslle	r3, r2
 800b18c:	ea03 0901 	andle.w	r9, r3, r1
 800b190:	2200      	movs	r2, #0
 800b192:	2300      	movs	r3, #0
 800b194:	4640      	mov	r0, r8
 800b196:	4649      	mov	r1, r9
 800b198:	f7f5 fc80 	bl	8000a9c <__aeabi_dcmpeq>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	d1a6      	bne.n	800b0ee <_strtod_l+0x556>
 800b1a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1a2:	465a      	mov	r2, fp
 800b1a4:	9300      	str	r3, [sp, #0]
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	4633      	mov	r3, r6
 800b1aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b1ac:	f003 fb98 	bl	800e8e0 <__s2b>
 800b1b0:	900b      	str	r0, [sp, #44]	; 0x2c
 800b1b2:	2800      	cmp	r0, #0
 800b1b4:	f43f af2a 	beq.w	800b00c <_strtod_l+0x474>
 800b1b8:	2600      	movs	r6, #0
 800b1ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1bc:	9b08      	ldr	r3, [sp, #32]
 800b1be:	2a00      	cmp	r2, #0
 800b1c0:	eba3 0307 	sub.w	r3, r3, r7
 800b1c4:	bfa8      	it	ge
 800b1c6:	2300      	movge	r3, #0
 800b1c8:	46b3      	mov	fp, r6
 800b1ca:	9312      	str	r3, [sp, #72]	; 0x48
 800b1cc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b1d0:	9316      	str	r3, [sp, #88]	; 0x58
 800b1d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	6859      	ldr	r1, [r3, #4]
 800b1d8:	f003 fada 	bl	800e790 <_Balloc>
 800b1dc:	9008      	str	r0, [sp, #32]
 800b1de:	2800      	cmp	r0, #0
 800b1e0:	f43f af18 	beq.w	800b014 <_strtod_l+0x47c>
 800b1e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1e6:	300c      	adds	r0, #12
 800b1e8:	691a      	ldr	r2, [r3, #16]
 800b1ea:	f103 010c 	add.w	r1, r3, #12
 800b1ee:	3202      	adds	r2, #2
 800b1f0:	0092      	lsls	r2, r2, #2
 800b1f2:	f002 f81a 	bl	800d22a <memcpy>
 800b1f6:	ab1c      	add	r3, sp, #112	; 0x70
 800b1f8:	9301      	str	r3, [sp, #4]
 800b1fa:	ab1b      	add	r3, sp, #108	; 0x6c
 800b1fc:	9300      	str	r3, [sp, #0]
 800b1fe:	4642      	mov	r2, r8
 800b200:	464b      	mov	r3, r9
 800b202:	4620      	mov	r0, r4
 800b204:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800b208:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800b20c:	f003 fe94 	bl	800ef38 <__d2b>
 800b210:	901a      	str	r0, [sp, #104]	; 0x68
 800b212:	2800      	cmp	r0, #0
 800b214:	f43f aefe 	beq.w	800b014 <_strtod_l+0x47c>
 800b218:	2101      	movs	r1, #1
 800b21a:	4620      	mov	r0, r4
 800b21c:	f003 fbf8 	bl	800ea10 <__i2b>
 800b220:	4683      	mov	fp, r0
 800b222:	2800      	cmp	r0, #0
 800b224:	f43f aef6 	beq.w	800b014 <_strtod_l+0x47c>
 800b228:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b22a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b22c:	2f00      	cmp	r7, #0
 800b22e:	bfab      	itete	ge
 800b230:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800b232:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800b234:	eb07 0a03 	addge.w	sl, r7, r3
 800b238:	1bdd      	sublt	r5, r3, r7
 800b23a:	9b05      	ldr	r3, [sp, #20]
 800b23c:	bfa8      	it	ge
 800b23e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800b240:	eba7 0703 	sub.w	r7, r7, r3
 800b244:	4417      	add	r7, r2
 800b246:	4b71      	ldr	r3, [pc, #452]	; (800b40c <_strtod_l+0x874>)
 800b248:	f107 37ff 	add.w	r7, r7, #4294967295
 800b24c:	bfb8      	it	lt
 800b24e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800b252:	429f      	cmp	r7, r3
 800b254:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b258:	f280 80c7 	bge.w	800b3ea <_strtod_l+0x852>
 800b25c:	1bdb      	subs	r3, r3, r7
 800b25e:	2b1f      	cmp	r3, #31
 800b260:	f04f 0101 	mov.w	r1, #1
 800b264:	eba2 0203 	sub.w	r2, r2, r3
 800b268:	f300 80b3 	bgt.w	800b3d2 <_strtod_l+0x83a>
 800b26c:	fa01 f303 	lsl.w	r3, r1, r3
 800b270:	9313      	str	r3, [sp, #76]	; 0x4c
 800b272:	2300      	movs	r3, #0
 800b274:	9310      	str	r3, [sp, #64]	; 0x40
 800b276:	eb0a 0702 	add.w	r7, sl, r2
 800b27a:	9b05      	ldr	r3, [sp, #20]
 800b27c:	45ba      	cmp	sl, r7
 800b27e:	4415      	add	r5, r2
 800b280:	441d      	add	r5, r3
 800b282:	4653      	mov	r3, sl
 800b284:	bfa8      	it	ge
 800b286:	463b      	movge	r3, r7
 800b288:	42ab      	cmp	r3, r5
 800b28a:	bfa8      	it	ge
 800b28c:	462b      	movge	r3, r5
 800b28e:	2b00      	cmp	r3, #0
 800b290:	bfc2      	ittt	gt
 800b292:	1aff      	subgt	r7, r7, r3
 800b294:	1aed      	subgt	r5, r5, r3
 800b296:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b29a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	dd17      	ble.n	800b2d0 <_strtod_l+0x738>
 800b2a0:	4659      	mov	r1, fp
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	f003 fc71 	bl	800eb8c <__pow5mult>
 800b2aa:	4683      	mov	fp, r0
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	f43f aeb1 	beq.w	800b014 <_strtod_l+0x47c>
 800b2b2:	4601      	mov	r1, r0
 800b2b4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	f003 fbc0 	bl	800ea3c <__multiply>
 800b2bc:	900a      	str	r0, [sp, #40]	; 0x28
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	f43f aea8 	beq.w	800b014 <_strtod_l+0x47c>
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b2c8:	f003 faa2 	bl	800e810 <_Bfree>
 800b2cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2ce:	931a      	str	r3, [sp, #104]	; 0x68
 800b2d0:	2f00      	cmp	r7, #0
 800b2d2:	f300 808f 	bgt.w	800b3f4 <_strtod_l+0x85c>
 800b2d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	dd08      	ble.n	800b2ee <_strtod_l+0x756>
 800b2dc:	4620      	mov	r0, r4
 800b2de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b2e0:	9908      	ldr	r1, [sp, #32]
 800b2e2:	f003 fc53 	bl	800eb8c <__pow5mult>
 800b2e6:	9008      	str	r0, [sp, #32]
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	f43f ae93 	beq.w	800b014 <_strtod_l+0x47c>
 800b2ee:	2d00      	cmp	r5, #0
 800b2f0:	dd08      	ble.n	800b304 <_strtod_l+0x76c>
 800b2f2:	462a      	mov	r2, r5
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	9908      	ldr	r1, [sp, #32]
 800b2f8:	f003 fca2 	bl	800ec40 <__lshift>
 800b2fc:	9008      	str	r0, [sp, #32]
 800b2fe:	2800      	cmp	r0, #0
 800b300:	f43f ae88 	beq.w	800b014 <_strtod_l+0x47c>
 800b304:	f1ba 0f00 	cmp.w	sl, #0
 800b308:	dd08      	ble.n	800b31c <_strtod_l+0x784>
 800b30a:	4659      	mov	r1, fp
 800b30c:	4652      	mov	r2, sl
 800b30e:	4620      	mov	r0, r4
 800b310:	f003 fc96 	bl	800ec40 <__lshift>
 800b314:	4683      	mov	fp, r0
 800b316:	2800      	cmp	r0, #0
 800b318:	f43f ae7c 	beq.w	800b014 <_strtod_l+0x47c>
 800b31c:	4620      	mov	r0, r4
 800b31e:	9a08      	ldr	r2, [sp, #32]
 800b320:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b322:	f003 fd15 	bl	800ed50 <__mdiff>
 800b326:	4606      	mov	r6, r0
 800b328:	2800      	cmp	r0, #0
 800b32a:	f43f ae73 	beq.w	800b014 <_strtod_l+0x47c>
 800b32e:	2500      	movs	r5, #0
 800b330:	68c3      	ldr	r3, [r0, #12]
 800b332:	4659      	mov	r1, fp
 800b334:	60c5      	str	r5, [r0, #12]
 800b336:	930a      	str	r3, [sp, #40]	; 0x28
 800b338:	f003 fcee 	bl	800ed18 <__mcmp>
 800b33c:	42a8      	cmp	r0, r5
 800b33e:	da6b      	bge.n	800b418 <_strtod_l+0x880>
 800b340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b342:	ea53 0308 	orrs.w	r3, r3, r8
 800b346:	f040 808f 	bne.w	800b468 <_strtod_l+0x8d0>
 800b34a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b34e:	2b00      	cmp	r3, #0
 800b350:	f040 808a 	bne.w	800b468 <_strtod_l+0x8d0>
 800b354:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b358:	0d1b      	lsrs	r3, r3, #20
 800b35a:	051b      	lsls	r3, r3, #20
 800b35c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b360:	f240 8082 	bls.w	800b468 <_strtod_l+0x8d0>
 800b364:	6973      	ldr	r3, [r6, #20]
 800b366:	b913      	cbnz	r3, 800b36e <_strtod_l+0x7d6>
 800b368:	6933      	ldr	r3, [r6, #16]
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	dd7c      	ble.n	800b468 <_strtod_l+0x8d0>
 800b36e:	4631      	mov	r1, r6
 800b370:	2201      	movs	r2, #1
 800b372:	4620      	mov	r0, r4
 800b374:	f003 fc64 	bl	800ec40 <__lshift>
 800b378:	4659      	mov	r1, fp
 800b37a:	4606      	mov	r6, r0
 800b37c:	f003 fccc 	bl	800ed18 <__mcmp>
 800b380:	2800      	cmp	r0, #0
 800b382:	dd71      	ble.n	800b468 <_strtod_l+0x8d0>
 800b384:	9905      	ldr	r1, [sp, #20]
 800b386:	464b      	mov	r3, r9
 800b388:	4a21      	ldr	r2, [pc, #132]	; (800b410 <_strtod_l+0x878>)
 800b38a:	2900      	cmp	r1, #0
 800b38c:	f000 808d 	beq.w	800b4aa <_strtod_l+0x912>
 800b390:	ea02 0109 	and.w	r1, r2, r9
 800b394:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b398:	f300 8087 	bgt.w	800b4aa <_strtod_l+0x912>
 800b39c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b3a0:	f77f aea9 	ble.w	800b0f6 <_strtod_l+0x55e>
 800b3a4:	4640      	mov	r0, r8
 800b3a6:	4649      	mov	r1, r9
 800b3a8:	4b1a      	ldr	r3, [pc, #104]	; (800b414 <_strtod_l+0x87c>)
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f7f5 f90e 	bl	80005cc <__aeabi_dmul>
 800b3b0:	4b17      	ldr	r3, [pc, #92]	; (800b410 <_strtod_l+0x878>)
 800b3b2:	4680      	mov	r8, r0
 800b3b4:	400b      	ands	r3, r1
 800b3b6:	4689      	mov	r9, r1
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	f47f ae35 	bne.w	800b028 <_strtod_l+0x490>
 800b3be:	2322      	movs	r3, #34	; 0x22
 800b3c0:	6023      	str	r3, [r4, #0]
 800b3c2:	e631      	b.n	800b028 <_strtod_l+0x490>
 800b3c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b3c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b3cc:	ea03 0808 	and.w	r8, r3, r8
 800b3d0:	e6de      	b.n	800b190 <_strtod_l+0x5f8>
 800b3d2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800b3d6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800b3da:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800b3de:	37e2      	adds	r7, #226	; 0xe2
 800b3e0:	fa01 f307 	lsl.w	r3, r1, r7
 800b3e4:	9310      	str	r3, [sp, #64]	; 0x40
 800b3e6:	9113      	str	r1, [sp, #76]	; 0x4c
 800b3e8:	e745      	b.n	800b276 <_strtod_l+0x6de>
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	9310      	str	r3, [sp, #64]	; 0x40
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	9313      	str	r3, [sp, #76]	; 0x4c
 800b3f2:	e740      	b.n	800b276 <_strtod_l+0x6de>
 800b3f4:	463a      	mov	r2, r7
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b3fa:	f003 fc21 	bl	800ec40 <__lshift>
 800b3fe:	901a      	str	r0, [sp, #104]	; 0x68
 800b400:	2800      	cmp	r0, #0
 800b402:	f47f af68 	bne.w	800b2d6 <_strtod_l+0x73e>
 800b406:	e605      	b.n	800b014 <_strtod_l+0x47c>
 800b408:	08010770 	.word	0x08010770
 800b40c:	fffffc02 	.word	0xfffffc02
 800b410:	7ff00000 	.word	0x7ff00000
 800b414:	39500000 	.word	0x39500000
 800b418:	46ca      	mov	sl, r9
 800b41a:	d165      	bne.n	800b4e8 <_strtod_l+0x950>
 800b41c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b41e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b422:	b352      	cbz	r2, 800b47a <_strtod_l+0x8e2>
 800b424:	4a9e      	ldr	r2, [pc, #632]	; (800b6a0 <_strtod_l+0xb08>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d12a      	bne.n	800b480 <_strtod_l+0x8e8>
 800b42a:	9b05      	ldr	r3, [sp, #20]
 800b42c:	4641      	mov	r1, r8
 800b42e:	b1fb      	cbz	r3, 800b470 <_strtod_l+0x8d8>
 800b430:	4b9c      	ldr	r3, [pc, #624]	; (800b6a4 <_strtod_l+0xb0c>)
 800b432:	f04f 32ff 	mov.w	r2, #4294967295
 800b436:	ea09 0303 	and.w	r3, r9, r3
 800b43a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b43e:	d81a      	bhi.n	800b476 <_strtod_l+0x8de>
 800b440:	0d1b      	lsrs	r3, r3, #20
 800b442:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b446:	fa02 f303 	lsl.w	r3, r2, r3
 800b44a:	4299      	cmp	r1, r3
 800b44c:	d118      	bne.n	800b480 <_strtod_l+0x8e8>
 800b44e:	4b96      	ldr	r3, [pc, #600]	; (800b6a8 <_strtod_l+0xb10>)
 800b450:	459a      	cmp	sl, r3
 800b452:	d102      	bne.n	800b45a <_strtod_l+0x8c2>
 800b454:	3101      	adds	r1, #1
 800b456:	f43f addd 	beq.w	800b014 <_strtod_l+0x47c>
 800b45a:	f04f 0800 	mov.w	r8, #0
 800b45e:	4b91      	ldr	r3, [pc, #580]	; (800b6a4 <_strtod_l+0xb0c>)
 800b460:	ea0a 0303 	and.w	r3, sl, r3
 800b464:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b468:	9b05      	ldr	r3, [sp, #20]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d19a      	bne.n	800b3a4 <_strtod_l+0x80c>
 800b46e:	e5db      	b.n	800b028 <_strtod_l+0x490>
 800b470:	f04f 33ff 	mov.w	r3, #4294967295
 800b474:	e7e9      	b.n	800b44a <_strtod_l+0x8b2>
 800b476:	4613      	mov	r3, r2
 800b478:	e7e7      	b.n	800b44a <_strtod_l+0x8b2>
 800b47a:	ea53 0308 	orrs.w	r3, r3, r8
 800b47e:	d081      	beq.n	800b384 <_strtod_l+0x7ec>
 800b480:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b482:	b1e3      	cbz	r3, 800b4be <_strtod_l+0x926>
 800b484:	ea13 0f0a 	tst.w	r3, sl
 800b488:	d0ee      	beq.n	800b468 <_strtod_l+0x8d0>
 800b48a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b48c:	4640      	mov	r0, r8
 800b48e:	4649      	mov	r1, r9
 800b490:	9a05      	ldr	r2, [sp, #20]
 800b492:	b1c3      	cbz	r3, 800b4c6 <_strtod_l+0x92e>
 800b494:	f7ff fb5e 	bl	800ab54 <sulp>
 800b498:	4602      	mov	r2, r0
 800b49a:	460b      	mov	r3, r1
 800b49c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b49e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b4a0:	f7f4 fede 	bl	8000260 <__adddf3>
 800b4a4:	4680      	mov	r8, r0
 800b4a6:	4689      	mov	r9, r1
 800b4a8:	e7de      	b.n	800b468 <_strtod_l+0x8d0>
 800b4aa:	4013      	ands	r3, r2
 800b4ac:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b4b0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b4b4:	f04f 38ff 	mov.w	r8, #4294967295
 800b4b8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b4bc:	e7d4      	b.n	800b468 <_strtod_l+0x8d0>
 800b4be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b4c0:	ea13 0f08 	tst.w	r3, r8
 800b4c4:	e7e0      	b.n	800b488 <_strtod_l+0x8f0>
 800b4c6:	f7ff fb45 	bl	800ab54 <sulp>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b4d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b4d2:	f7f4 fec3 	bl	800025c <__aeabi_dsub>
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	2300      	movs	r3, #0
 800b4da:	4680      	mov	r8, r0
 800b4dc:	4689      	mov	r9, r1
 800b4de:	f7f5 fadd 	bl	8000a9c <__aeabi_dcmpeq>
 800b4e2:	2800      	cmp	r0, #0
 800b4e4:	d0c0      	beq.n	800b468 <_strtod_l+0x8d0>
 800b4e6:	e606      	b.n	800b0f6 <_strtod_l+0x55e>
 800b4e8:	4659      	mov	r1, fp
 800b4ea:	4630      	mov	r0, r6
 800b4ec:	f003 fd7a 	bl	800efe4 <__ratio>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b4fe:	f7f5 fae1 	bl	8000ac4 <__aeabi_dcmple>
 800b502:	2800      	cmp	r0, #0
 800b504:	d06f      	beq.n	800b5e6 <_strtod_l+0xa4e>
 800b506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d17c      	bne.n	800b606 <_strtod_l+0xa6e>
 800b50c:	f1b8 0f00 	cmp.w	r8, #0
 800b510:	d159      	bne.n	800b5c6 <_strtod_l+0xa2e>
 800b512:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b516:	2b00      	cmp	r3, #0
 800b518:	d17b      	bne.n	800b612 <_strtod_l+0xa7a>
 800b51a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b51e:	2200      	movs	r2, #0
 800b520:	4b62      	ldr	r3, [pc, #392]	; (800b6ac <_strtod_l+0xb14>)
 800b522:	f7f5 fac5 	bl	8000ab0 <__aeabi_dcmplt>
 800b526:	2800      	cmp	r0, #0
 800b528:	d15a      	bne.n	800b5e0 <_strtod_l+0xa48>
 800b52a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b52e:	2200      	movs	r2, #0
 800b530:	4b5f      	ldr	r3, [pc, #380]	; (800b6b0 <_strtod_l+0xb18>)
 800b532:	f7f5 f84b 	bl	80005cc <__aeabi_dmul>
 800b536:	4605      	mov	r5, r0
 800b538:	460f      	mov	r7, r1
 800b53a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b53e:	9506      	str	r5, [sp, #24]
 800b540:	9307      	str	r3, [sp, #28]
 800b542:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b546:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b54a:	4b56      	ldr	r3, [pc, #344]	; (800b6a4 <_strtod_l+0xb0c>)
 800b54c:	4a55      	ldr	r2, [pc, #340]	; (800b6a4 <_strtod_l+0xb0c>)
 800b54e:	ea0a 0303 	and.w	r3, sl, r3
 800b552:	9313      	str	r3, [sp, #76]	; 0x4c
 800b554:	4b57      	ldr	r3, [pc, #348]	; (800b6b4 <_strtod_l+0xb1c>)
 800b556:	ea0a 0202 	and.w	r2, sl, r2
 800b55a:	429a      	cmp	r2, r3
 800b55c:	f040 80b0 	bne.w	800b6c0 <_strtod_l+0xb28>
 800b560:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b564:	4640      	mov	r0, r8
 800b566:	4649      	mov	r1, r9
 800b568:	f003 fc7e 	bl	800ee68 <__ulp>
 800b56c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b570:	f7f5 f82c 	bl	80005cc <__aeabi_dmul>
 800b574:	4642      	mov	r2, r8
 800b576:	464b      	mov	r3, r9
 800b578:	f7f4 fe72 	bl	8000260 <__adddf3>
 800b57c:	f8df a124 	ldr.w	sl, [pc, #292]	; 800b6a4 <_strtod_l+0xb0c>
 800b580:	4a4d      	ldr	r2, [pc, #308]	; (800b6b8 <_strtod_l+0xb20>)
 800b582:	ea01 0a0a 	and.w	sl, r1, sl
 800b586:	4592      	cmp	sl, r2
 800b588:	4680      	mov	r8, r0
 800b58a:	d948      	bls.n	800b61e <_strtod_l+0xa86>
 800b58c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b58e:	4b46      	ldr	r3, [pc, #280]	; (800b6a8 <_strtod_l+0xb10>)
 800b590:	429a      	cmp	r2, r3
 800b592:	d103      	bne.n	800b59c <_strtod_l+0xa04>
 800b594:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b596:	3301      	adds	r3, #1
 800b598:	f43f ad3c 	beq.w	800b014 <_strtod_l+0x47c>
 800b59c:	f04f 38ff 	mov.w	r8, #4294967295
 800b5a0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800b6a8 <_strtod_l+0xb10>
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b5a8:	f003 f932 	bl	800e810 <_Bfree>
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	9908      	ldr	r1, [sp, #32]
 800b5b0:	f003 f92e 	bl	800e810 <_Bfree>
 800b5b4:	4659      	mov	r1, fp
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	f003 f92a 	bl	800e810 <_Bfree>
 800b5bc:	4631      	mov	r1, r6
 800b5be:	4620      	mov	r0, r4
 800b5c0:	f003 f926 	bl	800e810 <_Bfree>
 800b5c4:	e605      	b.n	800b1d2 <_strtod_l+0x63a>
 800b5c6:	f1b8 0f01 	cmp.w	r8, #1
 800b5ca:	d103      	bne.n	800b5d4 <_strtod_l+0xa3c>
 800b5cc:	f1b9 0f00 	cmp.w	r9, #0
 800b5d0:	f43f ad91 	beq.w	800b0f6 <_strtod_l+0x55e>
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	4b39      	ldr	r3, [pc, #228]	; (800b6bc <_strtod_l+0xb24>)
 800b5d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b5da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b5de:	e016      	b.n	800b60e <_strtod_l+0xa76>
 800b5e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b5e2:	4f33      	ldr	r7, [pc, #204]	; (800b6b0 <_strtod_l+0xb18>)
 800b5e4:	e7a9      	b.n	800b53a <_strtod_l+0x9a2>
 800b5e6:	4b32      	ldr	r3, [pc, #200]	; (800b6b0 <_strtod_l+0xb18>)
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b5ee:	f7f4 ffed 	bl	80005cc <__aeabi_dmul>
 800b5f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5f4:	4605      	mov	r5, r0
 800b5f6:	460f      	mov	r7, r1
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d09e      	beq.n	800b53a <_strtod_l+0x9a2>
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	460b      	mov	r3, r1
 800b600:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b604:	e79d      	b.n	800b542 <_strtod_l+0x9aa>
 800b606:	2200      	movs	r2, #0
 800b608:	4b28      	ldr	r3, [pc, #160]	; (800b6ac <_strtod_l+0xb14>)
 800b60a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b60e:	4f27      	ldr	r7, [pc, #156]	; (800b6ac <_strtod_l+0xb14>)
 800b610:	e797      	b.n	800b542 <_strtod_l+0x9aa>
 800b612:	2200      	movs	r2, #0
 800b614:	4b29      	ldr	r3, [pc, #164]	; (800b6bc <_strtod_l+0xb24>)
 800b616:	4645      	mov	r5, r8
 800b618:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b61c:	e7f7      	b.n	800b60e <_strtod_l+0xa76>
 800b61e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800b622:	9b05      	ldr	r3, [sp, #20]
 800b624:	46ca      	mov	sl, r9
 800b626:	2b00      	cmp	r3, #0
 800b628:	d1bc      	bne.n	800b5a4 <_strtod_l+0xa0c>
 800b62a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b62e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b630:	0d1b      	lsrs	r3, r3, #20
 800b632:	051b      	lsls	r3, r3, #20
 800b634:	429a      	cmp	r2, r3
 800b636:	d1b5      	bne.n	800b5a4 <_strtod_l+0xa0c>
 800b638:	4628      	mov	r0, r5
 800b63a:	4639      	mov	r1, r7
 800b63c:	f7f5 fdf8 	bl	8001230 <__aeabi_d2lz>
 800b640:	f7f4 ff96 	bl	8000570 <__aeabi_l2d>
 800b644:	4602      	mov	r2, r0
 800b646:	460b      	mov	r3, r1
 800b648:	4628      	mov	r0, r5
 800b64a:	4639      	mov	r1, r7
 800b64c:	f7f4 fe06 	bl	800025c <__aeabi_dsub>
 800b650:	460b      	mov	r3, r1
 800b652:	4602      	mov	r2, r0
 800b654:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800b658:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b65c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b65e:	ea4a 0a08 	orr.w	sl, sl, r8
 800b662:	ea5a 0a03 	orrs.w	sl, sl, r3
 800b666:	d06c      	beq.n	800b742 <_strtod_l+0xbaa>
 800b668:	a309      	add	r3, pc, #36	; (adr r3, 800b690 <_strtod_l+0xaf8>)
 800b66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66e:	f7f5 fa1f 	bl	8000ab0 <__aeabi_dcmplt>
 800b672:	2800      	cmp	r0, #0
 800b674:	f47f acd8 	bne.w	800b028 <_strtod_l+0x490>
 800b678:	a307      	add	r3, pc, #28	; (adr r3, 800b698 <_strtod_l+0xb00>)
 800b67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b682:	f7f5 fa33 	bl	8000aec <__aeabi_dcmpgt>
 800b686:	2800      	cmp	r0, #0
 800b688:	d08c      	beq.n	800b5a4 <_strtod_l+0xa0c>
 800b68a:	e4cd      	b.n	800b028 <_strtod_l+0x490>
 800b68c:	f3af 8000 	nop.w
 800b690:	94a03595 	.word	0x94a03595
 800b694:	3fdfffff 	.word	0x3fdfffff
 800b698:	35afe535 	.word	0x35afe535
 800b69c:	3fe00000 	.word	0x3fe00000
 800b6a0:	000fffff 	.word	0x000fffff
 800b6a4:	7ff00000 	.word	0x7ff00000
 800b6a8:	7fefffff 	.word	0x7fefffff
 800b6ac:	3ff00000 	.word	0x3ff00000
 800b6b0:	3fe00000 	.word	0x3fe00000
 800b6b4:	7fe00000 	.word	0x7fe00000
 800b6b8:	7c9fffff 	.word	0x7c9fffff
 800b6bc:	bff00000 	.word	0xbff00000
 800b6c0:	9b05      	ldr	r3, [sp, #20]
 800b6c2:	b333      	cbz	r3, 800b712 <_strtod_l+0xb7a>
 800b6c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b6c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b6ca:	d822      	bhi.n	800b712 <_strtod_l+0xb7a>
 800b6cc:	a328      	add	r3, pc, #160	; (adr r3, 800b770 <_strtod_l+0xbd8>)
 800b6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	4639      	mov	r1, r7
 800b6d6:	f7f5 f9f5 	bl	8000ac4 <__aeabi_dcmple>
 800b6da:	b1a0      	cbz	r0, 800b706 <_strtod_l+0xb6e>
 800b6dc:	4639      	mov	r1, r7
 800b6de:	4628      	mov	r0, r5
 800b6e0:	f7f5 fa4c 	bl	8000b7c <__aeabi_d2uiz>
 800b6e4:	2801      	cmp	r0, #1
 800b6e6:	bf38      	it	cc
 800b6e8:	2001      	movcc	r0, #1
 800b6ea:	f7f4 fef5 	bl	80004d8 <__aeabi_ui2d>
 800b6ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6f0:	4605      	mov	r5, r0
 800b6f2:	460f      	mov	r7, r1
 800b6f4:	bb03      	cbnz	r3, 800b738 <_strtod_l+0xba0>
 800b6f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6fa:	9014      	str	r0, [sp, #80]	; 0x50
 800b6fc:	9315      	str	r3, [sp, #84]	; 0x54
 800b6fe:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b702:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b706:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b708:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b70a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b70e:	1a9b      	subs	r3, r3, r2
 800b710:	9311      	str	r3, [sp, #68]	; 0x44
 800b712:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b714:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b716:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800b71a:	f003 fba5 	bl	800ee68 <__ulp>
 800b71e:	4602      	mov	r2, r0
 800b720:	460b      	mov	r3, r1
 800b722:	4640      	mov	r0, r8
 800b724:	4649      	mov	r1, r9
 800b726:	f7f4 ff51 	bl	80005cc <__aeabi_dmul>
 800b72a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b72c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b72e:	f7f4 fd97 	bl	8000260 <__adddf3>
 800b732:	4680      	mov	r8, r0
 800b734:	4689      	mov	r9, r1
 800b736:	e774      	b.n	800b622 <_strtod_l+0xa8a>
 800b738:	4602      	mov	r2, r0
 800b73a:	460b      	mov	r3, r1
 800b73c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b740:	e7dd      	b.n	800b6fe <_strtod_l+0xb66>
 800b742:	a30d      	add	r3, pc, #52	; (adr r3, 800b778 <_strtod_l+0xbe0>)
 800b744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b748:	f7f5 f9b2 	bl	8000ab0 <__aeabi_dcmplt>
 800b74c:	e79b      	b.n	800b686 <_strtod_l+0xaee>
 800b74e:	2300      	movs	r3, #0
 800b750:	930e      	str	r3, [sp, #56]	; 0x38
 800b752:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b754:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b756:	6013      	str	r3, [r2, #0]
 800b758:	f7ff ba5b 	b.w	800ac12 <_strtod_l+0x7a>
 800b75c:	2a65      	cmp	r2, #101	; 0x65
 800b75e:	f43f ab52 	beq.w	800ae06 <_strtod_l+0x26e>
 800b762:	2a45      	cmp	r2, #69	; 0x45
 800b764:	f43f ab4f 	beq.w	800ae06 <_strtod_l+0x26e>
 800b768:	2301      	movs	r3, #1
 800b76a:	f7ff bb87 	b.w	800ae7c <_strtod_l+0x2e4>
 800b76e:	bf00      	nop
 800b770:	ffc00000 	.word	0xffc00000
 800b774:	41dfffff 	.word	0x41dfffff
 800b778:	94a03595 	.word	0x94a03595
 800b77c:	3fcfffff 	.word	0x3fcfffff

0800b780 <strtof>:
 800b780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b784:	4f24      	ldr	r7, [pc, #144]	; (800b818 <strtof+0x98>)
 800b786:	460a      	mov	r2, r1
 800b788:	4b24      	ldr	r3, [pc, #144]	; (800b81c <strtof+0x9c>)
 800b78a:	4601      	mov	r1, r0
 800b78c:	6838      	ldr	r0, [r7, #0]
 800b78e:	f7ff fa03 	bl	800ab98 <_strtod_l>
 800b792:	4602      	mov	r2, r0
 800b794:	460b      	mov	r3, r1
 800b796:	4606      	mov	r6, r0
 800b798:	460c      	mov	r4, r1
 800b79a:	f7f5 f9b1 	bl	8000b00 <__aeabi_dcmpun>
 800b79e:	b168      	cbz	r0, 800b7bc <strtof+0x3c>
 800b7a0:	2c00      	cmp	r4, #0
 800b7a2:	481f      	ldr	r0, [pc, #124]	; (800b820 <strtof+0xa0>)
 800b7a4:	da06      	bge.n	800b7b4 <strtof+0x34>
 800b7a6:	f001 fd55 	bl	800d254 <nanf>
 800b7aa:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 800b7ae:	4628      	mov	r0, r5
 800b7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b8:	f001 bd4c 	b.w	800d254 <nanf>
 800b7bc:	4621      	mov	r1, r4
 800b7be:	4630      	mov	r0, r6
 800b7c0:	f7f5 f9fc 	bl	8000bbc <__aeabi_d2f>
 800b7c4:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800b7c8:	4605      	mov	r5, r0
 800b7ca:	4916      	ldr	r1, [pc, #88]	; (800b824 <strtof+0xa4>)
 800b7cc:	4640      	mov	r0, r8
 800b7ce:	f7f5 fd19 	bl	8001204 <__aeabi_fcmpun>
 800b7d2:	b9b0      	cbnz	r0, 800b802 <strtof+0x82>
 800b7d4:	4640      	mov	r0, r8
 800b7d6:	4913      	ldr	r1, [pc, #76]	; (800b824 <strtof+0xa4>)
 800b7d8:	f7f5 fcf6 	bl	80011c8 <__aeabi_fcmple>
 800b7dc:	b988      	cbnz	r0, 800b802 <strtof+0x82>
 800b7de:	f024 4800 	bic.w	r8, r4, #2147483648	; 0x80000000
 800b7e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7e6:	4630      	mov	r0, r6
 800b7e8:	4641      	mov	r1, r8
 800b7ea:	4b0f      	ldr	r3, [pc, #60]	; (800b828 <strtof+0xa8>)
 800b7ec:	f7f5 f988 	bl	8000b00 <__aeabi_dcmpun>
 800b7f0:	b970      	cbnz	r0, 800b810 <strtof+0x90>
 800b7f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7f6:	4630      	mov	r0, r6
 800b7f8:	4641      	mov	r1, r8
 800b7fa:	4b0b      	ldr	r3, [pc, #44]	; (800b828 <strtof+0xa8>)
 800b7fc:	f7f5 f962 	bl	8000ac4 <__aeabi_dcmple>
 800b800:	b930      	cbnz	r0, 800b810 <strtof+0x90>
 800b802:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 800b806:	d1d2      	bne.n	800b7ae <strtof+0x2e>
 800b808:	4b08      	ldr	r3, [pc, #32]	; (800b82c <strtof+0xac>)
 800b80a:	4023      	ands	r3, r4
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d0ce      	beq.n	800b7ae <strtof+0x2e>
 800b810:	2222      	movs	r2, #34	; 0x22
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	601a      	str	r2, [r3, #0]
 800b816:	e7ca      	b.n	800b7ae <strtof+0x2e>
 800b818:	200001e0 	.word	0x200001e0
 800b81c:	20000028 	.word	0x20000028
 800b820:	08010a2d 	.word	0x08010a2d
 800b824:	7f7fffff 	.word	0x7f7fffff
 800b828:	7fefffff 	.word	0x7fefffff
 800b82c:	7ff00000 	.word	0x7ff00000

0800b830 <_strtol_l.constprop.0>:
 800b830:	2b01      	cmp	r3, #1
 800b832:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b836:	4686      	mov	lr, r0
 800b838:	4690      	mov	r8, r2
 800b83a:	d001      	beq.n	800b840 <_strtol_l.constprop.0+0x10>
 800b83c:	2b24      	cmp	r3, #36	; 0x24
 800b83e:	d906      	bls.n	800b84e <_strtol_l.constprop.0+0x1e>
 800b840:	f001 fcae 	bl	800d1a0 <__errno>
 800b844:	2316      	movs	r3, #22
 800b846:	6003      	str	r3, [r0, #0]
 800b848:	2000      	movs	r0, #0
 800b84a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b84e:	460d      	mov	r5, r1
 800b850:	4835      	ldr	r0, [pc, #212]	; (800b928 <_strtol_l.constprop.0+0xf8>)
 800b852:	462a      	mov	r2, r5
 800b854:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b858:	5d06      	ldrb	r6, [r0, r4]
 800b85a:	f016 0608 	ands.w	r6, r6, #8
 800b85e:	d1f8      	bne.n	800b852 <_strtol_l.constprop.0+0x22>
 800b860:	2c2d      	cmp	r4, #45	; 0x2d
 800b862:	d12e      	bne.n	800b8c2 <_strtol_l.constprop.0+0x92>
 800b864:	2601      	movs	r6, #1
 800b866:	782c      	ldrb	r4, [r5, #0]
 800b868:	1c95      	adds	r5, r2, #2
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d057      	beq.n	800b91e <_strtol_l.constprop.0+0xee>
 800b86e:	2b10      	cmp	r3, #16
 800b870:	d109      	bne.n	800b886 <_strtol_l.constprop.0+0x56>
 800b872:	2c30      	cmp	r4, #48	; 0x30
 800b874:	d107      	bne.n	800b886 <_strtol_l.constprop.0+0x56>
 800b876:	782a      	ldrb	r2, [r5, #0]
 800b878:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b87c:	2a58      	cmp	r2, #88	; 0x58
 800b87e:	d149      	bne.n	800b914 <_strtol_l.constprop.0+0xe4>
 800b880:	2310      	movs	r3, #16
 800b882:	786c      	ldrb	r4, [r5, #1]
 800b884:	3502      	adds	r5, #2
 800b886:	2200      	movs	r2, #0
 800b888:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800b88c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b890:	fbbc f9f3 	udiv	r9, ip, r3
 800b894:	4610      	mov	r0, r2
 800b896:	fb03 ca19 	mls	sl, r3, r9, ip
 800b89a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b89e:	2f09      	cmp	r7, #9
 800b8a0:	d814      	bhi.n	800b8cc <_strtol_l.constprop.0+0x9c>
 800b8a2:	463c      	mov	r4, r7
 800b8a4:	42a3      	cmp	r3, r4
 800b8a6:	dd20      	ble.n	800b8ea <_strtol_l.constprop.0+0xba>
 800b8a8:	1c57      	adds	r7, r2, #1
 800b8aa:	d007      	beq.n	800b8bc <_strtol_l.constprop.0+0x8c>
 800b8ac:	4581      	cmp	r9, r0
 800b8ae:	d319      	bcc.n	800b8e4 <_strtol_l.constprop.0+0xb4>
 800b8b0:	d101      	bne.n	800b8b6 <_strtol_l.constprop.0+0x86>
 800b8b2:	45a2      	cmp	sl, r4
 800b8b4:	db16      	blt.n	800b8e4 <_strtol_l.constprop.0+0xb4>
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	fb00 4003 	mla	r0, r0, r3, r4
 800b8bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b8c0:	e7eb      	b.n	800b89a <_strtol_l.constprop.0+0x6a>
 800b8c2:	2c2b      	cmp	r4, #43	; 0x2b
 800b8c4:	bf04      	itt	eq
 800b8c6:	782c      	ldrbeq	r4, [r5, #0]
 800b8c8:	1c95      	addeq	r5, r2, #2
 800b8ca:	e7ce      	b.n	800b86a <_strtol_l.constprop.0+0x3a>
 800b8cc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b8d0:	2f19      	cmp	r7, #25
 800b8d2:	d801      	bhi.n	800b8d8 <_strtol_l.constprop.0+0xa8>
 800b8d4:	3c37      	subs	r4, #55	; 0x37
 800b8d6:	e7e5      	b.n	800b8a4 <_strtol_l.constprop.0+0x74>
 800b8d8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b8dc:	2f19      	cmp	r7, #25
 800b8de:	d804      	bhi.n	800b8ea <_strtol_l.constprop.0+0xba>
 800b8e0:	3c57      	subs	r4, #87	; 0x57
 800b8e2:	e7df      	b.n	800b8a4 <_strtol_l.constprop.0+0x74>
 800b8e4:	f04f 32ff 	mov.w	r2, #4294967295
 800b8e8:	e7e8      	b.n	800b8bc <_strtol_l.constprop.0+0x8c>
 800b8ea:	1c53      	adds	r3, r2, #1
 800b8ec:	d108      	bne.n	800b900 <_strtol_l.constprop.0+0xd0>
 800b8ee:	2322      	movs	r3, #34	; 0x22
 800b8f0:	4660      	mov	r0, ip
 800b8f2:	f8ce 3000 	str.w	r3, [lr]
 800b8f6:	f1b8 0f00 	cmp.w	r8, #0
 800b8fa:	d0a6      	beq.n	800b84a <_strtol_l.constprop.0+0x1a>
 800b8fc:	1e69      	subs	r1, r5, #1
 800b8fe:	e006      	b.n	800b90e <_strtol_l.constprop.0+0xde>
 800b900:	b106      	cbz	r6, 800b904 <_strtol_l.constprop.0+0xd4>
 800b902:	4240      	negs	r0, r0
 800b904:	f1b8 0f00 	cmp.w	r8, #0
 800b908:	d09f      	beq.n	800b84a <_strtol_l.constprop.0+0x1a>
 800b90a:	2a00      	cmp	r2, #0
 800b90c:	d1f6      	bne.n	800b8fc <_strtol_l.constprop.0+0xcc>
 800b90e:	f8c8 1000 	str.w	r1, [r8]
 800b912:	e79a      	b.n	800b84a <_strtol_l.constprop.0+0x1a>
 800b914:	2430      	movs	r4, #48	; 0x30
 800b916:	2b00      	cmp	r3, #0
 800b918:	d1b5      	bne.n	800b886 <_strtol_l.constprop.0+0x56>
 800b91a:	2308      	movs	r3, #8
 800b91c:	e7b3      	b.n	800b886 <_strtol_l.constprop.0+0x56>
 800b91e:	2c30      	cmp	r4, #48	; 0x30
 800b920:	d0a9      	beq.n	800b876 <_strtol_l.constprop.0+0x46>
 800b922:	230a      	movs	r3, #10
 800b924:	e7af      	b.n	800b886 <_strtol_l.constprop.0+0x56>
 800b926:	bf00      	nop
 800b928:	08010799 	.word	0x08010799

0800b92c <_strtol_r>:
 800b92c:	f7ff bf80 	b.w	800b830 <_strtol_l.constprop.0>

0800b930 <strtol>:
 800b930:	4613      	mov	r3, r2
 800b932:	460a      	mov	r2, r1
 800b934:	4601      	mov	r1, r0
 800b936:	4802      	ldr	r0, [pc, #8]	; (800b940 <strtol+0x10>)
 800b938:	6800      	ldr	r0, [r0, #0]
 800b93a:	f7ff bf79 	b.w	800b830 <_strtol_l.constprop.0>
 800b93e:	bf00      	nop
 800b940:	200001e0 	.word	0x200001e0

0800b944 <__cvt>:
 800b944:	2b00      	cmp	r3, #0
 800b946:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b94a:	461f      	mov	r7, r3
 800b94c:	bfbb      	ittet	lt
 800b94e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b952:	461f      	movlt	r7, r3
 800b954:	2300      	movge	r3, #0
 800b956:	232d      	movlt	r3, #45	; 0x2d
 800b958:	b088      	sub	sp, #32
 800b95a:	4614      	mov	r4, r2
 800b95c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b95e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b960:	7013      	strb	r3, [r2, #0]
 800b962:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b964:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800b968:	f023 0820 	bic.w	r8, r3, #32
 800b96c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b970:	d005      	beq.n	800b97e <__cvt+0x3a>
 800b972:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b976:	d100      	bne.n	800b97a <__cvt+0x36>
 800b978:	3501      	adds	r5, #1
 800b97a:	2302      	movs	r3, #2
 800b97c:	e000      	b.n	800b980 <__cvt+0x3c>
 800b97e:	2303      	movs	r3, #3
 800b980:	aa07      	add	r2, sp, #28
 800b982:	9204      	str	r2, [sp, #16]
 800b984:	aa06      	add	r2, sp, #24
 800b986:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b98a:	e9cd 3500 	strd	r3, r5, [sp]
 800b98e:	4622      	mov	r2, r4
 800b990:	463b      	mov	r3, r7
 800b992:	f001 fd21 	bl	800d3d8 <_dtoa_r>
 800b996:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b99a:	4606      	mov	r6, r0
 800b99c:	d102      	bne.n	800b9a4 <__cvt+0x60>
 800b99e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b9a0:	07db      	lsls	r3, r3, #31
 800b9a2:	d522      	bpl.n	800b9ea <__cvt+0xa6>
 800b9a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b9a8:	eb06 0905 	add.w	r9, r6, r5
 800b9ac:	d110      	bne.n	800b9d0 <__cvt+0x8c>
 800b9ae:	7833      	ldrb	r3, [r6, #0]
 800b9b0:	2b30      	cmp	r3, #48	; 0x30
 800b9b2:	d10a      	bne.n	800b9ca <__cvt+0x86>
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	4639      	mov	r1, r7
 800b9bc:	f7f5 f86e 	bl	8000a9c <__aeabi_dcmpeq>
 800b9c0:	b918      	cbnz	r0, 800b9ca <__cvt+0x86>
 800b9c2:	f1c5 0501 	rsb	r5, r5, #1
 800b9c6:	f8ca 5000 	str.w	r5, [sl]
 800b9ca:	f8da 3000 	ldr.w	r3, [sl]
 800b9ce:	4499      	add	r9, r3
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	4639      	mov	r1, r7
 800b9d8:	f7f5 f860 	bl	8000a9c <__aeabi_dcmpeq>
 800b9dc:	b108      	cbz	r0, 800b9e2 <__cvt+0x9e>
 800b9de:	f8cd 901c 	str.w	r9, [sp, #28]
 800b9e2:	2230      	movs	r2, #48	; 0x30
 800b9e4:	9b07      	ldr	r3, [sp, #28]
 800b9e6:	454b      	cmp	r3, r9
 800b9e8:	d307      	bcc.n	800b9fa <__cvt+0xb6>
 800b9ea:	4630      	mov	r0, r6
 800b9ec:	9b07      	ldr	r3, [sp, #28]
 800b9ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b9f0:	1b9b      	subs	r3, r3, r6
 800b9f2:	6013      	str	r3, [r2, #0]
 800b9f4:	b008      	add	sp, #32
 800b9f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9fa:	1c59      	adds	r1, r3, #1
 800b9fc:	9107      	str	r1, [sp, #28]
 800b9fe:	701a      	strb	r2, [r3, #0]
 800ba00:	e7f0      	b.n	800b9e4 <__cvt+0xa0>

0800ba02 <__exponent>:
 800ba02:	4603      	mov	r3, r0
 800ba04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba06:	2900      	cmp	r1, #0
 800ba08:	f803 2b02 	strb.w	r2, [r3], #2
 800ba0c:	bfb6      	itet	lt
 800ba0e:	222d      	movlt	r2, #45	; 0x2d
 800ba10:	222b      	movge	r2, #43	; 0x2b
 800ba12:	4249      	neglt	r1, r1
 800ba14:	2909      	cmp	r1, #9
 800ba16:	7042      	strb	r2, [r0, #1]
 800ba18:	dd2a      	ble.n	800ba70 <__exponent+0x6e>
 800ba1a:	f10d 0207 	add.w	r2, sp, #7
 800ba1e:	4617      	mov	r7, r2
 800ba20:	260a      	movs	r6, #10
 800ba22:	fb91 f5f6 	sdiv	r5, r1, r6
 800ba26:	4694      	mov	ip, r2
 800ba28:	fb06 1415 	mls	r4, r6, r5, r1
 800ba2c:	3430      	adds	r4, #48	; 0x30
 800ba2e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ba32:	460c      	mov	r4, r1
 800ba34:	2c63      	cmp	r4, #99	; 0x63
 800ba36:	4629      	mov	r1, r5
 800ba38:	f102 32ff 	add.w	r2, r2, #4294967295
 800ba3c:	dcf1      	bgt.n	800ba22 <__exponent+0x20>
 800ba3e:	3130      	adds	r1, #48	; 0x30
 800ba40:	f1ac 0402 	sub.w	r4, ip, #2
 800ba44:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ba48:	4622      	mov	r2, r4
 800ba4a:	1c41      	adds	r1, r0, #1
 800ba4c:	42ba      	cmp	r2, r7
 800ba4e:	d30a      	bcc.n	800ba66 <__exponent+0x64>
 800ba50:	f10d 0209 	add.w	r2, sp, #9
 800ba54:	eba2 020c 	sub.w	r2, r2, ip
 800ba58:	42bc      	cmp	r4, r7
 800ba5a:	bf88      	it	hi
 800ba5c:	2200      	movhi	r2, #0
 800ba5e:	4413      	add	r3, r2
 800ba60:	1a18      	subs	r0, r3, r0
 800ba62:	b003      	add	sp, #12
 800ba64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba66:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ba6a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ba6e:	e7ed      	b.n	800ba4c <__exponent+0x4a>
 800ba70:	2330      	movs	r3, #48	; 0x30
 800ba72:	3130      	adds	r1, #48	; 0x30
 800ba74:	7083      	strb	r3, [r0, #2]
 800ba76:	70c1      	strb	r1, [r0, #3]
 800ba78:	1d03      	adds	r3, r0, #4
 800ba7a:	e7f1      	b.n	800ba60 <__exponent+0x5e>

0800ba7c <_printf_float>:
 800ba7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba80:	b091      	sub	sp, #68	; 0x44
 800ba82:	460c      	mov	r4, r1
 800ba84:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800ba88:	4616      	mov	r6, r2
 800ba8a:	461f      	mov	r7, r3
 800ba8c:	4605      	mov	r5, r0
 800ba8e:	f001 fad7 	bl	800d040 <_localeconv_r>
 800ba92:	6803      	ldr	r3, [r0, #0]
 800ba94:	4618      	mov	r0, r3
 800ba96:	9309      	str	r3, [sp, #36]	; 0x24
 800ba98:	f7f4 fbd4 	bl	8000244 <strlen>
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	930e      	str	r3, [sp, #56]	; 0x38
 800baa0:	f8d8 3000 	ldr.w	r3, [r8]
 800baa4:	900a      	str	r0, [sp, #40]	; 0x28
 800baa6:	3307      	adds	r3, #7
 800baa8:	f023 0307 	bic.w	r3, r3, #7
 800baac:	f103 0208 	add.w	r2, r3, #8
 800bab0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800bab4:	f8d4 b000 	ldr.w	fp, [r4]
 800bab8:	f8c8 2000 	str.w	r2, [r8]
 800babc:	e9d3 a800 	ldrd	sl, r8, [r3]
 800bac0:	4652      	mov	r2, sl
 800bac2:	4643      	mov	r3, r8
 800bac4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bac8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800bacc:	930b      	str	r3, [sp, #44]	; 0x2c
 800bace:	f04f 32ff 	mov.w	r2, #4294967295
 800bad2:	4650      	mov	r0, sl
 800bad4:	4b9c      	ldr	r3, [pc, #624]	; (800bd48 <_printf_float+0x2cc>)
 800bad6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bad8:	f7f5 f812 	bl	8000b00 <__aeabi_dcmpun>
 800badc:	bb70      	cbnz	r0, 800bb3c <_printf_float+0xc0>
 800bade:	f04f 32ff 	mov.w	r2, #4294967295
 800bae2:	4650      	mov	r0, sl
 800bae4:	4b98      	ldr	r3, [pc, #608]	; (800bd48 <_printf_float+0x2cc>)
 800bae6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bae8:	f7f4 ffec 	bl	8000ac4 <__aeabi_dcmple>
 800baec:	bb30      	cbnz	r0, 800bb3c <_printf_float+0xc0>
 800baee:	2200      	movs	r2, #0
 800baf0:	2300      	movs	r3, #0
 800baf2:	4650      	mov	r0, sl
 800baf4:	4641      	mov	r1, r8
 800baf6:	f7f4 ffdb 	bl	8000ab0 <__aeabi_dcmplt>
 800bafa:	b110      	cbz	r0, 800bb02 <_printf_float+0x86>
 800bafc:	232d      	movs	r3, #45	; 0x2d
 800bafe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb02:	4a92      	ldr	r2, [pc, #584]	; (800bd4c <_printf_float+0x2d0>)
 800bb04:	4b92      	ldr	r3, [pc, #584]	; (800bd50 <_printf_float+0x2d4>)
 800bb06:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800bb0a:	bf94      	ite	ls
 800bb0c:	4690      	movls	r8, r2
 800bb0e:	4698      	movhi	r8, r3
 800bb10:	2303      	movs	r3, #3
 800bb12:	f04f 0a00 	mov.w	sl, #0
 800bb16:	6123      	str	r3, [r4, #16]
 800bb18:	f02b 0304 	bic.w	r3, fp, #4
 800bb1c:	6023      	str	r3, [r4, #0]
 800bb1e:	4633      	mov	r3, r6
 800bb20:	4621      	mov	r1, r4
 800bb22:	4628      	mov	r0, r5
 800bb24:	9700      	str	r7, [sp, #0]
 800bb26:	aa0f      	add	r2, sp, #60	; 0x3c
 800bb28:	f000 f9d6 	bl	800bed8 <_printf_common>
 800bb2c:	3001      	adds	r0, #1
 800bb2e:	f040 8090 	bne.w	800bc52 <_printf_float+0x1d6>
 800bb32:	f04f 30ff 	mov.w	r0, #4294967295
 800bb36:	b011      	add	sp, #68	; 0x44
 800bb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb3c:	4652      	mov	r2, sl
 800bb3e:	4643      	mov	r3, r8
 800bb40:	4650      	mov	r0, sl
 800bb42:	4641      	mov	r1, r8
 800bb44:	f7f4 ffdc 	bl	8000b00 <__aeabi_dcmpun>
 800bb48:	b148      	cbz	r0, 800bb5e <_printf_float+0xe2>
 800bb4a:	f1b8 0f00 	cmp.w	r8, #0
 800bb4e:	bfb8      	it	lt
 800bb50:	232d      	movlt	r3, #45	; 0x2d
 800bb52:	4a80      	ldr	r2, [pc, #512]	; (800bd54 <_printf_float+0x2d8>)
 800bb54:	bfb8      	it	lt
 800bb56:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bb5a:	4b7f      	ldr	r3, [pc, #508]	; (800bd58 <_printf_float+0x2dc>)
 800bb5c:	e7d3      	b.n	800bb06 <_printf_float+0x8a>
 800bb5e:	6863      	ldr	r3, [r4, #4]
 800bb60:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800bb64:	1c5a      	adds	r2, r3, #1
 800bb66:	d142      	bne.n	800bbee <_printf_float+0x172>
 800bb68:	2306      	movs	r3, #6
 800bb6a:	6063      	str	r3, [r4, #4]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	9206      	str	r2, [sp, #24]
 800bb70:	aa0e      	add	r2, sp, #56	; 0x38
 800bb72:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800bb76:	aa0d      	add	r2, sp, #52	; 0x34
 800bb78:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800bb7c:	9203      	str	r2, [sp, #12]
 800bb7e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800bb82:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800bb86:	6023      	str	r3, [r4, #0]
 800bb88:	6863      	ldr	r3, [r4, #4]
 800bb8a:	4652      	mov	r2, sl
 800bb8c:	9300      	str	r3, [sp, #0]
 800bb8e:	4628      	mov	r0, r5
 800bb90:	4643      	mov	r3, r8
 800bb92:	910b      	str	r1, [sp, #44]	; 0x2c
 800bb94:	f7ff fed6 	bl	800b944 <__cvt>
 800bb98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bb9a:	4680      	mov	r8, r0
 800bb9c:	2947      	cmp	r1, #71	; 0x47
 800bb9e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bba0:	d108      	bne.n	800bbb4 <_printf_float+0x138>
 800bba2:	1cc8      	adds	r0, r1, #3
 800bba4:	db02      	blt.n	800bbac <_printf_float+0x130>
 800bba6:	6863      	ldr	r3, [r4, #4]
 800bba8:	4299      	cmp	r1, r3
 800bbaa:	dd40      	ble.n	800bc2e <_printf_float+0x1b2>
 800bbac:	f1a9 0902 	sub.w	r9, r9, #2
 800bbb0:	fa5f f989 	uxtb.w	r9, r9
 800bbb4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bbb8:	d81f      	bhi.n	800bbfa <_printf_float+0x17e>
 800bbba:	464a      	mov	r2, r9
 800bbbc:	3901      	subs	r1, #1
 800bbbe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bbc2:	910d      	str	r1, [sp, #52]	; 0x34
 800bbc4:	f7ff ff1d 	bl	800ba02 <__exponent>
 800bbc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bbca:	4682      	mov	sl, r0
 800bbcc:	1813      	adds	r3, r2, r0
 800bbce:	2a01      	cmp	r2, #1
 800bbd0:	6123      	str	r3, [r4, #16]
 800bbd2:	dc02      	bgt.n	800bbda <_printf_float+0x15e>
 800bbd4:	6822      	ldr	r2, [r4, #0]
 800bbd6:	07d2      	lsls	r2, r2, #31
 800bbd8:	d501      	bpl.n	800bbde <_printf_float+0x162>
 800bbda:	3301      	adds	r3, #1
 800bbdc:	6123      	str	r3, [r4, #16]
 800bbde:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d09b      	beq.n	800bb1e <_printf_float+0xa2>
 800bbe6:	232d      	movs	r3, #45	; 0x2d
 800bbe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbec:	e797      	b.n	800bb1e <_printf_float+0xa2>
 800bbee:	2947      	cmp	r1, #71	; 0x47
 800bbf0:	d1bc      	bne.n	800bb6c <_printf_float+0xf0>
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d1ba      	bne.n	800bb6c <_printf_float+0xf0>
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	e7b7      	b.n	800bb6a <_printf_float+0xee>
 800bbfa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800bbfe:	d118      	bne.n	800bc32 <_printf_float+0x1b6>
 800bc00:	2900      	cmp	r1, #0
 800bc02:	6863      	ldr	r3, [r4, #4]
 800bc04:	dd0b      	ble.n	800bc1e <_printf_float+0x1a2>
 800bc06:	6121      	str	r1, [r4, #16]
 800bc08:	b913      	cbnz	r3, 800bc10 <_printf_float+0x194>
 800bc0a:	6822      	ldr	r2, [r4, #0]
 800bc0c:	07d0      	lsls	r0, r2, #31
 800bc0e:	d502      	bpl.n	800bc16 <_printf_float+0x19a>
 800bc10:	3301      	adds	r3, #1
 800bc12:	440b      	add	r3, r1
 800bc14:	6123      	str	r3, [r4, #16]
 800bc16:	f04f 0a00 	mov.w	sl, #0
 800bc1a:	65a1      	str	r1, [r4, #88]	; 0x58
 800bc1c:	e7df      	b.n	800bbde <_printf_float+0x162>
 800bc1e:	b913      	cbnz	r3, 800bc26 <_printf_float+0x1aa>
 800bc20:	6822      	ldr	r2, [r4, #0]
 800bc22:	07d2      	lsls	r2, r2, #31
 800bc24:	d501      	bpl.n	800bc2a <_printf_float+0x1ae>
 800bc26:	3302      	adds	r3, #2
 800bc28:	e7f4      	b.n	800bc14 <_printf_float+0x198>
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	e7f2      	b.n	800bc14 <_printf_float+0x198>
 800bc2e:	f04f 0967 	mov.w	r9, #103	; 0x67
 800bc32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc34:	4299      	cmp	r1, r3
 800bc36:	db05      	blt.n	800bc44 <_printf_float+0x1c8>
 800bc38:	6823      	ldr	r3, [r4, #0]
 800bc3a:	6121      	str	r1, [r4, #16]
 800bc3c:	07d8      	lsls	r0, r3, #31
 800bc3e:	d5ea      	bpl.n	800bc16 <_printf_float+0x19a>
 800bc40:	1c4b      	adds	r3, r1, #1
 800bc42:	e7e7      	b.n	800bc14 <_printf_float+0x198>
 800bc44:	2900      	cmp	r1, #0
 800bc46:	bfcc      	ite	gt
 800bc48:	2201      	movgt	r2, #1
 800bc4a:	f1c1 0202 	rsble	r2, r1, #2
 800bc4e:	4413      	add	r3, r2
 800bc50:	e7e0      	b.n	800bc14 <_printf_float+0x198>
 800bc52:	6823      	ldr	r3, [r4, #0]
 800bc54:	055a      	lsls	r2, r3, #21
 800bc56:	d407      	bmi.n	800bc68 <_printf_float+0x1ec>
 800bc58:	6923      	ldr	r3, [r4, #16]
 800bc5a:	4642      	mov	r2, r8
 800bc5c:	4631      	mov	r1, r6
 800bc5e:	4628      	mov	r0, r5
 800bc60:	47b8      	blx	r7
 800bc62:	3001      	adds	r0, #1
 800bc64:	d12b      	bne.n	800bcbe <_printf_float+0x242>
 800bc66:	e764      	b.n	800bb32 <_printf_float+0xb6>
 800bc68:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bc6c:	f240 80dd 	bls.w	800be2a <_printf_float+0x3ae>
 800bc70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bc74:	2200      	movs	r2, #0
 800bc76:	2300      	movs	r3, #0
 800bc78:	f7f4 ff10 	bl	8000a9c <__aeabi_dcmpeq>
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	d033      	beq.n	800bce8 <_printf_float+0x26c>
 800bc80:	2301      	movs	r3, #1
 800bc82:	4631      	mov	r1, r6
 800bc84:	4628      	mov	r0, r5
 800bc86:	4a35      	ldr	r2, [pc, #212]	; (800bd5c <_printf_float+0x2e0>)
 800bc88:	47b8      	blx	r7
 800bc8a:	3001      	adds	r0, #1
 800bc8c:	f43f af51 	beq.w	800bb32 <_printf_float+0xb6>
 800bc90:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bc94:	429a      	cmp	r2, r3
 800bc96:	db02      	blt.n	800bc9e <_printf_float+0x222>
 800bc98:	6823      	ldr	r3, [r4, #0]
 800bc9a:	07d8      	lsls	r0, r3, #31
 800bc9c:	d50f      	bpl.n	800bcbe <_printf_float+0x242>
 800bc9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bca2:	4631      	mov	r1, r6
 800bca4:	4628      	mov	r0, r5
 800bca6:	47b8      	blx	r7
 800bca8:	3001      	adds	r0, #1
 800bcaa:	f43f af42 	beq.w	800bb32 <_printf_float+0xb6>
 800bcae:	f04f 0800 	mov.w	r8, #0
 800bcb2:	f104 091a 	add.w	r9, r4, #26
 800bcb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bcb8:	3b01      	subs	r3, #1
 800bcba:	4543      	cmp	r3, r8
 800bcbc:	dc09      	bgt.n	800bcd2 <_printf_float+0x256>
 800bcbe:	6823      	ldr	r3, [r4, #0]
 800bcc0:	079b      	lsls	r3, r3, #30
 800bcc2:	f100 8104 	bmi.w	800bece <_printf_float+0x452>
 800bcc6:	68e0      	ldr	r0, [r4, #12]
 800bcc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bcca:	4298      	cmp	r0, r3
 800bccc:	bfb8      	it	lt
 800bcce:	4618      	movlt	r0, r3
 800bcd0:	e731      	b.n	800bb36 <_printf_float+0xba>
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	464a      	mov	r2, r9
 800bcd6:	4631      	mov	r1, r6
 800bcd8:	4628      	mov	r0, r5
 800bcda:	47b8      	blx	r7
 800bcdc:	3001      	adds	r0, #1
 800bcde:	f43f af28 	beq.w	800bb32 <_printf_float+0xb6>
 800bce2:	f108 0801 	add.w	r8, r8, #1
 800bce6:	e7e6      	b.n	800bcb6 <_printf_float+0x23a>
 800bce8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	dc38      	bgt.n	800bd60 <_printf_float+0x2e4>
 800bcee:	2301      	movs	r3, #1
 800bcf0:	4631      	mov	r1, r6
 800bcf2:	4628      	mov	r0, r5
 800bcf4:	4a19      	ldr	r2, [pc, #100]	; (800bd5c <_printf_float+0x2e0>)
 800bcf6:	47b8      	blx	r7
 800bcf8:	3001      	adds	r0, #1
 800bcfa:	f43f af1a 	beq.w	800bb32 <_printf_float+0xb6>
 800bcfe:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800bd02:	4313      	orrs	r3, r2
 800bd04:	d102      	bne.n	800bd0c <_printf_float+0x290>
 800bd06:	6823      	ldr	r3, [r4, #0]
 800bd08:	07d9      	lsls	r1, r3, #31
 800bd0a:	d5d8      	bpl.n	800bcbe <_printf_float+0x242>
 800bd0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd10:	4631      	mov	r1, r6
 800bd12:	4628      	mov	r0, r5
 800bd14:	47b8      	blx	r7
 800bd16:	3001      	adds	r0, #1
 800bd18:	f43f af0b 	beq.w	800bb32 <_printf_float+0xb6>
 800bd1c:	f04f 0900 	mov.w	r9, #0
 800bd20:	f104 0a1a 	add.w	sl, r4, #26
 800bd24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd26:	425b      	negs	r3, r3
 800bd28:	454b      	cmp	r3, r9
 800bd2a:	dc01      	bgt.n	800bd30 <_printf_float+0x2b4>
 800bd2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd2e:	e794      	b.n	800bc5a <_printf_float+0x1de>
 800bd30:	2301      	movs	r3, #1
 800bd32:	4652      	mov	r2, sl
 800bd34:	4631      	mov	r1, r6
 800bd36:	4628      	mov	r0, r5
 800bd38:	47b8      	blx	r7
 800bd3a:	3001      	adds	r0, #1
 800bd3c:	f43f aef9 	beq.w	800bb32 <_printf_float+0xb6>
 800bd40:	f109 0901 	add.w	r9, r9, #1
 800bd44:	e7ee      	b.n	800bd24 <_printf_float+0x2a8>
 800bd46:	bf00      	nop
 800bd48:	7fefffff 	.word	0x7fefffff
 800bd4c:	08010899 	.word	0x08010899
 800bd50:	0801089d 	.word	0x0801089d
 800bd54:	080108a1 	.word	0x080108a1
 800bd58:	080108a5 	.word	0x080108a5
 800bd5c:	08010ce6 	.word	0x08010ce6
 800bd60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bd64:	429a      	cmp	r2, r3
 800bd66:	bfa8      	it	ge
 800bd68:	461a      	movge	r2, r3
 800bd6a:	2a00      	cmp	r2, #0
 800bd6c:	4691      	mov	r9, r2
 800bd6e:	dc37      	bgt.n	800bde0 <_printf_float+0x364>
 800bd70:	f04f 0b00 	mov.w	fp, #0
 800bd74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd78:	f104 021a 	add.w	r2, r4, #26
 800bd7c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800bd80:	ebaa 0309 	sub.w	r3, sl, r9
 800bd84:	455b      	cmp	r3, fp
 800bd86:	dc33      	bgt.n	800bdf0 <_printf_float+0x374>
 800bd88:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	db3b      	blt.n	800be08 <_printf_float+0x38c>
 800bd90:	6823      	ldr	r3, [r4, #0]
 800bd92:	07da      	lsls	r2, r3, #31
 800bd94:	d438      	bmi.n	800be08 <_printf_float+0x38c>
 800bd96:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800bd9a:	eba2 0903 	sub.w	r9, r2, r3
 800bd9e:	eba2 020a 	sub.w	r2, r2, sl
 800bda2:	4591      	cmp	r9, r2
 800bda4:	bfa8      	it	ge
 800bda6:	4691      	movge	r9, r2
 800bda8:	f1b9 0f00 	cmp.w	r9, #0
 800bdac:	dc34      	bgt.n	800be18 <_printf_float+0x39c>
 800bdae:	f04f 0800 	mov.w	r8, #0
 800bdb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bdb6:	f104 0a1a 	add.w	sl, r4, #26
 800bdba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bdbe:	1a9b      	subs	r3, r3, r2
 800bdc0:	eba3 0309 	sub.w	r3, r3, r9
 800bdc4:	4543      	cmp	r3, r8
 800bdc6:	f77f af7a 	ble.w	800bcbe <_printf_float+0x242>
 800bdca:	2301      	movs	r3, #1
 800bdcc:	4652      	mov	r2, sl
 800bdce:	4631      	mov	r1, r6
 800bdd0:	4628      	mov	r0, r5
 800bdd2:	47b8      	blx	r7
 800bdd4:	3001      	adds	r0, #1
 800bdd6:	f43f aeac 	beq.w	800bb32 <_printf_float+0xb6>
 800bdda:	f108 0801 	add.w	r8, r8, #1
 800bdde:	e7ec      	b.n	800bdba <_printf_float+0x33e>
 800bde0:	4613      	mov	r3, r2
 800bde2:	4631      	mov	r1, r6
 800bde4:	4642      	mov	r2, r8
 800bde6:	4628      	mov	r0, r5
 800bde8:	47b8      	blx	r7
 800bdea:	3001      	adds	r0, #1
 800bdec:	d1c0      	bne.n	800bd70 <_printf_float+0x2f4>
 800bdee:	e6a0      	b.n	800bb32 <_printf_float+0xb6>
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	4631      	mov	r1, r6
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	920b      	str	r2, [sp, #44]	; 0x2c
 800bdf8:	47b8      	blx	r7
 800bdfa:	3001      	adds	r0, #1
 800bdfc:	f43f ae99 	beq.w	800bb32 <_printf_float+0xb6>
 800be00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be02:	f10b 0b01 	add.w	fp, fp, #1
 800be06:	e7b9      	b.n	800bd7c <_printf_float+0x300>
 800be08:	4631      	mov	r1, r6
 800be0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be0e:	4628      	mov	r0, r5
 800be10:	47b8      	blx	r7
 800be12:	3001      	adds	r0, #1
 800be14:	d1bf      	bne.n	800bd96 <_printf_float+0x31a>
 800be16:	e68c      	b.n	800bb32 <_printf_float+0xb6>
 800be18:	464b      	mov	r3, r9
 800be1a:	4631      	mov	r1, r6
 800be1c:	4628      	mov	r0, r5
 800be1e:	eb08 020a 	add.w	r2, r8, sl
 800be22:	47b8      	blx	r7
 800be24:	3001      	adds	r0, #1
 800be26:	d1c2      	bne.n	800bdae <_printf_float+0x332>
 800be28:	e683      	b.n	800bb32 <_printf_float+0xb6>
 800be2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be2c:	2a01      	cmp	r2, #1
 800be2e:	dc01      	bgt.n	800be34 <_printf_float+0x3b8>
 800be30:	07db      	lsls	r3, r3, #31
 800be32:	d539      	bpl.n	800bea8 <_printf_float+0x42c>
 800be34:	2301      	movs	r3, #1
 800be36:	4642      	mov	r2, r8
 800be38:	4631      	mov	r1, r6
 800be3a:	4628      	mov	r0, r5
 800be3c:	47b8      	blx	r7
 800be3e:	3001      	adds	r0, #1
 800be40:	f43f ae77 	beq.w	800bb32 <_printf_float+0xb6>
 800be44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be48:	4631      	mov	r1, r6
 800be4a:	4628      	mov	r0, r5
 800be4c:	47b8      	blx	r7
 800be4e:	3001      	adds	r0, #1
 800be50:	f43f ae6f 	beq.w	800bb32 <_printf_float+0xb6>
 800be54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be58:	2200      	movs	r2, #0
 800be5a:	2300      	movs	r3, #0
 800be5c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800be60:	f7f4 fe1c 	bl	8000a9c <__aeabi_dcmpeq>
 800be64:	b9d8      	cbnz	r0, 800be9e <_printf_float+0x422>
 800be66:	f109 33ff 	add.w	r3, r9, #4294967295
 800be6a:	f108 0201 	add.w	r2, r8, #1
 800be6e:	4631      	mov	r1, r6
 800be70:	4628      	mov	r0, r5
 800be72:	47b8      	blx	r7
 800be74:	3001      	adds	r0, #1
 800be76:	d10e      	bne.n	800be96 <_printf_float+0x41a>
 800be78:	e65b      	b.n	800bb32 <_printf_float+0xb6>
 800be7a:	2301      	movs	r3, #1
 800be7c:	464a      	mov	r2, r9
 800be7e:	4631      	mov	r1, r6
 800be80:	4628      	mov	r0, r5
 800be82:	47b8      	blx	r7
 800be84:	3001      	adds	r0, #1
 800be86:	f43f ae54 	beq.w	800bb32 <_printf_float+0xb6>
 800be8a:	f108 0801 	add.w	r8, r8, #1
 800be8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be90:	3b01      	subs	r3, #1
 800be92:	4543      	cmp	r3, r8
 800be94:	dcf1      	bgt.n	800be7a <_printf_float+0x3fe>
 800be96:	4653      	mov	r3, sl
 800be98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800be9c:	e6de      	b.n	800bc5c <_printf_float+0x1e0>
 800be9e:	f04f 0800 	mov.w	r8, #0
 800bea2:	f104 091a 	add.w	r9, r4, #26
 800bea6:	e7f2      	b.n	800be8e <_printf_float+0x412>
 800bea8:	2301      	movs	r3, #1
 800beaa:	4642      	mov	r2, r8
 800beac:	e7df      	b.n	800be6e <_printf_float+0x3f2>
 800beae:	2301      	movs	r3, #1
 800beb0:	464a      	mov	r2, r9
 800beb2:	4631      	mov	r1, r6
 800beb4:	4628      	mov	r0, r5
 800beb6:	47b8      	blx	r7
 800beb8:	3001      	adds	r0, #1
 800beba:	f43f ae3a 	beq.w	800bb32 <_printf_float+0xb6>
 800bebe:	f108 0801 	add.w	r8, r8, #1
 800bec2:	68e3      	ldr	r3, [r4, #12]
 800bec4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bec6:	1a5b      	subs	r3, r3, r1
 800bec8:	4543      	cmp	r3, r8
 800beca:	dcf0      	bgt.n	800beae <_printf_float+0x432>
 800becc:	e6fb      	b.n	800bcc6 <_printf_float+0x24a>
 800bece:	f04f 0800 	mov.w	r8, #0
 800bed2:	f104 0919 	add.w	r9, r4, #25
 800bed6:	e7f4      	b.n	800bec2 <_printf_float+0x446>

0800bed8 <_printf_common>:
 800bed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bedc:	4616      	mov	r6, r2
 800bede:	4699      	mov	r9, r3
 800bee0:	688a      	ldr	r2, [r1, #8]
 800bee2:	690b      	ldr	r3, [r1, #16]
 800bee4:	4607      	mov	r7, r0
 800bee6:	4293      	cmp	r3, r2
 800bee8:	bfb8      	it	lt
 800beea:	4613      	movlt	r3, r2
 800beec:	6033      	str	r3, [r6, #0]
 800beee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bef2:	460c      	mov	r4, r1
 800bef4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bef8:	b10a      	cbz	r2, 800befe <_printf_common+0x26>
 800befa:	3301      	adds	r3, #1
 800befc:	6033      	str	r3, [r6, #0]
 800befe:	6823      	ldr	r3, [r4, #0]
 800bf00:	0699      	lsls	r1, r3, #26
 800bf02:	bf42      	ittt	mi
 800bf04:	6833      	ldrmi	r3, [r6, #0]
 800bf06:	3302      	addmi	r3, #2
 800bf08:	6033      	strmi	r3, [r6, #0]
 800bf0a:	6825      	ldr	r5, [r4, #0]
 800bf0c:	f015 0506 	ands.w	r5, r5, #6
 800bf10:	d106      	bne.n	800bf20 <_printf_common+0x48>
 800bf12:	f104 0a19 	add.w	sl, r4, #25
 800bf16:	68e3      	ldr	r3, [r4, #12]
 800bf18:	6832      	ldr	r2, [r6, #0]
 800bf1a:	1a9b      	subs	r3, r3, r2
 800bf1c:	42ab      	cmp	r3, r5
 800bf1e:	dc2b      	bgt.n	800bf78 <_printf_common+0xa0>
 800bf20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bf24:	1e13      	subs	r3, r2, #0
 800bf26:	6822      	ldr	r2, [r4, #0]
 800bf28:	bf18      	it	ne
 800bf2a:	2301      	movne	r3, #1
 800bf2c:	0692      	lsls	r2, r2, #26
 800bf2e:	d430      	bmi.n	800bf92 <_printf_common+0xba>
 800bf30:	4649      	mov	r1, r9
 800bf32:	4638      	mov	r0, r7
 800bf34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf38:	47c0      	blx	r8
 800bf3a:	3001      	adds	r0, #1
 800bf3c:	d023      	beq.n	800bf86 <_printf_common+0xae>
 800bf3e:	6823      	ldr	r3, [r4, #0]
 800bf40:	6922      	ldr	r2, [r4, #16]
 800bf42:	f003 0306 	and.w	r3, r3, #6
 800bf46:	2b04      	cmp	r3, #4
 800bf48:	bf14      	ite	ne
 800bf4a:	2500      	movne	r5, #0
 800bf4c:	6833      	ldreq	r3, [r6, #0]
 800bf4e:	f04f 0600 	mov.w	r6, #0
 800bf52:	bf08      	it	eq
 800bf54:	68e5      	ldreq	r5, [r4, #12]
 800bf56:	f104 041a 	add.w	r4, r4, #26
 800bf5a:	bf08      	it	eq
 800bf5c:	1aed      	subeq	r5, r5, r3
 800bf5e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800bf62:	bf08      	it	eq
 800bf64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	bfc4      	itt	gt
 800bf6c:	1a9b      	subgt	r3, r3, r2
 800bf6e:	18ed      	addgt	r5, r5, r3
 800bf70:	42b5      	cmp	r5, r6
 800bf72:	d11a      	bne.n	800bfaa <_printf_common+0xd2>
 800bf74:	2000      	movs	r0, #0
 800bf76:	e008      	b.n	800bf8a <_printf_common+0xb2>
 800bf78:	2301      	movs	r3, #1
 800bf7a:	4652      	mov	r2, sl
 800bf7c:	4649      	mov	r1, r9
 800bf7e:	4638      	mov	r0, r7
 800bf80:	47c0      	blx	r8
 800bf82:	3001      	adds	r0, #1
 800bf84:	d103      	bne.n	800bf8e <_printf_common+0xb6>
 800bf86:	f04f 30ff 	mov.w	r0, #4294967295
 800bf8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf8e:	3501      	adds	r5, #1
 800bf90:	e7c1      	b.n	800bf16 <_printf_common+0x3e>
 800bf92:	2030      	movs	r0, #48	; 0x30
 800bf94:	18e1      	adds	r1, r4, r3
 800bf96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf9a:	1c5a      	adds	r2, r3, #1
 800bf9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bfa0:	4422      	add	r2, r4
 800bfa2:	3302      	adds	r3, #2
 800bfa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bfa8:	e7c2      	b.n	800bf30 <_printf_common+0x58>
 800bfaa:	2301      	movs	r3, #1
 800bfac:	4622      	mov	r2, r4
 800bfae:	4649      	mov	r1, r9
 800bfb0:	4638      	mov	r0, r7
 800bfb2:	47c0      	blx	r8
 800bfb4:	3001      	adds	r0, #1
 800bfb6:	d0e6      	beq.n	800bf86 <_printf_common+0xae>
 800bfb8:	3601      	adds	r6, #1
 800bfba:	e7d9      	b.n	800bf70 <_printf_common+0x98>

0800bfbc <_printf_i>:
 800bfbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bfc0:	7e0f      	ldrb	r7, [r1, #24]
 800bfc2:	4691      	mov	r9, r2
 800bfc4:	2f78      	cmp	r7, #120	; 0x78
 800bfc6:	4680      	mov	r8, r0
 800bfc8:	460c      	mov	r4, r1
 800bfca:	469a      	mov	sl, r3
 800bfcc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bfce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bfd2:	d807      	bhi.n	800bfe4 <_printf_i+0x28>
 800bfd4:	2f62      	cmp	r7, #98	; 0x62
 800bfd6:	d80a      	bhi.n	800bfee <_printf_i+0x32>
 800bfd8:	2f00      	cmp	r7, #0
 800bfda:	f000 80d5 	beq.w	800c188 <_printf_i+0x1cc>
 800bfde:	2f58      	cmp	r7, #88	; 0x58
 800bfe0:	f000 80c1 	beq.w	800c166 <_printf_i+0x1aa>
 800bfe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfe8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bfec:	e03a      	b.n	800c064 <_printf_i+0xa8>
 800bfee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bff2:	2b15      	cmp	r3, #21
 800bff4:	d8f6      	bhi.n	800bfe4 <_printf_i+0x28>
 800bff6:	a101      	add	r1, pc, #4	; (adr r1, 800bffc <_printf_i+0x40>)
 800bff8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bffc:	0800c055 	.word	0x0800c055
 800c000:	0800c069 	.word	0x0800c069
 800c004:	0800bfe5 	.word	0x0800bfe5
 800c008:	0800bfe5 	.word	0x0800bfe5
 800c00c:	0800bfe5 	.word	0x0800bfe5
 800c010:	0800bfe5 	.word	0x0800bfe5
 800c014:	0800c069 	.word	0x0800c069
 800c018:	0800bfe5 	.word	0x0800bfe5
 800c01c:	0800bfe5 	.word	0x0800bfe5
 800c020:	0800bfe5 	.word	0x0800bfe5
 800c024:	0800bfe5 	.word	0x0800bfe5
 800c028:	0800c16f 	.word	0x0800c16f
 800c02c:	0800c095 	.word	0x0800c095
 800c030:	0800c129 	.word	0x0800c129
 800c034:	0800bfe5 	.word	0x0800bfe5
 800c038:	0800bfe5 	.word	0x0800bfe5
 800c03c:	0800c191 	.word	0x0800c191
 800c040:	0800bfe5 	.word	0x0800bfe5
 800c044:	0800c095 	.word	0x0800c095
 800c048:	0800bfe5 	.word	0x0800bfe5
 800c04c:	0800bfe5 	.word	0x0800bfe5
 800c050:	0800c131 	.word	0x0800c131
 800c054:	682b      	ldr	r3, [r5, #0]
 800c056:	1d1a      	adds	r2, r3, #4
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	602a      	str	r2, [r5, #0]
 800c05c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c060:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c064:	2301      	movs	r3, #1
 800c066:	e0a0      	b.n	800c1aa <_printf_i+0x1ee>
 800c068:	6820      	ldr	r0, [r4, #0]
 800c06a:	682b      	ldr	r3, [r5, #0]
 800c06c:	0607      	lsls	r7, r0, #24
 800c06e:	f103 0104 	add.w	r1, r3, #4
 800c072:	6029      	str	r1, [r5, #0]
 800c074:	d501      	bpl.n	800c07a <_printf_i+0xbe>
 800c076:	681e      	ldr	r6, [r3, #0]
 800c078:	e003      	b.n	800c082 <_printf_i+0xc6>
 800c07a:	0646      	lsls	r6, r0, #25
 800c07c:	d5fb      	bpl.n	800c076 <_printf_i+0xba>
 800c07e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c082:	2e00      	cmp	r6, #0
 800c084:	da03      	bge.n	800c08e <_printf_i+0xd2>
 800c086:	232d      	movs	r3, #45	; 0x2d
 800c088:	4276      	negs	r6, r6
 800c08a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c08e:	230a      	movs	r3, #10
 800c090:	4859      	ldr	r0, [pc, #356]	; (800c1f8 <_printf_i+0x23c>)
 800c092:	e012      	b.n	800c0ba <_printf_i+0xfe>
 800c094:	682b      	ldr	r3, [r5, #0]
 800c096:	6820      	ldr	r0, [r4, #0]
 800c098:	1d19      	adds	r1, r3, #4
 800c09a:	6029      	str	r1, [r5, #0]
 800c09c:	0605      	lsls	r5, r0, #24
 800c09e:	d501      	bpl.n	800c0a4 <_printf_i+0xe8>
 800c0a0:	681e      	ldr	r6, [r3, #0]
 800c0a2:	e002      	b.n	800c0aa <_printf_i+0xee>
 800c0a4:	0641      	lsls	r1, r0, #25
 800c0a6:	d5fb      	bpl.n	800c0a0 <_printf_i+0xe4>
 800c0a8:	881e      	ldrh	r6, [r3, #0]
 800c0aa:	2f6f      	cmp	r7, #111	; 0x6f
 800c0ac:	bf0c      	ite	eq
 800c0ae:	2308      	moveq	r3, #8
 800c0b0:	230a      	movne	r3, #10
 800c0b2:	4851      	ldr	r0, [pc, #324]	; (800c1f8 <_printf_i+0x23c>)
 800c0b4:	2100      	movs	r1, #0
 800c0b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c0ba:	6865      	ldr	r5, [r4, #4]
 800c0bc:	2d00      	cmp	r5, #0
 800c0be:	bfa8      	it	ge
 800c0c0:	6821      	ldrge	r1, [r4, #0]
 800c0c2:	60a5      	str	r5, [r4, #8]
 800c0c4:	bfa4      	itt	ge
 800c0c6:	f021 0104 	bicge.w	r1, r1, #4
 800c0ca:	6021      	strge	r1, [r4, #0]
 800c0cc:	b90e      	cbnz	r6, 800c0d2 <_printf_i+0x116>
 800c0ce:	2d00      	cmp	r5, #0
 800c0d0:	d04b      	beq.n	800c16a <_printf_i+0x1ae>
 800c0d2:	4615      	mov	r5, r2
 800c0d4:	fbb6 f1f3 	udiv	r1, r6, r3
 800c0d8:	fb03 6711 	mls	r7, r3, r1, r6
 800c0dc:	5dc7      	ldrb	r7, [r0, r7]
 800c0de:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c0e2:	4637      	mov	r7, r6
 800c0e4:	42bb      	cmp	r3, r7
 800c0e6:	460e      	mov	r6, r1
 800c0e8:	d9f4      	bls.n	800c0d4 <_printf_i+0x118>
 800c0ea:	2b08      	cmp	r3, #8
 800c0ec:	d10b      	bne.n	800c106 <_printf_i+0x14a>
 800c0ee:	6823      	ldr	r3, [r4, #0]
 800c0f0:	07de      	lsls	r6, r3, #31
 800c0f2:	d508      	bpl.n	800c106 <_printf_i+0x14a>
 800c0f4:	6923      	ldr	r3, [r4, #16]
 800c0f6:	6861      	ldr	r1, [r4, #4]
 800c0f8:	4299      	cmp	r1, r3
 800c0fa:	bfde      	ittt	le
 800c0fc:	2330      	movle	r3, #48	; 0x30
 800c0fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c102:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c106:	1b52      	subs	r2, r2, r5
 800c108:	6122      	str	r2, [r4, #16]
 800c10a:	464b      	mov	r3, r9
 800c10c:	4621      	mov	r1, r4
 800c10e:	4640      	mov	r0, r8
 800c110:	f8cd a000 	str.w	sl, [sp]
 800c114:	aa03      	add	r2, sp, #12
 800c116:	f7ff fedf 	bl	800bed8 <_printf_common>
 800c11a:	3001      	adds	r0, #1
 800c11c:	d14a      	bne.n	800c1b4 <_printf_i+0x1f8>
 800c11e:	f04f 30ff 	mov.w	r0, #4294967295
 800c122:	b004      	add	sp, #16
 800c124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c128:	6823      	ldr	r3, [r4, #0]
 800c12a:	f043 0320 	orr.w	r3, r3, #32
 800c12e:	6023      	str	r3, [r4, #0]
 800c130:	2778      	movs	r7, #120	; 0x78
 800c132:	4832      	ldr	r0, [pc, #200]	; (800c1fc <_printf_i+0x240>)
 800c134:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c138:	6823      	ldr	r3, [r4, #0]
 800c13a:	6829      	ldr	r1, [r5, #0]
 800c13c:	061f      	lsls	r7, r3, #24
 800c13e:	f851 6b04 	ldr.w	r6, [r1], #4
 800c142:	d402      	bmi.n	800c14a <_printf_i+0x18e>
 800c144:	065f      	lsls	r7, r3, #25
 800c146:	bf48      	it	mi
 800c148:	b2b6      	uxthmi	r6, r6
 800c14a:	07df      	lsls	r7, r3, #31
 800c14c:	bf48      	it	mi
 800c14e:	f043 0320 	orrmi.w	r3, r3, #32
 800c152:	6029      	str	r1, [r5, #0]
 800c154:	bf48      	it	mi
 800c156:	6023      	strmi	r3, [r4, #0]
 800c158:	b91e      	cbnz	r6, 800c162 <_printf_i+0x1a6>
 800c15a:	6823      	ldr	r3, [r4, #0]
 800c15c:	f023 0320 	bic.w	r3, r3, #32
 800c160:	6023      	str	r3, [r4, #0]
 800c162:	2310      	movs	r3, #16
 800c164:	e7a6      	b.n	800c0b4 <_printf_i+0xf8>
 800c166:	4824      	ldr	r0, [pc, #144]	; (800c1f8 <_printf_i+0x23c>)
 800c168:	e7e4      	b.n	800c134 <_printf_i+0x178>
 800c16a:	4615      	mov	r5, r2
 800c16c:	e7bd      	b.n	800c0ea <_printf_i+0x12e>
 800c16e:	682b      	ldr	r3, [r5, #0]
 800c170:	6826      	ldr	r6, [r4, #0]
 800c172:	1d18      	adds	r0, r3, #4
 800c174:	6961      	ldr	r1, [r4, #20]
 800c176:	6028      	str	r0, [r5, #0]
 800c178:	0635      	lsls	r5, r6, #24
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	d501      	bpl.n	800c182 <_printf_i+0x1c6>
 800c17e:	6019      	str	r1, [r3, #0]
 800c180:	e002      	b.n	800c188 <_printf_i+0x1cc>
 800c182:	0670      	lsls	r0, r6, #25
 800c184:	d5fb      	bpl.n	800c17e <_printf_i+0x1c2>
 800c186:	8019      	strh	r1, [r3, #0]
 800c188:	2300      	movs	r3, #0
 800c18a:	4615      	mov	r5, r2
 800c18c:	6123      	str	r3, [r4, #16]
 800c18e:	e7bc      	b.n	800c10a <_printf_i+0x14e>
 800c190:	682b      	ldr	r3, [r5, #0]
 800c192:	2100      	movs	r1, #0
 800c194:	1d1a      	adds	r2, r3, #4
 800c196:	602a      	str	r2, [r5, #0]
 800c198:	681d      	ldr	r5, [r3, #0]
 800c19a:	6862      	ldr	r2, [r4, #4]
 800c19c:	4628      	mov	r0, r5
 800c19e:	f001 f836 	bl	800d20e <memchr>
 800c1a2:	b108      	cbz	r0, 800c1a8 <_printf_i+0x1ec>
 800c1a4:	1b40      	subs	r0, r0, r5
 800c1a6:	6060      	str	r0, [r4, #4]
 800c1a8:	6863      	ldr	r3, [r4, #4]
 800c1aa:	6123      	str	r3, [r4, #16]
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1b2:	e7aa      	b.n	800c10a <_printf_i+0x14e>
 800c1b4:	462a      	mov	r2, r5
 800c1b6:	4649      	mov	r1, r9
 800c1b8:	4640      	mov	r0, r8
 800c1ba:	6923      	ldr	r3, [r4, #16]
 800c1bc:	47d0      	blx	sl
 800c1be:	3001      	adds	r0, #1
 800c1c0:	d0ad      	beq.n	800c11e <_printf_i+0x162>
 800c1c2:	6823      	ldr	r3, [r4, #0]
 800c1c4:	079b      	lsls	r3, r3, #30
 800c1c6:	d413      	bmi.n	800c1f0 <_printf_i+0x234>
 800c1c8:	68e0      	ldr	r0, [r4, #12]
 800c1ca:	9b03      	ldr	r3, [sp, #12]
 800c1cc:	4298      	cmp	r0, r3
 800c1ce:	bfb8      	it	lt
 800c1d0:	4618      	movlt	r0, r3
 800c1d2:	e7a6      	b.n	800c122 <_printf_i+0x166>
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	4632      	mov	r2, r6
 800c1d8:	4649      	mov	r1, r9
 800c1da:	4640      	mov	r0, r8
 800c1dc:	47d0      	blx	sl
 800c1de:	3001      	adds	r0, #1
 800c1e0:	d09d      	beq.n	800c11e <_printf_i+0x162>
 800c1e2:	3501      	adds	r5, #1
 800c1e4:	68e3      	ldr	r3, [r4, #12]
 800c1e6:	9903      	ldr	r1, [sp, #12]
 800c1e8:	1a5b      	subs	r3, r3, r1
 800c1ea:	42ab      	cmp	r3, r5
 800c1ec:	dcf2      	bgt.n	800c1d4 <_printf_i+0x218>
 800c1ee:	e7eb      	b.n	800c1c8 <_printf_i+0x20c>
 800c1f0:	2500      	movs	r5, #0
 800c1f2:	f104 0619 	add.w	r6, r4, #25
 800c1f6:	e7f5      	b.n	800c1e4 <_printf_i+0x228>
 800c1f8:	080108a9 	.word	0x080108a9
 800c1fc:	080108ba 	.word	0x080108ba

0800c200 <std>:
 800c200:	2300      	movs	r3, #0
 800c202:	b510      	push	{r4, lr}
 800c204:	4604      	mov	r4, r0
 800c206:	e9c0 3300 	strd	r3, r3, [r0]
 800c20a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c20e:	6083      	str	r3, [r0, #8]
 800c210:	8181      	strh	r1, [r0, #12]
 800c212:	6643      	str	r3, [r0, #100]	; 0x64
 800c214:	81c2      	strh	r2, [r0, #14]
 800c216:	6183      	str	r3, [r0, #24]
 800c218:	4619      	mov	r1, r3
 800c21a:	2208      	movs	r2, #8
 800c21c:	305c      	adds	r0, #92	; 0x5c
 800c21e:	f000 f916 	bl	800c44e <memset>
 800c222:	4b0d      	ldr	r3, [pc, #52]	; (800c258 <std+0x58>)
 800c224:	6224      	str	r4, [r4, #32]
 800c226:	6263      	str	r3, [r4, #36]	; 0x24
 800c228:	4b0c      	ldr	r3, [pc, #48]	; (800c25c <std+0x5c>)
 800c22a:	62a3      	str	r3, [r4, #40]	; 0x28
 800c22c:	4b0c      	ldr	r3, [pc, #48]	; (800c260 <std+0x60>)
 800c22e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c230:	4b0c      	ldr	r3, [pc, #48]	; (800c264 <std+0x64>)
 800c232:	6323      	str	r3, [r4, #48]	; 0x30
 800c234:	4b0c      	ldr	r3, [pc, #48]	; (800c268 <std+0x68>)
 800c236:	429c      	cmp	r4, r3
 800c238:	d006      	beq.n	800c248 <std+0x48>
 800c23a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c23e:	4294      	cmp	r4, r2
 800c240:	d002      	beq.n	800c248 <std+0x48>
 800c242:	33d0      	adds	r3, #208	; 0xd0
 800c244:	429c      	cmp	r4, r3
 800c246:	d105      	bne.n	800c254 <std+0x54>
 800c248:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c24c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c250:	f000 bfd0 	b.w	800d1f4 <__retarget_lock_init_recursive>
 800c254:	bd10      	pop	{r4, pc}
 800c256:	bf00      	nop
 800c258:	0800c3c5 	.word	0x0800c3c5
 800c25c:	0800c3eb 	.word	0x0800c3eb
 800c260:	0800c423 	.word	0x0800c423
 800c264:	0800c447 	.word	0x0800c447
 800c268:	20003368 	.word	0x20003368

0800c26c <stdio_exit_handler>:
 800c26c:	4a02      	ldr	r2, [pc, #8]	; (800c278 <stdio_exit_handler+0xc>)
 800c26e:	4903      	ldr	r1, [pc, #12]	; (800c27c <stdio_exit_handler+0x10>)
 800c270:	4803      	ldr	r0, [pc, #12]	; (800c280 <stdio_exit_handler+0x14>)
 800c272:	f000 b869 	b.w	800c348 <_fwalk_sglue>
 800c276:	bf00      	nop
 800c278:	20000014 	.word	0x20000014
 800c27c:	0800f595 	.word	0x0800f595
 800c280:	20000194 	.word	0x20000194

0800c284 <cleanup_stdio>:
 800c284:	6841      	ldr	r1, [r0, #4]
 800c286:	4b0c      	ldr	r3, [pc, #48]	; (800c2b8 <cleanup_stdio+0x34>)
 800c288:	b510      	push	{r4, lr}
 800c28a:	4299      	cmp	r1, r3
 800c28c:	4604      	mov	r4, r0
 800c28e:	d001      	beq.n	800c294 <cleanup_stdio+0x10>
 800c290:	f003 f980 	bl	800f594 <_fflush_r>
 800c294:	68a1      	ldr	r1, [r4, #8]
 800c296:	4b09      	ldr	r3, [pc, #36]	; (800c2bc <cleanup_stdio+0x38>)
 800c298:	4299      	cmp	r1, r3
 800c29a:	d002      	beq.n	800c2a2 <cleanup_stdio+0x1e>
 800c29c:	4620      	mov	r0, r4
 800c29e:	f003 f979 	bl	800f594 <_fflush_r>
 800c2a2:	68e1      	ldr	r1, [r4, #12]
 800c2a4:	4b06      	ldr	r3, [pc, #24]	; (800c2c0 <cleanup_stdio+0x3c>)
 800c2a6:	4299      	cmp	r1, r3
 800c2a8:	d004      	beq.n	800c2b4 <cleanup_stdio+0x30>
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2b0:	f003 b970 	b.w	800f594 <_fflush_r>
 800c2b4:	bd10      	pop	{r4, pc}
 800c2b6:	bf00      	nop
 800c2b8:	20003368 	.word	0x20003368
 800c2bc:	200033d0 	.word	0x200033d0
 800c2c0:	20003438 	.word	0x20003438

0800c2c4 <global_stdio_init.part.0>:
 800c2c4:	b510      	push	{r4, lr}
 800c2c6:	4b0b      	ldr	r3, [pc, #44]	; (800c2f4 <global_stdio_init.part.0+0x30>)
 800c2c8:	4c0b      	ldr	r4, [pc, #44]	; (800c2f8 <global_stdio_init.part.0+0x34>)
 800c2ca:	4a0c      	ldr	r2, [pc, #48]	; (800c2fc <global_stdio_init.part.0+0x38>)
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	601a      	str	r2, [r3, #0]
 800c2d0:	2104      	movs	r1, #4
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	f7ff ff94 	bl	800c200 <std>
 800c2d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c2dc:	2201      	movs	r2, #1
 800c2de:	2109      	movs	r1, #9
 800c2e0:	f7ff ff8e 	bl	800c200 <std>
 800c2e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c2e8:	2202      	movs	r2, #2
 800c2ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2ee:	2112      	movs	r1, #18
 800c2f0:	f7ff bf86 	b.w	800c200 <std>
 800c2f4:	200034a0 	.word	0x200034a0
 800c2f8:	20003368 	.word	0x20003368
 800c2fc:	0800c26d 	.word	0x0800c26d

0800c300 <__sfp_lock_acquire>:
 800c300:	4801      	ldr	r0, [pc, #4]	; (800c308 <__sfp_lock_acquire+0x8>)
 800c302:	f000 bf79 	b.w	800d1f8 <__retarget_lock_acquire_recursive>
 800c306:	bf00      	nop
 800c308:	200034ce 	.word	0x200034ce

0800c30c <__sfp_lock_release>:
 800c30c:	4801      	ldr	r0, [pc, #4]	; (800c314 <__sfp_lock_release+0x8>)
 800c30e:	f000 bf75 	b.w	800d1fc <__retarget_lock_release_recursive>
 800c312:	bf00      	nop
 800c314:	200034ce 	.word	0x200034ce

0800c318 <__sinit>:
 800c318:	b510      	push	{r4, lr}
 800c31a:	4604      	mov	r4, r0
 800c31c:	f7ff fff0 	bl	800c300 <__sfp_lock_acquire>
 800c320:	6a23      	ldr	r3, [r4, #32]
 800c322:	b11b      	cbz	r3, 800c32c <__sinit+0x14>
 800c324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c328:	f7ff bff0 	b.w	800c30c <__sfp_lock_release>
 800c32c:	4b04      	ldr	r3, [pc, #16]	; (800c340 <__sinit+0x28>)
 800c32e:	6223      	str	r3, [r4, #32]
 800c330:	4b04      	ldr	r3, [pc, #16]	; (800c344 <__sinit+0x2c>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d1f5      	bne.n	800c324 <__sinit+0xc>
 800c338:	f7ff ffc4 	bl	800c2c4 <global_stdio_init.part.0>
 800c33c:	e7f2      	b.n	800c324 <__sinit+0xc>
 800c33e:	bf00      	nop
 800c340:	0800c285 	.word	0x0800c285
 800c344:	200034a0 	.word	0x200034a0

0800c348 <_fwalk_sglue>:
 800c348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c34c:	4607      	mov	r7, r0
 800c34e:	4688      	mov	r8, r1
 800c350:	4614      	mov	r4, r2
 800c352:	2600      	movs	r6, #0
 800c354:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c358:	f1b9 0901 	subs.w	r9, r9, #1
 800c35c:	d505      	bpl.n	800c36a <_fwalk_sglue+0x22>
 800c35e:	6824      	ldr	r4, [r4, #0]
 800c360:	2c00      	cmp	r4, #0
 800c362:	d1f7      	bne.n	800c354 <_fwalk_sglue+0xc>
 800c364:	4630      	mov	r0, r6
 800c366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c36a:	89ab      	ldrh	r3, [r5, #12]
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d907      	bls.n	800c380 <_fwalk_sglue+0x38>
 800c370:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c374:	3301      	adds	r3, #1
 800c376:	d003      	beq.n	800c380 <_fwalk_sglue+0x38>
 800c378:	4629      	mov	r1, r5
 800c37a:	4638      	mov	r0, r7
 800c37c:	47c0      	blx	r8
 800c37e:	4306      	orrs	r6, r0
 800c380:	3568      	adds	r5, #104	; 0x68
 800c382:	e7e9      	b.n	800c358 <_fwalk_sglue+0x10>

0800c384 <siprintf>:
 800c384:	b40e      	push	{r1, r2, r3}
 800c386:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c38a:	b500      	push	{lr}
 800c38c:	b09c      	sub	sp, #112	; 0x70
 800c38e:	ab1d      	add	r3, sp, #116	; 0x74
 800c390:	9002      	str	r0, [sp, #8]
 800c392:	9006      	str	r0, [sp, #24]
 800c394:	9107      	str	r1, [sp, #28]
 800c396:	9104      	str	r1, [sp, #16]
 800c398:	4808      	ldr	r0, [pc, #32]	; (800c3bc <siprintf+0x38>)
 800c39a:	4909      	ldr	r1, [pc, #36]	; (800c3c0 <siprintf+0x3c>)
 800c39c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3a0:	9105      	str	r1, [sp, #20]
 800c3a2:	6800      	ldr	r0, [r0, #0]
 800c3a4:	a902      	add	r1, sp, #8
 800c3a6:	9301      	str	r3, [sp, #4]
 800c3a8:	f002 ff74 	bl	800f294 <_svfiprintf_r>
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	9b02      	ldr	r3, [sp, #8]
 800c3b0:	701a      	strb	r2, [r3, #0]
 800c3b2:	b01c      	add	sp, #112	; 0x70
 800c3b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3b8:	b003      	add	sp, #12
 800c3ba:	4770      	bx	lr
 800c3bc:	200001e0 	.word	0x200001e0
 800c3c0:	ffff0208 	.word	0xffff0208

0800c3c4 <__sread>:
 800c3c4:	b510      	push	{r4, lr}
 800c3c6:	460c      	mov	r4, r1
 800c3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3cc:	f000 feb4 	bl	800d138 <_read_r>
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	bfab      	itete	ge
 800c3d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c3d6:	89a3      	ldrhlt	r3, [r4, #12]
 800c3d8:	181b      	addge	r3, r3, r0
 800c3da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c3de:	bfac      	ite	ge
 800c3e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c3e2:	81a3      	strhlt	r3, [r4, #12]
 800c3e4:	bd10      	pop	{r4, pc}

0800c3e6 <__seofread>:
 800c3e6:	2000      	movs	r0, #0
 800c3e8:	4770      	bx	lr

0800c3ea <__swrite>:
 800c3ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ee:	461f      	mov	r7, r3
 800c3f0:	898b      	ldrh	r3, [r1, #12]
 800c3f2:	4605      	mov	r5, r0
 800c3f4:	05db      	lsls	r3, r3, #23
 800c3f6:	460c      	mov	r4, r1
 800c3f8:	4616      	mov	r6, r2
 800c3fa:	d505      	bpl.n	800c408 <__swrite+0x1e>
 800c3fc:	2302      	movs	r3, #2
 800c3fe:	2200      	movs	r2, #0
 800c400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c404:	f000 fe86 	bl	800d114 <_lseek_r>
 800c408:	89a3      	ldrh	r3, [r4, #12]
 800c40a:	4632      	mov	r2, r6
 800c40c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c410:	81a3      	strh	r3, [r4, #12]
 800c412:	4628      	mov	r0, r5
 800c414:	463b      	mov	r3, r7
 800c416:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c41a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c41e:	f000 bead 	b.w	800d17c <_write_r>

0800c422 <__sseek>:
 800c422:	b510      	push	{r4, lr}
 800c424:	460c      	mov	r4, r1
 800c426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c42a:	f000 fe73 	bl	800d114 <_lseek_r>
 800c42e:	1c43      	adds	r3, r0, #1
 800c430:	89a3      	ldrh	r3, [r4, #12]
 800c432:	bf15      	itete	ne
 800c434:	6560      	strne	r0, [r4, #84]	; 0x54
 800c436:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c43a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c43e:	81a3      	strheq	r3, [r4, #12]
 800c440:	bf18      	it	ne
 800c442:	81a3      	strhne	r3, [r4, #12]
 800c444:	bd10      	pop	{r4, pc}

0800c446 <__sclose>:
 800c446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c44a:	f000 bdfd 	b.w	800d048 <_close_r>

0800c44e <memset>:
 800c44e:	4603      	mov	r3, r0
 800c450:	4402      	add	r2, r0
 800c452:	4293      	cmp	r3, r2
 800c454:	d100      	bne.n	800c458 <memset+0xa>
 800c456:	4770      	bx	lr
 800c458:	f803 1b01 	strb.w	r1, [r3], #1
 800c45c:	e7f9      	b.n	800c452 <memset+0x4>

0800c45e <strchr>:
 800c45e:	4603      	mov	r3, r0
 800c460:	b2c9      	uxtb	r1, r1
 800c462:	4618      	mov	r0, r3
 800c464:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c468:	b112      	cbz	r2, 800c470 <strchr+0x12>
 800c46a:	428a      	cmp	r2, r1
 800c46c:	d1f9      	bne.n	800c462 <strchr+0x4>
 800c46e:	4770      	bx	lr
 800c470:	2900      	cmp	r1, #0
 800c472:	bf18      	it	ne
 800c474:	2000      	movne	r0, #0
 800c476:	4770      	bx	lr

0800c478 <strncmp>:
 800c478:	b510      	push	{r4, lr}
 800c47a:	b16a      	cbz	r2, 800c498 <strncmp+0x20>
 800c47c:	3901      	subs	r1, #1
 800c47e:	1884      	adds	r4, r0, r2
 800c480:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c484:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c488:	429a      	cmp	r2, r3
 800c48a:	d103      	bne.n	800c494 <strncmp+0x1c>
 800c48c:	42a0      	cmp	r0, r4
 800c48e:	d001      	beq.n	800c494 <strncmp+0x1c>
 800c490:	2a00      	cmp	r2, #0
 800c492:	d1f5      	bne.n	800c480 <strncmp+0x8>
 800c494:	1ad0      	subs	r0, r2, r3
 800c496:	bd10      	pop	{r4, pc}
 800c498:	4610      	mov	r0, r2
 800c49a:	e7fc      	b.n	800c496 <strncmp+0x1e>

0800c49c <strncpy>:
 800c49c:	4603      	mov	r3, r0
 800c49e:	b510      	push	{r4, lr}
 800c4a0:	3901      	subs	r1, #1
 800c4a2:	b132      	cbz	r2, 800c4b2 <strncpy+0x16>
 800c4a4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c4a8:	3a01      	subs	r2, #1
 800c4aa:	f803 4b01 	strb.w	r4, [r3], #1
 800c4ae:	2c00      	cmp	r4, #0
 800c4b0:	d1f7      	bne.n	800c4a2 <strncpy+0x6>
 800c4b2:	2100      	movs	r1, #0
 800c4b4:	441a      	add	r2, r3
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d100      	bne.n	800c4bc <strncpy+0x20>
 800c4ba:	bd10      	pop	{r4, pc}
 800c4bc:	f803 1b01 	strb.w	r1, [r3], #1
 800c4c0:	e7f9      	b.n	800c4b6 <strncpy+0x1a>
	...

0800c4c4 <strtok>:
 800c4c4:	4b16      	ldr	r3, [pc, #88]	; (800c520 <strtok+0x5c>)
 800c4c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4ca:	681f      	ldr	r7, [r3, #0]
 800c4cc:	4605      	mov	r5, r0
 800c4ce:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800c4d0:	460e      	mov	r6, r1
 800c4d2:	b9ec      	cbnz	r4, 800c510 <strtok+0x4c>
 800c4d4:	2050      	movs	r0, #80	; 0x50
 800c4d6:	f7fe fa81 	bl	800a9dc <malloc>
 800c4da:	4602      	mov	r2, r0
 800c4dc:	6478      	str	r0, [r7, #68]	; 0x44
 800c4de:	b920      	cbnz	r0, 800c4ea <strtok+0x26>
 800c4e0:	215b      	movs	r1, #91	; 0x5b
 800c4e2:	4b10      	ldr	r3, [pc, #64]	; (800c524 <strtok+0x60>)
 800c4e4:	4810      	ldr	r0, [pc, #64]	; (800c528 <strtok+0x64>)
 800c4e6:	f000 feb9 	bl	800d25c <__assert_func>
 800c4ea:	e9c0 4400 	strd	r4, r4, [r0]
 800c4ee:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c4f2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c4f6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c4fa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c4fe:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c502:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c506:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c50a:	6184      	str	r4, [r0, #24]
 800c50c:	7704      	strb	r4, [r0, #28]
 800c50e:	6244      	str	r4, [r0, #36]	; 0x24
 800c510:	4631      	mov	r1, r6
 800c512:	4628      	mov	r0, r5
 800c514:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c516:	2301      	movs	r3, #1
 800c518:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c51c:	f000 b806 	b.w	800c52c <__strtok_r>
 800c520:	200001e0 	.word	0x200001e0
 800c524:	080108cb 	.word	0x080108cb
 800c528:	080108e2 	.word	0x080108e2

0800c52c <__strtok_r>:
 800c52c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c52e:	b908      	cbnz	r0, 800c534 <__strtok_r+0x8>
 800c530:	6810      	ldr	r0, [r2, #0]
 800c532:	b188      	cbz	r0, 800c558 <__strtok_r+0x2c>
 800c534:	4604      	mov	r4, r0
 800c536:	460f      	mov	r7, r1
 800c538:	4620      	mov	r0, r4
 800c53a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c53e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c542:	b91e      	cbnz	r6, 800c54c <__strtok_r+0x20>
 800c544:	b965      	cbnz	r5, 800c560 <__strtok_r+0x34>
 800c546:	4628      	mov	r0, r5
 800c548:	6015      	str	r5, [r2, #0]
 800c54a:	e005      	b.n	800c558 <__strtok_r+0x2c>
 800c54c:	42b5      	cmp	r5, r6
 800c54e:	d1f6      	bne.n	800c53e <__strtok_r+0x12>
 800c550:	2b00      	cmp	r3, #0
 800c552:	d1f0      	bne.n	800c536 <__strtok_r+0xa>
 800c554:	6014      	str	r4, [r2, #0]
 800c556:	7003      	strb	r3, [r0, #0]
 800c558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c55a:	461c      	mov	r4, r3
 800c55c:	e00c      	b.n	800c578 <__strtok_r+0x4c>
 800c55e:	b915      	cbnz	r5, 800c566 <__strtok_r+0x3a>
 800c560:	460e      	mov	r6, r1
 800c562:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c566:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c56a:	42ab      	cmp	r3, r5
 800c56c:	d1f7      	bne.n	800c55e <__strtok_r+0x32>
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d0f3      	beq.n	800c55a <__strtok_r+0x2e>
 800c572:	2300      	movs	r3, #0
 800c574:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c578:	6014      	str	r4, [r2, #0]
 800c57a:	e7ed      	b.n	800c558 <__strtok_r+0x2c>

0800c57c <strstr>:
 800c57c:	780a      	ldrb	r2, [r1, #0]
 800c57e:	b570      	push	{r4, r5, r6, lr}
 800c580:	b96a      	cbnz	r2, 800c59e <strstr+0x22>
 800c582:	bd70      	pop	{r4, r5, r6, pc}
 800c584:	429a      	cmp	r2, r3
 800c586:	d109      	bne.n	800c59c <strstr+0x20>
 800c588:	460c      	mov	r4, r1
 800c58a:	4605      	mov	r5, r0
 800c58c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c590:	2b00      	cmp	r3, #0
 800c592:	d0f6      	beq.n	800c582 <strstr+0x6>
 800c594:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c598:	429e      	cmp	r6, r3
 800c59a:	d0f7      	beq.n	800c58c <strstr+0x10>
 800c59c:	3001      	adds	r0, #1
 800c59e:	7803      	ldrb	r3, [r0, #0]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d1ef      	bne.n	800c584 <strstr+0x8>
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	e7ec      	b.n	800c582 <strstr+0x6>

0800c5a8 <validate_structure>:
 800c5a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5aa:	6801      	ldr	r1, [r0, #0]
 800c5ac:	4604      	mov	r4, r0
 800c5ae:	293b      	cmp	r1, #59	; 0x3b
 800c5b0:	d911      	bls.n	800c5d6 <validate_structure+0x2e>
 800c5b2:	223c      	movs	r2, #60	; 0x3c
 800c5b4:	4668      	mov	r0, sp
 800c5b6:	f000 fe6f 	bl	800d298 <div>
 800c5ba:	9a01      	ldr	r2, [sp, #4]
 800c5bc:	6863      	ldr	r3, [r4, #4]
 800c5be:	9900      	ldr	r1, [sp, #0]
 800c5c0:	2a00      	cmp	r2, #0
 800c5c2:	440b      	add	r3, r1
 800c5c4:	6063      	str	r3, [r4, #4]
 800c5c6:	bfbb      	ittet	lt
 800c5c8:	323c      	addlt	r2, #60	; 0x3c
 800c5ca:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c5ce:	6022      	strge	r2, [r4, #0]
 800c5d0:	6022      	strlt	r2, [r4, #0]
 800c5d2:	bfb8      	it	lt
 800c5d4:	6063      	strlt	r3, [r4, #4]
 800c5d6:	6861      	ldr	r1, [r4, #4]
 800c5d8:	293b      	cmp	r1, #59	; 0x3b
 800c5da:	d911      	bls.n	800c600 <validate_structure+0x58>
 800c5dc:	223c      	movs	r2, #60	; 0x3c
 800c5de:	4668      	mov	r0, sp
 800c5e0:	f000 fe5a 	bl	800d298 <div>
 800c5e4:	9a01      	ldr	r2, [sp, #4]
 800c5e6:	68a3      	ldr	r3, [r4, #8]
 800c5e8:	9900      	ldr	r1, [sp, #0]
 800c5ea:	2a00      	cmp	r2, #0
 800c5ec:	440b      	add	r3, r1
 800c5ee:	60a3      	str	r3, [r4, #8]
 800c5f0:	bfbb      	ittet	lt
 800c5f2:	323c      	addlt	r2, #60	; 0x3c
 800c5f4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c5f8:	6062      	strge	r2, [r4, #4]
 800c5fa:	6062      	strlt	r2, [r4, #4]
 800c5fc:	bfb8      	it	lt
 800c5fe:	60a3      	strlt	r3, [r4, #8]
 800c600:	68a1      	ldr	r1, [r4, #8]
 800c602:	2917      	cmp	r1, #23
 800c604:	d911      	bls.n	800c62a <validate_structure+0x82>
 800c606:	2218      	movs	r2, #24
 800c608:	4668      	mov	r0, sp
 800c60a:	f000 fe45 	bl	800d298 <div>
 800c60e:	9a01      	ldr	r2, [sp, #4]
 800c610:	68e3      	ldr	r3, [r4, #12]
 800c612:	9900      	ldr	r1, [sp, #0]
 800c614:	2a00      	cmp	r2, #0
 800c616:	440b      	add	r3, r1
 800c618:	60e3      	str	r3, [r4, #12]
 800c61a:	bfbb      	ittet	lt
 800c61c:	3218      	addlt	r2, #24
 800c61e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c622:	60a2      	strge	r2, [r4, #8]
 800c624:	60a2      	strlt	r2, [r4, #8]
 800c626:	bfb8      	it	lt
 800c628:	60e3      	strlt	r3, [r4, #12]
 800c62a:	6921      	ldr	r1, [r4, #16]
 800c62c:	290b      	cmp	r1, #11
 800c62e:	d911      	bls.n	800c654 <validate_structure+0xac>
 800c630:	220c      	movs	r2, #12
 800c632:	4668      	mov	r0, sp
 800c634:	f000 fe30 	bl	800d298 <div>
 800c638:	9a01      	ldr	r2, [sp, #4]
 800c63a:	6963      	ldr	r3, [r4, #20]
 800c63c:	9900      	ldr	r1, [sp, #0]
 800c63e:	2a00      	cmp	r2, #0
 800c640:	440b      	add	r3, r1
 800c642:	6163      	str	r3, [r4, #20]
 800c644:	bfbb      	ittet	lt
 800c646:	320c      	addlt	r2, #12
 800c648:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c64c:	6122      	strge	r2, [r4, #16]
 800c64e:	6122      	strlt	r2, [r4, #16]
 800c650:	bfb8      	it	lt
 800c652:	6163      	strlt	r3, [r4, #20]
 800c654:	6963      	ldr	r3, [r4, #20]
 800c656:	079a      	lsls	r2, r3, #30
 800c658:	d11e      	bne.n	800c698 <validate_structure+0xf0>
 800c65a:	2164      	movs	r1, #100	; 0x64
 800c65c:	fb93 f2f1 	sdiv	r2, r3, r1
 800c660:	fb01 3212 	mls	r2, r1, r2, r3
 800c664:	b9d2      	cbnz	r2, 800c69c <validate_structure+0xf4>
 800c666:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c66a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800c66e:	fb93 f1f2 	sdiv	r1, r3, r2
 800c672:	fb02 3311 	mls	r3, r2, r1, r3
 800c676:	2b00      	cmp	r3, #0
 800c678:	bf14      	ite	ne
 800c67a:	231c      	movne	r3, #28
 800c67c:	231d      	moveq	r3, #29
 800c67e:	68e2      	ldr	r2, [r4, #12]
 800c680:	2a00      	cmp	r2, #0
 800c682:	dc0d      	bgt.n	800c6a0 <validate_structure+0xf8>
 800c684:	250b      	movs	r5, #11
 800c686:	2164      	movs	r1, #100	; 0x64
 800c688:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c68c:	4e30      	ldr	r6, [pc, #192]	; (800c750 <validate_structure+0x1a8>)
 800c68e:	68e7      	ldr	r7, [r4, #12]
 800c690:	2f00      	cmp	r7, #0
 800c692:	dd31      	ble.n	800c6f8 <validate_structure+0x150>
 800c694:	b003      	add	sp, #12
 800c696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c698:	231c      	movs	r3, #28
 800c69a:	e7f0      	b.n	800c67e <validate_structure+0xd6>
 800c69c:	231d      	movs	r3, #29
 800c69e:	e7ee      	b.n	800c67e <validate_structure+0xd6>
 800c6a0:	2700      	movs	r7, #0
 800c6a2:	2064      	movs	r0, #100	; 0x64
 800c6a4:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800c6a8:	4e29      	ldr	r6, [pc, #164]	; (800c750 <validate_structure+0x1a8>)
 800c6aa:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800c6ae:	2a01      	cmp	r2, #1
 800c6b0:	bf0c      	ite	eq
 800c6b2:	469c      	moveq	ip, r3
 800c6b4:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 800c6b8:	4561      	cmp	r1, ip
 800c6ba:	ddeb      	ble.n	800c694 <validate_structure+0xec>
 800c6bc:	3201      	adds	r2, #1
 800c6be:	eba1 010c 	sub.w	r1, r1, ip
 800c6c2:	2a0c      	cmp	r2, #12
 800c6c4:	60e1      	str	r1, [r4, #12]
 800c6c6:	6122      	str	r2, [r4, #16]
 800c6c8:	d1ef      	bne.n	800c6aa <validate_structure+0x102>
 800c6ca:	6963      	ldr	r3, [r4, #20]
 800c6cc:	1c5a      	adds	r2, r3, #1
 800c6ce:	0791      	lsls	r1, r2, #30
 800c6d0:	e9c4 7204 	strd	r7, r2, [r4, #16]
 800c6d4:	d138      	bne.n	800c748 <validate_structure+0x1a0>
 800c6d6:	fb92 f1f0 	sdiv	r1, r2, r0
 800c6da:	fb00 2211 	mls	r2, r0, r1, r2
 800c6de:	2a00      	cmp	r2, #0
 800c6e0:	d134      	bne.n	800c74c <validate_structure+0x1a4>
 800c6e2:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800c6e6:	fb93 f2f5 	sdiv	r2, r3, r5
 800c6ea:	fb05 3312 	mls	r3, r5, r2, r3
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	bf14      	ite	ne
 800c6f2:	231c      	movne	r3, #28
 800c6f4:	231d      	moveq	r3, #29
 800c6f6:	e7d8      	b.n	800c6aa <validate_structure+0x102>
 800c6f8:	6922      	ldr	r2, [r4, #16]
 800c6fa:	3a01      	subs	r2, #1
 800c6fc:	6122      	str	r2, [r4, #16]
 800c6fe:	3201      	adds	r2, #1
 800c700:	d115      	bne.n	800c72e <validate_structure+0x186>
 800c702:	6963      	ldr	r3, [r4, #20]
 800c704:	1e5a      	subs	r2, r3, #1
 800c706:	f012 0f03 	tst.w	r2, #3
 800c70a:	e9c4 5204 	strd	r5, r2, [r4, #16]
 800c70e:	d117      	bne.n	800c740 <validate_structure+0x198>
 800c710:	fb92 fcf1 	sdiv	ip, r2, r1
 800c714:	fb01 221c 	mls	r2, r1, ip, r2
 800c718:	b9a2      	cbnz	r2, 800c744 <validate_structure+0x19c>
 800c71a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800c71e:	fb93 f2f0 	sdiv	r2, r3, r0
 800c722:	fb00 3312 	mls	r3, r0, r2, r3
 800c726:	2b00      	cmp	r3, #0
 800c728:	bf14      	ite	ne
 800c72a:	231c      	movne	r3, #28
 800c72c:	231d      	moveq	r3, #29
 800c72e:	6922      	ldr	r2, [r4, #16]
 800c730:	2a01      	cmp	r2, #1
 800c732:	bf0c      	ite	eq
 800c734:	461a      	moveq	r2, r3
 800c736:	f856 2022 	ldrne.w	r2, [r6, r2, lsl #2]
 800c73a:	443a      	add	r2, r7
 800c73c:	60e2      	str	r2, [r4, #12]
 800c73e:	e7a6      	b.n	800c68e <validate_structure+0xe6>
 800c740:	231c      	movs	r3, #28
 800c742:	e7f4      	b.n	800c72e <validate_structure+0x186>
 800c744:	231d      	movs	r3, #29
 800c746:	e7f2      	b.n	800c72e <validate_structure+0x186>
 800c748:	231c      	movs	r3, #28
 800c74a:	e7ae      	b.n	800c6aa <validate_structure+0x102>
 800c74c:	231d      	movs	r3, #29
 800c74e:	e7ac      	b.n	800c6aa <validate_structure+0x102>
 800c750:	0801093c 	.word	0x0801093c

0800c754 <mktime>:
 800c754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c758:	b085      	sub	sp, #20
 800c75a:	4607      	mov	r7, r0
 800c75c:	f002 ff98 	bl	800f690 <__gettzinfo>
 800c760:	4681      	mov	r9, r0
 800c762:	4638      	mov	r0, r7
 800c764:	f7ff ff20 	bl	800c5a8 <validate_structure>
 800c768:	e9d7 4300 	ldrd	r4, r3, [r7]
 800c76c:	223c      	movs	r2, #60	; 0x3c
 800c76e:	fb02 4403 	mla	r4, r2, r3, r4
 800c772:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	697e      	ldr	r6, [r7, #20]
 800c77a:	fb02 4403 	mla	r4, r2, r3, r4
 800c77e:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 800c782:	4abb      	ldr	r2, [pc, #748]	; (800ca70 <mktime+0x31c>)
 800c784:	3d01      	subs	r5, #1
 800c786:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	4415      	add	r5, r2
 800c78e:	dd11      	ble.n	800c7b4 <mktime+0x60>
 800c790:	07b1      	lsls	r1, r6, #30
 800c792:	d10f      	bne.n	800c7b4 <mktime+0x60>
 800c794:	2264      	movs	r2, #100	; 0x64
 800c796:	fb96 f3f2 	sdiv	r3, r6, r2
 800c79a:	fb02 6313 	mls	r3, r2, r3, r6
 800c79e:	b943      	cbnz	r3, 800c7b2 <mktime+0x5e>
 800c7a0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c7a4:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800c7a8:	fb93 f1f2 	sdiv	r1, r3, r2
 800c7ac:	fb02 3311 	mls	r3, r2, r1, r3
 800c7b0:	b903      	cbnz	r3, 800c7b4 <mktime+0x60>
 800c7b2:	3501      	adds	r5, #1
 800c7b4:	f644 6220 	movw	r2, #20000	; 0x4e20
 800c7b8:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 800c7bc:	3310      	adds	r3, #16
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	61fd      	str	r5, [r7, #28]
 800c7c2:	f200 815e 	bhi.w	800ca82 <mktime+0x32e>
 800c7c6:	2e46      	cmp	r6, #70	; 0x46
 800c7c8:	dd72      	ble.n	800c8b0 <mktime+0x15c>
 800c7ca:	2346      	movs	r3, #70	; 0x46
 800c7cc:	f240 1c6d 	movw	ip, #365	; 0x16d
 800c7d0:	2164      	movs	r1, #100	; 0x64
 800c7d2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c7d6:	079a      	lsls	r2, r3, #30
 800c7d8:	d164      	bne.n	800c8a4 <mktime+0x150>
 800c7da:	fb93 f2f1 	sdiv	r2, r3, r1
 800c7de:	fb01 3212 	mls	r2, r1, r2, r3
 800c7e2:	2a00      	cmp	r2, #0
 800c7e4:	d161      	bne.n	800c8aa <mktime+0x156>
 800c7e6:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800c7ea:	fb92 fef0 	sdiv	lr, r2, r0
 800c7ee:	fb00 221e 	mls	r2, r0, lr, r2
 800c7f2:	2a00      	cmp	r2, #0
 800c7f4:	bf14      	ite	ne
 800c7f6:	4662      	movne	r2, ip
 800c7f8:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	429e      	cmp	r6, r3
 800c800:	4415      	add	r5, r2
 800c802:	d1e8      	bne.n	800c7d6 <mktime+0x82>
 800c804:	4b9b      	ldr	r3, [pc, #620]	; (800ca74 <mktime+0x320>)
 800c806:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800c80a:	fbc5 4803 	smlal	r4, r8, r5, r3
 800c80e:	f000 f9e3 	bl	800cbd8 <__tz_lock>
 800c812:	f000 f9ed 	bl	800cbf0 <_tzset_unlocked>
 800c816:	4b98      	ldr	r3, [pc, #608]	; (800ca78 <mktime+0x324>)
 800c818:	f8d3 b000 	ldr.w	fp, [r3]
 800c81c:	f1bb 0f00 	cmp.w	fp, #0
 800c820:	d03a      	beq.n	800c898 <mktime+0x144>
 800c822:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800c826:	6978      	ldr	r0, [r7, #20]
 800c828:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c82c:	f1bb 0f01 	cmp.w	fp, #1
 800c830:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800c834:	46da      	mov	sl, fp
 800c836:	bfa8      	it	ge
 800c838:	f04f 0a01 	movge.w	sl, #1
 800c83c:	4283      	cmp	r3, r0
 800c83e:	d179      	bne.n	800c934 <mktime+0x1e0>
 800c840:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 800c844:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
 800c848:	f8d9 c04c 	ldr.w	ip, [r9, #76]	; 0x4c
 800c84c:	1a13      	subs	r3, r2, r0
 800c84e:	9302      	str	r3, [sp, #8]
 800c850:	eb61 73e0 	sbc.w	r3, r1, r0, asr #31
 800c854:	9303      	str	r3, [sp, #12]
 800c856:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800c85a:	9301      	str	r3, [sp, #4]
 800c85c:	9a01      	ldr	r2, [sp, #4]
 800c85e:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 800c862:	ebb2 0e03 	subs.w	lr, r2, r3
 800c866:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800c86a:	4574      	cmp	r4, lr
 800c86c:	eb78 0201 	sbcs.w	r2, r8, r1
 800c870:	da66      	bge.n	800c940 <mktime+0x1ec>
 800c872:	f8d9 2000 	ldr.w	r2, [r9]
 800c876:	2a00      	cmp	r2, #0
 800c878:	d06f      	beq.n	800c95a <mktime+0x206>
 800c87a:	9a02      	ldr	r2, [sp, #8]
 800c87c:	4294      	cmp	r4, r2
 800c87e:	9a03      	ldr	r2, [sp, #12]
 800c880:	eb78 0202 	sbcs.w	r2, r8, r2
 800c884:	db03      	blt.n	800c88e <mktime+0x13a>
 800c886:	4574      	cmp	r4, lr
 800c888:	eb78 0101 	sbcs.w	r1, r8, r1
 800c88c:	db6b      	blt.n	800c966 <mktime+0x212>
 800c88e:	f1bb 0f00 	cmp.w	fp, #0
 800c892:	f04f 0b00 	mov.w	fp, #0
 800c896:	da6b      	bge.n	800c970 <mktime+0x21c>
 800c898:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 800c89c:	191c      	adds	r4, r3, r4
 800c89e:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800c8a2:	e0a9      	b.n	800c9f8 <mktime+0x2a4>
 800c8a4:	f240 126d 	movw	r2, #365	; 0x16d
 800c8a8:	e7a8      	b.n	800c7fc <mktime+0xa8>
 800c8aa:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c8ae:	e7a5      	b.n	800c7fc <mktime+0xa8>
 800c8b0:	d0a8      	beq.n	800c804 <mktime+0xb0>
 800c8b2:	2345      	movs	r3, #69	; 0x45
 800c8b4:	f240 1c6d 	movw	ip, #365	; 0x16d
 800c8b8:	2164      	movs	r1, #100	; 0x64
 800c8ba:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c8be:	e012      	b.n	800c8e6 <mktime+0x192>
 800c8c0:	bb62      	cbnz	r2, 800c91c <mktime+0x1c8>
 800c8c2:	fb93 f2f1 	sdiv	r2, r3, r1
 800c8c6:	fb01 3212 	mls	r2, r1, r2, r3
 800c8ca:	bb52      	cbnz	r2, 800c922 <mktime+0x1ce>
 800c8cc:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800c8d0:	fb92 fef0 	sdiv	lr, r2, r0
 800c8d4:	fb00 221e 	mls	r2, r0, lr, r2
 800c8d8:	2a00      	cmp	r2, #0
 800c8da:	bf14      	ite	ne
 800c8dc:	4662      	movne	r2, ip
 800c8de:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c8e2:	1aad      	subs	r5, r5, r2
 800c8e4:	3b01      	subs	r3, #1
 800c8e6:	429e      	cmp	r6, r3
 800c8e8:	f003 0203 	and.w	r2, r3, #3
 800c8ec:	dbe8      	blt.n	800c8c0 <mktime+0x16c>
 800c8ee:	b9da      	cbnz	r2, 800c928 <mktime+0x1d4>
 800c8f0:	2264      	movs	r2, #100	; 0x64
 800c8f2:	fb96 f3f2 	sdiv	r3, r6, r2
 800c8f6:	fb02 6313 	mls	r3, r2, r3, r6
 800c8fa:	b9c3      	cbnz	r3, 800c92e <mktime+0x1da>
 800c8fc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c900:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800c904:	fb93 f1f2 	sdiv	r1, r3, r2
 800c908:	fb02 3311 	mls	r3, r2, r1, r3
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	f240 136d 	movw	r3, #365	; 0x16d
 800c912:	bf08      	it	eq
 800c914:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800c918:	1aed      	subs	r5, r5, r3
 800c91a:	e773      	b.n	800c804 <mktime+0xb0>
 800c91c:	f240 126d 	movw	r2, #365	; 0x16d
 800c920:	e7df      	b.n	800c8e2 <mktime+0x18e>
 800c922:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c926:	e7dc      	b.n	800c8e2 <mktime+0x18e>
 800c928:	f240 136d 	movw	r3, #365	; 0x16d
 800c92c:	e7f4      	b.n	800c918 <mktime+0x1c4>
 800c92e:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800c932:	e7f1      	b.n	800c918 <mktime+0x1c4>
 800c934:	f000 f8aa 	bl	800ca8c <__tzcalc_limits>
 800c938:	2800      	cmp	r0, #0
 800c93a:	d181      	bne.n	800c840 <mktime+0xec>
 800c93c:	46d3      	mov	fp, sl
 800c93e:	e050      	b.n	800c9e2 <mktime+0x28e>
 800c940:	9a01      	ldr	r2, [sp, #4]
 800c942:	1a12      	subs	r2, r2, r0
 800c944:	9201      	str	r2, [sp, #4]
 800c946:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800c94a:	eb6c 0c02 	sbc.w	ip, ip, r2
 800c94e:	9a01      	ldr	r2, [sp, #4]
 800c950:	4294      	cmp	r4, r2
 800c952:	eb78 0c0c 	sbcs.w	ip, r8, ip
 800c956:	dbf1      	blt.n	800c93c <mktime+0x1e8>
 800c958:	e78b      	b.n	800c872 <mktime+0x11e>
 800c95a:	9a02      	ldr	r2, [sp, #8]
 800c95c:	4294      	cmp	r4, r2
 800c95e:	9a03      	ldr	r2, [sp, #12]
 800c960:	eb78 0202 	sbcs.w	r2, r8, r2
 800c964:	db8f      	blt.n	800c886 <mktime+0x132>
 800c966:	f1bb 0f00 	cmp.w	fp, #0
 800c96a:	db3e      	blt.n	800c9ea <mktime+0x296>
 800c96c:	f04f 0b01 	mov.w	fp, #1
 800c970:	ea8a 0a0b 	eor.w	sl, sl, fp
 800c974:	f1ba 0f01 	cmp.w	sl, #1
 800c978:	d133      	bne.n	800c9e2 <mktime+0x28e>
 800c97a:	f1bb 0f00 	cmp.w	fp, #0
 800c97e:	d04e      	beq.n	800ca1e <mktime+0x2ca>
 800c980:	1a1b      	subs	r3, r3, r0
 800c982:	683a      	ldr	r2, [r7, #0]
 800c984:	191c      	adds	r4, r3, r4
 800c986:	441a      	add	r2, r3
 800c988:	603a      	str	r2, [r7, #0]
 800c98a:	4638      	mov	r0, r7
 800c98c:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800c990:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800c994:	f7ff fe08 	bl	800c5a8 <validate_structure>
 800c998:	68fa      	ldr	r2, [r7, #12]
 800c99a:	ebb2 020a 	subs.w	r2, r2, sl
 800c99e:	d020      	beq.n	800c9e2 <mktime+0x28e>
 800c9a0:	2a01      	cmp	r2, #1
 800c9a2:	dc3e      	bgt.n	800ca22 <mktime+0x2ce>
 800c9a4:	1c91      	adds	r1, r2, #2
 800c9a6:	bfd8      	it	le
 800c9a8:	2201      	movle	r2, #1
 800c9aa:	69fb      	ldr	r3, [r7, #28]
 800c9ac:	4415      	add	r5, r2
 800c9ae:	18d2      	adds	r2, r2, r3
 800c9b0:	d540      	bpl.n	800ca34 <mktime+0x2e0>
 800c9b2:	1e73      	subs	r3, r6, #1
 800c9b4:	079a      	lsls	r2, r3, #30
 800c9b6:	d137      	bne.n	800ca28 <mktime+0x2d4>
 800c9b8:	2264      	movs	r2, #100	; 0x64
 800c9ba:	fb93 f1f2 	sdiv	r1, r3, r2
 800c9be:	fb02 3311 	mls	r3, r2, r1, r3
 800c9c2:	bba3      	cbnz	r3, 800ca2e <mktime+0x2da>
 800c9c4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800c9c8:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800c9cc:	fb96 f2f3 	sdiv	r2, r6, r3
 800c9d0:	fb03 6612 	mls	r6, r3, r2, r6
 800c9d4:	2e00      	cmp	r6, #0
 800c9d6:	f240 136d 	movw	r3, #365	; 0x16d
 800c9da:	bf18      	it	ne
 800c9dc:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800c9e0:	61fb      	str	r3, [r7, #28]
 800c9e2:	f1bb 0f01 	cmp.w	fp, #1
 800c9e6:	f47f af57 	bne.w	800c898 <mktime+0x144>
 800c9ea:	f04f 0b01 	mov.w	fp, #1
 800c9ee:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
 800c9f2:	191c      	adds	r4, r3, r4
 800c9f4:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800c9f8:	f000 f8f4 	bl	800cbe4 <__tz_unlock>
 800c9fc:	2307      	movs	r3, #7
 800c9fe:	3504      	adds	r5, #4
 800ca00:	fb95 f3f3 	sdiv	r3, r5, r3
 800ca04:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800ca08:	1aed      	subs	r5, r5, r3
 800ca0a:	bf48      	it	mi
 800ca0c:	3507      	addmi	r5, #7
 800ca0e:	f8c7 b020 	str.w	fp, [r7, #32]
 800ca12:	61bd      	str	r5, [r7, #24]
 800ca14:	4620      	mov	r0, r4
 800ca16:	4641      	mov	r1, r8
 800ca18:	b005      	add	sp, #20
 800ca1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca1e:	1ac3      	subs	r3, r0, r3
 800ca20:	e7af      	b.n	800c982 <mktime+0x22e>
 800ca22:	f04f 32ff 	mov.w	r2, #4294967295
 800ca26:	e7c0      	b.n	800c9aa <mktime+0x256>
 800ca28:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800ca2c:	e7d8      	b.n	800c9e0 <mktime+0x28c>
 800ca2e:	f240 136d 	movw	r3, #365	; 0x16d
 800ca32:	e7d5      	b.n	800c9e0 <mktime+0x28c>
 800ca34:	07b3      	lsls	r3, r6, #30
 800ca36:	d118      	bne.n	800ca6a <mktime+0x316>
 800ca38:	2164      	movs	r1, #100	; 0x64
 800ca3a:	fb96 f3f1 	sdiv	r3, r6, r1
 800ca3e:	fb01 6313 	mls	r3, r1, r3, r6
 800ca42:	b9db      	cbnz	r3, 800ca7c <mktime+0x328>
 800ca44:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ca48:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 800ca4c:	fb96 f1f3 	sdiv	r1, r6, r3
 800ca50:	fb03 6611 	mls	r6, r3, r1, r6
 800ca54:	2e00      	cmp	r6, #0
 800ca56:	f240 136d 	movw	r3, #365	; 0x16d
 800ca5a:	bf08      	it	eq
 800ca5c:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800ca60:	429a      	cmp	r2, r3
 800ca62:	bfa8      	it	ge
 800ca64:	1ad2      	subge	r2, r2, r3
 800ca66:	61fa      	str	r2, [r7, #28]
 800ca68:	e7bb      	b.n	800c9e2 <mktime+0x28e>
 800ca6a:	f240 136d 	movw	r3, #365	; 0x16d
 800ca6e:	e7f7      	b.n	800ca60 <mktime+0x30c>
 800ca70:	0801096c 	.word	0x0801096c
 800ca74:	00015180 	.word	0x00015180
 800ca78:	200034c0 	.word	0x200034c0
 800ca7c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800ca80:	e7ee      	b.n	800ca60 <mktime+0x30c>
 800ca82:	f04f 34ff 	mov.w	r4, #4294967295
 800ca86:	46a0      	mov	r8, r4
 800ca88:	e7c4      	b.n	800ca14 <mktime+0x2c0>
 800ca8a:	bf00      	nop

0800ca8c <__tzcalc_limits>:
 800ca8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca90:	4605      	mov	r5, r0
 800ca92:	f002 fdfd 	bl	800f690 <__gettzinfo>
 800ca96:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800ca9a:	429d      	cmp	r5, r3
 800ca9c:	f340 8096 	ble.w	800cbcc <__tzcalc_limits+0x140>
 800caa0:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800caa4:	18ac      	adds	r4, r5, r2
 800caa6:	f240 126d 	movw	r2, #365	; 0x16d
 800caaa:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800caae:	10a4      	asrs	r4, r4, #2
 800cab0:	fb02 4403 	mla	r4, r2, r3, r4
 800cab4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800cab8:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800cabc:	fb93 f3f2 	sdiv	r3, r3, r2
 800cac0:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800cac4:	441c      	add	r4, r3
 800cac6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800caca:	186a      	adds	r2, r5, r1
 800cacc:	fbb2 f2f3 	udiv	r2, r2, r3
 800cad0:	fb95 fcf3 	sdiv	ip, r5, r3
 800cad4:	4414      	add	r4, r2
 800cad6:	2264      	movs	r2, #100	; 0x64
 800cad8:	fb03 5c1c 	mls	ip, r3, ip, r5
 800cadc:	fb95 f7f2 	sdiv	r7, r5, r2
 800cae0:	fabc f68c 	clz	r6, ip
 800cae4:	4601      	mov	r1, r0
 800cae6:	fb02 5717 	mls	r7, r2, r7, r5
 800caea:	6045      	str	r5, [r0, #4]
 800caec:	0976      	lsrs	r6, r6, #5
 800caee:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800caf2:	f005 0203 	and.w	r2, r5, #3
 800caf6:	7a0d      	ldrb	r5, [r1, #8]
 800caf8:	694b      	ldr	r3, [r1, #20]
 800cafa:	2d4a      	cmp	r5, #74	; 0x4a
 800cafc:	d12b      	bne.n	800cb56 <__tzcalc_limits+0xca>
 800cafe:	18e5      	adds	r5, r4, r3
 800cb00:	b902      	cbnz	r2, 800cb04 <__tzcalc_limits+0x78>
 800cb02:	b917      	cbnz	r7, 800cb0a <__tzcalc_limits+0x7e>
 800cb04:	f1bc 0f00 	cmp.w	ip, #0
 800cb08:	d123      	bne.n	800cb52 <__tzcalc_limits+0xc6>
 800cb0a:	2b3b      	cmp	r3, #59	; 0x3b
 800cb0c:	bfd4      	ite	le
 800cb0e:	2300      	movle	r3, #0
 800cb10:	2301      	movgt	r3, #1
 800cb12:	442b      	add	r3, r5
 800cb14:	3b01      	subs	r3, #1
 800cb16:	698d      	ldr	r5, [r1, #24]
 800cb18:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800cbd0 <__tzcalc_limits+0x144>
 800cb1c:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800cb20:	fbc3 5e08 	smlal	r5, lr, r3, r8
 800cb24:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800cb26:	18ed      	adds	r5, r5, r3
 800cb28:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800cb2c:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800cb30:	3128      	adds	r1, #40	; 0x28
 800cb32:	458b      	cmp	fp, r1
 800cb34:	d1df      	bne.n	800caf6 <__tzcalc_limits+0x6a>
 800cb36:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800cb3a:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	; 0x48
 800cb3e:	428c      	cmp	r4, r1
 800cb40:	4193      	sbcs	r3, r2
 800cb42:	bfb4      	ite	lt
 800cb44:	2301      	movlt	r3, #1
 800cb46:	2300      	movge	r3, #0
 800cb48:	6003      	str	r3, [r0, #0]
 800cb4a:	2001      	movs	r0, #1
 800cb4c:	b003      	add	sp, #12
 800cb4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb52:	2300      	movs	r3, #0
 800cb54:	e7dd      	b.n	800cb12 <__tzcalc_limits+0x86>
 800cb56:	2d44      	cmp	r5, #68	; 0x44
 800cb58:	d101      	bne.n	800cb5e <__tzcalc_limits+0xd2>
 800cb5a:	4423      	add	r3, r4
 800cb5c:	e7db      	b.n	800cb16 <__tzcalc_limits+0x8a>
 800cb5e:	bb7a      	cbnz	r2, 800cbc0 <__tzcalc_limits+0x134>
 800cb60:	2f00      	cmp	r7, #0
 800cb62:	bf0c      	ite	eq
 800cb64:	4635      	moveq	r5, r6
 800cb66:	2501      	movne	r5, #1
 800cb68:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800cb6c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800cb70:	f04f 0800 	mov.w	r8, #0
 800cb74:	f8cd e004 	str.w	lr, [sp, #4]
 800cb78:	46a6      	mov	lr, r4
 800cb7a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800cbd4 <__tzcalc_limits+0x148>
 800cb7e:	fb0a 9505 	mla	r5, sl, r5, r9
 800cb82:	3d04      	subs	r5, #4
 800cb84:	f8dd a004 	ldr.w	sl, [sp, #4]
 800cb88:	f108 0801 	add.w	r8, r8, #1
 800cb8c:	45c2      	cmp	sl, r8
 800cb8e:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800cb92:	dc17      	bgt.n	800cbc4 <__tzcalc_limits+0x138>
 800cb94:	f04f 0807 	mov.w	r8, #7
 800cb98:	f10e 0504 	add.w	r5, lr, #4
 800cb9c:	fb95 f8f8 	sdiv	r8, r5, r8
 800cba0:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800cba4:	eba5 0508 	sub.w	r5, r5, r8
 800cba8:	1b5d      	subs	r5, r3, r5
 800cbaa:	690b      	ldr	r3, [r1, #16]
 800cbac:	bf48      	it	mi
 800cbae:	3507      	addmi	r5, #7
 800cbb0:	3b01      	subs	r3, #1
 800cbb2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800cbb6:	442b      	add	r3, r5
 800cbb8:	454b      	cmp	r3, r9
 800cbba:	da05      	bge.n	800cbc8 <__tzcalc_limits+0x13c>
 800cbbc:	4473      	add	r3, lr
 800cbbe:	e7aa      	b.n	800cb16 <__tzcalc_limits+0x8a>
 800cbc0:	4635      	mov	r5, r6
 800cbc2:	e7d1      	b.n	800cb68 <__tzcalc_limits+0xdc>
 800cbc4:	44ce      	add	lr, r9
 800cbc6:	e7dd      	b.n	800cb84 <__tzcalc_limits+0xf8>
 800cbc8:	3b07      	subs	r3, #7
 800cbca:	e7f5      	b.n	800cbb8 <__tzcalc_limits+0x12c>
 800cbcc:	2000      	movs	r0, #0
 800cbce:	e7bd      	b.n	800cb4c <__tzcalc_limits+0xc0>
 800cbd0:	00015180 	.word	0x00015180
 800cbd4:	08010c70 	.word	0x08010c70

0800cbd8 <__tz_lock>:
 800cbd8:	4801      	ldr	r0, [pc, #4]	; (800cbe0 <__tz_lock+0x8>)
 800cbda:	f000 bb0c 	b.w	800d1f6 <__retarget_lock_acquire>
 800cbde:	bf00      	nop
 800cbe0:	200034cf 	.word	0x200034cf

0800cbe4 <__tz_unlock>:
 800cbe4:	4801      	ldr	r0, [pc, #4]	; (800cbec <__tz_unlock+0x8>)
 800cbe6:	f000 bb08 	b.w	800d1fa <__retarget_lock_release>
 800cbea:	bf00      	nop
 800cbec:	200034cf 	.word	0x200034cf

0800cbf0 <_tzset_unlocked>:
 800cbf0:	4b01      	ldr	r3, [pc, #4]	; (800cbf8 <_tzset_unlocked+0x8>)
 800cbf2:	6818      	ldr	r0, [r3, #0]
 800cbf4:	f000 b802 	b.w	800cbfc <_tzset_unlocked_r>
 800cbf8:	200001e0 	.word	0x200001e0

0800cbfc <_tzset_unlocked_r>:
 800cbfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc00:	b08d      	sub	sp, #52	; 0x34
 800cc02:	4607      	mov	r7, r0
 800cc04:	f002 fd44 	bl	800f690 <__gettzinfo>
 800cc08:	496d      	ldr	r1, [pc, #436]	; (800cdc0 <_tzset_unlocked_r+0x1c4>)
 800cc0a:	4604      	mov	r4, r0
 800cc0c:	4638      	mov	r0, r7
 800cc0e:	f001 fda5 	bl	800e75c <_getenv_r>
 800cc12:	4d6c      	ldr	r5, [pc, #432]	; (800cdc4 <_tzset_unlocked_r+0x1c8>)
 800cc14:	4606      	mov	r6, r0
 800cc16:	bb10      	cbnz	r0, 800cc5e <_tzset_unlocked_r+0x62>
 800cc18:	4b6b      	ldr	r3, [pc, #428]	; (800cdc8 <_tzset_unlocked_r+0x1cc>)
 800cc1a:	4a6c      	ldr	r2, [pc, #432]	; (800cdcc <_tzset_unlocked_r+0x1d0>)
 800cc1c:	6018      	str	r0, [r3, #0]
 800cc1e:	4b6c      	ldr	r3, [pc, #432]	; (800cdd0 <_tzset_unlocked_r+0x1d4>)
 800cc20:	214a      	movs	r1, #74	; 0x4a
 800cc22:	6018      	str	r0, [r3, #0]
 800cc24:	4b6b      	ldr	r3, [pc, #428]	; (800cdd4 <_tzset_unlocked_r+0x1d8>)
 800cc26:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800cc2a:	e9c3 2200 	strd	r2, r2, [r3]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	2300      	movs	r3, #0
 800cc32:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800cc36:	e9c4 000d 	strd	r0, r0, [r4, #52]	; 0x34
 800cc3a:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800cc3e:	62a0      	str	r0, [r4, #40]	; 0x28
 800cc40:	6520      	str	r0, [r4, #80]	; 0x50
 800cc42:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800cc46:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cc4a:	6828      	ldr	r0, [r5, #0]
 800cc4c:	7221      	strb	r1, [r4, #8]
 800cc4e:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 800cc52:	f7fd fecb 	bl	800a9ec <free>
 800cc56:	602e      	str	r6, [r5, #0]
 800cc58:	b00d      	add	sp, #52	; 0x34
 800cc5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc5e:	6829      	ldr	r1, [r5, #0]
 800cc60:	2900      	cmp	r1, #0
 800cc62:	f040 808e 	bne.w	800cd82 <_tzset_unlocked_r+0x186>
 800cc66:	6828      	ldr	r0, [r5, #0]
 800cc68:	f7fd fec0 	bl	800a9ec <free>
 800cc6c:	4630      	mov	r0, r6
 800cc6e:	f7f3 fae9 	bl	8000244 <strlen>
 800cc72:	1c41      	adds	r1, r0, #1
 800cc74:	4638      	mov	r0, r7
 800cc76:	f7fd fee1 	bl	800aa3c <_malloc_r>
 800cc7a:	6028      	str	r0, [r5, #0]
 800cc7c:	2800      	cmp	r0, #0
 800cc7e:	f040 8086 	bne.w	800cd8e <_tzset_unlocked_r+0x192>
 800cc82:	2300      	movs	r3, #0
 800cc84:	4a52      	ldr	r2, [pc, #328]	; (800cdd0 <_tzset_unlocked_r+0x1d4>)
 800cc86:	2000      	movs	r0, #0
 800cc88:	6013      	str	r3, [r2, #0]
 800cc8a:	2100      	movs	r1, #0
 800cc8c:	4a52      	ldr	r2, [pc, #328]	; (800cdd8 <_tzset_unlocked_r+0x1dc>)
 800cc8e:	f8df 8144 	ldr.w	r8, [pc, #324]	; 800cdd4 <_tzset_unlocked_r+0x1d8>
 800cc92:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800cc96:	e9c8 2200 	strd	r2, r2, [r8]
 800cc9a:	224a      	movs	r2, #74	; 0x4a
 800cc9c:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800cca0:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800cca4:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 800cca8:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 800ccac:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800ccb0:	f8df a114 	ldr.w	sl, [pc, #276]	; 800cdc8 <_tzset_unlocked_r+0x1cc>
 800ccb4:	7222      	strb	r2, [r4, #8]
 800ccb6:	f8ca 3000 	str.w	r3, [sl]
 800ccba:	62a3      	str	r3, [r4, #40]	; 0x28
 800ccbc:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 800ccc0:	6523      	str	r3, [r4, #80]	; 0x50
 800ccc2:	7833      	ldrb	r3, [r6, #0]
 800ccc4:	2b3a      	cmp	r3, #58	; 0x3a
 800ccc6:	bf08      	it	eq
 800ccc8:	3601      	addeq	r6, #1
 800ccca:	7833      	ldrb	r3, [r6, #0]
 800cccc:	2b3c      	cmp	r3, #60	; 0x3c
 800ccce:	d162      	bne.n	800cd96 <_tzset_unlocked_r+0x19a>
 800ccd0:	1c75      	adds	r5, r6, #1
 800ccd2:	4628      	mov	r0, r5
 800ccd4:	4a41      	ldr	r2, [pc, #260]	; (800cddc <_tzset_unlocked_r+0x1e0>)
 800ccd6:	4942      	ldr	r1, [pc, #264]	; (800cde0 <_tzset_unlocked_r+0x1e4>)
 800ccd8:	ab0a      	add	r3, sp, #40	; 0x28
 800ccda:	f002 fc95 	bl	800f608 <siscanf>
 800ccde:	2800      	cmp	r0, #0
 800cce0:	ddba      	ble.n	800cc58 <_tzset_unlocked_r+0x5c>
 800cce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cce4:	1eda      	subs	r2, r3, #3
 800cce6:	2a07      	cmp	r2, #7
 800cce8:	d8b6      	bhi.n	800cc58 <_tzset_unlocked_r+0x5c>
 800ccea:	5ceb      	ldrb	r3, [r5, r3]
 800ccec:	2b3e      	cmp	r3, #62	; 0x3e
 800ccee:	d1b3      	bne.n	800cc58 <_tzset_unlocked_r+0x5c>
 800ccf0:	3602      	adds	r6, #2
 800ccf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccf4:	18f5      	adds	r5, r6, r3
 800ccf6:	5cf3      	ldrb	r3, [r6, r3]
 800ccf8:	2b2d      	cmp	r3, #45	; 0x2d
 800ccfa:	d15a      	bne.n	800cdb2 <_tzset_unlocked_r+0x1b6>
 800ccfc:	f04f 39ff 	mov.w	r9, #4294967295
 800cd00:	3501      	adds	r5, #1
 800cd02:	2300      	movs	r3, #0
 800cd04:	af08      	add	r7, sp, #32
 800cd06:	f8ad 301e 	strh.w	r3, [sp, #30]
 800cd0a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800cd0e:	ab0a      	add	r3, sp, #40	; 0x28
 800cd10:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800cd14:	9303      	str	r3, [sp, #12]
 800cd16:	f10d 031e 	add.w	r3, sp, #30
 800cd1a:	9300      	str	r3, [sp, #0]
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	4931      	ldr	r1, [pc, #196]	; (800cde4 <_tzset_unlocked_r+0x1e8>)
 800cd20:	ab0a      	add	r3, sp, #40	; 0x28
 800cd22:	aa07      	add	r2, sp, #28
 800cd24:	f002 fc70 	bl	800f608 <siscanf>
 800cd28:	2800      	cmp	r0, #0
 800cd2a:	dd95      	ble.n	800cc58 <_tzset_unlocked_r+0x5c>
 800cd2c:	223c      	movs	r2, #60	; 0x3c
 800cd2e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800cd32:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800cd36:	fb02 6603 	mla	r6, r2, r3, r6
 800cd3a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800cd3e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800cd42:	fb02 6603 	mla	r6, r2, r3, r6
 800cd46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd48:	fb09 f606 	mul.w	r6, r9, r6
 800cd4c:	eb05 0903 	add.w	r9, r5, r3
 800cd50:	5ceb      	ldrb	r3, [r5, r3]
 800cd52:	2b3c      	cmp	r3, #60	; 0x3c
 800cd54:	f040 80e7 	bne.w	800cf26 <_tzset_unlocked_r+0x32a>
 800cd58:	f109 0501 	add.w	r5, r9, #1
 800cd5c:	4628      	mov	r0, r5
 800cd5e:	4a22      	ldr	r2, [pc, #136]	; (800cde8 <_tzset_unlocked_r+0x1ec>)
 800cd60:	491f      	ldr	r1, [pc, #124]	; (800cde0 <_tzset_unlocked_r+0x1e4>)
 800cd62:	ab0a      	add	r3, sp, #40	; 0x28
 800cd64:	f002 fc50 	bl	800f608 <siscanf>
 800cd68:	2800      	cmp	r0, #0
 800cd6a:	dc41      	bgt.n	800cdf0 <_tzset_unlocked_r+0x1f4>
 800cd6c:	f899 3001 	ldrb.w	r3, [r9, #1]
 800cd70:	2b3e      	cmp	r3, #62	; 0x3e
 800cd72:	d13d      	bne.n	800cdf0 <_tzset_unlocked_r+0x1f4>
 800cd74:	4b19      	ldr	r3, [pc, #100]	; (800cddc <_tzset_unlocked_r+0x1e0>)
 800cd76:	62a6      	str	r6, [r4, #40]	; 0x28
 800cd78:	e9c8 3300 	strd	r3, r3, [r8]
 800cd7c:	f8ca 6000 	str.w	r6, [sl]
 800cd80:	e76a      	b.n	800cc58 <_tzset_unlocked_r+0x5c>
 800cd82:	f7f3 fa55 	bl	8000230 <strcmp>
 800cd86:	2800      	cmp	r0, #0
 800cd88:	f47f af6d 	bne.w	800cc66 <_tzset_unlocked_r+0x6a>
 800cd8c:	e764      	b.n	800cc58 <_tzset_unlocked_r+0x5c>
 800cd8e:	4631      	mov	r1, r6
 800cd90:	f000 fa35 	bl	800d1fe <strcpy>
 800cd94:	e775      	b.n	800cc82 <_tzset_unlocked_r+0x86>
 800cd96:	4630      	mov	r0, r6
 800cd98:	4a10      	ldr	r2, [pc, #64]	; (800cddc <_tzset_unlocked_r+0x1e0>)
 800cd9a:	4914      	ldr	r1, [pc, #80]	; (800cdec <_tzset_unlocked_r+0x1f0>)
 800cd9c:	ab0a      	add	r3, sp, #40	; 0x28
 800cd9e:	f002 fc33 	bl	800f608 <siscanf>
 800cda2:	2800      	cmp	r0, #0
 800cda4:	f77f af58 	ble.w	800cc58 <_tzset_unlocked_r+0x5c>
 800cda8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdaa:	3b03      	subs	r3, #3
 800cdac:	2b07      	cmp	r3, #7
 800cdae:	d9a0      	bls.n	800ccf2 <_tzset_unlocked_r+0xf6>
 800cdb0:	e752      	b.n	800cc58 <_tzset_unlocked_r+0x5c>
 800cdb2:	2b2b      	cmp	r3, #43	; 0x2b
 800cdb4:	f04f 0901 	mov.w	r9, #1
 800cdb8:	bf08      	it	eq
 800cdba:	3501      	addeq	r5, #1
 800cdbc:	e7a1      	b.n	800cd02 <_tzset_unlocked_r+0x106>
 800cdbe:	bf00      	nop
 800cdc0:	0801099c 	.word	0x0801099c
 800cdc4:	200034bc 	.word	0x200034bc
 800cdc8:	200034c4 	.word	0x200034c4
 800cdcc:	0801099f 	.word	0x0801099f
 800cdd0:	200034c0 	.word	0x200034c0
 800cdd4:	20000020 	.word	0x20000020
 800cdd8:	08010a2d 	.word	0x08010a2d
 800cddc:	200034b0 	.word	0x200034b0
 800cde0:	080109a3 	.word	0x080109a3
 800cde4:	080109d8 	.word	0x080109d8
 800cde8:	200034a4 	.word	0x200034a4
 800cdec:	080109b6 	.word	0x080109b6
 800cdf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdf2:	1eda      	subs	r2, r3, #3
 800cdf4:	2a07      	cmp	r2, #7
 800cdf6:	f63f af2f 	bhi.w	800cc58 <_tzset_unlocked_r+0x5c>
 800cdfa:	5ceb      	ldrb	r3, [r5, r3]
 800cdfc:	2b3e      	cmp	r3, #62	; 0x3e
 800cdfe:	f47f af2b 	bne.w	800cc58 <_tzset_unlocked_r+0x5c>
 800ce02:	f109 0902 	add.w	r9, r9, #2
 800ce06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce08:	eb09 0503 	add.w	r5, r9, r3
 800ce0c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800ce10:	2b2d      	cmp	r3, #45	; 0x2d
 800ce12:	f040 8097 	bne.w	800cf44 <_tzset_unlocked_r+0x348>
 800ce16:	f04f 39ff 	mov.w	r9, #4294967295
 800ce1a:	3501      	adds	r5, #1
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ce22:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ce26:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ce2a:	930a      	str	r3, [sp, #40]	; 0x28
 800ce2c:	ab0a      	add	r3, sp, #40	; 0x28
 800ce2e:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800ce32:	9301      	str	r3, [sp, #4]
 800ce34:	f10d 031e 	add.w	r3, sp, #30
 800ce38:	9300      	str	r3, [sp, #0]
 800ce3a:	4628      	mov	r0, r5
 800ce3c:	4979      	ldr	r1, [pc, #484]	; (800d024 <_tzset_unlocked_r+0x428>)
 800ce3e:	ab0a      	add	r3, sp, #40	; 0x28
 800ce40:	aa07      	add	r2, sp, #28
 800ce42:	f002 fbe1 	bl	800f608 <siscanf>
 800ce46:	2800      	cmp	r0, #0
 800ce48:	f300 8082 	bgt.w	800cf50 <_tzset_unlocked_r+0x354>
 800ce4c:	f5a6 6361 	sub.w	r3, r6, #3600	; 0xe10
 800ce50:	4627      	mov	r7, r4
 800ce52:	f04f 0b00 	mov.w	fp, #0
 800ce56:	9304      	str	r3, [sp, #16]
 800ce58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce5a:	441d      	add	r5, r3
 800ce5c:	782b      	ldrb	r3, [r5, #0]
 800ce5e:	2b2c      	cmp	r3, #44	; 0x2c
 800ce60:	bf08      	it	eq
 800ce62:	3501      	addeq	r5, #1
 800ce64:	f895 9000 	ldrb.w	r9, [r5]
 800ce68:	f1b9 0f4d 	cmp.w	r9, #77	; 0x4d
 800ce6c:	f040 8083 	bne.w	800cf76 <_tzset_unlocked_r+0x37a>
 800ce70:	ab0a      	add	r3, sp, #40	; 0x28
 800ce72:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800ce76:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ce7a:	aa09      	add	r2, sp, #36	; 0x24
 800ce7c:	9200      	str	r2, [sp, #0]
 800ce7e:	4628      	mov	r0, r5
 800ce80:	4969      	ldr	r1, [pc, #420]	; (800d028 <_tzset_unlocked_r+0x42c>)
 800ce82:	9303      	str	r3, [sp, #12]
 800ce84:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800ce88:	f002 fbbe 	bl	800f608 <siscanf>
 800ce8c:	2803      	cmp	r0, #3
 800ce8e:	f47f aee3 	bne.w	800cc58 <_tzset_unlocked_r+0x5c>
 800ce92:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800ce96:	1e4b      	subs	r3, r1, #1
 800ce98:	2b0b      	cmp	r3, #11
 800ce9a:	f63f aedd 	bhi.w	800cc58 <_tzset_unlocked_r+0x5c>
 800ce9e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800cea2:	1e53      	subs	r3, r2, #1
 800cea4:	2b04      	cmp	r3, #4
 800cea6:	f63f aed7 	bhi.w	800cc58 <_tzset_unlocked_r+0x5c>
 800ceaa:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800ceae:	2b06      	cmp	r3, #6
 800ceb0:	f63f aed2 	bhi.w	800cc58 <_tzset_unlocked_r+0x5c>
 800ceb4:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800ceb8:	f887 9008 	strb.w	r9, [r7, #8]
 800cebc:	617b      	str	r3, [r7, #20]
 800cebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cec0:	eb05 0903 	add.w	r9, r5, r3
 800cec4:	2500      	movs	r5, #0
 800cec6:	2302      	movs	r3, #2
 800cec8:	f8ad 501e 	strh.w	r5, [sp, #30]
 800cecc:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ced0:	f8ad 5020 	strh.w	r5, [sp, #32]
 800ced4:	950a      	str	r5, [sp, #40]	; 0x28
 800ced6:	f899 3000 	ldrb.w	r3, [r9]
 800ceda:	2b2f      	cmp	r3, #47	; 0x2f
 800cedc:	d177      	bne.n	800cfce <_tzset_unlocked_r+0x3d2>
 800cede:	ab0a      	add	r3, sp, #40	; 0x28
 800cee0:	aa08      	add	r2, sp, #32
 800cee2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800cee6:	f10d 021e 	add.w	r2, sp, #30
 800ceea:	9200      	str	r2, [sp, #0]
 800ceec:	4648      	mov	r0, r9
 800ceee:	494f      	ldr	r1, [pc, #316]	; (800d02c <_tzset_unlocked_r+0x430>)
 800cef0:	9303      	str	r3, [sp, #12]
 800cef2:	aa07      	add	r2, sp, #28
 800cef4:	f002 fb88 	bl	800f608 <siscanf>
 800cef8:	42a8      	cmp	r0, r5
 800cefa:	dc68      	bgt.n	800cfce <_tzset_unlocked_r+0x3d2>
 800cefc:	214a      	movs	r1, #74	; 0x4a
 800cefe:	2200      	movs	r2, #0
 800cf00:	2300      	movs	r3, #0
 800cf02:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800cf06:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800cf0a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800cf0e:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cf12:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
 800cf16:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cf1a:	7221      	strb	r1, [r4, #8]
 800cf1c:	62a5      	str	r5, [r4, #40]	; 0x28
 800cf1e:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 800cf22:	6525      	str	r5, [r4, #80]	; 0x50
 800cf24:	e698      	b.n	800cc58 <_tzset_unlocked_r+0x5c>
 800cf26:	4648      	mov	r0, r9
 800cf28:	4a41      	ldr	r2, [pc, #260]	; (800d030 <_tzset_unlocked_r+0x434>)
 800cf2a:	4942      	ldr	r1, [pc, #264]	; (800d034 <_tzset_unlocked_r+0x438>)
 800cf2c:	ab0a      	add	r3, sp, #40	; 0x28
 800cf2e:	f002 fb6b 	bl	800f608 <siscanf>
 800cf32:	2800      	cmp	r0, #0
 800cf34:	f77f af1e 	ble.w	800cd74 <_tzset_unlocked_r+0x178>
 800cf38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf3a:	3b03      	subs	r3, #3
 800cf3c:	2b07      	cmp	r3, #7
 800cf3e:	f67f af62 	bls.w	800ce06 <_tzset_unlocked_r+0x20a>
 800cf42:	e689      	b.n	800cc58 <_tzset_unlocked_r+0x5c>
 800cf44:	2b2b      	cmp	r3, #43	; 0x2b
 800cf46:	f04f 0901 	mov.w	r9, #1
 800cf4a:	bf08      	it	eq
 800cf4c:	3501      	addeq	r5, #1
 800cf4e:	e765      	b.n	800ce1c <_tzset_unlocked_r+0x220>
 800cf50:	213c      	movs	r1, #60	; 0x3c
 800cf52:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800cf56:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800cf5a:	fb01 3302 	mla	r3, r1, r2, r3
 800cf5e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800cf62:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800cf66:	fb01 3302 	mla	r3, r1, r2, r3
 800cf6a:	fb09 f303 	mul.w	r3, r9, r3
 800cf6e:	e76f      	b.n	800ce50 <_tzset_unlocked_r+0x254>
 800cf70:	f04f 0b01 	mov.w	fp, #1
 800cf74:	e772      	b.n	800ce5c <_tzset_unlocked_r+0x260>
 800cf76:	f1b9 0f4a 	cmp.w	r9, #74	; 0x4a
 800cf7a:	bf0a      	itet	eq
 800cf7c:	464b      	moveq	r3, r9
 800cf7e:	2344      	movne	r3, #68	; 0x44
 800cf80:	3501      	addeq	r5, #1
 800cf82:	220a      	movs	r2, #10
 800cf84:	4628      	mov	r0, r5
 800cf86:	a90b      	add	r1, sp, #44	; 0x2c
 800cf88:	9305      	str	r3, [sp, #20]
 800cf8a:	f002 f911 	bl	800f1b0 <strtoul>
 800cf8e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800cf92:	9b05      	ldr	r3, [sp, #20]
 800cf94:	45a9      	cmp	r9, r5
 800cf96:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800cf9a:	d114      	bne.n	800cfc6 <_tzset_unlocked_r+0x3ca>
 800cf9c:	234d      	movs	r3, #77	; 0x4d
 800cf9e:	f1bb 0f00 	cmp.w	fp, #0
 800cfa2:	d107      	bne.n	800cfb4 <_tzset_unlocked_r+0x3b8>
 800cfa4:	2103      	movs	r1, #3
 800cfa6:	7223      	strb	r3, [r4, #8]
 800cfa8:	2302      	movs	r3, #2
 800cfaa:	f8c4 b014 	str.w	fp, [r4, #20]
 800cfae:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800cfb2:	e787      	b.n	800cec4 <_tzset_unlocked_r+0x2c8>
 800cfb4:	220b      	movs	r2, #11
 800cfb6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800cfba:	2301      	movs	r3, #1
 800cfbc:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	63e3      	str	r3, [r4, #60]	; 0x3c
 800cfc4:	e77e      	b.n	800cec4 <_tzset_unlocked_r+0x2c8>
 800cfc6:	b280      	uxth	r0, r0
 800cfc8:	723b      	strb	r3, [r7, #8]
 800cfca:	6178      	str	r0, [r7, #20]
 800cfcc:	e77a      	b.n	800cec4 <_tzset_unlocked_r+0x2c8>
 800cfce:	213c      	movs	r1, #60	; 0x3c
 800cfd0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800cfd4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800cfd8:	3728      	adds	r7, #40	; 0x28
 800cfda:	fb01 3302 	mla	r3, r1, r2, r3
 800cfde:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800cfe2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800cfe6:	fb01 3302 	mla	r3, r1, r2, r3
 800cfea:	f847 3c10 	str.w	r3, [r7, #-16]
 800cfee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800cff0:	444d      	add	r5, r9
 800cff2:	f1bb 0f00 	cmp.w	fp, #0
 800cff6:	d0bb      	beq.n	800cf70 <_tzset_unlocked_r+0x374>
 800cff8:	9b04      	ldr	r3, [sp, #16]
 800cffa:	6860      	ldr	r0, [r4, #4]
 800cffc:	6523      	str	r3, [r4, #80]	; 0x50
 800cffe:	4b0e      	ldr	r3, [pc, #56]	; (800d038 <_tzset_unlocked_r+0x43c>)
 800d000:	62a6      	str	r6, [r4, #40]	; 0x28
 800d002:	f8c8 3000 	str.w	r3, [r8]
 800d006:	4b0a      	ldr	r3, [pc, #40]	; (800d030 <_tzset_unlocked_r+0x434>)
 800d008:	f8c8 3004 	str.w	r3, [r8, #4]
 800d00c:	f7ff fd3e 	bl	800ca8c <__tzcalc_limits>
 800d010:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800d012:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d014:	f8ca 2000 	str.w	r2, [sl]
 800d018:	1a9b      	subs	r3, r3, r2
 800d01a:	bf18      	it	ne
 800d01c:	2301      	movne	r3, #1
 800d01e:	4a07      	ldr	r2, [pc, #28]	; (800d03c <_tzset_unlocked_r+0x440>)
 800d020:	6013      	str	r3, [r2, #0]
 800d022:	e619      	b.n	800cc58 <_tzset_unlocked_r+0x5c>
 800d024:	080109d8 	.word	0x080109d8
 800d028:	080109c4 	.word	0x080109c4
 800d02c:	080109d7 	.word	0x080109d7
 800d030:	200034a4 	.word	0x200034a4
 800d034:	080109b6 	.word	0x080109b6
 800d038:	200034b0 	.word	0x200034b0
 800d03c:	200034c0 	.word	0x200034c0

0800d040 <_localeconv_r>:
 800d040:	4800      	ldr	r0, [pc, #0]	; (800d044 <_localeconv_r+0x4>)
 800d042:	4770      	bx	lr
 800d044:	20000118 	.word	0x20000118

0800d048 <_close_r>:
 800d048:	b538      	push	{r3, r4, r5, lr}
 800d04a:	2300      	movs	r3, #0
 800d04c:	4d05      	ldr	r5, [pc, #20]	; (800d064 <_close_r+0x1c>)
 800d04e:	4604      	mov	r4, r0
 800d050:	4608      	mov	r0, r1
 800d052:	602b      	str	r3, [r5, #0]
 800d054:	f7f6 f966 	bl	8003324 <_close>
 800d058:	1c43      	adds	r3, r0, #1
 800d05a:	d102      	bne.n	800d062 <_close_r+0x1a>
 800d05c:	682b      	ldr	r3, [r5, #0]
 800d05e:	b103      	cbz	r3, 800d062 <_close_r+0x1a>
 800d060:	6023      	str	r3, [r4, #0]
 800d062:	bd38      	pop	{r3, r4, r5, pc}
 800d064:	200034c8 	.word	0x200034c8

0800d068 <_reclaim_reent>:
 800d068:	4b29      	ldr	r3, [pc, #164]	; (800d110 <_reclaim_reent+0xa8>)
 800d06a:	b570      	push	{r4, r5, r6, lr}
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	4604      	mov	r4, r0
 800d070:	4283      	cmp	r3, r0
 800d072:	d04b      	beq.n	800d10c <_reclaim_reent+0xa4>
 800d074:	69c3      	ldr	r3, [r0, #28]
 800d076:	b143      	cbz	r3, 800d08a <_reclaim_reent+0x22>
 800d078:	68db      	ldr	r3, [r3, #12]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d144      	bne.n	800d108 <_reclaim_reent+0xa0>
 800d07e:	69e3      	ldr	r3, [r4, #28]
 800d080:	6819      	ldr	r1, [r3, #0]
 800d082:	b111      	cbz	r1, 800d08a <_reclaim_reent+0x22>
 800d084:	4620      	mov	r0, r4
 800d086:	f000 ff8b 	bl	800dfa0 <_free_r>
 800d08a:	6961      	ldr	r1, [r4, #20]
 800d08c:	b111      	cbz	r1, 800d094 <_reclaim_reent+0x2c>
 800d08e:	4620      	mov	r0, r4
 800d090:	f000 ff86 	bl	800dfa0 <_free_r>
 800d094:	69e1      	ldr	r1, [r4, #28]
 800d096:	b111      	cbz	r1, 800d09e <_reclaim_reent+0x36>
 800d098:	4620      	mov	r0, r4
 800d09a:	f000 ff81 	bl	800dfa0 <_free_r>
 800d09e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d0a0:	b111      	cbz	r1, 800d0a8 <_reclaim_reent+0x40>
 800d0a2:	4620      	mov	r0, r4
 800d0a4:	f000 ff7c 	bl	800dfa0 <_free_r>
 800d0a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0aa:	b111      	cbz	r1, 800d0b2 <_reclaim_reent+0x4a>
 800d0ac:	4620      	mov	r0, r4
 800d0ae:	f000 ff77 	bl	800dfa0 <_free_r>
 800d0b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d0b4:	b111      	cbz	r1, 800d0bc <_reclaim_reent+0x54>
 800d0b6:	4620      	mov	r0, r4
 800d0b8:	f000 ff72 	bl	800dfa0 <_free_r>
 800d0bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d0be:	b111      	cbz	r1, 800d0c6 <_reclaim_reent+0x5e>
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	f000 ff6d 	bl	800dfa0 <_free_r>
 800d0c6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d0c8:	b111      	cbz	r1, 800d0d0 <_reclaim_reent+0x68>
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	f000 ff68 	bl	800dfa0 <_free_r>
 800d0d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d0d2:	b111      	cbz	r1, 800d0da <_reclaim_reent+0x72>
 800d0d4:	4620      	mov	r0, r4
 800d0d6:	f000 ff63 	bl	800dfa0 <_free_r>
 800d0da:	6a23      	ldr	r3, [r4, #32]
 800d0dc:	b1b3      	cbz	r3, 800d10c <_reclaim_reent+0xa4>
 800d0de:	4620      	mov	r0, r4
 800d0e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d0e4:	4718      	bx	r3
 800d0e6:	5949      	ldr	r1, [r1, r5]
 800d0e8:	b941      	cbnz	r1, 800d0fc <_reclaim_reent+0x94>
 800d0ea:	3504      	adds	r5, #4
 800d0ec:	69e3      	ldr	r3, [r4, #28]
 800d0ee:	2d80      	cmp	r5, #128	; 0x80
 800d0f0:	68d9      	ldr	r1, [r3, #12]
 800d0f2:	d1f8      	bne.n	800d0e6 <_reclaim_reent+0x7e>
 800d0f4:	4620      	mov	r0, r4
 800d0f6:	f000 ff53 	bl	800dfa0 <_free_r>
 800d0fa:	e7c0      	b.n	800d07e <_reclaim_reent+0x16>
 800d0fc:	680e      	ldr	r6, [r1, #0]
 800d0fe:	4620      	mov	r0, r4
 800d100:	f000 ff4e 	bl	800dfa0 <_free_r>
 800d104:	4631      	mov	r1, r6
 800d106:	e7ef      	b.n	800d0e8 <_reclaim_reent+0x80>
 800d108:	2500      	movs	r5, #0
 800d10a:	e7ef      	b.n	800d0ec <_reclaim_reent+0x84>
 800d10c:	bd70      	pop	{r4, r5, r6, pc}
 800d10e:	bf00      	nop
 800d110:	200001e0 	.word	0x200001e0

0800d114 <_lseek_r>:
 800d114:	b538      	push	{r3, r4, r5, lr}
 800d116:	4604      	mov	r4, r0
 800d118:	4608      	mov	r0, r1
 800d11a:	4611      	mov	r1, r2
 800d11c:	2200      	movs	r2, #0
 800d11e:	4d05      	ldr	r5, [pc, #20]	; (800d134 <_lseek_r+0x20>)
 800d120:	602a      	str	r2, [r5, #0]
 800d122:	461a      	mov	r2, r3
 800d124:	f7f6 f922 	bl	800336c <_lseek>
 800d128:	1c43      	adds	r3, r0, #1
 800d12a:	d102      	bne.n	800d132 <_lseek_r+0x1e>
 800d12c:	682b      	ldr	r3, [r5, #0]
 800d12e:	b103      	cbz	r3, 800d132 <_lseek_r+0x1e>
 800d130:	6023      	str	r3, [r4, #0]
 800d132:	bd38      	pop	{r3, r4, r5, pc}
 800d134:	200034c8 	.word	0x200034c8

0800d138 <_read_r>:
 800d138:	b538      	push	{r3, r4, r5, lr}
 800d13a:	4604      	mov	r4, r0
 800d13c:	4608      	mov	r0, r1
 800d13e:	4611      	mov	r1, r2
 800d140:	2200      	movs	r2, #0
 800d142:	4d05      	ldr	r5, [pc, #20]	; (800d158 <_read_r+0x20>)
 800d144:	602a      	str	r2, [r5, #0]
 800d146:	461a      	mov	r2, r3
 800d148:	f7f6 f8b3 	bl	80032b2 <_read>
 800d14c:	1c43      	adds	r3, r0, #1
 800d14e:	d102      	bne.n	800d156 <_read_r+0x1e>
 800d150:	682b      	ldr	r3, [r5, #0]
 800d152:	b103      	cbz	r3, 800d156 <_read_r+0x1e>
 800d154:	6023      	str	r3, [r4, #0]
 800d156:	bd38      	pop	{r3, r4, r5, pc}
 800d158:	200034c8 	.word	0x200034c8

0800d15c <_sbrk_r>:
 800d15c:	b538      	push	{r3, r4, r5, lr}
 800d15e:	2300      	movs	r3, #0
 800d160:	4d05      	ldr	r5, [pc, #20]	; (800d178 <_sbrk_r+0x1c>)
 800d162:	4604      	mov	r4, r0
 800d164:	4608      	mov	r0, r1
 800d166:	602b      	str	r3, [r5, #0]
 800d168:	f7f6 f90c 	bl	8003384 <_sbrk>
 800d16c:	1c43      	adds	r3, r0, #1
 800d16e:	d102      	bne.n	800d176 <_sbrk_r+0x1a>
 800d170:	682b      	ldr	r3, [r5, #0]
 800d172:	b103      	cbz	r3, 800d176 <_sbrk_r+0x1a>
 800d174:	6023      	str	r3, [r4, #0]
 800d176:	bd38      	pop	{r3, r4, r5, pc}
 800d178:	200034c8 	.word	0x200034c8

0800d17c <_write_r>:
 800d17c:	b538      	push	{r3, r4, r5, lr}
 800d17e:	4604      	mov	r4, r0
 800d180:	4608      	mov	r0, r1
 800d182:	4611      	mov	r1, r2
 800d184:	2200      	movs	r2, #0
 800d186:	4d05      	ldr	r5, [pc, #20]	; (800d19c <_write_r+0x20>)
 800d188:	602a      	str	r2, [r5, #0]
 800d18a:	461a      	mov	r2, r3
 800d18c:	f7f6 f8ae 	bl	80032ec <_write>
 800d190:	1c43      	adds	r3, r0, #1
 800d192:	d102      	bne.n	800d19a <_write_r+0x1e>
 800d194:	682b      	ldr	r3, [r5, #0]
 800d196:	b103      	cbz	r3, 800d19a <_write_r+0x1e>
 800d198:	6023      	str	r3, [r4, #0]
 800d19a:	bd38      	pop	{r3, r4, r5, pc}
 800d19c:	200034c8 	.word	0x200034c8

0800d1a0 <__errno>:
 800d1a0:	4b01      	ldr	r3, [pc, #4]	; (800d1a8 <__errno+0x8>)
 800d1a2:	6818      	ldr	r0, [r3, #0]
 800d1a4:	4770      	bx	lr
 800d1a6:	bf00      	nop
 800d1a8:	200001e0 	.word	0x200001e0

0800d1ac <__libc_init_array>:
 800d1ac:	b570      	push	{r4, r5, r6, lr}
 800d1ae:	2600      	movs	r6, #0
 800d1b0:	4d0c      	ldr	r5, [pc, #48]	; (800d1e4 <__libc_init_array+0x38>)
 800d1b2:	4c0d      	ldr	r4, [pc, #52]	; (800d1e8 <__libc_init_array+0x3c>)
 800d1b4:	1b64      	subs	r4, r4, r5
 800d1b6:	10a4      	asrs	r4, r4, #2
 800d1b8:	42a6      	cmp	r6, r4
 800d1ba:	d109      	bne.n	800d1d0 <__libc_init_array+0x24>
 800d1bc:	f003 f8fa 	bl	80103b4 <_init>
 800d1c0:	2600      	movs	r6, #0
 800d1c2:	4d0a      	ldr	r5, [pc, #40]	; (800d1ec <__libc_init_array+0x40>)
 800d1c4:	4c0a      	ldr	r4, [pc, #40]	; (800d1f0 <__libc_init_array+0x44>)
 800d1c6:	1b64      	subs	r4, r4, r5
 800d1c8:	10a4      	asrs	r4, r4, #2
 800d1ca:	42a6      	cmp	r6, r4
 800d1cc:	d105      	bne.n	800d1da <__libc_init_array+0x2e>
 800d1ce:	bd70      	pop	{r4, r5, r6, pc}
 800d1d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1d4:	4798      	blx	r3
 800d1d6:	3601      	adds	r6, #1
 800d1d8:	e7ee      	b.n	800d1b8 <__libc_init_array+0xc>
 800d1da:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1de:	4798      	blx	r3
 800d1e0:	3601      	adds	r6, #1
 800d1e2:	e7f2      	b.n	800d1ca <__libc_init_array+0x1e>
 800d1e4:	08010cec 	.word	0x08010cec
 800d1e8:	08010cec 	.word	0x08010cec
 800d1ec:	08010cec 	.word	0x08010cec
 800d1f0:	08010cf0 	.word	0x08010cf0

0800d1f4 <__retarget_lock_init_recursive>:
 800d1f4:	4770      	bx	lr

0800d1f6 <__retarget_lock_acquire>:
 800d1f6:	4770      	bx	lr

0800d1f8 <__retarget_lock_acquire_recursive>:
 800d1f8:	4770      	bx	lr

0800d1fa <__retarget_lock_release>:
 800d1fa:	4770      	bx	lr

0800d1fc <__retarget_lock_release_recursive>:
 800d1fc:	4770      	bx	lr

0800d1fe <strcpy>:
 800d1fe:	4603      	mov	r3, r0
 800d200:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d204:	f803 2b01 	strb.w	r2, [r3], #1
 800d208:	2a00      	cmp	r2, #0
 800d20a:	d1f9      	bne.n	800d200 <strcpy+0x2>
 800d20c:	4770      	bx	lr

0800d20e <memchr>:
 800d20e:	4603      	mov	r3, r0
 800d210:	b510      	push	{r4, lr}
 800d212:	b2c9      	uxtb	r1, r1
 800d214:	4402      	add	r2, r0
 800d216:	4293      	cmp	r3, r2
 800d218:	4618      	mov	r0, r3
 800d21a:	d101      	bne.n	800d220 <memchr+0x12>
 800d21c:	2000      	movs	r0, #0
 800d21e:	e003      	b.n	800d228 <memchr+0x1a>
 800d220:	7804      	ldrb	r4, [r0, #0]
 800d222:	3301      	adds	r3, #1
 800d224:	428c      	cmp	r4, r1
 800d226:	d1f6      	bne.n	800d216 <memchr+0x8>
 800d228:	bd10      	pop	{r4, pc}

0800d22a <memcpy>:
 800d22a:	440a      	add	r2, r1
 800d22c:	4291      	cmp	r1, r2
 800d22e:	f100 33ff 	add.w	r3, r0, #4294967295
 800d232:	d100      	bne.n	800d236 <memcpy+0xc>
 800d234:	4770      	bx	lr
 800d236:	b510      	push	{r4, lr}
 800d238:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d23c:	4291      	cmp	r1, r2
 800d23e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d242:	d1f9      	bne.n	800d238 <memcpy+0xe>
 800d244:	bd10      	pop	{r4, pc}
	...

0800d248 <nan>:
 800d248:	2000      	movs	r0, #0
 800d24a:	4901      	ldr	r1, [pc, #4]	; (800d250 <nan+0x8>)
 800d24c:	4770      	bx	lr
 800d24e:	bf00      	nop
 800d250:	7ff80000 	.word	0x7ff80000

0800d254 <nanf>:
 800d254:	4800      	ldr	r0, [pc, #0]	; (800d258 <nanf+0x4>)
 800d256:	4770      	bx	lr
 800d258:	7fc00000 	.word	0x7fc00000

0800d25c <__assert_func>:
 800d25c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d25e:	4614      	mov	r4, r2
 800d260:	461a      	mov	r2, r3
 800d262:	4b09      	ldr	r3, [pc, #36]	; (800d288 <__assert_func+0x2c>)
 800d264:	4605      	mov	r5, r0
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	68d8      	ldr	r0, [r3, #12]
 800d26a:	b14c      	cbz	r4, 800d280 <__assert_func+0x24>
 800d26c:	4b07      	ldr	r3, [pc, #28]	; (800d28c <__assert_func+0x30>)
 800d26e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d272:	9100      	str	r1, [sp, #0]
 800d274:	462b      	mov	r3, r5
 800d276:	4906      	ldr	r1, [pc, #24]	; (800d290 <__assert_func+0x34>)
 800d278:	f002 f9b4 	bl	800f5e4 <fiprintf>
 800d27c:	f002 fa0c 	bl	800f698 <abort>
 800d280:	4b04      	ldr	r3, [pc, #16]	; (800d294 <__assert_func+0x38>)
 800d282:	461c      	mov	r4, r3
 800d284:	e7f3      	b.n	800d26e <__assert_func+0x12>
 800d286:	bf00      	nop
 800d288:	200001e0 	.word	0x200001e0
 800d28c:	080109f2 	.word	0x080109f2
 800d290:	080109ff 	.word	0x080109ff
 800d294:	08010a2d 	.word	0x08010a2d

0800d298 <div>:
 800d298:	b510      	push	{r4, lr}
 800d29a:	fb91 f4f2 	sdiv	r4, r1, r2
 800d29e:	2900      	cmp	r1, #0
 800d2a0:	fb02 1314 	mls	r3, r2, r4, r1
 800d2a4:	db06      	blt.n	800d2b4 <div+0x1c>
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	da01      	bge.n	800d2ae <div+0x16>
 800d2aa:	3401      	adds	r4, #1
 800d2ac:	1a9b      	subs	r3, r3, r2
 800d2ae:	e9c0 4300 	strd	r4, r3, [r0]
 800d2b2:	bd10      	pop	{r4, pc}
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	bfc4      	itt	gt
 800d2b8:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800d2bc:	189b      	addgt	r3, r3, r2
 800d2be:	e7f6      	b.n	800d2ae <div+0x16>

0800d2c0 <quorem>:
 800d2c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2c4:	6903      	ldr	r3, [r0, #16]
 800d2c6:	690c      	ldr	r4, [r1, #16]
 800d2c8:	4607      	mov	r7, r0
 800d2ca:	42a3      	cmp	r3, r4
 800d2cc:	db7f      	blt.n	800d3ce <quorem+0x10e>
 800d2ce:	3c01      	subs	r4, #1
 800d2d0:	f100 0514 	add.w	r5, r0, #20
 800d2d4:	f101 0814 	add.w	r8, r1, #20
 800d2d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d2dc:	9301      	str	r3, [sp, #4]
 800d2de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d2e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d2e6:	3301      	adds	r3, #1
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	fbb2 f6f3 	udiv	r6, r2, r3
 800d2ee:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d2f2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d2f6:	d331      	bcc.n	800d35c <quorem+0x9c>
 800d2f8:	f04f 0e00 	mov.w	lr, #0
 800d2fc:	4640      	mov	r0, r8
 800d2fe:	46ac      	mov	ip, r5
 800d300:	46f2      	mov	sl, lr
 800d302:	f850 2b04 	ldr.w	r2, [r0], #4
 800d306:	b293      	uxth	r3, r2
 800d308:	fb06 e303 	mla	r3, r6, r3, lr
 800d30c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d310:	0c1a      	lsrs	r2, r3, #16
 800d312:	b29b      	uxth	r3, r3
 800d314:	fb06 220e 	mla	r2, r6, lr, r2
 800d318:	ebaa 0303 	sub.w	r3, sl, r3
 800d31c:	f8dc a000 	ldr.w	sl, [ip]
 800d320:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d324:	fa1f fa8a 	uxth.w	sl, sl
 800d328:	4453      	add	r3, sl
 800d32a:	f8dc a000 	ldr.w	sl, [ip]
 800d32e:	b292      	uxth	r2, r2
 800d330:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d334:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d338:	b29b      	uxth	r3, r3
 800d33a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d33e:	4581      	cmp	r9, r0
 800d340:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d344:	f84c 3b04 	str.w	r3, [ip], #4
 800d348:	d2db      	bcs.n	800d302 <quorem+0x42>
 800d34a:	f855 300b 	ldr.w	r3, [r5, fp]
 800d34e:	b92b      	cbnz	r3, 800d35c <quorem+0x9c>
 800d350:	9b01      	ldr	r3, [sp, #4]
 800d352:	3b04      	subs	r3, #4
 800d354:	429d      	cmp	r5, r3
 800d356:	461a      	mov	r2, r3
 800d358:	d32d      	bcc.n	800d3b6 <quorem+0xf6>
 800d35a:	613c      	str	r4, [r7, #16]
 800d35c:	4638      	mov	r0, r7
 800d35e:	f001 fcdb 	bl	800ed18 <__mcmp>
 800d362:	2800      	cmp	r0, #0
 800d364:	db23      	blt.n	800d3ae <quorem+0xee>
 800d366:	4629      	mov	r1, r5
 800d368:	2000      	movs	r0, #0
 800d36a:	3601      	adds	r6, #1
 800d36c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d370:	f8d1 c000 	ldr.w	ip, [r1]
 800d374:	b293      	uxth	r3, r2
 800d376:	1ac3      	subs	r3, r0, r3
 800d378:	0c12      	lsrs	r2, r2, #16
 800d37a:	fa1f f08c 	uxth.w	r0, ip
 800d37e:	4403      	add	r3, r0
 800d380:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d384:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d388:	b29b      	uxth	r3, r3
 800d38a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d38e:	45c1      	cmp	r9, r8
 800d390:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d394:	f841 3b04 	str.w	r3, [r1], #4
 800d398:	d2e8      	bcs.n	800d36c <quorem+0xac>
 800d39a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d39e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3a2:	b922      	cbnz	r2, 800d3ae <quorem+0xee>
 800d3a4:	3b04      	subs	r3, #4
 800d3a6:	429d      	cmp	r5, r3
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	d30a      	bcc.n	800d3c2 <quorem+0x102>
 800d3ac:	613c      	str	r4, [r7, #16]
 800d3ae:	4630      	mov	r0, r6
 800d3b0:	b003      	add	sp, #12
 800d3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3b6:	6812      	ldr	r2, [r2, #0]
 800d3b8:	3b04      	subs	r3, #4
 800d3ba:	2a00      	cmp	r2, #0
 800d3bc:	d1cd      	bne.n	800d35a <quorem+0x9a>
 800d3be:	3c01      	subs	r4, #1
 800d3c0:	e7c8      	b.n	800d354 <quorem+0x94>
 800d3c2:	6812      	ldr	r2, [r2, #0]
 800d3c4:	3b04      	subs	r3, #4
 800d3c6:	2a00      	cmp	r2, #0
 800d3c8:	d1f0      	bne.n	800d3ac <quorem+0xec>
 800d3ca:	3c01      	subs	r4, #1
 800d3cc:	e7eb      	b.n	800d3a6 <quorem+0xe6>
 800d3ce:	2000      	movs	r0, #0
 800d3d0:	e7ee      	b.n	800d3b0 <quorem+0xf0>
 800d3d2:	0000      	movs	r0, r0
 800d3d4:	0000      	movs	r0, r0
	...

0800d3d8 <_dtoa_r>:
 800d3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3dc:	4616      	mov	r6, r2
 800d3de:	461f      	mov	r7, r3
 800d3e0:	69c4      	ldr	r4, [r0, #28]
 800d3e2:	b099      	sub	sp, #100	; 0x64
 800d3e4:	4605      	mov	r5, r0
 800d3e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d3ea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800d3ee:	b974      	cbnz	r4, 800d40e <_dtoa_r+0x36>
 800d3f0:	2010      	movs	r0, #16
 800d3f2:	f7fd faf3 	bl	800a9dc <malloc>
 800d3f6:	4602      	mov	r2, r0
 800d3f8:	61e8      	str	r0, [r5, #28]
 800d3fa:	b920      	cbnz	r0, 800d406 <_dtoa_r+0x2e>
 800d3fc:	21ef      	movs	r1, #239	; 0xef
 800d3fe:	4bac      	ldr	r3, [pc, #688]	; (800d6b0 <_dtoa_r+0x2d8>)
 800d400:	48ac      	ldr	r0, [pc, #688]	; (800d6b4 <_dtoa_r+0x2dc>)
 800d402:	f7ff ff2b 	bl	800d25c <__assert_func>
 800d406:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d40a:	6004      	str	r4, [r0, #0]
 800d40c:	60c4      	str	r4, [r0, #12]
 800d40e:	69eb      	ldr	r3, [r5, #28]
 800d410:	6819      	ldr	r1, [r3, #0]
 800d412:	b151      	cbz	r1, 800d42a <_dtoa_r+0x52>
 800d414:	685a      	ldr	r2, [r3, #4]
 800d416:	2301      	movs	r3, #1
 800d418:	4093      	lsls	r3, r2
 800d41a:	604a      	str	r2, [r1, #4]
 800d41c:	608b      	str	r3, [r1, #8]
 800d41e:	4628      	mov	r0, r5
 800d420:	f001 f9f6 	bl	800e810 <_Bfree>
 800d424:	2200      	movs	r2, #0
 800d426:	69eb      	ldr	r3, [r5, #28]
 800d428:	601a      	str	r2, [r3, #0]
 800d42a:	1e3b      	subs	r3, r7, #0
 800d42c:	bfaf      	iteee	ge
 800d42e:	2300      	movge	r3, #0
 800d430:	2201      	movlt	r2, #1
 800d432:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d436:	9305      	strlt	r3, [sp, #20]
 800d438:	bfa8      	it	ge
 800d43a:	f8c8 3000 	strge.w	r3, [r8]
 800d43e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800d442:	4b9d      	ldr	r3, [pc, #628]	; (800d6b8 <_dtoa_r+0x2e0>)
 800d444:	bfb8      	it	lt
 800d446:	f8c8 2000 	strlt.w	r2, [r8]
 800d44a:	ea33 0309 	bics.w	r3, r3, r9
 800d44e:	d119      	bne.n	800d484 <_dtoa_r+0xac>
 800d450:	f242 730f 	movw	r3, #9999	; 0x270f
 800d454:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d456:	6013      	str	r3, [r2, #0]
 800d458:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d45c:	4333      	orrs	r3, r6
 800d45e:	f000 8589 	beq.w	800df74 <_dtoa_r+0xb9c>
 800d462:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d464:	b953      	cbnz	r3, 800d47c <_dtoa_r+0xa4>
 800d466:	4b95      	ldr	r3, [pc, #596]	; (800d6bc <_dtoa_r+0x2e4>)
 800d468:	e023      	b.n	800d4b2 <_dtoa_r+0xda>
 800d46a:	4b95      	ldr	r3, [pc, #596]	; (800d6c0 <_dtoa_r+0x2e8>)
 800d46c:	9303      	str	r3, [sp, #12]
 800d46e:	3308      	adds	r3, #8
 800d470:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d472:	6013      	str	r3, [r2, #0]
 800d474:	9803      	ldr	r0, [sp, #12]
 800d476:	b019      	add	sp, #100	; 0x64
 800d478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d47c:	4b8f      	ldr	r3, [pc, #572]	; (800d6bc <_dtoa_r+0x2e4>)
 800d47e:	9303      	str	r3, [sp, #12]
 800d480:	3303      	adds	r3, #3
 800d482:	e7f5      	b.n	800d470 <_dtoa_r+0x98>
 800d484:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d488:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800d48c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d490:	2200      	movs	r2, #0
 800d492:	2300      	movs	r3, #0
 800d494:	f7f3 fb02 	bl	8000a9c <__aeabi_dcmpeq>
 800d498:	4680      	mov	r8, r0
 800d49a:	b160      	cbz	r0, 800d4b6 <_dtoa_r+0xde>
 800d49c:	2301      	movs	r3, #1
 800d49e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d4a0:	6013      	str	r3, [r2, #0]
 800d4a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	f000 8562 	beq.w	800df6e <_dtoa_r+0xb96>
 800d4aa:	4b86      	ldr	r3, [pc, #536]	; (800d6c4 <_dtoa_r+0x2ec>)
 800d4ac:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d4ae:	6013      	str	r3, [r2, #0]
 800d4b0:	3b01      	subs	r3, #1
 800d4b2:	9303      	str	r3, [sp, #12]
 800d4b4:	e7de      	b.n	800d474 <_dtoa_r+0x9c>
 800d4b6:	ab16      	add	r3, sp, #88	; 0x58
 800d4b8:	9301      	str	r3, [sp, #4]
 800d4ba:	ab17      	add	r3, sp, #92	; 0x5c
 800d4bc:	9300      	str	r3, [sp, #0]
 800d4be:	4628      	mov	r0, r5
 800d4c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d4c4:	f001 fd38 	bl	800ef38 <__d2b>
 800d4c8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d4cc:	4682      	mov	sl, r0
 800d4ce:	2c00      	cmp	r4, #0
 800d4d0:	d07e      	beq.n	800d5d0 <_dtoa_r+0x1f8>
 800d4d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d4d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4d8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800d4dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d4e0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d4e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d4e8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800d4ec:	4619      	mov	r1, r3
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	4b75      	ldr	r3, [pc, #468]	; (800d6c8 <_dtoa_r+0x2f0>)
 800d4f2:	f7f2 feb3 	bl	800025c <__aeabi_dsub>
 800d4f6:	a368      	add	r3, pc, #416	; (adr r3, 800d698 <_dtoa_r+0x2c0>)
 800d4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fc:	f7f3 f866 	bl	80005cc <__aeabi_dmul>
 800d500:	a367      	add	r3, pc, #412	; (adr r3, 800d6a0 <_dtoa_r+0x2c8>)
 800d502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d506:	f7f2 feab 	bl	8000260 <__adddf3>
 800d50a:	4606      	mov	r6, r0
 800d50c:	4620      	mov	r0, r4
 800d50e:	460f      	mov	r7, r1
 800d510:	f7f2 fff2 	bl	80004f8 <__aeabi_i2d>
 800d514:	a364      	add	r3, pc, #400	; (adr r3, 800d6a8 <_dtoa_r+0x2d0>)
 800d516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51a:	f7f3 f857 	bl	80005cc <__aeabi_dmul>
 800d51e:	4602      	mov	r2, r0
 800d520:	460b      	mov	r3, r1
 800d522:	4630      	mov	r0, r6
 800d524:	4639      	mov	r1, r7
 800d526:	f7f2 fe9b 	bl	8000260 <__adddf3>
 800d52a:	4606      	mov	r6, r0
 800d52c:	460f      	mov	r7, r1
 800d52e:	f7f3 fafd 	bl	8000b2c <__aeabi_d2iz>
 800d532:	2200      	movs	r2, #0
 800d534:	4683      	mov	fp, r0
 800d536:	2300      	movs	r3, #0
 800d538:	4630      	mov	r0, r6
 800d53a:	4639      	mov	r1, r7
 800d53c:	f7f3 fab8 	bl	8000ab0 <__aeabi_dcmplt>
 800d540:	b148      	cbz	r0, 800d556 <_dtoa_r+0x17e>
 800d542:	4658      	mov	r0, fp
 800d544:	f7f2 ffd8 	bl	80004f8 <__aeabi_i2d>
 800d548:	4632      	mov	r2, r6
 800d54a:	463b      	mov	r3, r7
 800d54c:	f7f3 faa6 	bl	8000a9c <__aeabi_dcmpeq>
 800d550:	b908      	cbnz	r0, 800d556 <_dtoa_r+0x17e>
 800d552:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d556:	f1bb 0f16 	cmp.w	fp, #22
 800d55a:	d857      	bhi.n	800d60c <_dtoa_r+0x234>
 800d55c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d560:	4b5a      	ldr	r3, [pc, #360]	; (800d6cc <_dtoa_r+0x2f4>)
 800d562:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d56a:	f7f3 faa1 	bl	8000ab0 <__aeabi_dcmplt>
 800d56e:	2800      	cmp	r0, #0
 800d570:	d04e      	beq.n	800d610 <_dtoa_r+0x238>
 800d572:	2300      	movs	r3, #0
 800d574:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d578:	930f      	str	r3, [sp, #60]	; 0x3c
 800d57a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d57c:	1b1b      	subs	r3, r3, r4
 800d57e:	1e5a      	subs	r2, r3, #1
 800d580:	bf46      	itte	mi
 800d582:	f1c3 0901 	rsbmi	r9, r3, #1
 800d586:	2300      	movmi	r3, #0
 800d588:	f04f 0900 	movpl.w	r9, #0
 800d58c:	9209      	str	r2, [sp, #36]	; 0x24
 800d58e:	bf48      	it	mi
 800d590:	9309      	strmi	r3, [sp, #36]	; 0x24
 800d592:	f1bb 0f00 	cmp.w	fp, #0
 800d596:	db3d      	blt.n	800d614 <_dtoa_r+0x23c>
 800d598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d59a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800d59e:	445b      	add	r3, fp
 800d5a0:	9309      	str	r3, [sp, #36]	; 0x24
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	930a      	str	r3, [sp, #40]	; 0x28
 800d5a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d5a8:	2b09      	cmp	r3, #9
 800d5aa:	d867      	bhi.n	800d67c <_dtoa_r+0x2a4>
 800d5ac:	2b05      	cmp	r3, #5
 800d5ae:	bfc4      	itt	gt
 800d5b0:	3b04      	subgt	r3, #4
 800d5b2:	9322      	strgt	r3, [sp, #136]	; 0x88
 800d5b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d5b6:	bfc8      	it	gt
 800d5b8:	2400      	movgt	r4, #0
 800d5ba:	f1a3 0302 	sub.w	r3, r3, #2
 800d5be:	bfd8      	it	le
 800d5c0:	2401      	movle	r4, #1
 800d5c2:	2b03      	cmp	r3, #3
 800d5c4:	f200 8086 	bhi.w	800d6d4 <_dtoa_r+0x2fc>
 800d5c8:	e8df f003 	tbb	[pc, r3]
 800d5cc:	5637392c 	.word	0x5637392c
 800d5d0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800d5d4:	441c      	add	r4, r3
 800d5d6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800d5da:	2b20      	cmp	r3, #32
 800d5dc:	bfc1      	itttt	gt
 800d5de:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d5e2:	fa09 f903 	lslgt.w	r9, r9, r3
 800d5e6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800d5ea:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d5ee:	bfd6      	itet	le
 800d5f0:	f1c3 0320 	rsble	r3, r3, #32
 800d5f4:	ea49 0003 	orrgt.w	r0, r9, r3
 800d5f8:	fa06 f003 	lslle.w	r0, r6, r3
 800d5fc:	f7f2 ff6c 	bl	80004d8 <__aeabi_ui2d>
 800d600:	2201      	movs	r2, #1
 800d602:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d606:	3c01      	subs	r4, #1
 800d608:	9213      	str	r2, [sp, #76]	; 0x4c
 800d60a:	e76f      	b.n	800d4ec <_dtoa_r+0x114>
 800d60c:	2301      	movs	r3, #1
 800d60e:	e7b3      	b.n	800d578 <_dtoa_r+0x1a0>
 800d610:	900f      	str	r0, [sp, #60]	; 0x3c
 800d612:	e7b2      	b.n	800d57a <_dtoa_r+0x1a2>
 800d614:	f1cb 0300 	rsb	r3, fp, #0
 800d618:	930a      	str	r3, [sp, #40]	; 0x28
 800d61a:	2300      	movs	r3, #0
 800d61c:	eba9 090b 	sub.w	r9, r9, fp
 800d620:	930e      	str	r3, [sp, #56]	; 0x38
 800d622:	e7c0      	b.n	800d5a6 <_dtoa_r+0x1ce>
 800d624:	2300      	movs	r3, #0
 800d626:	930b      	str	r3, [sp, #44]	; 0x2c
 800d628:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	dc55      	bgt.n	800d6da <_dtoa_r+0x302>
 800d62e:	2301      	movs	r3, #1
 800d630:	461a      	mov	r2, r3
 800d632:	9306      	str	r3, [sp, #24]
 800d634:	9308      	str	r3, [sp, #32]
 800d636:	9223      	str	r2, [sp, #140]	; 0x8c
 800d638:	e00b      	b.n	800d652 <_dtoa_r+0x27a>
 800d63a:	2301      	movs	r3, #1
 800d63c:	e7f3      	b.n	800d626 <_dtoa_r+0x24e>
 800d63e:	2300      	movs	r3, #0
 800d640:	930b      	str	r3, [sp, #44]	; 0x2c
 800d642:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d644:	445b      	add	r3, fp
 800d646:	9306      	str	r3, [sp, #24]
 800d648:	3301      	adds	r3, #1
 800d64a:	2b01      	cmp	r3, #1
 800d64c:	9308      	str	r3, [sp, #32]
 800d64e:	bfb8      	it	lt
 800d650:	2301      	movlt	r3, #1
 800d652:	2100      	movs	r1, #0
 800d654:	2204      	movs	r2, #4
 800d656:	69e8      	ldr	r0, [r5, #28]
 800d658:	f102 0614 	add.w	r6, r2, #20
 800d65c:	429e      	cmp	r6, r3
 800d65e:	d940      	bls.n	800d6e2 <_dtoa_r+0x30a>
 800d660:	6041      	str	r1, [r0, #4]
 800d662:	4628      	mov	r0, r5
 800d664:	f001 f894 	bl	800e790 <_Balloc>
 800d668:	9003      	str	r0, [sp, #12]
 800d66a:	2800      	cmp	r0, #0
 800d66c:	d13c      	bne.n	800d6e8 <_dtoa_r+0x310>
 800d66e:	4602      	mov	r2, r0
 800d670:	f240 11af 	movw	r1, #431	; 0x1af
 800d674:	4b16      	ldr	r3, [pc, #88]	; (800d6d0 <_dtoa_r+0x2f8>)
 800d676:	e6c3      	b.n	800d400 <_dtoa_r+0x28>
 800d678:	2301      	movs	r3, #1
 800d67a:	e7e1      	b.n	800d640 <_dtoa_r+0x268>
 800d67c:	2401      	movs	r4, #1
 800d67e:	2300      	movs	r3, #0
 800d680:	940b      	str	r4, [sp, #44]	; 0x2c
 800d682:	9322      	str	r3, [sp, #136]	; 0x88
 800d684:	f04f 33ff 	mov.w	r3, #4294967295
 800d688:	2200      	movs	r2, #0
 800d68a:	9306      	str	r3, [sp, #24]
 800d68c:	9308      	str	r3, [sp, #32]
 800d68e:	2312      	movs	r3, #18
 800d690:	e7d1      	b.n	800d636 <_dtoa_r+0x25e>
 800d692:	bf00      	nop
 800d694:	f3af 8000 	nop.w
 800d698:	636f4361 	.word	0x636f4361
 800d69c:	3fd287a7 	.word	0x3fd287a7
 800d6a0:	8b60c8b3 	.word	0x8b60c8b3
 800d6a4:	3fc68a28 	.word	0x3fc68a28
 800d6a8:	509f79fb 	.word	0x509f79fb
 800d6ac:	3fd34413 	.word	0x3fd34413
 800d6b0:	080108cb 	.word	0x080108cb
 800d6b4:	08010a3b 	.word	0x08010a3b
 800d6b8:	7ff00000 	.word	0x7ff00000
 800d6bc:	08010a37 	.word	0x08010a37
 800d6c0:	08010a2e 	.word	0x08010a2e
 800d6c4:	08010ce7 	.word	0x08010ce7
 800d6c8:	3ff80000 	.word	0x3ff80000
 800d6cc:	08010b88 	.word	0x08010b88
 800d6d0:	08010a93 	.word	0x08010a93
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d6d8:	e7d4      	b.n	800d684 <_dtoa_r+0x2ac>
 800d6da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d6dc:	9306      	str	r3, [sp, #24]
 800d6de:	9308      	str	r3, [sp, #32]
 800d6e0:	e7b7      	b.n	800d652 <_dtoa_r+0x27a>
 800d6e2:	3101      	adds	r1, #1
 800d6e4:	0052      	lsls	r2, r2, #1
 800d6e6:	e7b7      	b.n	800d658 <_dtoa_r+0x280>
 800d6e8:	69eb      	ldr	r3, [r5, #28]
 800d6ea:	9a03      	ldr	r2, [sp, #12]
 800d6ec:	601a      	str	r2, [r3, #0]
 800d6ee:	9b08      	ldr	r3, [sp, #32]
 800d6f0:	2b0e      	cmp	r3, #14
 800d6f2:	f200 80a8 	bhi.w	800d846 <_dtoa_r+0x46e>
 800d6f6:	2c00      	cmp	r4, #0
 800d6f8:	f000 80a5 	beq.w	800d846 <_dtoa_r+0x46e>
 800d6fc:	f1bb 0f00 	cmp.w	fp, #0
 800d700:	dd34      	ble.n	800d76c <_dtoa_r+0x394>
 800d702:	4b9a      	ldr	r3, [pc, #616]	; (800d96c <_dtoa_r+0x594>)
 800d704:	f00b 020f 	and.w	r2, fp, #15
 800d708:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d70c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d710:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d714:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800d718:	ea4f 142b 	mov.w	r4, fp, asr #4
 800d71c:	d016      	beq.n	800d74c <_dtoa_r+0x374>
 800d71e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d722:	4b93      	ldr	r3, [pc, #588]	; (800d970 <_dtoa_r+0x598>)
 800d724:	2703      	movs	r7, #3
 800d726:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d72a:	f7f3 f879 	bl	8000820 <__aeabi_ddiv>
 800d72e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d732:	f004 040f 	and.w	r4, r4, #15
 800d736:	4e8e      	ldr	r6, [pc, #568]	; (800d970 <_dtoa_r+0x598>)
 800d738:	b954      	cbnz	r4, 800d750 <_dtoa_r+0x378>
 800d73a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d73e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d742:	f7f3 f86d 	bl	8000820 <__aeabi_ddiv>
 800d746:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d74a:	e029      	b.n	800d7a0 <_dtoa_r+0x3c8>
 800d74c:	2702      	movs	r7, #2
 800d74e:	e7f2      	b.n	800d736 <_dtoa_r+0x35e>
 800d750:	07e1      	lsls	r1, r4, #31
 800d752:	d508      	bpl.n	800d766 <_dtoa_r+0x38e>
 800d754:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d758:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d75c:	f7f2 ff36 	bl	80005cc <__aeabi_dmul>
 800d760:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d764:	3701      	adds	r7, #1
 800d766:	1064      	asrs	r4, r4, #1
 800d768:	3608      	adds	r6, #8
 800d76a:	e7e5      	b.n	800d738 <_dtoa_r+0x360>
 800d76c:	f000 80a5 	beq.w	800d8ba <_dtoa_r+0x4e2>
 800d770:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d774:	f1cb 0400 	rsb	r4, fp, #0
 800d778:	4b7c      	ldr	r3, [pc, #496]	; (800d96c <_dtoa_r+0x594>)
 800d77a:	f004 020f 	and.w	r2, r4, #15
 800d77e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d786:	f7f2 ff21 	bl	80005cc <__aeabi_dmul>
 800d78a:	2702      	movs	r7, #2
 800d78c:	2300      	movs	r3, #0
 800d78e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d792:	4e77      	ldr	r6, [pc, #476]	; (800d970 <_dtoa_r+0x598>)
 800d794:	1124      	asrs	r4, r4, #4
 800d796:	2c00      	cmp	r4, #0
 800d798:	f040 8084 	bne.w	800d8a4 <_dtoa_r+0x4cc>
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d1d2      	bne.n	800d746 <_dtoa_r+0x36e>
 800d7a0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d7a4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800d7a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	f000 8087 	beq.w	800d8be <_dtoa_r+0x4e6>
 800d7b0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	4b6f      	ldr	r3, [pc, #444]	; (800d974 <_dtoa_r+0x59c>)
 800d7b8:	f7f3 f97a 	bl	8000ab0 <__aeabi_dcmplt>
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	d07e      	beq.n	800d8be <_dtoa_r+0x4e6>
 800d7c0:	9b08      	ldr	r3, [sp, #32]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d07b      	beq.n	800d8be <_dtoa_r+0x4e6>
 800d7c6:	9b06      	ldr	r3, [sp, #24]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	dd38      	ble.n	800d83e <_dtoa_r+0x466>
 800d7cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	4b69      	ldr	r3, [pc, #420]	; (800d978 <_dtoa_r+0x5a0>)
 800d7d4:	f7f2 fefa 	bl	80005cc <__aeabi_dmul>
 800d7d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d7dc:	9c06      	ldr	r4, [sp, #24]
 800d7de:	f10b 38ff 	add.w	r8, fp, #4294967295
 800d7e2:	3701      	adds	r7, #1
 800d7e4:	4638      	mov	r0, r7
 800d7e6:	f7f2 fe87 	bl	80004f8 <__aeabi_i2d>
 800d7ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7ee:	f7f2 feed 	bl	80005cc <__aeabi_dmul>
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	4b61      	ldr	r3, [pc, #388]	; (800d97c <_dtoa_r+0x5a4>)
 800d7f6:	f7f2 fd33 	bl	8000260 <__adddf3>
 800d7fa:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d7fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d802:	9611      	str	r6, [sp, #68]	; 0x44
 800d804:	2c00      	cmp	r4, #0
 800d806:	d15d      	bne.n	800d8c4 <_dtoa_r+0x4ec>
 800d808:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d80c:	2200      	movs	r2, #0
 800d80e:	4b5c      	ldr	r3, [pc, #368]	; (800d980 <_dtoa_r+0x5a8>)
 800d810:	f7f2 fd24 	bl	800025c <__aeabi_dsub>
 800d814:	4602      	mov	r2, r0
 800d816:	460b      	mov	r3, r1
 800d818:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d81c:	4633      	mov	r3, r6
 800d81e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d820:	f7f3 f964 	bl	8000aec <__aeabi_dcmpgt>
 800d824:	2800      	cmp	r0, #0
 800d826:	f040 8295 	bne.w	800dd54 <_dtoa_r+0x97c>
 800d82a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d82e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d830:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d834:	f7f3 f93c 	bl	8000ab0 <__aeabi_dcmplt>
 800d838:	2800      	cmp	r0, #0
 800d83a:	f040 8289 	bne.w	800dd50 <_dtoa_r+0x978>
 800d83e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800d842:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d846:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d848:	2b00      	cmp	r3, #0
 800d84a:	f2c0 8151 	blt.w	800daf0 <_dtoa_r+0x718>
 800d84e:	f1bb 0f0e 	cmp.w	fp, #14
 800d852:	f300 814d 	bgt.w	800daf0 <_dtoa_r+0x718>
 800d856:	4b45      	ldr	r3, [pc, #276]	; (800d96c <_dtoa_r+0x594>)
 800d858:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d85c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d860:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800d864:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d866:	2b00      	cmp	r3, #0
 800d868:	f280 80da 	bge.w	800da20 <_dtoa_r+0x648>
 800d86c:	9b08      	ldr	r3, [sp, #32]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	f300 80d6 	bgt.w	800da20 <_dtoa_r+0x648>
 800d874:	f040 826b 	bne.w	800dd4e <_dtoa_r+0x976>
 800d878:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d87c:	2200      	movs	r2, #0
 800d87e:	4b40      	ldr	r3, [pc, #256]	; (800d980 <_dtoa_r+0x5a8>)
 800d880:	f7f2 fea4 	bl	80005cc <__aeabi_dmul>
 800d884:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d888:	f7f3 f926 	bl	8000ad8 <__aeabi_dcmpge>
 800d88c:	9c08      	ldr	r4, [sp, #32]
 800d88e:	4626      	mov	r6, r4
 800d890:	2800      	cmp	r0, #0
 800d892:	f040 8241 	bne.w	800dd18 <_dtoa_r+0x940>
 800d896:	2331      	movs	r3, #49	; 0x31
 800d898:	9f03      	ldr	r7, [sp, #12]
 800d89a:	f10b 0b01 	add.w	fp, fp, #1
 800d89e:	f807 3b01 	strb.w	r3, [r7], #1
 800d8a2:	e23d      	b.n	800dd20 <_dtoa_r+0x948>
 800d8a4:	07e2      	lsls	r2, r4, #31
 800d8a6:	d505      	bpl.n	800d8b4 <_dtoa_r+0x4dc>
 800d8a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d8ac:	f7f2 fe8e 	bl	80005cc <__aeabi_dmul>
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	3701      	adds	r7, #1
 800d8b4:	1064      	asrs	r4, r4, #1
 800d8b6:	3608      	adds	r6, #8
 800d8b8:	e76d      	b.n	800d796 <_dtoa_r+0x3be>
 800d8ba:	2702      	movs	r7, #2
 800d8bc:	e770      	b.n	800d7a0 <_dtoa_r+0x3c8>
 800d8be:	46d8      	mov	r8, fp
 800d8c0:	9c08      	ldr	r4, [sp, #32]
 800d8c2:	e78f      	b.n	800d7e4 <_dtoa_r+0x40c>
 800d8c4:	9903      	ldr	r1, [sp, #12]
 800d8c6:	4b29      	ldr	r3, [pc, #164]	; (800d96c <_dtoa_r+0x594>)
 800d8c8:	4421      	add	r1, r4
 800d8ca:	9112      	str	r1, [sp, #72]	; 0x48
 800d8cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d8ce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d8d2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800d8d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d8da:	2900      	cmp	r1, #0
 800d8dc:	d054      	beq.n	800d988 <_dtoa_r+0x5b0>
 800d8de:	2000      	movs	r0, #0
 800d8e0:	4928      	ldr	r1, [pc, #160]	; (800d984 <_dtoa_r+0x5ac>)
 800d8e2:	f7f2 ff9d 	bl	8000820 <__aeabi_ddiv>
 800d8e6:	463b      	mov	r3, r7
 800d8e8:	4632      	mov	r2, r6
 800d8ea:	f7f2 fcb7 	bl	800025c <__aeabi_dsub>
 800d8ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d8f2:	9f03      	ldr	r7, [sp, #12]
 800d8f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d8f8:	f7f3 f918 	bl	8000b2c <__aeabi_d2iz>
 800d8fc:	4604      	mov	r4, r0
 800d8fe:	f7f2 fdfb 	bl	80004f8 <__aeabi_i2d>
 800d902:	4602      	mov	r2, r0
 800d904:	460b      	mov	r3, r1
 800d906:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d90a:	f7f2 fca7 	bl	800025c <__aeabi_dsub>
 800d90e:	4602      	mov	r2, r0
 800d910:	460b      	mov	r3, r1
 800d912:	3430      	adds	r4, #48	; 0x30
 800d914:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d918:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d91c:	f807 4b01 	strb.w	r4, [r7], #1
 800d920:	f7f3 f8c6 	bl	8000ab0 <__aeabi_dcmplt>
 800d924:	2800      	cmp	r0, #0
 800d926:	d173      	bne.n	800da10 <_dtoa_r+0x638>
 800d928:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d92c:	2000      	movs	r0, #0
 800d92e:	4911      	ldr	r1, [pc, #68]	; (800d974 <_dtoa_r+0x59c>)
 800d930:	f7f2 fc94 	bl	800025c <__aeabi_dsub>
 800d934:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d938:	f7f3 f8ba 	bl	8000ab0 <__aeabi_dcmplt>
 800d93c:	2800      	cmp	r0, #0
 800d93e:	f040 80b6 	bne.w	800daae <_dtoa_r+0x6d6>
 800d942:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d944:	429f      	cmp	r7, r3
 800d946:	f43f af7a 	beq.w	800d83e <_dtoa_r+0x466>
 800d94a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d94e:	2200      	movs	r2, #0
 800d950:	4b09      	ldr	r3, [pc, #36]	; (800d978 <_dtoa_r+0x5a0>)
 800d952:	f7f2 fe3b 	bl	80005cc <__aeabi_dmul>
 800d956:	2200      	movs	r2, #0
 800d958:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d95c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d960:	4b05      	ldr	r3, [pc, #20]	; (800d978 <_dtoa_r+0x5a0>)
 800d962:	f7f2 fe33 	bl	80005cc <__aeabi_dmul>
 800d966:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d96a:	e7c3      	b.n	800d8f4 <_dtoa_r+0x51c>
 800d96c:	08010b88 	.word	0x08010b88
 800d970:	08010b60 	.word	0x08010b60
 800d974:	3ff00000 	.word	0x3ff00000
 800d978:	40240000 	.word	0x40240000
 800d97c:	401c0000 	.word	0x401c0000
 800d980:	40140000 	.word	0x40140000
 800d984:	3fe00000 	.word	0x3fe00000
 800d988:	4630      	mov	r0, r6
 800d98a:	4639      	mov	r1, r7
 800d98c:	f7f2 fe1e 	bl	80005cc <__aeabi_dmul>
 800d990:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d992:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d996:	9c03      	ldr	r4, [sp, #12]
 800d998:	9314      	str	r3, [sp, #80]	; 0x50
 800d99a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d99e:	f7f3 f8c5 	bl	8000b2c <__aeabi_d2iz>
 800d9a2:	9015      	str	r0, [sp, #84]	; 0x54
 800d9a4:	f7f2 fda8 	bl	80004f8 <__aeabi_i2d>
 800d9a8:	4602      	mov	r2, r0
 800d9aa:	460b      	mov	r3, r1
 800d9ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d9b0:	f7f2 fc54 	bl	800025c <__aeabi_dsub>
 800d9b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d9b6:	4606      	mov	r6, r0
 800d9b8:	3330      	adds	r3, #48	; 0x30
 800d9ba:	f804 3b01 	strb.w	r3, [r4], #1
 800d9be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d9c0:	460f      	mov	r7, r1
 800d9c2:	429c      	cmp	r4, r3
 800d9c4:	f04f 0200 	mov.w	r2, #0
 800d9c8:	d124      	bne.n	800da14 <_dtoa_r+0x63c>
 800d9ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d9ce:	4baf      	ldr	r3, [pc, #700]	; (800dc8c <_dtoa_r+0x8b4>)
 800d9d0:	f7f2 fc46 	bl	8000260 <__adddf3>
 800d9d4:	4602      	mov	r2, r0
 800d9d6:	460b      	mov	r3, r1
 800d9d8:	4630      	mov	r0, r6
 800d9da:	4639      	mov	r1, r7
 800d9dc:	f7f3 f886 	bl	8000aec <__aeabi_dcmpgt>
 800d9e0:	2800      	cmp	r0, #0
 800d9e2:	d163      	bne.n	800daac <_dtoa_r+0x6d4>
 800d9e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d9e8:	2000      	movs	r0, #0
 800d9ea:	49a8      	ldr	r1, [pc, #672]	; (800dc8c <_dtoa_r+0x8b4>)
 800d9ec:	f7f2 fc36 	bl	800025c <__aeabi_dsub>
 800d9f0:	4602      	mov	r2, r0
 800d9f2:	460b      	mov	r3, r1
 800d9f4:	4630      	mov	r0, r6
 800d9f6:	4639      	mov	r1, r7
 800d9f8:	f7f3 f85a 	bl	8000ab0 <__aeabi_dcmplt>
 800d9fc:	2800      	cmp	r0, #0
 800d9fe:	f43f af1e 	beq.w	800d83e <_dtoa_r+0x466>
 800da02:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800da04:	1e7b      	subs	r3, r7, #1
 800da06:	9314      	str	r3, [sp, #80]	; 0x50
 800da08:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800da0c:	2b30      	cmp	r3, #48	; 0x30
 800da0e:	d0f8      	beq.n	800da02 <_dtoa_r+0x62a>
 800da10:	46c3      	mov	fp, r8
 800da12:	e03b      	b.n	800da8c <_dtoa_r+0x6b4>
 800da14:	4b9e      	ldr	r3, [pc, #632]	; (800dc90 <_dtoa_r+0x8b8>)
 800da16:	f7f2 fdd9 	bl	80005cc <__aeabi_dmul>
 800da1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da1e:	e7bc      	b.n	800d99a <_dtoa_r+0x5c2>
 800da20:	9f03      	ldr	r7, [sp, #12]
 800da22:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800da26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800da2a:	4640      	mov	r0, r8
 800da2c:	4649      	mov	r1, r9
 800da2e:	f7f2 fef7 	bl	8000820 <__aeabi_ddiv>
 800da32:	f7f3 f87b 	bl	8000b2c <__aeabi_d2iz>
 800da36:	4604      	mov	r4, r0
 800da38:	f7f2 fd5e 	bl	80004f8 <__aeabi_i2d>
 800da3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800da40:	f7f2 fdc4 	bl	80005cc <__aeabi_dmul>
 800da44:	4602      	mov	r2, r0
 800da46:	460b      	mov	r3, r1
 800da48:	4640      	mov	r0, r8
 800da4a:	4649      	mov	r1, r9
 800da4c:	f7f2 fc06 	bl	800025c <__aeabi_dsub>
 800da50:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800da54:	f807 6b01 	strb.w	r6, [r7], #1
 800da58:	9e03      	ldr	r6, [sp, #12]
 800da5a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800da5e:	1bbe      	subs	r6, r7, r6
 800da60:	45b4      	cmp	ip, r6
 800da62:	4602      	mov	r2, r0
 800da64:	460b      	mov	r3, r1
 800da66:	d136      	bne.n	800dad6 <_dtoa_r+0x6fe>
 800da68:	f7f2 fbfa 	bl	8000260 <__adddf3>
 800da6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800da70:	4680      	mov	r8, r0
 800da72:	4689      	mov	r9, r1
 800da74:	f7f3 f83a 	bl	8000aec <__aeabi_dcmpgt>
 800da78:	bb58      	cbnz	r0, 800dad2 <_dtoa_r+0x6fa>
 800da7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800da7e:	4640      	mov	r0, r8
 800da80:	4649      	mov	r1, r9
 800da82:	f7f3 f80b 	bl	8000a9c <__aeabi_dcmpeq>
 800da86:	b108      	cbz	r0, 800da8c <_dtoa_r+0x6b4>
 800da88:	07e3      	lsls	r3, r4, #31
 800da8a:	d422      	bmi.n	800dad2 <_dtoa_r+0x6fa>
 800da8c:	4651      	mov	r1, sl
 800da8e:	4628      	mov	r0, r5
 800da90:	f000 febe 	bl	800e810 <_Bfree>
 800da94:	2300      	movs	r3, #0
 800da96:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800da98:	703b      	strb	r3, [r7, #0]
 800da9a:	f10b 0301 	add.w	r3, fp, #1
 800da9e:	6013      	str	r3, [r2, #0]
 800daa0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	f43f ace6 	beq.w	800d474 <_dtoa_r+0x9c>
 800daa8:	601f      	str	r7, [r3, #0]
 800daaa:	e4e3      	b.n	800d474 <_dtoa_r+0x9c>
 800daac:	4627      	mov	r7, r4
 800daae:	463b      	mov	r3, r7
 800dab0:	461f      	mov	r7, r3
 800dab2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dab6:	2a39      	cmp	r2, #57	; 0x39
 800dab8:	d107      	bne.n	800daca <_dtoa_r+0x6f2>
 800daba:	9a03      	ldr	r2, [sp, #12]
 800dabc:	429a      	cmp	r2, r3
 800dabe:	d1f7      	bne.n	800dab0 <_dtoa_r+0x6d8>
 800dac0:	2230      	movs	r2, #48	; 0x30
 800dac2:	9903      	ldr	r1, [sp, #12]
 800dac4:	f108 0801 	add.w	r8, r8, #1
 800dac8:	700a      	strb	r2, [r1, #0]
 800daca:	781a      	ldrb	r2, [r3, #0]
 800dacc:	3201      	adds	r2, #1
 800dace:	701a      	strb	r2, [r3, #0]
 800dad0:	e79e      	b.n	800da10 <_dtoa_r+0x638>
 800dad2:	46d8      	mov	r8, fp
 800dad4:	e7eb      	b.n	800daae <_dtoa_r+0x6d6>
 800dad6:	2200      	movs	r2, #0
 800dad8:	4b6d      	ldr	r3, [pc, #436]	; (800dc90 <_dtoa_r+0x8b8>)
 800dada:	f7f2 fd77 	bl	80005cc <__aeabi_dmul>
 800dade:	2200      	movs	r2, #0
 800dae0:	2300      	movs	r3, #0
 800dae2:	4680      	mov	r8, r0
 800dae4:	4689      	mov	r9, r1
 800dae6:	f7f2 ffd9 	bl	8000a9c <__aeabi_dcmpeq>
 800daea:	2800      	cmp	r0, #0
 800daec:	d09b      	beq.n	800da26 <_dtoa_r+0x64e>
 800daee:	e7cd      	b.n	800da8c <_dtoa_r+0x6b4>
 800daf0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800daf2:	2a00      	cmp	r2, #0
 800daf4:	f000 80c4 	beq.w	800dc80 <_dtoa_r+0x8a8>
 800daf8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800dafa:	2a01      	cmp	r2, #1
 800dafc:	f300 80a8 	bgt.w	800dc50 <_dtoa_r+0x878>
 800db00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800db02:	2a00      	cmp	r2, #0
 800db04:	f000 80a0 	beq.w	800dc48 <_dtoa_r+0x870>
 800db08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800db0c:	464f      	mov	r7, r9
 800db0e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800db10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db12:	2101      	movs	r1, #1
 800db14:	441a      	add	r2, r3
 800db16:	4628      	mov	r0, r5
 800db18:	4499      	add	r9, r3
 800db1a:	9209      	str	r2, [sp, #36]	; 0x24
 800db1c:	f000 ff78 	bl	800ea10 <__i2b>
 800db20:	4606      	mov	r6, r0
 800db22:	b15f      	cbz	r7, 800db3c <_dtoa_r+0x764>
 800db24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db26:	2b00      	cmp	r3, #0
 800db28:	dd08      	ble.n	800db3c <_dtoa_r+0x764>
 800db2a:	42bb      	cmp	r3, r7
 800db2c:	bfa8      	it	ge
 800db2e:	463b      	movge	r3, r7
 800db30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db32:	eba9 0903 	sub.w	r9, r9, r3
 800db36:	1aff      	subs	r7, r7, r3
 800db38:	1ad3      	subs	r3, r2, r3
 800db3a:	9309      	str	r3, [sp, #36]	; 0x24
 800db3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db3e:	b1f3      	cbz	r3, 800db7e <_dtoa_r+0x7a6>
 800db40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db42:	2b00      	cmp	r3, #0
 800db44:	f000 80a0 	beq.w	800dc88 <_dtoa_r+0x8b0>
 800db48:	2c00      	cmp	r4, #0
 800db4a:	dd10      	ble.n	800db6e <_dtoa_r+0x796>
 800db4c:	4631      	mov	r1, r6
 800db4e:	4622      	mov	r2, r4
 800db50:	4628      	mov	r0, r5
 800db52:	f001 f81b 	bl	800eb8c <__pow5mult>
 800db56:	4652      	mov	r2, sl
 800db58:	4601      	mov	r1, r0
 800db5a:	4606      	mov	r6, r0
 800db5c:	4628      	mov	r0, r5
 800db5e:	f000 ff6d 	bl	800ea3c <__multiply>
 800db62:	4680      	mov	r8, r0
 800db64:	4651      	mov	r1, sl
 800db66:	4628      	mov	r0, r5
 800db68:	f000 fe52 	bl	800e810 <_Bfree>
 800db6c:	46c2      	mov	sl, r8
 800db6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db70:	1b1a      	subs	r2, r3, r4
 800db72:	d004      	beq.n	800db7e <_dtoa_r+0x7a6>
 800db74:	4651      	mov	r1, sl
 800db76:	4628      	mov	r0, r5
 800db78:	f001 f808 	bl	800eb8c <__pow5mult>
 800db7c:	4682      	mov	sl, r0
 800db7e:	2101      	movs	r1, #1
 800db80:	4628      	mov	r0, r5
 800db82:	f000 ff45 	bl	800ea10 <__i2b>
 800db86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db88:	4604      	mov	r4, r0
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	f340 8082 	ble.w	800dc94 <_dtoa_r+0x8bc>
 800db90:	461a      	mov	r2, r3
 800db92:	4601      	mov	r1, r0
 800db94:	4628      	mov	r0, r5
 800db96:	f000 fff9 	bl	800eb8c <__pow5mult>
 800db9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800db9c:	4604      	mov	r4, r0
 800db9e:	2b01      	cmp	r3, #1
 800dba0:	dd7b      	ble.n	800dc9a <_dtoa_r+0x8c2>
 800dba2:	f04f 0800 	mov.w	r8, #0
 800dba6:	6923      	ldr	r3, [r4, #16]
 800dba8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dbac:	6918      	ldr	r0, [r3, #16]
 800dbae:	f000 fee1 	bl	800e974 <__hi0bits>
 800dbb2:	f1c0 0020 	rsb	r0, r0, #32
 800dbb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbb8:	4418      	add	r0, r3
 800dbba:	f010 001f 	ands.w	r0, r0, #31
 800dbbe:	f000 8092 	beq.w	800dce6 <_dtoa_r+0x90e>
 800dbc2:	f1c0 0320 	rsb	r3, r0, #32
 800dbc6:	2b04      	cmp	r3, #4
 800dbc8:	f340 8085 	ble.w	800dcd6 <_dtoa_r+0x8fe>
 800dbcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbce:	f1c0 001c 	rsb	r0, r0, #28
 800dbd2:	4403      	add	r3, r0
 800dbd4:	4481      	add	r9, r0
 800dbd6:	4407      	add	r7, r0
 800dbd8:	9309      	str	r3, [sp, #36]	; 0x24
 800dbda:	f1b9 0f00 	cmp.w	r9, #0
 800dbde:	dd05      	ble.n	800dbec <_dtoa_r+0x814>
 800dbe0:	4651      	mov	r1, sl
 800dbe2:	464a      	mov	r2, r9
 800dbe4:	4628      	mov	r0, r5
 800dbe6:	f001 f82b 	bl	800ec40 <__lshift>
 800dbea:	4682      	mov	sl, r0
 800dbec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	dd05      	ble.n	800dbfe <_dtoa_r+0x826>
 800dbf2:	4621      	mov	r1, r4
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	4628      	mov	r0, r5
 800dbf8:	f001 f822 	bl	800ec40 <__lshift>
 800dbfc:	4604      	mov	r4, r0
 800dbfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d072      	beq.n	800dcea <_dtoa_r+0x912>
 800dc04:	4621      	mov	r1, r4
 800dc06:	4650      	mov	r0, sl
 800dc08:	f001 f886 	bl	800ed18 <__mcmp>
 800dc0c:	2800      	cmp	r0, #0
 800dc0e:	da6c      	bge.n	800dcea <_dtoa_r+0x912>
 800dc10:	2300      	movs	r3, #0
 800dc12:	4651      	mov	r1, sl
 800dc14:	220a      	movs	r2, #10
 800dc16:	4628      	mov	r0, r5
 800dc18:	f000 fe1c 	bl	800e854 <__multadd>
 800dc1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc1e:	4682      	mov	sl, r0
 800dc20:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	f000 81ac 	beq.w	800df82 <_dtoa_r+0xbaa>
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	4631      	mov	r1, r6
 800dc2e:	220a      	movs	r2, #10
 800dc30:	4628      	mov	r0, r5
 800dc32:	f000 fe0f 	bl	800e854 <__multadd>
 800dc36:	9b06      	ldr	r3, [sp, #24]
 800dc38:	4606      	mov	r6, r0
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	f300 8093 	bgt.w	800dd66 <_dtoa_r+0x98e>
 800dc40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dc42:	2b02      	cmp	r3, #2
 800dc44:	dc59      	bgt.n	800dcfa <_dtoa_r+0x922>
 800dc46:	e08e      	b.n	800dd66 <_dtoa_r+0x98e>
 800dc48:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dc4a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dc4e:	e75d      	b.n	800db0c <_dtoa_r+0x734>
 800dc50:	9b08      	ldr	r3, [sp, #32]
 800dc52:	1e5c      	subs	r4, r3, #1
 800dc54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc56:	42a3      	cmp	r3, r4
 800dc58:	bfbf      	itttt	lt
 800dc5a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dc5c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800dc5e:	1ae3      	sublt	r3, r4, r3
 800dc60:	18d2      	addlt	r2, r2, r3
 800dc62:	bfa8      	it	ge
 800dc64:	1b1c      	subge	r4, r3, r4
 800dc66:	9b08      	ldr	r3, [sp, #32]
 800dc68:	bfbe      	ittt	lt
 800dc6a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800dc6c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800dc6e:	2400      	movlt	r4, #0
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	bfb5      	itete	lt
 800dc74:	eba9 0703 	sublt.w	r7, r9, r3
 800dc78:	464f      	movge	r7, r9
 800dc7a:	2300      	movlt	r3, #0
 800dc7c:	9b08      	ldrge	r3, [sp, #32]
 800dc7e:	e747      	b.n	800db10 <_dtoa_r+0x738>
 800dc80:	464f      	mov	r7, r9
 800dc82:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800dc84:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800dc86:	e74c      	b.n	800db22 <_dtoa_r+0x74a>
 800dc88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc8a:	e773      	b.n	800db74 <_dtoa_r+0x79c>
 800dc8c:	3fe00000 	.word	0x3fe00000
 800dc90:	40240000 	.word	0x40240000
 800dc94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dc96:	2b01      	cmp	r3, #1
 800dc98:	dc18      	bgt.n	800dccc <_dtoa_r+0x8f4>
 800dc9a:	9b04      	ldr	r3, [sp, #16]
 800dc9c:	b9b3      	cbnz	r3, 800dccc <_dtoa_r+0x8f4>
 800dc9e:	9b05      	ldr	r3, [sp, #20]
 800dca0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dca4:	b993      	cbnz	r3, 800dccc <_dtoa_r+0x8f4>
 800dca6:	9b05      	ldr	r3, [sp, #20]
 800dca8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dcac:	0d1b      	lsrs	r3, r3, #20
 800dcae:	051b      	lsls	r3, r3, #20
 800dcb0:	b17b      	cbz	r3, 800dcd2 <_dtoa_r+0x8fa>
 800dcb2:	f04f 0801 	mov.w	r8, #1
 800dcb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcb8:	f109 0901 	add.w	r9, r9, #1
 800dcbc:	3301      	adds	r3, #1
 800dcbe:	9309      	str	r3, [sp, #36]	; 0x24
 800dcc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	f47f af6f 	bne.w	800dba6 <_dtoa_r+0x7ce>
 800dcc8:	2001      	movs	r0, #1
 800dcca:	e774      	b.n	800dbb6 <_dtoa_r+0x7de>
 800dccc:	f04f 0800 	mov.w	r8, #0
 800dcd0:	e7f6      	b.n	800dcc0 <_dtoa_r+0x8e8>
 800dcd2:	4698      	mov	r8, r3
 800dcd4:	e7f4      	b.n	800dcc0 <_dtoa_r+0x8e8>
 800dcd6:	d080      	beq.n	800dbda <_dtoa_r+0x802>
 800dcd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcda:	331c      	adds	r3, #28
 800dcdc:	441a      	add	r2, r3
 800dcde:	4499      	add	r9, r3
 800dce0:	441f      	add	r7, r3
 800dce2:	9209      	str	r2, [sp, #36]	; 0x24
 800dce4:	e779      	b.n	800dbda <_dtoa_r+0x802>
 800dce6:	4603      	mov	r3, r0
 800dce8:	e7f6      	b.n	800dcd8 <_dtoa_r+0x900>
 800dcea:	9b08      	ldr	r3, [sp, #32]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	dc34      	bgt.n	800dd5a <_dtoa_r+0x982>
 800dcf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dcf2:	2b02      	cmp	r3, #2
 800dcf4:	dd31      	ble.n	800dd5a <_dtoa_r+0x982>
 800dcf6:	9b08      	ldr	r3, [sp, #32]
 800dcf8:	9306      	str	r3, [sp, #24]
 800dcfa:	9b06      	ldr	r3, [sp, #24]
 800dcfc:	b963      	cbnz	r3, 800dd18 <_dtoa_r+0x940>
 800dcfe:	4621      	mov	r1, r4
 800dd00:	2205      	movs	r2, #5
 800dd02:	4628      	mov	r0, r5
 800dd04:	f000 fda6 	bl	800e854 <__multadd>
 800dd08:	4601      	mov	r1, r0
 800dd0a:	4604      	mov	r4, r0
 800dd0c:	4650      	mov	r0, sl
 800dd0e:	f001 f803 	bl	800ed18 <__mcmp>
 800dd12:	2800      	cmp	r0, #0
 800dd14:	f73f adbf 	bgt.w	800d896 <_dtoa_r+0x4be>
 800dd18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dd1a:	9f03      	ldr	r7, [sp, #12]
 800dd1c:	ea6f 0b03 	mvn.w	fp, r3
 800dd20:	f04f 0800 	mov.w	r8, #0
 800dd24:	4621      	mov	r1, r4
 800dd26:	4628      	mov	r0, r5
 800dd28:	f000 fd72 	bl	800e810 <_Bfree>
 800dd2c:	2e00      	cmp	r6, #0
 800dd2e:	f43f aead 	beq.w	800da8c <_dtoa_r+0x6b4>
 800dd32:	f1b8 0f00 	cmp.w	r8, #0
 800dd36:	d005      	beq.n	800dd44 <_dtoa_r+0x96c>
 800dd38:	45b0      	cmp	r8, r6
 800dd3a:	d003      	beq.n	800dd44 <_dtoa_r+0x96c>
 800dd3c:	4641      	mov	r1, r8
 800dd3e:	4628      	mov	r0, r5
 800dd40:	f000 fd66 	bl	800e810 <_Bfree>
 800dd44:	4631      	mov	r1, r6
 800dd46:	4628      	mov	r0, r5
 800dd48:	f000 fd62 	bl	800e810 <_Bfree>
 800dd4c:	e69e      	b.n	800da8c <_dtoa_r+0x6b4>
 800dd4e:	2400      	movs	r4, #0
 800dd50:	4626      	mov	r6, r4
 800dd52:	e7e1      	b.n	800dd18 <_dtoa_r+0x940>
 800dd54:	46c3      	mov	fp, r8
 800dd56:	4626      	mov	r6, r4
 800dd58:	e59d      	b.n	800d896 <_dtoa_r+0x4be>
 800dd5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	f000 80c8 	beq.w	800def2 <_dtoa_r+0xb1a>
 800dd62:	9b08      	ldr	r3, [sp, #32]
 800dd64:	9306      	str	r3, [sp, #24]
 800dd66:	2f00      	cmp	r7, #0
 800dd68:	dd05      	ble.n	800dd76 <_dtoa_r+0x99e>
 800dd6a:	4631      	mov	r1, r6
 800dd6c:	463a      	mov	r2, r7
 800dd6e:	4628      	mov	r0, r5
 800dd70:	f000 ff66 	bl	800ec40 <__lshift>
 800dd74:	4606      	mov	r6, r0
 800dd76:	f1b8 0f00 	cmp.w	r8, #0
 800dd7a:	d05b      	beq.n	800de34 <_dtoa_r+0xa5c>
 800dd7c:	4628      	mov	r0, r5
 800dd7e:	6871      	ldr	r1, [r6, #4]
 800dd80:	f000 fd06 	bl	800e790 <_Balloc>
 800dd84:	4607      	mov	r7, r0
 800dd86:	b928      	cbnz	r0, 800dd94 <_dtoa_r+0x9bc>
 800dd88:	4602      	mov	r2, r0
 800dd8a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800dd8e:	4b81      	ldr	r3, [pc, #516]	; (800df94 <_dtoa_r+0xbbc>)
 800dd90:	f7ff bb36 	b.w	800d400 <_dtoa_r+0x28>
 800dd94:	6932      	ldr	r2, [r6, #16]
 800dd96:	f106 010c 	add.w	r1, r6, #12
 800dd9a:	3202      	adds	r2, #2
 800dd9c:	0092      	lsls	r2, r2, #2
 800dd9e:	300c      	adds	r0, #12
 800dda0:	f7ff fa43 	bl	800d22a <memcpy>
 800dda4:	2201      	movs	r2, #1
 800dda6:	4639      	mov	r1, r7
 800dda8:	4628      	mov	r0, r5
 800ddaa:	f000 ff49 	bl	800ec40 <__lshift>
 800ddae:	46b0      	mov	r8, r6
 800ddb0:	4606      	mov	r6, r0
 800ddb2:	9b03      	ldr	r3, [sp, #12]
 800ddb4:	9a03      	ldr	r2, [sp, #12]
 800ddb6:	3301      	adds	r3, #1
 800ddb8:	9308      	str	r3, [sp, #32]
 800ddba:	9b06      	ldr	r3, [sp, #24]
 800ddbc:	4413      	add	r3, r2
 800ddbe:	930b      	str	r3, [sp, #44]	; 0x2c
 800ddc0:	9b04      	ldr	r3, [sp, #16]
 800ddc2:	f003 0301 	and.w	r3, r3, #1
 800ddc6:	930a      	str	r3, [sp, #40]	; 0x28
 800ddc8:	9b08      	ldr	r3, [sp, #32]
 800ddca:	4621      	mov	r1, r4
 800ddcc:	3b01      	subs	r3, #1
 800ddce:	4650      	mov	r0, sl
 800ddd0:	9304      	str	r3, [sp, #16]
 800ddd2:	f7ff fa75 	bl	800d2c0 <quorem>
 800ddd6:	4641      	mov	r1, r8
 800ddd8:	9006      	str	r0, [sp, #24]
 800ddda:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ddde:	4650      	mov	r0, sl
 800dde0:	f000 ff9a 	bl	800ed18 <__mcmp>
 800dde4:	4632      	mov	r2, r6
 800dde6:	9009      	str	r0, [sp, #36]	; 0x24
 800dde8:	4621      	mov	r1, r4
 800ddea:	4628      	mov	r0, r5
 800ddec:	f000 ffb0 	bl	800ed50 <__mdiff>
 800ddf0:	68c2      	ldr	r2, [r0, #12]
 800ddf2:	4607      	mov	r7, r0
 800ddf4:	bb02      	cbnz	r2, 800de38 <_dtoa_r+0xa60>
 800ddf6:	4601      	mov	r1, r0
 800ddf8:	4650      	mov	r0, sl
 800ddfa:	f000 ff8d 	bl	800ed18 <__mcmp>
 800ddfe:	4602      	mov	r2, r0
 800de00:	4639      	mov	r1, r7
 800de02:	4628      	mov	r0, r5
 800de04:	920c      	str	r2, [sp, #48]	; 0x30
 800de06:	f000 fd03 	bl	800e810 <_Bfree>
 800de0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800de0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de0e:	9f08      	ldr	r7, [sp, #32]
 800de10:	ea43 0102 	orr.w	r1, r3, r2
 800de14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de16:	4319      	orrs	r1, r3
 800de18:	d110      	bne.n	800de3c <_dtoa_r+0xa64>
 800de1a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800de1e:	d029      	beq.n	800de74 <_dtoa_r+0xa9c>
 800de20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de22:	2b00      	cmp	r3, #0
 800de24:	dd02      	ble.n	800de2c <_dtoa_r+0xa54>
 800de26:	9b06      	ldr	r3, [sp, #24]
 800de28:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800de2c:	9b04      	ldr	r3, [sp, #16]
 800de2e:	f883 9000 	strb.w	r9, [r3]
 800de32:	e777      	b.n	800dd24 <_dtoa_r+0x94c>
 800de34:	4630      	mov	r0, r6
 800de36:	e7ba      	b.n	800ddae <_dtoa_r+0x9d6>
 800de38:	2201      	movs	r2, #1
 800de3a:	e7e1      	b.n	800de00 <_dtoa_r+0xa28>
 800de3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de3e:	2b00      	cmp	r3, #0
 800de40:	db04      	blt.n	800de4c <_dtoa_r+0xa74>
 800de42:	9922      	ldr	r1, [sp, #136]	; 0x88
 800de44:	430b      	orrs	r3, r1
 800de46:	990a      	ldr	r1, [sp, #40]	; 0x28
 800de48:	430b      	orrs	r3, r1
 800de4a:	d120      	bne.n	800de8e <_dtoa_r+0xab6>
 800de4c:	2a00      	cmp	r2, #0
 800de4e:	dded      	ble.n	800de2c <_dtoa_r+0xa54>
 800de50:	4651      	mov	r1, sl
 800de52:	2201      	movs	r2, #1
 800de54:	4628      	mov	r0, r5
 800de56:	f000 fef3 	bl	800ec40 <__lshift>
 800de5a:	4621      	mov	r1, r4
 800de5c:	4682      	mov	sl, r0
 800de5e:	f000 ff5b 	bl	800ed18 <__mcmp>
 800de62:	2800      	cmp	r0, #0
 800de64:	dc03      	bgt.n	800de6e <_dtoa_r+0xa96>
 800de66:	d1e1      	bne.n	800de2c <_dtoa_r+0xa54>
 800de68:	f019 0f01 	tst.w	r9, #1
 800de6c:	d0de      	beq.n	800de2c <_dtoa_r+0xa54>
 800de6e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800de72:	d1d8      	bne.n	800de26 <_dtoa_r+0xa4e>
 800de74:	2339      	movs	r3, #57	; 0x39
 800de76:	9a04      	ldr	r2, [sp, #16]
 800de78:	7013      	strb	r3, [r2, #0]
 800de7a:	463b      	mov	r3, r7
 800de7c:	461f      	mov	r7, r3
 800de7e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800de82:	3b01      	subs	r3, #1
 800de84:	2a39      	cmp	r2, #57	; 0x39
 800de86:	d06b      	beq.n	800df60 <_dtoa_r+0xb88>
 800de88:	3201      	adds	r2, #1
 800de8a:	701a      	strb	r2, [r3, #0]
 800de8c:	e74a      	b.n	800dd24 <_dtoa_r+0x94c>
 800de8e:	2a00      	cmp	r2, #0
 800de90:	dd07      	ble.n	800dea2 <_dtoa_r+0xaca>
 800de92:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800de96:	d0ed      	beq.n	800de74 <_dtoa_r+0xa9c>
 800de98:	9a04      	ldr	r2, [sp, #16]
 800de9a:	f109 0301 	add.w	r3, r9, #1
 800de9e:	7013      	strb	r3, [r2, #0]
 800dea0:	e740      	b.n	800dd24 <_dtoa_r+0x94c>
 800dea2:	9b08      	ldr	r3, [sp, #32]
 800dea4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dea6:	f803 9c01 	strb.w	r9, [r3, #-1]
 800deaa:	4293      	cmp	r3, r2
 800deac:	d042      	beq.n	800df34 <_dtoa_r+0xb5c>
 800deae:	4651      	mov	r1, sl
 800deb0:	2300      	movs	r3, #0
 800deb2:	220a      	movs	r2, #10
 800deb4:	4628      	mov	r0, r5
 800deb6:	f000 fccd 	bl	800e854 <__multadd>
 800deba:	45b0      	cmp	r8, r6
 800debc:	4682      	mov	sl, r0
 800debe:	f04f 0300 	mov.w	r3, #0
 800dec2:	f04f 020a 	mov.w	r2, #10
 800dec6:	4641      	mov	r1, r8
 800dec8:	4628      	mov	r0, r5
 800deca:	d107      	bne.n	800dedc <_dtoa_r+0xb04>
 800decc:	f000 fcc2 	bl	800e854 <__multadd>
 800ded0:	4680      	mov	r8, r0
 800ded2:	4606      	mov	r6, r0
 800ded4:	9b08      	ldr	r3, [sp, #32]
 800ded6:	3301      	adds	r3, #1
 800ded8:	9308      	str	r3, [sp, #32]
 800deda:	e775      	b.n	800ddc8 <_dtoa_r+0x9f0>
 800dedc:	f000 fcba 	bl	800e854 <__multadd>
 800dee0:	4631      	mov	r1, r6
 800dee2:	4680      	mov	r8, r0
 800dee4:	2300      	movs	r3, #0
 800dee6:	220a      	movs	r2, #10
 800dee8:	4628      	mov	r0, r5
 800deea:	f000 fcb3 	bl	800e854 <__multadd>
 800deee:	4606      	mov	r6, r0
 800def0:	e7f0      	b.n	800ded4 <_dtoa_r+0xafc>
 800def2:	9b08      	ldr	r3, [sp, #32]
 800def4:	9306      	str	r3, [sp, #24]
 800def6:	9f03      	ldr	r7, [sp, #12]
 800def8:	4621      	mov	r1, r4
 800defa:	4650      	mov	r0, sl
 800defc:	f7ff f9e0 	bl	800d2c0 <quorem>
 800df00:	9b03      	ldr	r3, [sp, #12]
 800df02:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800df06:	f807 9b01 	strb.w	r9, [r7], #1
 800df0a:	1afa      	subs	r2, r7, r3
 800df0c:	9b06      	ldr	r3, [sp, #24]
 800df0e:	4293      	cmp	r3, r2
 800df10:	dd07      	ble.n	800df22 <_dtoa_r+0xb4a>
 800df12:	4651      	mov	r1, sl
 800df14:	2300      	movs	r3, #0
 800df16:	220a      	movs	r2, #10
 800df18:	4628      	mov	r0, r5
 800df1a:	f000 fc9b 	bl	800e854 <__multadd>
 800df1e:	4682      	mov	sl, r0
 800df20:	e7ea      	b.n	800def8 <_dtoa_r+0xb20>
 800df22:	9b06      	ldr	r3, [sp, #24]
 800df24:	f04f 0800 	mov.w	r8, #0
 800df28:	2b00      	cmp	r3, #0
 800df2a:	bfcc      	ite	gt
 800df2c:	461f      	movgt	r7, r3
 800df2e:	2701      	movle	r7, #1
 800df30:	9b03      	ldr	r3, [sp, #12]
 800df32:	441f      	add	r7, r3
 800df34:	4651      	mov	r1, sl
 800df36:	2201      	movs	r2, #1
 800df38:	4628      	mov	r0, r5
 800df3a:	f000 fe81 	bl	800ec40 <__lshift>
 800df3e:	4621      	mov	r1, r4
 800df40:	4682      	mov	sl, r0
 800df42:	f000 fee9 	bl	800ed18 <__mcmp>
 800df46:	2800      	cmp	r0, #0
 800df48:	dc97      	bgt.n	800de7a <_dtoa_r+0xaa2>
 800df4a:	d102      	bne.n	800df52 <_dtoa_r+0xb7a>
 800df4c:	f019 0f01 	tst.w	r9, #1
 800df50:	d193      	bne.n	800de7a <_dtoa_r+0xaa2>
 800df52:	463b      	mov	r3, r7
 800df54:	461f      	mov	r7, r3
 800df56:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df5a:	2a30      	cmp	r2, #48	; 0x30
 800df5c:	d0fa      	beq.n	800df54 <_dtoa_r+0xb7c>
 800df5e:	e6e1      	b.n	800dd24 <_dtoa_r+0x94c>
 800df60:	9a03      	ldr	r2, [sp, #12]
 800df62:	429a      	cmp	r2, r3
 800df64:	d18a      	bne.n	800de7c <_dtoa_r+0xaa4>
 800df66:	2331      	movs	r3, #49	; 0x31
 800df68:	f10b 0b01 	add.w	fp, fp, #1
 800df6c:	e797      	b.n	800de9e <_dtoa_r+0xac6>
 800df6e:	4b0a      	ldr	r3, [pc, #40]	; (800df98 <_dtoa_r+0xbc0>)
 800df70:	f7ff ba9f 	b.w	800d4b2 <_dtoa_r+0xda>
 800df74:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800df76:	2b00      	cmp	r3, #0
 800df78:	f47f aa77 	bne.w	800d46a <_dtoa_r+0x92>
 800df7c:	4b07      	ldr	r3, [pc, #28]	; (800df9c <_dtoa_r+0xbc4>)
 800df7e:	f7ff ba98 	b.w	800d4b2 <_dtoa_r+0xda>
 800df82:	9b06      	ldr	r3, [sp, #24]
 800df84:	2b00      	cmp	r3, #0
 800df86:	dcb6      	bgt.n	800def6 <_dtoa_r+0xb1e>
 800df88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800df8a:	2b02      	cmp	r3, #2
 800df8c:	f73f aeb5 	bgt.w	800dcfa <_dtoa_r+0x922>
 800df90:	e7b1      	b.n	800def6 <_dtoa_r+0xb1e>
 800df92:	bf00      	nop
 800df94:	08010a93 	.word	0x08010a93
 800df98:	08010ce6 	.word	0x08010ce6
 800df9c:	08010a2e 	.word	0x08010a2e

0800dfa0 <_free_r>:
 800dfa0:	b538      	push	{r3, r4, r5, lr}
 800dfa2:	4605      	mov	r5, r0
 800dfa4:	2900      	cmp	r1, #0
 800dfa6:	d040      	beq.n	800e02a <_free_r+0x8a>
 800dfa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfac:	1f0c      	subs	r4, r1, #4
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	bfb8      	it	lt
 800dfb2:	18e4      	addlt	r4, r4, r3
 800dfb4:	f7fc fdc2 	bl	800ab3c <__malloc_lock>
 800dfb8:	4a1c      	ldr	r2, [pc, #112]	; (800e02c <_free_r+0x8c>)
 800dfba:	6813      	ldr	r3, [r2, #0]
 800dfbc:	b933      	cbnz	r3, 800dfcc <_free_r+0x2c>
 800dfbe:	6063      	str	r3, [r4, #4]
 800dfc0:	6014      	str	r4, [r2, #0]
 800dfc2:	4628      	mov	r0, r5
 800dfc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dfc8:	f7fc bdbe 	b.w	800ab48 <__malloc_unlock>
 800dfcc:	42a3      	cmp	r3, r4
 800dfce:	d908      	bls.n	800dfe2 <_free_r+0x42>
 800dfd0:	6820      	ldr	r0, [r4, #0]
 800dfd2:	1821      	adds	r1, r4, r0
 800dfd4:	428b      	cmp	r3, r1
 800dfd6:	bf01      	itttt	eq
 800dfd8:	6819      	ldreq	r1, [r3, #0]
 800dfda:	685b      	ldreq	r3, [r3, #4]
 800dfdc:	1809      	addeq	r1, r1, r0
 800dfde:	6021      	streq	r1, [r4, #0]
 800dfe0:	e7ed      	b.n	800dfbe <_free_r+0x1e>
 800dfe2:	461a      	mov	r2, r3
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	b10b      	cbz	r3, 800dfec <_free_r+0x4c>
 800dfe8:	42a3      	cmp	r3, r4
 800dfea:	d9fa      	bls.n	800dfe2 <_free_r+0x42>
 800dfec:	6811      	ldr	r1, [r2, #0]
 800dfee:	1850      	adds	r0, r2, r1
 800dff0:	42a0      	cmp	r0, r4
 800dff2:	d10b      	bne.n	800e00c <_free_r+0x6c>
 800dff4:	6820      	ldr	r0, [r4, #0]
 800dff6:	4401      	add	r1, r0
 800dff8:	1850      	adds	r0, r2, r1
 800dffa:	4283      	cmp	r3, r0
 800dffc:	6011      	str	r1, [r2, #0]
 800dffe:	d1e0      	bne.n	800dfc2 <_free_r+0x22>
 800e000:	6818      	ldr	r0, [r3, #0]
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	4408      	add	r0, r1
 800e006:	6010      	str	r0, [r2, #0]
 800e008:	6053      	str	r3, [r2, #4]
 800e00a:	e7da      	b.n	800dfc2 <_free_r+0x22>
 800e00c:	d902      	bls.n	800e014 <_free_r+0x74>
 800e00e:	230c      	movs	r3, #12
 800e010:	602b      	str	r3, [r5, #0]
 800e012:	e7d6      	b.n	800dfc2 <_free_r+0x22>
 800e014:	6820      	ldr	r0, [r4, #0]
 800e016:	1821      	adds	r1, r4, r0
 800e018:	428b      	cmp	r3, r1
 800e01a:	bf01      	itttt	eq
 800e01c:	6819      	ldreq	r1, [r3, #0]
 800e01e:	685b      	ldreq	r3, [r3, #4]
 800e020:	1809      	addeq	r1, r1, r0
 800e022:	6021      	streq	r1, [r4, #0]
 800e024:	6063      	str	r3, [r4, #4]
 800e026:	6054      	str	r4, [r2, #4]
 800e028:	e7cb      	b.n	800dfc2 <_free_r+0x22>
 800e02a:	bd38      	pop	{r3, r4, r5, pc}
 800e02c:	20003360 	.word	0x20003360

0800e030 <rshift>:
 800e030:	6903      	ldr	r3, [r0, #16]
 800e032:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e036:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e03a:	f100 0414 	add.w	r4, r0, #20
 800e03e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e042:	dd46      	ble.n	800e0d2 <rshift+0xa2>
 800e044:	f011 011f 	ands.w	r1, r1, #31
 800e048:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e04c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e050:	d10c      	bne.n	800e06c <rshift+0x3c>
 800e052:	4629      	mov	r1, r5
 800e054:	f100 0710 	add.w	r7, r0, #16
 800e058:	42b1      	cmp	r1, r6
 800e05a:	d335      	bcc.n	800e0c8 <rshift+0x98>
 800e05c:	1a9b      	subs	r3, r3, r2
 800e05e:	009b      	lsls	r3, r3, #2
 800e060:	1eea      	subs	r2, r5, #3
 800e062:	4296      	cmp	r6, r2
 800e064:	bf38      	it	cc
 800e066:	2300      	movcc	r3, #0
 800e068:	4423      	add	r3, r4
 800e06a:	e015      	b.n	800e098 <rshift+0x68>
 800e06c:	46a1      	mov	r9, r4
 800e06e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e072:	f1c1 0820 	rsb	r8, r1, #32
 800e076:	40cf      	lsrs	r7, r1
 800e078:	f105 0e04 	add.w	lr, r5, #4
 800e07c:	4576      	cmp	r6, lr
 800e07e:	46f4      	mov	ip, lr
 800e080:	d816      	bhi.n	800e0b0 <rshift+0x80>
 800e082:	1a9a      	subs	r2, r3, r2
 800e084:	0092      	lsls	r2, r2, #2
 800e086:	3a04      	subs	r2, #4
 800e088:	3501      	adds	r5, #1
 800e08a:	42ae      	cmp	r6, r5
 800e08c:	bf38      	it	cc
 800e08e:	2200      	movcc	r2, #0
 800e090:	18a3      	adds	r3, r4, r2
 800e092:	50a7      	str	r7, [r4, r2]
 800e094:	b107      	cbz	r7, 800e098 <rshift+0x68>
 800e096:	3304      	adds	r3, #4
 800e098:	42a3      	cmp	r3, r4
 800e09a:	eba3 0204 	sub.w	r2, r3, r4
 800e09e:	bf08      	it	eq
 800e0a0:	2300      	moveq	r3, #0
 800e0a2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e0a6:	6102      	str	r2, [r0, #16]
 800e0a8:	bf08      	it	eq
 800e0aa:	6143      	streq	r3, [r0, #20]
 800e0ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0b0:	f8dc c000 	ldr.w	ip, [ip]
 800e0b4:	fa0c fc08 	lsl.w	ip, ip, r8
 800e0b8:	ea4c 0707 	orr.w	r7, ip, r7
 800e0bc:	f849 7b04 	str.w	r7, [r9], #4
 800e0c0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e0c4:	40cf      	lsrs	r7, r1
 800e0c6:	e7d9      	b.n	800e07c <rshift+0x4c>
 800e0c8:	f851 cb04 	ldr.w	ip, [r1], #4
 800e0cc:	f847 cf04 	str.w	ip, [r7, #4]!
 800e0d0:	e7c2      	b.n	800e058 <rshift+0x28>
 800e0d2:	4623      	mov	r3, r4
 800e0d4:	e7e0      	b.n	800e098 <rshift+0x68>

0800e0d6 <__hexdig_fun>:
 800e0d6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e0da:	2b09      	cmp	r3, #9
 800e0dc:	d802      	bhi.n	800e0e4 <__hexdig_fun+0xe>
 800e0de:	3820      	subs	r0, #32
 800e0e0:	b2c0      	uxtb	r0, r0
 800e0e2:	4770      	bx	lr
 800e0e4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e0e8:	2b05      	cmp	r3, #5
 800e0ea:	d801      	bhi.n	800e0f0 <__hexdig_fun+0x1a>
 800e0ec:	3847      	subs	r0, #71	; 0x47
 800e0ee:	e7f7      	b.n	800e0e0 <__hexdig_fun+0xa>
 800e0f0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e0f4:	2b05      	cmp	r3, #5
 800e0f6:	d801      	bhi.n	800e0fc <__hexdig_fun+0x26>
 800e0f8:	3827      	subs	r0, #39	; 0x27
 800e0fa:	e7f1      	b.n	800e0e0 <__hexdig_fun+0xa>
 800e0fc:	2000      	movs	r0, #0
 800e0fe:	4770      	bx	lr

0800e100 <__gethex>:
 800e100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e104:	4681      	mov	r9, r0
 800e106:	468a      	mov	sl, r1
 800e108:	4617      	mov	r7, r2
 800e10a:	680a      	ldr	r2, [r1, #0]
 800e10c:	b085      	sub	sp, #20
 800e10e:	f102 0b02 	add.w	fp, r2, #2
 800e112:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e116:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e11a:	9302      	str	r3, [sp, #8]
 800e11c:	32fe      	adds	r2, #254	; 0xfe
 800e11e:	eb02 030b 	add.w	r3, r2, fp
 800e122:	46d8      	mov	r8, fp
 800e124:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800e128:	9301      	str	r3, [sp, #4]
 800e12a:	2830      	cmp	r0, #48	; 0x30
 800e12c:	d0f7      	beq.n	800e11e <__gethex+0x1e>
 800e12e:	f7ff ffd2 	bl	800e0d6 <__hexdig_fun>
 800e132:	4604      	mov	r4, r0
 800e134:	2800      	cmp	r0, #0
 800e136:	d138      	bne.n	800e1aa <__gethex+0xaa>
 800e138:	2201      	movs	r2, #1
 800e13a:	4640      	mov	r0, r8
 800e13c:	49a7      	ldr	r1, [pc, #668]	; (800e3dc <__gethex+0x2dc>)
 800e13e:	f7fe f99b 	bl	800c478 <strncmp>
 800e142:	4606      	mov	r6, r0
 800e144:	2800      	cmp	r0, #0
 800e146:	d169      	bne.n	800e21c <__gethex+0x11c>
 800e148:	f898 0001 	ldrb.w	r0, [r8, #1]
 800e14c:	465d      	mov	r5, fp
 800e14e:	f7ff ffc2 	bl	800e0d6 <__hexdig_fun>
 800e152:	2800      	cmp	r0, #0
 800e154:	d064      	beq.n	800e220 <__gethex+0x120>
 800e156:	465a      	mov	r2, fp
 800e158:	7810      	ldrb	r0, [r2, #0]
 800e15a:	4690      	mov	r8, r2
 800e15c:	2830      	cmp	r0, #48	; 0x30
 800e15e:	f102 0201 	add.w	r2, r2, #1
 800e162:	d0f9      	beq.n	800e158 <__gethex+0x58>
 800e164:	f7ff ffb7 	bl	800e0d6 <__hexdig_fun>
 800e168:	2301      	movs	r3, #1
 800e16a:	fab0 f480 	clz	r4, r0
 800e16e:	465e      	mov	r6, fp
 800e170:	0964      	lsrs	r4, r4, #5
 800e172:	9301      	str	r3, [sp, #4]
 800e174:	4642      	mov	r2, r8
 800e176:	4615      	mov	r5, r2
 800e178:	7828      	ldrb	r0, [r5, #0]
 800e17a:	3201      	adds	r2, #1
 800e17c:	f7ff ffab 	bl	800e0d6 <__hexdig_fun>
 800e180:	2800      	cmp	r0, #0
 800e182:	d1f8      	bne.n	800e176 <__gethex+0x76>
 800e184:	2201      	movs	r2, #1
 800e186:	4628      	mov	r0, r5
 800e188:	4994      	ldr	r1, [pc, #592]	; (800e3dc <__gethex+0x2dc>)
 800e18a:	f7fe f975 	bl	800c478 <strncmp>
 800e18e:	b978      	cbnz	r0, 800e1b0 <__gethex+0xb0>
 800e190:	b946      	cbnz	r6, 800e1a4 <__gethex+0xa4>
 800e192:	1c6e      	adds	r6, r5, #1
 800e194:	4632      	mov	r2, r6
 800e196:	4615      	mov	r5, r2
 800e198:	7828      	ldrb	r0, [r5, #0]
 800e19a:	3201      	adds	r2, #1
 800e19c:	f7ff ff9b 	bl	800e0d6 <__hexdig_fun>
 800e1a0:	2800      	cmp	r0, #0
 800e1a2:	d1f8      	bne.n	800e196 <__gethex+0x96>
 800e1a4:	1b73      	subs	r3, r6, r5
 800e1a6:	009e      	lsls	r6, r3, #2
 800e1a8:	e004      	b.n	800e1b4 <__gethex+0xb4>
 800e1aa:	2400      	movs	r4, #0
 800e1ac:	4626      	mov	r6, r4
 800e1ae:	e7e1      	b.n	800e174 <__gethex+0x74>
 800e1b0:	2e00      	cmp	r6, #0
 800e1b2:	d1f7      	bne.n	800e1a4 <__gethex+0xa4>
 800e1b4:	782b      	ldrb	r3, [r5, #0]
 800e1b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e1ba:	2b50      	cmp	r3, #80	; 0x50
 800e1bc:	d13d      	bne.n	800e23a <__gethex+0x13a>
 800e1be:	786b      	ldrb	r3, [r5, #1]
 800e1c0:	2b2b      	cmp	r3, #43	; 0x2b
 800e1c2:	d02f      	beq.n	800e224 <__gethex+0x124>
 800e1c4:	2b2d      	cmp	r3, #45	; 0x2d
 800e1c6:	d031      	beq.n	800e22c <__gethex+0x12c>
 800e1c8:	f04f 0b00 	mov.w	fp, #0
 800e1cc:	1c69      	adds	r1, r5, #1
 800e1ce:	7808      	ldrb	r0, [r1, #0]
 800e1d0:	f7ff ff81 	bl	800e0d6 <__hexdig_fun>
 800e1d4:	1e42      	subs	r2, r0, #1
 800e1d6:	b2d2      	uxtb	r2, r2
 800e1d8:	2a18      	cmp	r2, #24
 800e1da:	d82e      	bhi.n	800e23a <__gethex+0x13a>
 800e1dc:	f1a0 0210 	sub.w	r2, r0, #16
 800e1e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e1e4:	f7ff ff77 	bl	800e0d6 <__hexdig_fun>
 800e1e8:	f100 3cff 	add.w	ip, r0, #4294967295
 800e1ec:	fa5f fc8c 	uxtb.w	ip, ip
 800e1f0:	f1bc 0f18 	cmp.w	ip, #24
 800e1f4:	d91d      	bls.n	800e232 <__gethex+0x132>
 800e1f6:	f1bb 0f00 	cmp.w	fp, #0
 800e1fa:	d000      	beq.n	800e1fe <__gethex+0xfe>
 800e1fc:	4252      	negs	r2, r2
 800e1fe:	4416      	add	r6, r2
 800e200:	f8ca 1000 	str.w	r1, [sl]
 800e204:	b1dc      	cbz	r4, 800e23e <__gethex+0x13e>
 800e206:	9b01      	ldr	r3, [sp, #4]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	bf14      	ite	ne
 800e20c:	f04f 0800 	movne.w	r8, #0
 800e210:	f04f 0806 	moveq.w	r8, #6
 800e214:	4640      	mov	r0, r8
 800e216:	b005      	add	sp, #20
 800e218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e21c:	4645      	mov	r5, r8
 800e21e:	4626      	mov	r6, r4
 800e220:	2401      	movs	r4, #1
 800e222:	e7c7      	b.n	800e1b4 <__gethex+0xb4>
 800e224:	f04f 0b00 	mov.w	fp, #0
 800e228:	1ca9      	adds	r1, r5, #2
 800e22a:	e7d0      	b.n	800e1ce <__gethex+0xce>
 800e22c:	f04f 0b01 	mov.w	fp, #1
 800e230:	e7fa      	b.n	800e228 <__gethex+0x128>
 800e232:	230a      	movs	r3, #10
 800e234:	fb03 0002 	mla	r0, r3, r2, r0
 800e238:	e7d0      	b.n	800e1dc <__gethex+0xdc>
 800e23a:	4629      	mov	r1, r5
 800e23c:	e7e0      	b.n	800e200 <__gethex+0x100>
 800e23e:	4621      	mov	r1, r4
 800e240:	eba5 0308 	sub.w	r3, r5, r8
 800e244:	3b01      	subs	r3, #1
 800e246:	2b07      	cmp	r3, #7
 800e248:	dc0a      	bgt.n	800e260 <__gethex+0x160>
 800e24a:	4648      	mov	r0, r9
 800e24c:	f000 faa0 	bl	800e790 <_Balloc>
 800e250:	4604      	mov	r4, r0
 800e252:	b940      	cbnz	r0, 800e266 <__gethex+0x166>
 800e254:	4602      	mov	r2, r0
 800e256:	21e4      	movs	r1, #228	; 0xe4
 800e258:	4b61      	ldr	r3, [pc, #388]	; (800e3e0 <__gethex+0x2e0>)
 800e25a:	4862      	ldr	r0, [pc, #392]	; (800e3e4 <__gethex+0x2e4>)
 800e25c:	f7fe fffe 	bl	800d25c <__assert_func>
 800e260:	3101      	adds	r1, #1
 800e262:	105b      	asrs	r3, r3, #1
 800e264:	e7ef      	b.n	800e246 <__gethex+0x146>
 800e266:	2300      	movs	r3, #0
 800e268:	469b      	mov	fp, r3
 800e26a:	f100 0a14 	add.w	sl, r0, #20
 800e26e:	f8cd a004 	str.w	sl, [sp, #4]
 800e272:	45a8      	cmp	r8, r5
 800e274:	d344      	bcc.n	800e300 <__gethex+0x200>
 800e276:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e27a:	4658      	mov	r0, fp
 800e27c:	f848 bb04 	str.w	fp, [r8], #4
 800e280:	eba8 080a 	sub.w	r8, r8, sl
 800e284:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800e288:	6122      	str	r2, [r4, #16]
 800e28a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800e28e:	f000 fb71 	bl	800e974 <__hi0bits>
 800e292:	683d      	ldr	r5, [r7, #0]
 800e294:	eba8 0800 	sub.w	r8, r8, r0
 800e298:	45a8      	cmp	r8, r5
 800e29a:	dd59      	ble.n	800e350 <__gethex+0x250>
 800e29c:	eba8 0805 	sub.w	r8, r8, r5
 800e2a0:	4641      	mov	r1, r8
 800e2a2:	4620      	mov	r0, r4
 800e2a4:	f000 feef 	bl	800f086 <__any_on>
 800e2a8:	4683      	mov	fp, r0
 800e2aa:	b1b8      	cbz	r0, 800e2dc <__gethex+0x1dc>
 800e2ac:	f04f 0b01 	mov.w	fp, #1
 800e2b0:	f108 33ff 	add.w	r3, r8, #4294967295
 800e2b4:	1159      	asrs	r1, r3, #5
 800e2b6:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e2ba:	f003 021f 	and.w	r2, r3, #31
 800e2be:	fa0b f202 	lsl.w	r2, fp, r2
 800e2c2:	420a      	tst	r2, r1
 800e2c4:	d00a      	beq.n	800e2dc <__gethex+0x1dc>
 800e2c6:	455b      	cmp	r3, fp
 800e2c8:	dd06      	ble.n	800e2d8 <__gethex+0x1d8>
 800e2ca:	4620      	mov	r0, r4
 800e2cc:	f1a8 0102 	sub.w	r1, r8, #2
 800e2d0:	f000 fed9 	bl	800f086 <__any_on>
 800e2d4:	2800      	cmp	r0, #0
 800e2d6:	d138      	bne.n	800e34a <__gethex+0x24a>
 800e2d8:	f04f 0b02 	mov.w	fp, #2
 800e2dc:	4641      	mov	r1, r8
 800e2de:	4620      	mov	r0, r4
 800e2e0:	f7ff fea6 	bl	800e030 <rshift>
 800e2e4:	4446      	add	r6, r8
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	42b3      	cmp	r3, r6
 800e2ea:	da41      	bge.n	800e370 <__gethex+0x270>
 800e2ec:	4621      	mov	r1, r4
 800e2ee:	4648      	mov	r0, r9
 800e2f0:	f000 fa8e 	bl	800e810 <_Bfree>
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e2f8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800e2fc:	6013      	str	r3, [r2, #0]
 800e2fe:	e789      	b.n	800e214 <__gethex+0x114>
 800e300:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800e304:	2a2e      	cmp	r2, #46	; 0x2e
 800e306:	d014      	beq.n	800e332 <__gethex+0x232>
 800e308:	2b20      	cmp	r3, #32
 800e30a:	d106      	bne.n	800e31a <__gethex+0x21a>
 800e30c:	9b01      	ldr	r3, [sp, #4]
 800e30e:	f843 bb04 	str.w	fp, [r3], #4
 800e312:	f04f 0b00 	mov.w	fp, #0
 800e316:	9301      	str	r3, [sp, #4]
 800e318:	465b      	mov	r3, fp
 800e31a:	7828      	ldrb	r0, [r5, #0]
 800e31c:	9303      	str	r3, [sp, #12]
 800e31e:	f7ff feda 	bl	800e0d6 <__hexdig_fun>
 800e322:	9b03      	ldr	r3, [sp, #12]
 800e324:	f000 000f 	and.w	r0, r0, #15
 800e328:	4098      	lsls	r0, r3
 800e32a:	ea4b 0b00 	orr.w	fp, fp, r0
 800e32e:	3304      	adds	r3, #4
 800e330:	e79f      	b.n	800e272 <__gethex+0x172>
 800e332:	45a8      	cmp	r8, r5
 800e334:	d8e8      	bhi.n	800e308 <__gethex+0x208>
 800e336:	2201      	movs	r2, #1
 800e338:	4628      	mov	r0, r5
 800e33a:	4928      	ldr	r1, [pc, #160]	; (800e3dc <__gethex+0x2dc>)
 800e33c:	9303      	str	r3, [sp, #12]
 800e33e:	f7fe f89b 	bl	800c478 <strncmp>
 800e342:	9b03      	ldr	r3, [sp, #12]
 800e344:	2800      	cmp	r0, #0
 800e346:	d1df      	bne.n	800e308 <__gethex+0x208>
 800e348:	e793      	b.n	800e272 <__gethex+0x172>
 800e34a:	f04f 0b03 	mov.w	fp, #3
 800e34e:	e7c5      	b.n	800e2dc <__gethex+0x1dc>
 800e350:	da0b      	bge.n	800e36a <__gethex+0x26a>
 800e352:	eba5 0808 	sub.w	r8, r5, r8
 800e356:	4621      	mov	r1, r4
 800e358:	4642      	mov	r2, r8
 800e35a:	4648      	mov	r0, r9
 800e35c:	f000 fc70 	bl	800ec40 <__lshift>
 800e360:	4604      	mov	r4, r0
 800e362:	eba6 0608 	sub.w	r6, r6, r8
 800e366:	f100 0a14 	add.w	sl, r0, #20
 800e36a:	f04f 0b00 	mov.w	fp, #0
 800e36e:	e7ba      	b.n	800e2e6 <__gethex+0x1e6>
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	42b3      	cmp	r3, r6
 800e374:	dd74      	ble.n	800e460 <__gethex+0x360>
 800e376:	1b9e      	subs	r6, r3, r6
 800e378:	42b5      	cmp	r5, r6
 800e37a:	dc35      	bgt.n	800e3e8 <__gethex+0x2e8>
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	2b02      	cmp	r3, #2
 800e380:	d023      	beq.n	800e3ca <__gethex+0x2ca>
 800e382:	2b03      	cmp	r3, #3
 800e384:	d025      	beq.n	800e3d2 <__gethex+0x2d2>
 800e386:	2b01      	cmp	r3, #1
 800e388:	d115      	bne.n	800e3b6 <__gethex+0x2b6>
 800e38a:	42b5      	cmp	r5, r6
 800e38c:	d113      	bne.n	800e3b6 <__gethex+0x2b6>
 800e38e:	2d01      	cmp	r5, #1
 800e390:	d10b      	bne.n	800e3aa <__gethex+0x2aa>
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	9a02      	ldr	r2, [sp, #8]
 800e396:	f04f 0862 	mov.w	r8, #98	; 0x62
 800e39a:	6013      	str	r3, [r2, #0]
 800e39c:	2301      	movs	r3, #1
 800e39e:	6123      	str	r3, [r4, #16]
 800e3a0:	f8ca 3000 	str.w	r3, [sl]
 800e3a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e3a6:	601c      	str	r4, [r3, #0]
 800e3a8:	e734      	b.n	800e214 <__gethex+0x114>
 800e3aa:	4620      	mov	r0, r4
 800e3ac:	1e69      	subs	r1, r5, #1
 800e3ae:	f000 fe6a 	bl	800f086 <__any_on>
 800e3b2:	2800      	cmp	r0, #0
 800e3b4:	d1ed      	bne.n	800e392 <__gethex+0x292>
 800e3b6:	4621      	mov	r1, r4
 800e3b8:	4648      	mov	r0, r9
 800e3ba:	f000 fa29 	bl	800e810 <_Bfree>
 800e3be:	2300      	movs	r3, #0
 800e3c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e3c2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800e3c6:	6013      	str	r3, [r2, #0]
 800e3c8:	e724      	b.n	800e214 <__gethex+0x114>
 800e3ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d1f2      	bne.n	800e3b6 <__gethex+0x2b6>
 800e3d0:	e7df      	b.n	800e392 <__gethex+0x292>
 800e3d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d1dc      	bne.n	800e392 <__gethex+0x292>
 800e3d8:	e7ed      	b.n	800e3b6 <__gethex+0x2b6>
 800e3da:	bf00      	nop
 800e3dc:	08010742 	.word	0x08010742
 800e3e0:	08010a93 	.word	0x08010a93
 800e3e4:	08010aa4 	.word	0x08010aa4
 800e3e8:	f106 38ff 	add.w	r8, r6, #4294967295
 800e3ec:	f1bb 0f00 	cmp.w	fp, #0
 800e3f0:	d133      	bne.n	800e45a <__gethex+0x35a>
 800e3f2:	f1b8 0f00 	cmp.w	r8, #0
 800e3f6:	d004      	beq.n	800e402 <__gethex+0x302>
 800e3f8:	4641      	mov	r1, r8
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	f000 fe43 	bl	800f086 <__any_on>
 800e400:	4683      	mov	fp, r0
 800e402:	2301      	movs	r3, #1
 800e404:	ea4f 1268 	mov.w	r2, r8, asr #5
 800e408:	f008 081f 	and.w	r8, r8, #31
 800e40c:	fa03 f308 	lsl.w	r3, r3, r8
 800e410:	f04f 0802 	mov.w	r8, #2
 800e414:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e418:	4631      	mov	r1, r6
 800e41a:	4213      	tst	r3, r2
 800e41c:	4620      	mov	r0, r4
 800e41e:	bf18      	it	ne
 800e420:	f04b 0b02 	orrne.w	fp, fp, #2
 800e424:	1bad      	subs	r5, r5, r6
 800e426:	f7ff fe03 	bl	800e030 <rshift>
 800e42a:	687e      	ldr	r6, [r7, #4]
 800e42c:	f1bb 0f00 	cmp.w	fp, #0
 800e430:	d04a      	beq.n	800e4c8 <__gethex+0x3c8>
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	2b02      	cmp	r3, #2
 800e436:	d016      	beq.n	800e466 <__gethex+0x366>
 800e438:	2b03      	cmp	r3, #3
 800e43a:	d018      	beq.n	800e46e <__gethex+0x36e>
 800e43c:	2b01      	cmp	r3, #1
 800e43e:	d109      	bne.n	800e454 <__gethex+0x354>
 800e440:	f01b 0f02 	tst.w	fp, #2
 800e444:	d006      	beq.n	800e454 <__gethex+0x354>
 800e446:	f8da 3000 	ldr.w	r3, [sl]
 800e44a:	ea4b 0b03 	orr.w	fp, fp, r3
 800e44e:	f01b 0f01 	tst.w	fp, #1
 800e452:	d10f      	bne.n	800e474 <__gethex+0x374>
 800e454:	f048 0810 	orr.w	r8, r8, #16
 800e458:	e036      	b.n	800e4c8 <__gethex+0x3c8>
 800e45a:	f04f 0b01 	mov.w	fp, #1
 800e45e:	e7d0      	b.n	800e402 <__gethex+0x302>
 800e460:	f04f 0801 	mov.w	r8, #1
 800e464:	e7e2      	b.n	800e42c <__gethex+0x32c>
 800e466:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e468:	f1c3 0301 	rsb	r3, r3, #1
 800e46c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e46e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e470:	2b00      	cmp	r3, #0
 800e472:	d0ef      	beq.n	800e454 <__gethex+0x354>
 800e474:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e478:	f104 0214 	add.w	r2, r4, #20
 800e47c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800e480:	9301      	str	r3, [sp, #4]
 800e482:	2300      	movs	r3, #0
 800e484:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800e488:	4694      	mov	ip, r2
 800e48a:	f852 1b04 	ldr.w	r1, [r2], #4
 800e48e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800e492:	d01e      	beq.n	800e4d2 <__gethex+0x3d2>
 800e494:	3101      	adds	r1, #1
 800e496:	f8cc 1000 	str.w	r1, [ip]
 800e49a:	f1b8 0f02 	cmp.w	r8, #2
 800e49e:	f104 0214 	add.w	r2, r4, #20
 800e4a2:	d13d      	bne.n	800e520 <__gethex+0x420>
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	3b01      	subs	r3, #1
 800e4a8:	42ab      	cmp	r3, r5
 800e4aa:	d10b      	bne.n	800e4c4 <__gethex+0x3c4>
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	1169      	asrs	r1, r5, #5
 800e4b0:	f005 051f 	and.w	r5, r5, #31
 800e4b4:	fa03 f505 	lsl.w	r5, r3, r5
 800e4b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e4bc:	421d      	tst	r5, r3
 800e4be:	bf18      	it	ne
 800e4c0:	f04f 0801 	movne.w	r8, #1
 800e4c4:	f048 0820 	orr.w	r8, r8, #32
 800e4c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e4ca:	601c      	str	r4, [r3, #0]
 800e4cc:	9b02      	ldr	r3, [sp, #8]
 800e4ce:	601e      	str	r6, [r3, #0]
 800e4d0:	e6a0      	b.n	800e214 <__gethex+0x114>
 800e4d2:	4290      	cmp	r0, r2
 800e4d4:	f842 3c04 	str.w	r3, [r2, #-4]
 800e4d8:	d8d6      	bhi.n	800e488 <__gethex+0x388>
 800e4da:	68a2      	ldr	r2, [r4, #8]
 800e4dc:	4593      	cmp	fp, r2
 800e4de:	db17      	blt.n	800e510 <__gethex+0x410>
 800e4e0:	6861      	ldr	r1, [r4, #4]
 800e4e2:	4648      	mov	r0, r9
 800e4e4:	3101      	adds	r1, #1
 800e4e6:	f000 f953 	bl	800e790 <_Balloc>
 800e4ea:	4682      	mov	sl, r0
 800e4ec:	b918      	cbnz	r0, 800e4f6 <__gethex+0x3f6>
 800e4ee:	4602      	mov	r2, r0
 800e4f0:	2184      	movs	r1, #132	; 0x84
 800e4f2:	4b1a      	ldr	r3, [pc, #104]	; (800e55c <__gethex+0x45c>)
 800e4f4:	e6b1      	b.n	800e25a <__gethex+0x15a>
 800e4f6:	6922      	ldr	r2, [r4, #16]
 800e4f8:	f104 010c 	add.w	r1, r4, #12
 800e4fc:	3202      	adds	r2, #2
 800e4fe:	0092      	lsls	r2, r2, #2
 800e500:	300c      	adds	r0, #12
 800e502:	f7fe fe92 	bl	800d22a <memcpy>
 800e506:	4621      	mov	r1, r4
 800e508:	4648      	mov	r0, r9
 800e50a:	f000 f981 	bl	800e810 <_Bfree>
 800e50e:	4654      	mov	r4, sl
 800e510:	6922      	ldr	r2, [r4, #16]
 800e512:	1c51      	adds	r1, r2, #1
 800e514:	6121      	str	r1, [r4, #16]
 800e516:	2101      	movs	r1, #1
 800e518:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e51c:	6151      	str	r1, [r2, #20]
 800e51e:	e7bc      	b.n	800e49a <__gethex+0x39a>
 800e520:	6921      	ldr	r1, [r4, #16]
 800e522:	4559      	cmp	r1, fp
 800e524:	dd0b      	ble.n	800e53e <__gethex+0x43e>
 800e526:	2101      	movs	r1, #1
 800e528:	4620      	mov	r0, r4
 800e52a:	f7ff fd81 	bl	800e030 <rshift>
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	3601      	adds	r6, #1
 800e532:	42b3      	cmp	r3, r6
 800e534:	f6ff aeda 	blt.w	800e2ec <__gethex+0x1ec>
 800e538:	f04f 0801 	mov.w	r8, #1
 800e53c:	e7c2      	b.n	800e4c4 <__gethex+0x3c4>
 800e53e:	f015 051f 	ands.w	r5, r5, #31
 800e542:	d0f9      	beq.n	800e538 <__gethex+0x438>
 800e544:	9b01      	ldr	r3, [sp, #4]
 800e546:	f1c5 0520 	rsb	r5, r5, #32
 800e54a:	441a      	add	r2, r3
 800e54c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800e550:	f000 fa10 	bl	800e974 <__hi0bits>
 800e554:	42a8      	cmp	r0, r5
 800e556:	dbe6      	blt.n	800e526 <__gethex+0x426>
 800e558:	e7ee      	b.n	800e538 <__gethex+0x438>
 800e55a:	bf00      	nop
 800e55c:	08010a93 	.word	0x08010a93

0800e560 <L_shift>:
 800e560:	f1c2 0208 	rsb	r2, r2, #8
 800e564:	0092      	lsls	r2, r2, #2
 800e566:	b570      	push	{r4, r5, r6, lr}
 800e568:	f1c2 0620 	rsb	r6, r2, #32
 800e56c:	6843      	ldr	r3, [r0, #4]
 800e56e:	6804      	ldr	r4, [r0, #0]
 800e570:	fa03 f506 	lsl.w	r5, r3, r6
 800e574:	432c      	orrs	r4, r5
 800e576:	40d3      	lsrs	r3, r2
 800e578:	6004      	str	r4, [r0, #0]
 800e57a:	f840 3f04 	str.w	r3, [r0, #4]!
 800e57e:	4288      	cmp	r0, r1
 800e580:	d3f4      	bcc.n	800e56c <L_shift+0xc>
 800e582:	bd70      	pop	{r4, r5, r6, pc}

0800e584 <__match>:
 800e584:	b530      	push	{r4, r5, lr}
 800e586:	6803      	ldr	r3, [r0, #0]
 800e588:	3301      	adds	r3, #1
 800e58a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e58e:	b914      	cbnz	r4, 800e596 <__match+0x12>
 800e590:	6003      	str	r3, [r0, #0]
 800e592:	2001      	movs	r0, #1
 800e594:	bd30      	pop	{r4, r5, pc}
 800e596:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e59a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e59e:	2d19      	cmp	r5, #25
 800e5a0:	bf98      	it	ls
 800e5a2:	3220      	addls	r2, #32
 800e5a4:	42a2      	cmp	r2, r4
 800e5a6:	d0f0      	beq.n	800e58a <__match+0x6>
 800e5a8:	2000      	movs	r0, #0
 800e5aa:	e7f3      	b.n	800e594 <__match+0x10>

0800e5ac <__hexnan>:
 800e5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5b0:	2500      	movs	r5, #0
 800e5b2:	680b      	ldr	r3, [r1, #0]
 800e5b4:	4682      	mov	sl, r0
 800e5b6:	115e      	asrs	r6, r3, #5
 800e5b8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e5bc:	f013 031f 	ands.w	r3, r3, #31
 800e5c0:	bf18      	it	ne
 800e5c2:	3604      	addne	r6, #4
 800e5c4:	1f37      	subs	r7, r6, #4
 800e5c6:	4690      	mov	r8, r2
 800e5c8:	46b9      	mov	r9, r7
 800e5ca:	463c      	mov	r4, r7
 800e5cc:	46ab      	mov	fp, r5
 800e5ce:	b087      	sub	sp, #28
 800e5d0:	6801      	ldr	r1, [r0, #0]
 800e5d2:	9301      	str	r3, [sp, #4]
 800e5d4:	f846 5c04 	str.w	r5, [r6, #-4]
 800e5d8:	9502      	str	r5, [sp, #8]
 800e5da:	784a      	ldrb	r2, [r1, #1]
 800e5dc:	1c4b      	adds	r3, r1, #1
 800e5de:	9303      	str	r3, [sp, #12]
 800e5e0:	b342      	cbz	r2, 800e634 <__hexnan+0x88>
 800e5e2:	4610      	mov	r0, r2
 800e5e4:	9105      	str	r1, [sp, #20]
 800e5e6:	9204      	str	r2, [sp, #16]
 800e5e8:	f7ff fd75 	bl	800e0d6 <__hexdig_fun>
 800e5ec:	2800      	cmp	r0, #0
 800e5ee:	d14f      	bne.n	800e690 <__hexnan+0xe4>
 800e5f0:	9a04      	ldr	r2, [sp, #16]
 800e5f2:	9905      	ldr	r1, [sp, #20]
 800e5f4:	2a20      	cmp	r2, #32
 800e5f6:	d818      	bhi.n	800e62a <__hexnan+0x7e>
 800e5f8:	9b02      	ldr	r3, [sp, #8]
 800e5fa:	459b      	cmp	fp, r3
 800e5fc:	dd13      	ble.n	800e626 <__hexnan+0x7a>
 800e5fe:	454c      	cmp	r4, r9
 800e600:	d206      	bcs.n	800e610 <__hexnan+0x64>
 800e602:	2d07      	cmp	r5, #7
 800e604:	dc04      	bgt.n	800e610 <__hexnan+0x64>
 800e606:	462a      	mov	r2, r5
 800e608:	4649      	mov	r1, r9
 800e60a:	4620      	mov	r0, r4
 800e60c:	f7ff ffa8 	bl	800e560 <L_shift>
 800e610:	4544      	cmp	r4, r8
 800e612:	d950      	bls.n	800e6b6 <__hexnan+0x10a>
 800e614:	2300      	movs	r3, #0
 800e616:	f1a4 0904 	sub.w	r9, r4, #4
 800e61a:	f844 3c04 	str.w	r3, [r4, #-4]
 800e61e:	461d      	mov	r5, r3
 800e620:	464c      	mov	r4, r9
 800e622:	f8cd b008 	str.w	fp, [sp, #8]
 800e626:	9903      	ldr	r1, [sp, #12]
 800e628:	e7d7      	b.n	800e5da <__hexnan+0x2e>
 800e62a:	2a29      	cmp	r2, #41	; 0x29
 800e62c:	d155      	bne.n	800e6da <__hexnan+0x12e>
 800e62e:	3102      	adds	r1, #2
 800e630:	f8ca 1000 	str.w	r1, [sl]
 800e634:	f1bb 0f00 	cmp.w	fp, #0
 800e638:	d04f      	beq.n	800e6da <__hexnan+0x12e>
 800e63a:	454c      	cmp	r4, r9
 800e63c:	d206      	bcs.n	800e64c <__hexnan+0xa0>
 800e63e:	2d07      	cmp	r5, #7
 800e640:	dc04      	bgt.n	800e64c <__hexnan+0xa0>
 800e642:	462a      	mov	r2, r5
 800e644:	4649      	mov	r1, r9
 800e646:	4620      	mov	r0, r4
 800e648:	f7ff ff8a 	bl	800e560 <L_shift>
 800e64c:	4544      	cmp	r4, r8
 800e64e:	d934      	bls.n	800e6ba <__hexnan+0x10e>
 800e650:	4623      	mov	r3, r4
 800e652:	f1a8 0204 	sub.w	r2, r8, #4
 800e656:	f853 1b04 	ldr.w	r1, [r3], #4
 800e65a:	429f      	cmp	r7, r3
 800e65c:	f842 1f04 	str.w	r1, [r2, #4]!
 800e660:	d2f9      	bcs.n	800e656 <__hexnan+0xaa>
 800e662:	1b3b      	subs	r3, r7, r4
 800e664:	f023 0303 	bic.w	r3, r3, #3
 800e668:	3304      	adds	r3, #4
 800e66a:	3e03      	subs	r6, #3
 800e66c:	3401      	adds	r4, #1
 800e66e:	42a6      	cmp	r6, r4
 800e670:	bf38      	it	cc
 800e672:	2304      	movcc	r3, #4
 800e674:	2200      	movs	r2, #0
 800e676:	4443      	add	r3, r8
 800e678:	f843 2b04 	str.w	r2, [r3], #4
 800e67c:	429f      	cmp	r7, r3
 800e67e:	d2fb      	bcs.n	800e678 <__hexnan+0xcc>
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	b91b      	cbnz	r3, 800e68c <__hexnan+0xe0>
 800e684:	4547      	cmp	r7, r8
 800e686:	d126      	bne.n	800e6d6 <__hexnan+0x12a>
 800e688:	2301      	movs	r3, #1
 800e68a:	603b      	str	r3, [r7, #0]
 800e68c:	2005      	movs	r0, #5
 800e68e:	e025      	b.n	800e6dc <__hexnan+0x130>
 800e690:	3501      	adds	r5, #1
 800e692:	2d08      	cmp	r5, #8
 800e694:	f10b 0b01 	add.w	fp, fp, #1
 800e698:	dd06      	ble.n	800e6a8 <__hexnan+0xfc>
 800e69a:	4544      	cmp	r4, r8
 800e69c:	d9c3      	bls.n	800e626 <__hexnan+0x7a>
 800e69e:	2300      	movs	r3, #0
 800e6a0:	2501      	movs	r5, #1
 800e6a2:	f844 3c04 	str.w	r3, [r4, #-4]
 800e6a6:	3c04      	subs	r4, #4
 800e6a8:	6822      	ldr	r2, [r4, #0]
 800e6aa:	f000 000f 	and.w	r0, r0, #15
 800e6ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e6b2:	6020      	str	r0, [r4, #0]
 800e6b4:	e7b7      	b.n	800e626 <__hexnan+0x7a>
 800e6b6:	2508      	movs	r5, #8
 800e6b8:	e7b5      	b.n	800e626 <__hexnan+0x7a>
 800e6ba:	9b01      	ldr	r3, [sp, #4]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d0df      	beq.n	800e680 <__hexnan+0xd4>
 800e6c0:	f04f 32ff 	mov.w	r2, #4294967295
 800e6c4:	f1c3 0320 	rsb	r3, r3, #32
 800e6c8:	40da      	lsrs	r2, r3
 800e6ca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e6ce:	4013      	ands	r3, r2
 800e6d0:	f846 3c04 	str.w	r3, [r6, #-4]
 800e6d4:	e7d4      	b.n	800e680 <__hexnan+0xd4>
 800e6d6:	3f04      	subs	r7, #4
 800e6d8:	e7d2      	b.n	800e680 <__hexnan+0xd4>
 800e6da:	2004      	movs	r0, #4
 800e6dc:	b007      	add	sp, #28
 800e6de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800e6e4 <_findenv_r>:
 800e6e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6e8:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800e758 <_findenv_r+0x74>
 800e6ec:	4607      	mov	r7, r0
 800e6ee:	4689      	mov	r9, r1
 800e6f0:	4616      	mov	r6, r2
 800e6f2:	f000 ffed 	bl	800f6d0 <__env_lock>
 800e6f6:	f8da 4000 	ldr.w	r4, [sl]
 800e6fa:	b134      	cbz	r4, 800e70a <_findenv_r+0x26>
 800e6fc:	464b      	mov	r3, r9
 800e6fe:	4698      	mov	r8, r3
 800e700:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e704:	b13a      	cbz	r2, 800e716 <_findenv_r+0x32>
 800e706:	2a3d      	cmp	r2, #61	; 0x3d
 800e708:	d1f9      	bne.n	800e6fe <_findenv_r+0x1a>
 800e70a:	4638      	mov	r0, r7
 800e70c:	f000 ffe6 	bl	800f6dc <__env_unlock>
 800e710:	2000      	movs	r0, #0
 800e712:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e716:	eba8 0809 	sub.w	r8, r8, r9
 800e71a:	46a3      	mov	fp, r4
 800e71c:	f854 0b04 	ldr.w	r0, [r4], #4
 800e720:	2800      	cmp	r0, #0
 800e722:	d0f2      	beq.n	800e70a <_findenv_r+0x26>
 800e724:	4642      	mov	r2, r8
 800e726:	4649      	mov	r1, r9
 800e728:	f7fd fea6 	bl	800c478 <strncmp>
 800e72c:	2800      	cmp	r0, #0
 800e72e:	d1f4      	bne.n	800e71a <_findenv_r+0x36>
 800e730:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e734:	eb03 0508 	add.w	r5, r3, r8
 800e738:	f813 3008 	ldrb.w	r3, [r3, r8]
 800e73c:	2b3d      	cmp	r3, #61	; 0x3d
 800e73e:	d1ec      	bne.n	800e71a <_findenv_r+0x36>
 800e740:	f8da 3000 	ldr.w	r3, [sl]
 800e744:	4638      	mov	r0, r7
 800e746:	ebab 0303 	sub.w	r3, fp, r3
 800e74a:	109b      	asrs	r3, r3, #2
 800e74c:	6033      	str	r3, [r6, #0]
 800e74e:	f000 ffc5 	bl	800f6dc <__env_unlock>
 800e752:	1c68      	adds	r0, r5, #1
 800e754:	e7dd      	b.n	800e712 <_findenv_r+0x2e>
 800e756:	bf00      	nop
 800e758:	20000000 	.word	0x20000000

0800e75c <_getenv_r>:
 800e75c:	b507      	push	{r0, r1, r2, lr}
 800e75e:	aa01      	add	r2, sp, #4
 800e760:	f7ff ffc0 	bl	800e6e4 <_findenv_r>
 800e764:	b003      	add	sp, #12
 800e766:	f85d fb04 	ldr.w	pc, [sp], #4

0800e76a <__ascii_mbtowc>:
 800e76a:	b082      	sub	sp, #8
 800e76c:	b901      	cbnz	r1, 800e770 <__ascii_mbtowc+0x6>
 800e76e:	a901      	add	r1, sp, #4
 800e770:	b142      	cbz	r2, 800e784 <__ascii_mbtowc+0x1a>
 800e772:	b14b      	cbz	r3, 800e788 <__ascii_mbtowc+0x1e>
 800e774:	7813      	ldrb	r3, [r2, #0]
 800e776:	600b      	str	r3, [r1, #0]
 800e778:	7812      	ldrb	r2, [r2, #0]
 800e77a:	1e10      	subs	r0, r2, #0
 800e77c:	bf18      	it	ne
 800e77e:	2001      	movne	r0, #1
 800e780:	b002      	add	sp, #8
 800e782:	4770      	bx	lr
 800e784:	4610      	mov	r0, r2
 800e786:	e7fb      	b.n	800e780 <__ascii_mbtowc+0x16>
 800e788:	f06f 0001 	mvn.w	r0, #1
 800e78c:	e7f8      	b.n	800e780 <__ascii_mbtowc+0x16>
	...

0800e790 <_Balloc>:
 800e790:	b570      	push	{r4, r5, r6, lr}
 800e792:	69c6      	ldr	r6, [r0, #28]
 800e794:	4604      	mov	r4, r0
 800e796:	460d      	mov	r5, r1
 800e798:	b976      	cbnz	r6, 800e7b8 <_Balloc+0x28>
 800e79a:	2010      	movs	r0, #16
 800e79c:	f7fc f91e 	bl	800a9dc <malloc>
 800e7a0:	4602      	mov	r2, r0
 800e7a2:	61e0      	str	r0, [r4, #28]
 800e7a4:	b920      	cbnz	r0, 800e7b0 <_Balloc+0x20>
 800e7a6:	216b      	movs	r1, #107	; 0x6b
 800e7a8:	4b17      	ldr	r3, [pc, #92]	; (800e808 <_Balloc+0x78>)
 800e7aa:	4818      	ldr	r0, [pc, #96]	; (800e80c <_Balloc+0x7c>)
 800e7ac:	f7fe fd56 	bl	800d25c <__assert_func>
 800e7b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e7b4:	6006      	str	r6, [r0, #0]
 800e7b6:	60c6      	str	r6, [r0, #12]
 800e7b8:	69e6      	ldr	r6, [r4, #28]
 800e7ba:	68f3      	ldr	r3, [r6, #12]
 800e7bc:	b183      	cbz	r3, 800e7e0 <_Balloc+0x50>
 800e7be:	69e3      	ldr	r3, [r4, #28]
 800e7c0:	68db      	ldr	r3, [r3, #12]
 800e7c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e7c6:	b9b8      	cbnz	r0, 800e7f8 <_Balloc+0x68>
 800e7c8:	2101      	movs	r1, #1
 800e7ca:	fa01 f605 	lsl.w	r6, r1, r5
 800e7ce:	1d72      	adds	r2, r6, #5
 800e7d0:	4620      	mov	r0, r4
 800e7d2:	0092      	lsls	r2, r2, #2
 800e7d4:	f000 ff67 	bl	800f6a6 <_calloc_r>
 800e7d8:	b160      	cbz	r0, 800e7f4 <_Balloc+0x64>
 800e7da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e7de:	e00e      	b.n	800e7fe <_Balloc+0x6e>
 800e7e0:	2221      	movs	r2, #33	; 0x21
 800e7e2:	2104      	movs	r1, #4
 800e7e4:	4620      	mov	r0, r4
 800e7e6:	f000 ff5e 	bl	800f6a6 <_calloc_r>
 800e7ea:	69e3      	ldr	r3, [r4, #28]
 800e7ec:	60f0      	str	r0, [r6, #12]
 800e7ee:	68db      	ldr	r3, [r3, #12]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d1e4      	bne.n	800e7be <_Balloc+0x2e>
 800e7f4:	2000      	movs	r0, #0
 800e7f6:	bd70      	pop	{r4, r5, r6, pc}
 800e7f8:	6802      	ldr	r2, [r0, #0]
 800e7fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e7fe:	2300      	movs	r3, #0
 800e800:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e804:	e7f7      	b.n	800e7f6 <_Balloc+0x66>
 800e806:	bf00      	nop
 800e808:	080108cb 	.word	0x080108cb
 800e80c:	08010b04 	.word	0x08010b04

0800e810 <_Bfree>:
 800e810:	b570      	push	{r4, r5, r6, lr}
 800e812:	69c6      	ldr	r6, [r0, #28]
 800e814:	4605      	mov	r5, r0
 800e816:	460c      	mov	r4, r1
 800e818:	b976      	cbnz	r6, 800e838 <_Bfree+0x28>
 800e81a:	2010      	movs	r0, #16
 800e81c:	f7fc f8de 	bl	800a9dc <malloc>
 800e820:	4602      	mov	r2, r0
 800e822:	61e8      	str	r0, [r5, #28]
 800e824:	b920      	cbnz	r0, 800e830 <_Bfree+0x20>
 800e826:	218f      	movs	r1, #143	; 0x8f
 800e828:	4b08      	ldr	r3, [pc, #32]	; (800e84c <_Bfree+0x3c>)
 800e82a:	4809      	ldr	r0, [pc, #36]	; (800e850 <_Bfree+0x40>)
 800e82c:	f7fe fd16 	bl	800d25c <__assert_func>
 800e830:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e834:	6006      	str	r6, [r0, #0]
 800e836:	60c6      	str	r6, [r0, #12]
 800e838:	b13c      	cbz	r4, 800e84a <_Bfree+0x3a>
 800e83a:	69eb      	ldr	r3, [r5, #28]
 800e83c:	6862      	ldr	r2, [r4, #4]
 800e83e:	68db      	ldr	r3, [r3, #12]
 800e840:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e844:	6021      	str	r1, [r4, #0]
 800e846:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e84a:	bd70      	pop	{r4, r5, r6, pc}
 800e84c:	080108cb 	.word	0x080108cb
 800e850:	08010b04 	.word	0x08010b04

0800e854 <__multadd>:
 800e854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e858:	4607      	mov	r7, r0
 800e85a:	460c      	mov	r4, r1
 800e85c:	461e      	mov	r6, r3
 800e85e:	2000      	movs	r0, #0
 800e860:	690d      	ldr	r5, [r1, #16]
 800e862:	f101 0c14 	add.w	ip, r1, #20
 800e866:	f8dc 3000 	ldr.w	r3, [ip]
 800e86a:	3001      	adds	r0, #1
 800e86c:	b299      	uxth	r1, r3
 800e86e:	fb02 6101 	mla	r1, r2, r1, r6
 800e872:	0c1e      	lsrs	r6, r3, #16
 800e874:	0c0b      	lsrs	r3, r1, #16
 800e876:	fb02 3306 	mla	r3, r2, r6, r3
 800e87a:	b289      	uxth	r1, r1
 800e87c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e880:	4285      	cmp	r5, r0
 800e882:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e886:	f84c 1b04 	str.w	r1, [ip], #4
 800e88a:	dcec      	bgt.n	800e866 <__multadd+0x12>
 800e88c:	b30e      	cbz	r6, 800e8d2 <__multadd+0x7e>
 800e88e:	68a3      	ldr	r3, [r4, #8]
 800e890:	42ab      	cmp	r3, r5
 800e892:	dc19      	bgt.n	800e8c8 <__multadd+0x74>
 800e894:	6861      	ldr	r1, [r4, #4]
 800e896:	4638      	mov	r0, r7
 800e898:	3101      	adds	r1, #1
 800e89a:	f7ff ff79 	bl	800e790 <_Balloc>
 800e89e:	4680      	mov	r8, r0
 800e8a0:	b928      	cbnz	r0, 800e8ae <__multadd+0x5a>
 800e8a2:	4602      	mov	r2, r0
 800e8a4:	21ba      	movs	r1, #186	; 0xba
 800e8a6:	4b0c      	ldr	r3, [pc, #48]	; (800e8d8 <__multadd+0x84>)
 800e8a8:	480c      	ldr	r0, [pc, #48]	; (800e8dc <__multadd+0x88>)
 800e8aa:	f7fe fcd7 	bl	800d25c <__assert_func>
 800e8ae:	6922      	ldr	r2, [r4, #16]
 800e8b0:	f104 010c 	add.w	r1, r4, #12
 800e8b4:	3202      	adds	r2, #2
 800e8b6:	0092      	lsls	r2, r2, #2
 800e8b8:	300c      	adds	r0, #12
 800e8ba:	f7fe fcb6 	bl	800d22a <memcpy>
 800e8be:	4621      	mov	r1, r4
 800e8c0:	4638      	mov	r0, r7
 800e8c2:	f7ff ffa5 	bl	800e810 <_Bfree>
 800e8c6:	4644      	mov	r4, r8
 800e8c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e8cc:	3501      	adds	r5, #1
 800e8ce:	615e      	str	r6, [r3, #20]
 800e8d0:	6125      	str	r5, [r4, #16]
 800e8d2:	4620      	mov	r0, r4
 800e8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8d8:	08010a93 	.word	0x08010a93
 800e8dc:	08010b04 	.word	0x08010b04

0800e8e0 <__s2b>:
 800e8e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8e4:	4615      	mov	r5, r2
 800e8e6:	2209      	movs	r2, #9
 800e8e8:	461f      	mov	r7, r3
 800e8ea:	3308      	adds	r3, #8
 800e8ec:	460c      	mov	r4, r1
 800e8ee:	fb93 f3f2 	sdiv	r3, r3, r2
 800e8f2:	4606      	mov	r6, r0
 800e8f4:	2201      	movs	r2, #1
 800e8f6:	2100      	movs	r1, #0
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	db09      	blt.n	800e910 <__s2b+0x30>
 800e8fc:	4630      	mov	r0, r6
 800e8fe:	f7ff ff47 	bl	800e790 <_Balloc>
 800e902:	b940      	cbnz	r0, 800e916 <__s2b+0x36>
 800e904:	4602      	mov	r2, r0
 800e906:	21d3      	movs	r1, #211	; 0xd3
 800e908:	4b18      	ldr	r3, [pc, #96]	; (800e96c <__s2b+0x8c>)
 800e90a:	4819      	ldr	r0, [pc, #100]	; (800e970 <__s2b+0x90>)
 800e90c:	f7fe fca6 	bl	800d25c <__assert_func>
 800e910:	0052      	lsls	r2, r2, #1
 800e912:	3101      	adds	r1, #1
 800e914:	e7f0      	b.n	800e8f8 <__s2b+0x18>
 800e916:	9b08      	ldr	r3, [sp, #32]
 800e918:	2d09      	cmp	r5, #9
 800e91a:	6143      	str	r3, [r0, #20]
 800e91c:	f04f 0301 	mov.w	r3, #1
 800e920:	6103      	str	r3, [r0, #16]
 800e922:	dd16      	ble.n	800e952 <__s2b+0x72>
 800e924:	f104 0909 	add.w	r9, r4, #9
 800e928:	46c8      	mov	r8, r9
 800e92a:	442c      	add	r4, r5
 800e92c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e930:	4601      	mov	r1, r0
 800e932:	220a      	movs	r2, #10
 800e934:	4630      	mov	r0, r6
 800e936:	3b30      	subs	r3, #48	; 0x30
 800e938:	f7ff ff8c 	bl	800e854 <__multadd>
 800e93c:	45a0      	cmp	r8, r4
 800e93e:	d1f5      	bne.n	800e92c <__s2b+0x4c>
 800e940:	f1a5 0408 	sub.w	r4, r5, #8
 800e944:	444c      	add	r4, r9
 800e946:	1b2d      	subs	r5, r5, r4
 800e948:	1963      	adds	r3, r4, r5
 800e94a:	42bb      	cmp	r3, r7
 800e94c:	db04      	blt.n	800e958 <__s2b+0x78>
 800e94e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e952:	2509      	movs	r5, #9
 800e954:	340a      	adds	r4, #10
 800e956:	e7f6      	b.n	800e946 <__s2b+0x66>
 800e958:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e95c:	4601      	mov	r1, r0
 800e95e:	220a      	movs	r2, #10
 800e960:	4630      	mov	r0, r6
 800e962:	3b30      	subs	r3, #48	; 0x30
 800e964:	f7ff ff76 	bl	800e854 <__multadd>
 800e968:	e7ee      	b.n	800e948 <__s2b+0x68>
 800e96a:	bf00      	nop
 800e96c:	08010a93 	.word	0x08010a93
 800e970:	08010b04 	.word	0x08010b04

0800e974 <__hi0bits>:
 800e974:	0c02      	lsrs	r2, r0, #16
 800e976:	0412      	lsls	r2, r2, #16
 800e978:	4603      	mov	r3, r0
 800e97a:	b9ca      	cbnz	r2, 800e9b0 <__hi0bits+0x3c>
 800e97c:	0403      	lsls	r3, r0, #16
 800e97e:	2010      	movs	r0, #16
 800e980:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e984:	bf04      	itt	eq
 800e986:	021b      	lsleq	r3, r3, #8
 800e988:	3008      	addeq	r0, #8
 800e98a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e98e:	bf04      	itt	eq
 800e990:	011b      	lsleq	r3, r3, #4
 800e992:	3004      	addeq	r0, #4
 800e994:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e998:	bf04      	itt	eq
 800e99a:	009b      	lsleq	r3, r3, #2
 800e99c:	3002      	addeq	r0, #2
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	db05      	blt.n	800e9ae <__hi0bits+0x3a>
 800e9a2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800e9a6:	f100 0001 	add.w	r0, r0, #1
 800e9aa:	bf08      	it	eq
 800e9ac:	2020      	moveq	r0, #32
 800e9ae:	4770      	bx	lr
 800e9b0:	2000      	movs	r0, #0
 800e9b2:	e7e5      	b.n	800e980 <__hi0bits+0xc>

0800e9b4 <__lo0bits>:
 800e9b4:	6803      	ldr	r3, [r0, #0]
 800e9b6:	4602      	mov	r2, r0
 800e9b8:	f013 0007 	ands.w	r0, r3, #7
 800e9bc:	d00b      	beq.n	800e9d6 <__lo0bits+0x22>
 800e9be:	07d9      	lsls	r1, r3, #31
 800e9c0:	d421      	bmi.n	800ea06 <__lo0bits+0x52>
 800e9c2:	0798      	lsls	r0, r3, #30
 800e9c4:	bf49      	itett	mi
 800e9c6:	085b      	lsrmi	r3, r3, #1
 800e9c8:	089b      	lsrpl	r3, r3, #2
 800e9ca:	2001      	movmi	r0, #1
 800e9cc:	6013      	strmi	r3, [r2, #0]
 800e9ce:	bf5c      	itt	pl
 800e9d0:	2002      	movpl	r0, #2
 800e9d2:	6013      	strpl	r3, [r2, #0]
 800e9d4:	4770      	bx	lr
 800e9d6:	b299      	uxth	r1, r3
 800e9d8:	b909      	cbnz	r1, 800e9de <__lo0bits+0x2a>
 800e9da:	2010      	movs	r0, #16
 800e9dc:	0c1b      	lsrs	r3, r3, #16
 800e9de:	b2d9      	uxtb	r1, r3
 800e9e0:	b909      	cbnz	r1, 800e9e6 <__lo0bits+0x32>
 800e9e2:	3008      	adds	r0, #8
 800e9e4:	0a1b      	lsrs	r3, r3, #8
 800e9e6:	0719      	lsls	r1, r3, #28
 800e9e8:	bf04      	itt	eq
 800e9ea:	091b      	lsreq	r3, r3, #4
 800e9ec:	3004      	addeq	r0, #4
 800e9ee:	0799      	lsls	r1, r3, #30
 800e9f0:	bf04      	itt	eq
 800e9f2:	089b      	lsreq	r3, r3, #2
 800e9f4:	3002      	addeq	r0, #2
 800e9f6:	07d9      	lsls	r1, r3, #31
 800e9f8:	d403      	bmi.n	800ea02 <__lo0bits+0x4e>
 800e9fa:	085b      	lsrs	r3, r3, #1
 800e9fc:	f100 0001 	add.w	r0, r0, #1
 800ea00:	d003      	beq.n	800ea0a <__lo0bits+0x56>
 800ea02:	6013      	str	r3, [r2, #0]
 800ea04:	4770      	bx	lr
 800ea06:	2000      	movs	r0, #0
 800ea08:	4770      	bx	lr
 800ea0a:	2020      	movs	r0, #32
 800ea0c:	4770      	bx	lr
	...

0800ea10 <__i2b>:
 800ea10:	b510      	push	{r4, lr}
 800ea12:	460c      	mov	r4, r1
 800ea14:	2101      	movs	r1, #1
 800ea16:	f7ff febb 	bl	800e790 <_Balloc>
 800ea1a:	4602      	mov	r2, r0
 800ea1c:	b928      	cbnz	r0, 800ea2a <__i2b+0x1a>
 800ea1e:	f240 1145 	movw	r1, #325	; 0x145
 800ea22:	4b04      	ldr	r3, [pc, #16]	; (800ea34 <__i2b+0x24>)
 800ea24:	4804      	ldr	r0, [pc, #16]	; (800ea38 <__i2b+0x28>)
 800ea26:	f7fe fc19 	bl	800d25c <__assert_func>
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	6144      	str	r4, [r0, #20]
 800ea2e:	6103      	str	r3, [r0, #16]
 800ea30:	bd10      	pop	{r4, pc}
 800ea32:	bf00      	nop
 800ea34:	08010a93 	.word	0x08010a93
 800ea38:	08010b04 	.word	0x08010b04

0800ea3c <__multiply>:
 800ea3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea40:	4691      	mov	r9, r2
 800ea42:	690a      	ldr	r2, [r1, #16]
 800ea44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea48:	460c      	mov	r4, r1
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	bfbe      	ittt	lt
 800ea4e:	460b      	movlt	r3, r1
 800ea50:	464c      	movlt	r4, r9
 800ea52:	4699      	movlt	r9, r3
 800ea54:	6927      	ldr	r7, [r4, #16]
 800ea56:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ea5a:	68a3      	ldr	r3, [r4, #8]
 800ea5c:	6861      	ldr	r1, [r4, #4]
 800ea5e:	eb07 060a 	add.w	r6, r7, sl
 800ea62:	42b3      	cmp	r3, r6
 800ea64:	b085      	sub	sp, #20
 800ea66:	bfb8      	it	lt
 800ea68:	3101      	addlt	r1, #1
 800ea6a:	f7ff fe91 	bl	800e790 <_Balloc>
 800ea6e:	b930      	cbnz	r0, 800ea7e <__multiply+0x42>
 800ea70:	4602      	mov	r2, r0
 800ea72:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ea76:	4b43      	ldr	r3, [pc, #268]	; (800eb84 <__multiply+0x148>)
 800ea78:	4843      	ldr	r0, [pc, #268]	; (800eb88 <__multiply+0x14c>)
 800ea7a:	f7fe fbef 	bl	800d25c <__assert_func>
 800ea7e:	f100 0514 	add.w	r5, r0, #20
 800ea82:	462b      	mov	r3, r5
 800ea84:	2200      	movs	r2, #0
 800ea86:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ea8a:	4543      	cmp	r3, r8
 800ea8c:	d321      	bcc.n	800ead2 <__multiply+0x96>
 800ea8e:	f104 0314 	add.w	r3, r4, #20
 800ea92:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ea96:	f109 0314 	add.w	r3, r9, #20
 800ea9a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ea9e:	9202      	str	r2, [sp, #8]
 800eaa0:	1b3a      	subs	r2, r7, r4
 800eaa2:	3a15      	subs	r2, #21
 800eaa4:	f022 0203 	bic.w	r2, r2, #3
 800eaa8:	3204      	adds	r2, #4
 800eaaa:	f104 0115 	add.w	r1, r4, #21
 800eaae:	428f      	cmp	r7, r1
 800eab0:	bf38      	it	cc
 800eab2:	2204      	movcc	r2, #4
 800eab4:	9201      	str	r2, [sp, #4]
 800eab6:	9a02      	ldr	r2, [sp, #8]
 800eab8:	9303      	str	r3, [sp, #12]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d80c      	bhi.n	800ead8 <__multiply+0x9c>
 800eabe:	2e00      	cmp	r6, #0
 800eac0:	dd03      	ble.n	800eaca <__multiply+0x8e>
 800eac2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d05a      	beq.n	800eb80 <__multiply+0x144>
 800eaca:	6106      	str	r6, [r0, #16]
 800eacc:	b005      	add	sp, #20
 800eace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ead2:	f843 2b04 	str.w	r2, [r3], #4
 800ead6:	e7d8      	b.n	800ea8a <__multiply+0x4e>
 800ead8:	f8b3 a000 	ldrh.w	sl, [r3]
 800eadc:	f1ba 0f00 	cmp.w	sl, #0
 800eae0:	d023      	beq.n	800eb2a <__multiply+0xee>
 800eae2:	46a9      	mov	r9, r5
 800eae4:	f04f 0c00 	mov.w	ip, #0
 800eae8:	f104 0e14 	add.w	lr, r4, #20
 800eaec:	f85e 2b04 	ldr.w	r2, [lr], #4
 800eaf0:	f8d9 1000 	ldr.w	r1, [r9]
 800eaf4:	fa1f fb82 	uxth.w	fp, r2
 800eaf8:	b289      	uxth	r1, r1
 800eafa:	fb0a 110b 	mla	r1, sl, fp, r1
 800eafe:	4461      	add	r1, ip
 800eb00:	f8d9 c000 	ldr.w	ip, [r9]
 800eb04:	0c12      	lsrs	r2, r2, #16
 800eb06:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800eb0a:	fb0a c202 	mla	r2, sl, r2, ip
 800eb0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800eb12:	b289      	uxth	r1, r1
 800eb14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800eb18:	4577      	cmp	r7, lr
 800eb1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eb1e:	f849 1b04 	str.w	r1, [r9], #4
 800eb22:	d8e3      	bhi.n	800eaec <__multiply+0xb0>
 800eb24:	9a01      	ldr	r2, [sp, #4]
 800eb26:	f845 c002 	str.w	ip, [r5, r2]
 800eb2a:	9a03      	ldr	r2, [sp, #12]
 800eb2c:	3304      	adds	r3, #4
 800eb2e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800eb32:	f1b9 0f00 	cmp.w	r9, #0
 800eb36:	d021      	beq.n	800eb7c <__multiply+0x140>
 800eb38:	46ae      	mov	lr, r5
 800eb3a:	f04f 0a00 	mov.w	sl, #0
 800eb3e:	6829      	ldr	r1, [r5, #0]
 800eb40:	f104 0c14 	add.w	ip, r4, #20
 800eb44:	f8bc b000 	ldrh.w	fp, [ip]
 800eb48:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800eb4c:	b289      	uxth	r1, r1
 800eb4e:	fb09 220b 	mla	r2, r9, fp, r2
 800eb52:	4452      	add	r2, sl
 800eb54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800eb58:	f84e 1b04 	str.w	r1, [lr], #4
 800eb5c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800eb60:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800eb64:	f8be 1000 	ldrh.w	r1, [lr]
 800eb68:	4567      	cmp	r7, ip
 800eb6a:	fb09 110a 	mla	r1, r9, sl, r1
 800eb6e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800eb72:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800eb76:	d8e5      	bhi.n	800eb44 <__multiply+0x108>
 800eb78:	9a01      	ldr	r2, [sp, #4]
 800eb7a:	50a9      	str	r1, [r5, r2]
 800eb7c:	3504      	adds	r5, #4
 800eb7e:	e79a      	b.n	800eab6 <__multiply+0x7a>
 800eb80:	3e01      	subs	r6, #1
 800eb82:	e79c      	b.n	800eabe <__multiply+0x82>
 800eb84:	08010a93 	.word	0x08010a93
 800eb88:	08010b04 	.word	0x08010b04

0800eb8c <__pow5mult>:
 800eb8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb90:	4615      	mov	r5, r2
 800eb92:	f012 0203 	ands.w	r2, r2, #3
 800eb96:	4606      	mov	r6, r0
 800eb98:	460f      	mov	r7, r1
 800eb9a:	d007      	beq.n	800ebac <__pow5mult+0x20>
 800eb9c:	4c25      	ldr	r4, [pc, #148]	; (800ec34 <__pow5mult+0xa8>)
 800eb9e:	3a01      	subs	r2, #1
 800eba0:	2300      	movs	r3, #0
 800eba2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eba6:	f7ff fe55 	bl	800e854 <__multadd>
 800ebaa:	4607      	mov	r7, r0
 800ebac:	10ad      	asrs	r5, r5, #2
 800ebae:	d03d      	beq.n	800ec2c <__pow5mult+0xa0>
 800ebb0:	69f4      	ldr	r4, [r6, #28]
 800ebb2:	b97c      	cbnz	r4, 800ebd4 <__pow5mult+0x48>
 800ebb4:	2010      	movs	r0, #16
 800ebb6:	f7fb ff11 	bl	800a9dc <malloc>
 800ebba:	4602      	mov	r2, r0
 800ebbc:	61f0      	str	r0, [r6, #28]
 800ebbe:	b928      	cbnz	r0, 800ebcc <__pow5mult+0x40>
 800ebc0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ebc4:	4b1c      	ldr	r3, [pc, #112]	; (800ec38 <__pow5mult+0xac>)
 800ebc6:	481d      	ldr	r0, [pc, #116]	; (800ec3c <__pow5mult+0xb0>)
 800ebc8:	f7fe fb48 	bl	800d25c <__assert_func>
 800ebcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ebd0:	6004      	str	r4, [r0, #0]
 800ebd2:	60c4      	str	r4, [r0, #12]
 800ebd4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ebd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ebdc:	b94c      	cbnz	r4, 800ebf2 <__pow5mult+0x66>
 800ebde:	f240 2171 	movw	r1, #625	; 0x271
 800ebe2:	4630      	mov	r0, r6
 800ebe4:	f7ff ff14 	bl	800ea10 <__i2b>
 800ebe8:	2300      	movs	r3, #0
 800ebea:	4604      	mov	r4, r0
 800ebec:	f8c8 0008 	str.w	r0, [r8, #8]
 800ebf0:	6003      	str	r3, [r0, #0]
 800ebf2:	f04f 0900 	mov.w	r9, #0
 800ebf6:	07eb      	lsls	r3, r5, #31
 800ebf8:	d50a      	bpl.n	800ec10 <__pow5mult+0x84>
 800ebfa:	4639      	mov	r1, r7
 800ebfc:	4622      	mov	r2, r4
 800ebfe:	4630      	mov	r0, r6
 800ec00:	f7ff ff1c 	bl	800ea3c <__multiply>
 800ec04:	4680      	mov	r8, r0
 800ec06:	4639      	mov	r1, r7
 800ec08:	4630      	mov	r0, r6
 800ec0a:	f7ff fe01 	bl	800e810 <_Bfree>
 800ec0e:	4647      	mov	r7, r8
 800ec10:	106d      	asrs	r5, r5, #1
 800ec12:	d00b      	beq.n	800ec2c <__pow5mult+0xa0>
 800ec14:	6820      	ldr	r0, [r4, #0]
 800ec16:	b938      	cbnz	r0, 800ec28 <__pow5mult+0x9c>
 800ec18:	4622      	mov	r2, r4
 800ec1a:	4621      	mov	r1, r4
 800ec1c:	4630      	mov	r0, r6
 800ec1e:	f7ff ff0d 	bl	800ea3c <__multiply>
 800ec22:	6020      	str	r0, [r4, #0]
 800ec24:	f8c0 9000 	str.w	r9, [r0]
 800ec28:	4604      	mov	r4, r0
 800ec2a:	e7e4      	b.n	800ebf6 <__pow5mult+0x6a>
 800ec2c:	4638      	mov	r0, r7
 800ec2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec32:	bf00      	nop
 800ec34:	08010c50 	.word	0x08010c50
 800ec38:	080108cb 	.word	0x080108cb
 800ec3c:	08010b04 	.word	0x08010b04

0800ec40 <__lshift>:
 800ec40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec44:	460c      	mov	r4, r1
 800ec46:	4607      	mov	r7, r0
 800ec48:	4691      	mov	r9, r2
 800ec4a:	6923      	ldr	r3, [r4, #16]
 800ec4c:	6849      	ldr	r1, [r1, #4]
 800ec4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ec52:	68a3      	ldr	r3, [r4, #8]
 800ec54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ec58:	f108 0601 	add.w	r6, r8, #1
 800ec5c:	42b3      	cmp	r3, r6
 800ec5e:	db0b      	blt.n	800ec78 <__lshift+0x38>
 800ec60:	4638      	mov	r0, r7
 800ec62:	f7ff fd95 	bl	800e790 <_Balloc>
 800ec66:	4605      	mov	r5, r0
 800ec68:	b948      	cbnz	r0, 800ec7e <__lshift+0x3e>
 800ec6a:	4602      	mov	r2, r0
 800ec6c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ec70:	4b27      	ldr	r3, [pc, #156]	; (800ed10 <__lshift+0xd0>)
 800ec72:	4828      	ldr	r0, [pc, #160]	; (800ed14 <__lshift+0xd4>)
 800ec74:	f7fe faf2 	bl	800d25c <__assert_func>
 800ec78:	3101      	adds	r1, #1
 800ec7a:	005b      	lsls	r3, r3, #1
 800ec7c:	e7ee      	b.n	800ec5c <__lshift+0x1c>
 800ec7e:	2300      	movs	r3, #0
 800ec80:	f100 0114 	add.w	r1, r0, #20
 800ec84:	f100 0210 	add.w	r2, r0, #16
 800ec88:	4618      	mov	r0, r3
 800ec8a:	4553      	cmp	r3, sl
 800ec8c:	db33      	blt.n	800ecf6 <__lshift+0xb6>
 800ec8e:	6920      	ldr	r0, [r4, #16]
 800ec90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ec94:	f104 0314 	add.w	r3, r4, #20
 800ec98:	f019 091f 	ands.w	r9, r9, #31
 800ec9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eca0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eca4:	d02b      	beq.n	800ecfe <__lshift+0xbe>
 800eca6:	468a      	mov	sl, r1
 800eca8:	2200      	movs	r2, #0
 800ecaa:	f1c9 0e20 	rsb	lr, r9, #32
 800ecae:	6818      	ldr	r0, [r3, #0]
 800ecb0:	fa00 f009 	lsl.w	r0, r0, r9
 800ecb4:	4310      	orrs	r0, r2
 800ecb6:	f84a 0b04 	str.w	r0, [sl], #4
 800ecba:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecbe:	459c      	cmp	ip, r3
 800ecc0:	fa22 f20e 	lsr.w	r2, r2, lr
 800ecc4:	d8f3      	bhi.n	800ecae <__lshift+0x6e>
 800ecc6:	ebac 0304 	sub.w	r3, ip, r4
 800ecca:	3b15      	subs	r3, #21
 800eccc:	f023 0303 	bic.w	r3, r3, #3
 800ecd0:	3304      	adds	r3, #4
 800ecd2:	f104 0015 	add.w	r0, r4, #21
 800ecd6:	4584      	cmp	ip, r0
 800ecd8:	bf38      	it	cc
 800ecda:	2304      	movcc	r3, #4
 800ecdc:	50ca      	str	r2, [r1, r3]
 800ecde:	b10a      	cbz	r2, 800ece4 <__lshift+0xa4>
 800ece0:	f108 0602 	add.w	r6, r8, #2
 800ece4:	3e01      	subs	r6, #1
 800ece6:	4638      	mov	r0, r7
 800ece8:	4621      	mov	r1, r4
 800ecea:	612e      	str	r6, [r5, #16]
 800ecec:	f7ff fd90 	bl	800e810 <_Bfree>
 800ecf0:	4628      	mov	r0, r5
 800ecf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecf6:	f842 0f04 	str.w	r0, [r2, #4]!
 800ecfa:	3301      	adds	r3, #1
 800ecfc:	e7c5      	b.n	800ec8a <__lshift+0x4a>
 800ecfe:	3904      	subs	r1, #4
 800ed00:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed04:	459c      	cmp	ip, r3
 800ed06:	f841 2f04 	str.w	r2, [r1, #4]!
 800ed0a:	d8f9      	bhi.n	800ed00 <__lshift+0xc0>
 800ed0c:	e7ea      	b.n	800ece4 <__lshift+0xa4>
 800ed0e:	bf00      	nop
 800ed10:	08010a93 	.word	0x08010a93
 800ed14:	08010b04 	.word	0x08010b04

0800ed18 <__mcmp>:
 800ed18:	4603      	mov	r3, r0
 800ed1a:	690a      	ldr	r2, [r1, #16]
 800ed1c:	6900      	ldr	r0, [r0, #16]
 800ed1e:	b530      	push	{r4, r5, lr}
 800ed20:	1a80      	subs	r0, r0, r2
 800ed22:	d10d      	bne.n	800ed40 <__mcmp+0x28>
 800ed24:	3314      	adds	r3, #20
 800ed26:	3114      	adds	r1, #20
 800ed28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ed2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ed30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ed34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ed38:	4295      	cmp	r5, r2
 800ed3a:	d002      	beq.n	800ed42 <__mcmp+0x2a>
 800ed3c:	d304      	bcc.n	800ed48 <__mcmp+0x30>
 800ed3e:	2001      	movs	r0, #1
 800ed40:	bd30      	pop	{r4, r5, pc}
 800ed42:	42a3      	cmp	r3, r4
 800ed44:	d3f4      	bcc.n	800ed30 <__mcmp+0x18>
 800ed46:	e7fb      	b.n	800ed40 <__mcmp+0x28>
 800ed48:	f04f 30ff 	mov.w	r0, #4294967295
 800ed4c:	e7f8      	b.n	800ed40 <__mcmp+0x28>
	...

0800ed50 <__mdiff>:
 800ed50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed54:	460d      	mov	r5, r1
 800ed56:	4607      	mov	r7, r0
 800ed58:	4611      	mov	r1, r2
 800ed5a:	4628      	mov	r0, r5
 800ed5c:	4614      	mov	r4, r2
 800ed5e:	f7ff ffdb 	bl	800ed18 <__mcmp>
 800ed62:	1e06      	subs	r6, r0, #0
 800ed64:	d111      	bne.n	800ed8a <__mdiff+0x3a>
 800ed66:	4631      	mov	r1, r6
 800ed68:	4638      	mov	r0, r7
 800ed6a:	f7ff fd11 	bl	800e790 <_Balloc>
 800ed6e:	4602      	mov	r2, r0
 800ed70:	b928      	cbnz	r0, 800ed7e <__mdiff+0x2e>
 800ed72:	f240 2137 	movw	r1, #567	; 0x237
 800ed76:	4b3a      	ldr	r3, [pc, #232]	; (800ee60 <__mdiff+0x110>)
 800ed78:	483a      	ldr	r0, [pc, #232]	; (800ee64 <__mdiff+0x114>)
 800ed7a:	f7fe fa6f 	bl	800d25c <__assert_func>
 800ed7e:	2301      	movs	r3, #1
 800ed80:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ed84:	4610      	mov	r0, r2
 800ed86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed8a:	bfa4      	itt	ge
 800ed8c:	4623      	movge	r3, r4
 800ed8e:	462c      	movge	r4, r5
 800ed90:	4638      	mov	r0, r7
 800ed92:	6861      	ldr	r1, [r4, #4]
 800ed94:	bfa6      	itte	ge
 800ed96:	461d      	movge	r5, r3
 800ed98:	2600      	movge	r6, #0
 800ed9a:	2601      	movlt	r6, #1
 800ed9c:	f7ff fcf8 	bl	800e790 <_Balloc>
 800eda0:	4602      	mov	r2, r0
 800eda2:	b918      	cbnz	r0, 800edac <__mdiff+0x5c>
 800eda4:	f240 2145 	movw	r1, #581	; 0x245
 800eda8:	4b2d      	ldr	r3, [pc, #180]	; (800ee60 <__mdiff+0x110>)
 800edaa:	e7e5      	b.n	800ed78 <__mdiff+0x28>
 800edac:	f102 0814 	add.w	r8, r2, #20
 800edb0:	46c2      	mov	sl, r8
 800edb2:	f04f 0c00 	mov.w	ip, #0
 800edb6:	6927      	ldr	r7, [r4, #16]
 800edb8:	60c6      	str	r6, [r0, #12]
 800edba:	692e      	ldr	r6, [r5, #16]
 800edbc:	f104 0014 	add.w	r0, r4, #20
 800edc0:	f105 0914 	add.w	r9, r5, #20
 800edc4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800edc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800edcc:	3410      	adds	r4, #16
 800edce:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800edd2:	f859 3b04 	ldr.w	r3, [r9], #4
 800edd6:	fa1f f18b 	uxth.w	r1, fp
 800edda:	4461      	add	r1, ip
 800eddc:	fa1f fc83 	uxth.w	ip, r3
 800ede0:	0c1b      	lsrs	r3, r3, #16
 800ede2:	eba1 010c 	sub.w	r1, r1, ip
 800ede6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800edea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800edee:	b289      	uxth	r1, r1
 800edf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800edf4:	454e      	cmp	r6, r9
 800edf6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800edfa:	f84a 1b04 	str.w	r1, [sl], #4
 800edfe:	d8e6      	bhi.n	800edce <__mdiff+0x7e>
 800ee00:	1b73      	subs	r3, r6, r5
 800ee02:	3b15      	subs	r3, #21
 800ee04:	f023 0303 	bic.w	r3, r3, #3
 800ee08:	3515      	adds	r5, #21
 800ee0a:	3304      	adds	r3, #4
 800ee0c:	42ae      	cmp	r6, r5
 800ee0e:	bf38      	it	cc
 800ee10:	2304      	movcc	r3, #4
 800ee12:	4418      	add	r0, r3
 800ee14:	4443      	add	r3, r8
 800ee16:	461e      	mov	r6, r3
 800ee18:	4605      	mov	r5, r0
 800ee1a:	4575      	cmp	r5, lr
 800ee1c:	d30e      	bcc.n	800ee3c <__mdiff+0xec>
 800ee1e:	f10e 0103 	add.w	r1, lr, #3
 800ee22:	1a09      	subs	r1, r1, r0
 800ee24:	f021 0103 	bic.w	r1, r1, #3
 800ee28:	3803      	subs	r0, #3
 800ee2a:	4586      	cmp	lr, r0
 800ee2c:	bf38      	it	cc
 800ee2e:	2100      	movcc	r1, #0
 800ee30:	440b      	add	r3, r1
 800ee32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ee36:	b189      	cbz	r1, 800ee5c <__mdiff+0x10c>
 800ee38:	6117      	str	r7, [r2, #16]
 800ee3a:	e7a3      	b.n	800ed84 <__mdiff+0x34>
 800ee3c:	f855 8b04 	ldr.w	r8, [r5], #4
 800ee40:	fa1f f188 	uxth.w	r1, r8
 800ee44:	4461      	add	r1, ip
 800ee46:	140c      	asrs	r4, r1, #16
 800ee48:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ee4c:	b289      	uxth	r1, r1
 800ee4e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ee52:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800ee56:	f846 1b04 	str.w	r1, [r6], #4
 800ee5a:	e7de      	b.n	800ee1a <__mdiff+0xca>
 800ee5c:	3f01      	subs	r7, #1
 800ee5e:	e7e8      	b.n	800ee32 <__mdiff+0xe2>
 800ee60:	08010a93 	.word	0x08010a93
 800ee64:	08010b04 	.word	0x08010b04

0800ee68 <__ulp>:
 800ee68:	4b0e      	ldr	r3, [pc, #56]	; (800eea4 <__ulp+0x3c>)
 800ee6a:	400b      	ands	r3, r1
 800ee6c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	dc08      	bgt.n	800ee86 <__ulp+0x1e>
 800ee74:	425b      	negs	r3, r3
 800ee76:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ee7a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ee7e:	da04      	bge.n	800ee8a <__ulp+0x22>
 800ee80:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ee84:	4113      	asrs	r3, r2
 800ee86:	2200      	movs	r2, #0
 800ee88:	e008      	b.n	800ee9c <__ulp+0x34>
 800ee8a:	f1a2 0314 	sub.w	r3, r2, #20
 800ee8e:	2b1e      	cmp	r3, #30
 800ee90:	bfd6      	itet	le
 800ee92:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ee96:	2201      	movgt	r2, #1
 800ee98:	40da      	lsrle	r2, r3
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	4619      	mov	r1, r3
 800ee9e:	4610      	mov	r0, r2
 800eea0:	4770      	bx	lr
 800eea2:	bf00      	nop
 800eea4:	7ff00000 	.word	0x7ff00000

0800eea8 <__b2d>:
 800eea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeaa:	6905      	ldr	r5, [r0, #16]
 800eeac:	f100 0714 	add.w	r7, r0, #20
 800eeb0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800eeb4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800eeb8:	1f2e      	subs	r6, r5, #4
 800eeba:	4620      	mov	r0, r4
 800eebc:	f7ff fd5a 	bl	800e974 <__hi0bits>
 800eec0:	f1c0 0220 	rsb	r2, r0, #32
 800eec4:	280a      	cmp	r0, #10
 800eec6:	4603      	mov	r3, r0
 800eec8:	f8df c068 	ldr.w	ip, [pc, #104]	; 800ef34 <__b2d+0x8c>
 800eecc:	600a      	str	r2, [r1, #0]
 800eece:	dc12      	bgt.n	800eef6 <__b2d+0x4e>
 800eed0:	f1c0 0e0b 	rsb	lr, r0, #11
 800eed4:	fa24 f20e 	lsr.w	r2, r4, lr
 800eed8:	42b7      	cmp	r7, r6
 800eeda:	ea42 010c 	orr.w	r1, r2, ip
 800eede:	bf2c      	ite	cs
 800eee0:	2200      	movcs	r2, #0
 800eee2:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800eee6:	3315      	adds	r3, #21
 800eee8:	fa04 f303 	lsl.w	r3, r4, r3
 800eeec:	fa22 f20e 	lsr.w	r2, r2, lr
 800eef0:	431a      	orrs	r2, r3
 800eef2:	4610      	mov	r0, r2
 800eef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eef6:	42b7      	cmp	r7, r6
 800eef8:	bf2e      	itee	cs
 800eefa:	2200      	movcs	r2, #0
 800eefc:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800ef00:	f1a5 0608 	subcc.w	r6, r5, #8
 800ef04:	3b0b      	subs	r3, #11
 800ef06:	d012      	beq.n	800ef2e <__b2d+0x86>
 800ef08:	f1c3 0520 	rsb	r5, r3, #32
 800ef0c:	fa22 f105 	lsr.w	r1, r2, r5
 800ef10:	409c      	lsls	r4, r3
 800ef12:	430c      	orrs	r4, r1
 800ef14:	42be      	cmp	r6, r7
 800ef16:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800ef1a:	bf94      	ite	ls
 800ef1c:	2400      	movls	r4, #0
 800ef1e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ef22:	409a      	lsls	r2, r3
 800ef24:	40ec      	lsrs	r4, r5
 800ef26:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ef2a:	4322      	orrs	r2, r4
 800ef2c:	e7e1      	b.n	800eef2 <__b2d+0x4a>
 800ef2e:	ea44 010c 	orr.w	r1, r4, ip
 800ef32:	e7de      	b.n	800eef2 <__b2d+0x4a>
 800ef34:	3ff00000 	.word	0x3ff00000

0800ef38 <__d2b>:
 800ef38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef3a:	2101      	movs	r1, #1
 800ef3c:	4617      	mov	r7, r2
 800ef3e:	461c      	mov	r4, r3
 800ef40:	9e08      	ldr	r6, [sp, #32]
 800ef42:	f7ff fc25 	bl	800e790 <_Balloc>
 800ef46:	4605      	mov	r5, r0
 800ef48:	b930      	cbnz	r0, 800ef58 <__d2b+0x20>
 800ef4a:	4602      	mov	r2, r0
 800ef4c:	f240 310f 	movw	r1, #783	; 0x30f
 800ef50:	4b22      	ldr	r3, [pc, #136]	; (800efdc <__d2b+0xa4>)
 800ef52:	4823      	ldr	r0, [pc, #140]	; (800efe0 <__d2b+0xa8>)
 800ef54:	f7fe f982 	bl	800d25c <__assert_func>
 800ef58:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ef5c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800ef60:	bb24      	cbnz	r4, 800efac <__d2b+0x74>
 800ef62:	2f00      	cmp	r7, #0
 800ef64:	9301      	str	r3, [sp, #4]
 800ef66:	d026      	beq.n	800efb6 <__d2b+0x7e>
 800ef68:	4668      	mov	r0, sp
 800ef6a:	9700      	str	r7, [sp, #0]
 800ef6c:	f7ff fd22 	bl	800e9b4 <__lo0bits>
 800ef70:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ef74:	b1e8      	cbz	r0, 800efb2 <__d2b+0x7a>
 800ef76:	f1c0 0320 	rsb	r3, r0, #32
 800ef7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ef7e:	430b      	orrs	r3, r1
 800ef80:	40c2      	lsrs	r2, r0
 800ef82:	616b      	str	r3, [r5, #20]
 800ef84:	9201      	str	r2, [sp, #4]
 800ef86:	9b01      	ldr	r3, [sp, #4]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	bf14      	ite	ne
 800ef8c:	2102      	movne	r1, #2
 800ef8e:	2101      	moveq	r1, #1
 800ef90:	61ab      	str	r3, [r5, #24]
 800ef92:	6129      	str	r1, [r5, #16]
 800ef94:	b1bc      	cbz	r4, 800efc6 <__d2b+0x8e>
 800ef96:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ef9a:	4404      	add	r4, r0
 800ef9c:	6034      	str	r4, [r6, #0]
 800ef9e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800efa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efa4:	6018      	str	r0, [r3, #0]
 800efa6:	4628      	mov	r0, r5
 800efa8:	b003      	add	sp, #12
 800efaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800efb0:	e7d7      	b.n	800ef62 <__d2b+0x2a>
 800efb2:	6169      	str	r1, [r5, #20]
 800efb4:	e7e7      	b.n	800ef86 <__d2b+0x4e>
 800efb6:	a801      	add	r0, sp, #4
 800efb8:	f7ff fcfc 	bl	800e9b4 <__lo0bits>
 800efbc:	9b01      	ldr	r3, [sp, #4]
 800efbe:	2101      	movs	r1, #1
 800efc0:	616b      	str	r3, [r5, #20]
 800efc2:	3020      	adds	r0, #32
 800efc4:	e7e5      	b.n	800ef92 <__d2b+0x5a>
 800efc6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800efca:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800efce:	6030      	str	r0, [r6, #0]
 800efd0:	6918      	ldr	r0, [r3, #16]
 800efd2:	f7ff fccf 	bl	800e974 <__hi0bits>
 800efd6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800efda:	e7e2      	b.n	800efa2 <__d2b+0x6a>
 800efdc:	08010a93 	.word	0x08010a93
 800efe0:	08010b04 	.word	0x08010b04

0800efe4 <__ratio>:
 800efe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efe8:	4688      	mov	r8, r1
 800efea:	4669      	mov	r1, sp
 800efec:	4681      	mov	r9, r0
 800efee:	f7ff ff5b 	bl	800eea8 <__b2d>
 800eff2:	460f      	mov	r7, r1
 800eff4:	4604      	mov	r4, r0
 800eff6:	460d      	mov	r5, r1
 800eff8:	4640      	mov	r0, r8
 800effa:	a901      	add	r1, sp, #4
 800effc:	f7ff ff54 	bl	800eea8 <__b2d>
 800f000:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f004:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f008:	468b      	mov	fp, r1
 800f00a:	eba3 0c02 	sub.w	ip, r3, r2
 800f00e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f012:	1a9b      	subs	r3, r3, r2
 800f014:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f018:	2b00      	cmp	r3, #0
 800f01a:	bfd5      	itete	le
 800f01c:	460a      	movle	r2, r1
 800f01e:	462a      	movgt	r2, r5
 800f020:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f024:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f028:	bfd8      	it	le
 800f02a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f02e:	465b      	mov	r3, fp
 800f030:	4602      	mov	r2, r0
 800f032:	4639      	mov	r1, r7
 800f034:	4620      	mov	r0, r4
 800f036:	f7f1 fbf3 	bl	8000820 <__aeabi_ddiv>
 800f03a:	b003      	add	sp, #12
 800f03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f040 <__copybits>:
 800f040:	3901      	subs	r1, #1
 800f042:	b570      	push	{r4, r5, r6, lr}
 800f044:	1149      	asrs	r1, r1, #5
 800f046:	6914      	ldr	r4, [r2, #16]
 800f048:	3101      	adds	r1, #1
 800f04a:	f102 0314 	add.w	r3, r2, #20
 800f04e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f052:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f056:	1f05      	subs	r5, r0, #4
 800f058:	42a3      	cmp	r3, r4
 800f05a:	d30c      	bcc.n	800f076 <__copybits+0x36>
 800f05c:	1aa3      	subs	r3, r4, r2
 800f05e:	3b11      	subs	r3, #17
 800f060:	f023 0303 	bic.w	r3, r3, #3
 800f064:	3211      	adds	r2, #17
 800f066:	42a2      	cmp	r2, r4
 800f068:	bf88      	it	hi
 800f06a:	2300      	movhi	r3, #0
 800f06c:	4418      	add	r0, r3
 800f06e:	2300      	movs	r3, #0
 800f070:	4288      	cmp	r0, r1
 800f072:	d305      	bcc.n	800f080 <__copybits+0x40>
 800f074:	bd70      	pop	{r4, r5, r6, pc}
 800f076:	f853 6b04 	ldr.w	r6, [r3], #4
 800f07a:	f845 6f04 	str.w	r6, [r5, #4]!
 800f07e:	e7eb      	b.n	800f058 <__copybits+0x18>
 800f080:	f840 3b04 	str.w	r3, [r0], #4
 800f084:	e7f4      	b.n	800f070 <__copybits+0x30>

0800f086 <__any_on>:
 800f086:	f100 0214 	add.w	r2, r0, #20
 800f08a:	6900      	ldr	r0, [r0, #16]
 800f08c:	114b      	asrs	r3, r1, #5
 800f08e:	4298      	cmp	r0, r3
 800f090:	b510      	push	{r4, lr}
 800f092:	db11      	blt.n	800f0b8 <__any_on+0x32>
 800f094:	dd0a      	ble.n	800f0ac <__any_on+0x26>
 800f096:	f011 011f 	ands.w	r1, r1, #31
 800f09a:	d007      	beq.n	800f0ac <__any_on+0x26>
 800f09c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f0a0:	fa24 f001 	lsr.w	r0, r4, r1
 800f0a4:	fa00 f101 	lsl.w	r1, r0, r1
 800f0a8:	428c      	cmp	r4, r1
 800f0aa:	d10b      	bne.n	800f0c4 <__any_on+0x3e>
 800f0ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f0b0:	4293      	cmp	r3, r2
 800f0b2:	d803      	bhi.n	800f0bc <__any_on+0x36>
 800f0b4:	2000      	movs	r0, #0
 800f0b6:	bd10      	pop	{r4, pc}
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	e7f7      	b.n	800f0ac <__any_on+0x26>
 800f0bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f0c0:	2900      	cmp	r1, #0
 800f0c2:	d0f5      	beq.n	800f0b0 <__any_on+0x2a>
 800f0c4:	2001      	movs	r0, #1
 800f0c6:	e7f6      	b.n	800f0b6 <__any_on+0x30>

0800f0c8 <_strtoul_l.constprop.0>:
 800f0c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f0cc:	4686      	mov	lr, r0
 800f0ce:	460d      	mov	r5, r1
 800f0d0:	4f35      	ldr	r7, [pc, #212]	; (800f1a8 <_strtoul_l.constprop.0+0xe0>)
 800f0d2:	4628      	mov	r0, r5
 800f0d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f0d8:	5d3e      	ldrb	r6, [r7, r4]
 800f0da:	f016 0608 	ands.w	r6, r6, #8
 800f0de:	d1f8      	bne.n	800f0d2 <_strtoul_l.constprop.0+0xa>
 800f0e0:	2c2d      	cmp	r4, #45	; 0x2d
 800f0e2:	d130      	bne.n	800f146 <_strtoul_l.constprop.0+0x7e>
 800f0e4:	2601      	movs	r6, #1
 800f0e6:	782c      	ldrb	r4, [r5, #0]
 800f0e8:	1c85      	adds	r5, r0, #2
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d057      	beq.n	800f19e <_strtoul_l.constprop.0+0xd6>
 800f0ee:	2b10      	cmp	r3, #16
 800f0f0:	d109      	bne.n	800f106 <_strtoul_l.constprop.0+0x3e>
 800f0f2:	2c30      	cmp	r4, #48	; 0x30
 800f0f4:	d107      	bne.n	800f106 <_strtoul_l.constprop.0+0x3e>
 800f0f6:	7828      	ldrb	r0, [r5, #0]
 800f0f8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800f0fc:	2858      	cmp	r0, #88	; 0x58
 800f0fe:	d149      	bne.n	800f194 <_strtoul_l.constprop.0+0xcc>
 800f100:	2310      	movs	r3, #16
 800f102:	786c      	ldrb	r4, [r5, #1]
 800f104:	3502      	adds	r5, #2
 800f106:	f04f 38ff 	mov.w	r8, #4294967295
 800f10a:	fbb8 f8f3 	udiv	r8, r8, r3
 800f10e:	2700      	movs	r7, #0
 800f110:	fb03 f908 	mul.w	r9, r3, r8
 800f114:	4638      	mov	r0, r7
 800f116:	ea6f 0909 	mvn.w	r9, r9
 800f11a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f11e:	f1bc 0f09 	cmp.w	ip, #9
 800f122:	d815      	bhi.n	800f150 <_strtoul_l.constprop.0+0x88>
 800f124:	4664      	mov	r4, ip
 800f126:	42a3      	cmp	r3, r4
 800f128:	dd23      	ble.n	800f172 <_strtoul_l.constprop.0+0xaa>
 800f12a:	f1b7 3fff 	cmp.w	r7, #4294967295
 800f12e:	d007      	beq.n	800f140 <_strtoul_l.constprop.0+0x78>
 800f130:	4580      	cmp	r8, r0
 800f132:	d31b      	bcc.n	800f16c <_strtoul_l.constprop.0+0xa4>
 800f134:	d101      	bne.n	800f13a <_strtoul_l.constprop.0+0x72>
 800f136:	45a1      	cmp	r9, r4
 800f138:	db18      	blt.n	800f16c <_strtoul_l.constprop.0+0xa4>
 800f13a:	2701      	movs	r7, #1
 800f13c:	fb00 4003 	mla	r0, r0, r3, r4
 800f140:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f144:	e7e9      	b.n	800f11a <_strtoul_l.constprop.0+0x52>
 800f146:	2c2b      	cmp	r4, #43	; 0x2b
 800f148:	bf04      	itt	eq
 800f14a:	782c      	ldrbeq	r4, [r5, #0]
 800f14c:	1c85      	addeq	r5, r0, #2
 800f14e:	e7cc      	b.n	800f0ea <_strtoul_l.constprop.0+0x22>
 800f150:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f154:	f1bc 0f19 	cmp.w	ip, #25
 800f158:	d801      	bhi.n	800f15e <_strtoul_l.constprop.0+0x96>
 800f15a:	3c37      	subs	r4, #55	; 0x37
 800f15c:	e7e3      	b.n	800f126 <_strtoul_l.constprop.0+0x5e>
 800f15e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f162:	f1bc 0f19 	cmp.w	ip, #25
 800f166:	d804      	bhi.n	800f172 <_strtoul_l.constprop.0+0xaa>
 800f168:	3c57      	subs	r4, #87	; 0x57
 800f16a:	e7dc      	b.n	800f126 <_strtoul_l.constprop.0+0x5e>
 800f16c:	f04f 37ff 	mov.w	r7, #4294967295
 800f170:	e7e6      	b.n	800f140 <_strtoul_l.constprop.0+0x78>
 800f172:	1c7b      	adds	r3, r7, #1
 800f174:	d106      	bne.n	800f184 <_strtoul_l.constprop.0+0xbc>
 800f176:	2322      	movs	r3, #34	; 0x22
 800f178:	4638      	mov	r0, r7
 800f17a:	f8ce 3000 	str.w	r3, [lr]
 800f17e:	b932      	cbnz	r2, 800f18e <_strtoul_l.constprop.0+0xc6>
 800f180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f184:	b106      	cbz	r6, 800f188 <_strtoul_l.constprop.0+0xc0>
 800f186:	4240      	negs	r0, r0
 800f188:	2a00      	cmp	r2, #0
 800f18a:	d0f9      	beq.n	800f180 <_strtoul_l.constprop.0+0xb8>
 800f18c:	b107      	cbz	r7, 800f190 <_strtoul_l.constprop.0+0xc8>
 800f18e:	1e69      	subs	r1, r5, #1
 800f190:	6011      	str	r1, [r2, #0]
 800f192:	e7f5      	b.n	800f180 <_strtoul_l.constprop.0+0xb8>
 800f194:	2430      	movs	r4, #48	; 0x30
 800f196:	2b00      	cmp	r3, #0
 800f198:	d1b5      	bne.n	800f106 <_strtoul_l.constprop.0+0x3e>
 800f19a:	2308      	movs	r3, #8
 800f19c:	e7b3      	b.n	800f106 <_strtoul_l.constprop.0+0x3e>
 800f19e:	2c30      	cmp	r4, #48	; 0x30
 800f1a0:	d0a9      	beq.n	800f0f6 <_strtoul_l.constprop.0+0x2e>
 800f1a2:	230a      	movs	r3, #10
 800f1a4:	e7af      	b.n	800f106 <_strtoul_l.constprop.0+0x3e>
 800f1a6:	bf00      	nop
 800f1a8:	08010799 	.word	0x08010799

0800f1ac <_strtoul_r>:
 800f1ac:	f7ff bf8c 	b.w	800f0c8 <_strtoul_l.constprop.0>

0800f1b0 <strtoul>:
 800f1b0:	4613      	mov	r3, r2
 800f1b2:	460a      	mov	r2, r1
 800f1b4:	4601      	mov	r1, r0
 800f1b6:	4802      	ldr	r0, [pc, #8]	; (800f1c0 <strtoul+0x10>)
 800f1b8:	6800      	ldr	r0, [r0, #0]
 800f1ba:	f7ff bf85 	b.w	800f0c8 <_strtoul_l.constprop.0>
 800f1be:	bf00      	nop
 800f1c0:	200001e0 	.word	0x200001e0

0800f1c4 <__ascii_wctomb>:
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	4608      	mov	r0, r1
 800f1c8:	b141      	cbz	r1, 800f1dc <__ascii_wctomb+0x18>
 800f1ca:	2aff      	cmp	r2, #255	; 0xff
 800f1cc:	d904      	bls.n	800f1d8 <__ascii_wctomb+0x14>
 800f1ce:	228a      	movs	r2, #138	; 0x8a
 800f1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f1d4:	601a      	str	r2, [r3, #0]
 800f1d6:	4770      	bx	lr
 800f1d8:	2001      	movs	r0, #1
 800f1da:	700a      	strb	r2, [r1, #0]
 800f1dc:	4770      	bx	lr

0800f1de <__ssputs_r>:
 800f1de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1e2:	461f      	mov	r7, r3
 800f1e4:	688e      	ldr	r6, [r1, #8]
 800f1e6:	4682      	mov	sl, r0
 800f1e8:	42be      	cmp	r6, r7
 800f1ea:	460c      	mov	r4, r1
 800f1ec:	4690      	mov	r8, r2
 800f1ee:	680b      	ldr	r3, [r1, #0]
 800f1f0:	d82c      	bhi.n	800f24c <__ssputs_r+0x6e>
 800f1f2:	898a      	ldrh	r2, [r1, #12]
 800f1f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f1f8:	d026      	beq.n	800f248 <__ssputs_r+0x6a>
 800f1fa:	6965      	ldr	r5, [r4, #20]
 800f1fc:	6909      	ldr	r1, [r1, #16]
 800f1fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f202:	eba3 0901 	sub.w	r9, r3, r1
 800f206:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f20a:	1c7b      	adds	r3, r7, #1
 800f20c:	444b      	add	r3, r9
 800f20e:	106d      	asrs	r5, r5, #1
 800f210:	429d      	cmp	r5, r3
 800f212:	bf38      	it	cc
 800f214:	461d      	movcc	r5, r3
 800f216:	0553      	lsls	r3, r2, #21
 800f218:	d527      	bpl.n	800f26a <__ssputs_r+0x8c>
 800f21a:	4629      	mov	r1, r5
 800f21c:	f7fb fc0e 	bl	800aa3c <_malloc_r>
 800f220:	4606      	mov	r6, r0
 800f222:	b360      	cbz	r0, 800f27e <__ssputs_r+0xa0>
 800f224:	464a      	mov	r2, r9
 800f226:	6921      	ldr	r1, [r4, #16]
 800f228:	f7fd ffff 	bl	800d22a <memcpy>
 800f22c:	89a3      	ldrh	r3, [r4, #12]
 800f22e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f236:	81a3      	strh	r3, [r4, #12]
 800f238:	6126      	str	r6, [r4, #16]
 800f23a:	444e      	add	r6, r9
 800f23c:	6026      	str	r6, [r4, #0]
 800f23e:	463e      	mov	r6, r7
 800f240:	6165      	str	r5, [r4, #20]
 800f242:	eba5 0509 	sub.w	r5, r5, r9
 800f246:	60a5      	str	r5, [r4, #8]
 800f248:	42be      	cmp	r6, r7
 800f24a:	d900      	bls.n	800f24e <__ssputs_r+0x70>
 800f24c:	463e      	mov	r6, r7
 800f24e:	4632      	mov	r2, r6
 800f250:	4641      	mov	r1, r8
 800f252:	6820      	ldr	r0, [r4, #0]
 800f254:	f000 fa02 	bl	800f65c <memmove>
 800f258:	2000      	movs	r0, #0
 800f25a:	68a3      	ldr	r3, [r4, #8]
 800f25c:	1b9b      	subs	r3, r3, r6
 800f25e:	60a3      	str	r3, [r4, #8]
 800f260:	6823      	ldr	r3, [r4, #0]
 800f262:	4433      	add	r3, r6
 800f264:	6023      	str	r3, [r4, #0]
 800f266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f26a:	462a      	mov	r2, r5
 800f26c:	f000 fa3c 	bl	800f6e8 <_realloc_r>
 800f270:	4606      	mov	r6, r0
 800f272:	2800      	cmp	r0, #0
 800f274:	d1e0      	bne.n	800f238 <__ssputs_r+0x5a>
 800f276:	4650      	mov	r0, sl
 800f278:	6921      	ldr	r1, [r4, #16]
 800f27a:	f7fe fe91 	bl	800dfa0 <_free_r>
 800f27e:	230c      	movs	r3, #12
 800f280:	f8ca 3000 	str.w	r3, [sl]
 800f284:	89a3      	ldrh	r3, [r4, #12]
 800f286:	f04f 30ff 	mov.w	r0, #4294967295
 800f28a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f28e:	81a3      	strh	r3, [r4, #12]
 800f290:	e7e9      	b.n	800f266 <__ssputs_r+0x88>
	...

0800f294 <_svfiprintf_r>:
 800f294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f298:	4698      	mov	r8, r3
 800f29a:	898b      	ldrh	r3, [r1, #12]
 800f29c:	4607      	mov	r7, r0
 800f29e:	061b      	lsls	r3, r3, #24
 800f2a0:	460d      	mov	r5, r1
 800f2a2:	4614      	mov	r4, r2
 800f2a4:	b09d      	sub	sp, #116	; 0x74
 800f2a6:	d50e      	bpl.n	800f2c6 <_svfiprintf_r+0x32>
 800f2a8:	690b      	ldr	r3, [r1, #16]
 800f2aa:	b963      	cbnz	r3, 800f2c6 <_svfiprintf_r+0x32>
 800f2ac:	2140      	movs	r1, #64	; 0x40
 800f2ae:	f7fb fbc5 	bl	800aa3c <_malloc_r>
 800f2b2:	6028      	str	r0, [r5, #0]
 800f2b4:	6128      	str	r0, [r5, #16]
 800f2b6:	b920      	cbnz	r0, 800f2c2 <_svfiprintf_r+0x2e>
 800f2b8:	230c      	movs	r3, #12
 800f2ba:	603b      	str	r3, [r7, #0]
 800f2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f2c0:	e0d0      	b.n	800f464 <_svfiprintf_r+0x1d0>
 800f2c2:	2340      	movs	r3, #64	; 0x40
 800f2c4:	616b      	str	r3, [r5, #20]
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	9309      	str	r3, [sp, #36]	; 0x24
 800f2ca:	2320      	movs	r3, #32
 800f2cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f2d0:	2330      	movs	r3, #48	; 0x30
 800f2d2:	f04f 0901 	mov.w	r9, #1
 800f2d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2da:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800f47c <_svfiprintf_r+0x1e8>
 800f2de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f2e2:	4623      	mov	r3, r4
 800f2e4:	469a      	mov	sl, r3
 800f2e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2ea:	b10a      	cbz	r2, 800f2f0 <_svfiprintf_r+0x5c>
 800f2ec:	2a25      	cmp	r2, #37	; 0x25
 800f2ee:	d1f9      	bne.n	800f2e4 <_svfiprintf_r+0x50>
 800f2f0:	ebba 0b04 	subs.w	fp, sl, r4
 800f2f4:	d00b      	beq.n	800f30e <_svfiprintf_r+0x7a>
 800f2f6:	465b      	mov	r3, fp
 800f2f8:	4622      	mov	r2, r4
 800f2fa:	4629      	mov	r1, r5
 800f2fc:	4638      	mov	r0, r7
 800f2fe:	f7ff ff6e 	bl	800f1de <__ssputs_r>
 800f302:	3001      	adds	r0, #1
 800f304:	f000 80a9 	beq.w	800f45a <_svfiprintf_r+0x1c6>
 800f308:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f30a:	445a      	add	r2, fp
 800f30c:	9209      	str	r2, [sp, #36]	; 0x24
 800f30e:	f89a 3000 	ldrb.w	r3, [sl]
 800f312:	2b00      	cmp	r3, #0
 800f314:	f000 80a1 	beq.w	800f45a <_svfiprintf_r+0x1c6>
 800f318:	2300      	movs	r3, #0
 800f31a:	f04f 32ff 	mov.w	r2, #4294967295
 800f31e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f322:	f10a 0a01 	add.w	sl, sl, #1
 800f326:	9304      	str	r3, [sp, #16]
 800f328:	9307      	str	r3, [sp, #28]
 800f32a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f32e:	931a      	str	r3, [sp, #104]	; 0x68
 800f330:	4654      	mov	r4, sl
 800f332:	2205      	movs	r2, #5
 800f334:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f338:	4850      	ldr	r0, [pc, #320]	; (800f47c <_svfiprintf_r+0x1e8>)
 800f33a:	f7fd ff68 	bl	800d20e <memchr>
 800f33e:	9a04      	ldr	r2, [sp, #16]
 800f340:	b9d8      	cbnz	r0, 800f37a <_svfiprintf_r+0xe6>
 800f342:	06d0      	lsls	r0, r2, #27
 800f344:	bf44      	itt	mi
 800f346:	2320      	movmi	r3, #32
 800f348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f34c:	0711      	lsls	r1, r2, #28
 800f34e:	bf44      	itt	mi
 800f350:	232b      	movmi	r3, #43	; 0x2b
 800f352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f356:	f89a 3000 	ldrb.w	r3, [sl]
 800f35a:	2b2a      	cmp	r3, #42	; 0x2a
 800f35c:	d015      	beq.n	800f38a <_svfiprintf_r+0xf6>
 800f35e:	4654      	mov	r4, sl
 800f360:	2000      	movs	r0, #0
 800f362:	f04f 0c0a 	mov.w	ip, #10
 800f366:	9a07      	ldr	r2, [sp, #28]
 800f368:	4621      	mov	r1, r4
 800f36a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f36e:	3b30      	subs	r3, #48	; 0x30
 800f370:	2b09      	cmp	r3, #9
 800f372:	d94d      	bls.n	800f410 <_svfiprintf_r+0x17c>
 800f374:	b1b0      	cbz	r0, 800f3a4 <_svfiprintf_r+0x110>
 800f376:	9207      	str	r2, [sp, #28]
 800f378:	e014      	b.n	800f3a4 <_svfiprintf_r+0x110>
 800f37a:	eba0 0308 	sub.w	r3, r0, r8
 800f37e:	fa09 f303 	lsl.w	r3, r9, r3
 800f382:	4313      	orrs	r3, r2
 800f384:	46a2      	mov	sl, r4
 800f386:	9304      	str	r3, [sp, #16]
 800f388:	e7d2      	b.n	800f330 <_svfiprintf_r+0x9c>
 800f38a:	9b03      	ldr	r3, [sp, #12]
 800f38c:	1d19      	adds	r1, r3, #4
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	9103      	str	r1, [sp, #12]
 800f392:	2b00      	cmp	r3, #0
 800f394:	bfbb      	ittet	lt
 800f396:	425b      	neglt	r3, r3
 800f398:	f042 0202 	orrlt.w	r2, r2, #2
 800f39c:	9307      	strge	r3, [sp, #28]
 800f39e:	9307      	strlt	r3, [sp, #28]
 800f3a0:	bfb8      	it	lt
 800f3a2:	9204      	strlt	r2, [sp, #16]
 800f3a4:	7823      	ldrb	r3, [r4, #0]
 800f3a6:	2b2e      	cmp	r3, #46	; 0x2e
 800f3a8:	d10c      	bne.n	800f3c4 <_svfiprintf_r+0x130>
 800f3aa:	7863      	ldrb	r3, [r4, #1]
 800f3ac:	2b2a      	cmp	r3, #42	; 0x2a
 800f3ae:	d134      	bne.n	800f41a <_svfiprintf_r+0x186>
 800f3b0:	9b03      	ldr	r3, [sp, #12]
 800f3b2:	3402      	adds	r4, #2
 800f3b4:	1d1a      	adds	r2, r3, #4
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	9203      	str	r2, [sp, #12]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	bfb8      	it	lt
 800f3be:	f04f 33ff 	movlt.w	r3, #4294967295
 800f3c2:	9305      	str	r3, [sp, #20]
 800f3c4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800f480 <_svfiprintf_r+0x1ec>
 800f3c8:	2203      	movs	r2, #3
 800f3ca:	4650      	mov	r0, sl
 800f3cc:	7821      	ldrb	r1, [r4, #0]
 800f3ce:	f7fd ff1e 	bl	800d20e <memchr>
 800f3d2:	b138      	cbz	r0, 800f3e4 <_svfiprintf_r+0x150>
 800f3d4:	2240      	movs	r2, #64	; 0x40
 800f3d6:	9b04      	ldr	r3, [sp, #16]
 800f3d8:	eba0 000a 	sub.w	r0, r0, sl
 800f3dc:	4082      	lsls	r2, r0
 800f3de:	4313      	orrs	r3, r2
 800f3e0:	3401      	adds	r4, #1
 800f3e2:	9304      	str	r3, [sp, #16]
 800f3e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3e8:	2206      	movs	r2, #6
 800f3ea:	4826      	ldr	r0, [pc, #152]	; (800f484 <_svfiprintf_r+0x1f0>)
 800f3ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f3f0:	f7fd ff0d 	bl	800d20e <memchr>
 800f3f4:	2800      	cmp	r0, #0
 800f3f6:	d038      	beq.n	800f46a <_svfiprintf_r+0x1d6>
 800f3f8:	4b23      	ldr	r3, [pc, #140]	; (800f488 <_svfiprintf_r+0x1f4>)
 800f3fa:	bb1b      	cbnz	r3, 800f444 <_svfiprintf_r+0x1b0>
 800f3fc:	9b03      	ldr	r3, [sp, #12]
 800f3fe:	3307      	adds	r3, #7
 800f400:	f023 0307 	bic.w	r3, r3, #7
 800f404:	3308      	adds	r3, #8
 800f406:	9303      	str	r3, [sp, #12]
 800f408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f40a:	4433      	add	r3, r6
 800f40c:	9309      	str	r3, [sp, #36]	; 0x24
 800f40e:	e768      	b.n	800f2e2 <_svfiprintf_r+0x4e>
 800f410:	460c      	mov	r4, r1
 800f412:	2001      	movs	r0, #1
 800f414:	fb0c 3202 	mla	r2, ip, r2, r3
 800f418:	e7a6      	b.n	800f368 <_svfiprintf_r+0xd4>
 800f41a:	2300      	movs	r3, #0
 800f41c:	f04f 0c0a 	mov.w	ip, #10
 800f420:	4619      	mov	r1, r3
 800f422:	3401      	adds	r4, #1
 800f424:	9305      	str	r3, [sp, #20]
 800f426:	4620      	mov	r0, r4
 800f428:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f42c:	3a30      	subs	r2, #48	; 0x30
 800f42e:	2a09      	cmp	r2, #9
 800f430:	d903      	bls.n	800f43a <_svfiprintf_r+0x1a6>
 800f432:	2b00      	cmp	r3, #0
 800f434:	d0c6      	beq.n	800f3c4 <_svfiprintf_r+0x130>
 800f436:	9105      	str	r1, [sp, #20]
 800f438:	e7c4      	b.n	800f3c4 <_svfiprintf_r+0x130>
 800f43a:	4604      	mov	r4, r0
 800f43c:	2301      	movs	r3, #1
 800f43e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f442:	e7f0      	b.n	800f426 <_svfiprintf_r+0x192>
 800f444:	ab03      	add	r3, sp, #12
 800f446:	9300      	str	r3, [sp, #0]
 800f448:	462a      	mov	r2, r5
 800f44a:	4638      	mov	r0, r7
 800f44c:	4b0f      	ldr	r3, [pc, #60]	; (800f48c <_svfiprintf_r+0x1f8>)
 800f44e:	a904      	add	r1, sp, #16
 800f450:	f7fc fb14 	bl	800ba7c <_printf_float>
 800f454:	1c42      	adds	r2, r0, #1
 800f456:	4606      	mov	r6, r0
 800f458:	d1d6      	bne.n	800f408 <_svfiprintf_r+0x174>
 800f45a:	89ab      	ldrh	r3, [r5, #12]
 800f45c:	065b      	lsls	r3, r3, #25
 800f45e:	f53f af2d 	bmi.w	800f2bc <_svfiprintf_r+0x28>
 800f462:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f464:	b01d      	add	sp, #116	; 0x74
 800f466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f46a:	ab03      	add	r3, sp, #12
 800f46c:	9300      	str	r3, [sp, #0]
 800f46e:	462a      	mov	r2, r5
 800f470:	4638      	mov	r0, r7
 800f472:	4b06      	ldr	r3, [pc, #24]	; (800f48c <_svfiprintf_r+0x1f8>)
 800f474:	a904      	add	r1, sp, #16
 800f476:	f7fc fda1 	bl	800bfbc <_printf_i>
 800f47a:	e7eb      	b.n	800f454 <_svfiprintf_r+0x1c0>
 800f47c:	08010c5c 	.word	0x08010c5c
 800f480:	08010c62 	.word	0x08010c62
 800f484:	08010c66 	.word	0x08010c66
 800f488:	0800ba7d 	.word	0x0800ba7d
 800f48c:	0800f1df 	.word	0x0800f1df

0800f490 <__sflush_r>:
 800f490:	898a      	ldrh	r2, [r1, #12]
 800f492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f494:	4605      	mov	r5, r0
 800f496:	0710      	lsls	r0, r2, #28
 800f498:	460c      	mov	r4, r1
 800f49a:	d457      	bmi.n	800f54c <__sflush_r+0xbc>
 800f49c:	684b      	ldr	r3, [r1, #4]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	dc04      	bgt.n	800f4ac <__sflush_r+0x1c>
 800f4a2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	dc01      	bgt.n	800f4ac <__sflush_r+0x1c>
 800f4a8:	2000      	movs	r0, #0
 800f4aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f4ae:	2e00      	cmp	r6, #0
 800f4b0:	d0fa      	beq.n	800f4a8 <__sflush_r+0x18>
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f4b8:	682f      	ldr	r7, [r5, #0]
 800f4ba:	6a21      	ldr	r1, [r4, #32]
 800f4bc:	602b      	str	r3, [r5, #0]
 800f4be:	d032      	beq.n	800f526 <__sflush_r+0x96>
 800f4c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f4c2:	89a3      	ldrh	r3, [r4, #12]
 800f4c4:	075a      	lsls	r2, r3, #29
 800f4c6:	d505      	bpl.n	800f4d4 <__sflush_r+0x44>
 800f4c8:	6863      	ldr	r3, [r4, #4]
 800f4ca:	1ac0      	subs	r0, r0, r3
 800f4cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f4ce:	b10b      	cbz	r3, 800f4d4 <__sflush_r+0x44>
 800f4d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f4d2:	1ac0      	subs	r0, r0, r3
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	4602      	mov	r2, r0
 800f4d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f4da:	4628      	mov	r0, r5
 800f4dc:	6a21      	ldr	r1, [r4, #32]
 800f4de:	47b0      	blx	r6
 800f4e0:	1c43      	adds	r3, r0, #1
 800f4e2:	89a3      	ldrh	r3, [r4, #12]
 800f4e4:	d106      	bne.n	800f4f4 <__sflush_r+0x64>
 800f4e6:	6829      	ldr	r1, [r5, #0]
 800f4e8:	291d      	cmp	r1, #29
 800f4ea:	d82b      	bhi.n	800f544 <__sflush_r+0xb4>
 800f4ec:	4a28      	ldr	r2, [pc, #160]	; (800f590 <__sflush_r+0x100>)
 800f4ee:	410a      	asrs	r2, r1
 800f4f0:	07d6      	lsls	r6, r2, #31
 800f4f2:	d427      	bmi.n	800f544 <__sflush_r+0xb4>
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	6062      	str	r2, [r4, #4]
 800f4f8:	6922      	ldr	r2, [r4, #16]
 800f4fa:	04d9      	lsls	r1, r3, #19
 800f4fc:	6022      	str	r2, [r4, #0]
 800f4fe:	d504      	bpl.n	800f50a <__sflush_r+0x7a>
 800f500:	1c42      	adds	r2, r0, #1
 800f502:	d101      	bne.n	800f508 <__sflush_r+0x78>
 800f504:	682b      	ldr	r3, [r5, #0]
 800f506:	b903      	cbnz	r3, 800f50a <__sflush_r+0x7a>
 800f508:	6560      	str	r0, [r4, #84]	; 0x54
 800f50a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f50c:	602f      	str	r7, [r5, #0]
 800f50e:	2900      	cmp	r1, #0
 800f510:	d0ca      	beq.n	800f4a8 <__sflush_r+0x18>
 800f512:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f516:	4299      	cmp	r1, r3
 800f518:	d002      	beq.n	800f520 <__sflush_r+0x90>
 800f51a:	4628      	mov	r0, r5
 800f51c:	f7fe fd40 	bl	800dfa0 <_free_r>
 800f520:	2000      	movs	r0, #0
 800f522:	6360      	str	r0, [r4, #52]	; 0x34
 800f524:	e7c1      	b.n	800f4aa <__sflush_r+0x1a>
 800f526:	2301      	movs	r3, #1
 800f528:	4628      	mov	r0, r5
 800f52a:	47b0      	blx	r6
 800f52c:	1c41      	adds	r1, r0, #1
 800f52e:	d1c8      	bne.n	800f4c2 <__sflush_r+0x32>
 800f530:	682b      	ldr	r3, [r5, #0]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d0c5      	beq.n	800f4c2 <__sflush_r+0x32>
 800f536:	2b1d      	cmp	r3, #29
 800f538:	d001      	beq.n	800f53e <__sflush_r+0xae>
 800f53a:	2b16      	cmp	r3, #22
 800f53c:	d101      	bne.n	800f542 <__sflush_r+0xb2>
 800f53e:	602f      	str	r7, [r5, #0]
 800f540:	e7b2      	b.n	800f4a8 <__sflush_r+0x18>
 800f542:	89a3      	ldrh	r3, [r4, #12]
 800f544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f548:	81a3      	strh	r3, [r4, #12]
 800f54a:	e7ae      	b.n	800f4aa <__sflush_r+0x1a>
 800f54c:	690f      	ldr	r7, [r1, #16]
 800f54e:	2f00      	cmp	r7, #0
 800f550:	d0aa      	beq.n	800f4a8 <__sflush_r+0x18>
 800f552:	0793      	lsls	r3, r2, #30
 800f554:	bf18      	it	ne
 800f556:	2300      	movne	r3, #0
 800f558:	680e      	ldr	r6, [r1, #0]
 800f55a:	bf08      	it	eq
 800f55c:	694b      	ldreq	r3, [r1, #20]
 800f55e:	1bf6      	subs	r6, r6, r7
 800f560:	600f      	str	r7, [r1, #0]
 800f562:	608b      	str	r3, [r1, #8]
 800f564:	2e00      	cmp	r6, #0
 800f566:	dd9f      	ble.n	800f4a8 <__sflush_r+0x18>
 800f568:	4633      	mov	r3, r6
 800f56a:	463a      	mov	r2, r7
 800f56c:	4628      	mov	r0, r5
 800f56e:	6a21      	ldr	r1, [r4, #32]
 800f570:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800f574:	47e0      	blx	ip
 800f576:	2800      	cmp	r0, #0
 800f578:	dc06      	bgt.n	800f588 <__sflush_r+0xf8>
 800f57a:	89a3      	ldrh	r3, [r4, #12]
 800f57c:	f04f 30ff 	mov.w	r0, #4294967295
 800f580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f584:	81a3      	strh	r3, [r4, #12]
 800f586:	e790      	b.n	800f4aa <__sflush_r+0x1a>
 800f588:	4407      	add	r7, r0
 800f58a:	1a36      	subs	r6, r6, r0
 800f58c:	e7ea      	b.n	800f564 <__sflush_r+0xd4>
 800f58e:	bf00      	nop
 800f590:	dfbffffe 	.word	0xdfbffffe

0800f594 <_fflush_r>:
 800f594:	b538      	push	{r3, r4, r5, lr}
 800f596:	690b      	ldr	r3, [r1, #16]
 800f598:	4605      	mov	r5, r0
 800f59a:	460c      	mov	r4, r1
 800f59c:	b913      	cbnz	r3, 800f5a4 <_fflush_r+0x10>
 800f59e:	2500      	movs	r5, #0
 800f5a0:	4628      	mov	r0, r5
 800f5a2:	bd38      	pop	{r3, r4, r5, pc}
 800f5a4:	b118      	cbz	r0, 800f5ae <_fflush_r+0x1a>
 800f5a6:	6a03      	ldr	r3, [r0, #32]
 800f5a8:	b90b      	cbnz	r3, 800f5ae <_fflush_r+0x1a>
 800f5aa:	f7fc feb5 	bl	800c318 <__sinit>
 800f5ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d0f3      	beq.n	800f59e <_fflush_r+0xa>
 800f5b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f5b8:	07d0      	lsls	r0, r2, #31
 800f5ba:	d404      	bmi.n	800f5c6 <_fflush_r+0x32>
 800f5bc:	0599      	lsls	r1, r3, #22
 800f5be:	d402      	bmi.n	800f5c6 <_fflush_r+0x32>
 800f5c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5c2:	f7fd fe19 	bl	800d1f8 <__retarget_lock_acquire_recursive>
 800f5c6:	4628      	mov	r0, r5
 800f5c8:	4621      	mov	r1, r4
 800f5ca:	f7ff ff61 	bl	800f490 <__sflush_r>
 800f5ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f5d0:	4605      	mov	r5, r0
 800f5d2:	07da      	lsls	r2, r3, #31
 800f5d4:	d4e4      	bmi.n	800f5a0 <_fflush_r+0xc>
 800f5d6:	89a3      	ldrh	r3, [r4, #12]
 800f5d8:	059b      	lsls	r3, r3, #22
 800f5da:	d4e1      	bmi.n	800f5a0 <_fflush_r+0xc>
 800f5dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5de:	f7fd fe0d 	bl	800d1fc <__retarget_lock_release_recursive>
 800f5e2:	e7dd      	b.n	800f5a0 <_fflush_r+0xc>

0800f5e4 <fiprintf>:
 800f5e4:	b40e      	push	{r1, r2, r3}
 800f5e6:	b503      	push	{r0, r1, lr}
 800f5e8:	4601      	mov	r1, r0
 800f5ea:	ab03      	add	r3, sp, #12
 800f5ec:	4805      	ldr	r0, [pc, #20]	; (800f604 <fiprintf+0x20>)
 800f5ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5f2:	6800      	ldr	r0, [r0, #0]
 800f5f4:	9301      	str	r3, [sp, #4]
 800f5f6:	f000 faa1 	bl	800fb3c <_vfiprintf_r>
 800f5fa:	b002      	add	sp, #8
 800f5fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f600:	b003      	add	sp, #12
 800f602:	4770      	bx	lr
 800f604:	200001e0 	.word	0x200001e0

0800f608 <siscanf>:
 800f608:	b40e      	push	{r1, r2, r3}
 800f60a:	f44f 7201 	mov.w	r2, #516	; 0x204
 800f60e:	b530      	push	{r4, r5, lr}
 800f610:	b09c      	sub	sp, #112	; 0x70
 800f612:	ac1f      	add	r4, sp, #124	; 0x7c
 800f614:	f854 5b04 	ldr.w	r5, [r4], #4
 800f618:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f61c:	9002      	str	r0, [sp, #8]
 800f61e:	9006      	str	r0, [sp, #24]
 800f620:	f7f0 fe10 	bl	8000244 <strlen>
 800f624:	4b0b      	ldr	r3, [pc, #44]	; (800f654 <siscanf+0x4c>)
 800f626:	9003      	str	r0, [sp, #12]
 800f628:	930b      	str	r3, [sp, #44]	; 0x2c
 800f62a:	2300      	movs	r3, #0
 800f62c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f62e:	9314      	str	r3, [sp, #80]	; 0x50
 800f630:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f634:	9007      	str	r0, [sp, #28]
 800f636:	4808      	ldr	r0, [pc, #32]	; (800f658 <siscanf+0x50>)
 800f638:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f63c:	462a      	mov	r2, r5
 800f63e:	4623      	mov	r3, r4
 800f640:	a902      	add	r1, sp, #8
 800f642:	6800      	ldr	r0, [r0, #0]
 800f644:	9401      	str	r4, [sp, #4]
 800f646:	f000 f8d9 	bl	800f7fc <__ssvfiscanf_r>
 800f64a:	b01c      	add	sp, #112	; 0x70
 800f64c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f650:	b003      	add	sp, #12
 800f652:	4770      	bx	lr
 800f654:	0800c3e7 	.word	0x0800c3e7
 800f658:	200001e0 	.word	0x200001e0

0800f65c <memmove>:
 800f65c:	4288      	cmp	r0, r1
 800f65e:	b510      	push	{r4, lr}
 800f660:	eb01 0402 	add.w	r4, r1, r2
 800f664:	d902      	bls.n	800f66c <memmove+0x10>
 800f666:	4284      	cmp	r4, r0
 800f668:	4623      	mov	r3, r4
 800f66a:	d807      	bhi.n	800f67c <memmove+0x20>
 800f66c:	1e43      	subs	r3, r0, #1
 800f66e:	42a1      	cmp	r1, r4
 800f670:	d008      	beq.n	800f684 <memmove+0x28>
 800f672:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f676:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f67a:	e7f8      	b.n	800f66e <memmove+0x12>
 800f67c:	4601      	mov	r1, r0
 800f67e:	4402      	add	r2, r0
 800f680:	428a      	cmp	r2, r1
 800f682:	d100      	bne.n	800f686 <memmove+0x2a>
 800f684:	bd10      	pop	{r4, pc}
 800f686:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f68a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f68e:	e7f7      	b.n	800f680 <memmove+0x24>

0800f690 <__gettzinfo>:
 800f690:	4800      	ldr	r0, [pc, #0]	; (800f694 <__gettzinfo+0x4>)
 800f692:	4770      	bx	lr
 800f694:	200001e8 	.word	0x200001e8

0800f698 <abort>:
 800f698:	2006      	movs	r0, #6
 800f69a:	b508      	push	{r3, lr}
 800f69c:	f000 fde2 	bl	8010264 <raise>
 800f6a0:	2001      	movs	r0, #1
 800f6a2:	f7f3 fdfc 	bl	800329e <_exit>

0800f6a6 <_calloc_r>:
 800f6a6:	b570      	push	{r4, r5, r6, lr}
 800f6a8:	fba1 5402 	umull	r5, r4, r1, r2
 800f6ac:	b934      	cbnz	r4, 800f6bc <_calloc_r+0x16>
 800f6ae:	4629      	mov	r1, r5
 800f6b0:	f7fb f9c4 	bl	800aa3c <_malloc_r>
 800f6b4:	4606      	mov	r6, r0
 800f6b6:	b928      	cbnz	r0, 800f6c4 <_calloc_r+0x1e>
 800f6b8:	4630      	mov	r0, r6
 800f6ba:	bd70      	pop	{r4, r5, r6, pc}
 800f6bc:	220c      	movs	r2, #12
 800f6be:	2600      	movs	r6, #0
 800f6c0:	6002      	str	r2, [r0, #0]
 800f6c2:	e7f9      	b.n	800f6b8 <_calloc_r+0x12>
 800f6c4:	462a      	mov	r2, r5
 800f6c6:	4621      	mov	r1, r4
 800f6c8:	f7fc fec1 	bl	800c44e <memset>
 800f6cc:	e7f4      	b.n	800f6b8 <_calloc_r+0x12>
	...

0800f6d0 <__env_lock>:
 800f6d0:	4801      	ldr	r0, [pc, #4]	; (800f6d8 <__env_lock+0x8>)
 800f6d2:	f7fd bd91 	b.w	800d1f8 <__retarget_lock_acquire_recursive>
 800f6d6:	bf00      	nop
 800f6d8:	200034cc 	.word	0x200034cc

0800f6dc <__env_unlock>:
 800f6dc:	4801      	ldr	r0, [pc, #4]	; (800f6e4 <__env_unlock+0x8>)
 800f6de:	f7fd bd8d 	b.w	800d1fc <__retarget_lock_release_recursive>
 800f6e2:	bf00      	nop
 800f6e4:	200034cc 	.word	0x200034cc

0800f6e8 <_realloc_r>:
 800f6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6ec:	4680      	mov	r8, r0
 800f6ee:	4614      	mov	r4, r2
 800f6f0:	460e      	mov	r6, r1
 800f6f2:	b921      	cbnz	r1, 800f6fe <_realloc_r+0x16>
 800f6f4:	4611      	mov	r1, r2
 800f6f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6fa:	f7fb b99f 	b.w	800aa3c <_malloc_r>
 800f6fe:	b92a      	cbnz	r2, 800f70c <_realloc_r+0x24>
 800f700:	f7fe fc4e 	bl	800dfa0 <_free_r>
 800f704:	4625      	mov	r5, r4
 800f706:	4628      	mov	r0, r5
 800f708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f70c:	f000 fdc6 	bl	801029c <_malloc_usable_size_r>
 800f710:	4284      	cmp	r4, r0
 800f712:	4607      	mov	r7, r0
 800f714:	d802      	bhi.n	800f71c <_realloc_r+0x34>
 800f716:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f71a:	d812      	bhi.n	800f742 <_realloc_r+0x5a>
 800f71c:	4621      	mov	r1, r4
 800f71e:	4640      	mov	r0, r8
 800f720:	f7fb f98c 	bl	800aa3c <_malloc_r>
 800f724:	4605      	mov	r5, r0
 800f726:	2800      	cmp	r0, #0
 800f728:	d0ed      	beq.n	800f706 <_realloc_r+0x1e>
 800f72a:	42bc      	cmp	r4, r7
 800f72c:	4622      	mov	r2, r4
 800f72e:	4631      	mov	r1, r6
 800f730:	bf28      	it	cs
 800f732:	463a      	movcs	r2, r7
 800f734:	f7fd fd79 	bl	800d22a <memcpy>
 800f738:	4631      	mov	r1, r6
 800f73a:	4640      	mov	r0, r8
 800f73c:	f7fe fc30 	bl	800dfa0 <_free_r>
 800f740:	e7e1      	b.n	800f706 <_realloc_r+0x1e>
 800f742:	4635      	mov	r5, r6
 800f744:	e7df      	b.n	800f706 <_realloc_r+0x1e>

0800f746 <_sungetc_r>:
 800f746:	b538      	push	{r3, r4, r5, lr}
 800f748:	1c4b      	adds	r3, r1, #1
 800f74a:	4614      	mov	r4, r2
 800f74c:	d103      	bne.n	800f756 <_sungetc_r+0x10>
 800f74e:	f04f 35ff 	mov.w	r5, #4294967295
 800f752:	4628      	mov	r0, r5
 800f754:	bd38      	pop	{r3, r4, r5, pc}
 800f756:	8993      	ldrh	r3, [r2, #12]
 800f758:	b2cd      	uxtb	r5, r1
 800f75a:	f023 0320 	bic.w	r3, r3, #32
 800f75e:	8193      	strh	r3, [r2, #12]
 800f760:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f762:	6852      	ldr	r2, [r2, #4]
 800f764:	b18b      	cbz	r3, 800f78a <_sungetc_r+0x44>
 800f766:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f768:	4293      	cmp	r3, r2
 800f76a:	dd08      	ble.n	800f77e <_sungetc_r+0x38>
 800f76c:	6823      	ldr	r3, [r4, #0]
 800f76e:	1e5a      	subs	r2, r3, #1
 800f770:	6022      	str	r2, [r4, #0]
 800f772:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f776:	6863      	ldr	r3, [r4, #4]
 800f778:	3301      	adds	r3, #1
 800f77a:	6063      	str	r3, [r4, #4]
 800f77c:	e7e9      	b.n	800f752 <_sungetc_r+0xc>
 800f77e:	4621      	mov	r1, r4
 800f780:	f000 fc7b 	bl	801007a <__submore>
 800f784:	2800      	cmp	r0, #0
 800f786:	d0f1      	beq.n	800f76c <_sungetc_r+0x26>
 800f788:	e7e1      	b.n	800f74e <_sungetc_r+0x8>
 800f78a:	6921      	ldr	r1, [r4, #16]
 800f78c:	6823      	ldr	r3, [r4, #0]
 800f78e:	b151      	cbz	r1, 800f7a6 <_sungetc_r+0x60>
 800f790:	4299      	cmp	r1, r3
 800f792:	d208      	bcs.n	800f7a6 <_sungetc_r+0x60>
 800f794:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f798:	42a9      	cmp	r1, r5
 800f79a:	d104      	bne.n	800f7a6 <_sungetc_r+0x60>
 800f79c:	3b01      	subs	r3, #1
 800f79e:	3201      	adds	r2, #1
 800f7a0:	6023      	str	r3, [r4, #0]
 800f7a2:	6062      	str	r2, [r4, #4]
 800f7a4:	e7d5      	b.n	800f752 <_sungetc_r+0xc>
 800f7a6:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800f7aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f7ae:	6363      	str	r3, [r4, #52]	; 0x34
 800f7b0:	2303      	movs	r3, #3
 800f7b2:	63a3      	str	r3, [r4, #56]	; 0x38
 800f7b4:	4623      	mov	r3, r4
 800f7b6:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f7ba:	6023      	str	r3, [r4, #0]
 800f7bc:	2301      	movs	r3, #1
 800f7be:	e7dc      	b.n	800f77a <_sungetc_r+0x34>

0800f7c0 <__ssrefill_r>:
 800f7c0:	b510      	push	{r4, lr}
 800f7c2:	460c      	mov	r4, r1
 800f7c4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f7c6:	b169      	cbz	r1, 800f7e4 <__ssrefill_r+0x24>
 800f7c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f7cc:	4299      	cmp	r1, r3
 800f7ce:	d001      	beq.n	800f7d4 <__ssrefill_r+0x14>
 800f7d0:	f7fe fbe6 	bl	800dfa0 <_free_r>
 800f7d4:	2000      	movs	r0, #0
 800f7d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f7d8:	6360      	str	r0, [r4, #52]	; 0x34
 800f7da:	6063      	str	r3, [r4, #4]
 800f7dc:	b113      	cbz	r3, 800f7e4 <__ssrefill_r+0x24>
 800f7de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f7e0:	6023      	str	r3, [r4, #0]
 800f7e2:	bd10      	pop	{r4, pc}
 800f7e4:	6923      	ldr	r3, [r4, #16]
 800f7e6:	f04f 30ff 	mov.w	r0, #4294967295
 800f7ea:	6023      	str	r3, [r4, #0]
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	6063      	str	r3, [r4, #4]
 800f7f0:	89a3      	ldrh	r3, [r4, #12]
 800f7f2:	f043 0320 	orr.w	r3, r3, #32
 800f7f6:	81a3      	strh	r3, [r4, #12]
 800f7f8:	e7f3      	b.n	800f7e2 <__ssrefill_r+0x22>
	...

0800f7fc <__ssvfiscanf_r>:
 800f7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f800:	460c      	mov	r4, r1
 800f802:	2100      	movs	r1, #0
 800f804:	4606      	mov	r6, r0
 800f806:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800f80a:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800f80e:	49a6      	ldr	r1, [pc, #664]	; (800faa8 <__ssvfiscanf_r+0x2ac>)
 800f810:	f10d 0804 	add.w	r8, sp, #4
 800f814:	91a0      	str	r1, [sp, #640]	; 0x280
 800f816:	49a5      	ldr	r1, [pc, #660]	; (800faac <__ssvfiscanf_r+0x2b0>)
 800f818:	4fa5      	ldr	r7, [pc, #660]	; (800fab0 <__ssvfiscanf_r+0x2b4>)
 800f81a:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800fab4 <__ssvfiscanf_r+0x2b8>
 800f81e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f822:	91a1      	str	r1, [sp, #644]	; 0x284
 800f824:	9300      	str	r3, [sp, #0]
 800f826:	7813      	ldrb	r3, [r2, #0]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	f000 815a 	beq.w	800fae2 <__ssvfiscanf_r+0x2e6>
 800f82e:	5cf9      	ldrb	r1, [r7, r3]
 800f830:	1c55      	adds	r5, r2, #1
 800f832:	f011 0108 	ands.w	r1, r1, #8
 800f836:	d019      	beq.n	800f86c <__ssvfiscanf_r+0x70>
 800f838:	6863      	ldr	r3, [r4, #4]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	dd0f      	ble.n	800f85e <__ssvfiscanf_r+0x62>
 800f83e:	6823      	ldr	r3, [r4, #0]
 800f840:	781a      	ldrb	r2, [r3, #0]
 800f842:	5cba      	ldrb	r2, [r7, r2]
 800f844:	0712      	lsls	r2, r2, #28
 800f846:	d401      	bmi.n	800f84c <__ssvfiscanf_r+0x50>
 800f848:	462a      	mov	r2, r5
 800f84a:	e7ec      	b.n	800f826 <__ssvfiscanf_r+0x2a>
 800f84c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f84e:	3301      	adds	r3, #1
 800f850:	3201      	adds	r2, #1
 800f852:	9245      	str	r2, [sp, #276]	; 0x114
 800f854:	6862      	ldr	r2, [r4, #4]
 800f856:	6023      	str	r3, [r4, #0]
 800f858:	3a01      	subs	r2, #1
 800f85a:	6062      	str	r2, [r4, #4]
 800f85c:	e7ec      	b.n	800f838 <__ssvfiscanf_r+0x3c>
 800f85e:	4621      	mov	r1, r4
 800f860:	4630      	mov	r0, r6
 800f862:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f864:	4798      	blx	r3
 800f866:	2800      	cmp	r0, #0
 800f868:	d0e9      	beq.n	800f83e <__ssvfiscanf_r+0x42>
 800f86a:	e7ed      	b.n	800f848 <__ssvfiscanf_r+0x4c>
 800f86c:	2b25      	cmp	r3, #37	; 0x25
 800f86e:	d012      	beq.n	800f896 <__ssvfiscanf_r+0x9a>
 800f870:	469a      	mov	sl, r3
 800f872:	6863      	ldr	r3, [r4, #4]
 800f874:	2b00      	cmp	r3, #0
 800f876:	f340 8092 	ble.w	800f99e <__ssvfiscanf_r+0x1a2>
 800f87a:	6822      	ldr	r2, [r4, #0]
 800f87c:	7813      	ldrb	r3, [r2, #0]
 800f87e:	4553      	cmp	r3, sl
 800f880:	f040 812f 	bne.w	800fae2 <__ssvfiscanf_r+0x2e6>
 800f884:	6863      	ldr	r3, [r4, #4]
 800f886:	3201      	adds	r2, #1
 800f888:	3b01      	subs	r3, #1
 800f88a:	6063      	str	r3, [r4, #4]
 800f88c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800f88e:	6022      	str	r2, [r4, #0]
 800f890:	3301      	adds	r3, #1
 800f892:	9345      	str	r3, [sp, #276]	; 0x114
 800f894:	e7d8      	b.n	800f848 <__ssvfiscanf_r+0x4c>
 800f896:	9141      	str	r1, [sp, #260]	; 0x104
 800f898:	9143      	str	r1, [sp, #268]	; 0x10c
 800f89a:	7853      	ldrb	r3, [r2, #1]
 800f89c:	2b2a      	cmp	r3, #42	; 0x2a
 800f89e:	bf04      	itt	eq
 800f8a0:	2310      	moveq	r3, #16
 800f8a2:	1c95      	addeq	r5, r2, #2
 800f8a4:	f04f 020a 	mov.w	r2, #10
 800f8a8:	bf08      	it	eq
 800f8aa:	9341      	streq	r3, [sp, #260]	; 0x104
 800f8ac:	46aa      	mov	sl, r5
 800f8ae:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800f8b2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800f8b6:	2b09      	cmp	r3, #9
 800f8b8:	d91c      	bls.n	800f8f4 <__ssvfiscanf_r+0xf8>
 800f8ba:	2203      	movs	r2, #3
 800f8bc:	487d      	ldr	r0, [pc, #500]	; (800fab4 <__ssvfiscanf_r+0x2b8>)
 800f8be:	f7fd fca6 	bl	800d20e <memchr>
 800f8c2:	b138      	cbz	r0, 800f8d4 <__ssvfiscanf_r+0xd8>
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	4655      	mov	r5, sl
 800f8c8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f8ca:	eba0 0009 	sub.w	r0, r0, r9
 800f8ce:	4083      	lsls	r3, r0
 800f8d0:	4313      	orrs	r3, r2
 800f8d2:	9341      	str	r3, [sp, #260]	; 0x104
 800f8d4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f8d8:	2b78      	cmp	r3, #120	; 0x78
 800f8da:	d806      	bhi.n	800f8ea <__ssvfiscanf_r+0xee>
 800f8dc:	2b57      	cmp	r3, #87	; 0x57
 800f8de:	d810      	bhi.n	800f902 <__ssvfiscanf_r+0x106>
 800f8e0:	2b25      	cmp	r3, #37	; 0x25
 800f8e2:	d0c5      	beq.n	800f870 <__ssvfiscanf_r+0x74>
 800f8e4:	d856      	bhi.n	800f994 <__ssvfiscanf_r+0x198>
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d064      	beq.n	800f9b4 <__ssvfiscanf_r+0x1b8>
 800f8ea:	2303      	movs	r3, #3
 800f8ec:	9347      	str	r3, [sp, #284]	; 0x11c
 800f8ee:	230a      	movs	r3, #10
 800f8f0:	9342      	str	r3, [sp, #264]	; 0x108
 800f8f2:	e075      	b.n	800f9e0 <__ssvfiscanf_r+0x1e4>
 800f8f4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f8f6:	4655      	mov	r5, sl
 800f8f8:	fb02 1103 	mla	r1, r2, r3, r1
 800f8fc:	3930      	subs	r1, #48	; 0x30
 800f8fe:	9143      	str	r1, [sp, #268]	; 0x10c
 800f900:	e7d4      	b.n	800f8ac <__ssvfiscanf_r+0xb0>
 800f902:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800f906:	2a20      	cmp	r2, #32
 800f908:	d8ef      	bhi.n	800f8ea <__ssvfiscanf_r+0xee>
 800f90a:	a101      	add	r1, pc, #4	; (adr r1, 800f910 <__ssvfiscanf_r+0x114>)
 800f90c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f910:	0800f9c3 	.word	0x0800f9c3
 800f914:	0800f8eb 	.word	0x0800f8eb
 800f918:	0800f8eb 	.word	0x0800f8eb
 800f91c:	0800fa21 	.word	0x0800fa21
 800f920:	0800f8eb 	.word	0x0800f8eb
 800f924:	0800f8eb 	.word	0x0800f8eb
 800f928:	0800f8eb 	.word	0x0800f8eb
 800f92c:	0800f8eb 	.word	0x0800f8eb
 800f930:	0800f8eb 	.word	0x0800f8eb
 800f934:	0800f8eb 	.word	0x0800f8eb
 800f938:	0800f8eb 	.word	0x0800f8eb
 800f93c:	0800fa37 	.word	0x0800fa37
 800f940:	0800fa1d 	.word	0x0800fa1d
 800f944:	0800f99b 	.word	0x0800f99b
 800f948:	0800f99b 	.word	0x0800f99b
 800f94c:	0800f99b 	.word	0x0800f99b
 800f950:	0800f8eb 	.word	0x0800f8eb
 800f954:	0800f9d9 	.word	0x0800f9d9
 800f958:	0800f8eb 	.word	0x0800f8eb
 800f95c:	0800f8eb 	.word	0x0800f8eb
 800f960:	0800f8eb 	.word	0x0800f8eb
 800f964:	0800f8eb 	.word	0x0800f8eb
 800f968:	0800fa47 	.word	0x0800fa47
 800f96c:	0800fa15 	.word	0x0800fa15
 800f970:	0800f9bb 	.word	0x0800f9bb
 800f974:	0800f8eb 	.word	0x0800f8eb
 800f978:	0800f8eb 	.word	0x0800f8eb
 800f97c:	0800fa43 	.word	0x0800fa43
 800f980:	0800f8eb 	.word	0x0800f8eb
 800f984:	0800fa1d 	.word	0x0800fa1d
 800f988:	0800f8eb 	.word	0x0800f8eb
 800f98c:	0800f8eb 	.word	0x0800f8eb
 800f990:	0800f9c3 	.word	0x0800f9c3
 800f994:	3b45      	subs	r3, #69	; 0x45
 800f996:	2b02      	cmp	r3, #2
 800f998:	d8a7      	bhi.n	800f8ea <__ssvfiscanf_r+0xee>
 800f99a:	2305      	movs	r3, #5
 800f99c:	e01f      	b.n	800f9de <__ssvfiscanf_r+0x1e2>
 800f99e:	4621      	mov	r1, r4
 800f9a0:	4630      	mov	r0, r6
 800f9a2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f9a4:	4798      	blx	r3
 800f9a6:	2800      	cmp	r0, #0
 800f9a8:	f43f af67 	beq.w	800f87a <__ssvfiscanf_r+0x7e>
 800f9ac:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f9ae:	2800      	cmp	r0, #0
 800f9b0:	f040 808d 	bne.w	800face <__ssvfiscanf_r+0x2d2>
 800f9b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f9b8:	e08f      	b.n	800fada <__ssvfiscanf_r+0x2de>
 800f9ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f9bc:	f042 0220 	orr.w	r2, r2, #32
 800f9c0:	9241      	str	r2, [sp, #260]	; 0x104
 800f9c2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f9c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f9c8:	9241      	str	r2, [sp, #260]	; 0x104
 800f9ca:	2210      	movs	r2, #16
 800f9cc:	2b6f      	cmp	r3, #111	; 0x6f
 800f9ce:	bf34      	ite	cc
 800f9d0:	2303      	movcc	r3, #3
 800f9d2:	2304      	movcs	r3, #4
 800f9d4:	9242      	str	r2, [sp, #264]	; 0x108
 800f9d6:	e002      	b.n	800f9de <__ssvfiscanf_r+0x1e2>
 800f9d8:	2300      	movs	r3, #0
 800f9da:	9342      	str	r3, [sp, #264]	; 0x108
 800f9dc:	2303      	movs	r3, #3
 800f9de:	9347      	str	r3, [sp, #284]	; 0x11c
 800f9e0:	6863      	ldr	r3, [r4, #4]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	dd3d      	ble.n	800fa62 <__ssvfiscanf_r+0x266>
 800f9e6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f9e8:	0659      	lsls	r1, r3, #25
 800f9ea:	d404      	bmi.n	800f9f6 <__ssvfiscanf_r+0x1fa>
 800f9ec:	6823      	ldr	r3, [r4, #0]
 800f9ee:	781a      	ldrb	r2, [r3, #0]
 800f9f0:	5cba      	ldrb	r2, [r7, r2]
 800f9f2:	0712      	lsls	r2, r2, #28
 800f9f4:	d43c      	bmi.n	800fa70 <__ssvfiscanf_r+0x274>
 800f9f6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800f9f8:	2b02      	cmp	r3, #2
 800f9fa:	dc4b      	bgt.n	800fa94 <__ssvfiscanf_r+0x298>
 800f9fc:	466b      	mov	r3, sp
 800f9fe:	4622      	mov	r2, r4
 800fa00:	4630      	mov	r0, r6
 800fa02:	a941      	add	r1, sp, #260	; 0x104
 800fa04:	f000 f9b4 	bl	800fd70 <_scanf_chars>
 800fa08:	2801      	cmp	r0, #1
 800fa0a:	d06a      	beq.n	800fae2 <__ssvfiscanf_r+0x2e6>
 800fa0c:	2802      	cmp	r0, #2
 800fa0e:	f47f af1b 	bne.w	800f848 <__ssvfiscanf_r+0x4c>
 800fa12:	e7cb      	b.n	800f9ac <__ssvfiscanf_r+0x1b0>
 800fa14:	2308      	movs	r3, #8
 800fa16:	9342      	str	r3, [sp, #264]	; 0x108
 800fa18:	2304      	movs	r3, #4
 800fa1a:	e7e0      	b.n	800f9de <__ssvfiscanf_r+0x1e2>
 800fa1c:	220a      	movs	r2, #10
 800fa1e:	e7d5      	b.n	800f9cc <__ssvfiscanf_r+0x1d0>
 800fa20:	4629      	mov	r1, r5
 800fa22:	4640      	mov	r0, r8
 800fa24:	f000 faf0 	bl	8010008 <__sccl>
 800fa28:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fa2a:	4605      	mov	r5, r0
 800fa2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa30:	9341      	str	r3, [sp, #260]	; 0x104
 800fa32:	2301      	movs	r3, #1
 800fa34:	e7d3      	b.n	800f9de <__ssvfiscanf_r+0x1e2>
 800fa36:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fa38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa3c:	9341      	str	r3, [sp, #260]	; 0x104
 800fa3e:	2300      	movs	r3, #0
 800fa40:	e7cd      	b.n	800f9de <__ssvfiscanf_r+0x1e2>
 800fa42:	2302      	movs	r3, #2
 800fa44:	e7cb      	b.n	800f9de <__ssvfiscanf_r+0x1e2>
 800fa46:	9841      	ldr	r0, [sp, #260]	; 0x104
 800fa48:	06c3      	lsls	r3, r0, #27
 800fa4a:	f53f aefd 	bmi.w	800f848 <__ssvfiscanf_r+0x4c>
 800fa4e:	9b00      	ldr	r3, [sp, #0]
 800fa50:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fa52:	1d19      	adds	r1, r3, #4
 800fa54:	9100      	str	r1, [sp, #0]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	07c0      	lsls	r0, r0, #31
 800fa5a:	bf4c      	ite	mi
 800fa5c:	801a      	strhmi	r2, [r3, #0]
 800fa5e:	601a      	strpl	r2, [r3, #0]
 800fa60:	e6f2      	b.n	800f848 <__ssvfiscanf_r+0x4c>
 800fa62:	4621      	mov	r1, r4
 800fa64:	4630      	mov	r0, r6
 800fa66:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fa68:	4798      	blx	r3
 800fa6a:	2800      	cmp	r0, #0
 800fa6c:	d0bb      	beq.n	800f9e6 <__ssvfiscanf_r+0x1ea>
 800fa6e:	e79d      	b.n	800f9ac <__ssvfiscanf_r+0x1b0>
 800fa70:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fa72:	3201      	adds	r2, #1
 800fa74:	9245      	str	r2, [sp, #276]	; 0x114
 800fa76:	6862      	ldr	r2, [r4, #4]
 800fa78:	3a01      	subs	r2, #1
 800fa7a:	2a00      	cmp	r2, #0
 800fa7c:	6062      	str	r2, [r4, #4]
 800fa7e:	dd02      	ble.n	800fa86 <__ssvfiscanf_r+0x28a>
 800fa80:	3301      	adds	r3, #1
 800fa82:	6023      	str	r3, [r4, #0]
 800fa84:	e7b2      	b.n	800f9ec <__ssvfiscanf_r+0x1f0>
 800fa86:	4621      	mov	r1, r4
 800fa88:	4630      	mov	r0, r6
 800fa8a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fa8c:	4798      	blx	r3
 800fa8e:	2800      	cmp	r0, #0
 800fa90:	d0ac      	beq.n	800f9ec <__ssvfiscanf_r+0x1f0>
 800fa92:	e78b      	b.n	800f9ac <__ssvfiscanf_r+0x1b0>
 800fa94:	2b04      	cmp	r3, #4
 800fa96:	dc0f      	bgt.n	800fab8 <__ssvfiscanf_r+0x2bc>
 800fa98:	466b      	mov	r3, sp
 800fa9a:	4622      	mov	r2, r4
 800fa9c:	4630      	mov	r0, r6
 800fa9e:	a941      	add	r1, sp, #260	; 0x104
 800faa0:	f000 f9c0 	bl	800fe24 <_scanf_i>
 800faa4:	e7b0      	b.n	800fa08 <__ssvfiscanf_r+0x20c>
 800faa6:	bf00      	nop
 800faa8:	0800f747 	.word	0x0800f747
 800faac:	0800f7c1 	.word	0x0800f7c1
 800fab0:	08010799 	.word	0x08010799
 800fab4:	08010c62 	.word	0x08010c62
 800fab8:	4b0b      	ldr	r3, [pc, #44]	; (800fae8 <__ssvfiscanf_r+0x2ec>)
 800faba:	2b00      	cmp	r3, #0
 800fabc:	f43f aec4 	beq.w	800f848 <__ssvfiscanf_r+0x4c>
 800fac0:	466b      	mov	r3, sp
 800fac2:	4622      	mov	r2, r4
 800fac4:	4630      	mov	r0, r6
 800fac6:	a941      	add	r1, sp, #260	; 0x104
 800fac8:	f3af 8000 	nop.w
 800facc:	e79c      	b.n	800fa08 <__ssvfiscanf_r+0x20c>
 800face:	89a3      	ldrh	r3, [r4, #12]
 800fad0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800fad4:	bf18      	it	ne
 800fad6:	f04f 30ff 	movne.w	r0, #4294967295
 800fada:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800fade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fae2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800fae4:	e7f9      	b.n	800fada <__ssvfiscanf_r+0x2de>
 800fae6:	bf00      	nop
 800fae8:	00000000 	.word	0x00000000

0800faec <__sfputc_r>:
 800faec:	6893      	ldr	r3, [r2, #8]
 800faee:	b410      	push	{r4}
 800faf0:	3b01      	subs	r3, #1
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	6093      	str	r3, [r2, #8]
 800faf6:	da07      	bge.n	800fb08 <__sfputc_r+0x1c>
 800faf8:	6994      	ldr	r4, [r2, #24]
 800fafa:	42a3      	cmp	r3, r4
 800fafc:	db01      	blt.n	800fb02 <__sfputc_r+0x16>
 800fafe:	290a      	cmp	r1, #10
 800fb00:	d102      	bne.n	800fb08 <__sfputc_r+0x1c>
 800fb02:	bc10      	pop	{r4}
 800fb04:	f000 baf1 	b.w	80100ea <__swbuf_r>
 800fb08:	6813      	ldr	r3, [r2, #0]
 800fb0a:	1c58      	adds	r0, r3, #1
 800fb0c:	6010      	str	r0, [r2, #0]
 800fb0e:	7019      	strb	r1, [r3, #0]
 800fb10:	4608      	mov	r0, r1
 800fb12:	bc10      	pop	{r4}
 800fb14:	4770      	bx	lr

0800fb16 <__sfputs_r>:
 800fb16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb18:	4606      	mov	r6, r0
 800fb1a:	460f      	mov	r7, r1
 800fb1c:	4614      	mov	r4, r2
 800fb1e:	18d5      	adds	r5, r2, r3
 800fb20:	42ac      	cmp	r4, r5
 800fb22:	d101      	bne.n	800fb28 <__sfputs_r+0x12>
 800fb24:	2000      	movs	r0, #0
 800fb26:	e007      	b.n	800fb38 <__sfputs_r+0x22>
 800fb28:	463a      	mov	r2, r7
 800fb2a:	4630      	mov	r0, r6
 800fb2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb30:	f7ff ffdc 	bl	800faec <__sfputc_r>
 800fb34:	1c43      	adds	r3, r0, #1
 800fb36:	d1f3      	bne.n	800fb20 <__sfputs_r+0xa>
 800fb38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fb3c <_vfiprintf_r>:
 800fb3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb40:	460d      	mov	r5, r1
 800fb42:	4614      	mov	r4, r2
 800fb44:	4698      	mov	r8, r3
 800fb46:	4606      	mov	r6, r0
 800fb48:	b09d      	sub	sp, #116	; 0x74
 800fb4a:	b118      	cbz	r0, 800fb54 <_vfiprintf_r+0x18>
 800fb4c:	6a03      	ldr	r3, [r0, #32]
 800fb4e:	b90b      	cbnz	r3, 800fb54 <_vfiprintf_r+0x18>
 800fb50:	f7fc fbe2 	bl	800c318 <__sinit>
 800fb54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb56:	07d9      	lsls	r1, r3, #31
 800fb58:	d405      	bmi.n	800fb66 <_vfiprintf_r+0x2a>
 800fb5a:	89ab      	ldrh	r3, [r5, #12]
 800fb5c:	059a      	lsls	r2, r3, #22
 800fb5e:	d402      	bmi.n	800fb66 <_vfiprintf_r+0x2a>
 800fb60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb62:	f7fd fb49 	bl	800d1f8 <__retarget_lock_acquire_recursive>
 800fb66:	89ab      	ldrh	r3, [r5, #12]
 800fb68:	071b      	lsls	r3, r3, #28
 800fb6a:	d501      	bpl.n	800fb70 <_vfiprintf_r+0x34>
 800fb6c:	692b      	ldr	r3, [r5, #16]
 800fb6e:	b99b      	cbnz	r3, 800fb98 <_vfiprintf_r+0x5c>
 800fb70:	4629      	mov	r1, r5
 800fb72:	4630      	mov	r0, r6
 800fb74:	f000 faf6 	bl	8010164 <__swsetup_r>
 800fb78:	b170      	cbz	r0, 800fb98 <_vfiprintf_r+0x5c>
 800fb7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb7c:	07dc      	lsls	r4, r3, #31
 800fb7e:	d504      	bpl.n	800fb8a <_vfiprintf_r+0x4e>
 800fb80:	f04f 30ff 	mov.w	r0, #4294967295
 800fb84:	b01d      	add	sp, #116	; 0x74
 800fb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb8a:	89ab      	ldrh	r3, [r5, #12]
 800fb8c:	0598      	lsls	r0, r3, #22
 800fb8e:	d4f7      	bmi.n	800fb80 <_vfiprintf_r+0x44>
 800fb90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb92:	f7fd fb33 	bl	800d1fc <__retarget_lock_release_recursive>
 800fb96:	e7f3      	b.n	800fb80 <_vfiprintf_r+0x44>
 800fb98:	2300      	movs	r3, #0
 800fb9a:	9309      	str	r3, [sp, #36]	; 0x24
 800fb9c:	2320      	movs	r3, #32
 800fb9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fba2:	2330      	movs	r3, #48	; 0x30
 800fba4:	f04f 0901 	mov.w	r9, #1
 800fba8:	f8cd 800c 	str.w	r8, [sp, #12]
 800fbac:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800fd5c <_vfiprintf_r+0x220>
 800fbb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fbb4:	4623      	mov	r3, r4
 800fbb6:	469a      	mov	sl, r3
 800fbb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fbbc:	b10a      	cbz	r2, 800fbc2 <_vfiprintf_r+0x86>
 800fbbe:	2a25      	cmp	r2, #37	; 0x25
 800fbc0:	d1f9      	bne.n	800fbb6 <_vfiprintf_r+0x7a>
 800fbc2:	ebba 0b04 	subs.w	fp, sl, r4
 800fbc6:	d00b      	beq.n	800fbe0 <_vfiprintf_r+0xa4>
 800fbc8:	465b      	mov	r3, fp
 800fbca:	4622      	mov	r2, r4
 800fbcc:	4629      	mov	r1, r5
 800fbce:	4630      	mov	r0, r6
 800fbd0:	f7ff ffa1 	bl	800fb16 <__sfputs_r>
 800fbd4:	3001      	adds	r0, #1
 800fbd6:	f000 80a9 	beq.w	800fd2c <_vfiprintf_r+0x1f0>
 800fbda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fbdc:	445a      	add	r2, fp
 800fbde:	9209      	str	r2, [sp, #36]	; 0x24
 800fbe0:	f89a 3000 	ldrb.w	r3, [sl]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	f000 80a1 	beq.w	800fd2c <_vfiprintf_r+0x1f0>
 800fbea:	2300      	movs	r3, #0
 800fbec:	f04f 32ff 	mov.w	r2, #4294967295
 800fbf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fbf4:	f10a 0a01 	add.w	sl, sl, #1
 800fbf8:	9304      	str	r3, [sp, #16]
 800fbfa:	9307      	str	r3, [sp, #28]
 800fbfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fc00:	931a      	str	r3, [sp, #104]	; 0x68
 800fc02:	4654      	mov	r4, sl
 800fc04:	2205      	movs	r2, #5
 800fc06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc0a:	4854      	ldr	r0, [pc, #336]	; (800fd5c <_vfiprintf_r+0x220>)
 800fc0c:	f7fd faff 	bl	800d20e <memchr>
 800fc10:	9a04      	ldr	r2, [sp, #16]
 800fc12:	b9d8      	cbnz	r0, 800fc4c <_vfiprintf_r+0x110>
 800fc14:	06d1      	lsls	r1, r2, #27
 800fc16:	bf44      	itt	mi
 800fc18:	2320      	movmi	r3, #32
 800fc1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc1e:	0713      	lsls	r3, r2, #28
 800fc20:	bf44      	itt	mi
 800fc22:	232b      	movmi	r3, #43	; 0x2b
 800fc24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc28:	f89a 3000 	ldrb.w	r3, [sl]
 800fc2c:	2b2a      	cmp	r3, #42	; 0x2a
 800fc2e:	d015      	beq.n	800fc5c <_vfiprintf_r+0x120>
 800fc30:	4654      	mov	r4, sl
 800fc32:	2000      	movs	r0, #0
 800fc34:	f04f 0c0a 	mov.w	ip, #10
 800fc38:	9a07      	ldr	r2, [sp, #28]
 800fc3a:	4621      	mov	r1, r4
 800fc3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc40:	3b30      	subs	r3, #48	; 0x30
 800fc42:	2b09      	cmp	r3, #9
 800fc44:	d94d      	bls.n	800fce2 <_vfiprintf_r+0x1a6>
 800fc46:	b1b0      	cbz	r0, 800fc76 <_vfiprintf_r+0x13a>
 800fc48:	9207      	str	r2, [sp, #28]
 800fc4a:	e014      	b.n	800fc76 <_vfiprintf_r+0x13a>
 800fc4c:	eba0 0308 	sub.w	r3, r0, r8
 800fc50:	fa09 f303 	lsl.w	r3, r9, r3
 800fc54:	4313      	orrs	r3, r2
 800fc56:	46a2      	mov	sl, r4
 800fc58:	9304      	str	r3, [sp, #16]
 800fc5a:	e7d2      	b.n	800fc02 <_vfiprintf_r+0xc6>
 800fc5c:	9b03      	ldr	r3, [sp, #12]
 800fc5e:	1d19      	adds	r1, r3, #4
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	9103      	str	r1, [sp, #12]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	bfbb      	ittet	lt
 800fc68:	425b      	neglt	r3, r3
 800fc6a:	f042 0202 	orrlt.w	r2, r2, #2
 800fc6e:	9307      	strge	r3, [sp, #28]
 800fc70:	9307      	strlt	r3, [sp, #28]
 800fc72:	bfb8      	it	lt
 800fc74:	9204      	strlt	r2, [sp, #16]
 800fc76:	7823      	ldrb	r3, [r4, #0]
 800fc78:	2b2e      	cmp	r3, #46	; 0x2e
 800fc7a:	d10c      	bne.n	800fc96 <_vfiprintf_r+0x15a>
 800fc7c:	7863      	ldrb	r3, [r4, #1]
 800fc7e:	2b2a      	cmp	r3, #42	; 0x2a
 800fc80:	d134      	bne.n	800fcec <_vfiprintf_r+0x1b0>
 800fc82:	9b03      	ldr	r3, [sp, #12]
 800fc84:	3402      	adds	r4, #2
 800fc86:	1d1a      	adds	r2, r3, #4
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	9203      	str	r2, [sp, #12]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	bfb8      	it	lt
 800fc90:	f04f 33ff 	movlt.w	r3, #4294967295
 800fc94:	9305      	str	r3, [sp, #20]
 800fc96:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fd60 <_vfiprintf_r+0x224>
 800fc9a:	2203      	movs	r2, #3
 800fc9c:	4650      	mov	r0, sl
 800fc9e:	7821      	ldrb	r1, [r4, #0]
 800fca0:	f7fd fab5 	bl	800d20e <memchr>
 800fca4:	b138      	cbz	r0, 800fcb6 <_vfiprintf_r+0x17a>
 800fca6:	2240      	movs	r2, #64	; 0x40
 800fca8:	9b04      	ldr	r3, [sp, #16]
 800fcaa:	eba0 000a 	sub.w	r0, r0, sl
 800fcae:	4082      	lsls	r2, r0
 800fcb0:	4313      	orrs	r3, r2
 800fcb2:	3401      	adds	r4, #1
 800fcb4:	9304      	str	r3, [sp, #16]
 800fcb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcba:	2206      	movs	r2, #6
 800fcbc:	4829      	ldr	r0, [pc, #164]	; (800fd64 <_vfiprintf_r+0x228>)
 800fcbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fcc2:	f7fd faa4 	bl	800d20e <memchr>
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	d03f      	beq.n	800fd4a <_vfiprintf_r+0x20e>
 800fcca:	4b27      	ldr	r3, [pc, #156]	; (800fd68 <_vfiprintf_r+0x22c>)
 800fccc:	bb1b      	cbnz	r3, 800fd16 <_vfiprintf_r+0x1da>
 800fcce:	9b03      	ldr	r3, [sp, #12]
 800fcd0:	3307      	adds	r3, #7
 800fcd2:	f023 0307 	bic.w	r3, r3, #7
 800fcd6:	3308      	adds	r3, #8
 800fcd8:	9303      	str	r3, [sp, #12]
 800fcda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcdc:	443b      	add	r3, r7
 800fcde:	9309      	str	r3, [sp, #36]	; 0x24
 800fce0:	e768      	b.n	800fbb4 <_vfiprintf_r+0x78>
 800fce2:	460c      	mov	r4, r1
 800fce4:	2001      	movs	r0, #1
 800fce6:	fb0c 3202 	mla	r2, ip, r2, r3
 800fcea:	e7a6      	b.n	800fc3a <_vfiprintf_r+0xfe>
 800fcec:	2300      	movs	r3, #0
 800fcee:	f04f 0c0a 	mov.w	ip, #10
 800fcf2:	4619      	mov	r1, r3
 800fcf4:	3401      	adds	r4, #1
 800fcf6:	9305      	str	r3, [sp, #20]
 800fcf8:	4620      	mov	r0, r4
 800fcfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fcfe:	3a30      	subs	r2, #48	; 0x30
 800fd00:	2a09      	cmp	r2, #9
 800fd02:	d903      	bls.n	800fd0c <_vfiprintf_r+0x1d0>
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d0c6      	beq.n	800fc96 <_vfiprintf_r+0x15a>
 800fd08:	9105      	str	r1, [sp, #20]
 800fd0a:	e7c4      	b.n	800fc96 <_vfiprintf_r+0x15a>
 800fd0c:	4604      	mov	r4, r0
 800fd0e:	2301      	movs	r3, #1
 800fd10:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd14:	e7f0      	b.n	800fcf8 <_vfiprintf_r+0x1bc>
 800fd16:	ab03      	add	r3, sp, #12
 800fd18:	9300      	str	r3, [sp, #0]
 800fd1a:	462a      	mov	r2, r5
 800fd1c:	4630      	mov	r0, r6
 800fd1e:	4b13      	ldr	r3, [pc, #76]	; (800fd6c <_vfiprintf_r+0x230>)
 800fd20:	a904      	add	r1, sp, #16
 800fd22:	f7fb feab 	bl	800ba7c <_printf_float>
 800fd26:	4607      	mov	r7, r0
 800fd28:	1c78      	adds	r0, r7, #1
 800fd2a:	d1d6      	bne.n	800fcda <_vfiprintf_r+0x19e>
 800fd2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd2e:	07d9      	lsls	r1, r3, #31
 800fd30:	d405      	bmi.n	800fd3e <_vfiprintf_r+0x202>
 800fd32:	89ab      	ldrh	r3, [r5, #12]
 800fd34:	059a      	lsls	r2, r3, #22
 800fd36:	d402      	bmi.n	800fd3e <_vfiprintf_r+0x202>
 800fd38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd3a:	f7fd fa5f 	bl	800d1fc <__retarget_lock_release_recursive>
 800fd3e:	89ab      	ldrh	r3, [r5, #12]
 800fd40:	065b      	lsls	r3, r3, #25
 800fd42:	f53f af1d 	bmi.w	800fb80 <_vfiprintf_r+0x44>
 800fd46:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd48:	e71c      	b.n	800fb84 <_vfiprintf_r+0x48>
 800fd4a:	ab03      	add	r3, sp, #12
 800fd4c:	9300      	str	r3, [sp, #0]
 800fd4e:	462a      	mov	r2, r5
 800fd50:	4630      	mov	r0, r6
 800fd52:	4b06      	ldr	r3, [pc, #24]	; (800fd6c <_vfiprintf_r+0x230>)
 800fd54:	a904      	add	r1, sp, #16
 800fd56:	f7fc f931 	bl	800bfbc <_printf_i>
 800fd5a:	e7e4      	b.n	800fd26 <_vfiprintf_r+0x1ea>
 800fd5c:	08010c5c 	.word	0x08010c5c
 800fd60:	08010c62 	.word	0x08010c62
 800fd64:	08010c66 	.word	0x08010c66
 800fd68:	0800ba7d 	.word	0x0800ba7d
 800fd6c:	0800fb17 	.word	0x0800fb17

0800fd70 <_scanf_chars>:
 800fd70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd74:	4615      	mov	r5, r2
 800fd76:	688a      	ldr	r2, [r1, #8]
 800fd78:	4680      	mov	r8, r0
 800fd7a:	460c      	mov	r4, r1
 800fd7c:	b932      	cbnz	r2, 800fd8c <_scanf_chars+0x1c>
 800fd7e:	698a      	ldr	r2, [r1, #24]
 800fd80:	2a00      	cmp	r2, #0
 800fd82:	bf0c      	ite	eq
 800fd84:	2201      	moveq	r2, #1
 800fd86:	f04f 32ff 	movne.w	r2, #4294967295
 800fd8a:	608a      	str	r2, [r1, #8]
 800fd8c:	2700      	movs	r7, #0
 800fd8e:	6822      	ldr	r2, [r4, #0]
 800fd90:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800fe20 <_scanf_chars+0xb0>
 800fd94:	06d1      	lsls	r1, r2, #27
 800fd96:	bf5f      	itttt	pl
 800fd98:	681a      	ldrpl	r2, [r3, #0]
 800fd9a:	1d11      	addpl	r1, r2, #4
 800fd9c:	6019      	strpl	r1, [r3, #0]
 800fd9e:	6816      	ldrpl	r6, [r2, #0]
 800fda0:	69a0      	ldr	r0, [r4, #24]
 800fda2:	b188      	cbz	r0, 800fdc8 <_scanf_chars+0x58>
 800fda4:	2801      	cmp	r0, #1
 800fda6:	d107      	bne.n	800fdb8 <_scanf_chars+0x48>
 800fda8:	682b      	ldr	r3, [r5, #0]
 800fdaa:	781a      	ldrb	r2, [r3, #0]
 800fdac:	6963      	ldr	r3, [r4, #20]
 800fdae:	5c9b      	ldrb	r3, [r3, r2]
 800fdb0:	b953      	cbnz	r3, 800fdc8 <_scanf_chars+0x58>
 800fdb2:	2f00      	cmp	r7, #0
 800fdb4:	d031      	beq.n	800fe1a <_scanf_chars+0xaa>
 800fdb6:	e022      	b.n	800fdfe <_scanf_chars+0x8e>
 800fdb8:	2802      	cmp	r0, #2
 800fdba:	d120      	bne.n	800fdfe <_scanf_chars+0x8e>
 800fdbc:	682b      	ldr	r3, [r5, #0]
 800fdbe:	781b      	ldrb	r3, [r3, #0]
 800fdc0:	f819 3003 	ldrb.w	r3, [r9, r3]
 800fdc4:	071b      	lsls	r3, r3, #28
 800fdc6:	d41a      	bmi.n	800fdfe <_scanf_chars+0x8e>
 800fdc8:	6823      	ldr	r3, [r4, #0]
 800fdca:	3701      	adds	r7, #1
 800fdcc:	06da      	lsls	r2, r3, #27
 800fdce:	bf5e      	ittt	pl
 800fdd0:	682b      	ldrpl	r3, [r5, #0]
 800fdd2:	781b      	ldrbpl	r3, [r3, #0]
 800fdd4:	f806 3b01 	strbpl.w	r3, [r6], #1
 800fdd8:	682a      	ldr	r2, [r5, #0]
 800fdda:	686b      	ldr	r3, [r5, #4]
 800fddc:	3201      	adds	r2, #1
 800fdde:	602a      	str	r2, [r5, #0]
 800fde0:	68a2      	ldr	r2, [r4, #8]
 800fde2:	3b01      	subs	r3, #1
 800fde4:	3a01      	subs	r2, #1
 800fde6:	606b      	str	r3, [r5, #4]
 800fde8:	60a2      	str	r2, [r4, #8]
 800fdea:	b142      	cbz	r2, 800fdfe <_scanf_chars+0x8e>
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	dcd7      	bgt.n	800fda0 <_scanf_chars+0x30>
 800fdf0:	4629      	mov	r1, r5
 800fdf2:	4640      	mov	r0, r8
 800fdf4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fdf8:	4798      	blx	r3
 800fdfa:	2800      	cmp	r0, #0
 800fdfc:	d0d0      	beq.n	800fda0 <_scanf_chars+0x30>
 800fdfe:	6823      	ldr	r3, [r4, #0]
 800fe00:	f013 0310 	ands.w	r3, r3, #16
 800fe04:	d105      	bne.n	800fe12 <_scanf_chars+0xa2>
 800fe06:	68e2      	ldr	r2, [r4, #12]
 800fe08:	3201      	adds	r2, #1
 800fe0a:	60e2      	str	r2, [r4, #12]
 800fe0c:	69a2      	ldr	r2, [r4, #24]
 800fe0e:	b102      	cbz	r2, 800fe12 <_scanf_chars+0xa2>
 800fe10:	7033      	strb	r3, [r6, #0]
 800fe12:	2000      	movs	r0, #0
 800fe14:	6923      	ldr	r3, [r4, #16]
 800fe16:	443b      	add	r3, r7
 800fe18:	6123      	str	r3, [r4, #16]
 800fe1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe1e:	bf00      	nop
 800fe20:	08010799 	.word	0x08010799

0800fe24 <_scanf_i>:
 800fe24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe28:	460c      	mov	r4, r1
 800fe2a:	4698      	mov	r8, r3
 800fe2c:	4b72      	ldr	r3, [pc, #456]	; (800fff8 <_scanf_i+0x1d4>)
 800fe2e:	b087      	sub	sp, #28
 800fe30:	4682      	mov	sl, r0
 800fe32:	4616      	mov	r6, r2
 800fe34:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fe38:	ab03      	add	r3, sp, #12
 800fe3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fe3e:	4b6f      	ldr	r3, [pc, #444]	; (800fffc <_scanf_i+0x1d8>)
 800fe40:	69a1      	ldr	r1, [r4, #24]
 800fe42:	4a6f      	ldr	r2, [pc, #444]	; (8010000 <_scanf_i+0x1dc>)
 800fe44:	4627      	mov	r7, r4
 800fe46:	2903      	cmp	r1, #3
 800fe48:	bf18      	it	ne
 800fe4a:	461a      	movne	r2, r3
 800fe4c:	68a3      	ldr	r3, [r4, #8]
 800fe4e:	9201      	str	r2, [sp, #4]
 800fe50:	1e5a      	subs	r2, r3, #1
 800fe52:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fe56:	bf81      	itttt	hi
 800fe58:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fe5c:	eb03 0905 	addhi.w	r9, r3, r5
 800fe60:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fe64:	60a3      	strhi	r3, [r4, #8]
 800fe66:	f857 3b1c 	ldr.w	r3, [r7], #28
 800fe6a:	bf98      	it	ls
 800fe6c:	f04f 0900 	movls.w	r9, #0
 800fe70:	463d      	mov	r5, r7
 800fe72:	f04f 0b00 	mov.w	fp, #0
 800fe76:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800fe7a:	6023      	str	r3, [r4, #0]
 800fe7c:	6831      	ldr	r1, [r6, #0]
 800fe7e:	ab03      	add	r3, sp, #12
 800fe80:	2202      	movs	r2, #2
 800fe82:	7809      	ldrb	r1, [r1, #0]
 800fe84:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800fe88:	f7fd f9c1 	bl	800d20e <memchr>
 800fe8c:	b328      	cbz	r0, 800feda <_scanf_i+0xb6>
 800fe8e:	f1bb 0f01 	cmp.w	fp, #1
 800fe92:	d159      	bne.n	800ff48 <_scanf_i+0x124>
 800fe94:	6862      	ldr	r2, [r4, #4]
 800fe96:	b92a      	cbnz	r2, 800fea4 <_scanf_i+0x80>
 800fe98:	2308      	movs	r3, #8
 800fe9a:	6822      	ldr	r2, [r4, #0]
 800fe9c:	6063      	str	r3, [r4, #4]
 800fe9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fea2:	6022      	str	r2, [r4, #0]
 800fea4:	6822      	ldr	r2, [r4, #0]
 800fea6:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800feaa:	6022      	str	r2, [r4, #0]
 800feac:	68a2      	ldr	r2, [r4, #8]
 800feae:	1e51      	subs	r1, r2, #1
 800feb0:	60a1      	str	r1, [r4, #8]
 800feb2:	b192      	cbz	r2, 800feda <_scanf_i+0xb6>
 800feb4:	6832      	ldr	r2, [r6, #0]
 800feb6:	1c51      	adds	r1, r2, #1
 800feb8:	6031      	str	r1, [r6, #0]
 800feba:	7812      	ldrb	r2, [r2, #0]
 800febc:	f805 2b01 	strb.w	r2, [r5], #1
 800fec0:	6872      	ldr	r2, [r6, #4]
 800fec2:	3a01      	subs	r2, #1
 800fec4:	2a00      	cmp	r2, #0
 800fec6:	6072      	str	r2, [r6, #4]
 800fec8:	dc07      	bgt.n	800feda <_scanf_i+0xb6>
 800feca:	4631      	mov	r1, r6
 800fecc:	4650      	mov	r0, sl
 800fece:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800fed2:	4790      	blx	r2
 800fed4:	2800      	cmp	r0, #0
 800fed6:	f040 8085 	bne.w	800ffe4 <_scanf_i+0x1c0>
 800feda:	f10b 0b01 	add.w	fp, fp, #1
 800fede:	f1bb 0f03 	cmp.w	fp, #3
 800fee2:	d1cb      	bne.n	800fe7c <_scanf_i+0x58>
 800fee4:	6863      	ldr	r3, [r4, #4]
 800fee6:	b90b      	cbnz	r3, 800feec <_scanf_i+0xc8>
 800fee8:	230a      	movs	r3, #10
 800feea:	6063      	str	r3, [r4, #4]
 800feec:	6863      	ldr	r3, [r4, #4]
 800feee:	4945      	ldr	r1, [pc, #276]	; (8010004 <_scanf_i+0x1e0>)
 800fef0:	6960      	ldr	r0, [r4, #20]
 800fef2:	1ac9      	subs	r1, r1, r3
 800fef4:	f000 f888 	bl	8010008 <__sccl>
 800fef8:	f04f 0b00 	mov.w	fp, #0
 800fefc:	68a3      	ldr	r3, [r4, #8]
 800fefe:	6822      	ldr	r2, [r4, #0]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d03d      	beq.n	800ff80 <_scanf_i+0x15c>
 800ff04:	6831      	ldr	r1, [r6, #0]
 800ff06:	6960      	ldr	r0, [r4, #20]
 800ff08:	f891 c000 	ldrb.w	ip, [r1]
 800ff0c:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ff10:	2800      	cmp	r0, #0
 800ff12:	d035      	beq.n	800ff80 <_scanf_i+0x15c>
 800ff14:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ff18:	d124      	bne.n	800ff64 <_scanf_i+0x140>
 800ff1a:	0510      	lsls	r0, r2, #20
 800ff1c:	d522      	bpl.n	800ff64 <_scanf_i+0x140>
 800ff1e:	f10b 0b01 	add.w	fp, fp, #1
 800ff22:	f1b9 0f00 	cmp.w	r9, #0
 800ff26:	d003      	beq.n	800ff30 <_scanf_i+0x10c>
 800ff28:	3301      	adds	r3, #1
 800ff2a:	f109 39ff 	add.w	r9, r9, #4294967295
 800ff2e:	60a3      	str	r3, [r4, #8]
 800ff30:	6873      	ldr	r3, [r6, #4]
 800ff32:	3b01      	subs	r3, #1
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	6073      	str	r3, [r6, #4]
 800ff38:	dd1b      	ble.n	800ff72 <_scanf_i+0x14e>
 800ff3a:	6833      	ldr	r3, [r6, #0]
 800ff3c:	3301      	adds	r3, #1
 800ff3e:	6033      	str	r3, [r6, #0]
 800ff40:	68a3      	ldr	r3, [r4, #8]
 800ff42:	3b01      	subs	r3, #1
 800ff44:	60a3      	str	r3, [r4, #8]
 800ff46:	e7d9      	b.n	800fefc <_scanf_i+0xd8>
 800ff48:	f1bb 0f02 	cmp.w	fp, #2
 800ff4c:	d1ae      	bne.n	800feac <_scanf_i+0x88>
 800ff4e:	6822      	ldr	r2, [r4, #0]
 800ff50:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ff54:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ff58:	d1bf      	bne.n	800feda <_scanf_i+0xb6>
 800ff5a:	2310      	movs	r3, #16
 800ff5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ff60:	6063      	str	r3, [r4, #4]
 800ff62:	e7a2      	b.n	800feaa <_scanf_i+0x86>
 800ff64:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ff68:	6022      	str	r2, [r4, #0]
 800ff6a:	780b      	ldrb	r3, [r1, #0]
 800ff6c:	f805 3b01 	strb.w	r3, [r5], #1
 800ff70:	e7de      	b.n	800ff30 <_scanf_i+0x10c>
 800ff72:	4631      	mov	r1, r6
 800ff74:	4650      	mov	r0, sl
 800ff76:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ff7a:	4798      	blx	r3
 800ff7c:	2800      	cmp	r0, #0
 800ff7e:	d0df      	beq.n	800ff40 <_scanf_i+0x11c>
 800ff80:	6823      	ldr	r3, [r4, #0]
 800ff82:	05d9      	lsls	r1, r3, #23
 800ff84:	d50d      	bpl.n	800ffa2 <_scanf_i+0x17e>
 800ff86:	42bd      	cmp	r5, r7
 800ff88:	d909      	bls.n	800ff9e <_scanf_i+0x17a>
 800ff8a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ff8e:	4632      	mov	r2, r6
 800ff90:	4650      	mov	r0, sl
 800ff92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ff96:	f105 39ff 	add.w	r9, r5, #4294967295
 800ff9a:	4798      	blx	r3
 800ff9c:	464d      	mov	r5, r9
 800ff9e:	42bd      	cmp	r5, r7
 800ffa0:	d028      	beq.n	800fff4 <_scanf_i+0x1d0>
 800ffa2:	6822      	ldr	r2, [r4, #0]
 800ffa4:	f012 0210 	ands.w	r2, r2, #16
 800ffa8:	d113      	bne.n	800ffd2 <_scanf_i+0x1ae>
 800ffaa:	702a      	strb	r2, [r5, #0]
 800ffac:	4639      	mov	r1, r7
 800ffae:	6863      	ldr	r3, [r4, #4]
 800ffb0:	4650      	mov	r0, sl
 800ffb2:	9e01      	ldr	r6, [sp, #4]
 800ffb4:	47b0      	blx	r6
 800ffb6:	f8d8 3000 	ldr.w	r3, [r8]
 800ffba:	6821      	ldr	r1, [r4, #0]
 800ffbc:	1d1a      	adds	r2, r3, #4
 800ffbe:	f8c8 2000 	str.w	r2, [r8]
 800ffc2:	f011 0f20 	tst.w	r1, #32
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	d00f      	beq.n	800ffea <_scanf_i+0x1c6>
 800ffca:	6018      	str	r0, [r3, #0]
 800ffcc:	68e3      	ldr	r3, [r4, #12]
 800ffce:	3301      	adds	r3, #1
 800ffd0:	60e3      	str	r3, [r4, #12]
 800ffd2:	2000      	movs	r0, #0
 800ffd4:	6923      	ldr	r3, [r4, #16]
 800ffd6:	1bed      	subs	r5, r5, r7
 800ffd8:	445d      	add	r5, fp
 800ffda:	442b      	add	r3, r5
 800ffdc:	6123      	str	r3, [r4, #16]
 800ffde:	b007      	add	sp, #28
 800ffe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffe4:	f04f 0b00 	mov.w	fp, #0
 800ffe8:	e7ca      	b.n	800ff80 <_scanf_i+0x15c>
 800ffea:	07ca      	lsls	r2, r1, #31
 800ffec:	bf4c      	ite	mi
 800ffee:	8018      	strhmi	r0, [r3, #0]
 800fff0:	6018      	strpl	r0, [r3, #0]
 800fff2:	e7eb      	b.n	800ffcc <_scanf_i+0x1a8>
 800fff4:	2001      	movs	r0, #1
 800fff6:	e7f2      	b.n	800ffde <_scanf_i+0x1ba>
 800fff8:	08010590 	.word	0x08010590
 800fffc:	0800f1ad 	.word	0x0800f1ad
 8010000:	0800b92d 	.word	0x0800b92d
 8010004:	08010ce0 	.word	0x08010ce0

08010008 <__sccl>:
 8010008:	b570      	push	{r4, r5, r6, lr}
 801000a:	780b      	ldrb	r3, [r1, #0]
 801000c:	4604      	mov	r4, r0
 801000e:	2b5e      	cmp	r3, #94	; 0x5e
 8010010:	bf0b      	itete	eq
 8010012:	784b      	ldrbeq	r3, [r1, #1]
 8010014:	1c4a      	addne	r2, r1, #1
 8010016:	1c8a      	addeq	r2, r1, #2
 8010018:	2100      	movne	r1, #0
 801001a:	bf08      	it	eq
 801001c:	2101      	moveq	r1, #1
 801001e:	3801      	subs	r0, #1
 8010020:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8010024:	f800 1f01 	strb.w	r1, [r0, #1]!
 8010028:	42a8      	cmp	r0, r5
 801002a:	d1fb      	bne.n	8010024 <__sccl+0x1c>
 801002c:	b90b      	cbnz	r3, 8010032 <__sccl+0x2a>
 801002e:	1e50      	subs	r0, r2, #1
 8010030:	bd70      	pop	{r4, r5, r6, pc}
 8010032:	f081 0101 	eor.w	r1, r1, #1
 8010036:	4610      	mov	r0, r2
 8010038:	54e1      	strb	r1, [r4, r3]
 801003a:	4602      	mov	r2, r0
 801003c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010040:	2d2d      	cmp	r5, #45	; 0x2d
 8010042:	d005      	beq.n	8010050 <__sccl+0x48>
 8010044:	2d5d      	cmp	r5, #93	; 0x5d
 8010046:	d016      	beq.n	8010076 <__sccl+0x6e>
 8010048:	2d00      	cmp	r5, #0
 801004a:	d0f1      	beq.n	8010030 <__sccl+0x28>
 801004c:	462b      	mov	r3, r5
 801004e:	e7f2      	b.n	8010036 <__sccl+0x2e>
 8010050:	7846      	ldrb	r6, [r0, #1]
 8010052:	2e5d      	cmp	r6, #93	; 0x5d
 8010054:	d0fa      	beq.n	801004c <__sccl+0x44>
 8010056:	42b3      	cmp	r3, r6
 8010058:	dcf8      	bgt.n	801004c <__sccl+0x44>
 801005a:	461a      	mov	r2, r3
 801005c:	3002      	adds	r0, #2
 801005e:	3201      	adds	r2, #1
 8010060:	4296      	cmp	r6, r2
 8010062:	54a1      	strb	r1, [r4, r2]
 8010064:	dcfb      	bgt.n	801005e <__sccl+0x56>
 8010066:	1af2      	subs	r2, r6, r3
 8010068:	3a01      	subs	r2, #1
 801006a:	42b3      	cmp	r3, r6
 801006c:	bfa8      	it	ge
 801006e:	2200      	movge	r2, #0
 8010070:	1c5d      	adds	r5, r3, #1
 8010072:	18ab      	adds	r3, r5, r2
 8010074:	e7e1      	b.n	801003a <__sccl+0x32>
 8010076:	4610      	mov	r0, r2
 8010078:	e7da      	b.n	8010030 <__sccl+0x28>

0801007a <__submore>:
 801007a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801007e:	460c      	mov	r4, r1
 8010080:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010082:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010086:	4299      	cmp	r1, r3
 8010088:	d11b      	bne.n	80100c2 <__submore+0x48>
 801008a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801008e:	f7fa fcd5 	bl	800aa3c <_malloc_r>
 8010092:	b918      	cbnz	r0, 801009c <__submore+0x22>
 8010094:	f04f 30ff 	mov.w	r0, #4294967295
 8010098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801009c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80100a0:	63a3      	str	r3, [r4, #56]	; 0x38
 80100a2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80100a6:	6360      	str	r0, [r4, #52]	; 0x34
 80100a8:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80100ac:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80100b0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80100b4:	7043      	strb	r3, [r0, #1]
 80100b6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80100ba:	7003      	strb	r3, [r0, #0]
 80100bc:	6020      	str	r0, [r4, #0]
 80100be:	2000      	movs	r0, #0
 80100c0:	e7ea      	b.n	8010098 <__submore+0x1e>
 80100c2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80100c4:	0077      	lsls	r7, r6, #1
 80100c6:	463a      	mov	r2, r7
 80100c8:	f7ff fb0e 	bl	800f6e8 <_realloc_r>
 80100cc:	4605      	mov	r5, r0
 80100ce:	2800      	cmp	r0, #0
 80100d0:	d0e0      	beq.n	8010094 <__submore+0x1a>
 80100d2:	eb00 0806 	add.w	r8, r0, r6
 80100d6:	4601      	mov	r1, r0
 80100d8:	4632      	mov	r2, r6
 80100da:	4640      	mov	r0, r8
 80100dc:	f7fd f8a5 	bl	800d22a <memcpy>
 80100e0:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80100e4:	f8c4 8000 	str.w	r8, [r4]
 80100e8:	e7e9      	b.n	80100be <__submore+0x44>

080100ea <__swbuf_r>:
 80100ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100ec:	460e      	mov	r6, r1
 80100ee:	4614      	mov	r4, r2
 80100f0:	4605      	mov	r5, r0
 80100f2:	b118      	cbz	r0, 80100fc <__swbuf_r+0x12>
 80100f4:	6a03      	ldr	r3, [r0, #32]
 80100f6:	b90b      	cbnz	r3, 80100fc <__swbuf_r+0x12>
 80100f8:	f7fc f90e 	bl	800c318 <__sinit>
 80100fc:	69a3      	ldr	r3, [r4, #24]
 80100fe:	60a3      	str	r3, [r4, #8]
 8010100:	89a3      	ldrh	r3, [r4, #12]
 8010102:	071a      	lsls	r2, r3, #28
 8010104:	d525      	bpl.n	8010152 <__swbuf_r+0x68>
 8010106:	6923      	ldr	r3, [r4, #16]
 8010108:	b31b      	cbz	r3, 8010152 <__swbuf_r+0x68>
 801010a:	6823      	ldr	r3, [r4, #0]
 801010c:	6922      	ldr	r2, [r4, #16]
 801010e:	b2f6      	uxtb	r6, r6
 8010110:	1a98      	subs	r0, r3, r2
 8010112:	6963      	ldr	r3, [r4, #20]
 8010114:	4637      	mov	r7, r6
 8010116:	4283      	cmp	r3, r0
 8010118:	dc04      	bgt.n	8010124 <__swbuf_r+0x3a>
 801011a:	4621      	mov	r1, r4
 801011c:	4628      	mov	r0, r5
 801011e:	f7ff fa39 	bl	800f594 <_fflush_r>
 8010122:	b9e0      	cbnz	r0, 801015e <__swbuf_r+0x74>
 8010124:	68a3      	ldr	r3, [r4, #8]
 8010126:	3b01      	subs	r3, #1
 8010128:	60a3      	str	r3, [r4, #8]
 801012a:	6823      	ldr	r3, [r4, #0]
 801012c:	1c5a      	adds	r2, r3, #1
 801012e:	6022      	str	r2, [r4, #0]
 8010130:	701e      	strb	r6, [r3, #0]
 8010132:	6962      	ldr	r2, [r4, #20]
 8010134:	1c43      	adds	r3, r0, #1
 8010136:	429a      	cmp	r2, r3
 8010138:	d004      	beq.n	8010144 <__swbuf_r+0x5a>
 801013a:	89a3      	ldrh	r3, [r4, #12]
 801013c:	07db      	lsls	r3, r3, #31
 801013e:	d506      	bpl.n	801014e <__swbuf_r+0x64>
 8010140:	2e0a      	cmp	r6, #10
 8010142:	d104      	bne.n	801014e <__swbuf_r+0x64>
 8010144:	4621      	mov	r1, r4
 8010146:	4628      	mov	r0, r5
 8010148:	f7ff fa24 	bl	800f594 <_fflush_r>
 801014c:	b938      	cbnz	r0, 801015e <__swbuf_r+0x74>
 801014e:	4638      	mov	r0, r7
 8010150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010152:	4621      	mov	r1, r4
 8010154:	4628      	mov	r0, r5
 8010156:	f000 f805 	bl	8010164 <__swsetup_r>
 801015a:	2800      	cmp	r0, #0
 801015c:	d0d5      	beq.n	801010a <__swbuf_r+0x20>
 801015e:	f04f 37ff 	mov.w	r7, #4294967295
 8010162:	e7f4      	b.n	801014e <__swbuf_r+0x64>

08010164 <__swsetup_r>:
 8010164:	b538      	push	{r3, r4, r5, lr}
 8010166:	4b2a      	ldr	r3, [pc, #168]	; (8010210 <__swsetup_r+0xac>)
 8010168:	4605      	mov	r5, r0
 801016a:	6818      	ldr	r0, [r3, #0]
 801016c:	460c      	mov	r4, r1
 801016e:	b118      	cbz	r0, 8010178 <__swsetup_r+0x14>
 8010170:	6a03      	ldr	r3, [r0, #32]
 8010172:	b90b      	cbnz	r3, 8010178 <__swsetup_r+0x14>
 8010174:	f7fc f8d0 	bl	800c318 <__sinit>
 8010178:	89a3      	ldrh	r3, [r4, #12]
 801017a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801017e:	0718      	lsls	r0, r3, #28
 8010180:	d422      	bmi.n	80101c8 <__swsetup_r+0x64>
 8010182:	06d9      	lsls	r1, r3, #27
 8010184:	d407      	bmi.n	8010196 <__swsetup_r+0x32>
 8010186:	2309      	movs	r3, #9
 8010188:	602b      	str	r3, [r5, #0]
 801018a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801018e:	f04f 30ff 	mov.w	r0, #4294967295
 8010192:	81a3      	strh	r3, [r4, #12]
 8010194:	e034      	b.n	8010200 <__swsetup_r+0x9c>
 8010196:	0758      	lsls	r0, r3, #29
 8010198:	d512      	bpl.n	80101c0 <__swsetup_r+0x5c>
 801019a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801019c:	b141      	cbz	r1, 80101b0 <__swsetup_r+0x4c>
 801019e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101a2:	4299      	cmp	r1, r3
 80101a4:	d002      	beq.n	80101ac <__swsetup_r+0x48>
 80101a6:	4628      	mov	r0, r5
 80101a8:	f7fd fefa 	bl	800dfa0 <_free_r>
 80101ac:	2300      	movs	r3, #0
 80101ae:	6363      	str	r3, [r4, #52]	; 0x34
 80101b0:	89a3      	ldrh	r3, [r4, #12]
 80101b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80101b6:	81a3      	strh	r3, [r4, #12]
 80101b8:	2300      	movs	r3, #0
 80101ba:	6063      	str	r3, [r4, #4]
 80101bc:	6923      	ldr	r3, [r4, #16]
 80101be:	6023      	str	r3, [r4, #0]
 80101c0:	89a3      	ldrh	r3, [r4, #12]
 80101c2:	f043 0308 	orr.w	r3, r3, #8
 80101c6:	81a3      	strh	r3, [r4, #12]
 80101c8:	6923      	ldr	r3, [r4, #16]
 80101ca:	b94b      	cbnz	r3, 80101e0 <__swsetup_r+0x7c>
 80101cc:	89a3      	ldrh	r3, [r4, #12]
 80101ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80101d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80101d6:	d003      	beq.n	80101e0 <__swsetup_r+0x7c>
 80101d8:	4621      	mov	r1, r4
 80101da:	4628      	mov	r0, r5
 80101dc:	f000 f88b 	bl	80102f6 <__smakebuf_r>
 80101e0:	89a0      	ldrh	r0, [r4, #12]
 80101e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80101e6:	f010 0301 	ands.w	r3, r0, #1
 80101ea:	d00a      	beq.n	8010202 <__swsetup_r+0x9e>
 80101ec:	2300      	movs	r3, #0
 80101ee:	60a3      	str	r3, [r4, #8]
 80101f0:	6963      	ldr	r3, [r4, #20]
 80101f2:	425b      	negs	r3, r3
 80101f4:	61a3      	str	r3, [r4, #24]
 80101f6:	6923      	ldr	r3, [r4, #16]
 80101f8:	b943      	cbnz	r3, 801020c <__swsetup_r+0xa8>
 80101fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80101fe:	d1c4      	bne.n	801018a <__swsetup_r+0x26>
 8010200:	bd38      	pop	{r3, r4, r5, pc}
 8010202:	0781      	lsls	r1, r0, #30
 8010204:	bf58      	it	pl
 8010206:	6963      	ldrpl	r3, [r4, #20]
 8010208:	60a3      	str	r3, [r4, #8]
 801020a:	e7f4      	b.n	80101f6 <__swsetup_r+0x92>
 801020c:	2000      	movs	r0, #0
 801020e:	e7f7      	b.n	8010200 <__swsetup_r+0x9c>
 8010210:	200001e0 	.word	0x200001e0

08010214 <_raise_r>:
 8010214:	291f      	cmp	r1, #31
 8010216:	b538      	push	{r3, r4, r5, lr}
 8010218:	4604      	mov	r4, r0
 801021a:	460d      	mov	r5, r1
 801021c:	d904      	bls.n	8010228 <_raise_r+0x14>
 801021e:	2316      	movs	r3, #22
 8010220:	6003      	str	r3, [r0, #0]
 8010222:	f04f 30ff 	mov.w	r0, #4294967295
 8010226:	bd38      	pop	{r3, r4, r5, pc}
 8010228:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801022a:	b112      	cbz	r2, 8010232 <_raise_r+0x1e>
 801022c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010230:	b94b      	cbnz	r3, 8010246 <_raise_r+0x32>
 8010232:	4620      	mov	r0, r4
 8010234:	f000 f830 	bl	8010298 <_getpid_r>
 8010238:	462a      	mov	r2, r5
 801023a:	4601      	mov	r1, r0
 801023c:	4620      	mov	r0, r4
 801023e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010242:	f000 b817 	b.w	8010274 <_kill_r>
 8010246:	2b01      	cmp	r3, #1
 8010248:	d00a      	beq.n	8010260 <_raise_r+0x4c>
 801024a:	1c59      	adds	r1, r3, #1
 801024c:	d103      	bne.n	8010256 <_raise_r+0x42>
 801024e:	2316      	movs	r3, #22
 8010250:	6003      	str	r3, [r0, #0]
 8010252:	2001      	movs	r0, #1
 8010254:	e7e7      	b.n	8010226 <_raise_r+0x12>
 8010256:	2400      	movs	r4, #0
 8010258:	4628      	mov	r0, r5
 801025a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801025e:	4798      	blx	r3
 8010260:	2000      	movs	r0, #0
 8010262:	e7e0      	b.n	8010226 <_raise_r+0x12>

08010264 <raise>:
 8010264:	4b02      	ldr	r3, [pc, #8]	; (8010270 <raise+0xc>)
 8010266:	4601      	mov	r1, r0
 8010268:	6818      	ldr	r0, [r3, #0]
 801026a:	f7ff bfd3 	b.w	8010214 <_raise_r>
 801026e:	bf00      	nop
 8010270:	200001e0 	.word	0x200001e0

08010274 <_kill_r>:
 8010274:	b538      	push	{r3, r4, r5, lr}
 8010276:	2300      	movs	r3, #0
 8010278:	4d06      	ldr	r5, [pc, #24]	; (8010294 <_kill_r+0x20>)
 801027a:	4604      	mov	r4, r0
 801027c:	4608      	mov	r0, r1
 801027e:	4611      	mov	r1, r2
 8010280:	602b      	str	r3, [r5, #0]
 8010282:	f7f2 fffc 	bl	800327e <_kill>
 8010286:	1c43      	adds	r3, r0, #1
 8010288:	d102      	bne.n	8010290 <_kill_r+0x1c>
 801028a:	682b      	ldr	r3, [r5, #0]
 801028c:	b103      	cbz	r3, 8010290 <_kill_r+0x1c>
 801028e:	6023      	str	r3, [r4, #0]
 8010290:	bd38      	pop	{r3, r4, r5, pc}
 8010292:	bf00      	nop
 8010294:	200034c8 	.word	0x200034c8

08010298 <_getpid_r>:
 8010298:	f7f2 bfea 	b.w	8003270 <_getpid>

0801029c <_malloc_usable_size_r>:
 801029c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102a0:	1f18      	subs	r0, r3, #4
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	bfbc      	itt	lt
 80102a6:	580b      	ldrlt	r3, [r1, r0]
 80102a8:	18c0      	addlt	r0, r0, r3
 80102aa:	4770      	bx	lr

080102ac <__swhatbuf_r>:
 80102ac:	b570      	push	{r4, r5, r6, lr}
 80102ae:	460c      	mov	r4, r1
 80102b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102b4:	4615      	mov	r5, r2
 80102b6:	2900      	cmp	r1, #0
 80102b8:	461e      	mov	r6, r3
 80102ba:	b096      	sub	sp, #88	; 0x58
 80102bc:	da0c      	bge.n	80102d8 <__swhatbuf_r+0x2c>
 80102be:	89a3      	ldrh	r3, [r4, #12]
 80102c0:	2100      	movs	r1, #0
 80102c2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80102c6:	bf0c      	ite	eq
 80102c8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80102cc:	2340      	movne	r3, #64	; 0x40
 80102ce:	2000      	movs	r0, #0
 80102d0:	6031      	str	r1, [r6, #0]
 80102d2:	602b      	str	r3, [r5, #0]
 80102d4:	b016      	add	sp, #88	; 0x58
 80102d6:	bd70      	pop	{r4, r5, r6, pc}
 80102d8:	466a      	mov	r2, sp
 80102da:	f000 f849 	bl	8010370 <_fstat_r>
 80102de:	2800      	cmp	r0, #0
 80102e0:	dbed      	blt.n	80102be <__swhatbuf_r+0x12>
 80102e2:	9901      	ldr	r1, [sp, #4]
 80102e4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80102e8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80102ec:	4259      	negs	r1, r3
 80102ee:	4159      	adcs	r1, r3
 80102f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102f4:	e7eb      	b.n	80102ce <__swhatbuf_r+0x22>

080102f6 <__smakebuf_r>:
 80102f6:	898b      	ldrh	r3, [r1, #12]
 80102f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80102fa:	079d      	lsls	r5, r3, #30
 80102fc:	4606      	mov	r6, r0
 80102fe:	460c      	mov	r4, r1
 8010300:	d507      	bpl.n	8010312 <__smakebuf_r+0x1c>
 8010302:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010306:	6023      	str	r3, [r4, #0]
 8010308:	6123      	str	r3, [r4, #16]
 801030a:	2301      	movs	r3, #1
 801030c:	6163      	str	r3, [r4, #20]
 801030e:	b002      	add	sp, #8
 8010310:	bd70      	pop	{r4, r5, r6, pc}
 8010312:	466a      	mov	r2, sp
 8010314:	ab01      	add	r3, sp, #4
 8010316:	f7ff ffc9 	bl	80102ac <__swhatbuf_r>
 801031a:	9900      	ldr	r1, [sp, #0]
 801031c:	4605      	mov	r5, r0
 801031e:	4630      	mov	r0, r6
 8010320:	f7fa fb8c 	bl	800aa3c <_malloc_r>
 8010324:	b948      	cbnz	r0, 801033a <__smakebuf_r+0x44>
 8010326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801032a:	059a      	lsls	r2, r3, #22
 801032c:	d4ef      	bmi.n	801030e <__smakebuf_r+0x18>
 801032e:	f023 0303 	bic.w	r3, r3, #3
 8010332:	f043 0302 	orr.w	r3, r3, #2
 8010336:	81a3      	strh	r3, [r4, #12]
 8010338:	e7e3      	b.n	8010302 <__smakebuf_r+0xc>
 801033a:	89a3      	ldrh	r3, [r4, #12]
 801033c:	6020      	str	r0, [r4, #0]
 801033e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010342:	81a3      	strh	r3, [r4, #12]
 8010344:	9b00      	ldr	r3, [sp, #0]
 8010346:	6120      	str	r0, [r4, #16]
 8010348:	6163      	str	r3, [r4, #20]
 801034a:	9b01      	ldr	r3, [sp, #4]
 801034c:	b15b      	cbz	r3, 8010366 <__smakebuf_r+0x70>
 801034e:	4630      	mov	r0, r6
 8010350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010354:	f000 f81e 	bl	8010394 <_isatty_r>
 8010358:	b128      	cbz	r0, 8010366 <__smakebuf_r+0x70>
 801035a:	89a3      	ldrh	r3, [r4, #12]
 801035c:	f023 0303 	bic.w	r3, r3, #3
 8010360:	f043 0301 	orr.w	r3, r3, #1
 8010364:	81a3      	strh	r3, [r4, #12]
 8010366:	89a3      	ldrh	r3, [r4, #12]
 8010368:	431d      	orrs	r5, r3
 801036a:	81a5      	strh	r5, [r4, #12]
 801036c:	e7cf      	b.n	801030e <__smakebuf_r+0x18>
	...

08010370 <_fstat_r>:
 8010370:	b538      	push	{r3, r4, r5, lr}
 8010372:	2300      	movs	r3, #0
 8010374:	4d06      	ldr	r5, [pc, #24]	; (8010390 <_fstat_r+0x20>)
 8010376:	4604      	mov	r4, r0
 8010378:	4608      	mov	r0, r1
 801037a:	4611      	mov	r1, r2
 801037c:	602b      	str	r3, [r5, #0]
 801037e:	f7f2 ffdc 	bl	800333a <_fstat>
 8010382:	1c43      	adds	r3, r0, #1
 8010384:	d102      	bne.n	801038c <_fstat_r+0x1c>
 8010386:	682b      	ldr	r3, [r5, #0]
 8010388:	b103      	cbz	r3, 801038c <_fstat_r+0x1c>
 801038a:	6023      	str	r3, [r4, #0]
 801038c:	bd38      	pop	{r3, r4, r5, pc}
 801038e:	bf00      	nop
 8010390:	200034c8 	.word	0x200034c8

08010394 <_isatty_r>:
 8010394:	b538      	push	{r3, r4, r5, lr}
 8010396:	2300      	movs	r3, #0
 8010398:	4d05      	ldr	r5, [pc, #20]	; (80103b0 <_isatty_r+0x1c>)
 801039a:	4604      	mov	r4, r0
 801039c:	4608      	mov	r0, r1
 801039e:	602b      	str	r3, [r5, #0]
 80103a0:	f7f2 ffda 	bl	8003358 <_isatty>
 80103a4:	1c43      	adds	r3, r0, #1
 80103a6:	d102      	bne.n	80103ae <_isatty_r+0x1a>
 80103a8:	682b      	ldr	r3, [r5, #0]
 80103aa:	b103      	cbz	r3, 80103ae <_isatty_r+0x1a>
 80103ac:	6023      	str	r3, [r4, #0]
 80103ae:	bd38      	pop	{r3, r4, r5, pc}
 80103b0:	200034c8 	.word	0x200034c8

080103b4 <_init>:
 80103b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103b6:	bf00      	nop
 80103b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103ba:	bc08      	pop	{r3}
 80103bc:	469e      	mov	lr, r3
 80103be:	4770      	bx	lr

080103c0 <_fini>:
 80103c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103c2:	bf00      	nop
 80103c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103c6:	bc08      	pop	{r3}
 80103c8:	469e      	mov	lr, r3
 80103ca:	4770      	bx	lr
