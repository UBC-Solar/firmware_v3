
tel_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011bf4  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  08011de8  08011de8  00021de8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080125ac  080125ac  00030330  2**0
                  CONTENTS
  4 .ARM          00000000  080125ac  080125ac  00030330  2**0
                  CONTENTS
  5 .preinit_array 00000000  080125ac  080125ac  00030330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080125ac  080125ac  000225ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080125b0  080125b0  000225b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000330  20000000  080125b4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005860  20000330  080128e4  00030330  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005b90  080128e4  00035b90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030330  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030359  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021178  00000000  00000000  0003039c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005665  00000000  00000000  00051514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cb0  00000000  00000000  00056b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000162d  00000000  00000000  00058830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020601  00000000  00000000  00059e5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000257c7  00000000  00000000  0007a45e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae17b  00000000  00000000  0009fc25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000090dc  00000000  00000000  0014dda0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00156e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000330 	.word	0x20000330
 800020c:	00000000 	.word	0x00000000
 8000210:	08011dcc 	.word	0x08011dcc

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000334 	.word	0x20000334
 800022c:	08011dcc 	.word	0x08011dcc

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <strlen>:
 8000244:	4603      	mov	r3, r0
 8000246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800024a:	2a00      	cmp	r2, #0
 800024c:	d1fb      	bne.n	8000246 <strlen+0x2>
 800024e:	1a18      	subs	r0, r3, r0
 8000250:	3801      	subs	r0, #1
 8000252:	4770      	bx	lr

08000254 <__aeabi_drsub>:
 8000254:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000258:	e002      	b.n	8000260 <__adddf3>
 800025a:	bf00      	nop

0800025c <__aeabi_dsub>:
 800025c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000260 <__adddf3>:
 8000260:	b530      	push	{r4, r5, lr}
 8000262:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000266:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800026a:	ea94 0f05 	teq	r4, r5
 800026e:	bf08      	it	eq
 8000270:	ea90 0f02 	teqeq	r0, r2
 8000274:	bf1f      	itttt	ne
 8000276:	ea54 0c00 	orrsne.w	ip, r4, r0
 800027a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000282:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000286:	f000 80e2 	beq.w	800044e <__adddf3+0x1ee>
 800028a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000292:	bfb8      	it	lt
 8000294:	426d      	neglt	r5, r5
 8000296:	dd0c      	ble.n	80002b2 <__adddf3+0x52>
 8000298:	442c      	add	r4, r5
 800029a:	ea80 0202 	eor.w	r2, r0, r2
 800029e:	ea81 0303 	eor.w	r3, r1, r3
 80002a2:	ea82 0000 	eor.w	r0, r2, r0
 80002a6:	ea83 0101 	eor.w	r1, r3, r1
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	2d36      	cmp	r5, #54	; 0x36
 80002b4:	bf88      	it	hi
 80002b6:	bd30      	pophi	{r4, r5, pc}
 80002b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x70>
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002dc:	d002      	beq.n	80002e4 <__adddf3+0x84>
 80002de:	4252      	negs	r2, r2
 80002e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e4:	ea94 0f05 	teq	r4, r5
 80002e8:	f000 80a7 	beq.w	800043a <__adddf3+0x1da>
 80002ec:	f1a4 0401 	sub.w	r4, r4, #1
 80002f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f4:	db0d      	blt.n	8000312 <__adddf3+0xb2>
 80002f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002fa:	fa22 f205 	lsr.w	r2, r2, r5
 80002fe:	1880      	adds	r0, r0, r2
 8000300:	f141 0100 	adc.w	r1, r1, #0
 8000304:	fa03 f20e 	lsl.w	r2, r3, lr
 8000308:	1880      	adds	r0, r0, r2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	4159      	adcs	r1, r3
 8000310:	e00e      	b.n	8000330 <__adddf3+0xd0>
 8000312:	f1a5 0520 	sub.w	r5, r5, #32
 8000316:	f10e 0e20 	add.w	lr, lr, #32
 800031a:	2a01      	cmp	r2, #1
 800031c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000320:	bf28      	it	cs
 8000322:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	18c0      	adds	r0, r0, r3
 800032c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000330:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000334:	d507      	bpl.n	8000346 <__adddf3+0xe6>
 8000336:	f04f 0e00 	mov.w	lr, #0
 800033a:	f1dc 0c00 	rsbs	ip, ip, #0
 800033e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000342:	eb6e 0101 	sbc.w	r1, lr, r1
 8000346:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800034a:	d31b      	bcc.n	8000384 <__adddf3+0x124>
 800034c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000350:	d30c      	bcc.n	800036c <__adddf3+0x10c>
 8000352:	0849      	lsrs	r1, r1, #1
 8000354:	ea5f 0030 	movs.w	r0, r0, rrx
 8000358:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800035c:	f104 0401 	add.w	r4, r4, #1
 8000360:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000364:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000368:	f080 809a 	bcs.w	80004a0 <__adddf3+0x240>
 800036c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000370:	bf08      	it	eq
 8000372:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000376:	f150 0000 	adcs.w	r0, r0, #0
 800037a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037e:	ea41 0105 	orr.w	r1, r1, r5
 8000382:	bd30      	pop	{r4, r5, pc}
 8000384:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000388:	4140      	adcs	r0, r0
 800038a:	eb41 0101 	adc.w	r1, r1, r1
 800038e:	3c01      	subs	r4, #1
 8000390:	bf28      	it	cs
 8000392:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000396:	d2e9      	bcs.n	800036c <__adddf3+0x10c>
 8000398:	f091 0f00 	teq	r1, #0
 800039c:	bf04      	itt	eq
 800039e:	4601      	moveq	r1, r0
 80003a0:	2000      	moveq	r0, #0
 80003a2:	fab1 f381 	clz	r3, r1
 80003a6:	bf08      	it	eq
 80003a8:	3320      	addeq	r3, #32
 80003aa:	f1a3 030b 	sub.w	r3, r3, #11
 80003ae:	f1b3 0220 	subs.w	r2, r3, #32
 80003b2:	da0c      	bge.n	80003ce <__adddf3+0x16e>
 80003b4:	320c      	adds	r2, #12
 80003b6:	dd08      	ble.n	80003ca <__adddf3+0x16a>
 80003b8:	f102 0c14 	add.w	ip, r2, #20
 80003bc:	f1c2 020c 	rsb	r2, r2, #12
 80003c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c4:	fa21 f102 	lsr.w	r1, r1, r2
 80003c8:	e00c      	b.n	80003e4 <__adddf3+0x184>
 80003ca:	f102 0214 	add.w	r2, r2, #20
 80003ce:	bfd8      	it	le
 80003d0:	f1c2 0c20 	rsble	ip, r2, #32
 80003d4:	fa01 f102 	lsl.w	r1, r1, r2
 80003d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003dc:	bfdc      	itt	le
 80003de:	ea41 010c 	orrle.w	r1, r1, ip
 80003e2:	4090      	lslle	r0, r2
 80003e4:	1ae4      	subs	r4, r4, r3
 80003e6:	bfa2      	ittt	ge
 80003e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003ec:	4329      	orrge	r1, r5
 80003ee:	bd30      	popge	{r4, r5, pc}
 80003f0:	ea6f 0404 	mvn.w	r4, r4
 80003f4:	3c1f      	subs	r4, #31
 80003f6:	da1c      	bge.n	8000432 <__adddf3+0x1d2>
 80003f8:	340c      	adds	r4, #12
 80003fa:	dc0e      	bgt.n	800041a <__adddf3+0x1ba>
 80003fc:	f104 0414 	add.w	r4, r4, #20
 8000400:	f1c4 0220 	rsb	r2, r4, #32
 8000404:	fa20 f004 	lsr.w	r0, r0, r4
 8000408:	fa01 f302 	lsl.w	r3, r1, r2
 800040c:	ea40 0003 	orr.w	r0, r0, r3
 8000410:	fa21 f304 	lsr.w	r3, r1, r4
 8000414:	ea45 0103 	orr.w	r1, r5, r3
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	f1c4 040c 	rsb	r4, r4, #12
 800041e:	f1c4 0220 	rsb	r2, r4, #32
 8000422:	fa20 f002 	lsr.w	r0, r0, r2
 8000426:	fa01 f304 	lsl.w	r3, r1, r4
 800042a:	ea40 0003 	orr.w	r0, r0, r3
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	fa21 f004 	lsr.w	r0, r1, r4
 8000436:	4629      	mov	r1, r5
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	f094 0f00 	teq	r4, #0
 800043e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000442:	bf06      	itte	eq
 8000444:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000448:	3401      	addeq	r4, #1
 800044a:	3d01      	subne	r5, #1
 800044c:	e74e      	b.n	80002ec <__adddf3+0x8c>
 800044e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000452:	bf18      	it	ne
 8000454:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000458:	d029      	beq.n	80004ae <__adddf3+0x24e>
 800045a:	ea94 0f05 	teq	r4, r5
 800045e:	bf08      	it	eq
 8000460:	ea90 0f02 	teqeq	r0, r2
 8000464:	d005      	beq.n	8000472 <__adddf3+0x212>
 8000466:	ea54 0c00 	orrs.w	ip, r4, r0
 800046a:	bf04      	itt	eq
 800046c:	4619      	moveq	r1, r3
 800046e:	4610      	moveq	r0, r2
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea91 0f03 	teq	r1, r3
 8000476:	bf1e      	ittt	ne
 8000478:	2100      	movne	r1, #0
 800047a:	2000      	movne	r0, #0
 800047c:	bd30      	popne	{r4, r5, pc}
 800047e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000482:	d105      	bne.n	8000490 <__adddf3+0x230>
 8000484:	0040      	lsls	r0, r0, #1
 8000486:	4149      	adcs	r1, r1
 8000488:	bf28      	it	cs
 800048a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000494:	bf3c      	itt	cc
 8000496:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800049a:	bd30      	popcc	{r4, r5, pc}
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a8:	f04f 0000 	mov.w	r0, #0
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf1a      	itte	ne
 80004b4:	4619      	movne	r1, r3
 80004b6:	4610      	movne	r0, r2
 80004b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004bc:	bf1c      	itt	ne
 80004be:	460b      	movne	r3, r1
 80004c0:	4602      	movne	r2, r0
 80004c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c6:	bf06      	itte	eq
 80004c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004cc:	ea91 0f03 	teqeq	r1, r3
 80004d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	bf00      	nop

080004d8 <__aeabi_ui2d>:
 80004d8:	f090 0f00 	teq	r0, #0
 80004dc:	bf04      	itt	eq
 80004de:	2100      	moveq	r1, #0
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ec:	f04f 0500 	mov.w	r5, #0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e750      	b.n	8000398 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_i2d>:
 80004f8:	f090 0f00 	teq	r0, #0
 80004fc:	bf04      	itt	eq
 80004fe:	2100      	moveq	r1, #0
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000508:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000510:	bf48      	it	mi
 8000512:	4240      	negmi	r0, r0
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	e73e      	b.n	8000398 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_f2d>:
 800051c:	0042      	lsls	r2, r0, #1
 800051e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000522:	ea4f 0131 	mov.w	r1, r1, rrx
 8000526:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800052a:	bf1f      	itttt	ne
 800052c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000530:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000534:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000538:	4770      	bxne	lr
 800053a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053e:	bf08      	it	eq
 8000540:	4770      	bxeq	lr
 8000542:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000546:	bf04      	itt	eq
 8000548:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000554:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000558:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800055c:	e71c      	b.n	8000398 <__adddf3+0x138>
 800055e:	bf00      	nop

08000560 <__aeabi_ul2d>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	f04f 0500 	mov.w	r5, #0
 800056e:	e00a      	b.n	8000586 <__aeabi_l2d+0x16>

08000570 <__aeabi_l2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057e:	d502      	bpl.n	8000586 <__aeabi_l2d+0x16>
 8000580:	4240      	negs	r0, r0
 8000582:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000586:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000592:	f43f aed8 	beq.w	8000346 <__adddf3+0xe6>
 8000596:	f04f 0203 	mov.w	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a6:	bf18      	it	ne
 80005a8:	3203      	addne	r2, #3
 80005aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ae:	f1c2 0320 	rsb	r3, r2, #32
 80005b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80005be:	ea40 000e 	orr.w	r0, r0, lr
 80005c2:	fa21 f102 	lsr.w	r1, r1, r2
 80005c6:	4414      	add	r4, r2
 80005c8:	e6bd      	b.n	8000346 <__adddf3+0xe6>
 80005ca:	bf00      	nop

080005cc <__aeabi_dmul>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005da:	bf1d      	ittte	ne
 80005dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005e0:	ea94 0f0c 	teqne	r4, ip
 80005e4:	ea95 0f0c 	teqne	r5, ip
 80005e8:	f000 f8de 	bleq	80007a8 <__aeabi_dmul+0x1dc>
 80005ec:	442c      	add	r4, r5
 80005ee:	ea81 0603 	eor.w	r6, r1, r3
 80005f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fe:	bf18      	it	ne
 8000600:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000604:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800060c:	d038      	beq.n	8000680 <__aeabi_dmul+0xb4>
 800060e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000612:	f04f 0500 	mov.w	r5, #0
 8000616:	fbe1 e502 	umlal	lr, r5, r1, r2
 800061a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000622:	f04f 0600 	mov.w	r6, #0
 8000626:	fbe1 5603 	umlal	r5, r6, r1, r3
 800062a:	f09c 0f00 	teq	ip, #0
 800062e:	bf18      	it	ne
 8000630:	f04e 0e01 	orrne.w	lr, lr, #1
 8000634:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000638:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800063c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000640:	d204      	bcs.n	800064c <__aeabi_dmul+0x80>
 8000642:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000646:	416d      	adcs	r5, r5
 8000648:	eb46 0606 	adc.w	r6, r6, r6
 800064c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000650:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000654:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000658:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800065c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000660:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000664:	bf88      	it	hi
 8000666:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800066a:	d81e      	bhi.n	80006aa <__aeabi_dmul+0xde>
 800066c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000670:	bf08      	it	eq
 8000672:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000676:	f150 0000 	adcs.w	r0, r0, #0
 800067a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000684:	ea46 0101 	orr.w	r1, r6, r1
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	ea81 0103 	eor.w	r1, r1, r3
 8000690:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000694:	bfc2      	ittt	gt
 8000696:	ebd4 050c 	rsbsgt	r5, r4, ip
 800069a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069e:	bd70      	popgt	{r4, r5, r6, pc}
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f04f 0e00 	mov.w	lr, #0
 80006a8:	3c01      	subs	r4, #1
 80006aa:	f300 80ab 	bgt.w	8000804 <__aeabi_dmul+0x238>
 80006ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006b2:	bfde      	ittt	le
 80006b4:	2000      	movle	r0, #0
 80006b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ba:	bd70      	pople	{r4, r5, r6, pc}
 80006bc:	f1c4 0400 	rsb	r4, r4, #0
 80006c0:	3c20      	subs	r4, #32
 80006c2:	da35      	bge.n	8000730 <__aeabi_dmul+0x164>
 80006c4:	340c      	adds	r4, #12
 80006c6:	dc1b      	bgt.n	8000700 <__aeabi_dmul+0x134>
 80006c8:	f104 0414 	add.w	r4, r4, #20
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f305 	lsl.w	r3, r0, r5
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	fa21 f604 	lsr.w	r6, r1, r4
 80006f0:	eb42 0106 	adc.w	r1, r2, r6
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f1c4 040c 	rsb	r4, r4, #12
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f304 	lsl.w	r3, r0, r4
 800070c:	fa20 f005 	lsr.w	r0, r0, r5
 8000710:	fa01 f204 	lsl.w	r2, r1, r4
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	f141 0100 	adc.w	r1, r1, #0
 8000724:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000728:	bf08      	it	eq
 800072a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072e:	bd70      	pop	{r4, r5, r6, pc}
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f205 	lsl.w	r2, r0, r5
 8000738:	ea4e 0e02 	orr.w	lr, lr, r2
 800073c:	fa20 f304 	lsr.w	r3, r0, r4
 8000740:	fa01 f205 	lsl.w	r2, r1, r5
 8000744:	ea43 0302 	orr.w	r3, r3, r2
 8000748:	fa21 f004 	lsr.w	r0, r1, r4
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	fa21 f204 	lsr.w	r2, r1, r4
 8000754:	ea20 0002 	bic.w	r0, r0, r2
 8000758:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800075c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000760:	bf08      	it	eq
 8000762:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000766:	bd70      	pop	{r4, r5, r6, pc}
 8000768:	f094 0f00 	teq	r4, #0
 800076c:	d10f      	bne.n	800078e <__aeabi_dmul+0x1c2>
 800076e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000772:	0040      	lsls	r0, r0, #1
 8000774:	eb41 0101 	adc.w	r1, r1, r1
 8000778:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800077c:	bf08      	it	eq
 800077e:	3c01      	subeq	r4, #1
 8000780:	d0f7      	beq.n	8000772 <__aeabi_dmul+0x1a6>
 8000782:	ea41 0106 	orr.w	r1, r1, r6
 8000786:	f095 0f00 	teq	r5, #0
 800078a:	bf18      	it	ne
 800078c:	4770      	bxne	lr
 800078e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000792:	0052      	lsls	r2, r2, #1
 8000794:	eb43 0303 	adc.w	r3, r3, r3
 8000798:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800079c:	bf08      	it	eq
 800079e:	3d01      	subeq	r5, #1
 80007a0:	d0f7      	beq.n	8000792 <__aeabi_dmul+0x1c6>
 80007a2:	ea43 0306 	orr.w	r3, r3, r6
 80007a6:	4770      	bx	lr
 80007a8:	ea94 0f0c 	teq	r4, ip
 80007ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007b0:	bf18      	it	ne
 80007b2:	ea95 0f0c 	teqne	r5, ip
 80007b6:	d00c      	beq.n	80007d2 <__aeabi_dmul+0x206>
 80007b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007bc:	bf18      	it	ne
 80007be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c2:	d1d1      	bne.n	8000768 <__aeabi_dmul+0x19c>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d6:	bf06      	itte	eq
 80007d8:	4610      	moveq	r0, r2
 80007da:	4619      	moveq	r1, r3
 80007dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e0:	d019      	beq.n	8000816 <__aeabi_dmul+0x24a>
 80007e2:	ea94 0f0c 	teq	r4, ip
 80007e6:	d102      	bne.n	80007ee <__aeabi_dmul+0x222>
 80007e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007ec:	d113      	bne.n	8000816 <__aeabi_dmul+0x24a>
 80007ee:	ea95 0f0c 	teq	r5, ip
 80007f2:	d105      	bne.n	8000800 <__aeabi_dmul+0x234>
 80007f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f8:	bf1c      	itt	ne
 80007fa:	4610      	movne	r0, r2
 80007fc:	4619      	movne	r1, r3
 80007fe:	d10a      	bne.n	8000816 <__aeabi_dmul+0x24a>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081e:	bd70      	pop	{r4, r5, r6, pc}

08000820 <__aeabi_ddiv>:
 8000820:	b570      	push	{r4, r5, r6, lr}
 8000822:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000826:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800082a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082e:	bf1d      	ittte	ne
 8000830:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000834:	ea94 0f0c 	teqne	r4, ip
 8000838:	ea95 0f0c 	teqne	r5, ip
 800083c:	f000 f8a7 	bleq	800098e <__aeabi_ddiv+0x16e>
 8000840:	eba4 0405 	sub.w	r4, r4, r5
 8000844:	ea81 0e03 	eor.w	lr, r1, r3
 8000848:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800084c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000850:	f000 8088 	beq.w	8000964 <__aeabi_ddiv+0x144>
 8000854:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000858:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800085c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000860:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000864:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000868:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800086c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000870:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000874:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000878:	429d      	cmp	r5, r3
 800087a:	bf08      	it	eq
 800087c:	4296      	cmpeq	r6, r2
 800087e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000882:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000886:	d202      	bcs.n	800088e <__aeabi_ddiv+0x6e>
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	1ab6      	subs	r6, r6, r2
 8000890:	eb65 0503 	sbc.w	r5, r5, r3
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008aa:	bf22      	ittt	cs
 80008ac:	1ab6      	subcs	r6, r6, r2
 80008ae:	4675      	movcs	r5, lr
 80008b0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80008be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c2:	bf22      	ittt	cs
 80008c4:	1ab6      	subcs	r6, r6, r2
 80008c6:	4675      	movcs	r5, lr
 80008c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008da:	bf22      	ittt	cs
 80008dc:	1ab6      	subcs	r6, r6, r2
 80008de:	4675      	movcs	r5, lr
 80008e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f2:	bf22      	ittt	cs
 80008f4:	1ab6      	subcs	r6, r6, r2
 80008f6:	4675      	movcs	r5, lr
 80008f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008fc:	ea55 0e06 	orrs.w	lr, r5, r6
 8000900:	d018      	beq.n	8000934 <__aeabi_ddiv+0x114>
 8000902:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000906:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800090a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000912:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000916:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800091a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091e:	d1c0      	bne.n	80008a2 <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	d10b      	bne.n	800093e <__aeabi_ddiv+0x11e>
 8000926:	ea41 0100 	orr.w	r1, r1, r0
 800092a:	f04f 0000 	mov.w	r0, #0
 800092e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000932:	e7b6      	b.n	80008a2 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	bf04      	itt	eq
 800093a:	4301      	orreq	r1, r0
 800093c:	2000      	moveq	r0, #0
 800093e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000942:	bf88      	it	hi
 8000944:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000948:	f63f aeaf 	bhi.w	80006aa <__aeabi_dmul+0xde>
 800094c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000950:	bf04      	itt	eq
 8000952:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000956:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800095a:	f150 0000 	adcs.w	r0, r0, #0
 800095e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000962:	bd70      	pop	{r4, r5, r6, pc}
 8000964:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000968:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800096c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000970:	bfc2      	ittt	gt
 8000972:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000976:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800097a:	bd70      	popgt	{r4, r5, r6, pc}
 800097c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000980:	f04f 0e00 	mov.w	lr, #0
 8000984:	3c01      	subs	r4, #1
 8000986:	e690      	b.n	80006aa <__aeabi_dmul+0xde>
 8000988:	ea45 0e06 	orr.w	lr, r5, r6
 800098c:	e68d      	b.n	80006aa <__aeabi_dmul+0xde>
 800098e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000992:	ea94 0f0c 	teq	r4, ip
 8000996:	bf08      	it	eq
 8000998:	ea95 0f0c 	teqeq	r5, ip
 800099c:	f43f af3b 	beq.w	8000816 <__aeabi_dmul+0x24a>
 80009a0:	ea94 0f0c 	teq	r4, ip
 80009a4:	d10a      	bne.n	80009bc <__aeabi_ddiv+0x19c>
 80009a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009aa:	f47f af34 	bne.w	8000816 <__aeabi_dmul+0x24a>
 80009ae:	ea95 0f0c 	teq	r5, ip
 80009b2:	f47f af25 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e72c      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009bc:	ea95 0f0c 	teq	r5, ip
 80009c0:	d106      	bne.n	80009d0 <__aeabi_ddiv+0x1b0>
 80009c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c6:	f43f aefd 	beq.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e722      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d4:	bf18      	it	ne
 80009d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009da:	f47f aec5 	bne.w	8000768 <__aeabi_dmul+0x19c>
 80009de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009e2:	f47f af0d 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ea:	f47f aeeb 	bne.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ee:	e712      	b.n	8000816 <__aeabi_dmul+0x24a>

080009f0 <__gedf2>:
 80009f0:	f04f 3cff 	mov.w	ip, #4294967295
 80009f4:	e006      	b.n	8000a04 <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__ledf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	e002      	b.n	8000a04 <__cmpdf2+0x4>
 80009fe:	bf00      	nop

08000a00 <__cmpdf2>:
 8000a00:	f04f 0c01 	mov.w	ip, #1
 8000a04:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a1a:	d01b      	beq.n	8000a54 <__cmpdf2+0x54>
 8000a1c:	b001      	add	sp, #4
 8000a1e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a22:	bf0c      	ite	eq
 8000a24:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a28:	ea91 0f03 	teqne	r1, r3
 8000a2c:	bf02      	ittt	eq
 8000a2e:	ea90 0f02 	teqeq	r0, r2
 8000a32:	2000      	moveq	r0, #0
 8000a34:	4770      	bxeq	lr
 8000a36:	f110 0f00 	cmn.w	r0, #0
 8000a3a:	ea91 0f03 	teq	r1, r3
 8000a3e:	bf58      	it	pl
 8000a40:	4299      	cmppl	r1, r3
 8000a42:	bf08      	it	eq
 8000a44:	4290      	cmpeq	r0, r2
 8000a46:	bf2c      	ite	cs
 8000a48:	17d8      	asrcs	r0, r3, #31
 8000a4a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4e:	f040 0001 	orr.w	r0, r0, #1
 8000a52:	4770      	bx	lr
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	d102      	bne.n	8000a64 <__cmpdf2+0x64>
 8000a5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a62:	d107      	bne.n	8000a74 <__cmpdf2+0x74>
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d1d6      	bne.n	8000a1c <__cmpdf2+0x1c>
 8000a6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a72:	d0d3      	beq.n	8000a1c <__cmpdf2+0x1c>
 8000a74:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_cdrcmple>:
 8000a7c:	4684      	mov	ip, r0
 8000a7e:	4610      	mov	r0, r2
 8000a80:	4662      	mov	r2, ip
 8000a82:	468c      	mov	ip, r1
 8000a84:	4619      	mov	r1, r3
 8000a86:	4663      	mov	r3, ip
 8000a88:	e000      	b.n	8000a8c <__aeabi_cdcmpeq>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdcmpeq>:
 8000a8c:	b501      	push	{r0, lr}
 8000a8e:	f7ff ffb7 	bl	8000a00 <__cmpdf2>
 8000a92:	2800      	cmp	r0, #0
 8000a94:	bf48      	it	mi
 8000a96:	f110 0f00 	cmnmi.w	r0, #0
 8000a9a:	bd01      	pop	{r0, pc}

08000a9c <__aeabi_dcmpeq>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff fff4 	bl	8000a8c <__aeabi_cdcmpeq>
 8000aa4:	bf0c      	ite	eq
 8000aa6:	2001      	moveq	r0, #1
 8000aa8:	2000      	movne	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmplt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffea 	bl	8000a8c <__aeabi_cdcmpeq>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmple>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffe0 	bl	8000a8c <__aeabi_cdcmpeq>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpge>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffce 	bl	8000a7c <__aeabi_cdrcmple>
 8000ae0:	bf94      	ite	ls
 8000ae2:	2001      	movls	r0, #1
 8000ae4:	2000      	movhi	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpgt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffc4 	bl	8000a7c <__aeabi_cdrcmple>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmpun>:
 8000b00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d102      	bne.n	8000b10 <__aeabi_dcmpun+0x10>
 8000b0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0e:	d10a      	bne.n	8000b26 <__aeabi_dcmpun+0x26>
 8000b10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x20>
 8000b1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_dcmpun+0x26>
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0001 	mov.w	r0, #1
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_frsub>:
 8000c5c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c60:	e002      	b.n	8000c68 <__addsf3>
 8000c62:	bf00      	nop

08000c64 <__aeabi_fsub>:
 8000c64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c68 <__addsf3>:
 8000c68:	0042      	lsls	r2, r0, #1
 8000c6a:	bf1f      	itttt	ne
 8000c6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c70:	ea92 0f03 	teqne	r2, r3
 8000c74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7c:	d06a      	beq.n	8000d54 <__addsf3+0xec>
 8000c7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c86:	bfc1      	itttt	gt
 8000c88:	18d2      	addgt	r2, r2, r3
 8000c8a:	4041      	eorgt	r1, r0
 8000c8c:	4048      	eorgt	r0, r1
 8000c8e:	4041      	eorgt	r1, r0
 8000c90:	bfb8      	it	lt
 8000c92:	425b      	neglt	r3, r3
 8000c94:	2b19      	cmp	r3, #25
 8000c96:	bf88      	it	hi
 8000c98:	4770      	bxhi	lr
 8000c9a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ca6:	bf18      	it	ne
 8000ca8:	4240      	negne	r0, r0
 8000caa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cb2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cb6:	bf18      	it	ne
 8000cb8:	4249      	negne	r1, r1
 8000cba:	ea92 0f03 	teq	r2, r3
 8000cbe:	d03f      	beq.n	8000d40 <__addsf3+0xd8>
 8000cc0:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc4:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc8:	eb10 000c 	adds.w	r0, r0, ip
 8000ccc:	f1c3 0320 	rsb	r3, r3, #32
 8000cd0:	fa01 f103 	lsl.w	r1, r1, r3
 8000cd4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__addsf3+0x78>
 8000cda:	4249      	negs	r1, r1
 8000cdc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ce0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ce4:	d313      	bcc.n	8000d0e <__addsf3+0xa6>
 8000ce6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cea:	d306      	bcc.n	8000cfa <__addsf3+0x92>
 8000cec:	0840      	lsrs	r0, r0, #1
 8000cee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cf2:	f102 0201 	add.w	r2, r2, #1
 8000cf6:	2afe      	cmp	r2, #254	; 0xfe
 8000cf8:	d251      	bcs.n	8000d9e <__addsf3+0x136>
 8000cfa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	ea40 0003 	orr.w	r0, r0, r3
 8000d0c:	4770      	bx	lr
 8000d0e:	0049      	lsls	r1, r1, #1
 8000d10:	eb40 0000 	adc.w	r0, r0, r0
 8000d14:	3a01      	subs	r2, #1
 8000d16:	bf28      	it	cs
 8000d18:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d1c:	d2ed      	bcs.n	8000cfa <__addsf3+0x92>
 8000d1e:	fab0 fc80 	clz	ip, r0
 8000d22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d26:	ebb2 020c 	subs.w	r2, r2, ip
 8000d2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d2e:	bfaa      	itet	ge
 8000d30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d34:	4252      	neglt	r2, r2
 8000d36:	4318      	orrge	r0, r3
 8000d38:	bfbc      	itt	lt
 8000d3a:	40d0      	lsrlt	r0, r2
 8000d3c:	4318      	orrlt	r0, r3
 8000d3e:	4770      	bx	lr
 8000d40:	f092 0f00 	teq	r2, #0
 8000d44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d48:	bf06      	itte	eq
 8000d4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d4e:	3201      	addeq	r2, #1
 8000d50:	3b01      	subne	r3, #1
 8000d52:	e7b5      	b.n	8000cc0 <__addsf3+0x58>
 8000d54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d5c:	bf18      	it	ne
 8000d5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d62:	d021      	beq.n	8000da8 <__addsf3+0x140>
 8000d64:	ea92 0f03 	teq	r2, r3
 8000d68:	d004      	beq.n	8000d74 <__addsf3+0x10c>
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	bf08      	it	eq
 8000d70:	4608      	moveq	r0, r1
 8000d72:	4770      	bx	lr
 8000d74:	ea90 0f01 	teq	r0, r1
 8000d78:	bf1c      	itt	ne
 8000d7a:	2000      	movne	r0, #0
 8000d7c:	4770      	bxne	lr
 8000d7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d82:	d104      	bne.n	8000d8e <__addsf3+0x126>
 8000d84:	0040      	lsls	r0, r0, #1
 8000d86:	bf28      	it	cs
 8000d88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d8c:	4770      	bx	lr
 8000d8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d92:	bf3c      	itt	cc
 8000d94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d98:	4770      	bxcc	lr
 8000d9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000da2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da6:	4770      	bx	lr
 8000da8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dac:	bf16      	itet	ne
 8000dae:	4608      	movne	r0, r1
 8000db0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000db4:	4601      	movne	r1, r0
 8000db6:	0242      	lsls	r2, r0, #9
 8000db8:	bf06      	itte	eq
 8000dba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dbe:	ea90 0f01 	teqeq	r0, r1
 8000dc2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dc6:	4770      	bx	lr

08000dc8 <__aeabi_ui2f>:
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	e004      	b.n	8000dd8 <__aeabi_i2f+0x8>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_i2f>:
 8000dd0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dd4:	bf48      	it	mi
 8000dd6:	4240      	negmi	r0, r0
 8000dd8:	ea5f 0c00 	movs.w	ip, r0
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000de4:	4601      	mov	r1, r0
 8000de6:	f04f 0000 	mov.w	r0, #0
 8000dea:	e01c      	b.n	8000e26 <__aeabi_l2f+0x2a>

08000dec <__aeabi_ul2f>:
 8000dec:	ea50 0201 	orrs.w	r2, r0, r1
 8000df0:	bf08      	it	eq
 8000df2:	4770      	bxeq	lr
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e00a      	b.n	8000e10 <__aeabi_l2f+0x14>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_l2f>:
 8000dfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000e00:	bf08      	it	eq
 8000e02:	4770      	bxeq	lr
 8000e04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e08:	d502      	bpl.n	8000e10 <__aeabi_l2f+0x14>
 8000e0a:	4240      	negs	r0, r0
 8000e0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e10:	ea5f 0c01 	movs.w	ip, r1
 8000e14:	bf02      	ittt	eq
 8000e16:	4684      	moveq	ip, r0
 8000e18:	4601      	moveq	r1, r0
 8000e1a:	2000      	moveq	r0, #0
 8000e1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e20:	bf08      	it	eq
 8000e22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e2a:	fabc f28c 	clz	r2, ip
 8000e2e:	3a08      	subs	r2, #8
 8000e30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e34:	db10      	blt.n	8000e58 <__aeabi_l2f+0x5c>
 8000e36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e40:	f1c2 0220 	rsb	r2, r2, #32
 8000e44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e48:	fa20 f202 	lsr.w	r2, r0, r2
 8000e4c:	eb43 0002 	adc.w	r0, r3, r2
 8000e50:	bf08      	it	eq
 8000e52:	f020 0001 	biceq.w	r0, r0, #1
 8000e56:	4770      	bx	lr
 8000e58:	f102 0220 	add.w	r2, r2, #32
 8000e5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e60:	f1c2 0220 	rsb	r2, r2, #32
 8000e64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e68:	fa21 f202 	lsr.w	r2, r1, r2
 8000e6c:	eb43 0002 	adc.w	r0, r3, r2
 8000e70:	bf08      	it	eq
 8000e72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e76:	4770      	bx	lr

08000e78 <__aeabi_fmul>:
 8000e78:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e80:	bf1e      	ittt	ne
 8000e82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e86:	ea92 0f0c 	teqne	r2, ip
 8000e8a:	ea93 0f0c 	teqne	r3, ip
 8000e8e:	d06f      	beq.n	8000f70 <__aeabi_fmul+0xf8>
 8000e90:	441a      	add	r2, r3
 8000e92:	ea80 0c01 	eor.w	ip, r0, r1
 8000e96:	0240      	lsls	r0, r0, #9
 8000e98:	bf18      	it	ne
 8000e9a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e9e:	d01e      	beq.n	8000ede <__aeabi_fmul+0x66>
 8000ea0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ea4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ea8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000eac:	fba0 3101 	umull	r3, r1, r0, r1
 8000eb0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000eb4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000eb8:	bf3e      	ittt	cc
 8000eba:	0049      	lslcc	r1, r1, #1
 8000ebc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ec0:	005b      	lslcc	r3, r3, #1
 8000ec2:	ea40 0001 	orr.w	r0, r0, r1
 8000ec6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eca:	2afd      	cmp	r2, #253	; 0xfd
 8000ecc:	d81d      	bhi.n	8000f0a <__aeabi_fmul+0x92>
 8000ece:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ed2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ed6:	bf08      	it	eq
 8000ed8:	f020 0001 	biceq.w	r0, r0, #1
 8000edc:	4770      	bx	lr
 8000ede:	f090 0f00 	teq	r0, #0
 8000ee2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee6:	bf08      	it	eq
 8000ee8:	0249      	lsleq	r1, r1, #9
 8000eea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ef2:	3a7f      	subs	r2, #127	; 0x7f
 8000ef4:	bfc2      	ittt	gt
 8000ef6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000efa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000efe:	4770      	bxgt	lr
 8000f00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f04:	f04f 0300 	mov.w	r3, #0
 8000f08:	3a01      	subs	r2, #1
 8000f0a:	dc5d      	bgt.n	8000fc8 <__aeabi_fmul+0x150>
 8000f0c:	f112 0f19 	cmn.w	r2, #25
 8000f10:	bfdc      	itt	le
 8000f12:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000f16:	4770      	bxle	lr
 8000f18:	f1c2 0200 	rsb	r2, r2, #0
 8000f1c:	0041      	lsls	r1, r0, #1
 8000f1e:	fa21 f102 	lsr.w	r1, r1, r2
 8000f22:	f1c2 0220 	rsb	r2, r2, #32
 8000f26:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f2a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f2e:	f140 0000 	adc.w	r0, r0, #0
 8000f32:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f36:	bf08      	it	eq
 8000f38:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f3c:	4770      	bx	lr
 8000f3e:	f092 0f00 	teq	r2, #0
 8000f42:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f46:	bf02      	ittt	eq
 8000f48:	0040      	lsleq	r0, r0, #1
 8000f4a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f4e:	3a01      	subeq	r2, #1
 8000f50:	d0f9      	beq.n	8000f46 <__aeabi_fmul+0xce>
 8000f52:	ea40 000c 	orr.w	r0, r0, ip
 8000f56:	f093 0f00 	teq	r3, #0
 8000f5a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0049      	lsleq	r1, r1, #1
 8000f62:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f66:	3b01      	subeq	r3, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fmul+0xe6>
 8000f6a:	ea41 010c 	orr.w	r1, r1, ip
 8000f6e:	e78f      	b.n	8000e90 <__aeabi_fmul+0x18>
 8000f70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f74:	ea92 0f0c 	teq	r2, ip
 8000f78:	bf18      	it	ne
 8000f7a:	ea93 0f0c 	teqne	r3, ip
 8000f7e:	d00a      	beq.n	8000f96 <__aeabi_fmul+0x11e>
 8000f80:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f84:	bf18      	it	ne
 8000f86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f8a:	d1d8      	bne.n	8000f3e <__aeabi_fmul+0xc6>
 8000f8c:	ea80 0001 	eor.w	r0, r0, r1
 8000f90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f94:	4770      	bx	lr
 8000f96:	f090 0f00 	teq	r0, #0
 8000f9a:	bf17      	itett	ne
 8000f9c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000fa0:	4608      	moveq	r0, r1
 8000fa2:	f091 0f00 	teqne	r1, #0
 8000fa6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000faa:	d014      	beq.n	8000fd6 <__aeabi_fmul+0x15e>
 8000fac:	ea92 0f0c 	teq	r2, ip
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_fmul+0x13e>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	d10f      	bne.n	8000fd6 <__aeabi_fmul+0x15e>
 8000fb6:	ea93 0f0c 	teq	r3, ip
 8000fba:	d103      	bne.n	8000fc4 <__aeabi_fmul+0x14c>
 8000fbc:	024b      	lsls	r3, r1, #9
 8000fbe:	bf18      	it	ne
 8000fc0:	4608      	movne	r0, r1
 8000fc2:	d108      	bne.n	8000fd6 <__aeabi_fmul+0x15e>
 8000fc4:	ea80 0001 	eor.w	r0, r0, r1
 8000fc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd4:	4770      	bx	lr
 8000fd6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fda:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fde:	4770      	bx	lr

08000fe0 <__aeabi_fdiv>:
 8000fe0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fe4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fe8:	bf1e      	ittt	ne
 8000fea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fee:	ea92 0f0c 	teqne	r2, ip
 8000ff2:	ea93 0f0c 	teqne	r3, ip
 8000ff6:	d069      	beq.n	80010cc <__aeabi_fdiv+0xec>
 8000ff8:	eba2 0203 	sub.w	r2, r2, r3
 8000ffc:	ea80 0c01 	eor.w	ip, r0, r1
 8001000:	0249      	lsls	r1, r1, #9
 8001002:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8001006:	d037      	beq.n	8001078 <__aeabi_fdiv+0x98>
 8001008:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800100c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8001010:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001014:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001018:	428b      	cmp	r3, r1
 800101a:	bf38      	it	cc
 800101c:	005b      	lslcc	r3, r3, #1
 800101e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001022:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8001026:	428b      	cmp	r3, r1
 8001028:	bf24      	itt	cs
 800102a:	1a5b      	subcs	r3, r3, r1
 800102c:	ea40 000c 	orrcs.w	r0, r0, ip
 8001030:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001034:	bf24      	itt	cs
 8001036:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800103a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800103e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001042:	bf24      	itt	cs
 8001044:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001048:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800104c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001050:	bf24      	itt	cs
 8001052:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001056:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	bf18      	it	ne
 800105e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001062:	d1e0      	bne.n	8001026 <__aeabi_fdiv+0x46>
 8001064:	2afd      	cmp	r2, #253	; 0xfd
 8001066:	f63f af50 	bhi.w	8000f0a <__aeabi_fmul+0x92>
 800106a:	428b      	cmp	r3, r1
 800106c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001070:	bf08      	it	eq
 8001072:	f020 0001 	biceq.w	r0, r0, #1
 8001076:	4770      	bx	lr
 8001078:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800107c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001080:	327f      	adds	r2, #127	; 0x7f
 8001082:	bfc2      	ittt	gt
 8001084:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001088:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800108c:	4770      	bxgt	lr
 800108e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	3a01      	subs	r2, #1
 8001098:	e737      	b.n	8000f0a <__aeabi_fmul+0x92>
 800109a:	f092 0f00 	teq	r2, #0
 800109e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80010a2:	bf02      	ittt	eq
 80010a4:	0040      	lsleq	r0, r0, #1
 80010a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80010aa:	3a01      	subeq	r2, #1
 80010ac:	d0f9      	beq.n	80010a2 <__aeabi_fdiv+0xc2>
 80010ae:	ea40 000c 	orr.w	r0, r0, ip
 80010b2:	f093 0f00 	teq	r3, #0
 80010b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80010ba:	bf02      	ittt	eq
 80010bc:	0049      	lsleq	r1, r1, #1
 80010be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010c2:	3b01      	subeq	r3, #1
 80010c4:	d0f9      	beq.n	80010ba <__aeabi_fdiv+0xda>
 80010c6:	ea41 010c 	orr.w	r1, r1, ip
 80010ca:	e795      	b.n	8000ff8 <__aeabi_fdiv+0x18>
 80010cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010d0:	ea92 0f0c 	teq	r2, ip
 80010d4:	d108      	bne.n	80010e8 <__aeabi_fdiv+0x108>
 80010d6:	0242      	lsls	r2, r0, #9
 80010d8:	f47f af7d 	bne.w	8000fd6 <__aeabi_fmul+0x15e>
 80010dc:	ea93 0f0c 	teq	r3, ip
 80010e0:	f47f af70 	bne.w	8000fc4 <__aeabi_fmul+0x14c>
 80010e4:	4608      	mov	r0, r1
 80010e6:	e776      	b.n	8000fd6 <__aeabi_fmul+0x15e>
 80010e8:	ea93 0f0c 	teq	r3, ip
 80010ec:	d104      	bne.n	80010f8 <__aeabi_fdiv+0x118>
 80010ee:	024b      	lsls	r3, r1, #9
 80010f0:	f43f af4c 	beq.w	8000f8c <__aeabi_fmul+0x114>
 80010f4:	4608      	mov	r0, r1
 80010f6:	e76e      	b.n	8000fd6 <__aeabi_fmul+0x15e>
 80010f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010fc:	bf18      	it	ne
 80010fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001102:	d1ca      	bne.n	800109a <__aeabi_fdiv+0xba>
 8001104:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001108:	f47f af5c 	bne.w	8000fc4 <__aeabi_fmul+0x14c>
 800110c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001110:	f47f af3c 	bne.w	8000f8c <__aeabi_fmul+0x114>
 8001114:	e75f      	b.n	8000fd6 <__aeabi_fmul+0x15e>
 8001116:	bf00      	nop

08001118 <__gesf2>:
 8001118:	f04f 3cff 	mov.w	ip, #4294967295
 800111c:	e006      	b.n	800112c <__cmpsf2+0x4>
 800111e:	bf00      	nop

08001120 <__lesf2>:
 8001120:	f04f 0c01 	mov.w	ip, #1
 8001124:	e002      	b.n	800112c <__cmpsf2+0x4>
 8001126:	bf00      	nop

08001128 <__cmpsf2>:
 8001128:	f04f 0c01 	mov.w	ip, #1
 800112c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001130:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001134:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001138:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800113c:	bf18      	it	ne
 800113e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001142:	d011      	beq.n	8001168 <__cmpsf2+0x40>
 8001144:	b001      	add	sp, #4
 8001146:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800114a:	bf18      	it	ne
 800114c:	ea90 0f01 	teqne	r0, r1
 8001150:	bf58      	it	pl
 8001152:	ebb2 0003 	subspl.w	r0, r2, r3
 8001156:	bf88      	it	hi
 8001158:	17c8      	asrhi	r0, r1, #31
 800115a:	bf38      	it	cc
 800115c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001160:	bf18      	it	ne
 8001162:	f040 0001 	orrne.w	r0, r0, #1
 8001166:	4770      	bx	lr
 8001168:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800116c:	d102      	bne.n	8001174 <__cmpsf2+0x4c>
 800116e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001172:	d105      	bne.n	8001180 <__cmpsf2+0x58>
 8001174:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001178:	d1e4      	bne.n	8001144 <__cmpsf2+0x1c>
 800117a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800117e:	d0e1      	beq.n	8001144 <__cmpsf2+0x1c>
 8001180:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <__aeabi_cfrcmple>:
 8001188:	4684      	mov	ip, r0
 800118a:	4608      	mov	r0, r1
 800118c:	4661      	mov	r1, ip
 800118e:	e7ff      	b.n	8001190 <__aeabi_cfcmpeq>

08001190 <__aeabi_cfcmpeq>:
 8001190:	b50f      	push	{r0, r1, r2, r3, lr}
 8001192:	f7ff ffc9 	bl	8001128 <__cmpsf2>
 8001196:	2800      	cmp	r0, #0
 8001198:	bf48      	it	mi
 800119a:	f110 0f00 	cmnmi.w	r0, #0
 800119e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080011a0 <__aeabi_fcmpeq>:
 80011a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011a4:	f7ff fff4 	bl	8001190 <__aeabi_cfcmpeq>
 80011a8:	bf0c      	ite	eq
 80011aa:	2001      	moveq	r0, #1
 80011ac:	2000      	movne	r0, #0
 80011ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80011b2:	bf00      	nop

080011b4 <__aeabi_fcmplt>:
 80011b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b8:	f7ff ffea 	bl	8001190 <__aeabi_cfcmpeq>
 80011bc:	bf34      	ite	cc
 80011be:	2001      	movcc	r0, #1
 80011c0:	2000      	movcs	r0, #0
 80011c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011c6:	bf00      	nop

080011c8 <__aeabi_fcmple>:
 80011c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011cc:	f7ff ffe0 	bl	8001190 <__aeabi_cfcmpeq>
 80011d0:	bf94      	ite	ls
 80011d2:	2001      	movls	r0, #1
 80011d4:	2000      	movhi	r0, #0
 80011d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011da:	bf00      	nop

080011dc <__aeabi_fcmpge>:
 80011dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011e0:	f7ff ffd2 	bl	8001188 <__aeabi_cfrcmple>
 80011e4:	bf94      	ite	ls
 80011e6:	2001      	movls	r0, #1
 80011e8:	2000      	movhi	r0, #0
 80011ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ee:	bf00      	nop

080011f0 <__aeabi_fcmpgt>:
 80011f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011f4:	f7ff ffc8 	bl	8001188 <__aeabi_cfrcmple>
 80011f8:	bf34      	ite	cc
 80011fa:	2001      	movcc	r0, #1
 80011fc:	2000      	movcs	r0, #0
 80011fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001202:	bf00      	nop

08001204 <__aeabi_fcmpun>:
 8001204:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001208:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800120c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001210:	d102      	bne.n	8001218 <__aeabi_fcmpun+0x14>
 8001212:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001216:	d108      	bne.n	800122a <__aeabi_fcmpun+0x26>
 8001218:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800121c:	d102      	bne.n	8001224 <__aeabi_fcmpun+0x20>
 800121e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001222:	d102      	bne.n	800122a <__aeabi_fcmpun+0x26>
 8001224:	f04f 0000 	mov.w	r0, #0
 8001228:	4770      	bx	lr
 800122a:	f04f 0001 	mov.w	r0, #1
 800122e:	4770      	bx	lr

08001230 <__aeabi_d2lz>:
 8001230:	b538      	push	{r3, r4, r5, lr}
 8001232:	4605      	mov	r5, r0
 8001234:	460c      	mov	r4, r1
 8001236:	2200      	movs	r2, #0
 8001238:	2300      	movs	r3, #0
 800123a:	4628      	mov	r0, r5
 800123c:	4621      	mov	r1, r4
 800123e:	f7ff fc37 	bl	8000ab0 <__aeabi_dcmplt>
 8001242:	b928      	cbnz	r0, 8001250 <__aeabi_d2lz+0x20>
 8001244:	4628      	mov	r0, r5
 8001246:	4621      	mov	r1, r4
 8001248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800124c:	f000 b80a 	b.w	8001264 <__aeabi_d2ulz>
 8001250:	4628      	mov	r0, r5
 8001252:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001256:	f000 f805 	bl	8001264 <__aeabi_d2ulz>
 800125a:	4240      	negs	r0, r0
 800125c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001260:	bd38      	pop	{r3, r4, r5, pc}
 8001262:	bf00      	nop

08001264 <__aeabi_d2ulz>:
 8001264:	b5d0      	push	{r4, r6, r7, lr}
 8001266:	2200      	movs	r2, #0
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <__aeabi_d2ulz+0x34>)
 800126a:	4606      	mov	r6, r0
 800126c:	460f      	mov	r7, r1
 800126e:	f7ff f9ad 	bl	80005cc <__aeabi_dmul>
 8001272:	f7ff fc83 	bl	8000b7c <__aeabi_d2uiz>
 8001276:	4604      	mov	r4, r0
 8001278:	f7ff f92e 	bl	80004d8 <__aeabi_ui2d>
 800127c:	2200      	movs	r2, #0
 800127e:	4b07      	ldr	r3, [pc, #28]	; (800129c <__aeabi_d2ulz+0x38>)
 8001280:	f7ff f9a4 	bl	80005cc <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4630      	mov	r0, r6
 800128a:	4639      	mov	r1, r7
 800128c:	f7fe ffe6 	bl	800025c <__aeabi_dsub>
 8001290:	f7ff fc74 	bl	8000b7c <__aeabi_d2uiz>
 8001294:	4621      	mov	r1, r4
 8001296:	bdd0      	pop	{r4, r6, r7, pc}
 8001298:	3df00000 	.word	0x3df00000
 800129c:	41f00000 	.word	0x41f00000

080012a0 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80012a4:	4b17      	ldr	r3, [pc, #92]	; (8001304 <MX_CAN_Init+0x64>)
 80012a6:	4a18      	ldr	r2, [pc, #96]	; (8001308 <MX_CAN_Init+0x68>)
 80012a8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <MX_CAN_Init+0x64>)
 80012ac:	2208      	movs	r2, #8
 80012ae:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <MX_CAN_Init+0x64>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <MX_CAN_Init+0x64>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <MX_CAN_Init+0x64>)
 80012be:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80012c2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_CAN_Init+0x64>)
 80012c6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80012ca:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80012cc:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <MX_CAN_Init+0x64>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_CAN_Init+0x64>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80012d8:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <MX_CAN_Init+0x64>)
 80012da:	2200      	movs	r2, #0
 80012dc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_CAN_Init+0x64>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80012e4:	4b07      	ldr	r3, [pc, #28]	; (8001304 <MX_CAN_Init+0x64>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_CAN_Init+0x64>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <MX_CAN_Init+0x64>)
 80012f2:	f003 fa15 	bl	8004720 <HAL_CAN_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80012fc:	f001 ff32 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000354 	.word	0x20000354
 8001308:	40006400 	.word	0x40006400

0800130c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a29      	ldr	r2, [pc, #164]	; (80013cc <HAL_CAN_MspInit+0xc0>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d14b      	bne.n	80013c4 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800132c:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <HAL_CAN_MspInit+0xc4>)
 800132e:	69db      	ldr	r3, [r3, #28]
 8001330:	4a27      	ldr	r2, [pc, #156]	; (80013d0 <HAL_CAN_MspInit+0xc4>)
 8001332:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001336:	61d3      	str	r3, [r2, #28]
 8001338:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <HAL_CAN_MspInit+0xc4>)
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001344:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <HAL_CAN_MspInit+0xc4>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	4a21      	ldr	r2, [pc, #132]	; (80013d0 <HAL_CAN_MspInit+0xc4>)
 800134a:	f043 0308 	orr.w	r3, r3, #8
 800134e:	6193      	str	r3, [r2, #24]
 8001350:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <HAL_CAN_MspInit+0xc4>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	f003 0308 	and.w	r3, r3, #8
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800135c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001362:	2300      	movs	r3, #0
 8001364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	4818      	ldr	r0, [pc, #96]	; (80013d4 <HAL_CAN_MspInit+0xc8>)
 8001372:	f004 f8f5 	bl	8005560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001376:	f44f 7300 	mov.w	r3, #512	; 0x200
 800137a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4619      	mov	r1, r3
 800138a:	4812      	ldr	r0, [pc, #72]	; (80013d4 <HAL_CAN_MspInit+0xc8>)
 800138c:	f004 f8e8 	bl	8005560 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <HAL_CAN_MspInit+0xcc>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <HAL_CAN_MspInit+0xcc>)
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2105      	movs	r1, #5
 80013b8:	2014      	movs	r0, #20
 80013ba:	f004 f8a6 	bl	800550a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80013be:	2014      	movs	r0, #20
 80013c0:	f004 f8bf 	bl	8005542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80013c4:	bf00      	nop
 80013c6:	3728      	adds	r7, #40	; 0x28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40006400 	.word	0x40006400
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40010c00 	.word	0x40010c00
 80013d8:	40010000 	.word	0x40010000

080013dc <CanFilterSetup>:
}

/* USER CODE BEGIN 1 */

void CanFilterSetup(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* TODO: Review Filter Implementation */
  // Use mask and list mode to filter IDs from the CAN ID BOM

  // Filter for 0x500 and 0x600 IDs
  CAN_filter0.FilterIdHigh = 0x0000;
 80013e0:	4b10      	ldr	r3, [pc, #64]	; (8001424 <CanFilterSetup+0x48>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
  CAN_filter0.FilterMaskIdHigh = 0x0000;
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <CanFilterSetup+0x48>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]

  CAN_filter0.FilterIdLow = 0x0000;
 80013ec:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <CanFilterSetup+0x48>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	605a      	str	r2, [r3, #4]
  CAN_filter0.FilterMaskIdLow = 0x0000;
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <CanFilterSetup+0x48>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	60da      	str	r2, [r3, #12]

  CAN_filter0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80013f8:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <CanFilterSetup+0x48>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  CAN_filter0.FilterBank = (uint32_t) 0;
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <CanFilterSetup+0x48>)
 8001400:	2200      	movs	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
  CAN_filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 8001404:	4b07      	ldr	r3, [pc, #28]	; (8001424 <CanFilterSetup+0x48>)
 8001406:	2200      	movs	r2, #0
 8001408:	619a      	str	r2, [r3, #24]
  CAN_filter0.FilterScale = CAN_FILTERSCALE_16BIT;
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <CanFilterSetup+0x48>)
 800140c:	2200      	movs	r2, #0
 800140e:	61da      	str	r2, [r3, #28]
  CAN_filter0.FilterActivation = CAN_FILTER_ENABLE;
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <CanFilterSetup+0x48>)
 8001412:	2201      	movs	r2, #1
 8001414:	621a      	str	r2, [r3, #32]

  // Configure reception filters
  HAL_CAN_ConfigFilter(&hcan, &CAN_filter0);
 8001416:	4903      	ldr	r1, [pc, #12]	; (8001424 <CanFilterSetup+0x48>)
 8001418:	4803      	ldr	r0, [pc, #12]	; (8001428 <CanFilterSetup+0x4c>)
 800141a:	f003 fa7c 	bl	8004916 <HAL_CAN_ConfigFilter>
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	2000070c 	.word	0x2000070c
 8001428:	20000354 	.word	0x20000354

0800142c <Can_Init>:

/*
 * CAN set-up: Sets up the filters, Starts CAN with HAL, and Activates notifications for interrupts.
 */
void Can_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
  CanFilterSetup();
 8001432:	f7ff ffd3 	bl	80013dc <CanFilterSetup>
  can_start = HAL_CAN_Start(&hcan);
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <Can_Init+0x2c>)
 8001438:	f003 fb36 	bl	8004aa8 <HAL_CAN_Start>
 800143c:	4603      	mov	r3, r0
 800143e:	461a      	mov	r2, r3
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <Can_Init+0x30>)
 8001442:	701a      	strb	r2, [r3, #0]
  assert_param(can_start == HAL_OK);

  HAL_StatusTypeDef can_notification_status = HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001444:	2102      	movs	r1, #2
 8001446:	4804      	ldr	r0, [pc, #16]	; (8001458 <Can_Init+0x2c>)
 8001448:	f003 fd62 	bl	8004f10 <HAL_CAN_ActivateNotification>
 800144c:	4603      	mov	r3, r0
 800144e:	71fb      	strb	r3, [r7, #7]
  assert_param(can_notification_status == HAL_OK);

  /* To avoid warning of unused variable */
  (void) can_notification_status;
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000354 	.word	0x20000354
 800145c:	2000034c 	.word	0x2000034c

08001460 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001460:	b5b0      	push	{r4, r5, r7, lr}
 8001462:	b08e      	sub	sp, #56	; 0x38
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint8_t can_data[8];


  /* Get CAN message */
//  while(HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO0) != 0) {
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_data);  // TODO: Put can_rx_header and can_data into a data structure able to be accessed in the freertos task
 8001468:	f107 030c 	add.w	r3, r7, #12
 800146c:	f107 0214 	add.w	r2, r7, #20
 8001470:	2100      	movs	r1, #0
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f003 fc2b 	bl	8004cce <HAL_CAN_GetRxMessage>
  //  printf("%d\n\r", HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO0));
    /* Put CAN message in the Queue */
    CAN_msg_t *new_CAN_msg;
    new_CAN_msg = osPoolAlloc(CAN_MSG_memory_pool);
 8001478:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f008 fd2a 	bl	8009ed6 <osPoolAlloc>
 8001482:	6338      	str	r0, [r7, #48]	; 0x30
    new_CAN_msg->header = can_rx_header;
 8001484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001486:	461d      	mov	r5, r3
 8001488:	f107 0414 	add.w	r4, r7, #20
 800148c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800148e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001490:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001494:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    for(int i = 0; i < 8; i++) {
 8001498:	2300      	movs	r3, #0
 800149a:	637b      	str	r3, [r7, #52]	; 0x34
 800149c:	e00d      	b.n	80014ba <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
      new_CAN_msg->data[i] = can_data[i];
 800149e:	f107 020c 	add.w	r2, r7, #12
 80014a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014a4:	4413      	add	r3, r2
 80014a6:	7819      	ldrb	r1, [r3, #0]
 80014a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ac:	4413      	add	r3, r2
 80014ae:	331c      	adds	r3, #28
 80014b0:	460a      	mov	r2, r1
 80014b2:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 8; i++) {
 80014b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b6:	3301      	adds	r3, #1
 80014b8:	637b      	str	r3, [r7, #52]	; 0x34
 80014ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014bc:	2b07      	cmp	r3, #7
 80014be:	ddee      	ble.n	800149e <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
    }
    new_CAN_msg->timestamp.double_value = get_current_timestamp();
 80014c0:	f002 fd78 	bl	8003fb4 <get_current_timestamp>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014ca:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    osMessagePut(CAN_MSG_Rx_Queue, new_CAN_msg, osWaitForever);
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014d6:	f04f 32ff 	mov.w	r2, #4294967295
 80014da:	4619      	mov	r1, r3
 80014dc:	f008 fdc6 	bl	800a06c <osMessagePut>
//  }

  /* Set the Flag to CAN_READY */
  osSignalSet(readCANTaskHandle, CAN_READY);
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2101      	movs	r1, #1
 80014e6:	4618      	mov	r0, r3
 80014e8:	f008 fc0c 	bl	8009d04 <osSignalSet>

  /* To avoid warning of unused variable */
  //(void) status;
}
 80014ec:	bf00      	nop
 80014ee:	3738      	adds	r7, #56	; 0x38
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bdb0      	pop	{r4, r5, r7, pc}
 80014f4:	2000038c 	.word	0x2000038c
 80014f8:	20000390 	.word	0x20000390
 80014fc:	20000398 	.word	0x20000398

08001500 <DebugIO_Init>:
 * Configure a UART peripheral assignment for printf debugging
 *
 * @param huart HAL handle for the UART to use for printf debugging
*/
void DebugIO_Init(UART_HandleTypeDef *huart)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
    io_huart = huart;
 8001508:	4a03      	ldr	r2, [pc, #12]	; (8001518 <DebugIO_Init+0x18>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6013      	str	r3, [r2, #0]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	2000037c 	.word	0x2000037c

0800151c <__io_putchar>:

// Configure where printf() and putchar() output goes
int __io_putchar(int ch)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
#ifdef USE_UART
    // Output on UART
    HAL_UART_Transmit(io_huart, (uint8_t *)&ch, 1, 0xFFFF);
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <__io_putchar+0x24>)
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	1d39      	adds	r1, r7, #4
 800152a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800152e:	2201      	movs	r2, #1
 8001530:	f008 f914 	bl	800975c <HAL_UART_Transmit>
#ifdef USE_SWO
    // Output on Serial Wire Output (SWO)
    ITM_SendChar(ch);
#endif // USE_SWO

    return ch;
 8001534:	687b      	ldr	r3, [r7, #4]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	2000037c 	.word	0x2000037c

08001544 <__io_getchar>:

int __io_getchar()
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
    // Implement if needed
    return 0;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr

08001552 <_read>:

#ifdef NO_SYSCALL
int _read(int file, char *ptr, int len)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	e00a      	b.n	800157a <_read+0x28>
    {
        *ptr++ = __io_getchar();
 8001564:	f7ff ffee 	bl	8001544 <__io_getchar>
 8001568:	4601      	mov	r1, r0
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	1c5a      	adds	r2, r3, #1
 800156e:	60ba      	str	r2, [r7, #8]
 8001570:	b2ca      	uxtb	r2, r1
 8001572:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	3301      	adds	r3, #1
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	429a      	cmp	r2, r3
 8001580:	dbf0      	blt.n	8001564 <_read+0x12>
    }

    return len;
 8001582:	687b      	ldr	r3, [r7, #4]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <_write>:

int _write(int file, char *ptr, int len)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	e009      	b.n	80015b2 <_write+0x26>
    {
        __io_putchar(*ptr++);
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	1c5a      	adds	r2, r3, #1
 80015a2:	60ba      	str	r2, [r7, #8]
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff ffb8 	bl	800151c <__io_putchar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	3301      	adds	r3, #1
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	dbf1      	blt.n	800159e <_write+0x12>
    }
    return len;
 80015ba:	687b      	ldr	r3, [r7, #4]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2140      	movs	r1, #64	; 0x40
 80015cc:	4803      	ldr	r0, [pc, #12]	; (80015dc <SELECT+0x18>)
 80015ce:	f004 f972 	bl	80058b6 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015d2:	2001      	movs	r0, #1
 80015d4:	f003 f880 	bl	80046d8 <HAL_Delay>
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40010c00 	.word	0x40010c00

080015e0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80015e4:	2201      	movs	r2, #1
 80015e6:	2140      	movs	r1, #64	; 0x40
 80015e8:	4803      	ldr	r0, [pc, #12]	; (80015f8 <DESELECT+0x18>)
 80015ea:	f004 f964 	bl	80058b6 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015ee:	2001      	movs	r0, #1
 80015f0:	f003 f872 	bl	80046d8 <HAL_Delay>
}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40010c00 	.word	0x40010c00

080015fc <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001606:	bf00      	nop
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <SPI_TxByte+0x30>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b02      	cmp	r3, #2
 8001614:	d1f8      	bne.n	8001608 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001616:	1df9      	adds	r1, r7, #7
 8001618:	2364      	movs	r3, #100	; 0x64
 800161a:	2201      	movs	r2, #1
 800161c:	4803      	ldr	r0, [pc, #12]	; (800162c <SPI_TxByte+0x30>)
 800161e:	f007 fa43 	bl	8008aa8 <HAL_SPI_Transmit>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000784 	.word	0x20000784

08001630 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800163c:	bf00      	nop
 800163e:	4b08      	ldr	r3, [pc, #32]	; (8001660 <SPI_TxBuffer+0x30>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b02      	cmp	r3, #2
 800164a:	d1f8      	bne.n	800163e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800164c:	887a      	ldrh	r2, [r7, #2]
 800164e:	2364      	movs	r3, #100	; 0x64
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	4803      	ldr	r0, [pc, #12]	; (8001660 <SPI_TxBuffer+0x30>)
 8001654:	f007 fa28 	bl	8008aa8 <HAL_SPI_Transmit>
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000784 	.word	0x20000784

08001664 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800166a:	23ff      	movs	r3, #255	; 0xff
 800166c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800166e:	bf00      	nop
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <SPI_RxByte+0x34>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b02      	cmp	r3, #2
 800167c:	d1f8      	bne.n	8001670 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800167e:	1dba      	adds	r2, r7, #6
 8001680:	1df9      	adds	r1, r7, #7
 8001682:	2364      	movs	r3, #100	; 0x64
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2301      	movs	r3, #1
 8001688:	4803      	ldr	r0, [pc, #12]	; (8001698 <SPI_RxByte+0x34>)
 800168a:	f007 fb50 	bl	8008d2e <HAL_SPI_TransmitReceive>

	return data;
 800168e:	79bb      	ldrb	r3, [r7, #6]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000784 	.word	0x20000784

0800169c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80016a4:	f7ff ffde 	bl	8001664 <SPI_RxByte>
 80016a8:	4603      	mov	r3, r0
 80016aa:	461a      	mov	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	701a      	strb	r2, [r3, #0]
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80016be:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <SD_ReadyWait+0x30>)
 80016c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80016c4:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80016c6:	f7ff ffcd 	bl	8001664 <SPI_RxByte>
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	2bff      	cmp	r3, #255	; 0xff
 80016d2:	d003      	beq.n	80016dc <SD_ReadyWait+0x24>
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <SD_ReadyWait+0x30>)
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1f4      	bne.n	80016c6 <SD_ReadyWait+0xe>

	return res;
 80016dc:	79fb      	ldrb	r3, [r7, #7]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000382 	.word	0x20000382

080016ec <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80016f2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80016f6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80016f8:	f7ff ff72 	bl	80015e0 <DESELECT>
	for(int i = 0; i < 10; i++)
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	e005      	b.n	800170e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001702:	20ff      	movs	r0, #255	; 0xff
 8001704:	f7ff ff7a 	bl	80015fc <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	3301      	adds	r3, #1
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	2b09      	cmp	r3, #9
 8001712:	ddf6      	ble.n	8001702 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001714:	f7ff ff56 	bl	80015c4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001718:	2340      	movs	r3, #64	; 0x40
 800171a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800172c:	2395      	movs	r3, #149	; 0x95
 800172e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001730:	463b      	mov	r3, r7
 8001732:	2106      	movs	r1, #6
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff7b 	bl	8001630 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800173a:	e002      	b.n	8001742 <SD_PowerOn+0x56>
	{
		cnt--;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	3b01      	subs	r3, #1
 8001740:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001742:	f7ff ff8f 	bl	8001664 <SPI_RxByte>
 8001746:	4603      	mov	r3, r0
 8001748:	2b01      	cmp	r3, #1
 800174a:	d002      	beq.n	8001752 <SD_PowerOn+0x66>
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f4      	bne.n	800173c <SD_PowerOn+0x50>
	}

	DESELECT();
 8001752:	f7ff ff45 	bl	80015e0 <DESELECT>
	SPI_TxByte(0XFF);
 8001756:	20ff      	movs	r0, #255	; 0xff
 8001758:	f7ff ff50 	bl	80015fc <SPI_TxByte>

	PowerFlag = 1;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <SD_PowerOn+0x80>)
 800175e:	2201      	movs	r2, #1
 8001760:	701a      	strb	r2, [r3, #0]
}
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000385 	.word	0x20000385

08001770 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001774:	4b03      	ldr	r3, [pc, #12]	; (8001784 <SD_PowerOff+0x14>)
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000385 	.word	0x20000385

08001788 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800178c:	4b02      	ldr	r3, [pc, #8]	; (8001798 <SD_CheckPower+0x10>)
 800178e:	781b      	ldrb	r3, [r3, #0]
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	20000385 	.word	0x20000385

0800179c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80017a6:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <SD_RxDataBlock+0x58>)
 80017a8:	22c8      	movs	r2, #200	; 0xc8
 80017aa:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80017ac:	f7ff ff5a 	bl	8001664 <SPI_RxByte>
 80017b0:	4603      	mov	r3, r0
 80017b2:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	2bff      	cmp	r3, #255	; 0xff
 80017b8:	d103      	bne.n	80017c2 <SD_RxDataBlock+0x26>
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <SD_RxDataBlock+0x58>)
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f4      	bne.n	80017ac <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	2bfe      	cmp	r3, #254	; 0xfe
 80017c6:	d001      	beq.n	80017cc <SD_RxDataBlock+0x30>
 80017c8:	2300      	movs	r3, #0
 80017ca:	e00f      	b.n	80017ec <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	607a      	str	r2, [r7, #4]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff ff62 	bl	800169c <SPI_RxBytePtr>
	} while(len--);
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	1e5a      	subs	r2, r3, #1
 80017dc:	603a      	str	r2, [r7, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f4      	bne.n	80017cc <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80017e2:	f7ff ff3f 	bl	8001664 <SPI_RxByte>
	SPI_RxByte();
 80017e6:	f7ff ff3d 	bl	8001664 <SPI_RxByte>

	return TRUE;
 80017ea:	2301      	movs	r3, #1
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000380 	.word	0x20000380

080017f8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001808:	f7ff ff56 	bl	80016b8 <SD_ReadyWait>
 800180c:	4603      	mov	r3, r0
 800180e:	2bff      	cmp	r3, #255	; 0xff
 8001810:	d001      	beq.n	8001816 <SD_TxDataBlock+0x1e>
 8001812:	2300      	movs	r3, #0
 8001814:	e02f      	b.n	8001876 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001816:	78fb      	ldrb	r3, [r7, #3]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff feef 	bl	80015fc <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800181e:	78fb      	ldrb	r3, [r7, #3]
 8001820:	2bfd      	cmp	r3, #253	; 0xfd
 8001822:	d020      	beq.n	8001866 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001824:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff ff01 	bl	8001630 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800182e:	f7ff ff19 	bl	8001664 <SPI_RxByte>
		SPI_RxByte();
 8001832:	f7ff ff17 	bl	8001664 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001836:	e00b      	b.n	8001850 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001838:	f7ff ff14 	bl	8001664 <SPI_RxByte>
 800183c:	4603      	mov	r3, r0
 800183e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001840:	7bfb      	ldrb	r3, [r7, #15]
 8001842:	f003 031f 	and.w	r3, r3, #31
 8001846:	2b05      	cmp	r3, #5
 8001848:	d006      	beq.n	8001858 <SD_TxDataBlock+0x60>
			i++;
 800184a:	7bbb      	ldrb	r3, [r7, #14]
 800184c:	3301      	adds	r3, #1
 800184e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001850:	7bbb      	ldrb	r3, [r7, #14]
 8001852:	2b40      	cmp	r3, #64	; 0x40
 8001854:	d9f0      	bls.n	8001838 <SD_TxDataBlock+0x40>
 8001856:	e000      	b.n	800185a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001858:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800185a:	bf00      	nop
 800185c:	f7ff ff02 	bl	8001664 <SPI_RxByte>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0fa      	beq.n	800185c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	f003 031f 	and.w	r3, r3, #31
 800186c:	2b05      	cmp	r3, #5
 800186e:	d101      	bne.n	8001874 <SD_TxDataBlock+0x7c>
 8001870:	2301      	movs	r3, #1
 8001872:	e000      	b.n	8001876 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b084      	sub	sp, #16
 8001882:	af00      	add	r7, sp, #0
 8001884:	4603      	mov	r3, r0
 8001886:	6039      	str	r1, [r7, #0]
 8001888:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800188a:	f7ff ff15 	bl	80016b8 <SD_ReadyWait>
 800188e:	4603      	mov	r3, r0
 8001890:	2bff      	cmp	r3, #255	; 0xff
 8001892:	d001      	beq.n	8001898 <SD_SendCmd+0x1a>
 8001894:	23ff      	movs	r3, #255	; 0xff
 8001896:	e042      	b.n	800191e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff feae 	bl	80015fc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	0e1b      	lsrs	r3, r3, #24
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fea8 	bl	80015fc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	0c1b      	lsrs	r3, r3, #16
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fea2 	bl	80015fc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	0a1b      	lsrs	r3, r3, #8
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fe9c 	bl	80015fc <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fe97 	bl	80015fc <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	2b40      	cmp	r3, #64	; 0x40
 80018d2:	d102      	bne.n	80018da <SD_SendCmd+0x5c>
 80018d4:	2395      	movs	r3, #149	; 0x95
 80018d6:	73fb      	strb	r3, [r7, #15]
 80018d8:	e007      	b.n	80018ea <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	2b48      	cmp	r3, #72	; 0x48
 80018de:	d102      	bne.n	80018e6 <SD_SendCmd+0x68>
 80018e0:	2387      	movs	r3, #135	; 0x87
 80018e2:	73fb      	strb	r3, [r7, #15]
 80018e4:	e001      	b.n	80018ea <SD_SendCmd+0x6c>
	else crc = 1;
 80018e6:	2301      	movs	r3, #1
 80018e8:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fe85 	bl	80015fc <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	2b4c      	cmp	r3, #76	; 0x4c
 80018f6:	d101      	bne.n	80018fc <SD_SendCmd+0x7e>
 80018f8:	f7ff feb4 	bl	8001664 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80018fc:	230a      	movs	r3, #10
 80018fe:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001900:	f7ff feb0 	bl	8001664 <SPI_RxByte>
 8001904:	4603      	mov	r3, r0
 8001906:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001908:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800190c:	2b00      	cmp	r3, #0
 800190e:	da05      	bge.n	800191c <SD_SendCmd+0x9e>
 8001910:	7bbb      	ldrb	r3, [r7, #14]
 8001912:	3b01      	subs	r3, #1
 8001914:	73bb      	strb	r3, [r7, #14]
 8001916:	7bbb      	ldrb	r3, [r7, #14]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1f1      	bne.n	8001900 <SD_SendCmd+0x82>

	return res;
 800191c:	7b7b      	ldrb	r3, [r7, #13]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001928:	b590      	push	{r4, r7, lr}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <SD_disk_initialize+0x14>
 8001938:	2301      	movs	r3, #1
 800193a:	e0d1      	b.n	8001ae0 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800193c:	4b6a      	ldr	r3, [pc, #424]	; (8001ae8 <SD_disk_initialize+0x1c0>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <SD_disk_initialize+0x2a>
 800194a:	4b67      	ldr	r3, [pc, #412]	; (8001ae8 <SD_disk_initialize+0x1c0>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	e0c6      	b.n	8001ae0 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001952:	f7ff fecb 	bl	80016ec <SD_PowerOn>

	/* slave select */
	SELECT();
 8001956:	f7ff fe35 	bl	80015c4 <SELECT>

	/* check disk type */
	type = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800195e:	2100      	movs	r1, #0
 8001960:	2040      	movs	r0, #64	; 0x40
 8001962:	f7ff ff8c 	bl	800187e <SD_SendCmd>
 8001966:	4603      	mov	r3, r0
 8001968:	2b01      	cmp	r3, #1
 800196a:	f040 80a1 	bne.w	8001ab0 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800196e:	4b5f      	ldr	r3, [pc, #380]	; (8001aec <SD_disk_initialize+0x1c4>)
 8001970:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001974:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001976:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800197a:	2048      	movs	r0, #72	; 0x48
 800197c:	f7ff ff7f 	bl	800187e <SD_SendCmd>
 8001980:	4603      	mov	r3, r0
 8001982:	2b01      	cmp	r3, #1
 8001984:	d155      	bne.n	8001a32 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001986:	2300      	movs	r3, #0
 8001988:	73fb      	strb	r3, [r7, #15]
 800198a:	e00c      	b.n	80019a6 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800198c:	7bfc      	ldrb	r4, [r7, #15]
 800198e:	f7ff fe69 	bl	8001664 <SPI_RxByte>
 8001992:	4603      	mov	r3, r0
 8001994:	461a      	mov	r2, r3
 8001996:	f104 0310 	add.w	r3, r4, #16
 800199a:	443b      	add	r3, r7
 800199c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	3301      	adds	r3, #1
 80019a4:	73fb      	strb	r3, [r7, #15]
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d9ef      	bls.n	800198c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80019ac:	7abb      	ldrb	r3, [r7, #10]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d17e      	bne.n	8001ab0 <SD_disk_initialize+0x188>
 80019b2:	7afb      	ldrb	r3, [r7, #11]
 80019b4:	2baa      	cmp	r3, #170	; 0xaa
 80019b6:	d17b      	bne.n	8001ab0 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80019b8:	2100      	movs	r1, #0
 80019ba:	2077      	movs	r0, #119	; 0x77
 80019bc:	f7ff ff5f 	bl	800187e <SD_SendCmd>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d807      	bhi.n	80019d6 <SD_disk_initialize+0xae>
 80019c6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019ca:	2069      	movs	r0, #105	; 0x69
 80019cc:	f7ff ff57 	bl	800187e <SD_SendCmd>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d004      	beq.n	80019e0 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80019d6:	4b45      	ldr	r3, [pc, #276]	; (8001aec <SD_disk_initialize+0x1c4>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1ec      	bne.n	80019b8 <SD_disk_initialize+0x90>
 80019de:	e000      	b.n	80019e2 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80019e0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80019e2:	4b42      	ldr	r3, [pc, #264]	; (8001aec <SD_disk_initialize+0x1c4>)
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d062      	beq.n	8001ab0 <SD_disk_initialize+0x188>
 80019ea:	2100      	movs	r1, #0
 80019ec:	207a      	movs	r0, #122	; 0x7a
 80019ee:	f7ff ff46 	bl	800187e <SD_SendCmd>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d15b      	bne.n	8001ab0 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80019f8:	2300      	movs	r3, #0
 80019fa:	73fb      	strb	r3, [r7, #15]
 80019fc:	e00c      	b.n	8001a18 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80019fe:	7bfc      	ldrb	r4, [r7, #15]
 8001a00:	f7ff fe30 	bl	8001664 <SPI_RxByte>
 8001a04:	4603      	mov	r3, r0
 8001a06:	461a      	mov	r2, r3
 8001a08:	f104 0310 	add.w	r3, r4, #16
 8001a0c:	443b      	add	r3, r7
 8001a0e:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	3301      	adds	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d9ef      	bls.n	80019fe <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001a1e:	7a3b      	ldrb	r3, [r7, #8]
 8001a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <SD_disk_initialize+0x104>
 8001a28:	230c      	movs	r3, #12
 8001a2a:	e000      	b.n	8001a2e <SD_disk_initialize+0x106>
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	73bb      	strb	r3, [r7, #14]
 8001a30:	e03e      	b.n	8001ab0 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001a32:	2100      	movs	r1, #0
 8001a34:	2077      	movs	r0, #119	; 0x77
 8001a36:	f7ff ff22 	bl	800187e <SD_SendCmd>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d808      	bhi.n	8001a52 <SD_disk_initialize+0x12a>
 8001a40:	2100      	movs	r1, #0
 8001a42:	2069      	movs	r0, #105	; 0x69
 8001a44:	f7ff ff1b 	bl	800187e <SD_SendCmd>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d801      	bhi.n	8001a52 <SD_disk_initialize+0x12a>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e000      	b.n	8001a54 <SD_disk_initialize+0x12c>
 8001a52:	2301      	movs	r3, #1
 8001a54:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001a56:	7bbb      	ldrb	r3, [r7, #14]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d10e      	bne.n	8001a7a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	2077      	movs	r0, #119	; 0x77
 8001a60:	f7ff ff0d 	bl	800187e <SD_SendCmd>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d80e      	bhi.n	8001a88 <SD_disk_initialize+0x160>
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	2069      	movs	r0, #105	; 0x69
 8001a6e:	f7ff ff06 	bl	800187e <SD_SendCmd>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d107      	bne.n	8001a88 <SD_disk_initialize+0x160>
 8001a78:	e00c      	b.n	8001a94 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	2041      	movs	r0, #65	; 0x41
 8001a7e:	f7ff fefe 	bl	800187e <SD_SendCmd>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d004      	beq.n	8001a92 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001a88:	4b18      	ldr	r3, [pc, #96]	; (8001aec <SD_disk_initialize+0x1c4>)
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1e2      	bne.n	8001a56 <SD_disk_initialize+0x12e>
 8001a90:	e000      	b.n	8001a94 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001a92:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001a94:	4b15      	ldr	r3, [pc, #84]	; (8001aec <SD_disk_initialize+0x1c4>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d007      	beq.n	8001aac <SD_disk_initialize+0x184>
 8001a9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aa0:	2050      	movs	r0, #80	; 0x50
 8001aa2:	f7ff feec 	bl	800187e <SD_SendCmd>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <SD_disk_initialize+0x188>
 8001aac:	2300      	movs	r3, #0
 8001aae:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001ab0:	4a0f      	ldr	r2, [pc, #60]	; (8001af0 <SD_disk_initialize+0x1c8>)
 8001ab2:	7bbb      	ldrb	r3, [r7, #14]
 8001ab4:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001ab6:	f7ff fd93 	bl	80015e0 <DESELECT>
	SPI_RxByte();
 8001aba:	f7ff fdd3 	bl	8001664 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001abe:	7bbb      	ldrb	r3, [r7, #14]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d008      	beq.n	8001ad6 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <SD_disk_initialize+0x1c0>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	f023 0301 	bic.w	r3, r3, #1
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <SD_disk_initialize+0x1c0>)
 8001ad2:	701a      	strb	r2, [r3, #0]
 8001ad4:	e001      	b.n	8001ada <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001ad6:	f7ff fe4b 	bl	8001770 <SD_PowerOff>
	}

	return Stat;
 8001ada:	4b03      	ldr	r3, [pc, #12]	; (8001ae8 <SD_disk_initialize+0x1c0>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	b2db      	uxtb	r3, r3
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd90      	pop	{r4, r7, pc}
 8001ae8:	200000d8 	.word	0x200000d8
 8001aec:	20000380 	.word	0x20000380
 8001af0:	20000384 	.word	0x20000384

08001af4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <SD_disk_status+0x14>
 8001b04:	2301      	movs	r3, #1
 8001b06:	e002      	b.n	8001b0e <SD_disk_status+0x1a>
	return Stat;
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <SD_disk_status+0x24>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	b2db      	uxtb	r3, r3
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	200000d8 	.word	0x200000d8

08001b1c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	4603      	mov	r3, r0
 8001b2a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d102      	bne.n	8001b38 <SD_disk_read+0x1c>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <SD_disk_read+0x20>
 8001b38:	2304      	movs	r3, #4
 8001b3a:	e051      	b.n	8001be0 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001b3c:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <SD_disk_read+0xcc>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <SD_disk_read+0x32>
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e048      	b.n	8001be0 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001b4e:	4b27      	ldr	r3, [pc, #156]	; (8001bec <SD_disk_read+0xd0>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d102      	bne.n	8001b60 <SD_disk_read+0x44>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	025b      	lsls	r3, r3, #9
 8001b5e:	607b      	str	r3, [r7, #4]

	SELECT();
 8001b60:	f7ff fd30 	bl	80015c4 <SELECT>

	if (count == 1)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d111      	bne.n	8001b8e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	2051      	movs	r0, #81	; 0x51
 8001b6e:	f7ff fe86 	bl	800187e <SD_SendCmd>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d129      	bne.n	8001bcc <SD_disk_read+0xb0>
 8001b78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b7c:	68b8      	ldr	r0, [r7, #8]
 8001b7e:	f7ff fe0d 	bl	800179c <SD_RxDataBlock>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d021      	beq.n	8001bcc <SD_disk_read+0xb0>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	603b      	str	r3, [r7, #0]
 8001b8c:	e01e      	b.n	8001bcc <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	2052      	movs	r0, #82	; 0x52
 8001b92:	f7ff fe74 	bl	800187e <SD_SendCmd>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d117      	bne.n	8001bcc <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001b9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ba0:	68b8      	ldr	r0, [r7, #8]
 8001ba2:	f7ff fdfb 	bl	800179c <SD_RxDataBlock>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00a      	beq.n	8001bc2 <SD_disk_read+0xa6>
				buff += 512;
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001bb2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	603b      	str	r3, [r7, #0]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1ed      	bne.n	8001b9c <SD_disk_read+0x80>
 8001bc0:	e000      	b.n	8001bc4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001bc2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	204c      	movs	r0, #76	; 0x4c
 8001bc8:	f7ff fe59 	bl	800187e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001bcc:	f7ff fd08 	bl	80015e0 <DESELECT>
	SPI_RxByte();
 8001bd0:	f7ff fd48 	bl	8001664 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	bf14      	ite	ne
 8001bda:	2301      	movne	r3, #1
 8001bdc:	2300      	moveq	r3, #0
 8001bde:	b2db      	uxtb	r3, r3
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	200000d8 	.word	0x200000d8
 8001bec:	20000384 	.word	0x20000384

08001bf0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d102      	bne.n	8001c0c <SD_disk_write+0x1c>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <SD_disk_write+0x20>
 8001c0c:	2304      	movs	r3, #4
 8001c0e:	e06b      	b.n	8001ce8 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001c10:	4b37      	ldr	r3, [pc, #220]	; (8001cf0 <SD_disk_write+0x100>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <SD_disk_write+0x32>
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e062      	b.n	8001ce8 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001c22:	4b33      	ldr	r3, [pc, #204]	; (8001cf0 <SD_disk_write+0x100>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <SD_disk_write+0x44>
 8001c30:	2302      	movs	r3, #2
 8001c32:	e059      	b.n	8001ce8 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001c34:	4b2f      	ldr	r3, [pc, #188]	; (8001cf4 <SD_disk_write+0x104>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d102      	bne.n	8001c46 <SD_disk_write+0x56>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	025b      	lsls	r3, r3, #9
 8001c44:	607b      	str	r3, [r7, #4]

	SELECT();
 8001c46:	f7ff fcbd 	bl	80015c4 <SELECT>

	if (count == 1)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d110      	bne.n	8001c72 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	2058      	movs	r0, #88	; 0x58
 8001c54:	f7ff fe13 	bl	800187e <SD_SendCmd>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d13a      	bne.n	8001cd4 <SD_disk_write+0xe4>
 8001c5e:	21fe      	movs	r1, #254	; 0xfe
 8001c60:	68b8      	ldr	r0, [r7, #8]
 8001c62:	f7ff fdc9 	bl	80017f8 <SD_TxDataBlock>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d033      	beq.n	8001cd4 <SD_disk_write+0xe4>
			count = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	e030      	b.n	8001cd4 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001c72:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <SD_disk_write+0x104>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d007      	beq.n	8001c8e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001c7e:	2100      	movs	r1, #0
 8001c80:	2077      	movs	r0, #119	; 0x77
 8001c82:	f7ff fdfc 	bl	800187e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001c86:	6839      	ldr	r1, [r7, #0]
 8001c88:	2057      	movs	r0, #87	; 0x57
 8001c8a:	f7ff fdf8 	bl	800187e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	2059      	movs	r0, #89	; 0x59
 8001c92:	f7ff fdf4 	bl	800187e <SD_SendCmd>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d11b      	bne.n	8001cd4 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001c9c:	21fc      	movs	r1, #252	; 0xfc
 8001c9e:	68b8      	ldr	r0, [r7, #8]
 8001ca0:	f7ff fdaa 	bl	80017f8 <SD_TxDataBlock>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00a      	beq.n	8001cc0 <SD_disk_write+0xd0>
				buff += 512;
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001cb0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	603b      	str	r3, [r7, #0]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1ee      	bne.n	8001c9c <SD_disk_write+0xac>
 8001cbe:	e000      	b.n	8001cc2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001cc0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001cc2:	21fd      	movs	r1, #253	; 0xfd
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	f7ff fd97 	bl	80017f8 <SD_TxDataBlock>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <SD_disk_write+0xe4>
			{
				count = 1;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001cd4:	f7ff fc84 	bl	80015e0 <DESELECT>
	SPI_RxByte();
 8001cd8:	f7ff fcc4 	bl	8001664 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	bf14      	ite	ne
 8001ce2:	2301      	movne	r3, #1
 8001ce4:	2300      	moveq	r3, #0
 8001ce6:	b2db      	uxtb	r3, r3
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	200000d8 	.word	0x200000d8
 8001cf4:	20000384 	.word	0x20000384

08001cf8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001cf8:	b590      	push	{r4, r7, lr}
 8001cfa:	b08b      	sub	sp, #44	; 0x2c
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	603a      	str	r2, [r7, #0]
 8001d02:	71fb      	strb	r3, [r7, #7]
 8001d04:	460b      	mov	r3, r1
 8001d06:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <SD_disk_ioctl+0x1e>
 8001d12:	2304      	movs	r3, #4
 8001d14:	e115      	b.n	8001f42 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001d1c:	79bb      	ldrb	r3, [r7, #6]
 8001d1e:	2b05      	cmp	r3, #5
 8001d20:	d124      	bne.n	8001d6c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001d22:	6a3b      	ldr	r3, [r7, #32]
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d012      	beq.n	8001d50 <SD_disk_ioctl+0x58>
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	dc1a      	bgt.n	8001d64 <SD_disk_ioctl+0x6c>
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d002      	beq.n	8001d38 <SD_disk_ioctl+0x40>
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d006      	beq.n	8001d44 <SD_disk_ioctl+0x4c>
 8001d36:	e015      	b.n	8001d64 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001d38:	f7ff fd1a 	bl	8001770 <SD_PowerOff>
			res = RES_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001d42:	e0fc      	b.n	8001f3e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001d44:	f7ff fcd2 	bl	80016ec <SD_PowerOn>
			res = RES_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001d4e:	e0f6      	b.n	8001f3e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	1c5c      	adds	r4, r3, #1
 8001d54:	f7ff fd18 	bl	8001788 <SD_CheckPower>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001d62:	e0ec      	b.n	8001f3e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001d64:	2304      	movs	r3, #4
 8001d66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d6a:	e0e8      	b.n	8001f3e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001d6c:	4b77      	ldr	r3, [pc, #476]	; (8001f4c <SD_disk_ioctl+0x254>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <SD_disk_ioctl+0x86>
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e0e1      	b.n	8001f42 <SD_disk_ioctl+0x24a>

		SELECT();
 8001d7e:	f7ff fc21 	bl	80015c4 <SELECT>

		switch (ctrl)
 8001d82:	79bb      	ldrb	r3, [r7, #6]
 8001d84:	2b0d      	cmp	r3, #13
 8001d86:	f200 80cb 	bhi.w	8001f20 <SD_disk_ioctl+0x228>
 8001d8a:	a201      	add	r2, pc, #4	; (adr r2, 8001d90 <SD_disk_ioctl+0x98>)
 8001d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d90:	08001e8b 	.word	0x08001e8b
 8001d94:	08001dc9 	.word	0x08001dc9
 8001d98:	08001e7b 	.word	0x08001e7b
 8001d9c:	08001f21 	.word	0x08001f21
 8001da0:	08001f21 	.word	0x08001f21
 8001da4:	08001f21 	.word	0x08001f21
 8001da8:	08001f21 	.word	0x08001f21
 8001dac:	08001f21 	.word	0x08001f21
 8001db0:	08001f21 	.word	0x08001f21
 8001db4:	08001f21 	.word	0x08001f21
 8001db8:	08001f21 	.word	0x08001f21
 8001dbc:	08001e9d 	.word	0x08001e9d
 8001dc0:	08001ec1 	.word	0x08001ec1
 8001dc4:	08001ee5 	.word	0x08001ee5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001dc8:	2100      	movs	r1, #0
 8001dca:	2049      	movs	r0, #73	; 0x49
 8001dcc:	f7ff fd57 	bl	800187e <SD_SendCmd>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f040 80a8 	bne.w	8001f28 <SD_disk_ioctl+0x230>
 8001dd8:	f107 030c 	add.w	r3, r7, #12
 8001ddc:	2110      	movs	r1, #16
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fcdc 	bl	800179c <SD_RxDataBlock>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 809e 	beq.w	8001f28 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001dec:	7b3b      	ldrb	r3, [r7, #12]
 8001dee:	099b      	lsrs	r3, r3, #6
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d10e      	bne.n	8001e14 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001df6:	7d7b      	ldrb	r3, [r7, #21]
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	7d3b      	ldrb	r3, [r7, #20]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	021b      	lsls	r3, r3, #8
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	4413      	add	r3, r2
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	3301      	adds	r3, #1
 8001e08:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001e0a:	8bfb      	ldrh	r3, [r7, #30]
 8001e0c:	029a      	lsls	r2, r3, #10
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	e02e      	b.n	8001e72 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001e14:	7c7b      	ldrb	r3, [r7, #17]
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	7dbb      	ldrb	r3, [r7, #22]
 8001e1e:	09db      	lsrs	r3, r3, #7
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	4413      	add	r3, r2
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	7d7b      	ldrb	r3, [r7, #21]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	f003 0306 	and.w	r3, r3, #6
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	4413      	add	r3, r2
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	3302      	adds	r3, #2
 8001e38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001e3c:	7d3b      	ldrb	r3, [r7, #20]
 8001e3e:	099b      	lsrs	r3, r3, #6
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	7cfb      	ldrb	r3, [r7, #19]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	7cbb      	ldrb	r3, [r7, #18]
 8001e52:	029b      	lsls	r3, r3, #10
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	3301      	adds	r3, #1
 8001e62:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001e64:	8bfa      	ldrh	r2, [r7, #30]
 8001e66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e6a:	3b09      	subs	r3, #9
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001e78:	e056      	b.n	8001f28 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e80:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001e88:	e055      	b.n	8001f36 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001e8a:	f7ff fc15 	bl	80016b8 <SD_ReadyWait>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2bff      	cmp	r3, #255	; 0xff
 8001e92:	d14b      	bne.n	8001f2c <SD_disk_ioctl+0x234>
 8001e94:	2300      	movs	r3, #0
 8001e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001e9a:	e047      	b.n	8001f2c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2049      	movs	r0, #73	; 0x49
 8001ea0:	f7ff fced 	bl	800187e <SD_SendCmd>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d142      	bne.n	8001f30 <SD_disk_ioctl+0x238>
 8001eaa:	2110      	movs	r1, #16
 8001eac:	6a38      	ldr	r0, [r7, #32]
 8001eae:	f7ff fc75 	bl	800179c <SD_RxDataBlock>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d03b      	beq.n	8001f30 <SD_disk_ioctl+0x238>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ebe:	e037      	b.n	8001f30 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	204a      	movs	r0, #74	; 0x4a
 8001ec4:	f7ff fcdb 	bl	800187e <SD_SendCmd>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d132      	bne.n	8001f34 <SD_disk_ioctl+0x23c>
 8001ece:	2110      	movs	r1, #16
 8001ed0:	6a38      	ldr	r0, [r7, #32]
 8001ed2:	f7ff fc63 	bl	800179c <SD_RxDataBlock>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d02b      	beq.n	8001f34 <SD_disk_ioctl+0x23c>
 8001edc:	2300      	movs	r3, #0
 8001ede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ee2:	e027      	b.n	8001f34 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	207a      	movs	r0, #122	; 0x7a
 8001ee8:	f7ff fcc9 	bl	800187e <SD_SendCmd>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d116      	bne.n	8001f20 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001ef8:	e00b      	b.n	8001f12 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001efa:	6a3c      	ldr	r4, [r7, #32]
 8001efc:	1c63      	adds	r3, r4, #1
 8001efe:	623b      	str	r3, [r7, #32]
 8001f00:	f7ff fbb0 	bl	8001664 <SPI_RxByte>
 8001f04:	4603      	mov	r3, r0
 8001f06:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001f08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001f12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	d9ef      	bls.n	8001efa <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001f20:	2304      	movs	r3, #4
 8001f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f26:	e006      	b.n	8001f36 <SD_disk_ioctl+0x23e>
			break;
 8001f28:	bf00      	nop
 8001f2a:	e004      	b.n	8001f36 <SD_disk_ioctl+0x23e>
			break;
 8001f2c:	bf00      	nop
 8001f2e:	e002      	b.n	8001f36 <SD_disk_ioctl+0x23e>
			break;
 8001f30:	bf00      	nop
 8001f32:	e000      	b.n	8001f36 <SD_disk_ioctl+0x23e>
			break;
 8001f34:	bf00      	nop
		}

		DESELECT();
 8001f36:	f7ff fb53 	bl	80015e0 <DESELECT>
		SPI_RxByte();
 8001f3a:	f7ff fb93 	bl	8001664 <SPI_RxByte>
	}

	return res;
 8001f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	372c      	adds	r7, #44	; 0x2c
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd90      	pop	{r4, r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200000d8 	.word	0x200000d8

08001f50 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4a06      	ldr	r2, [pc, #24]	; (8001f78 <vApplicationGetIdleTaskMemory+0x28>)
 8001f60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	4a05      	ldr	r2, [pc, #20]	; (8001f7c <vApplicationGetIdleTaskMemory+0x2c>)
 8001f66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2280      	movs	r2, #128	; 0x80
 8001f6c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001f6e:	bf00      	nop
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr
 8001f78:	200003ac 	.word	0x200003ac
 8001f7c:	2000045c 	.word	0x2000045c

08001f80 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001f80:	b5b0      	push	{r4, r5, r7, lr}
 8001f82:	b0aa      	sub	sp, #168	; 0xa8
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  drive_cmd_count = 0;
 8001f86:	4b42      	ldr	r3, [pc, #264]	; (8002090 <MX_FREERTOS_Init+0x110>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  CAN_MSG_memory_pool = osPoolCreate(osPool(CAN_MSG_memory_pool));                 // create memory pool
 8001f8c:	4841      	ldr	r0, [pc, #260]	; (8002094 <MX_FREERTOS_Init+0x114>)
 8001f8e:	f007 ff45 	bl	8009e1c <osPoolCreate>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4a40      	ldr	r2, [pc, #256]	; (8002098 <MX_FREERTOS_Init+0x118>)
 8001f96:	6013      	str	r3, [r2, #0]
  CAN_MSG_Rx_Queue = osMessageCreate(osMessageQ(CAN_MSG_Rx_Queue), NULL);  // create msg queue
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4840      	ldr	r0, [pc, #256]	; (800209c <MX_FREERTOS_Init+0x11c>)
 8001f9c:	f008 f83d 	bl	800a01a <osMessageCreate>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	4a3f      	ldr	r2, [pc, #252]	; (80020a0 <MX_FREERTOS_Init+0x120>)
 8001fa4:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of StartDefaultTask */
  osThreadDef(StartDefaultTask, startDefaultTask, osPriorityLow, 0, 128);
 8001fa6:	4b3f      	ldr	r3, [pc, #252]	; (80020a4 <MX_FREERTOS_Init+0x124>)
 8001fa8:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001fac:	461d      	mov	r5, r3
 8001fae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fb2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StartDefaultTaskHandle = osThreadCreate(osThread(StartDefaultTask), NULL);
 8001fba:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f007 fe3f 	bl	8009c44 <osThreadCreate>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4a37      	ldr	r2, [pc, #220]	; (80020a8 <MX_FREERTOS_Init+0x128>)
 8001fca:	6013      	str	r3, [r2, #0]

  /* definition and creation of readCANTask */
  osThreadDef(readCANTask, read_CAN_task, osPriorityNormal, 0, 512);
 8001fcc:	4b37      	ldr	r3, [pc, #220]	; (80020ac <MX_FREERTOS_Init+0x12c>)
 8001fce:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001fd2:	461d      	mov	r5, r3
 8001fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fd8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fdc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readCANTaskHandle = osThreadCreate(osThread(readCANTask), NULL);
 8001fe0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f007 fe2c 	bl	8009c44 <osThreadCreate>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4a30      	ldr	r2, [pc, #192]	; (80020b0 <MX_FREERTOS_Init+0x130>)
 8001ff0:	6013      	str	r3, [r2, #0]

  /* definition and creation of readIMUTask */
  osThreadDef(readIMUTask, read_IMU_task, osPriorityNormal, 0, 512);
 8001ff2:	4b30      	ldr	r3, [pc, #192]	; (80020b4 <MX_FREERTOS_Init+0x134>)
 8001ff4:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001ff8:	461d      	mov	r5, r3
 8001ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ffc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ffe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002002:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readIMUTaskHandle = osThreadCreate(osThread(readIMUTask), NULL);
 8002006:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800200a:	2100      	movs	r1, #0
 800200c:	4618      	mov	r0, r3
 800200e:	f007 fe19 	bl	8009c44 <osThreadCreate>
 8002012:	4603      	mov	r3, r0
 8002014:	4a28      	ldr	r2, [pc, #160]	; (80020b8 <MX_FREERTOS_Init+0x138>)
 8002016:	6013      	str	r3, [r2, #0]

  /* definition and creation of readGPSTask */
  osThreadDef(readGPSTask, read_GPS_task, osPriorityNormal, 0, 1536);
 8002018:	4b28      	ldr	r3, [pc, #160]	; (80020bc <MX_FREERTOS_Init+0x13c>)
 800201a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800201e:	461d      	mov	r5, r3
 8002020:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002024:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002028:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readGPSTaskHandle = osThreadCreate(osThread(readGPSTask), NULL);
 800202c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f007 fe06 	bl	8009c44 <osThreadCreate>
 8002038:	4603      	mov	r3, r0
 800203a:	4a21      	ldr	r2, [pc, #132]	; (80020c0 <MX_FREERTOS_Init+0x140>)
 800203c:	6013      	str	r3, [r2, #0]

  /* definition and creation of transmitRTCTask */
  osThreadDef(transmitRTCTask, transmit_RTC_task, osPriorityNormal, 0, 512);
 800203e:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <MX_FREERTOS_Init+0x144>)
 8002040:	f107 041c 	add.w	r4, r7, #28
 8002044:	461d      	mov	r5, r3
 8002046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800204a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800204e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  transmitRTCTaskHandle = osThreadCreate(osThread(transmitRTCTask), NULL);
 8002052:	f107 031c 	add.w	r3, r7, #28
 8002056:	2100      	movs	r1, #0
 8002058:	4618      	mov	r0, r3
 800205a:	f007 fdf3 	bl	8009c44 <osThreadCreate>
 800205e:	4603      	mov	r3, r0
 8002060:	4a19      	ldr	r2, [pc, #100]	; (80020c8 <MX_FREERTOS_Init+0x148>)
 8002062:	6013      	str	r3, [r2, #0]

  /* definition and creation of transmitDiagnosticsTask */
  osThreadDef(transmitDiagnosticsTask, transmit_Diagnostics_task, osPriorityNormal, 0, 512);
 8002064:	4b19      	ldr	r3, [pc, #100]	; (80020cc <MX_FREERTOS_Init+0x14c>)
 8002066:	463c      	mov	r4, r7
 8002068:	461d      	mov	r5, r3
 800206a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800206c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800206e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002072:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  transmitDiagnosticsTaskHandle = osThreadCreate(osThread(transmitDiagnosticsTask), NULL);
 8002076:	463b      	mov	r3, r7
 8002078:	2100      	movs	r1, #0
 800207a:	4618      	mov	r0, r3
 800207c:	f007 fde2 	bl	8009c44 <osThreadCreate>
 8002080:	4603      	mov	r3, r0
 8002082:	4a13      	ldr	r2, [pc, #76]	; (80020d0 <MX_FREERTOS_Init+0x150>)
 8002084:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002086:	bf00      	nop
 8002088:	37a8      	adds	r7, #168	; 0xa8
 800208a:	46bd      	mov	sp, r7
 800208c:	bdb0      	pop	{r4, r5, r7, pc}
 800208e:	bf00      	nop
 8002090:	20000388 	.word	0x20000388
 8002094:	08011fa8 	.word	0x08011fa8
 8002098:	2000038c 	.word	0x2000038c
 800209c:	08011fb4 	.word	0x08011fb4
 80020a0:	20000390 	.word	0x20000390
 80020a4:	08011dfc 	.word	0x08011dfc
 80020a8:	20000394 	.word	0x20000394
 80020ac:	08011e24 	.word	0x08011e24
 80020b0:	20000398 	.word	0x20000398
 80020b4:	08011e4c 	.word	0x08011e4c
 80020b8:	2000039c 	.word	0x2000039c
 80020bc:	08011e74 	.word	0x08011e74
 80020c0:	200003a0 	.word	0x200003a0
 80020c4:	08011ea0 	.word	0x08011ea0
 80020c8:	200003a4 	.word	0x200003a4
 80020cc:	08011ed4 	.word	0x08011ed4
 80020d0:	200003a8 	.word	0x200003a8

080020d4 <startDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startDefaultTask */
void startDefaultTask(void const * argument)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startDefaultTask */
  Can_Init();
 80020dc:	f7ff f9a6 	bl	800142c <Can_Init>
  /* Infinite loop */
  for(;;)
  {
    //printf("startDefaultTask()\n\r");
//    HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
    osDelay(DEFAULT_TASK_DELAY);
 80020e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020e4:	f007 fdfa 	bl	8009cdc <osDelay>
 80020e8:	e7fa      	b.n	80020e0 <startDefaultTask+0xc>
	...

080020ec <read_CAN_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_CAN_task */
void read_CAN_task(void const * argument)
{
 80020ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ee:	b093      	sub	sp, #76	; 0x4c
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6178      	str	r0, [r7, #20]

  /* Infinite loop */
  while (1) {
    //printf("read_CAN_task()\n\r");
    /* Wait for thread flags to be set in the CAN Rx FIFO0 Interrupt Callback */
    osSignalWait(CAN_READY, osWaitForever);
 80020f4:	463b      	mov	r3, r7
 80020f6:	f04f 32ff 	mov.w	r2, #4294967295
 80020fa:	2101      	movs	r1, #1
 80020fc:	4618      	mov	r0, r3
 80020fe:	f007 fe41 	bl	8009d84 <osSignalWait>
     * Once empty, wait for flag again.
     */

    /* Get CAN Message from Queue */
    while(1) {
      uint8_t radio_buffer[CAN_BUFFER_LEN] = {0};
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	f107 0320 	add.w	r3, r7, #32
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	60da      	str	r2, [r3, #12]
 8002114:	611a      	str	r2, [r3, #16]
      evt = osMessageGet(CAN_MSG_Rx_Queue, osWaitForever);
 8002116:	4b50      	ldr	r3, [pc, #320]	; (8002258 <read_CAN_task+0x16c>)
 8002118:	6819      	ldr	r1, [r3, #0]
 800211a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800211e:	f04f 32ff 	mov.w	r2, #4294967295
 8002122:	4618      	mov	r0, r3
 8002124:	f007 ffe2 	bl	800a0ec <osMessageGet>
      if (evt.status == osEventMessage) {
 8002128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800212a:	2b10      	cmp	r3, #16
 800212c:	d1e2      	bne.n	80020f4 <read_CAN_task+0x8>
	  HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 800212e:	2102      	movs	r1, #2
 8002130:	484a      	ldr	r0, [pc, #296]	; (800225c <read_CAN_task+0x170>)
 8002132:	f003 fbd8 	bl	80058e6 <HAL_GPIO_TogglePin>
	  rx_CAN_msg = evt.value.p; // Get pointer from the queue union
 8002136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002138:	643b      	str	r3, [r7, #64]	; 0x40
	 // 22: '\r'             // TODO: Do we need this? maybe just use \0 instead?
	 // 23: '\n'

	 /* TIMESTAMP */

	 for (uint8_t i = 0; i < 8; i++) {
 800213a:	2300      	movs	r3, #0
 800213c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002140:	e021      	b.n	8002186 <read_CAN_task+0x9a>
//	   radio_buffer[7 - i] = GET_BYTE_FROM_WORD(i, current_timestamp.double_as_int);
	   radio_buffer[7 - i] = (char) GET_BYTE_FROM_WORD(i, rx_CAN_msg->timestamp.double_as_int);
 8002142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002144:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002148:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800214c:	00c9      	lsls	r1, r1, #3
 800214e:	f1c1 0620 	rsb	r6, r1, #32
 8002152:	f1a1 0020 	sub.w	r0, r1, #32
 8002156:	fa22 f401 	lsr.w	r4, r2, r1
 800215a:	fa03 f606 	lsl.w	r6, r3, r6
 800215e:	4334      	orrs	r4, r6
 8002160:	fa23 f000 	lsr.w	r0, r3, r0
 8002164:	4304      	orrs	r4, r0
 8002166:	fa23 f501 	lsr.w	r5, r3, r1
 800216a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800216e:	f1c3 0307 	rsb	r3, r3, #7
 8002172:	b2e2      	uxtb	r2, r4
 8002174:	3348      	adds	r3, #72	; 0x48
 8002176:	443b      	add	r3, r7
 8002178:	f803 2c2c 	strb.w	r2, [r3, #-44]
	 for (uint8_t i = 0; i < 8; i++) {
 800217c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002180:	3301      	adds	r3, #1
 8002182:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002186:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800218a:	2b07      	cmp	r3, #7
 800218c:	d9d9      	bls.n	8002142 <read_CAN_task+0x56>
	 }

	 /* CAN MESSAGE IDENTIFIER */
	 radio_buffer[8] = '#';
 800218e:	2323      	movs	r3, #35	; 0x23
 8002190:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	 /* CAN ID */ // TODO: Check if this is correct. Are the 0 bytes in the STD in the correct spot?
	 if (rx_CAN_msg->header.IDE == CAN_ID_STD)
 8002194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10b      	bne.n	80021b4 <read_CAN_task+0xc8>
	 {
	   radio_buffer[12]  = 0xFF & (rx_CAN_msg->header.StdId);
 800219c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	   radio_buffer[11] = 0xFF & (rx_CAN_msg->header.StdId >> 8);
 80021a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	0a1b      	lsrs	r3, r3, #8
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80021b2:	e01a      	b.n	80021ea <read_CAN_task+0xfe>
	 }
	 else if (rx_CAN_msg->header.IDE == CAN_ID_EXT)
 80021b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d116      	bne.n	80021ea <read_CAN_task+0xfe>
	 {
	   radio_buffer[12]  = 0xFF & (rx_CAN_msg->header.ExtId);
 80021bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	   radio_buffer[11] = 0xFF & (rx_CAN_msg->header.ExtId >> 8);
 80021c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	0a1b      	lsrs	r3, r3, #8
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	   radio_buffer[10] = 0xFF & (rx_CAN_msg->header.ExtId >> 16);
 80021d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	0c1b      	lsrs	r3, r3, #16
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	   radio_buffer[9] = 0xFF & (rx_CAN_msg->header.ExtId >> 24);
 80021de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	0e1b      	lsrs	r3, r3, #24
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	 }

	 /* CAN DATA */
	 for (uint8_t i = 0; i < 8; i++) {
 80021ea:	2300      	movs	r3, #0
 80021ec:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80021f0:	e010      	b.n	8002214 <read_CAN_task+0x128>
	   radio_buffer[13 + i] = rx_CAN_msg->data[i];
 80021f2:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80021f6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80021fa:	330d      	adds	r3, #13
 80021fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80021fe:	440a      	add	r2, r1
 8002200:	7f12      	ldrb	r2, [r2, #28]
 8002202:	3348      	adds	r3, #72	; 0x48
 8002204:	443b      	add	r3, r7
 8002206:	f803 2c2c 	strb.w	r2, [r3, #-44]
	 for (uint8_t i = 0; i < 8; i++) {
 800220a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800220e:	3301      	adds	r3, #1
 8002210:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002214:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002218:	2b07      	cmp	r3, #7
 800221a:	d9ea      	bls.n	80021f2 <read_CAN_task+0x106>
	 }

	 /* CAN DATA LENGTH */
	 radio_buffer[21] = rx_CAN_msg->header.DLC & 0xF;
 800221c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	b2db      	uxtb	r3, r3
 8002228:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	 /* CARRIAGE RETURN */
	 radio_buffer[CAN_BUFFER_LEN - 2] = '\r';
 800222c:	230d      	movs	r3, #13
 800222e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	 /* NEW LINE */
	 radio_buffer[CAN_BUFFER_LEN - 1] = '\n';
 8002232:	230a      	movs	r3, #10
 8002234:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

//	 sd_append_as_hexnums(logfile, radio_buffer, CAN_BUFFER_LEN);

	 /* Transmit over Radio */
	 HAL_UART_Transmit(&huart1, radio_buffer, sizeof(radio_buffer), 1000);
 8002238:	f107 011c 	add.w	r1, r7, #28
 800223c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002240:	2218      	movs	r2, #24
 8002242:	4807      	ldr	r0, [pc, #28]	; (8002260 <read_CAN_task+0x174>)
 8002244:	f007 fa8a 	bl	800975c <HAL_UART_Transmit>
//	   /* Convert radio_buffer to hex_string so it can be logged. MUST NOT USE strlen */
//	   sd_append_as_hexnums(logfile, radio_buffer, CAN_BUFFER_LEN);
//	 }

	/* Free the memory allocated for this message */
	osPoolFree(CAN_MSG_memory_pool, rx_CAN_msg);
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <read_CAN_task+0x178>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800224e:	4618      	mov	r0, r3
 8002250:	f007 fea3 	bl	8009f9a <osPoolFree>
    while(1) {
 8002254:	e755      	b.n	8002102 <read_CAN_task+0x16>
 8002256:	bf00      	nop
 8002258:	20000390 	.word	0x20000390
 800225c:	40010800 	.word	0x40010800
 8002260:	20000874 	.word	0x20000874
 8002264:	2000038c 	.word	0x2000038c

08002268 <read_IMU_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_IMU_task */
void read_IMU_task(void const * argument)
{
 8002268:	b5b0      	push	{r4, r5, r7, lr}
 800226a:	b0ba      	sub	sp, #232	; 0xe8
 800226c:	af04      	add	r7, sp, #16
 800226e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  while(1)
  {
    //printf("read_IMU_task()\n\r");
    /* Initialize a IMU buffer */
    uint8_t imu_buffer[IMU_MESSAGE_LEN] = {0};
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002276:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	605a      	str	r2, [r3, #4]
 8002280:	609a      	str	r2, [r3, #8]
 8002282:	731a      	strb	r2, [r3, #12]

    union FloatBytes ax_x, ax_y, ax_z, gy_x, gy_y, gy_z;

    /* Read accelerator data */
    uint8_t accel_data[NUM_ACCEL_BYTES];
    HAL_StatusTypeDef imu_status = HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

    imu_status |= HAL_I2C_Mem_Read(&hi2c2, IMU_DEVICE_ADDRESS, ACCEL_XOUT_H_REG, 1, accel_data, NUM_ACCEL_BYTES, 1000);
 800228a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800228e:	9302      	str	r3, [sp, #8]
 8002290:	2306      	movs	r3, #6
 8002292:	9301      	str	r3, [sp, #4]
 8002294:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	2301      	movs	r3, #1
 800229c:	223b      	movs	r2, #59	; 0x3b
 800229e:	21d0      	movs	r1, #208	; 0xd0
 80022a0:	48d1      	ldr	r0, [pc, #836]	; (80025e8 <read_IMU_task+0x380>)
 80022a2:	f003 ffe3 	bl	800626c <HAL_I2C_Mem_Read>
 80022a6:	4603      	mov	r3, r0
 80022a8:	461a      	mov	r2, r3
 80022aa:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

    uint16_t Accel_X_RAW = (uint16_t)(accel_data[0] << 8 | accel_data[1]);
 80022b4:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80022b8:	021b      	lsls	r3, r3, #8
 80022ba:	b21a      	sxth	r2, r3
 80022bc:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80022c0:	b21b      	sxth	r3, r3
 80022c2:	4313      	orrs	r3, r2
 80022c4:	b21b      	sxth	r3, r3
 80022c6:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
    uint16_t Accel_Y_RAW = (uint16_t)(accel_data[2] << 8 | accel_data[3]);
 80022ca:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	b21a      	sxth	r2, r3
 80022d2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80022d6:	b21b      	sxth	r3, r3
 80022d8:	4313      	orrs	r3, r2
 80022da:	b21b      	sxth	r3, r3
 80022dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
    uint16_t Accel_Z_RAW = (uint16_t)(accel_data[4] << 8 | accel_data[5]);
 80022e0:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80022e4:	021b      	lsls	r3, r3, #8
 80022e6:	b21a      	sxth	r2, r3
 80022e8:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 80022ec:	b21b      	sxth	r3, r3
 80022ee:	4313      	orrs	r3, r2
 80022f0:	b21b      	sxth	r3, r3
 80022f2:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
    /*
     * Convert the RAW values into acceleration in 'g' we have to divide according to the Full scale value
     * set in FS_SEL. Have configured FS_SEL = 0. So I am dividing by 16384.0
     * For more details check ACCEL_CONFIG Register.
     */
    ax_x.float_value = Accel_X_RAW / 16384.0;  // get the float g
 80022f6:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe f8fc 	bl	80004f8 <__aeabi_i2d>
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	4bb9      	ldr	r3, [pc, #740]	; (80025ec <read_IMU_task+0x384>)
 8002306:	f7fe fa8b 	bl	8000820 <__aeabi_ddiv>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4610      	mov	r0, r2
 8002310:	4619      	mov	r1, r3
 8002312:	f7fe fc53 	bl	8000bbc <__aeabi_d2f>
 8002316:	4603      	mov	r3, r0
 8002318:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    ax_y.float_value = Accel_Y_RAW / 16384.0;
 800231c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe f8e9 	bl	80004f8 <__aeabi_i2d>
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	4bb0      	ldr	r3, [pc, #704]	; (80025ec <read_IMU_task+0x384>)
 800232c:	f7fe fa78 	bl	8000820 <__aeabi_ddiv>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4610      	mov	r0, r2
 8002336:	4619      	mov	r1, r3
 8002338:	f7fe fc40 	bl	8000bbc <__aeabi_d2f>
 800233c:	4603      	mov	r3, r0
 800233e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    ax_z.float_value = Accel_Z_RAW / 16384.0;
 8002342:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe f8d6 	bl	80004f8 <__aeabi_i2d>
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	4ba6      	ldr	r3, [pc, #664]	; (80025ec <read_IMU_task+0x384>)
 8002352:	f7fe fa65 	bl	8000820 <__aeabi_ddiv>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4610      	mov	r0, r2
 800235c:	4619      	mov	r1, r3
 800235e:	f7fe fc2d 	bl	8000bbc <__aeabi_d2f>
 8002362:	4603      	mov	r3, r0
 8002364:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    /* Read gyroscope data */
    uint8_t gyro_data[NUM_GYRO_BYTES];

    imu_status |= HAL_I2C_Mem_Read(&hi2c2, IMU_DEVICE_ADDRESS, GYRO_XOUT_H_REG, 1, gyro_data, NUM_GYRO_BYTES, 1000);
 8002368:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800236c:	9302      	str	r3, [sp, #8]
 800236e:	2306      	movs	r3, #6
 8002370:	9301      	str	r3, [sp, #4]
 8002372:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	2301      	movs	r3, #1
 800237a:	2243      	movs	r2, #67	; 0x43
 800237c:	21d0      	movs	r1, #208	; 0xd0
 800237e:	489a      	ldr	r0, [pc, #616]	; (80025e8 <read_IMU_task+0x380>)
 8002380:	f003 ff74 	bl	800626c <HAL_I2C_Mem_Read>
 8002384:	4603      	mov	r3, r0
 8002386:	461a      	mov	r2, r3
 8002388:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800238c:	4313      	orrs	r3, r2
 800238e:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
    uint16_t Gyro_X_RAW = (uint16_t)(gyro_data[0] << 8 | gyro_data[1]);
 8002392:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8002396:	021b      	lsls	r3, r3, #8
 8002398:	b21a      	sxth	r2, r3
 800239a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800239e:	b21b      	sxth	r3, r3
 80023a0:	4313      	orrs	r3, r2
 80023a2:	b21b      	sxth	r3, r3
 80023a4:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
    uint16_t Gyro_Y_RAW = (uint16_t)(gyro_data[2] << 8 | gyro_data[3]);
 80023a8:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80023ac:	021b      	lsls	r3, r3, #8
 80023ae:	b21a      	sxth	r2, r3
 80023b0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80023b4:	b21b      	sxth	r3, r3
 80023b6:	4313      	orrs	r3, r2
 80023b8:	b21b      	sxth	r3, r3
 80023ba:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
    uint16_t Gyro_Z_RAW = (uint16_t)(gyro_data[4] << 8 | gyro_data[5]);
 80023be:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80023c2:	021b      	lsls	r3, r3, #8
 80023c4:	b21a      	sxth	r2, r3
 80023c6:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80023ca:	b21b      	sxth	r3, r3
 80023cc:	4313      	orrs	r3, r2
 80023ce:	b21b      	sxth	r3, r3
 80023d0:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
    /*
     * Convert the RAW values into dps (degrees/s) we have to divide according to the
     * Full scale value set in FS_SEL. Have configured FS_SEL = 0.
     * So I am dividing by 131.0. For more details check GYRO_CONFIG Register
     */
    gy_x.float_value = Gyro_X_RAW / 131.0;  // get the float g
 80023d4:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe f88d 	bl	80004f8 <__aeabi_i2d>
 80023de:	a380      	add	r3, pc, #512	; (adr r3, 80025e0 <read_IMU_task+0x378>)
 80023e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e4:	f7fe fa1c 	bl	8000820 <__aeabi_ddiv>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4610      	mov	r0, r2
 80023ee:	4619      	mov	r1, r3
 80023f0:	f7fe fbe4 	bl	8000bbc <__aeabi_d2f>
 80023f4:	4603      	mov	r3, r0
 80023f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    gy_y.float_value = Gyro_Y_RAW / 131.0;
 80023fa:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe f87a 	bl	80004f8 <__aeabi_i2d>
 8002404:	a376      	add	r3, pc, #472	; (adr r3, 80025e0 <read_IMU_task+0x378>)
 8002406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240a:	f7fe fa09 	bl	8000820 <__aeabi_ddiv>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	4610      	mov	r0, r2
 8002414:	4619      	mov	r1, r3
 8002416:	f7fe fbd1 	bl	8000bbc <__aeabi_d2f>
 800241a:	4603      	mov	r3, r0
 800241c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    gy_z.float_value = Gyro_Z_RAW / 131.0;
 8002420:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8002424:	4618      	mov	r0, r3
 8002426:	f7fe f867 	bl	80004f8 <__aeabi_i2d>
 800242a:	a36d      	add	r3, pc, #436	; (adr r3, 80025e0 <read_IMU_task+0x378>)
 800242c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002430:	f7fe f9f6 	bl	8000820 <__aeabi_ddiv>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4610      	mov	r0, r2
 800243a:	4619      	mov	r1, r3
 800243c:	f7fe fbbe 	bl	8000bbc <__aeabi_d2f>
 8002440:	4603      	mov	r3, r0
 8002442:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    /* Verify IMU is connected */
    // check_IMU_result(ax_x, ax_y, ax_z, gy_x, gy_y, gy_z); // TODO set flag

    /* Get current epoch Time Stamp */
    union DoubleBytes current_timestamp;
    current_timestamp.double_value = get_current_timestamp();
 8002446:	f001 fdb5 	bl	8003fb4 <get_current_timestamp>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
//    transmit_imu_data(current_timestamp.double_as_int, gy_z.bytes, 'G', 'Z');

    CAN_Radio_msg_t x_axis_data, y_axis_data, z_axis_data;

    /* Set headers */
    x_axis_data.header = IMU_x_axis_header;
 8002452:	4b67      	ldr	r3, [pc, #412]	; (80025f0 <read_IMU_task+0x388>)
 8002454:	f107 0408 	add.w	r4, r7, #8
 8002458:	461d      	mov	r5, r3
 800245a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800245c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800245e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002462:	e884 0003 	stmia.w	r4, {r0, r1}
    y_axis_data.header = IMU_y_axis_header;
 8002466:	4b63      	ldr	r3, [pc, #396]	; (80025f4 <read_IMU_task+0x38c>)
 8002468:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800246c:	461d      	mov	r5, r3
 800246e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002470:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002472:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002476:	e884 0003 	stmia.w	r4, {r0, r1}
    z_axis_data.header = IMU_z_axis_header;
 800247a:	4b5f      	ldr	r3, [pc, #380]	; (80025f8 <read_IMU_task+0x390>)
 800247c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002480:	461d      	mov	r5, r3
 8002482:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002484:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002486:	e895 0003 	ldmia.w	r5, {r0, r1}
 800248a:	e884 0003 	stmia.w	r4, {r0, r1}

    /* Assign the timestamp */
    x_axis_data.timestamp = current_timestamp;
 800248e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002492:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    y_axis_data.timestamp = current_timestamp;
 8002496:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800249a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    z_axis_data.timestamp = current_timestamp;
 800249e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80024a2:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

    for (int i = 0; i < 4; i++) {
 80024a6:	2300      	movs	r3, #0
 80024a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80024ac:	e058      	b.n	8002560 <read_IMU_task+0x2f8>
	// X-axis data
	x_axis_data.data[3-i] = ax_x.bytes[i];
 80024ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024b2:	f1c3 0303 	rsb	r3, r3, #3
 80024b6:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80024ba:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80024be:	440a      	add	r2, r1
 80024c0:	7812      	ldrb	r2, [r2, #0]
 80024c2:	33d8      	adds	r3, #216	; 0xd8
 80024c4:	443b      	add	r3, r7
 80024c6:	f803 2cb8 	strb.w	r2, [r3, #-184]
	x_axis_data.data[7-i] = gy_x.bytes[i];
 80024ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024ce:	f1c3 0307 	rsb	r3, r3, #7
 80024d2:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80024d6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80024da:	440a      	add	r2, r1
 80024dc:	7812      	ldrb	r2, [r2, #0]
 80024de:	33d8      	adds	r3, #216	; 0xd8
 80024e0:	443b      	add	r3, r7
 80024e2:	f803 2cb8 	strb.w	r2, [r3, #-184]

	// Y-axis data
	y_axis_data.data[3-i] = ax_y.bytes[i];
 80024e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024ea:	f1c3 0303 	rsb	r3, r3, #3
 80024ee:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80024f2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80024f6:	440a      	add	r2, r1
 80024f8:	7812      	ldrb	r2, [r2, #0]
 80024fa:	33d8      	adds	r3, #216	; 0xd8
 80024fc:	443b      	add	r3, r7
 80024fe:	f803 2c90 	strb.w	r2, [r3, #-144]
	y_axis_data.data[7-i] = gy_y.bytes[i];
 8002502:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002506:	f1c3 0307 	rsb	r3, r3, #7
 800250a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800250e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002512:	440a      	add	r2, r1
 8002514:	7812      	ldrb	r2, [r2, #0]
 8002516:	33d8      	adds	r3, #216	; 0xd8
 8002518:	443b      	add	r3, r7
 800251a:	f803 2c90 	strb.w	r2, [r3, #-144]

	// Z-axis data
	z_axis_data.data[3-i] = ax_z.bytes[i];
 800251e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002522:	f1c3 0303 	rsb	r3, r3, #3
 8002526:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800252a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800252e:	440a      	add	r2, r1
 8002530:	7812      	ldrb	r2, [r2, #0]
 8002532:	33d8      	adds	r3, #216	; 0xd8
 8002534:	443b      	add	r3, r7
 8002536:	f803 2c68 	strb.w	r2, [r3, #-104]
	z_axis_data.data[7-i] = gy_z.bytes[i];
 800253a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800253e:	f1c3 0307 	rsb	r3, r3, #7
 8002542:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8002546:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800254a:	440a      	add	r2, r1
 800254c:	7812      	ldrb	r2, [r2, #0]
 800254e:	33d8      	adds	r3, #216	; 0xd8
 8002550:	443b      	add	r3, r7
 8002552:	f803 2c68 	strb.w	r2, [r3, #-104]
    for (int i = 0; i < 4; i++) {
 8002556:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800255a:	3301      	adds	r3, #1
 800255c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002560:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002564:	2b03      	cmp	r3, #3
 8002566:	dda2      	ble.n	80024ae <read_IMU_task+0x246>
    }

    /* Transmit the messages */
    HAL_CAN_AddTxMessage(&hcan, &x_axis_data.header, x_axis_data.data, &can_mailbox);
 8002568:	f107 0308 	add.w	r3, r7, #8
 800256c:	f103 0218 	add.w	r2, r3, #24
 8002570:	f107 0108 	add.w	r1, r7, #8
 8002574:	4b21      	ldr	r3, [pc, #132]	; (80025fc <read_IMU_task+0x394>)
 8002576:	4822      	ldr	r0, [pc, #136]	; (8002600 <read_IMU_task+0x398>)
 8002578:	f002 fada 	bl	8004b30 <HAL_CAN_AddTxMessage>
    send_CAN_Radio(&x_axis_data);
 800257c:	f107 0308 	add.w	r3, r7, #8
 8002580:	4618      	mov	r0, r3
 8002582:	f000 facb 	bl	8002b1c <send_CAN_Radio>

    HAL_CAN_AddTxMessage(&hcan, &y_axis_data.header, y_axis_data.data, &can_mailbox);
 8002586:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800258a:	f103 0218 	add.w	r2, r3, #24
 800258e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002592:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <read_IMU_task+0x394>)
 8002594:	481a      	ldr	r0, [pc, #104]	; (8002600 <read_IMU_task+0x398>)
 8002596:	f002 facb 	bl	8004b30 <HAL_CAN_AddTxMessage>
    send_CAN_Radio(&y_axis_data);
 800259a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 fabc 	bl	8002b1c <send_CAN_Radio>

    HAL_CAN_AddTxMessage(&hcan, &z_axis_data.header, z_axis_data.data, &can_mailbox);
 80025a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80025a8:	f103 0218 	add.w	r2, r3, #24
 80025ac:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80025b0:	4b12      	ldr	r3, [pc, #72]	; (80025fc <read_IMU_task+0x394>)
 80025b2:	4813      	ldr	r0, [pc, #76]	; (8002600 <read_IMU_task+0x398>)
 80025b4:	f002 fabc 	bl	8004b30 <HAL_CAN_AddTxMessage>
    send_CAN_Radio(&z_axis_data);
 80025b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80025bc:	4618      	mov	r0, r3
 80025be:	f000 faad 	bl	8002b1c <send_CAN_Radio>

    // Update diagnostics
    g_tel_diagnostics.imu_fail = (imu_status != HAL_OK);
 80025c2:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	bf14      	ite	ne
 80025ca:	2301      	movne	r3, #1
 80025cc:	2300      	moveq	r3, #0
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <read_IMU_task+0x39c>)
 80025d2:	709a      	strb	r2, [r3, #2]

    /* Delay */
    osDelay(READ_IMU_DELAY * 5); // 500 ms
 80025d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025d8:	f007 fb80 	bl	8009cdc <osDelay>
  {
 80025dc:	e648      	b.n	8002270 <read_IMU_task+0x8>
 80025de:	bf00      	nop
 80025e0:	00000000 	.word	0x00000000
 80025e4:	40606000 	.word	0x40606000
 80025e8:	200006b0 	.word	0x200006b0
 80025ec:	40d00000 	.word	0x40d00000
 80025f0:	20000030 	.word	0x20000030
 80025f4:	20000048 	.word	0x20000048
 80025f8:	20000060 	.word	0x20000060
 80025fc:	20000350 	.word	0x20000350
 8002600:	20000354 	.word	0x20000354
 8002604:	20000704 	.word	0x20000704

08002608 <read_GPS_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_GPS_task */
void read_GPS_task(void const * argument)
{
 8002608:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800260c:	f5ad 7d79 	sub.w	sp, sp, #996	; 0x3e4
 8002610:	af02      	add	r7, sp, #8
 8002612:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8002616:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 800261a:	6018      	str	r0, [r3, #0]
    /* Initialize buffers */
    //printf("read_GPS_task()\n\r");
    uint8_t receive_buffer[GPS_RCV_BUFFER_SIZE];
    GPS gps_data;
    GPS_msg_t gps_message;
    uint8_t gps_buffer[GPS_MESSAGE_LEN] = {0};
 800261c:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8002620:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	3304      	adds	r3, #4
 800262a:	22c4      	movs	r2, #196	; 0xc4
 800262c:	2100      	movs	r1, #0
 800262e:	4618      	mov	r0, r3
 8002630:	f00b fd8f 	bl	800e152 <memset>

    /* Read in an NMEA message into the buffer */
    if(HAL_I2C_IsDeviceReady(&hi2c1, GPS_DEVICE_ADDRESS, 1, HAL_MAX_DELAY) == HAL_OK) {
 8002634:	f04f 33ff 	mov.w	r3, #4294967295
 8002638:	2201      	movs	r2, #1
 800263a:	2184      	movs	r1, #132	; 0x84
 800263c:	48cf      	ldr	r0, [pc, #828]	; (800297c <read_GPS_task+0x374>)
 800263e:	f004 f87d 	bl	800673c <HAL_I2C_IsDeviceReady>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10a      	bne.n	800265e <read_GPS_task+0x56>
	    HAL_I2C_Master_Receive(&hi2c1, GPS_DEVICE_ADDRESS, receive_buffer, sizeof(receive_buffer), HAL_MAX_DELAY);
 8002648:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 800264c:	f04f 33ff 	mov.w	r3, #4294967295
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002656:	2184      	movs	r1, #132	; 0x84
 8002658:	48c8      	ldr	r0, [pc, #800]	; (800297c <read_GPS_task+0x374>)
 800265a:	f003 faa1 	bl	8005ba0 <HAL_I2C_Master_Receive>
    }

    /* Parse the buffer data --> gets stored in gps_data; */
    nmea_parse(&gps_data, &receive_buffer);
 800265e:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8002662:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f001 fa0f 	bl	8003a8c <nmea_parse>
    /* Transmit the NMEA message over UART to radio */
//    HAL_UART_Transmit(&huart1, gps_buffer, sizeof(gps_buffer), 1000);

    /* Get current epoch Time Stamp */
    union DoubleBytes current_timestamp;
    current_timestamp.double_value = get_current_timestamp();
 800266e:	f001 fca1 	bl	8003fb4 <get_current_timestamp>
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
 8002676:	e9c7 23f2 	strd	r2, r3, [r7, #968]	; 0x3c8
    CAN_Radio_msg_t latitude_msg, longitude_msg, altitude_hdop_msg, side_and_count_msg;
    union DoubleBytes latitude_bytes, longitude_bytes;
    union FloatBytes altitude_bytes, hdop_bytes;

    /* Assign headers */
    latitude_msg.header = GPS_latitude_header;
 800267a:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 800267e:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8002682:	4abf      	ldr	r2, [pc, #764]	; (8002980 <read_GPS_task+0x378>)
 8002684:	461e      	mov	r6, r3
 8002686:	4694      	mov	ip, r2
 8002688:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800268c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800268e:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8002692:	e886 0003 	stmia.w	r6, {r0, r1}
    longitude_msg.header = GPS_longitude_header;
 8002696:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 800269a:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800269e:	4ab9      	ldr	r2, [pc, #740]	; (8002984 <read_GPS_task+0x37c>)
 80026a0:	461e      	mov	r6, r3
 80026a2:	4694      	mov	ip, r2
 80026a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80026a8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80026aa:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80026ae:	e886 0003 	stmia.w	r6, {r0, r1}
    altitude_hdop_msg.header = GPS_altitude_hdop_header;
 80026b2:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80026b6:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80026ba:	4ab3      	ldr	r2, [pc, #716]	; (8002988 <read_GPS_task+0x380>)
 80026bc:	461e      	mov	r6, r3
 80026be:	4694      	mov	ip, r2
 80026c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80026c4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80026c6:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80026ca:	e886 0003 	stmia.w	r6, {r0, r1}
    side_and_count_msg.header = GPS_side_count_header;
 80026ce:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80026d2:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 80026d6:	4aad      	ldr	r2, [pc, #692]	; (800298c <read_GPS_task+0x384>)
 80026d8:	461e      	mov	r6, r3
 80026da:	4694      	mov	ip, r2
 80026dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80026e0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80026e2:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80026e6:	e886 0003 	stmia.w	r6, {r0, r1}

    /* Assign timestamps */
    latitude_msg.timestamp = current_timestamp;
 80026ea:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80026ee:	f5a3 7174 	sub.w	r1, r3, #976	; 0x3d0
 80026f2:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 80026f6:	e9c1 2308 	strd	r2, r3, [r1, #32]
    longitude_msg.timestamp = current_timestamp;
 80026fa:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80026fe:	f5a3 716a 	sub.w	r1, r3, #936	; 0x3a8
 8002702:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 8002706:	e9c1 2308 	strd	r2, r3, [r1, #32]
    altitude_hdop_msg.timestamp = current_timestamp;
 800270a:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 800270e:	f5a3 7160 	sub.w	r1, r3, #896	; 0x380
 8002712:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 8002716:	e9c1 2308 	strd	r2, r3, [r1, #32]
    side_and_count_msg.timestamp = current_timestamp;
 800271a:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 800271e:	f5a3 7156 	sub.w	r1, r3, #856	; 0x358
 8002722:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 8002726:	e9c1 2308 	strd	r2, r3, [r1, #32]

    /* Assign data as double/float so it can be read as uint64/uint8x4 */
    latitude_bytes.double_value = gps_data.latitude;
 800272a:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 800272e:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8002732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002736:	e9c7 23f0 	strd	r2, r3, [r7, #960]	; 0x3c0
    longitude_bytes.double_value = gps_data.longitude;
 800273a:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 800273e:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8002742:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002746:	e9c7 23ee 	strd	r2, r3, [r7, #952]	; 0x3b8
    altitude_bytes.float_value = gps_data.altitude;
 800274a:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 800274e:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
    hdop_bytes.float_value = gps_data.hdop;
 8002758:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 800275c:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0

    for  (uint8_t i=0; i < 8; i++) {
 8002766:	2300      	movs	r3, #0
 8002768:	f887 33d7 	strb.w	r3, [r7, #983]	; 0x3d7
 800276c:	e069      	b.n	8002842 <read_GPS_task+0x23a>
	latitude_msg.data[7 - i] = GET_BYTE_FROM_WORD(i, latitude_bytes.double_as_int);
 800276e:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 8002772:	f897 13d7 	ldrb.w	r1, [r7, #983]	; 0x3d7
 8002776:	00c9      	lsls	r1, r1, #3
 8002778:	f1c1 0620 	rsb	r6, r1, #32
 800277c:	f1a1 0020 	sub.w	r0, r1, #32
 8002780:	fa22 f401 	lsr.w	r4, r2, r1
 8002784:	fa03 f606 	lsl.w	r6, r3, r6
 8002788:	4334      	orrs	r4, r6
 800278a:	fa23 f000 	lsr.w	r0, r3, r0
 800278e:	4304      	orrs	r4, r0
 8002790:	fa23 f501 	lsr.w	r5, r3, r1
 8002794:	f897 33d7 	ldrb.w	r3, [r7, #983]	; 0x3d7
 8002798:	f1c3 0307 	rsb	r3, r3, #7
 800279c:	b2e1      	uxtb	r1, r4
 800279e:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 80027a2:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 80027a6:	4413      	add	r3, r2
 80027a8:	460a      	mov	r2, r1
 80027aa:	761a      	strb	r2, [r3, #24]
	longitude_msg.data[7 - i] = GET_BYTE_FROM_WORD(i, longitude_bytes.double_as_int);
 80027ac:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 80027b0:	f897 13d7 	ldrb.w	r1, [r7, #983]	; 0x3d7
 80027b4:	00c9      	lsls	r1, r1, #3
 80027b6:	f1c1 0620 	rsb	r6, r1, #32
 80027ba:	f1a1 0020 	sub.w	r0, r1, #32
 80027be:	fa22 f801 	lsr.w	r8, r2, r1
 80027c2:	fa03 f606 	lsl.w	r6, r3, r6
 80027c6:	ea48 0806 	orr.w	r8, r8, r6
 80027ca:	fa23 f000 	lsr.w	r0, r3, r0
 80027ce:	ea48 0800 	orr.w	r8, r8, r0
 80027d2:	fa23 f901 	lsr.w	r9, r3, r1
 80027d6:	f897 33d7 	ldrb.w	r3, [r7, #983]	; 0x3d7
 80027da:	f1c3 0307 	rsb	r3, r3, #7
 80027de:	fa5f f188 	uxtb.w	r1, r8
 80027e2:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 80027e6:	f5a2 726a 	sub.w	r2, r2, #936	; 0x3a8
 80027ea:	4413      	add	r3, r2
 80027ec:	460a      	mov	r2, r1
 80027ee:	761a      	strb	r2, [r3, #24]
	altitude_hdop_msg.data[3 - i] = altitude_bytes.bytes[i];
 80027f0:	f897 23d7 	ldrb.w	r2, [r7, #983]	; 0x3d7
 80027f4:	f897 33d7 	ldrb.w	r3, [r7, #983]	; 0x3d7
 80027f8:	f1c3 0303 	rsb	r3, r3, #3
 80027fc:	f502 7276 	add.w	r2, r2, #984	; 0x3d8
 8002800:	443a      	add	r2, r7
 8002802:	f812 1c24 	ldrb.w	r1, [r2, #-36]
 8002806:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 800280a:	f5a2 7260 	sub.w	r2, r2, #896	; 0x380
 800280e:	4413      	add	r3, r2
 8002810:	460a      	mov	r2, r1
 8002812:	761a      	strb	r2, [r3, #24]
	altitude_hdop_msg.data[7 - i] = hdop_bytes.bytes[i];
 8002814:	f897 23d7 	ldrb.w	r2, [r7, #983]	; 0x3d7
 8002818:	f897 33d7 	ldrb.w	r3, [r7, #983]	; 0x3d7
 800281c:	f1c3 0307 	rsb	r3, r3, #7
 8002820:	f502 7276 	add.w	r2, r2, #984	; 0x3d8
 8002824:	443a      	add	r2, r7
 8002826:	f812 1c28 	ldrb.w	r1, [r2, #-40]
 800282a:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 800282e:	f5a2 7260 	sub.w	r2, r2, #896	; 0x380
 8002832:	4413      	add	r3, r2
 8002834:	460a      	mov	r2, r1
 8002836:	761a      	strb	r2, [r3, #24]
    for  (uint8_t i=0; i < 8; i++) {
 8002838:	f897 33d7 	ldrb.w	r3, [r7, #983]	; 0x3d7
 800283c:	3301      	adds	r3, #1
 800283e:	f887 33d7 	strb.w	r3, [r7, #983]	; 0x3d7
 8002842:	f897 33d7 	ldrb.w	r3, [r7, #983]	; 0x3d7
 8002846:	2b07      	cmp	r3, #7
 8002848:	d991      	bls.n	800276e <read_GPS_task+0x166>
    }

    /* Satellite Count Cast */
    uint32_t sat_count = (uint32_t) gps_data.satelliteCount;
 800284a:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 800284e:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
    side_and_count_msg.data[0] = gps_data.latSide;
 8002858:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 800285c:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8002860:	7a1a      	ldrb	r2, [r3, #8]
 8002862:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8002866:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 800286a:	761a      	strb	r2, [r3, #24]
    side_and_count_msg.data[1] = gps_data.lonSide;
 800286c:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8002870:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8002874:	7e1a      	ldrb	r2, [r3, #24]
 8002876:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 800287a:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 800287e:	765a      	strb	r2, [r3, #25]
    for  (uint8_t i=0; i < 4; i++) {
 8002880:	2300      	movs	r3, #0
 8002882:	f887 33d6 	strb.w	r3, [r7, #982]	; 0x3d6
 8002886:	e01c      	b.n	80028c2 <read_GPS_task+0x2ba>
	side_and_count_msg.data[5 - i] = ((sat_count >> (8 * i)) && 0xFF);
 8002888:	f897 33d6 	ldrb.w	r3, [r7, #982]	; 0x3d6
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 8002892:	fa22 f303 	lsr.w	r3, r2, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	bf14      	ite	ne
 800289a:	2301      	movne	r3, #1
 800289c:	2300      	moveq	r3, #0
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	f897 33d6 	ldrb.w	r3, [r7, #982]	; 0x3d6
 80028a4:	f1c3 0305 	rsb	r3, r3, #5
 80028a8:	4611      	mov	r1, r2
 80028aa:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 80028ae:	f5a2 7256 	sub.w	r2, r2, #856	; 0x358
 80028b2:	4413      	add	r3, r2
 80028b4:	460a      	mov	r2, r1
 80028b6:	761a      	strb	r2, [r3, #24]
    for  (uint8_t i=0; i < 4; i++) {
 80028b8:	f897 33d6 	ldrb.w	r3, [r7, #982]	; 0x3d6
 80028bc:	3301      	adds	r3, #1
 80028be:	f887 33d6 	strb.w	r3, [r7, #982]	; 0x3d6
 80028c2:	f897 33d6 	ldrb.w	r3, [r7, #982]	; 0x3d6
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d9de      	bls.n	8002888 <read_GPS_task+0x280>
    }
    side_and_count_msg.data[6] = 0;
 80028ca:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80028ce:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 80028d2:	2200      	movs	r2, #0
 80028d4:	779a      	strb	r2, [r3, #30]
    side_and_count_msg.data[7] = 0;
 80028d6:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80028da:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 80028de:	2200      	movs	r2, #0
 80028e0:	77da      	strb	r2, [r3, #31]

    /* Transmit a message every 2 seconds */
    HAL_CAN_AddTxMessage(&hcan, &latitude_msg.header, latitude_msg.data, &can_mailbox);
 80028e2:	f107 0308 	add.w	r3, r7, #8
 80028e6:	f103 0218 	add.w	r2, r3, #24
 80028ea:	f107 0108 	add.w	r1, r7, #8
 80028ee:	4b28      	ldr	r3, [pc, #160]	; (8002990 <read_GPS_task+0x388>)
 80028f0:	4828      	ldr	r0, [pc, #160]	; (8002994 <read_GPS_task+0x38c>)
 80028f2:	f002 f91d 	bl	8004b30 <HAL_CAN_AddTxMessage>
    send_CAN_Radio(&latitude_msg);
 80028f6:	f107 0308 	add.w	r3, r7, #8
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 f90e 	bl	8002b1c <send_CAN_Radio>
    osDelay(2000);
 8002900:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002904:	f007 f9ea 	bl	8009cdc <osDelay>

    HAL_CAN_AddTxMessage(&hcan, &longitude_msg.header, longitude_msg.data, &can_mailbox);
 8002908:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800290c:	f103 0218 	add.w	r2, r3, #24
 8002910:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002914:	4b1e      	ldr	r3, [pc, #120]	; (8002990 <read_GPS_task+0x388>)
 8002916:	481f      	ldr	r0, [pc, #124]	; (8002994 <read_GPS_task+0x38c>)
 8002918:	f002 f90a 	bl	8004b30 <HAL_CAN_AddTxMessage>
    send_CAN_Radio(&longitude_msg);
 800291c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002920:	4618      	mov	r0, r3
 8002922:	f000 f8fb 	bl	8002b1c <send_CAN_Radio>
    osDelay(2000);
 8002926:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800292a:	f007 f9d7 	bl	8009cdc <osDelay>

    HAL_CAN_AddTxMessage(&hcan, &altitude_hdop_msg.header, altitude_hdop_msg.data, &can_mailbox);
 800292e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002932:	f103 0218 	add.w	r2, r3, #24
 8002936:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800293a:	4b15      	ldr	r3, [pc, #84]	; (8002990 <read_GPS_task+0x388>)
 800293c:	4815      	ldr	r0, [pc, #84]	; (8002994 <read_GPS_task+0x38c>)
 800293e:	f002 f8f7 	bl	8004b30 <HAL_CAN_AddTxMessage>
    send_CAN_Radio(&altitude_hdop_msg);
 8002942:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002946:	4618      	mov	r0, r3
 8002948:	f000 f8e8 	bl	8002b1c <send_CAN_Radio>
    osDelay(2000);
 800294c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002950:	f007 f9c4 	bl	8009cdc <osDelay>

    HAL_CAN_AddTxMessage(&hcan, &side_and_count_msg.header, side_and_count_msg.data, &can_mailbox);
 8002954:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002958:	f103 0218 	add.w	r2, r3, #24
 800295c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <read_GPS_task+0x388>)
 8002962:	480c      	ldr	r0, [pc, #48]	; (8002994 <read_GPS_task+0x38c>)
 8002964:	f002 f8e4 	bl	8004b30 <HAL_CAN_AddTxMessage>
    send_CAN_Radio(&side_and_count_msg);
 8002968:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800296c:	4618      	mov	r0, r3
 800296e:	f000 f8d5 	bl	8002b1c <send_CAN_Radio>
    osDelay(4000); // 4000 so we have 2 + 2 + 2 + 4 = 10 seconds total
 8002972:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002976:	f007 f9b1 	bl	8009cdc <osDelay>
  while(1) {
 800297a:	e64f      	b.n	800261c <read_GPS_task+0x14>
 800297c:	2000065c 	.word	0x2000065c
 8002980:	20000078 	.word	0x20000078
 8002984:	20000090 	.word	0x20000090
 8002988:	200000a8 	.word	0x200000a8
 800298c:	200000c0 	.word	0x200000c0
 8002990:	20000350 	.word	0x20000350
 8002994:	20000354 	.word	0x20000354

08002998 <transmit_RTC_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_RTC_task */
void transmit_RTC_task(void const * argument)
{
 8002998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800299a:	b091      	sub	sp, #68	; 0x44
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

    CAN_Radio_msg_t rtc_msg;
    rtc_msg.header = rtc_timestamp_header;
 80029a0:	4b25      	ldr	r3, [pc, #148]	; (8002a38 <transmit_RTC_task+0xa0>)
 80029a2:	f107 0608 	add.w	r6, r7, #8
 80029a6:	469c      	mov	ip, r3
 80029a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80029ac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80029ae:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80029b2:	e886 0003 	stmia.w	r6, {r0, r1}

    union DoubleBytes current_timestamp;
    current_timestamp.double_value = get_current_timestamp();
 80029b6:	f001 fafd 	bl	8003fb4 <get_current_timestamp>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    rtc_msg.timestamp = current_timestamp;
 80029c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80029c6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    // Populate data_send array
    for (int i = 0; i < 8; i++) {
 80029ca:	2300      	movs	r3, #0
 80029cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ce:	e01b      	b.n	8002a08 <transmit_RTC_task+0x70>
        rtc_msg.data[i] = (current_timestamp.double_as_int >> (8 * i)) & 0xFF;
 80029d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80029d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80029d6:	00c9      	lsls	r1, r1, #3
 80029d8:	f1c1 0620 	rsb	r6, r1, #32
 80029dc:	f1a1 0020 	sub.w	r0, r1, #32
 80029e0:	fa22 f401 	lsr.w	r4, r2, r1
 80029e4:	fa03 f606 	lsl.w	r6, r3, r6
 80029e8:	4334      	orrs	r4, r6
 80029ea:	fa23 f000 	lsr.w	r0, r3, r0
 80029ee:	4304      	orrs	r4, r0
 80029f0:	fa23 f501 	lsr.w	r5, r3, r1
 80029f4:	b2e1      	uxtb	r1, r4
 80029f6:	f107 0220 	add.w	r2, r7, #32
 80029fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029fc:	4413      	add	r3, r2
 80029fe:	460a      	mov	r2, r1
 8002a00:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8002a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a04:	3301      	adds	r3, #1
 8002a06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a0a:	2b07      	cmp	r3, #7
 8002a0c:	dde0      	ble.n	80029d0 <transmit_RTC_task+0x38>
    }
    
    HAL_CAN_AddTxMessage(&hcan, &rtc_msg.header, rtc_msg.data, &can_mailbox);
 8002a0e:	f107 0308 	add.w	r3, r7, #8
 8002a12:	f103 0218 	add.w	r2, r3, #24
 8002a16:	f107 0108 	add.w	r1, r7, #8
 8002a1a:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <transmit_RTC_task+0xa4>)
 8002a1c:	4808      	ldr	r0, [pc, #32]	; (8002a40 <transmit_RTC_task+0xa8>)
 8002a1e:	f002 f887 	bl	8004b30 <HAL_CAN_AddTxMessage>
    send_CAN_Radio(&rtc_msg);
 8002a22:	f107 0308 	add.w	r3, r7, #8
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 f878 	bl	8002b1c <send_CAN_Radio>

    osDelay(TRANSMIT_RTC_DELAY);
 8002a2c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002a30:	f007 f954 	bl	8009cdc <osDelay>
  {
 8002a34:	e7b4      	b.n	80029a0 <transmit_RTC_task+0x8>
 8002a36:	bf00      	nop
 8002a38:	20000000 	.word	0x20000000
 8002a3c:	20000350 	.word	0x20000350
 8002a40:	20000354 	.word	0x20000354

08002a44 <transmit_Diagnostics_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_Diagnostics_task */
void transmit_Diagnostics_task(void const * argument)
{
 8002a44:	b5b0      	push	{r4, r5, r7, lr}
 8002a46:	b090      	sub	sp, #64	; 0x40
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN transmit_Diagnostics_task */
  /* Infinite loop */
  for(;;)
  {
    uint8_t data_send = 0x00;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    CAN_Radio_msg_t diagnostics_msg;
    diagnostics_msg.header = tel_diagnostics_header;
 8002a52:	4b2e      	ldr	r3, [pc, #184]	; (8002b0c <transmit_Diagnostics_task+0xc8>)
 8002a54:	f107 0408 	add.w	r4, r7, #8
 8002a58:	461d      	mov	r5, r3
 8002a5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a5e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002a62:	e884 0003 	stmia.w	r4, {r0, r1}
    
    union DoubleBytes current_timestamp;
    current_timestamp.double_value = get_current_timestamp();
 8002a66:	f001 faa5 	bl	8003fb4 <get_current_timestamp>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    diagnostics_msg.timestamp = current_timestamp;
 8002a72:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002a76:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    if(g_tel_diagnostics.rtc_reset) 
 8002a7a:	4b25      	ldr	r3, [pc, #148]	; (8002b10 <transmit_Diagnostics_task+0xcc>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b00      	cmp	r3, #0
      SET_BIT(data_send, 0);
    if(g_tel_diagnostics.gps_sync_fail)
 8002a82:	4b23      	ldr	r3, [pc, #140]	; (8002b10 <transmit_Diagnostics_task+0xcc>)
 8002a84:	785b      	ldrb	r3, [r3, #1]
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <transmit_Diagnostics_task+0x54>
      SET_BIT(data_send, 1);
 8002a8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if(g_tel_diagnostics.imu_fail)
 8002a98:	4b1d      	ldr	r3, [pc, #116]	; (8002b10 <transmit_Diagnostics_task+0xcc>)
 8002a9a:	789b      	ldrb	r3, [r3, #2]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d005      	beq.n	8002aae <transmit_Diagnostics_task+0x6a>
      SET_BIT(data_send, 2);
 8002aa2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002aa6:	f043 0302 	orr.w	r3, r3, #2
 8002aaa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if(g_tel_diagnostics.gps_fail)
 8002aae:	4b18      	ldr	r3, [pc, #96]	; (8002b10 <transmit_Diagnostics_task+0xcc>)
 8002ab0:	78db      	ldrb	r3, [r3, #3]
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <transmit_Diagnostics_task+0x80>
      SET_BIT(data_send, 3);
 8002ab8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002abc:	f043 0303 	orr.w	r3, r3, #3
 8002ac0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if(g_tel_diagnostics.watchdog_reset)
 8002ac4:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <transmit_Diagnostics_task+0xcc>)
 8002ac6:	791b      	ldrb	r3, [r3, #4]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d005      	beq.n	8002ada <transmit_Diagnostics_task+0x96>
      SET_BIT(data_send, 4);
 8002ace:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002ad2:	f043 0304 	orr.w	r3, r3, #4
 8002ad6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    
    diagnostics_msg.data[0] = data_send;
 8002ada:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002ade:	f887 3020 	strb.w	r3, [r7, #32]
    
    HAL_CAN_AddTxMessage(&hcan, &diagnostics_msg.header, diagnostics_msg.data, &can_mailbox);
 8002ae2:	f107 0308 	add.w	r3, r7, #8
 8002ae6:	f103 0218 	add.w	r2, r3, #24
 8002aea:	f107 0108 	add.w	r1, r7, #8
 8002aee:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <transmit_Diagnostics_task+0xd0>)
 8002af0:	4809      	ldr	r0, [pc, #36]	; (8002b18 <transmit_Diagnostics_task+0xd4>)
 8002af2:	f002 f81d 	bl	8004b30 <HAL_CAN_AddTxMessage>
    send_CAN_Radio(&diagnostics_msg);
 8002af6:	f107 0308 	add.w	r3, r7, #8
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 f80e 	bl	8002b1c <send_CAN_Radio>

    osDelay(TRANSMIT_DIAGNOSTICS_DELAY);
 8002b00:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b04:	f007 f8ea 	bl	8009cdc <osDelay>
  {
 8002b08:	e7a0      	b.n	8002a4c <transmit_Diagnostics_task+0x8>
 8002b0a:	bf00      	nop
 8002b0c:	20000018 	.word	0x20000018
 8002b10:	20000704 	.word	0x20000704
 8002b14:	20000350 	.word	0x20000350
 8002b18:	20000354 	.word	0x20000354

08002b1c <send_CAN_Radio>:
      initIMU();
  }
}

void send_CAN_Radio(CAN_Radio_msg_t *tx_CAN_msg)
{
 8002b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b1e:	b08b      	sub	sp, #44	; 0x2c
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint8_t radio_buffer[CAN_BUFFER_LEN] = {0};
 8002b24:	2100      	movs	r1, #0
 8002b26:	60f9      	str	r1, [r7, #12]
 8002b28:	f107 0110 	add.w	r1, r7, #16
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	6008      	str	r0, [r1, #0]
 8002b30:	6048      	str	r0, [r1, #4]
 8002b32:	6088      	str	r0, [r1, #8]
 8002b34:	60c8      	str	r0, [r1, #12]
 8002b36:	6108      	str	r0, [r1, #16]

  /* TIMESTAMP */
  for (uint8_t i = 0; i < 8; i++) {
 8002b38:	2100      	movs	r1, #0
 8002b3a:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 8002b3e:	e021      	b.n	8002b84 <send_CAN_Radio+0x68>
    radio_buffer[7 - i] = (char) GET_BYTE_FROM_WORD(i, tx_CAN_msg->timestamp.double_as_int);
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 8002b46:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8002b4a:	00e4      	lsls	r4, r4, #3
 8002b4c:	f1c4 0620 	rsb	r6, r4, #32
 8002b50:	f1a4 0520 	sub.w	r5, r4, #32
 8002b54:	fa20 f204 	lsr.w	r2, r0, r4
 8002b58:	fa01 f606 	lsl.w	r6, r1, r6
 8002b5c:	4332      	orrs	r2, r6
 8002b5e:	fa21 f505 	lsr.w	r5, r1, r5
 8002b62:	432a      	orrs	r2, r5
 8002b64:	fa21 f304 	lsr.w	r3, r1, r4
 8002b68:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8002b6c:	f1c1 0107 	rsb	r1, r1, #7
 8002b70:	b2d0      	uxtb	r0, r2
 8002b72:	3128      	adds	r1, #40	; 0x28
 8002b74:	4439      	add	r1, r7
 8002b76:	f801 0c1c 	strb.w	r0, [r1, #-28]
  for (uint8_t i = 0; i < 8; i++) {
 8002b7a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8002b7e:	3101      	adds	r1, #1
 8002b80:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 8002b84:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8002b88:	2907      	cmp	r1, #7
 8002b8a:	d9d9      	bls.n	8002b40 <send_CAN_Radio+0x24>
  }

  /* CAN MESSAGE IDENTIFIER */
  radio_buffer[8] = '#';
 8002b8c:	2323      	movs	r3, #35	; 0x23
 8002b8e:	753b      	strb	r3, [r7, #20]

  /* CAN ID */
  if (tx_CAN_msg->header.IDE == CAN_ID_STD)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d109      	bne.n	8002bac <send_CAN_Radio+0x90>
  {
    radio_buffer[12]  = 0xFF & (tx_CAN_msg->header.StdId);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	763b      	strb	r3, [r7, #24]
    radio_buffer[11] = 0xFF & (tx_CAN_msg->header.StdId >> 8);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	0a1b      	lsrs	r3, r3, #8
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	75fb      	strb	r3, [r7, #23]
 8002baa:	e016      	b.n	8002bda <send_CAN_Radio+0xbe>
  }
  else if (tx_CAN_msg->header.IDE == CAN_ID_EXT)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d112      	bne.n	8002bda <send_CAN_Radio+0xbe>
  {
     radio_buffer[12]  = 0xFF & (tx_CAN_msg->header.ExtId);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	763b      	strb	r3, [r7, #24]
     radio_buffer[11] = 0xFF & (tx_CAN_msg->header.ExtId >> 8);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	0a1b      	lsrs	r3, r3, #8
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	75fb      	strb	r3, [r7, #23]
     radio_buffer[10] = 0xFF & (tx_CAN_msg->header.ExtId >> 16);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	0c1b      	lsrs	r3, r3, #16
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	75bb      	strb	r3, [r7, #22]
     radio_buffer[9] = 0xFF & (tx_CAN_msg->header.ExtId >> 24);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	0e1b      	lsrs	r3, r3, #24
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	757b      	strb	r3, [r7, #21]
  }

   /* CAN DATA */
   for (uint8_t i = 0; i < 8; i++) {
 8002bda:	2300      	movs	r3, #0
 8002bdc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002be0:	e010      	b.n	8002c04 <send_CAN_Radio+0xe8>
     radio_buffer[13 + i] = tx_CAN_msg->data[i];
 8002be2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002be6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002bea:	330d      	adds	r3, #13
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	440a      	add	r2, r1
 8002bf0:	7e12      	ldrb	r2, [r2, #24]
 8002bf2:	3328      	adds	r3, #40	; 0x28
 8002bf4:	443b      	add	r3, r7
 8002bf6:	f803 2c1c 	strb.w	r2, [r3, #-28]
   for (uint8_t i = 0; i < 8; i++) {
 8002bfa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002bfe:	3301      	adds	r3, #1
 8002c00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002c04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002c08:	2b07      	cmp	r3, #7
 8002c0a:	d9ea      	bls.n	8002be2 <send_CAN_Radio+0xc6>
   }

   /* CAN DATA LENGTH */
   radio_buffer[21] = tx_CAN_msg->header.DLC & 0xF;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

   /* CARRIAGE RETURN */
   radio_buffer[CAN_BUFFER_LEN - 2] = '\r';
 8002c1c:	230d      	movs	r3, #13
 8002c1e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

   /* NEW LINE */
   radio_buffer[CAN_BUFFER_LEN - 1] = '\n';
 8002c22:	230a      	movs	r3, #10
 8002c24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

   HAL_UART_Transmit(&huart1, radio_buffer, sizeof(radio_buffer), 1000);
 8002c28:	f107 010c 	add.w	r1, r7, #12
 8002c2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c30:	2218      	movs	r2, #24
 8002c32:	4803      	ldr	r0, [pc, #12]	; (8002c40 <send_CAN_Radio+0x124>)
 8002c34:	f006 fd92 	bl	800975c <HAL_UART_Transmit>

}
 8002c38:	bf00      	nop
 8002c3a:	372c      	adds	r7, #44	; 0x2c
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c40:	20000874 	.word	0x20000874

08002c44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c4a:	f107 0310 	add.w	r3, r7, #16
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	605a      	str	r2, [r3, #4]
 8002c54:	609a      	str	r2, [r3, #8]
 8002c56:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c58:	4b49      	ldr	r3, [pc, #292]	; (8002d80 <MX_GPIO_Init+0x13c>)
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	4a48      	ldr	r2, [pc, #288]	; (8002d80 <MX_GPIO_Init+0x13c>)
 8002c5e:	f043 0310 	orr.w	r3, r3, #16
 8002c62:	6193      	str	r3, [r2, #24]
 8002c64:	4b46      	ldr	r3, [pc, #280]	; (8002d80 <MX_GPIO_Init+0x13c>)
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c70:	4b43      	ldr	r3, [pc, #268]	; (8002d80 <MX_GPIO_Init+0x13c>)
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	4a42      	ldr	r2, [pc, #264]	; (8002d80 <MX_GPIO_Init+0x13c>)
 8002c76:	f043 0320 	orr.w	r3, r3, #32
 8002c7a:	6193      	str	r3, [r2, #24]
 8002c7c:	4b40      	ldr	r3, [pc, #256]	; (8002d80 <MX_GPIO_Init+0x13c>)
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c88:	4b3d      	ldr	r3, [pc, #244]	; (8002d80 <MX_GPIO_Init+0x13c>)
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	4a3c      	ldr	r2, [pc, #240]	; (8002d80 <MX_GPIO_Init+0x13c>)
 8002c8e:	f043 0304 	orr.w	r3, r3, #4
 8002c92:	6193      	str	r3, [r2, #24]
 8002c94:	4b3a      	ldr	r3, [pc, #232]	; (8002d80 <MX_GPIO_Init+0x13c>)
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	607b      	str	r3, [r7, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca0:	4b37      	ldr	r3, [pc, #220]	; (8002d80 <MX_GPIO_Init+0x13c>)
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	4a36      	ldr	r2, [pc, #216]	; (8002d80 <MX_GPIO_Init+0x13c>)
 8002ca6:	f043 0308 	orr.w	r3, r3, #8
 8002caa:	6193      	str	r3, [r2, #24]
 8002cac:	4b34      	ldr	r3, [pc, #208]	; (8002d80 <MX_GPIO_Init+0x13c>)
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	f003 0308 	and.w	r3, r3, #8
 8002cb4:	603b      	str	r3, [r7, #0]
 8002cb6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_GPIO_DIO7_Pin|RADIO_GPIO_DIO9_SLEEP_Pin|RADIO_GPIO_DIO11_Pin|RADIO_GPIO_DIO10_Pin, GPIO_PIN_RESET);
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2178      	movs	r1, #120	; 0x78
 8002cbc:	4831      	ldr	r0, [pc, #196]	; (8002d84 <MX_GPIO_Init+0x140>)
 8002cbe:	f002 fdfa 	bl	80058b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USER_LED_Pin|SDL_CS_Pin, GPIO_PIN_RESET);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2112      	movs	r1, #18
 8002cc6:	4830      	ldr	r0, [pc, #192]	; (8002d88 <MX_GPIO_Init+0x144>)
 8002cc8:	f002 fdf5 	bl	80058b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RADIO_GPIO_DIO4_Pin|RADIO_GPIO_DIO3_Pin|RADIO_GPIO_DIO2_Pin, GPIO_PIN_SET);
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f24a 0101 	movw	r1, #40961	; 0xa001
 8002cd2:	482e      	ldr	r0, [pc, #184]	; (8002d8c <MX_GPIO_Init+0x148>)
 8002cd4:	f002 fdef 	bl	80058b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RADIO_GPIO_DIO12_Pin|RADIO_GPIO_DIO6_Pin|RADIO_DIO8_SLEEP_CONTROL_Pin, GPIO_PIN_RESET);
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f245 0102 	movw	r1, #20482	; 0x5002
 8002cde:	482b      	ldr	r0, [pc, #172]	; (8002d8c <MX_GPIO_Init+0x148>)
 8002ce0:	f002 fde9 	bl	80058b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_GPIO_DIO1_Pin|RADIO_GPIO_DIO0_Pin, GPIO_PIN_SET);
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8002cea:	4826      	ldr	r0, [pc, #152]	; (8002d84 <MX_GPIO_Init+0x140>)
 8002cec:	f002 fde3 	bl	80058b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = RADIO_GPIO_DIO7_Pin|RADIO_GPIO_DIO9_SLEEP_Pin|RADIO_GPIO_DIO11_Pin|RADIO_GPIO_DIO10_Pin
 8002cf0:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8002cf4:	613b      	str	r3, [r7, #16]
                          |RADIO_GPIO_DIO1_Pin|RADIO_GPIO_DIO0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfe:	2302      	movs	r3, #2
 8002d00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d02:	f107 0310 	add.w	r3, r7, #16
 8002d06:	4619      	mov	r1, r3
 8002d08:	481e      	ldr	r0, [pc, #120]	; (8002d84 <MX_GPIO_Init+0x140>)
 8002d0a:	f002 fc29 	bl	8005560 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USER_LED_Pin|SDL_CS_Pin;
 8002d0e:	2312      	movs	r3, #18
 8002d10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d12:	2301      	movs	r3, #1
 8002d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d1e:	f107 0310 	add.w	r3, r7, #16
 8002d22:	4619      	mov	r1, r3
 8002d24:	4818      	ldr	r0, [pc, #96]	; (8002d88 <MX_GPIO_Init+0x144>)
 8002d26:	f002 fc1b 	bl	8005560 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RTC_SYNC_Pin|SDL_CD_Pin;
 8002d2a:	230c      	movs	r3, #12
 8002d2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d36:	f107 0310 	add.w	r3, r7, #16
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4812      	ldr	r0, [pc, #72]	; (8002d88 <MX_GPIO_Init+0x144>)
 8002d3e:	f002 fc0f 	bl	8005560 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = RADIO_GPIO_DIO4_Pin|RADIO_GPIO_DIO12_Pin|RADIO_GPIO_DIO6_Pin|RADIO_GPIO_DIO3_Pin
 8002d42:	f24f 0303 	movw	r3, #61443	; 0xf003
 8002d46:	613b      	str	r3, [r7, #16]
                          |RADIO_DIO8_SLEEP_CONTROL_Pin|RADIO_GPIO_DIO2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d50:	2302      	movs	r3, #2
 8002d52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d54:	f107 0310 	add.w	r3, r7, #16
 8002d58:	4619      	mov	r1, r3
 8002d5a:	480c      	ldr	r0, [pc, #48]	; (8002d8c <MX_GPIO_Init+0x148>)
 8002d5c:	f002 fc00 	bl	8005560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002d60:	2304      	movs	r3, #4
 8002d62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002d6c:	f107 0310 	add.w	r3, r7, #16
 8002d70:	4619      	mov	r1, r3
 8002d72:	4806      	ldr	r0, [pc, #24]	; (8002d8c <MX_GPIO_Init+0x148>)
 8002d74:	f002 fbf4 	bl	8005560 <HAL_GPIO_Init>

}
 8002d78:	bf00      	nop
 8002d7a:	3720      	adds	r7, #32
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40011000 	.word	0x40011000
 8002d88:	40010800 	.word	0x40010800
 8002d8c:	40010c00 	.word	0x40010c00

08002d90 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d94:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <MX_I2C1_Init+0x50>)
 8002d96:	4a13      	ldr	r2, [pc, #76]	; (8002de4 <MX_I2C1_Init+0x54>)
 8002d98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002d9a:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <MX_I2C1_Init+0x50>)
 8002d9c:	4a12      	ldr	r2, [pc, #72]	; (8002de8 <MX_I2C1_Init+0x58>)
 8002d9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002da0:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <MX_I2C1_Init+0x50>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002da6:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <MX_I2C1_Init+0x50>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002dac:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <MX_I2C1_Init+0x50>)
 8002dae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002db2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002db4:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <MX_I2C1_Init+0x50>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002dba:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <MX_I2C1_Init+0x50>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002dc0:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <MX_I2C1_Init+0x50>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002dc6:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <MX_I2C1_Init+0x50>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002dcc:	4804      	ldr	r0, [pc, #16]	; (8002de0 <MX_I2C1_Init+0x50>)
 8002dce:	f002 fda3 	bl	8005918 <HAL_I2C_Init>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002dd8:	f000 f9c4 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ddc:	bf00      	nop
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	2000065c 	.word	0x2000065c
 8002de4:	40005400 	.word	0x40005400
 8002de8:	000186a0 	.word	0x000186a0

08002dec <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002df0:	4b12      	ldr	r3, [pc, #72]	; (8002e3c <MX_I2C2_Init+0x50>)
 8002df2:	4a13      	ldr	r2, [pc, #76]	; (8002e40 <MX_I2C2_Init+0x54>)
 8002df4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002df6:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <MX_I2C2_Init+0x50>)
 8002df8:	4a12      	ldr	r2, [pc, #72]	; (8002e44 <MX_I2C2_Init+0x58>)
 8002dfa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002dfc:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <MX_I2C2_Init+0x50>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002e02:	4b0e      	ldr	r3, [pc, #56]	; (8002e3c <MX_I2C2_Init+0x50>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e08:	4b0c      	ldr	r3, [pc, #48]	; (8002e3c <MX_I2C2_Init+0x50>)
 8002e0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e0e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e10:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <MX_I2C2_Init+0x50>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002e16:	4b09      	ldr	r3, [pc, #36]	; (8002e3c <MX_I2C2_Init+0x50>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e1c:	4b07      	ldr	r3, [pc, #28]	; (8002e3c <MX_I2C2_Init+0x50>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e22:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <MX_I2C2_Init+0x50>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002e28:	4804      	ldr	r0, [pc, #16]	; (8002e3c <MX_I2C2_Init+0x50>)
 8002e2a:	f002 fd75 	bl	8005918 <HAL_I2C_Init>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002e34:	f000 f996 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002e38:	bf00      	nop
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	200006b0 	.word	0x200006b0
 8002e40:	40005800 	.word	0x40005800
 8002e44:	000186a0 	.word	0x000186a0

08002e48 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08a      	sub	sp, #40	; 0x28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e50:	f107 0318 	add.w	r3, r7, #24
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a2b      	ldr	r2, [pc, #172]	; (8002f10 <HAL_I2C_MspInit+0xc8>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d124      	bne.n	8002eb2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e68:	4b2a      	ldr	r3, [pc, #168]	; (8002f14 <HAL_I2C_MspInit+0xcc>)
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	4a29      	ldr	r2, [pc, #164]	; (8002f14 <HAL_I2C_MspInit+0xcc>)
 8002e6e:	f043 0308 	orr.w	r3, r3, #8
 8002e72:	6193      	str	r3, [r2, #24]
 8002e74:	4b27      	ldr	r3, [pc, #156]	; (8002f14 <HAL_I2C_MspInit+0xcc>)
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPS_SCL_Pin|GPS_SDA_Pin;
 8002e80:	23c0      	movs	r3, #192	; 0xc0
 8002e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e84:	2312      	movs	r3, #18
 8002e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e8c:	f107 0318 	add.w	r3, r7, #24
 8002e90:	4619      	mov	r1, r3
 8002e92:	4821      	ldr	r0, [pc, #132]	; (8002f18 <HAL_I2C_MspInit+0xd0>)
 8002e94:	f002 fb64 	bl	8005560 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e98:	4b1e      	ldr	r3, [pc, #120]	; (8002f14 <HAL_I2C_MspInit+0xcc>)
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	4a1d      	ldr	r2, [pc, #116]	; (8002f14 <HAL_I2C_MspInit+0xcc>)
 8002e9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ea2:	61d3      	str	r3, [r2, #28]
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	; (8002f14 <HAL_I2C_MspInit+0xcc>)
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002eb0:	e029      	b.n	8002f06 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a19      	ldr	r2, [pc, #100]	; (8002f1c <HAL_I2C_MspInit+0xd4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d124      	bne.n	8002f06 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ebc:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <HAL_I2C_MspInit+0xcc>)
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	4a14      	ldr	r2, [pc, #80]	; (8002f14 <HAL_I2C_MspInit+0xcc>)
 8002ec2:	f043 0308 	orr.w	r3, r3, #8
 8002ec6:	6193      	str	r3, [r2, #24]
 8002ec8:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <HAL_I2C_MspInit+0xcc>)
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8002ed4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eda:	2312      	movs	r3, #18
 8002edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee2:	f107 0318 	add.w	r3, r7, #24
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	480b      	ldr	r0, [pc, #44]	; (8002f18 <HAL_I2C_MspInit+0xd0>)
 8002eea:	f002 fb39 	bl	8005560 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002eee:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <HAL_I2C_MspInit+0xcc>)
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	4a08      	ldr	r2, [pc, #32]	; (8002f14 <HAL_I2C_MspInit+0xcc>)
 8002ef4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ef8:	61d3      	str	r3, [r2, #28]
 8002efa:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <HAL_I2C_MspInit+0xcc>)
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f02:	60bb      	str	r3, [r7, #8]
 8002f04:	68bb      	ldr	r3, [r7, #8]
}
 8002f06:	bf00      	nop
 8002f08:	3728      	adds	r7, #40	; 0x28
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40005400 	.word	0x40005400
 8002f14:	40021000 	.word	0x40021000
 8002f18:	40010c00 	.word	0x40010c00
 8002f1c:	40005800 	.word	0x40005800

08002f20 <initIMU>:

/*
 * Documentation: https://controllerstech.com/how-to-interface-mpu6050-gy-521-with-stm32/
 */
void initIMU(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af04      	add	r7, sp, #16

  /*
   * We need to check if the sensor is responding by reading the “WHO_AM_I (0x75)�? Register.
   * If the sensor responds with 0x68, this means it’s available and good to go.
   */
  for(int i = 0; i < 5; i++) {
 8002f26:	2300      	movs	r3, #0
 8002f28:	607b      	str	r3, [r7, #4]
 8002f2a:	e01d      	b.n	8002f68 <initIMU+0x48>
    if(HAL_I2C_IsDeviceReady(&hi2c2, IMU_DEVICE_ADDRESS, 1, HAL_MAX_DELAY) == HAL_OK) {
 8002f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f30:	2201      	movs	r2, #1
 8002f32:	21d0      	movs	r1, #208	; 0xd0
 8002f34:	482e      	ldr	r0, [pc, #184]	; (8002ff0 <initIMU+0xd0>)
 8002f36:	f003 fc01 	bl	800673c <HAL_I2C_IsDeviceReady>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10d      	bne.n	8002f5c <initIMU+0x3c>
	    HAL_I2C_Mem_Read (&hi2c2, IMU_DEVICE_ADDRESS, WHO_AM_I_REG, 1, &data, 1, 1000);
 8002f40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f44:	9302      	str	r3, [sp, #8]
 8002f46:	2301      	movs	r3, #1
 8002f48:	9301      	str	r3, [sp, #4]
 8002f4a:	1cfb      	adds	r3, r7, #3
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	2301      	movs	r3, #1
 8002f50:	2275      	movs	r2, #117	; 0x75
 8002f52:	21d0      	movs	r1, #208	; 0xd0
 8002f54:	4826      	ldr	r0, [pc, #152]	; (8002ff0 <initIMU+0xd0>)
 8002f56:	f003 f989 	bl	800626c <HAL_I2C_Mem_Read>
	    //printf("Read a value from WHOAMI register: %x\n\r", data);
	    break; // Break when initialized
 8002f5a:	e008      	b.n	8002f6e <initIMU+0x4e>
    }
    HAL_Delay(5);
 8002f5c:	2005      	movs	r0, #5
 8002f5e:	f001 fbbb 	bl	80046d8 <HAL_Delay>
  for(int i = 0; i < 5; i++) {
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3301      	adds	r3, #1
 8002f66:	607b      	str	r3, [r7, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	ddde      	ble.n	8002f2c <initIMU+0xc>
  /*
   * Next we will wake the sensor up and in order to do that we will write to the
   * “PWR_MGMT_1 (0x6B)�? Register. See below the register content.
   * On writing (0x00) to the PWR_MGMT_1 Register, sensor wakes up and the Clock sets up to 8 MHz.
   */
  data = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Mem_Write(&hi2c2, IMU_DEVICE_ADDRESS, PWR_MGMT_1_REG, 1, &data, 1, 1000);
 8002f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f76:	9302      	str	r3, [sp, #8]
 8002f78:	2301      	movs	r3, #1
 8002f7a:	9301      	str	r3, [sp, #4]
 8002f7c:	1cfb      	adds	r3, r7, #3
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	2301      	movs	r3, #1
 8002f82:	226b      	movs	r2, #107	; 0x6b
 8002f84:	21d0      	movs	r1, #208	; 0xd0
 8002f86:	481a      	ldr	r0, [pc, #104]	; (8002ff0 <initIMU+0xd0>)
 8002f88:	f003 f876 	bl	8006078 <HAL_I2C_Mem_Write>
   * rate used to generate the Sample Rate for the MPU6050.
   * As the formula says Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV).
   * Where Gyroscope Output Rate is 8KHz, To get the sample rate of 1KHz,
   * we need to use the SMPLRT_DIV as ‘7’.
   */
  data = 0x07;
 8002f8c:	2307      	movs	r3, #7
 8002f8e:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Mem_Write(&hi2c2, IMU_DEVICE_ADDRESS, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 8002f90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f94:	9302      	str	r3, [sp, #8]
 8002f96:	2301      	movs	r3, #1
 8002f98:	9301      	str	r3, [sp, #4]
 8002f9a:	1cfb      	adds	r3, r7, #3
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	2219      	movs	r2, #25
 8002fa2:	21d0      	movs	r1, #208	; 0xd0
 8002fa4:	4812      	ldr	r0, [pc, #72]	; (8002ff0 <initIMU+0xd0>)
 8002fa6:	f003 f867 	bl	8006078 <HAL_I2C_Mem_Write>
   * Now configure the Accelerometer and Gyroscope registers and to do so, we need to modify
   * “GYRO_CONFIG (0x1B)�? and “ACCEL_CONFIG (0x1C)�?Registers.
   * Writing (0x00) to both of these registers would set the Full scale range of ± 2g in ACCEL_CONFIG
   * Register and a Full scale range of ± 250 °/s in GYRO_CONFIG Register along with Self-test disabled.
   */
  data = 0x00;
 8002faa:	2300      	movs	r3, #0
 8002fac:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Mem_Write(&hi2c2, IMU_DEVICE_ADDRESS, GYRO_CONFIG_REG, 1, &data, 1, 1000);
 8002fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fb2:	9302      	str	r3, [sp, #8]
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	9301      	str	r3, [sp, #4]
 8002fb8:	1cfb      	adds	r3, r7, #3
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	221b      	movs	r2, #27
 8002fc0:	21d0      	movs	r1, #208	; 0xd0
 8002fc2:	480b      	ldr	r0, [pc, #44]	; (8002ff0 <initIMU+0xd0>)
 8002fc4:	f003 f858 	bl	8006078 <HAL_I2C_Mem_Write>
  data = 0x00;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Mem_Write(&hi2c2, IMU_DEVICE_ADDRESS, ACCEL_CONFIG_REG, 1, &data, 1, 1000);
 8002fcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fd0:	9302      	str	r3, [sp, #8]
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	9301      	str	r3, [sp, #4]
 8002fd6:	1cfb      	adds	r3, r7, #3
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	2301      	movs	r3, #1
 8002fdc:	221c      	movs	r2, #28
 8002fde:	21d0      	movs	r1, #208	; 0xd0
 8002fe0:	4803      	ldr	r0, [pc, #12]	; (8002ff0 <initIMU+0xd0>)
 8002fe2:	f003 f849 	bl	8006078 <HAL_I2C_Mem_Write>


  //printf("IMU Initialized\n\r");


}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	200006b0 	.word	0x200006b0

08002ff4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ffa:	f001 fb3b 	bl	8004674 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ffe:	f000 f83f 	bl	8003080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003002:	f7ff fe1f 	bl	8002c44 <MX_GPIO_Init>
  MX_CAN_Init();
 8003006:	f7fe f94b 	bl	80012a0 <MX_CAN_Init>
  MX_SPI1_Init();
 800300a:	f001 f841 	bl	8004090 <MX_SPI1_Init>
  MX_UART5_Init();
 800300e:	f001 fa21 	bl	8004454 <MX_UART5_Init>
  MX_I2C1_Init();
 8003012:	f7ff febd 	bl	8002d90 <MX_I2C1_Init>
  MX_I2C2_Init();
 8003016:	f7ff fee9 	bl	8002dec <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800301a:	f001 fa45 	bl	80044a8 <MX_USART1_UART_Init>
  MX_RTC_Init();
 800301e:	f000 fe0b 	bl	8003c38 <MX_RTC_Init>
  MX_FATFS_Init();
 8003022:	f006 fd1b 	bl	8009a5c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  DebugIO_Init(&huart5);
 8003026:	4812      	ldr	r0, [pc, #72]	; (8003070 <main+0x7c>)
 8003028:	f7fe fa6a 	bl	8001500 <DebugIO_Init>
  initIMU();
 800302c:	f7ff ff78 	bl	8002f20 <initIMU>

  // Sync with RTC if date = Jan 1 2000 or GPIO is set to high
  RTC_DateTypeDef curr_date;
  RTC_TimeTypeDef curr_time;
  HAL_RTC_GetDate(&hrtc, &curr_date, RTC_FORMAT_BIN);
 8003030:	1d3b      	adds	r3, r7, #4
 8003032:	2200      	movs	r2, #0
 8003034:	4619      	mov	r1, r3
 8003036:	480f      	ldr	r0, [pc, #60]	; (8003074 <main+0x80>)
 8003038:	f005 f9bc 	bl	80083b4 <HAL_RTC_GetDate>
  /* Sync the RTC with GPS if date is Jan 1, 2000 */
  if ((curr_date.Month == RTC_MONTH_JANUARY && curr_date.Date == 1 && curr_date.Year == 0) || HAL_GPIO_ReadPin(RTC_SYNC_GPIO_Port, RTC_SYNC_Pin) == GPIO_PIN_SET) {
 800303c:	797b      	ldrb	r3, [r7, #5]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d105      	bne.n	800304e <main+0x5a>
 8003042:	79bb      	ldrb	r3, [r7, #6]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d102      	bne.n	800304e <main+0x5a>
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d006      	beq.n	800305c <main+0x68>
 800304e:	2104      	movs	r1, #4
 8003050:	4809      	ldr	r0, [pc, #36]	; (8003078 <main+0x84>)
 8003052:	f002 fc19 	bl	8005888 <HAL_GPIO_ReadPin>
 8003056:	4603      	mov	r3, r0
 8003058:	2b01      	cmp	r3, #1
 800305a:	d104      	bne.n	8003066 <main+0x72>
      Sync_RTC_With_GPS();
 800305c:	f000 fe5a 	bl	8003d14 <Sync_RTC_With_GPS>
      g_tel_diagnostics.rtc_reset = true;
 8003060:	4b06      	ldr	r3, [pc, #24]	; (800307c <main+0x88>)
 8003062:	2201      	movs	r2, #1
 8003064:	701a      	strb	r2, [r3, #0]
//  sd_append(logfile, startup_message);

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003066:	f7fe ff8b 	bl	8001f80 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800306a:	f006 fde4 	bl	8009c36 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800306e:	e7fe      	b.n	800306e <main+0x7a>
 8003070:	2000082c 	.word	0x2000082c
 8003074:	20000770 	.word	0x20000770
 8003078:	40010800 	.word	0x40010800
 800307c:	20000704 	.word	0x20000704

08003080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b096      	sub	sp, #88	; 0x58
 8003084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003086:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800308a:	2228      	movs	r2, #40	; 0x28
 800308c:	2100      	movs	r1, #0
 800308e:	4618      	mov	r0, r3
 8003090:	f00b f85f 	bl	800e152 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003094:	f107 031c 	add.w	r3, r7, #28
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	605a      	str	r2, [r3, #4]
 800309e:	609a      	str	r2, [r3, #8]
 80030a0:	60da      	str	r2, [r3, #12]
 80030a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030a4:	1d3b      	adds	r3, r7, #4
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	605a      	str	r2, [r3, #4]
 80030ac:	609a      	str	r2, [r3, #8]
 80030ae:	60da      	str	r2, [r3, #12]
 80030b0:	611a      	str	r2, [r3, #16]
 80030b2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80030b4:	2305      	movs	r3, #5
 80030b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80030be:	2300      	movs	r3, #0
 80030c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80030c2:	2301      	movs	r3, #1
 80030c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030c6:	2301      	movs	r3, #1
 80030c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030ca:	2302      	movs	r3, #2
 80030cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80030d4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80030d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030de:	4618      	mov	r0, r3
 80030e0:	f004 f8e8 	bl	80072b4 <HAL_RCC_OscConfig>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80030ea:	f000 f83b 	bl	8003164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030ee:	230f      	movs	r3, #15
 80030f0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030f2:	2302      	movs	r3, #2
 80030f4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030f6:	2300      	movs	r3, #0
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003100:	2300      	movs	r3, #0
 8003102:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003104:	f107 031c 	add.w	r3, r7, #28
 8003108:	2102      	movs	r1, #2
 800310a:	4618      	mov	r0, r3
 800310c:	f004 fb54 	bl	80077b8 <HAL_RCC_ClockConfig>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003116:	f000 f825 	bl	8003164 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800311a:	2301      	movs	r3, #1
 800311c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800311e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003122:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003124:	1d3b      	adds	r3, r7, #4
 8003126:	4618      	mov	r0, r3
 8003128:	f004 fd04 	bl	8007b34 <HAL_RCCEx_PeriphCLKConfig>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8003132:	f000 f817 	bl	8003164 <Error_Handler>
  }
}
 8003136:	bf00      	nop
 8003138:	3758      	adds	r7, #88	; 0x58
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a04      	ldr	r2, [pc, #16]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d101      	bne.n	8003156 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003152:	f001 faa5 	bl	80046a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40012c00 	.word	0x40012c00

08003164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003168:	b672      	cpsid	i
}
 800316a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800316c:	e7fe      	b.n	800316c <Error_Handler+0x8>
	...

08003170 <nmea_GPGGA>:
    else{
        return 0;
    }
}

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8003170:	b590      	push	{r4, r7, lr}
 8003172:	b0b7      	sub	sp, #220	; 0xdc
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 8003180:	f107 0320 	add.w	r3, r7, #32
 8003184:	2264      	movs	r2, #100	; 0x64
 8003186:	2100      	movs	r1, #0
 8003188:	4618      	mov	r0, r3
 800318a:	f00a ffe2 	bl	800e152 <memset>
    char *marker = strtok(inputString, ",");
 800318e:	49c5      	ldr	r1, [pc, #788]	; (80034a4 <nmea_GPGGA+0x334>)
 8003190:	6838      	ldr	r0, [r7, #0]
 8003192:	f00b f819 	bl	800e1c8 <strtok>
 8003196:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 800319a:	e027      	b.n	80031ec <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 800319c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80031a0:	f7fd f850 	bl	8000244 <strlen>
 80031a4:	4603      	mov	r3, r0
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 80031ac:	1c63      	adds	r3, r4, #1
 80031ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80031b2:	4610      	mov	r0, r2
 80031b4:	f009 faa2 	bl	800c6fc <malloc>
 80031b8:	4603      	mov	r3, r0
 80031ba:	461a      	mov	r2, r3
 80031bc:	00a3      	lsls	r3, r4, #2
 80031be:	33d8      	adds	r3, #216	; 0xd8
 80031c0:	443b      	add	r3, r7
 80031c2:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 80031c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031ca:	3b01      	subs	r3, #1
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	33d8      	adds	r3, #216	; 0xd8
 80031d0:	443b      	add	r3, r7
 80031d2:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80031d6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80031da:	4618      	mov	r0, r3
 80031dc:	f00b fe91 	bl	800ef02 <strcpy>
        marker = strtok(NULL, ",");
 80031e0:	49b0      	ldr	r1, [pc, #704]	; (80034a4 <nmea_GPGGA+0x334>)
 80031e2:	2000      	movs	r0, #0
 80031e4:	f00a fff0 	bl	800e1c8 <strtok>
 80031e8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 80031ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1d3      	bne.n	800319c <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 80031f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 80031fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	332c      	adds	r3, #44	; 0x2c
 8003208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800320a:	4611      	mov	r1, r2
 800320c:	4618      	mov	r0, r3
 800320e:	f00b fe78 	bl	800ef02 <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8003212:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8003216:	2b53      	cmp	r3, #83	; 0x53
 8003218:	d004      	beq.n	8003224 <nmea_GPGGA+0xb4>
 800321a:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800321e:	2b4e      	cmp	r3, #78	; 0x4e
 8003220:	f040 815f 	bne.w	80034e2 <nmea_GPGGA+0x372>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8003224:	2300      	movs	r3, #0
 8003226:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800322a:	e010      	b.n	800324e <nmea_GPGGA+0xde>
 800322c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800322e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003232:	4413      	add	r3, r2
 8003234:	7819      	ldrb	r1, [r3, #0]
 8003236:	f107 021c 	add.w	r2, r7, #28
 800323a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800323e:	4413      	add	r3, r2
 8003240:	460a      	mov	r2, r1
 8003242:	701a      	strb	r2, [r3, #0]
 8003244:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003248:	3301      	adds	r3, #1
 800324a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800324e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003252:	2b01      	cmp	r3, #1
 8003254:	ddea      	ble.n	800322c <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8003256:	2300      	movs	r3, #0
 8003258:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800325c:	e011      	b.n	8003282 <nmea_GPGGA+0x112>
 800325e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003260:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003264:	3302      	adds	r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	7819      	ldrb	r1, [r3, #0]
 800326a:	f107 0214 	add.w	r2, r7, #20
 800326e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003272:	4413      	add	r3, r2
 8003274:	460a      	mov	r2, r1
 8003276:	701a      	strb	r2, [r3, #0]
 8003278:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800327c:	3301      	adds	r3, #1
 800327e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003282:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003286:	2b05      	cmp	r3, #5
 8003288:	dde9      	ble.n	800325e <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 800328a:	f107 031c 	add.w	r3, r7, #28
 800328e:	220a      	movs	r2, #10
 8003290:	2100      	movs	r1, #0
 8003292:	4618      	mov	r0, r3
 8003294:	f00a f9dc 	bl	800d650 <strtol>
 8003298:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 800329c:	f107 0314 	add.w	r3, r7, #20
 80032a0:	2100      	movs	r1, #0
 80032a2:	4618      	mov	r0, r3
 80032a4:	f00a f8fc 	bl	800d4a0 <strtof>
 80032a8:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 80032ac:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80032b0:	f7fd fd8e 	bl	8000dd0 <__aeabi_i2f>
 80032b4:	4604      	mov	r4, r0
 80032b6:	497c      	ldr	r1, [pc, #496]	; (80034a8 <nmea_GPGGA+0x338>)
 80032b8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80032bc:	f7fd fe90 	bl	8000fe0 <__aeabi_fdiv>
 80032c0:	4603      	mov	r3, r0
 80032c2:	4619      	mov	r1, r3
 80032c4:	4620      	mov	r0, r4
 80032c6:	f7fd fccf 	bl	8000c68 <__addsf3>
 80032ca:	4603      	mov	r3, r0
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fd f925 	bl	800051c <__aeabi_f2d>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 80032da:	2300      	movs	r3, #0
 80032dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80032e0:	e010      	b.n	8003304 <nmea_GPGGA+0x194>
 80032e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032e8:	4413      	add	r3, r2
 80032ea:	7819      	ldrb	r1, [r3, #0]
 80032ec:	f107 0210 	add.w	r2, r7, #16
 80032f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032f4:	4413      	add	r3, r2
 80032f6:	460a      	mov	r2, r1
 80032f8:	701a      	strb	r2, [r3, #0]
 80032fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032fe:	3301      	adds	r3, #1
 8003300:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003304:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003308:	2b02      	cmp	r3, #2
 800330a:	ddea      	ble.n	80032e2 <nmea_GPGGA+0x172>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 800330c:	2300      	movs	r3, #0
 800330e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003312:	e011      	b.n	8003338 <nmea_GPGGA+0x1c8>
 8003314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003316:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800331a:	3303      	adds	r3, #3
 800331c:	4413      	add	r3, r2
 800331e:	7819      	ldrb	r1, [r3, #0]
 8003320:	f107 0208 	add.w	r2, r7, #8
 8003324:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003328:	4413      	add	r3, r2
 800332a:	460a      	mov	r2, r1
 800332c:	701a      	strb	r2, [r3, #0]
 800332e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003332:	3301      	adds	r3, #1
 8003334:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003338:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800333c:	2b05      	cmp	r3, #5
 800333e:	dde9      	ble.n	8003314 <nmea_GPGGA+0x1a4>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8003340:	f107 0310 	add.w	r3, r7, #16
 8003344:	220a      	movs	r2, #10
 8003346:	2100      	movs	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f00a f981 	bl	800d650 <strtol>
 800334e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8003352:	f107 0308 	add.w	r3, r7, #8
 8003356:	2100      	movs	r1, #0
 8003358:	4618      	mov	r0, r3
 800335a:	f00a f8a1 	bl	800d4a0 <strtof>
 800335e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8003362:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8003366:	f7fd fd33 	bl	8000dd0 <__aeabi_i2f>
 800336a:	4604      	mov	r4, r0
 800336c:	494e      	ldr	r1, [pc, #312]	; (80034a8 <nmea_GPGGA+0x338>)
 800336e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8003372:	f7fd fe35 	bl	8000fe0 <__aeabi_fdiv>
 8003376:	4603      	mov	r3, r0
 8003378:	4619      	mov	r1, r3
 800337a:	4620      	mov	r0, r4
 800337c:	f7fd fc74 	bl	8000c68 <__addsf3>
 8003380:	4603      	mov	r3, r0
 8003382:	4618      	mov	r0, r3
 8003384:	f7fd f8ca 	bl	800051c <__aeabi_f2d>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800339c:	f7fd fb7e 	bl	8000a9c <__aeabi_dcmpeq>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d17a      	bne.n	800349c <nmea_GPGGA+0x32c>
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80033b2:	f7fd fb73 	bl	8000a9c <__aeabi_dcmpeq>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d16f      	bne.n	800349c <nmea_GPGGA+0x32c>
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	4b3a      	ldr	r3, [pc, #232]	; (80034ac <nmea_GPGGA+0x33c>)
 80033c2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80033c6:	f7fd fb73 	bl	8000ab0 <__aeabi_dcmplt>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d065      	beq.n	800349c <nmea_GPGGA+0x32c>
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	4b36      	ldr	r3, [pc, #216]	; (80034b0 <nmea_GPGGA+0x340>)
 80033d6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80033da:	f7fd fb69 	bl	8000ab0 <__aeabi_dcmplt>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d05b      	beq.n	800349c <nmea_GPGGA+0x32c>
            gps_data->latitude = lat_deg;
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80033ea:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 80033f4:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80033fc:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8003406:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8003408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800340a:	2100      	movs	r1, #0
 800340c:	4618      	mov	r0, r3
 800340e:	f00a f847 	bl	800d4a0 <strtof>
 8003412:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 8003416:	f04f 0100 	mov.w	r1, #0
 800341a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800341e:	f7fd febf 	bl	80011a0 <__aeabi_fcmpeq>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <nmea_GPGGA+0x2be>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	e001      	b.n	8003432 <nmea_GPGGA+0x2c2>
 800342e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 8003436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003438:	220a      	movs	r2, #10
 800343a:	2100      	movs	r1, #0
 800343c:	4618      	mov	r0, r3
 800343e:	f00a f907 	bl	800d650 <strtol>
 8003442:	4602      	mov	r2, r0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8003448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344a:	220a      	movs	r2, #10
 800344c:	2100      	movs	r1, #0
 800344e:	4618      	mov	r0, r3
 8003450:	f00a f8fe 	bl	800d650 <strtol>
 8003454:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8003458:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800345c:	2b00      	cmp	r3, #0
 800345e:	bfcc      	ite	gt
 8003460:	2301      	movgt	r3, #1
 8003462:	2300      	movle	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 800346c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800346e:	2100      	movs	r1, #0
 8003470:	4618      	mov	r0, r3
 8003472:	f00a f815 	bl	800d4a0 <strtof>
 8003476:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 800347a:	f04f 0100 	mov.w	r1, #0
 800347e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8003482:	f7fd fe8d 	bl	80011a0 <__aeabi_fcmpeq>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <nmea_GPGGA+0x322>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	e001      	b.n	8003496 <nmea_GPGGA+0x326>
 8003492:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 800349a:	e022      	b.n	80034e2 <nmea_GPGGA+0x372>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 800349c:	2300      	movs	r3, #0
 800349e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80034a2:	e016      	b.n	80034d2 <nmea_GPGGA+0x362>
 80034a4:	08011ef0 	.word	0x08011ef0
 80034a8:	42700000 	.word	0x42700000
 80034ac:	40568000 	.word	0x40568000
 80034b0:	40668000 	.word	0x40668000
 80034b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	33d8      	adds	r3, #216	; 0xd8
 80034bc:	443b      	add	r3, r7
 80034be:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f009 f922 	bl	800c70c <free>
 80034c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034cc:	3301      	adds	r3, #1
 80034ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80034d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034da:	429a      	cmp	r2, r3
 80034dc:	dbea      	blt.n	80034b4 <nmea_GPGGA+0x344>
            return 0;
 80034de:	2300      	movs	r3, #0
 80034e0:	e019      	b.n	8003516 <nmea_GPGGA+0x3a6>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 80034e2:	2300      	movs	r3, #0
 80034e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034e8:	e00e      	b.n	8003508 <nmea_GPGGA+0x398>
 80034ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	33d8      	adds	r3, #216	; 0xd8
 80034f2:	443b      	add	r3, r7
 80034f4:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f009 f907 	bl	800c70c <free>
 80034fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003502:	3301      	adds	r3, #1
 8003504:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003508:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800350c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003510:	429a      	cmp	r2, r3
 8003512:	dbea      	blt.n	80034ea <nmea_GPGGA+0x37a>
    return 1;
 8003514:	2301      	movs	r3, #1
}
 8003516:	4618      	mov	r0, r3
 8003518:	37dc      	adds	r7, #220	; 0xdc
 800351a:	46bd      	mov	sp, r7
 800351c:	bd90      	pop	{r4, r7, pc}
 800351e:	bf00      	nop

08003520 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8003520:	b590      	push	{r4, r7, lr}
 8003522:	b0a3      	sub	sp, #140	; 0x8c
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 800352a:	2300      	movs	r3, #0
 800352c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 8003530:	f107 030c 	add.w	r3, r7, #12
 8003534:	2264      	movs	r2, #100	; 0x64
 8003536:	2100      	movs	r1, #0
 8003538:	4618      	mov	r0, r3
 800353a:	f00a fe0a 	bl	800e152 <memset>
    char *marker = strtok(inputString, ",");
 800353e:	493b      	ldr	r1, [pc, #236]	; (800362c <nmea_GPGSA+0x10c>)
 8003540:	6838      	ldr	r0, [r7, #0]
 8003542:	f00a fe41 	bl	800e1c8 <strtok>
 8003546:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 800354a:	e027      	b.n	800359c <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 800354c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8003550:	f7fc fe78 	bl	8000244 <strlen>
 8003554:	4603      	mov	r3, r0
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 800355c:	1c63      	adds	r3, r4, #1
 800355e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003562:	4610      	mov	r0, r2
 8003564:	f009 f8ca 	bl	800c6fc <malloc>
 8003568:	4603      	mov	r3, r0
 800356a:	461a      	mov	r2, r3
 800356c:	00a3      	lsls	r3, r4, #2
 800356e:	3388      	adds	r3, #136	; 0x88
 8003570:	443b      	add	r3, r7
 8003572:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 8003576:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800357a:	3b01      	subs	r3, #1
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	3388      	adds	r3, #136	; 0x88
 8003580:	443b      	add	r3, r7
 8003582:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8003586:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800358a:	4618      	mov	r0, r3
 800358c:	f00b fcb9 	bl	800ef02 <strcpy>
        marker = strtok(NULL, ",");
 8003590:	4926      	ldr	r1, [pc, #152]	; (800362c <nmea_GPGSA+0x10c>)
 8003592:	2000      	movs	r0, #0
 8003594:	f00a fe18 	bl	800e1c8 <strtok>
 8003598:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 800359c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1d3      	bne.n	800354c <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	220a      	movs	r2, #10
 80035a8:	2100      	movs	r1, #0
 80035aa:	4618      	mov	r0, r3
 80035ac:	f00a f850 	bl	800d650 <strtol>
 80035b0:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 80035b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	bfcc      	ite	gt
 80035b8:	2301      	movgt	r3, #1
 80035ba:	2300      	movle	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	461a      	mov	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 80035c4:	2300      	movs	r3, #0
 80035c6:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 80035c8:	2303      	movs	r3, #3
 80035ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80035cc:	e00e      	b.n	80035ec <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 80035ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	3388      	adds	r3, #136	; 0x88
 80035d4:	443b      	add	r3, r7
 80035d6:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <nmea_GPGSA+0xc6>
            satelliteCount++;
 80035e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035e2:	3301      	adds	r3, #1
 80035e4:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 80035e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035e8:	3301      	adds	r3, #1
 80035ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80035ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035ee:	2b0e      	cmp	r3, #14
 80035f0:	dded      	ble.n	80035ce <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80035f6:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 80035f8:	2300      	movs	r3, #0
 80035fa:	677b      	str	r3, [r7, #116]	; 0x74
 80035fc:	e00b      	b.n	8003616 <nmea_GPGSA+0xf6>
 80035fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	3388      	adds	r3, #136	; 0x88
 8003604:	443b      	add	r3, r7
 8003606:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800360a:	4618      	mov	r0, r3
 800360c:	f009 f87e 	bl	800c70c <free>
 8003610:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003612:	3301      	adds	r3, #1
 8003614:	677b      	str	r3, [r7, #116]	; 0x74
 8003616:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003618:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800361c:	429a      	cmp	r2, r3
 800361e:	dbee      	blt.n	80035fe <nmea_GPGSA+0xde>
    return 1;
 8003620:	2301      	movs	r3, #1
}
 8003622:	4618      	mov	r0, r3
 8003624:	378c      	adds	r7, #140	; 0x8c
 8003626:	46bd      	mov	sp, r7
 8003628:	bd90      	pop	{r4, r7, pc}
 800362a:	bf00      	nop
 800362c:	08011ef0 	.word	0x08011ef0

08003630 <nmea_GPGLL>:



int nmea_GPGLL(GPS *gps_data, char*inputString) {
 8003630:	b590      	push	{r4, r7, lr}
 8003632:	b0b7      	sub	sp, #220	; 0xdc
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]

    char *values[25];
    int counter = 0;
 800363a:	2300      	movs	r3, #0
 800363c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 8003640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003644:	2264      	movs	r2, #100	; 0x64
 8003646:	2100      	movs	r1, #0
 8003648:	4618      	mov	r0, r3
 800364a:	f00a fd82 	bl	800e152 <memset>
    char *marker = strtok(inputString, ",");
 800364e:	49b0      	ldr	r1, [pc, #704]	; (8003910 <nmea_GPGLL+0x2e0>)
 8003650:	6838      	ldr	r0, [r7, #0]
 8003652:	f00a fdb9 	bl	800e1c8 <strtok>
 8003656:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 800365a:	e027      	b.n	80036ac <nmea_GPGLL+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 800365c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8003660:	f7fc fdf0 	bl	8000244 <strlen>
 8003664:	4603      	mov	r3, r0
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 800366c:	1c63      	adds	r3, r4, #1
 800366e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003672:	4610      	mov	r0, r2
 8003674:	f009 f842 	bl	800c6fc <malloc>
 8003678:	4603      	mov	r3, r0
 800367a:	461a      	mov	r2, r3
 800367c:	00a3      	lsls	r3, r4, #2
 800367e:	33d8      	adds	r3, #216	; 0xd8
 8003680:	443b      	add	r3, r7
 8003682:	f843 2cb4 	str.w	r2, [r3, #-180]
        strcpy(values[counter - 1], marker);
 8003686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800368a:	3b01      	subs	r3, #1
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	33d8      	adds	r3, #216	; 0xd8
 8003690:	443b      	add	r3, r7
 8003692:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8003696:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800369a:	4618      	mov	r0, r3
 800369c:	f00b fc31 	bl	800ef02 <strcpy>
        marker = strtok(NULL, ",");
 80036a0:	499b      	ldr	r1, [pc, #620]	; (8003910 <nmea_GPGLL+0x2e0>)
 80036a2:	2000      	movs	r0, #0
 80036a4:	f00a fd90 	bl	800e1c8 <strtok>
 80036a8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 80036ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1d3      	bne.n	800365c <nmea_GPGLL+0x2c>
    }
    char latSide = values[2][0];
 80036b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    if (latSide == 'S' || latSide == 'N') { //check if data is sorta intact
 80036bc:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80036c0:	2b53      	cmp	r3, #83	; 0x53
 80036c2:	d004      	beq.n	80036ce <nmea_GPGLL+0x9e>
 80036c4:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80036c8:	2b4e      	cmp	r3, #78	; 0x4e
 80036ca:	f040 811c 	bne.w	8003906 <nmea_GPGLL+0x2d6>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[1][z];
 80036ce:	2300      	movs	r3, #0
 80036d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036d4:	e010      	b.n	80036f8 <nmea_GPGLL+0xc8>
 80036d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80036dc:	4413      	add	r3, r2
 80036de:	7819      	ldrb	r1, [r3, #0]
 80036e0:	f107 0220 	add.w	r2, r7, #32
 80036e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80036e8:	4413      	add	r3, r2
 80036ea:	460a      	mov	r2, r1
 80036ec:	701a      	strb	r2, [r3, #0]
 80036ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80036f2:	3301      	adds	r3, #1
 80036f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	ddea      	ble.n	80036d6 <nmea_GPGLL+0xa6>
        for (int z = 0; z < 6; z++) lat_m[z] = values[1][z + 2];
 8003700:	2300      	movs	r3, #0
 8003702:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003706:	e011      	b.n	800372c <nmea_GPGLL+0xfc>
 8003708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800370a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800370e:	3302      	adds	r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	7819      	ldrb	r1, [r3, #0]
 8003714:	f107 0218 	add.w	r2, r7, #24
 8003718:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800371c:	4413      	add	r3, r2
 800371e:	460a      	mov	r2, r1
 8003720:	701a      	strb	r2, [r3, #0]
 8003722:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003726:	3301      	adds	r3, #1
 8003728:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800372c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003730:	2b05      	cmp	r3, #5
 8003732:	dde9      	ble.n	8003708 <nmea_GPGLL+0xd8>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8003734:	f107 0320 	add.w	r3, r7, #32
 8003738:	220a      	movs	r2, #10
 800373a:	2100      	movs	r1, #0
 800373c:	4618      	mov	r0, r3
 800373e:	f009 ff87 	bl	800d650 <strtol>
 8003742:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8003746:	f107 0318 	add.w	r3, r7, #24
 800374a:	2100      	movs	r1, #0
 800374c:	4618      	mov	r0, r3
 800374e:	f009 fea7 	bl	800d4a0 <strtof>
 8003752:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8003756:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800375a:	f7fd fb39 	bl	8000dd0 <__aeabi_i2f>
 800375e:	4604      	mov	r4, r0
 8003760:	496c      	ldr	r1, [pc, #432]	; (8003914 <nmea_GPGLL+0x2e4>)
 8003762:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003766:	f7fd fc3b 	bl	8000fe0 <__aeabi_fdiv>
 800376a:	4603      	mov	r3, r0
 800376c:	4619      	mov	r1, r3
 800376e:	4620      	mov	r0, r4
 8003770:	f7fd fa7a 	bl	8000c68 <__addsf3>
 8003774:	4603      	mov	r3, r0
 8003776:	4618      	mov	r0, r3
 8003778:	f7fc fed0 	bl	800051c <__aeabi_f2d>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];
        char lonSide = values[4][0];
 8003784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
        for (int z = 0; z < 3; z++) lon_d[z] = values[3][z];
 800378c:	2300      	movs	r3, #0
 800378e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003792:	e010      	b.n	80037b6 <nmea_GPGLL+0x186>
 8003794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003796:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800379a:	4413      	add	r3, r2
 800379c:	7819      	ldrb	r1, [r3, #0]
 800379e:	f107 0214 	add.w	r2, r7, #20
 80037a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037a6:	4413      	add	r3, r2
 80037a8:	460a      	mov	r2, r1
 80037aa:	701a      	strb	r2, [r3, #0]
 80037ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037b0:	3301      	adds	r3, #1
 80037b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	ddea      	ble.n	8003794 <nmea_GPGLL+0x164>
        for (int z = 0; z < 6; z++) lon_m[z] = values[3][z + 3];
 80037be:	2300      	movs	r3, #0
 80037c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037c4:	e011      	b.n	80037ea <nmea_GPGLL+0x1ba>
 80037c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037cc:	3303      	adds	r3, #3
 80037ce:	4413      	add	r3, r2
 80037d0:	7819      	ldrb	r1, [r3, #0]
 80037d2:	f107 020c 	add.w	r2, r7, #12
 80037d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037da:	4413      	add	r3, r2
 80037dc:	460a      	mov	r2, r1
 80037de:	701a      	strb	r2, [r3, #0]
 80037e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037e4:	3301      	adds	r3, #1
 80037e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037ee:	2b05      	cmp	r3, #5
 80037f0:	dde9      	ble.n	80037c6 <nmea_GPGLL+0x196>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 80037f2:	f107 0314 	add.w	r3, r7, #20
 80037f6:	220a      	movs	r2, #10
 80037f8:	2100      	movs	r1, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	f009 ff28 	bl	800d650 <strtol>
 8003800:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        float lon_min_strtof = strtof(lon_m, NULL);
 8003804:	f107 030c 	add.w	r3, r7, #12
 8003808:	2100      	movs	r1, #0
 800380a:	4618      	mov	r0, r3
 800380c:	f009 fe48 	bl	800d4a0 <strtof>
 8003810:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8003814:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8003818:	f7fd fada 	bl	8000dd0 <__aeabi_i2f>
 800381c:	4604      	mov	r4, r0
 800381e:	493d      	ldr	r1, [pc, #244]	; (8003914 <nmea_GPGLL+0x2e4>)
 8003820:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8003824:	f7fd fbdc 	bl	8000fe0 <__aeabi_fdiv>
 8003828:	4603      	mov	r3, r0
 800382a:	4619      	mov	r1, r3
 800382c:	4620      	mov	r0, r4
 800382e:	f7fd fa1b 	bl	8000c68 <__addsf3>
 8003832:	4603      	mov	r3, r0
 8003834:	4618      	mov	r0, r3
 8003836:	f7fc fe71 	bl	800051c <__aeabi_f2d>
 800383a:	4602      	mov	r2, r0
 800383c:	460b      	mov	r3, r1
 800383e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        //confirm that we aren't on null island
        if(lon_deg_strtol == 0 || lon_min_strtof == 0 || lat_deg_strtol == 0 || lat_min_strtof == 0) {
 8003842:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003846:	2b00      	cmp	r3, #0
 8003848:	d015      	beq.n	8003876 <nmea_GPGLL+0x246>
 800384a:	f04f 0100 	mov.w	r1, #0
 800384e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8003852:	f7fd fca5 	bl	80011a0 <__aeabi_fcmpeq>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10c      	bne.n	8003876 <nmea_GPGLL+0x246>
 800385c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d008      	beq.n	8003876 <nmea_GPGLL+0x246>
 8003864:	f04f 0100 	mov.w	r1, #0
 8003868:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800386c:	f7fd fc98 	bl	80011a0 <__aeabi_fcmpeq>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d01a      	beq.n	80038ac <nmea_GPGLL+0x27c>
            for(int i = 0; i<counter; i++) free(values[i]);
 8003876:	2300      	movs	r3, #0
 8003878:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800387c:	e00e      	b.n	800389c <nmea_GPGLL+0x26c>
 800387e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	33d8      	adds	r3, #216	; 0xd8
 8003886:	443b      	add	r3, r7
 8003888:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 800388c:	4618      	mov	r0, r3
 800388e:	f008 ff3d 	bl	800c70c <free>
 8003892:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003896:	3301      	adds	r3, #1
 8003898:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800389c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80038a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80038a4:	429a      	cmp	r2, r3
 80038a6:	dbea      	blt.n	800387e <nmea_GPGLL+0x24e>
            return 0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	e02d      	b.n	8003908 <nmea_GPGLL+0x2d8>
        }
        else{
            gps_data->latitude = lat_deg;
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80038b2:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->longitude = lon_deg;
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80038bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->latSide = latSide;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 80038c6:	721a      	strb	r2, [r3, #8]
            gps_data->lonSide = lonSide;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 80038ce:	761a      	strb	r2, [r3, #24]
            for(int i = 0; i<counter; i++) free(values[i]);
 80038d0:	2300      	movs	r3, #0
 80038d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038d6:	e00e      	b.n	80038f6 <nmea_GPGLL+0x2c6>
 80038d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	33d8      	adds	r3, #216	; 0xd8
 80038e0:	443b      	add	r3, r7
 80038e2:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f008 ff10 	bl	800c70c <free>
 80038ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038f0:	3301      	adds	r3, #1
 80038f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80038fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80038fe:	429a      	cmp	r2, r3
 8003900:	dbea      	blt.n	80038d8 <nmea_GPGLL+0x2a8>
            return 1;
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <nmea_GPGLL+0x2d8>
        }
    }
    else return 0;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	37dc      	adds	r7, #220	; 0xdc
 800390c:	46bd      	mov	sp, r7
 800390e:	bd90      	pop	{r4, r7, pc}
 8003910:	08011ef0 	.word	0x08011ef0
 8003914:	42700000 	.word	0x42700000

08003918 <nmea_GPRMC>:


int nmea_GPRMC(GPS *gps_data, char* inputString) {
 8003918:	b580      	push	{r7, lr}
 800391a:	b0a0      	sub	sp, #128	; 0x80
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]

    char *values[25];
    int counter = 0;
 8003922:	2300      	movs	r3, #0
 8003924:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(values, 0, sizeof(values));
 8003926:	f107 0308 	add.w	r3, r7, #8
 800392a:	2264      	movs	r2, #100	; 0x64
 800392c:	2100      	movs	r1, #0
 800392e:	4618      	mov	r0, r3
 8003930:	f00a fc0f 	bl	800e152 <memset>
    char *start = inputString;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	67bb      	str	r3, [r7, #120]	; 0x78
    char *end;

    // Loop until the end of the string is reached.
    while (start != NULL && *start != '\0') {
 8003938:	e058      	b.n	80039ec <nmea_GPRMC+0xd4>
        end = strchr(start, ',');
 800393a:	212c      	movs	r1, #44	; 0x2c
 800393c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800393e:	f00a fc10 	bl	800e162 <strchr>
 8003942:	6778      	str	r0, [r7, #116]	; 0x74
        if (end == NULL) {
 8003944:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <nmea_GPRMC+0x40>
            // Last token reached.
            end = start + strlen(start);
 800394a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800394c:	f7fc fc7a 	bl	8000244 <strlen>
 8003950:	4602      	mov	r2, r0
 8003952:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003954:	4413      	add	r3, r2
 8003956:	677b      	str	r3, [r7, #116]	; 0x74
        }

        if (end == start) {
 8003958:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800395a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800395c:	429a      	cmp	r2, r3
 800395e:	d113      	bne.n	8003988 <nmea_GPRMC+0x70>
            // Empty field found.
            values[counter] = malloc(1); // Allocate space for a single character
 8003960:	2001      	movs	r0, #1
 8003962:	f008 fecb 	bl	800c6fc <malloc>
 8003966:	4603      	mov	r3, r0
 8003968:	461a      	mov	r2, r3
 800396a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	3380      	adds	r3, #128	; 0x80
 8003970:	443b      	add	r3, r7
 8003972:	f843 2c78 	str.w	r2, [r3, #-120]
            values[counter][0] = '\0';   // Set it to the empty string
 8003976:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	3380      	adds	r3, #128	; 0x80
 800397c:	443b      	add	r3, r7
 800397e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
 8003986:	e027      	b.n	80039d8 <nmea_GPRMC+0xc0>
        } else {
            // Non-empty field found.
            values[counter] = malloc(end - start + 1); // Allocate space for the token
 8003988:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800398a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	3301      	adds	r3, #1
 8003990:	4618      	mov	r0, r3
 8003992:	f008 feb3 	bl	800c6fc <malloc>
 8003996:	4603      	mov	r3, r0
 8003998:	461a      	mov	r2, r3
 800399a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	3380      	adds	r3, #128	; 0x80
 80039a0:	443b      	add	r3, r7
 80039a2:	f843 2c78 	str.w	r2, [r3, #-120]
            strncpy(values[counter], start, end - start); // Copy the token
 80039a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	3380      	adds	r3, #128	; 0x80
 80039ac:	443b      	add	r3, r7
 80039ae:	f853 0c78 	ldr.w	r0, [r3, #-120]
 80039b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	461a      	mov	r2, r3
 80039ba:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80039bc:	f00a fbf0 	bl	800e1a0 <strncpy>
            values[counter][end - start] = '\0'; // Null-terminate it
 80039c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	3380      	adds	r3, #128	; 0x80
 80039c6:	443b      	add	r3, r7
 80039c8:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80039cc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80039ce:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80039d0:	1a8a      	subs	r2, r1, r2
 80039d2:	4413      	add	r3, r2
 80039d4:	2200      	movs	r2, #0
 80039d6:	701a      	strb	r2, [r3, #0]
        }

        counter++;
 80039d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039da:	3301      	adds	r3, #1
 80039dc:	67fb      	str	r3, [r7, #124]	; 0x7c
        if (*end == '\0') {
 80039de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <nmea_GPRMC+0xe4>
            // End of the string reached.
            break;
        }
        start = end + 1; // Move to the start of the next token.
 80039e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039e8:	3301      	adds	r3, #1
 80039ea:	67bb      	str	r3, [r7, #120]	; 0x78
    while (start != NULL && *start != '\0') {
 80039ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d005      	beq.n	80039fe <nmea_GPRMC+0xe6>
 80039f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d19f      	bne.n	800393a <nmea_GPRMC+0x22>
 80039fa:	e000      	b.n	80039fe <nmea_GPRMC+0xe6>
            break;
 80039fc:	bf00      	nop
    }

    // ... (Rest of your code for checking and handling the date and freeing memory)

    // Make sure to check if the date was successfully extracted
    if (counter > 9 && strlen(values[9]) == 6) {
 80039fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a00:	2b09      	cmp	r3, #9
 8003a02:	dd2a      	ble.n	8003a5a <nmea_GPRMC+0x142>
 8003a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fc fc1c 	bl	8000244 <strlen>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b06      	cmp	r3, #6
 8003a10:	d123      	bne.n	8003a5a <nmea_GPRMC+0x142>
        strncpy(gps_data->date, values[9], 6);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3336      	adds	r3, #54	; 0x36
 8003a16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a18:	2206      	movs	r2, #6
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f00a fbc0 	bl	800e1a0 <strncpy>
        gps_data->date[6] = '\0';
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        // Free allocated memory
        for (int i = 0; i < counter; i++) free(values[i]);
 8003a28:	2300      	movs	r3, #0
 8003a2a:	673b      	str	r3, [r7, #112]	; 0x70
 8003a2c:	e00b      	b.n	8003a46 <nmea_GPRMC+0x12e>
 8003a2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	3380      	adds	r3, #128	; 0x80
 8003a34:	443b      	add	r3, r7
 8003a36:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f008 fe66 	bl	800c70c <free>
 8003a40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a42:	3301      	adds	r3, #1
 8003a44:	673b      	str	r3, [r7, #112]	; 0x70
 8003a46:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003a48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	dbef      	blt.n	8003a2e <nmea_GPRMC+0x116>
        gps_data->RMC_Flag = 1;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        return 1; // Success
 8003a56:	2301      	movs	r3, #1
 8003a58:	e013      	b.n	8003a82 <nmea_GPRMC+0x16a>
    } else {
        // Free allocated memory before returning
        for (int i = 0; i < counter; i++) free(values[i]);
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a5e:	e00b      	b.n	8003a78 <nmea_GPRMC+0x160>
 8003a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	3380      	adds	r3, #128	; 0x80
 8003a66:	443b      	add	r3, r7
 8003a68:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f008 fe4d 	bl	800c70c <free>
 8003a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a74:	3301      	adds	r3, #1
 8003a76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	dbef      	blt.n	8003a60 <nmea_GPRMC+0x148>
        return 0; // Failure
 8003a80:	2300      	movs	r3, #0
    }
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3780      	adds	r7, #128	; 0x80
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8003a8c:	b590      	push	{r4, r7, lr}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8003a96:	223c      	movs	r2, #60	; 0x3c
 8003a98:	2100      	movs	r1, #0
 8003a9a:	485e      	ldr	r0, [pc, #376]	; (8003c14 <nmea_parse+0x188>)
 8003a9c:	f00a fb59 	bl	800e152 <memset>
    char * token = strtok(buffer, "$"); // TODO: Check if buffer can be casted to a char * for strtok argument
 8003aa0:	495d      	ldr	r1, [pc, #372]	; (8003c18 <nmea_parse+0x18c>)
 8003aa2:	6838      	ldr	r0, [r7, #0]
 8003aa4:	f00a fb90 	bl	800e1c8 <strtok>
 8003aa8:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 8003aae:	e01d      	b.n	8003aec <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8003ab0:	6978      	ldr	r0, [r7, #20]
 8003ab2:	f7fc fbc7 	bl	8000244 <strlen>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	693c      	ldr	r4, [r7, #16]
 8003abc:	1c63      	adds	r3, r4, #1
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	f008 fe1b 	bl	800c6fc <malloc>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4b52      	ldr	r3, [pc, #328]	; (8003c14 <nmea_parse+0x188>)
 8003acc:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	4a4f      	ldr	r2, [pc, #316]	; (8003c14 <nmea_parse+0x188>)
 8003ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ada:	6979      	ldr	r1, [r7, #20]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f00b fa10 	bl	800ef02 <strcpy>
        token = strtok(NULL, "$");
 8003ae2:	494d      	ldr	r1, [pc, #308]	; (8003c18 <nmea_parse+0x18c>)
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	f00a fb6f 	bl	800e1c8 <strtok>
 8003aea:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1de      	bne.n	8003ab0 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	e072      	b.n	8003bde <nmea_parse+0x152>
       if(strstr(data[i], "\r\n")!=NULL){
 8003af8:	4a46      	ldr	r2, [pc, #280]	; (8003c14 <nmea_parse+0x188>)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b00:	4946      	ldr	r1, [pc, #280]	; (8003c1c <nmea_parse+0x190>)
 8003b02:	4618      	mov	r0, r3
 8003b04:	f00a fbbc 	bl	800e280 <strstr>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d064      	beq.n	8003bd8 <nmea_parse+0x14c>
           if(strstr(data[i], "GPGLL")!=NULL){
 8003b0e:	4a41      	ldr	r2, [pc, #260]	; (8003c14 <nmea_parse+0x188>)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b16:	4942      	ldr	r1, [pc, #264]	; (8003c20 <nmea_parse+0x194>)
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f00a fbb1 	bl	800e280 <strstr>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d008      	beq.n	8003b36 <nmea_parse+0xaa>
               nmea_GPGLL(gps_data, data[i]);
 8003b24:	4a3b      	ldr	r2, [pc, #236]	; (8003c14 <nmea_parse+0x188>)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7ff fd7e 	bl	8003630 <nmea_GPGLL>
 8003b34:	e050      	b.n	8003bd8 <nmea_parse+0x14c>
           }
           else if(strstr(data[i], "GPGSA")!=NULL){
 8003b36:	4a37      	ldr	r2, [pc, #220]	; (8003c14 <nmea_parse+0x188>)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b3e:	4939      	ldr	r1, [pc, #228]	; (8003c24 <nmea_parse+0x198>)
 8003b40:	4618      	mov	r0, r3
 8003b42:	f00a fb9d 	bl	800e280 <strstr>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d008      	beq.n	8003b5e <nmea_parse+0xd2>
               nmea_GPGSA(gps_data, data[i]);
 8003b4c:	4a31      	ldr	r2, [pc, #196]	; (8003c14 <nmea_parse+0x188>)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b54:	4619      	mov	r1, r3
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7ff fce2 	bl	8003520 <nmea_GPGSA>
 8003b5c:	e03c      	b.n	8003bd8 <nmea_parse+0x14c>
           }
           else if(strstr(data[i], "GNGGA") != NULL || (strstr(data[i], "GPGGA"))!=NULL){
 8003b5e:	4a2d      	ldr	r2, [pc, #180]	; (8003c14 <nmea_parse+0x188>)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b66:	4930      	ldr	r1, [pc, #192]	; (8003c28 <nmea_parse+0x19c>)
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f00a fb89 	bl	800e280 <strstr>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10a      	bne.n	8003b8a <nmea_parse+0xfe>
 8003b74:	4a27      	ldr	r2, [pc, #156]	; (8003c14 <nmea_parse+0x188>)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b7c:	492b      	ldr	r1, [pc, #172]	; (8003c2c <nmea_parse+0x1a0>)
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f00a fb7e 	bl	800e280 <strstr>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d008      	beq.n	8003b9c <nmea_parse+0x110>
               nmea_GPGGA(gps_data, data[i]);
 8003b8a:	4a22      	ldr	r2, [pc, #136]	; (8003c14 <nmea_parse+0x188>)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b92:	4619      	mov	r1, r3
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7ff faeb 	bl	8003170 <nmea_GPGGA>
 8003b9a:	e01d      	b.n	8003bd8 <nmea_parse+0x14c>
           }
           else if(strstr(data[i], "GNRMC") != NULL || (strstr(data[i], "GPRMC"))!=NULL){
 8003b9c:	4a1d      	ldr	r2, [pc, #116]	; (8003c14 <nmea_parse+0x188>)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba4:	4922      	ldr	r1, [pc, #136]	; (8003c30 <nmea_parse+0x1a4>)
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f00a fb6a 	bl	800e280 <strstr>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10a      	bne.n	8003bc8 <nmea_parse+0x13c>
 8003bb2:	4a18      	ldr	r2, [pc, #96]	; (8003c14 <nmea_parse+0x188>)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bba:	491e      	ldr	r1, [pc, #120]	; (8003c34 <nmea_parse+0x1a8>)
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f00a fb5f 	bl	800e280 <strstr>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d007      	beq.n	8003bd8 <nmea_parse+0x14c>
	       nmea_GPRMC(gps_data, data[i]);
 8003bc8:	4a12      	ldr	r2, [pc, #72]	; (8003c14 <nmea_parse+0x188>)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7ff fea0 	bl	8003918 <nmea_GPRMC>
    for(int i = 0; i<cnt; i++){
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	db88      	blt.n	8003af8 <nmea_parse+0x6c>
	   }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 8003be6:	2300      	movs	r3, #0
 8003be8:	60bb      	str	r3, [r7, #8]
 8003bea:	e009      	b.n	8003c00 <nmea_parse+0x174>
 8003bec:	4a09      	ldr	r2, [pc, #36]	; (8003c14 <nmea_parse+0x188>)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f008 fd89 	bl	800c70c <free>
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	60bb      	str	r3, [r7, #8]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	dbf1      	blt.n	8003bec <nmea_parse+0x160>


}
 8003c08:	bf00      	nop
 8003c0a:	bf00      	nop
 8003c0c:	371c      	adds	r7, #28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd90      	pop	{r4, r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000734 	.word	0x20000734
 8003c18:	08011ef4 	.word	0x08011ef4
 8003c1c:	08011ef8 	.word	0x08011ef8
 8003c20:	08011efc 	.word	0x08011efc
 8003c24:	08011f04 	.word	0x08011f04
 8003c28:	08011f0c 	.word	0x08011f0c
 8003c2c:	08011f14 	.word	0x08011f14
 8003c30:	08011f1c 	.word	0x08011f1c
 8003c34:	08011f24 	.word	0x08011f24

08003c38 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003c3e:	1d3b      	adds	r3, r7, #4
 8003c40:	2100      	movs	r1, #0
 8003c42:	460a      	mov	r2, r1
 8003c44:	801a      	strh	r2, [r3, #0]
 8003c46:	460a      	mov	r2, r1
 8003c48:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003c4e:	4b1d      	ldr	r3, [pc, #116]	; (8003cc4 <MX_RTC_Init+0x8c>)
 8003c50:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <MX_RTC_Init+0x90>)
 8003c52:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8003c54:	4b1b      	ldr	r3, [pc, #108]	; (8003cc4 <MX_RTC_Init+0x8c>)
 8003c56:	f04f 32ff 	mov.w	r2, #4294967295
 8003c5a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8003c5c:	4b19      	ldr	r3, [pc, #100]	; (8003cc4 <MX_RTC_Init+0x8c>)
 8003c5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c62:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003c64:	4817      	ldr	r0, [pc, #92]	; (8003cc4 <MX_RTC_Init+0x8c>)
 8003c66:	f004 f8f3 	bl	8007e50 <HAL_RTC_Init>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8003c70:	f7ff fa78 	bl	8003164 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003c80:	1d3b      	adds	r3, r7, #4
 8003c82:	2201      	movs	r2, #1
 8003c84:	4619      	mov	r1, r3
 8003c86:	480f      	ldr	r0, [pc, #60]	; (8003cc4 <MX_RTC_Init+0x8c>)
 8003c88:	f004 f96e 	bl	8007f68 <HAL_RTC_SetTime>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8003c92:	f7ff fa67 	bl	8003164 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003c96:	2301      	movs	r3, #1
 8003c98:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8003ca6:	463b      	mov	r3, r7
 8003ca8:	2201      	movs	r2, #1
 8003caa:	4619      	mov	r1, r3
 8003cac:	4805      	ldr	r0, [pc, #20]	; (8003cc4 <MX_RTC_Init+0x8c>)
 8003cae:	f004 facb 	bl	8008248 <HAL_RTC_SetDate>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8003cb8:	f7ff fa54 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003cbc:	bf00      	nop
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	20000770 	.word	0x20000770
 8003cc8:	40002800 	.word	0x40002800

08003ccc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a0b      	ldr	r2, [pc, #44]	; (8003d08 <HAL_RTC_MspInit+0x3c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d110      	bne.n	8003d00 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8003cde:	f003 fadd 	bl	800729c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <HAL_RTC_MspInit+0x40>)
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	4a09      	ldr	r2, [pc, #36]	; (8003d0c <HAL_RTC_MspInit+0x40>)
 8003ce8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cec:	61d3      	str	r3, [r2, #28]
 8003cee:	4b07      	ldr	r3, [pc, #28]	; (8003d0c <HAL_RTC_MspInit+0x40>)
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003cfa:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <HAL_RTC_MspInit+0x44>)
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003d00:	bf00      	nop
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40002800 	.word	0x40002800
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	4242043c 	.word	0x4242043c

08003d14 <Sync_RTC_With_GPS>:

/* USER CODE BEGIN 1 */


void Sync_RTC_With_GPS()
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	f5ad 6d8b 	sub.w	sp, sp, #1112	; 0x458
 8003d1a:	af02      	add	r7, sp, #8
  /* Buffers for the GPSTime and GPSDate */
  char GPSTime[256];
  char GPSDate[256];

  /* Flag to track if the sync is complete */
  uint8_t RTC_Sync_Flag = 0;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f

  uint32_t gps_sync_start_time = HAL_GetTick();
 8003d22:	f000 fccf 	bl	80046c4 <HAL_GetTick>
 8003d26:	f8c7 0448 	str.w	r0, [r7, #1096]	; 0x448
  while(RTC_Sync_Flag == 0 && HAL_GetTick() - gps_sync_start_time < GPS_SYNC_TIMEOUT) {
 8003d2a:	e119      	b.n	8003f60 <Sync_RTC_With_GPS+0x24c>
      printf("Still syncing\n\r");
 8003d2c:	489b      	ldr	r0, [pc, #620]	; (8003f9c <Sync_RTC_With_GPS+0x288>)
 8003d2e:	f00a f9b9 	bl	800e0a4 <iprintf>
    /* Read in an NMEA message into the buffer */
    if(HAL_I2C_IsDeviceReady(&hi2c1, GPS_DEVICE_ADDRESS, 1, HAL_MAX_DELAY) == HAL_OK) {
 8003d32:	f04f 33ff 	mov.w	r3, #4294967295
 8003d36:	2201      	movs	r2, #1
 8003d38:	2184      	movs	r1, #132	; 0x84
 8003d3a:	4899      	ldr	r0, [pc, #612]	; (8003fa0 <Sync_RTC_With_GPS+0x28c>)
 8003d3c:	f002 fcfe 	bl	800673c <HAL_I2C_IsDeviceReady>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f040 810c 	bne.w	8003f60 <Sync_RTC_With_GPS+0x24c>
	    HAL_I2C_Master_Receive(&hi2c1, GPS_DEVICE_ADDRESS, receive_buffer, sizeof(receive_buffer), HAL_MAX_DELAY);
 8003d48:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8003d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d56:	2184      	movs	r1, #132	; 0x84
 8003d58:	4891      	ldr	r0, [pc, #580]	; (8003fa0 <Sync_RTC_With_GPS+0x28c>)
 8003d5a:	f001 ff21 	bl	8005ba0 <HAL_I2C_Master_Receive>
	    //printf("Got Data\n\r");

	    GPS myData;
      nmea_parse(&myData, &receive_buffer);
 8003d5e:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8003d62:	463b      	mov	r3, r7
 8003d64:	4611      	mov	r1, r2
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff fe90 	bl	8003a8c <nmea_parse>

      /*
       * lastMeasure is a null-terminated string and has the format hhmmss.sss
       * Make sure there's a valid fix and that there is an RMC message
       */
      if(myData.fix == 1 && myData.RMC_Flag == 1) {
 8003d6c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003d70:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8003d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	f040 80f2 	bne.w	8003f60 <Sync_RTC_With_GPS+0x24c>
 8003d7c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003d80:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8003d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	f040 80e9 	bne.w	8003f60 <Sync_RTC_With_GPS+0x24c>
        //printf("Setting the RTC now\n\r");
        /* Copy the GPS time to GPSTime */
        strncpy(GPSTime, myData.lastMeasure, 10);
 8003d8e:	463b      	mov	r3, r7
 8003d90:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8003d94:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003d98:	220a      	movs	r2, #10
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f00a fa00 	bl	800e1a0 <strncpy>
        GPSTime[10] = '\0'; // Ensure null termination
 8003da0:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003da4:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8003da8:	2200      	movs	r2, #0
 8003daa:	729a      	strb	r2, [r3, #10]

        /* Copy the GPS date to GPSDate */
        strncpy(GPSDate, myData.date, 6);
 8003dac:	463b      	mov	r3, r7
 8003dae:	f103 0136 	add.w	r1, r3, #54	; 0x36
 8003db2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003db6:	2206      	movs	r2, #6
 8003db8:	4618      	mov	r0, r3
 8003dba:	f00a f9f1 	bl	800e1a0 <strncpy>
        GPSDate[6] = '\0'; // Ensure null termination
 8003dbe:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003dc2:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	719a      	strb	r2, [r3, #6]

        /* Initialize Time and Date Objects */
        RTC_TimeTypeDef sTime = {0};
 8003dca:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003dce:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	460a      	mov	r2, r1
 8003dd6:	801a      	strh	r2, [r3, #0]
 8003dd8:	460a      	mov	r2, r1
 8003dda:	709a      	strb	r2, [r3, #2]
        RTC_DateTypeDef sDate = {0};
 8003ddc:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003de0:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]

        /* Manually parsing the hours, minutes, and seconds */
        sTime.Hours   = (GPSTime[0] - '0') * 10 + (GPSTime[1] - '0');
 8003de8:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003dec:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	3b30      	subs	r3, #48	; 0x30
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	461a      	mov	r2, r3
 8003df8:	0092      	lsls	r2, r2, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003e04:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8003e08:	785b      	ldrb	r3, [r3, #1]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	3b30      	subs	r3, #48	; 0x30
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003e16:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8003e1a:	701a      	strb	r2, [r3, #0]
        sTime.Minutes = (GPSTime[2] - '0') * 10 + (GPSTime[3] - '0');
 8003e1c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003e20:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8003e24:	789b      	ldrb	r3, [r3, #2]
 8003e26:	3b30      	subs	r3, #48	; 0x30
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	0092      	lsls	r2, r2, #2
 8003e2e:	4413      	add	r3, r2
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003e38:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8003e3c:	78db      	ldrb	r3, [r3, #3]
 8003e3e:	4413      	add	r3, r2
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	3b30      	subs	r3, #48	; 0x30
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003e4a:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8003e4e:	705a      	strb	r2, [r3, #1]
        sTime.Seconds = (GPSTime[4] - '0') * 10 + (GPSTime[5] - '0');
 8003e50:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003e54:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8003e58:	791b      	ldrb	r3, [r3, #4]
 8003e5a:	3b30      	subs	r3, #48	; 0x30
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	461a      	mov	r2, r3
 8003e60:	0092      	lsls	r2, r2, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003e6c:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8003e70:	795b      	ldrb	r3, [r3, #5]
 8003e72:	4413      	add	r3, r2
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	3b30      	subs	r3, #48	; 0x30
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003e7e:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8003e82:	709a      	strb	r2, [r3, #2]

        /* Set the RTC time with these settings */
        HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003e84:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003e88:	2200      	movs	r2, #0
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4845      	ldr	r0, [pc, #276]	; (8003fa4 <Sync_RTC_With_GPS+0x290>)
 8003e8e:	f004 f86b 	bl	8007f68 <HAL_RTC_SetTime>

        //printf("Time -- H: %u, M: %u, S: %u\n\r", sTime.Hours, sTime.Minutes, sTime.Seconds);

        /* Manually parsing the date, month, and year */
        sDate.Date  = (GPSDate[0] - '0') * 10 + (GPSDate[1] - '0');
 8003e92:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003e96:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	3b30      	subs	r3, #48	; 0x30
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	0092      	lsls	r2, r2, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003eae:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8003eb2:	785b      	ldrb	r3, [r3, #1]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	3b30      	subs	r3, #48	; 0x30
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003ec0:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8003ec4:	709a      	strb	r2, [r3, #2]
        sDate.Month = (GPSDate[2] - '0') * 10 + (GPSDate[3] - '0');
 8003ec6:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003eca:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8003ece:	789b      	ldrb	r3, [r3, #2]
 8003ed0:	3b30      	subs	r3, #48	; 0x30
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	0092      	lsls	r2, r2, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003ee2:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8003ee6:	78db      	ldrb	r3, [r3, #3]
 8003ee8:	4413      	add	r3, r2
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	3b30      	subs	r3, #48	; 0x30
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003ef4:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8003ef8:	705a      	strb	r2, [r3, #1]
        sDate.Year  = (GPSDate[4] - '0') * 10 + (GPSDate[5] - '0');
 8003efa:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003efe:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8003f02:	791b      	ldrb	r3, [r3, #4]
 8003f04:	3b30      	subs	r3, #48	; 0x30
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	461a      	mov	r2, r3
 8003f0a:	0092      	lsls	r2, r2, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003f16:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8003f1a:	795b      	ldrb	r3, [r3, #5]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	3b30      	subs	r3, #48	; 0x30
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003f28:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8003f2c:	70da      	strb	r2, [r3, #3]

        /* Set the RTC Date with these settings */
        HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003f2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f32:	2200      	movs	r2, #0
 8003f34:	4619      	mov	r1, r3
 8003f36:	481b      	ldr	r0, [pc, #108]	; (8003fa4 <Sync_RTC_With_GPS+0x290>)
 8003f38:	f004 f986 	bl	8008248 <HAL_RTC_SetDate>

        printf("Set the time to %d:%d\n", sTime.Hours, sTime.Minutes);
 8003f3c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003f40:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	4619      	mov	r1, r3
 8003f48:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003f4c:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8003f50:	785b      	ldrb	r3, [r3, #1]
 8003f52:	461a      	mov	r2, r3
 8003f54:	4814      	ldr	r0, [pc, #80]	; (8003fa8 <Sync_RTC_With_GPS+0x294>)
 8003f56:	f00a f8a5 	bl	800e0a4 <iprintf>

        //printf("Date -- D: %u, M: %u, Y: %u\n\r", sDate.Date, sDate.Month, sDate.Year);

        /* Set the flag to 1 indicating that the RTC has been sync'd */
        RTC_Sync_Flag = 1;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
  while(RTC_Sync_Flag == 0 && HAL_GetTick() - gps_sync_start_time < GPS_SYNC_TIMEOUT) {
 8003f60:	f897 344f 	ldrb.w	r3, [r7, #1103]	; 0x44f
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d109      	bne.n	8003f7c <Sync_RTC_With_GPS+0x268>
 8003f68:	f000 fbac 	bl	80046c4 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f78:	f4ff aed8 	bcc.w	8003d2c <Sync_RTC_With_GPS+0x18>
      }
    }
  }

  printf("Sync complete\n\r");
 8003f7c:	480b      	ldr	r0, [pc, #44]	; (8003fac <Sync_RTC_With_GPS+0x298>)
 8003f7e:	f00a f891 	bl	800e0a4 <iprintf>

  if (RTC_Sync_Flag == 0) {
 8003f82:	f897 344f 	ldrb.w	r3, [r7, #1103]	; 0x44f
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d102      	bne.n	8003f90 <Sync_RTC_With_GPS+0x27c>
    g_tel_diagnostics.gps_sync_fail = true;
 8003f8a:	4b09      	ldr	r3, [pc, #36]	; (8003fb0 <Sync_RTC_With_GPS+0x29c>)
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	705a      	strb	r2, [r3, #1]
  }

  /* Can turn on the TEL board LED here to indicate that the RTC is SYNC'd  */
}
 8003f90:	bf00      	nop
 8003f92:	f507 678a 	add.w	r7, r7, #1104	; 0x450
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	08011f2c 	.word	0x08011f2c
 8003fa0:	2000065c 	.word	0x2000065c
 8003fa4:	20000770 	.word	0x20000770
 8003fa8:	08011f3c 	.word	0x08011f3c
 8003fac:	08011f54 	.word	0x08011f54
 8003fb0:	20000704 	.word	0x20000704

08003fb4 <get_current_timestamp>:

double get_current_timestamp()
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
  /* Initialize Time and Date objects */
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;

  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003fba:	1d3b      	adds	r3, r7, #4
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	480b      	ldr	r0, [pc, #44]	; (8003ff0 <get_current_timestamp+0x3c>)
 8003fc2:	f004 f869 	bl	8008098 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003fc6:	463b      	mov	r3, r7
 8003fc8:	2200      	movs	r2, #0
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4808      	ldr	r0, [pc, #32]	; (8003ff0 <get_current_timestamp+0x3c>)
 8003fce:	f004 f9f1 	bl	80083b4 <HAL_RTC_GetDate>
  double epochTime = convertToEpochTime(&sTime, &sDate);
 8003fd2:	463a      	mov	r2, r7
 8003fd4:	1d3b      	adds	r3, r7, #4
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 f80b 	bl	8003ff4 <convertToEpochTime>
 8003fde:	e9c7 0102 	strd	r0, r1, [r7, #8]

  /* Return the resulting epoch time */
  return epochTime;
 8003fe2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	4619      	mov	r1, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	20000770 	.word	0x20000770

08003ff4 <convertToEpochTime>:

/* Used to get current time stamp */
double convertToEpochTime(RTC_TimeTypeDef *sTime, RTC_DateTypeDef *sDate)
{
 8003ff4:	b5b0      	push	{r4, r5, r7, lr}
 8003ff6:	b08c      	sub	sp, #48	; 0x30
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
    /* Initialize tm struct - from time.h library */
    struct tm t;

    /* Populate the tm structure fields from the RTC time and date */
    t.tm_year = sDate->Year + 100;  // Year since 1900, so add 100 to the year from the RTC (which starts at 2000).
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	78db      	ldrb	r3, [r3, #3]
 8004002:	3364      	adds	r3, #100	; 0x64
 8004004:	61fb      	str	r3, [r7, #28]
    t.tm_mon = sDate->Month - 1;    // tm_mon is 0-11, so subtract 1 from the RTC month (which starts at 1).
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	785b      	ldrb	r3, [r3, #1]
 800400a:	3b01      	subs	r3, #1
 800400c:	61bb      	str	r3, [r7, #24]
    t.tm_mday = sDate->Date;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	789b      	ldrb	r3, [r3, #2]
 8004012:	617b      	str	r3, [r7, #20]
    t.tm_hour = sTime->Hours;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	613b      	str	r3, [r7, #16]
    t.tm_min = sTime->Minutes;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	785b      	ldrb	r3, [r3, #1]
 800401e:	60fb      	str	r3, [r7, #12]
    t.tm_sec = sTime->Seconds;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	789b      	ldrb	r3, [r3, #2]
 8004024:	60bb      	str	r3, [r7, #8]
    t.tm_isdst = 0;                // Disable daylight saving time adjustments.
 8004026:	2300      	movs	r3, #0
 8004028:	62bb      	str	r3, [r7, #40]	; 0x28
//            t.tm_mday = lastDayOfMonth(t.tm_mon, t.tm_year + 1900);
//        }
//    }

    /* Convert to epoch time - Function from time.h library */
    long int epoch_secs = (long int) mktime(&t);
 800402a:	f107 0308 	add.w	r3, r7, #8
 800402e:	4618      	mov	r0, r3
 8004030:	f00a fa12 	bl	800e458 <mktime>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	4613      	mov	r3, r2
 800403a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Convert to double and add milliseconds with GetTick() */
    return (double) epoch_secs + (double)(HAL_GetTick() % 1000) / 1000.0;
 800403c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800403e:	f7fc fa5b 	bl	80004f8 <__aeabi_i2d>
 8004042:	4604      	mov	r4, r0
 8004044:	460d      	mov	r5, r1
 8004046:	f000 fb3d 	bl	80046c4 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	4b0e      	ldr	r3, [pc, #56]	; (8004088 <convertToEpochTime+0x94>)
 800404e:	fba3 1302 	umull	r1, r3, r3, r2
 8004052:	099b      	lsrs	r3, r3, #6
 8004054:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004058:	fb01 f303 	mul.w	r3, r1, r3
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	4618      	mov	r0, r3
 8004060:	f7fc fa3a 	bl	80004d8 <__aeabi_ui2d>
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	4b08      	ldr	r3, [pc, #32]	; (800408c <convertToEpochTime+0x98>)
 800406a:	f7fc fbd9 	bl	8000820 <__aeabi_ddiv>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	4620      	mov	r0, r4
 8004074:	4629      	mov	r1, r5
 8004076:	f7fc f8f3 	bl	8000260 <__adddf3>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
}
 800407e:	4610      	mov	r0, r2
 8004080:	4619      	mov	r1, r3
 8004082:	3730      	adds	r7, #48	; 0x30
 8004084:	46bd      	mov	sp, r7
 8004086:	bdb0      	pop	{r4, r5, r7, pc}
 8004088:	10624dd3 	.word	0x10624dd3
 800408c:	408f4000 	.word	0x408f4000

08004090 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004094:	4b17      	ldr	r3, [pc, #92]	; (80040f4 <MX_SPI1_Init+0x64>)
 8004096:	4a18      	ldr	r2, [pc, #96]	; (80040f8 <MX_SPI1_Init+0x68>)
 8004098:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800409a:	4b16      	ldr	r3, [pc, #88]	; (80040f4 <MX_SPI1_Init+0x64>)
 800409c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80040a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80040a2:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <MX_SPI1_Init+0x64>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80040a8:	4b12      	ldr	r3, [pc, #72]	; (80040f4 <MX_SPI1_Init+0x64>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80040ae:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <MX_SPI1_Init+0x64>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80040b4:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <MX_SPI1_Init+0x64>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80040ba:	4b0e      	ldr	r3, [pc, #56]	; (80040f4 <MX_SPI1_Init+0x64>)
 80040bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80040c2:	4b0c      	ldr	r3, [pc, #48]	; (80040f4 <MX_SPI1_Init+0x64>)
 80040c4:	2208      	movs	r2, #8
 80040c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040c8:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <MX_SPI1_Init+0x64>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80040ce:	4b09      	ldr	r3, [pc, #36]	; (80040f4 <MX_SPI1_Init+0x64>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040d4:	4b07      	ldr	r3, [pc, #28]	; (80040f4 <MX_SPI1_Init+0x64>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80040da:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <MX_SPI1_Init+0x64>)
 80040dc:	220a      	movs	r2, #10
 80040de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80040e0:	4804      	ldr	r0, [pc, #16]	; (80040f4 <MX_SPI1_Init+0x64>)
 80040e2:	f004 fc5d 	bl	80089a0 <HAL_SPI_Init>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80040ec:	f7ff f83a 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80040f0:	bf00      	nop
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	20000784 	.word	0x20000784
 80040f8:	40013000 	.word	0x40013000

080040fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004104:	f107 0310 	add.w	r3, r7, #16
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	605a      	str	r2, [r3, #4]
 800410e:	609a      	str	r2, [r3, #8]
 8004110:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a1b      	ldr	r2, [pc, #108]	; (8004184 <HAL_SPI_MspInit+0x88>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d12f      	bne.n	800417c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800411c:	4b1a      	ldr	r3, [pc, #104]	; (8004188 <HAL_SPI_MspInit+0x8c>)
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	4a19      	ldr	r2, [pc, #100]	; (8004188 <HAL_SPI_MspInit+0x8c>)
 8004122:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004126:	6193      	str	r3, [r2, #24]
 8004128:	4b17      	ldr	r3, [pc, #92]	; (8004188 <HAL_SPI_MspInit+0x8c>)
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004134:	4b14      	ldr	r3, [pc, #80]	; (8004188 <HAL_SPI_MspInit+0x8c>)
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	4a13      	ldr	r2, [pc, #76]	; (8004188 <HAL_SPI_MspInit+0x8c>)
 800413a:	f043 0304 	orr.w	r3, r3, #4
 800413e:	6193      	str	r3, [r2, #24]
 8004140:	4b11      	ldr	r3, [pc, #68]	; (8004188 <HAL_SPI_MspInit+0x8c>)
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SDL_CLK_Pin|SDL_MOSI_Pin;
 800414c:	23a0      	movs	r3, #160	; 0xa0
 800414e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004150:	2302      	movs	r3, #2
 8004152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004154:	2303      	movs	r3, #3
 8004156:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004158:	f107 0310 	add.w	r3, r7, #16
 800415c:	4619      	mov	r1, r3
 800415e:	480b      	ldr	r0, [pc, #44]	; (800418c <HAL_SPI_MspInit+0x90>)
 8004160:	f001 f9fe 	bl	8005560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDL_MISO_Pin;
 8004164:	2340      	movs	r3, #64	; 0x40
 8004166:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416c:	2300      	movs	r3, #0
 800416e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SDL_MISO_GPIO_Port, &GPIO_InitStruct);
 8004170:	f107 0310 	add.w	r3, r7, #16
 8004174:	4619      	mov	r1, r3
 8004176:	4805      	ldr	r0, [pc, #20]	; (800418c <HAL_SPI_MspInit+0x90>)
 8004178:	f001 f9f2 	bl	8005560 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800417c:	bf00      	nop
 800417e:	3720      	adds	r7, #32
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40013000 	.word	0x40013000
 8004188:	40021000 	.word	0x40021000
 800418c:	40010800 	.word	0x40010800

08004190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004196:	4b18      	ldr	r3, [pc, #96]	; (80041f8 <HAL_MspInit+0x68>)
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	4a17      	ldr	r2, [pc, #92]	; (80041f8 <HAL_MspInit+0x68>)
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	6193      	str	r3, [r2, #24]
 80041a2:	4b15      	ldr	r3, [pc, #84]	; (80041f8 <HAL_MspInit+0x68>)
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	60bb      	str	r3, [r7, #8]
 80041ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041ae:	4b12      	ldr	r3, [pc, #72]	; (80041f8 <HAL_MspInit+0x68>)
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	4a11      	ldr	r2, [pc, #68]	; (80041f8 <HAL_MspInit+0x68>)
 80041b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b8:	61d3      	str	r3, [r2, #28]
 80041ba:	4b0f      	ldr	r3, [pc, #60]	; (80041f8 <HAL_MspInit+0x68>)
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c2:	607b      	str	r3, [r7, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80041c6:	2200      	movs	r2, #0
 80041c8:	210f      	movs	r1, #15
 80041ca:	f06f 0001 	mvn.w	r0, #1
 80041ce:	f001 f99c 	bl	800550a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80041d2:	4b0a      	ldr	r3, [pc, #40]	; (80041fc <HAL_MspInit+0x6c>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	4a04      	ldr	r2, [pc, #16]	; (80041fc <HAL_MspInit+0x6c>)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041ee:	bf00      	nop
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40021000 	.word	0x40021000
 80041fc:	40010000 	.word	0x40010000

08004200 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08c      	sub	sp, #48	; 0x30
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8004210:	2300      	movs	r3, #0
 8004212:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004216:	4b2e      	ldr	r3, [pc, #184]	; (80042d0 <HAL_InitTick+0xd0>)
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	4a2d      	ldr	r2, [pc, #180]	; (80042d0 <HAL_InitTick+0xd0>)
 800421c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004220:	6193      	str	r3, [r2, #24]
 8004222:	4b2b      	ldr	r3, [pc, #172]	; (80042d0 <HAL_InitTick+0xd0>)
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800422a:	60bb      	str	r3, [r7, #8]
 800422c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800422e:	f107 020c 	add.w	r2, r7, #12
 8004232:	f107 0310 	add.w	r3, r7, #16
 8004236:	4611      	mov	r1, r2
 8004238:	4618      	mov	r0, r3
 800423a:	f003 fc2d 	bl	8007a98 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800423e:	f003 fc17 	bl	8007a70 <HAL_RCC_GetPCLK2Freq>
 8004242:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004246:	4a23      	ldr	r2, [pc, #140]	; (80042d4 <HAL_InitTick+0xd4>)
 8004248:	fba2 2303 	umull	r2, r3, r2, r3
 800424c:	0c9b      	lsrs	r3, r3, #18
 800424e:	3b01      	subs	r3, #1
 8004250:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004252:	4b21      	ldr	r3, [pc, #132]	; (80042d8 <HAL_InitTick+0xd8>)
 8004254:	4a21      	ldr	r2, [pc, #132]	; (80042dc <HAL_InitTick+0xdc>)
 8004256:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004258:	4b1f      	ldr	r3, [pc, #124]	; (80042d8 <HAL_InitTick+0xd8>)
 800425a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800425e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004260:	4a1d      	ldr	r2, [pc, #116]	; (80042d8 <HAL_InitTick+0xd8>)
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004266:	4b1c      	ldr	r3, [pc, #112]	; (80042d8 <HAL_InitTick+0xd8>)
 8004268:	2200      	movs	r2, #0
 800426a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800426c:	4b1a      	ldr	r3, [pc, #104]	; (80042d8 <HAL_InitTick+0xd8>)
 800426e:	2200      	movs	r2, #0
 8004270:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004272:	4b19      	ldr	r3, [pc, #100]	; (80042d8 <HAL_InitTick+0xd8>)
 8004274:	2200      	movs	r2, #0
 8004276:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8004278:	4817      	ldr	r0, [pc, #92]	; (80042d8 <HAL_InitTick+0xd8>)
 800427a:	f004 ffaf 	bl	80091dc <HAL_TIM_Base_Init>
 800427e:	4603      	mov	r3, r0
 8004280:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8004284:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004288:	2b00      	cmp	r3, #0
 800428a:	d11b      	bne.n	80042c4 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800428c:	4812      	ldr	r0, [pc, #72]	; (80042d8 <HAL_InitTick+0xd8>)
 800428e:	f004 fffd 	bl	800928c <HAL_TIM_Base_Start_IT>
 8004292:	4603      	mov	r3, r0
 8004294:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8004298:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800429c:	2b00      	cmp	r3, #0
 800429e:	d111      	bne.n	80042c4 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80042a0:	2019      	movs	r0, #25
 80042a2:	f001 f94e 	bl	8005542 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b0f      	cmp	r3, #15
 80042aa:	d808      	bhi.n	80042be <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80042ac:	2200      	movs	r2, #0
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	2019      	movs	r0, #25
 80042b2:	f001 f92a 	bl	800550a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80042b6:	4a0a      	ldr	r2, [pc, #40]	; (80042e0 <HAL_InitTick+0xe0>)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6013      	str	r3, [r2, #0]
 80042bc:	e002      	b.n	80042c4 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80042c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3730      	adds	r7, #48	; 0x30
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40021000 	.word	0x40021000
 80042d4:	431bde83 	.word	0x431bde83
 80042d8:	200007dc 	.word	0x200007dc
 80042dc:	40012c00 	.word	0x40012c00
 80042e0:	200000e4 	.word	0x200000e4

080042e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80042e8:	e7fe      	b.n	80042e8 <NMI_Handler+0x4>

080042ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042ea:	b480      	push	{r7}
 80042ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042ee:	e7fe      	b.n	80042ee <HardFault_Handler+0x4>

080042f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042f4:	e7fe      	b.n	80042f4 <MemManage_Handler+0x4>

080042f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042f6:	b480      	push	{r7}
 80042f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042fa:	e7fe      	b.n	80042fa <BusFault_Handler+0x4>

080042fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004300:	e7fe      	b.n	8004300 <UsageFault_Handler+0x4>

08004302 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004302:	b480      	push	{r7}
 8004304:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004306:	bf00      	nop
 8004308:	46bd      	mov	sp, r7
 800430a:	bc80      	pop	{r7}
 800430c:	4770      	bx	lr
	...

08004310 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004314:	4802      	ldr	r0, [pc, #8]	; (8004320 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8004316:	f000 fe20 	bl	8004f5a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800431a:	bf00      	nop
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	20000354 	.word	0x20000354

08004324 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004328:	4802      	ldr	r0, [pc, #8]	; (8004334 <TIM1_UP_IRQHandler+0x10>)
 800432a:	f005 f80f 	bl	800934c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800432e:	bf00      	nop
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	200007dc 	.word	0x200007dc

08004338 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  return 1;
 800433c:	2301      	movs	r3, #1
}
 800433e:	4618      	mov	r0, r3
 8004340:	46bd      	mov	sp, r7
 8004342:	bc80      	pop	{r7}
 8004344:	4770      	bx	lr

08004346 <_kill>:

int _kill(int pid, int sig)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b082      	sub	sp, #8
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004350:	f00a fda8 	bl	800eea4 <__errno>
 8004354:	4603      	mov	r3, r0
 8004356:	2216      	movs	r2, #22
 8004358:	601a      	str	r2, [r3, #0]
  return -1;
 800435a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <_exit>:

void _exit (int status)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b082      	sub	sp, #8
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800436e:	f04f 31ff 	mov.w	r1, #4294967295
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7ff ffe7 	bl	8004346 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004378:	e7fe      	b.n	8004378 <_exit+0x12>

0800437a <_close>:
  }
  return len;
}

int _close(int file)
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004382:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004386:	4618      	mov	r0, r3
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	bc80      	pop	{r7}
 800438e:	4770      	bx	lr

08004390 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043a0:	605a      	str	r2, [r3, #4]
  return 0;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr

080043ae <_isatty>:

int _isatty(int file)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80043b6:	2301      	movs	r3, #1
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	bc80      	pop	{r7}
 80043c0:	4770      	bx	lr

080043c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b085      	sub	sp, #20
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	60f8      	str	r0, [r7, #12]
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr
	...

080043dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043e4:	4a14      	ldr	r2, [pc, #80]	; (8004438 <_sbrk+0x5c>)
 80043e6:	4b15      	ldr	r3, [pc, #84]	; (800443c <_sbrk+0x60>)
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043f0:	4b13      	ldr	r3, [pc, #76]	; (8004440 <_sbrk+0x64>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d102      	bne.n	80043fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043f8:	4b11      	ldr	r3, [pc, #68]	; (8004440 <_sbrk+0x64>)
 80043fa:	4a12      	ldr	r2, [pc, #72]	; (8004444 <_sbrk+0x68>)
 80043fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043fe:	4b10      	ldr	r3, [pc, #64]	; (8004440 <_sbrk+0x64>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4413      	add	r3, r2
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	429a      	cmp	r2, r3
 800440a:	d207      	bcs.n	800441c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800440c:	f00a fd4a 	bl	800eea4 <__errno>
 8004410:	4603      	mov	r3, r0
 8004412:	220c      	movs	r2, #12
 8004414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004416:	f04f 33ff 	mov.w	r3, #4294967295
 800441a:	e009      	b.n	8004430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800441c:	4b08      	ldr	r3, [pc, #32]	; (8004440 <_sbrk+0x64>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004422:	4b07      	ldr	r3, [pc, #28]	; (8004440 <_sbrk+0x64>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4413      	add	r3, r2
 800442a:	4a05      	ldr	r2, [pc, #20]	; (8004440 <_sbrk+0x64>)
 800442c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800442e:	68fb      	ldr	r3, [r7, #12]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	2000c000 	.word	0x2000c000
 800443c:	00000400 	.word	0x00000400
 8004440:	20000828 	.word	0x20000828
 8004444:	20005b90 	.word	0x20005b90

08004448 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800444c:	bf00      	nop
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr

08004454 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004458:	4b11      	ldr	r3, [pc, #68]	; (80044a0 <MX_UART5_Init+0x4c>)
 800445a:	4a12      	ldr	r2, [pc, #72]	; (80044a4 <MX_UART5_Init+0x50>)
 800445c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800445e:	4b10      	ldr	r3, [pc, #64]	; (80044a0 <MX_UART5_Init+0x4c>)
 8004460:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004464:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004466:	4b0e      	ldr	r3, [pc, #56]	; (80044a0 <MX_UART5_Init+0x4c>)
 8004468:	2200      	movs	r2, #0
 800446a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_2;
 800446c:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <MX_UART5_Init+0x4c>)
 800446e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004472:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004474:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <MX_UART5_Init+0x4c>)
 8004476:	2200      	movs	r2, #0
 8004478:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800447a:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <MX_UART5_Init+0x4c>)
 800447c:	220c      	movs	r2, #12
 800447e:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004480:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <MX_UART5_Init+0x4c>)
 8004482:	2200      	movs	r2, #0
 8004484:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <MX_UART5_Init+0x4c>)
 8004488:	2200      	movs	r2, #0
 800448a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800448c:	4804      	ldr	r0, [pc, #16]	; (80044a0 <MX_UART5_Init+0x4c>)
 800448e:	f005 f915 	bl	80096bc <HAL_UART_Init>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <MX_UART5_Init+0x48>
  {
    Error_Handler();
 8004498:	f7fe fe64 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800449c:	bf00      	nop
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	2000082c 	.word	0x2000082c
 80044a4:	40005000 	.word	0x40005000

080044a8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80044ac:	4b11      	ldr	r3, [pc, #68]	; (80044f4 <MX_USART1_UART_Init+0x4c>)
 80044ae:	4a12      	ldr	r2, [pc, #72]	; (80044f8 <MX_USART1_UART_Init+0x50>)
 80044b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 80044b2:	4b10      	ldr	r3, [pc, #64]	; (80044f4 <MX_USART1_UART_Init+0x4c>)
 80044b4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80044b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80044ba:	4b0e      	ldr	r3, [pc, #56]	; (80044f4 <MX_USART1_UART_Init+0x4c>)
 80044bc:	2200      	movs	r2, #0
 80044be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80044c0:	4b0c      	ldr	r3, [pc, #48]	; (80044f4 <MX_USART1_UART_Init+0x4c>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80044c6:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <MX_USART1_UART_Init+0x4c>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80044cc:	4b09      	ldr	r3, [pc, #36]	; (80044f4 <MX_USART1_UART_Init+0x4c>)
 80044ce:	220c      	movs	r2, #12
 80044d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044d2:	4b08      	ldr	r3, [pc, #32]	; (80044f4 <MX_USART1_UART_Init+0x4c>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80044d8:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <MX_USART1_UART_Init+0x4c>)
 80044da:	2200      	movs	r2, #0
 80044dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80044de:	4805      	ldr	r0, [pc, #20]	; (80044f4 <MX_USART1_UART_Init+0x4c>)
 80044e0:	f005 f8ec 	bl	80096bc <HAL_UART_Init>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80044ea:	f7fe fe3b 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80044ee:	bf00      	nop
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	20000874 	.word	0x20000874
 80044f8:	40013800 	.word	0x40013800

080044fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b08c      	sub	sp, #48	; 0x30
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004504:	f107 0320 	add.w	r3, r7, #32
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	605a      	str	r2, [r3, #4]
 800450e:	609a      	str	r2, [r3, #8]
 8004510:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART5)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a3e      	ldr	r2, [pc, #248]	; (8004610 <HAL_UART_MspInit+0x114>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d13d      	bne.n	8004598 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800451c:	4b3d      	ldr	r3, [pc, #244]	; (8004614 <HAL_UART_MspInit+0x118>)
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	4a3c      	ldr	r2, [pc, #240]	; (8004614 <HAL_UART_MspInit+0x118>)
 8004522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004526:	61d3      	str	r3, [r2, #28]
 8004528:	4b3a      	ldr	r3, [pc, #232]	; (8004614 <HAL_UART_MspInit+0x118>)
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004530:	61fb      	str	r3, [r7, #28]
 8004532:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004534:	4b37      	ldr	r3, [pc, #220]	; (8004614 <HAL_UART_MspInit+0x118>)
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	4a36      	ldr	r2, [pc, #216]	; (8004614 <HAL_UART_MspInit+0x118>)
 800453a:	f043 0310 	orr.w	r3, r3, #16
 800453e:	6193      	str	r3, [r2, #24]
 8004540:	4b34      	ldr	r3, [pc, #208]	; (8004614 <HAL_UART_MspInit+0x118>)
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	61bb      	str	r3, [r7, #24]
 800454a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800454c:	4b31      	ldr	r3, [pc, #196]	; (8004614 <HAL_UART_MspInit+0x118>)
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	4a30      	ldr	r2, [pc, #192]	; (8004614 <HAL_UART_MspInit+0x118>)
 8004552:	f043 0320 	orr.w	r3, r3, #32
 8004556:	6193      	str	r3, [r2, #24]
 8004558:	4b2e      	ldr	r3, [pc, #184]	; (8004614 <HAL_UART_MspInit+0x118>)
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	f003 0320 	and.w	r3, r3, #32
 8004560:	617b      	str	r3, [r7, #20]
 8004562:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800456a:	2302      	movs	r3, #2
 800456c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800456e:	2303      	movs	r3, #3
 8004570:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004572:	f107 0320 	add.w	r3, r7, #32
 8004576:	4619      	mov	r1, r3
 8004578:	4827      	ldr	r0, [pc, #156]	; (8004618 <HAL_UART_MspInit+0x11c>)
 800457a:	f000 fff1 	bl	8005560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800457e:	2304      	movs	r3, #4
 8004580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004582:	2300      	movs	r3, #0
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004586:	2300      	movs	r3, #0
 8004588:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800458a:	f107 0320 	add.w	r3, r7, #32
 800458e:	4619      	mov	r1, r3
 8004590:	4822      	ldr	r0, [pc, #136]	; (800461c <HAL_UART_MspInit+0x120>)
 8004592:	f000 ffe5 	bl	8005560 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004596:	e036      	b.n	8004606 <HAL_UART_MspInit+0x10a>
  else if(uartHandle->Instance==USART1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a20      	ldr	r2, [pc, #128]	; (8004620 <HAL_UART_MspInit+0x124>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d131      	bne.n	8004606 <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART1_CLK_ENABLE();
 80045a2:	4b1c      	ldr	r3, [pc, #112]	; (8004614 <HAL_UART_MspInit+0x118>)
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	4a1b      	ldr	r2, [pc, #108]	; (8004614 <HAL_UART_MspInit+0x118>)
 80045a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045ac:	6193      	str	r3, [r2, #24]
 80045ae:	4b19      	ldr	r3, [pc, #100]	; (8004614 <HAL_UART_MspInit+0x118>)
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045b6:	613b      	str	r3, [r7, #16]
 80045b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045ba:	4b16      	ldr	r3, [pc, #88]	; (8004614 <HAL_UART_MspInit+0x118>)
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	4a15      	ldr	r2, [pc, #84]	; (8004614 <HAL_UART_MspInit+0x118>)
 80045c0:	f043 0304 	orr.w	r3, r3, #4
 80045c4:	6193      	str	r3, [r2, #24]
 80045c6:	4b13      	ldr	r3, [pc, #76]	; (8004614 <HAL_UART_MspInit+0x118>)
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RADIO_TX_Pin;
 80045d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d8:	2302      	movs	r3, #2
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045dc:	2303      	movs	r3, #3
 80045de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RADIO_TX_GPIO_Port, &GPIO_InitStruct);
 80045e0:	f107 0320 	add.w	r3, r7, #32
 80045e4:	4619      	mov	r1, r3
 80045e6:	480f      	ldr	r0, [pc, #60]	; (8004624 <HAL_UART_MspInit+0x128>)
 80045e8:	f000 ffba 	bl	8005560 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RADIO_RX_Pin;
 80045ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045f2:	2300      	movs	r3, #0
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f6:	2300      	movs	r3, #0
 80045f8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RADIO_RX_GPIO_Port, &GPIO_InitStruct);
 80045fa:	f107 0320 	add.w	r3, r7, #32
 80045fe:	4619      	mov	r1, r3
 8004600:	4808      	ldr	r0, [pc, #32]	; (8004624 <HAL_UART_MspInit+0x128>)
 8004602:	f000 ffad 	bl	8005560 <HAL_GPIO_Init>
}
 8004606:	bf00      	nop
 8004608:	3730      	adds	r7, #48	; 0x30
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	40005000 	.word	0x40005000
 8004614:	40021000 	.word	0x40021000
 8004618:	40011000 	.word	0x40011000
 800461c:	40011400 	.word	0x40011400
 8004620:	40013800 	.word	0x40013800
 8004624:	40010800 	.word	0x40010800

08004628 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004628:	f7ff ff0e 	bl	8004448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800462c:	480b      	ldr	r0, [pc, #44]	; (800465c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800462e:	490c      	ldr	r1, [pc, #48]	; (8004660 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004630:	4a0c      	ldr	r2, [pc, #48]	; (8004664 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004634:	e002      	b.n	800463c <LoopCopyDataInit>

08004636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800463a:	3304      	adds	r3, #4

0800463c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800463c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800463e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004640:	d3f9      	bcc.n	8004636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004642:	4a09      	ldr	r2, [pc, #36]	; (8004668 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004644:	4c09      	ldr	r4, [pc, #36]	; (800466c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004648:	e001      	b.n	800464e <LoopFillZerobss>

0800464a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800464a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800464c:	3204      	adds	r2, #4

0800464e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800464e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004650:	d3fb      	bcc.n	800464a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004652:	f00a fc2d 	bl	800eeb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004656:	f7fe fccd 	bl	8002ff4 <main>
  bx lr
 800465a:	4770      	bx	lr
  ldr r0, =_sdata
 800465c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004660:	20000330 	.word	0x20000330
  ldr r2, =_sidata
 8004664:	080125b4 	.word	0x080125b4
  ldr r2, =_sbss
 8004668:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 800466c:	20005b90 	.word	0x20005b90

08004670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004670:	e7fe      	b.n	8004670 <ADC1_2_IRQHandler>
	...

08004674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004678:	4b08      	ldr	r3, [pc, #32]	; (800469c <HAL_Init+0x28>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a07      	ldr	r2, [pc, #28]	; (800469c <HAL_Init+0x28>)
 800467e:	f043 0310 	orr.w	r3, r3, #16
 8004682:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004684:	2003      	movs	r0, #3
 8004686:	f000 ff35 	bl	80054f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800468a:	200f      	movs	r0, #15
 800468c:	f7ff fdb8 	bl	8004200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004690:	f7ff fd7e 	bl	8004190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40022000 	.word	0x40022000

080046a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046a4:	4b05      	ldr	r3, [pc, #20]	; (80046bc <HAL_IncTick+0x1c>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	461a      	mov	r2, r3
 80046aa:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <HAL_IncTick+0x20>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4413      	add	r3, r2
 80046b0:	4a03      	ldr	r2, [pc, #12]	; (80046c0 <HAL_IncTick+0x20>)
 80046b2:	6013      	str	r3, [r2, #0]
}
 80046b4:	bf00      	nop
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr
 80046bc:	200000e8 	.word	0x200000e8
 80046c0:	200008bc 	.word	0x200008bc

080046c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0
  return uwTick;
 80046c8:	4b02      	ldr	r3, [pc, #8]	; (80046d4 <HAL_GetTick+0x10>)
 80046ca:	681b      	ldr	r3, [r3, #0]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr
 80046d4:	200008bc 	.word	0x200008bc

080046d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046e0:	f7ff fff0 	bl	80046c4 <HAL_GetTick>
 80046e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f0:	d005      	beq.n	80046fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046f2:	4b0a      	ldr	r3, [pc, #40]	; (800471c <HAL_Delay+0x44>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	461a      	mov	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80046fe:	bf00      	nop
 8004700:	f7ff ffe0 	bl	80046c4 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	429a      	cmp	r2, r3
 800470e:	d8f7      	bhi.n	8004700 <HAL_Delay+0x28>
  {
  }
}
 8004710:	bf00      	nop
 8004712:	bf00      	nop
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	200000e8 	.word	0x200000e8

08004720 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e0ed      	b.n	800490e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d102      	bne.n	8004744 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7fc fde4 	bl	800130c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0201 	orr.w	r2, r2, #1
 8004752:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004754:	f7ff ffb6 	bl	80046c4 <HAL_GetTick>
 8004758:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800475a:	e012      	b.n	8004782 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800475c:	f7ff ffb2 	bl	80046c4 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b0a      	cmp	r3, #10
 8004768:	d90b      	bls.n	8004782 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2205      	movs	r2, #5
 800477a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e0c5      	b.n	800490e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0e5      	beq.n	800475c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0202 	bic.w	r2, r2, #2
 800479e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047a0:	f7ff ff90 	bl	80046c4 <HAL_GetTick>
 80047a4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80047a6:	e012      	b.n	80047ce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80047a8:	f7ff ff8c 	bl	80046c4 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b0a      	cmp	r3, #10
 80047b4:	d90b      	bls.n	80047ce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2205      	movs	r2, #5
 80047c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e09f      	b.n	800490e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1e5      	bne.n	80047a8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	7e1b      	ldrb	r3, [r3, #24]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d108      	bne.n	80047f6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	e007      	b.n	8004806 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004804:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	7e5b      	ldrb	r3, [r3, #25]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d108      	bne.n	8004820 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	e007      	b.n	8004830 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800482e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	7e9b      	ldrb	r3, [r3, #26]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d108      	bne.n	800484a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0220 	orr.w	r2, r2, #32
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	e007      	b.n	800485a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0220 	bic.w	r2, r2, #32
 8004858:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	7edb      	ldrb	r3, [r3, #27]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d108      	bne.n	8004874 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0210 	bic.w	r2, r2, #16
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	e007      	b.n	8004884 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0210 	orr.w	r2, r2, #16
 8004882:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	7f1b      	ldrb	r3, [r3, #28]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d108      	bne.n	800489e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0208 	orr.w	r2, r2, #8
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	e007      	b.n	80048ae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0208 	bic.w	r2, r2, #8
 80048ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	7f5b      	ldrb	r3, [r3, #29]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d108      	bne.n	80048c8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f042 0204 	orr.w	r2, r2, #4
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	e007      	b.n	80048d8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0204 	bic.w	r2, r2, #4
 80048d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	431a      	orrs	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	ea42 0103 	orr.w	r1, r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	1e5a      	subs	r2, r3, #1
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004916:	b480      	push	{r7}
 8004918:	b087      	sub	sp, #28
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 3020 	ldrb.w	r3, [r3, #32]
 800492c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800492e:	7cfb      	ldrb	r3, [r7, #19]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d003      	beq.n	800493c <HAL_CAN_ConfigFilter+0x26>
 8004934:	7cfb      	ldrb	r3, [r7, #19]
 8004936:	2b02      	cmp	r3, #2
 8004938:	f040 80aa 	bne.w	8004a90 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004942:	f043 0201 	orr.w	r2, r3, #1
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	2201      	movs	r2, #1
 8004956:	fa02 f303 	lsl.w	r3, r2, r3
 800495a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	43db      	mvns	r3, r3
 8004966:	401a      	ands	r2, r3
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d123      	bne.n	80049be <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	43db      	mvns	r3, r3
 8004980:	401a      	ands	r2, r3
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004998:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	3248      	adds	r2, #72	; 0x48
 800499e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80049b2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80049b4:	6979      	ldr	r1, [r7, #20]
 80049b6:	3348      	adds	r3, #72	; 0x48
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	440b      	add	r3, r1
 80049bc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d122      	bne.n	8004a0c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	431a      	orrs	r2, r3
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80049e6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	3248      	adds	r2, #72	; 0x48
 80049ec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004a00:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004a02:	6979      	ldr	r1, [r7, #20]
 8004a04:	3348      	adds	r3, #72	; 0x48
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	440b      	add	r3, r1
 8004a0a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d109      	bne.n	8004a28 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	401a      	ands	r2, r3
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004a26:	e007      	b.n	8004a38 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	431a      	orrs	r2, r3
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d109      	bne.n	8004a54 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	43db      	mvns	r3, r3
 8004a4a:	401a      	ands	r2, r3
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004a52:	e007      	b.n	8004a64 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d107      	bne.n	8004a7c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	431a      	orrs	r2, r3
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a82:	f023 0201 	bic.w	r2, r3, #1
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	e006      	b.n	8004a9e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
  }
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	371c      	adds	r7, #28
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bc80      	pop	{r7}
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d12e      	bne.n	8004b1a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0201 	bic.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ad4:	f7ff fdf6 	bl	80046c4 <HAL_GetTick>
 8004ad8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004ada:	e012      	b.n	8004b02 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004adc:	f7ff fdf2 	bl	80046c4 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b0a      	cmp	r3, #10
 8004ae8:	d90b      	bls.n	8004b02 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2205      	movs	r2, #5
 8004afa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e012      	b.n	8004b28 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1e5      	bne.n	8004adc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	e006      	b.n	8004b28 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
  }
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b089      	sub	sp, #36	; 0x24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b44:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004b4e:	7ffb      	ldrb	r3, [r7, #31]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d003      	beq.n	8004b5c <HAL_CAN_AddTxMessage+0x2c>
 8004b54:	7ffb      	ldrb	r3, [r7, #31]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	f040 80ad 	bne.w	8004cb6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10a      	bne.n	8004b7c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d105      	bne.n	8004b7c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f000 8095 	beq.w	8004ca6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	0e1b      	lsrs	r3, r3, #24
 8004b80:	f003 0303 	and.w	r3, r3, #3
 8004b84:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004b86:	2201      	movs	r2, #1
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	409a      	lsls	r2, r3
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10d      	bne.n	8004bb4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004ba2:	68f9      	ldr	r1, [r7, #12]
 8004ba4:	6809      	ldr	r1, [r1, #0]
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	3318      	adds	r3, #24
 8004bac:	011b      	lsls	r3, r3, #4
 8004bae:	440b      	add	r3, r1
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	e00f      	b.n	8004bd4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004bbe:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004bc4:	68f9      	ldr	r1, [r7, #12]
 8004bc6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004bc8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	3318      	adds	r3, #24
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	440b      	add	r3, r1
 8004bd2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6819      	ldr	r1, [r3, #0]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	691a      	ldr	r2, [r3, #16]
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	3318      	adds	r3, #24
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	440b      	add	r3, r1
 8004be4:	3304      	adds	r3, #4
 8004be6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	7d1b      	ldrb	r3, [r3, #20]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d111      	bne.n	8004c14 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	3318      	adds	r3, #24
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	4413      	add	r3, r2
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	6811      	ldr	r1, [r2, #0]
 8004c04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	3318      	adds	r3, #24
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	440b      	add	r3, r1
 8004c10:	3304      	adds	r3, #4
 8004c12:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3307      	adds	r3, #7
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	061a      	lsls	r2, r3, #24
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3306      	adds	r3, #6
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	041b      	lsls	r3, r3, #16
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	3305      	adds	r3, #5
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	021b      	lsls	r3, r3, #8
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	3204      	adds	r2, #4
 8004c34:	7812      	ldrb	r2, [r2, #0]
 8004c36:	4610      	mov	r0, r2
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	6811      	ldr	r1, [r2, #0]
 8004c3c:	ea43 0200 	orr.w	r2, r3, r0
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	011b      	lsls	r3, r3, #4
 8004c44:	440b      	add	r3, r1
 8004c46:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004c4a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3303      	adds	r3, #3
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	061a      	lsls	r2, r3, #24
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3302      	adds	r3, #2
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	041b      	lsls	r3, r3, #16
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	3301      	adds	r3, #1
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	021b      	lsls	r3, r3, #8
 8004c66:	4313      	orrs	r3, r2
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	7812      	ldrb	r2, [r2, #0]
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	6811      	ldr	r1, [r2, #0]
 8004c72:	ea43 0200 	orr.w	r2, r3, r0
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	011b      	lsls	r3, r3, #4
 8004c7a:	440b      	add	r3, r1
 8004c7c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004c80:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	3318      	adds	r3, #24
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	4413      	add	r3, r2
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	6811      	ldr	r1, [r2, #0]
 8004c94:	f043 0201 	orr.w	r2, r3, #1
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	3318      	adds	r3, #24
 8004c9c:	011b      	lsls	r3, r3, #4
 8004c9e:	440b      	add	r3, r1
 8004ca0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	e00e      	b.n	8004cc4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e006      	b.n	8004cc4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
  }
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3724      	adds	r7, #36	; 0x24
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bc80      	pop	{r7}
 8004ccc:	4770      	bx	lr

08004cce <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b087      	sub	sp, #28
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	60f8      	str	r0, [r7, #12]
 8004cd6:	60b9      	str	r1, [r7, #8]
 8004cd8:	607a      	str	r2, [r7, #4]
 8004cda:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ce2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004ce4:	7dfb      	ldrb	r3, [r7, #23]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d003      	beq.n	8004cf2 <HAL_CAN_GetRxMessage+0x24>
 8004cea:	7dfb      	ldrb	r3, [r7, #23]
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	f040 8103 	bne.w	8004ef8 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10e      	bne.n	8004d16 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f003 0303 	and.w	r3, r3, #3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d116      	bne.n	8004d34 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e0f7      	b.n	8004f06 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	f003 0303 	and.w	r3, r3, #3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d107      	bne.n	8004d34 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e0e8      	b.n	8004f06 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	331b      	adds	r3, #27
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	4413      	add	r3, r2
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0204 	and.w	r2, r3, #4
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10c      	bne.n	8004d6c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	331b      	adds	r3, #27
 8004d5a:	011b      	lsls	r3, r3, #4
 8004d5c:	4413      	add	r3, r2
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	0d5b      	lsrs	r3, r3, #21
 8004d62:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	e00b      	b.n	8004d84 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	331b      	adds	r3, #27
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	4413      	add	r3, r2
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	08db      	lsrs	r3, r3, #3
 8004d7c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	331b      	adds	r3, #27
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	4413      	add	r3, r2
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0202 	and.w	r2, r3, #2
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	331b      	adds	r3, #27
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	4413      	add	r3, r2
 8004da6:	3304      	adds	r3, #4
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0308 	and.w	r3, r3, #8
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2208      	movs	r2, #8
 8004db6:	611a      	str	r2, [r3, #16]
 8004db8:	e00b      	b.n	8004dd2 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	331b      	adds	r3, #27
 8004dc2:	011b      	lsls	r3, r3, #4
 8004dc4:	4413      	add	r3, r2
 8004dc6:	3304      	adds	r3, #4
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 020f 	and.w	r2, r3, #15
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	331b      	adds	r3, #27
 8004dda:	011b      	lsls	r3, r3, #4
 8004ddc:	4413      	add	r3, r2
 8004dde:	3304      	adds	r3, #4
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	0a1b      	lsrs	r3, r3, #8
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	331b      	adds	r3, #27
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	4413      	add	r3, r2
 8004df6:	3304      	adds	r3, #4
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	0c1b      	lsrs	r3, r3, #16
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	0a1a      	lsrs	r2, r3, #8
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	0c1a      	lsrs	r2, r3, #16
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	3302      	adds	r3, #2
 8004e48:	b2d2      	uxtb	r2, r2
 8004e4a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	011b      	lsls	r3, r3, #4
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	0e1a      	lsrs	r2, r3, #24
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	3303      	adds	r3, #3
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	011b      	lsls	r3, r3, #4
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	0a1a      	lsrs	r2, r3, #8
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	3305      	adds	r3, #5
 8004e94:	b2d2      	uxtb	r2, r2
 8004e96:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	011b      	lsls	r3, r3, #4
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	0c1a      	lsrs	r2, r3, #16
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	3306      	adds	r3, #6
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	0e1a      	lsrs	r2, r3, #24
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	3307      	adds	r3, #7
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d108      	bne.n	8004ee4 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f042 0220 	orr.w	r2, r2, #32
 8004ee0:	60da      	str	r2, [r3, #12]
 8004ee2:	e007      	b.n	8004ef4 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691a      	ldr	r2, [r3, #16]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0220 	orr.w	r2, r2, #32
 8004ef2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	e006      	b.n	8004f06 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
  }
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	371c      	adds	r7, #28
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bc80      	pop	{r7}
 8004f0e:	4770      	bx	lr

08004f10 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f20:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f22:	7bfb      	ldrb	r3, [r7, #15]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d002      	beq.n	8004f2e <HAL_CAN_ActivateNotification+0x1e>
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d109      	bne.n	8004f42 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6959      	ldr	r1, [r3, #20]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	e006      	b.n	8004f50 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
  }
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bc80      	pop	{r7}
 8004f58:	4770      	bx	lr

08004f5a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b08a      	sub	sp, #40	; 0x28
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004f62:	2300      	movs	r3, #0
 8004f64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d07c      	beq.n	800509a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d023      	beq.n	8004ff2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f983 	bl	80052c8 <HAL_CAN_TxMailbox0CompleteCallback>
 8004fc2:	e016      	b.n	8004ff2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	f003 0304 	and.w	r3, r3, #4
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d004      	beq.n	8004fd8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fd6:	e00c      	b.n	8004ff2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	f003 0308 	and.w	r3, r3, #8
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d004      	beq.n	8004fec <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8004fea:	e002      	b.n	8004ff2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f986 	bl	80052fe <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d024      	beq.n	8005046 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005004:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800500c:	2b00      	cmp	r3, #0
 800500e:	d003      	beq.n	8005018 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f962 	bl	80052da <HAL_CAN_TxMailbox1CompleteCallback>
 8005016:	e016      	b.n	8005046 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800501e:	2b00      	cmp	r3, #0
 8005020:	d004      	beq.n	800502c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005028:	627b      	str	r3, [r7, #36]	; 0x24
 800502a:	e00c      	b.n	8005046 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005032:	2b00      	cmp	r3, #0
 8005034:	d004      	beq.n	8005040 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800503c:	627b      	str	r3, [r7, #36]	; 0x24
 800503e:	e002      	b.n	8005046 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f965 	bl	8005310 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d024      	beq.n	800509a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005058:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f941 	bl	80052ec <HAL_CAN_TxMailbox2CompleteCallback>
 800506a:	e016      	b.n	800509a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d004      	beq.n	8005080 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800507c:	627b      	str	r3, [r7, #36]	; 0x24
 800507e:	e00c      	b.n	800509a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d004      	beq.n	8005094 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005090:	627b      	str	r3, [r7, #36]	; 0x24
 8005092:	e002      	b.n	800509a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f944 	bl	8005322 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	f003 0308 	and.w	r3, r3, #8
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00c      	beq.n	80050be <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f003 0310 	and.w	r3, r3, #16
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d007      	beq.n	80050be <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2210      	movs	r2, #16
 80050bc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00b      	beq.n	80050e0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f003 0308 	and.w	r3, r3, #8
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d006      	beq.n	80050e0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2208      	movs	r2, #8
 80050d8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f92a 	bl	8005334 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80050e0:	6a3b      	ldr	r3, [r7, #32]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d009      	beq.n	80050fe <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f003 0303 	and.w	r3, r3, #3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d002      	beq.n	80050fe <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f7fc f9b1 	bl	8001460 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80050fe:	6a3b      	ldr	r3, [r7, #32]
 8005100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00c      	beq.n	8005122 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f003 0310 	and.w	r3, r3, #16
 800510e:	2b00      	cmp	r3, #0
 8005110:	d007      	beq.n	8005122 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005118:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2210      	movs	r2, #16
 8005120:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	f003 0320 	and.w	r3, r3, #32
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00b      	beq.n	8005144 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	2b00      	cmp	r3, #0
 8005134:	d006      	beq.n	8005144 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2208      	movs	r2, #8
 800513c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f90a 	bl	8005358 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	f003 0310 	and.w	r3, r3, #16
 800514a:	2b00      	cmp	r3, #0
 800514c:	d009      	beq.n	8005162 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	f003 0303 	and.w	r3, r3, #3
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f8f2 	bl	8005346 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00b      	beq.n	8005184 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	f003 0310 	and.w	r3, r3, #16
 8005172:	2b00      	cmp	r3, #0
 8005174:	d006      	beq.n	8005184 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2210      	movs	r2, #16
 800517c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f8f3 	bl	800536a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005184:	6a3b      	ldr	r3, [r7, #32]
 8005186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00b      	beq.n	80051a6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	f003 0308 	and.w	r3, r3, #8
 8005194:	2b00      	cmp	r3, #0
 8005196:	d006      	beq.n	80051a6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2208      	movs	r2, #8
 800519e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f8eb 	bl	800537c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d07b      	beq.n	80052a8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	f003 0304 	and.w	r3, r3, #4
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d072      	beq.n	80052a0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d008      	beq.n	80051d6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	f043 0301 	orr.w	r3, r3, #1
 80051d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80051d6:	6a3b      	ldr	r3, [r7, #32]
 80051d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d008      	beq.n	80051f2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	f043 0302 	orr.w	r3, r3, #2
 80051f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d008      	beq.n	800520e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	f043 0304 	orr.w	r3, r3, #4
 800520c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005214:	2b00      	cmp	r3, #0
 8005216:	d043      	beq.n	80052a0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800521e:	2b00      	cmp	r3, #0
 8005220:	d03e      	beq.n	80052a0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005228:	2b60      	cmp	r3, #96	; 0x60
 800522a:	d02b      	beq.n	8005284 <HAL_CAN_IRQHandler+0x32a>
 800522c:	2b60      	cmp	r3, #96	; 0x60
 800522e:	d82e      	bhi.n	800528e <HAL_CAN_IRQHandler+0x334>
 8005230:	2b50      	cmp	r3, #80	; 0x50
 8005232:	d022      	beq.n	800527a <HAL_CAN_IRQHandler+0x320>
 8005234:	2b50      	cmp	r3, #80	; 0x50
 8005236:	d82a      	bhi.n	800528e <HAL_CAN_IRQHandler+0x334>
 8005238:	2b40      	cmp	r3, #64	; 0x40
 800523a:	d019      	beq.n	8005270 <HAL_CAN_IRQHandler+0x316>
 800523c:	2b40      	cmp	r3, #64	; 0x40
 800523e:	d826      	bhi.n	800528e <HAL_CAN_IRQHandler+0x334>
 8005240:	2b30      	cmp	r3, #48	; 0x30
 8005242:	d010      	beq.n	8005266 <HAL_CAN_IRQHandler+0x30c>
 8005244:	2b30      	cmp	r3, #48	; 0x30
 8005246:	d822      	bhi.n	800528e <HAL_CAN_IRQHandler+0x334>
 8005248:	2b10      	cmp	r3, #16
 800524a:	d002      	beq.n	8005252 <HAL_CAN_IRQHandler+0x2f8>
 800524c:	2b20      	cmp	r3, #32
 800524e:	d005      	beq.n	800525c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005250:	e01d      	b.n	800528e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	f043 0308 	orr.w	r3, r3, #8
 8005258:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800525a:	e019      	b.n	8005290 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	f043 0310 	orr.w	r3, r3, #16
 8005262:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005264:	e014      	b.n	8005290 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	f043 0320 	orr.w	r3, r3, #32
 800526c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800526e:	e00f      	b.n	8005290 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005276:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005278:	e00a      	b.n	8005290 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005280:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005282:	e005      	b.n	8005290 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800528a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800528c:	e000      	b.n	8005290 <HAL_CAN_IRQHandler+0x336>
            break;
 800528e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699a      	ldr	r2, [r3, #24]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800529e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2204      	movs	r2, #4
 80052a6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d008      	beq.n	80052c0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	431a      	orrs	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f867 	bl	800538e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80052c0:	bf00      	nop
 80052c2:	3728      	adds	r7, #40	; 0x28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bc80      	pop	{r7}
 80052d8:	4770      	bx	lr

080052da <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80052e2:	bf00      	nop
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr

080052ec <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bc80      	pop	{r7}
 80052fc:	4770      	bx	lr

080052fe <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	bc80      	pop	{r7}
 800530e:	4770      	bx	lr

08005310 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	bc80      	pop	{r7}
 8005320:	4770      	bx	lr

08005322 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800532a:	bf00      	nop
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	bc80      	pop	{r7}
 8005332:	4770      	bx	lr

08005334 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	bc80      	pop	{r7}
 8005344:	4770      	bx	lr

08005346 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005346:	b480      	push	{r7}
 8005348:	b083      	sub	sp, #12
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800534e:	bf00      	nop
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	bc80      	pop	{r7}
 8005356:	4770      	bx	lr

08005358 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	bc80      	pop	{r7}
 8005368:	4770      	bx	lr

0800536a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr

0800537c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	bc80      	pop	{r7}
 800538c:	4770      	bx	lr

0800538e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800538e:	b480      	push	{r7}
 8005390:	b083      	sub	sp, #12
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005396:	bf00      	nop
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr

080053a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053b0:	4b0c      	ldr	r3, [pc, #48]	; (80053e4 <__NVIC_SetPriorityGrouping+0x44>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053bc:	4013      	ands	r3, r2
 80053be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053d2:	4a04      	ldr	r2, [pc, #16]	; (80053e4 <__NVIC_SetPriorityGrouping+0x44>)
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	60d3      	str	r3, [r2, #12]
}
 80053d8:	bf00      	nop
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	bc80      	pop	{r7}
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	e000ed00 	.word	0xe000ed00

080053e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053ec:	4b04      	ldr	r3, [pc, #16]	; (8005400 <__NVIC_GetPriorityGrouping+0x18>)
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	0a1b      	lsrs	r3, r3, #8
 80053f2:	f003 0307 	and.w	r3, r3, #7
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bc80      	pop	{r7}
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	e000ed00 	.word	0xe000ed00

08005404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	4603      	mov	r3, r0
 800540c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800540e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005412:	2b00      	cmp	r3, #0
 8005414:	db0b      	blt.n	800542e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005416:	79fb      	ldrb	r3, [r7, #7]
 8005418:	f003 021f 	and.w	r2, r3, #31
 800541c:	4906      	ldr	r1, [pc, #24]	; (8005438 <__NVIC_EnableIRQ+0x34>)
 800541e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005422:	095b      	lsrs	r3, r3, #5
 8005424:	2001      	movs	r0, #1
 8005426:	fa00 f202 	lsl.w	r2, r0, r2
 800542a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800542e:	bf00      	nop
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	bc80      	pop	{r7}
 8005436:	4770      	bx	lr
 8005438:	e000e100 	.word	0xe000e100

0800543c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	4603      	mov	r3, r0
 8005444:	6039      	str	r1, [r7, #0]
 8005446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800544c:	2b00      	cmp	r3, #0
 800544e:	db0a      	blt.n	8005466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	b2da      	uxtb	r2, r3
 8005454:	490c      	ldr	r1, [pc, #48]	; (8005488 <__NVIC_SetPriority+0x4c>)
 8005456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800545a:	0112      	lsls	r2, r2, #4
 800545c:	b2d2      	uxtb	r2, r2
 800545e:	440b      	add	r3, r1
 8005460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005464:	e00a      	b.n	800547c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	b2da      	uxtb	r2, r3
 800546a:	4908      	ldr	r1, [pc, #32]	; (800548c <__NVIC_SetPriority+0x50>)
 800546c:	79fb      	ldrb	r3, [r7, #7]
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	3b04      	subs	r3, #4
 8005474:	0112      	lsls	r2, r2, #4
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	440b      	add	r3, r1
 800547a:	761a      	strb	r2, [r3, #24]
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	bc80      	pop	{r7}
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	e000e100 	.word	0xe000e100
 800548c:	e000ed00 	.word	0xe000ed00

08005490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005490:	b480      	push	{r7}
 8005492:	b089      	sub	sp, #36	; 0x24
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f003 0307 	and.w	r3, r3, #7
 80054a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	f1c3 0307 	rsb	r3, r3, #7
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	bf28      	it	cs
 80054ae:	2304      	movcs	r3, #4
 80054b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	3304      	adds	r3, #4
 80054b6:	2b06      	cmp	r3, #6
 80054b8:	d902      	bls.n	80054c0 <NVIC_EncodePriority+0x30>
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	3b03      	subs	r3, #3
 80054be:	e000      	b.n	80054c2 <NVIC_EncodePriority+0x32>
 80054c0:	2300      	movs	r3, #0
 80054c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054c4:	f04f 32ff 	mov.w	r2, #4294967295
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	fa02 f303 	lsl.w	r3, r2, r3
 80054ce:	43da      	mvns	r2, r3
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	401a      	ands	r2, r3
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054d8:	f04f 31ff 	mov.w	r1, #4294967295
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	fa01 f303 	lsl.w	r3, r1, r3
 80054e2:	43d9      	mvns	r1, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054e8:	4313      	orrs	r3, r2
         );
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3724      	adds	r7, #36	; 0x24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr

080054f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff ff4f 	bl	80053a0 <__NVIC_SetPriorityGrouping>
}
 8005502:	bf00      	nop
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800550a:	b580      	push	{r7, lr}
 800550c:	b086      	sub	sp, #24
 800550e:	af00      	add	r7, sp, #0
 8005510:	4603      	mov	r3, r0
 8005512:	60b9      	str	r1, [r7, #8]
 8005514:	607a      	str	r2, [r7, #4]
 8005516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005518:	2300      	movs	r3, #0
 800551a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800551c:	f7ff ff64 	bl	80053e8 <__NVIC_GetPriorityGrouping>
 8005520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	68b9      	ldr	r1, [r7, #8]
 8005526:	6978      	ldr	r0, [r7, #20]
 8005528:	f7ff ffb2 	bl	8005490 <NVIC_EncodePriority>
 800552c:	4602      	mov	r2, r0
 800552e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005532:	4611      	mov	r1, r2
 8005534:	4618      	mov	r0, r3
 8005536:	f7ff ff81 	bl	800543c <__NVIC_SetPriority>
}
 800553a:	bf00      	nop
 800553c:	3718      	adds	r7, #24
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b082      	sub	sp, #8
 8005546:	af00      	add	r7, sp, #0
 8005548:	4603      	mov	r3, r0
 800554a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800554c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005550:	4618      	mov	r0, r3
 8005552:	f7ff ff57 	bl	8005404 <__NVIC_EnableIRQ>
}
 8005556:	bf00      	nop
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
	...

08005560 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005560:	b480      	push	{r7}
 8005562:	b08b      	sub	sp, #44	; 0x2c
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800556a:	2300      	movs	r3, #0
 800556c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800556e:	2300      	movs	r3, #0
 8005570:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005572:	e179      	b.n	8005868 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005574:	2201      	movs	r2, #1
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	69fa      	ldr	r2, [r7, #28]
 8005584:	4013      	ands	r3, r2
 8005586:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	429a      	cmp	r2, r3
 800558e:	f040 8168 	bne.w	8005862 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	4a96      	ldr	r2, [pc, #600]	; (80057f0 <HAL_GPIO_Init+0x290>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d05e      	beq.n	800565a <HAL_GPIO_Init+0xfa>
 800559c:	4a94      	ldr	r2, [pc, #592]	; (80057f0 <HAL_GPIO_Init+0x290>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d875      	bhi.n	800568e <HAL_GPIO_Init+0x12e>
 80055a2:	4a94      	ldr	r2, [pc, #592]	; (80057f4 <HAL_GPIO_Init+0x294>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d058      	beq.n	800565a <HAL_GPIO_Init+0xfa>
 80055a8:	4a92      	ldr	r2, [pc, #584]	; (80057f4 <HAL_GPIO_Init+0x294>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d86f      	bhi.n	800568e <HAL_GPIO_Init+0x12e>
 80055ae:	4a92      	ldr	r2, [pc, #584]	; (80057f8 <HAL_GPIO_Init+0x298>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d052      	beq.n	800565a <HAL_GPIO_Init+0xfa>
 80055b4:	4a90      	ldr	r2, [pc, #576]	; (80057f8 <HAL_GPIO_Init+0x298>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d869      	bhi.n	800568e <HAL_GPIO_Init+0x12e>
 80055ba:	4a90      	ldr	r2, [pc, #576]	; (80057fc <HAL_GPIO_Init+0x29c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d04c      	beq.n	800565a <HAL_GPIO_Init+0xfa>
 80055c0:	4a8e      	ldr	r2, [pc, #568]	; (80057fc <HAL_GPIO_Init+0x29c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d863      	bhi.n	800568e <HAL_GPIO_Init+0x12e>
 80055c6:	4a8e      	ldr	r2, [pc, #568]	; (8005800 <HAL_GPIO_Init+0x2a0>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d046      	beq.n	800565a <HAL_GPIO_Init+0xfa>
 80055cc:	4a8c      	ldr	r2, [pc, #560]	; (8005800 <HAL_GPIO_Init+0x2a0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d85d      	bhi.n	800568e <HAL_GPIO_Init+0x12e>
 80055d2:	2b12      	cmp	r3, #18
 80055d4:	d82a      	bhi.n	800562c <HAL_GPIO_Init+0xcc>
 80055d6:	2b12      	cmp	r3, #18
 80055d8:	d859      	bhi.n	800568e <HAL_GPIO_Init+0x12e>
 80055da:	a201      	add	r2, pc, #4	; (adr r2, 80055e0 <HAL_GPIO_Init+0x80>)
 80055dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e0:	0800565b 	.word	0x0800565b
 80055e4:	08005635 	.word	0x08005635
 80055e8:	08005647 	.word	0x08005647
 80055ec:	08005689 	.word	0x08005689
 80055f0:	0800568f 	.word	0x0800568f
 80055f4:	0800568f 	.word	0x0800568f
 80055f8:	0800568f 	.word	0x0800568f
 80055fc:	0800568f 	.word	0x0800568f
 8005600:	0800568f 	.word	0x0800568f
 8005604:	0800568f 	.word	0x0800568f
 8005608:	0800568f 	.word	0x0800568f
 800560c:	0800568f 	.word	0x0800568f
 8005610:	0800568f 	.word	0x0800568f
 8005614:	0800568f 	.word	0x0800568f
 8005618:	0800568f 	.word	0x0800568f
 800561c:	0800568f 	.word	0x0800568f
 8005620:	0800568f 	.word	0x0800568f
 8005624:	0800563d 	.word	0x0800563d
 8005628:	08005651 	.word	0x08005651
 800562c:	4a75      	ldr	r2, [pc, #468]	; (8005804 <HAL_GPIO_Init+0x2a4>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d013      	beq.n	800565a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005632:	e02c      	b.n	800568e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	623b      	str	r3, [r7, #32]
          break;
 800563a:	e029      	b.n	8005690 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	3304      	adds	r3, #4
 8005642:	623b      	str	r3, [r7, #32]
          break;
 8005644:	e024      	b.n	8005690 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	3308      	adds	r3, #8
 800564c:	623b      	str	r3, [r7, #32]
          break;
 800564e:	e01f      	b.n	8005690 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	330c      	adds	r3, #12
 8005656:	623b      	str	r3, [r7, #32]
          break;
 8005658:	e01a      	b.n	8005690 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d102      	bne.n	8005668 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005662:	2304      	movs	r3, #4
 8005664:	623b      	str	r3, [r7, #32]
          break;
 8005666:	e013      	b.n	8005690 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d105      	bne.n	800567c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005670:	2308      	movs	r3, #8
 8005672:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	69fa      	ldr	r2, [r7, #28]
 8005678:	611a      	str	r2, [r3, #16]
          break;
 800567a:	e009      	b.n	8005690 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800567c:	2308      	movs	r3, #8
 800567e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	69fa      	ldr	r2, [r7, #28]
 8005684:	615a      	str	r2, [r3, #20]
          break;
 8005686:	e003      	b.n	8005690 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005688:	2300      	movs	r3, #0
 800568a:	623b      	str	r3, [r7, #32]
          break;
 800568c:	e000      	b.n	8005690 <HAL_GPIO_Init+0x130>
          break;
 800568e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	2bff      	cmp	r3, #255	; 0xff
 8005694:	d801      	bhi.n	800569a <HAL_GPIO_Init+0x13a>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	e001      	b.n	800569e <HAL_GPIO_Init+0x13e>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	3304      	adds	r3, #4
 800569e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	2bff      	cmp	r3, #255	; 0xff
 80056a4:	d802      	bhi.n	80056ac <HAL_GPIO_Init+0x14c>
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	e002      	b.n	80056b2 <HAL_GPIO_Init+0x152>
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	3b08      	subs	r3, #8
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	210f      	movs	r1, #15
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	fa01 f303 	lsl.w	r3, r1, r3
 80056c0:	43db      	mvns	r3, r3
 80056c2:	401a      	ands	r2, r3
 80056c4:	6a39      	ldr	r1, [r7, #32]
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	fa01 f303 	lsl.w	r3, r1, r3
 80056cc:	431a      	orrs	r2, r3
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 80c1 	beq.w	8005862 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80056e0:	4b49      	ldr	r3, [pc, #292]	; (8005808 <HAL_GPIO_Init+0x2a8>)
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	4a48      	ldr	r2, [pc, #288]	; (8005808 <HAL_GPIO_Init+0x2a8>)
 80056e6:	f043 0301 	orr.w	r3, r3, #1
 80056ea:	6193      	str	r3, [r2, #24]
 80056ec:	4b46      	ldr	r3, [pc, #280]	; (8005808 <HAL_GPIO_Init+0x2a8>)
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	60bb      	str	r3, [r7, #8]
 80056f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80056f8:	4a44      	ldr	r2, [pc, #272]	; (800580c <HAL_GPIO_Init+0x2ac>)
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	089b      	lsrs	r3, r3, #2
 80056fe:	3302      	adds	r3, #2
 8005700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005704:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	f003 0303 	and.w	r3, r3, #3
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	220f      	movs	r2, #15
 8005710:	fa02 f303 	lsl.w	r3, r2, r3
 8005714:	43db      	mvns	r3, r3
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	4013      	ands	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a3c      	ldr	r2, [pc, #240]	; (8005810 <HAL_GPIO_Init+0x2b0>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d01f      	beq.n	8005764 <HAL_GPIO_Init+0x204>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a3b      	ldr	r2, [pc, #236]	; (8005814 <HAL_GPIO_Init+0x2b4>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d019      	beq.n	8005760 <HAL_GPIO_Init+0x200>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a3a      	ldr	r2, [pc, #232]	; (8005818 <HAL_GPIO_Init+0x2b8>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d013      	beq.n	800575c <HAL_GPIO_Init+0x1fc>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a39      	ldr	r2, [pc, #228]	; (800581c <HAL_GPIO_Init+0x2bc>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d00d      	beq.n	8005758 <HAL_GPIO_Init+0x1f8>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a38      	ldr	r2, [pc, #224]	; (8005820 <HAL_GPIO_Init+0x2c0>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d007      	beq.n	8005754 <HAL_GPIO_Init+0x1f4>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a37      	ldr	r2, [pc, #220]	; (8005824 <HAL_GPIO_Init+0x2c4>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d101      	bne.n	8005750 <HAL_GPIO_Init+0x1f0>
 800574c:	2305      	movs	r3, #5
 800574e:	e00a      	b.n	8005766 <HAL_GPIO_Init+0x206>
 8005750:	2306      	movs	r3, #6
 8005752:	e008      	b.n	8005766 <HAL_GPIO_Init+0x206>
 8005754:	2304      	movs	r3, #4
 8005756:	e006      	b.n	8005766 <HAL_GPIO_Init+0x206>
 8005758:	2303      	movs	r3, #3
 800575a:	e004      	b.n	8005766 <HAL_GPIO_Init+0x206>
 800575c:	2302      	movs	r3, #2
 800575e:	e002      	b.n	8005766 <HAL_GPIO_Init+0x206>
 8005760:	2301      	movs	r3, #1
 8005762:	e000      	b.n	8005766 <HAL_GPIO_Init+0x206>
 8005764:	2300      	movs	r3, #0
 8005766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005768:	f002 0203 	and.w	r2, r2, #3
 800576c:	0092      	lsls	r2, r2, #2
 800576e:	4093      	lsls	r3, r2
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	4313      	orrs	r3, r2
 8005774:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005776:	4925      	ldr	r1, [pc, #148]	; (800580c <HAL_GPIO_Init+0x2ac>)
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	089b      	lsrs	r3, r3, #2
 800577c:	3302      	adds	r3, #2
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d006      	beq.n	800579e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005790:	4b25      	ldr	r3, [pc, #148]	; (8005828 <HAL_GPIO_Init+0x2c8>)
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	4924      	ldr	r1, [pc, #144]	; (8005828 <HAL_GPIO_Init+0x2c8>)
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	4313      	orrs	r3, r2
 800579a:	608b      	str	r3, [r1, #8]
 800579c:	e006      	b.n	80057ac <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800579e:	4b22      	ldr	r3, [pc, #136]	; (8005828 <HAL_GPIO_Init+0x2c8>)
 80057a0:	689a      	ldr	r2, [r3, #8]
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	43db      	mvns	r3, r3
 80057a6:	4920      	ldr	r1, [pc, #128]	; (8005828 <HAL_GPIO_Init+0x2c8>)
 80057a8:	4013      	ands	r3, r2
 80057aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d006      	beq.n	80057c6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80057b8:	4b1b      	ldr	r3, [pc, #108]	; (8005828 <HAL_GPIO_Init+0x2c8>)
 80057ba:	68da      	ldr	r2, [r3, #12]
 80057bc:	491a      	ldr	r1, [pc, #104]	; (8005828 <HAL_GPIO_Init+0x2c8>)
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	60cb      	str	r3, [r1, #12]
 80057c4:	e006      	b.n	80057d4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80057c6:	4b18      	ldr	r3, [pc, #96]	; (8005828 <HAL_GPIO_Init+0x2c8>)
 80057c8:	68da      	ldr	r2, [r3, #12]
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	43db      	mvns	r3, r3
 80057ce:	4916      	ldr	r1, [pc, #88]	; (8005828 <HAL_GPIO_Init+0x2c8>)
 80057d0:	4013      	ands	r3, r2
 80057d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d025      	beq.n	800582c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80057e0:	4b11      	ldr	r3, [pc, #68]	; (8005828 <HAL_GPIO_Init+0x2c8>)
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	4910      	ldr	r1, [pc, #64]	; (8005828 <HAL_GPIO_Init+0x2c8>)
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	604b      	str	r3, [r1, #4]
 80057ec:	e025      	b.n	800583a <HAL_GPIO_Init+0x2da>
 80057ee:	bf00      	nop
 80057f0:	10320000 	.word	0x10320000
 80057f4:	10310000 	.word	0x10310000
 80057f8:	10220000 	.word	0x10220000
 80057fc:	10210000 	.word	0x10210000
 8005800:	10120000 	.word	0x10120000
 8005804:	10110000 	.word	0x10110000
 8005808:	40021000 	.word	0x40021000
 800580c:	40010000 	.word	0x40010000
 8005810:	40010800 	.word	0x40010800
 8005814:	40010c00 	.word	0x40010c00
 8005818:	40011000 	.word	0x40011000
 800581c:	40011400 	.word	0x40011400
 8005820:	40011800 	.word	0x40011800
 8005824:	40011c00 	.word	0x40011c00
 8005828:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800582c:	4b15      	ldr	r3, [pc, #84]	; (8005884 <HAL_GPIO_Init+0x324>)
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	43db      	mvns	r3, r3
 8005834:	4913      	ldr	r1, [pc, #76]	; (8005884 <HAL_GPIO_Init+0x324>)
 8005836:	4013      	ands	r3, r2
 8005838:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d006      	beq.n	8005854 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005846:	4b0f      	ldr	r3, [pc, #60]	; (8005884 <HAL_GPIO_Init+0x324>)
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	490e      	ldr	r1, [pc, #56]	; (8005884 <HAL_GPIO_Init+0x324>)
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	4313      	orrs	r3, r2
 8005850:	600b      	str	r3, [r1, #0]
 8005852:	e006      	b.n	8005862 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005854:	4b0b      	ldr	r3, [pc, #44]	; (8005884 <HAL_GPIO_Init+0x324>)
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	43db      	mvns	r3, r3
 800585c:	4909      	ldr	r1, [pc, #36]	; (8005884 <HAL_GPIO_Init+0x324>)
 800585e:	4013      	ands	r3, r2
 8005860:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	3301      	adds	r3, #1
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	fa22 f303 	lsr.w	r3, r2, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	f47f ae7e 	bne.w	8005574 <HAL_GPIO_Init+0x14>
  }
}
 8005878:	bf00      	nop
 800587a:	bf00      	nop
 800587c:	372c      	adds	r7, #44	; 0x2c
 800587e:	46bd      	mov	sp, r7
 8005880:	bc80      	pop	{r7}
 8005882:	4770      	bx	lr
 8005884:	40010400 	.word	0x40010400

08005888 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	460b      	mov	r3, r1
 8005892:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	887b      	ldrh	r3, [r7, #2]
 800589a:	4013      	ands	r3, r2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80058a0:	2301      	movs	r3, #1
 80058a2:	73fb      	strb	r3, [r7, #15]
 80058a4:	e001      	b.n	80058aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058a6:	2300      	movs	r3, #0
 80058a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bc80      	pop	{r7}
 80058b4:	4770      	bx	lr

080058b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	460b      	mov	r3, r1
 80058c0:	807b      	strh	r3, [r7, #2]
 80058c2:	4613      	mov	r3, r2
 80058c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058c6:	787b      	ldrb	r3, [r7, #1]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058cc:	887a      	ldrh	r2, [r7, #2]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80058d2:	e003      	b.n	80058dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80058d4:	887b      	ldrh	r3, [r7, #2]
 80058d6:	041a      	lsls	r2, r3, #16
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	611a      	str	r2, [r3, #16]
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bc80      	pop	{r7}
 80058e4:	4770      	bx	lr

080058e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b085      	sub	sp, #20
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	460b      	mov	r3, r1
 80058f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80058f8:	887a      	ldrh	r2, [r7, #2]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	4013      	ands	r3, r2
 80058fe:	041a      	lsls	r2, r3, #16
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	43d9      	mvns	r1, r3
 8005904:	887b      	ldrh	r3, [r7, #2]
 8005906:	400b      	ands	r3, r1
 8005908:	431a      	orrs	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	611a      	str	r2, [r3, #16]
}
 800590e:	bf00      	nop
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	bc80      	pop	{r7}
 8005916:	4770      	bx	lr

08005918 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e12b      	b.n	8005b82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d106      	bne.n	8005944 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7fd fa82 	bl	8002e48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2224      	movs	r2, #36	; 0x24
 8005948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 0201 	bic.w	r2, r2, #1
 800595a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800596a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800597a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800597c:	f002 f864 	bl	8007a48 <HAL_RCC_GetPCLK1Freq>
 8005980:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	4a81      	ldr	r2, [pc, #516]	; (8005b8c <HAL_I2C_Init+0x274>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d807      	bhi.n	800599c <HAL_I2C_Init+0x84>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4a80      	ldr	r2, [pc, #512]	; (8005b90 <HAL_I2C_Init+0x278>)
 8005990:	4293      	cmp	r3, r2
 8005992:	bf94      	ite	ls
 8005994:	2301      	movls	r3, #1
 8005996:	2300      	movhi	r3, #0
 8005998:	b2db      	uxtb	r3, r3
 800599a:	e006      	b.n	80059aa <HAL_I2C_Init+0x92>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	4a7d      	ldr	r2, [pc, #500]	; (8005b94 <HAL_I2C_Init+0x27c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	bf94      	ite	ls
 80059a4:	2301      	movls	r3, #1
 80059a6:	2300      	movhi	r3, #0
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e0e7      	b.n	8005b82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	4a78      	ldr	r2, [pc, #480]	; (8005b98 <HAL_I2C_Init+0x280>)
 80059b6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ba:	0c9b      	lsrs	r3, r3, #18
 80059bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6a1b      	ldr	r3, [r3, #32]
 80059d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	4a6a      	ldr	r2, [pc, #424]	; (8005b8c <HAL_I2C_Init+0x274>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d802      	bhi.n	80059ec <HAL_I2C_Init+0xd4>
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	3301      	adds	r3, #1
 80059ea:	e009      	b.n	8005a00 <HAL_I2C_Init+0xe8>
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80059f2:	fb02 f303 	mul.w	r3, r2, r3
 80059f6:	4a69      	ldr	r2, [pc, #420]	; (8005b9c <HAL_I2C_Init+0x284>)
 80059f8:	fba2 2303 	umull	r2, r3, r2, r3
 80059fc:	099b      	lsrs	r3, r3, #6
 80059fe:	3301      	adds	r3, #1
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6812      	ldr	r2, [r2, #0]
 8005a04:	430b      	orrs	r3, r1
 8005a06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005a12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	495c      	ldr	r1, [pc, #368]	; (8005b8c <HAL_I2C_Init+0x274>)
 8005a1c:	428b      	cmp	r3, r1
 8005a1e:	d819      	bhi.n	8005a54 <HAL_I2C_Init+0x13c>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	1e59      	subs	r1, r3, #1
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a2e:	1c59      	adds	r1, r3, #1
 8005a30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005a34:	400b      	ands	r3, r1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00a      	beq.n	8005a50 <HAL_I2C_Init+0x138>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	1e59      	subs	r1, r3, #1
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a48:	3301      	adds	r3, #1
 8005a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a4e:	e051      	b.n	8005af4 <HAL_I2C_Init+0x1dc>
 8005a50:	2304      	movs	r3, #4
 8005a52:	e04f      	b.n	8005af4 <HAL_I2C_Init+0x1dc>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d111      	bne.n	8005a80 <HAL_I2C_Init+0x168>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	1e58      	subs	r0, r3, #1
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6859      	ldr	r1, [r3, #4]
 8005a64:	460b      	mov	r3, r1
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	440b      	add	r3, r1
 8005a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a6e:	3301      	adds	r3, #1
 8005a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	bf0c      	ite	eq
 8005a78:	2301      	moveq	r3, #1
 8005a7a:	2300      	movne	r3, #0
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	e012      	b.n	8005aa6 <HAL_I2C_Init+0x18e>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	1e58      	subs	r0, r3, #1
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6859      	ldr	r1, [r3, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	440b      	add	r3, r1
 8005a8e:	0099      	lsls	r1, r3, #2
 8005a90:	440b      	add	r3, r1
 8005a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a96:	3301      	adds	r3, #1
 8005a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	bf0c      	ite	eq
 8005aa0:	2301      	moveq	r3, #1
 8005aa2:	2300      	movne	r3, #0
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <HAL_I2C_Init+0x196>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e022      	b.n	8005af4 <HAL_I2C_Init+0x1dc>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10e      	bne.n	8005ad4 <HAL_I2C_Init+0x1bc>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	1e58      	subs	r0, r3, #1
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6859      	ldr	r1, [r3, #4]
 8005abe:	460b      	mov	r3, r1
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	440b      	add	r3, r1
 8005ac4:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ac8:	3301      	adds	r3, #1
 8005aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ad2:	e00f      	b.n	8005af4 <HAL_I2C_Init+0x1dc>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	1e58      	subs	r0, r3, #1
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6859      	ldr	r1, [r3, #4]
 8005adc:	460b      	mov	r3, r1
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	440b      	add	r3, r1
 8005ae2:	0099      	lsls	r1, r3, #2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aea:	3301      	adds	r3, #1
 8005aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005af0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005af4:	6879      	ldr	r1, [r7, #4]
 8005af6:	6809      	ldr	r1, [r1, #0]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	69da      	ldr	r2, [r3, #28]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005b22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	6911      	ldr	r1, [r2, #16]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	68d2      	ldr	r2, [r2, #12]
 8005b2e:	4311      	orrs	r1, r2
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	6812      	ldr	r2, [r2, #0]
 8005b34:	430b      	orrs	r3, r1
 8005b36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	695a      	ldr	r2, [r3, #20]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f042 0201 	orr.w	r2, r2, #1
 8005b62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	000186a0 	.word	0x000186a0
 8005b90:	001e847f 	.word	0x001e847f
 8005b94:	003d08ff 	.word	0x003d08ff
 8005b98:	431bde83 	.word	0x431bde83
 8005b9c:	10624dd3 	.word	0x10624dd3

08005ba0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08c      	sub	sp, #48	; 0x30
 8005ba4:	af02      	add	r7, sp, #8
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	607a      	str	r2, [r7, #4]
 8005baa:	461a      	mov	r2, r3
 8005bac:	460b      	mov	r3, r1
 8005bae:	817b      	strh	r3, [r7, #10]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005bb8:	f7fe fd84 	bl	80046c4 <HAL_GetTick>
 8005bbc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b20      	cmp	r3, #32
 8005bc8:	f040 824b 	bne.w	8006062 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	2319      	movs	r3, #25
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	497f      	ldr	r1, [pc, #508]	; (8005dd4 <HAL_I2C_Master_Receive+0x234>)
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f001 f92a 	bl	8006e30 <I2C_WaitOnFlagUntilTimeout>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8005be2:	2302      	movs	r3, #2
 8005be4:	e23e      	b.n	8006064 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d101      	bne.n	8005bf4 <HAL_I2C_Master_Receive+0x54>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	e237      	b.n	8006064 <HAL_I2C_Master_Receive+0x4c4>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d007      	beq.n	8005c1a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f042 0201 	orr.w	r2, r2, #1
 8005c18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2222      	movs	r2, #34	; 0x22
 8005c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2210      	movs	r2, #16
 8005c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	893a      	ldrh	r2, [r7, #8]
 8005c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	4a5f      	ldr	r2, [pc, #380]	; (8005dd8 <HAL_I2C_Master_Receive+0x238>)
 8005c5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005c5c:	8979      	ldrh	r1, [r7, #10]
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 fe98 	bl	8006998 <I2C_MasterRequestRead>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e1f8      	b.n	8006064 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d113      	bne.n	8005ca2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	61fb      	str	r3, [r7, #28]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	61fb      	str	r3, [r7, #28]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	61fb      	str	r3, [r7, #28]
 8005c8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	e1cc      	b.n	800603c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d11e      	bne.n	8005ce8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cb8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005cba:	b672      	cpsid	i
}
 8005cbc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	61bb      	str	r3, [r7, #24]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	61bb      	str	r3, [r7, #24]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	61bb      	str	r3, [r7, #24]
 8005cd2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ce2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005ce4:	b662      	cpsie	i
}
 8005ce6:	e035      	b.n	8005d54 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d11e      	bne.n	8005d2e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cfe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005d00:	b672      	cpsid	i
}
 8005d02:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d04:	2300      	movs	r3, #0
 8005d06:	617b      	str	r3, [r7, #20]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	617b      	str	r3, [r7, #20]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	617b      	str	r3, [r7, #20]
 8005d18:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d28:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005d2a:	b662      	cpsie	i
}
 8005d2c:	e012      	b.n	8005d54 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d3e:	2300      	movs	r3, #0
 8005d40:	613b      	str	r3, [r7, #16]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	613b      	str	r3, [r7, #16]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	613b      	str	r3, [r7, #16]
 8005d52:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005d54:	e172      	b.n	800603c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d5a:	2b03      	cmp	r3, #3
 8005d5c:	f200 811f 	bhi.w	8005f9e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d123      	bne.n	8005db0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f001 fa09 	bl	8007184 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e173      	b.n	8006064 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	691a      	ldr	r2, [r3, #16]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	b2d2      	uxtb	r2, r2
 8005d88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	3b01      	subs	r3, #1
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005dae:	e145      	b.n	800603c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d152      	bne.n	8005e5e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	4906      	ldr	r1, [pc, #24]	; (8005ddc <HAL_I2C_Master_Receive+0x23c>)
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f001 f834 	bl	8006e30 <I2C_WaitOnFlagUntilTimeout>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d008      	beq.n	8005de0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e148      	b.n	8006064 <HAL_I2C_Master_Receive+0x4c4>
 8005dd2:	bf00      	nop
 8005dd4:	00100002 	.word	0x00100002
 8005dd8:	ffff0000 	.word	0xffff0000
 8005ddc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005de0:	b672      	cpsid	i
}
 8005de2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005df2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	691a      	ldr	r2, [r3, #16]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	b2d2      	uxtb	r2, r2
 8005e00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e06:	1c5a      	adds	r2, r3, #1
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e10:	3b01      	subs	r3, #1
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005e26:	b662      	cpsie	i
}
 8005e28:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	691a      	ldr	r2, [r3, #16]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	b2d2      	uxtb	r2, r2
 8005e36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e46:	3b01      	subs	r3, #1
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	3b01      	subs	r3, #1
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e5c:	e0ee      	b.n	800603c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e64:	2200      	movs	r2, #0
 8005e66:	4981      	ldr	r1, [pc, #516]	; (800606c <HAL_I2C_Master_Receive+0x4cc>)
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 ffe1 	bl	8006e30 <I2C_WaitOnFlagUntilTimeout>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e0f5      	b.n	8006064 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e86:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e88:	b672      	cpsid	i
}
 8005e8a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	691a      	ldr	r2, [r3, #16]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	1c5a      	adds	r2, r3, #1
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ebe:	4b6c      	ldr	r3, [pc, #432]	; (8006070 <HAL_I2C_Master_Receive+0x4d0>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	08db      	lsrs	r3, r3, #3
 8005ec4:	4a6b      	ldr	r2, [pc, #428]	; (8006074 <HAL_I2C_Master_Receive+0x4d4>)
 8005ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eca:	0a1a      	lsrs	r2, r3, #8
 8005ecc:	4613      	mov	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4413      	add	r3, r2
 8005ed2:	00da      	lsls	r2, r3, #3
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005ed8:	6a3b      	ldr	r3, [r7, #32]
 8005eda:	3b01      	subs	r3, #1
 8005edc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d118      	bne.n	8005f16 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2220      	movs	r2, #32
 8005eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	f043 0220 	orr.w	r2, r3, #32
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005f06:	b662      	cpsie	i
}
 8005f08:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e0a6      	b.n	8006064 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	f003 0304 	and.w	r3, r3, #4
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	d1d9      	bne.n	8005ed8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	691a      	ldr	r2, [r3, #16]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	1c5a      	adds	r2, r3, #1
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f50:	3b01      	subs	r3, #1
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005f66:	b662      	cpsie	i
}
 8005f68:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	691a      	ldr	r2, [r3, #16]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f74:	b2d2      	uxtb	r2, r2
 8005f76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f86:	3b01      	subs	r3, #1
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	3b01      	subs	r3, #1
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f9c:	e04e      	b.n	800603c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fa0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f001 f8ee 	bl	8007184 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e058      	b.n	8006064 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	691a      	ldr	r2, [r3, #16]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbc:	b2d2      	uxtb	r2, r2
 8005fbe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	1c5a      	adds	r2, r3, #1
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	f003 0304 	and.w	r3, r3, #4
 8005fee:	2b04      	cmp	r3, #4
 8005ff0:	d124      	bne.n	800603c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff6:	2b03      	cmp	r3, #3
 8005ff8:	d107      	bne.n	800600a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006008:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	691a      	ldr	r2, [r3, #16]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	b2d2      	uxtb	r2, r2
 8006016:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601c:	1c5a      	adds	r2, r3, #1
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006026:	3b01      	subs	r3, #1
 8006028:	b29a      	uxth	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006032:	b29b      	uxth	r3, r3
 8006034:	3b01      	subs	r3, #1
 8006036:	b29a      	uxth	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006040:	2b00      	cmp	r3, #0
 8006042:	f47f ae88 	bne.w	8005d56 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2220      	movs	r2, #32
 800604a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	e000      	b.n	8006064 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8006062:	2302      	movs	r3, #2
  }
}
 8006064:	4618      	mov	r0, r3
 8006066:	3728      	adds	r7, #40	; 0x28
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	00010004 	.word	0x00010004
 8006070:	200000e0 	.word	0x200000e0
 8006074:	14f8b589 	.word	0x14f8b589

08006078 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b088      	sub	sp, #32
 800607c:	af02      	add	r7, sp, #8
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	4608      	mov	r0, r1
 8006082:	4611      	mov	r1, r2
 8006084:	461a      	mov	r2, r3
 8006086:	4603      	mov	r3, r0
 8006088:	817b      	strh	r3, [r7, #10]
 800608a:	460b      	mov	r3, r1
 800608c:	813b      	strh	r3, [r7, #8]
 800608e:	4613      	mov	r3, r2
 8006090:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006092:	f7fe fb17 	bl	80046c4 <HAL_GetTick>
 8006096:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	2b20      	cmp	r3, #32
 80060a2:	f040 80d9 	bne.w	8006258 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	2319      	movs	r3, #25
 80060ac:	2201      	movs	r2, #1
 80060ae:	496d      	ldr	r1, [pc, #436]	; (8006264 <HAL_I2C_Mem_Write+0x1ec>)
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 febd 	bl	8006e30 <I2C_WaitOnFlagUntilTimeout>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80060bc:	2302      	movs	r3, #2
 80060be:	e0cc      	b.n	800625a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d101      	bne.n	80060ce <HAL_I2C_Mem_Write+0x56>
 80060ca:	2302      	movs	r3, #2
 80060cc:	e0c5      	b.n	800625a <HAL_I2C_Mem_Write+0x1e2>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d007      	beq.n	80060f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 0201 	orr.w	r2, r2, #1
 80060f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006102:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2221      	movs	r2, #33	; 0x21
 8006108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2240      	movs	r2, #64	; 0x40
 8006110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6a3a      	ldr	r2, [r7, #32]
 800611e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006124:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800612a:	b29a      	uxth	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4a4d      	ldr	r2, [pc, #308]	; (8006268 <HAL_I2C_Mem_Write+0x1f0>)
 8006134:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006136:	88f8      	ldrh	r0, [r7, #6]
 8006138:	893a      	ldrh	r2, [r7, #8]
 800613a:	8979      	ldrh	r1, [r7, #10]
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	9301      	str	r3, [sp, #4]
 8006140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	4603      	mov	r3, r0
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 fcf4 	bl	8006b34 <I2C_RequestMemoryWrite>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d052      	beq.n	80061f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e081      	b.n	800625a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f000 ff82 	bl	8007064 <I2C_WaitOnTXEFlagUntilTimeout>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00d      	beq.n	8006182 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616a:	2b04      	cmp	r3, #4
 800616c:	d107      	bne.n	800617e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800617c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e06b      	b.n	800625a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006186:	781a      	ldrb	r2, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619c:	3b01      	subs	r3, #1
 800619e:	b29a      	uxth	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	3b01      	subs	r3, #1
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	f003 0304 	and.w	r3, r3, #4
 80061bc:	2b04      	cmp	r3, #4
 80061be:	d11b      	bne.n	80061f8 <HAL_I2C_Mem_Write+0x180>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d017      	beq.n	80061f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	781a      	ldrb	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d8:	1c5a      	adds	r2, r3, #1
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061e2:	3b01      	subs	r3, #1
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	3b01      	subs	r3, #1
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1aa      	bne.n	8006156 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 ff75 	bl	80070f4 <I2C_WaitOnBTFFlagUntilTimeout>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00d      	beq.n	800622c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006214:	2b04      	cmp	r3, #4
 8006216:	d107      	bne.n	8006228 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006226:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e016      	b.n	800625a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800623a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2220      	movs	r2, #32
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006254:	2300      	movs	r3, #0
 8006256:	e000      	b.n	800625a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006258:	2302      	movs	r3, #2
  }
}
 800625a:	4618      	mov	r0, r3
 800625c:	3718      	adds	r7, #24
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	00100002 	.word	0x00100002
 8006268:	ffff0000 	.word	0xffff0000

0800626c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b08c      	sub	sp, #48	; 0x30
 8006270:	af02      	add	r7, sp, #8
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	4608      	mov	r0, r1
 8006276:	4611      	mov	r1, r2
 8006278:	461a      	mov	r2, r3
 800627a:	4603      	mov	r3, r0
 800627c:	817b      	strh	r3, [r7, #10]
 800627e:	460b      	mov	r3, r1
 8006280:	813b      	strh	r3, [r7, #8]
 8006282:	4613      	mov	r3, r2
 8006284:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8006286:	2300      	movs	r3, #0
 8006288:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800628a:	f7fe fa1b 	bl	80046c4 <HAL_GetTick>
 800628e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b20      	cmp	r3, #32
 800629a:	f040 8244 	bne.w	8006726 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	2319      	movs	r3, #25
 80062a4:	2201      	movs	r2, #1
 80062a6:	4982      	ldr	r1, [pc, #520]	; (80064b0 <HAL_I2C_Mem_Read+0x244>)
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 fdc1 	bl	8006e30 <I2C_WaitOnFlagUntilTimeout>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80062b4:	2302      	movs	r3, #2
 80062b6:	e237      	b.n	8006728 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d101      	bne.n	80062c6 <HAL_I2C_Mem_Read+0x5a>
 80062c2:	2302      	movs	r3, #2
 80062c4:	e230      	b.n	8006728 <HAL_I2C_Mem_Read+0x4bc>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d007      	beq.n	80062ec <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f042 0201 	orr.w	r2, r2, #1
 80062ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2222      	movs	r2, #34	; 0x22
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2240      	movs	r2, #64	; 0x40
 8006308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006316:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800631c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006322:	b29a      	uxth	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4a62      	ldr	r2, [pc, #392]	; (80064b4 <HAL_I2C_Mem_Read+0x248>)
 800632c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800632e:	88f8      	ldrh	r0, [r7, #6]
 8006330:	893a      	ldrh	r2, [r7, #8]
 8006332:	8979      	ldrh	r1, [r7, #10]
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	9301      	str	r3, [sp, #4]
 8006338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	4603      	mov	r3, r0
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 fc8e 	bl	8006c60 <I2C_RequestMemoryRead>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e1ec      	b.n	8006728 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006352:	2b00      	cmp	r3, #0
 8006354:	d113      	bne.n	800637e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006356:	2300      	movs	r3, #0
 8006358:	61fb      	str	r3, [r7, #28]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	61fb      	str	r3, [r7, #28]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	61fb      	str	r3, [r7, #28]
 800636a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	e1c0      	b.n	8006700 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006382:	2b01      	cmp	r3, #1
 8006384:	d11e      	bne.n	80063c4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006394:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006396:	b672      	cpsid	i
}
 8006398:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800639a:	2300      	movs	r3, #0
 800639c:	61bb      	str	r3, [r7, #24]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	61bb      	str	r3, [r7, #24]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	61bb      	str	r3, [r7, #24]
 80063ae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80063c0:	b662      	cpsie	i
}
 80063c2:	e035      	b.n	8006430 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d11e      	bne.n	800640a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80063dc:	b672      	cpsid	i
}
 80063de:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063e0:	2300      	movs	r3, #0
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	617b      	str	r3, [r7, #20]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	617b      	str	r3, [r7, #20]
 80063f4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006404:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006406:	b662      	cpsie	i
}
 8006408:	e012      	b.n	8006430 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006418:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800641a:	2300      	movs	r3, #0
 800641c:	613b      	str	r3, [r7, #16]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	613b      	str	r3, [r7, #16]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	613b      	str	r3, [r7, #16]
 800642e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006430:	e166      	b.n	8006700 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006436:	2b03      	cmp	r3, #3
 8006438:	f200 811f 	bhi.w	800667a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006440:	2b01      	cmp	r3, #1
 8006442:	d123      	bne.n	800648c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006446:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 fe9b 	bl	8007184 <I2C_WaitOnRXNEFlagUntilTimeout>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d001      	beq.n	8006458 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e167      	b.n	8006728 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	691a      	ldr	r2, [r3, #16]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	b2d2      	uxtb	r2, r2
 8006464:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006474:	3b01      	subs	r3, #1
 8006476:	b29a      	uxth	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006480:	b29b      	uxth	r3, r3
 8006482:	3b01      	subs	r3, #1
 8006484:	b29a      	uxth	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	855a      	strh	r2, [r3, #42]	; 0x2a
 800648a:	e139      	b.n	8006700 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006490:	2b02      	cmp	r3, #2
 8006492:	d152      	bne.n	800653a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649a:	2200      	movs	r2, #0
 800649c:	4906      	ldr	r1, [pc, #24]	; (80064b8 <HAL_I2C_Mem_Read+0x24c>)
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f000 fcc6 	bl	8006e30 <I2C_WaitOnFlagUntilTimeout>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d008      	beq.n	80064bc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e13c      	b.n	8006728 <HAL_I2C_Mem_Read+0x4bc>
 80064ae:	bf00      	nop
 80064b0:	00100002 	.word	0x00100002
 80064b4:	ffff0000 	.word	0xffff0000
 80064b8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80064bc:	b672      	cpsid	i
}
 80064be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	691a      	ldr	r2, [r3, #16]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064da:	b2d2      	uxtb	r2, r2
 80064dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e2:	1c5a      	adds	r2, r3, #1
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ec:	3b01      	subs	r3, #1
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	3b01      	subs	r3, #1
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006502:	b662      	cpsie	i
}
 8006504:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	691a      	ldr	r2, [r3, #16]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006510:	b2d2      	uxtb	r2, r2
 8006512:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006518:	1c5a      	adds	r2, r3, #1
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006522:	3b01      	subs	r3, #1
 8006524:	b29a      	uxth	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800652e:	b29b      	uxth	r3, r3
 8006530:	3b01      	subs	r3, #1
 8006532:	b29a      	uxth	r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006538:	e0e2      	b.n	8006700 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800653a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006540:	2200      	movs	r2, #0
 8006542:	497b      	ldr	r1, [pc, #492]	; (8006730 <HAL_I2C_Mem_Read+0x4c4>)
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 fc73 	bl	8006e30 <I2C_WaitOnFlagUntilTimeout>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e0e9      	b.n	8006728 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006562:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006564:	b672      	cpsid	i
}
 8006566:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691a      	ldr	r2, [r3, #16]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006572:	b2d2      	uxtb	r2, r2
 8006574:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657a:	1c5a      	adds	r2, r3, #1
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006584:	3b01      	subs	r3, #1
 8006586:	b29a      	uxth	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006590:	b29b      	uxth	r3, r3
 8006592:	3b01      	subs	r3, #1
 8006594:	b29a      	uxth	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800659a:	4b66      	ldr	r3, [pc, #408]	; (8006734 <HAL_I2C_Mem_Read+0x4c8>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	08db      	lsrs	r3, r3, #3
 80065a0:	4a65      	ldr	r2, [pc, #404]	; (8006738 <HAL_I2C_Mem_Read+0x4cc>)
 80065a2:	fba2 2303 	umull	r2, r3, r2, r3
 80065a6:	0a1a      	lsrs	r2, r3, #8
 80065a8:	4613      	mov	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	00da      	lsls	r2, r3, #3
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d118      	bne.n	80065f2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065da:	f043 0220 	orr.w	r2, r3, #32
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80065e2:	b662      	cpsie	i
}
 80065e4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e09a      	b.n	8006728 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	2b04      	cmp	r3, #4
 80065fe:	d1d9      	bne.n	80065b4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800660e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	691a      	ldr	r2, [r3, #16]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661a:	b2d2      	uxtb	r2, r2
 800661c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006622:	1c5a      	adds	r2, r3, #1
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800662c:	3b01      	subs	r3, #1
 800662e:	b29a      	uxth	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006638:	b29b      	uxth	r3, r3
 800663a:	3b01      	subs	r3, #1
 800663c:	b29a      	uxth	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006642:	b662      	cpsie	i
}
 8006644:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	691a      	ldr	r2, [r3, #16]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006650:	b2d2      	uxtb	r2, r2
 8006652:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006662:	3b01      	subs	r3, #1
 8006664:	b29a      	uxth	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800666e:	b29b      	uxth	r3, r3
 8006670:	3b01      	subs	r3, #1
 8006672:	b29a      	uxth	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006678:	e042      	b.n	8006700 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800667a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800667c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f000 fd80 	bl	8007184 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d001      	beq.n	800668e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e04c      	b.n	8006728 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	691a      	ldr	r2, [r3, #16]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006698:	b2d2      	uxtb	r2, r2
 800669a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a0:	1c5a      	adds	r2, r3, #1
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066aa:	3b01      	subs	r3, #1
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	3b01      	subs	r3, #1
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	f003 0304 	and.w	r3, r3, #4
 80066ca:	2b04      	cmp	r3, #4
 80066cc:	d118      	bne.n	8006700 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	691a      	ldr	r2, [r3, #16]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d8:	b2d2      	uxtb	r2, r2
 80066da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e0:	1c5a      	adds	r2, r3, #1
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ea:	3b01      	subs	r3, #1
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	3b01      	subs	r3, #1
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006704:	2b00      	cmp	r3, #0
 8006706:	f47f ae94 	bne.w	8006432 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2220      	movs	r2, #32
 800670e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	e000      	b.n	8006728 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8006726:	2302      	movs	r3, #2
  }
}
 8006728:	4618      	mov	r0, r3
 800672a:	3728      	adds	r7, #40	; 0x28
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	00010004 	.word	0x00010004
 8006734:	200000e0 	.word	0x200000e0
 8006738:	14f8b589 	.word	0x14f8b589

0800673c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b08a      	sub	sp, #40	; 0x28
 8006740:	af02      	add	r7, sp, #8
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	607a      	str	r2, [r7, #4]
 8006746:	603b      	str	r3, [r7, #0]
 8006748:	460b      	mov	r3, r1
 800674a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800674c:	f7fd ffba 	bl	80046c4 <HAL_GetTick>
 8006750:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006752:	2300      	movs	r3, #0
 8006754:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b20      	cmp	r3, #32
 8006760:	f040 8111 	bne.w	8006986 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	2319      	movs	r3, #25
 800676a:	2201      	movs	r2, #1
 800676c:	4988      	ldr	r1, [pc, #544]	; (8006990 <HAL_I2C_IsDeviceReady+0x254>)
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f000 fb5e 	bl	8006e30 <I2C_WaitOnFlagUntilTimeout>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800677a:	2302      	movs	r3, #2
 800677c:	e104      	b.n	8006988 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006784:	2b01      	cmp	r3, #1
 8006786:	d101      	bne.n	800678c <HAL_I2C_IsDeviceReady+0x50>
 8006788:	2302      	movs	r3, #2
 800678a:	e0fd      	b.n	8006988 <HAL_I2C_IsDeviceReady+0x24c>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d007      	beq.n	80067b2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f042 0201 	orr.w	r2, r2, #1
 80067b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2224      	movs	r2, #36	; 0x24
 80067c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	4a70      	ldr	r2, [pc, #448]	; (8006994 <HAL_I2C_IsDeviceReady+0x258>)
 80067d4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067e4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f000 fb1c 	bl	8006e30 <I2C_WaitOnFlagUntilTimeout>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00d      	beq.n	800681a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800680c:	d103      	bne.n	8006816 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006814:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e0b6      	b.n	8006988 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800681a:	897b      	ldrh	r3, [r7, #10]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	461a      	mov	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006828:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800682a:	f7fd ff4b 	bl	80046c4 <HAL_GetTick>
 800682e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	f003 0302 	and.w	r3, r3, #2
 800683a:	2b02      	cmp	r3, #2
 800683c:	bf0c      	ite	eq
 800683e:	2301      	moveq	r3, #1
 8006840:	2300      	movne	r3, #0
 8006842:	b2db      	uxtb	r3, r3
 8006844:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006854:	bf0c      	ite	eq
 8006856:	2301      	moveq	r3, #1
 8006858:	2300      	movne	r3, #0
 800685a:	b2db      	uxtb	r3, r3
 800685c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800685e:	e025      	b.n	80068ac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006860:	f7fd ff30 	bl	80046c4 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	429a      	cmp	r2, r3
 800686e:	d302      	bcc.n	8006876 <HAL_I2C_IsDeviceReady+0x13a>
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d103      	bne.n	800687e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	22a0      	movs	r2, #160	; 0xa0
 800687a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	f003 0302 	and.w	r3, r3, #2
 8006888:	2b02      	cmp	r3, #2
 800688a:	bf0c      	ite	eq
 800688c:	2301      	moveq	r3, #1
 800688e:	2300      	movne	r3, #0
 8006890:	b2db      	uxtb	r3, r3
 8006892:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800689e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068a2:	bf0c      	ite	eq
 80068a4:	2301      	moveq	r3, #1
 80068a6:	2300      	movne	r3, #0
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2ba0      	cmp	r3, #160	; 0xa0
 80068b6:	d005      	beq.n	80068c4 <HAL_I2C_IsDeviceReady+0x188>
 80068b8:	7dfb      	ldrb	r3, [r7, #23]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d102      	bne.n	80068c4 <HAL_I2C_IsDeviceReady+0x188>
 80068be:	7dbb      	ldrb	r3, [r7, #22]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d0cd      	beq.n	8006860 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2220      	movs	r2, #32
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d129      	bne.n	800692e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068e8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068ea:	2300      	movs	r3, #0
 80068ec:	613b      	str	r3, [r7, #16]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	613b      	str	r3, [r7, #16]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	613b      	str	r3, [r7, #16]
 80068fe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	2319      	movs	r3, #25
 8006906:	2201      	movs	r2, #1
 8006908:	4921      	ldr	r1, [pc, #132]	; (8006990 <HAL_I2C_IsDeviceReady+0x254>)
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f000 fa90 	bl	8006e30 <I2C_WaitOnFlagUntilTimeout>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e036      	b.n	8006988 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2220      	movs	r2, #32
 800691e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800692a:	2300      	movs	r3, #0
 800692c:	e02c      	b.n	8006988 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800693c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006946:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	2319      	movs	r3, #25
 800694e:	2201      	movs	r2, #1
 8006950:	490f      	ldr	r1, [pc, #60]	; (8006990 <HAL_I2C_IsDeviceReady+0x254>)
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f000 fa6c 	bl	8006e30 <I2C_WaitOnFlagUntilTimeout>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d001      	beq.n	8006962 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e012      	b.n	8006988 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	3301      	adds	r3, #1
 8006966:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	429a      	cmp	r2, r3
 800696e:	f4ff af32 	bcc.w	80067d6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2220      	movs	r2, #32
 8006976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e000      	b.n	8006988 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006986:	2302      	movs	r3, #2
  }
}
 8006988:	4618      	mov	r0, r3
 800698a:	3720      	adds	r7, #32
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	00100002 	.word	0x00100002
 8006994:	ffff0000 	.word	0xffff0000

08006998 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b088      	sub	sp, #32
 800699c:	af02      	add	r7, sp, #8
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	607a      	str	r2, [r7, #4]
 80069a2:	603b      	str	r3, [r7, #0]
 80069a4:	460b      	mov	r3, r1
 80069a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069bc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2b08      	cmp	r3, #8
 80069c2:	d006      	beq.n	80069d2 <I2C_MasterRequestRead+0x3a>
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d003      	beq.n	80069d2 <I2C_MasterRequestRead+0x3a>
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80069d0:	d108      	bne.n	80069e4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	e00b      	b.n	80069fc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e8:	2b11      	cmp	r3, #17
 80069ea:	d107      	bne.n	80069fc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 fa11 	bl	8006e30 <I2C_WaitOnFlagUntilTimeout>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00d      	beq.n	8006a30 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a22:	d103      	bne.n	8006a2c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e079      	b.n	8006b24 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a38:	d108      	bne.n	8006a4c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006a3a:	897b      	ldrh	r3, [r7, #10]
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	f043 0301 	orr.w	r3, r3, #1
 8006a42:	b2da      	uxtb	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	611a      	str	r2, [r3, #16]
 8006a4a:	e05f      	b.n	8006b0c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006a4c:	897b      	ldrh	r3, [r7, #10]
 8006a4e:	11db      	asrs	r3, r3, #7
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	f003 0306 	and.w	r3, r3, #6
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	f063 030f 	orn	r3, r3, #15
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	4930      	ldr	r1, [pc, #192]	; (8006b2c <I2C_MasterRequestRead+0x194>)
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 fa5a 	bl	8006f24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e054      	b.n	8006b24 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006a7a:	897b      	ldrh	r3, [r7, #10]
 8006a7c:	b2da      	uxtb	r2, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	4929      	ldr	r1, [pc, #164]	; (8006b30 <I2C_MasterRequestRead+0x198>)
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 fa4a 	bl	8006f24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e044      	b.n	8006b24 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	613b      	str	r3, [r7, #16]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	613b      	str	r3, [r7, #16]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	613b      	str	r3, [r7, #16]
 8006aae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006abe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f000 f9af 	bl	8006e30 <I2C_WaitOnFlagUntilTimeout>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00d      	beq.n	8006af4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ae6:	d103      	bne.n	8006af0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006aee:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e017      	b.n	8006b24 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006af4:	897b      	ldrh	r3, [r7, #10]
 8006af6:	11db      	asrs	r3, r3, #7
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	f003 0306 	and.w	r3, r3, #6
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	f063 030e 	orn	r3, r3, #14
 8006b04:	b2da      	uxtb	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	4907      	ldr	r1, [pc, #28]	; (8006b30 <I2C_MasterRequestRead+0x198>)
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 fa06 	bl	8006f24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e000      	b.n	8006b24 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3718      	adds	r7, #24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	00010008 	.word	0x00010008
 8006b30:	00010002 	.word	0x00010002

08006b34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b088      	sub	sp, #32
 8006b38:	af02      	add	r7, sp, #8
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	4608      	mov	r0, r1
 8006b3e:	4611      	mov	r1, r2
 8006b40:	461a      	mov	r2, r3
 8006b42:	4603      	mov	r3, r0
 8006b44:	817b      	strh	r3, [r7, #10]
 8006b46:	460b      	mov	r3, r1
 8006b48:	813b      	strh	r3, [r7, #8]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f000 f960 	bl	8006e30 <I2C_WaitOnFlagUntilTimeout>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00d      	beq.n	8006b92 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b84:	d103      	bne.n	8006b8e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e05f      	b.n	8006c52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b92:	897b      	ldrh	r3, [r7, #10]
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	461a      	mov	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ba0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba4:	6a3a      	ldr	r2, [r7, #32]
 8006ba6:	492d      	ldr	r1, [pc, #180]	; (8006c5c <I2C_RequestMemoryWrite+0x128>)
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f000 f9bb 	bl	8006f24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d001      	beq.n	8006bb8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e04c      	b.n	8006c52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bb8:	2300      	movs	r3, #0
 8006bba:	617b      	str	r3, [r7, #20]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	617b      	str	r3, [r7, #20]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	617b      	str	r3, [r7, #20]
 8006bcc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bd0:	6a39      	ldr	r1, [r7, #32]
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f000 fa46 	bl	8007064 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00d      	beq.n	8006bfa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	2b04      	cmp	r3, #4
 8006be4:	d107      	bne.n	8006bf6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bf4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e02b      	b.n	8006c52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006bfa:	88fb      	ldrh	r3, [r7, #6]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d105      	bne.n	8006c0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c00:	893b      	ldrh	r3, [r7, #8]
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	611a      	str	r2, [r3, #16]
 8006c0a:	e021      	b.n	8006c50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c0c:	893b      	ldrh	r3, [r7, #8]
 8006c0e:	0a1b      	lsrs	r3, r3, #8
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c1c:	6a39      	ldr	r1, [r7, #32]
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f000 fa20 	bl	8007064 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00d      	beq.n	8006c46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2e:	2b04      	cmp	r3, #4
 8006c30:	d107      	bne.n	8006c42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e005      	b.n	8006c52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c46:	893b      	ldrh	r3, [r7, #8]
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3718      	adds	r7, #24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	00010002 	.word	0x00010002

08006c60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b088      	sub	sp, #32
 8006c64:	af02      	add	r7, sp, #8
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	4608      	mov	r0, r1
 8006c6a:	4611      	mov	r1, r2
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	4603      	mov	r3, r0
 8006c70:	817b      	strh	r3, [r7, #10]
 8006c72:	460b      	mov	r3, r1
 8006c74:	813b      	strh	r3, [r7, #8]
 8006c76:	4613      	mov	r3, r2
 8006c78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	6a3b      	ldr	r3, [r7, #32]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f000 f8c2 	bl	8006e30 <I2C_WaitOnFlagUntilTimeout>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00d      	beq.n	8006cce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cc0:	d103      	bne.n	8006cca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cc8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e0aa      	b.n	8006e24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006cce:	897b      	ldrh	r3, [r7, #10]
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006cdc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce0:	6a3a      	ldr	r2, [r7, #32]
 8006ce2:	4952      	ldr	r1, [pc, #328]	; (8006e2c <I2C_RequestMemoryRead+0x1cc>)
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 f91d 	bl	8006f24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e097      	b.n	8006e24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	617b      	str	r3, [r7, #20]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	617b      	str	r3, [r7, #20]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	617b      	str	r3, [r7, #20]
 8006d08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d0c:	6a39      	ldr	r1, [r7, #32]
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f000 f9a8 	bl	8007064 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00d      	beq.n	8006d36 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1e:	2b04      	cmp	r3, #4
 8006d20:	d107      	bne.n	8006d32 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e076      	b.n	8006e24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d36:	88fb      	ldrh	r3, [r7, #6]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d105      	bne.n	8006d48 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d3c:	893b      	ldrh	r3, [r7, #8]
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	611a      	str	r2, [r3, #16]
 8006d46:	e021      	b.n	8006d8c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006d48:	893b      	ldrh	r3, [r7, #8]
 8006d4a:	0a1b      	lsrs	r3, r3, #8
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	b2da      	uxtb	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d58:	6a39      	ldr	r1, [r7, #32]
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f000 f982 	bl	8007064 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00d      	beq.n	8006d82 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6a:	2b04      	cmp	r3, #4
 8006d6c:	d107      	bne.n	8006d7e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e050      	b.n	8006e24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d82:	893b      	ldrh	r3, [r7, #8]
 8006d84:	b2da      	uxtb	r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d8e:	6a39      	ldr	r1, [r7, #32]
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f000 f967 	bl	8007064 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00d      	beq.n	8006db8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da0:	2b04      	cmp	r3, #4
 8006da2:	d107      	bne.n	8006db4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006db2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e035      	b.n	8006e24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dc6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	6a3b      	ldr	r3, [r7, #32]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 f82b 	bl	8006e30 <I2C_WaitOnFlagUntilTimeout>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00d      	beq.n	8006dfc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dee:	d103      	bne.n	8006df8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006df6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e013      	b.n	8006e24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006dfc:	897b      	ldrh	r3, [r7, #10]
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	f043 0301 	orr.w	r3, r3, #1
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0e:	6a3a      	ldr	r2, [r7, #32]
 8006e10:	4906      	ldr	r1, [pc, #24]	; (8006e2c <I2C_RequestMemoryRead+0x1cc>)
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f000 f886 	bl	8006f24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d001      	beq.n	8006e22 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e000      	b.n	8006e24 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3718      	adds	r7, #24
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	00010002 	.word	0x00010002

08006e30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	603b      	str	r3, [r7, #0]
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e40:	e048      	b.n	8006ed4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e48:	d044      	beq.n	8006ed4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e4a:	f7fd fc3b 	bl	80046c4 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	683a      	ldr	r2, [r7, #0]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d302      	bcc.n	8006e60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d139      	bne.n	8006ed4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	0c1b      	lsrs	r3, r3, #16
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d10d      	bne.n	8006e86 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	695b      	ldr	r3, [r3, #20]
 8006e70:	43da      	mvns	r2, r3
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	4013      	ands	r3, r2
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	bf0c      	ite	eq
 8006e7c:	2301      	moveq	r3, #1
 8006e7e:	2300      	movne	r3, #0
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	461a      	mov	r2, r3
 8006e84:	e00c      	b.n	8006ea0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	43da      	mvns	r2, r3
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	4013      	ands	r3, r2
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	bf0c      	ite	eq
 8006e98:	2301      	moveq	r3, #1
 8006e9a:	2300      	movne	r3, #0
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	79fb      	ldrb	r3, [r7, #7]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d116      	bne.n	8006ed4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec0:	f043 0220 	orr.w	r2, r3, #32
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e023      	b.n	8006f1c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	0c1b      	lsrs	r3, r3, #16
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d10d      	bne.n	8006efa <I2C_WaitOnFlagUntilTimeout+0xca>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	43da      	mvns	r2, r3
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	4013      	ands	r3, r2
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	bf0c      	ite	eq
 8006ef0:	2301      	moveq	r3, #1
 8006ef2:	2300      	movne	r3, #0
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	e00c      	b.n	8006f14 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	43da      	mvns	r2, r3
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	4013      	ands	r3, r2
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	bf0c      	ite	eq
 8006f0c:	2301      	moveq	r3, #1
 8006f0e:	2300      	movne	r3, #0
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	461a      	mov	r2, r3
 8006f14:	79fb      	ldrb	r3, [r7, #7]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d093      	beq.n	8006e42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
 8006f30:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f32:	e071      	b.n	8007018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f42:	d123      	bne.n	8006f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f52:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2220      	movs	r2, #32
 8006f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f78:	f043 0204 	orr.w	r2, r3, #4
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e067      	b.n	800705c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f92:	d041      	beq.n	8007018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f94:	f7fd fb96 	bl	80046c4 <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d302      	bcc.n	8006faa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d136      	bne.n	8007018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	0c1b      	lsrs	r3, r3, #16
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d10c      	bne.n	8006fce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	43da      	mvns	r2, r3
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	bf14      	ite	ne
 8006fc6:	2301      	movne	r3, #1
 8006fc8:	2300      	moveq	r3, #0
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	e00b      	b.n	8006fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	43da      	mvns	r2, r3
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	4013      	ands	r3, r2
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	bf14      	ite	ne
 8006fe0:	2301      	movne	r3, #1
 8006fe2:	2300      	moveq	r3, #0
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d016      	beq.n	8007018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007004:	f043 0220 	orr.w	r2, r3, #32
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e021      	b.n	800705c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	0c1b      	lsrs	r3, r3, #16
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b01      	cmp	r3, #1
 8007020:	d10c      	bne.n	800703c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	695b      	ldr	r3, [r3, #20]
 8007028:	43da      	mvns	r2, r3
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	4013      	ands	r3, r2
 800702e:	b29b      	uxth	r3, r3
 8007030:	2b00      	cmp	r3, #0
 8007032:	bf14      	ite	ne
 8007034:	2301      	movne	r3, #1
 8007036:	2300      	moveq	r3, #0
 8007038:	b2db      	uxtb	r3, r3
 800703a:	e00b      	b.n	8007054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	43da      	mvns	r2, r3
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	4013      	ands	r3, r2
 8007048:	b29b      	uxth	r3, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	bf14      	ite	ne
 800704e:	2301      	movne	r3, #1
 8007050:	2300      	moveq	r3, #0
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b00      	cmp	r3, #0
 8007056:	f47f af6d 	bne.w	8006f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007070:	e034      	b.n	80070dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f000 f8e3 	bl	800723e <I2C_IsAcknowledgeFailed>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e034      	b.n	80070ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007088:	d028      	beq.n	80070dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800708a:	f7fd fb1b 	bl	80046c4 <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	68ba      	ldr	r2, [r7, #8]
 8007096:	429a      	cmp	r2, r3
 8007098:	d302      	bcc.n	80070a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d11d      	bne.n	80070dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070aa:	2b80      	cmp	r3, #128	; 0x80
 80070ac:	d016      	beq.n	80070dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2220      	movs	r2, #32
 80070b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c8:	f043 0220 	orr.w	r2, r3, #32
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e007      	b.n	80070ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	695b      	ldr	r3, [r3, #20]
 80070e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070e6:	2b80      	cmp	r3, #128	; 0x80
 80070e8:	d1c3      	bne.n	8007072 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007100:	e034      	b.n	800716c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f000 f89b 	bl	800723e <I2C_IsAcknowledgeFailed>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d001      	beq.n	8007112 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e034      	b.n	800717c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007118:	d028      	beq.n	800716c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800711a:	f7fd fad3 	bl	80046c4 <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	429a      	cmp	r2, r3
 8007128:	d302      	bcc.n	8007130 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d11d      	bne.n	800716c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	f003 0304 	and.w	r3, r3, #4
 800713a:	2b04      	cmp	r3, #4
 800713c:	d016      	beq.n	800716c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2220      	movs	r2, #32
 8007148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007158:	f043 0220 	orr.w	r2, r3, #32
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e007      	b.n	800717c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	f003 0304 	and.w	r3, r3, #4
 8007176:	2b04      	cmp	r3, #4
 8007178:	d1c3      	bne.n	8007102 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007190:	e049      	b.n	8007226 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	f003 0310 	and.w	r3, r3, #16
 800719c:	2b10      	cmp	r3, #16
 800719e:	d119      	bne.n	80071d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f06f 0210 	mvn.w	r2, #16
 80071a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2220      	movs	r2, #32
 80071b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e030      	b.n	8007236 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071d4:	f7fd fa76 	bl	80046c4 <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d302      	bcc.n	80071ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d11d      	bne.n	8007226 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f4:	2b40      	cmp	r3, #64	; 0x40
 80071f6:	d016      	beq.n	8007226 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2220      	movs	r2, #32
 8007202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007212:	f043 0220 	orr.w	r2, r3, #32
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e007      	b.n	8007236 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	695b      	ldr	r3, [r3, #20]
 800722c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007230:	2b40      	cmp	r3, #64	; 0x40
 8007232:	d1ae      	bne.n	8007192 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800723e:	b480      	push	{r7}
 8007240:	b083      	sub	sp, #12
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	695b      	ldr	r3, [r3, #20]
 800724c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007254:	d11b      	bne.n	800728e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800725e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2220      	movs	r2, #32
 800726a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727a:	f043 0204 	orr.w	r2, r3, #4
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e000      	b.n	8007290 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	bc80      	pop	{r7}
 8007298:	4770      	bx	lr
	...

0800729c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800729c:	b480      	push	{r7}
 800729e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80072a0:	4b03      	ldr	r3, [pc, #12]	; (80072b0 <HAL_PWR_EnableBkUpAccess+0x14>)
 80072a2:	2201      	movs	r2, #1
 80072a4:	601a      	str	r2, [r3, #0]
}
 80072a6:	bf00      	nop
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bc80      	pop	{r7}
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	420e0020 	.word	0x420e0020

080072b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d101      	bne.n	80072c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e272      	b.n	80077ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f000 8087 	beq.w	80073e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80072d4:	4b92      	ldr	r3, [pc, #584]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	f003 030c 	and.w	r3, r3, #12
 80072dc:	2b04      	cmp	r3, #4
 80072de:	d00c      	beq.n	80072fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80072e0:	4b8f      	ldr	r3, [pc, #572]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	f003 030c 	and.w	r3, r3, #12
 80072e8:	2b08      	cmp	r3, #8
 80072ea:	d112      	bne.n	8007312 <HAL_RCC_OscConfig+0x5e>
 80072ec:	4b8c      	ldr	r3, [pc, #560]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072f8:	d10b      	bne.n	8007312 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072fa:	4b89      	ldr	r3, [pc, #548]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d06c      	beq.n	80073e0 <HAL_RCC_OscConfig+0x12c>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d168      	bne.n	80073e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e24c      	b.n	80077ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800731a:	d106      	bne.n	800732a <HAL_RCC_OscConfig+0x76>
 800731c:	4b80      	ldr	r3, [pc, #512]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a7f      	ldr	r2, [pc, #508]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 8007322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007326:	6013      	str	r3, [r2, #0]
 8007328:	e02e      	b.n	8007388 <HAL_RCC_OscConfig+0xd4>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10c      	bne.n	800734c <HAL_RCC_OscConfig+0x98>
 8007332:	4b7b      	ldr	r3, [pc, #492]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a7a      	ldr	r2, [pc, #488]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 8007338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800733c:	6013      	str	r3, [r2, #0]
 800733e:	4b78      	ldr	r3, [pc, #480]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a77      	ldr	r2, [pc, #476]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 8007344:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007348:	6013      	str	r3, [r2, #0]
 800734a:	e01d      	b.n	8007388 <HAL_RCC_OscConfig+0xd4>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007354:	d10c      	bne.n	8007370 <HAL_RCC_OscConfig+0xbc>
 8007356:	4b72      	ldr	r3, [pc, #456]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a71      	ldr	r2, [pc, #452]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 800735c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007360:	6013      	str	r3, [r2, #0]
 8007362:	4b6f      	ldr	r3, [pc, #444]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a6e      	ldr	r2, [pc, #440]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 8007368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800736c:	6013      	str	r3, [r2, #0]
 800736e:	e00b      	b.n	8007388 <HAL_RCC_OscConfig+0xd4>
 8007370:	4b6b      	ldr	r3, [pc, #428]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a6a      	ldr	r2, [pc, #424]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 8007376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800737a:	6013      	str	r3, [r2, #0]
 800737c:	4b68      	ldr	r3, [pc, #416]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a67      	ldr	r2, [pc, #412]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 8007382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007386:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d013      	beq.n	80073b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007390:	f7fd f998 	bl	80046c4 <HAL_GetTick>
 8007394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007396:	e008      	b.n	80073aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007398:	f7fd f994 	bl	80046c4 <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	2b64      	cmp	r3, #100	; 0x64
 80073a4:	d901      	bls.n	80073aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e200      	b.n	80077ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073aa:	4b5d      	ldr	r3, [pc, #372]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d0f0      	beq.n	8007398 <HAL_RCC_OscConfig+0xe4>
 80073b6:	e014      	b.n	80073e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073b8:	f7fd f984 	bl	80046c4 <HAL_GetTick>
 80073bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073be:	e008      	b.n	80073d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073c0:	f7fd f980 	bl	80046c4 <HAL_GetTick>
 80073c4:	4602      	mov	r2, r0
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	2b64      	cmp	r3, #100	; 0x64
 80073cc:	d901      	bls.n	80073d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e1ec      	b.n	80077ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073d2:	4b53      	ldr	r3, [pc, #332]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1f0      	bne.n	80073c0 <HAL_RCC_OscConfig+0x10c>
 80073de:	e000      	b.n	80073e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d063      	beq.n	80074b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80073ee:	4b4c      	ldr	r3, [pc, #304]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f003 030c 	and.w	r3, r3, #12
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00b      	beq.n	8007412 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80073fa:	4b49      	ldr	r3, [pc, #292]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	f003 030c 	and.w	r3, r3, #12
 8007402:	2b08      	cmp	r3, #8
 8007404:	d11c      	bne.n	8007440 <HAL_RCC_OscConfig+0x18c>
 8007406:	4b46      	ldr	r3, [pc, #280]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d116      	bne.n	8007440 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007412:	4b43      	ldr	r3, [pc, #268]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b00      	cmp	r3, #0
 800741c:	d005      	beq.n	800742a <HAL_RCC_OscConfig+0x176>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d001      	beq.n	800742a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e1c0      	b.n	80077ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800742a:	4b3d      	ldr	r3, [pc, #244]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	00db      	lsls	r3, r3, #3
 8007438:	4939      	ldr	r1, [pc, #228]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 800743a:	4313      	orrs	r3, r2
 800743c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800743e:	e03a      	b.n	80074b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d020      	beq.n	800748a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007448:	4b36      	ldr	r3, [pc, #216]	; (8007524 <HAL_RCC_OscConfig+0x270>)
 800744a:	2201      	movs	r2, #1
 800744c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800744e:	f7fd f939 	bl	80046c4 <HAL_GetTick>
 8007452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007454:	e008      	b.n	8007468 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007456:	f7fd f935 	bl	80046c4 <HAL_GetTick>
 800745a:	4602      	mov	r2, r0
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	2b02      	cmp	r3, #2
 8007462:	d901      	bls.n	8007468 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007464:	2303      	movs	r3, #3
 8007466:	e1a1      	b.n	80077ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007468:	4b2d      	ldr	r3, [pc, #180]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0302 	and.w	r3, r3, #2
 8007470:	2b00      	cmp	r3, #0
 8007472:	d0f0      	beq.n	8007456 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007474:	4b2a      	ldr	r3, [pc, #168]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	695b      	ldr	r3, [r3, #20]
 8007480:	00db      	lsls	r3, r3, #3
 8007482:	4927      	ldr	r1, [pc, #156]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 8007484:	4313      	orrs	r3, r2
 8007486:	600b      	str	r3, [r1, #0]
 8007488:	e015      	b.n	80074b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800748a:	4b26      	ldr	r3, [pc, #152]	; (8007524 <HAL_RCC_OscConfig+0x270>)
 800748c:	2200      	movs	r2, #0
 800748e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007490:	f7fd f918 	bl	80046c4 <HAL_GetTick>
 8007494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007496:	e008      	b.n	80074aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007498:	f7fd f914 	bl	80046c4 <HAL_GetTick>
 800749c:	4602      	mov	r2, r0
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	2b02      	cmp	r3, #2
 80074a4:	d901      	bls.n	80074aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80074a6:	2303      	movs	r3, #3
 80074a8:	e180      	b.n	80077ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074aa:	4b1d      	ldr	r3, [pc, #116]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 0302 	and.w	r3, r3, #2
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d1f0      	bne.n	8007498 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0308 	and.w	r3, r3, #8
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d03a      	beq.n	8007538 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d019      	beq.n	80074fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074ca:	4b17      	ldr	r3, [pc, #92]	; (8007528 <HAL_RCC_OscConfig+0x274>)
 80074cc:	2201      	movs	r2, #1
 80074ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074d0:	f7fd f8f8 	bl	80046c4 <HAL_GetTick>
 80074d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074d6:	e008      	b.n	80074ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074d8:	f7fd f8f4 	bl	80046c4 <HAL_GetTick>
 80074dc:	4602      	mov	r2, r0
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d901      	bls.n	80074ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e160      	b.n	80077ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074ea:	4b0d      	ldr	r3, [pc, #52]	; (8007520 <HAL_RCC_OscConfig+0x26c>)
 80074ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ee:	f003 0302 	and.w	r3, r3, #2
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d0f0      	beq.n	80074d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80074f6:	2001      	movs	r0, #1
 80074f8:	f000 fafe 	bl	8007af8 <RCC_Delay>
 80074fc:	e01c      	b.n	8007538 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074fe:	4b0a      	ldr	r3, [pc, #40]	; (8007528 <HAL_RCC_OscConfig+0x274>)
 8007500:	2200      	movs	r2, #0
 8007502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007504:	f7fd f8de 	bl	80046c4 <HAL_GetTick>
 8007508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800750a:	e00f      	b.n	800752c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800750c:	f7fd f8da 	bl	80046c4 <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	2b02      	cmp	r3, #2
 8007518:	d908      	bls.n	800752c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e146      	b.n	80077ac <HAL_RCC_OscConfig+0x4f8>
 800751e:	bf00      	nop
 8007520:	40021000 	.word	0x40021000
 8007524:	42420000 	.word	0x42420000
 8007528:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800752c:	4b92      	ldr	r3, [pc, #584]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 800752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007530:	f003 0302 	and.w	r3, r3, #2
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1e9      	bne.n	800750c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0304 	and.w	r3, r3, #4
 8007540:	2b00      	cmp	r3, #0
 8007542:	f000 80a6 	beq.w	8007692 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007546:	2300      	movs	r3, #0
 8007548:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800754a:	4b8b      	ldr	r3, [pc, #556]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 800754c:	69db      	ldr	r3, [r3, #28]
 800754e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10d      	bne.n	8007572 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007556:	4b88      	ldr	r3, [pc, #544]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 8007558:	69db      	ldr	r3, [r3, #28]
 800755a:	4a87      	ldr	r2, [pc, #540]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 800755c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007560:	61d3      	str	r3, [r2, #28]
 8007562:	4b85      	ldr	r3, [pc, #532]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 8007564:	69db      	ldr	r3, [r3, #28]
 8007566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800756a:	60bb      	str	r3, [r7, #8]
 800756c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800756e:	2301      	movs	r3, #1
 8007570:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007572:	4b82      	ldr	r3, [pc, #520]	; (800777c <HAL_RCC_OscConfig+0x4c8>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800757a:	2b00      	cmp	r3, #0
 800757c:	d118      	bne.n	80075b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800757e:	4b7f      	ldr	r3, [pc, #508]	; (800777c <HAL_RCC_OscConfig+0x4c8>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a7e      	ldr	r2, [pc, #504]	; (800777c <HAL_RCC_OscConfig+0x4c8>)
 8007584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800758a:	f7fd f89b 	bl	80046c4 <HAL_GetTick>
 800758e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007590:	e008      	b.n	80075a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007592:	f7fd f897 	bl	80046c4 <HAL_GetTick>
 8007596:	4602      	mov	r2, r0
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	2b64      	cmp	r3, #100	; 0x64
 800759e:	d901      	bls.n	80075a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e103      	b.n	80077ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075a4:	4b75      	ldr	r3, [pc, #468]	; (800777c <HAL_RCC_OscConfig+0x4c8>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d0f0      	beq.n	8007592 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d106      	bne.n	80075c6 <HAL_RCC_OscConfig+0x312>
 80075b8:	4b6f      	ldr	r3, [pc, #444]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 80075ba:	6a1b      	ldr	r3, [r3, #32]
 80075bc:	4a6e      	ldr	r2, [pc, #440]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 80075be:	f043 0301 	orr.w	r3, r3, #1
 80075c2:	6213      	str	r3, [r2, #32]
 80075c4:	e02d      	b.n	8007622 <HAL_RCC_OscConfig+0x36e>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10c      	bne.n	80075e8 <HAL_RCC_OscConfig+0x334>
 80075ce:	4b6a      	ldr	r3, [pc, #424]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	4a69      	ldr	r2, [pc, #420]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 80075d4:	f023 0301 	bic.w	r3, r3, #1
 80075d8:	6213      	str	r3, [r2, #32]
 80075da:	4b67      	ldr	r3, [pc, #412]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	4a66      	ldr	r2, [pc, #408]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 80075e0:	f023 0304 	bic.w	r3, r3, #4
 80075e4:	6213      	str	r3, [r2, #32]
 80075e6:	e01c      	b.n	8007622 <HAL_RCC_OscConfig+0x36e>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	2b05      	cmp	r3, #5
 80075ee:	d10c      	bne.n	800760a <HAL_RCC_OscConfig+0x356>
 80075f0:	4b61      	ldr	r3, [pc, #388]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	4a60      	ldr	r2, [pc, #384]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 80075f6:	f043 0304 	orr.w	r3, r3, #4
 80075fa:	6213      	str	r3, [r2, #32]
 80075fc:	4b5e      	ldr	r3, [pc, #376]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 80075fe:	6a1b      	ldr	r3, [r3, #32]
 8007600:	4a5d      	ldr	r2, [pc, #372]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 8007602:	f043 0301 	orr.w	r3, r3, #1
 8007606:	6213      	str	r3, [r2, #32]
 8007608:	e00b      	b.n	8007622 <HAL_RCC_OscConfig+0x36e>
 800760a:	4b5b      	ldr	r3, [pc, #364]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	4a5a      	ldr	r2, [pc, #360]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 8007610:	f023 0301 	bic.w	r3, r3, #1
 8007614:	6213      	str	r3, [r2, #32]
 8007616:	4b58      	ldr	r3, [pc, #352]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	4a57      	ldr	r2, [pc, #348]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 800761c:	f023 0304 	bic.w	r3, r3, #4
 8007620:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d015      	beq.n	8007656 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800762a:	f7fd f84b 	bl	80046c4 <HAL_GetTick>
 800762e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007630:	e00a      	b.n	8007648 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007632:	f7fd f847 	bl	80046c4 <HAL_GetTick>
 8007636:	4602      	mov	r2, r0
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007640:	4293      	cmp	r3, r2
 8007642:	d901      	bls.n	8007648 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007644:	2303      	movs	r3, #3
 8007646:	e0b1      	b.n	80077ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007648:	4b4b      	ldr	r3, [pc, #300]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 800764a:	6a1b      	ldr	r3, [r3, #32]
 800764c:	f003 0302 	and.w	r3, r3, #2
 8007650:	2b00      	cmp	r3, #0
 8007652:	d0ee      	beq.n	8007632 <HAL_RCC_OscConfig+0x37e>
 8007654:	e014      	b.n	8007680 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007656:	f7fd f835 	bl	80046c4 <HAL_GetTick>
 800765a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800765c:	e00a      	b.n	8007674 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800765e:	f7fd f831 	bl	80046c4 <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	f241 3288 	movw	r2, #5000	; 0x1388
 800766c:	4293      	cmp	r3, r2
 800766e:	d901      	bls.n	8007674 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007670:	2303      	movs	r3, #3
 8007672:	e09b      	b.n	80077ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007674:	4b40      	ldr	r3, [pc, #256]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 8007676:	6a1b      	ldr	r3, [r3, #32]
 8007678:	f003 0302 	and.w	r3, r3, #2
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1ee      	bne.n	800765e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007680:	7dfb      	ldrb	r3, [r7, #23]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d105      	bne.n	8007692 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007686:	4b3c      	ldr	r3, [pc, #240]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	4a3b      	ldr	r2, [pc, #236]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 800768c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007690:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	69db      	ldr	r3, [r3, #28]
 8007696:	2b00      	cmp	r3, #0
 8007698:	f000 8087 	beq.w	80077aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800769c:	4b36      	ldr	r3, [pc, #216]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f003 030c 	and.w	r3, r3, #12
 80076a4:	2b08      	cmp	r3, #8
 80076a6:	d061      	beq.n	800776c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	69db      	ldr	r3, [r3, #28]
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d146      	bne.n	800773e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076b0:	4b33      	ldr	r3, [pc, #204]	; (8007780 <HAL_RCC_OscConfig+0x4cc>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076b6:	f7fd f805 	bl	80046c4 <HAL_GetTick>
 80076ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80076bc:	e008      	b.n	80076d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076be:	f7fd f801 	bl	80046c4 <HAL_GetTick>
 80076c2:	4602      	mov	r2, r0
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d901      	bls.n	80076d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e06d      	b.n	80077ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80076d0:	4b29      	ldr	r3, [pc, #164]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1f0      	bne.n	80076be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a1b      	ldr	r3, [r3, #32]
 80076e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076e4:	d108      	bne.n	80076f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80076e6:	4b24      	ldr	r3, [pc, #144]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	4921      	ldr	r1, [pc, #132]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 80076f4:	4313      	orrs	r3, r2
 80076f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80076f8:	4b1f      	ldr	r3, [pc, #124]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a19      	ldr	r1, [r3, #32]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007708:	430b      	orrs	r3, r1
 800770a:	491b      	ldr	r1, [pc, #108]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 800770c:	4313      	orrs	r3, r2
 800770e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007710:	4b1b      	ldr	r3, [pc, #108]	; (8007780 <HAL_RCC_OscConfig+0x4cc>)
 8007712:	2201      	movs	r2, #1
 8007714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007716:	f7fc ffd5 	bl	80046c4 <HAL_GetTick>
 800771a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800771c:	e008      	b.n	8007730 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800771e:	f7fc ffd1 	bl	80046c4 <HAL_GetTick>
 8007722:	4602      	mov	r2, r0
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	2b02      	cmp	r3, #2
 800772a:	d901      	bls.n	8007730 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800772c:	2303      	movs	r3, #3
 800772e:	e03d      	b.n	80077ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007730:	4b11      	ldr	r3, [pc, #68]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d0f0      	beq.n	800771e <HAL_RCC_OscConfig+0x46a>
 800773c:	e035      	b.n	80077aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800773e:	4b10      	ldr	r3, [pc, #64]	; (8007780 <HAL_RCC_OscConfig+0x4cc>)
 8007740:	2200      	movs	r2, #0
 8007742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007744:	f7fc ffbe 	bl	80046c4 <HAL_GetTick>
 8007748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800774a:	e008      	b.n	800775e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800774c:	f7fc ffba 	bl	80046c4 <HAL_GetTick>
 8007750:	4602      	mov	r2, r0
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	2b02      	cmp	r3, #2
 8007758:	d901      	bls.n	800775e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	e026      	b.n	80077ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800775e:	4b06      	ldr	r3, [pc, #24]	; (8007778 <HAL_RCC_OscConfig+0x4c4>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1f0      	bne.n	800774c <HAL_RCC_OscConfig+0x498>
 800776a:	e01e      	b.n	80077aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	69db      	ldr	r3, [r3, #28]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d107      	bne.n	8007784 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e019      	b.n	80077ac <HAL_RCC_OscConfig+0x4f8>
 8007778:	40021000 	.word	0x40021000
 800777c:	40007000 	.word	0x40007000
 8007780:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007784:	4b0b      	ldr	r3, [pc, #44]	; (80077b4 <HAL_RCC_OscConfig+0x500>)
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a1b      	ldr	r3, [r3, #32]
 8007794:	429a      	cmp	r2, r3
 8007796:	d106      	bne.n	80077a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d001      	beq.n	80077aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e000      	b.n	80077ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3718      	adds	r7, #24
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	40021000 	.word	0x40021000

080077b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e0d0      	b.n	800796e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077cc:	4b6a      	ldr	r3, [pc, #424]	; (8007978 <HAL_RCC_ClockConfig+0x1c0>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0307 	and.w	r3, r3, #7
 80077d4:	683a      	ldr	r2, [r7, #0]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d910      	bls.n	80077fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077da:	4b67      	ldr	r3, [pc, #412]	; (8007978 <HAL_RCC_ClockConfig+0x1c0>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f023 0207 	bic.w	r2, r3, #7
 80077e2:	4965      	ldr	r1, [pc, #404]	; (8007978 <HAL_RCC_ClockConfig+0x1c0>)
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ea:	4b63      	ldr	r3, [pc, #396]	; (8007978 <HAL_RCC_ClockConfig+0x1c0>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0307 	and.w	r3, r3, #7
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d001      	beq.n	80077fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e0b8      	b.n	800796e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0302 	and.w	r3, r3, #2
 8007804:	2b00      	cmp	r3, #0
 8007806:	d020      	beq.n	800784a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 0304 	and.w	r3, r3, #4
 8007810:	2b00      	cmp	r3, #0
 8007812:	d005      	beq.n	8007820 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007814:	4b59      	ldr	r3, [pc, #356]	; (800797c <HAL_RCC_ClockConfig+0x1c4>)
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	4a58      	ldr	r2, [pc, #352]	; (800797c <HAL_RCC_ClockConfig+0x1c4>)
 800781a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800781e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 0308 	and.w	r3, r3, #8
 8007828:	2b00      	cmp	r3, #0
 800782a:	d005      	beq.n	8007838 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800782c:	4b53      	ldr	r3, [pc, #332]	; (800797c <HAL_RCC_ClockConfig+0x1c4>)
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	4a52      	ldr	r2, [pc, #328]	; (800797c <HAL_RCC_ClockConfig+0x1c4>)
 8007832:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007836:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007838:	4b50      	ldr	r3, [pc, #320]	; (800797c <HAL_RCC_ClockConfig+0x1c4>)
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	494d      	ldr	r1, [pc, #308]	; (800797c <HAL_RCC_ClockConfig+0x1c4>)
 8007846:	4313      	orrs	r3, r2
 8007848:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	2b00      	cmp	r3, #0
 8007854:	d040      	beq.n	80078d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d107      	bne.n	800786e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800785e:	4b47      	ldr	r3, [pc, #284]	; (800797c <HAL_RCC_ClockConfig+0x1c4>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d115      	bne.n	8007896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e07f      	b.n	800796e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	2b02      	cmp	r3, #2
 8007874:	d107      	bne.n	8007886 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007876:	4b41      	ldr	r3, [pc, #260]	; (800797c <HAL_RCC_ClockConfig+0x1c4>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800787e:	2b00      	cmp	r3, #0
 8007880:	d109      	bne.n	8007896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e073      	b.n	800796e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007886:	4b3d      	ldr	r3, [pc, #244]	; (800797c <HAL_RCC_ClockConfig+0x1c4>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0302 	and.w	r3, r3, #2
 800788e:	2b00      	cmp	r3, #0
 8007890:	d101      	bne.n	8007896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e06b      	b.n	800796e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007896:	4b39      	ldr	r3, [pc, #228]	; (800797c <HAL_RCC_ClockConfig+0x1c4>)
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	f023 0203 	bic.w	r2, r3, #3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	4936      	ldr	r1, [pc, #216]	; (800797c <HAL_RCC_ClockConfig+0x1c4>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078a8:	f7fc ff0c 	bl	80046c4 <HAL_GetTick>
 80078ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078ae:	e00a      	b.n	80078c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078b0:	f7fc ff08 	bl	80046c4 <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80078be:	4293      	cmp	r3, r2
 80078c0:	d901      	bls.n	80078c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078c2:	2303      	movs	r3, #3
 80078c4:	e053      	b.n	800796e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078c6:	4b2d      	ldr	r3, [pc, #180]	; (800797c <HAL_RCC_ClockConfig+0x1c4>)
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	f003 020c 	and.w	r2, r3, #12
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d1eb      	bne.n	80078b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078d8:	4b27      	ldr	r3, [pc, #156]	; (8007978 <HAL_RCC_ClockConfig+0x1c0>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0307 	and.w	r3, r3, #7
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d210      	bcs.n	8007908 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078e6:	4b24      	ldr	r3, [pc, #144]	; (8007978 <HAL_RCC_ClockConfig+0x1c0>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f023 0207 	bic.w	r2, r3, #7
 80078ee:	4922      	ldr	r1, [pc, #136]	; (8007978 <HAL_RCC_ClockConfig+0x1c0>)
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078f6:	4b20      	ldr	r3, [pc, #128]	; (8007978 <HAL_RCC_ClockConfig+0x1c0>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 0307 	and.w	r3, r3, #7
 80078fe:	683a      	ldr	r2, [r7, #0]
 8007900:	429a      	cmp	r2, r3
 8007902:	d001      	beq.n	8007908 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e032      	b.n	800796e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0304 	and.w	r3, r3, #4
 8007910:	2b00      	cmp	r3, #0
 8007912:	d008      	beq.n	8007926 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007914:	4b19      	ldr	r3, [pc, #100]	; (800797c <HAL_RCC_ClockConfig+0x1c4>)
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	4916      	ldr	r1, [pc, #88]	; (800797c <HAL_RCC_ClockConfig+0x1c4>)
 8007922:	4313      	orrs	r3, r2
 8007924:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 0308 	and.w	r3, r3, #8
 800792e:	2b00      	cmp	r3, #0
 8007930:	d009      	beq.n	8007946 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007932:	4b12      	ldr	r3, [pc, #72]	; (800797c <HAL_RCC_ClockConfig+0x1c4>)
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	00db      	lsls	r3, r3, #3
 8007940:	490e      	ldr	r1, [pc, #56]	; (800797c <HAL_RCC_ClockConfig+0x1c4>)
 8007942:	4313      	orrs	r3, r2
 8007944:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007946:	f000 f821 	bl	800798c <HAL_RCC_GetSysClockFreq>
 800794a:	4602      	mov	r2, r0
 800794c:	4b0b      	ldr	r3, [pc, #44]	; (800797c <HAL_RCC_ClockConfig+0x1c4>)
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	091b      	lsrs	r3, r3, #4
 8007952:	f003 030f 	and.w	r3, r3, #15
 8007956:	490a      	ldr	r1, [pc, #40]	; (8007980 <HAL_RCC_ClockConfig+0x1c8>)
 8007958:	5ccb      	ldrb	r3, [r1, r3]
 800795a:	fa22 f303 	lsr.w	r3, r2, r3
 800795e:	4a09      	ldr	r2, [pc, #36]	; (8007984 <HAL_RCC_ClockConfig+0x1cc>)
 8007960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007962:	4b09      	ldr	r3, [pc, #36]	; (8007988 <HAL_RCC_ClockConfig+0x1d0>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4618      	mov	r0, r3
 8007968:	f7fc fc4a 	bl	8004200 <HAL_InitTick>

  return HAL_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	40022000 	.word	0x40022000
 800797c:	40021000 	.word	0x40021000
 8007980:	08011fc4 	.word	0x08011fc4
 8007984:	200000e0 	.word	0x200000e0
 8007988:	200000e4 	.word	0x200000e4

0800798c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800798c:	b480      	push	{r7}
 800798e:	b087      	sub	sp, #28
 8007990:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007992:	2300      	movs	r3, #0
 8007994:	60fb      	str	r3, [r7, #12]
 8007996:	2300      	movs	r3, #0
 8007998:	60bb      	str	r3, [r7, #8]
 800799a:	2300      	movs	r3, #0
 800799c:	617b      	str	r3, [r7, #20]
 800799e:	2300      	movs	r3, #0
 80079a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80079a2:	2300      	movs	r3, #0
 80079a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80079a6:	4b1e      	ldr	r3, [pc, #120]	; (8007a20 <HAL_RCC_GetSysClockFreq+0x94>)
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f003 030c 	and.w	r3, r3, #12
 80079b2:	2b04      	cmp	r3, #4
 80079b4:	d002      	beq.n	80079bc <HAL_RCC_GetSysClockFreq+0x30>
 80079b6:	2b08      	cmp	r3, #8
 80079b8:	d003      	beq.n	80079c2 <HAL_RCC_GetSysClockFreq+0x36>
 80079ba:	e027      	b.n	8007a0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80079bc:	4b19      	ldr	r3, [pc, #100]	; (8007a24 <HAL_RCC_GetSysClockFreq+0x98>)
 80079be:	613b      	str	r3, [r7, #16]
      break;
 80079c0:	e027      	b.n	8007a12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	0c9b      	lsrs	r3, r3, #18
 80079c6:	f003 030f 	and.w	r3, r3, #15
 80079ca:	4a17      	ldr	r2, [pc, #92]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x9c>)
 80079cc:	5cd3      	ldrb	r3, [r2, r3]
 80079ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d010      	beq.n	80079fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80079da:	4b11      	ldr	r3, [pc, #68]	; (8007a20 <HAL_RCC_GetSysClockFreq+0x94>)
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	0c5b      	lsrs	r3, r3, #17
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	4a11      	ldr	r2, [pc, #68]	; (8007a2c <HAL_RCC_GetSysClockFreq+0xa0>)
 80079e6:	5cd3      	ldrb	r3, [r2, r3]
 80079e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a0d      	ldr	r2, [pc, #52]	; (8007a24 <HAL_RCC_GetSysClockFreq+0x98>)
 80079ee:	fb03 f202 	mul.w	r2, r3, r2
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079f8:	617b      	str	r3, [r7, #20]
 80079fa:	e004      	b.n	8007a06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a0c      	ldr	r2, [pc, #48]	; (8007a30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007a00:	fb02 f303 	mul.w	r3, r2, r3
 8007a04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	613b      	str	r3, [r7, #16]
      break;
 8007a0a:	e002      	b.n	8007a12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007a0c:	4b05      	ldr	r3, [pc, #20]	; (8007a24 <HAL_RCC_GetSysClockFreq+0x98>)
 8007a0e:	613b      	str	r3, [r7, #16]
      break;
 8007a10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a12:	693b      	ldr	r3, [r7, #16]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	371c      	adds	r7, #28
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bc80      	pop	{r7}
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	40021000 	.word	0x40021000
 8007a24:	007a1200 	.word	0x007a1200
 8007a28:	08011fdc 	.word	0x08011fdc
 8007a2c:	08011fec 	.word	0x08011fec
 8007a30:	003d0900 	.word	0x003d0900

08007a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a34:	b480      	push	{r7}
 8007a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a38:	4b02      	ldr	r3, [pc, #8]	; (8007a44 <HAL_RCC_GetHCLKFreq+0x10>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bc80      	pop	{r7}
 8007a42:	4770      	bx	lr
 8007a44:	200000e0 	.word	0x200000e0

08007a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007a4c:	f7ff fff2 	bl	8007a34 <HAL_RCC_GetHCLKFreq>
 8007a50:	4602      	mov	r2, r0
 8007a52:	4b05      	ldr	r3, [pc, #20]	; (8007a68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	0a1b      	lsrs	r3, r3, #8
 8007a58:	f003 0307 	and.w	r3, r3, #7
 8007a5c:	4903      	ldr	r1, [pc, #12]	; (8007a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a5e:	5ccb      	ldrb	r3, [r1, r3]
 8007a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	40021000 	.word	0x40021000
 8007a6c:	08011fd4 	.word	0x08011fd4

08007a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007a74:	f7ff ffde 	bl	8007a34 <HAL_RCC_GetHCLKFreq>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	4b05      	ldr	r3, [pc, #20]	; (8007a90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	0adb      	lsrs	r3, r3, #11
 8007a80:	f003 0307 	and.w	r3, r3, #7
 8007a84:	4903      	ldr	r1, [pc, #12]	; (8007a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a86:	5ccb      	ldrb	r3, [r1, r3]
 8007a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	40021000 	.word	0x40021000
 8007a94:	08011fd4 	.word	0x08011fd4

08007a98 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	220f      	movs	r2, #15
 8007aa6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007aa8:	4b11      	ldr	r3, [pc, #68]	; (8007af0 <HAL_RCC_GetClockConfig+0x58>)
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	f003 0203 	and.w	r2, r3, #3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007ab4:	4b0e      	ldr	r3, [pc, #56]	; (8007af0 <HAL_RCC_GetClockConfig+0x58>)
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007ac0:	4b0b      	ldr	r3, [pc, #44]	; (8007af0 <HAL_RCC_GetClockConfig+0x58>)
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007acc:	4b08      	ldr	r3, [pc, #32]	; (8007af0 <HAL_RCC_GetClockConfig+0x58>)
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	08db      	lsrs	r3, r3, #3
 8007ad2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007ada:	4b06      	ldr	r3, [pc, #24]	; (8007af4 <HAL_RCC_GetClockConfig+0x5c>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 0207 	and.w	r2, r3, #7
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8007ae6:	bf00      	nop
 8007ae8:	370c      	adds	r7, #12
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bc80      	pop	{r7}
 8007aee:	4770      	bx	lr
 8007af0:	40021000 	.word	0x40021000
 8007af4:	40022000 	.word	0x40022000

08007af8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007b00:	4b0a      	ldr	r3, [pc, #40]	; (8007b2c <RCC_Delay+0x34>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a0a      	ldr	r2, [pc, #40]	; (8007b30 <RCC_Delay+0x38>)
 8007b06:	fba2 2303 	umull	r2, r3, r2, r3
 8007b0a:	0a5b      	lsrs	r3, r3, #9
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	fb02 f303 	mul.w	r3, r2, r3
 8007b12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007b14:	bf00      	nop
  }
  while (Delay --);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	1e5a      	subs	r2, r3, #1
 8007b1a:	60fa      	str	r2, [r7, #12]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1f9      	bne.n	8007b14 <RCC_Delay+0x1c>
}
 8007b20:	bf00      	nop
 8007b22:	bf00      	nop
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bc80      	pop	{r7}
 8007b2a:	4770      	bx	lr
 8007b2c:	200000e0 	.word	0x200000e0
 8007b30:	10624dd3 	.word	0x10624dd3

08007b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	613b      	str	r3, [r7, #16]
 8007b40:	2300      	movs	r3, #0
 8007b42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0301 	and.w	r3, r3, #1
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d07d      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007b50:	2300      	movs	r3, #0
 8007b52:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b54:	4b4f      	ldr	r3, [pc, #316]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b56:	69db      	ldr	r3, [r3, #28]
 8007b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10d      	bne.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b60:	4b4c      	ldr	r3, [pc, #304]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b62:	69db      	ldr	r3, [r3, #28]
 8007b64:	4a4b      	ldr	r2, [pc, #300]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b6a:	61d3      	str	r3, [r2, #28]
 8007b6c:	4b49      	ldr	r3, [pc, #292]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b6e:	69db      	ldr	r3, [r3, #28]
 8007b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b74:	60bb      	str	r3, [r7, #8]
 8007b76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b7c:	4b46      	ldr	r3, [pc, #280]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d118      	bne.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b88:	4b43      	ldr	r3, [pc, #268]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a42      	ldr	r2, [pc, #264]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b94:	f7fc fd96 	bl	80046c4 <HAL_GetTick>
 8007b98:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b9a:	e008      	b.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b9c:	f7fc fd92 	bl	80046c4 <HAL_GetTick>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	2b64      	cmp	r3, #100	; 0x64
 8007ba8:	d901      	bls.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e06d      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bae:	4b3a      	ldr	r3, [pc, #232]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d0f0      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007bba:	4b36      	ldr	r3, [pc, #216]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bc2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d02e      	beq.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d027      	beq.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007bd8:	4b2e      	ldr	r3, [pc, #184]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bda:	6a1b      	ldr	r3, [r3, #32]
 8007bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007be0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007be2:	4b2e      	ldr	r3, [pc, #184]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007be4:	2201      	movs	r2, #1
 8007be6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007be8:	4b2c      	ldr	r3, [pc, #176]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007bee:	4a29      	ldr	r2, [pc, #164]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d014      	beq.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bfe:	f7fc fd61 	bl	80046c4 <HAL_GetTick>
 8007c02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c04:	e00a      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c06:	f7fc fd5d 	bl	80046c4 <HAL_GetTick>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d901      	bls.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e036      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c1c:	4b1d      	ldr	r3, [pc, #116]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c1e:	6a1b      	ldr	r3, [r3, #32]
 8007c20:	f003 0302 	and.w	r3, r3, #2
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d0ee      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c28:	4b1a      	ldr	r3, [pc, #104]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c2a:	6a1b      	ldr	r3, [r3, #32]
 8007c2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	4917      	ldr	r1, [pc, #92]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007c3a:	7dfb      	ldrb	r3, [r7, #23]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d105      	bne.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c40:	4b14      	ldr	r3, [pc, #80]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c42:	69db      	ldr	r3, [r3, #28]
 8007c44:	4a13      	ldr	r2, [pc, #76]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 0302 	and.w	r3, r3, #2
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d008      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c58:	4b0e      	ldr	r3, [pc, #56]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	490b      	ldr	r1, [pc, #44]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0310 	and.w	r3, r3, #16
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d008      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c76:	4b07      	ldr	r3, [pc, #28]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	695b      	ldr	r3, [r3, #20]
 8007c82:	4904      	ldr	r1, [pc, #16]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c84:	4313      	orrs	r3, r2
 8007c86:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3718      	adds	r7, #24
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	40021000 	.word	0x40021000
 8007c98:	40007000 	.word	0x40007000
 8007c9c:	42420440 	.word	0x42420440

08007ca0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b088      	sub	sp, #32
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	617b      	str	r3, [r7, #20]
 8007cac:	2300      	movs	r3, #0
 8007cae:	61fb      	str	r3, [r7, #28]
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	60fb      	str	r3, [r7, #12]
 8007cb8:	2300      	movs	r3, #0
 8007cba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	2b0f      	cmp	r3, #15
 8007cc2:	f200 80af 	bhi.w	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8007cc6:	a201      	add	r2, pc, #4	; (adr r2, 8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8007cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ccc:	08007da3 	.word	0x08007da3
 8007cd0:	08007e09 	.word	0x08007e09
 8007cd4:	08007e25 	.word	0x08007e25
 8007cd8:	08007d93 	.word	0x08007d93
 8007cdc:	08007e25 	.word	0x08007e25
 8007ce0:	08007e25 	.word	0x08007e25
 8007ce4:	08007e25 	.word	0x08007e25
 8007ce8:	08007d9b 	.word	0x08007d9b
 8007cec:	08007e25 	.word	0x08007e25
 8007cf0:	08007e25 	.word	0x08007e25
 8007cf4:	08007e25 	.word	0x08007e25
 8007cf8:	08007e25 	.word	0x08007e25
 8007cfc:	08007e25 	.word	0x08007e25
 8007d00:	08007e25 	.word	0x08007e25
 8007d04:	08007e25 	.word	0x08007e25
 8007d08:	08007d0d 	.word	0x08007d0d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8007d0c:	4b4a      	ldr	r3, [pc, #296]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007d12:	4b49      	ldr	r3, [pc, #292]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 8084 	beq.w	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	0c9b      	lsrs	r3, r3, #18
 8007d24:	f003 030f 	and.w	r3, r3, #15
 8007d28:	4a44      	ldr	r2, [pc, #272]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8007d2a:	5cd3      	ldrb	r3, [r2, r3]
 8007d2c:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d015      	beq.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007d38:	4b3f      	ldr	r3, [pc, #252]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	0c5b      	lsrs	r3, r3, #17
 8007d3e:	f003 0301 	and.w	r3, r3, #1
 8007d42:	4a3f      	ldr	r2, [pc, #252]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8007d44:	5cd3      	ldrb	r3, [r2, r3]
 8007d46:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00d      	beq.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007d52:	4a3c      	ldr	r2, [pc, #240]	; (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	fb02 f303 	mul.w	r3, r2, r3
 8007d60:	61fb      	str	r3, [r7, #28]
 8007d62:	e004      	b.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	4a38      	ldr	r2, [pc, #224]	; (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8007d68:	fb02 f303 	mul.w	r3, r2, r3
 8007d6c:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007d6e:	4b32      	ldr	r3, [pc, #200]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d7a:	d102      	bne.n	8007d82 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8007d80:	e052      	b.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	005b      	lsls	r3, r3, #1
 8007d86:	4a31      	ldr	r2, [pc, #196]	; (8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8007d88:	fba2 2303 	umull	r2, r3, r2, r3
 8007d8c:	085b      	lsrs	r3, r3, #1
 8007d8e:	61bb      	str	r3, [r7, #24]
      break;
 8007d90:	e04a      	b.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8007d92:	f7ff fdfb 	bl	800798c <HAL_RCC_GetSysClockFreq>
 8007d96:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8007d98:	e049      	b.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8007d9a:	f7ff fdf7 	bl	800798c <HAL_RCC_GetSysClockFreq>
 8007d9e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8007da0:	e045      	b.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8007da2:	4b25      	ldr	r3, [pc, #148]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007da4:	6a1b      	ldr	r3, [r3, #32]
 8007da6:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007db2:	d108      	bne.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f003 0302 	and.w	r3, r3, #2
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d003      	beq.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8007dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dc2:	61bb      	str	r3, [r7, #24]
 8007dc4:	e01f      	b.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dd0:	d109      	bne.n	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007dd2:	4b19      	ldr	r3, [pc, #100]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd6:	f003 0302 	and.w	r3, r3, #2
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d003      	beq.n	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8007dde:	f649 4340 	movw	r3, #40000	; 0x9c40
 8007de2:	61bb      	str	r3, [r7, #24]
 8007de4:	e00f      	b.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007df0:	d11c      	bne.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8007df2:	4b11      	ldr	r3, [pc, #68]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d016      	beq.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8007dfe:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007e02:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8007e04:	e012      	b.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8007e06:	e011      	b.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007e08:	f7ff fe32 	bl	8007a70 <HAL_RCC_GetPCLK2Freq>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	4b0a      	ldr	r3, [pc, #40]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	0b9b      	lsrs	r3, r3, #14
 8007e14:	f003 0303 	and.w	r3, r3, #3
 8007e18:	3301      	adds	r3, #1
 8007e1a:	005b      	lsls	r3, r3, #1
 8007e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e20:	61bb      	str	r3, [r7, #24]
      break;
 8007e22:	e004      	b.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8007e24:	bf00      	nop
 8007e26:	e002      	b.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8007e28:	bf00      	nop
 8007e2a:	e000      	b.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8007e2c:	bf00      	nop
    }
  }
  return (frequency);
 8007e2e:	69bb      	ldr	r3, [r7, #24]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3720      	adds	r7, #32
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	40021000 	.word	0x40021000
 8007e3c:	08011ff0 	.word	0x08011ff0
 8007e40:	08012000 	.word	0x08012000
 8007e44:	007a1200 	.word	0x007a1200
 8007e48:	003d0900 	.word	0x003d0900
 8007e4c:	aaaaaaab 	.word	0xaaaaaaab

08007e50 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d101      	bne.n	8007e66 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e07a      	b.n	8007f5c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	7c5b      	ldrb	r3, [r3, #17]
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d105      	bne.n	8007e7c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f7fb ff28 	bl	8003ccc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2202      	movs	r2, #2
 8007e80:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 faea 	bl	800845c <HAL_RTC_WaitForSynchro>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d004      	beq.n	8007e98 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2204      	movs	r2, #4
 8007e92:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e061      	b.n	8007f5c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fba3 	bl	80085e4 <RTC_EnterInitMode>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d004      	beq.n	8007eae <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2204      	movs	r2, #4
 8007ea8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e056      	b.n	8007f5c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	685a      	ldr	r2, [r3, #4]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f022 0207 	bic.w	r2, r2, #7
 8007ebc:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d005      	beq.n	8007ed2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8007ec6:	4b27      	ldr	r3, [pc, #156]	; (8007f64 <HAL_RTC_Init+0x114>)
 8007ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eca:	4a26      	ldr	r2, [pc, #152]	; (8007f64 <HAL_RTC_Init+0x114>)
 8007ecc:	f023 0301 	bic.w	r3, r3, #1
 8007ed0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8007ed2:	4b24      	ldr	r3, [pc, #144]	; (8007f64 <HAL_RTC_Init+0x114>)
 8007ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	4921      	ldr	r1, [pc, #132]	; (8007f64 <HAL_RTC_Init+0x114>)
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eec:	d003      	beq.n	8007ef6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	e00e      	b.n	8007f14 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8007ef6:	2001      	movs	r0, #1
 8007ef8:	f7ff fed2 	bl	8007ca0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007efc:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d104      	bne.n	8007f0e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2204      	movs	r2, #4
 8007f08:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e026      	b.n	8007f5c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	3b01      	subs	r3, #1
 8007f12:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	0c1a      	lsrs	r2, r3, #16
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f002 020f 	and.w	r2, r2, #15
 8007f20:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	b292      	uxth	r2, r2
 8007f2a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fb81 	bl	8008634 <RTC_ExitInitMode>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d004      	beq.n	8007f42 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2204      	movs	r2, #4
 8007f3c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e00c      	b.n	8007f5c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
  }
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	40006c00 	.word	0x40006c00

08007f68 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007f68:	b590      	push	{r4, r7, lr}
 8007f6a:	b087      	sub	sp, #28
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8007f74:	2300      	movs	r3, #0
 8007f76:	617b      	str	r3, [r7, #20]
 8007f78:	2300      	movs	r3, #0
 8007f7a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d002      	beq.n	8007f88 <HAL_RTC_SetTime+0x20>
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d101      	bne.n	8007f8c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e080      	b.n	800808e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	7c1b      	ldrb	r3, [r3, #16]
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d101      	bne.n	8007f98 <HAL_RTC_SetTime+0x30>
 8007f94:	2302      	movs	r3, #2
 8007f96:	e07a      	b.n	800808e <HAL_RTC_SetTime+0x126>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2202      	movs	r2, #2
 8007fa2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d113      	bne.n	8007fd2 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8007fb4:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	785b      	ldrb	r3, [r3, #1]
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	011b      	lsls	r3, r3, #4
 8007fc2:	1a5b      	subs	r3, r3, r1
 8007fc4:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007fc6:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007fcc:	4413      	add	r3, r2
 8007fce:	617b      	str	r3, [r7, #20]
 8007fd0:	e01e      	b.n	8008010 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f000 fb71 	bl	80086be <RTC_Bcd2ToByte>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	461a      	mov	r2, r3
 8007fe0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8007fe4:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	785b      	ldrb	r3, [r3, #1]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f000 fb66 	bl	80086be <RTC_Bcd2ToByte>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	011b      	lsls	r3, r3, #4
 8007ffa:	1a9b      	subs	r3, r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007ffe:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	789b      	ldrb	r3, [r3, #2]
 8008004:	4618      	mov	r0, r3
 8008006:	f000 fb5a 	bl	80086be <RTC_Bcd2ToByte>
 800800a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800800c:	4423      	add	r3, r4
 800800e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8008010:	6979      	ldr	r1, [r7, #20]
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f000 fa7f 	bl	8008516 <RTC_WriteTimeCounter>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d007      	beq.n	800802e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2204      	movs	r2, #4
 8008022:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2200      	movs	r2, #0
 8008028:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e02f      	b.n	800808e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	685a      	ldr	r2, [r3, #4]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f022 0205 	bic.w	r2, r2, #5
 800803c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f000 fa90 	bl	8008564 <RTC_ReadAlarmCounter>
 8008044:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804c:	d018      	beq.n	8008080 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800804e:	693a      	ldr	r2, [r7, #16]
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	429a      	cmp	r2, r3
 8008054:	d214      	bcs.n	8008080 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800805c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008060:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8008062:	6939      	ldr	r1, [r7, #16]
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f000 fa96 	bl	8008596 <RTC_WriteAlarmCounter>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d007      	beq.n	8008080 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2204      	movs	r2, #4
 8008074:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e006      	b.n	800808e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2201      	movs	r2, #1
 8008084:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800808c:	2300      	movs	r3, #0
  }
}
 800808e:	4618      	mov	r0, r3
 8008090:	371c      	adds	r7, #28
 8008092:	46bd      	mov	sp, r7
 8008094:	bd90      	pop	{r4, r7, pc}
	...

08008098 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b088      	sub	sp, #32
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80080a4:	2300      	movs	r3, #0
 80080a6:	61bb      	str	r3, [r7, #24]
 80080a8:	2300      	movs	r3, #0
 80080aa:	61fb      	str	r3, [r7, #28]
 80080ac:	2300      	movs	r3, #0
 80080ae:	617b      	str	r3, [r7, #20]
 80080b0:	2300      	movs	r3, #0
 80080b2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d002      	beq.n	80080c0 <HAL_RTC_GetTime+0x28>
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d101      	bne.n	80080c4 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e0b5      	b.n	8008230 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	f003 0304 	and.w	r3, r3, #4
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d001      	beq.n	80080d6 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e0ac      	b.n	8008230 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f000 f9ed 	bl	80084b6 <RTC_ReadTimeCounter>
 80080dc:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	4a55      	ldr	r2, [pc, #340]	; (8008238 <HAL_RTC_GetTime+0x1a0>)
 80080e2:	fba2 2303 	umull	r2, r3, r2, r3
 80080e6:	0adb      	lsrs	r3, r3, #11
 80080e8:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80080ea:	69ba      	ldr	r2, [r7, #24]
 80080ec:	4b52      	ldr	r3, [pc, #328]	; (8008238 <HAL_RTC_GetTime+0x1a0>)
 80080ee:	fba3 1302 	umull	r1, r3, r3, r2
 80080f2:	0adb      	lsrs	r3, r3, #11
 80080f4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80080f8:	fb01 f303 	mul.w	r3, r1, r3
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	4a4f      	ldr	r2, [pc, #316]	; (800823c <HAL_RTC_GetTime+0x1a4>)
 8008100:	fba2 2303 	umull	r2, r3, r2, r3
 8008104:	095b      	lsrs	r3, r3, #5
 8008106:	b2da      	uxtb	r2, r3
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	4a4a      	ldr	r2, [pc, #296]	; (8008238 <HAL_RTC_GetTime+0x1a0>)
 8008110:	fba2 1203 	umull	r1, r2, r2, r3
 8008114:	0ad2      	lsrs	r2, r2, #11
 8008116:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800811a:	fb01 f202 	mul.w	r2, r1, r2
 800811e:	1a9a      	subs	r2, r3, r2
 8008120:	4b46      	ldr	r3, [pc, #280]	; (800823c <HAL_RTC_GetTime+0x1a4>)
 8008122:	fba3 1302 	umull	r1, r3, r3, r2
 8008126:	0959      	lsrs	r1, r3, #5
 8008128:	460b      	mov	r3, r1
 800812a:	011b      	lsls	r3, r3, #4
 800812c:	1a5b      	subs	r3, r3, r1
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	1ad1      	subs	r1, r2, r3
 8008132:	b2ca      	uxtb	r2, r1
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	2b17      	cmp	r3, #23
 800813c:	d955      	bls.n	80081ea <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	4a3f      	ldr	r2, [pc, #252]	; (8008240 <HAL_RTC_GetTime+0x1a8>)
 8008142:	fba2 2303 	umull	r2, r3, r2, r3
 8008146:	091b      	lsrs	r3, r3, #4
 8008148:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800814a:	6939      	ldr	r1, [r7, #16]
 800814c:	4b3c      	ldr	r3, [pc, #240]	; (8008240 <HAL_RTC_GetTime+0x1a8>)
 800814e:	fba3 2301 	umull	r2, r3, r3, r1
 8008152:	091a      	lsrs	r2, r3, #4
 8008154:	4613      	mov	r3, r2
 8008156:	005b      	lsls	r3, r3, #1
 8008158:	4413      	add	r3, r2
 800815a:	00db      	lsls	r3, r3, #3
 800815c:	1aca      	subs	r2, r1, r3
 800815e:	b2d2      	uxtb	r2, r2
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f000 f9fd 	bl	8008564 <RTC_ReadAlarmCounter>
 800816a:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008172:	d008      	beq.n	8008186 <HAL_RTC_GetTime+0xee>
 8008174:	69fa      	ldr	r2, [r7, #28]
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	429a      	cmp	r2, r3
 800817a:	d904      	bls.n	8008186 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 800817c:	69fa      	ldr	r2, [r7, #28]
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	61fb      	str	r3, [r7, #28]
 8008184:	e002      	b.n	800818c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8008186:	f04f 33ff 	mov.w	r3, #4294967295
 800818a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	4a2d      	ldr	r2, [pc, #180]	; (8008244 <HAL_RTC_GetTime+0x1ac>)
 8008190:	fb02 f303 	mul.w	r3, r2, r3
 8008194:	69ba      	ldr	r2, [r7, #24]
 8008196:	1ad3      	subs	r3, r2, r3
 8008198:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800819a:	69b9      	ldr	r1, [r7, #24]
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f000 f9ba 	bl	8008516 <RTC_WriteTimeCounter>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e041      	b.n	8008230 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b2:	d00c      	beq.n	80081ce <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80081b4:	69fa      	ldr	r2, [r7, #28]
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	4413      	add	r3, r2
 80081ba:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80081bc:	69f9      	ldr	r1, [r7, #28]
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f000 f9e9 	bl	8008596 <RTC_WriteAlarmCounter>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00a      	beq.n	80081e0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e030      	b.n	8008230 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80081ce:	69f9      	ldr	r1, [r7, #28]
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f000 f9e0 	bl	8008596 <RTC_WriteAlarmCounter>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d001      	beq.n	80081e0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	e027      	b.n	8008230 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80081e0:	6979      	ldr	r1, [r7, #20]
 80081e2:	68f8      	ldr	r0, [r7, #12]
 80081e4:	f000 fa88 	bl	80086f8 <RTC_DateUpdate>
 80081e8:	e003      	b.n	80081f2 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	b2da      	uxtb	r2, r3
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d01a      	beq.n	800822e <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f000 fa41 	bl	8008684 <RTC_ByteToBcd2>
 8008202:	4603      	mov	r3, r0
 8008204:	461a      	mov	r2, r3
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	785b      	ldrb	r3, [r3, #1]
 800820e:	4618      	mov	r0, r3
 8008210:	f000 fa38 	bl	8008684 <RTC_ByteToBcd2>
 8008214:	4603      	mov	r3, r0
 8008216:	461a      	mov	r2, r3
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	789b      	ldrb	r3, [r3, #2]
 8008220:	4618      	mov	r0, r3
 8008222:	f000 fa2f 	bl	8008684 <RTC_ByteToBcd2>
 8008226:	4603      	mov	r3, r0
 8008228:	461a      	mov	r2, r3
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3720      	adds	r7, #32
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	91a2b3c5 	.word	0x91a2b3c5
 800823c:	88888889 	.word	0x88888889
 8008240:	aaaaaaab 	.word	0xaaaaaaab
 8008244:	00015180 	.word	0x00015180

08008248 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b088      	sub	sp, #32
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8008254:	2300      	movs	r3, #0
 8008256:	61fb      	str	r3, [r7, #28]
 8008258:	2300      	movs	r3, #0
 800825a:	61bb      	str	r3, [r7, #24]
 800825c:	2300      	movs	r3, #0
 800825e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d002      	beq.n	800826c <HAL_RTC_SetDate+0x24>
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d101      	bne.n	8008270 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	e097      	b.n	80083a0 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	7c1b      	ldrb	r3, [r3, #16]
 8008274:	2b01      	cmp	r3, #1
 8008276:	d101      	bne.n	800827c <HAL_RTC_SetDate+0x34>
 8008278:	2302      	movs	r3, #2
 800827a:	e091      	b.n	80083a0 <HAL_RTC_SetDate+0x158>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2201      	movs	r2, #1
 8008280:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2202      	movs	r2, #2
 8008286:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10c      	bne.n	80082a8 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	78da      	ldrb	r2, [r3, #3]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	785a      	ldrb	r2, [r3, #1]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	789a      	ldrb	r2, [r3, #2]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	739a      	strb	r2, [r3, #14]
 80082a6:	e01a      	b.n	80082de <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	78db      	ldrb	r3, [r3, #3]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f000 fa06 	bl	80086be <RTC_Bcd2ToByte>
 80082b2:	4603      	mov	r3, r0
 80082b4:	461a      	mov	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	785b      	ldrb	r3, [r3, #1]
 80082be:	4618      	mov	r0, r3
 80082c0:	f000 f9fd 	bl	80086be <RTC_Bcd2ToByte>
 80082c4:	4603      	mov	r3, r0
 80082c6:	461a      	mov	r2, r3
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	789b      	ldrb	r3, [r3, #2]
 80082d0:	4618      	mov	r0, r3
 80082d2:	f000 f9f4 	bl	80086be <RTC_Bcd2ToByte>
 80082d6:	4603      	mov	r3, r0
 80082d8:	461a      	mov	r2, r3
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	7bdb      	ldrb	r3, [r3, #15]
 80082e2:	4618      	mov	r0, r3
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	7b59      	ldrb	r1, [r3, #13]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	7b9b      	ldrb	r3, [r3, #14]
 80082ec:	461a      	mov	r2, r3
 80082ee:	f000 fadf 	bl	80088b0 <RTC_WeekDayNum>
 80082f2:	4603      	mov	r3, r0
 80082f4:	461a      	mov	r2, r3
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	7b1a      	ldrb	r2, [r3, #12]
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f000 f8d7 	bl	80084b6 <RTC_ReadTimeCounter>
 8008308:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	4a26      	ldr	r2, [pc, #152]	; (80083a8 <HAL_RTC_SetDate+0x160>)
 800830e:	fba2 2303 	umull	r2, r3, r2, r3
 8008312:	0adb      	lsrs	r3, r3, #11
 8008314:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	2b18      	cmp	r3, #24
 800831a:	d93a      	bls.n	8008392 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	4a23      	ldr	r2, [pc, #140]	; (80083ac <HAL_RTC_SetDate+0x164>)
 8008320:	fba2 2303 	umull	r2, r3, r2, r3
 8008324:	091b      	lsrs	r3, r3, #4
 8008326:	4a22      	ldr	r2, [pc, #136]	; (80083b0 <HAL_RTC_SetDate+0x168>)
 8008328:	fb02 f303 	mul.w	r3, r2, r3
 800832c:	69fa      	ldr	r2, [r7, #28]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8008332:	69f9      	ldr	r1, [r7, #28]
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f000 f8ee 	bl	8008516 <RTC_WriteTimeCounter>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d007      	beq.n	8008350 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2204      	movs	r2, #4
 8008344:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e027      	b.n	80083a0 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f000 f907 	bl	8008564 <RTC_ReadAlarmCounter>
 8008356:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800835e:	d018      	beq.n	8008392 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8008360:	69ba      	ldr	r2, [r7, #24]
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	429a      	cmp	r2, r3
 8008366:	d214      	bcs.n	8008392 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800836e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008372:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8008374:	69b9      	ldr	r1, [r7, #24]
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f000 f90d 	bl	8008596 <RTC_WriteAlarmCounter>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d007      	beq.n	8008392 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2204      	movs	r2, #4
 8008386:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e006      	b.n	80083a0 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2201      	movs	r2, #1
 8008396:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3720      	adds	r7, #32
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	91a2b3c5 	.word	0x91a2b3c5
 80083ac:	aaaaaaab 	.word	0xaaaaaaab
 80083b0:	00015180 	.word	0x00015180

080083b4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b086      	sub	sp, #24
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80083c0:	f107 0314 	add.w	r3, r7, #20
 80083c4:	2100      	movs	r1, #0
 80083c6:	460a      	mov	r2, r1
 80083c8:	801a      	strh	r2, [r3, #0]
 80083ca:	460a      	mov	r2, r1
 80083cc:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d002      	beq.n	80083da <HAL_RTC_GetDate+0x26>
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d101      	bne.n	80083de <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e03a      	b.n	8008454 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80083de:	f107 0314 	add.w	r3, r7, #20
 80083e2:	2200      	movs	r2, #0
 80083e4:	4619      	mov	r1, r3
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f7ff fe56 	bl	8008098 <HAL_RTC_GetTime>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d001      	beq.n	80083f6 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	e02e      	b.n	8008454 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	7b1a      	ldrb	r2, [r3, #12]
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	7bda      	ldrb	r2, [r3, #15]
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	7b5a      	ldrb	r2, [r3, #13]
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	7b9a      	ldrb	r2, [r3, #14]
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d01a      	beq.n	8008452 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	78db      	ldrb	r3, [r3, #3]
 8008420:	4618      	mov	r0, r3
 8008422:	f000 f92f 	bl	8008684 <RTC_ByteToBcd2>
 8008426:	4603      	mov	r3, r0
 8008428:	461a      	mov	r2, r3
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	785b      	ldrb	r3, [r3, #1]
 8008432:	4618      	mov	r0, r3
 8008434:	f000 f926 	bl	8008684 <RTC_ByteToBcd2>
 8008438:	4603      	mov	r3, r0
 800843a:	461a      	mov	r2, r3
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	789b      	ldrb	r3, [r3, #2]
 8008444:	4618      	mov	r0, r3
 8008446:	f000 f91d 	bl	8008684 <RTC_ByteToBcd2>
 800844a:	4603      	mov	r3, r0
 800844c:	461a      	mov	r2, r3
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3718      	adds	r7, #24
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008464:	2300      	movs	r3, #0
 8008466:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d101      	bne.n	8008472 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e01d      	b.n	80084ae <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	685a      	ldr	r2, [r3, #4]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f022 0208 	bic.w	r2, r2, #8
 8008480:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8008482:	f7fc f91f 	bl	80046c4 <HAL_GetTick>
 8008486:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8008488:	e009      	b.n	800849e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800848a:	f7fc f91b 	bl	80046c4 <HAL_GetTick>
 800848e:	4602      	mov	r2, r0
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	1ad3      	subs	r3, r2, r3
 8008494:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008498:	d901      	bls.n	800849e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	e007      	b.n	80084ae <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	f003 0308 	and.w	r3, r3, #8
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d0ee      	beq.n	800848a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80084b6:	b480      	push	{r7}
 80084b8:	b087      	sub	sp, #28
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80084be:	2300      	movs	r3, #0
 80084c0:	827b      	strh	r3, [r7, #18]
 80084c2:	2300      	movs	r3, #0
 80084c4:	823b      	strh	r3, [r7, #16]
 80084c6:	2300      	movs	r3, #0
 80084c8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80084ca:	2300      	movs	r3, #0
 80084cc:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	69db      	ldr	r3, [r3, #28]
 80084dc:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	699b      	ldr	r3, [r3, #24]
 80084e4:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80084e6:	8a7a      	ldrh	r2, [r7, #18]
 80084e8:	8a3b      	ldrh	r3, [r7, #16]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d008      	beq.n	8008500 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80084ee:	8a3b      	ldrh	r3, [r7, #16]
 80084f0:	041a      	lsls	r2, r3, #16
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	69db      	ldr	r3, [r3, #28]
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	4313      	orrs	r3, r2
 80084fc:	617b      	str	r3, [r7, #20]
 80084fe:	e004      	b.n	800850a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8008500:	8a7b      	ldrh	r3, [r7, #18]
 8008502:	041a      	lsls	r2, r3, #16
 8008504:	89fb      	ldrh	r3, [r7, #14]
 8008506:	4313      	orrs	r3, r2
 8008508:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800850a:	697b      	ldr	r3, [r7, #20]
}
 800850c:	4618      	mov	r0, r3
 800850e:	371c      	adds	r7, #28
 8008510:	46bd      	mov	sp, r7
 8008512:	bc80      	pop	{r7}
 8008514:	4770      	bx	lr

08008516 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008520:	2300      	movs	r3, #0
 8008522:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f85d 	bl	80085e4 <RTC_EnterInitMode>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d002      	beq.n	8008536 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	73fb      	strb	r3, [r7, #15]
 8008534:	e011      	b.n	800855a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	683a      	ldr	r2, [r7, #0]
 800853c:	0c12      	lsrs	r2, r2, #16
 800853e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	683a      	ldr	r2, [r7, #0]
 8008546:	b292      	uxth	r2, r2
 8008548:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f872 	bl	8008634 <RTC_ExitInitMode>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800855a:	7bfb      	ldrb	r3, [r7, #15]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800856c:	2300      	movs	r3, #0
 800856e:	81fb      	strh	r3, [r7, #14]
 8008570:	2300      	movs	r3, #0
 8008572:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008582:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8008584:	89fb      	ldrh	r3, [r7, #14]
 8008586:	041a      	lsls	r2, r3, #16
 8008588:	89bb      	ldrh	r3, [r7, #12]
 800858a:	4313      	orrs	r3, r2
}
 800858c:	4618      	mov	r0, r3
 800858e:	3714      	adds	r7, #20
 8008590:	46bd      	mov	sp, r7
 8008592:	bc80      	pop	{r7}
 8008594:	4770      	bx	lr

08008596 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b084      	sub	sp, #16
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f81d 	bl	80085e4 <RTC_EnterInitMode>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d002      	beq.n	80085b6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	73fb      	strb	r3, [r7, #15]
 80085b4:	e011      	b.n	80085da <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	0c12      	lsrs	r2, r2, #16
 80085be:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	b292      	uxth	r2, r2
 80085c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 f832 	bl	8008634 <RTC_ExitInitMode>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d001      	beq.n	80085da <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80085da:	7bfb      	ldrb	r3, [r7, #15]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80085ec:	2300      	movs	r3, #0
 80085ee:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80085f0:	f7fc f868 	bl	80046c4 <HAL_GetTick>
 80085f4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80085f6:	e009      	b.n	800860c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80085f8:	f7fc f864 	bl	80046c4 <HAL_GetTick>
 80085fc:	4602      	mov	r2, r0
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008606:	d901      	bls.n	800860c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8008608:	2303      	movs	r3, #3
 800860a:	e00f      	b.n	800862c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	f003 0320 	and.w	r3, r3, #32
 8008616:	2b00      	cmp	r3, #0
 8008618:	d0ee      	beq.n	80085f8 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	685a      	ldr	r2, [r3, #4]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f042 0210 	orr.w	r2, r2, #16
 8008628:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800863c:	2300      	movs	r3, #0
 800863e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	685a      	ldr	r2, [r3, #4]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f022 0210 	bic.w	r2, r2, #16
 800864e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8008650:	f7fc f838 	bl	80046c4 <HAL_GetTick>
 8008654:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008656:	e009      	b.n	800866c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008658:	f7fc f834 	bl	80046c4 <HAL_GetTick>
 800865c:	4602      	mov	r2, r0
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008666:	d901      	bls.n	800866c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8008668:	2303      	movs	r3, #3
 800866a:	e007      	b.n	800867c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	f003 0320 	and.w	r3, r3, #32
 8008676:	2b00      	cmp	r3, #0
 8008678:	d0ee      	beq.n	8008658 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	4603      	mov	r3, r0
 800868c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800868e:	2300      	movs	r3, #0
 8008690:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8008692:	e005      	b.n	80086a0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	3301      	adds	r3, #1
 8008698:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800869a:	79fb      	ldrb	r3, [r7, #7]
 800869c:	3b0a      	subs	r3, #10
 800869e:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80086a0:	79fb      	ldrb	r3, [r7, #7]
 80086a2:	2b09      	cmp	r3, #9
 80086a4:	d8f6      	bhi.n	8008694 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	011b      	lsls	r3, r3, #4
 80086ac:	b2da      	uxtb	r2, r3
 80086ae:	79fb      	ldrb	r3, [r7, #7]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	b2db      	uxtb	r3, r3
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3714      	adds	r7, #20
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bc80      	pop	{r7}
 80086bc:	4770      	bx	lr

080086be <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80086be:	b480      	push	{r7}
 80086c0:	b085      	sub	sp, #20
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	4603      	mov	r3, r0
 80086c6:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80086c8:	2300      	movs	r3, #0
 80086ca:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80086cc:	79fb      	ldrb	r3, [r7, #7]
 80086ce:	091b      	lsrs	r3, r3, #4
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	461a      	mov	r2, r3
 80086d4:	4613      	mov	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	4413      	add	r3, r2
 80086da:	005b      	lsls	r3, r3, #1
 80086dc:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80086de:	79fb      	ldrb	r3, [r7, #7]
 80086e0:	f003 030f 	and.w	r3, r3, #15
 80086e4:	b2da      	uxtb	r2, r3
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	4413      	add	r3, r2
 80086ec:	b2db      	uxtb	r3, r3
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bc80      	pop	{r7}
 80086f6:	4770      	bx	lr

080086f8 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8008702:	2300      	movs	r3, #0
 8008704:	617b      	str	r3, [r7, #20]
 8008706:	2300      	movs	r3, #0
 8008708:	613b      	str	r3, [r7, #16]
 800870a:	2300      	movs	r3, #0
 800870c:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800870e:	2300      	movs	r3, #0
 8008710:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	7bdb      	ldrb	r3, [r3, #15]
 8008716:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	7b5b      	ldrb	r3, [r3, #13]
 800871c:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	7b9b      	ldrb	r3, [r3, #14]
 8008722:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8008724:	2300      	movs	r3, #0
 8008726:	60bb      	str	r3, [r7, #8]
 8008728:	e06f      	b.n	800880a <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d011      	beq.n	8008754 <RTC_DateUpdate+0x5c>
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	2b03      	cmp	r3, #3
 8008734:	d00e      	beq.n	8008754 <RTC_DateUpdate+0x5c>
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	2b05      	cmp	r3, #5
 800873a:	d00b      	beq.n	8008754 <RTC_DateUpdate+0x5c>
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	2b07      	cmp	r3, #7
 8008740:	d008      	beq.n	8008754 <RTC_DateUpdate+0x5c>
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	2b08      	cmp	r3, #8
 8008746:	d005      	beq.n	8008754 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	2b0a      	cmp	r3, #10
 800874c:	d002      	beq.n	8008754 <RTC_DateUpdate+0x5c>
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	2b0c      	cmp	r3, #12
 8008752:	d117      	bne.n	8008784 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2b1e      	cmp	r3, #30
 8008758:	d803      	bhi.n	8008762 <RTC_DateUpdate+0x6a>
      {
        day++;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	3301      	adds	r3, #1
 800875e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8008760:	e050      	b.n	8008804 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	2b0c      	cmp	r3, #12
 8008766:	d005      	beq.n	8008774 <RTC_DateUpdate+0x7c>
        {
          month++;
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	3301      	adds	r3, #1
 800876c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800876e:	2301      	movs	r3, #1
 8008770:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8008772:	e047      	b.n	8008804 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8008774:	2301      	movs	r3, #1
 8008776:	613b      	str	r3, [r7, #16]
          day = 1U;
 8008778:	2301      	movs	r3, #1
 800877a:	60fb      	str	r3, [r7, #12]
          year++;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	3301      	adds	r3, #1
 8008780:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8008782:	e03f      	b.n	8008804 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	2b04      	cmp	r3, #4
 8008788:	d008      	beq.n	800879c <RTC_DateUpdate+0xa4>
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	2b06      	cmp	r3, #6
 800878e:	d005      	beq.n	800879c <RTC_DateUpdate+0xa4>
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	2b09      	cmp	r3, #9
 8008794:	d002      	beq.n	800879c <RTC_DateUpdate+0xa4>
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	2b0b      	cmp	r3, #11
 800879a:	d10c      	bne.n	80087b6 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2b1d      	cmp	r3, #29
 80087a0:	d803      	bhi.n	80087aa <RTC_DateUpdate+0xb2>
      {
        day++;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	3301      	adds	r3, #1
 80087a6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80087a8:	e02c      	b.n	8008804 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	3301      	adds	r3, #1
 80087ae:	613b      	str	r3, [r7, #16]
        day = 1U;
 80087b0:	2301      	movs	r3, #1
 80087b2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80087b4:	e026      	b.n	8008804 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	d123      	bne.n	8008804 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2b1b      	cmp	r3, #27
 80087c0:	d803      	bhi.n	80087ca <RTC_DateUpdate+0xd2>
      {
        day++;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	3301      	adds	r3, #1
 80087c6:	60fb      	str	r3, [r7, #12]
 80087c8:	e01c      	b.n	8008804 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2b1c      	cmp	r3, #28
 80087ce:	d111      	bne.n	80087f4 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 f839 	bl	800884c <RTC_IsLeapYear>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d003      	beq.n	80087e8 <RTC_DateUpdate+0xf0>
        {
          day++;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	3301      	adds	r3, #1
 80087e4:	60fb      	str	r3, [r7, #12]
 80087e6:	e00d      	b.n	8008804 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	3301      	adds	r3, #1
 80087ec:	613b      	str	r3, [r7, #16]
          day = 1U;
 80087ee:	2301      	movs	r3, #1
 80087f0:	60fb      	str	r3, [r7, #12]
 80087f2:	e007      	b.n	8008804 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2b1d      	cmp	r3, #29
 80087f8:	d104      	bne.n	8008804 <RTC_DateUpdate+0x10c>
      {
        month++;
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	3301      	adds	r3, #1
 80087fe:	613b      	str	r3, [r7, #16]
        day = 1U;
 8008800:	2301      	movs	r3, #1
 8008802:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	3301      	adds	r3, #1
 8008808:	60bb      	str	r3, [r7, #8]
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	429a      	cmp	r2, r3
 8008810:	d38b      	bcc.n	800872a <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	b2da      	uxtb	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	b2da      	uxtb	r2, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	b2da      	uxtb	r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	b2db      	uxtb	r3, r3
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	b2d2      	uxtb	r2, r2
 8008832:	4619      	mov	r1, r3
 8008834:	6978      	ldr	r0, [r7, #20]
 8008836:	f000 f83b 	bl	80088b0 <RTC_WeekDayNum>
 800883a:	4603      	mov	r3, r0
 800883c:	461a      	mov	r2, r3
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	731a      	strb	r2, [r3, #12]
}
 8008842:	bf00      	nop
 8008844:	3718      	adds	r7, #24
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
	...

0800884c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	4603      	mov	r3, r0
 8008854:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8008856:	88fb      	ldrh	r3, [r7, #6]
 8008858:	f003 0303 	and.w	r3, r3, #3
 800885c:	b29b      	uxth	r3, r3
 800885e:	2b00      	cmp	r3, #0
 8008860:	d001      	beq.n	8008866 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8008862:	2300      	movs	r3, #0
 8008864:	e01d      	b.n	80088a2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8008866:	88fb      	ldrh	r3, [r7, #6]
 8008868:	4a10      	ldr	r2, [pc, #64]	; (80088ac <RTC_IsLeapYear+0x60>)
 800886a:	fba2 1203 	umull	r1, r2, r2, r3
 800886e:	0952      	lsrs	r2, r2, #5
 8008870:	2164      	movs	r1, #100	; 0x64
 8008872:	fb01 f202 	mul.w	r2, r1, r2
 8008876:	1a9b      	subs	r3, r3, r2
 8008878:	b29b      	uxth	r3, r3
 800887a:	2b00      	cmp	r3, #0
 800887c:	d001      	beq.n	8008882 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800887e:	2301      	movs	r3, #1
 8008880:	e00f      	b.n	80088a2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8008882:	88fb      	ldrh	r3, [r7, #6]
 8008884:	4a09      	ldr	r2, [pc, #36]	; (80088ac <RTC_IsLeapYear+0x60>)
 8008886:	fba2 1203 	umull	r1, r2, r2, r3
 800888a:	09d2      	lsrs	r2, r2, #7
 800888c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008890:	fb01 f202 	mul.w	r2, r1, r2
 8008894:	1a9b      	subs	r3, r3, r2
 8008896:	b29b      	uxth	r3, r3
 8008898:	2b00      	cmp	r3, #0
 800889a:	d101      	bne.n	80088a0 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 800889c:	2301      	movs	r3, #1
 800889e:	e000      	b.n	80088a2 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80088a0:	2300      	movs	r3, #0
  }
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	370c      	adds	r7, #12
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bc80      	pop	{r7}
 80088aa:	4770      	bx	lr
 80088ac:	51eb851f 	.word	0x51eb851f

080088b0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b085      	sub	sp, #20
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	460b      	mov	r3, r1
 80088ba:	70fb      	strb	r3, [r7, #3]
 80088bc:	4613      	mov	r3, r2
 80088be:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80088c0:	2300      	movs	r3, #0
 80088c2:	60bb      	str	r3, [r7, #8]
 80088c4:	2300      	movs	r3, #0
 80088c6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80088ce:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80088d0:	78fb      	ldrb	r3, [r7, #3]
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d82d      	bhi.n	8008932 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80088d6:	78fa      	ldrb	r2, [r7, #3]
 80088d8:	4613      	mov	r3, r2
 80088da:	005b      	lsls	r3, r3, #1
 80088dc:	4413      	add	r3, r2
 80088de:	00db      	lsls	r3, r3, #3
 80088e0:	1a9b      	subs	r3, r3, r2
 80088e2:	4a2c      	ldr	r2, [pc, #176]	; (8008994 <RTC_WeekDayNum+0xe4>)
 80088e4:	fba2 2303 	umull	r2, r3, r2, r3
 80088e8:	085a      	lsrs	r2, r3, #1
 80088ea:	78bb      	ldrb	r3, [r7, #2]
 80088ec:	441a      	add	r2, r3
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	441a      	add	r2, r3
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	3b01      	subs	r3, #1
 80088f6:	089b      	lsrs	r3, r3, #2
 80088f8:	441a      	add	r2, r3
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	3b01      	subs	r3, #1
 80088fe:	4926      	ldr	r1, [pc, #152]	; (8008998 <RTC_WeekDayNum+0xe8>)
 8008900:	fba1 1303 	umull	r1, r3, r1, r3
 8008904:	095b      	lsrs	r3, r3, #5
 8008906:	1ad2      	subs	r2, r2, r3
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	3b01      	subs	r3, #1
 800890c:	4922      	ldr	r1, [pc, #136]	; (8008998 <RTC_WeekDayNum+0xe8>)
 800890e:	fba1 1303 	umull	r1, r3, r1, r3
 8008912:	09db      	lsrs	r3, r3, #7
 8008914:	4413      	add	r3, r2
 8008916:	1d1a      	adds	r2, r3, #4
 8008918:	4b20      	ldr	r3, [pc, #128]	; (800899c <RTC_WeekDayNum+0xec>)
 800891a:	fba3 1302 	umull	r1, r3, r3, r2
 800891e:	1ad1      	subs	r1, r2, r3
 8008920:	0849      	lsrs	r1, r1, #1
 8008922:	440b      	add	r3, r1
 8008924:	0899      	lsrs	r1, r3, #2
 8008926:	460b      	mov	r3, r1
 8008928:	00db      	lsls	r3, r3, #3
 800892a:	1a5b      	subs	r3, r3, r1
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	60fb      	str	r3, [r7, #12]
 8008930:	e029      	b.n	8008986 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8008932:	78fa      	ldrb	r2, [r7, #3]
 8008934:	4613      	mov	r3, r2
 8008936:	005b      	lsls	r3, r3, #1
 8008938:	4413      	add	r3, r2
 800893a:	00db      	lsls	r3, r3, #3
 800893c:	1a9b      	subs	r3, r3, r2
 800893e:	4a15      	ldr	r2, [pc, #84]	; (8008994 <RTC_WeekDayNum+0xe4>)
 8008940:	fba2 2303 	umull	r2, r3, r2, r3
 8008944:	085a      	lsrs	r2, r3, #1
 8008946:	78bb      	ldrb	r3, [r7, #2]
 8008948:	441a      	add	r2, r3
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	441a      	add	r2, r3
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	089b      	lsrs	r3, r3, #2
 8008952:	441a      	add	r2, r3
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	4910      	ldr	r1, [pc, #64]	; (8008998 <RTC_WeekDayNum+0xe8>)
 8008958:	fba1 1303 	umull	r1, r3, r1, r3
 800895c:	095b      	lsrs	r3, r3, #5
 800895e:	1ad2      	subs	r2, r2, r3
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	490d      	ldr	r1, [pc, #52]	; (8008998 <RTC_WeekDayNum+0xe8>)
 8008964:	fba1 1303 	umull	r1, r3, r1, r3
 8008968:	09db      	lsrs	r3, r3, #7
 800896a:	4413      	add	r3, r2
 800896c:	1c9a      	adds	r2, r3, #2
 800896e:	4b0b      	ldr	r3, [pc, #44]	; (800899c <RTC_WeekDayNum+0xec>)
 8008970:	fba3 1302 	umull	r1, r3, r3, r2
 8008974:	1ad1      	subs	r1, r2, r3
 8008976:	0849      	lsrs	r1, r1, #1
 8008978:	440b      	add	r3, r1
 800897a:	0899      	lsrs	r1, r3, #2
 800897c:	460b      	mov	r3, r1
 800897e:	00db      	lsls	r3, r3, #3
 8008980:	1a5b      	subs	r3, r3, r1
 8008982:	1ad3      	subs	r3, r2, r3
 8008984:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	b2db      	uxtb	r3, r3
}
 800898a:	4618      	mov	r0, r3
 800898c:	3714      	adds	r7, #20
 800898e:	46bd      	mov	sp, r7
 8008990:	bc80      	pop	{r7}
 8008992:	4770      	bx	lr
 8008994:	38e38e39 	.word	0x38e38e39
 8008998:	51eb851f 	.word	0x51eb851f
 800899c:	24924925 	.word	0x24924925

080089a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d101      	bne.n	80089b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	e076      	b.n	8008aa0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d108      	bne.n	80089cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089c2:	d009      	beq.n	80089d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	61da      	str	r2, [r3, #28]
 80089ca:	e005      	b.n	80089d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d106      	bne.n	80089f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f7fb fb82 	bl	80040fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2202      	movs	r2, #2
 80089fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008a20:	431a      	orrs	r2, r3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a2a:	431a      	orrs	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	f003 0302 	and.w	r3, r3, #2
 8008a34:	431a      	orrs	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	695b      	ldr	r3, [r3, #20]
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	431a      	orrs	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a48:	431a      	orrs	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	69db      	ldr	r3, [r3, #28]
 8008a4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a52:	431a      	orrs	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a1b      	ldr	r3, [r3, #32]
 8008a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a5c:	ea42 0103 	orr.w	r1, r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	430a      	orrs	r2, r1
 8008a6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	0c1a      	lsrs	r2, r3, #16
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f002 0204 	and.w	r2, r2, #4
 8008a7e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	69da      	ldr	r2, [r3, #28]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a8e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b088      	sub	sp, #32
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	603b      	str	r3, [r7, #0]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d101      	bne.n	8008aca <HAL_SPI_Transmit+0x22>
 8008ac6:	2302      	movs	r3, #2
 8008ac8:	e12d      	b.n	8008d26 <HAL_SPI_Transmit+0x27e>
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2201      	movs	r2, #1
 8008ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ad2:	f7fb fdf7 	bl	80046c4 <HAL_GetTick>
 8008ad6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008ad8:	88fb      	ldrh	r3, [r7, #6]
 8008ada:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d002      	beq.n	8008aee <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008ae8:	2302      	movs	r3, #2
 8008aea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008aec:	e116      	b.n	8008d1c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d002      	beq.n	8008afa <HAL_SPI_Transmit+0x52>
 8008af4:	88fb      	ldrh	r3, [r7, #6]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d102      	bne.n	8008b00 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008afe:	e10d      	b.n	8008d1c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2203      	movs	r2, #3
 8008b04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	88fa      	ldrh	r2, [r7, #6]
 8008b18:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	88fa      	ldrh	r2, [r7, #6]
 8008b1e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b46:	d10f      	bne.n	8008b68 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b56:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b66:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b72:	2b40      	cmp	r3, #64	; 0x40
 8008b74:	d007      	beq.n	8008b86 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b8e:	d14f      	bne.n	8008c30 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d002      	beq.n	8008b9e <HAL_SPI_Transmit+0xf6>
 8008b98:	8afb      	ldrh	r3, [r7, #22]
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d142      	bne.n	8008c24 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba2:	881a      	ldrh	r2, [r3, #0]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bae:	1c9a      	adds	r2, r3, #2
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008bc2:	e02f      	b.n	8008c24 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	f003 0302 	and.w	r3, r3, #2
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d112      	bne.n	8008bf8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd6:	881a      	ldrh	r2, [r3, #0]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be2:	1c9a      	adds	r2, r3, #2
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	86da      	strh	r2, [r3, #54]	; 0x36
 8008bf6:	e015      	b.n	8008c24 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bf8:	f7fb fd64 	bl	80046c4 <HAL_GetTick>
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	1ad3      	subs	r3, r2, r3
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d803      	bhi.n	8008c10 <HAL_SPI_Transmit+0x168>
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c0e:	d102      	bne.n	8008c16 <HAL_SPI_Transmit+0x16e>
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d106      	bne.n	8008c24 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8008c16:	2303      	movs	r3, #3
 8008c18:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8008c22:	e07b      	b.n	8008d1c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1ca      	bne.n	8008bc4 <HAL_SPI_Transmit+0x11c>
 8008c2e:	e050      	b.n	8008cd2 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d002      	beq.n	8008c3e <HAL_SPI_Transmit+0x196>
 8008c38:	8afb      	ldrh	r3, [r7, #22]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d144      	bne.n	8008cc8 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	330c      	adds	r3, #12
 8008c48:	7812      	ldrb	r2, [r2, #0]
 8008c4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c50:	1c5a      	adds	r2, r3, #1
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	3b01      	subs	r3, #1
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008c64:	e030      	b.n	8008cc8 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	f003 0302 	and.w	r3, r3, #2
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d113      	bne.n	8008c9c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	330c      	adds	r3, #12
 8008c7e:	7812      	ldrb	r2, [r2, #0]
 8008c80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c86:	1c5a      	adds	r2, r3, #1
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	3b01      	subs	r3, #1
 8008c94:	b29a      	uxth	r2, r3
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	86da      	strh	r2, [r3, #54]	; 0x36
 8008c9a:	e015      	b.n	8008cc8 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c9c:	f7fb fd12 	bl	80046c4 <HAL_GetTick>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	683a      	ldr	r2, [r7, #0]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d803      	bhi.n	8008cb4 <HAL_SPI_Transmit+0x20c>
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cb2:	d102      	bne.n	8008cba <HAL_SPI_Transmit+0x212>
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d106      	bne.n	8008cc8 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8008cc6:	e029      	b.n	8008d1c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d1c9      	bne.n	8008c66 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008cd2:	69ba      	ldr	r2, [r7, #24]
 8008cd4:	6839      	ldr	r1, [r7, #0]
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f000 fa62 	bl	80091a0 <SPI_EndRxTxTransaction>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d002      	beq.n	8008ce8 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2220      	movs	r2, #32
 8008ce6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d10a      	bne.n	8008d06 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	613b      	str	r3, [r7, #16]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	613b      	str	r3, [r7, #16]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	613b      	str	r3, [r7, #16]
 8008d04:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d002      	beq.n	8008d14 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	77fb      	strb	r3, [r7, #31]
 8008d12:	e003      	b.n	8008d1c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008d24:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3720      	adds	r7, #32
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b08c      	sub	sp, #48	; 0x30
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	60f8      	str	r0, [r7, #12]
 8008d36:	60b9      	str	r1, [r7, #8]
 8008d38:	607a      	str	r2, [r7, #4]
 8008d3a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d101      	bne.n	8008d54 <HAL_SPI_TransmitReceive+0x26>
 8008d50:	2302      	movs	r3, #2
 8008d52:	e198      	b.n	8009086 <HAL_SPI_TransmitReceive+0x358>
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d5c:	f7fb fcb2 	bl	80046c4 <HAL_GetTick>
 8008d60:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008d72:	887b      	ldrh	r3, [r7, #2]
 8008d74:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008d76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d00f      	beq.n	8008d9e <HAL_SPI_TransmitReceive+0x70>
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d84:	d107      	bne.n	8008d96 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d103      	bne.n	8008d96 <HAL_SPI_TransmitReceive+0x68>
 8008d8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d92:	2b04      	cmp	r3, #4
 8008d94:	d003      	beq.n	8008d9e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008d96:	2302      	movs	r3, #2
 8008d98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008d9c:	e16d      	b.n	800907a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d005      	beq.n	8008db0 <HAL_SPI_TransmitReceive+0x82>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d002      	beq.n	8008db0 <HAL_SPI_TransmitReceive+0x82>
 8008daa:	887b      	ldrh	r3, [r7, #2]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d103      	bne.n	8008db8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008db6:	e160      	b.n	800907a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	2b04      	cmp	r3, #4
 8008dc2:	d003      	beq.n	8008dcc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2205      	movs	r2, #5
 8008dc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	887a      	ldrh	r2, [r7, #2]
 8008ddc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	887a      	ldrh	r2, [r7, #2]
 8008de2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	68ba      	ldr	r2, [r7, #8]
 8008de8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	887a      	ldrh	r2, [r7, #2]
 8008dee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	887a      	ldrh	r2, [r7, #2]
 8008df4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e0c:	2b40      	cmp	r3, #64	; 0x40
 8008e0e:	d007      	beq.n	8008e20 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e28:	d17c      	bne.n	8008f24 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d002      	beq.n	8008e38 <HAL_SPI_TransmitReceive+0x10a>
 8008e32:	8b7b      	ldrh	r3, [r7, #26]
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d16a      	bne.n	8008f0e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3c:	881a      	ldrh	r2, [r3, #0]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e48:	1c9a      	adds	r2, r3, #2
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	3b01      	subs	r3, #1
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e5c:	e057      	b.n	8008f0e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	f003 0302 	and.w	r3, r3, #2
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d11b      	bne.n	8008ea4 <HAL_SPI_TransmitReceive+0x176>
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d016      	beq.n	8008ea4 <HAL_SPI_TransmitReceive+0x176>
 8008e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d113      	bne.n	8008ea4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e80:	881a      	ldrh	r2, [r3, #0]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e8c:	1c9a      	adds	r2, r3, #2
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	b29a      	uxth	r2, r3
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d119      	bne.n	8008ee6 <HAL_SPI_TransmitReceive+0x1b8>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d014      	beq.n	8008ee6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68da      	ldr	r2, [r3, #12]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec6:	b292      	uxth	r2, r2
 8008ec8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ece:	1c9a      	adds	r2, r3, #2
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	3b01      	subs	r3, #1
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008ee6:	f7fb fbed 	bl	80046c4 <HAL_GetTick>
 8008eea:	4602      	mov	r2, r0
 8008eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eee:	1ad3      	subs	r3, r2, r3
 8008ef0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d80b      	bhi.n	8008f0e <HAL_SPI_TransmitReceive+0x1e0>
 8008ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008efc:	d007      	beq.n	8008f0e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8008efe:	2303      	movs	r3, #3
 8008f00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8008f0c:	e0b5      	b.n	800907a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1a2      	bne.n	8008e5e <HAL_SPI_TransmitReceive+0x130>
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d19d      	bne.n	8008e5e <HAL_SPI_TransmitReceive+0x130>
 8008f22:	e080      	b.n	8009026 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d002      	beq.n	8008f32 <HAL_SPI_TransmitReceive+0x204>
 8008f2c:	8b7b      	ldrh	r3, [r7, #26]
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d16f      	bne.n	8009012 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	330c      	adds	r3, #12
 8008f3c:	7812      	ldrb	r2, [r2, #0]
 8008f3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f44:	1c5a      	adds	r2, r3, #1
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	3b01      	subs	r3, #1
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f58:	e05b      	b.n	8009012 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	f003 0302 	and.w	r3, r3, #2
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d11c      	bne.n	8008fa2 <HAL_SPI_TransmitReceive+0x274>
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d017      	beq.n	8008fa2 <HAL_SPI_TransmitReceive+0x274>
 8008f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d114      	bne.n	8008fa2 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	330c      	adds	r3, #12
 8008f82:	7812      	ldrb	r2, [r2, #0]
 8008f84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f8a:	1c5a      	adds	r2, r3, #1
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	3b01      	subs	r3, #1
 8008f98:	b29a      	uxth	r2, r3
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	f003 0301 	and.w	r3, r3, #1
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d119      	bne.n	8008fe4 <HAL_SPI_TransmitReceive+0x2b6>
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d014      	beq.n	8008fe4 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68da      	ldr	r2, [r3, #12]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc4:	b2d2      	uxtb	r2, r2
 8008fc6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fcc:	1c5a      	adds	r2, r3, #1
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008fe4:	f7fb fb6e 	bl	80046c4 <HAL_GetTick>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fec:	1ad3      	subs	r3, r2, r3
 8008fee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d803      	bhi.n	8008ffc <HAL_SPI_TransmitReceive+0x2ce>
 8008ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffa:	d102      	bne.n	8009002 <HAL_SPI_TransmitReceive+0x2d4>
 8008ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d107      	bne.n	8009012 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8009002:	2303      	movs	r3, #3
 8009004:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2201      	movs	r2, #1
 800900c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8009010:	e033      	b.n	800907a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009016:	b29b      	uxth	r3, r3
 8009018:	2b00      	cmp	r3, #0
 800901a:	d19e      	bne.n	8008f5a <HAL_SPI_TransmitReceive+0x22c>
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009020:	b29b      	uxth	r3, r3
 8009022:	2b00      	cmp	r3, #0
 8009024:	d199      	bne.n	8008f5a <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009028:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f000 f8b8 	bl	80091a0 <SPI_EndRxTxTransaction>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d006      	beq.n	8009044 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2220      	movs	r2, #32
 8009040:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009042:	e01a      	b.n	800907a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d10a      	bne.n	8009062 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800904c:	2300      	movs	r3, #0
 800904e:	617b      	str	r3, [r7, #20]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	617b      	str	r3, [r7, #20]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	617b      	str	r3, [r7, #20]
 8009060:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009066:	2b00      	cmp	r3, #0
 8009068:	d003      	beq.n	8009072 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009070:	e003      	b.n	800907a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2201      	movs	r2, #1
 8009076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2200      	movs	r2, #0
 800907e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009082:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009086:	4618      	mov	r0, r3
 8009088:	3730      	adds	r7, #48	; 0x30
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
	...

08009090 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b088      	sub	sp, #32
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	603b      	str	r3, [r7, #0]
 800909c:	4613      	mov	r3, r2
 800909e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80090a0:	f7fb fb10 	bl	80046c4 <HAL_GetTick>
 80090a4:	4602      	mov	r2, r0
 80090a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a8:	1a9b      	subs	r3, r3, r2
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	4413      	add	r3, r2
 80090ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80090b0:	f7fb fb08 	bl	80046c4 <HAL_GetTick>
 80090b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80090b6:	4b39      	ldr	r3, [pc, #228]	; (800919c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	015b      	lsls	r3, r3, #5
 80090bc:	0d1b      	lsrs	r3, r3, #20
 80090be:	69fa      	ldr	r2, [r7, #28]
 80090c0:	fb02 f303 	mul.w	r3, r2, r3
 80090c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80090c6:	e054      	b.n	8009172 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ce:	d050      	beq.n	8009172 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80090d0:	f7fb faf8 	bl	80046c4 <HAL_GetTick>
 80090d4:	4602      	mov	r2, r0
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	1ad3      	subs	r3, r2, r3
 80090da:	69fa      	ldr	r2, [r7, #28]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d902      	bls.n	80090e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d13d      	bne.n	8009162 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	685a      	ldr	r2, [r3, #4]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80090f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090fe:	d111      	bne.n	8009124 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009108:	d004      	beq.n	8009114 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009112:	d107      	bne.n	8009124 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009122:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800912c:	d10f      	bne.n	800914e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800913c:	601a      	str	r2, [r3, #0]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800914c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2201      	movs	r2, #1
 8009152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800915e:	2303      	movs	r3, #3
 8009160:	e017      	b.n	8009192 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d101      	bne.n	800916c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009168:	2300      	movs	r3, #0
 800916a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	3b01      	subs	r3, #1
 8009170:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	689a      	ldr	r2, [r3, #8]
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	4013      	ands	r3, r2
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	429a      	cmp	r2, r3
 8009180:	bf0c      	ite	eq
 8009182:	2301      	moveq	r3, #1
 8009184:	2300      	movne	r3, #0
 8009186:	b2db      	uxtb	r3, r3
 8009188:	461a      	mov	r2, r3
 800918a:	79fb      	ldrb	r3, [r7, #7]
 800918c:	429a      	cmp	r2, r3
 800918e:	d19b      	bne.n	80090c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3720      	adds	r7, #32
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	200000e0 	.word	0x200000e0

080091a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af02      	add	r7, sp, #8
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	2200      	movs	r2, #0
 80091b4:	2180      	movs	r1, #128	; 0x80
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f7ff ff6a 	bl	8009090 <SPI_WaitFlagStateUntilTimeout>
 80091bc:	4603      	mov	r3, r0
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d007      	beq.n	80091d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091c6:	f043 0220 	orr.w	r2, r3, #32
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80091ce:	2303      	movs	r3, #3
 80091d0:	e000      	b.n	80091d4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d101      	bne.n	80091ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	e041      	b.n	8009272 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d106      	bne.n	8009208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f839 	bl	800927a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2202      	movs	r2, #2
 800920c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	3304      	adds	r3, #4
 8009218:	4619      	mov	r1, r3
 800921a:	4610      	mov	r0, r2
 800921c:	f000 f9c2 	bl	80095a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3708      	adds	r7, #8
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800927a:	b480      	push	{r7}
 800927c:	b083      	sub	sp, #12
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009282:	bf00      	nop
 8009284:	370c      	adds	r7, #12
 8009286:	46bd      	mov	sp, r7
 8009288:	bc80      	pop	{r7}
 800928a:	4770      	bx	lr

0800928c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800929a:	b2db      	uxtb	r3, r3
 800929c:	2b01      	cmp	r3, #1
 800929e:	d001      	beq.n	80092a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	e044      	b.n	800932e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2202      	movs	r2, #2
 80092a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	68da      	ldr	r2, [r3, #12]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f042 0201 	orr.w	r2, r2, #1
 80092ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a1d      	ldr	r2, [pc, #116]	; (8009338 <HAL_TIM_Base_Start_IT+0xac>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d018      	beq.n	80092f8 <HAL_TIM_Base_Start_IT+0x6c>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a1c      	ldr	r2, [pc, #112]	; (800933c <HAL_TIM_Base_Start_IT+0xb0>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d013      	beq.n	80092f8 <HAL_TIM_Base_Start_IT+0x6c>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092d8:	d00e      	beq.n	80092f8 <HAL_TIM_Base_Start_IT+0x6c>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a18      	ldr	r2, [pc, #96]	; (8009340 <HAL_TIM_Base_Start_IT+0xb4>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d009      	beq.n	80092f8 <HAL_TIM_Base_Start_IT+0x6c>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a16      	ldr	r2, [pc, #88]	; (8009344 <HAL_TIM_Base_Start_IT+0xb8>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d004      	beq.n	80092f8 <HAL_TIM_Base_Start_IT+0x6c>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a15      	ldr	r2, [pc, #84]	; (8009348 <HAL_TIM_Base_Start_IT+0xbc>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d111      	bne.n	800931c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	f003 0307 	and.w	r3, r3, #7
 8009302:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2b06      	cmp	r3, #6
 8009308:	d010      	beq.n	800932c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f042 0201 	orr.w	r2, r2, #1
 8009318:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800931a:	e007      	b.n	800932c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f042 0201 	orr.w	r2, r2, #1
 800932a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3714      	adds	r7, #20
 8009332:	46bd      	mov	sp, r7
 8009334:	bc80      	pop	{r7}
 8009336:	4770      	bx	lr
 8009338:	40012c00 	.word	0x40012c00
 800933c:	40013400 	.word	0x40013400
 8009340:	40000400 	.word	0x40000400
 8009344:	40000800 	.word	0x40000800
 8009348:	40000c00 	.word	0x40000c00

0800934c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	f003 0302 	and.w	r3, r3, #2
 800935e:	2b02      	cmp	r3, #2
 8009360:	d122      	bne.n	80093a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	f003 0302 	and.w	r3, r3, #2
 800936c:	2b02      	cmp	r3, #2
 800936e:	d11b      	bne.n	80093a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f06f 0202 	mvn.w	r2, #2
 8009378:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	699b      	ldr	r3, [r3, #24]
 8009386:	f003 0303 	and.w	r3, r3, #3
 800938a:	2b00      	cmp	r3, #0
 800938c:	d003      	beq.n	8009396 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f8ed 	bl	800956e <HAL_TIM_IC_CaptureCallback>
 8009394:	e005      	b.n	80093a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f8e0 	bl	800955c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 f8ef 	bl	8009580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	f003 0304 	and.w	r3, r3, #4
 80093b2:	2b04      	cmp	r3, #4
 80093b4:	d122      	bne.n	80093fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	f003 0304 	and.w	r3, r3, #4
 80093c0:	2b04      	cmp	r3, #4
 80093c2:	d11b      	bne.n	80093fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f06f 0204 	mvn.w	r2, #4
 80093cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2202      	movs	r2, #2
 80093d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	699b      	ldr	r3, [r3, #24]
 80093da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d003      	beq.n	80093ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f8c3 	bl	800956e <HAL_TIM_IC_CaptureCallback>
 80093e8:	e005      	b.n	80093f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f8b6 	bl	800955c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 f8c5 	bl	8009580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	691b      	ldr	r3, [r3, #16]
 8009402:	f003 0308 	and.w	r3, r3, #8
 8009406:	2b08      	cmp	r3, #8
 8009408:	d122      	bne.n	8009450 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	f003 0308 	and.w	r3, r3, #8
 8009414:	2b08      	cmp	r3, #8
 8009416:	d11b      	bne.n	8009450 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f06f 0208 	mvn.w	r2, #8
 8009420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2204      	movs	r2, #4
 8009426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	69db      	ldr	r3, [r3, #28]
 800942e:	f003 0303 	and.w	r3, r3, #3
 8009432:	2b00      	cmp	r3, #0
 8009434:	d003      	beq.n	800943e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 f899 	bl	800956e <HAL_TIM_IC_CaptureCallback>
 800943c:	e005      	b.n	800944a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 f88c 	bl	800955c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 f89b 	bl	8009580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	f003 0310 	and.w	r3, r3, #16
 800945a:	2b10      	cmp	r3, #16
 800945c:	d122      	bne.n	80094a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	f003 0310 	and.w	r3, r3, #16
 8009468:	2b10      	cmp	r3, #16
 800946a:	d11b      	bne.n	80094a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f06f 0210 	mvn.w	r2, #16
 8009474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2208      	movs	r2, #8
 800947a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	69db      	ldr	r3, [r3, #28]
 8009482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009486:	2b00      	cmp	r3, #0
 8009488:	d003      	beq.n	8009492 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f86f 	bl	800956e <HAL_TIM_IC_CaptureCallback>
 8009490:	e005      	b.n	800949e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 f862 	bl	800955c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 f871 	bl	8009580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	691b      	ldr	r3, [r3, #16]
 80094aa:	f003 0301 	and.w	r3, r3, #1
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d10e      	bne.n	80094d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	f003 0301 	and.w	r3, r3, #1
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d107      	bne.n	80094d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f06f 0201 	mvn.w	r2, #1
 80094c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f7f9 fe38 	bl	8003140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	691b      	ldr	r3, [r3, #16]
 80094d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094da:	2b80      	cmp	r3, #128	; 0x80
 80094dc:	d10e      	bne.n	80094fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094e8:	2b80      	cmp	r3, #128	; 0x80
 80094ea:	d107      	bne.n	80094fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80094f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 f8d7 	bl	80096aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009506:	2b40      	cmp	r3, #64	; 0x40
 8009508:	d10e      	bne.n	8009528 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009514:	2b40      	cmp	r3, #64	; 0x40
 8009516:	d107      	bne.n	8009528 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f835 	bl	8009592 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	f003 0320 	and.w	r3, r3, #32
 8009532:	2b20      	cmp	r3, #32
 8009534:	d10e      	bne.n	8009554 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	f003 0320 	and.w	r3, r3, #32
 8009540:	2b20      	cmp	r3, #32
 8009542:	d107      	bne.n	8009554 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f06f 0220 	mvn.w	r2, #32
 800954c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f8a2 	bl	8009698 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009554:	bf00      	nop
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009564:	bf00      	nop
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	bc80      	pop	{r7}
 800956c:	4770      	bx	lr

0800956e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800956e:	b480      	push	{r7}
 8009570:	b083      	sub	sp, #12
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009576:	bf00      	nop
 8009578:	370c      	adds	r7, #12
 800957a:	46bd      	mov	sp, r7
 800957c:	bc80      	pop	{r7}
 800957e:	4770      	bx	lr

08009580 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009588:	bf00      	nop
 800958a:	370c      	adds	r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	bc80      	pop	{r7}
 8009590:	4770      	bx	lr

08009592 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009592:	b480      	push	{r7}
 8009594:	b083      	sub	sp, #12
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800959a:	bf00      	nop
 800959c:	370c      	adds	r7, #12
 800959e:	46bd      	mov	sp, r7
 80095a0:	bc80      	pop	{r7}
 80095a2:	4770      	bx	lr

080095a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b085      	sub	sp, #20
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4a33      	ldr	r2, [pc, #204]	; (8009684 <TIM_Base_SetConfig+0xe0>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d013      	beq.n	80095e4 <TIM_Base_SetConfig+0x40>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a32      	ldr	r2, [pc, #200]	; (8009688 <TIM_Base_SetConfig+0xe4>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d00f      	beq.n	80095e4 <TIM_Base_SetConfig+0x40>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095ca:	d00b      	beq.n	80095e4 <TIM_Base_SetConfig+0x40>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4a2f      	ldr	r2, [pc, #188]	; (800968c <TIM_Base_SetConfig+0xe8>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d007      	beq.n	80095e4 <TIM_Base_SetConfig+0x40>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4a2e      	ldr	r2, [pc, #184]	; (8009690 <TIM_Base_SetConfig+0xec>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d003      	beq.n	80095e4 <TIM_Base_SetConfig+0x40>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a2d      	ldr	r2, [pc, #180]	; (8009694 <TIM_Base_SetConfig+0xf0>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d108      	bne.n	80095f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	4313      	orrs	r3, r2
 80095f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4a22      	ldr	r2, [pc, #136]	; (8009684 <TIM_Base_SetConfig+0xe0>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d013      	beq.n	8009626 <TIM_Base_SetConfig+0x82>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a21      	ldr	r2, [pc, #132]	; (8009688 <TIM_Base_SetConfig+0xe4>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d00f      	beq.n	8009626 <TIM_Base_SetConfig+0x82>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800960c:	d00b      	beq.n	8009626 <TIM_Base_SetConfig+0x82>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4a1e      	ldr	r2, [pc, #120]	; (800968c <TIM_Base_SetConfig+0xe8>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d007      	beq.n	8009626 <TIM_Base_SetConfig+0x82>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a1d      	ldr	r2, [pc, #116]	; (8009690 <TIM_Base_SetConfig+0xec>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d003      	beq.n	8009626 <TIM_Base_SetConfig+0x82>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4a1c      	ldr	r2, [pc, #112]	; (8009694 <TIM_Base_SetConfig+0xf0>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d108      	bne.n	8009638 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800962c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	68fa      	ldr	r2, [r7, #12]
 8009634:	4313      	orrs	r3, r2
 8009636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	695b      	ldr	r3, [r3, #20]
 8009642:	4313      	orrs	r3, r2
 8009644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	689a      	ldr	r2, [r3, #8]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4a09      	ldr	r2, [pc, #36]	; (8009684 <TIM_Base_SetConfig+0xe0>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d003      	beq.n	800966c <TIM_Base_SetConfig+0xc8>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4a08      	ldr	r2, [pc, #32]	; (8009688 <TIM_Base_SetConfig+0xe4>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d103      	bne.n	8009674 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	691a      	ldr	r2, [r3, #16]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	615a      	str	r2, [r3, #20]
}
 800967a:	bf00      	nop
 800967c:	3714      	adds	r7, #20
 800967e:	46bd      	mov	sp, r7
 8009680:	bc80      	pop	{r7}
 8009682:	4770      	bx	lr
 8009684:	40012c00 	.word	0x40012c00
 8009688:	40013400 	.word	0x40013400
 800968c:	40000400 	.word	0x40000400
 8009690:	40000800 	.word	0x40000800
 8009694:	40000c00 	.word	0x40000c00

08009698 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096a0:	bf00      	nop
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bc80      	pop	{r7}
 80096a8:	4770      	bx	lr

080096aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096aa:	b480      	push	{r7}
 80096ac:	b083      	sub	sp, #12
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096b2:	bf00      	nop
 80096b4:	370c      	adds	r7, #12
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bc80      	pop	{r7}
 80096ba:	4770      	bx	lr

080096bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d101      	bne.n	80096ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e042      	b.n	8009754 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d106      	bne.n	80096e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f7fa ff0a 	bl	80044fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2224      	movs	r2, #36	; 0x24
 80096ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68da      	ldr	r2, [r3, #12]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80096fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 f91d 	bl	8009940 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	691a      	ldr	r2, [r3, #16]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009714:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	695a      	ldr	r2, [r3, #20]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009724:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	68da      	ldr	r2, [r3, #12]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009734:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2220      	movs	r2, #32
 8009740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2220      	movs	r2, #32
 8009748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b08a      	sub	sp, #40	; 0x28
 8009760:	af02      	add	r7, sp, #8
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	60b9      	str	r1, [r7, #8]
 8009766:	603b      	str	r3, [r7, #0]
 8009768:	4613      	mov	r3, r2
 800976a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800976c:	2300      	movs	r3, #0
 800976e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009776:	b2db      	uxtb	r3, r3
 8009778:	2b20      	cmp	r3, #32
 800977a:	d16d      	bne.n	8009858 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d002      	beq.n	8009788 <HAL_UART_Transmit+0x2c>
 8009782:	88fb      	ldrh	r3, [r7, #6]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d101      	bne.n	800978c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	e066      	b.n	800985a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2200      	movs	r2, #0
 8009790:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2221      	movs	r2, #33	; 0x21
 8009796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800979a:	f7fa ff93 	bl	80046c4 <HAL_GetTick>
 800979e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	88fa      	ldrh	r2, [r7, #6]
 80097a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	88fa      	ldrh	r2, [r7, #6]
 80097aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097b4:	d108      	bne.n	80097c8 <HAL_UART_Transmit+0x6c>
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d104      	bne.n	80097c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80097be:	2300      	movs	r3, #0
 80097c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	61bb      	str	r3, [r7, #24]
 80097c6:	e003      	b.n	80097d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097cc:	2300      	movs	r3, #0
 80097ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80097d0:	e02a      	b.n	8009828 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	9300      	str	r3, [sp, #0]
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	2200      	movs	r2, #0
 80097da:	2180      	movs	r1, #128	; 0x80
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	f000 f840 	bl	8009862 <UART_WaitOnFlagUntilTimeout>
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d001      	beq.n	80097ec <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80097e8:	2303      	movs	r3, #3
 80097ea:	e036      	b.n	800985a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10b      	bne.n	800980a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80097f2:	69bb      	ldr	r3, [r7, #24]
 80097f4:	881b      	ldrh	r3, [r3, #0]
 80097f6:	461a      	mov	r2, r3
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009800:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	3302      	adds	r3, #2
 8009806:	61bb      	str	r3, [r7, #24]
 8009808:	e007      	b.n	800981a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	781a      	ldrb	r2, [r3, #0]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	3301      	adds	r3, #1
 8009818:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800981e:	b29b      	uxth	r3, r3
 8009820:	3b01      	subs	r3, #1
 8009822:	b29a      	uxth	r2, r3
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800982c:	b29b      	uxth	r3, r3
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1cf      	bne.n	80097d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	9300      	str	r3, [sp, #0]
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	2200      	movs	r2, #0
 800983a:	2140      	movs	r1, #64	; 0x40
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f000 f810 	bl	8009862 <UART_WaitOnFlagUntilTimeout>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d001      	beq.n	800984c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8009848:	2303      	movs	r3, #3
 800984a:	e006      	b.n	800985a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2220      	movs	r2, #32
 8009850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8009854:	2300      	movs	r3, #0
 8009856:	e000      	b.n	800985a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009858:	2302      	movs	r3, #2
  }
}
 800985a:	4618      	mov	r0, r3
 800985c:	3720      	adds	r7, #32
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b090      	sub	sp, #64	; 0x40
 8009866:	af00      	add	r7, sp, #0
 8009868:	60f8      	str	r0, [r7, #12]
 800986a:	60b9      	str	r1, [r7, #8]
 800986c:	603b      	str	r3, [r7, #0]
 800986e:	4613      	mov	r3, r2
 8009870:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009872:	e050      	b.n	8009916 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800987a:	d04c      	beq.n	8009916 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800987c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800987e:	2b00      	cmp	r3, #0
 8009880:	d007      	beq.n	8009892 <UART_WaitOnFlagUntilTimeout+0x30>
 8009882:	f7fa ff1f 	bl	80046c4 <HAL_GetTick>
 8009886:	4602      	mov	r2, r0
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	1ad3      	subs	r3, r2, r3
 800988c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800988e:	429a      	cmp	r2, r3
 8009890:	d241      	bcs.n	8009916 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	330c      	adds	r3, #12
 8009898:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989c:	e853 3f00 	ldrex	r3, [r3]
 80098a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80098a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	330c      	adds	r3, #12
 80098b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80098b2:	637a      	str	r2, [r7, #52]	; 0x34
 80098b4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80098b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098ba:	e841 2300 	strex	r3, r2, [r1]
 80098be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80098c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d1e5      	bne.n	8009892 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	3314      	adds	r3, #20
 80098cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	e853 3f00 	ldrex	r3, [r3]
 80098d4:	613b      	str	r3, [r7, #16]
   return(result);
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	f023 0301 	bic.w	r3, r3, #1
 80098dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	3314      	adds	r3, #20
 80098e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098e6:	623a      	str	r2, [r7, #32]
 80098e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ea:	69f9      	ldr	r1, [r7, #28]
 80098ec:	6a3a      	ldr	r2, [r7, #32]
 80098ee:	e841 2300 	strex	r3, r2, [r1]
 80098f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80098f4:	69bb      	ldr	r3, [r7, #24]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d1e5      	bne.n	80098c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2220      	movs	r2, #32
 80098fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2220      	movs	r2, #32
 8009906:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8009912:	2303      	movs	r3, #3
 8009914:	e00f      	b.n	8009936 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	4013      	ands	r3, r2
 8009920:	68ba      	ldr	r2, [r7, #8]
 8009922:	429a      	cmp	r2, r3
 8009924:	bf0c      	ite	eq
 8009926:	2301      	moveq	r3, #1
 8009928:	2300      	movne	r3, #0
 800992a:	b2db      	uxtb	r3, r3
 800992c:	461a      	mov	r2, r3
 800992e:	79fb      	ldrb	r3, [r7, #7]
 8009930:	429a      	cmp	r2, r3
 8009932:	d09f      	beq.n	8009874 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3740      	adds	r7, #64	; 0x40
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
	...

08009940 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	691b      	ldr	r3, [r3, #16]
 800994e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	68da      	ldr	r2, [r3, #12]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	430a      	orrs	r2, r1
 800995c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	689a      	ldr	r2, [r3, #8]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	691b      	ldr	r3, [r3, #16]
 8009966:	431a      	orrs	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	695b      	ldr	r3, [r3, #20]
 800996c:	4313      	orrs	r3, r2
 800996e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800997a:	f023 030c 	bic.w	r3, r3, #12
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	6812      	ldr	r2, [r2, #0]
 8009982:	68b9      	ldr	r1, [r7, #8]
 8009984:	430b      	orrs	r3, r1
 8009986:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	695b      	ldr	r3, [r3, #20]
 800998e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	699a      	ldr	r2, [r3, #24]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	430a      	orrs	r2, r1
 800999c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a2c      	ldr	r2, [pc, #176]	; (8009a54 <UART_SetConfig+0x114>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d103      	bne.n	80099b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80099a8:	f7fe f862 	bl	8007a70 <HAL_RCC_GetPCLK2Freq>
 80099ac:	60f8      	str	r0, [r7, #12]
 80099ae:	e002      	b.n	80099b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80099b0:	f7fe f84a 	bl	8007a48 <HAL_RCC_GetPCLK1Freq>
 80099b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80099b6:	68fa      	ldr	r2, [r7, #12]
 80099b8:	4613      	mov	r3, r2
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	4413      	add	r3, r2
 80099be:	009a      	lsls	r2, r3, #2
 80099c0:	441a      	add	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80099cc:	4a22      	ldr	r2, [pc, #136]	; (8009a58 <UART_SetConfig+0x118>)
 80099ce:	fba2 2303 	umull	r2, r3, r2, r3
 80099d2:	095b      	lsrs	r3, r3, #5
 80099d4:	0119      	lsls	r1, r3, #4
 80099d6:	68fa      	ldr	r2, [r7, #12]
 80099d8:	4613      	mov	r3, r2
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	4413      	add	r3, r2
 80099de:	009a      	lsls	r2, r3, #2
 80099e0:	441a      	add	r2, r3
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80099ec:	4b1a      	ldr	r3, [pc, #104]	; (8009a58 <UART_SetConfig+0x118>)
 80099ee:	fba3 0302 	umull	r0, r3, r3, r2
 80099f2:	095b      	lsrs	r3, r3, #5
 80099f4:	2064      	movs	r0, #100	; 0x64
 80099f6:	fb00 f303 	mul.w	r3, r0, r3
 80099fa:	1ad3      	subs	r3, r2, r3
 80099fc:	011b      	lsls	r3, r3, #4
 80099fe:	3332      	adds	r3, #50	; 0x32
 8009a00:	4a15      	ldr	r2, [pc, #84]	; (8009a58 <UART_SetConfig+0x118>)
 8009a02:	fba2 2303 	umull	r2, r3, r2, r3
 8009a06:	095b      	lsrs	r3, r3, #5
 8009a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a0c:	4419      	add	r1, r3
 8009a0e:	68fa      	ldr	r2, [r7, #12]
 8009a10:	4613      	mov	r3, r2
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	4413      	add	r3, r2
 8009a16:	009a      	lsls	r2, r3, #2
 8009a18:	441a      	add	r2, r3
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	fbb2 f2f3 	udiv	r2, r2, r3
 8009a24:	4b0c      	ldr	r3, [pc, #48]	; (8009a58 <UART_SetConfig+0x118>)
 8009a26:	fba3 0302 	umull	r0, r3, r3, r2
 8009a2a:	095b      	lsrs	r3, r3, #5
 8009a2c:	2064      	movs	r0, #100	; 0x64
 8009a2e:	fb00 f303 	mul.w	r3, r0, r3
 8009a32:	1ad3      	subs	r3, r2, r3
 8009a34:	011b      	lsls	r3, r3, #4
 8009a36:	3332      	adds	r3, #50	; 0x32
 8009a38:	4a07      	ldr	r2, [pc, #28]	; (8009a58 <UART_SetConfig+0x118>)
 8009a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a3e:	095b      	lsrs	r3, r3, #5
 8009a40:	f003 020f 	and.w	r2, r3, #15
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	440a      	add	r2, r1
 8009a4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009a4c:	bf00      	nop
 8009a4e:	3710      	adds	r7, #16
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	40013800 	.word	0x40013800
 8009a58:	51eb851f 	.word	0x51eb851f

08009a5c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009a60:	4904      	ldr	r1, [pc, #16]	; (8009a74 <MX_FATFS_Init+0x18>)
 8009a62:	4805      	ldr	r0, [pc, #20]	; (8009a78 <MX_FATFS_Init+0x1c>)
 8009a64:	f000 f8b0 	bl	8009bc8 <FATFS_LinkDriver>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	4b03      	ldr	r3, [pc, #12]	; (8009a7c <MX_FATFS_Init+0x20>)
 8009a6e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009a70:	bf00      	nop
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	200008c4 	.word	0x200008c4
 8009a78:	200000ec 	.word	0x200000ec
 8009a7c:	200008c0 	.word	0x200008c0

08009a80 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	4603      	mov	r3, r0
 8009a88:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
      return SD_disk_initialize(pdrv);
 8009a8a:	79fb      	ldrb	r3, [r7, #7]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7f7 ff4b 	bl	8001928 <SD_disk_initialize>
 8009a92:	4603      	mov	r3, r0
 8009a94:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b082      	sub	sp, #8
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
      return SD_disk_status(pdrv);
 8009aa8:	79fb      	ldrb	r3, [r7, #7]
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7f8 f822 	bl	8001af4 <SD_disk_status>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3708      	adds	r7, #8
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60b9      	str	r1, [r7, #8]
 8009ac4:	607a      	str	r2, [r7, #4]
 8009ac6:	603b      	str	r3, [r7, #0]
 8009ac8:	4603      	mov	r3, r0
 8009aca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
    return SD_disk_read(pdrv, buff, sector, count);
 8009acc:	7bf8      	ldrb	r0, [r7, #15]
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	68b9      	ldr	r1, [r7, #8]
 8009ad4:	f7f8 f822 	bl	8001b1c <SD_disk_read>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3710      	adds	r7, #16
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60b9      	str	r1, [r7, #8]
 8009aec:	607a      	str	r2, [r7, #4]
 8009aee:	603b      	str	r3, [r7, #0]
 8009af0:	4603      	mov	r3, r0
 8009af2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
      return SD_disk_write(pdrv, buff, sector, count);
 8009af4:	7bf8      	ldrb	r0, [r7, #15]
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	68b9      	ldr	r1, [r7, #8]
 8009afc:	f7f8 f878 	bl	8001bf0 <SD_disk_write>
 8009b00:	4603      	mov	r3, r0
 8009b02:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3710      	adds	r7, #16
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	4603      	mov	r3, r0
 8009b14:	603a      	str	r2, [r7, #0]
 8009b16:	71fb      	strb	r3, [r7, #7]
 8009b18:	460b      	mov	r3, r1
 8009b1a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
  return SD_disk_ioctl(pdrv, cmd, buff);
 8009b1c:	79fb      	ldrb	r3, [r7, #7]
 8009b1e:	79b9      	ldrb	r1, [r7, #6]
 8009b20:	683a      	ldr	r2, [r7, #0]
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7f8 f8e8 	bl	8001cf8 <SD_disk_ioctl>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3708      	adds	r7, #8
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b087      	sub	sp, #28
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	4613      	mov	r3, r2
 8009b40:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009b42:	2301      	movs	r3, #1
 8009b44:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009b46:	2300      	movs	r3, #0
 8009b48:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8009b4a:	4b1e      	ldr	r3, [pc, #120]	; (8009bc4 <FATFS_LinkDriverEx+0x90>)
 8009b4c:	7a5b      	ldrb	r3, [r3, #9]
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d831      	bhi.n	8009bb8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009b54:	4b1b      	ldr	r3, [pc, #108]	; (8009bc4 <FATFS_LinkDriverEx+0x90>)
 8009b56:	7a5b      	ldrb	r3, [r3, #9]
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	4b19      	ldr	r3, [pc, #100]	; (8009bc4 <FATFS_LinkDriverEx+0x90>)
 8009b5e:	2100      	movs	r1, #0
 8009b60:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8009b62:	4b18      	ldr	r3, [pc, #96]	; (8009bc4 <FATFS_LinkDriverEx+0x90>)
 8009b64:	7a5b      	ldrb	r3, [r3, #9]
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	4a16      	ldr	r2, [pc, #88]	; (8009bc4 <FATFS_LinkDriverEx+0x90>)
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	4413      	add	r3, r2
 8009b6e:	68fa      	ldr	r2, [r7, #12]
 8009b70:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8009b72:	4b14      	ldr	r3, [pc, #80]	; (8009bc4 <FATFS_LinkDriverEx+0x90>)
 8009b74:	7a5b      	ldrb	r3, [r3, #9]
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	461a      	mov	r2, r3
 8009b7a:	4b12      	ldr	r3, [pc, #72]	; (8009bc4 <FATFS_LinkDriverEx+0x90>)
 8009b7c:	4413      	add	r3, r2
 8009b7e:	79fa      	ldrb	r2, [r7, #7]
 8009b80:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009b82:	4b10      	ldr	r3, [pc, #64]	; (8009bc4 <FATFS_LinkDriverEx+0x90>)
 8009b84:	7a5b      	ldrb	r3, [r3, #9]
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	1c5a      	adds	r2, r3, #1
 8009b8a:	b2d1      	uxtb	r1, r2
 8009b8c:	4a0d      	ldr	r2, [pc, #52]	; (8009bc4 <FATFS_LinkDriverEx+0x90>)
 8009b8e:	7251      	strb	r1, [r2, #9]
 8009b90:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009b92:	7dbb      	ldrb	r3, [r7, #22]
 8009b94:	3330      	adds	r3, #48	; 0x30
 8009b96:	b2da      	uxtb	r2, r3
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	223a      	movs	r2, #58	; 0x3a
 8009ba2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	3302      	adds	r3, #2
 8009ba8:	222f      	movs	r2, #47	; 0x2f
 8009baa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	3303      	adds	r3, #3
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8009bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	371c      	adds	r7, #28
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bc80      	pop	{r7}
 8009bc2:	4770      	bx	lr
 8009bc4:	200008c8 	.word	0x200008c8

08009bc8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	6839      	ldr	r1, [r7, #0]
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f7ff ffac 	bl	8009b34 <FATFS_LinkDriverEx>
 8009bdc:	4603      	mov	r3, r0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3708      	adds	r7, #8
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009be6:	b480      	push	{r7}
 8009be8:	b085      	sub	sp, #20
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	4603      	mov	r3, r0
 8009bee:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009bf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009bf8:	2b84      	cmp	r3, #132	; 0x84
 8009bfa:	d005      	beq.n	8009c08 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009bfc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	4413      	add	r3, r2
 8009c04:	3303      	adds	r3, #3
 8009c06:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009c08:	68fb      	ldr	r3, [r7, #12]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3714      	adds	r7, #20
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bc80      	pop	{r7}
 8009c12:	4770      	bx	lr

08009c14 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c1a:	f3ef 8305 	mrs	r3, IPSR
 8009c1e:	607b      	str	r3, [r7, #4]
  return(result);
 8009c20:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	bf14      	ite	ne
 8009c26:	2301      	movne	r3, #1
 8009c28:	2300      	moveq	r3, #0
 8009c2a:	b2db      	uxtb	r3, r3
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	370c      	adds	r7, #12
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bc80      	pop	{r7}
 8009c34:	4770      	bx	lr

08009c36 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009c3a:	f001 fa93 	bl	800b164 <vTaskStartScheduler>
  
  return osOK;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c46:	b089      	sub	sp, #36	; 0x24
 8009c48:	af04      	add	r7, sp, #16
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	695b      	ldr	r3, [r3, #20]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d020      	beq.n	8009c98 <osThreadCreate+0x54>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	699b      	ldr	r3, [r3, #24]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d01c      	beq.n	8009c98 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	685c      	ldr	r4, [r3, #4]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	691e      	ldr	r6, [r3, #16]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7ff ffb8 	bl	8009be6 <makeFreeRtosPriority>
 8009c76:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	695b      	ldr	r3, [r3, #20]
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c80:	9202      	str	r2, [sp, #8]
 8009c82:	9301      	str	r3, [sp, #4]
 8009c84:	9100      	str	r1, [sp, #0]
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	4632      	mov	r2, r6
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	4620      	mov	r0, r4
 8009c8e:	f001 f893 	bl	800adb8 <xTaskCreateStatic>
 8009c92:	4603      	mov	r3, r0
 8009c94:	60fb      	str	r3, [r7, #12]
 8009c96:	e01c      	b.n	8009cd2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	685c      	ldr	r4, [r3, #4]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009ca4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7ff ff9a 	bl	8009be6 <makeFreeRtosPriority>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	f107 030c 	add.w	r3, r7, #12
 8009cb8:	9301      	str	r3, [sp, #4]
 8009cba:	9200      	str	r2, [sp, #0]
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	4632      	mov	r2, r6
 8009cc0:	4629      	mov	r1, r5
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	f001 f8d4 	bl	800ae70 <xTaskCreate>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d001      	beq.n	8009cd2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	e000      	b.n	8009cd4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3714      	adds	r7, #20
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009cdc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d001      	beq.n	8009cf2 <osDelay+0x16>
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	e000      	b.n	8009cf4 <osDelay+0x18>
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f001 fa01 	bl	800b0fc <vTaskDelay>
  
  return osOK;
 8009cfa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b086      	sub	sp, #24
 8009d08:	af02      	add	r7, sp, #8
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8009d12:	2300      	movs	r3, #0
 8009d14:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8009d16:	f7ff ff7d 	bl	8009c14 <inHandlerMode>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d01c      	beq.n	8009d5a <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8009d20:	6839      	ldr	r1, [r7, #0]
 8009d22:	f107 0208 	add.w	r2, r7, #8
 8009d26:	f107 030c 	add.w	r3, r7, #12
 8009d2a:	9300      	str	r3, [sp, #0]
 8009d2c:	4613      	mov	r3, r2
 8009d2e:	2201      	movs	r2, #1
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f001 ffe1 	bl	800bcf8 <xTaskGenericNotifyFromISR>
 8009d36:	4603      	mov	r3, r0
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d002      	beq.n	8009d42 <osSignalSet+0x3e>
      return 0x80000000;
 8009d3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d40:	e019      	b.n	8009d76 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d015      	beq.n	8009d74 <osSignalSet+0x70>
 8009d48:	4b0d      	ldr	r3, [pc, #52]	; (8009d80 <osSignalSet+0x7c>)
 8009d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d4e:	601a      	str	r2, [r3, #0]
 8009d50:	f3bf 8f4f 	dsb	sy
 8009d54:	f3bf 8f6f 	isb	sy
 8009d58:	e00c      	b.n	8009d74 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8009d5a:	6839      	ldr	r1, [r7, #0]
 8009d5c:	f107 0308 	add.w	r3, r7, #8
 8009d60:	2201      	movs	r2, #1
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f001 ff1e 	bl	800bba4 <xTaskGenericNotify>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d002      	beq.n	8009d74 <osSignalSet+0x70>
    return 0x80000000;
 8009d6e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d72:	e000      	b.n	8009d76 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8009d74:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3710      	adds	r7, #16
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	e000ed04 	.word	0xe000ed04

08009d84 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8009d84:	b590      	push	{r4, r7, lr}
 8009d86:	b089      	sub	sp, #36	; 0x24
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8009d90:	2300      	movs	r3, #0
 8009d92:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8009d94:	2300      	movs	r3, #0
 8009d96:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d9e:	d103      	bne.n	8009da8 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8009da0:	f04f 33ff 	mov.w	r3, #4294967295
 8009da4:	61fb      	str	r3, [r7, #28]
 8009da6:	e009      	b.n	8009dbc <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d006      	beq.n	8009dbc <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d101      	bne.n	8009dbc <osSignalWait+0x38>
      ticks = 1;
 8009db8:	2301      	movs	r3, #1
 8009dba:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8009dbc:	f7ff ff2a 	bl	8009c14 <inHandlerMode>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d002      	beq.n	8009dcc <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8009dc6:	2382      	movs	r3, #130	; 0x82
 8009dc8:	613b      	str	r3, [r7, #16]
 8009dca:	e01b      	b.n	8009e04 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8009dcc:	68b9      	ldr	r1, [r7, #8]
 8009dce:	f107 0310 	add.w	r3, r7, #16
 8009dd2:	1d1a      	adds	r2, r3, #4
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	2000      	movs	r0, #0
 8009dd8:	f001 fe84 	bl	800bae4 <xTaskNotifyWait>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d008      	beq.n	8009df4 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d102      	bne.n	8009dee <osSignalWait+0x6a>
 8009de8:	2300      	movs	r3, #0
 8009dea:	613b      	str	r3, [r7, #16]
 8009dec:	e00a      	b.n	8009e04 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8009dee:	2340      	movs	r3, #64	; 0x40
 8009df0:	613b      	str	r3, [r7, #16]
 8009df2:	e007      	b.n	8009e04 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	da02      	bge.n	8009e00 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8009dfa:	2386      	movs	r3, #134	; 0x86
 8009dfc:	613b      	str	r3, [r7, #16]
 8009dfe:	e001      	b.n	8009e04 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8009e00:	2308      	movs	r3, #8
 8009e02:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	461c      	mov	r4, r3
 8009e08:	f107 0310 	add.w	r3, r7, #16
 8009e0c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009e10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009e14:	68f8      	ldr	r0, [r7, #12]
 8009e16:	3724      	adds	r7, #36	; 0x24
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd90      	pop	{r4, r7, pc}

08009e1c <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b086      	sub	sp, #24
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	3303      	adds	r3, #3
 8009e2a:	f023 0303 	bic.w	r3, r3, #3
 8009e2e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8009e30:	2014      	movs	r0, #20
 8009e32:	f002 fa8b 	bl	800c34c <pvPortMalloc>
 8009e36:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d046      	beq.n	8009ecc <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8009e46:	68fa      	ldr	r2, [r7, #12]
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4618      	mov	r0, r3
 8009e58:	f002 fa78 	bl	800c34c <pvPortMalloc>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d02b      	beq.n	8009ec2 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	68fa      	ldr	r2, [r7, #12]
 8009e70:	fb02 f303 	mul.w	r3, r2, r3
 8009e74:	4618      	mov	r0, r3
 8009e76:	f002 fa69 	bl	800c34c <pvPortMalloc>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d011      	beq.n	8009eac <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8009e88:	2300      	movs	r3, #0
 8009e8a:	613b      	str	r3, [r7, #16]
 8009e8c:	e008      	b.n	8009ea0 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	685a      	ldr	r2, [r3, #4]
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	4413      	add	r3, r2
 8009e96:	2200      	movs	r2, #0
 8009e98:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	613b      	str	r3, [r7, #16]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	693a      	ldr	r2, [r7, #16]
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d3f1      	bcc.n	8009e8e <osPoolCreate+0x72>
 8009eaa:	e00f      	b.n	8009ecc <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f002 fb0f 	bl	800c4d4 <vPortFree>
        vPortFree(thePool);
 8009eb6:	6978      	ldr	r0, [r7, #20]
 8009eb8:	f002 fb0c 	bl	800c4d4 <vPortFree>
        thePool = NULL;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	617b      	str	r3, [r7, #20]
 8009ec0:	e004      	b.n	8009ecc <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8009ec2:	6978      	ldr	r0, [r7, #20]
 8009ec4:	f002 fb06 	bl	800c4d4 <vPortFree>
      thePool = NULL;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8009ecc:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3718      	adds	r7, #24
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b08a      	sub	sp, #40	; 0x28
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8009ee6:	f7ff fe95 	bl	8009c14 <inHandlerMode>
 8009eea:	4603      	mov	r3, r0
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00e      	beq.n	8009f0e <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009ef0:	f3ef 8211 	mrs	r2, BASEPRI
 8009ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef8:	f383 8811 	msr	BASEPRI, r3
 8009efc:	f3bf 8f6f 	isb	sy
 8009f00:	f3bf 8f4f 	dsb	sy
 8009f04:	617a      	str	r2, [r7, #20]
 8009f06:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009f08:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8009f0c:	e001      	b.n	8009f12 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8009f0e:	f002 f91d 	bl	800c14c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8009f12:	2300      	movs	r3, #0
 8009f14:	61fb      	str	r3, [r7, #28]
 8009f16:	e029      	b.n	8009f6c <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	691a      	ldr	r2, [r3, #16]
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	4413      	add	r3, r2
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	6892      	ldr	r2, [r2, #8]
 8009f24:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f28:	fb01 f202 	mul.w	r2, r1, r2
 8009f2c:	1a9b      	subs	r3, r3, r2
 8009f2e:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	685a      	ldr	r2, [r3, #4]
 8009f34:	69bb      	ldr	r3, [r7, #24]
 8009f36:	4413      	add	r3, r2
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d113      	bne.n	8009f66 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	685a      	ldr	r2, [r3, #4]
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	4413      	add	r3, r2
 8009f46:	2201      	movs	r2, #1
 8009f48:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4619      	mov	r1, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	69ba      	ldr	r2, [r7, #24]
 8009f56:	fb02 f303 	mul.w	r3, r2, r3
 8009f5a:	440b      	add	r3, r1
 8009f5c:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	69ba      	ldr	r2, [r7, #24]
 8009f62:	611a      	str	r2, [r3, #16]
      break;
 8009f64:	e007      	b.n	8009f76 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8009f66:	69fb      	ldr	r3, [r7, #28]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	61fb      	str	r3, [r7, #28]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	69fa      	ldr	r2, [r7, #28]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d3d0      	bcc.n	8009f18 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8009f76:	f7ff fe4d 	bl	8009c14 <inHandlerMode>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d005      	beq.n	8009f8c <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8009f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f82:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009f8a:	e001      	b.n	8009f90 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8009f8c:	f002 f90e 	bl	800c1ac <vPortExitCritical>
  }
  
  return p;
 8009f90:	6a3b      	ldr	r3, [r7, #32]
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3728      	adds	r7, #40	; 0x28
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8009f9a:	b480      	push	{r7}
 8009f9c:	b085      	sub	sp, #20
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
 8009fa2:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d101      	bne.n	8009fae <osPoolFree+0x14>
    return osErrorParameter;
 8009faa:	2380      	movs	r3, #128	; 0x80
 8009fac:	e030      	b.n	800a010 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d101      	bne.n	8009fb8 <osPoolFree+0x1e>
    return osErrorParameter;
 8009fb4:	2380      	movs	r3, #128	; 0x80
 8009fb6:	e02b      	b.n	800a010 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	683a      	ldr	r2, [r7, #0]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d201      	bcs.n	8009fc6 <osPoolFree+0x2c>
    return osErrorParameter;
 8009fc2:	2380      	movs	r3, #128	; 0x80
 8009fc4:	e024      	b.n	800a010 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	6812      	ldr	r2, [r2, #0]
 8009fcc:	1a9b      	subs	r3, r3, r2
 8009fce:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	68da      	ldr	r2, [r3, #12]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	fbb3 f1f2 	udiv	r1, r3, r2
 8009fda:	fb01 f202 	mul.w	r2, r1, r2
 8009fde:	1a9b      	subs	r3, r3, r2
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d001      	beq.n	8009fe8 <osPoolFree+0x4e>
    return osErrorParameter;
 8009fe4:	2380      	movs	r3, #128	; 0x80
 8009fe6:	e013      	b.n	800a010 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	68fa      	ldr	r2, [r7, #12]
 8009fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ff2:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d301      	bcc.n	800a002 <osPoolFree+0x68>
    return osErrorParameter;
 8009ffe:	2380      	movs	r3, #128	; 0x80
 800a000:	e006      	b.n	800a010 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	685a      	ldr	r2, [r3, #4]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	4413      	add	r3, r2
 800a00a:	2200      	movs	r2, #0
 800a00c:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3714      	adds	r7, #20
 800a014:	46bd      	mov	sp, r7
 800a016:	bc80      	pop	{r7}
 800a018:	4770      	bx	lr

0800a01a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a01a:	b590      	push	{r4, r7, lr}
 800a01c:	b085      	sub	sp, #20
 800a01e:	af02      	add	r7, sp, #8
 800a020:	6078      	str	r0, [r7, #4]
 800a022:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d011      	beq.n	800a050 <osMessageCreate+0x36>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00d      	beq.n	800a050 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6818      	ldr	r0, [r3, #0]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6859      	ldr	r1, [r3, #4]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	689a      	ldr	r2, [r3, #8]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	2400      	movs	r4, #0
 800a046:	9400      	str	r4, [sp, #0]
 800a048:	f000 f9dc 	bl	800a404 <xQueueGenericCreateStatic>
 800a04c:	4603      	mov	r3, r0
 800a04e:	e008      	b.n	800a062 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6818      	ldr	r0, [r3, #0]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	4619      	mov	r1, r3
 800a05c:	f000 fa49 	bl	800a4f2 <xQueueGenericCreate>
 800a060:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a062:	4618      	mov	r0, r3
 800a064:	370c      	adds	r7, #12
 800a066:	46bd      	mov	sp, r7
 800a068:	bd90      	pop	{r4, r7, pc}
	...

0800a06c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b086      	sub	sp, #24
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	60b9      	str	r1, [r7, #8]
 800a076:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a078:	2300      	movs	r3, #0
 800a07a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d101      	bne.n	800a08a <osMessagePut+0x1e>
    ticks = 1;
 800a086:	2301      	movs	r3, #1
 800a088:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a08a:	f7ff fdc3 	bl	8009c14 <inHandlerMode>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d018      	beq.n	800a0c6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a094:	f107 0210 	add.w	r2, r7, #16
 800a098:	f107 0108 	add.w	r1, r7, #8
 800a09c:	2300      	movs	r3, #0
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	f000 fb82 	bl	800a7a8 <xQueueGenericSendFromISR>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d001      	beq.n	800a0ae <osMessagePut+0x42>
      return osErrorOS;
 800a0aa:	23ff      	movs	r3, #255	; 0xff
 800a0ac:	e018      	b.n	800a0e0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d014      	beq.n	800a0de <osMessagePut+0x72>
 800a0b4:	4b0c      	ldr	r3, [pc, #48]	; (800a0e8 <osMessagePut+0x7c>)
 800a0b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ba:	601a      	str	r2, [r3, #0]
 800a0bc:	f3bf 8f4f 	dsb	sy
 800a0c0:	f3bf 8f6f 	isb	sy
 800a0c4:	e00b      	b.n	800a0de <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a0c6:	f107 0108 	add.w	r1, r7, #8
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	697a      	ldr	r2, [r7, #20]
 800a0ce:	68f8      	ldr	r0, [r7, #12]
 800a0d0:	f000 fa6c 	bl	800a5ac <xQueueGenericSend>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d001      	beq.n	800a0de <osMessagePut+0x72>
      return osErrorOS;
 800a0da:	23ff      	movs	r3, #255	; 0xff
 800a0dc:	e000      	b.n	800a0e0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3718      	adds	r7, #24
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	e000ed04 	.word	0xe000ed04

0800a0ec <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a0ec:	b590      	push	{r4, r7, lr}
 800a0ee:	b08b      	sub	sp, #44	; 0x2c
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d10a      	bne.n	800a11c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a106:	2380      	movs	r3, #128	; 0x80
 800a108:	617b      	str	r3, [r7, #20]
    return event;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	461c      	mov	r4, r3
 800a10e:	f107 0314 	add.w	r3, r7, #20
 800a112:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a116:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a11a:	e054      	b.n	800a1c6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a11c:	2300      	movs	r3, #0
 800a11e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a120:	2300      	movs	r3, #0
 800a122:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a12a:	d103      	bne.n	800a134 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a12c:	f04f 33ff 	mov.w	r3, #4294967295
 800a130:	627b      	str	r3, [r7, #36]	; 0x24
 800a132:	e009      	b.n	800a148 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d006      	beq.n	800a148 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a140:	2b00      	cmp	r3, #0
 800a142:	d101      	bne.n	800a148 <osMessageGet+0x5c>
      ticks = 1;
 800a144:	2301      	movs	r3, #1
 800a146:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a148:	f7ff fd64 	bl	8009c14 <inHandlerMode>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d01c      	beq.n	800a18c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a152:	f107 0220 	add.w	r2, r7, #32
 800a156:	f107 0314 	add.w	r3, r7, #20
 800a15a:	3304      	adds	r3, #4
 800a15c:	4619      	mov	r1, r3
 800a15e:	68b8      	ldr	r0, [r7, #8]
 800a160:	f000 fc9a 	bl	800aa98 <xQueueReceiveFromISR>
 800a164:	4603      	mov	r3, r0
 800a166:	2b01      	cmp	r3, #1
 800a168:	d102      	bne.n	800a170 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a16a:	2310      	movs	r3, #16
 800a16c:	617b      	str	r3, [r7, #20]
 800a16e:	e001      	b.n	800a174 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a170:	2300      	movs	r3, #0
 800a172:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a174:	6a3b      	ldr	r3, [r7, #32]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d01d      	beq.n	800a1b6 <osMessageGet+0xca>
 800a17a:	4b15      	ldr	r3, [pc, #84]	; (800a1d0 <osMessageGet+0xe4>)
 800a17c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a180:	601a      	str	r2, [r3, #0]
 800a182:	f3bf 8f4f 	dsb	sy
 800a186:	f3bf 8f6f 	isb	sy
 800a18a:	e014      	b.n	800a1b6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a18c:	f107 0314 	add.w	r3, r7, #20
 800a190:	3304      	adds	r3, #4
 800a192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a194:	4619      	mov	r1, r3
 800a196:	68b8      	ldr	r0, [r7, #8]
 800a198:	f000 fb9e 	bl	800a8d8 <xQueueReceive>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d102      	bne.n	800a1a8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a1a2:	2310      	movs	r3, #16
 800a1a4:	617b      	str	r3, [r7, #20]
 800a1a6:	e006      	b.n	800a1b6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d101      	bne.n	800a1b2 <osMessageGet+0xc6>
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	e000      	b.n	800a1b4 <osMessageGet+0xc8>
 800a1b2:	2340      	movs	r3, #64	; 0x40
 800a1b4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	461c      	mov	r4, r3
 800a1ba:	f107 0314 	add.w	r3, r7, #20
 800a1be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a1c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	372c      	adds	r7, #44	; 0x2c
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd90      	pop	{r4, r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	e000ed04 	.word	0xe000ed04

0800a1d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f103 0208 	add.w	r2, r3, #8
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f103 0208 	add.w	r2, r3, #8
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f103 0208 	add.w	r2, r3, #8
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a208:	bf00      	nop
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bc80      	pop	{r7}
 800a210:	4770      	bx	lr

0800a212 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a212:	b480      	push	{r7}
 800a214:	b083      	sub	sp, #12
 800a216:	af00      	add	r7, sp, #0
 800a218:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2200      	movs	r2, #0
 800a21e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a220:	bf00      	nop
 800a222:	370c      	adds	r7, #12
 800a224:	46bd      	mov	sp, r7
 800a226:	bc80      	pop	{r7}
 800a228:	4770      	bx	lr

0800a22a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a22a:	b480      	push	{r7}
 800a22c:	b085      	sub	sp, #20
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
 800a232:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	689a      	ldr	r2, [r3, #8]
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	683a      	ldr	r2, [r7, #0]
 800a24e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	683a      	ldr	r2, [r7, #0]
 800a254:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	1c5a      	adds	r2, r3, #1
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	601a      	str	r2, [r3, #0]
}
 800a266:	bf00      	nop
 800a268:	3714      	adds	r7, #20
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bc80      	pop	{r7}
 800a26e:	4770      	bx	lr

0800a270 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a286:	d103      	bne.n	800a290 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	60fb      	str	r3, [r7, #12]
 800a28e:	e00c      	b.n	800a2aa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	3308      	adds	r3, #8
 800a294:	60fb      	str	r3, [r7, #12]
 800a296:	e002      	b.n	800a29e <vListInsert+0x2e>
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	60fb      	str	r3, [r7, #12]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	68ba      	ldr	r2, [r7, #8]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d2f6      	bcs.n	800a298 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	685a      	ldr	r2, [r3, #4]
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	683a      	ldr	r2, [r7, #0]
 800a2b8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	683a      	ldr	r2, [r7, #0]
 800a2c4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	1c5a      	adds	r2, r3, #1
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	601a      	str	r2, [r3, #0]
}
 800a2d6:	bf00      	nop
 800a2d8:	3714      	adds	r7, #20
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bc80      	pop	{r7}
 800a2de:	4770      	bx	lr

0800a2e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b085      	sub	sp, #20
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	6892      	ldr	r2, [r2, #8]
 800a2f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	6852      	ldr	r2, [r2, #4]
 800a300:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d103      	bne.n	800a314 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	689a      	ldr	r2, [r3, #8]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	1e5a      	subs	r2, r3, #1
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3714      	adds	r7, #20
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bc80      	pop	{r7}
 800a330:	4770      	bx	lr
	...

0800a334 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d10a      	bne.n	800a35e <xQueueGenericReset+0x2a>
	__asm volatile
 800a348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34c:	f383 8811 	msr	BASEPRI, r3
 800a350:	f3bf 8f6f 	isb	sy
 800a354:	f3bf 8f4f 	dsb	sy
 800a358:	60bb      	str	r3, [r7, #8]
}
 800a35a:	bf00      	nop
 800a35c:	e7fe      	b.n	800a35c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a35e:	f001 fef5 	bl	800c14c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a36a:	68f9      	ldr	r1, [r7, #12]
 800a36c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a36e:	fb01 f303 	mul.w	r3, r1, r3
 800a372:	441a      	add	r2, r3
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2200      	movs	r2, #0
 800a37c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a38e:	3b01      	subs	r3, #1
 800a390:	68f9      	ldr	r1, [r7, #12]
 800a392:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a394:	fb01 f303 	mul.w	r3, r1, r3
 800a398:	441a      	add	r2, r3
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	22ff      	movs	r2, #255	; 0xff
 800a3a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	22ff      	movs	r2, #255	; 0xff
 800a3aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d114      	bne.n	800a3de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d01a      	beq.n	800a3f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	3310      	adds	r3, #16
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f001 f927 	bl	800b614 <xTaskRemoveFromEventList>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d012      	beq.n	800a3f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a3cc:	4b0c      	ldr	r3, [pc, #48]	; (800a400 <xQueueGenericReset+0xcc>)
 800a3ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3d2:	601a      	str	r2, [r3, #0]
 800a3d4:	f3bf 8f4f 	dsb	sy
 800a3d8:	f3bf 8f6f 	isb	sy
 800a3dc:	e009      	b.n	800a3f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	3310      	adds	r3, #16
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7ff fef6 	bl	800a1d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	3324      	adds	r3, #36	; 0x24
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7ff fef1 	bl	800a1d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a3f2:	f001 fedb 	bl	800c1ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a3f6:	2301      	movs	r3, #1
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3710      	adds	r7, #16
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}
 800a400:	e000ed04 	.word	0xe000ed04

0800a404 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a404:	b580      	push	{r7, lr}
 800a406:	b08e      	sub	sp, #56	; 0x38
 800a408:	af02      	add	r7, sp, #8
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
 800a410:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d10a      	bne.n	800a42e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41c:	f383 8811 	msr	BASEPRI, r3
 800a420:	f3bf 8f6f 	isb	sy
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a42a:	bf00      	nop
 800a42c:	e7fe      	b.n	800a42c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10a      	bne.n	800a44a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a446:	bf00      	nop
 800a448:	e7fe      	b.n	800a448 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d002      	beq.n	800a456 <xQueueGenericCreateStatic+0x52>
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d001      	beq.n	800a45a <xQueueGenericCreateStatic+0x56>
 800a456:	2301      	movs	r3, #1
 800a458:	e000      	b.n	800a45c <xQueueGenericCreateStatic+0x58>
 800a45a:	2300      	movs	r3, #0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d10a      	bne.n	800a476 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a464:	f383 8811 	msr	BASEPRI, r3
 800a468:	f3bf 8f6f 	isb	sy
 800a46c:	f3bf 8f4f 	dsb	sy
 800a470:	623b      	str	r3, [r7, #32]
}
 800a472:	bf00      	nop
 800a474:	e7fe      	b.n	800a474 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d102      	bne.n	800a482 <xQueueGenericCreateStatic+0x7e>
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d101      	bne.n	800a486 <xQueueGenericCreateStatic+0x82>
 800a482:	2301      	movs	r3, #1
 800a484:	e000      	b.n	800a488 <xQueueGenericCreateStatic+0x84>
 800a486:	2300      	movs	r3, #0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d10a      	bne.n	800a4a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a490:	f383 8811 	msr	BASEPRI, r3
 800a494:	f3bf 8f6f 	isb	sy
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	61fb      	str	r3, [r7, #28]
}
 800a49e:	bf00      	nop
 800a4a0:	e7fe      	b.n	800a4a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a4a2:	2348      	movs	r3, #72	; 0x48
 800a4a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	2b48      	cmp	r3, #72	; 0x48
 800a4aa:	d00a      	beq.n	800a4c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b0:	f383 8811 	msr	BASEPRI, r3
 800a4b4:	f3bf 8f6f 	isb	sy
 800a4b8:	f3bf 8f4f 	dsb	sy
 800a4bc:	61bb      	str	r3, [r7, #24]
}
 800a4be:	bf00      	nop
 800a4c0:	e7fe      	b.n	800a4c0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d00d      	beq.n	800a4e8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4d4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4da:	9300      	str	r3, [sp, #0]
 800a4dc:	4613      	mov	r3, r2
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	68b9      	ldr	r1, [r7, #8]
 800a4e2:	68f8      	ldr	r0, [r7, #12]
 800a4e4:	f000 f843 	bl	800a56e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3730      	adds	r7, #48	; 0x30
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b08a      	sub	sp, #40	; 0x28
 800a4f6:	af02      	add	r7, sp, #8
 800a4f8:	60f8      	str	r0, [r7, #12]
 800a4fa:	60b9      	str	r1, [r7, #8]
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d10a      	bne.n	800a51c <xQueueGenericCreate+0x2a>
	__asm volatile
 800a506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50a:	f383 8811 	msr	BASEPRI, r3
 800a50e:	f3bf 8f6f 	isb	sy
 800a512:	f3bf 8f4f 	dsb	sy
 800a516:	613b      	str	r3, [r7, #16]
}
 800a518:	bf00      	nop
 800a51a:	e7fe      	b.n	800a51a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d102      	bne.n	800a528 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a522:	2300      	movs	r3, #0
 800a524:	61fb      	str	r3, [r7, #28]
 800a526:	e004      	b.n	800a532 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	68ba      	ldr	r2, [r7, #8]
 800a52c:	fb02 f303 	mul.w	r3, r2, r3
 800a530:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a532:	69fb      	ldr	r3, [r7, #28]
 800a534:	3348      	adds	r3, #72	; 0x48
 800a536:	4618      	mov	r0, r3
 800a538:	f001 ff08 	bl	800c34c <pvPortMalloc>
 800a53c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d00f      	beq.n	800a564 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	3348      	adds	r3, #72	; 0x48
 800a548:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a54a:	69bb      	ldr	r3, [r7, #24]
 800a54c:	2200      	movs	r2, #0
 800a54e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a552:	79fa      	ldrb	r2, [r7, #7]
 800a554:	69bb      	ldr	r3, [r7, #24]
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	4613      	mov	r3, r2
 800a55a:	697a      	ldr	r2, [r7, #20]
 800a55c:	68b9      	ldr	r1, [r7, #8]
 800a55e:	68f8      	ldr	r0, [r7, #12]
 800a560:	f000 f805 	bl	800a56e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a564:	69bb      	ldr	r3, [r7, #24]
	}
 800a566:	4618      	mov	r0, r3
 800a568:	3720      	adds	r7, #32
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a56e:	b580      	push	{r7, lr}
 800a570:	b084      	sub	sp, #16
 800a572:	af00      	add	r7, sp, #0
 800a574:	60f8      	str	r0, [r7, #12]
 800a576:	60b9      	str	r1, [r7, #8]
 800a578:	607a      	str	r2, [r7, #4]
 800a57a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d103      	bne.n	800a58a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	69ba      	ldr	r2, [r7, #24]
 800a586:	601a      	str	r2, [r3, #0]
 800a588:	e002      	b.n	800a590 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a590:	69bb      	ldr	r3, [r7, #24]
 800a592:	68fa      	ldr	r2, [r7, #12]
 800a594:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a596:	69bb      	ldr	r3, [r7, #24]
 800a598:	68ba      	ldr	r2, [r7, #8]
 800a59a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a59c:	2101      	movs	r1, #1
 800a59e:	69b8      	ldr	r0, [r7, #24]
 800a5a0:	f7ff fec8 	bl	800a334 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a5a4:	bf00      	nop
 800a5a6:	3710      	adds	r7, #16
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b08e      	sub	sp, #56	; 0x38
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	607a      	str	r2, [r7, #4]
 800a5b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d10a      	bne.n	800a5de <xQueueGenericSend+0x32>
	__asm volatile
 800a5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5cc:	f383 8811 	msr	BASEPRI, r3
 800a5d0:	f3bf 8f6f 	isb	sy
 800a5d4:	f3bf 8f4f 	dsb	sy
 800a5d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a5da:	bf00      	nop
 800a5dc:	e7fe      	b.n	800a5dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d103      	bne.n	800a5ec <xQueueGenericSend+0x40>
 800a5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d101      	bne.n	800a5f0 <xQueueGenericSend+0x44>
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e000      	b.n	800a5f2 <xQueueGenericSend+0x46>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d10a      	bne.n	800a60c <xQueueGenericSend+0x60>
	__asm volatile
 800a5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fa:	f383 8811 	msr	BASEPRI, r3
 800a5fe:	f3bf 8f6f 	isb	sy
 800a602:	f3bf 8f4f 	dsb	sy
 800a606:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a608:	bf00      	nop
 800a60a:	e7fe      	b.n	800a60a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	2b02      	cmp	r3, #2
 800a610:	d103      	bne.n	800a61a <xQueueGenericSend+0x6e>
 800a612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a616:	2b01      	cmp	r3, #1
 800a618:	d101      	bne.n	800a61e <xQueueGenericSend+0x72>
 800a61a:	2301      	movs	r3, #1
 800a61c:	e000      	b.n	800a620 <xQueueGenericSend+0x74>
 800a61e:	2300      	movs	r3, #0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d10a      	bne.n	800a63a <xQueueGenericSend+0x8e>
	__asm volatile
 800a624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a628:	f383 8811 	msr	BASEPRI, r3
 800a62c:	f3bf 8f6f 	isb	sy
 800a630:	f3bf 8f4f 	dsb	sy
 800a634:	623b      	str	r3, [r7, #32]
}
 800a636:	bf00      	nop
 800a638:	e7fe      	b.n	800a638 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a63a:	f001 f9af 	bl	800b99c <xTaskGetSchedulerState>
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d102      	bne.n	800a64a <xQueueGenericSend+0x9e>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d101      	bne.n	800a64e <xQueueGenericSend+0xa2>
 800a64a:	2301      	movs	r3, #1
 800a64c:	e000      	b.n	800a650 <xQueueGenericSend+0xa4>
 800a64e:	2300      	movs	r3, #0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d10a      	bne.n	800a66a <xQueueGenericSend+0xbe>
	__asm volatile
 800a654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a658:	f383 8811 	msr	BASEPRI, r3
 800a65c:	f3bf 8f6f 	isb	sy
 800a660:	f3bf 8f4f 	dsb	sy
 800a664:	61fb      	str	r3, [r7, #28]
}
 800a666:	bf00      	nop
 800a668:	e7fe      	b.n	800a668 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a66a:	f001 fd6f 	bl	800c14c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a676:	429a      	cmp	r2, r3
 800a678:	d302      	bcc.n	800a680 <xQueueGenericSend+0xd4>
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	d129      	bne.n	800a6d4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a680:	683a      	ldr	r2, [r7, #0]
 800a682:	68b9      	ldr	r1, [r7, #8]
 800a684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a686:	f000 fa87 	bl	800ab98 <prvCopyDataToQueue>
 800a68a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a690:	2b00      	cmp	r3, #0
 800a692:	d010      	beq.n	800a6b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a696:	3324      	adds	r3, #36	; 0x24
 800a698:	4618      	mov	r0, r3
 800a69a:	f000 ffbb 	bl	800b614 <xTaskRemoveFromEventList>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d013      	beq.n	800a6cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a6a4:	4b3f      	ldr	r3, [pc, #252]	; (800a7a4 <xQueueGenericSend+0x1f8>)
 800a6a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6aa:	601a      	str	r2, [r3, #0]
 800a6ac:	f3bf 8f4f 	dsb	sy
 800a6b0:	f3bf 8f6f 	isb	sy
 800a6b4:	e00a      	b.n	800a6cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d007      	beq.n	800a6cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a6bc:	4b39      	ldr	r3, [pc, #228]	; (800a7a4 <xQueueGenericSend+0x1f8>)
 800a6be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6c2:	601a      	str	r2, [r3, #0]
 800a6c4:	f3bf 8f4f 	dsb	sy
 800a6c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a6cc:	f001 fd6e 	bl	800c1ac <vPortExitCritical>
				return pdPASS;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e063      	b.n	800a79c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d103      	bne.n	800a6e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6da:	f001 fd67 	bl	800c1ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	e05c      	b.n	800a79c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d106      	bne.n	800a6f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6e8:	f107 0314 	add.w	r3, r7, #20
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f000 fff3 	bl	800b6d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6f6:	f001 fd59 	bl	800c1ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6fa:	f000 fd9d 	bl	800b238 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6fe:	f001 fd25 	bl	800c14c <vPortEnterCritical>
 800a702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a704:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a708:	b25b      	sxtb	r3, r3
 800a70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a70e:	d103      	bne.n	800a718 <xQueueGenericSend+0x16c>
 800a710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a712:	2200      	movs	r2, #0
 800a714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a71a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a71e:	b25b      	sxtb	r3, r3
 800a720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a724:	d103      	bne.n	800a72e <xQueueGenericSend+0x182>
 800a726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a728:	2200      	movs	r2, #0
 800a72a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a72e:	f001 fd3d 	bl	800c1ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a732:	1d3a      	adds	r2, r7, #4
 800a734:	f107 0314 	add.w	r3, r7, #20
 800a738:	4611      	mov	r1, r2
 800a73a:	4618      	mov	r0, r3
 800a73c:	f000 ffe2 	bl	800b704 <xTaskCheckForTimeOut>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d124      	bne.n	800a790 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a746:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a748:	f000 fb1e 	bl	800ad88 <prvIsQueueFull>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d018      	beq.n	800a784 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a754:	3310      	adds	r3, #16
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	4611      	mov	r1, r2
 800a75a:	4618      	mov	r0, r3
 800a75c:	f000 ff36 	bl	800b5cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a762:	f000 faa9 	bl	800acb8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a766:	f000 fd75 	bl	800b254 <xTaskResumeAll>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	f47f af7c 	bne.w	800a66a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a772:	4b0c      	ldr	r3, [pc, #48]	; (800a7a4 <xQueueGenericSend+0x1f8>)
 800a774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a778:	601a      	str	r2, [r3, #0]
 800a77a:	f3bf 8f4f 	dsb	sy
 800a77e:	f3bf 8f6f 	isb	sy
 800a782:	e772      	b.n	800a66a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a784:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a786:	f000 fa97 	bl	800acb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a78a:	f000 fd63 	bl	800b254 <xTaskResumeAll>
 800a78e:	e76c      	b.n	800a66a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a792:	f000 fa91 	bl	800acb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a796:	f000 fd5d 	bl	800b254 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a79a:	2300      	movs	r3, #0
		}
	}
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3738      	adds	r7, #56	; 0x38
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	e000ed04 	.word	0xe000ed04

0800a7a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b08e      	sub	sp, #56	; 0x38
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	607a      	str	r2, [r7, #4]
 800a7b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d10a      	bne.n	800a7d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c4:	f383 8811 	msr	BASEPRI, r3
 800a7c8:	f3bf 8f6f 	isb	sy
 800a7cc:	f3bf 8f4f 	dsb	sy
 800a7d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a7d2:	bf00      	nop
 800a7d4:	e7fe      	b.n	800a7d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d103      	bne.n	800a7e4 <xQueueGenericSendFromISR+0x3c>
 800a7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d101      	bne.n	800a7e8 <xQueueGenericSendFromISR+0x40>
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	e000      	b.n	800a7ea <xQueueGenericSendFromISR+0x42>
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d10a      	bne.n	800a804 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	623b      	str	r3, [r7, #32]
}
 800a800:	bf00      	nop
 800a802:	e7fe      	b.n	800a802 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	2b02      	cmp	r3, #2
 800a808:	d103      	bne.n	800a812 <xQueueGenericSendFromISR+0x6a>
 800a80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a80e:	2b01      	cmp	r3, #1
 800a810:	d101      	bne.n	800a816 <xQueueGenericSendFromISR+0x6e>
 800a812:	2301      	movs	r3, #1
 800a814:	e000      	b.n	800a818 <xQueueGenericSendFromISR+0x70>
 800a816:	2300      	movs	r3, #0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d10a      	bne.n	800a832 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a820:	f383 8811 	msr	BASEPRI, r3
 800a824:	f3bf 8f6f 	isb	sy
 800a828:	f3bf 8f4f 	dsb	sy
 800a82c:	61fb      	str	r3, [r7, #28]
}
 800a82e:	bf00      	nop
 800a830:	e7fe      	b.n	800a830 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a832:	f001 fd4d 	bl	800c2d0 <vPortValidateInterruptPriority>
	__asm volatile
 800a836:	f3ef 8211 	mrs	r2, BASEPRI
 800a83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83e:	f383 8811 	msr	BASEPRI, r3
 800a842:	f3bf 8f6f 	isb	sy
 800a846:	f3bf 8f4f 	dsb	sy
 800a84a:	61ba      	str	r2, [r7, #24]
 800a84c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a84e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a850:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d302      	bcc.n	800a864 <xQueueGenericSendFromISR+0xbc>
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	2b02      	cmp	r3, #2
 800a862:	d12c      	bne.n	800a8be <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a866:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a86a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a86e:	683a      	ldr	r2, [r7, #0]
 800a870:	68b9      	ldr	r1, [r7, #8]
 800a872:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a874:	f000 f990 	bl	800ab98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a878:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a87c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a880:	d112      	bne.n	800a8a8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a886:	2b00      	cmp	r3, #0
 800a888:	d016      	beq.n	800a8b8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88c:	3324      	adds	r3, #36	; 0x24
 800a88e:	4618      	mov	r0, r3
 800a890:	f000 fec0 	bl	800b614 <xTaskRemoveFromEventList>
 800a894:	4603      	mov	r3, r0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d00e      	beq.n	800a8b8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d00b      	beq.n	800a8b8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	601a      	str	r2, [r3, #0]
 800a8a6:	e007      	b.n	800a8b8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a8a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	b25a      	sxtb	r2, r3
 800a8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a8bc:	e001      	b.n	800a8c2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	637b      	str	r3, [r7, #52]	; 0x34
 800a8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	f383 8811 	msr	BASEPRI, r3
}
 800a8cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a8ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3738      	adds	r7, #56	; 0x38
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b08c      	sub	sp, #48	; 0x30
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	60f8      	str	r0, [r7, #12]
 800a8e0:	60b9      	str	r1, [r7, #8]
 800a8e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d10a      	bne.n	800a908 <xQueueReceive+0x30>
	__asm volatile
 800a8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f6:	f383 8811 	msr	BASEPRI, r3
 800a8fa:	f3bf 8f6f 	isb	sy
 800a8fe:	f3bf 8f4f 	dsb	sy
 800a902:	623b      	str	r3, [r7, #32]
}
 800a904:	bf00      	nop
 800a906:	e7fe      	b.n	800a906 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d103      	bne.n	800a916 <xQueueReceive+0x3e>
 800a90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a912:	2b00      	cmp	r3, #0
 800a914:	d101      	bne.n	800a91a <xQueueReceive+0x42>
 800a916:	2301      	movs	r3, #1
 800a918:	e000      	b.n	800a91c <xQueueReceive+0x44>
 800a91a:	2300      	movs	r3, #0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d10a      	bne.n	800a936 <xQueueReceive+0x5e>
	__asm volatile
 800a920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a924:	f383 8811 	msr	BASEPRI, r3
 800a928:	f3bf 8f6f 	isb	sy
 800a92c:	f3bf 8f4f 	dsb	sy
 800a930:	61fb      	str	r3, [r7, #28]
}
 800a932:	bf00      	nop
 800a934:	e7fe      	b.n	800a934 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a936:	f001 f831 	bl	800b99c <xTaskGetSchedulerState>
 800a93a:	4603      	mov	r3, r0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d102      	bne.n	800a946 <xQueueReceive+0x6e>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d101      	bne.n	800a94a <xQueueReceive+0x72>
 800a946:	2301      	movs	r3, #1
 800a948:	e000      	b.n	800a94c <xQueueReceive+0x74>
 800a94a:	2300      	movs	r3, #0
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d10a      	bne.n	800a966 <xQueueReceive+0x8e>
	__asm volatile
 800a950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a954:	f383 8811 	msr	BASEPRI, r3
 800a958:	f3bf 8f6f 	isb	sy
 800a95c:	f3bf 8f4f 	dsb	sy
 800a960:	61bb      	str	r3, [r7, #24]
}
 800a962:	bf00      	nop
 800a964:	e7fe      	b.n	800a964 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a966:	f001 fbf1 	bl	800c14c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a96e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a972:	2b00      	cmp	r3, #0
 800a974:	d01f      	beq.n	800a9b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a976:	68b9      	ldr	r1, [r7, #8]
 800a978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a97a:	f000 f977 	bl	800ac6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a980:	1e5a      	subs	r2, r3, #1
 800a982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a984:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a988:	691b      	ldr	r3, [r3, #16]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d00f      	beq.n	800a9ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a990:	3310      	adds	r3, #16
 800a992:	4618      	mov	r0, r3
 800a994:	f000 fe3e 	bl	800b614 <xTaskRemoveFromEventList>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d007      	beq.n	800a9ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a99e:	4b3d      	ldr	r3, [pc, #244]	; (800aa94 <xQueueReceive+0x1bc>)
 800a9a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9a4:	601a      	str	r2, [r3, #0]
 800a9a6:	f3bf 8f4f 	dsb	sy
 800a9aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a9ae:	f001 fbfd 	bl	800c1ac <vPortExitCritical>
				return pdPASS;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e069      	b.n	800aa8a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d103      	bne.n	800a9c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a9bc:	f001 fbf6 	bl	800c1ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	e062      	b.n	800aa8a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d106      	bne.n	800a9d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9ca:	f107 0310 	add.w	r3, r7, #16
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f000 fe82 	bl	800b6d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9d8:	f001 fbe8 	bl	800c1ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9dc:	f000 fc2c 	bl	800b238 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9e0:	f001 fbb4 	bl	800c14c <vPortEnterCritical>
 800a9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9ea:	b25b      	sxtb	r3, r3
 800a9ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f0:	d103      	bne.n	800a9fa <xQueueReceive+0x122>
 800a9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa00:	b25b      	sxtb	r3, r3
 800aa02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa06:	d103      	bne.n	800aa10 <xQueueReceive+0x138>
 800aa08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa10:	f001 fbcc 	bl	800c1ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa14:	1d3a      	adds	r2, r7, #4
 800aa16:	f107 0310 	add.w	r3, r7, #16
 800aa1a:	4611      	mov	r1, r2
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f000 fe71 	bl	800b704 <xTaskCheckForTimeOut>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d123      	bne.n	800aa70 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa2a:	f000 f997 	bl	800ad5c <prvIsQueueEmpty>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d017      	beq.n	800aa64 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa36:	3324      	adds	r3, #36	; 0x24
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	4611      	mov	r1, r2
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f000 fdc5 	bl	800b5cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa44:	f000 f938 	bl	800acb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa48:	f000 fc04 	bl	800b254 <xTaskResumeAll>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d189      	bne.n	800a966 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800aa52:	4b10      	ldr	r3, [pc, #64]	; (800aa94 <xQueueReceive+0x1bc>)
 800aa54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa58:	601a      	str	r2, [r3, #0]
 800aa5a:	f3bf 8f4f 	dsb	sy
 800aa5e:	f3bf 8f6f 	isb	sy
 800aa62:	e780      	b.n	800a966 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aa64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa66:	f000 f927 	bl	800acb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa6a:	f000 fbf3 	bl	800b254 <xTaskResumeAll>
 800aa6e:	e77a      	b.n	800a966 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aa70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa72:	f000 f921 	bl	800acb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa76:	f000 fbed 	bl	800b254 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa7c:	f000 f96e 	bl	800ad5c <prvIsQueueEmpty>
 800aa80:	4603      	mov	r3, r0
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	f43f af6f 	beq.w	800a966 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3730      	adds	r7, #48	; 0x30
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	e000ed04 	.word	0xe000ed04

0800aa98 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b08e      	sub	sp, #56	; 0x38
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	60f8      	str	r0, [r7, #12]
 800aaa0:	60b9      	str	r1, [r7, #8]
 800aaa2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aaa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d10a      	bne.n	800aac4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800aaae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab2:	f383 8811 	msr	BASEPRI, r3
 800aab6:	f3bf 8f6f 	isb	sy
 800aaba:	f3bf 8f4f 	dsb	sy
 800aabe:	623b      	str	r3, [r7, #32]
}
 800aac0:	bf00      	nop
 800aac2:	e7fe      	b.n	800aac2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d103      	bne.n	800aad2 <xQueueReceiveFromISR+0x3a>
 800aaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aacc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d101      	bne.n	800aad6 <xQueueReceiveFromISR+0x3e>
 800aad2:	2301      	movs	r3, #1
 800aad4:	e000      	b.n	800aad8 <xQueueReceiveFromISR+0x40>
 800aad6:	2300      	movs	r3, #0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d10a      	bne.n	800aaf2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800aadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae0:	f383 8811 	msr	BASEPRI, r3
 800aae4:	f3bf 8f6f 	isb	sy
 800aae8:	f3bf 8f4f 	dsb	sy
 800aaec:	61fb      	str	r3, [r7, #28]
}
 800aaee:	bf00      	nop
 800aaf0:	e7fe      	b.n	800aaf0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aaf2:	f001 fbed 	bl	800c2d0 <vPortValidateInterruptPriority>
	__asm volatile
 800aaf6:	f3ef 8211 	mrs	r2, BASEPRI
 800aafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aafe:	f383 8811 	msr	BASEPRI, r3
 800ab02:	f3bf 8f6f 	isb	sy
 800ab06:	f3bf 8f4f 	dsb	sy
 800ab0a:	61ba      	str	r2, [r7, #24]
 800ab0c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ab0e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab16:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d02f      	beq.n	800ab7e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ab1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab28:	68b9      	ldr	r1, [r7, #8]
 800ab2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab2c:	f000 f89e 	bl	800ac6c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab32:	1e5a      	subs	r2, r3, #1
 800ab34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab36:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ab38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab40:	d112      	bne.n	800ab68 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab44:	691b      	ldr	r3, [r3, #16]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d016      	beq.n	800ab78 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4c:	3310      	adds	r3, #16
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f000 fd60 	bl	800b614 <xTaskRemoveFromEventList>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d00e      	beq.n	800ab78 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d00b      	beq.n	800ab78 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2201      	movs	r2, #1
 800ab64:	601a      	str	r2, [r3, #0]
 800ab66:	e007      	b.n	800ab78 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ab68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab6c:	3301      	adds	r3, #1
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	b25a      	sxtb	r2, r3
 800ab72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	637b      	str	r3, [r7, #52]	; 0x34
 800ab7c:	e001      	b.n	800ab82 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	637b      	str	r3, [r7, #52]	; 0x34
 800ab82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab84:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	f383 8811 	msr	BASEPRI, r3
}
 800ab8c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3738      	adds	r7, #56	; 0x38
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b086      	sub	sp, #24
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aba4:	2300      	movs	r3, #0
 800aba6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d10d      	bne.n	800abd2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d14d      	bne.n	800ac5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	4618      	mov	r0, r3
 800abc4:	f000 ff08 	bl	800b9d8 <xTaskPriorityDisinherit>
 800abc8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2200      	movs	r2, #0
 800abce:	605a      	str	r2, [r3, #4]
 800abd0:	e043      	b.n	800ac5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d119      	bne.n	800ac0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6898      	ldr	r0, [r3, #8]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe0:	461a      	mov	r2, r3
 800abe2:	68b9      	ldr	r1, [r7, #8]
 800abe4:	f004 f9a3 	bl	800ef2e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	689a      	ldr	r2, [r3, #8]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abf0:	441a      	add	r2, r3
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	689a      	ldr	r2, [r3, #8]
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d32b      	bcc.n	800ac5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	609a      	str	r2, [r3, #8]
 800ac0a:	e026      	b.n	800ac5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	68d8      	ldr	r0, [r3, #12]
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac14:	461a      	mov	r2, r3
 800ac16:	68b9      	ldr	r1, [r7, #8]
 800ac18:	f004 f989 	bl	800ef2e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	68da      	ldr	r2, [r3, #12]
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac24:	425b      	negs	r3, r3
 800ac26:	441a      	add	r2, r3
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	68da      	ldr	r2, [r3, #12]
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d207      	bcs.n	800ac48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	685a      	ldr	r2, [r3, #4]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac40:	425b      	negs	r3, r3
 800ac42:	441a      	add	r2, r3
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2b02      	cmp	r3, #2
 800ac4c:	d105      	bne.n	800ac5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d002      	beq.n	800ac5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	3b01      	subs	r3, #1
 800ac58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	1c5a      	adds	r2, r3, #1
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ac62:	697b      	ldr	r3, [r7, #20]
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3718      	adds	r7, #24
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d018      	beq.n	800acb0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	68da      	ldr	r2, [r3, #12]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac86:	441a      	add	r2, r3
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	68da      	ldr	r2, [r3, #12]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d303      	bcc.n	800aca0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	68d9      	ldr	r1, [r3, #12]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca8:	461a      	mov	r2, r3
 800acaa:	6838      	ldr	r0, [r7, #0]
 800acac:	f004 f93f 	bl	800ef2e <memcpy>
	}
}
 800acb0:	bf00      	nop
 800acb2:	3708      	adds	r7, #8
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800acc0:	f001 fa44 	bl	800c14c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800accc:	e011      	b.n	800acf2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d012      	beq.n	800acfc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	3324      	adds	r3, #36	; 0x24
 800acda:	4618      	mov	r0, r3
 800acdc:	f000 fc9a 	bl	800b614 <xTaskRemoveFromEventList>
 800ace0:	4603      	mov	r3, r0
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d001      	beq.n	800acea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ace6:	f000 fd6f 	bl	800b7c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800acea:	7bfb      	ldrb	r3, [r7, #15]
 800acec:	3b01      	subs	r3, #1
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800acf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	dce9      	bgt.n	800acce <prvUnlockQueue+0x16>
 800acfa:	e000      	b.n	800acfe <prvUnlockQueue+0x46>
					break;
 800acfc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	22ff      	movs	r2, #255	; 0xff
 800ad02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ad06:	f001 fa51 	bl	800c1ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ad0a:	f001 fa1f 	bl	800c14c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad16:	e011      	b.n	800ad3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	691b      	ldr	r3, [r3, #16]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d012      	beq.n	800ad46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	3310      	adds	r3, #16
 800ad24:	4618      	mov	r0, r3
 800ad26:	f000 fc75 	bl	800b614 <xTaskRemoveFromEventList>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d001      	beq.n	800ad34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ad30:	f000 fd4a 	bl	800b7c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ad34:	7bbb      	ldrb	r3, [r7, #14]
 800ad36:	3b01      	subs	r3, #1
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	dce9      	bgt.n	800ad18 <prvUnlockQueue+0x60>
 800ad44:	e000      	b.n	800ad48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ad46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	22ff      	movs	r2, #255	; 0xff
 800ad4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ad50:	f001 fa2c 	bl	800c1ac <vPortExitCritical>
}
 800ad54:	bf00      	nop
 800ad56:	3710      	adds	r7, #16
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad64:	f001 f9f2 	bl	800c14c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d102      	bne.n	800ad76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ad70:	2301      	movs	r3, #1
 800ad72:	60fb      	str	r3, [r7, #12]
 800ad74:	e001      	b.n	800ad7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ad76:	2300      	movs	r3, #0
 800ad78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad7a:	f001 fa17 	bl	800c1ac <vPortExitCritical>

	return xReturn;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3710      	adds	r7, #16
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad90:	f001 f9dc 	bl	800c14c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d102      	bne.n	800ada6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ada0:	2301      	movs	r3, #1
 800ada2:	60fb      	str	r3, [r7, #12]
 800ada4:	e001      	b.n	800adaa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ada6:	2300      	movs	r3, #0
 800ada8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800adaa:	f001 f9ff 	bl	800c1ac <vPortExitCritical>

	return xReturn;
 800adae:	68fb      	ldr	r3, [r7, #12]
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3710      	adds	r7, #16
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b08e      	sub	sp, #56	; 0x38
 800adbc:	af04      	add	r7, sp, #16
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	607a      	str	r2, [r7, #4]
 800adc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800adc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d10a      	bne.n	800ade2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800adcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add0:	f383 8811 	msr	BASEPRI, r3
 800add4:	f3bf 8f6f 	isb	sy
 800add8:	f3bf 8f4f 	dsb	sy
 800addc:	623b      	str	r3, [r7, #32]
}
 800adde:	bf00      	nop
 800ade0:	e7fe      	b.n	800ade0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ade2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d10a      	bne.n	800adfe <xTaskCreateStatic+0x46>
	__asm volatile
 800ade8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adec:	f383 8811 	msr	BASEPRI, r3
 800adf0:	f3bf 8f6f 	isb	sy
 800adf4:	f3bf 8f4f 	dsb	sy
 800adf8:	61fb      	str	r3, [r7, #28]
}
 800adfa:	bf00      	nop
 800adfc:	e7fe      	b.n	800adfc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800adfe:	23b0      	movs	r3, #176	; 0xb0
 800ae00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	2bb0      	cmp	r3, #176	; 0xb0
 800ae06:	d00a      	beq.n	800ae1e <xTaskCreateStatic+0x66>
	__asm volatile
 800ae08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0c:	f383 8811 	msr	BASEPRI, r3
 800ae10:	f3bf 8f6f 	isb	sy
 800ae14:	f3bf 8f4f 	dsb	sy
 800ae18:	61bb      	str	r3, [r7, #24]
}
 800ae1a:	bf00      	nop
 800ae1c:	e7fe      	b.n	800ae1c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ae1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d01e      	beq.n	800ae62 <xTaskCreateStatic+0xaa>
 800ae24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d01b      	beq.n	800ae62 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae2c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ae2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae32:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ae34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae36:	2202      	movs	r2, #2
 800ae38:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	9303      	str	r3, [sp, #12]
 800ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae42:	9302      	str	r3, [sp, #8]
 800ae44:	f107 0314 	add.w	r3, r7, #20
 800ae48:	9301      	str	r3, [sp, #4]
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4c:	9300      	str	r3, [sp, #0]
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	68b9      	ldr	r1, [r7, #8]
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f000 f851 	bl	800aefc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae5c:	f000 f8e4 	bl	800b028 <prvAddNewTaskToReadyList>
 800ae60:	e001      	b.n	800ae66 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800ae62:	2300      	movs	r3, #0
 800ae64:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ae66:	697b      	ldr	r3, [r7, #20]
	}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3728      	adds	r7, #40	; 0x28
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b08c      	sub	sp, #48	; 0x30
 800ae74:	af04      	add	r7, sp, #16
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	603b      	str	r3, [r7, #0]
 800ae7c:	4613      	mov	r3, r2
 800ae7e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae80:	88fb      	ldrh	r3, [r7, #6]
 800ae82:	009b      	lsls	r3, r3, #2
 800ae84:	4618      	mov	r0, r3
 800ae86:	f001 fa61 	bl	800c34c <pvPortMalloc>
 800ae8a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d00e      	beq.n	800aeb0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800ae92:	20b0      	movs	r0, #176	; 0xb0
 800ae94:	f001 fa5a 	bl	800c34c <pvPortMalloc>
 800ae98:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae9a:	69fb      	ldr	r3, [r7, #28]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d003      	beq.n	800aea8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aea0:	69fb      	ldr	r3, [r7, #28]
 800aea2:	697a      	ldr	r2, [r7, #20]
 800aea4:	631a      	str	r2, [r3, #48]	; 0x30
 800aea6:	e005      	b.n	800aeb4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aea8:	6978      	ldr	r0, [r7, #20]
 800aeaa:	f001 fb13 	bl	800c4d4 <vPortFree>
 800aeae:	e001      	b.n	800aeb4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aeb4:	69fb      	ldr	r3, [r7, #28]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d017      	beq.n	800aeea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	2200      	movs	r2, #0
 800aebe:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aec2:	88fa      	ldrh	r2, [r7, #6]
 800aec4:	2300      	movs	r3, #0
 800aec6:	9303      	str	r3, [sp, #12]
 800aec8:	69fb      	ldr	r3, [r7, #28]
 800aeca:	9302      	str	r3, [sp, #8]
 800aecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aece:	9301      	str	r3, [sp, #4]
 800aed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed2:	9300      	str	r3, [sp, #0]
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	68b9      	ldr	r1, [r7, #8]
 800aed8:	68f8      	ldr	r0, [r7, #12]
 800aeda:	f000 f80f 	bl	800aefc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aede:	69f8      	ldr	r0, [r7, #28]
 800aee0:	f000 f8a2 	bl	800b028 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aee4:	2301      	movs	r3, #1
 800aee6:	61bb      	str	r3, [r7, #24]
 800aee8:	e002      	b.n	800aef0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aeea:	f04f 33ff 	mov.w	r3, #4294967295
 800aeee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aef0:	69bb      	ldr	r3, [r7, #24]
	}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3720      	adds	r7, #32
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
	...

0800aefc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b088      	sub	sp, #32
 800af00:	af00      	add	r7, sp, #0
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	607a      	str	r2, [r7, #4]
 800af08:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800af0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800af14:	3b01      	subs	r3, #1
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	4413      	add	r3, r2
 800af1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800af1c:	69bb      	ldr	r3, [r7, #24]
 800af1e:	f023 0307 	bic.w	r3, r3, #7
 800af22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	f003 0307 	and.w	r3, r3, #7
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d00a      	beq.n	800af44 <prvInitialiseNewTask+0x48>
	__asm volatile
 800af2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af32:	f383 8811 	msr	BASEPRI, r3
 800af36:	f3bf 8f6f 	isb	sy
 800af3a:	f3bf 8f4f 	dsb	sy
 800af3e:	617b      	str	r3, [r7, #20]
}
 800af40:	bf00      	nop
 800af42:	e7fe      	b.n	800af42 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af44:	2300      	movs	r3, #0
 800af46:	61fb      	str	r3, [r7, #28]
 800af48:	e012      	b.n	800af70 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800af4a:	68ba      	ldr	r2, [r7, #8]
 800af4c:	69fb      	ldr	r3, [r7, #28]
 800af4e:	4413      	add	r3, r2
 800af50:	7819      	ldrb	r1, [r3, #0]
 800af52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af54:	69fb      	ldr	r3, [r7, #28]
 800af56:	4413      	add	r3, r2
 800af58:	3334      	adds	r3, #52	; 0x34
 800af5a:	460a      	mov	r2, r1
 800af5c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800af5e:	68ba      	ldr	r2, [r7, #8]
 800af60:	69fb      	ldr	r3, [r7, #28]
 800af62:	4413      	add	r3, r2
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d006      	beq.n	800af78 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af6a:	69fb      	ldr	r3, [r7, #28]
 800af6c:	3301      	adds	r3, #1
 800af6e:	61fb      	str	r3, [r7, #28]
 800af70:	69fb      	ldr	r3, [r7, #28]
 800af72:	2b1f      	cmp	r3, #31
 800af74:	d9e9      	bls.n	800af4a <prvInitialiseNewTask+0x4e>
 800af76:	e000      	b.n	800af7a <prvInitialiseNewTask+0x7e>
		{
			break;
 800af78:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800af7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7c:	2200      	movs	r2, #0
 800af7e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800af82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af84:	2b06      	cmp	r3, #6
 800af86:	d901      	bls.n	800af8c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800af88:	2306      	movs	r3, #6
 800af8a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800af8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af90:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af96:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 800af98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9a:	2200      	movs	r2, #0
 800af9c:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa0:	3304      	adds	r3, #4
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7ff f935 	bl	800a212 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800afa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afaa:	3318      	adds	r3, #24
 800afac:	4618      	mov	r0, r3
 800afae:	f7ff f930 	bl	800a212 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800afb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afb6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afba:	f1c3 0207 	rsb	r2, r3, #7
 800afbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800afc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afc6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800afc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afca:	2200      	movs	r2, #0
 800afcc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800afd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd2:	2200      	movs	r2, #0
 800afd4:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800afd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afda:	335c      	adds	r3, #92	; 0x5c
 800afdc:	224c      	movs	r2, #76	; 0x4c
 800afde:	2100      	movs	r1, #0
 800afe0:	4618      	mov	r0, r3
 800afe2:	f003 f8b6 	bl	800e152 <memset>
 800afe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe8:	4a0c      	ldr	r2, [pc, #48]	; (800b01c <prvInitialiseNewTask+0x120>)
 800afea:	661a      	str	r2, [r3, #96]	; 0x60
 800afec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afee:	4a0c      	ldr	r2, [pc, #48]	; (800b020 <prvInitialiseNewTask+0x124>)
 800aff0:	665a      	str	r2, [r3, #100]	; 0x64
 800aff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff4:	4a0b      	ldr	r2, [pc, #44]	; (800b024 <prvInitialiseNewTask+0x128>)
 800aff6:	669a      	str	r2, [r3, #104]	; 0x68
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aff8:	683a      	ldr	r2, [r7, #0]
 800affa:	68f9      	ldr	r1, [r7, #12]
 800affc:	69b8      	ldr	r0, [r7, #24]
 800affe:	f000 ffb1 	bl	800bf64 <pxPortInitialiseStack>
 800b002:	4602      	mov	r2, r0
 800b004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b006:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d002      	beq.n	800b014 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b012:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b014:	bf00      	nop
 800b016:	3720      	adds	r7, #32
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	20005a28 	.word	0x20005a28
 800b020:	20005a90 	.word	0x20005a90
 800b024:	20005af8 	.word	0x20005af8

0800b028 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b030:	f001 f88c 	bl	800c14c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b034:	4b2a      	ldr	r3, [pc, #168]	; (800b0e0 <prvAddNewTaskToReadyList+0xb8>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	3301      	adds	r3, #1
 800b03a:	4a29      	ldr	r2, [pc, #164]	; (800b0e0 <prvAddNewTaskToReadyList+0xb8>)
 800b03c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b03e:	4b29      	ldr	r3, [pc, #164]	; (800b0e4 <prvAddNewTaskToReadyList+0xbc>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d109      	bne.n	800b05a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b046:	4a27      	ldr	r2, [pc, #156]	; (800b0e4 <prvAddNewTaskToReadyList+0xbc>)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b04c:	4b24      	ldr	r3, [pc, #144]	; (800b0e0 <prvAddNewTaskToReadyList+0xb8>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2b01      	cmp	r3, #1
 800b052:	d110      	bne.n	800b076 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b054:	f000 fbdc 	bl	800b810 <prvInitialiseTaskLists>
 800b058:	e00d      	b.n	800b076 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b05a:	4b23      	ldr	r3, [pc, #140]	; (800b0e8 <prvAddNewTaskToReadyList+0xc0>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d109      	bne.n	800b076 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b062:	4b20      	ldr	r3, [pc, #128]	; (800b0e4 <prvAddNewTaskToReadyList+0xbc>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d802      	bhi.n	800b076 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b070:	4a1c      	ldr	r2, [pc, #112]	; (800b0e4 <prvAddNewTaskToReadyList+0xbc>)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b076:	4b1d      	ldr	r3, [pc, #116]	; (800b0ec <prvAddNewTaskToReadyList+0xc4>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	3301      	adds	r3, #1
 800b07c:	4a1b      	ldr	r2, [pc, #108]	; (800b0ec <prvAddNewTaskToReadyList+0xc4>)
 800b07e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b084:	2201      	movs	r2, #1
 800b086:	409a      	lsls	r2, r3
 800b088:	4b19      	ldr	r3, [pc, #100]	; (800b0f0 <prvAddNewTaskToReadyList+0xc8>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4313      	orrs	r3, r2
 800b08e:	4a18      	ldr	r2, [pc, #96]	; (800b0f0 <prvAddNewTaskToReadyList+0xc8>)
 800b090:	6013      	str	r3, [r2, #0]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b096:	4613      	mov	r3, r2
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	4413      	add	r3, r2
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	4a15      	ldr	r2, [pc, #84]	; (800b0f4 <prvAddNewTaskToReadyList+0xcc>)
 800b0a0:	441a      	add	r2, r3
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	3304      	adds	r3, #4
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	4610      	mov	r0, r2
 800b0aa:	f7ff f8be 	bl	800a22a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b0ae:	f001 f87d 	bl	800c1ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b0b2:	4b0d      	ldr	r3, [pc, #52]	; (800b0e8 <prvAddNewTaskToReadyList+0xc0>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d00e      	beq.n	800b0d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b0ba:	4b0a      	ldr	r3, [pc, #40]	; (800b0e4 <prvAddNewTaskToReadyList+0xbc>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d207      	bcs.n	800b0d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b0c8:	4b0b      	ldr	r3, [pc, #44]	; (800b0f8 <prvAddNewTaskToReadyList+0xd0>)
 800b0ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0ce:	601a      	str	r2, [r3, #0]
 800b0d0:	f3bf 8f4f 	dsb	sy
 800b0d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0d8:	bf00      	nop
 800b0da:	3708      	adds	r7, #8
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	200009d4 	.word	0x200009d4
 800b0e4:	200008d4 	.word	0x200008d4
 800b0e8:	200009e0 	.word	0x200009e0
 800b0ec:	200009f0 	.word	0x200009f0
 800b0f0:	200009dc 	.word	0x200009dc
 800b0f4:	200008d8 	.word	0x200008d8
 800b0f8:	e000ed04 	.word	0xe000ed04

0800b0fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b104:	2300      	movs	r3, #0
 800b106:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d017      	beq.n	800b13e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b10e:	4b13      	ldr	r3, [pc, #76]	; (800b15c <vTaskDelay+0x60>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d00a      	beq.n	800b12c <vTaskDelay+0x30>
	__asm volatile
 800b116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11a:	f383 8811 	msr	BASEPRI, r3
 800b11e:	f3bf 8f6f 	isb	sy
 800b122:	f3bf 8f4f 	dsb	sy
 800b126:	60bb      	str	r3, [r7, #8]
}
 800b128:	bf00      	nop
 800b12a:	e7fe      	b.n	800b12a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b12c:	f000 f884 	bl	800b238 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b130:	2100      	movs	r1, #0
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f000 feb0 	bl	800be98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b138:	f000 f88c 	bl	800b254 <xTaskResumeAll>
 800b13c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d107      	bne.n	800b154 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b144:	4b06      	ldr	r3, [pc, #24]	; (800b160 <vTaskDelay+0x64>)
 800b146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b14a:	601a      	str	r2, [r3, #0]
 800b14c:	f3bf 8f4f 	dsb	sy
 800b150:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b154:	bf00      	nop
 800b156:	3710      	adds	r7, #16
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}
 800b15c:	200009fc 	.word	0x200009fc
 800b160:	e000ed04 	.word	0xe000ed04

0800b164 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b08a      	sub	sp, #40	; 0x28
 800b168:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b16a:	2300      	movs	r3, #0
 800b16c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b16e:	2300      	movs	r3, #0
 800b170:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b172:	463a      	mov	r2, r7
 800b174:	1d39      	adds	r1, r7, #4
 800b176:	f107 0308 	add.w	r3, r7, #8
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7f6 fee8 	bl	8001f50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b180:	6839      	ldr	r1, [r7, #0]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	68ba      	ldr	r2, [r7, #8]
 800b186:	9202      	str	r2, [sp, #8]
 800b188:	9301      	str	r3, [sp, #4]
 800b18a:	2300      	movs	r3, #0
 800b18c:	9300      	str	r3, [sp, #0]
 800b18e:	2300      	movs	r3, #0
 800b190:	460a      	mov	r2, r1
 800b192:	4921      	ldr	r1, [pc, #132]	; (800b218 <vTaskStartScheduler+0xb4>)
 800b194:	4821      	ldr	r0, [pc, #132]	; (800b21c <vTaskStartScheduler+0xb8>)
 800b196:	f7ff fe0f 	bl	800adb8 <xTaskCreateStatic>
 800b19a:	4603      	mov	r3, r0
 800b19c:	4a20      	ldr	r2, [pc, #128]	; (800b220 <vTaskStartScheduler+0xbc>)
 800b19e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b1a0:	4b1f      	ldr	r3, [pc, #124]	; (800b220 <vTaskStartScheduler+0xbc>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d002      	beq.n	800b1ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	617b      	str	r3, [r7, #20]
 800b1ac:	e001      	b.n	800b1b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d11b      	bne.n	800b1f0 <vTaskStartScheduler+0x8c>
	__asm volatile
 800b1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1bc:	f383 8811 	msr	BASEPRI, r3
 800b1c0:	f3bf 8f6f 	isb	sy
 800b1c4:	f3bf 8f4f 	dsb	sy
 800b1c8:	613b      	str	r3, [r7, #16]
}
 800b1ca:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b1cc:	4b15      	ldr	r3, [pc, #84]	; (800b224 <vTaskStartScheduler+0xc0>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	335c      	adds	r3, #92	; 0x5c
 800b1d2:	4a15      	ldr	r2, [pc, #84]	; (800b228 <vTaskStartScheduler+0xc4>)
 800b1d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b1d6:	4b15      	ldr	r3, [pc, #84]	; (800b22c <vTaskStartScheduler+0xc8>)
 800b1d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b1dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b1de:	4b14      	ldr	r3, [pc, #80]	; (800b230 <vTaskStartScheduler+0xcc>)
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b1e4:	4b13      	ldr	r3, [pc, #76]	; (800b234 <vTaskStartScheduler+0xd0>)
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b1ea:	f000 ff3d 	bl	800c068 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b1ee:	e00e      	b.n	800b20e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1f6:	d10a      	bne.n	800b20e <vTaskStartScheduler+0xaa>
	__asm volatile
 800b1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fc:	f383 8811 	msr	BASEPRI, r3
 800b200:	f3bf 8f6f 	isb	sy
 800b204:	f3bf 8f4f 	dsb	sy
 800b208:	60fb      	str	r3, [r7, #12]
}
 800b20a:	bf00      	nop
 800b20c:	e7fe      	b.n	800b20c <vTaskStartScheduler+0xa8>
}
 800b20e:	bf00      	nop
 800b210:	3718      	adds	r7, #24
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	08011f94 	.word	0x08011f94
 800b21c:	0800b7e1 	.word	0x0800b7e1
 800b220:	200009f8 	.word	0x200009f8
 800b224:	200008d4 	.word	0x200008d4
 800b228:	200002d0 	.word	0x200002d0
 800b22c:	200009f4 	.word	0x200009f4
 800b230:	200009e0 	.word	0x200009e0
 800b234:	200009d8 	.word	0x200009d8

0800b238 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b238:	b480      	push	{r7}
 800b23a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b23c:	4b04      	ldr	r3, [pc, #16]	; (800b250 <vTaskSuspendAll+0x18>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	3301      	adds	r3, #1
 800b242:	4a03      	ldr	r2, [pc, #12]	; (800b250 <vTaskSuspendAll+0x18>)
 800b244:	6013      	str	r3, [r2, #0]
}
 800b246:	bf00      	nop
 800b248:	46bd      	mov	sp, r7
 800b24a:	bc80      	pop	{r7}
 800b24c:	4770      	bx	lr
 800b24e:	bf00      	nop
 800b250:	200009fc 	.word	0x200009fc

0800b254 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b084      	sub	sp, #16
 800b258:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b25a:	2300      	movs	r3, #0
 800b25c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b25e:	2300      	movs	r3, #0
 800b260:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b262:	4b41      	ldr	r3, [pc, #260]	; (800b368 <xTaskResumeAll+0x114>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d10a      	bne.n	800b280 <xTaskResumeAll+0x2c>
	__asm volatile
 800b26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26e:	f383 8811 	msr	BASEPRI, r3
 800b272:	f3bf 8f6f 	isb	sy
 800b276:	f3bf 8f4f 	dsb	sy
 800b27a:	603b      	str	r3, [r7, #0]
}
 800b27c:	bf00      	nop
 800b27e:	e7fe      	b.n	800b27e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b280:	f000 ff64 	bl	800c14c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b284:	4b38      	ldr	r3, [pc, #224]	; (800b368 <xTaskResumeAll+0x114>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	3b01      	subs	r3, #1
 800b28a:	4a37      	ldr	r2, [pc, #220]	; (800b368 <xTaskResumeAll+0x114>)
 800b28c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b28e:	4b36      	ldr	r3, [pc, #216]	; (800b368 <xTaskResumeAll+0x114>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d161      	bne.n	800b35a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b296:	4b35      	ldr	r3, [pc, #212]	; (800b36c <xTaskResumeAll+0x118>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d05d      	beq.n	800b35a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b29e:	e02e      	b.n	800b2fe <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b2a0:	4b33      	ldr	r3, [pc, #204]	; (800b370 <xTaskResumeAll+0x11c>)
 800b2a2:	68db      	ldr	r3, [r3, #12]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	3318      	adds	r3, #24
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7ff f817 	bl	800a2e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	3304      	adds	r3, #4
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7ff f812 	bl	800a2e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	409a      	lsls	r2, r3
 800b2c4:	4b2b      	ldr	r3, [pc, #172]	; (800b374 <xTaskResumeAll+0x120>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4313      	orrs	r3, r2
 800b2ca:	4a2a      	ldr	r2, [pc, #168]	; (800b374 <xTaskResumeAll+0x120>)
 800b2cc:	6013      	str	r3, [r2, #0]
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2d2:	4613      	mov	r3, r2
 800b2d4:	009b      	lsls	r3, r3, #2
 800b2d6:	4413      	add	r3, r2
 800b2d8:	009b      	lsls	r3, r3, #2
 800b2da:	4a27      	ldr	r2, [pc, #156]	; (800b378 <xTaskResumeAll+0x124>)
 800b2dc:	441a      	add	r2, r3
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	3304      	adds	r3, #4
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	4610      	mov	r0, r2
 800b2e6:	f7fe ffa0 	bl	800a22a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ee:	4b23      	ldr	r3, [pc, #140]	; (800b37c <xTaskResumeAll+0x128>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d302      	bcc.n	800b2fe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b2f8:	4b21      	ldr	r3, [pc, #132]	; (800b380 <xTaskResumeAll+0x12c>)
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2fe:	4b1c      	ldr	r3, [pc, #112]	; (800b370 <xTaskResumeAll+0x11c>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d1cc      	bne.n	800b2a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d001      	beq.n	800b310 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b30c:	f000 fb22 	bl	800b954 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b310:	4b1c      	ldr	r3, [pc, #112]	; (800b384 <xTaskResumeAll+0x130>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d010      	beq.n	800b33e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b31c:	f000 f836 	bl	800b38c <xTaskIncrementTick>
 800b320:	4603      	mov	r3, r0
 800b322:	2b00      	cmp	r3, #0
 800b324:	d002      	beq.n	800b32c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b326:	4b16      	ldr	r3, [pc, #88]	; (800b380 <xTaskResumeAll+0x12c>)
 800b328:	2201      	movs	r2, #1
 800b32a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	3b01      	subs	r3, #1
 800b330:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d1f1      	bne.n	800b31c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800b338:	4b12      	ldr	r3, [pc, #72]	; (800b384 <xTaskResumeAll+0x130>)
 800b33a:	2200      	movs	r2, #0
 800b33c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b33e:	4b10      	ldr	r3, [pc, #64]	; (800b380 <xTaskResumeAll+0x12c>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d009      	beq.n	800b35a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b346:	2301      	movs	r3, #1
 800b348:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b34a:	4b0f      	ldr	r3, [pc, #60]	; (800b388 <xTaskResumeAll+0x134>)
 800b34c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b350:	601a      	str	r2, [r3, #0]
 800b352:	f3bf 8f4f 	dsb	sy
 800b356:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b35a:	f000 ff27 	bl	800c1ac <vPortExitCritical>

	return xAlreadyYielded;
 800b35e:	68bb      	ldr	r3, [r7, #8]
}
 800b360:	4618      	mov	r0, r3
 800b362:	3710      	adds	r7, #16
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	200009fc 	.word	0x200009fc
 800b36c:	200009d4 	.word	0x200009d4
 800b370:	20000994 	.word	0x20000994
 800b374:	200009dc 	.word	0x200009dc
 800b378:	200008d8 	.word	0x200008d8
 800b37c:	200008d4 	.word	0x200008d4
 800b380:	200009e8 	.word	0x200009e8
 800b384:	200009e4 	.word	0x200009e4
 800b388:	e000ed04 	.word	0xe000ed04

0800b38c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b086      	sub	sp, #24
 800b390:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b392:	2300      	movs	r3, #0
 800b394:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b396:	4b51      	ldr	r3, [pc, #324]	; (800b4dc <xTaskIncrementTick+0x150>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	f040 808d 	bne.w	800b4ba <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b3a0:	4b4f      	ldr	r3, [pc, #316]	; (800b4e0 <xTaskIncrementTick+0x154>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b3a8:	4a4d      	ldr	r2, [pc, #308]	; (800b4e0 <xTaskIncrementTick+0x154>)
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d120      	bne.n	800b3f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b3b4:	4b4b      	ldr	r3, [pc, #300]	; (800b4e4 <xTaskIncrementTick+0x158>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d00a      	beq.n	800b3d4 <xTaskIncrementTick+0x48>
	__asm volatile
 800b3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c2:	f383 8811 	msr	BASEPRI, r3
 800b3c6:	f3bf 8f6f 	isb	sy
 800b3ca:	f3bf 8f4f 	dsb	sy
 800b3ce:	603b      	str	r3, [r7, #0]
}
 800b3d0:	bf00      	nop
 800b3d2:	e7fe      	b.n	800b3d2 <xTaskIncrementTick+0x46>
 800b3d4:	4b43      	ldr	r3, [pc, #268]	; (800b4e4 <xTaskIncrementTick+0x158>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	60fb      	str	r3, [r7, #12]
 800b3da:	4b43      	ldr	r3, [pc, #268]	; (800b4e8 <xTaskIncrementTick+0x15c>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4a41      	ldr	r2, [pc, #260]	; (800b4e4 <xTaskIncrementTick+0x158>)
 800b3e0:	6013      	str	r3, [r2, #0]
 800b3e2:	4a41      	ldr	r2, [pc, #260]	; (800b4e8 <xTaskIncrementTick+0x15c>)
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	6013      	str	r3, [r2, #0]
 800b3e8:	4b40      	ldr	r3, [pc, #256]	; (800b4ec <xTaskIncrementTick+0x160>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	3301      	adds	r3, #1
 800b3ee:	4a3f      	ldr	r2, [pc, #252]	; (800b4ec <xTaskIncrementTick+0x160>)
 800b3f0:	6013      	str	r3, [r2, #0]
 800b3f2:	f000 faaf 	bl	800b954 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b3f6:	4b3e      	ldr	r3, [pc, #248]	; (800b4f0 <xTaskIncrementTick+0x164>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	693a      	ldr	r2, [r7, #16]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d34d      	bcc.n	800b49c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b400:	4b38      	ldr	r3, [pc, #224]	; (800b4e4 <xTaskIncrementTick+0x158>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d101      	bne.n	800b40e <xTaskIncrementTick+0x82>
 800b40a:	2301      	movs	r3, #1
 800b40c:	e000      	b.n	800b410 <xTaskIncrementTick+0x84>
 800b40e:	2300      	movs	r3, #0
 800b410:	2b00      	cmp	r3, #0
 800b412:	d004      	beq.n	800b41e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b414:	4b36      	ldr	r3, [pc, #216]	; (800b4f0 <xTaskIncrementTick+0x164>)
 800b416:	f04f 32ff 	mov.w	r2, #4294967295
 800b41a:	601a      	str	r2, [r3, #0]
					break;
 800b41c:	e03e      	b.n	800b49c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b41e:	4b31      	ldr	r3, [pc, #196]	; (800b4e4 <xTaskIncrementTick+0x158>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	68db      	ldr	r3, [r3, #12]
 800b424:	68db      	ldr	r3, [r3, #12]
 800b426:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b42e:	693a      	ldr	r2, [r7, #16]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	429a      	cmp	r2, r3
 800b434:	d203      	bcs.n	800b43e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b436:	4a2e      	ldr	r2, [pc, #184]	; (800b4f0 <xTaskIncrementTick+0x164>)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6013      	str	r3, [r2, #0]
						break;
 800b43c:	e02e      	b.n	800b49c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	3304      	adds	r3, #4
 800b442:	4618      	mov	r0, r3
 800b444:	f7fe ff4c 	bl	800a2e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d004      	beq.n	800b45a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	3318      	adds	r3, #24
 800b454:	4618      	mov	r0, r3
 800b456:	f7fe ff43 	bl	800a2e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b45e:	2201      	movs	r2, #1
 800b460:	409a      	lsls	r2, r3
 800b462:	4b24      	ldr	r3, [pc, #144]	; (800b4f4 <xTaskIncrementTick+0x168>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4313      	orrs	r3, r2
 800b468:	4a22      	ldr	r2, [pc, #136]	; (800b4f4 <xTaskIncrementTick+0x168>)
 800b46a:	6013      	str	r3, [r2, #0]
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b470:	4613      	mov	r3, r2
 800b472:	009b      	lsls	r3, r3, #2
 800b474:	4413      	add	r3, r2
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	4a1f      	ldr	r2, [pc, #124]	; (800b4f8 <xTaskIncrementTick+0x16c>)
 800b47a:	441a      	add	r2, r3
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	3304      	adds	r3, #4
 800b480:	4619      	mov	r1, r3
 800b482:	4610      	mov	r0, r2
 800b484:	f7fe fed1 	bl	800a22a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b48c:	4b1b      	ldr	r3, [pc, #108]	; (800b4fc <xTaskIncrementTick+0x170>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b492:	429a      	cmp	r2, r3
 800b494:	d3b4      	bcc.n	800b400 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b496:	2301      	movs	r3, #1
 800b498:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b49a:	e7b1      	b.n	800b400 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b49c:	4b17      	ldr	r3, [pc, #92]	; (800b4fc <xTaskIncrementTick+0x170>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4a2:	4915      	ldr	r1, [pc, #84]	; (800b4f8 <xTaskIncrementTick+0x16c>)
 800b4a4:	4613      	mov	r3, r2
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	4413      	add	r3, r2
 800b4aa:	009b      	lsls	r3, r3, #2
 800b4ac:	440b      	add	r3, r1
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d907      	bls.n	800b4c4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	617b      	str	r3, [r7, #20]
 800b4b8:	e004      	b.n	800b4c4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b4ba:	4b11      	ldr	r3, [pc, #68]	; (800b500 <xTaskIncrementTick+0x174>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	3301      	adds	r3, #1
 800b4c0:	4a0f      	ldr	r2, [pc, #60]	; (800b500 <xTaskIncrementTick+0x174>)
 800b4c2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b4c4:	4b0f      	ldr	r3, [pc, #60]	; (800b504 <xTaskIncrementTick+0x178>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d001      	beq.n	800b4d0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b4d0:	697b      	ldr	r3, [r7, #20]
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3718      	adds	r7, #24
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	200009fc 	.word	0x200009fc
 800b4e0:	200009d8 	.word	0x200009d8
 800b4e4:	2000098c 	.word	0x2000098c
 800b4e8:	20000990 	.word	0x20000990
 800b4ec:	200009ec 	.word	0x200009ec
 800b4f0:	200009f4 	.word	0x200009f4
 800b4f4:	200009dc 	.word	0x200009dc
 800b4f8:	200008d8 	.word	0x200008d8
 800b4fc:	200008d4 	.word	0x200008d4
 800b500:	200009e4 	.word	0x200009e4
 800b504:	200009e8 	.word	0x200009e8

0800b508 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b508:	b480      	push	{r7}
 800b50a:	b087      	sub	sp, #28
 800b50c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b50e:	4b29      	ldr	r3, [pc, #164]	; (800b5b4 <vTaskSwitchContext+0xac>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d003      	beq.n	800b51e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b516:	4b28      	ldr	r3, [pc, #160]	; (800b5b8 <vTaskSwitchContext+0xb0>)
 800b518:	2201      	movs	r2, #1
 800b51a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b51c:	e044      	b.n	800b5a8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800b51e:	4b26      	ldr	r3, [pc, #152]	; (800b5b8 <vTaskSwitchContext+0xb0>)
 800b520:	2200      	movs	r2, #0
 800b522:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b524:	4b25      	ldr	r3, [pc, #148]	; (800b5bc <vTaskSwitchContext+0xb4>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	fab3 f383 	clz	r3, r3
 800b530:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b532:	7afb      	ldrb	r3, [r7, #11]
 800b534:	f1c3 031f 	rsb	r3, r3, #31
 800b538:	617b      	str	r3, [r7, #20]
 800b53a:	4921      	ldr	r1, [pc, #132]	; (800b5c0 <vTaskSwitchContext+0xb8>)
 800b53c:	697a      	ldr	r2, [r7, #20]
 800b53e:	4613      	mov	r3, r2
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4413      	add	r3, r2
 800b544:	009b      	lsls	r3, r3, #2
 800b546:	440b      	add	r3, r1
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d10a      	bne.n	800b564 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b552:	f383 8811 	msr	BASEPRI, r3
 800b556:	f3bf 8f6f 	isb	sy
 800b55a:	f3bf 8f4f 	dsb	sy
 800b55e:	607b      	str	r3, [r7, #4]
}
 800b560:	bf00      	nop
 800b562:	e7fe      	b.n	800b562 <vTaskSwitchContext+0x5a>
 800b564:	697a      	ldr	r2, [r7, #20]
 800b566:	4613      	mov	r3, r2
 800b568:	009b      	lsls	r3, r3, #2
 800b56a:	4413      	add	r3, r2
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	4a14      	ldr	r2, [pc, #80]	; (800b5c0 <vTaskSwitchContext+0xb8>)
 800b570:	4413      	add	r3, r2
 800b572:	613b      	str	r3, [r7, #16]
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	685a      	ldr	r2, [r3, #4]
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	605a      	str	r2, [r3, #4]
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	685a      	ldr	r2, [r3, #4]
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	3308      	adds	r3, #8
 800b586:	429a      	cmp	r2, r3
 800b588:	d104      	bne.n	800b594 <vTaskSwitchContext+0x8c>
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	685a      	ldr	r2, [r3, #4]
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	605a      	str	r2, [r3, #4]
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	4a0a      	ldr	r2, [pc, #40]	; (800b5c4 <vTaskSwitchContext+0xbc>)
 800b59c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b59e:	4b09      	ldr	r3, [pc, #36]	; (800b5c4 <vTaskSwitchContext+0xbc>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	335c      	adds	r3, #92	; 0x5c
 800b5a4:	4a08      	ldr	r2, [pc, #32]	; (800b5c8 <vTaskSwitchContext+0xc0>)
 800b5a6:	6013      	str	r3, [r2, #0]
}
 800b5a8:	bf00      	nop
 800b5aa:	371c      	adds	r7, #28
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bc80      	pop	{r7}
 800b5b0:	4770      	bx	lr
 800b5b2:	bf00      	nop
 800b5b4:	200009fc 	.word	0x200009fc
 800b5b8:	200009e8 	.word	0x200009e8
 800b5bc:	200009dc 	.word	0x200009dc
 800b5c0:	200008d8 	.word	0x200008d8
 800b5c4:	200008d4 	.word	0x200008d4
 800b5c8:	200002d0 	.word	0x200002d0

0800b5cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d10a      	bne.n	800b5f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e0:	f383 8811 	msr	BASEPRI, r3
 800b5e4:	f3bf 8f6f 	isb	sy
 800b5e8:	f3bf 8f4f 	dsb	sy
 800b5ec:	60fb      	str	r3, [r7, #12]
}
 800b5ee:	bf00      	nop
 800b5f0:	e7fe      	b.n	800b5f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b5f2:	4b07      	ldr	r3, [pc, #28]	; (800b610 <vTaskPlaceOnEventList+0x44>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	3318      	adds	r3, #24
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f7fe fe38 	bl	800a270 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b600:	2101      	movs	r1, #1
 800b602:	6838      	ldr	r0, [r7, #0]
 800b604:	f000 fc48 	bl	800be98 <prvAddCurrentTaskToDelayedList>
}
 800b608:	bf00      	nop
 800b60a:	3710      	adds	r7, #16
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}
 800b610:	200008d4 	.word	0x200008d4

0800b614 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b086      	sub	sp, #24
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	68db      	ldr	r3, [r3, #12]
 800b620:	68db      	ldr	r3, [r3, #12]
 800b622:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d10a      	bne.n	800b640 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62e:	f383 8811 	msr	BASEPRI, r3
 800b632:	f3bf 8f6f 	isb	sy
 800b636:	f3bf 8f4f 	dsb	sy
 800b63a:	60fb      	str	r3, [r7, #12]
}
 800b63c:	bf00      	nop
 800b63e:	e7fe      	b.n	800b63e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	3318      	adds	r3, #24
 800b644:	4618      	mov	r0, r3
 800b646:	f7fe fe4b 	bl	800a2e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b64a:	4b1d      	ldr	r3, [pc, #116]	; (800b6c0 <xTaskRemoveFromEventList+0xac>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d11c      	bne.n	800b68c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	3304      	adds	r3, #4
 800b656:	4618      	mov	r0, r3
 800b658:	f7fe fe42 	bl	800a2e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b660:	2201      	movs	r2, #1
 800b662:	409a      	lsls	r2, r3
 800b664:	4b17      	ldr	r3, [pc, #92]	; (800b6c4 <xTaskRemoveFromEventList+0xb0>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4313      	orrs	r3, r2
 800b66a:	4a16      	ldr	r2, [pc, #88]	; (800b6c4 <xTaskRemoveFromEventList+0xb0>)
 800b66c:	6013      	str	r3, [r2, #0]
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b672:	4613      	mov	r3, r2
 800b674:	009b      	lsls	r3, r3, #2
 800b676:	4413      	add	r3, r2
 800b678:	009b      	lsls	r3, r3, #2
 800b67a:	4a13      	ldr	r2, [pc, #76]	; (800b6c8 <xTaskRemoveFromEventList+0xb4>)
 800b67c:	441a      	add	r2, r3
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	3304      	adds	r3, #4
 800b682:	4619      	mov	r1, r3
 800b684:	4610      	mov	r0, r2
 800b686:	f7fe fdd0 	bl	800a22a <vListInsertEnd>
 800b68a:	e005      	b.n	800b698 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	3318      	adds	r3, #24
 800b690:	4619      	mov	r1, r3
 800b692:	480e      	ldr	r0, [pc, #56]	; (800b6cc <xTaskRemoveFromEventList+0xb8>)
 800b694:	f7fe fdc9 	bl	800a22a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b69c:	4b0c      	ldr	r3, [pc, #48]	; (800b6d0 <xTaskRemoveFromEventList+0xbc>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d905      	bls.n	800b6b2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b6aa:	4b0a      	ldr	r3, [pc, #40]	; (800b6d4 <xTaskRemoveFromEventList+0xc0>)
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	601a      	str	r2, [r3, #0]
 800b6b0:	e001      	b.n	800b6b6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b6b6:	697b      	ldr	r3, [r7, #20]
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3718      	adds	r7, #24
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}
 800b6c0:	200009fc 	.word	0x200009fc
 800b6c4:	200009dc 	.word	0x200009dc
 800b6c8:	200008d8 	.word	0x200008d8
 800b6cc:	20000994 	.word	0x20000994
 800b6d0:	200008d4 	.word	0x200008d4
 800b6d4:	200009e8 	.word	0x200009e8

0800b6d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b083      	sub	sp, #12
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b6e0:	4b06      	ldr	r3, [pc, #24]	; (800b6fc <vTaskInternalSetTimeOutState+0x24>)
 800b6e2:	681a      	ldr	r2, [r3, #0]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b6e8:	4b05      	ldr	r3, [pc, #20]	; (800b700 <vTaskInternalSetTimeOutState+0x28>)
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	605a      	str	r2, [r3, #4]
}
 800b6f0:	bf00      	nop
 800b6f2:	370c      	adds	r7, #12
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bc80      	pop	{r7}
 800b6f8:	4770      	bx	lr
 800b6fa:	bf00      	nop
 800b6fc:	200009ec 	.word	0x200009ec
 800b700:	200009d8 	.word	0x200009d8

0800b704 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b088      	sub	sp, #32
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d10a      	bne.n	800b72a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b718:	f383 8811 	msr	BASEPRI, r3
 800b71c:	f3bf 8f6f 	isb	sy
 800b720:	f3bf 8f4f 	dsb	sy
 800b724:	613b      	str	r3, [r7, #16]
}
 800b726:	bf00      	nop
 800b728:	e7fe      	b.n	800b728 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d10a      	bne.n	800b746 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b734:	f383 8811 	msr	BASEPRI, r3
 800b738:	f3bf 8f6f 	isb	sy
 800b73c:	f3bf 8f4f 	dsb	sy
 800b740:	60fb      	str	r3, [r7, #12]
}
 800b742:	bf00      	nop
 800b744:	e7fe      	b.n	800b744 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b746:	f000 fd01 	bl	800c14c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b74a:	4b1d      	ldr	r3, [pc, #116]	; (800b7c0 <xTaskCheckForTimeOut+0xbc>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	69ba      	ldr	r2, [r7, #24]
 800b756:	1ad3      	subs	r3, r2, r3
 800b758:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b762:	d102      	bne.n	800b76a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b764:	2300      	movs	r3, #0
 800b766:	61fb      	str	r3, [r7, #28]
 800b768:	e023      	b.n	800b7b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	4b15      	ldr	r3, [pc, #84]	; (800b7c4 <xTaskCheckForTimeOut+0xc0>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	429a      	cmp	r2, r3
 800b774:	d007      	beq.n	800b786 <xTaskCheckForTimeOut+0x82>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	69ba      	ldr	r2, [r7, #24]
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d302      	bcc.n	800b786 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b780:	2301      	movs	r3, #1
 800b782:	61fb      	str	r3, [r7, #28]
 800b784:	e015      	b.n	800b7b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	697a      	ldr	r2, [r7, #20]
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d20b      	bcs.n	800b7a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	681a      	ldr	r2, [r3, #0]
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	1ad2      	subs	r2, r2, r3
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f7ff ff9b 	bl	800b6d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	61fb      	str	r3, [r7, #28]
 800b7a6:	e004      	b.n	800b7b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b7b2:	f000 fcfb 	bl	800c1ac <vPortExitCritical>

	return xReturn;
 800b7b6:	69fb      	ldr	r3, [r7, #28]
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3720      	adds	r7, #32
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	200009d8 	.word	0x200009d8
 800b7c4:	200009ec 	.word	0x200009ec

0800b7c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b7cc:	4b03      	ldr	r3, [pc, #12]	; (800b7dc <vTaskMissedYield+0x14>)
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	601a      	str	r2, [r3, #0]
}
 800b7d2:	bf00      	nop
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bc80      	pop	{r7}
 800b7d8:	4770      	bx	lr
 800b7da:	bf00      	nop
 800b7dc:	200009e8 	.word	0x200009e8

0800b7e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b082      	sub	sp, #8
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b7e8:	f000 f852 	bl	800b890 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b7ec:	4b06      	ldr	r3, [pc, #24]	; (800b808 <prvIdleTask+0x28>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d9f9      	bls.n	800b7e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b7f4:	4b05      	ldr	r3, [pc, #20]	; (800b80c <prvIdleTask+0x2c>)
 800b7f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7fa:	601a      	str	r2, [r3, #0]
 800b7fc:	f3bf 8f4f 	dsb	sy
 800b800:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b804:	e7f0      	b.n	800b7e8 <prvIdleTask+0x8>
 800b806:	bf00      	nop
 800b808:	200008d8 	.word	0x200008d8
 800b80c:	e000ed04 	.word	0xe000ed04

0800b810 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b816:	2300      	movs	r3, #0
 800b818:	607b      	str	r3, [r7, #4]
 800b81a:	e00c      	b.n	800b836 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	4613      	mov	r3, r2
 800b820:	009b      	lsls	r3, r3, #2
 800b822:	4413      	add	r3, r2
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	4a12      	ldr	r2, [pc, #72]	; (800b870 <prvInitialiseTaskLists+0x60>)
 800b828:	4413      	add	r3, r2
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7fe fcd2 	bl	800a1d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	3301      	adds	r3, #1
 800b834:	607b      	str	r3, [r7, #4]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2b06      	cmp	r3, #6
 800b83a:	d9ef      	bls.n	800b81c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b83c:	480d      	ldr	r0, [pc, #52]	; (800b874 <prvInitialiseTaskLists+0x64>)
 800b83e:	f7fe fcc9 	bl	800a1d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b842:	480d      	ldr	r0, [pc, #52]	; (800b878 <prvInitialiseTaskLists+0x68>)
 800b844:	f7fe fcc6 	bl	800a1d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b848:	480c      	ldr	r0, [pc, #48]	; (800b87c <prvInitialiseTaskLists+0x6c>)
 800b84a:	f7fe fcc3 	bl	800a1d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b84e:	480c      	ldr	r0, [pc, #48]	; (800b880 <prvInitialiseTaskLists+0x70>)
 800b850:	f7fe fcc0 	bl	800a1d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b854:	480b      	ldr	r0, [pc, #44]	; (800b884 <prvInitialiseTaskLists+0x74>)
 800b856:	f7fe fcbd 	bl	800a1d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b85a:	4b0b      	ldr	r3, [pc, #44]	; (800b888 <prvInitialiseTaskLists+0x78>)
 800b85c:	4a05      	ldr	r2, [pc, #20]	; (800b874 <prvInitialiseTaskLists+0x64>)
 800b85e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b860:	4b0a      	ldr	r3, [pc, #40]	; (800b88c <prvInitialiseTaskLists+0x7c>)
 800b862:	4a05      	ldr	r2, [pc, #20]	; (800b878 <prvInitialiseTaskLists+0x68>)
 800b864:	601a      	str	r2, [r3, #0]
}
 800b866:	bf00      	nop
 800b868:	3708      	adds	r7, #8
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	200008d8 	.word	0x200008d8
 800b874:	20000964 	.word	0x20000964
 800b878:	20000978 	.word	0x20000978
 800b87c:	20000994 	.word	0x20000994
 800b880:	200009a8 	.word	0x200009a8
 800b884:	200009c0 	.word	0x200009c0
 800b888:	2000098c 	.word	0x2000098c
 800b88c:	20000990 	.word	0x20000990

0800b890 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b082      	sub	sp, #8
 800b894:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b896:	e019      	b.n	800b8cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b898:	f000 fc58 	bl	800c14c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b89c:	4b10      	ldr	r3, [pc, #64]	; (800b8e0 <prvCheckTasksWaitingTermination+0x50>)
 800b89e:	68db      	ldr	r3, [r3, #12]
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	3304      	adds	r3, #4
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7fe fd19 	bl	800a2e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b8ae:	4b0d      	ldr	r3, [pc, #52]	; (800b8e4 <prvCheckTasksWaitingTermination+0x54>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	3b01      	subs	r3, #1
 800b8b4:	4a0b      	ldr	r2, [pc, #44]	; (800b8e4 <prvCheckTasksWaitingTermination+0x54>)
 800b8b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b8b8:	4b0b      	ldr	r3, [pc, #44]	; (800b8e8 <prvCheckTasksWaitingTermination+0x58>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	3b01      	subs	r3, #1
 800b8be:	4a0a      	ldr	r2, [pc, #40]	; (800b8e8 <prvCheckTasksWaitingTermination+0x58>)
 800b8c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b8c2:	f000 fc73 	bl	800c1ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 f810 	bl	800b8ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b8cc:	4b06      	ldr	r3, [pc, #24]	; (800b8e8 <prvCheckTasksWaitingTermination+0x58>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d1e1      	bne.n	800b898 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b8d4:	bf00      	nop
 800b8d6:	bf00      	nop
 800b8d8:	3708      	adds	r7, #8
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	200009a8 	.word	0x200009a8
 800b8e4:	200009d4 	.word	0x200009d4
 800b8e8:	200009bc 	.word	0x200009bc

0800b8ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	335c      	adds	r3, #92	; 0x5c
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f003 fa37 	bl	800ed6c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800b904:	2b00      	cmp	r3, #0
 800b906:	d108      	bne.n	800b91a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b90c:	4618      	mov	r0, r3
 800b90e:	f000 fde1 	bl	800c4d4 <vPortFree>
				vPortFree( pxTCB );
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 fdde 	bl	800c4d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b918:	e018      	b.n	800b94c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800b920:	2b01      	cmp	r3, #1
 800b922:	d103      	bne.n	800b92c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 fdd5 	bl	800c4d4 <vPortFree>
	}
 800b92a:	e00f      	b.n	800b94c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800b932:	2b02      	cmp	r3, #2
 800b934:	d00a      	beq.n	800b94c <prvDeleteTCB+0x60>
	__asm volatile
 800b936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93a:	f383 8811 	msr	BASEPRI, r3
 800b93e:	f3bf 8f6f 	isb	sy
 800b942:	f3bf 8f4f 	dsb	sy
 800b946:	60fb      	str	r3, [r7, #12]
}
 800b948:	bf00      	nop
 800b94a:	e7fe      	b.n	800b94a <prvDeleteTCB+0x5e>
	}
 800b94c:	bf00      	nop
 800b94e:	3710      	adds	r7, #16
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b954:	b480      	push	{r7}
 800b956:	b083      	sub	sp, #12
 800b958:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b95a:	4b0e      	ldr	r3, [pc, #56]	; (800b994 <prvResetNextTaskUnblockTime+0x40>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d101      	bne.n	800b968 <prvResetNextTaskUnblockTime+0x14>
 800b964:	2301      	movs	r3, #1
 800b966:	e000      	b.n	800b96a <prvResetNextTaskUnblockTime+0x16>
 800b968:	2300      	movs	r3, #0
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d004      	beq.n	800b978 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b96e:	4b0a      	ldr	r3, [pc, #40]	; (800b998 <prvResetNextTaskUnblockTime+0x44>)
 800b970:	f04f 32ff 	mov.w	r2, #4294967295
 800b974:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b976:	e008      	b.n	800b98a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b978:	4b06      	ldr	r3, [pc, #24]	; (800b994 <prvResetNextTaskUnblockTime+0x40>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	68db      	ldr	r3, [r3, #12]
 800b980:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	4a04      	ldr	r2, [pc, #16]	; (800b998 <prvResetNextTaskUnblockTime+0x44>)
 800b988:	6013      	str	r3, [r2, #0]
}
 800b98a:	bf00      	nop
 800b98c:	370c      	adds	r7, #12
 800b98e:	46bd      	mov	sp, r7
 800b990:	bc80      	pop	{r7}
 800b992:	4770      	bx	lr
 800b994:	2000098c 	.word	0x2000098c
 800b998:	200009f4 	.word	0x200009f4

0800b99c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b99c:	b480      	push	{r7}
 800b99e:	b083      	sub	sp, #12
 800b9a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b9a2:	4b0b      	ldr	r3, [pc, #44]	; (800b9d0 <xTaskGetSchedulerState+0x34>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d102      	bne.n	800b9b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	607b      	str	r3, [r7, #4]
 800b9ae:	e008      	b.n	800b9c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9b0:	4b08      	ldr	r3, [pc, #32]	; (800b9d4 <xTaskGetSchedulerState+0x38>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d102      	bne.n	800b9be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	607b      	str	r3, [r7, #4]
 800b9bc:	e001      	b.n	800b9c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b9c2:	687b      	ldr	r3, [r7, #4]
	}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	370c      	adds	r7, #12
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bc80      	pop	{r7}
 800b9cc:	4770      	bx	lr
 800b9ce:	bf00      	nop
 800b9d0:	200009e0 	.word	0x200009e0
 800b9d4:	200009fc 	.word	0x200009fc

0800b9d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b086      	sub	sp, #24
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d06e      	beq.n	800bacc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b9ee:	4b3a      	ldr	r3, [pc, #232]	; (800bad8 <xTaskPriorityDisinherit+0x100>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	693a      	ldr	r2, [r7, #16]
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d00a      	beq.n	800ba0e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fc:	f383 8811 	msr	BASEPRI, r3
 800ba00:	f3bf 8f6f 	isb	sy
 800ba04:	f3bf 8f4f 	dsb	sy
 800ba08:	60fb      	str	r3, [r7, #12]
}
 800ba0a:	bf00      	nop
 800ba0c:	e7fe      	b.n	800ba0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d10a      	bne.n	800ba2c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ba16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1a:	f383 8811 	msr	BASEPRI, r3
 800ba1e:	f3bf 8f6f 	isb	sy
 800ba22:	f3bf 8f4f 	dsb	sy
 800ba26:	60bb      	str	r3, [r7, #8]
}
 800ba28:	bf00      	nop
 800ba2a:	e7fe      	b.n	800ba2a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba30:	1e5a      	subs	r2, r3, #1
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d044      	beq.n	800bacc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d140      	bne.n	800bacc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	3304      	adds	r3, #4
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7fe fc46 	bl	800a2e0 <uxListRemove>
 800ba54:	4603      	mov	r3, r0
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d115      	bne.n	800ba86 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba5e:	491f      	ldr	r1, [pc, #124]	; (800badc <xTaskPriorityDisinherit+0x104>)
 800ba60:	4613      	mov	r3, r2
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	4413      	add	r3, r2
 800ba66:	009b      	lsls	r3, r3, #2
 800ba68:	440b      	add	r3, r1
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d10a      	bne.n	800ba86 <xTaskPriorityDisinherit+0xae>
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba74:	2201      	movs	r2, #1
 800ba76:	fa02 f303 	lsl.w	r3, r2, r3
 800ba7a:	43da      	mvns	r2, r3
 800ba7c:	4b18      	ldr	r3, [pc, #96]	; (800bae0 <xTaskPriorityDisinherit+0x108>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4013      	ands	r3, r2
 800ba82:	4a17      	ldr	r2, [pc, #92]	; (800bae0 <xTaskPriorityDisinherit+0x108>)
 800ba84:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba92:	f1c3 0207 	rsb	r2, r3, #7
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba9e:	2201      	movs	r2, #1
 800baa0:	409a      	lsls	r2, r3
 800baa2:	4b0f      	ldr	r3, [pc, #60]	; (800bae0 <xTaskPriorityDisinherit+0x108>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	4313      	orrs	r3, r2
 800baa8:	4a0d      	ldr	r2, [pc, #52]	; (800bae0 <xTaskPriorityDisinherit+0x108>)
 800baaa:	6013      	str	r3, [r2, #0]
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab0:	4613      	mov	r3, r2
 800bab2:	009b      	lsls	r3, r3, #2
 800bab4:	4413      	add	r3, r2
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	4a08      	ldr	r2, [pc, #32]	; (800badc <xTaskPriorityDisinherit+0x104>)
 800baba:	441a      	add	r2, r3
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	3304      	adds	r3, #4
 800bac0:	4619      	mov	r1, r3
 800bac2:	4610      	mov	r0, r2
 800bac4:	f7fe fbb1 	bl	800a22a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bac8:	2301      	movs	r3, #1
 800baca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bacc:	697b      	ldr	r3, [r7, #20]
	}
 800bace:	4618      	mov	r0, r3
 800bad0:	3718      	adds	r7, #24
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop
 800bad8:	200008d4 	.word	0x200008d4
 800badc:	200008d8 	.word	0x200008d8
 800bae0:	200009dc 	.word	0x200009dc

0800bae4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b086      	sub	sp, #24
 800bae8:	af00      	add	r7, sp, #0
 800baea:	60f8      	str	r0, [r7, #12]
 800baec:	60b9      	str	r1, [r7, #8]
 800baee:	607a      	str	r2, [r7, #4]
 800baf0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800baf2:	f000 fb2b 	bl	800c14c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800baf6:	4b29      	ldr	r3, [pc, #164]	; (800bb9c <xTaskNotifyWait+0xb8>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	2b02      	cmp	r3, #2
 800bb02:	d01c      	beq.n	800bb3e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800bb04:	4b25      	ldr	r3, [pc, #148]	; (800bb9c <xTaskNotifyWait+0xb8>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800bb0c:	68fa      	ldr	r2, [r7, #12]
 800bb0e:	43d2      	mvns	r2, r2
 800bb10:	400a      	ands	r2, r1
 800bb12:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800bb16:	4b21      	ldr	r3, [pc, #132]	; (800bb9c <xTaskNotifyWait+0xb8>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

				if( xTicksToWait > ( TickType_t ) 0 )
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d00b      	beq.n	800bb3e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bb26:	2101      	movs	r1, #1
 800bb28:	6838      	ldr	r0, [r7, #0]
 800bb2a:	f000 f9b5 	bl	800be98 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800bb2e:	4b1c      	ldr	r3, [pc, #112]	; (800bba0 <xTaskNotifyWait+0xbc>)
 800bb30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb34:	601a      	str	r2, [r3, #0]
 800bb36:	f3bf 8f4f 	dsb	sy
 800bb3a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bb3e:	f000 fb35 	bl	800c1ac <vPortExitCritical>

		taskENTER_CRITICAL();
 800bb42:	f000 fb03 	bl	800c14c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d005      	beq.n	800bb58 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800bb4c:	4b13      	ldr	r3, [pc, #76]	; (800bb9c <xTaskNotifyWait+0xb8>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800bb58:	4b10      	ldr	r3, [pc, #64]	; (800bb9c <xTaskNotifyWait+0xb8>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	2b02      	cmp	r3, #2
 800bb64:	d002      	beq.n	800bb6c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800bb66:	2300      	movs	r3, #0
 800bb68:	617b      	str	r3, [r7, #20]
 800bb6a:	e00a      	b.n	800bb82 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800bb6c:	4b0b      	ldr	r3, [pc, #44]	; (800bb9c <xTaskNotifyWait+0xb8>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800bb74:	68ba      	ldr	r2, [r7, #8]
 800bb76:	43d2      	mvns	r2, r2
 800bb78:	400a      	ands	r2, r1
 800bb7a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
				xReturn = pdTRUE;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bb82:	4b06      	ldr	r3, [pc, #24]	; (800bb9c <xTaskNotifyWait+0xb8>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	2200      	movs	r2, #0
 800bb88:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
		}
		taskEXIT_CRITICAL();
 800bb8c:	f000 fb0e 	bl	800c1ac <vPortExitCritical>

		return xReturn;
 800bb90:	697b      	ldr	r3, [r7, #20]
	}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3718      	adds	r7, #24
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	200008d4 	.word	0x200008d4
 800bba0:	e000ed04 	.word	0xe000ed04

0800bba4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b08a      	sub	sp, #40	; 0x28
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	60b9      	str	r1, [r7, #8]
 800bbae:	603b      	str	r3, [r7, #0]
 800bbb0:	4613      	mov	r3, r2
 800bbb2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d10a      	bne.n	800bbd4 <xTaskGenericNotify+0x30>
	__asm volatile
 800bbbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc2:	f383 8811 	msr	BASEPRI, r3
 800bbc6:	f3bf 8f6f 	isb	sy
 800bbca:	f3bf 8f4f 	dsb	sy
 800bbce:	61bb      	str	r3, [r7, #24]
}
 800bbd0:	bf00      	nop
 800bbd2:	e7fe      	b.n	800bbd2 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800bbd8:	f000 fab8 	bl	800c14c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d004      	beq.n	800bbec <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bbe2:	6a3b      	ldr	r3, [r7, #32]
 800bbe4:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bbec:	6a3b      	ldr	r3, [r7, #32]
 800bbee:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800bbf2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bbf4:	6a3b      	ldr	r3, [r7, #32]
 800bbf6:	2202      	movs	r2, #2
 800bbf8:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

			switch( eAction )
 800bbfc:	79fb      	ldrb	r3, [r7, #7]
 800bbfe:	2b04      	cmp	r3, #4
 800bc00:	d82d      	bhi.n	800bc5e <xTaskGenericNotify+0xba>
 800bc02:	a201      	add	r2, pc, #4	; (adr r2, 800bc08 <xTaskGenericNotify+0x64>)
 800bc04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc08:	0800bc5f 	.word	0x0800bc5f
 800bc0c:	0800bc1d 	.word	0x0800bc1d
 800bc10:	0800bc2f 	.word	0x0800bc2f
 800bc14:	0800bc3f 	.word	0x0800bc3f
 800bc18:	0800bc49 	.word	0x0800bc49
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bc1c:	6a3b      	ldr	r3, [r7, #32]
 800bc1e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	431a      	orrs	r2, r3
 800bc26:	6a3b      	ldr	r3, [r7, #32]
 800bc28:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 800bc2c:	e017      	b.n	800bc5e <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800bc2e:	6a3b      	ldr	r3, [r7, #32]
 800bc30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bc34:	1c5a      	adds	r2, r3, #1
 800bc36:	6a3b      	ldr	r3, [r7, #32]
 800bc38:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 800bc3c:	e00f      	b.n	800bc5e <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800bc3e:	6a3b      	ldr	r3, [r7, #32]
 800bc40:	68ba      	ldr	r2, [r7, #8]
 800bc42:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 800bc46:	e00a      	b.n	800bc5e <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bc48:	7ffb      	ldrb	r3, [r7, #31]
 800bc4a:	2b02      	cmp	r3, #2
 800bc4c:	d004      	beq.n	800bc58 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800bc4e:	6a3b      	ldr	r3, [r7, #32]
 800bc50:	68ba      	ldr	r2, [r7, #8]
 800bc52:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800bc56:	e001      	b.n	800bc5c <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800bc5c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bc5e:	7ffb      	ldrb	r3, [r7, #31]
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d139      	bne.n	800bcd8 <xTaskGenericNotify+0x134>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc64:	6a3b      	ldr	r3, [r7, #32]
 800bc66:	3304      	adds	r3, #4
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f7fe fb39 	bl	800a2e0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800bc6e:	6a3b      	ldr	r3, [r7, #32]
 800bc70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc72:	2201      	movs	r2, #1
 800bc74:	409a      	lsls	r2, r3
 800bc76:	4b1c      	ldr	r3, [pc, #112]	; (800bce8 <xTaskGenericNotify+0x144>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	4a1a      	ldr	r2, [pc, #104]	; (800bce8 <xTaskGenericNotify+0x144>)
 800bc7e:	6013      	str	r3, [r2, #0]
 800bc80:	6a3b      	ldr	r3, [r7, #32]
 800bc82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc84:	4613      	mov	r3, r2
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	4413      	add	r3, r2
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	4a17      	ldr	r2, [pc, #92]	; (800bcec <xTaskGenericNotify+0x148>)
 800bc8e:	441a      	add	r2, r3
 800bc90:	6a3b      	ldr	r3, [r7, #32]
 800bc92:	3304      	adds	r3, #4
 800bc94:	4619      	mov	r1, r3
 800bc96:	4610      	mov	r0, r2
 800bc98:	f7fe fac7 	bl	800a22a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bc9c:	6a3b      	ldr	r3, [r7, #32]
 800bc9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d00a      	beq.n	800bcba <xTaskGenericNotify+0x116>
	__asm volatile
 800bca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca8:	f383 8811 	msr	BASEPRI, r3
 800bcac:	f3bf 8f6f 	isb	sy
 800bcb0:	f3bf 8f4f 	dsb	sy
 800bcb4:	617b      	str	r3, [r7, #20]
}
 800bcb6:	bf00      	nop
 800bcb8:	e7fe      	b.n	800bcb8 <xTaskGenericNotify+0x114>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bcba:	6a3b      	ldr	r3, [r7, #32]
 800bcbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcbe:	4b0c      	ldr	r3, [pc, #48]	; (800bcf0 <xTaskGenericNotify+0x14c>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d907      	bls.n	800bcd8 <xTaskGenericNotify+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800bcc8:	4b0a      	ldr	r3, [pc, #40]	; (800bcf4 <xTaskGenericNotify+0x150>)
 800bcca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcce:	601a      	str	r2, [r3, #0]
 800bcd0:	f3bf 8f4f 	dsb	sy
 800bcd4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bcd8:	f000 fa68 	bl	800c1ac <vPortExitCritical>

		return xReturn;
 800bcdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3728      	adds	r7, #40	; 0x28
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	200009dc 	.word	0x200009dc
 800bcec:	200008d8 	.word	0x200008d8
 800bcf0:	200008d4 	.word	0x200008d4
 800bcf4:	e000ed04 	.word	0xe000ed04

0800bcf8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b08e      	sub	sp, #56	; 0x38
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	603b      	str	r3, [r7, #0]
 800bd04:	4613      	mov	r3, r2
 800bd06:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d10a      	bne.n	800bd28 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800bd12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd16:	f383 8811 	msr	BASEPRI, r3
 800bd1a:	f3bf 8f6f 	isb	sy
 800bd1e:	f3bf 8f4f 	dsb	sy
 800bd22:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd24:	bf00      	nop
 800bd26:	e7fe      	b.n	800bd26 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bd28:	f000 fad2 	bl	800c2d0 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800bd30:	f3ef 8211 	mrs	r2, BASEPRI
 800bd34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd38:	f383 8811 	msr	BASEPRI, r3
 800bd3c:	f3bf 8f6f 	isb	sy
 800bd40:	f3bf 8f4f 	dsb	sy
 800bd44:	623a      	str	r2, [r7, #32]
 800bd46:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800bd48:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bd4a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d004      	beq.n	800bd5c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd54:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bd5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5e:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800bd62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd68:	2202      	movs	r2, #2
 800bd6a:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

			switch( eAction )
 800bd6e:	79fb      	ldrb	r3, [r7, #7]
 800bd70:	2b04      	cmp	r3, #4
 800bd72:	d82f      	bhi.n	800bdd4 <xTaskGenericNotifyFromISR+0xdc>
 800bd74:	a201      	add	r2, pc, #4	; (adr r2, 800bd7c <xTaskGenericNotifyFromISR+0x84>)
 800bd76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd7a:	bf00      	nop
 800bd7c:	0800bdd5 	.word	0x0800bdd5
 800bd80:	0800bd91 	.word	0x0800bd91
 800bd84:	0800bda3 	.word	0x0800bda3
 800bd88:	0800bdb3 	.word	0x0800bdb3
 800bd8c:	0800bdbd 	.word	0x0800bdbd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd92:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	431a      	orrs	r2, r3
 800bd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 800bda0:	e018      	b.n	800bdd4 <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800bda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bda8:	1c5a      	adds	r2, r3, #1
 800bdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdac:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 800bdb0:	e010      	b.n	800bdd4 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800bdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb4:	68ba      	ldr	r2, [r7, #8]
 800bdb6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 800bdba:	e00b      	b.n	800bdd4 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bdbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bdc0:	2b02      	cmp	r3, #2
 800bdc2:	d004      	beq.n	800bdce <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800bdc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc6:	68ba      	ldr	r2, [r7, #8]
 800bdc8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800bdcc:	e001      	b.n	800bdd2 <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800bdd2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bdd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bdd8:	2b01      	cmp	r3, #1
 800bdda:	d146      	bne.n	800be6a <xTaskGenericNotifyFromISR+0x172>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d00a      	beq.n	800bdfa <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800bde4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde8:	f383 8811 	msr	BASEPRI, r3
 800bdec:	f3bf 8f6f 	isb	sy
 800bdf0:	f3bf 8f4f 	dsb	sy
 800bdf4:	61bb      	str	r3, [r7, #24]
}
 800bdf6:	bf00      	nop
 800bdf8:	e7fe      	b.n	800bdf8 <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdfa:	4b21      	ldr	r3, [pc, #132]	; (800be80 <xTaskGenericNotifyFromISR+0x188>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d11c      	bne.n	800be3c <xTaskGenericNotifyFromISR+0x144>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be04:	3304      	adds	r3, #4
 800be06:	4618      	mov	r0, r3
 800be08:	f7fe fa6a 	bl	800a2e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800be0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be10:	2201      	movs	r2, #1
 800be12:	409a      	lsls	r2, r3
 800be14:	4b1b      	ldr	r3, [pc, #108]	; (800be84 <xTaskGenericNotifyFromISR+0x18c>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4313      	orrs	r3, r2
 800be1a:	4a1a      	ldr	r2, [pc, #104]	; (800be84 <xTaskGenericNotifyFromISR+0x18c>)
 800be1c:	6013      	str	r3, [r2, #0]
 800be1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be22:	4613      	mov	r3, r2
 800be24:	009b      	lsls	r3, r3, #2
 800be26:	4413      	add	r3, r2
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	4a17      	ldr	r2, [pc, #92]	; (800be88 <xTaskGenericNotifyFromISR+0x190>)
 800be2c:	441a      	add	r2, r3
 800be2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be30:	3304      	adds	r3, #4
 800be32:	4619      	mov	r1, r3
 800be34:	4610      	mov	r0, r2
 800be36:	f7fe f9f8 	bl	800a22a <vListInsertEnd>
 800be3a:	e005      	b.n	800be48 <xTaskGenericNotifyFromISR+0x150>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800be3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3e:	3318      	adds	r3, #24
 800be40:	4619      	mov	r1, r3
 800be42:	4812      	ldr	r0, [pc, #72]	; (800be8c <xTaskGenericNotifyFromISR+0x194>)
 800be44:	f7fe f9f1 	bl	800a22a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be4c:	4b10      	ldr	r3, [pc, #64]	; (800be90 <xTaskGenericNotifyFromISR+0x198>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be52:	429a      	cmp	r2, r3
 800be54:	d909      	bls.n	800be6a <xTaskGenericNotifyFromISR+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800be56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d003      	beq.n	800be64 <xTaskGenericNotifyFromISR+0x16c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800be5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be5e:	2201      	movs	r2, #1
 800be60:	601a      	str	r2, [r3, #0]
 800be62:	e002      	b.n	800be6a <xTaskGenericNotifyFromISR+0x172>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800be64:	4b0b      	ldr	r3, [pc, #44]	; (800be94 <xTaskGenericNotifyFromISR+0x19c>)
 800be66:	2201      	movs	r2, #1
 800be68:	601a      	str	r2, [r3, #0]
 800be6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be6c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	f383 8811 	msr	BASEPRI, r3
}
 800be74:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800be76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800be78:	4618      	mov	r0, r3
 800be7a:	3738      	adds	r7, #56	; 0x38
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	200009fc 	.word	0x200009fc
 800be84:	200009dc 	.word	0x200009dc
 800be88:	200008d8 	.word	0x200008d8
 800be8c:	20000994 	.word	0x20000994
 800be90:	200008d4 	.word	0x200008d4
 800be94:	200009e8 	.word	0x200009e8

0800be98 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bea2:	4b29      	ldr	r3, [pc, #164]	; (800bf48 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bea8:	4b28      	ldr	r3, [pc, #160]	; (800bf4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	3304      	adds	r3, #4
 800beae:	4618      	mov	r0, r3
 800beb0:	f7fe fa16 	bl	800a2e0 <uxListRemove>
 800beb4:	4603      	mov	r3, r0
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d10b      	bne.n	800bed2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800beba:	4b24      	ldr	r3, [pc, #144]	; (800bf4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec0:	2201      	movs	r2, #1
 800bec2:	fa02 f303 	lsl.w	r3, r2, r3
 800bec6:	43da      	mvns	r2, r3
 800bec8:	4b21      	ldr	r3, [pc, #132]	; (800bf50 <prvAddCurrentTaskToDelayedList+0xb8>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4013      	ands	r3, r2
 800bece:	4a20      	ldr	r2, [pc, #128]	; (800bf50 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bed0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed8:	d10a      	bne.n	800bef0 <prvAddCurrentTaskToDelayedList+0x58>
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d007      	beq.n	800bef0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bee0:	4b1a      	ldr	r3, [pc, #104]	; (800bf4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	3304      	adds	r3, #4
 800bee6:	4619      	mov	r1, r3
 800bee8:	481a      	ldr	r0, [pc, #104]	; (800bf54 <prvAddCurrentTaskToDelayedList+0xbc>)
 800beea:	f7fe f99e 	bl	800a22a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800beee:	e026      	b.n	800bf3e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bef0:	68fa      	ldr	r2, [r7, #12]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	4413      	add	r3, r2
 800bef6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bef8:	4b14      	ldr	r3, [pc, #80]	; (800bf4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	68ba      	ldr	r2, [r7, #8]
 800befe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf00:	68ba      	ldr	r2, [r7, #8]
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d209      	bcs.n	800bf1c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf08:	4b13      	ldr	r3, [pc, #76]	; (800bf58 <prvAddCurrentTaskToDelayedList+0xc0>)
 800bf0a:	681a      	ldr	r2, [r3, #0]
 800bf0c:	4b0f      	ldr	r3, [pc, #60]	; (800bf4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	3304      	adds	r3, #4
 800bf12:	4619      	mov	r1, r3
 800bf14:	4610      	mov	r0, r2
 800bf16:	f7fe f9ab 	bl	800a270 <vListInsert>
}
 800bf1a:	e010      	b.n	800bf3e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf1c:	4b0f      	ldr	r3, [pc, #60]	; (800bf5c <prvAddCurrentTaskToDelayedList+0xc4>)
 800bf1e:	681a      	ldr	r2, [r3, #0]
 800bf20:	4b0a      	ldr	r3, [pc, #40]	; (800bf4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	3304      	adds	r3, #4
 800bf26:	4619      	mov	r1, r3
 800bf28:	4610      	mov	r0, r2
 800bf2a:	f7fe f9a1 	bl	800a270 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bf2e:	4b0c      	ldr	r3, [pc, #48]	; (800bf60 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	68ba      	ldr	r2, [r7, #8]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d202      	bcs.n	800bf3e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bf38:	4a09      	ldr	r2, [pc, #36]	; (800bf60 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	6013      	str	r3, [r2, #0]
}
 800bf3e:	bf00      	nop
 800bf40:	3710      	adds	r7, #16
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	200009d8 	.word	0x200009d8
 800bf4c:	200008d4 	.word	0x200008d4
 800bf50:	200009dc 	.word	0x200009dc
 800bf54:	200009c0 	.word	0x200009c0
 800bf58:	20000990 	.word	0x20000990
 800bf5c:	2000098c 	.word	0x2000098c
 800bf60:	200009f4 	.word	0x200009f4

0800bf64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bf64:	b480      	push	{r7}
 800bf66:	b085      	sub	sp, #20
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	60f8      	str	r0, [r7, #12]
 800bf6c:	60b9      	str	r1, [r7, #8]
 800bf6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	3b04      	subs	r3, #4
 800bf74:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bf7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	3b04      	subs	r3, #4
 800bf82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	f023 0201 	bic.w	r2, r3, #1
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	3b04      	subs	r3, #4
 800bf92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bf94:	4a08      	ldr	r2, [pc, #32]	; (800bfb8 <pxPortInitialiseStack+0x54>)
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	3b14      	subs	r3, #20
 800bf9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bfa0:	687a      	ldr	r2, [r7, #4]
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	3b20      	subs	r3, #32
 800bfaa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bfac:	68fb      	ldr	r3, [r7, #12]
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3714      	adds	r7, #20
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bc80      	pop	{r7}
 800bfb6:	4770      	bx	lr
 800bfb8:	0800bfbd 	.word	0x0800bfbd

0800bfbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b085      	sub	sp, #20
 800bfc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bfc6:	4b12      	ldr	r3, [pc, #72]	; (800c010 <prvTaskExitError+0x54>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfce:	d00a      	beq.n	800bfe6 <prvTaskExitError+0x2a>
	__asm volatile
 800bfd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd4:	f383 8811 	msr	BASEPRI, r3
 800bfd8:	f3bf 8f6f 	isb	sy
 800bfdc:	f3bf 8f4f 	dsb	sy
 800bfe0:	60fb      	str	r3, [r7, #12]
}
 800bfe2:	bf00      	nop
 800bfe4:	e7fe      	b.n	800bfe4 <prvTaskExitError+0x28>
	__asm volatile
 800bfe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfea:	f383 8811 	msr	BASEPRI, r3
 800bfee:	f3bf 8f6f 	isb	sy
 800bff2:	f3bf 8f4f 	dsb	sy
 800bff6:	60bb      	str	r3, [r7, #8]
}
 800bff8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bffa:	bf00      	nop
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d0fc      	beq.n	800bffc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c002:	bf00      	nop
 800c004:	bf00      	nop
 800c006:	3714      	adds	r7, #20
 800c008:	46bd      	mov	sp, r7
 800c00a:	bc80      	pop	{r7}
 800c00c:	4770      	bx	lr
 800c00e:	bf00      	nop
 800c010:	20000100 	.word	0x20000100
	...

0800c020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c020:	4b07      	ldr	r3, [pc, #28]	; (800c040 <pxCurrentTCBConst2>)
 800c022:	6819      	ldr	r1, [r3, #0]
 800c024:	6808      	ldr	r0, [r1, #0]
 800c026:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c02a:	f380 8809 	msr	PSP, r0
 800c02e:	f3bf 8f6f 	isb	sy
 800c032:	f04f 0000 	mov.w	r0, #0
 800c036:	f380 8811 	msr	BASEPRI, r0
 800c03a:	f04e 0e0d 	orr.w	lr, lr, #13
 800c03e:	4770      	bx	lr

0800c040 <pxCurrentTCBConst2>:
 800c040:	200008d4 	.word	0x200008d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c044:	bf00      	nop
 800c046:	bf00      	nop

0800c048 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c048:	4806      	ldr	r0, [pc, #24]	; (800c064 <prvPortStartFirstTask+0x1c>)
 800c04a:	6800      	ldr	r0, [r0, #0]
 800c04c:	6800      	ldr	r0, [r0, #0]
 800c04e:	f380 8808 	msr	MSP, r0
 800c052:	b662      	cpsie	i
 800c054:	b661      	cpsie	f
 800c056:	f3bf 8f4f 	dsb	sy
 800c05a:	f3bf 8f6f 	isb	sy
 800c05e:	df00      	svc	0
 800c060:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c062:	bf00      	nop
 800c064:	e000ed08 	.word	0xe000ed08

0800c068 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b084      	sub	sp, #16
 800c06c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c06e:	4b32      	ldr	r3, [pc, #200]	; (800c138 <xPortStartScheduler+0xd0>)
 800c070:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	b2db      	uxtb	r3, r3
 800c078:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	22ff      	movs	r2, #255	; 0xff
 800c07e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	b2db      	uxtb	r3, r3
 800c086:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c088:	78fb      	ldrb	r3, [r7, #3]
 800c08a:	b2db      	uxtb	r3, r3
 800c08c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c090:	b2da      	uxtb	r2, r3
 800c092:	4b2a      	ldr	r3, [pc, #168]	; (800c13c <xPortStartScheduler+0xd4>)
 800c094:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c096:	4b2a      	ldr	r3, [pc, #168]	; (800c140 <xPortStartScheduler+0xd8>)
 800c098:	2207      	movs	r2, #7
 800c09a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c09c:	e009      	b.n	800c0b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c09e:	4b28      	ldr	r3, [pc, #160]	; (800c140 <xPortStartScheduler+0xd8>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	3b01      	subs	r3, #1
 800c0a4:	4a26      	ldr	r2, [pc, #152]	; (800c140 <xPortStartScheduler+0xd8>)
 800c0a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c0a8:	78fb      	ldrb	r3, [r7, #3]
 800c0aa:	b2db      	uxtb	r3, r3
 800c0ac:	005b      	lsls	r3, r3, #1
 800c0ae:	b2db      	uxtb	r3, r3
 800c0b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c0b2:	78fb      	ldrb	r3, [r7, #3]
 800c0b4:	b2db      	uxtb	r3, r3
 800c0b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0ba:	2b80      	cmp	r3, #128	; 0x80
 800c0bc:	d0ef      	beq.n	800c09e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c0be:	4b20      	ldr	r3, [pc, #128]	; (800c140 <xPortStartScheduler+0xd8>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f1c3 0307 	rsb	r3, r3, #7
 800c0c6:	2b04      	cmp	r3, #4
 800c0c8:	d00a      	beq.n	800c0e0 <xPortStartScheduler+0x78>
	__asm volatile
 800c0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ce:	f383 8811 	msr	BASEPRI, r3
 800c0d2:	f3bf 8f6f 	isb	sy
 800c0d6:	f3bf 8f4f 	dsb	sy
 800c0da:	60bb      	str	r3, [r7, #8]
}
 800c0dc:	bf00      	nop
 800c0de:	e7fe      	b.n	800c0de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c0e0:	4b17      	ldr	r3, [pc, #92]	; (800c140 <xPortStartScheduler+0xd8>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	021b      	lsls	r3, r3, #8
 800c0e6:	4a16      	ldr	r2, [pc, #88]	; (800c140 <xPortStartScheduler+0xd8>)
 800c0e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c0ea:	4b15      	ldr	r3, [pc, #84]	; (800c140 <xPortStartScheduler+0xd8>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c0f2:	4a13      	ldr	r2, [pc, #76]	; (800c140 <xPortStartScheduler+0xd8>)
 800c0f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	b2da      	uxtb	r2, r3
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c0fe:	4b11      	ldr	r3, [pc, #68]	; (800c144 <xPortStartScheduler+0xdc>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	4a10      	ldr	r2, [pc, #64]	; (800c144 <xPortStartScheduler+0xdc>)
 800c104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c108:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c10a:	4b0e      	ldr	r3, [pc, #56]	; (800c144 <xPortStartScheduler+0xdc>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	4a0d      	ldr	r2, [pc, #52]	; (800c144 <xPortStartScheduler+0xdc>)
 800c110:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c114:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c116:	f000 f8b9 	bl	800c28c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c11a:	4b0b      	ldr	r3, [pc, #44]	; (800c148 <xPortStartScheduler+0xe0>)
 800c11c:	2200      	movs	r2, #0
 800c11e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c120:	f7ff ff92 	bl	800c048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c124:	f7ff f9f0 	bl	800b508 <vTaskSwitchContext>
	prvTaskExitError();
 800c128:	f7ff ff48 	bl	800bfbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c12c:	2300      	movs	r3, #0
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3710      	adds	r7, #16
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	e000e400 	.word	0xe000e400
 800c13c:	20000a00 	.word	0x20000a00
 800c140:	20000a04 	.word	0x20000a04
 800c144:	e000ed20 	.word	0xe000ed20
 800c148:	20000100 	.word	0x20000100

0800c14c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c14c:	b480      	push	{r7}
 800c14e:	b083      	sub	sp, #12
 800c150:	af00      	add	r7, sp, #0
	__asm volatile
 800c152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c156:	f383 8811 	msr	BASEPRI, r3
 800c15a:	f3bf 8f6f 	isb	sy
 800c15e:	f3bf 8f4f 	dsb	sy
 800c162:	607b      	str	r3, [r7, #4]
}
 800c164:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c166:	4b0f      	ldr	r3, [pc, #60]	; (800c1a4 <vPortEnterCritical+0x58>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	3301      	adds	r3, #1
 800c16c:	4a0d      	ldr	r2, [pc, #52]	; (800c1a4 <vPortEnterCritical+0x58>)
 800c16e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c170:	4b0c      	ldr	r3, [pc, #48]	; (800c1a4 <vPortEnterCritical+0x58>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	2b01      	cmp	r3, #1
 800c176:	d10f      	bne.n	800c198 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c178:	4b0b      	ldr	r3, [pc, #44]	; (800c1a8 <vPortEnterCritical+0x5c>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d00a      	beq.n	800c198 <vPortEnterCritical+0x4c>
	__asm volatile
 800c182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c186:	f383 8811 	msr	BASEPRI, r3
 800c18a:	f3bf 8f6f 	isb	sy
 800c18e:	f3bf 8f4f 	dsb	sy
 800c192:	603b      	str	r3, [r7, #0]
}
 800c194:	bf00      	nop
 800c196:	e7fe      	b.n	800c196 <vPortEnterCritical+0x4a>
	}
}
 800c198:	bf00      	nop
 800c19a:	370c      	adds	r7, #12
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bc80      	pop	{r7}
 800c1a0:	4770      	bx	lr
 800c1a2:	bf00      	nop
 800c1a4:	20000100 	.word	0x20000100
 800c1a8:	e000ed04 	.word	0xe000ed04

0800c1ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b083      	sub	sp, #12
 800c1b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c1b2:	4b11      	ldr	r3, [pc, #68]	; (800c1f8 <vPortExitCritical+0x4c>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d10a      	bne.n	800c1d0 <vPortExitCritical+0x24>
	__asm volatile
 800c1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1be:	f383 8811 	msr	BASEPRI, r3
 800c1c2:	f3bf 8f6f 	isb	sy
 800c1c6:	f3bf 8f4f 	dsb	sy
 800c1ca:	607b      	str	r3, [r7, #4]
}
 800c1cc:	bf00      	nop
 800c1ce:	e7fe      	b.n	800c1ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c1d0:	4b09      	ldr	r3, [pc, #36]	; (800c1f8 <vPortExitCritical+0x4c>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	3b01      	subs	r3, #1
 800c1d6:	4a08      	ldr	r2, [pc, #32]	; (800c1f8 <vPortExitCritical+0x4c>)
 800c1d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c1da:	4b07      	ldr	r3, [pc, #28]	; (800c1f8 <vPortExitCritical+0x4c>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d105      	bne.n	800c1ee <vPortExitCritical+0x42>
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	f383 8811 	msr	BASEPRI, r3
}
 800c1ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c1ee:	bf00      	nop
 800c1f0:	370c      	adds	r7, #12
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bc80      	pop	{r7}
 800c1f6:	4770      	bx	lr
 800c1f8:	20000100 	.word	0x20000100
 800c1fc:	00000000 	.word	0x00000000

0800c200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c200:	f3ef 8009 	mrs	r0, PSP
 800c204:	f3bf 8f6f 	isb	sy
 800c208:	4b0d      	ldr	r3, [pc, #52]	; (800c240 <pxCurrentTCBConst>)
 800c20a:	681a      	ldr	r2, [r3, #0]
 800c20c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c210:	6010      	str	r0, [r2, #0]
 800c212:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c216:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c21a:	f380 8811 	msr	BASEPRI, r0
 800c21e:	f7ff f973 	bl	800b508 <vTaskSwitchContext>
 800c222:	f04f 0000 	mov.w	r0, #0
 800c226:	f380 8811 	msr	BASEPRI, r0
 800c22a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c22e:	6819      	ldr	r1, [r3, #0]
 800c230:	6808      	ldr	r0, [r1, #0]
 800c232:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c236:	f380 8809 	msr	PSP, r0
 800c23a:	f3bf 8f6f 	isb	sy
 800c23e:	4770      	bx	lr

0800c240 <pxCurrentTCBConst>:
 800c240:	200008d4 	.word	0x200008d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c244:	bf00      	nop
 800c246:	bf00      	nop

0800c248 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
	__asm volatile
 800c24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c252:	f383 8811 	msr	BASEPRI, r3
 800c256:	f3bf 8f6f 	isb	sy
 800c25a:	f3bf 8f4f 	dsb	sy
 800c25e:	607b      	str	r3, [r7, #4]
}
 800c260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c262:	f7ff f893 	bl	800b38c <xTaskIncrementTick>
 800c266:	4603      	mov	r3, r0
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d003      	beq.n	800c274 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c26c:	4b06      	ldr	r3, [pc, #24]	; (800c288 <SysTick_Handler+0x40>)
 800c26e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c272:	601a      	str	r2, [r3, #0]
 800c274:	2300      	movs	r3, #0
 800c276:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	f383 8811 	msr	BASEPRI, r3
}
 800c27e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c280:	bf00      	nop
 800c282:	3708      	adds	r7, #8
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	e000ed04 	.word	0xe000ed04

0800c28c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c28c:	b480      	push	{r7}
 800c28e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c290:	4b0a      	ldr	r3, [pc, #40]	; (800c2bc <vPortSetupTimerInterrupt+0x30>)
 800c292:	2200      	movs	r2, #0
 800c294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c296:	4b0a      	ldr	r3, [pc, #40]	; (800c2c0 <vPortSetupTimerInterrupt+0x34>)
 800c298:	2200      	movs	r2, #0
 800c29a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c29c:	4b09      	ldr	r3, [pc, #36]	; (800c2c4 <vPortSetupTimerInterrupt+0x38>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a09      	ldr	r2, [pc, #36]	; (800c2c8 <vPortSetupTimerInterrupt+0x3c>)
 800c2a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2a6:	099b      	lsrs	r3, r3, #6
 800c2a8:	4a08      	ldr	r2, [pc, #32]	; (800c2cc <vPortSetupTimerInterrupt+0x40>)
 800c2aa:	3b01      	subs	r3, #1
 800c2ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c2ae:	4b03      	ldr	r3, [pc, #12]	; (800c2bc <vPortSetupTimerInterrupt+0x30>)
 800c2b0:	2207      	movs	r2, #7
 800c2b2:	601a      	str	r2, [r3, #0]
}
 800c2b4:	bf00      	nop
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bc80      	pop	{r7}
 800c2ba:	4770      	bx	lr
 800c2bc:	e000e010 	.word	0xe000e010
 800c2c0:	e000e018 	.word	0xe000e018
 800c2c4:	200000e0 	.word	0x200000e0
 800c2c8:	10624dd3 	.word	0x10624dd3
 800c2cc:	e000e014 	.word	0xe000e014

0800c2d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b085      	sub	sp, #20
 800c2d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c2d6:	f3ef 8305 	mrs	r3, IPSR
 800c2da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2b0f      	cmp	r3, #15
 800c2e0:	d914      	bls.n	800c30c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c2e2:	4a16      	ldr	r2, [pc, #88]	; (800c33c <vPortValidateInterruptPriority+0x6c>)
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	4413      	add	r3, r2
 800c2e8:	781b      	ldrb	r3, [r3, #0]
 800c2ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c2ec:	4b14      	ldr	r3, [pc, #80]	; (800c340 <vPortValidateInterruptPriority+0x70>)
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	7afa      	ldrb	r2, [r7, #11]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d20a      	bcs.n	800c30c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2fa:	f383 8811 	msr	BASEPRI, r3
 800c2fe:	f3bf 8f6f 	isb	sy
 800c302:	f3bf 8f4f 	dsb	sy
 800c306:	607b      	str	r3, [r7, #4]
}
 800c308:	bf00      	nop
 800c30a:	e7fe      	b.n	800c30a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c30c:	4b0d      	ldr	r3, [pc, #52]	; (800c344 <vPortValidateInterruptPriority+0x74>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c314:	4b0c      	ldr	r3, [pc, #48]	; (800c348 <vPortValidateInterruptPriority+0x78>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	429a      	cmp	r2, r3
 800c31a:	d90a      	bls.n	800c332 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c320:	f383 8811 	msr	BASEPRI, r3
 800c324:	f3bf 8f6f 	isb	sy
 800c328:	f3bf 8f4f 	dsb	sy
 800c32c:	603b      	str	r3, [r7, #0]
}
 800c32e:	bf00      	nop
 800c330:	e7fe      	b.n	800c330 <vPortValidateInterruptPriority+0x60>
	}
 800c332:	bf00      	nop
 800c334:	3714      	adds	r7, #20
 800c336:	46bd      	mov	sp, r7
 800c338:	bc80      	pop	{r7}
 800c33a:	4770      	bx	lr
 800c33c:	e000e3f0 	.word	0xe000e3f0
 800c340:	20000a00 	.word	0x20000a00
 800c344:	e000ed0c 	.word	0xe000ed0c
 800c348:	20000a04 	.word	0x20000a04

0800c34c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b08a      	sub	sp, #40	; 0x28
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c354:	2300      	movs	r3, #0
 800c356:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c358:	f7fe ff6e 	bl	800b238 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c35c:	4b58      	ldr	r3, [pc, #352]	; (800c4c0 <pvPortMalloc+0x174>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d101      	bne.n	800c368 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c364:	f000 f910 	bl	800c588 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c368:	4b56      	ldr	r3, [pc, #344]	; (800c4c4 <pvPortMalloc+0x178>)
 800c36a:	681a      	ldr	r2, [r3, #0]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	4013      	ands	r3, r2
 800c370:	2b00      	cmp	r3, #0
 800c372:	f040 808e 	bne.w	800c492 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d01d      	beq.n	800c3b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c37c:	2208      	movs	r2, #8
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	4413      	add	r3, r2
 800c382:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f003 0307 	and.w	r3, r3, #7
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d014      	beq.n	800c3b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f023 0307 	bic.w	r3, r3, #7
 800c394:	3308      	adds	r3, #8
 800c396:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f003 0307 	and.w	r3, r3, #7
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d00a      	beq.n	800c3b8 <pvPortMalloc+0x6c>
	__asm volatile
 800c3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a6:	f383 8811 	msr	BASEPRI, r3
 800c3aa:	f3bf 8f6f 	isb	sy
 800c3ae:	f3bf 8f4f 	dsb	sy
 800c3b2:	617b      	str	r3, [r7, #20]
}
 800c3b4:	bf00      	nop
 800c3b6:	e7fe      	b.n	800c3b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d069      	beq.n	800c492 <pvPortMalloc+0x146>
 800c3be:	4b42      	ldr	r3, [pc, #264]	; (800c4c8 <pvPortMalloc+0x17c>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d864      	bhi.n	800c492 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c3c8:	4b40      	ldr	r3, [pc, #256]	; (800c4cc <pvPortMalloc+0x180>)
 800c3ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c3cc:	4b3f      	ldr	r3, [pc, #252]	; (800c4cc <pvPortMalloc+0x180>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c3d2:	e004      	b.n	800c3de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d903      	bls.n	800c3f0 <pvPortMalloc+0xa4>
 800c3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d1f1      	bne.n	800c3d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c3f0:	4b33      	ldr	r3, [pc, #204]	; (800c4c0 <pvPortMalloc+0x174>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d04b      	beq.n	800c492 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c3fa:	6a3b      	ldr	r3, [r7, #32]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	2208      	movs	r2, #8
 800c400:	4413      	add	r3, r2
 800c402:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c406:	681a      	ldr	r2, [r3, #0]
 800c408:	6a3b      	ldr	r3, [r7, #32]
 800c40a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c40e:	685a      	ldr	r2, [r3, #4]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	1ad2      	subs	r2, r2, r3
 800c414:	2308      	movs	r3, #8
 800c416:	005b      	lsls	r3, r3, #1
 800c418:	429a      	cmp	r2, r3
 800c41a:	d91f      	bls.n	800c45c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c41c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	4413      	add	r3, r2
 800c422:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c424:	69bb      	ldr	r3, [r7, #24]
 800c426:	f003 0307 	and.w	r3, r3, #7
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d00a      	beq.n	800c444 <pvPortMalloc+0xf8>
	__asm volatile
 800c42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c432:	f383 8811 	msr	BASEPRI, r3
 800c436:	f3bf 8f6f 	isb	sy
 800c43a:	f3bf 8f4f 	dsb	sy
 800c43e:	613b      	str	r3, [r7, #16]
}
 800c440:	bf00      	nop
 800c442:	e7fe      	b.n	800c442 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c446:	685a      	ldr	r2, [r3, #4]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	1ad2      	subs	r2, r2, r3
 800c44c:	69bb      	ldr	r3, [r7, #24]
 800c44e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c452:	687a      	ldr	r2, [r7, #4]
 800c454:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c456:	69b8      	ldr	r0, [r7, #24]
 800c458:	f000 f8f8 	bl	800c64c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c45c:	4b1a      	ldr	r3, [pc, #104]	; (800c4c8 <pvPortMalloc+0x17c>)
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c462:	685b      	ldr	r3, [r3, #4]
 800c464:	1ad3      	subs	r3, r2, r3
 800c466:	4a18      	ldr	r2, [pc, #96]	; (800c4c8 <pvPortMalloc+0x17c>)
 800c468:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c46a:	4b17      	ldr	r3, [pc, #92]	; (800c4c8 <pvPortMalloc+0x17c>)
 800c46c:	681a      	ldr	r2, [r3, #0]
 800c46e:	4b18      	ldr	r3, [pc, #96]	; (800c4d0 <pvPortMalloc+0x184>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	429a      	cmp	r2, r3
 800c474:	d203      	bcs.n	800c47e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c476:	4b14      	ldr	r3, [pc, #80]	; (800c4c8 <pvPortMalloc+0x17c>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	4a15      	ldr	r2, [pc, #84]	; (800c4d0 <pvPortMalloc+0x184>)
 800c47c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c480:	685a      	ldr	r2, [r3, #4]
 800c482:	4b10      	ldr	r3, [pc, #64]	; (800c4c4 <pvPortMalloc+0x178>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	431a      	orrs	r2, r3
 800c488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48e:	2200      	movs	r2, #0
 800c490:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c492:	f7fe fedf 	bl	800b254 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c496:	69fb      	ldr	r3, [r7, #28]
 800c498:	f003 0307 	and.w	r3, r3, #7
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d00a      	beq.n	800c4b6 <pvPortMalloc+0x16a>
	__asm volatile
 800c4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a4:	f383 8811 	msr	BASEPRI, r3
 800c4a8:	f3bf 8f6f 	isb	sy
 800c4ac:	f3bf 8f4f 	dsb	sy
 800c4b0:	60fb      	str	r3, [r7, #12]
}
 800c4b2:	bf00      	nop
 800c4b4:	e7fe      	b.n	800c4b4 <pvPortMalloc+0x168>
	return pvReturn;
 800c4b6:	69fb      	ldr	r3, [r7, #28]
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3728      	adds	r7, #40	; 0x28
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}
 800c4c0:	20005a10 	.word	0x20005a10
 800c4c4:	20005a1c 	.word	0x20005a1c
 800c4c8:	20005a14 	.word	0x20005a14
 800c4cc:	20005a08 	.word	0x20005a08
 800c4d0:	20005a18 	.word	0x20005a18

0800c4d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b086      	sub	sp, #24
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d048      	beq.n	800c578 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c4e6:	2308      	movs	r3, #8
 800c4e8:	425b      	negs	r3, r3
 800c4ea:	697a      	ldr	r2, [r7, #20]
 800c4ec:	4413      	add	r3, r2
 800c4ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	685a      	ldr	r2, [r3, #4]
 800c4f8:	4b21      	ldr	r3, [pc, #132]	; (800c580 <vPortFree+0xac>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4013      	ands	r3, r2
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d10a      	bne.n	800c518 <vPortFree+0x44>
	__asm volatile
 800c502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c506:	f383 8811 	msr	BASEPRI, r3
 800c50a:	f3bf 8f6f 	isb	sy
 800c50e:	f3bf 8f4f 	dsb	sy
 800c512:	60fb      	str	r3, [r7, #12]
}
 800c514:	bf00      	nop
 800c516:	e7fe      	b.n	800c516 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d00a      	beq.n	800c536 <vPortFree+0x62>
	__asm volatile
 800c520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c524:	f383 8811 	msr	BASEPRI, r3
 800c528:	f3bf 8f6f 	isb	sy
 800c52c:	f3bf 8f4f 	dsb	sy
 800c530:	60bb      	str	r3, [r7, #8]
}
 800c532:	bf00      	nop
 800c534:	e7fe      	b.n	800c534 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	685a      	ldr	r2, [r3, #4]
 800c53a:	4b11      	ldr	r3, [pc, #68]	; (800c580 <vPortFree+0xac>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	4013      	ands	r3, r2
 800c540:	2b00      	cmp	r3, #0
 800c542:	d019      	beq.n	800c578 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d115      	bne.n	800c578 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	685a      	ldr	r2, [r3, #4]
 800c550:	4b0b      	ldr	r3, [pc, #44]	; (800c580 <vPortFree+0xac>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	43db      	mvns	r3, r3
 800c556:	401a      	ands	r2, r3
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c55c:	f7fe fe6c 	bl	800b238 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	685a      	ldr	r2, [r3, #4]
 800c564:	4b07      	ldr	r3, [pc, #28]	; (800c584 <vPortFree+0xb0>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	4413      	add	r3, r2
 800c56a:	4a06      	ldr	r2, [pc, #24]	; (800c584 <vPortFree+0xb0>)
 800c56c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c56e:	6938      	ldr	r0, [r7, #16]
 800c570:	f000 f86c 	bl	800c64c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c574:	f7fe fe6e 	bl	800b254 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c578:	bf00      	nop
 800c57a:	3718      	adds	r7, #24
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}
 800c580:	20005a1c 	.word	0x20005a1c
 800c584:	20005a14 	.word	0x20005a14

0800c588 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c588:	b480      	push	{r7}
 800c58a:	b085      	sub	sp, #20
 800c58c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c58e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800c592:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c594:	4b27      	ldr	r3, [pc, #156]	; (800c634 <prvHeapInit+0xac>)
 800c596:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f003 0307 	and.w	r3, r3, #7
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d00c      	beq.n	800c5bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	3307      	adds	r3, #7
 800c5a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f023 0307 	bic.w	r3, r3, #7
 800c5ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c5b0:	68ba      	ldr	r2, [r7, #8]
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	1ad3      	subs	r3, r2, r3
 800c5b6:	4a1f      	ldr	r2, [pc, #124]	; (800c634 <prvHeapInit+0xac>)
 800c5b8:	4413      	add	r3, r2
 800c5ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c5c0:	4a1d      	ldr	r2, [pc, #116]	; (800c638 <prvHeapInit+0xb0>)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c5c6:	4b1c      	ldr	r3, [pc, #112]	; (800c638 <prvHeapInit+0xb0>)
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	68ba      	ldr	r2, [r7, #8]
 800c5d0:	4413      	add	r3, r2
 800c5d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c5d4:	2208      	movs	r2, #8
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	1a9b      	subs	r3, r3, r2
 800c5da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f023 0307 	bic.w	r3, r3, #7
 800c5e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	4a15      	ldr	r2, [pc, #84]	; (800c63c <prvHeapInit+0xb4>)
 800c5e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c5ea:	4b14      	ldr	r3, [pc, #80]	; (800c63c <prvHeapInit+0xb4>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c5f2:	4b12      	ldr	r3, [pc, #72]	; (800c63c <prvHeapInit+0xb4>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	68fa      	ldr	r2, [r7, #12]
 800c602:	1ad2      	subs	r2, r2, r3
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c608:	4b0c      	ldr	r3, [pc, #48]	; (800c63c <prvHeapInit+0xb4>)
 800c60a:	681a      	ldr	r2, [r3, #0]
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	4a0a      	ldr	r2, [pc, #40]	; (800c640 <prvHeapInit+0xb8>)
 800c616:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	4a09      	ldr	r2, [pc, #36]	; (800c644 <prvHeapInit+0xbc>)
 800c61e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c620:	4b09      	ldr	r3, [pc, #36]	; (800c648 <prvHeapInit+0xc0>)
 800c622:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c626:	601a      	str	r2, [r3, #0]
}
 800c628:	bf00      	nop
 800c62a:	3714      	adds	r7, #20
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bc80      	pop	{r7}
 800c630:	4770      	bx	lr
 800c632:	bf00      	nop
 800c634:	20000a08 	.word	0x20000a08
 800c638:	20005a08 	.word	0x20005a08
 800c63c:	20005a10 	.word	0x20005a10
 800c640:	20005a18 	.word	0x20005a18
 800c644:	20005a14 	.word	0x20005a14
 800c648:	20005a1c 	.word	0x20005a1c

0800c64c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c64c:	b480      	push	{r7}
 800c64e:	b085      	sub	sp, #20
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c654:	4b27      	ldr	r3, [pc, #156]	; (800c6f4 <prvInsertBlockIntoFreeList+0xa8>)
 800c656:	60fb      	str	r3, [r7, #12]
 800c658:	e002      	b.n	800c660 <prvInsertBlockIntoFreeList+0x14>
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	60fb      	str	r3, [r7, #12]
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	429a      	cmp	r2, r3
 800c668:	d8f7      	bhi.n	800c65a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	68ba      	ldr	r2, [r7, #8]
 800c674:	4413      	add	r3, r2
 800c676:	687a      	ldr	r2, [r7, #4]
 800c678:	429a      	cmp	r2, r3
 800c67a:	d108      	bne.n	800c68e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	685a      	ldr	r2, [r3, #4]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	441a      	add	r2, r3
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	685b      	ldr	r3, [r3, #4]
 800c696:	68ba      	ldr	r2, [r7, #8]
 800c698:	441a      	add	r2, r3
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d118      	bne.n	800c6d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	4b14      	ldr	r3, [pc, #80]	; (800c6f8 <prvInsertBlockIntoFreeList+0xac>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	d00d      	beq.n	800c6ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	685a      	ldr	r2, [r3, #4]
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	685b      	ldr	r3, [r3, #4]
 800c6b8:	441a      	add	r2, r3
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	681a      	ldr	r2, [r3, #0]
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	601a      	str	r2, [r3, #0]
 800c6c8:	e008      	b.n	800c6dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c6ca:	4b0b      	ldr	r3, [pc, #44]	; (800c6f8 <prvInsertBlockIntoFreeList+0xac>)
 800c6cc:	681a      	ldr	r2, [r3, #0]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	601a      	str	r2, [r3, #0]
 800c6d2:	e003      	b.n	800c6dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681a      	ldr	r2, [r3, #0]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c6dc:	68fa      	ldr	r2, [r7, #12]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d002      	beq.n	800c6ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	687a      	ldr	r2, [r7, #4]
 800c6e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6ea:	bf00      	nop
 800c6ec:	3714      	adds	r7, #20
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bc80      	pop	{r7}
 800c6f2:	4770      	bx	lr
 800c6f4:	20005a08 	.word	0x20005a08
 800c6f8:	20005a10 	.word	0x20005a10

0800c6fc <malloc>:
 800c6fc:	4b02      	ldr	r3, [pc, #8]	; (800c708 <malloc+0xc>)
 800c6fe:	4601      	mov	r1, r0
 800c700:	6818      	ldr	r0, [r3, #0]
 800c702:	f000 b82b 	b.w	800c75c <_malloc_r>
 800c706:	bf00      	nop
 800c708:	200002d0 	.word	0x200002d0

0800c70c <free>:
 800c70c:	4b02      	ldr	r3, [pc, #8]	; (800c718 <free+0xc>)
 800c70e:	4601      	mov	r1, r0
 800c710:	6818      	ldr	r0, [r3, #0]
 800c712:	f003 bac5 	b.w	800fca0 <_free_r>
 800c716:	bf00      	nop
 800c718:	200002d0 	.word	0x200002d0

0800c71c <sbrk_aligned>:
 800c71c:	b570      	push	{r4, r5, r6, lr}
 800c71e:	4e0e      	ldr	r6, [pc, #56]	; (800c758 <sbrk_aligned+0x3c>)
 800c720:	460c      	mov	r4, r1
 800c722:	6831      	ldr	r1, [r6, #0]
 800c724:	4605      	mov	r5, r0
 800c726:	b911      	cbnz	r1, 800c72e <sbrk_aligned+0x12>
 800c728:	f002 fb9a 	bl	800ee60 <_sbrk_r>
 800c72c:	6030      	str	r0, [r6, #0]
 800c72e:	4621      	mov	r1, r4
 800c730:	4628      	mov	r0, r5
 800c732:	f002 fb95 	bl	800ee60 <_sbrk_r>
 800c736:	1c43      	adds	r3, r0, #1
 800c738:	d00a      	beq.n	800c750 <sbrk_aligned+0x34>
 800c73a:	1cc4      	adds	r4, r0, #3
 800c73c:	f024 0403 	bic.w	r4, r4, #3
 800c740:	42a0      	cmp	r0, r4
 800c742:	d007      	beq.n	800c754 <sbrk_aligned+0x38>
 800c744:	1a21      	subs	r1, r4, r0
 800c746:	4628      	mov	r0, r5
 800c748:	f002 fb8a 	bl	800ee60 <_sbrk_r>
 800c74c:	3001      	adds	r0, #1
 800c74e:	d101      	bne.n	800c754 <sbrk_aligned+0x38>
 800c750:	f04f 34ff 	mov.w	r4, #4294967295
 800c754:	4620      	mov	r0, r4
 800c756:	bd70      	pop	{r4, r5, r6, pc}
 800c758:	20005a24 	.word	0x20005a24

0800c75c <_malloc_r>:
 800c75c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c760:	1ccd      	adds	r5, r1, #3
 800c762:	f025 0503 	bic.w	r5, r5, #3
 800c766:	3508      	adds	r5, #8
 800c768:	2d0c      	cmp	r5, #12
 800c76a:	bf38      	it	cc
 800c76c:	250c      	movcc	r5, #12
 800c76e:	2d00      	cmp	r5, #0
 800c770:	4607      	mov	r7, r0
 800c772:	db01      	blt.n	800c778 <_malloc_r+0x1c>
 800c774:	42a9      	cmp	r1, r5
 800c776:	d905      	bls.n	800c784 <_malloc_r+0x28>
 800c778:	230c      	movs	r3, #12
 800c77a:	2600      	movs	r6, #0
 800c77c:	603b      	str	r3, [r7, #0]
 800c77e:	4630      	mov	r0, r6
 800c780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c784:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c858 <_malloc_r+0xfc>
 800c788:	f000 f868 	bl	800c85c <__malloc_lock>
 800c78c:	f8d8 3000 	ldr.w	r3, [r8]
 800c790:	461c      	mov	r4, r3
 800c792:	bb5c      	cbnz	r4, 800c7ec <_malloc_r+0x90>
 800c794:	4629      	mov	r1, r5
 800c796:	4638      	mov	r0, r7
 800c798:	f7ff ffc0 	bl	800c71c <sbrk_aligned>
 800c79c:	1c43      	adds	r3, r0, #1
 800c79e:	4604      	mov	r4, r0
 800c7a0:	d155      	bne.n	800c84e <_malloc_r+0xf2>
 800c7a2:	f8d8 4000 	ldr.w	r4, [r8]
 800c7a6:	4626      	mov	r6, r4
 800c7a8:	2e00      	cmp	r6, #0
 800c7aa:	d145      	bne.n	800c838 <_malloc_r+0xdc>
 800c7ac:	2c00      	cmp	r4, #0
 800c7ae:	d048      	beq.n	800c842 <_malloc_r+0xe6>
 800c7b0:	6823      	ldr	r3, [r4, #0]
 800c7b2:	4631      	mov	r1, r6
 800c7b4:	4638      	mov	r0, r7
 800c7b6:	eb04 0903 	add.w	r9, r4, r3
 800c7ba:	f002 fb51 	bl	800ee60 <_sbrk_r>
 800c7be:	4581      	cmp	r9, r0
 800c7c0:	d13f      	bne.n	800c842 <_malloc_r+0xe6>
 800c7c2:	6821      	ldr	r1, [r4, #0]
 800c7c4:	4638      	mov	r0, r7
 800c7c6:	1a6d      	subs	r5, r5, r1
 800c7c8:	4629      	mov	r1, r5
 800c7ca:	f7ff ffa7 	bl	800c71c <sbrk_aligned>
 800c7ce:	3001      	adds	r0, #1
 800c7d0:	d037      	beq.n	800c842 <_malloc_r+0xe6>
 800c7d2:	6823      	ldr	r3, [r4, #0]
 800c7d4:	442b      	add	r3, r5
 800c7d6:	6023      	str	r3, [r4, #0]
 800c7d8:	f8d8 3000 	ldr.w	r3, [r8]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d038      	beq.n	800c852 <_malloc_r+0xf6>
 800c7e0:	685a      	ldr	r2, [r3, #4]
 800c7e2:	42a2      	cmp	r2, r4
 800c7e4:	d12b      	bne.n	800c83e <_malloc_r+0xe2>
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	605a      	str	r2, [r3, #4]
 800c7ea:	e00f      	b.n	800c80c <_malloc_r+0xb0>
 800c7ec:	6822      	ldr	r2, [r4, #0]
 800c7ee:	1b52      	subs	r2, r2, r5
 800c7f0:	d41f      	bmi.n	800c832 <_malloc_r+0xd6>
 800c7f2:	2a0b      	cmp	r2, #11
 800c7f4:	d917      	bls.n	800c826 <_malloc_r+0xca>
 800c7f6:	1961      	adds	r1, r4, r5
 800c7f8:	42a3      	cmp	r3, r4
 800c7fa:	6025      	str	r5, [r4, #0]
 800c7fc:	bf18      	it	ne
 800c7fe:	6059      	strne	r1, [r3, #4]
 800c800:	6863      	ldr	r3, [r4, #4]
 800c802:	bf08      	it	eq
 800c804:	f8c8 1000 	streq.w	r1, [r8]
 800c808:	5162      	str	r2, [r4, r5]
 800c80a:	604b      	str	r3, [r1, #4]
 800c80c:	4638      	mov	r0, r7
 800c80e:	f104 060b 	add.w	r6, r4, #11
 800c812:	f000 f829 	bl	800c868 <__malloc_unlock>
 800c816:	f026 0607 	bic.w	r6, r6, #7
 800c81a:	1d23      	adds	r3, r4, #4
 800c81c:	1af2      	subs	r2, r6, r3
 800c81e:	d0ae      	beq.n	800c77e <_malloc_r+0x22>
 800c820:	1b9b      	subs	r3, r3, r6
 800c822:	50a3      	str	r3, [r4, r2]
 800c824:	e7ab      	b.n	800c77e <_malloc_r+0x22>
 800c826:	42a3      	cmp	r3, r4
 800c828:	6862      	ldr	r2, [r4, #4]
 800c82a:	d1dd      	bne.n	800c7e8 <_malloc_r+0x8c>
 800c82c:	f8c8 2000 	str.w	r2, [r8]
 800c830:	e7ec      	b.n	800c80c <_malloc_r+0xb0>
 800c832:	4623      	mov	r3, r4
 800c834:	6864      	ldr	r4, [r4, #4]
 800c836:	e7ac      	b.n	800c792 <_malloc_r+0x36>
 800c838:	4634      	mov	r4, r6
 800c83a:	6876      	ldr	r6, [r6, #4]
 800c83c:	e7b4      	b.n	800c7a8 <_malloc_r+0x4c>
 800c83e:	4613      	mov	r3, r2
 800c840:	e7cc      	b.n	800c7dc <_malloc_r+0x80>
 800c842:	230c      	movs	r3, #12
 800c844:	4638      	mov	r0, r7
 800c846:	603b      	str	r3, [r7, #0]
 800c848:	f000 f80e 	bl	800c868 <__malloc_unlock>
 800c84c:	e797      	b.n	800c77e <_malloc_r+0x22>
 800c84e:	6025      	str	r5, [r4, #0]
 800c850:	e7dc      	b.n	800c80c <_malloc_r+0xb0>
 800c852:	605b      	str	r3, [r3, #4]
 800c854:	deff      	udf	#255	; 0xff
 800c856:	bf00      	nop
 800c858:	20005a20 	.word	0x20005a20

0800c85c <__malloc_lock>:
 800c85c:	4801      	ldr	r0, [pc, #4]	; (800c864 <__malloc_lock+0x8>)
 800c85e:	f002 bb4d 	b.w	800eefc <__retarget_lock_acquire_recursive>
 800c862:	bf00      	nop
 800c864:	20005b8d 	.word	0x20005b8d

0800c868 <__malloc_unlock>:
 800c868:	4801      	ldr	r0, [pc, #4]	; (800c870 <__malloc_unlock+0x8>)
 800c86a:	f002 bb49 	b.w	800ef00 <__retarget_lock_release_recursive>
 800c86e:	bf00      	nop
 800c870:	20005b8d 	.word	0x20005b8d

0800c874 <sulp>:
 800c874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c878:	460f      	mov	r7, r1
 800c87a:	4690      	mov	r8, r2
 800c87c:	f004 f974 	bl	8010b68 <__ulp>
 800c880:	4604      	mov	r4, r0
 800c882:	460d      	mov	r5, r1
 800c884:	f1b8 0f00 	cmp.w	r8, #0
 800c888:	d011      	beq.n	800c8ae <sulp+0x3a>
 800c88a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800c88e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c892:	2b00      	cmp	r3, #0
 800c894:	dd0b      	ble.n	800c8ae <sulp+0x3a>
 800c896:	2400      	movs	r4, #0
 800c898:	051b      	lsls	r3, r3, #20
 800c89a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c89e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c8a2:	4622      	mov	r2, r4
 800c8a4:	462b      	mov	r3, r5
 800c8a6:	f7f3 fe91 	bl	80005cc <__aeabi_dmul>
 800c8aa:	4604      	mov	r4, r0
 800c8ac:	460d      	mov	r5, r1
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	4629      	mov	r1, r5
 800c8b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800c8b8 <_strtod_l>:
 800c8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8bc:	b09f      	sub	sp, #124	; 0x7c
 800c8be:	9217      	str	r2, [sp, #92]	; 0x5c
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	4604      	mov	r4, r0
 800c8c4:	921a      	str	r2, [sp, #104]	; 0x68
 800c8c6:	460d      	mov	r5, r1
 800c8c8:	f04f 0800 	mov.w	r8, #0
 800c8cc:	f04f 0900 	mov.w	r9, #0
 800c8d0:	460a      	mov	r2, r1
 800c8d2:	9219      	str	r2, [sp, #100]	; 0x64
 800c8d4:	7811      	ldrb	r1, [r2, #0]
 800c8d6:	292b      	cmp	r1, #43	; 0x2b
 800c8d8:	d04a      	beq.n	800c970 <_strtod_l+0xb8>
 800c8da:	d838      	bhi.n	800c94e <_strtod_l+0x96>
 800c8dc:	290d      	cmp	r1, #13
 800c8de:	d832      	bhi.n	800c946 <_strtod_l+0x8e>
 800c8e0:	2908      	cmp	r1, #8
 800c8e2:	d832      	bhi.n	800c94a <_strtod_l+0x92>
 800c8e4:	2900      	cmp	r1, #0
 800c8e6:	d03b      	beq.n	800c960 <_strtod_l+0xa8>
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	920e      	str	r2, [sp, #56]	; 0x38
 800c8ec:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800c8ee:	7832      	ldrb	r2, [r6, #0]
 800c8f0:	2a30      	cmp	r2, #48	; 0x30
 800c8f2:	f040 80b2 	bne.w	800ca5a <_strtod_l+0x1a2>
 800c8f6:	7872      	ldrb	r2, [r6, #1]
 800c8f8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800c8fc:	2a58      	cmp	r2, #88	; 0x58
 800c8fe:	d16e      	bne.n	800c9de <_strtod_l+0x126>
 800c900:	9302      	str	r3, [sp, #8]
 800c902:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c904:	4620      	mov	r0, r4
 800c906:	9301      	str	r3, [sp, #4]
 800c908:	ab1a      	add	r3, sp, #104	; 0x68
 800c90a:	9300      	str	r3, [sp, #0]
 800c90c:	4a8c      	ldr	r2, [pc, #560]	; (800cb40 <_strtod_l+0x288>)
 800c90e:	ab1b      	add	r3, sp, #108	; 0x6c
 800c910:	a919      	add	r1, sp, #100	; 0x64
 800c912:	f003 fa75 	bl	800fe00 <__gethex>
 800c916:	f010 070f 	ands.w	r7, r0, #15
 800c91a:	4605      	mov	r5, r0
 800c91c:	d005      	beq.n	800c92a <_strtod_l+0x72>
 800c91e:	2f06      	cmp	r7, #6
 800c920:	d128      	bne.n	800c974 <_strtod_l+0xbc>
 800c922:	2300      	movs	r3, #0
 800c924:	3601      	adds	r6, #1
 800c926:	9619      	str	r6, [sp, #100]	; 0x64
 800c928:	930e      	str	r3, [sp, #56]	; 0x38
 800c92a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	f040 85a0 	bne.w	800d472 <_strtod_l+0xbba>
 800c932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c934:	b1cb      	cbz	r3, 800c96a <_strtod_l+0xb2>
 800c936:	4642      	mov	r2, r8
 800c938:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c93c:	4610      	mov	r0, r2
 800c93e:	4619      	mov	r1, r3
 800c940:	b01f      	add	sp, #124	; 0x7c
 800c942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c946:	2920      	cmp	r1, #32
 800c948:	d1ce      	bne.n	800c8e8 <_strtod_l+0x30>
 800c94a:	3201      	adds	r2, #1
 800c94c:	e7c1      	b.n	800c8d2 <_strtod_l+0x1a>
 800c94e:	292d      	cmp	r1, #45	; 0x2d
 800c950:	d1ca      	bne.n	800c8e8 <_strtod_l+0x30>
 800c952:	2101      	movs	r1, #1
 800c954:	910e      	str	r1, [sp, #56]	; 0x38
 800c956:	1c51      	adds	r1, r2, #1
 800c958:	9119      	str	r1, [sp, #100]	; 0x64
 800c95a:	7852      	ldrb	r2, [r2, #1]
 800c95c:	2a00      	cmp	r2, #0
 800c95e:	d1c5      	bne.n	800c8ec <_strtod_l+0x34>
 800c960:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c962:	9519      	str	r5, [sp, #100]	; 0x64
 800c964:	2b00      	cmp	r3, #0
 800c966:	f040 8582 	bne.w	800d46e <_strtod_l+0xbb6>
 800c96a:	4642      	mov	r2, r8
 800c96c:	464b      	mov	r3, r9
 800c96e:	e7e5      	b.n	800c93c <_strtod_l+0x84>
 800c970:	2100      	movs	r1, #0
 800c972:	e7ef      	b.n	800c954 <_strtod_l+0x9c>
 800c974:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c976:	b13a      	cbz	r2, 800c988 <_strtod_l+0xd0>
 800c978:	2135      	movs	r1, #53	; 0x35
 800c97a:	a81c      	add	r0, sp, #112	; 0x70
 800c97c:	f004 f9e0 	bl	8010d40 <__copybits>
 800c980:	4620      	mov	r0, r4
 800c982:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c984:	f003 fdc4 	bl	8010510 <_Bfree>
 800c988:	3f01      	subs	r7, #1
 800c98a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c98c:	2f04      	cmp	r7, #4
 800c98e:	d806      	bhi.n	800c99e <_strtod_l+0xe6>
 800c990:	e8df f007 	tbb	[pc, r7]
 800c994:	201d0314 	.word	0x201d0314
 800c998:	14          	.byte	0x14
 800c999:	00          	.byte	0x00
 800c99a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800c99e:	05e9      	lsls	r1, r5, #23
 800c9a0:	bf48      	it	mi
 800c9a2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800c9a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c9aa:	0d1b      	lsrs	r3, r3, #20
 800c9ac:	051b      	lsls	r3, r3, #20
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d1bb      	bne.n	800c92a <_strtod_l+0x72>
 800c9b2:	f002 fa77 	bl	800eea4 <__errno>
 800c9b6:	2322      	movs	r3, #34	; 0x22
 800c9b8:	6003      	str	r3, [r0, #0]
 800c9ba:	e7b6      	b.n	800c92a <_strtod_l+0x72>
 800c9bc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c9c0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800c9c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c9c8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c9cc:	e7e7      	b.n	800c99e <_strtod_l+0xe6>
 800c9ce:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800cb44 <_strtod_l+0x28c>
 800c9d2:	e7e4      	b.n	800c99e <_strtod_l+0xe6>
 800c9d4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c9d8:	f04f 38ff 	mov.w	r8, #4294967295
 800c9dc:	e7df      	b.n	800c99e <_strtod_l+0xe6>
 800c9de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c9e0:	1c5a      	adds	r2, r3, #1
 800c9e2:	9219      	str	r2, [sp, #100]	; 0x64
 800c9e4:	785b      	ldrb	r3, [r3, #1]
 800c9e6:	2b30      	cmp	r3, #48	; 0x30
 800c9e8:	d0f9      	beq.n	800c9de <_strtod_l+0x126>
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d09d      	beq.n	800c92a <_strtod_l+0x72>
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	f04f 0a00 	mov.w	sl, #0
 800c9f4:	220a      	movs	r2, #10
 800c9f6:	46d3      	mov	fp, sl
 800c9f8:	9305      	str	r3, [sp, #20]
 800c9fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c9fc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800ca00:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca02:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ca04:	7806      	ldrb	r6, [r0, #0]
 800ca06:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ca0a:	b2d9      	uxtb	r1, r3
 800ca0c:	2909      	cmp	r1, #9
 800ca0e:	d926      	bls.n	800ca5e <_strtod_l+0x1a6>
 800ca10:	2201      	movs	r2, #1
 800ca12:	494d      	ldr	r1, [pc, #308]	; (800cb48 <_strtod_l+0x290>)
 800ca14:	f001 fbb2 	bl	800e17c <strncmp>
 800ca18:	2800      	cmp	r0, #0
 800ca1a:	d030      	beq.n	800ca7e <_strtod_l+0x1c6>
 800ca1c:	2000      	movs	r0, #0
 800ca1e:	4632      	mov	r2, r6
 800ca20:	4603      	mov	r3, r0
 800ca22:	465e      	mov	r6, fp
 800ca24:	9008      	str	r0, [sp, #32]
 800ca26:	2a65      	cmp	r2, #101	; 0x65
 800ca28:	d001      	beq.n	800ca2e <_strtod_l+0x176>
 800ca2a:	2a45      	cmp	r2, #69	; 0x45
 800ca2c:	d113      	bne.n	800ca56 <_strtod_l+0x19e>
 800ca2e:	b91e      	cbnz	r6, 800ca38 <_strtod_l+0x180>
 800ca30:	9a05      	ldr	r2, [sp, #20]
 800ca32:	4302      	orrs	r2, r0
 800ca34:	d094      	beq.n	800c960 <_strtod_l+0xa8>
 800ca36:	2600      	movs	r6, #0
 800ca38:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800ca3a:	1c6a      	adds	r2, r5, #1
 800ca3c:	9219      	str	r2, [sp, #100]	; 0x64
 800ca3e:	786a      	ldrb	r2, [r5, #1]
 800ca40:	2a2b      	cmp	r2, #43	; 0x2b
 800ca42:	d074      	beq.n	800cb2e <_strtod_l+0x276>
 800ca44:	2a2d      	cmp	r2, #45	; 0x2d
 800ca46:	d078      	beq.n	800cb3a <_strtod_l+0x282>
 800ca48:	f04f 0c00 	mov.w	ip, #0
 800ca4c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ca50:	2909      	cmp	r1, #9
 800ca52:	d97f      	bls.n	800cb54 <_strtod_l+0x29c>
 800ca54:	9519      	str	r5, [sp, #100]	; 0x64
 800ca56:	2700      	movs	r7, #0
 800ca58:	e09e      	b.n	800cb98 <_strtod_l+0x2e0>
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	e7c8      	b.n	800c9f0 <_strtod_l+0x138>
 800ca5e:	f1bb 0f08 	cmp.w	fp, #8
 800ca62:	bfd8      	it	le
 800ca64:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800ca66:	f100 0001 	add.w	r0, r0, #1
 800ca6a:	bfd6      	itet	le
 800ca6c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ca70:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800ca74:	930a      	strle	r3, [sp, #40]	; 0x28
 800ca76:	f10b 0b01 	add.w	fp, fp, #1
 800ca7a:	9019      	str	r0, [sp, #100]	; 0x64
 800ca7c:	e7c1      	b.n	800ca02 <_strtod_l+0x14a>
 800ca7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ca80:	1c5a      	adds	r2, r3, #1
 800ca82:	9219      	str	r2, [sp, #100]	; 0x64
 800ca84:	785a      	ldrb	r2, [r3, #1]
 800ca86:	f1bb 0f00 	cmp.w	fp, #0
 800ca8a:	d037      	beq.n	800cafc <_strtod_l+0x244>
 800ca8c:	465e      	mov	r6, fp
 800ca8e:	9008      	str	r0, [sp, #32]
 800ca90:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ca94:	2b09      	cmp	r3, #9
 800ca96:	d912      	bls.n	800cabe <_strtod_l+0x206>
 800ca98:	2301      	movs	r3, #1
 800ca9a:	e7c4      	b.n	800ca26 <_strtod_l+0x16e>
 800ca9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ca9e:	3001      	adds	r0, #1
 800caa0:	1c5a      	adds	r2, r3, #1
 800caa2:	9219      	str	r2, [sp, #100]	; 0x64
 800caa4:	785a      	ldrb	r2, [r3, #1]
 800caa6:	2a30      	cmp	r2, #48	; 0x30
 800caa8:	d0f8      	beq.n	800ca9c <_strtod_l+0x1e4>
 800caaa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800caae:	2b08      	cmp	r3, #8
 800cab0:	f200 84e4 	bhi.w	800d47c <_strtod_l+0xbc4>
 800cab4:	9008      	str	r0, [sp, #32]
 800cab6:	2000      	movs	r0, #0
 800cab8:	4606      	mov	r6, r0
 800caba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cabc:	930b      	str	r3, [sp, #44]	; 0x2c
 800cabe:	3a30      	subs	r2, #48	; 0x30
 800cac0:	f100 0301 	add.w	r3, r0, #1
 800cac4:	d014      	beq.n	800caf0 <_strtod_l+0x238>
 800cac6:	9908      	ldr	r1, [sp, #32]
 800cac8:	eb00 0c06 	add.w	ip, r0, r6
 800cacc:	4419      	add	r1, r3
 800cace:	9108      	str	r1, [sp, #32]
 800cad0:	4633      	mov	r3, r6
 800cad2:	210a      	movs	r1, #10
 800cad4:	4563      	cmp	r3, ip
 800cad6:	d113      	bne.n	800cb00 <_strtod_l+0x248>
 800cad8:	1833      	adds	r3, r6, r0
 800cada:	2b08      	cmp	r3, #8
 800cadc:	f106 0601 	add.w	r6, r6, #1
 800cae0:	4406      	add	r6, r0
 800cae2:	dc1a      	bgt.n	800cb1a <_strtod_l+0x262>
 800cae4:	230a      	movs	r3, #10
 800cae6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cae8:	fb03 2301 	mla	r3, r3, r1, r2
 800caec:	930a      	str	r3, [sp, #40]	; 0x28
 800caee:	2300      	movs	r3, #0
 800caf0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800caf2:	4618      	mov	r0, r3
 800caf4:	1c51      	adds	r1, r2, #1
 800caf6:	9119      	str	r1, [sp, #100]	; 0x64
 800caf8:	7852      	ldrb	r2, [r2, #1]
 800cafa:	e7c9      	b.n	800ca90 <_strtod_l+0x1d8>
 800cafc:	4658      	mov	r0, fp
 800cafe:	e7d2      	b.n	800caa6 <_strtod_l+0x1ee>
 800cb00:	2b08      	cmp	r3, #8
 800cb02:	f103 0301 	add.w	r3, r3, #1
 800cb06:	dc03      	bgt.n	800cb10 <_strtod_l+0x258>
 800cb08:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800cb0a:	434f      	muls	r7, r1
 800cb0c:	970a      	str	r7, [sp, #40]	; 0x28
 800cb0e:	e7e1      	b.n	800cad4 <_strtod_l+0x21c>
 800cb10:	2b10      	cmp	r3, #16
 800cb12:	bfd8      	it	le
 800cb14:	fb01 fa0a 	mulle.w	sl, r1, sl
 800cb18:	e7dc      	b.n	800cad4 <_strtod_l+0x21c>
 800cb1a:	2e10      	cmp	r6, #16
 800cb1c:	bfdc      	itt	le
 800cb1e:	230a      	movle	r3, #10
 800cb20:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800cb24:	e7e3      	b.n	800caee <_strtod_l+0x236>
 800cb26:	2300      	movs	r3, #0
 800cb28:	9308      	str	r3, [sp, #32]
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	e780      	b.n	800ca30 <_strtod_l+0x178>
 800cb2e:	f04f 0c00 	mov.w	ip, #0
 800cb32:	1caa      	adds	r2, r5, #2
 800cb34:	9219      	str	r2, [sp, #100]	; 0x64
 800cb36:	78aa      	ldrb	r2, [r5, #2]
 800cb38:	e788      	b.n	800ca4c <_strtod_l+0x194>
 800cb3a:	f04f 0c01 	mov.w	ip, #1
 800cb3e:	e7f8      	b.n	800cb32 <_strtod_l+0x27a>
 800cb40:	08012004 	.word	0x08012004
 800cb44:	7ff00000 	.word	0x7ff00000
 800cb48:	08012002 	.word	0x08012002
 800cb4c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cb4e:	1c51      	adds	r1, r2, #1
 800cb50:	9119      	str	r1, [sp, #100]	; 0x64
 800cb52:	7852      	ldrb	r2, [r2, #1]
 800cb54:	2a30      	cmp	r2, #48	; 0x30
 800cb56:	d0f9      	beq.n	800cb4c <_strtod_l+0x294>
 800cb58:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800cb5c:	2908      	cmp	r1, #8
 800cb5e:	f63f af7a 	bhi.w	800ca56 <_strtod_l+0x19e>
 800cb62:	3a30      	subs	r2, #48	; 0x30
 800cb64:	9209      	str	r2, [sp, #36]	; 0x24
 800cb66:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cb68:	920c      	str	r2, [sp, #48]	; 0x30
 800cb6a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cb6c:	1c57      	adds	r7, r2, #1
 800cb6e:	9719      	str	r7, [sp, #100]	; 0x64
 800cb70:	7852      	ldrb	r2, [r2, #1]
 800cb72:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800cb76:	f1be 0f09 	cmp.w	lr, #9
 800cb7a:	d938      	bls.n	800cbee <_strtod_l+0x336>
 800cb7c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cb7e:	1a7f      	subs	r7, r7, r1
 800cb80:	2f08      	cmp	r7, #8
 800cb82:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800cb86:	dc03      	bgt.n	800cb90 <_strtod_l+0x2d8>
 800cb88:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb8a:	428f      	cmp	r7, r1
 800cb8c:	bfa8      	it	ge
 800cb8e:	460f      	movge	r7, r1
 800cb90:	f1bc 0f00 	cmp.w	ip, #0
 800cb94:	d000      	beq.n	800cb98 <_strtod_l+0x2e0>
 800cb96:	427f      	negs	r7, r7
 800cb98:	2e00      	cmp	r6, #0
 800cb9a:	d14f      	bne.n	800cc3c <_strtod_l+0x384>
 800cb9c:	9905      	ldr	r1, [sp, #20]
 800cb9e:	4301      	orrs	r1, r0
 800cba0:	f47f aec3 	bne.w	800c92a <_strtod_l+0x72>
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	f47f aedb 	bne.w	800c960 <_strtod_l+0xa8>
 800cbaa:	2a69      	cmp	r2, #105	; 0x69
 800cbac:	d029      	beq.n	800cc02 <_strtod_l+0x34a>
 800cbae:	dc26      	bgt.n	800cbfe <_strtod_l+0x346>
 800cbb0:	2a49      	cmp	r2, #73	; 0x49
 800cbb2:	d026      	beq.n	800cc02 <_strtod_l+0x34a>
 800cbb4:	2a4e      	cmp	r2, #78	; 0x4e
 800cbb6:	f47f aed3 	bne.w	800c960 <_strtod_l+0xa8>
 800cbba:	499a      	ldr	r1, [pc, #616]	; (800ce24 <_strtod_l+0x56c>)
 800cbbc:	a819      	add	r0, sp, #100	; 0x64
 800cbbe:	f003 fb61 	bl	8010284 <__match>
 800cbc2:	2800      	cmp	r0, #0
 800cbc4:	f43f aecc 	beq.w	800c960 <_strtod_l+0xa8>
 800cbc8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	2b28      	cmp	r3, #40	; 0x28
 800cbce:	d12f      	bne.n	800cc30 <_strtod_l+0x378>
 800cbd0:	4995      	ldr	r1, [pc, #596]	; (800ce28 <_strtod_l+0x570>)
 800cbd2:	aa1c      	add	r2, sp, #112	; 0x70
 800cbd4:	a819      	add	r0, sp, #100	; 0x64
 800cbd6:	f003 fb69 	bl	80102ac <__hexnan>
 800cbda:	2805      	cmp	r0, #5
 800cbdc:	d128      	bne.n	800cc30 <_strtod_l+0x378>
 800cbde:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cbe0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800cbe4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800cbe8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800cbec:	e69d      	b.n	800c92a <_strtod_l+0x72>
 800cbee:	210a      	movs	r1, #10
 800cbf0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cbf2:	fb01 2107 	mla	r1, r1, r7, r2
 800cbf6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800cbfa:	9209      	str	r2, [sp, #36]	; 0x24
 800cbfc:	e7b5      	b.n	800cb6a <_strtod_l+0x2b2>
 800cbfe:	2a6e      	cmp	r2, #110	; 0x6e
 800cc00:	e7d9      	b.n	800cbb6 <_strtod_l+0x2fe>
 800cc02:	498a      	ldr	r1, [pc, #552]	; (800ce2c <_strtod_l+0x574>)
 800cc04:	a819      	add	r0, sp, #100	; 0x64
 800cc06:	f003 fb3d 	bl	8010284 <__match>
 800cc0a:	2800      	cmp	r0, #0
 800cc0c:	f43f aea8 	beq.w	800c960 <_strtod_l+0xa8>
 800cc10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cc12:	4987      	ldr	r1, [pc, #540]	; (800ce30 <_strtod_l+0x578>)
 800cc14:	3b01      	subs	r3, #1
 800cc16:	a819      	add	r0, sp, #100	; 0x64
 800cc18:	9319      	str	r3, [sp, #100]	; 0x64
 800cc1a:	f003 fb33 	bl	8010284 <__match>
 800cc1e:	b910      	cbnz	r0, 800cc26 <_strtod_l+0x36e>
 800cc20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cc22:	3301      	adds	r3, #1
 800cc24:	9319      	str	r3, [sp, #100]	; 0x64
 800cc26:	f04f 0800 	mov.w	r8, #0
 800cc2a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800ce34 <_strtod_l+0x57c>
 800cc2e:	e67c      	b.n	800c92a <_strtod_l+0x72>
 800cc30:	4881      	ldr	r0, [pc, #516]	; (800ce38 <_strtod_l+0x580>)
 800cc32:	f002 f98b 	bl	800ef4c <nan>
 800cc36:	4680      	mov	r8, r0
 800cc38:	4689      	mov	r9, r1
 800cc3a:	e676      	b.n	800c92a <_strtod_l+0x72>
 800cc3c:	9b08      	ldr	r3, [sp, #32]
 800cc3e:	f1bb 0f00 	cmp.w	fp, #0
 800cc42:	bf08      	it	eq
 800cc44:	46b3      	moveq	fp, r6
 800cc46:	1afb      	subs	r3, r7, r3
 800cc48:	2e10      	cmp	r6, #16
 800cc4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cc4c:	4635      	mov	r5, r6
 800cc4e:	9309      	str	r3, [sp, #36]	; 0x24
 800cc50:	bfa8      	it	ge
 800cc52:	2510      	movge	r5, #16
 800cc54:	f7f3 fc40 	bl	80004d8 <__aeabi_ui2d>
 800cc58:	2e09      	cmp	r6, #9
 800cc5a:	4680      	mov	r8, r0
 800cc5c:	4689      	mov	r9, r1
 800cc5e:	dd13      	ble.n	800cc88 <_strtod_l+0x3d0>
 800cc60:	4b76      	ldr	r3, [pc, #472]	; (800ce3c <_strtod_l+0x584>)
 800cc62:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cc66:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cc6a:	f7f3 fcaf 	bl	80005cc <__aeabi_dmul>
 800cc6e:	4680      	mov	r8, r0
 800cc70:	4650      	mov	r0, sl
 800cc72:	4689      	mov	r9, r1
 800cc74:	f7f3 fc30 	bl	80004d8 <__aeabi_ui2d>
 800cc78:	4602      	mov	r2, r0
 800cc7a:	460b      	mov	r3, r1
 800cc7c:	4640      	mov	r0, r8
 800cc7e:	4649      	mov	r1, r9
 800cc80:	f7f3 faee 	bl	8000260 <__adddf3>
 800cc84:	4680      	mov	r8, r0
 800cc86:	4689      	mov	r9, r1
 800cc88:	2e0f      	cmp	r6, #15
 800cc8a:	dc36      	bgt.n	800ccfa <_strtod_l+0x442>
 800cc8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	f43f ae4b 	beq.w	800c92a <_strtod_l+0x72>
 800cc94:	dd22      	ble.n	800ccdc <_strtod_l+0x424>
 800cc96:	2b16      	cmp	r3, #22
 800cc98:	dc09      	bgt.n	800ccae <_strtod_l+0x3f6>
 800cc9a:	4968      	ldr	r1, [pc, #416]	; (800ce3c <_strtod_l+0x584>)
 800cc9c:	4642      	mov	r2, r8
 800cc9e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cca2:	464b      	mov	r3, r9
 800cca4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cca8:	f7f3 fc90 	bl	80005cc <__aeabi_dmul>
 800ccac:	e7c3      	b.n	800cc36 <_strtod_l+0x37e>
 800ccae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccb0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	db20      	blt.n	800ccfa <_strtod_l+0x442>
 800ccb8:	4c60      	ldr	r4, [pc, #384]	; (800ce3c <_strtod_l+0x584>)
 800ccba:	f1c6 060f 	rsb	r6, r6, #15
 800ccbe:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800ccc2:	4642      	mov	r2, r8
 800ccc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccc8:	464b      	mov	r3, r9
 800ccca:	f7f3 fc7f 	bl	80005cc <__aeabi_dmul>
 800ccce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccd0:	1b9e      	subs	r6, r3, r6
 800ccd2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800ccd6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ccda:	e7e5      	b.n	800cca8 <_strtod_l+0x3f0>
 800ccdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccde:	3316      	adds	r3, #22
 800cce0:	db0b      	blt.n	800ccfa <_strtod_l+0x442>
 800cce2:	9b08      	ldr	r3, [sp, #32]
 800cce4:	4640      	mov	r0, r8
 800cce6:	1bdf      	subs	r7, r3, r7
 800cce8:	4b54      	ldr	r3, [pc, #336]	; (800ce3c <_strtod_l+0x584>)
 800ccea:	4649      	mov	r1, r9
 800ccec:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ccf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccf4:	f7f3 fd94 	bl	8000820 <__aeabi_ddiv>
 800ccf8:	e79d      	b.n	800cc36 <_strtod_l+0x37e>
 800ccfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccfc:	1b75      	subs	r5, r6, r5
 800ccfe:	441d      	add	r5, r3
 800cd00:	2d00      	cmp	r5, #0
 800cd02:	dd70      	ble.n	800cde6 <_strtod_l+0x52e>
 800cd04:	f015 030f 	ands.w	r3, r5, #15
 800cd08:	d00a      	beq.n	800cd20 <_strtod_l+0x468>
 800cd0a:	494c      	ldr	r1, [pc, #304]	; (800ce3c <_strtod_l+0x584>)
 800cd0c:	4642      	mov	r2, r8
 800cd0e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cd12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd16:	464b      	mov	r3, r9
 800cd18:	f7f3 fc58 	bl	80005cc <__aeabi_dmul>
 800cd1c:	4680      	mov	r8, r0
 800cd1e:	4689      	mov	r9, r1
 800cd20:	f035 050f 	bics.w	r5, r5, #15
 800cd24:	d04d      	beq.n	800cdc2 <_strtod_l+0x50a>
 800cd26:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800cd2a:	dd22      	ble.n	800cd72 <_strtod_l+0x4ba>
 800cd2c:	2600      	movs	r6, #0
 800cd2e:	46b3      	mov	fp, r6
 800cd30:	960b      	str	r6, [sp, #44]	; 0x2c
 800cd32:	9608      	str	r6, [sp, #32]
 800cd34:	2322      	movs	r3, #34	; 0x22
 800cd36:	f04f 0800 	mov.w	r8, #0
 800cd3a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800ce34 <_strtod_l+0x57c>
 800cd3e:	6023      	str	r3, [r4, #0]
 800cd40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	f43f adf1 	beq.w	800c92a <_strtod_l+0x72>
 800cd48:	4620      	mov	r0, r4
 800cd4a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800cd4c:	f003 fbe0 	bl	8010510 <_Bfree>
 800cd50:	4620      	mov	r0, r4
 800cd52:	9908      	ldr	r1, [sp, #32]
 800cd54:	f003 fbdc 	bl	8010510 <_Bfree>
 800cd58:	4659      	mov	r1, fp
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	f003 fbd8 	bl	8010510 <_Bfree>
 800cd60:	4620      	mov	r0, r4
 800cd62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd64:	f003 fbd4 	bl	8010510 <_Bfree>
 800cd68:	4631      	mov	r1, r6
 800cd6a:	4620      	mov	r0, r4
 800cd6c:	f003 fbd0 	bl	8010510 <_Bfree>
 800cd70:	e5db      	b.n	800c92a <_strtod_l+0x72>
 800cd72:	4b33      	ldr	r3, [pc, #204]	; (800ce40 <_strtod_l+0x588>)
 800cd74:	4640      	mov	r0, r8
 800cd76:	9305      	str	r3, [sp, #20]
 800cd78:	2300      	movs	r3, #0
 800cd7a:	4649      	mov	r1, r9
 800cd7c:	469a      	mov	sl, r3
 800cd7e:	112d      	asrs	r5, r5, #4
 800cd80:	2d01      	cmp	r5, #1
 800cd82:	dc21      	bgt.n	800cdc8 <_strtod_l+0x510>
 800cd84:	b10b      	cbz	r3, 800cd8a <_strtod_l+0x4d2>
 800cd86:	4680      	mov	r8, r0
 800cd88:	4689      	mov	r9, r1
 800cd8a:	492d      	ldr	r1, [pc, #180]	; (800ce40 <_strtod_l+0x588>)
 800cd8c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800cd90:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800cd94:	4642      	mov	r2, r8
 800cd96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd9a:	464b      	mov	r3, r9
 800cd9c:	f7f3 fc16 	bl	80005cc <__aeabi_dmul>
 800cda0:	4b24      	ldr	r3, [pc, #144]	; (800ce34 <_strtod_l+0x57c>)
 800cda2:	460a      	mov	r2, r1
 800cda4:	400b      	ands	r3, r1
 800cda6:	4927      	ldr	r1, [pc, #156]	; (800ce44 <_strtod_l+0x58c>)
 800cda8:	4680      	mov	r8, r0
 800cdaa:	428b      	cmp	r3, r1
 800cdac:	d8be      	bhi.n	800cd2c <_strtod_l+0x474>
 800cdae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cdb2:	428b      	cmp	r3, r1
 800cdb4:	bf86      	itte	hi
 800cdb6:	f04f 38ff 	movhi.w	r8, #4294967295
 800cdba:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800ce48 <_strtod_l+0x590>
 800cdbe:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	9305      	str	r3, [sp, #20]
 800cdc6:	e07b      	b.n	800cec0 <_strtod_l+0x608>
 800cdc8:	07ea      	lsls	r2, r5, #31
 800cdca:	d505      	bpl.n	800cdd8 <_strtod_l+0x520>
 800cdcc:	9b05      	ldr	r3, [sp, #20]
 800cdce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd2:	f7f3 fbfb 	bl	80005cc <__aeabi_dmul>
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	9a05      	ldr	r2, [sp, #20]
 800cdda:	f10a 0a01 	add.w	sl, sl, #1
 800cdde:	3208      	adds	r2, #8
 800cde0:	106d      	asrs	r5, r5, #1
 800cde2:	9205      	str	r2, [sp, #20]
 800cde4:	e7cc      	b.n	800cd80 <_strtod_l+0x4c8>
 800cde6:	d0ec      	beq.n	800cdc2 <_strtod_l+0x50a>
 800cde8:	426d      	negs	r5, r5
 800cdea:	f015 020f 	ands.w	r2, r5, #15
 800cdee:	d00a      	beq.n	800ce06 <_strtod_l+0x54e>
 800cdf0:	4b12      	ldr	r3, [pc, #72]	; (800ce3c <_strtod_l+0x584>)
 800cdf2:	4640      	mov	r0, r8
 800cdf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cdf8:	4649      	mov	r1, r9
 800cdfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdfe:	f7f3 fd0f 	bl	8000820 <__aeabi_ddiv>
 800ce02:	4680      	mov	r8, r0
 800ce04:	4689      	mov	r9, r1
 800ce06:	112d      	asrs	r5, r5, #4
 800ce08:	d0db      	beq.n	800cdc2 <_strtod_l+0x50a>
 800ce0a:	2d1f      	cmp	r5, #31
 800ce0c:	dd1e      	ble.n	800ce4c <_strtod_l+0x594>
 800ce0e:	2600      	movs	r6, #0
 800ce10:	46b3      	mov	fp, r6
 800ce12:	960b      	str	r6, [sp, #44]	; 0x2c
 800ce14:	9608      	str	r6, [sp, #32]
 800ce16:	2322      	movs	r3, #34	; 0x22
 800ce18:	f04f 0800 	mov.w	r8, #0
 800ce1c:	f04f 0900 	mov.w	r9, #0
 800ce20:	6023      	str	r3, [r4, #0]
 800ce22:	e78d      	b.n	800cd40 <_strtod_l+0x488>
 800ce24:	08012166 	.word	0x08012166
 800ce28:	08012018 	.word	0x08012018
 800ce2c:	0801215e 	.word	0x0801215e
 800ce30:	080122f1 	.word	0x080122f1
 800ce34:	7ff00000 	.word	0x7ff00000
 800ce38:	080122ed 	.word	0x080122ed
 800ce3c:	08012448 	.word	0x08012448
 800ce40:	08012420 	.word	0x08012420
 800ce44:	7ca00000 	.word	0x7ca00000
 800ce48:	7fefffff 	.word	0x7fefffff
 800ce4c:	f015 0310 	ands.w	r3, r5, #16
 800ce50:	bf18      	it	ne
 800ce52:	236a      	movne	r3, #106	; 0x6a
 800ce54:	4640      	mov	r0, r8
 800ce56:	9305      	str	r3, [sp, #20]
 800ce58:	4649      	mov	r1, r9
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800d128 <_strtod_l+0x870>
 800ce60:	07ea      	lsls	r2, r5, #31
 800ce62:	d504      	bpl.n	800ce6e <_strtod_l+0x5b6>
 800ce64:	e9da 2300 	ldrd	r2, r3, [sl]
 800ce68:	f7f3 fbb0 	bl	80005cc <__aeabi_dmul>
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	106d      	asrs	r5, r5, #1
 800ce70:	f10a 0a08 	add.w	sl, sl, #8
 800ce74:	d1f4      	bne.n	800ce60 <_strtod_l+0x5a8>
 800ce76:	b10b      	cbz	r3, 800ce7c <_strtod_l+0x5c4>
 800ce78:	4680      	mov	r8, r0
 800ce7a:	4689      	mov	r9, r1
 800ce7c:	9b05      	ldr	r3, [sp, #20]
 800ce7e:	b1bb      	cbz	r3, 800ceb0 <_strtod_l+0x5f8>
 800ce80:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800ce84:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	4649      	mov	r1, r9
 800ce8c:	dd10      	ble.n	800ceb0 <_strtod_l+0x5f8>
 800ce8e:	2b1f      	cmp	r3, #31
 800ce90:	f340 8128 	ble.w	800d0e4 <_strtod_l+0x82c>
 800ce94:	2b34      	cmp	r3, #52	; 0x34
 800ce96:	bfd8      	it	le
 800ce98:	f04f 33ff 	movle.w	r3, #4294967295
 800ce9c:	f04f 0800 	mov.w	r8, #0
 800cea0:	bfcf      	iteee	gt
 800cea2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800cea6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ceaa:	4093      	lslle	r3, r2
 800ceac:	ea03 0901 	andle.w	r9, r3, r1
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	4640      	mov	r0, r8
 800ceb6:	4649      	mov	r1, r9
 800ceb8:	f7f3 fdf0 	bl	8000a9c <__aeabi_dcmpeq>
 800cebc:	2800      	cmp	r0, #0
 800cebe:	d1a6      	bne.n	800ce0e <_strtod_l+0x556>
 800cec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cec2:	465a      	mov	r2, fp
 800cec4:	9300      	str	r3, [sp, #0]
 800cec6:	4620      	mov	r0, r4
 800cec8:	4633      	mov	r3, r6
 800ceca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cecc:	f003 fb88 	bl	80105e0 <__s2b>
 800ced0:	900b      	str	r0, [sp, #44]	; 0x2c
 800ced2:	2800      	cmp	r0, #0
 800ced4:	f43f af2a 	beq.w	800cd2c <_strtod_l+0x474>
 800ced8:	2600      	movs	r6, #0
 800ceda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cedc:	9b08      	ldr	r3, [sp, #32]
 800cede:	2a00      	cmp	r2, #0
 800cee0:	eba3 0307 	sub.w	r3, r3, r7
 800cee4:	bfa8      	it	ge
 800cee6:	2300      	movge	r3, #0
 800cee8:	46b3      	mov	fp, r6
 800ceea:	9312      	str	r3, [sp, #72]	; 0x48
 800ceec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cef0:	9316      	str	r3, [sp, #88]	; 0x58
 800cef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cef4:	4620      	mov	r0, r4
 800cef6:	6859      	ldr	r1, [r3, #4]
 800cef8:	f003 faca 	bl	8010490 <_Balloc>
 800cefc:	9008      	str	r0, [sp, #32]
 800cefe:	2800      	cmp	r0, #0
 800cf00:	f43f af18 	beq.w	800cd34 <_strtod_l+0x47c>
 800cf04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf06:	300c      	adds	r0, #12
 800cf08:	691a      	ldr	r2, [r3, #16]
 800cf0a:	f103 010c 	add.w	r1, r3, #12
 800cf0e:	3202      	adds	r2, #2
 800cf10:	0092      	lsls	r2, r2, #2
 800cf12:	f002 f80c 	bl	800ef2e <memcpy>
 800cf16:	ab1c      	add	r3, sp, #112	; 0x70
 800cf18:	9301      	str	r3, [sp, #4]
 800cf1a:	ab1b      	add	r3, sp, #108	; 0x6c
 800cf1c:	9300      	str	r3, [sp, #0]
 800cf1e:	4642      	mov	r2, r8
 800cf20:	464b      	mov	r3, r9
 800cf22:	4620      	mov	r0, r4
 800cf24:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800cf28:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800cf2c:	f003 fe84 	bl	8010c38 <__d2b>
 800cf30:	901a      	str	r0, [sp, #104]	; 0x68
 800cf32:	2800      	cmp	r0, #0
 800cf34:	f43f aefe 	beq.w	800cd34 <_strtod_l+0x47c>
 800cf38:	2101      	movs	r1, #1
 800cf3a:	4620      	mov	r0, r4
 800cf3c:	f003 fbe8 	bl	8010710 <__i2b>
 800cf40:	4683      	mov	fp, r0
 800cf42:	2800      	cmp	r0, #0
 800cf44:	f43f aef6 	beq.w	800cd34 <_strtod_l+0x47c>
 800cf48:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800cf4a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800cf4c:	2f00      	cmp	r7, #0
 800cf4e:	bfab      	itete	ge
 800cf50:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800cf52:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800cf54:	eb07 0a03 	addge.w	sl, r7, r3
 800cf58:	1bdd      	sublt	r5, r3, r7
 800cf5a:	9b05      	ldr	r3, [sp, #20]
 800cf5c:	bfa8      	it	ge
 800cf5e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800cf60:	eba7 0703 	sub.w	r7, r7, r3
 800cf64:	4417      	add	r7, r2
 800cf66:	4b71      	ldr	r3, [pc, #452]	; (800d12c <_strtod_l+0x874>)
 800cf68:	f107 37ff 	add.w	r7, r7, #4294967295
 800cf6c:	bfb8      	it	lt
 800cf6e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800cf72:	429f      	cmp	r7, r3
 800cf74:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cf78:	f280 80c7 	bge.w	800d10a <_strtod_l+0x852>
 800cf7c:	1bdb      	subs	r3, r3, r7
 800cf7e:	2b1f      	cmp	r3, #31
 800cf80:	f04f 0101 	mov.w	r1, #1
 800cf84:	eba2 0203 	sub.w	r2, r2, r3
 800cf88:	f300 80b3 	bgt.w	800d0f2 <_strtod_l+0x83a>
 800cf8c:	fa01 f303 	lsl.w	r3, r1, r3
 800cf90:	9313      	str	r3, [sp, #76]	; 0x4c
 800cf92:	2300      	movs	r3, #0
 800cf94:	9310      	str	r3, [sp, #64]	; 0x40
 800cf96:	eb0a 0702 	add.w	r7, sl, r2
 800cf9a:	9b05      	ldr	r3, [sp, #20]
 800cf9c:	45ba      	cmp	sl, r7
 800cf9e:	4415      	add	r5, r2
 800cfa0:	441d      	add	r5, r3
 800cfa2:	4653      	mov	r3, sl
 800cfa4:	bfa8      	it	ge
 800cfa6:	463b      	movge	r3, r7
 800cfa8:	42ab      	cmp	r3, r5
 800cfaa:	bfa8      	it	ge
 800cfac:	462b      	movge	r3, r5
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	bfc2      	ittt	gt
 800cfb2:	1aff      	subgt	r7, r7, r3
 800cfb4:	1aed      	subgt	r5, r5, r3
 800cfb6:	ebaa 0a03 	subgt.w	sl, sl, r3
 800cfba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	dd17      	ble.n	800cff0 <_strtod_l+0x738>
 800cfc0:	4659      	mov	r1, fp
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	4620      	mov	r0, r4
 800cfc6:	f003 fc61 	bl	801088c <__pow5mult>
 800cfca:	4683      	mov	fp, r0
 800cfcc:	2800      	cmp	r0, #0
 800cfce:	f43f aeb1 	beq.w	800cd34 <_strtod_l+0x47c>
 800cfd2:	4601      	mov	r1, r0
 800cfd4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cfd6:	4620      	mov	r0, r4
 800cfd8:	f003 fbb0 	bl	801073c <__multiply>
 800cfdc:	900a      	str	r0, [sp, #40]	; 0x28
 800cfde:	2800      	cmp	r0, #0
 800cfe0:	f43f aea8 	beq.w	800cd34 <_strtod_l+0x47c>
 800cfe4:	4620      	mov	r0, r4
 800cfe6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800cfe8:	f003 fa92 	bl	8010510 <_Bfree>
 800cfec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfee:	931a      	str	r3, [sp, #104]	; 0x68
 800cff0:	2f00      	cmp	r7, #0
 800cff2:	f300 808f 	bgt.w	800d114 <_strtod_l+0x85c>
 800cff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	dd08      	ble.n	800d00e <_strtod_l+0x756>
 800cffc:	4620      	mov	r0, r4
 800cffe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d000:	9908      	ldr	r1, [sp, #32]
 800d002:	f003 fc43 	bl	801088c <__pow5mult>
 800d006:	9008      	str	r0, [sp, #32]
 800d008:	2800      	cmp	r0, #0
 800d00a:	f43f ae93 	beq.w	800cd34 <_strtod_l+0x47c>
 800d00e:	2d00      	cmp	r5, #0
 800d010:	dd08      	ble.n	800d024 <_strtod_l+0x76c>
 800d012:	462a      	mov	r2, r5
 800d014:	4620      	mov	r0, r4
 800d016:	9908      	ldr	r1, [sp, #32]
 800d018:	f003 fc92 	bl	8010940 <__lshift>
 800d01c:	9008      	str	r0, [sp, #32]
 800d01e:	2800      	cmp	r0, #0
 800d020:	f43f ae88 	beq.w	800cd34 <_strtod_l+0x47c>
 800d024:	f1ba 0f00 	cmp.w	sl, #0
 800d028:	dd08      	ble.n	800d03c <_strtod_l+0x784>
 800d02a:	4659      	mov	r1, fp
 800d02c:	4652      	mov	r2, sl
 800d02e:	4620      	mov	r0, r4
 800d030:	f003 fc86 	bl	8010940 <__lshift>
 800d034:	4683      	mov	fp, r0
 800d036:	2800      	cmp	r0, #0
 800d038:	f43f ae7c 	beq.w	800cd34 <_strtod_l+0x47c>
 800d03c:	4620      	mov	r0, r4
 800d03e:	9a08      	ldr	r2, [sp, #32]
 800d040:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d042:	f003 fd05 	bl	8010a50 <__mdiff>
 800d046:	4606      	mov	r6, r0
 800d048:	2800      	cmp	r0, #0
 800d04a:	f43f ae73 	beq.w	800cd34 <_strtod_l+0x47c>
 800d04e:	2500      	movs	r5, #0
 800d050:	68c3      	ldr	r3, [r0, #12]
 800d052:	4659      	mov	r1, fp
 800d054:	60c5      	str	r5, [r0, #12]
 800d056:	930a      	str	r3, [sp, #40]	; 0x28
 800d058:	f003 fcde 	bl	8010a18 <__mcmp>
 800d05c:	42a8      	cmp	r0, r5
 800d05e:	da6b      	bge.n	800d138 <_strtod_l+0x880>
 800d060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d062:	ea53 0308 	orrs.w	r3, r3, r8
 800d066:	f040 808f 	bne.w	800d188 <_strtod_l+0x8d0>
 800d06a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d06e:	2b00      	cmp	r3, #0
 800d070:	f040 808a 	bne.w	800d188 <_strtod_l+0x8d0>
 800d074:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d078:	0d1b      	lsrs	r3, r3, #20
 800d07a:	051b      	lsls	r3, r3, #20
 800d07c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d080:	f240 8082 	bls.w	800d188 <_strtod_l+0x8d0>
 800d084:	6973      	ldr	r3, [r6, #20]
 800d086:	b913      	cbnz	r3, 800d08e <_strtod_l+0x7d6>
 800d088:	6933      	ldr	r3, [r6, #16]
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	dd7c      	ble.n	800d188 <_strtod_l+0x8d0>
 800d08e:	4631      	mov	r1, r6
 800d090:	2201      	movs	r2, #1
 800d092:	4620      	mov	r0, r4
 800d094:	f003 fc54 	bl	8010940 <__lshift>
 800d098:	4659      	mov	r1, fp
 800d09a:	4606      	mov	r6, r0
 800d09c:	f003 fcbc 	bl	8010a18 <__mcmp>
 800d0a0:	2800      	cmp	r0, #0
 800d0a2:	dd71      	ble.n	800d188 <_strtod_l+0x8d0>
 800d0a4:	9905      	ldr	r1, [sp, #20]
 800d0a6:	464b      	mov	r3, r9
 800d0a8:	4a21      	ldr	r2, [pc, #132]	; (800d130 <_strtod_l+0x878>)
 800d0aa:	2900      	cmp	r1, #0
 800d0ac:	f000 808d 	beq.w	800d1ca <_strtod_l+0x912>
 800d0b0:	ea02 0109 	and.w	r1, r2, r9
 800d0b4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d0b8:	f300 8087 	bgt.w	800d1ca <_strtod_l+0x912>
 800d0bc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d0c0:	f77f aea9 	ble.w	800ce16 <_strtod_l+0x55e>
 800d0c4:	4640      	mov	r0, r8
 800d0c6:	4649      	mov	r1, r9
 800d0c8:	4b1a      	ldr	r3, [pc, #104]	; (800d134 <_strtod_l+0x87c>)
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	f7f3 fa7e 	bl	80005cc <__aeabi_dmul>
 800d0d0:	4b17      	ldr	r3, [pc, #92]	; (800d130 <_strtod_l+0x878>)
 800d0d2:	4680      	mov	r8, r0
 800d0d4:	400b      	ands	r3, r1
 800d0d6:	4689      	mov	r9, r1
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	f47f ae35 	bne.w	800cd48 <_strtod_l+0x490>
 800d0de:	2322      	movs	r3, #34	; 0x22
 800d0e0:	6023      	str	r3, [r4, #0]
 800d0e2:	e631      	b.n	800cd48 <_strtod_l+0x490>
 800d0e4:	f04f 32ff 	mov.w	r2, #4294967295
 800d0e8:	fa02 f303 	lsl.w	r3, r2, r3
 800d0ec:	ea03 0808 	and.w	r8, r3, r8
 800d0f0:	e6de      	b.n	800ceb0 <_strtod_l+0x5f8>
 800d0f2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800d0f6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800d0fa:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800d0fe:	37e2      	adds	r7, #226	; 0xe2
 800d100:	fa01 f307 	lsl.w	r3, r1, r7
 800d104:	9310      	str	r3, [sp, #64]	; 0x40
 800d106:	9113      	str	r1, [sp, #76]	; 0x4c
 800d108:	e745      	b.n	800cf96 <_strtod_l+0x6de>
 800d10a:	2300      	movs	r3, #0
 800d10c:	9310      	str	r3, [sp, #64]	; 0x40
 800d10e:	2301      	movs	r3, #1
 800d110:	9313      	str	r3, [sp, #76]	; 0x4c
 800d112:	e740      	b.n	800cf96 <_strtod_l+0x6de>
 800d114:	463a      	mov	r2, r7
 800d116:	4620      	mov	r0, r4
 800d118:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d11a:	f003 fc11 	bl	8010940 <__lshift>
 800d11e:	901a      	str	r0, [sp, #104]	; 0x68
 800d120:	2800      	cmp	r0, #0
 800d122:	f47f af68 	bne.w	800cff6 <_strtod_l+0x73e>
 800d126:	e605      	b.n	800cd34 <_strtod_l+0x47c>
 800d128:	08012030 	.word	0x08012030
 800d12c:	fffffc02 	.word	0xfffffc02
 800d130:	7ff00000 	.word	0x7ff00000
 800d134:	39500000 	.word	0x39500000
 800d138:	46ca      	mov	sl, r9
 800d13a:	d165      	bne.n	800d208 <_strtod_l+0x950>
 800d13c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d13e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d142:	b352      	cbz	r2, 800d19a <_strtod_l+0x8e2>
 800d144:	4a9e      	ldr	r2, [pc, #632]	; (800d3c0 <_strtod_l+0xb08>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d12a      	bne.n	800d1a0 <_strtod_l+0x8e8>
 800d14a:	9b05      	ldr	r3, [sp, #20]
 800d14c:	4641      	mov	r1, r8
 800d14e:	b1fb      	cbz	r3, 800d190 <_strtod_l+0x8d8>
 800d150:	4b9c      	ldr	r3, [pc, #624]	; (800d3c4 <_strtod_l+0xb0c>)
 800d152:	f04f 32ff 	mov.w	r2, #4294967295
 800d156:	ea09 0303 	and.w	r3, r9, r3
 800d15a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d15e:	d81a      	bhi.n	800d196 <_strtod_l+0x8de>
 800d160:	0d1b      	lsrs	r3, r3, #20
 800d162:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d166:	fa02 f303 	lsl.w	r3, r2, r3
 800d16a:	4299      	cmp	r1, r3
 800d16c:	d118      	bne.n	800d1a0 <_strtod_l+0x8e8>
 800d16e:	4b96      	ldr	r3, [pc, #600]	; (800d3c8 <_strtod_l+0xb10>)
 800d170:	459a      	cmp	sl, r3
 800d172:	d102      	bne.n	800d17a <_strtod_l+0x8c2>
 800d174:	3101      	adds	r1, #1
 800d176:	f43f addd 	beq.w	800cd34 <_strtod_l+0x47c>
 800d17a:	f04f 0800 	mov.w	r8, #0
 800d17e:	4b91      	ldr	r3, [pc, #580]	; (800d3c4 <_strtod_l+0xb0c>)
 800d180:	ea0a 0303 	and.w	r3, sl, r3
 800d184:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800d188:	9b05      	ldr	r3, [sp, #20]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d19a      	bne.n	800d0c4 <_strtod_l+0x80c>
 800d18e:	e5db      	b.n	800cd48 <_strtod_l+0x490>
 800d190:	f04f 33ff 	mov.w	r3, #4294967295
 800d194:	e7e9      	b.n	800d16a <_strtod_l+0x8b2>
 800d196:	4613      	mov	r3, r2
 800d198:	e7e7      	b.n	800d16a <_strtod_l+0x8b2>
 800d19a:	ea53 0308 	orrs.w	r3, r3, r8
 800d19e:	d081      	beq.n	800d0a4 <_strtod_l+0x7ec>
 800d1a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d1a2:	b1e3      	cbz	r3, 800d1de <_strtod_l+0x926>
 800d1a4:	ea13 0f0a 	tst.w	r3, sl
 800d1a8:	d0ee      	beq.n	800d188 <_strtod_l+0x8d0>
 800d1aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1ac:	4640      	mov	r0, r8
 800d1ae:	4649      	mov	r1, r9
 800d1b0:	9a05      	ldr	r2, [sp, #20]
 800d1b2:	b1c3      	cbz	r3, 800d1e6 <_strtod_l+0x92e>
 800d1b4:	f7ff fb5e 	bl	800c874 <sulp>
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	460b      	mov	r3, r1
 800d1bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d1be:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d1c0:	f7f3 f84e 	bl	8000260 <__adddf3>
 800d1c4:	4680      	mov	r8, r0
 800d1c6:	4689      	mov	r9, r1
 800d1c8:	e7de      	b.n	800d188 <_strtod_l+0x8d0>
 800d1ca:	4013      	ands	r3, r2
 800d1cc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d1d0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800d1d4:	f04f 38ff 	mov.w	r8, #4294967295
 800d1d8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800d1dc:	e7d4      	b.n	800d188 <_strtod_l+0x8d0>
 800d1de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d1e0:	ea13 0f08 	tst.w	r3, r8
 800d1e4:	e7e0      	b.n	800d1a8 <_strtod_l+0x8f0>
 800d1e6:	f7ff fb45 	bl	800c874 <sulp>
 800d1ea:	4602      	mov	r2, r0
 800d1ec:	460b      	mov	r3, r1
 800d1ee:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d1f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d1f2:	f7f3 f833 	bl	800025c <__aeabi_dsub>
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	4680      	mov	r8, r0
 800d1fc:	4689      	mov	r9, r1
 800d1fe:	f7f3 fc4d 	bl	8000a9c <__aeabi_dcmpeq>
 800d202:	2800      	cmp	r0, #0
 800d204:	d0c0      	beq.n	800d188 <_strtod_l+0x8d0>
 800d206:	e606      	b.n	800ce16 <_strtod_l+0x55e>
 800d208:	4659      	mov	r1, fp
 800d20a:	4630      	mov	r0, r6
 800d20c:	f003 fd6a 	bl	8010ce4 <__ratio>
 800d210:	4602      	mov	r2, r0
 800d212:	460b      	mov	r3, r1
 800d214:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800d218:	2200      	movs	r2, #0
 800d21a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d21e:	f7f3 fc51 	bl	8000ac4 <__aeabi_dcmple>
 800d222:	2800      	cmp	r0, #0
 800d224:	d06f      	beq.n	800d306 <_strtod_l+0xa4e>
 800d226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d17c      	bne.n	800d326 <_strtod_l+0xa6e>
 800d22c:	f1b8 0f00 	cmp.w	r8, #0
 800d230:	d159      	bne.n	800d2e6 <_strtod_l+0xa2e>
 800d232:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d236:	2b00      	cmp	r3, #0
 800d238:	d17b      	bne.n	800d332 <_strtod_l+0xa7a>
 800d23a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d23e:	2200      	movs	r2, #0
 800d240:	4b62      	ldr	r3, [pc, #392]	; (800d3cc <_strtod_l+0xb14>)
 800d242:	f7f3 fc35 	bl	8000ab0 <__aeabi_dcmplt>
 800d246:	2800      	cmp	r0, #0
 800d248:	d15a      	bne.n	800d300 <_strtod_l+0xa48>
 800d24a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d24e:	2200      	movs	r2, #0
 800d250:	4b5f      	ldr	r3, [pc, #380]	; (800d3d0 <_strtod_l+0xb18>)
 800d252:	f7f3 f9bb 	bl	80005cc <__aeabi_dmul>
 800d256:	4605      	mov	r5, r0
 800d258:	460f      	mov	r7, r1
 800d25a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800d25e:	9506      	str	r5, [sp, #24]
 800d260:	9307      	str	r3, [sp, #28]
 800d262:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d266:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800d26a:	4b56      	ldr	r3, [pc, #344]	; (800d3c4 <_strtod_l+0xb0c>)
 800d26c:	4a55      	ldr	r2, [pc, #340]	; (800d3c4 <_strtod_l+0xb0c>)
 800d26e:	ea0a 0303 	and.w	r3, sl, r3
 800d272:	9313      	str	r3, [sp, #76]	; 0x4c
 800d274:	4b57      	ldr	r3, [pc, #348]	; (800d3d4 <_strtod_l+0xb1c>)
 800d276:	ea0a 0202 	and.w	r2, sl, r2
 800d27a:	429a      	cmp	r2, r3
 800d27c:	f040 80b0 	bne.w	800d3e0 <_strtod_l+0xb28>
 800d280:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800d284:	4640      	mov	r0, r8
 800d286:	4649      	mov	r1, r9
 800d288:	f003 fc6e 	bl	8010b68 <__ulp>
 800d28c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d290:	f7f3 f99c 	bl	80005cc <__aeabi_dmul>
 800d294:	4642      	mov	r2, r8
 800d296:	464b      	mov	r3, r9
 800d298:	f7f2 ffe2 	bl	8000260 <__adddf3>
 800d29c:	f8df a124 	ldr.w	sl, [pc, #292]	; 800d3c4 <_strtod_l+0xb0c>
 800d2a0:	4a4d      	ldr	r2, [pc, #308]	; (800d3d8 <_strtod_l+0xb20>)
 800d2a2:	ea01 0a0a 	and.w	sl, r1, sl
 800d2a6:	4592      	cmp	sl, r2
 800d2a8:	4680      	mov	r8, r0
 800d2aa:	d948      	bls.n	800d33e <_strtod_l+0xa86>
 800d2ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d2ae:	4b46      	ldr	r3, [pc, #280]	; (800d3c8 <_strtod_l+0xb10>)
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d103      	bne.n	800d2bc <_strtod_l+0xa04>
 800d2b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	f43f ad3c 	beq.w	800cd34 <_strtod_l+0x47c>
 800d2bc:	f04f 38ff 	mov.w	r8, #4294967295
 800d2c0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800d3c8 <_strtod_l+0xb10>
 800d2c4:	4620      	mov	r0, r4
 800d2c6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d2c8:	f003 f922 	bl	8010510 <_Bfree>
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	9908      	ldr	r1, [sp, #32]
 800d2d0:	f003 f91e 	bl	8010510 <_Bfree>
 800d2d4:	4659      	mov	r1, fp
 800d2d6:	4620      	mov	r0, r4
 800d2d8:	f003 f91a 	bl	8010510 <_Bfree>
 800d2dc:	4631      	mov	r1, r6
 800d2de:	4620      	mov	r0, r4
 800d2e0:	f003 f916 	bl	8010510 <_Bfree>
 800d2e4:	e605      	b.n	800cef2 <_strtod_l+0x63a>
 800d2e6:	f1b8 0f01 	cmp.w	r8, #1
 800d2ea:	d103      	bne.n	800d2f4 <_strtod_l+0xa3c>
 800d2ec:	f1b9 0f00 	cmp.w	r9, #0
 800d2f0:	f43f ad91 	beq.w	800ce16 <_strtod_l+0x55e>
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	4b39      	ldr	r3, [pc, #228]	; (800d3dc <_strtod_l+0xb24>)
 800d2f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d2fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d2fe:	e016      	b.n	800d32e <_strtod_l+0xa76>
 800d300:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d302:	4f33      	ldr	r7, [pc, #204]	; (800d3d0 <_strtod_l+0xb18>)
 800d304:	e7a9      	b.n	800d25a <_strtod_l+0x9a2>
 800d306:	4b32      	ldr	r3, [pc, #200]	; (800d3d0 <_strtod_l+0xb18>)
 800d308:	2200      	movs	r2, #0
 800d30a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d30e:	f7f3 f95d 	bl	80005cc <__aeabi_dmul>
 800d312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d314:	4605      	mov	r5, r0
 800d316:	460f      	mov	r7, r1
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d09e      	beq.n	800d25a <_strtod_l+0x9a2>
 800d31c:	4602      	mov	r2, r0
 800d31e:	460b      	mov	r3, r1
 800d320:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d324:	e79d      	b.n	800d262 <_strtod_l+0x9aa>
 800d326:	2200      	movs	r2, #0
 800d328:	4b28      	ldr	r3, [pc, #160]	; (800d3cc <_strtod_l+0xb14>)
 800d32a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d32e:	4f27      	ldr	r7, [pc, #156]	; (800d3cc <_strtod_l+0xb14>)
 800d330:	e797      	b.n	800d262 <_strtod_l+0x9aa>
 800d332:	2200      	movs	r2, #0
 800d334:	4b29      	ldr	r3, [pc, #164]	; (800d3dc <_strtod_l+0xb24>)
 800d336:	4645      	mov	r5, r8
 800d338:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d33c:	e7f7      	b.n	800d32e <_strtod_l+0xa76>
 800d33e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800d342:	9b05      	ldr	r3, [sp, #20]
 800d344:	46ca      	mov	sl, r9
 800d346:	2b00      	cmp	r3, #0
 800d348:	d1bc      	bne.n	800d2c4 <_strtod_l+0xa0c>
 800d34a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d34e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d350:	0d1b      	lsrs	r3, r3, #20
 800d352:	051b      	lsls	r3, r3, #20
 800d354:	429a      	cmp	r2, r3
 800d356:	d1b5      	bne.n	800d2c4 <_strtod_l+0xa0c>
 800d358:	4628      	mov	r0, r5
 800d35a:	4639      	mov	r1, r7
 800d35c:	f7f3 ff68 	bl	8001230 <__aeabi_d2lz>
 800d360:	f7f3 f906 	bl	8000570 <__aeabi_l2d>
 800d364:	4602      	mov	r2, r0
 800d366:	460b      	mov	r3, r1
 800d368:	4628      	mov	r0, r5
 800d36a:	4639      	mov	r1, r7
 800d36c:	f7f2 ff76 	bl	800025c <__aeabi_dsub>
 800d370:	460b      	mov	r3, r1
 800d372:	4602      	mov	r2, r0
 800d374:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800d378:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d37c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d37e:	ea4a 0a08 	orr.w	sl, sl, r8
 800d382:	ea5a 0a03 	orrs.w	sl, sl, r3
 800d386:	d06c      	beq.n	800d462 <_strtod_l+0xbaa>
 800d388:	a309      	add	r3, pc, #36	; (adr r3, 800d3b0 <_strtod_l+0xaf8>)
 800d38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38e:	f7f3 fb8f 	bl	8000ab0 <__aeabi_dcmplt>
 800d392:	2800      	cmp	r0, #0
 800d394:	f47f acd8 	bne.w	800cd48 <_strtod_l+0x490>
 800d398:	a307      	add	r3, pc, #28	; (adr r3, 800d3b8 <_strtod_l+0xb00>)
 800d39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d39e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d3a2:	f7f3 fba3 	bl	8000aec <__aeabi_dcmpgt>
 800d3a6:	2800      	cmp	r0, #0
 800d3a8:	d08c      	beq.n	800d2c4 <_strtod_l+0xa0c>
 800d3aa:	e4cd      	b.n	800cd48 <_strtod_l+0x490>
 800d3ac:	f3af 8000 	nop.w
 800d3b0:	94a03595 	.word	0x94a03595
 800d3b4:	3fdfffff 	.word	0x3fdfffff
 800d3b8:	35afe535 	.word	0x35afe535
 800d3bc:	3fe00000 	.word	0x3fe00000
 800d3c0:	000fffff 	.word	0x000fffff
 800d3c4:	7ff00000 	.word	0x7ff00000
 800d3c8:	7fefffff 	.word	0x7fefffff
 800d3cc:	3ff00000 	.word	0x3ff00000
 800d3d0:	3fe00000 	.word	0x3fe00000
 800d3d4:	7fe00000 	.word	0x7fe00000
 800d3d8:	7c9fffff 	.word	0x7c9fffff
 800d3dc:	bff00000 	.word	0xbff00000
 800d3e0:	9b05      	ldr	r3, [sp, #20]
 800d3e2:	b333      	cbz	r3, 800d432 <_strtod_l+0xb7a>
 800d3e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d3e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d3ea:	d822      	bhi.n	800d432 <_strtod_l+0xb7a>
 800d3ec:	a328      	add	r3, pc, #160	; (adr r3, 800d490 <_strtod_l+0xbd8>)
 800d3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f2:	4628      	mov	r0, r5
 800d3f4:	4639      	mov	r1, r7
 800d3f6:	f7f3 fb65 	bl	8000ac4 <__aeabi_dcmple>
 800d3fa:	b1a0      	cbz	r0, 800d426 <_strtod_l+0xb6e>
 800d3fc:	4639      	mov	r1, r7
 800d3fe:	4628      	mov	r0, r5
 800d400:	f7f3 fbbc 	bl	8000b7c <__aeabi_d2uiz>
 800d404:	2801      	cmp	r0, #1
 800d406:	bf38      	it	cc
 800d408:	2001      	movcc	r0, #1
 800d40a:	f7f3 f865 	bl	80004d8 <__aeabi_ui2d>
 800d40e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d410:	4605      	mov	r5, r0
 800d412:	460f      	mov	r7, r1
 800d414:	bb03      	cbnz	r3, 800d458 <_strtod_l+0xba0>
 800d416:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d41a:	9014      	str	r0, [sp, #80]	; 0x50
 800d41c:	9315      	str	r3, [sp, #84]	; 0x54
 800d41e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d422:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800d426:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d428:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d42a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d42e:	1a9b      	subs	r3, r3, r2
 800d430:	9311      	str	r3, [sp, #68]	; 0x44
 800d432:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d434:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d436:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800d43a:	f003 fb95 	bl	8010b68 <__ulp>
 800d43e:	4602      	mov	r2, r0
 800d440:	460b      	mov	r3, r1
 800d442:	4640      	mov	r0, r8
 800d444:	4649      	mov	r1, r9
 800d446:	f7f3 f8c1 	bl	80005cc <__aeabi_dmul>
 800d44a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d44c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d44e:	f7f2 ff07 	bl	8000260 <__adddf3>
 800d452:	4680      	mov	r8, r0
 800d454:	4689      	mov	r9, r1
 800d456:	e774      	b.n	800d342 <_strtod_l+0xa8a>
 800d458:	4602      	mov	r2, r0
 800d45a:	460b      	mov	r3, r1
 800d45c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800d460:	e7dd      	b.n	800d41e <_strtod_l+0xb66>
 800d462:	a30d      	add	r3, pc, #52	; (adr r3, 800d498 <_strtod_l+0xbe0>)
 800d464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d468:	f7f3 fb22 	bl	8000ab0 <__aeabi_dcmplt>
 800d46c:	e79b      	b.n	800d3a6 <_strtod_l+0xaee>
 800d46e:	2300      	movs	r3, #0
 800d470:	930e      	str	r3, [sp, #56]	; 0x38
 800d472:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d474:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d476:	6013      	str	r3, [r2, #0]
 800d478:	f7ff ba5b 	b.w	800c932 <_strtod_l+0x7a>
 800d47c:	2a65      	cmp	r2, #101	; 0x65
 800d47e:	f43f ab52 	beq.w	800cb26 <_strtod_l+0x26e>
 800d482:	2a45      	cmp	r2, #69	; 0x45
 800d484:	f43f ab4f 	beq.w	800cb26 <_strtod_l+0x26e>
 800d488:	2301      	movs	r3, #1
 800d48a:	f7ff bb87 	b.w	800cb9c <_strtod_l+0x2e4>
 800d48e:	bf00      	nop
 800d490:	ffc00000 	.word	0xffc00000
 800d494:	41dfffff 	.word	0x41dfffff
 800d498:	94a03595 	.word	0x94a03595
 800d49c:	3fcfffff 	.word	0x3fcfffff

0800d4a0 <strtof>:
 800d4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4a4:	4f24      	ldr	r7, [pc, #144]	; (800d538 <strtof+0x98>)
 800d4a6:	460a      	mov	r2, r1
 800d4a8:	4b24      	ldr	r3, [pc, #144]	; (800d53c <strtof+0x9c>)
 800d4aa:	4601      	mov	r1, r0
 800d4ac:	6838      	ldr	r0, [r7, #0]
 800d4ae:	f7ff fa03 	bl	800c8b8 <_strtod_l>
 800d4b2:	4602      	mov	r2, r0
 800d4b4:	460b      	mov	r3, r1
 800d4b6:	4606      	mov	r6, r0
 800d4b8:	460c      	mov	r4, r1
 800d4ba:	f7f3 fb21 	bl	8000b00 <__aeabi_dcmpun>
 800d4be:	b168      	cbz	r0, 800d4dc <strtof+0x3c>
 800d4c0:	2c00      	cmp	r4, #0
 800d4c2:	481f      	ldr	r0, [pc, #124]	; (800d540 <strtof+0xa0>)
 800d4c4:	da06      	bge.n	800d4d4 <strtof+0x34>
 800d4c6:	f001 fd47 	bl	800ef58 <nanf>
 800d4ca:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 800d4ce:	4628      	mov	r0, r5
 800d4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4d8:	f001 bd3e 	b.w	800ef58 <nanf>
 800d4dc:	4621      	mov	r1, r4
 800d4de:	4630      	mov	r0, r6
 800d4e0:	f7f3 fb6c 	bl	8000bbc <__aeabi_d2f>
 800d4e4:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800d4e8:	4605      	mov	r5, r0
 800d4ea:	4916      	ldr	r1, [pc, #88]	; (800d544 <strtof+0xa4>)
 800d4ec:	4640      	mov	r0, r8
 800d4ee:	f7f3 fe89 	bl	8001204 <__aeabi_fcmpun>
 800d4f2:	b9b0      	cbnz	r0, 800d522 <strtof+0x82>
 800d4f4:	4640      	mov	r0, r8
 800d4f6:	4913      	ldr	r1, [pc, #76]	; (800d544 <strtof+0xa4>)
 800d4f8:	f7f3 fe66 	bl	80011c8 <__aeabi_fcmple>
 800d4fc:	b988      	cbnz	r0, 800d522 <strtof+0x82>
 800d4fe:	f024 4800 	bic.w	r8, r4, #2147483648	; 0x80000000
 800d502:	f04f 32ff 	mov.w	r2, #4294967295
 800d506:	4630      	mov	r0, r6
 800d508:	4641      	mov	r1, r8
 800d50a:	4b0f      	ldr	r3, [pc, #60]	; (800d548 <strtof+0xa8>)
 800d50c:	f7f3 faf8 	bl	8000b00 <__aeabi_dcmpun>
 800d510:	b970      	cbnz	r0, 800d530 <strtof+0x90>
 800d512:	f04f 32ff 	mov.w	r2, #4294967295
 800d516:	4630      	mov	r0, r6
 800d518:	4641      	mov	r1, r8
 800d51a:	4b0b      	ldr	r3, [pc, #44]	; (800d548 <strtof+0xa8>)
 800d51c:	f7f3 fad2 	bl	8000ac4 <__aeabi_dcmple>
 800d520:	b930      	cbnz	r0, 800d530 <strtof+0x90>
 800d522:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 800d526:	d1d2      	bne.n	800d4ce <strtof+0x2e>
 800d528:	4b08      	ldr	r3, [pc, #32]	; (800d54c <strtof+0xac>)
 800d52a:	4023      	ands	r3, r4
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d0ce      	beq.n	800d4ce <strtof+0x2e>
 800d530:	2222      	movs	r2, #34	; 0x22
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	601a      	str	r2, [r3, #0]
 800d536:	e7ca      	b.n	800d4ce <strtof+0x2e>
 800d538:	200002d0 	.word	0x200002d0
 800d53c:	20000118 	.word	0x20000118
 800d540:	080122ed 	.word	0x080122ed
 800d544:	7f7fffff 	.word	0x7f7fffff
 800d548:	7fefffff 	.word	0x7fefffff
 800d54c:	7ff00000 	.word	0x7ff00000

0800d550 <_strtol_l.constprop.0>:
 800d550:	2b01      	cmp	r3, #1
 800d552:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d556:	4686      	mov	lr, r0
 800d558:	4690      	mov	r8, r2
 800d55a:	d001      	beq.n	800d560 <_strtol_l.constprop.0+0x10>
 800d55c:	2b24      	cmp	r3, #36	; 0x24
 800d55e:	d906      	bls.n	800d56e <_strtol_l.constprop.0+0x1e>
 800d560:	f001 fca0 	bl	800eea4 <__errno>
 800d564:	2316      	movs	r3, #22
 800d566:	6003      	str	r3, [r0, #0]
 800d568:	2000      	movs	r0, #0
 800d56a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d56e:	460d      	mov	r5, r1
 800d570:	4835      	ldr	r0, [pc, #212]	; (800d648 <_strtol_l.constprop.0+0xf8>)
 800d572:	462a      	mov	r2, r5
 800d574:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d578:	5d06      	ldrb	r6, [r0, r4]
 800d57a:	f016 0608 	ands.w	r6, r6, #8
 800d57e:	d1f8      	bne.n	800d572 <_strtol_l.constprop.0+0x22>
 800d580:	2c2d      	cmp	r4, #45	; 0x2d
 800d582:	d12e      	bne.n	800d5e2 <_strtol_l.constprop.0+0x92>
 800d584:	2601      	movs	r6, #1
 800d586:	782c      	ldrb	r4, [r5, #0]
 800d588:	1c95      	adds	r5, r2, #2
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d057      	beq.n	800d63e <_strtol_l.constprop.0+0xee>
 800d58e:	2b10      	cmp	r3, #16
 800d590:	d109      	bne.n	800d5a6 <_strtol_l.constprop.0+0x56>
 800d592:	2c30      	cmp	r4, #48	; 0x30
 800d594:	d107      	bne.n	800d5a6 <_strtol_l.constprop.0+0x56>
 800d596:	782a      	ldrb	r2, [r5, #0]
 800d598:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800d59c:	2a58      	cmp	r2, #88	; 0x58
 800d59e:	d149      	bne.n	800d634 <_strtol_l.constprop.0+0xe4>
 800d5a0:	2310      	movs	r3, #16
 800d5a2:	786c      	ldrb	r4, [r5, #1]
 800d5a4:	3502      	adds	r5, #2
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800d5ac:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d5b0:	fbbc f9f3 	udiv	r9, ip, r3
 800d5b4:	4610      	mov	r0, r2
 800d5b6:	fb03 ca19 	mls	sl, r3, r9, ip
 800d5ba:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800d5be:	2f09      	cmp	r7, #9
 800d5c0:	d814      	bhi.n	800d5ec <_strtol_l.constprop.0+0x9c>
 800d5c2:	463c      	mov	r4, r7
 800d5c4:	42a3      	cmp	r3, r4
 800d5c6:	dd20      	ble.n	800d60a <_strtol_l.constprop.0+0xba>
 800d5c8:	1c57      	adds	r7, r2, #1
 800d5ca:	d007      	beq.n	800d5dc <_strtol_l.constprop.0+0x8c>
 800d5cc:	4581      	cmp	r9, r0
 800d5ce:	d319      	bcc.n	800d604 <_strtol_l.constprop.0+0xb4>
 800d5d0:	d101      	bne.n	800d5d6 <_strtol_l.constprop.0+0x86>
 800d5d2:	45a2      	cmp	sl, r4
 800d5d4:	db16      	blt.n	800d604 <_strtol_l.constprop.0+0xb4>
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	fb00 4003 	mla	r0, r0, r3, r4
 800d5dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d5e0:	e7eb      	b.n	800d5ba <_strtol_l.constprop.0+0x6a>
 800d5e2:	2c2b      	cmp	r4, #43	; 0x2b
 800d5e4:	bf04      	itt	eq
 800d5e6:	782c      	ldrbeq	r4, [r5, #0]
 800d5e8:	1c95      	addeq	r5, r2, #2
 800d5ea:	e7ce      	b.n	800d58a <_strtol_l.constprop.0+0x3a>
 800d5ec:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800d5f0:	2f19      	cmp	r7, #25
 800d5f2:	d801      	bhi.n	800d5f8 <_strtol_l.constprop.0+0xa8>
 800d5f4:	3c37      	subs	r4, #55	; 0x37
 800d5f6:	e7e5      	b.n	800d5c4 <_strtol_l.constprop.0+0x74>
 800d5f8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800d5fc:	2f19      	cmp	r7, #25
 800d5fe:	d804      	bhi.n	800d60a <_strtol_l.constprop.0+0xba>
 800d600:	3c57      	subs	r4, #87	; 0x57
 800d602:	e7df      	b.n	800d5c4 <_strtol_l.constprop.0+0x74>
 800d604:	f04f 32ff 	mov.w	r2, #4294967295
 800d608:	e7e8      	b.n	800d5dc <_strtol_l.constprop.0+0x8c>
 800d60a:	1c53      	adds	r3, r2, #1
 800d60c:	d108      	bne.n	800d620 <_strtol_l.constprop.0+0xd0>
 800d60e:	2322      	movs	r3, #34	; 0x22
 800d610:	4660      	mov	r0, ip
 800d612:	f8ce 3000 	str.w	r3, [lr]
 800d616:	f1b8 0f00 	cmp.w	r8, #0
 800d61a:	d0a6      	beq.n	800d56a <_strtol_l.constprop.0+0x1a>
 800d61c:	1e69      	subs	r1, r5, #1
 800d61e:	e006      	b.n	800d62e <_strtol_l.constprop.0+0xde>
 800d620:	b106      	cbz	r6, 800d624 <_strtol_l.constprop.0+0xd4>
 800d622:	4240      	negs	r0, r0
 800d624:	f1b8 0f00 	cmp.w	r8, #0
 800d628:	d09f      	beq.n	800d56a <_strtol_l.constprop.0+0x1a>
 800d62a:	2a00      	cmp	r2, #0
 800d62c:	d1f6      	bne.n	800d61c <_strtol_l.constprop.0+0xcc>
 800d62e:	f8c8 1000 	str.w	r1, [r8]
 800d632:	e79a      	b.n	800d56a <_strtol_l.constprop.0+0x1a>
 800d634:	2430      	movs	r4, #48	; 0x30
 800d636:	2b00      	cmp	r3, #0
 800d638:	d1b5      	bne.n	800d5a6 <_strtol_l.constprop.0+0x56>
 800d63a:	2308      	movs	r3, #8
 800d63c:	e7b3      	b.n	800d5a6 <_strtol_l.constprop.0+0x56>
 800d63e:	2c30      	cmp	r4, #48	; 0x30
 800d640:	d0a9      	beq.n	800d596 <_strtol_l.constprop.0+0x46>
 800d642:	230a      	movs	r3, #10
 800d644:	e7af      	b.n	800d5a6 <_strtol_l.constprop.0+0x56>
 800d646:	bf00      	nop
 800d648:	08012059 	.word	0x08012059

0800d64c <_strtol_r>:
 800d64c:	f7ff bf80 	b.w	800d550 <_strtol_l.constprop.0>

0800d650 <strtol>:
 800d650:	4613      	mov	r3, r2
 800d652:	460a      	mov	r2, r1
 800d654:	4601      	mov	r1, r0
 800d656:	4802      	ldr	r0, [pc, #8]	; (800d660 <strtol+0x10>)
 800d658:	6800      	ldr	r0, [r0, #0]
 800d65a:	f7ff bf79 	b.w	800d550 <_strtol_l.constprop.0>
 800d65e:	bf00      	nop
 800d660:	200002d0 	.word	0x200002d0

0800d664 <__cvt>:
 800d664:	2b00      	cmp	r3, #0
 800d666:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d66a:	461f      	mov	r7, r3
 800d66c:	bfbb      	ittet	lt
 800d66e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800d672:	461f      	movlt	r7, r3
 800d674:	2300      	movge	r3, #0
 800d676:	232d      	movlt	r3, #45	; 0x2d
 800d678:	b088      	sub	sp, #32
 800d67a:	4614      	mov	r4, r2
 800d67c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d67e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d680:	7013      	strb	r3, [r2, #0]
 800d682:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d684:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800d688:	f023 0820 	bic.w	r8, r3, #32
 800d68c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d690:	d005      	beq.n	800d69e <__cvt+0x3a>
 800d692:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d696:	d100      	bne.n	800d69a <__cvt+0x36>
 800d698:	3501      	adds	r5, #1
 800d69a:	2302      	movs	r3, #2
 800d69c:	e000      	b.n	800d6a0 <__cvt+0x3c>
 800d69e:	2303      	movs	r3, #3
 800d6a0:	aa07      	add	r2, sp, #28
 800d6a2:	9204      	str	r2, [sp, #16]
 800d6a4:	aa06      	add	r2, sp, #24
 800d6a6:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d6aa:	e9cd 3500 	strd	r3, r5, [sp]
 800d6ae:	4622      	mov	r2, r4
 800d6b0:	463b      	mov	r3, r7
 800d6b2:	f001 fd11 	bl	800f0d8 <_dtoa_r>
 800d6b6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d6ba:	4606      	mov	r6, r0
 800d6bc:	d102      	bne.n	800d6c4 <__cvt+0x60>
 800d6be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d6c0:	07db      	lsls	r3, r3, #31
 800d6c2:	d522      	bpl.n	800d70a <__cvt+0xa6>
 800d6c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d6c8:	eb06 0905 	add.w	r9, r6, r5
 800d6cc:	d110      	bne.n	800d6f0 <__cvt+0x8c>
 800d6ce:	7833      	ldrb	r3, [r6, #0]
 800d6d0:	2b30      	cmp	r3, #48	; 0x30
 800d6d2:	d10a      	bne.n	800d6ea <__cvt+0x86>
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	4620      	mov	r0, r4
 800d6da:	4639      	mov	r1, r7
 800d6dc:	f7f3 f9de 	bl	8000a9c <__aeabi_dcmpeq>
 800d6e0:	b918      	cbnz	r0, 800d6ea <__cvt+0x86>
 800d6e2:	f1c5 0501 	rsb	r5, r5, #1
 800d6e6:	f8ca 5000 	str.w	r5, [sl]
 800d6ea:	f8da 3000 	ldr.w	r3, [sl]
 800d6ee:	4499      	add	r9, r3
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	4639      	mov	r1, r7
 800d6f8:	f7f3 f9d0 	bl	8000a9c <__aeabi_dcmpeq>
 800d6fc:	b108      	cbz	r0, 800d702 <__cvt+0x9e>
 800d6fe:	f8cd 901c 	str.w	r9, [sp, #28]
 800d702:	2230      	movs	r2, #48	; 0x30
 800d704:	9b07      	ldr	r3, [sp, #28]
 800d706:	454b      	cmp	r3, r9
 800d708:	d307      	bcc.n	800d71a <__cvt+0xb6>
 800d70a:	4630      	mov	r0, r6
 800d70c:	9b07      	ldr	r3, [sp, #28]
 800d70e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d710:	1b9b      	subs	r3, r3, r6
 800d712:	6013      	str	r3, [r2, #0]
 800d714:	b008      	add	sp, #32
 800d716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d71a:	1c59      	adds	r1, r3, #1
 800d71c:	9107      	str	r1, [sp, #28]
 800d71e:	701a      	strb	r2, [r3, #0]
 800d720:	e7f0      	b.n	800d704 <__cvt+0xa0>

0800d722 <__exponent>:
 800d722:	4603      	mov	r3, r0
 800d724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d726:	2900      	cmp	r1, #0
 800d728:	f803 2b02 	strb.w	r2, [r3], #2
 800d72c:	bfb6      	itet	lt
 800d72e:	222d      	movlt	r2, #45	; 0x2d
 800d730:	222b      	movge	r2, #43	; 0x2b
 800d732:	4249      	neglt	r1, r1
 800d734:	2909      	cmp	r1, #9
 800d736:	7042      	strb	r2, [r0, #1]
 800d738:	dd2a      	ble.n	800d790 <__exponent+0x6e>
 800d73a:	f10d 0207 	add.w	r2, sp, #7
 800d73e:	4617      	mov	r7, r2
 800d740:	260a      	movs	r6, #10
 800d742:	fb91 f5f6 	sdiv	r5, r1, r6
 800d746:	4694      	mov	ip, r2
 800d748:	fb06 1415 	mls	r4, r6, r5, r1
 800d74c:	3430      	adds	r4, #48	; 0x30
 800d74e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d752:	460c      	mov	r4, r1
 800d754:	2c63      	cmp	r4, #99	; 0x63
 800d756:	4629      	mov	r1, r5
 800d758:	f102 32ff 	add.w	r2, r2, #4294967295
 800d75c:	dcf1      	bgt.n	800d742 <__exponent+0x20>
 800d75e:	3130      	adds	r1, #48	; 0x30
 800d760:	f1ac 0402 	sub.w	r4, ip, #2
 800d764:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d768:	4622      	mov	r2, r4
 800d76a:	1c41      	adds	r1, r0, #1
 800d76c:	42ba      	cmp	r2, r7
 800d76e:	d30a      	bcc.n	800d786 <__exponent+0x64>
 800d770:	f10d 0209 	add.w	r2, sp, #9
 800d774:	eba2 020c 	sub.w	r2, r2, ip
 800d778:	42bc      	cmp	r4, r7
 800d77a:	bf88      	it	hi
 800d77c:	2200      	movhi	r2, #0
 800d77e:	4413      	add	r3, r2
 800d780:	1a18      	subs	r0, r3, r0
 800d782:	b003      	add	sp, #12
 800d784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d786:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d78a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d78e:	e7ed      	b.n	800d76c <__exponent+0x4a>
 800d790:	2330      	movs	r3, #48	; 0x30
 800d792:	3130      	adds	r1, #48	; 0x30
 800d794:	7083      	strb	r3, [r0, #2]
 800d796:	70c1      	strb	r1, [r0, #3]
 800d798:	1d03      	adds	r3, r0, #4
 800d79a:	e7f1      	b.n	800d780 <__exponent+0x5e>

0800d79c <_printf_float>:
 800d79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7a0:	b091      	sub	sp, #68	; 0x44
 800d7a2:	460c      	mov	r4, r1
 800d7a4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800d7a8:	4616      	mov	r6, r2
 800d7aa:	461f      	mov	r7, r3
 800d7ac:	4605      	mov	r5, r0
 800d7ae:	f001 fac9 	bl	800ed44 <_localeconv_r>
 800d7b2:	6803      	ldr	r3, [r0, #0]
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	9309      	str	r3, [sp, #36]	; 0x24
 800d7b8:	f7f2 fd44 	bl	8000244 <strlen>
 800d7bc:	2300      	movs	r3, #0
 800d7be:	930e      	str	r3, [sp, #56]	; 0x38
 800d7c0:	f8d8 3000 	ldr.w	r3, [r8]
 800d7c4:	900a      	str	r0, [sp, #40]	; 0x28
 800d7c6:	3307      	adds	r3, #7
 800d7c8:	f023 0307 	bic.w	r3, r3, #7
 800d7cc:	f103 0208 	add.w	r2, r3, #8
 800d7d0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d7d4:	f8d4 b000 	ldr.w	fp, [r4]
 800d7d8:	f8c8 2000 	str.w	r2, [r8]
 800d7dc:	e9d3 a800 	ldrd	sl, r8, [r3]
 800d7e0:	4652      	mov	r2, sl
 800d7e2:	4643      	mov	r3, r8
 800d7e4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d7e8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800d7ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800d7ee:	f04f 32ff 	mov.w	r2, #4294967295
 800d7f2:	4650      	mov	r0, sl
 800d7f4:	4b9c      	ldr	r3, [pc, #624]	; (800da68 <_printf_float+0x2cc>)
 800d7f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d7f8:	f7f3 f982 	bl	8000b00 <__aeabi_dcmpun>
 800d7fc:	bb70      	cbnz	r0, 800d85c <_printf_float+0xc0>
 800d7fe:	f04f 32ff 	mov.w	r2, #4294967295
 800d802:	4650      	mov	r0, sl
 800d804:	4b98      	ldr	r3, [pc, #608]	; (800da68 <_printf_float+0x2cc>)
 800d806:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d808:	f7f3 f95c 	bl	8000ac4 <__aeabi_dcmple>
 800d80c:	bb30      	cbnz	r0, 800d85c <_printf_float+0xc0>
 800d80e:	2200      	movs	r2, #0
 800d810:	2300      	movs	r3, #0
 800d812:	4650      	mov	r0, sl
 800d814:	4641      	mov	r1, r8
 800d816:	f7f3 f94b 	bl	8000ab0 <__aeabi_dcmplt>
 800d81a:	b110      	cbz	r0, 800d822 <_printf_float+0x86>
 800d81c:	232d      	movs	r3, #45	; 0x2d
 800d81e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d822:	4a92      	ldr	r2, [pc, #584]	; (800da6c <_printf_float+0x2d0>)
 800d824:	4b92      	ldr	r3, [pc, #584]	; (800da70 <_printf_float+0x2d4>)
 800d826:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d82a:	bf94      	ite	ls
 800d82c:	4690      	movls	r8, r2
 800d82e:	4698      	movhi	r8, r3
 800d830:	2303      	movs	r3, #3
 800d832:	f04f 0a00 	mov.w	sl, #0
 800d836:	6123      	str	r3, [r4, #16]
 800d838:	f02b 0304 	bic.w	r3, fp, #4
 800d83c:	6023      	str	r3, [r4, #0]
 800d83e:	4633      	mov	r3, r6
 800d840:	4621      	mov	r1, r4
 800d842:	4628      	mov	r0, r5
 800d844:	9700      	str	r7, [sp, #0]
 800d846:	aa0f      	add	r2, sp, #60	; 0x3c
 800d848:	f000 f9d6 	bl	800dbf8 <_printf_common>
 800d84c:	3001      	adds	r0, #1
 800d84e:	f040 8090 	bne.w	800d972 <_printf_float+0x1d6>
 800d852:	f04f 30ff 	mov.w	r0, #4294967295
 800d856:	b011      	add	sp, #68	; 0x44
 800d858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d85c:	4652      	mov	r2, sl
 800d85e:	4643      	mov	r3, r8
 800d860:	4650      	mov	r0, sl
 800d862:	4641      	mov	r1, r8
 800d864:	f7f3 f94c 	bl	8000b00 <__aeabi_dcmpun>
 800d868:	b148      	cbz	r0, 800d87e <_printf_float+0xe2>
 800d86a:	f1b8 0f00 	cmp.w	r8, #0
 800d86e:	bfb8      	it	lt
 800d870:	232d      	movlt	r3, #45	; 0x2d
 800d872:	4a80      	ldr	r2, [pc, #512]	; (800da74 <_printf_float+0x2d8>)
 800d874:	bfb8      	it	lt
 800d876:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d87a:	4b7f      	ldr	r3, [pc, #508]	; (800da78 <_printf_float+0x2dc>)
 800d87c:	e7d3      	b.n	800d826 <_printf_float+0x8a>
 800d87e:	6863      	ldr	r3, [r4, #4]
 800d880:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d884:	1c5a      	adds	r2, r3, #1
 800d886:	d142      	bne.n	800d90e <_printf_float+0x172>
 800d888:	2306      	movs	r3, #6
 800d88a:	6063      	str	r3, [r4, #4]
 800d88c:	2200      	movs	r2, #0
 800d88e:	9206      	str	r2, [sp, #24]
 800d890:	aa0e      	add	r2, sp, #56	; 0x38
 800d892:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800d896:	aa0d      	add	r2, sp, #52	; 0x34
 800d898:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800d89c:	9203      	str	r2, [sp, #12]
 800d89e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800d8a2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d8a6:	6023      	str	r3, [r4, #0]
 800d8a8:	6863      	ldr	r3, [r4, #4]
 800d8aa:	4652      	mov	r2, sl
 800d8ac:	9300      	str	r3, [sp, #0]
 800d8ae:	4628      	mov	r0, r5
 800d8b0:	4643      	mov	r3, r8
 800d8b2:	910b      	str	r1, [sp, #44]	; 0x2c
 800d8b4:	f7ff fed6 	bl	800d664 <__cvt>
 800d8b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d8ba:	4680      	mov	r8, r0
 800d8bc:	2947      	cmp	r1, #71	; 0x47
 800d8be:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d8c0:	d108      	bne.n	800d8d4 <_printf_float+0x138>
 800d8c2:	1cc8      	adds	r0, r1, #3
 800d8c4:	db02      	blt.n	800d8cc <_printf_float+0x130>
 800d8c6:	6863      	ldr	r3, [r4, #4]
 800d8c8:	4299      	cmp	r1, r3
 800d8ca:	dd40      	ble.n	800d94e <_printf_float+0x1b2>
 800d8cc:	f1a9 0902 	sub.w	r9, r9, #2
 800d8d0:	fa5f f989 	uxtb.w	r9, r9
 800d8d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d8d8:	d81f      	bhi.n	800d91a <_printf_float+0x17e>
 800d8da:	464a      	mov	r2, r9
 800d8dc:	3901      	subs	r1, #1
 800d8de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d8e2:	910d      	str	r1, [sp, #52]	; 0x34
 800d8e4:	f7ff ff1d 	bl	800d722 <__exponent>
 800d8e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d8ea:	4682      	mov	sl, r0
 800d8ec:	1813      	adds	r3, r2, r0
 800d8ee:	2a01      	cmp	r2, #1
 800d8f0:	6123      	str	r3, [r4, #16]
 800d8f2:	dc02      	bgt.n	800d8fa <_printf_float+0x15e>
 800d8f4:	6822      	ldr	r2, [r4, #0]
 800d8f6:	07d2      	lsls	r2, r2, #31
 800d8f8:	d501      	bpl.n	800d8fe <_printf_float+0x162>
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	6123      	str	r3, [r4, #16]
 800d8fe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800d902:	2b00      	cmp	r3, #0
 800d904:	d09b      	beq.n	800d83e <_printf_float+0xa2>
 800d906:	232d      	movs	r3, #45	; 0x2d
 800d908:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d90c:	e797      	b.n	800d83e <_printf_float+0xa2>
 800d90e:	2947      	cmp	r1, #71	; 0x47
 800d910:	d1bc      	bne.n	800d88c <_printf_float+0xf0>
 800d912:	2b00      	cmp	r3, #0
 800d914:	d1ba      	bne.n	800d88c <_printf_float+0xf0>
 800d916:	2301      	movs	r3, #1
 800d918:	e7b7      	b.n	800d88a <_printf_float+0xee>
 800d91a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d91e:	d118      	bne.n	800d952 <_printf_float+0x1b6>
 800d920:	2900      	cmp	r1, #0
 800d922:	6863      	ldr	r3, [r4, #4]
 800d924:	dd0b      	ble.n	800d93e <_printf_float+0x1a2>
 800d926:	6121      	str	r1, [r4, #16]
 800d928:	b913      	cbnz	r3, 800d930 <_printf_float+0x194>
 800d92a:	6822      	ldr	r2, [r4, #0]
 800d92c:	07d0      	lsls	r0, r2, #31
 800d92e:	d502      	bpl.n	800d936 <_printf_float+0x19a>
 800d930:	3301      	adds	r3, #1
 800d932:	440b      	add	r3, r1
 800d934:	6123      	str	r3, [r4, #16]
 800d936:	f04f 0a00 	mov.w	sl, #0
 800d93a:	65a1      	str	r1, [r4, #88]	; 0x58
 800d93c:	e7df      	b.n	800d8fe <_printf_float+0x162>
 800d93e:	b913      	cbnz	r3, 800d946 <_printf_float+0x1aa>
 800d940:	6822      	ldr	r2, [r4, #0]
 800d942:	07d2      	lsls	r2, r2, #31
 800d944:	d501      	bpl.n	800d94a <_printf_float+0x1ae>
 800d946:	3302      	adds	r3, #2
 800d948:	e7f4      	b.n	800d934 <_printf_float+0x198>
 800d94a:	2301      	movs	r3, #1
 800d94c:	e7f2      	b.n	800d934 <_printf_float+0x198>
 800d94e:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d954:	4299      	cmp	r1, r3
 800d956:	db05      	blt.n	800d964 <_printf_float+0x1c8>
 800d958:	6823      	ldr	r3, [r4, #0]
 800d95a:	6121      	str	r1, [r4, #16]
 800d95c:	07d8      	lsls	r0, r3, #31
 800d95e:	d5ea      	bpl.n	800d936 <_printf_float+0x19a>
 800d960:	1c4b      	adds	r3, r1, #1
 800d962:	e7e7      	b.n	800d934 <_printf_float+0x198>
 800d964:	2900      	cmp	r1, #0
 800d966:	bfcc      	ite	gt
 800d968:	2201      	movgt	r2, #1
 800d96a:	f1c1 0202 	rsble	r2, r1, #2
 800d96e:	4413      	add	r3, r2
 800d970:	e7e0      	b.n	800d934 <_printf_float+0x198>
 800d972:	6823      	ldr	r3, [r4, #0]
 800d974:	055a      	lsls	r2, r3, #21
 800d976:	d407      	bmi.n	800d988 <_printf_float+0x1ec>
 800d978:	6923      	ldr	r3, [r4, #16]
 800d97a:	4642      	mov	r2, r8
 800d97c:	4631      	mov	r1, r6
 800d97e:	4628      	mov	r0, r5
 800d980:	47b8      	blx	r7
 800d982:	3001      	adds	r0, #1
 800d984:	d12b      	bne.n	800d9de <_printf_float+0x242>
 800d986:	e764      	b.n	800d852 <_printf_float+0xb6>
 800d988:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d98c:	f240 80dd 	bls.w	800db4a <_printf_float+0x3ae>
 800d990:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d994:	2200      	movs	r2, #0
 800d996:	2300      	movs	r3, #0
 800d998:	f7f3 f880 	bl	8000a9c <__aeabi_dcmpeq>
 800d99c:	2800      	cmp	r0, #0
 800d99e:	d033      	beq.n	800da08 <_printf_float+0x26c>
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	4631      	mov	r1, r6
 800d9a4:	4628      	mov	r0, r5
 800d9a6:	4a35      	ldr	r2, [pc, #212]	; (800da7c <_printf_float+0x2e0>)
 800d9a8:	47b8      	blx	r7
 800d9aa:	3001      	adds	r0, #1
 800d9ac:	f43f af51 	beq.w	800d852 <_printf_float+0xb6>
 800d9b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	db02      	blt.n	800d9be <_printf_float+0x222>
 800d9b8:	6823      	ldr	r3, [r4, #0]
 800d9ba:	07d8      	lsls	r0, r3, #31
 800d9bc:	d50f      	bpl.n	800d9de <_printf_float+0x242>
 800d9be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d9c2:	4631      	mov	r1, r6
 800d9c4:	4628      	mov	r0, r5
 800d9c6:	47b8      	blx	r7
 800d9c8:	3001      	adds	r0, #1
 800d9ca:	f43f af42 	beq.w	800d852 <_printf_float+0xb6>
 800d9ce:	f04f 0800 	mov.w	r8, #0
 800d9d2:	f104 091a 	add.w	r9, r4, #26
 800d9d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9d8:	3b01      	subs	r3, #1
 800d9da:	4543      	cmp	r3, r8
 800d9dc:	dc09      	bgt.n	800d9f2 <_printf_float+0x256>
 800d9de:	6823      	ldr	r3, [r4, #0]
 800d9e0:	079b      	lsls	r3, r3, #30
 800d9e2:	f100 8104 	bmi.w	800dbee <_printf_float+0x452>
 800d9e6:	68e0      	ldr	r0, [r4, #12]
 800d9e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d9ea:	4298      	cmp	r0, r3
 800d9ec:	bfb8      	it	lt
 800d9ee:	4618      	movlt	r0, r3
 800d9f0:	e731      	b.n	800d856 <_printf_float+0xba>
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	464a      	mov	r2, r9
 800d9f6:	4631      	mov	r1, r6
 800d9f8:	4628      	mov	r0, r5
 800d9fa:	47b8      	blx	r7
 800d9fc:	3001      	adds	r0, #1
 800d9fe:	f43f af28 	beq.w	800d852 <_printf_float+0xb6>
 800da02:	f108 0801 	add.w	r8, r8, #1
 800da06:	e7e6      	b.n	800d9d6 <_printf_float+0x23a>
 800da08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	dc38      	bgt.n	800da80 <_printf_float+0x2e4>
 800da0e:	2301      	movs	r3, #1
 800da10:	4631      	mov	r1, r6
 800da12:	4628      	mov	r0, r5
 800da14:	4a19      	ldr	r2, [pc, #100]	; (800da7c <_printf_float+0x2e0>)
 800da16:	47b8      	blx	r7
 800da18:	3001      	adds	r0, #1
 800da1a:	f43f af1a 	beq.w	800d852 <_printf_float+0xb6>
 800da1e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800da22:	4313      	orrs	r3, r2
 800da24:	d102      	bne.n	800da2c <_printf_float+0x290>
 800da26:	6823      	ldr	r3, [r4, #0]
 800da28:	07d9      	lsls	r1, r3, #31
 800da2a:	d5d8      	bpl.n	800d9de <_printf_float+0x242>
 800da2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da30:	4631      	mov	r1, r6
 800da32:	4628      	mov	r0, r5
 800da34:	47b8      	blx	r7
 800da36:	3001      	adds	r0, #1
 800da38:	f43f af0b 	beq.w	800d852 <_printf_float+0xb6>
 800da3c:	f04f 0900 	mov.w	r9, #0
 800da40:	f104 0a1a 	add.w	sl, r4, #26
 800da44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da46:	425b      	negs	r3, r3
 800da48:	454b      	cmp	r3, r9
 800da4a:	dc01      	bgt.n	800da50 <_printf_float+0x2b4>
 800da4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da4e:	e794      	b.n	800d97a <_printf_float+0x1de>
 800da50:	2301      	movs	r3, #1
 800da52:	4652      	mov	r2, sl
 800da54:	4631      	mov	r1, r6
 800da56:	4628      	mov	r0, r5
 800da58:	47b8      	blx	r7
 800da5a:	3001      	adds	r0, #1
 800da5c:	f43f aef9 	beq.w	800d852 <_printf_float+0xb6>
 800da60:	f109 0901 	add.w	r9, r9, #1
 800da64:	e7ee      	b.n	800da44 <_printf_float+0x2a8>
 800da66:	bf00      	nop
 800da68:	7fefffff 	.word	0x7fefffff
 800da6c:	08012159 	.word	0x08012159
 800da70:	0801215d 	.word	0x0801215d
 800da74:	08012161 	.word	0x08012161
 800da78:	08012165 	.word	0x08012165
 800da7c:	080125a6 	.word	0x080125a6
 800da80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800da82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800da84:	429a      	cmp	r2, r3
 800da86:	bfa8      	it	ge
 800da88:	461a      	movge	r2, r3
 800da8a:	2a00      	cmp	r2, #0
 800da8c:	4691      	mov	r9, r2
 800da8e:	dc37      	bgt.n	800db00 <_printf_float+0x364>
 800da90:	f04f 0b00 	mov.w	fp, #0
 800da94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da98:	f104 021a 	add.w	r2, r4, #26
 800da9c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800daa0:	ebaa 0309 	sub.w	r3, sl, r9
 800daa4:	455b      	cmp	r3, fp
 800daa6:	dc33      	bgt.n	800db10 <_printf_float+0x374>
 800daa8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800daac:	429a      	cmp	r2, r3
 800daae:	db3b      	blt.n	800db28 <_printf_float+0x38c>
 800dab0:	6823      	ldr	r3, [r4, #0]
 800dab2:	07da      	lsls	r2, r3, #31
 800dab4:	d438      	bmi.n	800db28 <_printf_float+0x38c>
 800dab6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800daba:	eba2 0903 	sub.w	r9, r2, r3
 800dabe:	eba2 020a 	sub.w	r2, r2, sl
 800dac2:	4591      	cmp	r9, r2
 800dac4:	bfa8      	it	ge
 800dac6:	4691      	movge	r9, r2
 800dac8:	f1b9 0f00 	cmp.w	r9, #0
 800dacc:	dc34      	bgt.n	800db38 <_printf_float+0x39c>
 800dace:	f04f 0800 	mov.w	r8, #0
 800dad2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dad6:	f104 0a1a 	add.w	sl, r4, #26
 800dada:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800dade:	1a9b      	subs	r3, r3, r2
 800dae0:	eba3 0309 	sub.w	r3, r3, r9
 800dae4:	4543      	cmp	r3, r8
 800dae6:	f77f af7a 	ble.w	800d9de <_printf_float+0x242>
 800daea:	2301      	movs	r3, #1
 800daec:	4652      	mov	r2, sl
 800daee:	4631      	mov	r1, r6
 800daf0:	4628      	mov	r0, r5
 800daf2:	47b8      	blx	r7
 800daf4:	3001      	adds	r0, #1
 800daf6:	f43f aeac 	beq.w	800d852 <_printf_float+0xb6>
 800dafa:	f108 0801 	add.w	r8, r8, #1
 800dafe:	e7ec      	b.n	800dada <_printf_float+0x33e>
 800db00:	4613      	mov	r3, r2
 800db02:	4631      	mov	r1, r6
 800db04:	4642      	mov	r2, r8
 800db06:	4628      	mov	r0, r5
 800db08:	47b8      	blx	r7
 800db0a:	3001      	adds	r0, #1
 800db0c:	d1c0      	bne.n	800da90 <_printf_float+0x2f4>
 800db0e:	e6a0      	b.n	800d852 <_printf_float+0xb6>
 800db10:	2301      	movs	r3, #1
 800db12:	4631      	mov	r1, r6
 800db14:	4628      	mov	r0, r5
 800db16:	920b      	str	r2, [sp, #44]	; 0x2c
 800db18:	47b8      	blx	r7
 800db1a:	3001      	adds	r0, #1
 800db1c:	f43f ae99 	beq.w	800d852 <_printf_float+0xb6>
 800db20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800db22:	f10b 0b01 	add.w	fp, fp, #1
 800db26:	e7b9      	b.n	800da9c <_printf_float+0x300>
 800db28:	4631      	mov	r1, r6
 800db2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800db2e:	4628      	mov	r0, r5
 800db30:	47b8      	blx	r7
 800db32:	3001      	adds	r0, #1
 800db34:	d1bf      	bne.n	800dab6 <_printf_float+0x31a>
 800db36:	e68c      	b.n	800d852 <_printf_float+0xb6>
 800db38:	464b      	mov	r3, r9
 800db3a:	4631      	mov	r1, r6
 800db3c:	4628      	mov	r0, r5
 800db3e:	eb08 020a 	add.w	r2, r8, sl
 800db42:	47b8      	blx	r7
 800db44:	3001      	adds	r0, #1
 800db46:	d1c2      	bne.n	800dace <_printf_float+0x332>
 800db48:	e683      	b.n	800d852 <_printf_float+0xb6>
 800db4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800db4c:	2a01      	cmp	r2, #1
 800db4e:	dc01      	bgt.n	800db54 <_printf_float+0x3b8>
 800db50:	07db      	lsls	r3, r3, #31
 800db52:	d539      	bpl.n	800dbc8 <_printf_float+0x42c>
 800db54:	2301      	movs	r3, #1
 800db56:	4642      	mov	r2, r8
 800db58:	4631      	mov	r1, r6
 800db5a:	4628      	mov	r0, r5
 800db5c:	47b8      	blx	r7
 800db5e:	3001      	adds	r0, #1
 800db60:	f43f ae77 	beq.w	800d852 <_printf_float+0xb6>
 800db64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800db68:	4631      	mov	r1, r6
 800db6a:	4628      	mov	r0, r5
 800db6c:	47b8      	blx	r7
 800db6e:	3001      	adds	r0, #1
 800db70:	f43f ae6f 	beq.w	800d852 <_printf_float+0xb6>
 800db74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800db78:	2200      	movs	r2, #0
 800db7a:	2300      	movs	r3, #0
 800db7c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800db80:	f7f2 ff8c 	bl	8000a9c <__aeabi_dcmpeq>
 800db84:	b9d8      	cbnz	r0, 800dbbe <_printf_float+0x422>
 800db86:	f109 33ff 	add.w	r3, r9, #4294967295
 800db8a:	f108 0201 	add.w	r2, r8, #1
 800db8e:	4631      	mov	r1, r6
 800db90:	4628      	mov	r0, r5
 800db92:	47b8      	blx	r7
 800db94:	3001      	adds	r0, #1
 800db96:	d10e      	bne.n	800dbb6 <_printf_float+0x41a>
 800db98:	e65b      	b.n	800d852 <_printf_float+0xb6>
 800db9a:	2301      	movs	r3, #1
 800db9c:	464a      	mov	r2, r9
 800db9e:	4631      	mov	r1, r6
 800dba0:	4628      	mov	r0, r5
 800dba2:	47b8      	blx	r7
 800dba4:	3001      	adds	r0, #1
 800dba6:	f43f ae54 	beq.w	800d852 <_printf_float+0xb6>
 800dbaa:	f108 0801 	add.w	r8, r8, #1
 800dbae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbb0:	3b01      	subs	r3, #1
 800dbb2:	4543      	cmp	r3, r8
 800dbb4:	dcf1      	bgt.n	800db9a <_printf_float+0x3fe>
 800dbb6:	4653      	mov	r3, sl
 800dbb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dbbc:	e6de      	b.n	800d97c <_printf_float+0x1e0>
 800dbbe:	f04f 0800 	mov.w	r8, #0
 800dbc2:	f104 091a 	add.w	r9, r4, #26
 800dbc6:	e7f2      	b.n	800dbae <_printf_float+0x412>
 800dbc8:	2301      	movs	r3, #1
 800dbca:	4642      	mov	r2, r8
 800dbcc:	e7df      	b.n	800db8e <_printf_float+0x3f2>
 800dbce:	2301      	movs	r3, #1
 800dbd0:	464a      	mov	r2, r9
 800dbd2:	4631      	mov	r1, r6
 800dbd4:	4628      	mov	r0, r5
 800dbd6:	47b8      	blx	r7
 800dbd8:	3001      	adds	r0, #1
 800dbda:	f43f ae3a 	beq.w	800d852 <_printf_float+0xb6>
 800dbde:	f108 0801 	add.w	r8, r8, #1
 800dbe2:	68e3      	ldr	r3, [r4, #12]
 800dbe4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dbe6:	1a5b      	subs	r3, r3, r1
 800dbe8:	4543      	cmp	r3, r8
 800dbea:	dcf0      	bgt.n	800dbce <_printf_float+0x432>
 800dbec:	e6fb      	b.n	800d9e6 <_printf_float+0x24a>
 800dbee:	f04f 0800 	mov.w	r8, #0
 800dbf2:	f104 0919 	add.w	r9, r4, #25
 800dbf6:	e7f4      	b.n	800dbe2 <_printf_float+0x446>

0800dbf8 <_printf_common>:
 800dbf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbfc:	4616      	mov	r6, r2
 800dbfe:	4699      	mov	r9, r3
 800dc00:	688a      	ldr	r2, [r1, #8]
 800dc02:	690b      	ldr	r3, [r1, #16]
 800dc04:	4607      	mov	r7, r0
 800dc06:	4293      	cmp	r3, r2
 800dc08:	bfb8      	it	lt
 800dc0a:	4613      	movlt	r3, r2
 800dc0c:	6033      	str	r3, [r6, #0]
 800dc0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dc12:	460c      	mov	r4, r1
 800dc14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dc18:	b10a      	cbz	r2, 800dc1e <_printf_common+0x26>
 800dc1a:	3301      	adds	r3, #1
 800dc1c:	6033      	str	r3, [r6, #0]
 800dc1e:	6823      	ldr	r3, [r4, #0]
 800dc20:	0699      	lsls	r1, r3, #26
 800dc22:	bf42      	ittt	mi
 800dc24:	6833      	ldrmi	r3, [r6, #0]
 800dc26:	3302      	addmi	r3, #2
 800dc28:	6033      	strmi	r3, [r6, #0]
 800dc2a:	6825      	ldr	r5, [r4, #0]
 800dc2c:	f015 0506 	ands.w	r5, r5, #6
 800dc30:	d106      	bne.n	800dc40 <_printf_common+0x48>
 800dc32:	f104 0a19 	add.w	sl, r4, #25
 800dc36:	68e3      	ldr	r3, [r4, #12]
 800dc38:	6832      	ldr	r2, [r6, #0]
 800dc3a:	1a9b      	subs	r3, r3, r2
 800dc3c:	42ab      	cmp	r3, r5
 800dc3e:	dc2b      	bgt.n	800dc98 <_printf_common+0xa0>
 800dc40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dc44:	1e13      	subs	r3, r2, #0
 800dc46:	6822      	ldr	r2, [r4, #0]
 800dc48:	bf18      	it	ne
 800dc4a:	2301      	movne	r3, #1
 800dc4c:	0692      	lsls	r2, r2, #26
 800dc4e:	d430      	bmi.n	800dcb2 <_printf_common+0xba>
 800dc50:	4649      	mov	r1, r9
 800dc52:	4638      	mov	r0, r7
 800dc54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dc58:	47c0      	blx	r8
 800dc5a:	3001      	adds	r0, #1
 800dc5c:	d023      	beq.n	800dca6 <_printf_common+0xae>
 800dc5e:	6823      	ldr	r3, [r4, #0]
 800dc60:	6922      	ldr	r2, [r4, #16]
 800dc62:	f003 0306 	and.w	r3, r3, #6
 800dc66:	2b04      	cmp	r3, #4
 800dc68:	bf14      	ite	ne
 800dc6a:	2500      	movne	r5, #0
 800dc6c:	6833      	ldreq	r3, [r6, #0]
 800dc6e:	f04f 0600 	mov.w	r6, #0
 800dc72:	bf08      	it	eq
 800dc74:	68e5      	ldreq	r5, [r4, #12]
 800dc76:	f104 041a 	add.w	r4, r4, #26
 800dc7a:	bf08      	it	eq
 800dc7c:	1aed      	subeq	r5, r5, r3
 800dc7e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800dc82:	bf08      	it	eq
 800dc84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	bfc4      	itt	gt
 800dc8c:	1a9b      	subgt	r3, r3, r2
 800dc8e:	18ed      	addgt	r5, r5, r3
 800dc90:	42b5      	cmp	r5, r6
 800dc92:	d11a      	bne.n	800dcca <_printf_common+0xd2>
 800dc94:	2000      	movs	r0, #0
 800dc96:	e008      	b.n	800dcaa <_printf_common+0xb2>
 800dc98:	2301      	movs	r3, #1
 800dc9a:	4652      	mov	r2, sl
 800dc9c:	4649      	mov	r1, r9
 800dc9e:	4638      	mov	r0, r7
 800dca0:	47c0      	blx	r8
 800dca2:	3001      	adds	r0, #1
 800dca4:	d103      	bne.n	800dcae <_printf_common+0xb6>
 800dca6:	f04f 30ff 	mov.w	r0, #4294967295
 800dcaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcae:	3501      	adds	r5, #1
 800dcb0:	e7c1      	b.n	800dc36 <_printf_common+0x3e>
 800dcb2:	2030      	movs	r0, #48	; 0x30
 800dcb4:	18e1      	adds	r1, r4, r3
 800dcb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dcba:	1c5a      	adds	r2, r3, #1
 800dcbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dcc0:	4422      	add	r2, r4
 800dcc2:	3302      	adds	r3, #2
 800dcc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dcc8:	e7c2      	b.n	800dc50 <_printf_common+0x58>
 800dcca:	2301      	movs	r3, #1
 800dccc:	4622      	mov	r2, r4
 800dcce:	4649      	mov	r1, r9
 800dcd0:	4638      	mov	r0, r7
 800dcd2:	47c0      	blx	r8
 800dcd4:	3001      	adds	r0, #1
 800dcd6:	d0e6      	beq.n	800dca6 <_printf_common+0xae>
 800dcd8:	3601      	adds	r6, #1
 800dcda:	e7d9      	b.n	800dc90 <_printf_common+0x98>

0800dcdc <_printf_i>:
 800dcdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dce0:	7e0f      	ldrb	r7, [r1, #24]
 800dce2:	4691      	mov	r9, r2
 800dce4:	2f78      	cmp	r7, #120	; 0x78
 800dce6:	4680      	mov	r8, r0
 800dce8:	460c      	mov	r4, r1
 800dcea:	469a      	mov	sl, r3
 800dcec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dcee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dcf2:	d807      	bhi.n	800dd04 <_printf_i+0x28>
 800dcf4:	2f62      	cmp	r7, #98	; 0x62
 800dcf6:	d80a      	bhi.n	800dd0e <_printf_i+0x32>
 800dcf8:	2f00      	cmp	r7, #0
 800dcfa:	f000 80d5 	beq.w	800dea8 <_printf_i+0x1cc>
 800dcfe:	2f58      	cmp	r7, #88	; 0x58
 800dd00:	f000 80c1 	beq.w	800de86 <_printf_i+0x1aa>
 800dd04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dd0c:	e03a      	b.n	800dd84 <_printf_i+0xa8>
 800dd0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dd12:	2b15      	cmp	r3, #21
 800dd14:	d8f6      	bhi.n	800dd04 <_printf_i+0x28>
 800dd16:	a101      	add	r1, pc, #4	; (adr r1, 800dd1c <_printf_i+0x40>)
 800dd18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dd1c:	0800dd75 	.word	0x0800dd75
 800dd20:	0800dd89 	.word	0x0800dd89
 800dd24:	0800dd05 	.word	0x0800dd05
 800dd28:	0800dd05 	.word	0x0800dd05
 800dd2c:	0800dd05 	.word	0x0800dd05
 800dd30:	0800dd05 	.word	0x0800dd05
 800dd34:	0800dd89 	.word	0x0800dd89
 800dd38:	0800dd05 	.word	0x0800dd05
 800dd3c:	0800dd05 	.word	0x0800dd05
 800dd40:	0800dd05 	.word	0x0800dd05
 800dd44:	0800dd05 	.word	0x0800dd05
 800dd48:	0800de8f 	.word	0x0800de8f
 800dd4c:	0800ddb5 	.word	0x0800ddb5
 800dd50:	0800de49 	.word	0x0800de49
 800dd54:	0800dd05 	.word	0x0800dd05
 800dd58:	0800dd05 	.word	0x0800dd05
 800dd5c:	0800deb1 	.word	0x0800deb1
 800dd60:	0800dd05 	.word	0x0800dd05
 800dd64:	0800ddb5 	.word	0x0800ddb5
 800dd68:	0800dd05 	.word	0x0800dd05
 800dd6c:	0800dd05 	.word	0x0800dd05
 800dd70:	0800de51 	.word	0x0800de51
 800dd74:	682b      	ldr	r3, [r5, #0]
 800dd76:	1d1a      	adds	r2, r3, #4
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	602a      	str	r2, [r5, #0]
 800dd7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dd84:	2301      	movs	r3, #1
 800dd86:	e0a0      	b.n	800deca <_printf_i+0x1ee>
 800dd88:	6820      	ldr	r0, [r4, #0]
 800dd8a:	682b      	ldr	r3, [r5, #0]
 800dd8c:	0607      	lsls	r7, r0, #24
 800dd8e:	f103 0104 	add.w	r1, r3, #4
 800dd92:	6029      	str	r1, [r5, #0]
 800dd94:	d501      	bpl.n	800dd9a <_printf_i+0xbe>
 800dd96:	681e      	ldr	r6, [r3, #0]
 800dd98:	e003      	b.n	800dda2 <_printf_i+0xc6>
 800dd9a:	0646      	lsls	r6, r0, #25
 800dd9c:	d5fb      	bpl.n	800dd96 <_printf_i+0xba>
 800dd9e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800dda2:	2e00      	cmp	r6, #0
 800dda4:	da03      	bge.n	800ddae <_printf_i+0xd2>
 800dda6:	232d      	movs	r3, #45	; 0x2d
 800dda8:	4276      	negs	r6, r6
 800ddaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ddae:	230a      	movs	r3, #10
 800ddb0:	4859      	ldr	r0, [pc, #356]	; (800df18 <_printf_i+0x23c>)
 800ddb2:	e012      	b.n	800ddda <_printf_i+0xfe>
 800ddb4:	682b      	ldr	r3, [r5, #0]
 800ddb6:	6820      	ldr	r0, [r4, #0]
 800ddb8:	1d19      	adds	r1, r3, #4
 800ddba:	6029      	str	r1, [r5, #0]
 800ddbc:	0605      	lsls	r5, r0, #24
 800ddbe:	d501      	bpl.n	800ddc4 <_printf_i+0xe8>
 800ddc0:	681e      	ldr	r6, [r3, #0]
 800ddc2:	e002      	b.n	800ddca <_printf_i+0xee>
 800ddc4:	0641      	lsls	r1, r0, #25
 800ddc6:	d5fb      	bpl.n	800ddc0 <_printf_i+0xe4>
 800ddc8:	881e      	ldrh	r6, [r3, #0]
 800ddca:	2f6f      	cmp	r7, #111	; 0x6f
 800ddcc:	bf0c      	ite	eq
 800ddce:	2308      	moveq	r3, #8
 800ddd0:	230a      	movne	r3, #10
 800ddd2:	4851      	ldr	r0, [pc, #324]	; (800df18 <_printf_i+0x23c>)
 800ddd4:	2100      	movs	r1, #0
 800ddd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ddda:	6865      	ldr	r5, [r4, #4]
 800dddc:	2d00      	cmp	r5, #0
 800ddde:	bfa8      	it	ge
 800dde0:	6821      	ldrge	r1, [r4, #0]
 800dde2:	60a5      	str	r5, [r4, #8]
 800dde4:	bfa4      	itt	ge
 800dde6:	f021 0104 	bicge.w	r1, r1, #4
 800ddea:	6021      	strge	r1, [r4, #0]
 800ddec:	b90e      	cbnz	r6, 800ddf2 <_printf_i+0x116>
 800ddee:	2d00      	cmp	r5, #0
 800ddf0:	d04b      	beq.n	800de8a <_printf_i+0x1ae>
 800ddf2:	4615      	mov	r5, r2
 800ddf4:	fbb6 f1f3 	udiv	r1, r6, r3
 800ddf8:	fb03 6711 	mls	r7, r3, r1, r6
 800ddfc:	5dc7      	ldrb	r7, [r0, r7]
 800ddfe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800de02:	4637      	mov	r7, r6
 800de04:	42bb      	cmp	r3, r7
 800de06:	460e      	mov	r6, r1
 800de08:	d9f4      	bls.n	800ddf4 <_printf_i+0x118>
 800de0a:	2b08      	cmp	r3, #8
 800de0c:	d10b      	bne.n	800de26 <_printf_i+0x14a>
 800de0e:	6823      	ldr	r3, [r4, #0]
 800de10:	07de      	lsls	r6, r3, #31
 800de12:	d508      	bpl.n	800de26 <_printf_i+0x14a>
 800de14:	6923      	ldr	r3, [r4, #16]
 800de16:	6861      	ldr	r1, [r4, #4]
 800de18:	4299      	cmp	r1, r3
 800de1a:	bfde      	ittt	le
 800de1c:	2330      	movle	r3, #48	; 0x30
 800de1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800de22:	f105 35ff 	addle.w	r5, r5, #4294967295
 800de26:	1b52      	subs	r2, r2, r5
 800de28:	6122      	str	r2, [r4, #16]
 800de2a:	464b      	mov	r3, r9
 800de2c:	4621      	mov	r1, r4
 800de2e:	4640      	mov	r0, r8
 800de30:	f8cd a000 	str.w	sl, [sp]
 800de34:	aa03      	add	r2, sp, #12
 800de36:	f7ff fedf 	bl	800dbf8 <_printf_common>
 800de3a:	3001      	adds	r0, #1
 800de3c:	d14a      	bne.n	800ded4 <_printf_i+0x1f8>
 800de3e:	f04f 30ff 	mov.w	r0, #4294967295
 800de42:	b004      	add	sp, #16
 800de44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de48:	6823      	ldr	r3, [r4, #0]
 800de4a:	f043 0320 	orr.w	r3, r3, #32
 800de4e:	6023      	str	r3, [r4, #0]
 800de50:	2778      	movs	r7, #120	; 0x78
 800de52:	4832      	ldr	r0, [pc, #200]	; (800df1c <_printf_i+0x240>)
 800de54:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800de58:	6823      	ldr	r3, [r4, #0]
 800de5a:	6829      	ldr	r1, [r5, #0]
 800de5c:	061f      	lsls	r7, r3, #24
 800de5e:	f851 6b04 	ldr.w	r6, [r1], #4
 800de62:	d402      	bmi.n	800de6a <_printf_i+0x18e>
 800de64:	065f      	lsls	r7, r3, #25
 800de66:	bf48      	it	mi
 800de68:	b2b6      	uxthmi	r6, r6
 800de6a:	07df      	lsls	r7, r3, #31
 800de6c:	bf48      	it	mi
 800de6e:	f043 0320 	orrmi.w	r3, r3, #32
 800de72:	6029      	str	r1, [r5, #0]
 800de74:	bf48      	it	mi
 800de76:	6023      	strmi	r3, [r4, #0]
 800de78:	b91e      	cbnz	r6, 800de82 <_printf_i+0x1a6>
 800de7a:	6823      	ldr	r3, [r4, #0]
 800de7c:	f023 0320 	bic.w	r3, r3, #32
 800de80:	6023      	str	r3, [r4, #0]
 800de82:	2310      	movs	r3, #16
 800de84:	e7a6      	b.n	800ddd4 <_printf_i+0xf8>
 800de86:	4824      	ldr	r0, [pc, #144]	; (800df18 <_printf_i+0x23c>)
 800de88:	e7e4      	b.n	800de54 <_printf_i+0x178>
 800de8a:	4615      	mov	r5, r2
 800de8c:	e7bd      	b.n	800de0a <_printf_i+0x12e>
 800de8e:	682b      	ldr	r3, [r5, #0]
 800de90:	6826      	ldr	r6, [r4, #0]
 800de92:	1d18      	adds	r0, r3, #4
 800de94:	6961      	ldr	r1, [r4, #20]
 800de96:	6028      	str	r0, [r5, #0]
 800de98:	0635      	lsls	r5, r6, #24
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	d501      	bpl.n	800dea2 <_printf_i+0x1c6>
 800de9e:	6019      	str	r1, [r3, #0]
 800dea0:	e002      	b.n	800dea8 <_printf_i+0x1cc>
 800dea2:	0670      	lsls	r0, r6, #25
 800dea4:	d5fb      	bpl.n	800de9e <_printf_i+0x1c2>
 800dea6:	8019      	strh	r1, [r3, #0]
 800dea8:	2300      	movs	r3, #0
 800deaa:	4615      	mov	r5, r2
 800deac:	6123      	str	r3, [r4, #16]
 800deae:	e7bc      	b.n	800de2a <_printf_i+0x14e>
 800deb0:	682b      	ldr	r3, [r5, #0]
 800deb2:	2100      	movs	r1, #0
 800deb4:	1d1a      	adds	r2, r3, #4
 800deb6:	602a      	str	r2, [r5, #0]
 800deb8:	681d      	ldr	r5, [r3, #0]
 800deba:	6862      	ldr	r2, [r4, #4]
 800debc:	4628      	mov	r0, r5
 800debe:	f001 f828 	bl	800ef12 <memchr>
 800dec2:	b108      	cbz	r0, 800dec8 <_printf_i+0x1ec>
 800dec4:	1b40      	subs	r0, r0, r5
 800dec6:	6060      	str	r0, [r4, #4]
 800dec8:	6863      	ldr	r3, [r4, #4]
 800deca:	6123      	str	r3, [r4, #16]
 800decc:	2300      	movs	r3, #0
 800dece:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ded2:	e7aa      	b.n	800de2a <_printf_i+0x14e>
 800ded4:	462a      	mov	r2, r5
 800ded6:	4649      	mov	r1, r9
 800ded8:	4640      	mov	r0, r8
 800deda:	6923      	ldr	r3, [r4, #16]
 800dedc:	47d0      	blx	sl
 800dede:	3001      	adds	r0, #1
 800dee0:	d0ad      	beq.n	800de3e <_printf_i+0x162>
 800dee2:	6823      	ldr	r3, [r4, #0]
 800dee4:	079b      	lsls	r3, r3, #30
 800dee6:	d413      	bmi.n	800df10 <_printf_i+0x234>
 800dee8:	68e0      	ldr	r0, [r4, #12]
 800deea:	9b03      	ldr	r3, [sp, #12]
 800deec:	4298      	cmp	r0, r3
 800deee:	bfb8      	it	lt
 800def0:	4618      	movlt	r0, r3
 800def2:	e7a6      	b.n	800de42 <_printf_i+0x166>
 800def4:	2301      	movs	r3, #1
 800def6:	4632      	mov	r2, r6
 800def8:	4649      	mov	r1, r9
 800defa:	4640      	mov	r0, r8
 800defc:	47d0      	blx	sl
 800defe:	3001      	adds	r0, #1
 800df00:	d09d      	beq.n	800de3e <_printf_i+0x162>
 800df02:	3501      	adds	r5, #1
 800df04:	68e3      	ldr	r3, [r4, #12]
 800df06:	9903      	ldr	r1, [sp, #12]
 800df08:	1a5b      	subs	r3, r3, r1
 800df0a:	42ab      	cmp	r3, r5
 800df0c:	dcf2      	bgt.n	800def4 <_printf_i+0x218>
 800df0e:	e7eb      	b.n	800dee8 <_printf_i+0x20c>
 800df10:	2500      	movs	r5, #0
 800df12:	f104 0619 	add.w	r6, r4, #25
 800df16:	e7f5      	b.n	800df04 <_printf_i+0x228>
 800df18:	08012169 	.word	0x08012169
 800df1c:	0801217a 	.word	0x0801217a

0800df20 <std>:
 800df20:	2300      	movs	r3, #0
 800df22:	b510      	push	{r4, lr}
 800df24:	4604      	mov	r4, r0
 800df26:	e9c0 3300 	strd	r3, r3, [r0]
 800df2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800df2e:	6083      	str	r3, [r0, #8]
 800df30:	8181      	strh	r1, [r0, #12]
 800df32:	6643      	str	r3, [r0, #100]	; 0x64
 800df34:	81c2      	strh	r2, [r0, #14]
 800df36:	6183      	str	r3, [r0, #24]
 800df38:	4619      	mov	r1, r3
 800df3a:	2208      	movs	r2, #8
 800df3c:	305c      	adds	r0, #92	; 0x5c
 800df3e:	f000 f908 	bl	800e152 <memset>
 800df42:	4b0d      	ldr	r3, [pc, #52]	; (800df78 <std+0x58>)
 800df44:	6224      	str	r4, [r4, #32]
 800df46:	6263      	str	r3, [r4, #36]	; 0x24
 800df48:	4b0c      	ldr	r3, [pc, #48]	; (800df7c <std+0x5c>)
 800df4a:	62a3      	str	r3, [r4, #40]	; 0x28
 800df4c:	4b0c      	ldr	r3, [pc, #48]	; (800df80 <std+0x60>)
 800df4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800df50:	4b0c      	ldr	r3, [pc, #48]	; (800df84 <std+0x64>)
 800df52:	6323      	str	r3, [r4, #48]	; 0x30
 800df54:	4b0c      	ldr	r3, [pc, #48]	; (800df88 <std+0x68>)
 800df56:	429c      	cmp	r4, r3
 800df58:	d006      	beq.n	800df68 <std+0x48>
 800df5a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800df5e:	4294      	cmp	r4, r2
 800df60:	d002      	beq.n	800df68 <std+0x48>
 800df62:	33d0      	adds	r3, #208	; 0xd0
 800df64:	429c      	cmp	r4, r3
 800df66:	d105      	bne.n	800df74 <std+0x54>
 800df68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800df6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df70:	f000 bfc2 	b.w	800eef8 <__retarget_lock_init_recursive>
 800df74:	bd10      	pop	{r4, pc}
 800df76:	bf00      	nop
 800df78:	0800e0c9 	.word	0x0800e0c9
 800df7c:	0800e0ef 	.word	0x0800e0ef
 800df80:	0800e127 	.word	0x0800e127
 800df84:	0800e14b 	.word	0x0800e14b
 800df88:	20005a28 	.word	0x20005a28

0800df8c <stdio_exit_handler>:
 800df8c:	4a02      	ldr	r2, [pc, #8]	; (800df98 <stdio_exit_handler+0xc>)
 800df8e:	4903      	ldr	r1, [pc, #12]	; (800df9c <stdio_exit_handler+0x10>)
 800df90:	4803      	ldr	r0, [pc, #12]	; (800dfa0 <stdio_exit_handler+0x14>)
 800df92:	f000 b869 	b.w	800e068 <_fwalk_sglue>
 800df96:	bf00      	nop
 800df98:	20000104 	.word	0x20000104
 800df9c:	08011265 	.word	0x08011265
 800dfa0:	20000284 	.word	0x20000284

0800dfa4 <cleanup_stdio>:
 800dfa4:	6841      	ldr	r1, [r0, #4]
 800dfa6:	4b0c      	ldr	r3, [pc, #48]	; (800dfd8 <cleanup_stdio+0x34>)
 800dfa8:	b510      	push	{r4, lr}
 800dfaa:	4299      	cmp	r1, r3
 800dfac:	4604      	mov	r4, r0
 800dfae:	d001      	beq.n	800dfb4 <cleanup_stdio+0x10>
 800dfb0:	f003 f958 	bl	8011264 <_fflush_r>
 800dfb4:	68a1      	ldr	r1, [r4, #8]
 800dfb6:	4b09      	ldr	r3, [pc, #36]	; (800dfdc <cleanup_stdio+0x38>)
 800dfb8:	4299      	cmp	r1, r3
 800dfba:	d002      	beq.n	800dfc2 <cleanup_stdio+0x1e>
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	f003 f951 	bl	8011264 <_fflush_r>
 800dfc2:	68e1      	ldr	r1, [r4, #12]
 800dfc4:	4b06      	ldr	r3, [pc, #24]	; (800dfe0 <cleanup_stdio+0x3c>)
 800dfc6:	4299      	cmp	r1, r3
 800dfc8:	d004      	beq.n	800dfd4 <cleanup_stdio+0x30>
 800dfca:	4620      	mov	r0, r4
 800dfcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfd0:	f003 b948 	b.w	8011264 <_fflush_r>
 800dfd4:	bd10      	pop	{r4, pc}
 800dfd6:	bf00      	nop
 800dfd8:	20005a28 	.word	0x20005a28
 800dfdc:	20005a90 	.word	0x20005a90
 800dfe0:	20005af8 	.word	0x20005af8

0800dfe4 <global_stdio_init.part.0>:
 800dfe4:	b510      	push	{r4, lr}
 800dfe6:	4b0b      	ldr	r3, [pc, #44]	; (800e014 <global_stdio_init.part.0+0x30>)
 800dfe8:	4c0b      	ldr	r4, [pc, #44]	; (800e018 <global_stdio_init.part.0+0x34>)
 800dfea:	4a0c      	ldr	r2, [pc, #48]	; (800e01c <global_stdio_init.part.0+0x38>)
 800dfec:	4620      	mov	r0, r4
 800dfee:	601a      	str	r2, [r3, #0]
 800dff0:	2104      	movs	r1, #4
 800dff2:	2200      	movs	r2, #0
 800dff4:	f7ff ff94 	bl	800df20 <std>
 800dff8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800dffc:	2201      	movs	r2, #1
 800dffe:	2109      	movs	r1, #9
 800e000:	f7ff ff8e 	bl	800df20 <std>
 800e004:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e008:	2202      	movs	r2, #2
 800e00a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e00e:	2112      	movs	r1, #18
 800e010:	f7ff bf86 	b.w	800df20 <std>
 800e014:	20005b60 	.word	0x20005b60
 800e018:	20005a28 	.word	0x20005a28
 800e01c:	0800df8d 	.word	0x0800df8d

0800e020 <__sfp_lock_acquire>:
 800e020:	4801      	ldr	r0, [pc, #4]	; (800e028 <__sfp_lock_acquire+0x8>)
 800e022:	f000 bf6b 	b.w	800eefc <__retarget_lock_acquire_recursive>
 800e026:	bf00      	nop
 800e028:	20005b8e 	.word	0x20005b8e

0800e02c <__sfp_lock_release>:
 800e02c:	4801      	ldr	r0, [pc, #4]	; (800e034 <__sfp_lock_release+0x8>)
 800e02e:	f000 bf67 	b.w	800ef00 <__retarget_lock_release_recursive>
 800e032:	bf00      	nop
 800e034:	20005b8e 	.word	0x20005b8e

0800e038 <__sinit>:
 800e038:	b510      	push	{r4, lr}
 800e03a:	4604      	mov	r4, r0
 800e03c:	f7ff fff0 	bl	800e020 <__sfp_lock_acquire>
 800e040:	6a23      	ldr	r3, [r4, #32]
 800e042:	b11b      	cbz	r3, 800e04c <__sinit+0x14>
 800e044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e048:	f7ff bff0 	b.w	800e02c <__sfp_lock_release>
 800e04c:	4b04      	ldr	r3, [pc, #16]	; (800e060 <__sinit+0x28>)
 800e04e:	6223      	str	r3, [r4, #32]
 800e050:	4b04      	ldr	r3, [pc, #16]	; (800e064 <__sinit+0x2c>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d1f5      	bne.n	800e044 <__sinit+0xc>
 800e058:	f7ff ffc4 	bl	800dfe4 <global_stdio_init.part.0>
 800e05c:	e7f2      	b.n	800e044 <__sinit+0xc>
 800e05e:	bf00      	nop
 800e060:	0800dfa5 	.word	0x0800dfa5
 800e064:	20005b60 	.word	0x20005b60

0800e068 <_fwalk_sglue>:
 800e068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e06c:	4607      	mov	r7, r0
 800e06e:	4688      	mov	r8, r1
 800e070:	4614      	mov	r4, r2
 800e072:	2600      	movs	r6, #0
 800e074:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e078:	f1b9 0901 	subs.w	r9, r9, #1
 800e07c:	d505      	bpl.n	800e08a <_fwalk_sglue+0x22>
 800e07e:	6824      	ldr	r4, [r4, #0]
 800e080:	2c00      	cmp	r4, #0
 800e082:	d1f7      	bne.n	800e074 <_fwalk_sglue+0xc>
 800e084:	4630      	mov	r0, r6
 800e086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e08a:	89ab      	ldrh	r3, [r5, #12]
 800e08c:	2b01      	cmp	r3, #1
 800e08e:	d907      	bls.n	800e0a0 <_fwalk_sglue+0x38>
 800e090:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e094:	3301      	adds	r3, #1
 800e096:	d003      	beq.n	800e0a0 <_fwalk_sglue+0x38>
 800e098:	4629      	mov	r1, r5
 800e09a:	4638      	mov	r0, r7
 800e09c:	47c0      	blx	r8
 800e09e:	4306      	orrs	r6, r0
 800e0a0:	3568      	adds	r5, #104	; 0x68
 800e0a2:	e7e9      	b.n	800e078 <_fwalk_sglue+0x10>

0800e0a4 <iprintf>:
 800e0a4:	b40f      	push	{r0, r1, r2, r3}
 800e0a6:	b507      	push	{r0, r1, r2, lr}
 800e0a8:	4906      	ldr	r1, [pc, #24]	; (800e0c4 <iprintf+0x20>)
 800e0aa:	ab04      	add	r3, sp, #16
 800e0ac:	6808      	ldr	r0, [r1, #0]
 800e0ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0b2:	6881      	ldr	r1, [r0, #8]
 800e0b4:	9301      	str	r3, [sp, #4]
 800e0b6:	f002 ff39 	bl	8010f2c <_vfiprintf_r>
 800e0ba:	b003      	add	sp, #12
 800e0bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0c0:	b004      	add	sp, #16
 800e0c2:	4770      	bx	lr
 800e0c4:	200002d0 	.word	0x200002d0

0800e0c8 <__sread>:
 800e0c8:	b510      	push	{r4, lr}
 800e0ca:	460c      	mov	r4, r1
 800e0cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0d0:	f000 feb4 	bl	800ee3c <_read_r>
 800e0d4:	2800      	cmp	r0, #0
 800e0d6:	bfab      	itete	ge
 800e0d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e0da:	89a3      	ldrhlt	r3, [r4, #12]
 800e0dc:	181b      	addge	r3, r3, r0
 800e0de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e0e2:	bfac      	ite	ge
 800e0e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e0e6:	81a3      	strhlt	r3, [r4, #12]
 800e0e8:	bd10      	pop	{r4, pc}

0800e0ea <__seofread>:
 800e0ea:	2000      	movs	r0, #0
 800e0ec:	4770      	bx	lr

0800e0ee <__swrite>:
 800e0ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0f2:	461f      	mov	r7, r3
 800e0f4:	898b      	ldrh	r3, [r1, #12]
 800e0f6:	4605      	mov	r5, r0
 800e0f8:	05db      	lsls	r3, r3, #23
 800e0fa:	460c      	mov	r4, r1
 800e0fc:	4616      	mov	r6, r2
 800e0fe:	d505      	bpl.n	800e10c <__swrite+0x1e>
 800e100:	2302      	movs	r3, #2
 800e102:	2200      	movs	r2, #0
 800e104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e108:	f000 fe86 	bl	800ee18 <_lseek_r>
 800e10c:	89a3      	ldrh	r3, [r4, #12]
 800e10e:	4632      	mov	r2, r6
 800e110:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e114:	81a3      	strh	r3, [r4, #12]
 800e116:	4628      	mov	r0, r5
 800e118:	463b      	mov	r3, r7
 800e11a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e11e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e122:	f000 bead 	b.w	800ee80 <_write_r>

0800e126 <__sseek>:
 800e126:	b510      	push	{r4, lr}
 800e128:	460c      	mov	r4, r1
 800e12a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e12e:	f000 fe73 	bl	800ee18 <_lseek_r>
 800e132:	1c43      	adds	r3, r0, #1
 800e134:	89a3      	ldrh	r3, [r4, #12]
 800e136:	bf15      	itete	ne
 800e138:	6560      	strne	r0, [r4, #84]	; 0x54
 800e13a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e13e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e142:	81a3      	strheq	r3, [r4, #12]
 800e144:	bf18      	it	ne
 800e146:	81a3      	strhne	r3, [r4, #12]
 800e148:	bd10      	pop	{r4, pc}

0800e14a <__sclose>:
 800e14a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e14e:	f000 bdfd 	b.w	800ed4c <_close_r>

0800e152 <memset>:
 800e152:	4603      	mov	r3, r0
 800e154:	4402      	add	r2, r0
 800e156:	4293      	cmp	r3, r2
 800e158:	d100      	bne.n	800e15c <memset+0xa>
 800e15a:	4770      	bx	lr
 800e15c:	f803 1b01 	strb.w	r1, [r3], #1
 800e160:	e7f9      	b.n	800e156 <memset+0x4>

0800e162 <strchr>:
 800e162:	4603      	mov	r3, r0
 800e164:	b2c9      	uxtb	r1, r1
 800e166:	4618      	mov	r0, r3
 800e168:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e16c:	b112      	cbz	r2, 800e174 <strchr+0x12>
 800e16e:	428a      	cmp	r2, r1
 800e170:	d1f9      	bne.n	800e166 <strchr+0x4>
 800e172:	4770      	bx	lr
 800e174:	2900      	cmp	r1, #0
 800e176:	bf18      	it	ne
 800e178:	2000      	movne	r0, #0
 800e17a:	4770      	bx	lr

0800e17c <strncmp>:
 800e17c:	b510      	push	{r4, lr}
 800e17e:	b16a      	cbz	r2, 800e19c <strncmp+0x20>
 800e180:	3901      	subs	r1, #1
 800e182:	1884      	adds	r4, r0, r2
 800e184:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e188:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e18c:	429a      	cmp	r2, r3
 800e18e:	d103      	bne.n	800e198 <strncmp+0x1c>
 800e190:	42a0      	cmp	r0, r4
 800e192:	d001      	beq.n	800e198 <strncmp+0x1c>
 800e194:	2a00      	cmp	r2, #0
 800e196:	d1f5      	bne.n	800e184 <strncmp+0x8>
 800e198:	1ad0      	subs	r0, r2, r3
 800e19a:	bd10      	pop	{r4, pc}
 800e19c:	4610      	mov	r0, r2
 800e19e:	e7fc      	b.n	800e19a <strncmp+0x1e>

0800e1a0 <strncpy>:
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	b510      	push	{r4, lr}
 800e1a4:	3901      	subs	r1, #1
 800e1a6:	b132      	cbz	r2, 800e1b6 <strncpy+0x16>
 800e1a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e1ac:	3a01      	subs	r2, #1
 800e1ae:	f803 4b01 	strb.w	r4, [r3], #1
 800e1b2:	2c00      	cmp	r4, #0
 800e1b4:	d1f7      	bne.n	800e1a6 <strncpy+0x6>
 800e1b6:	2100      	movs	r1, #0
 800e1b8:	441a      	add	r2, r3
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	d100      	bne.n	800e1c0 <strncpy+0x20>
 800e1be:	bd10      	pop	{r4, pc}
 800e1c0:	f803 1b01 	strb.w	r1, [r3], #1
 800e1c4:	e7f9      	b.n	800e1ba <strncpy+0x1a>
	...

0800e1c8 <strtok>:
 800e1c8:	4b16      	ldr	r3, [pc, #88]	; (800e224 <strtok+0x5c>)
 800e1ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ce:	681f      	ldr	r7, [r3, #0]
 800e1d0:	4605      	mov	r5, r0
 800e1d2:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800e1d4:	460e      	mov	r6, r1
 800e1d6:	b9ec      	cbnz	r4, 800e214 <strtok+0x4c>
 800e1d8:	2050      	movs	r0, #80	; 0x50
 800e1da:	f7fe fa8f 	bl	800c6fc <malloc>
 800e1de:	4602      	mov	r2, r0
 800e1e0:	6478      	str	r0, [r7, #68]	; 0x44
 800e1e2:	b920      	cbnz	r0, 800e1ee <strtok+0x26>
 800e1e4:	215b      	movs	r1, #91	; 0x5b
 800e1e6:	4b10      	ldr	r3, [pc, #64]	; (800e228 <strtok+0x60>)
 800e1e8:	4810      	ldr	r0, [pc, #64]	; (800e22c <strtok+0x64>)
 800e1ea:	f000 feb9 	bl	800ef60 <__assert_func>
 800e1ee:	e9c0 4400 	strd	r4, r4, [r0]
 800e1f2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e1f6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e1fa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800e1fe:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800e202:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800e206:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800e20a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800e20e:	6184      	str	r4, [r0, #24]
 800e210:	7704      	strb	r4, [r0, #28]
 800e212:	6244      	str	r4, [r0, #36]	; 0x24
 800e214:	4631      	mov	r1, r6
 800e216:	4628      	mov	r0, r5
 800e218:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e21a:	2301      	movs	r3, #1
 800e21c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e220:	f000 b806 	b.w	800e230 <__strtok_r>
 800e224:	200002d0 	.word	0x200002d0
 800e228:	0801218b 	.word	0x0801218b
 800e22c:	080121a2 	.word	0x080121a2

0800e230 <__strtok_r>:
 800e230:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e232:	b908      	cbnz	r0, 800e238 <__strtok_r+0x8>
 800e234:	6810      	ldr	r0, [r2, #0]
 800e236:	b188      	cbz	r0, 800e25c <__strtok_r+0x2c>
 800e238:	4604      	mov	r4, r0
 800e23a:	460f      	mov	r7, r1
 800e23c:	4620      	mov	r0, r4
 800e23e:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e242:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e246:	b91e      	cbnz	r6, 800e250 <__strtok_r+0x20>
 800e248:	b965      	cbnz	r5, 800e264 <__strtok_r+0x34>
 800e24a:	4628      	mov	r0, r5
 800e24c:	6015      	str	r5, [r2, #0]
 800e24e:	e005      	b.n	800e25c <__strtok_r+0x2c>
 800e250:	42b5      	cmp	r5, r6
 800e252:	d1f6      	bne.n	800e242 <__strtok_r+0x12>
 800e254:	2b00      	cmp	r3, #0
 800e256:	d1f0      	bne.n	800e23a <__strtok_r+0xa>
 800e258:	6014      	str	r4, [r2, #0]
 800e25a:	7003      	strb	r3, [r0, #0]
 800e25c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e25e:	461c      	mov	r4, r3
 800e260:	e00c      	b.n	800e27c <__strtok_r+0x4c>
 800e262:	b915      	cbnz	r5, 800e26a <__strtok_r+0x3a>
 800e264:	460e      	mov	r6, r1
 800e266:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e26a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e26e:	42ab      	cmp	r3, r5
 800e270:	d1f7      	bne.n	800e262 <__strtok_r+0x32>
 800e272:	2b00      	cmp	r3, #0
 800e274:	d0f3      	beq.n	800e25e <__strtok_r+0x2e>
 800e276:	2300      	movs	r3, #0
 800e278:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e27c:	6014      	str	r4, [r2, #0]
 800e27e:	e7ed      	b.n	800e25c <__strtok_r+0x2c>

0800e280 <strstr>:
 800e280:	780a      	ldrb	r2, [r1, #0]
 800e282:	b570      	push	{r4, r5, r6, lr}
 800e284:	b96a      	cbnz	r2, 800e2a2 <strstr+0x22>
 800e286:	bd70      	pop	{r4, r5, r6, pc}
 800e288:	429a      	cmp	r2, r3
 800e28a:	d109      	bne.n	800e2a0 <strstr+0x20>
 800e28c:	460c      	mov	r4, r1
 800e28e:	4605      	mov	r5, r0
 800e290:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e294:	2b00      	cmp	r3, #0
 800e296:	d0f6      	beq.n	800e286 <strstr+0x6>
 800e298:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800e29c:	429e      	cmp	r6, r3
 800e29e:	d0f7      	beq.n	800e290 <strstr+0x10>
 800e2a0:	3001      	adds	r0, #1
 800e2a2:	7803      	ldrb	r3, [r0, #0]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d1ef      	bne.n	800e288 <strstr+0x8>
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	e7ec      	b.n	800e286 <strstr+0x6>

0800e2ac <validate_structure>:
 800e2ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e2ae:	6801      	ldr	r1, [r0, #0]
 800e2b0:	4604      	mov	r4, r0
 800e2b2:	293b      	cmp	r1, #59	; 0x3b
 800e2b4:	d911      	bls.n	800e2da <validate_structure+0x2e>
 800e2b6:	223c      	movs	r2, #60	; 0x3c
 800e2b8:	4668      	mov	r0, sp
 800e2ba:	f000 fe6f 	bl	800ef9c <div>
 800e2be:	9a01      	ldr	r2, [sp, #4]
 800e2c0:	6863      	ldr	r3, [r4, #4]
 800e2c2:	9900      	ldr	r1, [sp, #0]
 800e2c4:	2a00      	cmp	r2, #0
 800e2c6:	440b      	add	r3, r1
 800e2c8:	6063      	str	r3, [r4, #4]
 800e2ca:	bfbb      	ittet	lt
 800e2cc:	323c      	addlt	r2, #60	; 0x3c
 800e2ce:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800e2d2:	6022      	strge	r2, [r4, #0]
 800e2d4:	6022      	strlt	r2, [r4, #0]
 800e2d6:	bfb8      	it	lt
 800e2d8:	6063      	strlt	r3, [r4, #4]
 800e2da:	6861      	ldr	r1, [r4, #4]
 800e2dc:	293b      	cmp	r1, #59	; 0x3b
 800e2de:	d911      	bls.n	800e304 <validate_structure+0x58>
 800e2e0:	223c      	movs	r2, #60	; 0x3c
 800e2e2:	4668      	mov	r0, sp
 800e2e4:	f000 fe5a 	bl	800ef9c <div>
 800e2e8:	9a01      	ldr	r2, [sp, #4]
 800e2ea:	68a3      	ldr	r3, [r4, #8]
 800e2ec:	9900      	ldr	r1, [sp, #0]
 800e2ee:	2a00      	cmp	r2, #0
 800e2f0:	440b      	add	r3, r1
 800e2f2:	60a3      	str	r3, [r4, #8]
 800e2f4:	bfbb      	ittet	lt
 800e2f6:	323c      	addlt	r2, #60	; 0x3c
 800e2f8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800e2fc:	6062      	strge	r2, [r4, #4]
 800e2fe:	6062      	strlt	r2, [r4, #4]
 800e300:	bfb8      	it	lt
 800e302:	60a3      	strlt	r3, [r4, #8]
 800e304:	68a1      	ldr	r1, [r4, #8]
 800e306:	2917      	cmp	r1, #23
 800e308:	d911      	bls.n	800e32e <validate_structure+0x82>
 800e30a:	2218      	movs	r2, #24
 800e30c:	4668      	mov	r0, sp
 800e30e:	f000 fe45 	bl	800ef9c <div>
 800e312:	9a01      	ldr	r2, [sp, #4]
 800e314:	68e3      	ldr	r3, [r4, #12]
 800e316:	9900      	ldr	r1, [sp, #0]
 800e318:	2a00      	cmp	r2, #0
 800e31a:	440b      	add	r3, r1
 800e31c:	60e3      	str	r3, [r4, #12]
 800e31e:	bfbb      	ittet	lt
 800e320:	3218      	addlt	r2, #24
 800e322:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800e326:	60a2      	strge	r2, [r4, #8]
 800e328:	60a2      	strlt	r2, [r4, #8]
 800e32a:	bfb8      	it	lt
 800e32c:	60e3      	strlt	r3, [r4, #12]
 800e32e:	6921      	ldr	r1, [r4, #16]
 800e330:	290b      	cmp	r1, #11
 800e332:	d911      	bls.n	800e358 <validate_structure+0xac>
 800e334:	220c      	movs	r2, #12
 800e336:	4668      	mov	r0, sp
 800e338:	f000 fe30 	bl	800ef9c <div>
 800e33c:	9a01      	ldr	r2, [sp, #4]
 800e33e:	6963      	ldr	r3, [r4, #20]
 800e340:	9900      	ldr	r1, [sp, #0]
 800e342:	2a00      	cmp	r2, #0
 800e344:	440b      	add	r3, r1
 800e346:	6163      	str	r3, [r4, #20]
 800e348:	bfbb      	ittet	lt
 800e34a:	320c      	addlt	r2, #12
 800e34c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800e350:	6122      	strge	r2, [r4, #16]
 800e352:	6122      	strlt	r2, [r4, #16]
 800e354:	bfb8      	it	lt
 800e356:	6163      	strlt	r3, [r4, #20]
 800e358:	6963      	ldr	r3, [r4, #20]
 800e35a:	079a      	lsls	r2, r3, #30
 800e35c:	d11e      	bne.n	800e39c <validate_structure+0xf0>
 800e35e:	2164      	movs	r1, #100	; 0x64
 800e360:	fb93 f2f1 	sdiv	r2, r3, r1
 800e364:	fb01 3212 	mls	r2, r1, r2, r3
 800e368:	b9d2      	cbnz	r2, 800e3a0 <validate_structure+0xf4>
 800e36a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800e36e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800e372:	fb93 f1f2 	sdiv	r1, r3, r2
 800e376:	fb02 3311 	mls	r3, r2, r1, r3
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	bf14      	ite	ne
 800e37e:	231c      	movne	r3, #28
 800e380:	231d      	moveq	r3, #29
 800e382:	68e2      	ldr	r2, [r4, #12]
 800e384:	2a00      	cmp	r2, #0
 800e386:	dc0d      	bgt.n	800e3a4 <validate_structure+0xf8>
 800e388:	250b      	movs	r5, #11
 800e38a:	2164      	movs	r1, #100	; 0x64
 800e38c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800e390:	4e30      	ldr	r6, [pc, #192]	; (800e454 <validate_structure+0x1a8>)
 800e392:	68e7      	ldr	r7, [r4, #12]
 800e394:	2f00      	cmp	r7, #0
 800e396:	dd31      	ble.n	800e3fc <validate_structure+0x150>
 800e398:	b003      	add	sp, #12
 800e39a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e39c:	231c      	movs	r3, #28
 800e39e:	e7f0      	b.n	800e382 <validate_structure+0xd6>
 800e3a0:	231d      	movs	r3, #29
 800e3a2:	e7ee      	b.n	800e382 <validate_structure+0xd6>
 800e3a4:	2700      	movs	r7, #0
 800e3a6:	2064      	movs	r0, #100	; 0x64
 800e3a8:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800e3ac:	4e29      	ldr	r6, [pc, #164]	; (800e454 <validate_structure+0x1a8>)
 800e3ae:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800e3b2:	2a01      	cmp	r2, #1
 800e3b4:	bf0c      	ite	eq
 800e3b6:	469c      	moveq	ip, r3
 800e3b8:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 800e3bc:	4561      	cmp	r1, ip
 800e3be:	ddeb      	ble.n	800e398 <validate_structure+0xec>
 800e3c0:	3201      	adds	r2, #1
 800e3c2:	eba1 010c 	sub.w	r1, r1, ip
 800e3c6:	2a0c      	cmp	r2, #12
 800e3c8:	60e1      	str	r1, [r4, #12]
 800e3ca:	6122      	str	r2, [r4, #16]
 800e3cc:	d1ef      	bne.n	800e3ae <validate_structure+0x102>
 800e3ce:	6963      	ldr	r3, [r4, #20]
 800e3d0:	1c5a      	adds	r2, r3, #1
 800e3d2:	0791      	lsls	r1, r2, #30
 800e3d4:	e9c4 7204 	strd	r7, r2, [r4, #16]
 800e3d8:	d138      	bne.n	800e44c <validate_structure+0x1a0>
 800e3da:	fb92 f1f0 	sdiv	r1, r2, r0
 800e3de:	fb00 2211 	mls	r2, r0, r1, r2
 800e3e2:	2a00      	cmp	r2, #0
 800e3e4:	d134      	bne.n	800e450 <validate_structure+0x1a4>
 800e3e6:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800e3ea:	fb93 f2f5 	sdiv	r2, r3, r5
 800e3ee:	fb05 3312 	mls	r3, r5, r2, r3
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	bf14      	ite	ne
 800e3f6:	231c      	movne	r3, #28
 800e3f8:	231d      	moveq	r3, #29
 800e3fa:	e7d8      	b.n	800e3ae <validate_structure+0x102>
 800e3fc:	6922      	ldr	r2, [r4, #16]
 800e3fe:	3a01      	subs	r2, #1
 800e400:	6122      	str	r2, [r4, #16]
 800e402:	3201      	adds	r2, #1
 800e404:	d115      	bne.n	800e432 <validate_structure+0x186>
 800e406:	6963      	ldr	r3, [r4, #20]
 800e408:	1e5a      	subs	r2, r3, #1
 800e40a:	f012 0f03 	tst.w	r2, #3
 800e40e:	e9c4 5204 	strd	r5, r2, [r4, #16]
 800e412:	d117      	bne.n	800e444 <validate_structure+0x198>
 800e414:	fb92 fcf1 	sdiv	ip, r2, r1
 800e418:	fb01 221c 	mls	r2, r1, ip, r2
 800e41c:	b9a2      	cbnz	r2, 800e448 <validate_structure+0x19c>
 800e41e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800e422:	fb93 f2f0 	sdiv	r2, r3, r0
 800e426:	fb00 3312 	mls	r3, r0, r2, r3
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	bf14      	ite	ne
 800e42e:	231c      	movne	r3, #28
 800e430:	231d      	moveq	r3, #29
 800e432:	6922      	ldr	r2, [r4, #16]
 800e434:	2a01      	cmp	r2, #1
 800e436:	bf0c      	ite	eq
 800e438:	461a      	moveq	r2, r3
 800e43a:	f856 2022 	ldrne.w	r2, [r6, r2, lsl #2]
 800e43e:	443a      	add	r2, r7
 800e440:	60e2      	str	r2, [r4, #12]
 800e442:	e7a6      	b.n	800e392 <validate_structure+0xe6>
 800e444:	231c      	movs	r3, #28
 800e446:	e7f4      	b.n	800e432 <validate_structure+0x186>
 800e448:	231d      	movs	r3, #29
 800e44a:	e7f2      	b.n	800e432 <validate_structure+0x186>
 800e44c:	231c      	movs	r3, #28
 800e44e:	e7ae      	b.n	800e3ae <validate_structure+0x102>
 800e450:	231d      	movs	r3, #29
 800e452:	e7ac      	b.n	800e3ae <validate_structure+0x102>
 800e454:	080121fc 	.word	0x080121fc

0800e458 <mktime>:
 800e458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e45c:	b085      	sub	sp, #20
 800e45e:	4607      	mov	r7, r0
 800e460:	f002 fffa 	bl	8011458 <__gettzinfo>
 800e464:	4681      	mov	r9, r0
 800e466:	4638      	mov	r0, r7
 800e468:	f7ff ff20 	bl	800e2ac <validate_structure>
 800e46c:	e9d7 4300 	ldrd	r4, r3, [r7]
 800e470:	223c      	movs	r2, #60	; 0x3c
 800e472:	fb02 4403 	mla	r4, r2, r3, r4
 800e476:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	697e      	ldr	r6, [r7, #20]
 800e47e:	fb02 4403 	mla	r4, r2, r3, r4
 800e482:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 800e486:	4abb      	ldr	r2, [pc, #748]	; (800e774 <mktime+0x31c>)
 800e488:	3d01      	subs	r5, #1
 800e48a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e48e:	2b01      	cmp	r3, #1
 800e490:	4415      	add	r5, r2
 800e492:	dd11      	ble.n	800e4b8 <mktime+0x60>
 800e494:	07b1      	lsls	r1, r6, #30
 800e496:	d10f      	bne.n	800e4b8 <mktime+0x60>
 800e498:	2264      	movs	r2, #100	; 0x64
 800e49a:	fb96 f3f2 	sdiv	r3, r6, r2
 800e49e:	fb02 6313 	mls	r3, r2, r3, r6
 800e4a2:	b943      	cbnz	r3, 800e4b6 <mktime+0x5e>
 800e4a4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800e4a8:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800e4ac:	fb93 f1f2 	sdiv	r1, r3, r2
 800e4b0:	fb02 3311 	mls	r3, r2, r1, r3
 800e4b4:	b903      	cbnz	r3, 800e4b8 <mktime+0x60>
 800e4b6:	3501      	adds	r5, #1
 800e4b8:	f644 6220 	movw	r2, #20000	; 0x4e20
 800e4bc:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 800e4c0:	3310      	adds	r3, #16
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	61fd      	str	r5, [r7, #28]
 800e4c6:	f200 815e 	bhi.w	800e786 <mktime+0x32e>
 800e4ca:	2e46      	cmp	r6, #70	; 0x46
 800e4cc:	dd72      	ble.n	800e5b4 <mktime+0x15c>
 800e4ce:	2346      	movs	r3, #70	; 0x46
 800e4d0:	f240 1c6d 	movw	ip, #365	; 0x16d
 800e4d4:	2164      	movs	r1, #100	; 0x64
 800e4d6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800e4da:	079a      	lsls	r2, r3, #30
 800e4dc:	d164      	bne.n	800e5a8 <mktime+0x150>
 800e4de:	fb93 f2f1 	sdiv	r2, r3, r1
 800e4e2:	fb01 3212 	mls	r2, r1, r2, r3
 800e4e6:	2a00      	cmp	r2, #0
 800e4e8:	d161      	bne.n	800e5ae <mktime+0x156>
 800e4ea:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800e4ee:	fb92 fef0 	sdiv	lr, r2, r0
 800e4f2:	fb00 221e 	mls	r2, r0, lr, r2
 800e4f6:	2a00      	cmp	r2, #0
 800e4f8:	bf14      	ite	ne
 800e4fa:	4662      	movne	r2, ip
 800e4fc:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800e500:	3301      	adds	r3, #1
 800e502:	429e      	cmp	r6, r3
 800e504:	4415      	add	r5, r2
 800e506:	d1e8      	bne.n	800e4da <mktime+0x82>
 800e508:	4b9b      	ldr	r3, [pc, #620]	; (800e778 <mktime+0x320>)
 800e50a:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800e50e:	fbc5 4803 	smlal	r4, r8, r5, r3
 800e512:	f000 f9e3 	bl	800e8dc <__tz_lock>
 800e516:	f000 f9ed 	bl	800e8f4 <_tzset_unlocked>
 800e51a:	4b98      	ldr	r3, [pc, #608]	; (800e77c <mktime+0x324>)
 800e51c:	f8d3 b000 	ldr.w	fp, [r3]
 800e520:	f1bb 0f00 	cmp.w	fp, #0
 800e524:	d03a      	beq.n	800e59c <mktime+0x144>
 800e526:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800e52a:	6978      	ldr	r0, [r7, #20]
 800e52c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e530:	f1bb 0f01 	cmp.w	fp, #1
 800e534:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800e538:	46da      	mov	sl, fp
 800e53a:	bfa8      	it	ge
 800e53c:	f04f 0a01 	movge.w	sl, #1
 800e540:	4283      	cmp	r3, r0
 800e542:	d179      	bne.n	800e638 <mktime+0x1e0>
 800e544:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 800e548:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
 800e54c:	f8d9 c04c 	ldr.w	ip, [r9, #76]	; 0x4c
 800e550:	1a13      	subs	r3, r2, r0
 800e552:	9302      	str	r3, [sp, #8]
 800e554:	eb61 73e0 	sbc.w	r3, r1, r0, asr #31
 800e558:	9303      	str	r3, [sp, #12]
 800e55a:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800e55e:	9301      	str	r3, [sp, #4]
 800e560:	9a01      	ldr	r2, [sp, #4]
 800e562:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 800e566:	ebb2 0e03 	subs.w	lr, r2, r3
 800e56a:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800e56e:	4574      	cmp	r4, lr
 800e570:	eb78 0201 	sbcs.w	r2, r8, r1
 800e574:	da66      	bge.n	800e644 <mktime+0x1ec>
 800e576:	f8d9 2000 	ldr.w	r2, [r9]
 800e57a:	2a00      	cmp	r2, #0
 800e57c:	d06f      	beq.n	800e65e <mktime+0x206>
 800e57e:	9a02      	ldr	r2, [sp, #8]
 800e580:	4294      	cmp	r4, r2
 800e582:	9a03      	ldr	r2, [sp, #12]
 800e584:	eb78 0202 	sbcs.w	r2, r8, r2
 800e588:	db03      	blt.n	800e592 <mktime+0x13a>
 800e58a:	4574      	cmp	r4, lr
 800e58c:	eb78 0101 	sbcs.w	r1, r8, r1
 800e590:	db6b      	blt.n	800e66a <mktime+0x212>
 800e592:	f1bb 0f00 	cmp.w	fp, #0
 800e596:	f04f 0b00 	mov.w	fp, #0
 800e59a:	da6b      	bge.n	800e674 <mktime+0x21c>
 800e59c:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 800e5a0:	191c      	adds	r4, r3, r4
 800e5a2:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800e5a6:	e0a9      	b.n	800e6fc <mktime+0x2a4>
 800e5a8:	f240 126d 	movw	r2, #365	; 0x16d
 800e5ac:	e7a8      	b.n	800e500 <mktime+0xa8>
 800e5ae:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800e5b2:	e7a5      	b.n	800e500 <mktime+0xa8>
 800e5b4:	d0a8      	beq.n	800e508 <mktime+0xb0>
 800e5b6:	2345      	movs	r3, #69	; 0x45
 800e5b8:	f240 1c6d 	movw	ip, #365	; 0x16d
 800e5bc:	2164      	movs	r1, #100	; 0x64
 800e5be:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800e5c2:	e012      	b.n	800e5ea <mktime+0x192>
 800e5c4:	bb62      	cbnz	r2, 800e620 <mktime+0x1c8>
 800e5c6:	fb93 f2f1 	sdiv	r2, r3, r1
 800e5ca:	fb01 3212 	mls	r2, r1, r2, r3
 800e5ce:	bb52      	cbnz	r2, 800e626 <mktime+0x1ce>
 800e5d0:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800e5d4:	fb92 fef0 	sdiv	lr, r2, r0
 800e5d8:	fb00 221e 	mls	r2, r0, lr, r2
 800e5dc:	2a00      	cmp	r2, #0
 800e5de:	bf14      	ite	ne
 800e5e0:	4662      	movne	r2, ip
 800e5e2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800e5e6:	1aad      	subs	r5, r5, r2
 800e5e8:	3b01      	subs	r3, #1
 800e5ea:	429e      	cmp	r6, r3
 800e5ec:	f003 0203 	and.w	r2, r3, #3
 800e5f0:	dbe8      	blt.n	800e5c4 <mktime+0x16c>
 800e5f2:	b9da      	cbnz	r2, 800e62c <mktime+0x1d4>
 800e5f4:	2264      	movs	r2, #100	; 0x64
 800e5f6:	fb96 f3f2 	sdiv	r3, r6, r2
 800e5fa:	fb02 6313 	mls	r3, r2, r3, r6
 800e5fe:	b9c3      	cbnz	r3, 800e632 <mktime+0x1da>
 800e600:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800e604:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800e608:	fb93 f1f2 	sdiv	r1, r3, r2
 800e60c:	fb02 3311 	mls	r3, r2, r1, r3
 800e610:	2b00      	cmp	r3, #0
 800e612:	f240 136d 	movw	r3, #365	; 0x16d
 800e616:	bf08      	it	eq
 800e618:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800e61c:	1aed      	subs	r5, r5, r3
 800e61e:	e773      	b.n	800e508 <mktime+0xb0>
 800e620:	f240 126d 	movw	r2, #365	; 0x16d
 800e624:	e7df      	b.n	800e5e6 <mktime+0x18e>
 800e626:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800e62a:	e7dc      	b.n	800e5e6 <mktime+0x18e>
 800e62c:	f240 136d 	movw	r3, #365	; 0x16d
 800e630:	e7f4      	b.n	800e61c <mktime+0x1c4>
 800e632:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800e636:	e7f1      	b.n	800e61c <mktime+0x1c4>
 800e638:	f000 f8aa 	bl	800e790 <__tzcalc_limits>
 800e63c:	2800      	cmp	r0, #0
 800e63e:	d181      	bne.n	800e544 <mktime+0xec>
 800e640:	46d3      	mov	fp, sl
 800e642:	e050      	b.n	800e6e6 <mktime+0x28e>
 800e644:	9a01      	ldr	r2, [sp, #4]
 800e646:	1a12      	subs	r2, r2, r0
 800e648:	9201      	str	r2, [sp, #4]
 800e64a:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800e64e:	eb6c 0c02 	sbc.w	ip, ip, r2
 800e652:	9a01      	ldr	r2, [sp, #4]
 800e654:	4294      	cmp	r4, r2
 800e656:	eb78 0c0c 	sbcs.w	ip, r8, ip
 800e65a:	dbf1      	blt.n	800e640 <mktime+0x1e8>
 800e65c:	e78b      	b.n	800e576 <mktime+0x11e>
 800e65e:	9a02      	ldr	r2, [sp, #8]
 800e660:	4294      	cmp	r4, r2
 800e662:	9a03      	ldr	r2, [sp, #12]
 800e664:	eb78 0202 	sbcs.w	r2, r8, r2
 800e668:	db8f      	blt.n	800e58a <mktime+0x132>
 800e66a:	f1bb 0f00 	cmp.w	fp, #0
 800e66e:	db3e      	blt.n	800e6ee <mktime+0x296>
 800e670:	f04f 0b01 	mov.w	fp, #1
 800e674:	ea8a 0a0b 	eor.w	sl, sl, fp
 800e678:	f1ba 0f01 	cmp.w	sl, #1
 800e67c:	d133      	bne.n	800e6e6 <mktime+0x28e>
 800e67e:	f1bb 0f00 	cmp.w	fp, #0
 800e682:	d04e      	beq.n	800e722 <mktime+0x2ca>
 800e684:	1a1b      	subs	r3, r3, r0
 800e686:	683a      	ldr	r2, [r7, #0]
 800e688:	191c      	adds	r4, r3, r4
 800e68a:	441a      	add	r2, r3
 800e68c:	603a      	str	r2, [r7, #0]
 800e68e:	4638      	mov	r0, r7
 800e690:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800e694:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800e698:	f7ff fe08 	bl	800e2ac <validate_structure>
 800e69c:	68fa      	ldr	r2, [r7, #12]
 800e69e:	ebb2 020a 	subs.w	r2, r2, sl
 800e6a2:	d020      	beq.n	800e6e6 <mktime+0x28e>
 800e6a4:	2a01      	cmp	r2, #1
 800e6a6:	dc3e      	bgt.n	800e726 <mktime+0x2ce>
 800e6a8:	1c91      	adds	r1, r2, #2
 800e6aa:	bfd8      	it	le
 800e6ac:	2201      	movle	r2, #1
 800e6ae:	69fb      	ldr	r3, [r7, #28]
 800e6b0:	4415      	add	r5, r2
 800e6b2:	18d2      	adds	r2, r2, r3
 800e6b4:	d540      	bpl.n	800e738 <mktime+0x2e0>
 800e6b6:	1e73      	subs	r3, r6, #1
 800e6b8:	079a      	lsls	r2, r3, #30
 800e6ba:	d137      	bne.n	800e72c <mktime+0x2d4>
 800e6bc:	2264      	movs	r2, #100	; 0x64
 800e6be:	fb93 f1f2 	sdiv	r1, r3, r2
 800e6c2:	fb02 3311 	mls	r3, r2, r1, r3
 800e6c6:	bba3      	cbnz	r3, 800e732 <mktime+0x2da>
 800e6c8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800e6cc:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800e6d0:	fb96 f2f3 	sdiv	r2, r6, r3
 800e6d4:	fb03 6612 	mls	r6, r3, r2, r6
 800e6d8:	2e00      	cmp	r6, #0
 800e6da:	f240 136d 	movw	r3, #365	; 0x16d
 800e6de:	bf18      	it	ne
 800e6e0:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800e6e4:	61fb      	str	r3, [r7, #28]
 800e6e6:	f1bb 0f01 	cmp.w	fp, #1
 800e6ea:	f47f af57 	bne.w	800e59c <mktime+0x144>
 800e6ee:	f04f 0b01 	mov.w	fp, #1
 800e6f2:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
 800e6f6:	191c      	adds	r4, r3, r4
 800e6f8:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800e6fc:	f000 f8f4 	bl	800e8e8 <__tz_unlock>
 800e700:	2307      	movs	r3, #7
 800e702:	3504      	adds	r5, #4
 800e704:	fb95 f3f3 	sdiv	r3, r5, r3
 800e708:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800e70c:	1aed      	subs	r5, r5, r3
 800e70e:	bf48      	it	mi
 800e710:	3507      	addmi	r5, #7
 800e712:	f8c7 b020 	str.w	fp, [r7, #32]
 800e716:	61bd      	str	r5, [r7, #24]
 800e718:	4620      	mov	r0, r4
 800e71a:	4641      	mov	r1, r8
 800e71c:	b005      	add	sp, #20
 800e71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e722:	1ac3      	subs	r3, r0, r3
 800e724:	e7af      	b.n	800e686 <mktime+0x22e>
 800e726:	f04f 32ff 	mov.w	r2, #4294967295
 800e72a:	e7c0      	b.n	800e6ae <mktime+0x256>
 800e72c:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800e730:	e7d8      	b.n	800e6e4 <mktime+0x28c>
 800e732:	f240 136d 	movw	r3, #365	; 0x16d
 800e736:	e7d5      	b.n	800e6e4 <mktime+0x28c>
 800e738:	07b3      	lsls	r3, r6, #30
 800e73a:	d118      	bne.n	800e76e <mktime+0x316>
 800e73c:	2164      	movs	r1, #100	; 0x64
 800e73e:	fb96 f3f1 	sdiv	r3, r6, r1
 800e742:	fb01 6313 	mls	r3, r1, r3, r6
 800e746:	b9db      	cbnz	r3, 800e780 <mktime+0x328>
 800e748:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800e74c:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 800e750:	fb96 f1f3 	sdiv	r1, r6, r3
 800e754:	fb03 6611 	mls	r6, r3, r1, r6
 800e758:	2e00      	cmp	r6, #0
 800e75a:	f240 136d 	movw	r3, #365	; 0x16d
 800e75e:	bf08      	it	eq
 800e760:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800e764:	429a      	cmp	r2, r3
 800e766:	bfa8      	it	ge
 800e768:	1ad2      	subge	r2, r2, r3
 800e76a:	61fa      	str	r2, [r7, #28]
 800e76c:	e7bb      	b.n	800e6e6 <mktime+0x28e>
 800e76e:	f240 136d 	movw	r3, #365	; 0x16d
 800e772:	e7f7      	b.n	800e764 <mktime+0x30c>
 800e774:	0801222c 	.word	0x0801222c
 800e778:	00015180 	.word	0x00015180
 800e77c:	20005b80 	.word	0x20005b80
 800e780:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800e784:	e7ee      	b.n	800e764 <mktime+0x30c>
 800e786:	f04f 34ff 	mov.w	r4, #4294967295
 800e78a:	46a0      	mov	r8, r4
 800e78c:	e7c4      	b.n	800e718 <mktime+0x2c0>
 800e78e:	bf00      	nop

0800e790 <__tzcalc_limits>:
 800e790:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e794:	4605      	mov	r5, r0
 800e796:	f002 fe5f 	bl	8011458 <__gettzinfo>
 800e79a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800e79e:	429d      	cmp	r5, r3
 800e7a0:	f340 8096 	ble.w	800e8d0 <__tzcalc_limits+0x140>
 800e7a4:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800e7a8:	18ac      	adds	r4, r5, r2
 800e7aa:	f240 126d 	movw	r2, #365	; 0x16d
 800e7ae:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800e7b2:	10a4      	asrs	r4, r4, #2
 800e7b4:	fb02 4403 	mla	r4, r2, r3, r4
 800e7b8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800e7bc:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800e7c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e7c4:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800e7c8:	441c      	add	r4, r3
 800e7ca:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800e7ce:	186a      	adds	r2, r5, r1
 800e7d0:	fbb2 f2f3 	udiv	r2, r2, r3
 800e7d4:	fb95 fcf3 	sdiv	ip, r5, r3
 800e7d8:	4414      	add	r4, r2
 800e7da:	2264      	movs	r2, #100	; 0x64
 800e7dc:	fb03 5c1c 	mls	ip, r3, ip, r5
 800e7e0:	fb95 f7f2 	sdiv	r7, r5, r2
 800e7e4:	fabc f68c 	clz	r6, ip
 800e7e8:	4601      	mov	r1, r0
 800e7ea:	fb02 5717 	mls	r7, r2, r7, r5
 800e7ee:	6045      	str	r5, [r0, #4]
 800e7f0:	0976      	lsrs	r6, r6, #5
 800e7f2:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800e7f6:	f005 0203 	and.w	r2, r5, #3
 800e7fa:	7a0d      	ldrb	r5, [r1, #8]
 800e7fc:	694b      	ldr	r3, [r1, #20]
 800e7fe:	2d4a      	cmp	r5, #74	; 0x4a
 800e800:	d12b      	bne.n	800e85a <__tzcalc_limits+0xca>
 800e802:	18e5      	adds	r5, r4, r3
 800e804:	b902      	cbnz	r2, 800e808 <__tzcalc_limits+0x78>
 800e806:	b917      	cbnz	r7, 800e80e <__tzcalc_limits+0x7e>
 800e808:	f1bc 0f00 	cmp.w	ip, #0
 800e80c:	d123      	bne.n	800e856 <__tzcalc_limits+0xc6>
 800e80e:	2b3b      	cmp	r3, #59	; 0x3b
 800e810:	bfd4      	ite	le
 800e812:	2300      	movle	r3, #0
 800e814:	2301      	movgt	r3, #1
 800e816:	442b      	add	r3, r5
 800e818:	3b01      	subs	r3, #1
 800e81a:	698d      	ldr	r5, [r1, #24]
 800e81c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800e8d4 <__tzcalc_limits+0x144>
 800e820:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800e824:	fbc3 5e08 	smlal	r5, lr, r3, r8
 800e828:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800e82a:	18ed      	adds	r5, r5, r3
 800e82c:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800e830:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800e834:	3128      	adds	r1, #40	; 0x28
 800e836:	458b      	cmp	fp, r1
 800e838:	d1df      	bne.n	800e7fa <__tzcalc_limits+0x6a>
 800e83a:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800e83e:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	; 0x48
 800e842:	428c      	cmp	r4, r1
 800e844:	4193      	sbcs	r3, r2
 800e846:	bfb4      	ite	lt
 800e848:	2301      	movlt	r3, #1
 800e84a:	2300      	movge	r3, #0
 800e84c:	6003      	str	r3, [r0, #0]
 800e84e:	2001      	movs	r0, #1
 800e850:	b003      	add	sp, #12
 800e852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e856:	2300      	movs	r3, #0
 800e858:	e7dd      	b.n	800e816 <__tzcalc_limits+0x86>
 800e85a:	2d44      	cmp	r5, #68	; 0x44
 800e85c:	d101      	bne.n	800e862 <__tzcalc_limits+0xd2>
 800e85e:	4423      	add	r3, r4
 800e860:	e7db      	b.n	800e81a <__tzcalc_limits+0x8a>
 800e862:	bb7a      	cbnz	r2, 800e8c4 <__tzcalc_limits+0x134>
 800e864:	2f00      	cmp	r7, #0
 800e866:	bf0c      	ite	eq
 800e868:	4635      	moveq	r5, r6
 800e86a:	2501      	movne	r5, #1
 800e86c:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800e870:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800e874:	f04f 0800 	mov.w	r8, #0
 800e878:	f8cd e004 	str.w	lr, [sp, #4]
 800e87c:	46a6      	mov	lr, r4
 800e87e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800e8d8 <__tzcalc_limits+0x148>
 800e882:	fb0a 9505 	mla	r5, sl, r5, r9
 800e886:	3d04      	subs	r5, #4
 800e888:	f8dd a004 	ldr.w	sl, [sp, #4]
 800e88c:	f108 0801 	add.w	r8, r8, #1
 800e890:	45c2      	cmp	sl, r8
 800e892:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800e896:	dc17      	bgt.n	800e8c8 <__tzcalc_limits+0x138>
 800e898:	f04f 0807 	mov.w	r8, #7
 800e89c:	f10e 0504 	add.w	r5, lr, #4
 800e8a0:	fb95 f8f8 	sdiv	r8, r5, r8
 800e8a4:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800e8a8:	eba5 0508 	sub.w	r5, r5, r8
 800e8ac:	1b5d      	subs	r5, r3, r5
 800e8ae:	690b      	ldr	r3, [r1, #16]
 800e8b0:	bf48      	it	mi
 800e8b2:	3507      	addmi	r5, #7
 800e8b4:	3b01      	subs	r3, #1
 800e8b6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800e8ba:	442b      	add	r3, r5
 800e8bc:	454b      	cmp	r3, r9
 800e8be:	da05      	bge.n	800e8cc <__tzcalc_limits+0x13c>
 800e8c0:	4473      	add	r3, lr
 800e8c2:	e7aa      	b.n	800e81a <__tzcalc_limits+0x8a>
 800e8c4:	4635      	mov	r5, r6
 800e8c6:	e7d1      	b.n	800e86c <__tzcalc_limits+0xdc>
 800e8c8:	44ce      	add	lr, r9
 800e8ca:	e7dd      	b.n	800e888 <__tzcalc_limits+0xf8>
 800e8cc:	3b07      	subs	r3, #7
 800e8ce:	e7f5      	b.n	800e8bc <__tzcalc_limits+0x12c>
 800e8d0:	2000      	movs	r0, #0
 800e8d2:	e7bd      	b.n	800e850 <__tzcalc_limits+0xc0>
 800e8d4:	00015180 	.word	0x00015180
 800e8d8:	08012530 	.word	0x08012530

0800e8dc <__tz_lock>:
 800e8dc:	4801      	ldr	r0, [pc, #4]	; (800e8e4 <__tz_lock+0x8>)
 800e8de:	f000 bb0c 	b.w	800eefa <__retarget_lock_acquire>
 800e8e2:	bf00      	nop
 800e8e4:	20005b8f 	.word	0x20005b8f

0800e8e8 <__tz_unlock>:
 800e8e8:	4801      	ldr	r0, [pc, #4]	; (800e8f0 <__tz_unlock+0x8>)
 800e8ea:	f000 bb08 	b.w	800eefe <__retarget_lock_release>
 800e8ee:	bf00      	nop
 800e8f0:	20005b8f 	.word	0x20005b8f

0800e8f4 <_tzset_unlocked>:
 800e8f4:	4b01      	ldr	r3, [pc, #4]	; (800e8fc <_tzset_unlocked+0x8>)
 800e8f6:	6818      	ldr	r0, [r3, #0]
 800e8f8:	f000 b802 	b.w	800e900 <_tzset_unlocked_r>
 800e8fc:	200002d0 	.word	0x200002d0

0800e900 <_tzset_unlocked_r>:
 800e900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e904:	b08d      	sub	sp, #52	; 0x34
 800e906:	4607      	mov	r7, r0
 800e908:	f002 fda6 	bl	8011458 <__gettzinfo>
 800e90c:	496d      	ldr	r1, [pc, #436]	; (800eac4 <_tzset_unlocked_r+0x1c4>)
 800e90e:	4604      	mov	r4, r0
 800e910:	4638      	mov	r0, r7
 800e912:	f001 fda3 	bl	801045c <_getenv_r>
 800e916:	4d6c      	ldr	r5, [pc, #432]	; (800eac8 <_tzset_unlocked_r+0x1c8>)
 800e918:	4606      	mov	r6, r0
 800e91a:	bb10      	cbnz	r0, 800e962 <_tzset_unlocked_r+0x62>
 800e91c:	4b6b      	ldr	r3, [pc, #428]	; (800eacc <_tzset_unlocked_r+0x1cc>)
 800e91e:	4a6c      	ldr	r2, [pc, #432]	; (800ead0 <_tzset_unlocked_r+0x1d0>)
 800e920:	6018      	str	r0, [r3, #0]
 800e922:	4b6c      	ldr	r3, [pc, #432]	; (800ead4 <_tzset_unlocked_r+0x1d4>)
 800e924:	214a      	movs	r1, #74	; 0x4a
 800e926:	6018      	str	r0, [r3, #0]
 800e928:	4b6b      	ldr	r3, [pc, #428]	; (800ead8 <_tzset_unlocked_r+0x1d8>)
 800e92a:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800e92e:	e9c3 2200 	strd	r2, r2, [r3]
 800e932:	2200      	movs	r2, #0
 800e934:	2300      	movs	r3, #0
 800e936:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800e93a:	e9c4 000d 	strd	r0, r0, [r4, #52]	; 0x34
 800e93e:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800e942:	62a0      	str	r0, [r4, #40]	; 0x28
 800e944:	6520      	str	r0, [r4, #80]	; 0x50
 800e946:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800e94a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e94e:	6828      	ldr	r0, [r5, #0]
 800e950:	7221      	strb	r1, [r4, #8]
 800e952:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 800e956:	f7fd fed9 	bl	800c70c <free>
 800e95a:	602e      	str	r6, [r5, #0]
 800e95c:	b00d      	add	sp, #52	; 0x34
 800e95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e962:	6829      	ldr	r1, [r5, #0]
 800e964:	2900      	cmp	r1, #0
 800e966:	f040 808e 	bne.w	800ea86 <_tzset_unlocked_r+0x186>
 800e96a:	6828      	ldr	r0, [r5, #0]
 800e96c:	f7fd fece 	bl	800c70c <free>
 800e970:	4630      	mov	r0, r6
 800e972:	f7f1 fc67 	bl	8000244 <strlen>
 800e976:	1c41      	adds	r1, r0, #1
 800e978:	4638      	mov	r0, r7
 800e97a:	f7fd feef 	bl	800c75c <_malloc_r>
 800e97e:	6028      	str	r0, [r5, #0]
 800e980:	2800      	cmp	r0, #0
 800e982:	f040 8086 	bne.w	800ea92 <_tzset_unlocked_r+0x192>
 800e986:	2300      	movs	r3, #0
 800e988:	4a52      	ldr	r2, [pc, #328]	; (800ead4 <_tzset_unlocked_r+0x1d4>)
 800e98a:	2000      	movs	r0, #0
 800e98c:	6013      	str	r3, [r2, #0]
 800e98e:	2100      	movs	r1, #0
 800e990:	4a52      	ldr	r2, [pc, #328]	; (800eadc <_tzset_unlocked_r+0x1dc>)
 800e992:	f8df 8144 	ldr.w	r8, [pc, #324]	; 800ead8 <_tzset_unlocked_r+0x1d8>
 800e996:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800e99a:	e9c8 2200 	strd	r2, r2, [r8]
 800e99e:	224a      	movs	r2, #74	; 0x4a
 800e9a0:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800e9a4:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800e9a8:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 800e9ac:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 800e9b0:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800e9b4:	f8df a114 	ldr.w	sl, [pc, #276]	; 800eacc <_tzset_unlocked_r+0x1cc>
 800e9b8:	7222      	strb	r2, [r4, #8]
 800e9ba:	f8ca 3000 	str.w	r3, [sl]
 800e9be:	62a3      	str	r3, [r4, #40]	; 0x28
 800e9c0:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 800e9c4:	6523      	str	r3, [r4, #80]	; 0x50
 800e9c6:	7833      	ldrb	r3, [r6, #0]
 800e9c8:	2b3a      	cmp	r3, #58	; 0x3a
 800e9ca:	bf08      	it	eq
 800e9cc:	3601      	addeq	r6, #1
 800e9ce:	7833      	ldrb	r3, [r6, #0]
 800e9d0:	2b3c      	cmp	r3, #60	; 0x3c
 800e9d2:	d162      	bne.n	800ea9a <_tzset_unlocked_r+0x19a>
 800e9d4:	1c75      	adds	r5, r6, #1
 800e9d6:	4628      	mov	r0, r5
 800e9d8:	4a41      	ldr	r2, [pc, #260]	; (800eae0 <_tzset_unlocked_r+0x1e0>)
 800e9da:	4942      	ldr	r1, [pc, #264]	; (800eae4 <_tzset_unlocked_r+0x1e4>)
 800e9dc:	ab0a      	add	r3, sp, #40	; 0x28
 800e9de:	f002 fc7b 	bl	80112d8 <siscanf>
 800e9e2:	2800      	cmp	r0, #0
 800e9e4:	ddba      	ble.n	800e95c <_tzset_unlocked_r+0x5c>
 800e9e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9e8:	1eda      	subs	r2, r3, #3
 800e9ea:	2a07      	cmp	r2, #7
 800e9ec:	d8b6      	bhi.n	800e95c <_tzset_unlocked_r+0x5c>
 800e9ee:	5ceb      	ldrb	r3, [r5, r3]
 800e9f0:	2b3e      	cmp	r3, #62	; 0x3e
 800e9f2:	d1b3      	bne.n	800e95c <_tzset_unlocked_r+0x5c>
 800e9f4:	3602      	adds	r6, #2
 800e9f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9f8:	18f5      	adds	r5, r6, r3
 800e9fa:	5cf3      	ldrb	r3, [r6, r3]
 800e9fc:	2b2d      	cmp	r3, #45	; 0x2d
 800e9fe:	d15a      	bne.n	800eab6 <_tzset_unlocked_r+0x1b6>
 800ea00:	f04f 39ff 	mov.w	r9, #4294967295
 800ea04:	3501      	adds	r5, #1
 800ea06:	2300      	movs	r3, #0
 800ea08:	af08      	add	r7, sp, #32
 800ea0a:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ea0e:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ea12:	ab0a      	add	r3, sp, #40	; 0x28
 800ea14:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800ea18:	9303      	str	r3, [sp, #12]
 800ea1a:	f10d 031e 	add.w	r3, sp, #30
 800ea1e:	9300      	str	r3, [sp, #0]
 800ea20:	4628      	mov	r0, r5
 800ea22:	4931      	ldr	r1, [pc, #196]	; (800eae8 <_tzset_unlocked_r+0x1e8>)
 800ea24:	ab0a      	add	r3, sp, #40	; 0x28
 800ea26:	aa07      	add	r2, sp, #28
 800ea28:	f002 fc56 	bl	80112d8 <siscanf>
 800ea2c:	2800      	cmp	r0, #0
 800ea2e:	dd95      	ble.n	800e95c <_tzset_unlocked_r+0x5c>
 800ea30:	223c      	movs	r2, #60	; 0x3c
 800ea32:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800ea36:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800ea3a:	fb02 6603 	mla	r6, r2, r3, r6
 800ea3e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800ea42:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800ea46:	fb02 6603 	mla	r6, r2, r3, r6
 800ea4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea4c:	fb09 f606 	mul.w	r6, r9, r6
 800ea50:	eb05 0903 	add.w	r9, r5, r3
 800ea54:	5ceb      	ldrb	r3, [r5, r3]
 800ea56:	2b3c      	cmp	r3, #60	; 0x3c
 800ea58:	f040 80e7 	bne.w	800ec2a <_tzset_unlocked_r+0x32a>
 800ea5c:	f109 0501 	add.w	r5, r9, #1
 800ea60:	4628      	mov	r0, r5
 800ea62:	4a22      	ldr	r2, [pc, #136]	; (800eaec <_tzset_unlocked_r+0x1ec>)
 800ea64:	491f      	ldr	r1, [pc, #124]	; (800eae4 <_tzset_unlocked_r+0x1e4>)
 800ea66:	ab0a      	add	r3, sp, #40	; 0x28
 800ea68:	f002 fc36 	bl	80112d8 <siscanf>
 800ea6c:	2800      	cmp	r0, #0
 800ea6e:	dc41      	bgt.n	800eaf4 <_tzset_unlocked_r+0x1f4>
 800ea70:	f899 3001 	ldrb.w	r3, [r9, #1]
 800ea74:	2b3e      	cmp	r3, #62	; 0x3e
 800ea76:	d13d      	bne.n	800eaf4 <_tzset_unlocked_r+0x1f4>
 800ea78:	4b19      	ldr	r3, [pc, #100]	; (800eae0 <_tzset_unlocked_r+0x1e0>)
 800ea7a:	62a6      	str	r6, [r4, #40]	; 0x28
 800ea7c:	e9c8 3300 	strd	r3, r3, [r8]
 800ea80:	f8ca 6000 	str.w	r6, [sl]
 800ea84:	e76a      	b.n	800e95c <_tzset_unlocked_r+0x5c>
 800ea86:	f7f1 fbd3 	bl	8000230 <strcmp>
 800ea8a:	2800      	cmp	r0, #0
 800ea8c:	f47f af6d 	bne.w	800e96a <_tzset_unlocked_r+0x6a>
 800ea90:	e764      	b.n	800e95c <_tzset_unlocked_r+0x5c>
 800ea92:	4631      	mov	r1, r6
 800ea94:	f000 fa35 	bl	800ef02 <strcpy>
 800ea98:	e775      	b.n	800e986 <_tzset_unlocked_r+0x86>
 800ea9a:	4630      	mov	r0, r6
 800ea9c:	4a10      	ldr	r2, [pc, #64]	; (800eae0 <_tzset_unlocked_r+0x1e0>)
 800ea9e:	4914      	ldr	r1, [pc, #80]	; (800eaf0 <_tzset_unlocked_r+0x1f0>)
 800eaa0:	ab0a      	add	r3, sp, #40	; 0x28
 800eaa2:	f002 fc19 	bl	80112d8 <siscanf>
 800eaa6:	2800      	cmp	r0, #0
 800eaa8:	f77f af58 	ble.w	800e95c <_tzset_unlocked_r+0x5c>
 800eaac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eaae:	3b03      	subs	r3, #3
 800eab0:	2b07      	cmp	r3, #7
 800eab2:	d9a0      	bls.n	800e9f6 <_tzset_unlocked_r+0xf6>
 800eab4:	e752      	b.n	800e95c <_tzset_unlocked_r+0x5c>
 800eab6:	2b2b      	cmp	r3, #43	; 0x2b
 800eab8:	f04f 0901 	mov.w	r9, #1
 800eabc:	bf08      	it	eq
 800eabe:	3501      	addeq	r5, #1
 800eac0:	e7a1      	b.n	800ea06 <_tzset_unlocked_r+0x106>
 800eac2:	bf00      	nop
 800eac4:	0801225c 	.word	0x0801225c
 800eac8:	20005b7c 	.word	0x20005b7c
 800eacc:	20005b84 	.word	0x20005b84
 800ead0:	0801225f 	.word	0x0801225f
 800ead4:	20005b80 	.word	0x20005b80
 800ead8:	20000110 	.word	0x20000110
 800eadc:	080122ed 	.word	0x080122ed
 800eae0:	20005b70 	.word	0x20005b70
 800eae4:	08012263 	.word	0x08012263
 800eae8:	08012298 	.word	0x08012298
 800eaec:	20005b64 	.word	0x20005b64
 800eaf0:	08012276 	.word	0x08012276
 800eaf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eaf6:	1eda      	subs	r2, r3, #3
 800eaf8:	2a07      	cmp	r2, #7
 800eafa:	f63f af2f 	bhi.w	800e95c <_tzset_unlocked_r+0x5c>
 800eafe:	5ceb      	ldrb	r3, [r5, r3]
 800eb00:	2b3e      	cmp	r3, #62	; 0x3e
 800eb02:	f47f af2b 	bne.w	800e95c <_tzset_unlocked_r+0x5c>
 800eb06:	f109 0902 	add.w	r9, r9, #2
 800eb0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb0c:	eb09 0503 	add.w	r5, r9, r3
 800eb10:	f819 3003 	ldrb.w	r3, [r9, r3]
 800eb14:	2b2d      	cmp	r3, #45	; 0x2d
 800eb16:	f040 8097 	bne.w	800ec48 <_tzset_unlocked_r+0x348>
 800eb1a:	f04f 39ff 	mov.w	r9, #4294967295
 800eb1e:	3501      	adds	r5, #1
 800eb20:	2300      	movs	r3, #0
 800eb22:	f8ad 301c 	strh.w	r3, [sp, #28]
 800eb26:	f8ad 301e 	strh.w	r3, [sp, #30]
 800eb2a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800eb2e:	930a      	str	r3, [sp, #40]	; 0x28
 800eb30:	ab0a      	add	r3, sp, #40	; 0x28
 800eb32:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800eb36:	9301      	str	r3, [sp, #4]
 800eb38:	f10d 031e 	add.w	r3, sp, #30
 800eb3c:	9300      	str	r3, [sp, #0]
 800eb3e:	4628      	mov	r0, r5
 800eb40:	4979      	ldr	r1, [pc, #484]	; (800ed28 <_tzset_unlocked_r+0x428>)
 800eb42:	ab0a      	add	r3, sp, #40	; 0x28
 800eb44:	aa07      	add	r2, sp, #28
 800eb46:	f002 fbc7 	bl	80112d8 <siscanf>
 800eb4a:	2800      	cmp	r0, #0
 800eb4c:	f300 8082 	bgt.w	800ec54 <_tzset_unlocked_r+0x354>
 800eb50:	f5a6 6361 	sub.w	r3, r6, #3600	; 0xe10
 800eb54:	4627      	mov	r7, r4
 800eb56:	f04f 0b00 	mov.w	fp, #0
 800eb5a:	9304      	str	r3, [sp, #16]
 800eb5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb5e:	441d      	add	r5, r3
 800eb60:	782b      	ldrb	r3, [r5, #0]
 800eb62:	2b2c      	cmp	r3, #44	; 0x2c
 800eb64:	bf08      	it	eq
 800eb66:	3501      	addeq	r5, #1
 800eb68:	f895 9000 	ldrb.w	r9, [r5]
 800eb6c:	f1b9 0f4d 	cmp.w	r9, #77	; 0x4d
 800eb70:	f040 8083 	bne.w	800ec7a <_tzset_unlocked_r+0x37a>
 800eb74:	ab0a      	add	r3, sp, #40	; 0x28
 800eb76:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800eb7a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800eb7e:	aa09      	add	r2, sp, #36	; 0x24
 800eb80:	9200      	str	r2, [sp, #0]
 800eb82:	4628      	mov	r0, r5
 800eb84:	4969      	ldr	r1, [pc, #420]	; (800ed2c <_tzset_unlocked_r+0x42c>)
 800eb86:	9303      	str	r3, [sp, #12]
 800eb88:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800eb8c:	f002 fba4 	bl	80112d8 <siscanf>
 800eb90:	2803      	cmp	r0, #3
 800eb92:	f47f aee3 	bne.w	800e95c <_tzset_unlocked_r+0x5c>
 800eb96:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800eb9a:	1e4b      	subs	r3, r1, #1
 800eb9c:	2b0b      	cmp	r3, #11
 800eb9e:	f63f aedd 	bhi.w	800e95c <_tzset_unlocked_r+0x5c>
 800eba2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800eba6:	1e53      	subs	r3, r2, #1
 800eba8:	2b04      	cmp	r3, #4
 800ebaa:	f63f aed7 	bhi.w	800e95c <_tzset_unlocked_r+0x5c>
 800ebae:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800ebb2:	2b06      	cmp	r3, #6
 800ebb4:	f63f aed2 	bhi.w	800e95c <_tzset_unlocked_r+0x5c>
 800ebb8:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800ebbc:	f887 9008 	strb.w	r9, [r7, #8]
 800ebc0:	617b      	str	r3, [r7, #20]
 800ebc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebc4:	eb05 0903 	add.w	r9, r5, r3
 800ebc8:	2500      	movs	r5, #0
 800ebca:	2302      	movs	r3, #2
 800ebcc:	f8ad 501e 	strh.w	r5, [sp, #30]
 800ebd0:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ebd4:	f8ad 5020 	strh.w	r5, [sp, #32]
 800ebd8:	950a      	str	r5, [sp, #40]	; 0x28
 800ebda:	f899 3000 	ldrb.w	r3, [r9]
 800ebde:	2b2f      	cmp	r3, #47	; 0x2f
 800ebe0:	d177      	bne.n	800ecd2 <_tzset_unlocked_r+0x3d2>
 800ebe2:	ab0a      	add	r3, sp, #40	; 0x28
 800ebe4:	aa08      	add	r2, sp, #32
 800ebe6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ebea:	f10d 021e 	add.w	r2, sp, #30
 800ebee:	9200      	str	r2, [sp, #0]
 800ebf0:	4648      	mov	r0, r9
 800ebf2:	494f      	ldr	r1, [pc, #316]	; (800ed30 <_tzset_unlocked_r+0x430>)
 800ebf4:	9303      	str	r3, [sp, #12]
 800ebf6:	aa07      	add	r2, sp, #28
 800ebf8:	f002 fb6e 	bl	80112d8 <siscanf>
 800ebfc:	42a8      	cmp	r0, r5
 800ebfe:	dc68      	bgt.n	800ecd2 <_tzset_unlocked_r+0x3d2>
 800ec00:	214a      	movs	r1, #74	; 0x4a
 800ec02:	2200      	movs	r2, #0
 800ec04:	2300      	movs	r3, #0
 800ec06:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800ec0a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ec0e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800ec12:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ec16:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
 800ec1a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ec1e:	7221      	strb	r1, [r4, #8]
 800ec20:	62a5      	str	r5, [r4, #40]	; 0x28
 800ec22:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 800ec26:	6525      	str	r5, [r4, #80]	; 0x50
 800ec28:	e698      	b.n	800e95c <_tzset_unlocked_r+0x5c>
 800ec2a:	4648      	mov	r0, r9
 800ec2c:	4a41      	ldr	r2, [pc, #260]	; (800ed34 <_tzset_unlocked_r+0x434>)
 800ec2e:	4942      	ldr	r1, [pc, #264]	; (800ed38 <_tzset_unlocked_r+0x438>)
 800ec30:	ab0a      	add	r3, sp, #40	; 0x28
 800ec32:	f002 fb51 	bl	80112d8 <siscanf>
 800ec36:	2800      	cmp	r0, #0
 800ec38:	f77f af1e 	ble.w	800ea78 <_tzset_unlocked_r+0x178>
 800ec3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec3e:	3b03      	subs	r3, #3
 800ec40:	2b07      	cmp	r3, #7
 800ec42:	f67f af62 	bls.w	800eb0a <_tzset_unlocked_r+0x20a>
 800ec46:	e689      	b.n	800e95c <_tzset_unlocked_r+0x5c>
 800ec48:	2b2b      	cmp	r3, #43	; 0x2b
 800ec4a:	f04f 0901 	mov.w	r9, #1
 800ec4e:	bf08      	it	eq
 800ec50:	3501      	addeq	r5, #1
 800ec52:	e765      	b.n	800eb20 <_tzset_unlocked_r+0x220>
 800ec54:	213c      	movs	r1, #60	; 0x3c
 800ec56:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800ec5a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ec5e:	fb01 3302 	mla	r3, r1, r2, r3
 800ec62:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800ec66:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800ec6a:	fb01 3302 	mla	r3, r1, r2, r3
 800ec6e:	fb09 f303 	mul.w	r3, r9, r3
 800ec72:	e76f      	b.n	800eb54 <_tzset_unlocked_r+0x254>
 800ec74:	f04f 0b01 	mov.w	fp, #1
 800ec78:	e772      	b.n	800eb60 <_tzset_unlocked_r+0x260>
 800ec7a:	f1b9 0f4a 	cmp.w	r9, #74	; 0x4a
 800ec7e:	bf0a      	itet	eq
 800ec80:	464b      	moveq	r3, r9
 800ec82:	2344      	movne	r3, #68	; 0x44
 800ec84:	3501      	addeq	r5, #1
 800ec86:	220a      	movs	r2, #10
 800ec88:	4628      	mov	r0, r5
 800ec8a:	a90b      	add	r1, sp, #44	; 0x2c
 800ec8c:	9305      	str	r3, [sp, #20]
 800ec8e:	f002 f90f 	bl	8010eb0 <strtoul>
 800ec92:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800ec96:	9b05      	ldr	r3, [sp, #20]
 800ec98:	45a9      	cmp	r9, r5
 800ec9a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800ec9e:	d114      	bne.n	800ecca <_tzset_unlocked_r+0x3ca>
 800eca0:	234d      	movs	r3, #77	; 0x4d
 800eca2:	f1bb 0f00 	cmp.w	fp, #0
 800eca6:	d107      	bne.n	800ecb8 <_tzset_unlocked_r+0x3b8>
 800eca8:	2103      	movs	r1, #3
 800ecaa:	7223      	strb	r3, [r4, #8]
 800ecac:	2302      	movs	r3, #2
 800ecae:	f8c4 b014 	str.w	fp, [r4, #20]
 800ecb2:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800ecb6:	e787      	b.n	800ebc8 <_tzset_unlocked_r+0x2c8>
 800ecb8:	220b      	movs	r2, #11
 800ecba:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800ecbe:	2301      	movs	r3, #1
 800ecc0:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	63e3      	str	r3, [r4, #60]	; 0x3c
 800ecc8:	e77e      	b.n	800ebc8 <_tzset_unlocked_r+0x2c8>
 800ecca:	b280      	uxth	r0, r0
 800eccc:	723b      	strb	r3, [r7, #8]
 800ecce:	6178      	str	r0, [r7, #20]
 800ecd0:	e77a      	b.n	800ebc8 <_tzset_unlocked_r+0x2c8>
 800ecd2:	213c      	movs	r1, #60	; 0x3c
 800ecd4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800ecd8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ecdc:	3728      	adds	r7, #40	; 0x28
 800ecde:	fb01 3302 	mla	r3, r1, r2, r3
 800ece2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800ece6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800ecea:	fb01 3302 	mla	r3, r1, r2, r3
 800ecee:	f847 3c10 	str.w	r3, [r7, #-16]
 800ecf2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ecf4:	444d      	add	r5, r9
 800ecf6:	f1bb 0f00 	cmp.w	fp, #0
 800ecfa:	d0bb      	beq.n	800ec74 <_tzset_unlocked_r+0x374>
 800ecfc:	9b04      	ldr	r3, [sp, #16]
 800ecfe:	6860      	ldr	r0, [r4, #4]
 800ed00:	6523      	str	r3, [r4, #80]	; 0x50
 800ed02:	4b0e      	ldr	r3, [pc, #56]	; (800ed3c <_tzset_unlocked_r+0x43c>)
 800ed04:	62a6      	str	r6, [r4, #40]	; 0x28
 800ed06:	f8c8 3000 	str.w	r3, [r8]
 800ed0a:	4b0a      	ldr	r3, [pc, #40]	; (800ed34 <_tzset_unlocked_r+0x434>)
 800ed0c:	f8c8 3004 	str.w	r3, [r8, #4]
 800ed10:	f7ff fd3e 	bl	800e790 <__tzcalc_limits>
 800ed14:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800ed16:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ed18:	f8ca 2000 	str.w	r2, [sl]
 800ed1c:	1a9b      	subs	r3, r3, r2
 800ed1e:	bf18      	it	ne
 800ed20:	2301      	movne	r3, #1
 800ed22:	4a07      	ldr	r2, [pc, #28]	; (800ed40 <_tzset_unlocked_r+0x440>)
 800ed24:	6013      	str	r3, [r2, #0]
 800ed26:	e619      	b.n	800e95c <_tzset_unlocked_r+0x5c>
 800ed28:	08012298 	.word	0x08012298
 800ed2c:	08012284 	.word	0x08012284
 800ed30:	08012297 	.word	0x08012297
 800ed34:	20005b64 	.word	0x20005b64
 800ed38:	08012276 	.word	0x08012276
 800ed3c:	20005b70 	.word	0x20005b70
 800ed40:	20005b80 	.word	0x20005b80

0800ed44 <_localeconv_r>:
 800ed44:	4800      	ldr	r0, [pc, #0]	; (800ed48 <_localeconv_r+0x4>)
 800ed46:	4770      	bx	lr
 800ed48:	20000208 	.word	0x20000208

0800ed4c <_close_r>:
 800ed4c:	b538      	push	{r3, r4, r5, lr}
 800ed4e:	2300      	movs	r3, #0
 800ed50:	4d05      	ldr	r5, [pc, #20]	; (800ed68 <_close_r+0x1c>)
 800ed52:	4604      	mov	r4, r0
 800ed54:	4608      	mov	r0, r1
 800ed56:	602b      	str	r3, [r5, #0]
 800ed58:	f7f5 fb0f 	bl	800437a <_close>
 800ed5c:	1c43      	adds	r3, r0, #1
 800ed5e:	d102      	bne.n	800ed66 <_close_r+0x1a>
 800ed60:	682b      	ldr	r3, [r5, #0]
 800ed62:	b103      	cbz	r3, 800ed66 <_close_r+0x1a>
 800ed64:	6023      	str	r3, [r4, #0]
 800ed66:	bd38      	pop	{r3, r4, r5, pc}
 800ed68:	20005b88 	.word	0x20005b88

0800ed6c <_reclaim_reent>:
 800ed6c:	4b29      	ldr	r3, [pc, #164]	; (800ee14 <_reclaim_reent+0xa8>)
 800ed6e:	b570      	push	{r4, r5, r6, lr}
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	4604      	mov	r4, r0
 800ed74:	4283      	cmp	r3, r0
 800ed76:	d04b      	beq.n	800ee10 <_reclaim_reent+0xa4>
 800ed78:	69c3      	ldr	r3, [r0, #28]
 800ed7a:	b143      	cbz	r3, 800ed8e <_reclaim_reent+0x22>
 800ed7c:	68db      	ldr	r3, [r3, #12]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d144      	bne.n	800ee0c <_reclaim_reent+0xa0>
 800ed82:	69e3      	ldr	r3, [r4, #28]
 800ed84:	6819      	ldr	r1, [r3, #0]
 800ed86:	b111      	cbz	r1, 800ed8e <_reclaim_reent+0x22>
 800ed88:	4620      	mov	r0, r4
 800ed8a:	f000 ff89 	bl	800fca0 <_free_r>
 800ed8e:	6961      	ldr	r1, [r4, #20]
 800ed90:	b111      	cbz	r1, 800ed98 <_reclaim_reent+0x2c>
 800ed92:	4620      	mov	r0, r4
 800ed94:	f000 ff84 	bl	800fca0 <_free_r>
 800ed98:	69e1      	ldr	r1, [r4, #28]
 800ed9a:	b111      	cbz	r1, 800eda2 <_reclaim_reent+0x36>
 800ed9c:	4620      	mov	r0, r4
 800ed9e:	f000 ff7f 	bl	800fca0 <_free_r>
 800eda2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800eda4:	b111      	cbz	r1, 800edac <_reclaim_reent+0x40>
 800eda6:	4620      	mov	r0, r4
 800eda8:	f000 ff7a 	bl	800fca0 <_free_r>
 800edac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800edae:	b111      	cbz	r1, 800edb6 <_reclaim_reent+0x4a>
 800edb0:	4620      	mov	r0, r4
 800edb2:	f000 ff75 	bl	800fca0 <_free_r>
 800edb6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800edb8:	b111      	cbz	r1, 800edc0 <_reclaim_reent+0x54>
 800edba:	4620      	mov	r0, r4
 800edbc:	f000 ff70 	bl	800fca0 <_free_r>
 800edc0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800edc2:	b111      	cbz	r1, 800edca <_reclaim_reent+0x5e>
 800edc4:	4620      	mov	r0, r4
 800edc6:	f000 ff6b 	bl	800fca0 <_free_r>
 800edca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800edcc:	b111      	cbz	r1, 800edd4 <_reclaim_reent+0x68>
 800edce:	4620      	mov	r0, r4
 800edd0:	f000 ff66 	bl	800fca0 <_free_r>
 800edd4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800edd6:	b111      	cbz	r1, 800edde <_reclaim_reent+0x72>
 800edd8:	4620      	mov	r0, r4
 800edda:	f000 ff61 	bl	800fca0 <_free_r>
 800edde:	6a23      	ldr	r3, [r4, #32]
 800ede0:	b1b3      	cbz	r3, 800ee10 <_reclaim_reent+0xa4>
 800ede2:	4620      	mov	r0, r4
 800ede4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ede8:	4718      	bx	r3
 800edea:	5949      	ldr	r1, [r1, r5]
 800edec:	b941      	cbnz	r1, 800ee00 <_reclaim_reent+0x94>
 800edee:	3504      	adds	r5, #4
 800edf0:	69e3      	ldr	r3, [r4, #28]
 800edf2:	2d80      	cmp	r5, #128	; 0x80
 800edf4:	68d9      	ldr	r1, [r3, #12]
 800edf6:	d1f8      	bne.n	800edea <_reclaim_reent+0x7e>
 800edf8:	4620      	mov	r0, r4
 800edfa:	f000 ff51 	bl	800fca0 <_free_r>
 800edfe:	e7c0      	b.n	800ed82 <_reclaim_reent+0x16>
 800ee00:	680e      	ldr	r6, [r1, #0]
 800ee02:	4620      	mov	r0, r4
 800ee04:	f000 ff4c 	bl	800fca0 <_free_r>
 800ee08:	4631      	mov	r1, r6
 800ee0a:	e7ef      	b.n	800edec <_reclaim_reent+0x80>
 800ee0c:	2500      	movs	r5, #0
 800ee0e:	e7ef      	b.n	800edf0 <_reclaim_reent+0x84>
 800ee10:	bd70      	pop	{r4, r5, r6, pc}
 800ee12:	bf00      	nop
 800ee14:	200002d0 	.word	0x200002d0

0800ee18 <_lseek_r>:
 800ee18:	b538      	push	{r3, r4, r5, lr}
 800ee1a:	4604      	mov	r4, r0
 800ee1c:	4608      	mov	r0, r1
 800ee1e:	4611      	mov	r1, r2
 800ee20:	2200      	movs	r2, #0
 800ee22:	4d05      	ldr	r5, [pc, #20]	; (800ee38 <_lseek_r+0x20>)
 800ee24:	602a      	str	r2, [r5, #0]
 800ee26:	461a      	mov	r2, r3
 800ee28:	f7f5 facb 	bl	80043c2 <_lseek>
 800ee2c:	1c43      	adds	r3, r0, #1
 800ee2e:	d102      	bne.n	800ee36 <_lseek_r+0x1e>
 800ee30:	682b      	ldr	r3, [r5, #0]
 800ee32:	b103      	cbz	r3, 800ee36 <_lseek_r+0x1e>
 800ee34:	6023      	str	r3, [r4, #0]
 800ee36:	bd38      	pop	{r3, r4, r5, pc}
 800ee38:	20005b88 	.word	0x20005b88

0800ee3c <_read_r>:
 800ee3c:	b538      	push	{r3, r4, r5, lr}
 800ee3e:	4604      	mov	r4, r0
 800ee40:	4608      	mov	r0, r1
 800ee42:	4611      	mov	r1, r2
 800ee44:	2200      	movs	r2, #0
 800ee46:	4d05      	ldr	r5, [pc, #20]	; (800ee5c <_read_r+0x20>)
 800ee48:	602a      	str	r2, [r5, #0]
 800ee4a:	461a      	mov	r2, r3
 800ee4c:	f7f2 fb81 	bl	8001552 <_read>
 800ee50:	1c43      	adds	r3, r0, #1
 800ee52:	d102      	bne.n	800ee5a <_read_r+0x1e>
 800ee54:	682b      	ldr	r3, [r5, #0]
 800ee56:	b103      	cbz	r3, 800ee5a <_read_r+0x1e>
 800ee58:	6023      	str	r3, [r4, #0]
 800ee5a:	bd38      	pop	{r3, r4, r5, pc}
 800ee5c:	20005b88 	.word	0x20005b88

0800ee60 <_sbrk_r>:
 800ee60:	b538      	push	{r3, r4, r5, lr}
 800ee62:	2300      	movs	r3, #0
 800ee64:	4d05      	ldr	r5, [pc, #20]	; (800ee7c <_sbrk_r+0x1c>)
 800ee66:	4604      	mov	r4, r0
 800ee68:	4608      	mov	r0, r1
 800ee6a:	602b      	str	r3, [r5, #0]
 800ee6c:	f7f5 fab6 	bl	80043dc <_sbrk>
 800ee70:	1c43      	adds	r3, r0, #1
 800ee72:	d102      	bne.n	800ee7a <_sbrk_r+0x1a>
 800ee74:	682b      	ldr	r3, [r5, #0]
 800ee76:	b103      	cbz	r3, 800ee7a <_sbrk_r+0x1a>
 800ee78:	6023      	str	r3, [r4, #0]
 800ee7a:	bd38      	pop	{r3, r4, r5, pc}
 800ee7c:	20005b88 	.word	0x20005b88

0800ee80 <_write_r>:
 800ee80:	b538      	push	{r3, r4, r5, lr}
 800ee82:	4604      	mov	r4, r0
 800ee84:	4608      	mov	r0, r1
 800ee86:	4611      	mov	r1, r2
 800ee88:	2200      	movs	r2, #0
 800ee8a:	4d05      	ldr	r5, [pc, #20]	; (800eea0 <_write_r+0x20>)
 800ee8c:	602a      	str	r2, [r5, #0]
 800ee8e:	461a      	mov	r2, r3
 800ee90:	f7f2 fb7c 	bl	800158c <_write>
 800ee94:	1c43      	adds	r3, r0, #1
 800ee96:	d102      	bne.n	800ee9e <_write_r+0x1e>
 800ee98:	682b      	ldr	r3, [r5, #0]
 800ee9a:	b103      	cbz	r3, 800ee9e <_write_r+0x1e>
 800ee9c:	6023      	str	r3, [r4, #0]
 800ee9e:	bd38      	pop	{r3, r4, r5, pc}
 800eea0:	20005b88 	.word	0x20005b88

0800eea4 <__errno>:
 800eea4:	4b01      	ldr	r3, [pc, #4]	; (800eeac <__errno+0x8>)
 800eea6:	6818      	ldr	r0, [r3, #0]
 800eea8:	4770      	bx	lr
 800eeaa:	bf00      	nop
 800eeac:	200002d0 	.word	0x200002d0

0800eeb0 <__libc_init_array>:
 800eeb0:	b570      	push	{r4, r5, r6, lr}
 800eeb2:	2600      	movs	r6, #0
 800eeb4:	4d0c      	ldr	r5, [pc, #48]	; (800eee8 <__libc_init_array+0x38>)
 800eeb6:	4c0d      	ldr	r4, [pc, #52]	; (800eeec <__libc_init_array+0x3c>)
 800eeb8:	1b64      	subs	r4, r4, r5
 800eeba:	10a4      	asrs	r4, r4, #2
 800eebc:	42a6      	cmp	r6, r4
 800eebe:	d109      	bne.n	800eed4 <__libc_init_array+0x24>
 800eec0:	f002 ff84 	bl	8011dcc <_init>
 800eec4:	2600      	movs	r6, #0
 800eec6:	4d0a      	ldr	r5, [pc, #40]	; (800eef0 <__libc_init_array+0x40>)
 800eec8:	4c0a      	ldr	r4, [pc, #40]	; (800eef4 <__libc_init_array+0x44>)
 800eeca:	1b64      	subs	r4, r4, r5
 800eecc:	10a4      	asrs	r4, r4, #2
 800eece:	42a6      	cmp	r6, r4
 800eed0:	d105      	bne.n	800eede <__libc_init_array+0x2e>
 800eed2:	bd70      	pop	{r4, r5, r6, pc}
 800eed4:	f855 3b04 	ldr.w	r3, [r5], #4
 800eed8:	4798      	blx	r3
 800eeda:	3601      	adds	r6, #1
 800eedc:	e7ee      	b.n	800eebc <__libc_init_array+0xc>
 800eede:	f855 3b04 	ldr.w	r3, [r5], #4
 800eee2:	4798      	blx	r3
 800eee4:	3601      	adds	r6, #1
 800eee6:	e7f2      	b.n	800eece <__libc_init_array+0x1e>
 800eee8:	080125ac 	.word	0x080125ac
 800eeec:	080125ac 	.word	0x080125ac
 800eef0:	080125ac 	.word	0x080125ac
 800eef4:	080125b0 	.word	0x080125b0

0800eef8 <__retarget_lock_init_recursive>:
 800eef8:	4770      	bx	lr

0800eefa <__retarget_lock_acquire>:
 800eefa:	4770      	bx	lr

0800eefc <__retarget_lock_acquire_recursive>:
 800eefc:	4770      	bx	lr

0800eefe <__retarget_lock_release>:
 800eefe:	4770      	bx	lr

0800ef00 <__retarget_lock_release_recursive>:
 800ef00:	4770      	bx	lr

0800ef02 <strcpy>:
 800ef02:	4603      	mov	r3, r0
 800ef04:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef08:	f803 2b01 	strb.w	r2, [r3], #1
 800ef0c:	2a00      	cmp	r2, #0
 800ef0e:	d1f9      	bne.n	800ef04 <strcpy+0x2>
 800ef10:	4770      	bx	lr

0800ef12 <memchr>:
 800ef12:	4603      	mov	r3, r0
 800ef14:	b510      	push	{r4, lr}
 800ef16:	b2c9      	uxtb	r1, r1
 800ef18:	4402      	add	r2, r0
 800ef1a:	4293      	cmp	r3, r2
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	d101      	bne.n	800ef24 <memchr+0x12>
 800ef20:	2000      	movs	r0, #0
 800ef22:	e003      	b.n	800ef2c <memchr+0x1a>
 800ef24:	7804      	ldrb	r4, [r0, #0]
 800ef26:	3301      	adds	r3, #1
 800ef28:	428c      	cmp	r4, r1
 800ef2a:	d1f6      	bne.n	800ef1a <memchr+0x8>
 800ef2c:	bd10      	pop	{r4, pc}

0800ef2e <memcpy>:
 800ef2e:	440a      	add	r2, r1
 800ef30:	4291      	cmp	r1, r2
 800ef32:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef36:	d100      	bne.n	800ef3a <memcpy+0xc>
 800ef38:	4770      	bx	lr
 800ef3a:	b510      	push	{r4, lr}
 800ef3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef40:	4291      	cmp	r1, r2
 800ef42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef46:	d1f9      	bne.n	800ef3c <memcpy+0xe>
 800ef48:	bd10      	pop	{r4, pc}
	...

0800ef4c <nan>:
 800ef4c:	2000      	movs	r0, #0
 800ef4e:	4901      	ldr	r1, [pc, #4]	; (800ef54 <nan+0x8>)
 800ef50:	4770      	bx	lr
 800ef52:	bf00      	nop
 800ef54:	7ff80000 	.word	0x7ff80000

0800ef58 <nanf>:
 800ef58:	4800      	ldr	r0, [pc, #0]	; (800ef5c <nanf+0x4>)
 800ef5a:	4770      	bx	lr
 800ef5c:	7fc00000 	.word	0x7fc00000

0800ef60 <__assert_func>:
 800ef60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ef62:	4614      	mov	r4, r2
 800ef64:	461a      	mov	r2, r3
 800ef66:	4b09      	ldr	r3, [pc, #36]	; (800ef8c <__assert_func+0x2c>)
 800ef68:	4605      	mov	r5, r0
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	68d8      	ldr	r0, [r3, #12]
 800ef6e:	b14c      	cbz	r4, 800ef84 <__assert_func+0x24>
 800ef70:	4b07      	ldr	r3, [pc, #28]	; (800ef90 <__assert_func+0x30>)
 800ef72:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ef76:	9100      	str	r1, [sp, #0]
 800ef78:	462b      	mov	r3, r5
 800ef7a:	4906      	ldr	r1, [pc, #24]	; (800ef94 <__assert_func+0x34>)
 800ef7c:	f002 f99a 	bl	80112b4 <fiprintf>
 800ef80:	f002 fa6e 	bl	8011460 <abort>
 800ef84:	4b04      	ldr	r3, [pc, #16]	; (800ef98 <__assert_func+0x38>)
 800ef86:	461c      	mov	r4, r3
 800ef88:	e7f3      	b.n	800ef72 <__assert_func+0x12>
 800ef8a:	bf00      	nop
 800ef8c:	200002d0 	.word	0x200002d0
 800ef90:	080122b2 	.word	0x080122b2
 800ef94:	080122bf 	.word	0x080122bf
 800ef98:	080122ed 	.word	0x080122ed

0800ef9c <div>:
 800ef9c:	b510      	push	{r4, lr}
 800ef9e:	fb91 f4f2 	sdiv	r4, r1, r2
 800efa2:	2900      	cmp	r1, #0
 800efa4:	fb02 1314 	mls	r3, r2, r4, r1
 800efa8:	db06      	blt.n	800efb8 <div+0x1c>
 800efaa:	2b00      	cmp	r3, #0
 800efac:	da01      	bge.n	800efb2 <div+0x16>
 800efae:	3401      	adds	r4, #1
 800efb0:	1a9b      	subs	r3, r3, r2
 800efb2:	e9c0 4300 	strd	r4, r3, [r0]
 800efb6:	bd10      	pop	{r4, pc}
 800efb8:	2b00      	cmp	r3, #0
 800efba:	bfc4      	itt	gt
 800efbc:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800efc0:	189b      	addgt	r3, r3, r2
 800efc2:	e7f6      	b.n	800efb2 <div+0x16>

0800efc4 <quorem>:
 800efc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efc8:	6903      	ldr	r3, [r0, #16]
 800efca:	690c      	ldr	r4, [r1, #16]
 800efcc:	4607      	mov	r7, r0
 800efce:	42a3      	cmp	r3, r4
 800efd0:	db7f      	blt.n	800f0d2 <quorem+0x10e>
 800efd2:	3c01      	subs	r4, #1
 800efd4:	f100 0514 	add.w	r5, r0, #20
 800efd8:	f101 0814 	add.w	r8, r1, #20
 800efdc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800efe0:	9301      	str	r3, [sp, #4]
 800efe2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800efe6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800efea:	3301      	adds	r3, #1
 800efec:	429a      	cmp	r2, r3
 800efee:	fbb2 f6f3 	udiv	r6, r2, r3
 800eff2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800eff6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800effa:	d331      	bcc.n	800f060 <quorem+0x9c>
 800effc:	f04f 0e00 	mov.w	lr, #0
 800f000:	4640      	mov	r0, r8
 800f002:	46ac      	mov	ip, r5
 800f004:	46f2      	mov	sl, lr
 800f006:	f850 2b04 	ldr.w	r2, [r0], #4
 800f00a:	b293      	uxth	r3, r2
 800f00c:	fb06 e303 	mla	r3, r6, r3, lr
 800f010:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f014:	0c1a      	lsrs	r2, r3, #16
 800f016:	b29b      	uxth	r3, r3
 800f018:	fb06 220e 	mla	r2, r6, lr, r2
 800f01c:	ebaa 0303 	sub.w	r3, sl, r3
 800f020:	f8dc a000 	ldr.w	sl, [ip]
 800f024:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f028:	fa1f fa8a 	uxth.w	sl, sl
 800f02c:	4453      	add	r3, sl
 800f02e:	f8dc a000 	ldr.w	sl, [ip]
 800f032:	b292      	uxth	r2, r2
 800f034:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f038:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f03c:	b29b      	uxth	r3, r3
 800f03e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f042:	4581      	cmp	r9, r0
 800f044:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f048:	f84c 3b04 	str.w	r3, [ip], #4
 800f04c:	d2db      	bcs.n	800f006 <quorem+0x42>
 800f04e:	f855 300b 	ldr.w	r3, [r5, fp]
 800f052:	b92b      	cbnz	r3, 800f060 <quorem+0x9c>
 800f054:	9b01      	ldr	r3, [sp, #4]
 800f056:	3b04      	subs	r3, #4
 800f058:	429d      	cmp	r5, r3
 800f05a:	461a      	mov	r2, r3
 800f05c:	d32d      	bcc.n	800f0ba <quorem+0xf6>
 800f05e:	613c      	str	r4, [r7, #16]
 800f060:	4638      	mov	r0, r7
 800f062:	f001 fcd9 	bl	8010a18 <__mcmp>
 800f066:	2800      	cmp	r0, #0
 800f068:	db23      	blt.n	800f0b2 <quorem+0xee>
 800f06a:	4629      	mov	r1, r5
 800f06c:	2000      	movs	r0, #0
 800f06e:	3601      	adds	r6, #1
 800f070:	f858 2b04 	ldr.w	r2, [r8], #4
 800f074:	f8d1 c000 	ldr.w	ip, [r1]
 800f078:	b293      	uxth	r3, r2
 800f07a:	1ac3      	subs	r3, r0, r3
 800f07c:	0c12      	lsrs	r2, r2, #16
 800f07e:	fa1f f08c 	uxth.w	r0, ip
 800f082:	4403      	add	r3, r0
 800f084:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f088:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f08c:	b29b      	uxth	r3, r3
 800f08e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f092:	45c1      	cmp	r9, r8
 800f094:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f098:	f841 3b04 	str.w	r3, [r1], #4
 800f09c:	d2e8      	bcs.n	800f070 <quorem+0xac>
 800f09e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f0a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f0a6:	b922      	cbnz	r2, 800f0b2 <quorem+0xee>
 800f0a8:	3b04      	subs	r3, #4
 800f0aa:	429d      	cmp	r5, r3
 800f0ac:	461a      	mov	r2, r3
 800f0ae:	d30a      	bcc.n	800f0c6 <quorem+0x102>
 800f0b0:	613c      	str	r4, [r7, #16]
 800f0b2:	4630      	mov	r0, r6
 800f0b4:	b003      	add	sp, #12
 800f0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ba:	6812      	ldr	r2, [r2, #0]
 800f0bc:	3b04      	subs	r3, #4
 800f0be:	2a00      	cmp	r2, #0
 800f0c0:	d1cd      	bne.n	800f05e <quorem+0x9a>
 800f0c2:	3c01      	subs	r4, #1
 800f0c4:	e7c8      	b.n	800f058 <quorem+0x94>
 800f0c6:	6812      	ldr	r2, [r2, #0]
 800f0c8:	3b04      	subs	r3, #4
 800f0ca:	2a00      	cmp	r2, #0
 800f0cc:	d1f0      	bne.n	800f0b0 <quorem+0xec>
 800f0ce:	3c01      	subs	r4, #1
 800f0d0:	e7eb      	b.n	800f0aa <quorem+0xe6>
 800f0d2:	2000      	movs	r0, #0
 800f0d4:	e7ee      	b.n	800f0b4 <quorem+0xf0>
	...

0800f0d8 <_dtoa_r>:
 800f0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0dc:	4616      	mov	r6, r2
 800f0de:	461f      	mov	r7, r3
 800f0e0:	69c4      	ldr	r4, [r0, #28]
 800f0e2:	b099      	sub	sp, #100	; 0x64
 800f0e4:	4605      	mov	r5, r0
 800f0e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800f0ea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800f0ee:	b974      	cbnz	r4, 800f10e <_dtoa_r+0x36>
 800f0f0:	2010      	movs	r0, #16
 800f0f2:	f7fd fb03 	bl	800c6fc <malloc>
 800f0f6:	4602      	mov	r2, r0
 800f0f8:	61e8      	str	r0, [r5, #28]
 800f0fa:	b920      	cbnz	r0, 800f106 <_dtoa_r+0x2e>
 800f0fc:	21ef      	movs	r1, #239	; 0xef
 800f0fe:	4bac      	ldr	r3, [pc, #688]	; (800f3b0 <_dtoa_r+0x2d8>)
 800f100:	48ac      	ldr	r0, [pc, #688]	; (800f3b4 <_dtoa_r+0x2dc>)
 800f102:	f7ff ff2d 	bl	800ef60 <__assert_func>
 800f106:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f10a:	6004      	str	r4, [r0, #0]
 800f10c:	60c4      	str	r4, [r0, #12]
 800f10e:	69eb      	ldr	r3, [r5, #28]
 800f110:	6819      	ldr	r1, [r3, #0]
 800f112:	b151      	cbz	r1, 800f12a <_dtoa_r+0x52>
 800f114:	685a      	ldr	r2, [r3, #4]
 800f116:	2301      	movs	r3, #1
 800f118:	4093      	lsls	r3, r2
 800f11a:	604a      	str	r2, [r1, #4]
 800f11c:	608b      	str	r3, [r1, #8]
 800f11e:	4628      	mov	r0, r5
 800f120:	f001 f9f6 	bl	8010510 <_Bfree>
 800f124:	2200      	movs	r2, #0
 800f126:	69eb      	ldr	r3, [r5, #28]
 800f128:	601a      	str	r2, [r3, #0]
 800f12a:	1e3b      	subs	r3, r7, #0
 800f12c:	bfaf      	iteee	ge
 800f12e:	2300      	movge	r3, #0
 800f130:	2201      	movlt	r2, #1
 800f132:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f136:	9305      	strlt	r3, [sp, #20]
 800f138:	bfa8      	it	ge
 800f13a:	f8c8 3000 	strge.w	r3, [r8]
 800f13e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800f142:	4b9d      	ldr	r3, [pc, #628]	; (800f3b8 <_dtoa_r+0x2e0>)
 800f144:	bfb8      	it	lt
 800f146:	f8c8 2000 	strlt.w	r2, [r8]
 800f14a:	ea33 0309 	bics.w	r3, r3, r9
 800f14e:	d119      	bne.n	800f184 <_dtoa_r+0xac>
 800f150:	f242 730f 	movw	r3, #9999	; 0x270f
 800f154:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f156:	6013      	str	r3, [r2, #0]
 800f158:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f15c:	4333      	orrs	r3, r6
 800f15e:	f000 8589 	beq.w	800fc74 <_dtoa_r+0xb9c>
 800f162:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f164:	b953      	cbnz	r3, 800f17c <_dtoa_r+0xa4>
 800f166:	4b95      	ldr	r3, [pc, #596]	; (800f3bc <_dtoa_r+0x2e4>)
 800f168:	e023      	b.n	800f1b2 <_dtoa_r+0xda>
 800f16a:	4b95      	ldr	r3, [pc, #596]	; (800f3c0 <_dtoa_r+0x2e8>)
 800f16c:	9303      	str	r3, [sp, #12]
 800f16e:	3308      	adds	r3, #8
 800f170:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f172:	6013      	str	r3, [r2, #0]
 800f174:	9803      	ldr	r0, [sp, #12]
 800f176:	b019      	add	sp, #100	; 0x64
 800f178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f17c:	4b8f      	ldr	r3, [pc, #572]	; (800f3bc <_dtoa_r+0x2e4>)
 800f17e:	9303      	str	r3, [sp, #12]
 800f180:	3303      	adds	r3, #3
 800f182:	e7f5      	b.n	800f170 <_dtoa_r+0x98>
 800f184:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800f188:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800f18c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f190:	2200      	movs	r2, #0
 800f192:	2300      	movs	r3, #0
 800f194:	f7f1 fc82 	bl	8000a9c <__aeabi_dcmpeq>
 800f198:	4680      	mov	r8, r0
 800f19a:	b160      	cbz	r0, 800f1b6 <_dtoa_r+0xde>
 800f19c:	2301      	movs	r3, #1
 800f19e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f1a0:	6013      	str	r3, [r2, #0]
 800f1a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	f000 8562 	beq.w	800fc6e <_dtoa_r+0xb96>
 800f1aa:	4b86      	ldr	r3, [pc, #536]	; (800f3c4 <_dtoa_r+0x2ec>)
 800f1ac:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f1ae:	6013      	str	r3, [r2, #0]
 800f1b0:	3b01      	subs	r3, #1
 800f1b2:	9303      	str	r3, [sp, #12]
 800f1b4:	e7de      	b.n	800f174 <_dtoa_r+0x9c>
 800f1b6:	ab16      	add	r3, sp, #88	; 0x58
 800f1b8:	9301      	str	r3, [sp, #4]
 800f1ba:	ab17      	add	r3, sp, #92	; 0x5c
 800f1bc:	9300      	str	r3, [sp, #0]
 800f1be:	4628      	mov	r0, r5
 800f1c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f1c4:	f001 fd38 	bl	8010c38 <__d2b>
 800f1c8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f1cc:	4682      	mov	sl, r0
 800f1ce:	2c00      	cmp	r4, #0
 800f1d0:	d07e      	beq.n	800f2d0 <_dtoa_r+0x1f8>
 800f1d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f1d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f1d8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800f1dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f1e0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f1e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f1e8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800f1ec:	4619      	mov	r1, r3
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	4b75      	ldr	r3, [pc, #468]	; (800f3c8 <_dtoa_r+0x2f0>)
 800f1f2:	f7f1 f833 	bl	800025c <__aeabi_dsub>
 800f1f6:	a368      	add	r3, pc, #416	; (adr r3, 800f398 <_dtoa_r+0x2c0>)
 800f1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1fc:	f7f1 f9e6 	bl	80005cc <__aeabi_dmul>
 800f200:	a367      	add	r3, pc, #412	; (adr r3, 800f3a0 <_dtoa_r+0x2c8>)
 800f202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f206:	f7f1 f82b 	bl	8000260 <__adddf3>
 800f20a:	4606      	mov	r6, r0
 800f20c:	4620      	mov	r0, r4
 800f20e:	460f      	mov	r7, r1
 800f210:	f7f1 f972 	bl	80004f8 <__aeabi_i2d>
 800f214:	a364      	add	r3, pc, #400	; (adr r3, 800f3a8 <_dtoa_r+0x2d0>)
 800f216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f21a:	f7f1 f9d7 	bl	80005cc <__aeabi_dmul>
 800f21e:	4602      	mov	r2, r0
 800f220:	460b      	mov	r3, r1
 800f222:	4630      	mov	r0, r6
 800f224:	4639      	mov	r1, r7
 800f226:	f7f1 f81b 	bl	8000260 <__adddf3>
 800f22a:	4606      	mov	r6, r0
 800f22c:	460f      	mov	r7, r1
 800f22e:	f7f1 fc7d 	bl	8000b2c <__aeabi_d2iz>
 800f232:	2200      	movs	r2, #0
 800f234:	4683      	mov	fp, r0
 800f236:	2300      	movs	r3, #0
 800f238:	4630      	mov	r0, r6
 800f23a:	4639      	mov	r1, r7
 800f23c:	f7f1 fc38 	bl	8000ab0 <__aeabi_dcmplt>
 800f240:	b148      	cbz	r0, 800f256 <_dtoa_r+0x17e>
 800f242:	4658      	mov	r0, fp
 800f244:	f7f1 f958 	bl	80004f8 <__aeabi_i2d>
 800f248:	4632      	mov	r2, r6
 800f24a:	463b      	mov	r3, r7
 800f24c:	f7f1 fc26 	bl	8000a9c <__aeabi_dcmpeq>
 800f250:	b908      	cbnz	r0, 800f256 <_dtoa_r+0x17e>
 800f252:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f256:	f1bb 0f16 	cmp.w	fp, #22
 800f25a:	d857      	bhi.n	800f30c <_dtoa_r+0x234>
 800f25c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f260:	4b5a      	ldr	r3, [pc, #360]	; (800f3cc <_dtoa_r+0x2f4>)
 800f262:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f26a:	f7f1 fc21 	bl	8000ab0 <__aeabi_dcmplt>
 800f26e:	2800      	cmp	r0, #0
 800f270:	d04e      	beq.n	800f310 <_dtoa_r+0x238>
 800f272:	2300      	movs	r3, #0
 800f274:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f278:	930f      	str	r3, [sp, #60]	; 0x3c
 800f27a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f27c:	1b1b      	subs	r3, r3, r4
 800f27e:	1e5a      	subs	r2, r3, #1
 800f280:	bf46      	itte	mi
 800f282:	f1c3 0901 	rsbmi	r9, r3, #1
 800f286:	2300      	movmi	r3, #0
 800f288:	f04f 0900 	movpl.w	r9, #0
 800f28c:	9209      	str	r2, [sp, #36]	; 0x24
 800f28e:	bf48      	it	mi
 800f290:	9309      	strmi	r3, [sp, #36]	; 0x24
 800f292:	f1bb 0f00 	cmp.w	fp, #0
 800f296:	db3d      	blt.n	800f314 <_dtoa_r+0x23c>
 800f298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f29a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800f29e:	445b      	add	r3, fp
 800f2a0:	9309      	str	r3, [sp, #36]	; 0x24
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	930a      	str	r3, [sp, #40]	; 0x28
 800f2a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f2a8:	2b09      	cmp	r3, #9
 800f2aa:	d867      	bhi.n	800f37c <_dtoa_r+0x2a4>
 800f2ac:	2b05      	cmp	r3, #5
 800f2ae:	bfc4      	itt	gt
 800f2b0:	3b04      	subgt	r3, #4
 800f2b2:	9322      	strgt	r3, [sp, #136]	; 0x88
 800f2b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f2b6:	bfc8      	it	gt
 800f2b8:	2400      	movgt	r4, #0
 800f2ba:	f1a3 0302 	sub.w	r3, r3, #2
 800f2be:	bfd8      	it	le
 800f2c0:	2401      	movle	r4, #1
 800f2c2:	2b03      	cmp	r3, #3
 800f2c4:	f200 8086 	bhi.w	800f3d4 <_dtoa_r+0x2fc>
 800f2c8:	e8df f003 	tbb	[pc, r3]
 800f2cc:	5637392c 	.word	0x5637392c
 800f2d0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800f2d4:	441c      	add	r4, r3
 800f2d6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800f2da:	2b20      	cmp	r3, #32
 800f2dc:	bfc1      	itttt	gt
 800f2de:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f2e2:	fa09 f903 	lslgt.w	r9, r9, r3
 800f2e6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800f2ea:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f2ee:	bfd6      	itet	le
 800f2f0:	f1c3 0320 	rsble	r3, r3, #32
 800f2f4:	ea49 0003 	orrgt.w	r0, r9, r3
 800f2f8:	fa06 f003 	lslle.w	r0, r6, r3
 800f2fc:	f7f1 f8ec 	bl	80004d8 <__aeabi_ui2d>
 800f300:	2201      	movs	r2, #1
 800f302:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f306:	3c01      	subs	r4, #1
 800f308:	9213      	str	r2, [sp, #76]	; 0x4c
 800f30a:	e76f      	b.n	800f1ec <_dtoa_r+0x114>
 800f30c:	2301      	movs	r3, #1
 800f30e:	e7b3      	b.n	800f278 <_dtoa_r+0x1a0>
 800f310:	900f      	str	r0, [sp, #60]	; 0x3c
 800f312:	e7b2      	b.n	800f27a <_dtoa_r+0x1a2>
 800f314:	f1cb 0300 	rsb	r3, fp, #0
 800f318:	930a      	str	r3, [sp, #40]	; 0x28
 800f31a:	2300      	movs	r3, #0
 800f31c:	eba9 090b 	sub.w	r9, r9, fp
 800f320:	930e      	str	r3, [sp, #56]	; 0x38
 800f322:	e7c0      	b.n	800f2a6 <_dtoa_r+0x1ce>
 800f324:	2300      	movs	r3, #0
 800f326:	930b      	str	r3, [sp, #44]	; 0x2c
 800f328:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	dc55      	bgt.n	800f3da <_dtoa_r+0x302>
 800f32e:	2301      	movs	r3, #1
 800f330:	461a      	mov	r2, r3
 800f332:	9306      	str	r3, [sp, #24]
 800f334:	9308      	str	r3, [sp, #32]
 800f336:	9223      	str	r2, [sp, #140]	; 0x8c
 800f338:	e00b      	b.n	800f352 <_dtoa_r+0x27a>
 800f33a:	2301      	movs	r3, #1
 800f33c:	e7f3      	b.n	800f326 <_dtoa_r+0x24e>
 800f33e:	2300      	movs	r3, #0
 800f340:	930b      	str	r3, [sp, #44]	; 0x2c
 800f342:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f344:	445b      	add	r3, fp
 800f346:	9306      	str	r3, [sp, #24]
 800f348:	3301      	adds	r3, #1
 800f34a:	2b01      	cmp	r3, #1
 800f34c:	9308      	str	r3, [sp, #32]
 800f34e:	bfb8      	it	lt
 800f350:	2301      	movlt	r3, #1
 800f352:	2100      	movs	r1, #0
 800f354:	2204      	movs	r2, #4
 800f356:	69e8      	ldr	r0, [r5, #28]
 800f358:	f102 0614 	add.w	r6, r2, #20
 800f35c:	429e      	cmp	r6, r3
 800f35e:	d940      	bls.n	800f3e2 <_dtoa_r+0x30a>
 800f360:	6041      	str	r1, [r0, #4]
 800f362:	4628      	mov	r0, r5
 800f364:	f001 f894 	bl	8010490 <_Balloc>
 800f368:	9003      	str	r0, [sp, #12]
 800f36a:	2800      	cmp	r0, #0
 800f36c:	d13c      	bne.n	800f3e8 <_dtoa_r+0x310>
 800f36e:	4602      	mov	r2, r0
 800f370:	f240 11af 	movw	r1, #431	; 0x1af
 800f374:	4b16      	ldr	r3, [pc, #88]	; (800f3d0 <_dtoa_r+0x2f8>)
 800f376:	e6c3      	b.n	800f100 <_dtoa_r+0x28>
 800f378:	2301      	movs	r3, #1
 800f37a:	e7e1      	b.n	800f340 <_dtoa_r+0x268>
 800f37c:	2401      	movs	r4, #1
 800f37e:	2300      	movs	r3, #0
 800f380:	940b      	str	r4, [sp, #44]	; 0x2c
 800f382:	9322      	str	r3, [sp, #136]	; 0x88
 800f384:	f04f 33ff 	mov.w	r3, #4294967295
 800f388:	2200      	movs	r2, #0
 800f38a:	9306      	str	r3, [sp, #24]
 800f38c:	9308      	str	r3, [sp, #32]
 800f38e:	2312      	movs	r3, #18
 800f390:	e7d1      	b.n	800f336 <_dtoa_r+0x25e>
 800f392:	bf00      	nop
 800f394:	f3af 8000 	nop.w
 800f398:	636f4361 	.word	0x636f4361
 800f39c:	3fd287a7 	.word	0x3fd287a7
 800f3a0:	8b60c8b3 	.word	0x8b60c8b3
 800f3a4:	3fc68a28 	.word	0x3fc68a28
 800f3a8:	509f79fb 	.word	0x509f79fb
 800f3ac:	3fd34413 	.word	0x3fd34413
 800f3b0:	0801218b 	.word	0x0801218b
 800f3b4:	080122fb 	.word	0x080122fb
 800f3b8:	7ff00000 	.word	0x7ff00000
 800f3bc:	080122f7 	.word	0x080122f7
 800f3c0:	080122ee 	.word	0x080122ee
 800f3c4:	080125a7 	.word	0x080125a7
 800f3c8:	3ff80000 	.word	0x3ff80000
 800f3cc:	08012448 	.word	0x08012448
 800f3d0:	08012353 	.word	0x08012353
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800f3d8:	e7d4      	b.n	800f384 <_dtoa_r+0x2ac>
 800f3da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f3dc:	9306      	str	r3, [sp, #24]
 800f3de:	9308      	str	r3, [sp, #32]
 800f3e0:	e7b7      	b.n	800f352 <_dtoa_r+0x27a>
 800f3e2:	3101      	adds	r1, #1
 800f3e4:	0052      	lsls	r2, r2, #1
 800f3e6:	e7b7      	b.n	800f358 <_dtoa_r+0x280>
 800f3e8:	69eb      	ldr	r3, [r5, #28]
 800f3ea:	9a03      	ldr	r2, [sp, #12]
 800f3ec:	601a      	str	r2, [r3, #0]
 800f3ee:	9b08      	ldr	r3, [sp, #32]
 800f3f0:	2b0e      	cmp	r3, #14
 800f3f2:	f200 80a8 	bhi.w	800f546 <_dtoa_r+0x46e>
 800f3f6:	2c00      	cmp	r4, #0
 800f3f8:	f000 80a5 	beq.w	800f546 <_dtoa_r+0x46e>
 800f3fc:	f1bb 0f00 	cmp.w	fp, #0
 800f400:	dd34      	ble.n	800f46c <_dtoa_r+0x394>
 800f402:	4b9a      	ldr	r3, [pc, #616]	; (800f66c <_dtoa_r+0x594>)
 800f404:	f00b 020f 	and.w	r2, fp, #15
 800f408:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f40c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f410:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f414:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800f418:	ea4f 142b 	mov.w	r4, fp, asr #4
 800f41c:	d016      	beq.n	800f44c <_dtoa_r+0x374>
 800f41e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f422:	4b93      	ldr	r3, [pc, #588]	; (800f670 <_dtoa_r+0x598>)
 800f424:	2703      	movs	r7, #3
 800f426:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f42a:	f7f1 f9f9 	bl	8000820 <__aeabi_ddiv>
 800f42e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f432:	f004 040f 	and.w	r4, r4, #15
 800f436:	4e8e      	ldr	r6, [pc, #568]	; (800f670 <_dtoa_r+0x598>)
 800f438:	b954      	cbnz	r4, 800f450 <_dtoa_r+0x378>
 800f43a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f43e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f442:	f7f1 f9ed 	bl	8000820 <__aeabi_ddiv>
 800f446:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f44a:	e029      	b.n	800f4a0 <_dtoa_r+0x3c8>
 800f44c:	2702      	movs	r7, #2
 800f44e:	e7f2      	b.n	800f436 <_dtoa_r+0x35e>
 800f450:	07e1      	lsls	r1, r4, #31
 800f452:	d508      	bpl.n	800f466 <_dtoa_r+0x38e>
 800f454:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f458:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f45c:	f7f1 f8b6 	bl	80005cc <__aeabi_dmul>
 800f460:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f464:	3701      	adds	r7, #1
 800f466:	1064      	asrs	r4, r4, #1
 800f468:	3608      	adds	r6, #8
 800f46a:	e7e5      	b.n	800f438 <_dtoa_r+0x360>
 800f46c:	f000 80a5 	beq.w	800f5ba <_dtoa_r+0x4e2>
 800f470:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f474:	f1cb 0400 	rsb	r4, fp, #0
 800f478:	4b7c      	ldr	r3, [pc, #496]	; (800f66c <_dtoa_r+0x594>)
 800f47a:	f004 020f 	and.w	r2, r4, #15
 800f47e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f486:	f7f1 f8a1 	bl	80005cc <__aeabi_dmul>
 800f48a:	2702      	movs	r7, #2
 800f48c:	2300      	movs	r3, #0
 800f48e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f492:	4e77      	ldr	r6, [pc, #476]	; (800f670 <_dtoa_r+0x598>)
 800f494:	1124      	asrs	r4, r4, #4
 800f496:	2c00      	cmp	r4, #0
 800f498:	f040 8084 	bne.w	800f5a4 <_dtoa_r+0x4cc>
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d1d2      	bne.n	800f446 <_dtoa_r+0x36e>
 800f4a0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800f4a4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800f4a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	f000 8087 	beq.w	800f5be <_dtoa_r+0x4e6>
 800f4b0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	4b6f      	ldr	r3, [pc, #444]	; (800f674 <_dtoa_r+0x59c>)
 800f4b8:	f7f1 fafa 	bl	8000ab0 <__aeabi_dcmplt>
 800f4bc:	2800      	cmp	r0, #0
 800f4be:	d07e      	beq.n	800f5be <_dtoa_r+0x4e6>
 800f4c0:	9b08      	ldr	r3, [sp, #32]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d07b      	beq.n	800f5be <_dtoa_r+0x4e6>
 800f4c6:	9b06      	ldr	r3, [sp, #24]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	dd38      	ble.n	800f53e <_dtoa_r+0x466>
 800f4cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	4b69      	ldr	r3, [pc, #420]	; (800f678 <_dtoa_r+0x5a0>)
 800f4d4:	f7f1 f87a 	bl	80005cc <__aeabi_dmul>
 800f4d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f4dc:	9c06      	ldr	r4, [sp, #24]
 800f4de:	f10b 38ff 	add.w	r8, fp, #4294967295
 800f4e2:	3701      	adds	r7, #1
 800f4e4:	4638      	mov	r0, r7
 800f4e6:	f7f1 f807 	bl	80004f8 <__aeabi_i2d>
 800f4ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f4ee:	f7f1 f86d 	bl	80005cc <__aeabi_dmul>
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	4b61      	ldr	r3, [pc, #388]	; (800f67c <_dtoa_r+0x5a4>)
 800f4f6:	f7f0 feb3 	bl	8000260 <__adddf3>
 800f4fa:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f4fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f502:	9611      	str	r6, [sp, #68]	; 0x44
 800f504:	2c00      	cmp	r4, #0
 800f506:	d15d      	bne.n	800f5c4 <_dtoa_r+0x4ec>
 800f508:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f50c:	2200      	movs	r2, #0
 800f50e:	4b5c      	ldr	r3, [pc, #368]	; (800f680 <_dtoa_r+0x5a8>)
 800f510:	f7f0 fea4 	bl	800025c <__aeabi_dsub>
 800f514:	4602      	mov	r2, r0
 800f516:	460b      	mov	r3, r1
 800f518:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f51c:	4633      	mov	r3, r6
 800f51e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f520:	f7f1 fae4 	bl	8000aec <__aeabi_dcmpgt>
 800f524:	2800      	cmp	r0, #0
 800f526:	f040 8295 	bne.w	800fa54 <_dtoa_r+0x97c>
 800f52a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f52e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f530:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f534:	f7f1 fabc 	bl	8000ab0 <__aeabi_dcmplt>
 800f538:	2800      	cmp	r0, #0
 800f53a:	f040 8289 	bne.w	800fa50 <_dtoa_r+0x978>
 800f53e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800f542:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f546:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f548:	2b00      	cmp	r3, #0
 800f54a:	f2c0 8151 	blt.w	800f7f0 <_dtoa_r+0x718>
 800f54e:	f1bb 0f0e 	cmp.w	fp, #14
 800f552:	f300 814d 	bgt.w	800f7f0 <_dtoa_r+0x718>
 800f556:	4b45      	ldr	r3, [pc, #276]	; (800f66c <_dtoa_r+0x594>)
 800f558:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f55c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f560:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800f564:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f566:	2b00      	cmp	r3, #0
 800f568:	f280 80da 	bge.w	800f720 <_dtoa_r+0x648>
 800f56c:	9b08      	ldr	r3, [sp, #32]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	f300 80d6 	bgt.w	800f720 <_dtoa_r+0x648>
 800f574:	f040 826b 	bne.w	800fa4e <_dtoa_r+0x976>
 800f578:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f57c:	2200      	movs	r2, #0
 800f57e:	4b40      	ldr	r3, [pc, #256]	; (800f680 <_dtoa_r+0x5a8>)
 800f580:	f7f1 f824 	bl	80005cc <__aeabi_dmul>
 800f584:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f588:	f7f1 faa6 	bl	8000ad8 <__aeabi_dcmpge>
 800f58c:	9c08      	ldr	r4, [sp, #32]
 800f58e:	4626      	mov	r6, r4
 800f590:	2800      	cmp	r0, #0
 800f592:	f040 8241 	bne.w	800fa18 <_dtoa_r+0x940>
 800f596:	2331      	movs	r3, #49	; 0x31
 800f598:	9f03      	ldr	r7, [sp, #12]
 800f59a:	f10b 0b01 	add.w	fp, fp, #1
 800f59e:	f807 3b01 	strb.w	r3, [r7], #1
 800f5a2:	e23d      	b.n	800fa20 <_dtoa_r+0x948>
 800f5a4:	07e2      	lsls	r2, r4, #31
 800f5a6:	d505      	bpl.n	800f5b4 <_dtoa_r+0x4dc>
 800f5a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f5ac:	f7f1 f80e 	bl	80005cc <__aeabi_dmul>
 800f5b0:	2301      	movs	r3, #1
 800f5b2:	3701      	adds	r7, #1
 800f5b4:	1064      	asrs	r4, r4, #1
 800f5b6:	3608      	adds	r6, #8
 800f5b8:	e76d      	b.n	800f496 <_dtoa_r+0x3be>
 800f5ba:	2702      	movs	r7, #2
 800f5bc:	e770      	b.n	800f4a0 <_dtoa_r+0x3c8>
 800f5be:	46d8      	mov	r8, fp
 800f5c0:	9c08      	ldr	r4, [sp, #32]
 800f5c2:	e78f      	b.n	800f4e4 <_dtoa_r+0x40c>
 800f5c4:	9903      	ldr	r1, [sp, #12]
 800f5c6:	4b29      	ldr	r3, [pc, #164]	; (800f66c <_dtoa_r+0x594>)
 800f5c8:	4421      	add	r1, r4
 800f5ca:	9112      	str	r1, [sp, #72]	; 0x48
 800f5cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f5ce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f5d2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800f5d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f5da:	2900      	cmp	r1, #0
 800f5dc:	d054      	beq.n	800f688 <_dtoa_r+0x5b0>
 800f5de:	2000      	movs	r0, #0
 800f5e0:	4928      	ldr	r1, [pc, #160]	; (800f684 <_dtoa_r+0x5ac>)
 800f5e2:	f7f1 f91d 	bl	8000820 <__aeabi_ddiv>
 800f5e6:	463b      	mov	r3, r7
 800f5e8:	4632      	mov	r2, r6
 800f5ea:	f7f0 fe37 	bl	800025c <__aeabi_dsub>
 800f5ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f5f2:	9f03      	ldr	r7, [sp, #12]
 800f5f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f5f8:	f7f1 fa98 	bl	8000b2c <__aeabi_d2iz>
 800f5fc:	4604      	mov	r4, r0
 800f5fe:	f7f0 ff7b 	bl	80004f8 <__aeabi_i2d>
 800f602:	4602      	mov	r2, r0
 800f604:	460b      	mov	r3, r1
 800f606:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f60a:	f7f0 fe27 	bl	800025c <__aeabi_dsub>
 800f60e:	4602      	mov	r2, r0
 800f610:	460b      	mov	r3, r1
 800f612:	3430      	adds	r4, #48	; 0x30
 800f614:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f618:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f61c:	f807 4b01 	strb.w	r4, [r7], #1
 800f620:	f7f1 fa46 	bl	8000ab0 <__aeabi_dcmplt>
 800f624:	2800      	cmp	r0, #0
 800f626:	d173      	bne.n	800f710 <_dtoa_r+0x638>
 800f628:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f62c:	2000      	movs	r0, #0
 800f62e:	4911      	ldr	r1, [pc, #68]	; (800f674 <_dtoa_r+0x59c>)
 800f630:	f7f0 fe14 	bl	800025c <__aeabi_dsub>
 800f634:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f638:	f7f1 fa3a 	bl	8000ab0 <__aeabi_dcmplt>
 800f63c:	2800      	cmp	r0, #0
 800f63e:	f040 80b6 	bne.w	800f7ae <_dtoa_r+0x6d6>
 800f642:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f644:	429f      	cmp	r7, r3
 800f646:	f43f af7a 	beq.w	800f53e <_dtoa_r+0x466>
 800f64a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f64e:	2200      	movs	r2, #0
 800f650:	4b09      	ldr	r3, [pc, #36]	; (800f678 <_dtoa_r+0x5a0>)
 800f652:	f7f0 ffbb 	bl	80005cc <__aeabi_dmul>
 800f656:	2200      	movs	r2, #0
 800f658:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f65c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f660:	4b05      	ldr	r3, [pc, #20]	; (800f678 <_dtoa_r+0x5a0>)
 800f662:	f7f0 ffb3 	bl	80005cc <__aeabi_dmul>
 800f666:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f66a:	e7c3      	b.n	800f5f4 <_dtoa_r+0x51c>
 800f66c:	08012448 	.word	0x08012448
 800f670:	08012420 	.word	0x08012420
 800f674:	3ff00000 	.word	0x3ff00000
 800f678:	40240000 	.word	0x40240000
 800f67c:	401c0000 	.word	0x401c0000
 800f680:	40140000 	.word	0x40140000
 800f684:	3fe00000 	.word	0x3fe00000
 800f688:	4630      	mov	r0, r6
 800f68a:	4639      	mov	r1, r7
 800f68c:	f7f0 ff9e 	bl	80005cc <__aeabi_dmul>
 800f690:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f692:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f696:	9c03      	ldr	r4, [sp, #12]
 800f698:	9314      	str	r3, [sp, #80]	; 0x50
 800f69a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f69e:	f7f1 fa45 	bl	8000b2c <__aeabi_d2iz>
 800f6a2:	9015      	str	r0, [sp, #84]	; 0x54
 800f6a4:	f7f0 ff28 	bl	80004f8 <__aeabi_i2d>
 800f6a8:	4602      	mov	r2, r0
 800f6aa:	460b      	mov	r3, r1
 800f6ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f6b0:	f7f0 fdd4 	bl	800025c <__aeabi_dsub>
 800f6b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f6b6:	4606      	mov	r6, r0
 800f6b8:	3330      	adds	r3, #48	; 0x30
 800f6ba:	f804 3b01 	strb.w	r3, [r4], #1
 800f6be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f6c0:	460f      	mov	r7, r1
 800f6c2:	429c      	cmp	r4, r3
 800f6c4:	f04f 0200 	mov.w	r2, #0
 800f6c8:	d124      	bne.n	800f714 <_dtoa_r+0x63c>
 800f6ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f6ce:	4baf      	ldr	r3, [pc, #700]	; (800f98c <_dtoa_r+0x8b4>)
 800f6d0:	f7f0 fdc6 	bl	8000260 <__adddf3>
 800f6d4:	4602      	mov	r2, r0
 800f6d6:	460b      	mov	r3, r1
 800f6d8:	4630      	mov	r0, r6
 800f6da:	4639      	mov	r1, r7
 800f6dc:	f7f1 fa06 	bl	8000aec <__aeabi_dcmpgt>
 800f6e0:	2800      	cmp	r0, #0
 800f6e2:	d163      	bne.n	800f7ac <_dtoa_r+0x6d4>
 800f6e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f6e8:	2000      	movs	r0, #0
 800f6ea:	49a8      	ldr	r1, [pc, #672]	; (800f98c <_dtoa_r+0x8b4>)
 800f6ec:	f7f0 fdb6 	bl	800025c <__aeabi_dsub>
 800f6f0:	4602      	mov	r2, r0
 800f6f2:	460b      	mov	r3, r1
 800f6f4:	4630      	mov	r0, r6
 800f6f6:	4639      	mov	r1, r7
 800f6f8:	f7f1 f9da 	bl	8000ab0 <__aeabi_dcmplt>
 800f6fc:	2800      	cmp	r0, #0
 800f6fe:	f43f af1e 	beq.w	800f53e <_dtoa_r+0x466>
 800f702:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800f704:	1e7b      	subs	r3, r7, #1
 800f706:	9314      	str	r3, [sp, #80]	; 0x50
 800f708:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800f70c:	2b30      	cmp	r3, #48	; 0x30
 800f70e:	d0f8      	beq.n	800f702 <_dtoa_r+0x62a>
 800f710:	46c3      	mov	fp, r8
 800f712:	e03b      	b.n	800f78c <_dtoa_r+0x6b4>
 800f714:	4b9e      	ldr	r3, [pc, #632]	; (800f990 <_dtoa_r+0x8b8>)
 800f716:	f7f0 ff59 	bl	80005cc <__aeabi_dmul>
 800f71a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f71e:	e7bc      	b.n	800f69a <_dtoa_r+0x5c2>
 800f720:	9f03      	ldr	r7, [sp, #12]
 800f722:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f726:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f72a:	4640      	mov	r0, r8
 800f72c:	4649      	mov	r1, r9
 800f72e:	f7f1 f877 	bl	8000820 <__aeabi_ddiv>
 800f732:	f7f1 f9fb 	bl	8000b2c <__aeabi_d2iz>
 800f736:	4604      	mov	r4, r0
 800f738:	f7f0 fede 	bl	80004f8 <__aeabi_i2d>
 800f73c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f740:	f7f0 ff44 	bl	80005cc <__aeabi_dmul>
 800f744:	4602      	mov	r2, r0
 800f746:	460b      	mov	r3, r1
 800f748:	4640      	mov	r0, r8
 800f74a:	4649      	mov	r1, r9
 800f74c:	f7f0 fd86 	bl	800025c <__aeabi_dsub>
 800f750:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800f754:	f807 6b01 	strb.w	r6, [r7], #1
 800f758:	9e03      	ldr	r6, [sp, #12]
 800f75a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800f75e:	1bbe      	subs	r6, r7, r6
 800f760:	45b4      	cmp	ip, r6
 800f762:	4602      	mov	r2, r0
 800f764:	460b      	mov	r3, r1
 800f766:	d136      	bne.n	800f7d6 <_dtoa_r+0x6fe>
 800f768:	f7f0 fd7a 	bl	8000260 <__adddf3>
 800f76c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f770:	4680      	mov	r8, r0
 800f772:	4689      	mov	r9, r1
 800f774:	f7f1 f9ba 	bl	8000aec <__aeabi_dcmpgt>
 800f778:	bb58      	cbnz	r0, 800f7d2 <_dtoa_r+0x6fa>
 800f77a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f77e:	4640      	mov	r0, r8
 800f780:	4649      	mov	r1, r9
 800f782:	f7f1 f98b 	bl	8000a9c <__aeabi_dcmpeq>
 800f786:	b108      	cbz	r0, 800f78c <_dtoa_r+0x6b4>
 800f788:	07e3      	lsls	r3, r4, #31
 800f78a:	d422      	bmi.n	800f7d2 <_dtoa_r+0x6fa>
 800f78c:	4651      	mov	r1, sl
 800f78e:	4628      	mov	r0, r5
 800f790:	f000 febe 	bl	8010510 <_Bfree>
 800f794:	2300      	movs	r3, #0
 800f796:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f798:	703b      	strb	r3, [r7, #0]
 800f79a:	f10b 0301 	add.w	r3, fp, #1
 800f79e:	6013      	str	r3, [r2, #0]
 800f7a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	f43f ace6 	beq.w	800f174 <_dtoa_r+0x9c>
 800f7a8:	601f      	str	r7, [r3, #0]
 800f7aa:	e4e3      	b.n	800f174 <_dtoa_r+0x9c>
 800f7ac:	4627      	mov	r7, r4
 800f7ae:	463b      	mov	r3, r7
 800f7b0:	461f      	mov	r7, r3
 800f7b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f7b6:	2a39      	cmp	r2, #57	; 0x39
 800f7b8:	d107      	bne.n	800f7ca <_dtoa_r+0x6f2>
 800f7ba:	9a03      	ldr	r2, [sp, #12]
 800f7bc:	429a      	cmp	r2, r3
 800f7be:	d1f7      	bne.n	800f7b0 <_dtoa_r+0x6d8>
 800f7c0:	2230      	movs	r2, #48	; 0x30
 800f7c2:	9903      	ldr	r1, [sp, #12]
 800f7c4:	f108 0801 	add.w	r8, r8, #1
 800f7c8:	700a      	strb	r2, [r1, #0]
 800f7ca:	781a      	ldrb	r2, [r3, #0]
 800f7cc:	3201      	adds	r2, #1
 800f7ce:	701a      	strb	r2, [r3, #0]
 800f7d0:	e79e      	b.n	800f710 <_dtoa_r+0x638>
 800f7d2:	46d8      	mov	r8, fp
 800f7d4:	e7eb      	b.n	800f7ae <_dtoa_r+0x6d6>
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	4b6d      	ldr	r3, [pc, #436]	; (800f990 <_dtoa_r+0x8b8>)
 800f7da:	f7f0 fef7 	bl	80005cc <__aeabi_dmul>
 800f7de:	2200      	movs	r2, #0
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	4680      	mov	r8, r0
 800f7e4:	4689      	mov	r9, r1
 800f7e6:	f7f1 f959 	bl	8000a9c <__aeabi_dcmpeq>
 800f7ea:	2800      	cmp	r0, #0
 800f7ec:	d09b      	beq.n	800f726 <_dtoa_r+0x64e>
 800f7ee:	e7cd      	b.n	800f78c <_dtoa_r+0x6b4>
 800f7f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f7f2:	2a00      	cmp	r2, #0
 800f7f4:	f000 80c4 	beq.w	800f980 <_dtoa_r+0x8a8>
 800f7f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f7fa:	2a01      	cmp	r2, #1
 800f7fc:	f300 80a8 	bgt.w	800f950 <_dtoa_r+0x878>
 800f800:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f802:	2a00      	cmp	r2, #0
 800f804:	f000 80a0 	beq.w	800f948 <_dtoa_r+0x870>
 800f808:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f80c:	464f      	mov	r7, r9
 800f80e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f810:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f812:	2101      	movs	r1, #1
 800f814:	441a      	add	r2, r3
 800f816:	4628      	mov	r0, r5
 800f818:	4499      	add	r9, r3
 800f81a:	9209      	str	r2, [sp, #36]	; 0x24
 800f81c:	f000 ff78 	bl	8010710 <__i2b>
 800f820:	4606      	mov	r6, r0
 800f822:	b15f      	cbz	r7, 800f83c <_dtoa_r+0x764>
 800f824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f826:	2b00      	cmp	r3, #0
 800f828:	dd08      	ble.n	800f83c <_dtoa_r+0x764>
 800f82a:	42bb      	cmp	r3, r7
 800f82c:	bfa8      	it	ge
 800f82e:	463b      	movge	r3, r7
 800f830:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f832:	eba9 0903 	sub.w	r9, r9, r3
 800f836:	1aff      	subs	r7, r7, r3
 800f838:	1ad3      	subs	r3, r2, r3
 800f83a:	9309      	str	r3, [sp, #36]	; 0x24
 800f83c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f83e:	b1f3      	cbz	r3, 800f87e <_dtoa_r+0x7a6>
 800f840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f842:	2b00      	cmp	r3, #0
 800f844:	f000 80a0 	beq.w	800f988 <_dtoa_r+0x8b0>
 800f848:	2c00      	cmp	r4, #0
 800f84a:	dd10      	ble.n	800f86e <_dtoa_r+0x796>
 800f84c:	4631      	mov	r1, r6
 800f84e:	4622      	mov	r2, r4
 800f850:	4628      	mov	r0, r5
 800f852:	f001 f81b 	bl	801088c <__pow5mult>
 800f856:	4652      	mov	r2, sl
 800f858:	4601      	mov	r1, r0
 800f85a:	4606      	mov	r6, r0
 800f85c:	4628      	mov	r0, r5
 800f85e:	f000 ff6d 	bl	801073c <__multiply>
 800f862:	4680      	mov	r8, r0
 800f864:	4651      	mov	r1, sl
 800f866:	4628      	mov	r0, r5
 800f868:	f000 fe52 	bl	8010510 <_Bfree>
 800f86c:	46c2      	mov	sl, r8
 800f86e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f870:	1b1a      	subs	r2, r3, r4
 800f872:	d004      	beq.n	800f87e <_dtoa_r+0x7a6>
 800f874:	4651      	mov	r1, sl
 800f876:	4628      	mov	r0, r5
 800f878:	f001 f808 	bl	801088c <__pow5mult>
 800f87c:	4682      	mov	sl, r0
 800f87e:	2101      	movs	r1, #1
 800f880:	4628      	mov	r0, r5
 800f882:	f000 ff45 	bl	8010710 <__i2b>
 800f886:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f888:	4604      	mov	r4, r0
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	f340 8082 	ble.w	800f994 <_dtoa_r+0x8bc>
 800f890:	461a      	mov	r2, r3
 800f892:	4601      	mov	r1, r0
 800f894:	4628      	mov	r0, r5
 800f896:	f000 fff9 	bl	801088c <__pow5mult>
 800f89a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f89c:	4604      	mov	r4, r0
 800f89e:	2b01      	cmp	r3, #1
 800f8a0:	dd7b      	ble.n	800f99a <_dtoa_r+0x8c2>
 800f8a2:	f04f 0800 	mov.w	r8, #0
 800f8a6:	6923      	ldr	r3, [r4, #16]
 800f8a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f8ac:	6918      	ldr	r0, [r3, #16]
 800f8ae:	f000 fee1 	bl	8010674 <__hi0bits>
 800f8b2:	f1c0 0020 	rsb	r0, r0, #32
 800f8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8b8:	4418      	add	r0, r3
 800f8ba:	f010 001f 	ands.w	r0, r0, #31
 800f8be:	f000 8092 	beq.w	800f9e6 <_dtoa_r+0x90e>
 800f8c2:	f1c0 0320 	rsb	r3, r0, #32
 800f8c6:	2b04      	cmp	r3, #4
 800f8c8:	f340 8085 	ble.w	800f9d6 <_dtoa_r+0x8fe>
 800f8cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8ce:	f1c0 001c 	rsb	r0, r0, #28
 800f8d2:	4403      	add	r3, r0
 800f8d4:	4481      	add	r9, r0
 800f8d6:	4407      	add	r7, r0
 800f8d8:	9309      	str	r3, [sp, #36]	; 0x24
 800f8da:	f1b9 0f00 	cmp.w	r9, #0
 800f8de:	dd05      	ble.n	800f8ec <_dtoa_r+0x814>
 800f8e0:	4651      	mov	r1, sl
 800f8e2:	464a      	mov	r2, r9
 800f8e4:	4628      	mov	r0, r5
 800f8e6:	f001 f82b 	bl	8010940 <__lshift>
 800f8ea:	4682      	mov	sl, r0
 800f8ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	dd05      	ble.n	800f8fe <_dtoa_r+0x826>
 800f8f2:	4621      	mov	r1, r4
 800f8f4:	461a      	mov	r2, r3
 800f8f6:	4628      	mov	r0, r5
 800f8f8:	f001 f822 	bl	8010940 <__lshift>
 800f8fc:	4604      	mov	r4, r0
 800f8fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f900:	2b00      	cmp	r3, #0
 800f902:	d072      	beq.n	800f9ea <_dtoa_r+0x912>
 800f904:	4621      	mov	r1, r4
 800f906:	4650      	mov	r0, sl
 800f908:	f001 f886 	bl	8010a18 <__mcmp>
 800f90c:	2800      	cmp	r0, #0
 800f90e:	da6c      	bge.n	800f9ea <_dtoa_r+0x912>
 800f910:	2300      	movs	r3, #0
 800f912:	4651      	mov	r1, sl
 800f914:	220a      	movs	r2, #10
 800f916:	4628      	mov	r0, r5
 800f918:	f000 fe1c 	bl	8010554 <__multadd>
 800f91c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f91e:	4682      	mov	sl, r0
 800f920:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f924:	2b00      	cmp	r3, #0
 800f926:	f000 81ac 	beq.w	800fc82 <_dtoa_r+0xbaa>
 800f92a:	2300      	movs	r3, #0
 800f92c:	4631      	mov	r1, r6
 800f92e:	220a      	movs	r2, #10
 800f930:	4628      	mov	r0, r5
 800f932:	f000 fe0f 	bl	8010554 <__multadd>
 800f936:	9b06      	ldr	r3, [sp, #24]
 800f938:	4606      	mov	r6, r0
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	f300 8093 	bgt.w	800fa66 <_dtoa_r+0x98e>
 800f940:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f942:	2b02      	cmp	r3, #2
 800f944:	dc59      	bgt.n	800f9fa <_dtoa_r+0x922>
 800f946:	e08e      	b.n	800fa66 <_dtoa_r+0x98e>
 800f948:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f94a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f94e:	e75d      	b.n	800f80c <_dtoa_r+0x734>
 800f950:	9b08      	ldr	r3, [sp, #32]
 800f952:	1e5c      	subs	r4, r3, #1
 800f954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f956:	42a3      	cmp	r3, r4
 800f958:	bfbf      	itttt	lt
 800f95a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f95c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800f95e:	1ae3      	sublt	r3, r4, r3
 800f960:	18d2      	addlt	r2, r2, r3
 800f962:	bfa8      	it	ge
 800f964:	1b1c      	subge	r4, r3, r4
 800f966:	9b08      	ldr	r3, [sp, #32]
 800f968:	bfbe      	ittt	lt
 800f96a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800f96c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800f96e:	2400      	movlt	r4, #0
 800f970:	2b00      	cmp	r3, #0
 800f972:	bfb5      	itete	lt
 800f974:	eba9 0703 	sublt.w	r7, r9, r3
 800f978:	464f      	movge	r7, r9
 800f97a:	2300      	movlt	r3, #0
 800f97c:	9b08      	ldrge	r3, [sp, #32]
 800f97e:	e747      	b.n	800f810 <_dtoa_r+0x738>
 800f980:	464f      	mov	r7, r9
 800f982:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f984:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800f986:	e74c      	b.n	800f822 <_dtoa_r+0x74a>
 800f988:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f98a:	e773      	b.n	800f874 <_dtoa_r+0x79c>
 800f98c:	3fe00000 	.word	0x3fe00000
 800f990:	40240000 	.word	0x40240000
 800f994:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f996:	2b01      	cmp	r3, #1
 800f998:	dc18      	bgt.n	800f9cc <_dtoa_r+0x8f4>
 800f99a:	9b04      	ldr	r3, [sp, #16]
 800f99c:	b9b3      	cbnz	r3, 800f9cc <_dtoa_r+0x8f4>
 800f99e:	9b05      	ldr	r3, [sp, #20]
 800f9a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f9a4:	b993      	cbnz	r3, 800f9cc <_dtoa_r+0x8f4>
 800f9a6:	9b05      	ldr	r3, [sp, #20]
 800f9a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f9ac:	0d1b      	lsrs	r3, r3, #20
 800f9ae:	051b      	lsls	r3, r3, #20
 800f9b0:	b17b      	cbz	r3, 800f9d2 <_dtoa_r+0x8fa>
 800f9b2:	f04f 0801 	mov.w	r8, #1
 800f9b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9b8:	f109 0901 	add.w	r9, r9, #1
 800f9bc:	3301      	adds	r3, #1
 800f9be:	9309      	str	r3, [sp, #36]	; 0x24
 800f9c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	f47f af6f 	bne.w	800f8a6 <_dtoa_r+0x7ce>
 800f9c8:	2001      	movs	r0, #1
 800f9ca:	e774      	b.n	800f8b6 <_dtoa_r+0x7de>
 800f9cc:	f04f 0800 	mov.w	r8, #0
 800f9d0:	e7f6      	b.n	800f9c0 <_dtoa_r+0x8e8>
 800f9d2:	4698      	mov	r8, r3
 800f9d4:	e7f4      	b.n	800f9c0 <_dtoa_r+0x8e8>
 800f9d6:	d080      	beq.n	800f8da <_dtoa_r+0x802>
 800f9d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f9da:	331c      	adds	r3, #28
 800f9dc:	441a      	add	r2, r3
 800f9de:	4499      	add	r9, r3
 800f9e0:	441f      	add	r7, r3
 800f9e2:	9209      	str	r2, [sp, #36]	; 0x24
 800f9e4:	e779      	b.n	800f8da <_dtoa_r+0x802>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	e7f6      	b.n	800f9d8 <_dtoa_r+0x900>
 800f9ea:	9b08      	ldr	r3, [sp, #32]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	dc34      	bgt.n	800fa5a <_dtoa_r+0x982>
 800f9f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f9f2:	2b02      	cmp	r3, #2
 800f9f4:	dd31      	ble.n	800fa5a <_dtoa_r+0x982>
 800f9f6:	9b08      	ldr	r3, [sp, #32]
 800f9f8:	9306      	str	r3, [sp, #24]
 800f9fa:	9b06      	ldr	r3, [sp, #24]
 800f9fc:	b963      	cbnz	r3, 800fa18 <_dtoa_r+0x940>
 800f9fe:	4621      	mov	r1, r4
 800fa00:	2205      	movs	r2, #5
 800fa02:	4628      	mov	r0, r5
 800fa04:	f000 fda6 	bl	8010554 <__multadd>
 800fa08:	4601      	mov	r1, r0
 800fa0a:	4604      	mov	r4, r0
 800fa0c:	4650      	mov	r0, sl
 800fa0e:	f001 f803 	bl	8010a18 <__mcmp>
 800fa12:	2800      	cmp	r0, #0
 800fa14:	f73f adbf 	bgt.w	800f596 <_dtoa_r+0x4be>
 800fa18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fa1a:	9f03      	ldr	r7, [sp, #12]
 800fa1c:	ea6f 0b03 	mvn.w	fp, r3
 800fa20:	f04f 0800 	mov.w	r8, #0
 800fa24:	4621      	mov	r1, r4
 800fa26:	4628      	mov	r0, r5
 800fa28:	f000 fd72 	bl	8010510 <_Bfree>
 800fa2c:	2e00      	cmp	r6, #0
 800fa2e:	f43f aead 	beq.w	800f78c <_dtoa_r+0x6b4>
 800fa32:	f1b8 0f00 	cmp.w	r8, #0
 800fa36:	d005      	beq.n	800fa44 <_dtoa_r+0x96c>
 800fa38:	45b0      	cmp	r8, r6
 800fa3a:	d003      	beq.n	800fa44 <_dtoa_r+0x96c>
 800fa3c:	4641      	mov	r1, r8
 800fa3e:	4628      	mov	r0, r5
 800fa40:	f000 fd66 	bl	8010510 <_Bfree>
 800fa44:	4631      	mov	r1, r6
 800fa46:	4628      	mov	r0, r5
 800fa48:	f000 fd62 	bl	8010510 <_Bfree>
 800fa4c:	e69e      	b.n	800f78c <_dtoa_r+0x6b4>
 800fa4e:	2400      	movs	r4, #0
 800fa50:	4626      	mov	r6, r4
 800fa52:	e7e1      	b.n	800fa18 <_dtoa_r+0x940>
 800fa54:	46c3      	mov	fp, r8
 800fa56:	4626      	mov	r6, r4
 800fa58:	e59d      	b.n	800f596 <_dtoa_r+0x4be>
 800fa5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	f000 80c8 	beq.w	800fbf2 <_dtoa_r+0xb1a>
 800fa62:	9b08      	ldr	r3, [sp, #32]
 800fa64:	9306      	str	r3, [sp, #24]
 800fa66:	2f00      	cmp	r7, #0
 800fa68:	dd05      	ble.n	800fa76 <_dtoa_r+0x99e>
 800fa6a:	4631      	mov	r1, r6
 800fa6c:	463a      	mov	r2, r7
 800fa6e:	4628      	mov	r0, r5
 800fa70:	f000 ff66 	bl	8010940 <__lshift>
 800fa74:	4606      	mov	r6, r0
 800fa76:	f1b8 0f00 	cmp.w	r8, #0
 800fa7a:	d05b      	beq.n	800fb34 <_dtoa_r+0xa5c>
 800fa7c:	4628      	mov	r0, r5
 800fa7e:	6871      	ldr	r1, [r6, #4]
 800fa80:	f000 fd06 	bl	8010490 <_Balloc>
 800fa84:	4607      	mov	r7, r0
 800fa86:	b928      	cbnz	r0, 800fa94 <_dtoa_r+0x9bc>
 800fa88:	4602      	mov	r2, r0
 800fa8a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800fa8e:	4b81      	ldr	r3, [pc, #516]	; (800fc94 <_dtoa_r+0xbbc>)
 800fa90:	f7ff bb36 	b.w	800f100 <_dtoa_r+0x28>
 800fa94:	6932      	ldr	r2, [r6, #16]
 800fa96:	f106 010c 	add.w	r1, r6, #12
 800fa9a:	3202      	adds	r2, #2
 800fa9c:	0092      	lsls	r2, r2, #2
 800fa9e:	300c      	adds	r0, #12
 800faa0:	f7ff fa45 	bl	800ef2e <memcpy>
 800faa4:	2201      	movs	r2, #1
 800faa6:	4639      	mov	r1, r7
 800faa8:	4628      	mov	r0, r5
 800faaa:	f000 ff49 	bl	8010940 <__lshift>
 800faae:	46b0      	mov	r8, r6
 800fab0:	4606      	mov	r6, r0
 800fab2:	9b03      	ldr	r3, [sp, #12]
 800fab4:	9a03      	ldr	r2, [sp, #12]
 800fab6:	3301      	adds	r3, #1
 800fab8:	9308      	str	r3, [sp, #32]
 800faba:	9b06      	ldr	r3, [sp, #24]
 800fabc:	4413      	add	r3, r2
 800fabe:	930b      	str	r3, [sp, #44]	; 0x2c
 800fac0:	9b04      	ldr	r3, [sp, #16]
 800fac2:	f003 0301 	and.w	r3, r3, #1
 800fac6:	930a      	str	r3, [sp, #40]	; 0x28
 800fac8:	9b08      	ldr	r3, [sp, #32]
 800faca:	4621      	mov	r1, r4
 800facc:	3b01      	subs	r3, #1
 800face:	4650      	mov	r0, sl
 800fad0:	9304      	str	r3, [sp, #16]
 800fad2:	f7ff fa77 	bl	800efc4 <quorem>
 800fad6:	4641      	mov	r1, r8
 800fad8:	9006      	str	r0, [sp, #24]
 800fada:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800fade:	4650      	mov	r0, sl
 800fae0:	f000 ff9a 	bl	8010a18 <__mcmp>
 800fae4:	4632      	mov	r2, r6
 800fae6:	9009      	str	r0, [sp, #36]	; 0x24
 800fae8:	4621      	mov	r1, r4
 800faea:	4628      	mov	r0, r5
 800faec:	f000 ffb0 	bl	8010a50 <__mdiff>
 800faf0:	68c2      	ldr	r2, [r0, #12]
 800faf2:	4607      	mov	r7, r0
 800faf4:	bb02      	cbnz	r2, 800fb38 <_dtoa_r+0xa60>
 800faf6:	4601      	mov	r1, r0
 800faf8:	4650      	mov	r0, sl
 800fafa:	f000 ff8d 	bl	8010a18 <__mcmp>
 800fafe:	4602      	mov	r2, r0
 800fb00:	4639      	mov	r1, r7
 800fb02:	4628      	mov	r0, r5
 800fb04:	920c      	str	r2, [sp, #48]	; 0x30
 800fb06:	f000 fd03 	bl	8010510 <_Bfree>
 800fb0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fb0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fb0e:	9f08      	ldr	r7, [sp, #32]
 800fb10:	ea43 0102 	orr.w	r1, r3, r2
 800fb14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb16:	4319      	orrs	r1, r3
 800fb18:	d110      	bne.n	800fb3c <_dtoa_r+0xa64>
 800fb1a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fb1e:	d029      	beq.n	800fb74 <_dtoa_r+0xa9c>
 800fb20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	dd02      	ble.n	800fb2c <_dtoa_r+0xa54>
 800fb26:	9b06      	ldr	r3, [sp, #24]
 800fb28:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800fb2c:	9b04      	ldr	r3, [sp, #16]
 800fb2e:	f883 9000 	strb.w	r9, [r3]
 800fb32:	e777      	b.n	800fa24 <_dtoa_r+0x94c>
 800fb34:	4630      	mov	r0, r6
 800fb36:	e7ba      	b.n	800faae <_dtoa_r+0x9d6>
 800fb38:	2201      	movs	r2, #1
 800fb3a:	e7e1      	b.n	800fb00 <_dtoa_r+0xa28>
 800fb3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	db04      	blt.n	800fb4c <_dtoa_r+0xa74>
 800fb42:	9922      	ldr	r1, [sp, #136]	; 0x88
 800fb44:	430b      	orrs	r3, r1
 800fb46:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fb48:	430b      	orrs	r3, r1
 800fb4a:	d120      	bne.n	800fb8e <_dtoa_r+0xab6>
 800fb4c:	2a00      	cmp	r2, #0
 800fb4e:	dded      	ble.n	800fb2c <_dtoa_r+0xa54>
 800fb50:	4651      	mov	r1, sl
 800fb52:	2201      	movs	r2, #1
 800fb54:	4628      	mov	r0, r5
 800fb56:	f000 fef3 	bl	8010940 <__lshift>
 800fb5a:	4621      	mov	r1, r4
 800fb5c:	4682      	mov	sl, r0
 800fb5e:	f000 ff5b 	bl	8010a18 <__mcmp>
 800fb62:	2800      	cmp	r0, #0
 800fb64:	dc03      	bgt.n	800fb6e <_dtoa_r+0xa96>
 800fb66:	d1e1      	bne.n	800fb2c <_dtoa_r+0xa54>
 800fb68:	f019 0f01 	tst.w	r9, #1
 800fb6c:	d0de      	beq.n	800fb2c <_dtoa_r+0xa54>
 800fb6e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fb72:	d1d8      	bne.n	800fb26 <_dtoa_r+0xa4e>
 800fb74:	2339      	movs	r3, #57	; 0x39
 800fb76:	9a04      	ldr	r2, [sp, #16]
 800fb78:	7013      	strb	r3, [r2, #0]
 800fb7a:	463b      	mov	r3, r7
 800fb7c:	461f      	mov	r7, r3
 800fb7e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800fb82:	3b01      	subs	r3, #1
 800fb84:	2a39      	cmp	r2, #57	; 0x39
 800fb86:	d06b      	beq.n	800fc60 <_dtoa_r+0xb88>
 800fb88:	3201      	adds	r2, #1
 800fb8a:	701a      	strb	r2, [r3, #0]
 800fb8c:	e74a      	b.n	800fa24 <_dtoa_r+0x94c>
 800fb8e:	2a00      	cmp	r2, #0
 800fb90:	dd07      	ble.n	800fba2 <_dtoa_r+0xaca>
 800fb92:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fb96:	d0ed      	beq.n	800fb74 <_dtoa_r+0xa9c>
 800fb98:	9a04      	ldr	r2, [sp, #16]
 800fb9a:	f109 0301 	add.w	r3, r9, #1
 800fb9e:	7013      	strb	r3, [r2, #0]
 800fba0:	e740      	b.n	800fa24 <_dtoa_r+0x94c>
 800fba2:	9b08      	ldr	r3, [sp, #32]
 800fba4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fba6:	f803 9c01 	strb.w	r9, [r3, #-1]
 800fbaa:	4293      	cmp	r3, r2
 800fbac:	d042      	beq.n	800fc34 <_dtoa_r+0xb5c>
 800fbae:	4651      	mov	r1, sl
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	220a      	movs	r2, #10
 800fbb4:	4628      	mov	r0, r5
 800fbb6:	f000 fccd 	bl	8010554 <__multadd>
 800fbba:	45b0      	cmp	r8, r6
 800fbbc:	4682      	mov	sl, r0
 800fbbe:	f04f 0300 	mov.w	r3, #0
 800fbc2:	f04f 020a 	mov.w	r2, #10
 800fbc6:	4641      	mov	r1, r8
 800fbc8:	4628      	mov	r0, r5
 800fbca:	d107      	bne.n	800fbdc <_dtoa_r+0xb04>
 800fbcc:	f000 fcc2 	bl	8010554 <__multadd>
 800fbd0:	4680      	mov	r8, r0
 800fbd2:	4606      	mov	r6, r0
 800fbd4:	9b08      	ldr	r3, [sp, #32]
 800fbd6:	3301      	adds	r3, #1
 800fbd8:	9308      	str	r3, [sp, #32]
 800fbda:	e775      	b.n	800fac8 <_dtoa_r+0x9f0>
 800fbdc:	f000 fcba 	bl	8010554 <__multadd>
 800fbe0:	4631      	mov	r1, r6
 800fbe2:	4680      	mov	r8, r0
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	220a      	movs	r2, #10
 800fbe8:	4628      	mov	r0, r5
 800fbea:	f000 fcb3 	bl	8010554 <__multadd>
 800fbee:	4606      	mov	r6, r0
 800fbf0:	e7f0      	b.n	800fbd4 <_dtoa_r+0xafc>
 800fbf2:	9b08      	ldr	r3, [sp, #32]
 800fbf4:	9306      	str	r3, [sp, #24]
 800fbf6:	9f03      	ldr	r7, [sp, #12]
 800fbf8:	4621      	mov	r1, r4
 800fbfa:	4650      	mov	r0, sl
 800fbfc:	f7ff f9e2 	bl	800efc4 <quorem>
 800fc00:	9b03      	ldr	r3, [sp, #12]
 800fc02:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800fc06:	f807 9b01 	strb.w	r9, [r7], #1
 800fc0a:	1afa      	subs	r2, r7, r3
 800fc0c:	9b06      	ldr	r3, [sp, #24]
 800fc0e:	4293      	cmp	r3, r2
 800fc10:	dd07      	ble.n	800fc22 <_dtoa_r+0xb4a>
 800fc12:	4651      	mov	r1, sl
 800fc14:	2300      	movs	r3, #0
 800fc16:	220a      	movs	r2, #10
 800fc18:	4628      	mov	r0, r5
 800fc1a:	f000 fc9b 	bl	8010554 <__multadd>
 800fc1e:	4682      	mov	sl, r0
 800fc20:	e7ea      	b.n	800fbf8 <_dtoa_r+0xb20>
 800fc22:	9b06      	ldr	r3, [sp, #24]
 800fc24:	f04f 0800 	mov.w	r8, #0
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	bfcc      	ite	gt
 800fc2c:	461f      	movgt	r7, r3
 800fc2e:	2701      	movle	r7, #1
 800fc30:	9b03      	ldr	r3, [sp, #12]
 800fc32:	441f      	add	r7, r3
 800fc34:	4651      	mov	r1, sl
 800fc36:	2201      	movs	r2, #1
 800fc38:	4628      	mov	r0, r5
 800fc3a:	f000 fe81 	bl	8010940 <__lshift>
 800fc3e:	4621      	mov	r1, r4
 800fc40:	4682      	mov	sl, r0
 800fc42:	f000 fee9 	bl	8010a18 <__mcmp>
 800fc46:	2800      	cmp	r0, #0
 800fc48:	dc97      	bgt.n	800fb7a <_dtoa_r+0xaa2>
 800fc4a:	d102      	bne.n	800fc52 <_dtoa_r+0xb7a>
 800fc4c:	f019 0f01 	tst.w	r9, #1
 800fc50:	d193      	bne.n	800fb7a <_dtoa_r+0xaa2>
 800fc52:	463b      	mov	r3, r7
 800fc54:	461f      	mov	r7, r3
 800fc56:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc5a:	2a30      	cmp	r2, #48	; 0x30
 800fc5c:	d0fa      	beq.n	800fc54 <_dtoa_r+0xb7c>
 800fc5e:	e6e1      	b.n	800fa24 <_dtoa_r+0x94c>
 800fc60:	9a03      	ldr	r2, [sp, #12]
 800fc62:	429a      	cmp	r2, r3
 800fc64:	d18a      	bne.n	800fb7c <_dtoa_r+0xaa4>
 800fc66:	2331      	movs	r3, #49	; 0x31
 800fc68:	f10b 0b01 	add.w	fp, fp, #1
 800fc6c:	e797      	b.n	800fb9e <_dtoa_r+0xac6>
 800fc6e:	4b0a      	ldr	r3, [pc, #40]	; (800fc98 <_dtoa_r+0xbc0>)
 800fc70:	f7ff ba9f 	b.w	800f1b2 <_dtoa_r+0xda>
 800fc74:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	f47f aa77 	bne.w	800f16a <_dtoa_r+0x92>
 800fc7c:	4b07      	ldr	r3, [pc, #28]	; (800fc9c <_dtoa_r+0xbc4>)
 800fc7e:	f7ff ba98 	b.w	800f1b2 <_dtoa_r+0xda>
 800fc82:	9b06      	ldr	r3, [sp, #24]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	dcb6      	bgt.n	800fbf6 <_dtoa_r+0xb1e>
 800fc88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fc8a:	2b02      	cmp	r3, #2
 800fc8c:	f73f aeb5 	bgt.w	800f9fa <_dtoa_r+0x922>
 800fc90:	e7b1      	b.n	800fbf6 <_dtoa_r+0xb1e>
 800fc92:	bf00      	nop
 800fc94:	08012353 	.word	0x08012353
 800fc98:	080125a6 	.word	0x080125a6
 800fc9c:	080122ee 	.word	0x080122ee

0800fca0 <_free_r>:
 800fca0:	b538      	push	{r3, r4, r5, lr}
 800fca2:	4605      	mov	r5, r0
 800fca4:	2900      	cmp	r1, #0
 800fca6:	d040      	beq.n	800fd2a <_free_r+0x8a>
 800fca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fcac:	1f0c      	subs	r4, r1, #4
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	bfb8      	it	lt
 800fcb2:	18e4      	addlt	r4, r4, r3
 800fcb4:	f7fc fdd2 	bl	800c85c <__malloc_lock>
 800fcb8:	4a1c      	ldr	r2, [pc, #112]	; (800fd2c <_free_r+0x8c>)
 800fcba:	6813      	ldr	r3, [r2, #0]
 800fcbc:	b933      	cbnz	r3, 800fccc <_free_r+0x2c>
 800fcbe:	6063      	str	r3, [r4, #4]
 800fcc0:	6014      	str	r4, [r2, #0]
 800fcc2:	4628      	mov	r0, r5
 800fcc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fcc8:	f7fc bdce 	b.w	800c868 <__malloc_unlock>
 800fccc:	42a3      	cmp	r3, r4
 800fcce:	d908      	bls.n	800fce2 <_free_r+0x42>
 800fcd0:	6820      	ldr	r0, [r4, #0]
 800fcd2:	1821      	adds	r1, r4, r0
 800fcd4:	428b      	cmp	r3, r1
 800fcd6:	bf01      	itttt	eq
 800fcd8:	6819      	ldreq	r1, [r3, #0]
 800fcda:	685b      	ldreq	r3, [r3, #4]
 800fcdc:	1809      	addeq	r1, r1, r0
 800fcde:	6021      	streq	r1, [r4, #0]
 800fce0:	e7ed      	b.n	800fcbe <_free_r+0x1e>
 800fce2:	461a      	mov	r2, r3
 800fce4:	685b      	ldr	r3, [r3, #4]
 800fce6:	b10b      	cbz	r3, 800fcec <_free_r+0x4c>
 800fce8:	42a3      	cmp	r3, r4
 800fcea:	d9fa      	bls.n	800fce2 <_free_r+0x42>
 800fcec:	6811      	ldr	r1, [r2, #0]
 800fcee:	1850      	adds	r0, r2, r1
 800fcf0:	42a0      	cmp	r0, r4
 800fcf2:	d10b      	bne.n	800fd0c <_free_r+0x6c>
 800fcf4:	6820      	ldr	r0, [r4, #0]
 800fcf6:	4401      	add	r1, r0
 800fcf8:	1850      	adds	r0, r2, r1
 800fcfa:	4283      	cmp	r3, r0
 800fcfc:	6011      	str	r1, [r2, #0]
 800fcfe:	d1e0      	bne.n	800fcc2 <_free_r+0x22>
 800fd00:	6818      	ldr	r0, [r3, #0]
 800fd02:	685b      	ldr	r3, [r3, #4]
 800fd04:	4408      	add	r0, r1
 800fd06:	6010      	str	r0, [r2, #0]
 800fd08:	6053      	str	r3, [r2, #4]
 800fd0a:	e7da      	b.n	800fcc2 <_free_r+0x22>
 800fd0c:	d902      	bls.n	800fd14 <_free_r+0x74>
 800fd0e:	230c      	movs	r3, #12
 800fd10:	602b      	str	r3, [r5, #0]
 800fd12:	e7d6      	b.n	800fcc2 <_free_r+0x22>
 800fd14:	6820      	ldr	r0, [r4, #0]
 800fd16:	1821      	adds	r1, r4, r0
 800fd18:	428b      	cmp	r3, r1
 800fd1a:	bf01      	itttt	eq
 800fd1c:	6819      	ldreq	r1, [r3, #0]
 800fd1e:	685b      	ldreq	r3, [r3, #4]
 800fd20:	1809      	addeq	r1, r1, r0
 800fd22:	6021      	streq	r1, [r4, #0]
 800fd24:	6063      	str	r3, [r4, #4]
 800fd26:	6054      	str	r4, [r2, #4]
 800fd28:	e7cb      	b.n	800fcc2 <_free_r+0x22>
 800fd2a:	bd38      	pop	{r3, r4, r5, pc}
 800fd2c:	20005a20 	.word	0x20005a20

0800fd30 <rshift>:
 800fd30:	6903      	ldr	r3, [r0, #16]
 800fd32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd36:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fd3a:	f100 0414 	add.w	r4, r0, #20
 800fd3e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fd42:	dd46      	ble.n	800fdd2 <rshift+0xa2>
 800fd44:	f011 011f 	ands.w	r1, r1, #31
 800fd48:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fd4c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fd50:	d10c      	bne.n	800fd6c <rshift+0x3c>
 800fd52:	4629      	mov	r1, r5
 800fd54:	f100 0710 	add.w	r7, r0, #16
 800fd58:	42b1      	cmp	r1, r6
 800fd5a:	d335      	bcc.n	800fdc8 <rshift+0x98>
 800fd5c:	1a9b      	subs	r3, r3, r2
 800fd5e:	009b      	lsls	r3, r3, #2
 800fd60:	1eea      	subs	r2, r5, #3
 800fd62:	4296      	cmp	r6, r2
 800fd64:	bf38      	it	cc
 800fd66:	2300      	movcc	r3, #0
 800fd68:	4423      	add	r3, r4
 800fd6a:	e015      	b.n	800fd98 <rshift+0x68>
 800fd6c:	46a1      	mov	r9, r4
 800fd6e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fd72:	f1c1 0820 	rsb	r8, r1, #32
 800fd76:	40cf      	lsrs	r7, r1
 800fd78:	f105 0e04 	add.w	lr, r5, #4
 800fd7c:	4576      	cmp	r6, lr
 800fd7e:	46f4      	mov	ip, lr
 800fd80:	d816      	bhi.n	800fdb0 <rshift+0x80>
 800fd82:	1a9a      	subs	r2, r3, r2
 800fd84:	0092      	lsls	r2, r2, #2
 800fd86:	3a04      	subs	r2, #4
 800fd88:	3501      	adds	r5, #1
 800fd8a:	42ae      	cmp	r6, r5
 800fd8c:	bf38      	it	cc
 800fd8e:	2200      	movcc	r2, #0
 800fd90:	18a3      	adds	r3, r4, r2
 800fd92:	50a7      	str	r7, [r4, r2]
 800fd94:	b107      	cbz	r7, 800fd98 <rshift+0x68>
 800fd96:	3304      	adds	r3, #4
 800fd98:	42a3      	cmp	r3, r4
 800fd9a:	eba3 0204 	sub.w	r2, r3, r4
 800fd9e:	bf08      	it	eq
 800fda0:	2300      	moveq	r3, #0
 800fda2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fda6:	6102      	str	r2, [r0, #16]
 800fda8:	bf08      	it	eq
 800fdaa:	6143      	streq	r3, [r0, #20]
 800fdac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdb0:	f8dc c000 	ldr.w	ip, [ip]
 800fdb4:	fa0c fc08 	lsl.w	ip, ip, r8
 800fdb8:	ea4c 0707 	orr.w	r7, ip, r7
 800fdbc:	f849 7b04 	str.w	r7, [r9], #4
 800fdc0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fdc4:	40cf      	lsrs	r7, r1
 800fdc6:	e7d9      	b.n	800fd7c <rshift+0x4c>
 800fdc8:	f851 cb04 	ldr.w	ip, [r1], #4
 800fdcc:	f847 cf04 	str.w	ip, [r7, #4]!
 800fdd0:	e7c2      	b.n	800fd58 <rshift+0x28>
 800fdd2:	4623      	mov	r3, r4
 800fdd4:	e7e0      	b.n	800fd98 <rshift+0x68>

0800fdd6 <__hexdig_fun>:
 800fdd6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fdda:	2b09      	cmp	r3, #9
 800fddc:	d802      	bhi.n	800fde4 <__hexdig_fun+0xe>
 800fdde:	3820      	subs	r0, #32
 800fde0:	b2c0      	uxtb	r0, r0
 800fde2:	4770      	bx	lr
 800fde4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fde8:	2b05      	cmp	r3, #5
 800fdea:	d801      	bhi.n	800fdf0 <__hexdig_fun+0x1a>
 800fdec:	3847      	subs	r0, #71	; 0x47
 800fdee:	e7f7      	b.n	800fde0 <__hexdig_fun+0xa>
 800fdf0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fdf4:	2b05      	cmp	r3, #5
 800fdf6:	d801      	bhi.n	800fdfc <__hexdig_fun+0x26>
 800fdf8:	3827      	subs	r0, #39	; 0x27
 800fdfa:	e7f1      	b.n	800fde0 <__hexdig_fun+0xa>
 800fdfc:	2000      	movs	r0, #0
 800fdfe:	4770      	bx	lr

0800fe00 <__gethex>:
 800fe00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe04:	4681      	mov	r9, r0
 800fe06:	468a      	mov	sl, r1
 800fe08:	4617      	mov	r7, r2
 800fe0a:	680a      	ldr	r2, [r1, #0]
 800fe0c:	b085      	sub	sp, #20
 800fe0e:	f102 0b02 	add.w	fp, r2, #2
 800fe12:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fe16:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fe1a:	9302      	str	r3, [sp, #8]
 800fe1c:	32fe      	adds	r2, #254	; 0xfe
 800fe1e:	eb02 030b 	add.w	r3, r2, fp
 800fe22:	46d8      	mov	r8, fp
 800fe24:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800fe28:	9301      	str	r3, [sp, #4]
 800fe2a:	2830      	cmp	r0, #48	; 0x30
 800fe2c:	d0f7      	beq.n	800fe1e <__gethex+0x1e>
 800fe2e:	f7ff ffd2 	bl	800fdd6 <__hexdig_fun>
 800fe32:	4604      	mov	r4, r0
 800fe34:	2800      	cmp	r0, #0
 800fe36:	d138      	bne.n	800feaa <__gethex+0xaa>
 800fe38:	2201      	movs	r2, #1
 800fe3a:	4640      	mov	r0, r8
 800fe3c:	49a7      	ldr	r1, [pc, #668]	; (80100dc <__gethex+0x2dc>)
 800fe3e:	f7fe f99d 	bl	800e17c <strncmp>
 800fe42:	4606      	mov	r6, r0
 800fe44:	2800      	cmp	r0, #0
 800fe46:	d169      	bne.n	800ff1c <__gethex+0x11c>
 800fe48:	f898 0001 	ldrb.w	r0, [r8, #1]
 800fe4c:	465d      	mov	r5, fp
 800fe4e:	f7ff ffc2 	bl	800fdd6 <__hexdig_fun>
 800fe52:	2800      	cmp	r0, #0
 800fe54:	d064      	beq.n	800ff20 <__gethex+0x120>
 800fe56:	465a      	mov	r2, fp
 800fe58:	7810      	ldrb	r0, [r2, #0]
 800fe5a:	4690      	mov	r8, r2
 800fe5c:	2830      	cmp	r0, #48	; 0x30
 800fe5e:	f102 0201 	add.w	r2, r2, #1
 800fe62:	d0f9      	beq.n	800fe58 <__gethex+0x58>
 800fe64:	f7ff ffb7 	bl	800fdd6 <__hexdig_fun>
 800fe68:	2301      	movs	r3, #1
 800fe6a:	fab0 f480 	clz	r4, r0
 800fe6e:	465e      	mov	r6, fp
 800fe70:	0964      	lsrs	r4, r4, #5
 800fe72:	9301      	str	r3, [sp, #4]
 800fe74:	4642      	mov	r2, r8
 800fe76:	4615      	mov	r5, r2
 800fe78:	7828      	ldrb	r0, [r5, #0]
 800fe7a:	3201      	adds	r2, #1
 800fe7c:	f7ff ffab 	bl	800fdd6 <__hexdig_fun>
 800fe80:	2800      	cmp	r0, #0
 800fe82:	d1f8      	bne.n	800fe76 <__gethex+0x76>
 800fe84:	2201      	movs	r2, #1
 800fe86:	4628      	mov	r0, r5
 800fe88:	4994      	ldr	r1, [pc, #592]	; (80100dc <__gethex+0x2dc>)
 800fe8a:	f7fe f977 	bl	800e17c <strncmp>
 800fe8e:	b978      	cbnz	r0, 800feb0 <__gethex+0xb0>
 800fe90:	b946      	cbnz	r6, 800fea4 <__gethex+0xa4>
 800fe92:	1c6e      	adds	r6, r5, #1
 800fe94:	4632      	mov	r2, r6
 800fe96:	4615      	mov	r5, r2
 800fe98:	7828      	ldrb	r0, [r5, #0]
 800fe9a:	3201      	adds	r2, #1
 800fe9c:	f7ff ff9b 	bl	800fdd6 <__hexdig_fun>
 800fea0:	2800      	cmp	r0, #0
 800fea2:	d1f8      	bne.n	800fe96 <__gethex+0x96>
 800fea4:	1b73      	subs	r3, r6, r5
 800fea6:	009e      	lsls	r6, r3, #2
 800fea8:	e004      	b.n	800feb4 <__gethex+0xb4>
 800feaa:	2400      	movs	r4, #0
 800feac:	4626      	mov	r6, r4
 800feae:	e7e1      	b.n	800fe74 <__gethex+0x74>
 800feb0:	2e00      	cmp	r6, #0
 800feb2:	d1f7      	bne.n	800fea4 <__gethex+0xa4>
 800feb4:	782b      	ldrb	r3, [r5, #0]
 800feb6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800feba:	2b50      	cmp	r3, #80	; 0x50
 800febc:	d13d      	bne.n	800ff3a <__gethex+0x13a>
 800febe:	786b      	ldrb	r3, [r5, #1]
 800fec0:	2b2b      	cmp	r3, #43	; 0x2b
 800fec2:	d02f      	beq.n	800ff24 <__gethex+0x124>
 800fec4:	2b2d      	cmp	r3, #45	; 0x2d
 800fec6:	d031      	beq.n	800ff2c <__gethex+0x12c>
 800fec8:	f04f 0b00 	mov.w	fp, #0
 800fecc:	1c69      	adds	r1, r5, #1
 800fece:	7808      	ldrb	r0, [r1, #0]
 800fed0:	f7ff ff81 	bl	800fdd6 <__hexdig_fun>
 800fed4:	1e42      	subs	r2, r0, #1
 800fed6:	b2d2      	uxtb	r2, r2
 800fed8:	2a18      	cmp	r2, #24
 800feda:	d82e      	bhi.n	800ff3a <__gethex+0x13a>
 800fedc:	f1a0 0210 	sub.w	r2, r0, #16
 800fee0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fee4:	f7ff ff77 	bl	800fdd6 <__hexdig_fun>
 800fee8:	f100 3cff 	add.w	ip, r0, #4294967295
 800feec:	fa5f fc8c 	uxtb.w	ip, ip
 800fef0:	f1bc 0f18 	cmp.w	ip, #24
 800fef4:	d91d      	bls.n	800ff32 <__gethex+0x132>
 800fef6:	f1bb 0f00 	cmp.w	fp, #0
 800fefa:	d000      	beq.n	800fefe <__gethex+0xfe>
 800fefc:	4252      	negs	r2, r2
 800fefe:	4416      	add	r6, r2
 800ff00:	f8ca 1000 	str.w	r1, [sl]
 800ff04:	b1dc      	cbz	r4, 800ff3e <__gethex+0x13e>
 800ff06:	9b01      	ldr	r3, [sp, #4]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	bf14      	ite	ne
 800ff0c:	f04f 0800 	movne.w	r8, #0
 800ff10:	f04f 0806 	moveq.w	r8, #6
 800ff14:	4640      	mov	r0, r8
 800ff16:	b005      	add	sp, #20
 800ff18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff1c:	4645      	mov	r5, r8
 800ff1e:	4626      	mov	r6, r4
 800ff20:	2401      	movs	r4, #1
 800ff22:	e7c7      	b.n	800feb4 <__gethex+0xb4>
 800ff24:	f04f 0b00 	mov.w	fp, #0
 800ff28:	1ca9      	adds	r1, r5, #2
 800ff2a:	e7d0      	b.n	800fece <__gethex+0xce>
 800ff2c:	f04f 0b01 	mov.w	fp, #1
 800ff30:	e7fa      	b.n	800ff28 <__gethex+0x128>
 800ff32:	230a      	movs	r3, #10
 800ff34:	fb03 0002 	mla	r0, r3, r2, r0
 800ff38:	e7d0      	b.n	800fedc <__gethex+0xdc>
 800ff3a:	4629      	mov	r1, r5
 800ff3c:	e7e0      	b.n	800ff00 <__gethex+0x100>
 800ff3e:	4621      	mov	r1, r4
 800ff40:	eba5 0308 	sub.w	r3, r5, r8
 800ff44:	3b01      	subs	r3, #1
 800ff46:	2b07      	cmp	r3, #7
 800ff48:	dc0a      	bgt.n	800ff60 <__gethex+0x160>
 800ff4a:	4648      	mov	r0, r9
 800ff4c:	f000 faa0 	bl	8010490 <_Balloc>
 800ff50:	4604      	mov	r4, r0
 800ff52:	b940      	cbnz	r0, 800ff66 <__gethex+0x166>
 800ff54:	4602      	mov	r2, r0
 800ff56:	21e4      	movs	r1, #228	; 0xe4
 800ff58:	4b61      	ldr	r3, [pc, #388]	; (80100e0 <__gethex+0x2e0>)
 800ff5a:	4862      	ldr	r0, [pc, #392]	; (80100e4 <__gethex+0x2e4>)
 800ff5c:	f7ff f800 	bl	800ef60 <__assert_func>
 800ff60:	3101      	adds	r1, #1
 800ff62:	105b      	asrs	r3, r3, #1
 800ff64:	e7ef      	b.n	800ff46 <__gethex+0x146>
 800ff66:	2300      	movs	r3, #0
 800ff68:	469b      	mov	fp, r3
 800ff6a:	f100 0a14 	add.w	sl, r0, #20
 800ff6e:	f8cd a004 	str.w	sl, [sp, #4]
 800ff72:	45a8      	cmp	r8, r5
 800ff74:	d344      	bcc.n	8010000 <__gethex+0x200>
 800ff76:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ff7a:	4658      	mov	r0, fp
 800ff7c:	f848 bb04 	str.w	fp, [r8], #4
 800ff80:	eba8 080a 	sub.w	r8, r8, sl
 800ff84:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800ff88:	6122      	str	r2, [r4, #16]
 800ff8a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800ff8e:	f000 fb71 	bl	8010674 <__hi0bits>
 800ff92:	683d      	ldr	r5, [r7, #0]
 800ff94:	eba8 0800 	sub.w	r8, r8, r0
 800ff98:	45a8      	cmp	r8, r5
 800ff9a:	dd59      	ble.n	8010050 <__gethex+0x250>
 800ff9c:	eba8 0805 	sub.w	r8, r8, r5
 800ffa0:	4641      	mov	r1, r8
 800ffa2:	4620      	mov	r0, r4
 800ffa4:	f000 feef 	bl	8010d86 <__any_on>
 800ffa8:	4683      	mov	fp, r0
 800ffaa:	b1b8      	cbz	r0, 800ffdc <__gethex+0x1dc>
 800ffac:	f04f 0b01 	mov.w	fp, #1
 800ffb0:	f108 33ff 	add.w	r3, r8, #4294967295
 800ffb4:	1159      	asrs	r1, r3, #5
 800ffb6:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ffba:	f003 021f 	and.w	r2, r3, #31
 800ffbe:	fa0b f202 	lsl.w	r2, fp, r2
 800ffc2:	420a      	tst	r2, r1
 800ffc4:	d00a      	beq.n	800ffdc <__gethex+0x1dc>
 800ffc6:	455b      	cmp	r3, fp
 800ffc8:	dd06      	ble.n	800ffd8 <__gethex+0x1d8>
 800ffca:	4620      	mov	r0, r4
 800ffcc:	f1a8 0102 	sub.w	r1, r8, #2
 800ffd0:	f000 fed9 	bl	8010d86 <__any_on>
 800ffd4:	2800      	cmp	r0, #0
 800ffd6:	d138      	bne.n	801004a <__gethex+0x24a>
 800ffd8:	f04f 0b02 	mov.w	fp, #2
 800ffdc:	4641      	mov	r1, r8
 800ffde:	4620      	mov	r0, r4
 800ffe0:	f7ff fea6 	bl	800fd30 <rshift>
 800ffe4:	4446      	add	r6, r8
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	42b3      	cmp	r3, r6
 800ffea:	da41      	bge.n	8010070 <__gethex+0x270>
 800ffec:	4621      	mov	r1, r4
 800ffee:	4648      	mov	r0, r9
 800fff0:	f000 fa8e 	bl	8010510 <_Bfree>
 800fff4:	2300      	movs	r3, #0
 800fff6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fff8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800fffc:	6013      	str	r3, [r2, #0]
 800fffe:	e789      	b.n	800ff14 <__gethex+0x114>
 8010000:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8010004:	2a2e      	cmp	r2, #46	; 0x2e
 8010006:	d014      	beq.n	8010032 <__gethex+0x232>
 8010008:	2b20      	cmp	r3, #32
 801000a:	d106      	bne.n	801001a <__gethex+0x21a>
 801000c:	9b01      	ldr	r3, [sp, #4]
 801000e:	f843 bb04 	str.w	fp, [r3], #4
 8010012:	f04f 0b00 	mov.w	fp, #0
 8010016:	9301      	str	r3, [sp, #4]
 8010018:	465b      	mov	r3, fp
 801001a:	7828      	ldrb	r0, [r5, #0]
 801001c:	9303      	str	r3, [sp, #12]
 801001e:	f7ff feda 	bl	800fdd6 <__hexdig_fun>
 8010022:	9b03      	ldr	r3, [sp, #12]
 8010024:	f000 000f 	and.w	r0, r0, #15
 8010028:	4098      	lsls	r0, r3
 801002a:	ea4b 0b00 	orr.w	fp, fp, r0
 801002e:	3304      	adds	r3, #4
 8010030:	e79f      	b.n	800ff72 <__gethex+0x172>
 8010032:	45a8      	cmp	r8, r5
 8010034:	d8e8      	bhi.n	8010008 <__gethex+0x208>
 8010036:	2201      	movs	r2, #1
 8010038:	4628      	mov	r0, r5
 801003a:	4928      	ldr	r1, [pc, #160]	; (80100dc <__gethex+0x2dc>)
 801003c:	9303      	str	r3, [sp, #12]
 801003e:	f7fe f89d 	bl	800e17c <strncmp>
 8010042:	9b03      	ldr	r3, [sp, #12]
 8010044:	2800      	cmp	r0, #0
 8010046:	d1df      	bne.n	8010008 <__gethex+0x208>
 8010048:	e793      	b.n	800ff72 <__gethex+0x172>
 801004a:	f04f 0b03 	mov.w	fp, #3
 801004e:	e7c5      	b.n	800ffdc <__gethex+0x1dc>
 8010050:	da0b      	bge.n	801006a <__gethex+0x26a>
 8010052:	eba5 0808 	sub.w	r8, r5, r8
 8010056:	4621      	mov	r1, r4
 8010058:	4642      	mov	r2, r8
 801005a:	4648      	mov	r0, r9
 801005c:	f000 fc70 	bl	8010940 <__lshift>
 8010060:	4604      	mov	r4, r0
 8010062:	eba6 0608 	sub.w	r6, r6, r8
 8010066:	f100 0a14 	add.w	sl, r0, #20
 801006a:	f04f 0b00 	mov.w	fp, #0
 801006e:	e7ba      	b.n	800ffe6 <__gethex+0x1e6>
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	42b3      	cmp	r3, r6
 8010074:	dd74      	ble.n	8010160 <__gethex+0x360>
 8010076:	1b9e      	subs	r6, r3, r6
 8010078:	42b5      	cmp	r5, r6
 801007a:	dc35      	bgt.n	80100e8 <__gethex+0x2e8>
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	2b02      	cmp	r3, #2
 8010080:	d023      	beq.n	80100ca <__gethex+0x2ca>
 8010082:	2b03      	cmp	r3, #3
 8010084:	d025      	beq.n	80100d2 <__gethex+0x2d2>
 8010086:	2b01      	cmp	r3, #1
 8010088:	d115      	bne.n	80100b6 <__gethex+0x2b6>
 801008a:	42b5      	cmp	r5, r6
 801008c:	d113      	bne.n	80100b6 <__gethex+0x2b6>
 801008e:	2d01      	cmp	r5, #1
 8010090:	d10b      	bne.n	80100aa <__gethex+0x2aa>
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	9a02      	ldr	r2, [sp, #8]
 8010096:	f04f 0862 	mov.w	r8, #98	; 0x62
 801009a:	6013      	str	r3, [r2, #0]
 801009c:	2301      	movs	r3, #1
 801009e:	6123      	str	r3, [r4, #16]
 80100a0:	f8ca 3000 	str.w	r3, [sl]
 80100a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80100a6:	601c      	str	r4, [r3, #0]
 80100a8:	e734      	b.n	800ff14 <__gethex+0x114>
 80100aa:	4620      	mov	r0, r4
 80100ac:	1e69      	subs	r1, r5, #1
 80100ae:	f000 fe6a 	bl	8010d86 <__any_on>
 80100b2:	2800      	cmp	r0, #0
 80100b4:	d1ed      	bne.n	8010092 <__gethex+0x292>
 80100b6:	4621      	mov	r1, r4
 80100b8:	4648      	mov	r0, r9
 80100ba:	f000 fa29 	bl	8010510 <_Bfree>
 80100be:	2300      	movs	r3, #0
 80100c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80100c2:	f04f 0850 	mov.w	r8, #80	; 0x50
 80100c6:	6013      	str	r3, [r2, #0]
 80100c8:	e724      	b.n	800ff14 <__gethex+0x114>
 80100ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d1f2      	bne.n	80100b6 <__gethex+0x2b6>
 80100d0:	e7df      	b.n	8010092 <__gethex+0x292>
 80100d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d1dc      	bne.n	8010092 <__gethex+0x292>
 80100d8:	e7ed      	b.n	80100b6 <__gethex+0x2b6>
 80100da:	bf00      	nop
 80100dc:	08012002 	.word	0x08012002
 80100e0:	08012353 	.word	0x08012353
 80100e4:	08012364 	.word	0x08012364
 80100e8:	f106 38ff 	add.w	r8, r6, #4294967295
 80100ec:	f1bb 0f00 	cmp.w	fp, #0
 80100f0:	d133      	bne.n	801015a <__gethex+0x35a>
 80100f2:	f1b8 0f00 	cmp.w	r8, #0
 80100f6:	d004      	beq.n	8010102 <__gethex+0x302>
 80100f8:	4641      	mov	r1, r8
 80100fa:	4620      	mov	r0, r4
 80100fc:	f000 fe43 	bl	8010d86 <__any_on>
 8010100:	4683      	mov	fp, r0
 8010102:	2301      	movs	r3, #1
 8010104:	ea4f 1268 	mov.w	r2, r8, asr #5
 8010108:	f008 081f 	and.w	r8, r8, #31
 801010c:	fa03 f308 	lsl.w	r3, r3, r8
 8010110:	f04f 0802 	mov.w	r8, #2
 8010114:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010118:	4631      	mov	r1, r6
 801011a:	4213      	tst	r3, r2
 801011c:	4620      	mov	r0, r4
 801011e:	bf18      	it	ne
 8010120:	f04b 0b02 	orrne.w	fp, fp, #2
 8010124:	1bad      	subs	r5, r5, r6
 8010126:	f7ff fe03 	bl	800fd30 <rshift>
 801012a:	687e      	ldr	r6, [r7, #4]
 801012c:	f1bb 0f00 	cmp.w	fp, #0
 8010130:	d04a      	beq.n	80101c8 <__gethex+0x3c8>
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	2b02      	cmp	r3, #2
 8010136:	d016      	beq.n	8010166 <__gethex+0x366>
 8010138:	2b03      	cmp	r3, #3
 801013a:	d018      	beq.n	801016e <__gethex+0x36e>
 801013c:	2b01      	cmp	r3, #1
 801013e:	d109      	bne.n	8010154 <__gethex+0x354>
 8010140:	f01b 0f02 	tst.w	fp, #2
 8010144:	d006      	beq.n	8010154 <__gethex+0x354>
 8010146:	f8da 3000 	ldr.w	r3, [sl]
 801014a:	ea4b 0b03 	orr.w	fp, fp, r3
 801014e:	f01b 0f01 	tst.w	fp, #1
 8010152:	d10f      	bne.n	8010174 <__gethex+0x374>
 8010154:	f048 0810 	orr.w	r8, r8, #16
 8010158:	e036      	b.n	80101c8 <__gethex+0x3c8>
 801015a:	f04f 0b01 	mov.w	fp, #1
 801015e:	e7d0      	b.n	8010102 <__gethex+0x302>
 8010160:	f04f 0801 	mov.w	r8, #1
 8010164:	e7e2      	b.n	801012c <__gethex+0x32c>
 8010166:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010168:	f1c3 0301 	rsb	r3, r3, #1
 801016c:	930f      	str	r3, [sp, #60]	; 0x3c
 801016e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010170:	2b00      	cmp	r3, #0
 8010172:	d0ef      	beq.n	8010154 <__gethex+0x354>
 8010174:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010178:	f104 0214 	add.w	r2, r4, #20
 801017c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8010180:	9301      	str	r3, [sp, #4]
 8010182:	2300      	movs	r3, #0
 8010184:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8010188:	4694      	mov	ip, r2
 801018a:	f852 1b04 	ldr.w	r1, [r2], #4
 801018e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8010192:	d01e      	beq.n	80101d2 <__gethex+0x3d2>
 8010194:	3101      	adds	r1, #1
 8010196:	f8cc 1000 	str.w	r1, [ip]
 801019a:	f1b8 0f02 	cmp.w	r8, #2
 801019e:	f104 0214 	add.w	r2, r4, #20
 80101a2:	d13d      	bne.n	8010220 <__gethex+0x420>
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	3b01      	subs	r3, #1
 80101a8:	42ab      	cmp	r3, r5
 80101aa:	d10b      	bne.n	80101c4 <__gethex+0x3c4>
 80101ac:	2301      	movs	r3, #1
 80101ae:	1169      	asrs	r1, r5, #5
 80101b0:	f005 051f 	and.w	r5, r5, #31
 80101b4:	fa03 f505 	lsl.w	r5, r3, r5
 80101b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80101bc:	421d      	tst	r5, r3
 80101be:	bf18      	it	ne
 80101c0:	f04f 0801 	movne.w	r8, #1
 80101c4:	f048 0820 	orr.w	r8, r8, #32
 80101c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80101ca:	601c      	str	r4, [r3, #0]
 80101cc:	9b02      	ldr	r3, [sp, #8]
 80101ce:	601e      	str	r6, [r3, #0]
 80101d0:	e6a0      	b.n	800ff14 <__gethex+0x114>
 80101d2:	4290      	cmp	r0, r2
 80101d4:	f842 3c04 	str.w	r3, [r2, #-4]
 80101d8:	d8d6      	bhi.n	8010188 <__gethex+0x388>
 80101da:	68a2      	ldr	r2, [r4, #8]
 80101dc:	4593      	cmp	fp, r2
 80101de:	db17      	blt.n	8010210 <__gethex+0x410>
 80101e0:	6861      	ldr	r1, [r4, #4]
 80101e2:	4648      	mov	r0, r9
 80101e4:	3101      	adds	r1, #1
 80101e6:	f000 f953 	bl	8010490 <_Balloc>
 80101ea:	4682      	mov	sl, r0
 80101ec:	b918      	cbnz	r0, 80101f6 <__gethex+0x3f6>
 80101ee:	4602      	mov	r2, r0
 80101f0:	2184      	movs	r1, #132	; 0x84
 80101f2:	4b1a      	ldr	r3, [pc, #104]	; (801025c <__gethex+0x45c>)
 80101f4:	e6b1      	b.n	800ff5a <__gethex+0x15a>
 80101f6:	6922      	ldr	r2, [r4, #16]
 80101f8:	f104 010c 	add.w	r1, r4, #12
 80101fc:	3202      	adds	r2, #2
 80101fe:	0092      	lsls	r2, r2, #2
 8010200:	300c      	adds	r0, #12
 8010202:	f7fe fe94 	bl	800ef2e <memcpy>
 8010206:	4621      	mov	r1, r4
 8010208:	4648      	mov	r0, r9
 801020a:	f000 f981 	bl	8010510 <_Bfree>
 801020e:	4654      	mov	r4, sl
 8010210:	6922      	ldr	r2, [r4, #16]
 8010212:	1c51      	adds	r1, r2, #1
 8010214:	6121      	str	r1, [r4, #16]
 8010216:	2101      	movs	r1, #1
 8010218:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801021c:	6151      	str	r1, [r2, #20]
 801021e:	e7bc      	b.n	801019a <__gethex+0x39a>
 8010220:	6921      	ldr	r1, [r4, #16]
 8010222:	4559      	cmp	r1, fp
 8010224:	dd0b      	ble.n	801023e <__gethex+0x43e>
 8010226:	2101      	movs	r1, #1
 8010228:	4620      	mov	r0, r4
 801022a:	f7ff fd81 	bl	800fd30 <rshift>
 801022e:	68bb      	ldr	r3, [r7, #8]
 8010230:	3601      	adds	r6, #1
 8010232:	42b3      	cmp	r3, r6
 8010234:	f6ff aeda 	blt.w	800ffec <__gethex+0x1ec>
 8010238:	f04f 0801 	mov.w	r8, #1
 801023c:	e7c2      	b.n	80101c4 <__gethex+0x3c4>
 801023e:	f015 051f 	ands.w	r5, r5, #31
 8010242:	d0f9      	beq.n	8010238 <__gethex+0x438>
 8010244:	9b01      	ldr	r3, [sp, #4]
 8010246:	f1c5 0520 	rsb	r5, r5, #32
 801024a:	441a      	add	r2, r3
 801024c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8010250:	f000 fa10 	bl	8010674 <__hi0bits>
 8010254:	42a8      	cmp	r0, r5
 8010256:	dbe6      	blt.n	8010226 <__gethex+0x426>
 8010258:	e7ee      	b.n	8010238 <__gethex+0x438>
 801025a:	bf00      	nop
 801025c:	08012353 	.word	0x08012353

08010260 <L_shift>:
 8010260:	f1c2 0208 	rsb	r2, r2, #8
 8010264:	0092      	lsls	r2, r2, #2
 8010266:	b570      	push	{r4, r5, r6, lr}
 8010268:	f1c2 0620 	rsb	r6, r2, #32
 801026c:	6843      	ldr	r3, [r0, #4]
 801026e:	6804      	ldr	r4, [r0, #0]
 8010270:	fa03 f506 	lsl.w	r5, r3, r6
 8010274:	432c      	orrs	r4, r5
 8010276:	40d3      	lsrs	r3, r2
 8010278:	6004      	str	r4, [r0, #0]
 801027a:	f840 3f04 	str.w	r3, [r0, #4]!
 801027e:	4288      	cmp	r0, r1
 8010280:	d3f4      	bcc.n	801026c <L_shift+0xc>
 8010282:	bd70      	pop	{r4, r5, r6, pc}

08010284 <__match>:
 8010284:	b530      	push	{r4, r5, lr}
 8010286:	6803      	ldr	r3, [r0, #0]
 8010288:	3301      	adds	r3, #1
 801028a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801028e:	b914      	cbnz	r4, 8010296 <__match+0x12>
 8010290:	6003      	str	r3, [r0, #0]
 8010292:	2001      	movs	r0, #1
 8010294:	bd30      	pop	{r4, r5, pc}
 8010296:	f813 2b01 	ldrb.w	r2, [r3], #1
 801029a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801029e:	2d19      	cmp	r5, #25
 80102a0:	bf98      	it	ls
 80102a2:	3220      	addls	r2, #32
 80102a4:	42a2      	cmp	r2, r4
 80102a6:	d0f0      	beq.n	801028a <__match+0x6>
 80102a8:	2000      	movs	r0, #0
 80102aa:	e7f3      	b.n	8010294 <__match+0x10>

080102ac <__hexnan>:
 80102ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102b0:	2500      	movs	r5, #0
 80102b2:	680b      	ldr	r3, [r1, #0]
 80102b4:	4682      	mov	sl, r0
 80102b6:	115e      	asrs	r6, r3, #5
 80102b8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80102bc:	f013 031f 	ands.w	r3, r3, #31
 80102c0:	bf18      	it	ne
 80102c2:	3604      	addne	r6, #4
 80102c4:	1f37      	subs	r7, r6, #4
 80102c6:	4690      	mov	r8, r2
 80102c8:	46b9      	mov	r9, r7
 80102ca:	463c      	mov	r4, r7
 80102cc:	46ab      	mov	fp, r5
 80102ce:	b087      	sub	sp, #28
 80102d0:	6801      	ldr	r1, [r0, #0]
 80102d2:	9301      	str	r3, [sp, #4]
 80102d4:	f846 5c04 	str.w	r5, [r6, #-4]
 80102d8:	9502      	str	r5, [sp, #8]
 80102da:	784a      	ldrb	r2, [r1, #1]
 80102dc:	1c4b      	adds	r3, r1, #1
 80102de:	9303      	str	r3, [sp, #12]
 80102e0:	b342      	cbz	r2, 8010334 <__hexnan+0x88>
 80102e2:	4610      	mov	r0, r2
 80102e4:	9105      	str	r1, [sp, #20]
 80102e6:	9204      	str	r2, [sp, #16]
 80102e8:	f7ff fd75 	bl	800fdd6 <__hexdig_fun>
 80102ec:	2800      	cmp	r0, #0
 80102ee:	d14f      	bne.n	8010390 <__hexnan+0xe4>
 80102f0:	9a04      	ldr	r2, [sp, #16]
 80102f2:	9905      	ldr	r1, [sp, #20]
 80102f4:	2a20      	cmp	r2, #32
 80102f6:	d818      	bhi.n	801032a <__hexnan+0x7e>
 80102f8:	9b02      	ldr	r3, [sp, #8]
 80102fa:	459b      	cmp	fp, r3
 80102fc:	dd13      	ble.n	8010326 <__hexnan+0x7a>
 80102fe:	454c      	cmp	r4, r9
 8010300:	d206      	bcs.n	8010310 <__hexnan+0x64>
 8010302:	2d07      	cmp	r5, #7
 8010304:	dc04      	bgt.n	8010310 <__hexnan+0x64>
 8010306:	462a      	mov	r2, r5
 8010308:	4649      	mov	r1, r9
 801030a:	4620      	mov	r0, r4
 801030c:	f7ff ffa8 	bl	8010260 <L_shift>
 8010310:	4544      	cmp	r4, r8
 8010312:	d950      	bls.n	80103b6 <__hexnan+0x10a>
 8010314:	2300      	movs	r3, #0
 8010316:	f1a4 0904 	sub.w	r9, r4, #4
 801031a:	f844 3c04 	str.w	r3, [r4, #-4]
 801031e:	461d      	mov	r5, r3
 8010320:	464c      	mov	r4, r9
 8010322:	f8cd b008 	str.w	fp, [sp, #8]
 8010326:	9903      	ldr	r1, [sp, #12]
 8010328:	e7d7      	b.n	80102da <__hexnan+0x2e>
 801032a:	2a29      	cmp	r2, #41	; 0x29
 801032c:	d155      	bne.n	80103da <__hexnan+0x12e>
 801032e:	3102      	adds	r1, #2
 8010330:	f8ca 1000 	str.w	r1, [sl]
 8010334:	f1bb 0f00 	cmp.w	fp, #0
 8010338:	d04f      	beq.n	80103da <__hexnan+0x12e>
 801033a:	454c      	cmp	r4, r9
 801033c:	d206      	bcs.n	801034c <__hexnan+0xa0>
 801033e:	2d07      	cmp	r5, #7
 8010340:	dc04      	bgt.n	801034c <__hexnan+0xa0>
 8010342:	462a      	mov	r2, r5
 8010344:	4649      	mov	r1, r9
 8010346:	4620      	mov	r0, r4
 8010348:	f7ff ff8a 	bl	8010260 <L_shift>
 801034c:	4544      	cmp	r4, r8
 801034e:	d934      	bls.n	80103ba <__hexnan+0x10e>
 8010350:	4623      	mov	r3, r4
 8010352:	f1a8 0204 	sub.w	r2, r8, #4
 8010356:	f853 1b04 	ldr.w	r1, [r3], #4
 801035a:	429f      	cmp	r7, r3
 801035c:	f842 1f04 	str.w	r1, [r2, #4]!
 8010360:	d2f9      	bcs.n	8010356 <__hexnan+0xaa>
 8010362:	1b3b      	subs	r3, r7, r4
 8010364:	f023 0303 	bic.w	r3, r3, #3
 8010368:	3304      	adds	r3, #4
 801036a:	3e03      	subs	r6, #3
 801036c:	3401      	adds	r4, #1
 801036e:	42a6      	cmp	r6, r4
 8010370:	bf38      	it	cc
 8010372:	2304      	movcc	r3, #4
 8010374:	2200      	movs	r2, #0
 8010376:	4443      	add	r3, r8
 8010378:	f843 2b04 	str.w	r2, [r3], #4
 801037c:	429f      	cmp	r7, r3
 801037e:	d2fb      	bcs.n	8010378 <__hexnan+0xcc>
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	b91b      	cbnz	r3, 801038c <__hexnan+0xe0>
 8010384:	4547      	cmp	r7, r8
 8010386:	d126      	bne.n	80103d6 <__hexnan+0x12a>
 8010388:	2301      	movs	r3, #1
 801038a:	603b      	str	r3, [r7, #0]
 801038c:	2005      	movs	r0, #5
 801038e:	e025      	b.n	80103dc <__hexnan+0x130>
 8010390:	3501      	adds	r5, #1
 8010392:	2d08      	cmp	r5, #8
 8010394:	f10b 0b01 	add.w	fp, fp, #1
 8010398:	dd06      	ble.n	80103a8 <__hexnan+0xfc>
 801039a:	4544      	cmp	r4, r8
 801039c:	d9c3      	bls.n	8010326 <__hexnan+0x7a>
 801039e:	2300      	movs	r3, #0
 80103a0:	2501      	movs	r5, #1
 80103a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80103a6:	3c04      	subs	r4, #4
 80103a8:	6822      	ldr	r2, [r4, #0]
 80103aa:	f000 000f 	and.w	r0, r0, #15
 80103ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80103b2:	6020      	str	r0, [r4, #0]
 80103b4:	e7b7      	b.n	8010326 <__hexnan+0x7a>
 80103b6:	2508      	movs	r5, #8
 80103b8:	e7b5      	b.n	8010326 <__hexnan+0x7a>
 80103ba:	9b01      	ldr	r3, [sp, #4]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d0df      	beq.n	8010380 <__hexnan+0xd4>
 80103c0:	f04f 32ff 	mov.w	r2, #4294967295
 80103c4:	f1c3 0320 	rsb	r3, r3, #32
 80103c8:	40da      	lsrs	r2, r3
 80103ca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80103ce:	4013      	ands	r3, r2
 80103d0:	f846 3c04 	str.w	r3, [r6, #-4]
 80103d4:	e7d4      	b.n	8010380 <__hexnan+0xd4>
 80103d6:	3f04      	subs	r7, #4
 80103d8:	e7d2      	b.n	8010380 <__hexnan+0xd4>
 80103da:	2004      	movs	r0, #4
 80103dc:	b007      	add	sp, #28
 80103de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080103e4 <_findenv_r>:
 80103e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103e8:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8010458 <_findenv_r+0x74>
 80103ec:	4607      	mov	r7, r0
 80103ee:	4689      	mov	r9, r1
 80103f0:	4616      	mov	r6, r2
 80103f2:	f001 f851 	bl	8011498 <__env_lock>
 80103f6:	f8da 4000 	ldr.w	r4, [sl]
 80103fa:	b134      	cbz	r4, 801040a <_findenv_r+0x26>
 80103fc:	464b      	mov	r3, r9
 80103fe:	4698      	mov	r8, r3
 8010400:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010404:	b13a      	cbz	r2, 8010416 <_findenv_r+0x32>
 8010406:	2a3d      	cmp	r2, #61	; 0x3d
 8010408:	d1f9      	bne.n	80103fe <_findenv_r+0x1a>
 801040a:	4638      	mov	r0, r7
 801040c:	f001 f84a 	bl	80114a4 <__env_unlock>
 8010410:	2000      	movs	r0, #0
 8010412:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010416:	eba8 0809 	sub.w	r8, r8, r9
 801041a:	46a3      	mov	fp, r4
 801041c:	f854 0b04 	ldr.w	r0, [r4], #4
 8010420:	2800      	cmp	r0, #0
 8010422:	d0f2      	beq.n	801040a <_findenv_r+0x26>
 8010424:	4642      	mov	r2, r8
 8010426:	4649      	mov	r1, r9
 8010428:	f7fd fea8 	bl	800e17c <strncmp>
 801042c:	2800      	cmp	r0, #0
 801042e:	d1f4      	bne.n	801041a <_findenv_r+0x36>
 8010430:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010434:	eb03 0508 	add.w	r5, r3, r8
 8010438:	f813 3008 	ldrb.w	r3, [r3, r8]
 801043c:	2b3d      	cmp	r3, #61	; 0x3d
 801043e:	d1ec      	bne.n	801041a <_findenv_r+0x36>
 8010440:	f8da 3000 	ldr.w	r3, [sl]
 8010444:	4638      	mov	r0, r7
 8010446:	ebab 0303 	sub.w	r3, fp, r3
 801044a:	109b      	asrs	r3, r3, #2
 801044c:	6033      	str	r3, [r6, #0]
 801044e:	f001 f829 	bl	80114a4 <__env_unlock>
 8010452:	1c68      	adds	r0, r5, #1
 8010454:	e7dd      	b.n	8010412 <_findenv_r+0x2e>
 8010456:	bf00      	nop
 8010458:	200000dc 	.word	0x200000dc

0801045c <_getenv_r>:
 801045c:	b507      	push	{r0, r1, r2, lr}
 801045e:	aa01      	add	r2, sp, #4
 8010460:	f7ff ffc0 	bl	80103e4 <_findenv_r>
 8010464:	b003      	add	sp, #12
 8010466:	f85d fb04 	ldr.w	pc, [sp], #4

0801046a <__ascii_mbtowc>:
 801046a:	b082      	sub	sp, #8
 801046c:	b901      	cbnz	r1, 8010470 <__ascii_mbtowc+0x6>
 801046e:	a901      	add	r1, sp, #4
 8010470:	b142      	cbz	r2, 8010484 <__ascii_mbtowc+0x1a>
 8010472:	b14b      	cbz	r3, 8010488 <__ascii_mbtowc+0x1e>
 8010474:	7813      	ldrb	r3, [r2, #0]
 8010476:	600b      	str	r3, [r1, #0]
 8010478:	7812      	ldrb	r2, [r2, #0]
 801047a:	1e10      	subs	r0, r2, #0
 801047c:	bf18      	it	ne
 801047e:	2001      	movne	r0, #1
 8010480:	b002      	add	sp, #8
 8010482:	4770      	bx	lr
 8010484:	4610      	mov	r0, r2
 8010486:	e7fb      	b.n	8010480 <__ascii_mbtowc+0x16>
 8010488:	f06f 0001 	mvn.w	r0, #1
 801048c:	e7f8      	b.n	8010480 <__ascii_mbtowc+0x16>
	...

08010490 <_Balloc>:
 8010490:	b570      	push	{r4, r5, r6, lr}
 8010492:	69c6      	ldr	r6, [r0, #28]
 8010494:	4604      	mov	r4, r0
 8010496:	460d      	mov	r5, r1
 8010498:	b976      	cbnz	r6, 80104b8 <_Balloc+0x28>
 801049a:	2010      	movs	r0, #16
 801049c:	f7fc f92e 	bl	800c6fc <malloc>
 80104a0:	4602      	mov	r2, r0
 80104a2:	61e0      	str	r0, [r4, #28]
 80104a4:	b920      	cbnz	r0, 80104b0 <_Balloc+0x20>
 80104a6:	216b      	movs	r1, #107	; 0x6b
 80104a8:	4b17      	ldr	r3, [pc, #92]	; (8010508 <_Balloc+0x78>)
 80104aa:	4818      	ldr	r0, [pc, #96]	; (801050c <_Balloc+0x7c>)
 80104ac:	f7fe fd58 	bl	800ef60 <__assert_func>
 80104b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80104b4:	6006      	str	r6, [r0, #0]
 80104b6:	60c6      	str	r6, [r0, #12]
 80104b8:	69e6      	ldr	r6, [r4, #28]
 80104ba:	68f3      	ldr	r3, [r6, #12]
 80104bc:	b183      	cbz	r3, 80104e0 <_Balloc+0x50>
 80104be:	69e3      	ldr	r3, [r4, #28]
 80104c0:	68db      	ldr	r3, [r3, #12]
 80104c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80104c6:	b9b8      	cbnz	r0, 80104f8 <_Balloc+0x68>
 80104c8:	2101      	movs	r1, #1
 80104ca:	fa01 f605 	lsl.w	r6, r1, r5
 80104ce:	1d72      	adds	r2, r6, #5
 80104d0:	4620      	mov	r0, r4
 80104d2:	0092      	lsls	r2, r2, #2
 80104d4:	f000 ffcb 	bl	801146e <_calloc_r>
 80104d8:	b160      	cbz	r0, 80104f4 <_Balloc+0x64>
 80104da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80104de:	e00e      	b.n	80104fe <_Balloc+0x6e>
 80104e0:	2221      	movs	r2, #33	; 0x21
 80104e2:	2104      	movs	r1, #4
 80104e4:	4620      	mov	r0, r4
 80104e6:	f000 ffc2 	bl	801146e <_calloc_r>
 80104ea:	69e3      	ldr	r3, [r4, #28]
 80104ec:	60f0      	str	r0, [r6, #12]
 80104ee:	68db      	ldr	r3, [r3, #12]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d1e4      	bne.n	80104be <_Balloc+0x2e>
 80104f4:	2000      	movs	r0, #0
 80104f6:	bd70      	pop	{r4, r5, r6, pc}
 80104f8:	6802      	ldr	r2, [r0, #0]
 80104fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80104fe:	2300      	movs	r3, #0
 8010500:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010504:	e7f7      	b.n	80104f6 <_Balloc+0x66>
 8010506:	bf00      	nop
 8010508:	0801218b 	.word	0x0801218b
 801050c:	080123c4 	.word	0x080123c4

08010510 <_Bfree>:
 8010510:	b570      	push	{r4, r5, r6, lr}
 8010512:	69c6      	ldr	r6, [r0, #28]
 8010514:	4605      	mov	r5, r0
 8010516:	460c      	mov	r4, r1
 8010518:	b976      	cbnz	r6, 8010538 <_Bfree+0x28>
 801051a:	2010      	movs	r0, #16
 801051c:	f7fc f8ee 	bl	800c6fc <malloc>
 8010520:	4602      	mov	r2, r0
 8010522:	61e8      	str	r0, [r5, #28]
 8010524:	b920      	cbnz	r0, 8010530 <_Bfree+0x20>
 8010526:	218f      	movs	r1, #143	; 0x8f
 8010528:	4b08      	ldr	r3, [pc, #32]	; (801054c <_Bfree+0x3c>)
 801052a:	4809      	ldr	r0, [pc, #36]	; (8010550 <_Bfree+0x40>)
 801052c:	f7fe fd18 	bl	800ef60 <__assert_func>
 8010530:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010534:	6006      	str	r6, [r0, #0]
 8010536:	60c6      	str	r6, [r0, #12]
 8010538:	b13c      	cbz	r4, 801054a <_Bfree+0x3a>
 801053a:	69eb      	ldr	r3, [r5, #28]
 801053c:	6862      	ldr	r2, [r4, #4]
 801053e:	68db      	ldr	r3, [r3, #12]
 8010540:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010544:	6021      	str	r1, [r4, #0]
 8010546:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801054a:	bd70      	pop	{r4, r5, r6, pc}
 801054c:	0801218b 	.word	0x0801218b
 8010550:	080123c4 	.word	0x080123c4

08010554 <__multadd>:
 8010554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010558:	4607      	mov	r7, r0
 801055a:	460c      	mov	r4, r1
 801055c:	461e      	mov	r6, r3
 801055e:	2000      	movs	r0, #0
 8010560:	690d      	ldr	r5, [r1, #16]
 8010562:	f101 0c14 	add.w	ip, r1, #20
 8010566:	f8dc 3000 	ldr.w	r3, [ip]
 801056a:	3001      	adds	r0, #1
 801056c:	b299      	uxth	r1, r3
 801056e:	fb02 6101 	mla	r1, r2, r1, r6
 8010572:	0c1e      	lsrs	r6, r3, #16
 8010574:	0c0b      	lsrs	r3, r1, #16
 8010576:	fb02 3306 	mla	r3, r2, r6, r3
 801057a:	b289      	uxth	r1, r1
 801057c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010580:	4285      	cmp	r5, r0
 8010582:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010586:	f84c 1b04 	str.w	r1, [ip], #4
 801058a:	dcec      	bgt.n	8010566 <__multadd+0x12>
 801058c:	b30e      	cbz	r6, 80105d2 <__multadd+0x7e>
 801058e:	68a3      	ldr	r3, [r4, #8]
 8010590:	42ab      	cmp	r3, r5
 8010592:	dc19      	bgt.n	80105c8 <__multadd+0x74>
 8010594:	6861      	ldr	r1, [r4, #4]
 8010596:	4638      	mov	r0, r7
 8010598:	3101      	adds	r1, #1
 801059a:	f7ff ff79 	bl	8010490 <_Balloc>
 801059e:	4680      	mov	r8, r0
 80105a0:	b928      	cbnz	r0, 80105ae <__multadd+0x5a>
 80105a2:	4602      	mov	r2, r0
 80105a4:	21ba      	movs	r1, #186	; 0xba
 80105a6:	4b0c      	ldr	r3, [pc, #48]	; (80105d8 <__multadd+0x84>)
 80105a8:	480c      	ldr	r0, [pc, #48]	; (80105dc <__multadd+0x88>)
 80105aa:	f7fe fcd9 	bl	800ef60 <__assert_func>
 80105ae:	6922      	ldr	r2, [r4, #16]
 80105b0:	f104 010c 	add.w	r1, r4, #12
 80105b4:	3202      	adds	r2, #2
 80105b6:	0092      	lsls	r2, r2, #2
 80105b8:	300c      	adds	r0, #12
 80105ba:	f7fe fcb8 	bl	800ef2e <memcpy>
 80105be:	4621      	mov	r1, r4
 80105c0:	4638      	mov	r0, r7
 80105c2:	f7ff ffa5 	bl	8010510 <_Bfree>
 80105c6:	4644      	mov	r4, r8
 80105c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80105cc:	3501      	adds	r5, #1
 80105ce:	615e      	str	r6, [r3, #20]
 80105d0:	6125      	str	r5, [r4, #16]
 80105d2:	4620      	mov	r0, r4
 80105d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105d8:	08012353 	.word	0x08012353
 80105dc:	080123c4 	.word	0x080123c4

080105e0 <__s2b>:
 80105e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105e4:	4615      	mov	r5, r2
 80105e6:	2209      	movs	r2, #9
 80105e8:	461f      	mov	r7, r3
 80105ea:	3308      	adds	r3, #8
 80105ec:	460c      	mov	r4, r1
 80105ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80105f2:	4606      	mov	r6, r0
 80105f4:	2201      	movs	r2, #1
 80105f6:	2100      	movs	r1, #0
 80105f8:	429a      	cmp	r2, r3
 80105fa:	db09      	blt.n	8010610 <__s2b+0x30>
 80105fc:	4630      	mov	r0, r6
 80105fe:	f7ff ff47 	bl	8010490 <_Balloc>
 8010602:	b940      	cbnz	r0, 8010616 <__s2b+0x36>
 8010604:	4602      	mov	r2, r0
 8010606:	21d3      	movs	r1, #211	; 0xd3
 8010608:	4b18      	ldr	r3, [pc, #96]	; (801066c <__s2b+0x8c>)
 801060a:	4819      	ldr	r0, [pc, #100]	; (8010670 <__s2b+0x90>)
 801060c:	f7fe fca8 	bl	800ef60 <__assert_func>
 8010610:	0052      	lsls	r2, r2, #1
 8010612:	3101      	adds	r1, #1
 8010614:	e7f0      	b.n	80105f8 <__s2b+0x18>
 8010616:	9b08      	ldr	r3, [sp, #32]
 8010618:	2d09      	cmp	r5, #9
 801061a:	6143      	str	r3, [r0, #20]
 801061c:	f04f 0301 	mov.w	r3, #1
 8010620:	6103      	str	r3, [r0, #16]
 8010622:	dd16      	ble.n	8010652 <__s2b+0x72>
 8010624:	f104 0909 	add.w	r9, r4, #9
 8010628:	46c8      	mov	r8, r9
 801062a:	442c      	add	r4, r5
 801062c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010630:	4601      	mov	r1, r0
 8010632:	220a      	movs	r2, #10
 8010634:	4630      	mov	r0, r6
 8010636:	3b30      	subs	r3, #48	; 0x30
 8010638:	f7ff ff8c 	bl	8010554 <__multadd>
 801063c:	45a0      	cmp	r8, r4
 801063e:	d1f5      	bne.n	801062c <__s2b+0x4c>
 8010640:	f1a5 0408 	sub.w	r4, r5, #8
 8010644:	444c      	add	r4, r9
 8010646:	1b2d      	subs	r5, r5, r4
 8010648:	1963      	adds	r3, r4, r5
 801064a:	42bb      	cmp	r3, r7
 801064c:	db04      	blt.n	8010658 <__s2b+0x78>
 801064e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010652:	2509      	movs	r5, #9
 8010654:	340a      	adds	r4, #10
 8010656:	e7f6      	b.n	8010646 <__s2b+0x66>
 8010658:	f814 3b01 	ldrb.w	r3, [r4], #1
 801065c:	4601      	mov	r1, r0
 801065e:	220a      	movs	r2, #10
 8010660:	4630      	mov	r0, r6
 8010662:	3b30      	subs	r3, #48	; 0x30
 8010664:	f7ff ff76 	bl	8010554 <__multadd>
 8010668:	e7ee      	b.n	8010648 <__s2b+0x68>
 801066a:	bf00      	nop
 801066c:	08012353 	.word	0x08012353
 8010670:	080123c4 	.word	0x080123c4

08010674 <__hi0bits>:
 8010674:	0c02      	lsrs	r2, r0, #16
 8010676:	0412      	lsls	r2, r2, #16
 8010678:	4603      	mov	r3, r0
 801067a:	b9ca      	cbnz	r2, 80106b0 <__hi0bits+0x3c>
 801067c:	0403      	lsls	r3, r0, #16
 801067e:	2010      	movs	r0, #16
 8010680:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010684:	bf04      	itt	eq
 8010686:	021b      	lsleq	r3, r3, #8
 8010688:	3008      	addeq	r0, #8
 801068a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801068e:	bf04      	itt	eq
 8010690:	011b      	lsleq	r3, r3, #4
 8010692:	3004      	addeq	r0, #4
 8010694:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010698:	bf04      	itt	eq
 801069a:	009b      	lsleq	r3, r3, #2
 801069c:	3002      	addeq	r0, #2
 801069e:	2b00      	cmp	r3, #0
 80106a0:	db05      	blt.n	80106ae <__hi0bits+0x3a>
 80106a2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80106a6:	f100 0001 	add.w	r0, r0, #1
 80106aa:	bf08      	it	eq
 80106ac:	2020      	moveq	r0, #32
 80106ae:	4770      	bx	lr
 80106b0:	2000      	movs	r0, #0
 80106b2:	e7e5      	b.n	8010680 <__hi0bits+0xc>

080106b4 <__lo0bits>:
 80106b4:	6803      	ldr	r3, [r0, #0]
 80106b6:	4602      	mov	r2, r0
 80106b8:	f013 0007 	ands.w	r0, r3, #7
 80106bc:	d00b      	beq.n	80106d6 <__lo0bits+0x22>
 80106be:	07d9      	lsls	r1, r3, #31
 80106c0:	d421      	bmi.n	8010706 <__lo0bits+0x52>
 80106c2:	0798      	lsls	r0, r3, #30
 80106c4:	bf49      	itett	mi
 80106c6:	085b      	lsrmi	r3, r3, #1
 80106c8:	089b      	lsrpl	r3, r3, #2
 80106ca:	2001      	movmi	r0, #1
 80106cc:	6013      	strmi	r3, [r2, #0]
 80106ce:	bf5c      	itt	pl
 80106d0:	2002      	movpl	r0, #2
 80106d2:	6013      	strpl	r3, [r2, #0]
 80106d4:	4770      	bx	lr
 80106d6:	b299      	uxth	r1, r3
 80106d8:	b909      	cbnz	r1, 80106de <__lo0bits+0x2a>
 80106da:	2010      	movs	r0, #16
 80106dc:	0c1b      	lsrs	r3, r3, #16
 80106de:	b2d9      	uxtb	r1, r3
 80106e0:	b909      	cbnz	r1, 80106e6 <__lo0bits+0x32>
 80106e2:	3008      	adds	r0, #8
 80106e4:	0a1b      	lsrs	r3, r3, #8
 80106e6:	0719      	lsls	r1, r3, #28
 80106e8:	bf04      	itt	eq
 80106ea:	091b      	lsreq	r3, r3, #4
 80106ec:	3004      	addeq	r0, #4
 80106ee:	0799      	lsls	r1, r3, #30
 80106f0:	bf04      	itt	eq
 80106f2:	089b      	lsreq	r3, r3, #2
 80106f4:	3002      	addeq	r0, #2
 80106f6:	07d9      	lsls	r1, r3, #31
 80106f8:	d403      	bmi.n	8010702 <__lo0bits+0x4e>
 80106fa:	085b      	lsrs	r3, r3, #1
 80106fc:	f100 0001 	add.w	r0, r0, #1
 8010700:	d003      	beq.n	801070a <__lo0bits+0x56>
 8010702:	6013      	str	r3, [r2, #0]
 8010704:	4770      	bx	lr
 8010706:	2000      	movs	r0, #0
 8010708:	4770      	bx	lr
 801070a:	2020      	movs	r0, #32
 801070c:	4770      	bx	lr
	...

08010710 <__i2b>:
 8010710:	b510      	push	{r4, lr}
 8010712:	460c      	mov	r4, r1
 8010714:	2101      	movs	r1, #1
 8010716:	f7ff febb 	bl	8010490 <_Balloc>
 801071a:	4602      	mov	r2, r0
 801071c:	b928      	cbnz	r0, 801072a <__i2b+0x1a>
 801071e:	f240 1145 	movw	r1, #325	; 0x145
 8010722:	4b04      	ldr	r3, [pc, #16]	; (8010734 <__i2b+0x24>)
 8010724:	4804      	ldr	r0, [pc, #16]	; (8010738 <__i2b+0x28>)
 8010726:	f7fe fc1b 	bl	800ef60 <__assert_func>
 801072a:	2301      	movs	r3, #1
 801072c:	6144      	str	r4, [r0, #20]
 801072e:	6103      	str	r3, [r0, #16]
 8010730:	bd10      	pop	{r4, pc}
 8010732:	bf00      	nop
 8010734:	08012353 	.word	0x08012353
 8010738:	080123c4 	.word	0x080123c4

0801073c <__multiply>:
 801073c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010740:	4691      	mov	r9, r2
 8010742:	690a      	ldr	r2, [r1, #16]
 8010744:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010748:	460c      	mov	r4, r1
 801074a:	429a      	cmp	r2, r3
 801074c:	bfbe      	ittt	lt
 801074e:	460b      	movlt	r3, r1
 8010750:	464c      	movlt	r4, r9
 8010752:	4699      	movlt	r9, r3
 8010754:	6927      	ldr	r7, [r4, #16]
 8010756:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801075a:	68a3      	ldr	r3, [r4, #8]
 801075c:	6861      	ldr	r1, [r4, #4]
 801075e:	eb07 060a 	add.w	r6, r7, sl
 8010762:	42b3      	cmp	r3, r6
 8010764:	b085      	sub	sp, #20
 8010766:	bfb8      	it	lt
 8010768:	3101      	addlt	r1, #1
 801076a:	f7ff fe91 	bl	8010490 <_Balloc>
 801076e:	b930      	cbnz	r0, 801077e <__multiply+0x42>
 8010770:	4602      	mov	r2, r0
 8010772:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010776:	4b43      	ldr	r3, [pc, #268]	; (8010884 <__multiply+0x148>)
 8010778:	4843      	ldr	r0, [pc, #268]	; (8010888 <__multiply+0x14c>)
 801077a:	f7fe fbf1 	bl	800ef60 <__assert_func>
 801077e:	f100 0514 	add.w	r5, r0, #20
 8010782:	462b      	mov	r3, r5
 8010784:	2200      	movs	r2, #0
 8010786:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801078a:	4543      	cmp	r3, r8
 801078c:	d321      	bcc.n	80107d2 <__multiply+0x96>
 801078e:	f104 0314 	add.w	r3, r4, #20
 8010792:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010796:	f109 0314 	add.w	r3, r9, #20
 801079a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801079e:	9202      	str	r2, [sp, #8]
 80107a0:	1b3a      	subs	r2, r7, r4
 80107a2:	3a15      	subs	r2, #21
 80107a4:	f022 0203 	bic.w	r2, r2, #3
 80107a8:	3204      	adds	r2, #4
 80107aa:	f104 0115 	add.w	r1, r4, #21
 80107ae:	428f      	cmp	r7, r1
 80107b0:	bf38      	it	cc
 80107b2:	2204      	movcc	r2, #4
 80107b4:	9201      	str	r2, [sp, #4]
 80107b6:	9a02      	ldr	r2, [sp, #8]
 80107b8:	9303      	str	r3, [sp, #12]
 80107ba:	429a      	cmp	r2, r3
 80107bc:	d80c      	bhi.n	80107d8 <__multiply+0x9c>
 80107be:	2e00      	cmp	r6, #0
 80107c0:	dd03      	ble.n	80107ca <__multiply+0x8e>
 80107c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d05a      	beq.n	8010880 <__multiply+0x144>
 80107ca:	6106      	str	r6, [r0, #16]
 80107cc:	b005      	add	sp, #20
 80107ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107d2:	f843 2b04 	str.w	r2, [r3], #4
 80107d6:	e7d8      	b.n	801078a <__multiply+0x4e>
 80107d8:	f8b3 a000 	ldrh.w	sl, [r3]
 80107dc:	f1ba 0f00 	cmp.w	sl, #0
 80107e0:	d023      	beq.n	801082a <__multiply+0xee>
 80107e2:	46a9      	mov	r9, r5
 80107e4:	f04f 0c00 	mov.w	ip, #0
 80107e8:	f104 0e14 	add.w	lr, r4, #20
 80107ec:	f85e 2b04 	ldr.w	r2, [lr], #4
 80107f0:	f8d9 1000 	ldr.w	r1, [r9]
 80107f4:	fa1f fb82 	uxth.w	fp, r2
 80107f8:	b289      	uxth	r1, r1
 80107fa:	fb0a 110b 	mla	r1, sl, fp, r1
 80107fe:	4461      	add	r1, ip
 8010800:	f8d9 c000 	ldr.w	ip, [r9]
 8010804:	0c12      	lsrs	r2, r2, #16
 8010806:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801080a:	fb0a c202 	mla	r2, sl, r2, ip
 801080e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010812:	b289      	uxth	r1, r1
 8010814:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010818:	4577      	cmp	r7, lr
 801081a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801081e:	f849 1b04 	str.w	r1, [r9], #4
 8010822:	d8e3      	bhi.n	80107ec <__multiply+0xb0>
 8010824:	9a01      	ldr	r2, [sp, #4]
 8010826:	f845 c002 	str.w	ip, [r5, r2]
 801082a:	9a03      	ldr	r2, [sp, #12]
 801082c:	3304      	adds	r3, #4
 801082e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010832:	f1b9 0f00 	cmp.w	r9, #0
 8010836:	d021      	beq.n	801087c <__multiply+0x140>
 8010838:	46ae      	mov	lr, r5
 801083a:	f04f 0a00 	mov.w	sl, #0
 801083e:	6829      	ldr	r1, [r5, #0]
 8010840:	f104 0c14 	add.w	ip, r4, #20
 8010844:	f8bc b000 	ldrh.w	fp, [ip]
 8010848:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801084c:	b289      	uxth	r1, r1
 801084e:	fb09 220b 	mla	r2, r9, fp, r2
 8010852:	4452      	add	r2, sl
 8010854:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010858:	f84e 1b04 	str.w	r1, [lr], #4
 801085c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010860:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010864:	f8be 1000 	ldrh.w	r1, [lr]
 8010868:	4567      	cmp	r7, ip
 801086a:	fb09 110a 	mla	r1, r9, sl, r1
 801086e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010872:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010876:	d8e5      	bhi.n	8010844 <__multiply+0x108>
 8010878:	9a01      	ldr	r2, [sp, #4]
 801087a:	50a9      	str	r1, [r5, r2]
 801087c:	3504      	adds	r5, #4
 801087e:	e79a      	b.n	80107b6 <__multiply+0x7a>
 8010880:	3e01      	subs	r6, #1
 8010882:	e79c      	b.n	80107be <__multiply+0x82>
 8010884:	08012353 	.word	0x08012353
 8010888:	080123c4 	.word	0x080123c4

0801088c <__pow5mult>:
 801088c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010890:	4615      	mov	r5, r2
 8010892:	f012 0203 	ands.w	r2, r2, #3
 8010896:	4606      	mov	r6, r0
 8010898:	460f      	mov	r7, r1
 801089a:	d007      	beq.n	80108ac <__pow5mult+0x20>
 801089c:	4c25      	ldr	r4, [pc, #148]	; (8010934 <__pow5mult+0xa8>)
 801089e:	3a01      	subs	r2, #1
 80108a0:	2300      	movs	r3, #0
 80108a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80108a6:	f7ff fe55 	bl	8010554 <__multadd>
 80108aa:	4607      	mov	r7, r0
 80108ac:	10ad      	asrs	r5, r5, #2
 80108ae:	d03d      	beq.n	801092c <__pow5mult+0xa0>
 80108b0:	69f4      	ldr	r4, [r6, #28]
 80108b2:	b97c      	cbnz	r4, 80108d4 <__pow5mult+0x48>
 80108b4:	2010      	movs	r0, #16
 80108b6:	f7fb ff21 	bl	800c6fc <malloc>
 80108ba:	4602      	mov	r2, r0
 80108bc:	61f0      	str	r0, [r6, #28]
 80108be:	b928      	cbnz	r0, 80108cc <__pow5mult+0x40>
 80108c0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80108c4:	4b1c      	ldr	r3, [pc, #112]	; (8010938 <__pow5mult+0xac>)
 80108c6:	481d      	ldr	r0, [pc, #116]	; (801093c <__pow5mult+0xb0>)
 80108c8:	f7fe fb4a 	bl	800ef60 <__assert_func>
 80108cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80108d0:	6004      	str	r4, [r0, #0]
 80108d2:	60c4      	str	r4, [r0, #12]
 80108d4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80108d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80108dc:	b94c      	cbnz	r4, 80108f2 <__pow5mult+0x66>
 80108de:	f240 2171 	movw	r1, #625	; 0x271
 80108e2:	4630      	mov	r0, r6
 80108e4:	f7ff ff14 	bl	8010710 <__i2b>
 80108e8:	2300      	movs	r3, #0
 80108ea:	4604      	mov	r4, r0
 80108ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80108f0:	6003      	str	r3, [r0, #0]
 80108f2:	f04f 0900 	mov.w	r9, #0
 80108f6:	07eb      	lsls	r3, r5, #31
 80108f8:	d50a      	bpl.n	8010910 <__pow5mult+0x84>
 80108fa:	4639      	mov	r1, r7
 80108fc:	4622      	mov	r2, r4
 80108fe:	4630      	mov	r0, r6
 8010900:	f7ff ff1c 	bl	801073c <__multiply>
 8010904:	4680      	mov	r8, r0
 8010906:	4639      	mov	r1, r7
 8010908:	4630      	mov	r0, r6
 801090a:	f7ff fe01 	bl	8010510 <_Bfree>
 801090e:	4647      	mov	r7, r8
 8010910:	106d      	asrs	r5, r5, #1
 8010912:	d00b      	beq.n	801092c <__pow5mult+0xa0>
 8010914:	6820      	ldr	r0, [r4, #0]
 8010916:	b938      	cbnz	r0, 8010928 <__pow5mult+0x9c>
 8010918:	4622      	mov	r2, r4
 801091a:	4621      	mov	r1, r4
 801091c:	4630      	mov	r0, r6
 801091e:	f7ff ff0d 	bl	801073c <__multiply>
 8010922:	6020      	str	r0, [r4, #0]
 8010924:	f8c0 9000 	str.w	r9, [r0]
 8010928:	4604      	mov	r4, r0
 801092a:	e7e4      	b.n	80108f6 <__pow5mult+0x6a>
 801092c:	4638      	mov	r0, r7
 801092e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010932:	bf00      	nop
 8010934:	08012510 	.word	0x08012510
 8010938:	0801218b 	.word	0x0801218b
 801093c:	080123c4 	.word	0x080123c4

08010940 <__lshift>:
 8010940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010944:	460c      	mov	r4, r1
 8010946:	4607      	mov	r7, r0
 8010948:	4691      	mov	r9, r2
 801094a:	6923      	ldr	r3, [r4, #16]
 801094c:	6849      	ldr	r1, [r1, #4]
 801094e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010952:	68a3      	ldr	r3, [r4, #8]
 8010954:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010958:	f108 0601 	add.w	r6, r8, #1
 801095c:	42b3      	cmp	r3, r6
 801095e:	db0b      	blt.n	8010978 <__lshift+0x38>
 8010960:	4638      	mov	r0, r7
 8010962:	f7ff fd95 	bl	8010490 <_Balloc>
 8010966:	4605      	mov	r5, r0
 8010968:	b948      	cbnz	r0, 801097e <__lshift+0x3e>
 801096a:	4602      	mov	r2, r0
 801096c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010970:	4b27      	ldr	r3, [pc, #156]	; (8010a10 <__lshift+0xd0>)
 8010972:	4828      	ldr	r0, [pc, #160]	; (8010a14 <__lshift+0xd4>)
 8010974:	f7fe faf4 	bl	800ef60 <__assert_func>
 8010978:	3101      	adds	r1, #1
 801097a:	005b      	lsls	r3, r3, #1
 801097c:	e7ee      	b.n	801095c <__lshift+0x1c>
 801097e:	2300      	movs	r3, #0
 8010980:	f100 0114 	add.w	r1, r0, #20
 8010984:	f100 0210 	add.w	r2, r0, #16
 8010988:	4618      	mov	r0, r3
 801098a:	4553      	cmp	r3, sl
 801098c:	db33      	blt.n	80109f6 <__lshift+0xb6>
 801098e:	6920      	ldr	r0, [r4, #16]
 8010990:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010994:	f104 0314 	add.w	r3, r4, #20
 8010998:	f019 091f 	ands.w	r9, r9, #31
 801099c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80109a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80109a4:	d02b      	beq.n	80109fe <__lshift+0xbe>
 80109a6:	468a      	mov	sl, r1
 80109a8:	2200      	movs	r2, #0
 80109aa:	f1c9 0e20 	rsb	lr, r9, #32
 80109ae:	6818      	ldr	r0, [r3, #0]
 80109b0:	fa00 f009 	lsl.w	r0, r0, r9
 80109b4:	4310      	orrs	r0, r2
 80109b6:	f84a 0b04 	str.w	r0, [sl], #4
 80109ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80109be:	459c      	cmp	ip, r3
 80109c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80109c4:	d8f3      	bhi.n	80109ae <__lshift+0x6e>
 80109c6:	ebac 0304 	sub.w	r3, ip, r4
 80109ca:	3b15      	subs	r3, #21
 80109cc:	f023 0303 	bic.w	r3, r3, #3
 80109d0:	3304      	adds	r3, #4
 80109d2:	f104 0015 	add.w	r0, r4, #21
 80109d6:	4584      	cmp	ip, r0
 80109d8:	bf38      	it	cc
 80109da:	2304      	movcc	r3, #4
 80109dc:	50ca      	str	r2, [r1, r3]
 80109de:	b10a      	cbz	r2, 80109e4 <__lshift+0xa4>
 80109e0:	f108 0602 	add.w	r6, r8, #2
 80109e4:	3e01      	subs	r6, #1
 80109e6:	4638      	mov	r0, r7
 80109e8:	4621      	mov	r1, r4
 80109ea:	612e      	str	r6, [r5, #16]
 80109ec:	f7ff fd90 	bl	8010510 <_Bfree>
 80109f0:	4628      	mov	r0, r5
 80109f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80109fa:	3301      	adds	r3, #1
 80109fc:	e7c5      	b.n	801098a <__lshift+0x4a>
 80109fe:	3904      	subs	r1, #4
 8010a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a04:	459c      	cmp	ip, r3
 8010a06:	f841 2f04 	str.w	r2, [r1, #4]!
 8010a0a:	d8f9      	bhi.n	8010a00 <__lshift+0xc0>
 8010a0c:	e7ea      	b.n	80109e4 <__lshift+0xa4>
 8010a0e:	bf00      	nop
 8010a10:	08012353 	.word	0x08012353
 8010a14:	080123c4 	.word	0x080123c4

08010a18 <__mcmp>:
 8010a18:	4603      	mov	r3, r0
 8010a1a:	690a      	ldr	r2, [r1, #16]
 8010a1c:	6900      	ldr	r0, [r0, #16]
 8010a1e:	b530      	push	{r4, r5, lr}
 8010a20:	1a80      	subs	r0, r0, r2
 8010a22:	d10d      	bne.n	8010a40 <__mcmp+0x28>
 8010a24:	3314      	adds	r3, #20
 8010a26:	3114      	adds	r1, #20
 8010a28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010a2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010a30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010a34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010a38:	4295      	cmp	r5, r2
 8010a3a:	d002      	beq.n	8010a42 <__mcmp+0x2a>
 8010a3c:	d304      	bcc.n	8010a48 <__mcmp+0x30>
 8010a3e:	2001      	movs	r0, #1
 8010a40:	bd30      	pop	{r4, r5, pc}
 8010a42:	42a3      	cmp	r3, r4
 8010a44:	d3f4      	bcc.n	8010a30 <__mcmp+0x18>
 8010a46:	e7fb      	b.n	8010a40 <__mcmp+0x28>
 8010a48:	f04f 30ff 	mov.w	r0, #4294967295
 8010a4c:	e7f8      	b.n	8010a40 <__mcmp+0x28>
	...

08010a50 <__mdiff>:
 8010a50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a54:	460d      	mov	r5, r1
 8010a56:	4607      	mov	r7, r0
 8010a58:	4611      	mov	r1, r2
 8010a5a:	4628      	mov	r0, r5
 8010a5c:	4614      	mov	r4, r2
 8010a5e:	f7ff ffdb 	bl	8010a18 <__mcmp>
 8010a62:	1e06      	subs	r6, r0, #0
 8010a64:	d111      	bne.n	8010a8a <__mdiff+0x3a>
 8010a66:	4631      	mov	r1, r6
 8010a68:	4638      	mov	r0, r7
 8010a6a:	f7ff fd11 	bl	8010490 <_Balloc>
 8010a6e:	4602      	mov	r2, r0
 8010a70:	b928      	cbnz	r0, 8010a7e <__mdiff+0x2e>
 8010a72:	f240 2137 	movw	r1, #567	; 0x237
 8010a76:	4b3a      	ldr	r3, [pc, #232]	; (8010b60 <__mdiff+0x110>)
 8010a78:	483a      	ldr	r0, [pc, #232]	; (8010b64 <__mdiff+0x114>)
 8010a7a:	f7fe fa71 	bl	800ef60 <__assert_func>
 8010a7e:	2301      	movs	r3, #1
 8010a80:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010a84:	4610      	mov	r0, r2
 8010a86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a8a:	bfa4      	itt	ge
 8010a8c:	4623      	movge	r3, r4
 8010a8e:	462c      	movge	r4, r5
 8010a90:	4638      	mov	r0, r7
 8010a92:	6861      	ldr	r1, [r4, #4]
 8010a94:	bfa6      	itte	ge
 8010a96:	461d      	movge	r5, r3
 8010a98:	2600      	movge	r6, #0
 8010a9a:	2601      	movlt	r6, #1
 8010a9c:	f7ff fcf8 	bl	8010490 <_Balloc>
 8010aa0:	4602      	mov	r2, r0
 8010aa2:	b918      	cbnz	r0, 8010aac <__mdiff+0x5c>
 8010aa4:	f240 2145 	movw	r1, #581	; 0x245
 8010aa8:	4b2d      	ldr	r3, [pc, #180]	; (8010b60 <__mdiff+0x110>)
 8010aaa:	e7e5      	b.n	8010a78 <__mdiff+0x28>
 8010aac:	f102 0814 	add.w	r8, r2, #20
 8010ab0:	46c2      	mov	sl, r8
 8010ab2:	f04f 0c00 	mov.w	ip, #0
 8010ab6:	6927      	ldr	r7, [r4, #16]
 8010ab8:	60c6      	str	r6, [r0, #12]
 8010aba:	692e      	ldr	r6, [r5, #16]
 8010abc:	f104 0014 	add.w	r0, r4, #20
 8010ac0:	f105 0914 	add.w	r9, r5, #20
 8010ac4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8010ac8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010acc:	3410      	adds	r4, #16
 8010ace:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8010ad2:	f859 3b04 	ldr.w	r3, [r9], #4
 8010ad6:	fa1f f18b 	uxth.w	r1, fp
 8010ada:	4461      	add	r1, ip
 8010adc:	fa1f fc83 	uxth.w	ip, r3
 8010ae0:	0c1b      	lsrs	r3, r3, #16
 8010ae2:	eba1 010c 	sub.w	r1, r1, ip
 8010ae6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010aea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010aee:	b289      	uxth	r1, r1
 8010af0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8010af4:	454e      	cmp	r6, r9
 8010af6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8010afa:	f84a 1b04 	str.w	r1, [sl], #4
 8010afe:	d8e6      	bhi.n	8010ace <__mdiff+0x7e>
 8010b00:	1b73      	subs	r3, r6, r5
 8010b02:	3b15      	subs	r3, #21
 8010b04:	f023 0303 	bic.w	r3, r3, #3
 8010b08:	3515      	adds	r5, #21
 8010b0a:	3304      	adds	r3, #4
 8010b0c:	42ae      	cmp	r6, r5
 8010b0e:	bf38      	it	cc
 8010b10:	2304      	movcc	r3, #4
 8010b12:	4418      	add	r0, r3
 8010b14:	4443      	add	r3, r8
 8010b16:	461e      	mov	r6, r3
 8010b18:	4605      	mov	r5, r0
 8010b1a:	4575      	cmp	r5, lr
 8010b1c:	d30e      	bcc.n	8010b3c <__mdiff+0xec>
 8010b1e:	f10e 0103 	add.w	r1, lr, #3
 8010b22:	1a09      	subs	r1, r1, r0
 8010b24:	f021 0103 	bic.w	r1, r1, #3
 8010b28:	3803      	subs	r0, #3
 8010b2a:	4586      	cmp	lr, r0
 8010b2c:	bf38      	it	cc
 8010b2e:	2100      	movcc	r1, #0
 8010b30:	440b      	add	r3, r1
 8010b32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010b36:	b189      	cbz	r1, 8010b5c <__mdiff+0x10c>
 8010b38:	6117      	str	r7, [r2, #16]
 8010b3a:	e7a3      	b.n	8010a84 <__mdiff+0x34>
 8010b3c:	f855 8b04 	ldr.w	r8, [r5], #4
 8010b40:	fa1f f188 	uxth.w	r1, r8
 8010b44:	4461      	add	r1, ip
 8010b46:	140c      	asrs	r4, r1, #16
 8010b48:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010b4c:	b289      	uxth	r1, r1
 8010b4e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010b52:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8010b56:	f846 1b04 	str.w	r1, [r6], #4
 8010b5a:	e7de      	b.n	8010b1a <__mdiff+0xca>
 8010b5c:	3f01      	subs	r7, #1
 8010b5e:	e7e8      	b.n	8010b32 <__mdiff+0xe2>
 8010b60:	08012353 	.word	0x08012353
 8010b64:	080123c4 	.word	0x080123c4

08010b68 <__ulp>:
 8010b68:	4b0e      	ldr	r3, [pc, #56]	; (8010ba4 <__ulp+0x3c>)
 8010b6a:	400b      	ands	r3, r1
 8010b6c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	dc08      	bgt.n	8010b86 <__ulp+0x1e>
 8010b74:	425b      	negs	r3, r3
 8010b76:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8010b7a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010b7e:	da04      	bge.n	8010b8a <__ulp+0x22>
 8010b80:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010b84:	4113      	asrs	r3, r2
 8010b86:	2200      	movs	r2, #0
 8010b88:	e008      	b.n	8010b9c <__ulp+0x34>
 8010b8a:	f1a2 0314 	sub.w	r3, r2, #20
 8010b8e:	2b1e      	cmp	r3, #30
 8010b90:	bfd6      	itet	le
 8010b92:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8010b96:	2201      	movgt	r2, #1
 8010b98:	40da      	lsrle	r2, r3
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	4619      	mov	r1, r3
 8010b9e:	4610      	mov	r0, r2
 8010ba0:	4770      	bx	lr
 8010ba2:	bf00      	nop
 8010ba4:	7ff00000 	.word	0x7ff00000

08010ba8 <__b2d>:
 8010ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010baa:	6905      	ldr	r5, [r0, #16]
 8010bac:	f100 0714 	add.w	r7, r0, #20
 8010bb0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010bb4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010bb8:	1f2e      	subs	r6, r5, #4
 8010bba:	4620      	mov	r0, r4
 8010bbc:	f7ff fd5a 	bl	8010674 <__hi0bits>
 8010bc0:	f1c0 0220 	rsb	r2, r0, #32
 8010bc4:	280a      	cmp	r0, #10
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	f8df c068 	ldr.w	ip, [pc, #104]	; 8010c34 <__b2d+0x8c>
 8010bcc:	600a      	str	r2, [r1, #0]
 8010bce:	dc12      	bgt.n	8010bf6 <__b2d+0x4e>
 8010bd0:	f1c0 0e0b 	rsb	lr, r0, #11
 8010bd4:	fa24 f20e 	lsr.w	r2, r4, lr
 8010bd8:	42b7      	cmp	r7, r6
 8010bda:	ea42 010c 	orr.w	r1, r2, ip
 8010bde:	bf2c      	ite	cs
 8010be0:	2200      	movcs	r2, #0
 8010be2:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8010be6:	3315      	adds	r3, #21
 8010be8:	fa04 f303 	lsl.w	r3, r4, r3
 8010bec:	fa22 f20e 	lsr.w	r2, r2, lr
 8010bf0:	431a      	orrs	r2, r3
 8010bf2:	4610      	mov	r0, r2
 8010bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bf6:	42b7      	cmp	r7, r6
 8010bf8:	bf2e      	itee	cs
 8010bfa:	2200      	movcs	r2, #0
 8010bfc:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8010c00:	f1a5 0608 	subcc.w	r6, r5, #8
 8010c04:	3b0b      	subs	r3, #11
 8010c06:	d012      	beq.n	8010c2e <__b2d+0x86>
 8010c08:	f1c3 0520 	rsb	r5, r3, #32
 8010c0c:	fa22 f105 	lsr.w	r1, r2, r5
 8010c10:	409c      	lsls	r4, r3
 8010c12:	430c      	orrs	r4, r1
 8010c14:	42be      	cmp	r6, r7
 8010c16:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8010c1a:	bf94      	ite	ls
 8010c1c:	2400      	movls	r4, #0
 8010c1e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010c22:	409a      	lsls	r2, r3
 8010c24:	40ec      	lsrs	r4, r5
 8010c26:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8010c2a:	4322      	orrs	r2, r4
 8010c2c:	e7e1      	b.n	8010bf2 <__b2d+0x4a>
 8010c2e:	ea44 010c 	orr.w	r1, r4, ip
 8010c32:	e7de      	b.n	8010bf2 <__b2d+0x4a>
 8010c34:	3ff00000 	.word	0x3ff00000

08010c38 <__d2b>:
 8010c38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c3a:	2101      	movs	r1, #1
 8010c3c:	4617      	mov	r7, r2
 8010c3e:	461c      	mov	r4, r3
 8010c40:	9e08      	ldr	r6, [sp, #32]
 8010c42:	f7ff fc25 	bl	8010490 <_Balloc>
 8010c46:	4605      	mov	r5, r0
 8010c48:	b930      	cbnz	r0, 8010c58 <__d2b+0x20>
 8010c4a:	4602      	mov	r2, r0
 8010c4c:	f240 310f 	movw	r1, #783	; 0x30f
 8010c50:	4b22      	ldr	r3, [pc, #136]	; (8010cdc <__d2b+0xa4>)
 8010c52:	4823      	ldr	r0, [pc, #140]	; (8010ce0 <__d2b+0xa8>)
 8010c54:	f7fe f984 	bl	800ef60 <__assert_func>
 8010c58:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8010c5c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8010c60:	bb24      	cbnz	r4, 8010cac <__d2b+0x74>
 8010c62:	2f00      	cmp	r7, #0
 8010c64:	9301      	str	r3, [sp, #4]
 8010c66:	d026      	beq.n	8010cb6 <__d2b+0x7e>
 8010c68:	4668      	mov	r0, sp
 8010c6a:	9700      	str	r7, [sp, #0]
 8010c6c:	f7ff fd22 	bl	80106b4 <__lo0bits>
 8010c70:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010c74:	b1e8      	cbz	r0, 8010cb2 <__d2b+0x7a>
 8010c76:	f1c0 0320 	rsb	r3, r0, #32
 8010c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8010c7e:	430b      	orrs	r3, r1
 8010c80:	40c2      	lsrs	r2, r0
 8010c82:	616b      	str	r3, [r5, #20]
 8010c84:	9201      	str	r2, [sp, #4]
 8010c86:	9b01      	ldr	r3, [sp, #4]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	bf14      	ite	ne
 8010c8c:	2102      	movne	r1, #2
 8010c8e:	2101      	moveq	r1, #1
 8010c90:	61ab      	str	r3, [r5, #24]
 8010c92:	6129      	str	r1, [r5, #16]
 8010c94:	b1bc      	cbz	r4, 8010cc6 <__d2b+0x8e>
 8010c96:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010c9a:	4404      	add	r4, r0
 8010c9c:	6034      	str	r4, [r6, #0]
 8010c9e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ca4:	6018      	str	r0, [r3, #0]
 8010ca6:	4628      	mov	r0, r5
 8010ca8:	b003      	add	sp, #12
 8010caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010cb0:	e7d7      	b.n	8010c62 <__d2b+0x2a>
 8010cb2:	6169      	str	r1, [r5, #20]
 8010cb4:	e7e7      	b.n	8010c86 <__d2b+0x4e>
 8010cb6:	a801      	add	r0, sp, #4
 8010cb8:	f7ff fcfc 	bl	80106b4 <__lo0bits>
 8010cbc:	9b01      	ldr	r3, [sp, #4]
 8010cbe:	2101      	movs	r1, #1
 8010cc0:	616b      	str	r3, [r5, #20]
 8010cc2:	3020      	adds	r0, #32
 8010cc4:	e7e5      	b.n	8010c92 <__d2b+0x5a>
 8010cc6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010cca:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8010cce:	6030      	str	r0, [r6, #0]
 8010cd0:	6918      	ldr	r0, [r3, #16]
 8010cd2:	f7ff fccf 	bl	8010674 <__hi0bits>
 8010cd6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010cda:	e7e2      	b.n	8010ca2 <__d2b+0x6a>
 8010cdc:	08012353 	.word	0x08012353
 8010ce0:	080123c4 	.word	0x080123c4

08010ce4 <__ratio>:
 8010ce4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ce8:	4688      	mov	r8, r1
 8010cea:	4669      	mov	r1, sp
 8010cec:	4681      	mov	r9, r0
 8010cee:	f7ff ff5b 	bl	8010ba8 <__b2d>
 8010cf2:	460f      	mov	r7, r1
 8010cf4:	4604      	mov	r4, r0
 8010cf6:	460d      	mov	r5, r1
 8010cf8:	4640      	mov	r0, r8
 8010cfa:	a901      	add	r1, sp, #4
 8010cfc:	f7ff ff54 	bl	8010ba8 <__b2d>
 8010d00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010d04:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010d08:	468b      	mov	fp, r1
 8010d0a:	eba3 0c02 	sub.w	ip, r3, r2
 8010d0e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010d12:	1a9b      	subs	r3, r3, r2
 8010d14:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	bfd5      	itete	le
 8010d1c:	460a      	movle	r2, r1
 8010d1e:	462a      	movgt	r2, r5
 8010d20:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010d24:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010d28:	bfd8      	it	le
 8010d2a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010d2e:	465b      	mov	r3, fp
 8010d30:	4602      	mov	r2, r0
 8010d32:	4639      	mov	r1, r7
 8010d34:	4620      	mov	r0, r4
 8010d36:	f7ef fd73 	bl	8000820 <__aeabi_ddiv>
 8010d3a:	b003      	add	sp, #12
 8010d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010d40 <__copybits>:
 8010d40:	3901      	subs	r1, #1
 8010d42:	b570      	push	{r4, r5, r6, lr}
 8010d44:	1149      	asrs	r1, r1, #5
 8010d46:	6914      	ldr	r4, [r2, #16]
 8010d48:	3101      	adds	r1, #1
 8010d4a:	f102 0314 	add.w	r3, r2, #20
 8010d4e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010d52:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010d56:	1f05      	subs	r5, r0, #4
 8010d58:	42a3      	cmp	r3, r4
 8010d5a:	d30c      	bcc.n	8010d76 <__copybits+0x36>
 8010d5c:	1aa3      	subs	r3, r4, r2
 8010d5e:	3b11      	subs	r3, #17
 8010d60:	f023 0303 	bic.w	r3, r3, #3
 8010d64:	3211      	adds	r2, #17
 8010d66:	42a2      	cmp	r2, r4
 8010d68:	bf88      	it	hi
 8010d6a:	2300      	movhi	r3, #0
 8010d6c:	4418      	add	r0, r3
 8010d6e:	2300      	movs	r3, #0
 8010d70:	4288      	cmp	r0, r1
 8010d72:	d305      	bcc.n	8010d80 <__copybits+0x40>
 8010d74:	bd70      	pop	{r4, r5, r6, pc}
 8010d76:	f853 6b04 	ldr.w	r6, [r3], #4
 8010d7a:	f845 6f04 	str.w	r6, [r5, #4]!
 8010d7e:	e7eb      	b.n	8010d58 <__copybits+0x18>
 8010d80:	f840 3b04 	str.w	r3, [r0], #4
 8010d84:	e7f4      	b.n	8010d70 <__copybits+0x30>

08010d86 <__any_on>:
 8010d86:	f100 0214 	add.w	r2, r0, #20
 8010d8a:	6900      	ldr	r0, [r0, #16]
 8010d8c:	114b      	asrs	r3, r1, #5
 8010d8e:	4298      	cmp	r0, r3
 8010d90:	b510      	push	{r4, lr}
 8010d92:	db11      	blt.n	8010db8 <__any_on+0x32>
 8010d94:	dd0a      	ble.n	8010dac <__any_on+0x26>
 8010d96:	f011 011f 	ands.w	r1, r1, #31
 8010d9a:	d007      	beq.n	8010dac <__any_on+0x26>
 8010d9c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010da0:	fa24 f001 	lsr.w	r0, r4, r1
 8010da4:	fa00 f101 	lsl.w	r1, r0, r1
 8010da8:	428c      	cmp	r4, r1
 8010daa:	d10b      	bne.n	8010dc4 <__any_on+0x3e>
 8010dac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010db0:	4293      	cmp	r3, r2
 8010db2:	d803      	bhi.n	8010dbc <__any_on+0x36>
 8010db4:	2000      	movs	r0, #0
 8010db6:	bd10      	pop	{r4, pc}
 8010db8:	4603      	mov	r3, r0
 8010dba:	e7f7      	b.n	8010dac <__any_on+0x26>
 8010dbc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010dc0:	2900      	cmp	r1, #0
 8010dc2:	d0f5      	beq.n	8010db0 <__any_on+0x2a>
 8010dc4:	2001      	movs	r0, #1
 8010dc6:	e7f6      	b.n	8010db6 <__any_on+0x30>

08010dc8 <_strtoul_l.constprop.0>:
 8010dc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010dcc:	4686      	mov	lr, r0
 8010dce:	460d      	mov	r5, r1
 8010dd0:	4f35      	ldr	r7, [pc, #212]	; (8010ea8 <_strtoul_l.constprop.0+0xe0>)
 8010dd2:	4628      	mov	r0, r5
 8010dd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010dd8:	5d3e      	ldrb	r6, [r7, r4]
 8010dda:	f016 0608 	ands.w	r6, r6, #8
 8010dde:	d1f8      	bne.n	8010dd2 <_strtoul_l.constprop.0+0xa>
 8010de0:	2c2d      	cmp	r4, #45	; 0x2d
 8010de2:	d130      	bne.n	8010e46 <_strtoul_l.constprop.0+0x7e>
 8010de4:	2601      	movs	r6, #1
 8010de6:	782c      	ldrb	r4, [r5, #0]
 8010de8:	1c85      	adds	r5, r0, #2
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d057      	beq.n	8010e9e <_strtoul_l.constprop.0+0xd6>
 8010dee:	2b10      	cmp	r3, #16
 8010df0:	d109      	bne.n	8010e06 <_strtoul_l.constprop.0+0x3e>
 8010df2:	2c30      	cmp	r4, #48	; 0x30
 8010df4:	d107      	bne.n	8010e06 <_strtoul_l.constprop.0+0x3e>
 8010df6:	7828      	ldrb	r0, [r5, #0]
 8010df8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8010dfc:	2858      	cmp	r0, #88	; 0x58
 8010dfe:	d149      	bne.n	8010e94 <_strtoul_l.constprop.0+0xcc>
 8010e00:	2310      	movs	r3, #16
 8010e02:	786c      	ldrb	r4, [r5, #1]
 8010e04:	3502      	adds	r5, #2
 8010e06:	f04f 38ff 	mov.w	r8, #4294967295
 8010e0a:	fbb8 f8f3 	udiv	r8, r8, r3
 8010e0e:	2700      	movs	r7, #0
 8010e10:	fb03 f908 	mul.w	r9, r3, r8
 8010e14:	4638      	mov	r0, r7
 8010e16:	ea6f 0909 	mvn.w	r9, r9
 8010e1a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010e1e:	f1bc 0f09 	cmp.w	ip, #9
 8010e22:	d815      	bhi.n	8010e50 <_strtoul_l.constprop.0+0x88>
 8010e24:	4664      	mov	r4, ip
 8010e26:	42a3      	cmp	r3, r4
 8010e28:	dd23      	ble.n	8010e72 <_strtoul_l.constprop.0+0xaa>
 8010e2a:	f1b7 3fff 	cmp.w	r7, #4294967295
 8010e2e:	d007      	beq.n	8010e40 <_strtoul_l.constprop.0+0x78>
 8010e30:	4580      	cmp	r8, r0
 8010e32:	d31b      	bcc.n	8010e6c <_strtoul_l.constprop.0+0xa4>
 8010e34:	d101      	bne.n	8010e3a <_strtoul_l.constprop.0+0x72>
 8010e36:	45a1      	cmp	r9, r4
 8010e38:	db18      	blt.n	8010e6c <_strtoul_l.constprop.0+0xa4>
 8010e3a:	2701      	movs	r7, #1
 8010e3c:	fb00 4003 	mla	r0, r0, r3, r4
 8010e40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010e44:	e7e9      	b.n	8010e1a <_strtoul_l.constprop.0+0x52>
 8010e46:	2c2b      	cmp	r4, #43	; 0x2b
 8010e48:	bf04      	itt	eq
 8010e4a:	782c      	ldrbeq	r4, [r5, #0]
 8010e4c:	1c85      	addeq	r5, r0, #2
 8010e4e:	e7cc      	b.n	8010dea <_strtoul_l.constprop.0+0x22>
 8010e50:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010e54:	f1bc 0f19 	cmp.w	ip, #25
 8010e58:	d801      	bhi.n	8010e5e <_strtoul_l.constprop.0+0x96>
 8010e5a:	3c37      	subs	r4, #55	; 0x37
 8010e5c:	e7e3      	b.n	8010e26 <_strtoul_l.constprop.0+0x5e>
 8010e5e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010e62:	f1bc 0f19 	cmp.w	ip, #25
 8010e66:	d804      	bhi.n	8010e72 <_strtoul_l.constprop.0+0xaa>
 8010e68:	3c57      	subs	r4, #87	; 0x57
 8010e6a:	e7dc      	b.n	8010e26 <_strtoul_l.constprop.0+0x5e>
 8010e6c:	f04f 37ff 	mov.w	r7, #4294967295
 8010e70:	e7e6      	b.n	8010e40 <_strtoul_l.constprop.0+0x78>
 8010e72:	1c7b      	adds	r3, r7, #1
 8010e74:	d106      	bne.n	8010e84 <_strtoul_l.constprop.0+0xbc>
 8010e76:	2322      	movs	r3, #34	; 0x22
 8010e78:	4638      	mov	r0, r7
 8010e7a:	f8ce 3000 	str.w	r3, [lr]
 8010e7e:	b932      	cbnz	r2, 8010e8e <_strtoul_l.constprop.0+0xc6>
 8010e80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e84:	b106      	cbz	r6, 8010e88 <_strtoul_l.constprop.0+0xc0>
 8010e86:	4240      	negs	r0, r0
 8010e88:	2a00      	cmp	r2, #0
 8010e8a:	d0f9      	beq.n	8010e80 <_strtoul_l.constprop.0+0xb8>
 8010e8c:	b107      	cbz	r7, 8010e90 <_strtoul_l.constprop.0+0xc8>
 8010e8e:	1e69      	subs	r1, r5, #1
 8010e90:	6011      	str	r1, [r2, #0]
 8010e92:	e7f5      	b.n	8010e80 <_strtoul_l.constprop.0+0xb8>
 8010e94:	2430      	movs	r4, #48	; 0x30
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d1b5      	bne.n	8010e06 <_strtoul_l.constprop.0+0x3e>
 8010e9a:	2308      	movs	r3, #8
 8010e9c:	e7b3      	b.n	8010e06 <_strtoul_l.constprop.0+0x3e>
 8010e9e:	2c30      	cmp	r4, #48	; 0x30
 8010ea0:	d0a9      	beq.n	8010df6 <_strtoul_l.constprop.0+0x2e>
 8010ea2:	230a      	movs	r3, #10
 8010ea4:	e7af      	b.n	8010e06 <_strtoul_l.constprop.0+0x3e>
 8010ea6:	bf00      	nop
 8010ea8:	08012059 	.word	0x08012059

08010eac <_strtoul_r>:
 8010eac:	f7ff bf8c 	b.w	8010dc8 <_strtoul_l.constprop.0>

08010eb0 <strtoul>:
 8010eb0:	4613      	mov	r3, r2
 8010eb2:	460a      	mov	r2, r1
 8010eb4:	4601      	mov	r1, r0
 8010eb6:	4802      	ldr	r0, [pc, #8]	; (8010ec0 <strtoul+0x10>)
 8010eb8:	6800      	ldr	r0, [r0, #0]
 8010eba:	f7ff bf85 	b.w	8010dc8 <_strtoul_l.constprop.0>
 8010ebe:	bf00      	nop
 8010ec0:	200002d0 	.word	0x200002d0

08010ec4 <__ascii_wctomb>:
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	4608      	mov	r0, r1
 8010ec8:	b141      	cbz	r1, 8010edc <__ascii_wctomb+0x18>
 8010eca:	2aff      	cmp	r2, #255	; 0xff
 8010ecc:	d904      	bls.n	8010ed8 <__ascii_wctomb+0x14>
 8010ece:	228a      	movs	r2, #138	; 0x8a
 8010ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ed4:	601a      	str	r2, [r3, #0]
 8010ed6:	4770      	bx	lr
 8010ed8:	2001      	movs	r0, #1
 8010eda:	700a      	strb	r2, [r1, #0]
 8010edc:	4770      	bx	lr

08010ede <__sfputc_r>:
 8010ede:	6893      	ldr	r3, [r2, #8]
 8010ee0:	b410      	push	{r4}
 8010ee2:	3b01      	subs	r3, #1
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	6093      	str	r3, [r2, #8]
 8010ee8:	da07      	bge.n	8010efa <__sfputc_r+0x1c>
 8010eea:	6994      	ldr	r4, [r2, #24]
 8010eec:	42a3      	cmp	r3, r4
 8010eee:	db01      	blt.n	8010ef4 <__sfputc_r+0x16>
 8010ef0:	290a      	cmp	r1, #10
 8010ef2:	d102      	bne.n	8010efa <__sfputc_r+0x1c>
 8010ef4:	bc10      	pop	{r4}
 8010ef6:	f000 ba19 	b.w	801132c <__swbuf_r>
 8010efa:	6813      	ldr	r3, [r2, #0]
 8010efc:	1c58      	adds	r0, r3, #1
 8010efe:	6010      	str	r0, [r2, #0]
 8010f00:	7019      	strb	r1, [r3, #0]
 8010f02:	4608      	mov	r0, r1
 8010f04:	bc10      	pop	{r4}
 8010f06:	4770      	bx	lr

08010f08 <__sfputs_r>:
 8010f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f0a:	4606      	mov	r6, r0
 8010f0c:	460f      	mov	r7, r1
 8010f0e:	4614      	mov	r4, r2
 8010f10:	18d5      	adds	r5, r2, r3
 8010f12:	42ac      	cmp	r4, r5
 8010f14:	d101      	bne.n	8010f1a <__sfputs_r+0x12>
 8010f16:	2000      	movs	r0, #0
 8010f18:	e007      	b.n	8010f2a <__sfputs_r+0x22>
 8010f1a:	463a      	mov	r2, r7
 8010f1c:	4630      	mov	r0, r6
 8010f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f22:	f7ff ffdc 	bl	8010ede <__sfputc_r>
 8010f26:	1c43      	adds	r3, r0, #1
 8010f28:	d1f3      	bne.n	8010f12 <__sfputs_r+0xa>
 8010f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010f2c <_vfiprintf_r>:
 8010f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f30:	460d      	mov	r5, r1
 8010f32:	4614      	mov	r4, r2
 8010f34:	4698      	mov	r8, r3
 8010f36:	4606      	mov	r6, r0
 8010f38:	b09d      	sub	sp, #116	; 0x74
 8010f3a:	b118      	cbz	r0, 8010f44 <_vfiprintf_r+0x18>
 8010f3c:	6a03      	ldr	r3, [r0, #32]
 8010f3e:	b90b      	cbnz	r3, 8010f44 <_vfiprintf_r+0x18>
 8010f40:	f7fd f87a 	bl	800e038 <__sinit>
 8010f44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010f46:	07d9      	lsls	r1, r3, #31
 8010f48:	d405      	bmi.n	8010f56 <_vfiprintf_r+0x2a>
 8010f4a:	89ab      	ldrh	r3, [r5, #12]
 8010f4c:	059a      	lsls	r2, r3, #22
 8010f4e:	d402      	bmi.n	8010f56 <_vfiprintf_r+0x2a>
 8010f50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f52:	f7fd ffd3 	bl	800eefc <__retarget_lock_acquire_recursive>
 8010f56:	89ab      	ldrh	r3, [r5, #12]
 8010f58:	071b      	lsls	r3, r3, #28
 8010f5a:	d501      	bpl.n	8010f60 <_vfiprintf_r+0x34>
 8010f5c:	692b      	ldr	r3, [r5, #16]
 8010f5e:	b99b      	cbnz	r3, 8010f88 <_vfiprintf_r+0x5c>
 8010f60:	4629      	mov	r1, r5
 8010f62:	4630      	mov	r0, r6
 8010f64:	f000 fa20 	bl	80113a8 <__swsetup_r>
 8010f68:	b170      	cbz	r0, 8010f88 <_vfiprintf_r+0x5c>
 8010f6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010f6c:	07dc      	lsls	r4, r3, #31
 8010f6e:	d504      	bpl.n	8010f7a <_vfiprintf_r+0x4e>
 8010f70:	f04f 30ff 	mov.w	r0, #4294967295
 8010f74:	b01d      	add	sp, #116	; 0x74
 8010f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f7a:	89ab      	ldrh	r3, [r5, #12]
 8010f7c:	0598      	lsls	r0, r3, #22
 8010f7e:	d4f7      	bmi.n	8010f70 <_vfiprintf_r+0x44>
 8010f80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f82:	f7fd ffbd 	bl	800ef00 <__retarget_lock_release_recursive>
 8010f86:	e7f3      	b.n	8010f70 <_vfiprintf_r+0x44>
 8010f88:	2300      	movs	r3, #0
 8010f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8010f8c:	2320      	movs	r3, #32
 8010f8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010f92:	2330      	movs	r3, #48	; 0x30
 8010f94:	f04f 0901 	mov.w	r9, #1
 8010f98:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 801114c <_vfiprintf_r+0x220>
 8010fa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010fa4:	4623      	mov	r3, r4
 8010fa6:	469a      	mov	sl, r3
 8010fa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010fac:	b10a      	cbz	r2, 8010fb2 <_vfiprintf_r+0x86>
 8010fae:	2a25      	cmp	r2, #37	; 0x25
 8010fb0:	d1f9      	bne.n	8010fa6 <_vfiprintf_r+0x7a>
 8010fb2:	ebba 0b04 	subs.w	fp, sl, r4
 8010fb6:	d00b      	beq.n	8010fd0 <_vfiprintf_r+0xa4>
 8010fb8:	465b      	mov	r3, fp
 8010fba:	4622      	mov	r2, r4
 8010fbc:	4629      	mov	r1, r5
 8010fbe:	4630      	mov	r0, r6
 8010fc0:	f7ff ffa2 	bl	8010f08 <__sfputs_r>
 8010fc4:	3001      	adds	r0, #1
 8010fc6:	f000 80a9 	beq.w	801111c <_vfiprintf_r+0x1f0>
 8010fca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010fcc:	445a      	add	r2, fp
 8010fce:	9209      	str	r2, [sp, #36]	; 0x24
 8010fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	f000 80a1 	beq.w	801111c <_vfiprintf_r+0x1f0>
 8010fda:	2300      	movs	r3, #0
 8010fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8010fe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010fe4:	f10a 0a01 	add.w	sl, sl, #1
 8010fe8:	9304      	str	r3, [sp, #16]
 8010fea:	9307      	str	r3, [sp, #28]
 8010fec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010ff0:	931a      	str	r3, [sp, #104]	; 0x68
 8010ff2:	4654      	mov	r4, sl
 8010ff4:	2205      	movs	r2, #5
 8010ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ffa:	4854      	ldr	r0, [pc, #336]	; (801114c <_vfiprintf_r+0x220>)
 8010ffc:	f7fd ff89 	bl	800ef12 <memchr>
 8011000:	9a04      	ldr	r2, [sp, #16]
 8011002:	b9d8      	cbnz	r0, 801103c <_vfiprintf_r+0x110>
 8011004:	06d1      	lsls	r1, r2, #27
 8011006:	bf44      	itt	mi
 8011008:	2320      	movmi	r3, #32
 801100a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801100e:	0713      	lsls	r3, r2, #28
 8011010:	bf44      	itt	mi
 8011012:	232b      	movmi	r3, #43	; 0x2b
 8011014:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011018:	f89a 3000 	ldrb.w	r3, [sl]
 801101c:	2b2a      	cmp	r3, #42	; 0x2a
 801101e:	d015      	beq.n	801104c <_vfiprintf_r+0x120>
 8011020:	4654      	mov	r4, sl
 8011022:	2000      	movs	r0, #0
 8011024:	f04f 0c0a 	mov.w	ip, #10
 8011028:	9a07      	ldr	r2, [sp, #28]
 801102a:	4621      	mov	r1, r4
 801102c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011030:	3b30      	subs	r3, #48	; 0x30
 8011032:	2b09      	cmp	r3, #9
 8011034:	d94d      	bls.n	80110d2 <_vfiprintf_r+0x1a6>
 8011036:	b1b0      	cbz	r0, 8011066 <_vfiprintf_r+0x13a>
 8011038:	9207      	str	r2, [sp, #28]
 801103a:	e014      	b.n	8011066 <_vfiprintf_r+0x13a>
 801103c:	eba0 0308 	sub.w	r3, r0, r8
 8011040:	fa09 f303 	lsl.w	r3, r9, r3
 8011044:	4313      	orrs	r3, r2
 8011046:	46a2      	mov	sl, r4
 8011048:	9304      	str	r3, [sp, #16]
 801104a:	e7d2      	b.n	8010ff2 <_vfiprintf_r+0xc6>
 801104c:	9b03      	ldr	r3, [sp, #12]
 801104e:	1d19      	adds	r1, r3, #4
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	9103      	str	r1, [sp, #12]
 8011054:	2b00      	cmp	r3, #0
 8011056:	bfbb      	ittet	lt
 8011058:	425b      	neglt	r3, r3
 801105a:	f042 0202 	orrlt.w	r2, r2, #2
 801105e:	9307      	strge	r3, [sp, #28]
 8011060:	9307      	strlt	r3, [sp, #28]
 8011062:	bfb8      	it	lt
 8011064:	9204      	strlt	r2, [sp, #16]
 8011066:	7823      	ldrb	r3, [r4, #0]
 8011068:	2b2e      	cmp	r3, #46	; 0x2e
 801106a:	d10c      	bne.n	8011086 <_vfiprintf_r+0x15a>
 801106c:	7863      	ldrb	r3, [r4, #1]
 801106e:	2b2a      	cmp	r3, #42	; 0x2a
 8011070:	d134      	bne.n	80110dc <_vfiprintf_r+0x1b0>
 8011072:	9b03      	ldr	r3, [sp, #12]
 8011074:	3402      	adds	r4, #2
 8011076:	1d1a      	adds	r2, r3, #4
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	9203      	str	r2, [sp, #12]
 801107c:	2b00      	cmp	r3, #0
 801107e:	bfb8      	it	lt
 8011080:	f04f 33ff 	movlt.w	r3, #4294967295
 8011084:	9305      	str	r3, [sp, #20]
 8011086:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011150 <_vfiprintf_r+0x224>
 801108a:	2203      	movs	r2, #3
 801108c:	4650      	mov	r0, sl
 801108e:	7821      	ldrb	r1, [r4, #0]
 8011090:	f7fd ff3f 	bl	800ef12 <memchr>
 8011094:	b138      	cbz	r0, 80110a6 <_vfiprintf_r+0x17a>
 8011096:	2240      	movs	r2, #64	; 0x40
 8011098:	9b04      	ldr	r3, [sp, #16]
 801109a:	eba0 000a 	sub.w	r0, r0, sl
 801109e:	4082      	lsls	r2, r0
 80110a0:	4313      	orrs	r3, r2
 80110a2:	3401      	adds	r4, #1
 80110a4:	9304      	str	r3, [sp, #16]
 80110a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110aa:	2206      	movs	r2, #6
 80110ac:	4829      	ldr	r0, [pc, #164]	; (8011154 <_vfiprintf_r+0x228>)
 80110ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80110b2:	f7fd ff2e 	bl	800ef12 <memchr>
 80110b6:	2800      	cmp	r0, #0
 80110b8:	d03f      	beq.n	801113a <_vfiprintf_r+0x20e>
 80110ba:	4b27      	ldr	r3, [pc, #156]	; (8011158 <_vfiprintf_r+0x22c>)
 80110bc:	bb1b      	cbnz	r3, 8011106 <_vfiprintf_r+0x1da>
 80110be:	9b03      	ldr	r3, [sp, #12]
 80110c0:	3307      	adds	r3, #7
 80110c2:	f023 0307 	bic.w	r3, r3, #7
 80110c6:	3308      	adds	r3, #8
 80110c8:	9303      	str	r3, [sp, #12]
 80110ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110cc:	443b      	add	r3, r7
 80110ce:	9309      	str	r3, [sp, #36]	; 0x24
 80110d0:	e768      	b.n	8010fa4 <_vfiprintf_r+0x78>
 80110d2:	460c      	mov	r4, r1
 80110d4:	2001      	movs	r0, #1
 80110d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80110da:	e7a6      	b.n	801102a <_vfiprintf_r+0xfe>
 80110dc:	2300      	movs	r3, #0
 80110de:	f04f 0c0a 	mov.w	ip, #10
 80110e2:	4619      	mov	r1, r3
 80110e4:	3401      	adds	r4, #1
 80110e6:	9305      	str	r3, [sp, #20]
 80110e8:	4620      	mov	r0, r4
 80110ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80110ee:	3a30      	subs	r2, #48	; 0x30
 80110f0:	2a09      	cmp	r2, #9
 80110f2:	d903      	bls.n	80110fc <_vfiprintf_r+0x1d0>
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d0c6      	beq.n	8011086 <_vfiprintf_r+0x15a>
 80110f8:	9105      	str	r1, [sp, #20]
 80110fa:	e7c4      	b.n	8011086 <_vfiprintf_r+0x15a>
 80110fc:	4604      	mov	r4, r0
 80110fe:	2301      	movs	r3, #1
 8011100:	fb0c 2101 	mla	r1, ip, r1, r2
 8011104:	e7f0      	b.n	80110e8 <_vfiprintf_r+0x1bc>
 8011106:	ab03      	add	r3, sp, #12
 8011108:	9300      	str	r3, [sp, #0]
 801110a:	462a      	mov	r2, r5
 801110c:	4630      	mov	r0, r6
 801110e:	4b13      	ldr	r3, [pc, #76]	; (801115c <_vfiprintf_r+0x230>)
 8011110:	a904      	add	r1, sp, #16
 8011112:	f7fc fb43 	bl	800d79c <_printf_float>
 8011116:	4607      	mov	r7, r0
 8011118:	1c78      	adds	r0, r7, #1
 801111a:	d1d6      	bne.n	80110ca <_vfiprintf_r+0x19e>
 801111c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801111e:	07d9      	lsls	r1, r3, #31
 8011120:	d405      	bmi.n	801112e <_vfiprintf_r+0x202>
 8011122:	89ab      	ldrh	r3, [r5, #12]
 8011124:	059a      	lsls	r2, r3, #22
 8011126:	d402      	bmi.n	801112e <_vfiprintf_r+0x202>
 8011128:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801112a:	f7fd fee9 	bl	800ef00 <__retarget_lock_release_recursive>
 801112e:	89ab      	ldrh	r3, [r5, #12]
 8011130:	065b      	lsls	r3, r3, #25
 8011132:	f53f af1d 	bmi.w	8010f70 <_vfiprintf_r+0x44>
 8011136:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011138:	e71c      	b.n	8010f74 <_vfiprintf_r+0x48>
 801113a:	ab03      	add	r3, sp, #12
 801113c:	9300      	str	r3, [sp, #0]
 801113e:	462a      	mov	r2, r5
 8011140:	4630      	mov	r0, r6
 8011142:	4b06      	ldr	r3, [pc, #24]	; (801115c <_vfiprintf_r+0x230>)
 8011144:	a904      	add	r1, sp, #16
 8011146:	f7fc fdc9 	bl	800dcdc <_printf_i>
 801114a:	e7e4      	b.n	8011116 <_vfiprintf_r+0x1ea>
 801114c:	0801251c 	.word	0x0801251c
 8011150:	08012522 	.word	0x08012522
 8011154:	08012526 	.word	0x08012526
 8011158:	0800d79d 	.word	0x0800d79d
 801115c:	08010f09 	.word	0x08010f09

08011160 <__sflush_r>:
 8011160:	898a      	ldrh	r2, [r1, #12]
 8011162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011164:	4605      	mov	r5, r0
 8011166:	0710      	lsls	r0, r2, #28
 8011168:	460c      	mov	r4, r1
 801116a:	d457      	bmi.n	801121c <__sflush_r+0xbc>
 801116c:	684b      	ldr	r3, [r1, #4]
 801116e:	2b00      	cmp	r3, #0
 8011170:	dc04      	bgt.n	801117c <__sflush_r+0x1c>
 8011172:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011174:	2b00      	cmp	r3, #0
 8011176:	dc01      	bgt.n	801117c <__sflush_r+0x1c>
 8011178:	2000      	movs	r0, #0
 801117a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801117c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801117e:	2e00      	cmp	r6, #0
 8011180:	d0fa      	beq.n	8011178 <__sflush_r+0x18>
 8011182:	2300      	movs	r3, #0
 8011184:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011188:	682f      	ldr	r7, [r5, #0]
 801118a:	6a21      	ldr	r1, [r4, #32]
 801118c:	602b      	str	r3, [r5, #0]
 801118e:	d032      	beq.n	80111f6 <__sflush_r+0x96>
 8011190:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011192:	89a3      	ldrh	r3, [r4, #12]
 8011194:	075a      	lsls	r2, r3, #29
 8011196:	d505      	bpl.n	80111a4 <__sflush_r+0x44>
 8011198:	6863      	ldr	r3, [r4, #4]
 801119a:	1ac0      	subs	r0, r0, r3
 801119c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801119e:	b10b      	cbz	r3, 80111a4 <__sflush_r+0x44>
 80111a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80111a2:	1ac0      	subs	r0, r0, r3
 80111a4:	2300      	movs	r3, #0
 80111a6:	4602      	mov	r2, r0
 80111a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80111aa:	4628      	mov	r0, r5
 80111ac:	6a21      	ldr	r1, [r4, #32]
 80111ae:	47b0      	blx	r6
 80111b0:	1c43      	adds	r3, r0, #1
 80111b2:	89a3      	ldrh	r3, [r4, #12]
 80111b4:	d106      	bne.n	80111c4 <__sflush_r+0x64>
 80111b6:	6829      	ldr	r1, [r5, #0]
 80111b8:	291d      	cmp	r1, #29
 80111ba:	d82b      	bhi.n	8011214 <__sflush_r+0xb4>
 80111bc:	4a28      	ldr	r2, [pc, #160]	; (8011260 <__sflush_r+0x100>)
 80111be:	410a      	asrs	r2, r1
 80111c0:	07d6      	lsls	r6, r2, #31
 80111c2:	d427      	bmi.n	8011214 <__sflush_r+0xb4>
 80111c4:	2200      	movs	r2, #0
 80111c6:	6062      	str	r2, [r4, #4]
 80111c8:	6922      	ldr	r2, [r4, #16]
 80111ca:	04d9      	lsls	r1, r3, #19
 80111cc:	6022      	str	r2, [r4, #0]
 80111ce:	d504      	bpl.n	80111da <__sflush_r+0x7a>
 80111d0:	1c42      	adds	r2, r0, #1
 80111d2:	d101      	bne.n	80111d8 <__sflush_r+0x78>
 80111d4:	682b      	ldr	r3, [r5, #0]
 80111d6:	b903      	cbnz	r3, 80111da <__sflush_r+0x7a>
 80111d8:	6560      	str	r0, [r4, #84]	; 0x54
 80111da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80111dc:	602f      	str	r7, [r5, #0]
 80111de:	2900      	cmp	r1, #0
 80111e0:	d0ca      	beq.n	8011178 <__sflush_r+0x18>
 80111e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80111e6:	4299      	cmp	r1, r3
 80111e8:	d002      	beq.n	80111f0 <__sflush_r+0x90>
 80111ea:	4628      	mov	r0, r5
 80111ec:	f7fe fd58 	bl	800fca0 <_free_r>
 80111f0:	2000      	movs	r0, #0
 80111f2:	6360      	str	r0, [r4, #52]	; 0x34
 80111f4:	e7c1      	b.n	801117a <__sflush_r+0x1a>
 80111f6:	2301      	movs	r3, #1
 80111f8:	4628      	mov	r0, r5
 80111fa:	47b0      	blx	r6
 80111fc:	1c41      	adds	r1, r0, #1
 80111fe:	d1c8      	bne.n	8011192 <__sflush_r+0x32>
 8011200:	682b      	ldr	r3, [r5, #0]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d0c5      	beq.n	8011192 <__sflush_r+0x32>
 8011206:	2b1d      	cmp	r3, #29
 8011208:	d001      	beq.n	801120e <__sflush_r+0xae>
 801120a:	2b16      	cmp	r3, #22
 801120c:	d101      	bne.n	8011212 <__sflush_r+0xb2>
 801120e:	602f      	str	r7, [r5, #0]
 8011210:	e7b2      	b.n	8011178 <__sflush_r+0x18>
 8011212:	89a3      	ldrh	r3, [r4, #12]
 8011214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011218:	81a3      	strh	r3, [r4, #12]
 801121a:	e7ae      	b.n	801117a <__sflush_r+0x1a>
 801121c:	690f      	ldr	r7, [r1, #16]
 801121e:	2f00      	cmp	r7, #0
 8011220:	d0aa      	beq.n	8011178 <__sflush_r+0x18>
 8011222:	0793      	lsls	r3, r2, #30
 8011224:	bf18      	it	ne
 8011226:	2300      	movne	r3, #0
 8011228:	680e      	ldr	r6, [r1, #0]
 801122a:	bf08      	it	eq
 801122c:	694b      	ldreq	r3, [r1, #20]
 801122e:	1bf6      	subs	r6, r6, r7
 8011230:	600f      	str	r7, [r1, #0]
 8011232:	608b      	str	r3, [r1, #8]
 8011234:	2e00      	cmp	r6, #0
 8011236:	dd9f      	ble.n	8011178 <__sflush_r+0x18>
 8011238:	4633      	mov	r3, r6
 801123a:	463a      	mov	r2, r7
 801123c:	4628      	mov	r0, r5
 801123e:	6a21      	ldr	r1, [r4, #32]
 8011240:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8011244:	47e0      	blx	ip
 8011246:	2800      	cmp	r0, #0
 8011248:	dc06      	bgt.n	8011258 <__sflush_r+0xf8>
 801124a:	89a3      	ldrh	r3, [r4, #12]
 801124c:	f04f 30ff 	mov.w	r0, #4294967295
 8011250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011254:	81a3      	strh	r3, [r4, #12]
 8011256:	e790      	b.n	801117a <__sflush_r+0x1a>
 8011258:	4407      	add	r7, r0
 801125a:	1a36      	subs	r6, r6, r0
 801125c:	e7ea      	b.n	8011234 <__sflush_r+0xd4>
 801125e:	bf00      	nop
 8011260:	dfbffffe 	.word	0xdfbffffe

08011264 <_fflush_r>:
 8011264:	b538      	push	{r3, r4, r5, lr}
 8011266:	690b      	ldr	r3, [r1, #16]
 8011268:	4605      	mov	r5, r0
 801126a:	460c      	mov	r4, r1
 801126c:	b913      	cbnz	r3, 8011274 <_fflush_r+0x10>
 801126e:	2500      	movs	r5, #0
 8011270:	4628      	mov	r0, r5
 8011272:	bd38      	pop	{r3, r4, r5, pc}
 8011274:	b118      	cbz	r0, 801127e <_fflush_r+0x1a>
 8011276:	6a03      	ldr	r3, [r0, #32]
 8011278:	b90b      	cbnz	r3, 801127e <_fflush_r+0x1a>
 801127a:	f7fc fedd 	bl	800e038 <__sinit>
 801127e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d0f3      	beq.n	801126e <_fflush_r+0xa>
 8011286:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011288:	07d0      	lsls	r0, r2, #31
 801128a:	d404      	bmi.n	8011296 <_fflush_r+0x32>
 801128c:	0599      	lsls	r1, r3, #22
 801128e:	d402      	bmi.n	8011296 <_fflush_r+0x32>
 8011290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011292:	f7fd fe33 	bl	800eefc <__retarget_lock_acquire_recursive>
 8011296:	4628      	mov	r0, r5
 8011298:	4621      	mov	r1, r4
 801129a:	f7ff ff61 	bl	8011160 <__sflush_r>
 801129e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80112a0:	4605      	mov	r5, r0
 80112a2:	07da      	lsls	r2, r3, #31
 80112a4:	d4e4      	bmi.n	8011270 <_fflush_r+0xc>
 80112a6:	89a3      	ldrh	r3, [r4, #12]
 80112a8:	059b      	lsls	r3, r3, #22
 80112aa:	d4e1      	bmi.n	8011270 <_fflush_r+0xc>
 80112ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80112ae:	f7fd fe27 	bl	800ef00 <__retarget_lock_release_recursive>
 80112b2:	e7dd      	b.n	8011270 <_fflush_r+0xc>

080112b4 <fiprintf>:
 80112b4:	b40e      	push	{r1, r2, r3}
 80112b6:	b503      	push	{r0, r1, lr}
 80112b8:	4601      	mov	r1, r0
 80112ba:	ab03      	add	r3, sp, #12
 80112bc:	4805      	ldr	r0, [pc, #20]	; (80112d4 <fiprintf+0x20>)
 80112be:	f853 2b04 	ldr.w	r2, [r3], #4
 80112c2:	6800      	ldr	r0, [r0, #0]
 80112c4:	9301      	str	r3, [sp, #4]
 80112c6:	f7ff fe31 	bl	8010f2c <_vfiprintf_r>
 80112ca:	b002      	add	sp, #8
 80112cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80112d0:	b003      	add	sp, #12
 80112d2:	4770      	bx	lr
 80112d4:	200002d0 	.word	0x200002d0

080112d8 <siscanf>:
 80112d8:	b40e      	push	{r1, r2, r3}
 80112da:	f44f 7201 	mov.w	r2, #516	; 0x204
 80112de:	b530      	push	{r4, r5, lr}
 80112e0:	b09c      	sub	sp, #112	; 0x70
 80112e2:	ac1f      	add	r4, sp, #124	; 0x7c
 80112e4:	f854 5b04 	ldr.w	r5, [r4], #4
 80112e8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80112ec:	9002      	str	r0, [sp, #8]
 80112ee:	9006      	str	r0, [sp, #24]
 80112f0:	f7ee ffa8 	bl	8000244 <strlen>
 80112f4:	4b0b      	ldr	r3, [pc, #44]	; (8011324 <siscanf+0x4c>)
 80112f6:	9003      	str	r0, [sp, #12]
 80112f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80112fa:	2300      	movs	r3, #0
 80112fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80112fe:	9314      	str	r3, [sp, #80]	; 0x50
 8011300:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011304:	9007      	str	r0, [sp, #28]
 8011306:	4808      	ldr	r0, [pc, #32]	; (8011328 <siscanf+0x50>)
 8011308:	f8ad 3016 	strh.w	r3, [sp, #22]
 801130c:	462a      	mov	r2, r5
 801130e:	4623      	mov	r3, r4
 8011310:	a902      	add	r1, sp, #8
 8011312:	6800      	ldr	r0, [r0, #0]
 8011314:	9401      	str	r4, [sp, #4]
 8011316:	f000 f955 	bl	80115c4 <__ssvfiscanf_r>
 801131a:	b01c      	add	sp, #112	; 0x70
 801131c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011320:	b003      	add	sp, #12
 8011322:	4770      	bx	lr
 8011324:	0800e0eb 	.word	0x0800e0eb
 8011328:	200002d0 	.word	0x200002d0

0801132c <__swbuf_r>:
 801132c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801132e:	460e      	mov	r6, r1
 8011330:	4614      	mov	r4, r2
 8011332:	4605      	mov	r5, r0
 8011334:	b118      	cbz	r0, 801133e <__swbuf_r+0x12>
 8011336:	6a03      	ldr	r3, [r0, #32]
 8011338:	b90b      	cbnz	r3, 801133e <__swbuf_r+0x12>
 801133a:	f7fc fe7d 	bl	800e038 <__sinit>
 801133e:	69a3      	ldr	r3, [r4, #24]
 8011340:	60a3      	str	r3, [r4, #8]
 8011342:	89a3      	ldrh	r3, [r4, #12]
 8011344:	071a      	lsls	r2, r3, #28
 8011346:	d525      	bpl.n	8011394 <__swbuf_r+0x68>
 8011348:	6923      	ldr	r3, [r4, #16]
 801134a:	b31b      	cbz	r3, 8011394 <__swbuf_r+0x68>
 801134c:	6823      	ldr	r3, [r4, #0]
 801134e:	6922      	ldr	r2, [r4, #16]
 8011350:	b2f6      	uxtb	r6, r6
 8011352:	1a98      	subs	r0, r3, r2
 8011354:	6963      	ldr	r3, [r4, #20]
 8011356:	4637      	mov	r7, r6
 8011358:	4283      	cmp	r3, r0
 801135a:	dc04      	bgt.n	8011366 <__swbuf_r+0x3a>
 801135c:	4621      	mov	r1, r4
 801135e:	4628      	mov	r0, r5
 8011360:	f7ff ff80 	bl	8011264 <_fflush_r>
 8011364:	b9e0      	cbnz	r0, 80113a0 <__swbuf_r+0x74>
 8011366:	68a3      	ldr	r3, [r4, #8]
 8011368:	3b01      	subs	r3, #1
 801136a:	60a3      	str	r3, [r4, #8]
 801136c:	6823      	ldr	r3, [r4, #0]
 801136e:	1c5a      	adds	r2, r3, #1
 8011370:	6022      	str	r2, [r4, #0]
 8011372:	701e      	strb	r6, [r3, #0]
 8011374:	6962      	ldr	r2, [r4, #20]
 8011376:	1c43      	adds	r3, r0, #1
 8011378:	429a      	cmp	r2, r3
 801137a:	d004      	beq.n	8011386 <__swbuf_r+0x5a>
 801137c:	89a3      	ldrh	r3, [r4, #12]
 801137e:	07db      	lsls	r3, r3, #31
 8011380:	d506      	bpl.n	8011390 <__swbuf_r+0x64>
 8011382:	2e0a      	cmp	r6, #10
 8011384:	d104      	bne.n	8011390 <__swbuf_r+0x64>
 8011386:	4621      	mov	r1, r4
 8011388:	4628      	mov	r0, r5
 801138a:	f7ff ff6b 	bl	8011264 <_fflush_r>
 801138e:	b938      	cbnz	r0, 80113a0 <__swbuf_r+0x74>
 8011390:	4638      	mov	r0, r7
 8011392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011394:	4621      	mov	r1, r4
 8011396:	4628      	mov	r0, r5
 8011398:	f000 f806 	bl	80113a8 <__swsetup_r>
 801139c:	2800      	cmp	r0, #0
 801139e:	d0d5      	beq.n	801134c <__swbuf_r+0x20>
 80113a0:	f04f 37ff 	mov.w	r7, #4294967295
 80113a4:	e7f4      	b.n	8011390 <__swbuf_r+0x64>
	...

080113a8 <__swsetup_r>:
 80113a8:	b538      	push	{r3, r4, r5, lr}
 80113aa:	4b2a      	ldr	r3, [pc, #168]	; (8011454 <__swsetup_r+0xac>)
 80113ac:	4605      	mov	r5, r0
 80113ae:	6818      	ldr	r0, [r3, #0]
 80113b0:	460c      	mov	r4, r1
 80113b2:	b118      	cbz	r0, 80113bc <__swsetup_r+0x14>
 80113b4:	6a03      	ldr	r3, [r0, #32]
 80113b6:	b90b      	cbnz	r3, 80113bc <__swsetup_r+0x14>
 80113b8:	f7fc fe3e 	bl	800e038 <__sinit>
 80113bc:	89a3      	ldrh	r3, [r4, #12]
 80113be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80113c2:	0718      	lsls	r0, r3, #28
 80113c4:	d422      	bmi.n	801140c <__swsetup_r+0x64>
 80113c6:	06d9      	lsls	r1, r3, #27
 80113c8:	d407      	bmi.n	80113da <__swsetup_r+0x32>
 80113ca:	2309      	movs	r3, #9
 80113cc:	602b      	str	r3, [r5, #0]
 80113ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80113d2:	f04f 30ff 	mov.w	r0, #4294967295
 80113d6:	81a3      	strh	r3, [r4, #12]
 80113d8:	e034      	b.n	8011444 <__swsetup_r+0x9c>
 80113da:	0758      	lsls	r0, r3, #29
 80113dc:	d512      	bpl.n	8011404 <__swsetup_r+0x5c>
 80113de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80113e0:	b141      	cbz	r1, 80113f4 <__swsetup_r+0x4c>
 80113e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80113e6:	4299      	cmp	r1, r3
 80113e8:	d002      	beq.n	80113f0 <__swsetup_r+0x48>
 80113ea:	4628      	mov	r0, r5
 80113ec:	f7fe fc58 	bl	800fca0 <_free_r>
 80113f0:	2300      	movs	r3, #0
 80113f2:	6363      	str	r3, [r4, #52]	; 0x34
 80113f4:	89a3      	ldrh	r3, [r4, #12]
 80113f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80113fa:	81a3      	strh	r3, [r4, #12]
 80113fc:	2300      	movs	r3, #0
 80113fe:	6063      	str	r3, [r4, #4]
 8011400:	6923      	ldr	r3, [r4, #16]
 8011402:	6023      	str	r3, [r4, #0]
 8011404:	89a3      	ldrh	r3, [r4, #12]
 8011406:	f043 0308 	orr.w	r3, r3, #8
 801140a:	81a3      	strh	r3, [r4, #12]
 801140c:	6923      	ldr	r3, [r4, #16]
 801140e:	b94b      	cbnz	r3, 8011424 <__swsetup_r+0x7c>
 8011410:	89a3      	ldrh	r3, [r4, #12]
 8011412:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011416:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801141a:	d003      	beq.n	8011424 <__swsetup_r+0x7c>
 801141c:	4621      	mov	r1, r4
 801141e:	4628      	mov	r0, r5
 8011420:	f000 fbb9 	bl	8011b96 <__smakebuf_r>
 8011424:	89a0      	ldrh	r0, [r4, #12]
 8011426:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801142a:	f010 0301 	ands.w	r3, r0, #1
 801142e:	d00a      	beq.n	8011446 <__swsetup_r+0x9e>
 8011430:	2300      	movs	r3, #0
 8011432:	60a3      	str	r3, [r4, #8]
 8011434:	6963      	ldr	r3, [r4, #20]
 8011436:	425b      	negs	r3, r3
 8011438:	61a3      	str	r3, [r4, #24]
 801143a:	6923      	ldr	r3, [r4, #16]
 801143c:	b943      	cbnz	r3, 8011450 <__swsetup_r+0xa8>
 801143e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011442:	d1c4      	bne.n	80113ce <__swsetup_r+0x26>
 8011444:	bd38      	pop	{r3, r4, r5, pc}
 8011446:	0781      	lsls	r1, r0, #30
 8011448:	bf58      	it	pl
 801144a:	6963      	ldrpl	r3, [r4, #20]
 801144c:	60a3      	str	r3, [r4, #8]
 801144e:	e7f4      	b.n	801143a <__swsetup_r+0x92>
 8011450:	2000      	movs	r0, #0
 8011452:	e7f7      	b.n	8011444 <__swsetup_r+0x9c>
 8011454:	200002d0 	.word	0x200002d0

08011458 <__gettzinfo>:
 8011458:	4800      	ldr	r0, [pc, #0]	; (801145c <__gettzinfo+0x4>)
 801145a:	4770      	bx	lr
 801145c:	200002d8 	.word	0x200002d8

08011460 <abort>:
 8011460:	2006      	movs	r0, #6
 8011462:	b508      	push	{r3, lr}
 8011464:	f000 fc6c 	bl	8011d40 <raise>
 8011468:	2001      	movs	r0, #1
 801146a:	f7f2 ff7c 	bl	8004366 <_exit>

0801146e <_calloc_r>:
 801146e:	b570      	push	{r4, r5, r6, lr}
 8011470:	fba1 5402 	umull	r5, r4, r1, r2
 8011474:	b934      	cbnz	r4, 8011484 <_calloc_r+0x16>
 8011476:	4629      	mov	r1, r5
 8011478:	f7fb f970 	bl	800c75c <_malloc_r>
 801147c:	4606      	mov	r6, r0
 801147e:	b928      	cbnz	r0, 801148c <_calloc_r+0x1e>
 8011480:	4630      	mov	r0, r6
 8011482:	bd70      	pop	{r4, r5, r6, pc}
 8011484:	220c      	movs	r2, #12
 8011486:	2600      	movs	r6, #0
 8011488:	6002      	str	r2, [r0, #0]
 801148a:	e7f9      	b.n	8011480 <_calloc_r+0x12>
 801148c:	462a      	mov	r2, r5
 801148e:	4621      	mov	r1, r4
 8011490:	f7fc fe5f 	bl	800e152 <memset>
 8011494:	e7f4      	b.n	8011480 <_calloc_r+0x12>
	...

08011498 <__env_lock>:
 8011498:	4801      	ldr	r0, [pc, #4]	; (80114a0 <__env_lock+0x8>)
 801149a:	f7fd bd2f 	b.w	800eefc <__retarget_lock_acquire_recursive>
 801149e:	bf00      	nop
 80114a0:	20005b8c 	.word	0x20005b8c

080114a4 <__env_unlock>:
 80114a4:	4801      	ldr	r0, [pc, #4]	; (80114ac <__env_unlock+0x8>)
 80114a6:	f7fd bd2b 	b.w	800ef00 <__retarget_lock_release_recursive>
 80114aa:	bf00      	nop
 80114ac:	20005b8c 	.word	0x20005b8c

080114b0 <_realloc_r>:
 80114b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114b4:	4680      	mov	r8, r0
 80114b6:	4614      	mov	r4, r2
 80114b8:	460e      	mov	r6, r1
 80114ba:	b921      	cbnz	r1, 80114c6 <_realloc_r+0x16>
 80114bc:	4611      	mov	r1, r2
 80114be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80114c2:	f7fb b94b 	b.w	800c75c <_malloc_r>
 80114c6:	b92a      	cbnz	r2, 80114d4 <_realloc_r+0x24>
 80114c8:	f7fe fbea 	bl	800fca0 <_free_r>
 80114cc:	4625      	mov	r5, r4
 80114ce:	4628      	mov	r0, r5
 80114d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114d4:	f000 fc72 	bl	8011dbc <_malloc_usable_size_r>
 80114d8:	4284      	cmp	r4, r0
 80114da:	4607      	mov	r7, r0
 80114dc:	d802      	bhi.n	80114e4 <_realloc_r+0x34>
 80114de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80114e2:	d812      	bhi.n	801150a <_realloc_r+0x5a>
 80114e4:	4621      	mov	r1, r4
 80114e6:	4640      	mov	r0, r8
 80114e8:	f7fb f938 	bl	800c75c <_malloc_r>
 80114ec:	4605      	mov	r5, r0
 80114ee:	2800      	cmp	r0, #0
 80114f0:	d0ed      	beq.n	80114ce <_realloc_r+0x1e>
 80114f2:	42bc      	cmp	r4, r7
 80114f4:	4622      	mov	r2, r4
 80114f6:	4631      	mov	r1, r6
 80114f8:	bf28      	it	cs
 80114fa:	463a      	movcs	r2, r7
 80114fc:	f7fd fd17 	bl	800ef2e <memcpy>
 8011500:	4631      	mov	r1, r6
 8011502:	4640      	mov	r0, r8
 8011504:	f7fe fbcc 	bl	800fca0 <_free_r>
 8011508:	e7e1      	b.n	80114ce <_realloc_r+0x1e>
 801150a:	4635      	mov	r5, r6
 801150c:	e7df      	b.n	80114ce <_realloc_r+0x1e>

0801150e <_sungetc_r>:
 801150e:	b538      	push	{r3, r4, r5, lr}
 8011510:	1c4b      	adds	r3, r1, #1
 8011512:	4614      	mov	r4, r2
 8011514:	d103      	bne.n	801151e <_sungetc_r+0x10>
 8011516:	f04f 35ff 	mov.w	r5, #4294967295
 801151a:	4628      	mov	r0, r5
 801151c:	bd38      	pop	{r3, r4, r5, pc}
 801151e:	8993      	ldrh	r3, [r2, #12]
 8011520:	b2cd      	uxtb	r5, r1
 8011522:	f023 0320 	bic.w	r3, r3, #32
 8011526:	8193      	strh	r3, [r2, #12]
 8011528:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801152a:	6852      	ldr	r2, [r2, #4]
 801152c:	b18b      	cbz	r3, 8011552 <_sungetc_r+0x44>
 801152e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011530:	4293      	cmp	r3, r2
 8011532:	dd08      	ble.n	8011546 <_sungetc_r+0x38>
 8011534:	6823      	ldr	r3, [r4, #0]
 8011536:	1e5a      	subs	r2, r3, #1
 8011538:	6022      	str	r2, [r4, #0]
 801153a:	f803 5c01 	strb.w	r5, [r3, #-1]
 801153e:	6863      	ldr	r3, [r4, #4]
 8011540:	3301      	adds	r3, #1
 8011542:	6063      	str	r3, [r4, #4]
 8011544:	e7e9      	b.n	801151a <_sungetc_r+0xc>
 8011546:	4621      	mov	r1, r4
 8011548:	f000 fb9a 	bl	8011c80 <__submore>
 801154c:	2800      	cmp	r0, #0
 801154e:	d0f1      	beq.n	8011534 <_sungetc_r+0x26>
 8011550:	e7e1      	b.n	8011516 <_sungetc_r+0x8>
 8011552:	6921      	ldr	r1, [r4, #16]
 8011554:	6823      	ldr	r3, [r4, #0]
 8011556:	b151      	cbz	r1, 801156e <_sungetc_r+0x60>
 8011558:	4299      	cmp	r1, r3
 801155a:	d208      	bcs.n	801156e <_sungetc_r+0x60>
 801155c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011560:	42a9      	cmp	r1, r5
 8011562:	d104      	bne.n	801156e <_sungetc_r+0x60>
 8011564:	3b01      	subs	r3, #1
 8011566:	3201      	adds	r2, #1
 8011568:	6023      	str	r3, [r4, #0]
 801156a:	6062      	str	r2, [r4, #4]
 801156c:	e7d5      	b.n	801151a <_sungetc_r+0xc>
 801156e:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8011572:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011576:	6363      	str	r3, [r4, #52]	; 0x34
 8011578:	2303      	movs	r3, #3
 801157a:	63a3      	str	r3, [r4, #56]	; 0x38
 801157c:	4623      	mov	r3, r4
 801157e:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011582:	6023      	str	r3, [r4, #0]
 8011584:	2301      	movs	r3, #1
 8011586:	e7dc      	b.n	8011542 <_sungetc_r+0x34>

08011588 <__ssrefill_r>:
 8011588:	b510      	push	{r4, lr}
 801158a:	460c      	mov	r4, r1
 801158c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801158e:	b169      	cbz	r1, 80115ac <__ssrefill_r+0x24>
 8011590:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011594:	4299      	cmp	r1, r3
 8011596:	d001      	beq.n	801159c <__ssrefill_r+0x14>
 8011598:	f7fe fb82 	bl	800fca0 <_free_r>
 801159c:	2000      	movs	r0, #0
 801159e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80115a0:	6360      	str	r0, [r4, #52]	; 0x34
 80115a2:	6063      	str	r3, [r4, #4]
 80115a4:	b113      	cbz	r3, 80115ac <__ssrefill_r+0x24>
 80115a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80115a8:	6023      	str	r3, [r4, #0]
 80115aa:	bd10      	pop	{r4, pc}
 80115ac:	6923      	ldr	r3, [r4, #16]
 80115ae:	f04f 30ff 	mov.w	r0, #4294967295
 80115b2:	6023      	str	r3, [r4, #0]
 80115b4:	2300      	movs	r3, #0
 80115b6:	6063      	str	r3, [r4, #4]
 80115b8:	89a3      	ldrh	r3, [r4, #12]
 80115ba:	f043 0320 	orr.w	r3, r3, #32
 80115be:	81a3      	strh	r3, [r4, #12]
 80115c0:	e7f3      	b.n	80115aa <__ssrefill_r+0x22>
	...

080115c4 <__ssvfiscanf_r>:
 80115c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115c8:	460c      	mov	r4, r1
 80115ca:	2100      	movs	r1, #0
 80115cc:	4606      	mov	r6, r0
 80115ce:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80115d2:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80115d6:	49a6      	ldr	r1, [pc, #664]	; (8011870 <__ssvfiscanf_r+0x2ac>)
 80115d8:	f10d 0804 	add.w	r8, sp, #4
 80115dc:	91a0      	str	r1, [sp, #640]	; 0x280
 80115de:	49a5      	ldr	r1, [pc, #660]	; (8011874 <__ssvfiscanf_r+0x2b0>)
 80115e0:	4fa5      	ldr	r7, [pc, #660]	; (8011878 <__ssvfiscanf_r+0x2b4>)
 80115e2:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801187c <__ssvfiscanf_r+0x2b8>
 80115e6:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80115ea:	91a1      	str	r1, [sp, #644]	; 0x284
 80115ec:	9300      	str	r3, [sp, #0]
 80115ee:	7813      	ldrb	r3, [r2, #0]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	f000 815a 	beq.w	80118aa <__ssvfiscanf_r+0x2e6>
 80115f6:	5cf9      	ldrb	r1, [r7, r3]
 80115f8:	1c55      	adds	r5, r2, #1
 80115fa:	f011 0108 	ands.w	r1, r1, #8
 80115fe:	d019      	beq.n	8011634 <__ssvfiscanf_r+0x70>
 8011600:	6863      	ldr	r3, [r4, #4]
 8011602:	2b00      	cmp	r3, #0
 8011604:	dd0f      	ble.n	8011626 <__ssvfiscanf_r+0x62>
 8011606:	6823      	ldr	r3, [r4, #0]
 8011608:	781a      	ldrb	r2, [r3, #0]
 801160a:	5cba      	ldrb	r2, [r7, r2]
 801160c:	0712      	lsls	r2, r2, #28
 801160e:	d401      	bmi.n	8011614 <__ssvfiscanf_r+0x50>
 8011610:	462a      	mov	r2, r5
 8011612:	e7ec      	b.n	80115ee <__ssvfiscanf_r+0x2a>
 8011614:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011616:	3301      	adds	r3, #1
 8011618:	3201      	adds	r2, #1
 801161a:	9245      	str	r2, [sp, #276]	; 0x114
 801161c:	6862      	ldr	r2, [r4, #4]
 801161e:	6023      	str	r3, [r4, #0]
 8011620:	3a01      	subs	r2, #1
 8011622:	6062      	str	r2, [r4, #4]
 8011624:	e7ec      	b.n	8011600 <__ssvfiscanf_r+0x3c>
 8011626:	4621      	mov	r1, r4
 8011628:	4630      	mov	r0, r6
 801162a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801162c:	4798      	blx	r3
 801162e:	2800      	cmp	r0, #0
 8011630:	d0e9      	beq.n	8011606 <__ssvfiscanf_r+0x42>
 8011632:	e7ed      	b.n	8011610 <__ssvfiscanf_r+0x4c>
 8011634:	2b25      	cmp	r3, #37	; 0x25
 8011636:	d012      	beq.n	801165e <__ssvfiscanf_r+0x9a>
 8011638:	469a      	mov	sl, r3
 801163a:	6863      	ldr	r3, [r4, #4]
 801163c:	2b00      	cmp	r3, #0
 801163e:	f340 8092 	ble.w	8011766 <__ssvfiscanf_r+0x1a2>
 8011642:	6822      	ldr	r2, [r4, #0]
 8011644:	7813      	ldrb	r3, [r2, #0]
 8011646:	4553      	cmp	r3, sl
 8011648:	f040 812f 	bne.w	80118aa <__ssvfiscanf_r+0x2e6>
 801164c:	6863      	ldr	r3, [r4, #4]
 801164e:	3201      	adds	r2, #1
 8011650:	3b01      	subs	r3, #1
 8011652:	6063      	str	r3, [r4, #4]
 8011654:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8011656:	6022      	str	r2, [r4, #0]
 8011658:	3301      	adds	r3, #1
 801165a:	9345      	str	r3, [sp, #276]	; 0x114
 801165c:	e7d8      	b.n	8011610 <__ssvfiscanf_r+0x4c>
 801165e:	9141      	str	r1, [sp, #260]	; 0x104
 8011660:	9143      	str	r1, [sp, #268]	; 0x10c
 8011662:	7853      	ldrb	r3, [r2, #1]
 8011664:	2b2a      	cmp	r3, #42	; 0x2a
 8011666:	bf04      	itt	eq
 8011668:	2310      	moveq	r3, #16
 801166a:	1c95      	addeq	r5, r2, #2
 801166c:	f04f 020a 	mov.w	r2, #10
 8011670:	bf08      	it	eq
 8011672:	9341      	streq	r3, [sp, #260]	; 0x104
 8011674:	46aa      	mov	sl, r5
 8011676:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801167a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801167e:	2b09      	cmp	r3, #9
 8011680:	d91c      	bls.n	80116bc <__ssvfiscanf_r+0xf8>
 8011682:	2203      	movs	r2, #3
 8011684:	487d      	ldr	r0, [pc, #500]	; (801187c <__ssvfiscanf_r+0x2b8>)
 8011686:	f7fd fc44 	bl	800ef12 <memchr>
 801168a:	b138      	cbz	r0, 801169c <__ssvfiscanf_r+0xd8>
 801168c:	2301      	movs	r3, #1
 801168e:	4655      	mov	r5, sl
 8011690:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011692:	eba0 0009 	sub.w	r0, r0, r9
 8011696:	4083      	lsls	r3, r0
 8011698:	4313      	orrs	r3, r2
 801169a:	9341      	str	r3, [sp, #260]	; 0x104
 801169c:	f815 3b01 	ldrb.w	r3, [r5], #1
 80116a0:	2b78      	cmp	r3, #120	; 0x78
 80116a2:	d806      	bhi.n	80116b2 <__ssvfiscanf_r+0xee>
 80116a4:	2b57      	cmp	r3, #87	; 0x57
 80116a6:	d810      	bhi.n	80116ca <__ssvfiscanf_r+0x106>
 80116a8:	2b25      	cmp	r3, #37	; 0x25
 80116aa:	d0c5      	beq.n	8011638 <__ssvfiscanf_r+0x74>
 80116ac:	d856      	bhi.n	801175c <__ssvfiscanf_r+0x198>
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d064      	beq.n	801177c <__ssvfiscanf_r+0x1b8>
 80116b2:	2303      	movs	r3, #3
 80116b4:	9347      	str	r3, [sp, #284]	; 0x11c
 80116b6:	230a      	movs	r3, #10
 80116b8:	9342      	str	r3, [sp, #264]	; 0x108
 80116ba:	e075      	b.n	80117a8 <__ssvfiscanf_r+0x1e4>
 80116bc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80116be:	4655      	mov	r5, sl
 80116c0:	fb02 1103 	mla	r1, r2, r3, r1
 80116c4:	3930      	subs	r1, #48	; 0x30
 80116c6:	9143      	str	r1, [sp, #268]	; 0x10c
 80116c8:	e7d4      	b.n	8011674 <__ssvfiscanf_r+0xb0>
 80116ca:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80116ce:	2a20      	cmp	r2, #32
 80116d0:	d8ef      	bhi.n	80116b2 <__ssvfiscanf_r+0xee>
 80116d2:	a101      	add	r1, pc, #4	; (adr r1, 80116d8 <__ssvfiscanf_r+0x114>)
 80116d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80116d8:	0801178b 	.word	0x0801178b
 80116dc:	080116b3 	.word	0x080116b3
 80116e0:	080116b3 	.word	0x080116b3
 80116e4:	080117e9 	.word	0x080117e9
 80116e8:	080116b3 	.word	0x080116b3
 80116ec:	080116b3 	.word	0x080116b3
 80116f0:	080116b3 	.word	0x080116b3
 80116f4:	080116b3 	.word	0x080116b3
 80116f8:	080116b3 	.word	0x080116b3
 80116fc:	080116b3 	.word	0x080116b3
 8011700:	080116b3 	.word	0x080116b3
 8011704:	080117ff 	.word	0x080117ff
 8011708:	080117e5 	.word	0x080117e5
 801170c:	08011763 	.word	0x08011763
 8011710:	08011763 	.word	0x08011763
 8011714:	08011763 	.word	0x08011763
 8011718:	080116b3 	.word	0x080116b3
 801171c:	080117a1 	.word	0x080117a1
 8011720:	080116b3 	.word	0x080116b3
 8011724:	080116b3 	.word	0x080116b3
 8011728:	080116b3 	.word	0x080116b3
 801172c:	080116b3 	.word	0x080116b3
 8011730:	0801180f 	.word	0x0801180f
 8011734:	080117dd 	.word	0x080117dd
 8011738:	08011783 	.word	0x08011783
 801173c:	080116b3 	.word	0x080116b3
 8011740:	080116b3 	.word	0x080116b3
 8011744:	0801180b 	.word	0x0801180b
 8011748:	080116b3 	.word	0x080116b3
 801174c:	080117e5 	.word	0x080117e5
 8011750:	080116b3 	.word	0x080116b3
 8011754:	080116b3 	.word	0x080116b3
 8011758:	0801178b 	.word	0x0801178b
 801175c:	3b45      	subs	r3, #69	; 0x45
 801175e:	2b02      	cmp	r3, #2
 8011760:	d8a7      	bhi.n	80116b2 <__ssvfiscanf_r+0xee>
 8011762:	2305      	movs	r3, #5
 8011764:	e01f      	b.n	80117a6 <__ssvfiscanf_r+0x1e2>
 8011766:	4621      	mov	r1, r4
 8011768:	4630      	mov	r0, r6
 801176a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801176c:	4798      	blx	r3
 801176e:	2800      	cmp	r0, #0
 8011770:	f43f af67 	beq.w	8011642 <__ssvfiscanf_r+0x7e>
 8011774:	9844      	ldr	r0, [sp, #272]	; 0x110
 8011776:	2800      	cmp	r0, #0
 8011778:	f040 808d 	bne.w	8011896 <__ssvfiscanf_r+0x2d2>
 801177c:	f04f 30ff 	mov.w	r0, #4294967295
 8011780:	e08f      	b.n	80118a2 <__ssvfiscanf_r+0x2de>
 8011782:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011784:	f042 0220 	orr.w	r2, r2, #32
 8011788:	9241      	str	r2, [sp, #260]	; 0x104
 801178a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801178c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011790:	9241      	str	r2, [sp, #260]	; 0x104
 8011792:	2210      	movs	r2, #16
 8011794:	2b6f      	cmp	r3, #111	; 0x6f
 8011796:	bf34      	ite	cc
 8011798:	2303      	movcc	r3, #3
 801179a:	2304      	movcs	r3, #4
 801179c:	9242      	str	r2, [sp, #264]	; 0x108
 801179e:	e002      	b.n	80117a6 <__ssvfiscanf_r+0x1e2>
 80117a0:	2300      	movs	r3, #0
 80117a2:	9342      	str	r3, [sp, #264]	; 0x108
 80117a4:	2303      	movs	r3, #3
 80117a6:	9347      	str	r3, [sp, #284]	; 0x11c
 80117a8:	6863      	ldr	r3, [r4, #4]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	dd3d      	ble.n	801182a <__ssvfiscanf_r+0x266>
 80117ae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80117b0:	0659      	lsls	r1, r3, #25
 80117b2:	d404      	bmi.n	80117be <__ssvfiscanf_r+0x1fa>
 80117b4:	6823      	ldr	r3, [r4, #0]
 80117b6:	781a      	ldrb	r2, [r3, #0]
 80117b8:	5cba      	ldrb	r2, [r7, r2]
 80117ba:	0712      	lsls	r2, r2, #28
 80117bc:	d43c      	bmi.n	8011838 <__ssvfiscanf_r+0x274>
 80117be:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80117c0:	2b02      	cmp	r3, #2
 80117c2:	dc4b      	bgt.n	801185c <__ssvfiscanf_r+0x298>
 80117c4:	466b      	mov	r3, sp
 80117c6:	4622      	mov	r2, r4
 80117c8:	4630      	mov	r0, r6
 80117ca:	a941      	add	r1, sp, #260	; 0x104
 80117cc:	f000 f872 	bl	80118b4 <_scanf_chars>
 80117d0:	2801      	cmp	r0, #1
 80117d2:	d06a      	beq.n	80118aa <__ssvfiscanf_r+0x2e6>
 80117d4:	2802      	cmp	r0, #2
 80117d6:	f47f af1b 	bne.w	8011610 <__ssvfiscanf_r+0x4c>
 80117da:	e7cb      	b.n	8011774 <__ssvfiscanf_r+0x1b0>
 80117dc:	2308      	movs	r3, #8
 80117de:	9342      	str	r3, [sp, #264]	; 0x108
 80117e0:	2304      	movs	r3, #4
 80117e2:	e7e0      	b.n	80117a6 <__ssvfiscanf_r+0x1e2>
 80117e4:	220a      	movs	r2, #10
 80117e6:	e7d5      	b.n	8011794 <__ssvfiscanf_r+0x1d0>
 80117e8:	4629      	mov	r1, r5
 80117ea:	4640      	mov	r0, r8
 80117ec:	f000 fa0f 	bl	8011c0e <__sccl>
 80117f0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80117f2:	4605      	mov	r5, r0
 80117f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117f8:	9341      	str	r3, [sp, #260]	; 0x104
 80117fa:	2301      	movs	r3, #1
 80117fc:	e7d3      	b.n	80117a6 <__ssvfiscanf_r+0x1e2>
 80117fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011804:	9341      	str	r3, [sp, #260]	; 0x104
 8011806:	2300      	movs	r3, #0
 8011808:	e7cd      	b.n	80117a6 <__ssvfiscanf_r+0x1e2>
 801180a:	2302      	movs	r3, #2
 801180c:	e7cb      	b.n	80117a6 <__ssvfiscanf_r+0x1e2>
 801180e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8011810:	06c3      	lsls	r3, r0, #27
 8011812:	f53f aefd 	bmi.w	8011610 <__ssvfiscanf_r+0x4c>
 8011816:	9b00      	ldr	r3, [sp, #0]
 8011818:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801181a:	1d19      	adds	r1, r3, #4
 801181c:	9100      	str	r1, [sp, #0]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	07c0      	lsls	r0, r0, #31
 8011822:	bf4c      	ite	mi
 8011824:	801a      	strhmi	r2, [r3, #0]
 8011826:	601a      	strpl	r2, [r3, #0]
 8011828:	e6f2      	b.n	8011610 <__ssvfiscanf_r+0x4c>
 801182a:	4621      	mov	r1, r4
 801182c:	4630      	mov	r0, r6
 801182e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011830:	4798      	blx	r3
 8011832:	2800      	cmp	r0, #0
 8011834:	d0bb      	beq.n	80117ae <__ssvfiscanf_r+0x1ea>
 8011836:	e79d      	b.n	8011774 <__ssvfiscanf_r+0x1b0>
 8011838:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801183a:	3201      	adds	r2, #1
 801183c:	9245      	str	r2, [sp, #276]	; 0x114
 801183e:	6862      	ldr	r2, [r4, #4]
 8011840:	3a01      	subs	r2, #1
 8011842:	2a00      	cmp	r2, #0
 8011844:	6062      	str	r2, [r4, #4]
 8011846:	dd02      	ble.n	801184e <__ssvfiscanf_r+0x28a>
 8011848:	3301      	adds	r3, #1
 801184a:	6023      	str	r3, [r4, #0]
 801184c:	e7b2      	b.n	80117b4 <__ssvfiscanf_r+0x1f0>
 801184e:	4621      	mov	r1, r4
 8011850:	4630      	mov	r0, r6
 8011852:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011854:	4798      	blx	r3
 8011856:	2800      	cmp	r0, #0
 8011858:	d0ac      	beq.n	80117b4 <__ssvfiscanf_r+0x1f0>
 801185a:	e78b      	b.n	8011774 <__ssvfiscanf_r+0x1b0>
 801185c:	2b04      	cmp	r3, #4
 801185e:	dc0f      	bgt.n	8011880 <__ssvfiscanf_r+0x2bc>
 8011860:	466b      	mov	r3, sp
 8011862:	4622      	mov	r2, r4
 8011864:	4630      	mov	r0, r6
 8011866:	a941      	add	r1, sp, #260	; 0x104
 8011868:	f000 f87e 	bl	8011968 <_scanf_i>
 801186c:	e7b0      	b.n	80117d0 <__ssvfiscanf_r+0x20c>
 801186e:	bf00      	nop
 8011870:	0801150f 	.word	0x0801150f
 8011874:	08011589 	.word	0x08011589
 8011878:	08012059 	.word	0x08012059
 801187c:	08012522 	.word	0x08012522
 8011880:	4b0b      	ldr	r3, [pc, #44]	; (80118b0 <__ssvfiscanf_r+0x2ec>)
 8011882:	2b00      	cmp	r3, #0
 8011884:	f43f aec4 	beq.w	8011610 <__ssvfiscanf_r+0x4c>
 8011888:	466b      	mov	r3, sp
 801188a:	4622      	mov	r2, r4
 801188c:	4630      	mov	r0, r6
 801188e:	a941      	add	r1, sp, #260	; 0x104
 8011890:	f3af 8000 	nop.w
 8011894:	e79c      	b.n	80117d0 <__ssvfiscanf_r+0x20c>
 8011896:	89a3      	ldrh	r3, [r4, #12]
 8011898:	f013 0f40 	tst.w	r3, #64	; 0x40
 801189c:	bf18      	it	ne
 801189e:	f04f 30ff 	movne.w	r0, #4294967295
 80118a2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80118a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118aa:	9844      	ldr	r0, [sp, #272]	; 0x110
 80118ac:	e7f9      	b.n	80118a2 <__ssvfiscanf_r+0x2de>
 80118ae:	bf00      	nop
 80118b0:	00000000 	.word	0x00000000

080118b4 <_scanf_chars>:
 80118b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118b8:	4615      	mov	r5, r2
 80118ba:	688a      	ldr	r2, [r1, #8]
 80118bc:	4680      	mov	r8, r0
 80118be:	460c      	mov	r4, r1
 80118c0:	b932      	cbnz	r2, 80118d0 <_scanf_chars+0x1c>
 80118c2:	698a      	ldr	r2, [r1, #24]
 80118c4:	2a00      	cmp	r2, #0
 80118c6:	bf0c      	ite	eq
 80118c8:	2201      	moveq	r2, #1
 80118ca:	f04f 32ff 	movne.w	r2, #4294967295
 80118ce:	608a      	str	r2, [r1, #8]
 80118d0:	2700      	movs	r7, #0
 80118d2:	6822      	ldr	r2, [r4, #0]
 80118d4:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8011964 <_scanf_chars+0xb0>
 80118d8:	06d1      	lsls	r1, r2, #27
 80118da:	bf5f      	itttt	pl
 80118dc:	681a      	ldrpl	r2, [r3, #0]
 80118de:	1d11      	addpl	r1, r2, #4
 80118e0:	6019      	strpl	r1, [r3, #0]
 80118e2:	6816      	ldrpl	r6, [r2, #0]
 80118e4:	69a0      	ldr	r0, [r4, #24]
 80118e6:	b188      	cbz	r0, 801190c <_scanf_chars+0x58>
 80118e8:	2801      	cmp	r0, #1
 80118ea:	d107      	bne.n	80118fc <_scanf_chars+0x48>
 80118ec:	682b      	ldr	r3, [r5, #0]
 80118ee:	781a      	ldrb	r2, [r3, #0]
 80118f0:	6963      	ldr	r3, [r4, #20]
 80118f2:	5c9b      	ldrb	r3, [r3, r2]
 80118f4:	b953      	cbnz	r3, 801190c <_scanf_chars+0x58>
 80118f6:	2f00      	cmp	r7, #0
 80118f8:	d031      	beq.n	801195e <_scanf_chars+0xaa>
 80118fa:	e022      	b.n	8011942 <_scanf_chars+0x8e>
 80118fc:	2802      	cmp	r0, #2
 80118fe:	d120      	bne.n	8011942 <_scanf_chars+0x8e>
 8011900:	682b      	ldr	r3, [r5, #0]
 8011902:	781b      	ldrb	r3, [r3, #0]
 8011904:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011908:	071b      	lsls	r3, r3, #28
 801190a:	d41a      	bmi.n	8011942 <_scanf_chars+0x8e>
 801190c:	6823      	ldr	r3, [r4, #0]
 801190e:	3701      	adds	r7, #1
 8011910:	06da      	lsls	r2, r3, #27
 8011912:	bf5e      	ittt	pl
 8011914:	682b      	ldrpl	r3, [r5, #0]
 8011916:	781b      	ldrbpl	r3, [r3, #0]
 8011918:	f806 3b01 	strbpl.w	r3, [r6], #1
 801191c:	682a      	ldr	r2, [r5, #0]
 801191e:	686b      	ldr	r3, [r5, #4]
 8011920:	3201      	adds	r2, #1
 8011922:	602a      	str	r2, [r5, #0]
 8011924:	68a2      	ldr	r2, [r4, #8]
 8011926:	3b01      	subs	r3, #1
 8011928:	3a01      	subs	r2, #1
 801192a:	606b      	str	r3, [r5, #4]
 801192c:	60a2      	str	r2, [r4, #8]
 801192e:	b142      	cbz	r2, 8011942 <_scanf_chars+0x8e>
 8011930:	2b00      	cmp	r3, #0
 8011932:	dcd7      	bgt.n	80118e4 <_scanf_chars+0x30>
 8011934:	4629      	mov	r1, r5
 8011936:	4640      	mov	r0, r8
 8011938:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801193c:	4798      	blx	r3
 801193e:	2800      	cmp	r0, #0
 8011940:	d0d0      	beq.n	80118e4 <_scanf_chars+0x30>
 8011942:	6823      	ldr	r3, [r4, #0]
 8011944:	f013 0310 	ands.w	r3, r3, #16
 8011948:	d105      	bne.n	8011956 <_scanf_chars+0xa2>
 801194a:	68e2      	ldr	r2, [r4, #12]
 801194c:	3201      	adds	r2, #1
 801194e:	60e2      	str	r2, [r4, #12]
 8011950:	69a2      	ldr	r2, [r4, #24]
 8011952:	b102      	cbz	r2, 8011956 <_scanf_chars+0xa2>
 8011954:	7033      	strb	r3, [r6, #0]
 8011956:	2000      	movs	r0, #0
 8011958:	6923      	ldr	r3, [r4, #16]
 801195a:	443b      	add	r3, r7
 801195c:	6123      	str	r3, [r4, #16]
 801195e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011962:	bf00      	nop
 8011964:	08012059 	.word	0x08012059

08011968 <_scanf_i>:
 8011968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801196c:	460c      	mov	r4, r1
 801196e:	4698      	mov	r8, r3
 8011970:	4b72      	ldr	r3, [pc, #456]	; (8011b3c <_scanf_i+0x1d4>)
 8011972:	b087      	sub	sp, #28
 8011974:	4682      	mov	sl, r0
 8011976:	4616      	mov	r6, r2
 8011978:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801197c:	ab03      	add	r3, sp, #12
 801197e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011982:	4b6f      	ldr	r3, [pc, #444]	; (8011b40 <_scanf_i+0x1d8>)
 8011984:	69a1      	ldr	r1, [r4, #24]
 8011986:	4a6f      	ldr	r2, [pc, #444]	; (8011b44 <_scanf_i+0x1dc>)
 8011988:	4627      	mov	r7, r4
 801198a:	2903      	cmp	r1, #3
 801198c:	bf18      	it	ne
 801198e:	461a      	movne	r2, r3
 8011990:	68a3      	ldr	r3, [r4, #8]
 8011992:	9201      	str	r2, [sp, #4]
 8011994:	1e5a      	subs	r2, r3, #1
 8011996:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801199a:	bf81      	itttt	hi
 801199c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80119a0:	eb03 0905 	addhi.w	r9, r3, r5
 80119a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80119a8:	60a3      	strhi	r3, [r4, #8]
 80119aa:	f857 3b1c 	ldr.w	r3, [r7], #28
 80119ae:	bf98      	it	ls
 80119b0:	f04f 0900 	movls.w	r9, #0
 80119b4:	463d      	mov	r5, r7
 80119b6:	f04f 0b00 	mov.w	fp, #0
 80119ba:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80119be:	6023      	str	r3, [r4, #0]
 80119c0:	6831      	ldr	r1, [r6, #0]
 80119c2:	ab03      	add	r3, sp, #12
 80119c4:	2202      	movs	r2, #2
 80119c6:	7809      	ldrb	r1, [r1, #0]
 80119c8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80119cc:	f7fd faa1 	bl	800ef12 <memchr>
 80119d0:	b328      	cbz	r0, 8011a1e <_scanf_i+0xb6>
 80119d2:	f1bb 0f01 	cmp.w	fp, #1
 80119d6:	d159      	bne.n	8011a8c <_scanf_i+0x124>
 80119d8:	6862      	ldr	r2, [r4, #4]
 80119da:	b92a      	cbnz	r2, 80119e8 <_scanf_i+0x80>
 80119dc:	2308      	movs	r3, #8
 80119de:	6822      	ldr	r2, [r4, #0]
 80119e0:	6063      	str	r3, [r4, #4]
 80119e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80119e6:	6022      	str	r2, [r4, #0]
 80119e8:	6822      	ldr	r2, [r4, #0]
 80119ea:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80119ee:	6022      	str	r2, [r4, #0]
 80119f0:	68a2      	ldr	r2, [r4, #8]
 80119f2:	1e51      	subs	r1, r2, #1
 80119f4:	60a1      	str	r1, [r4, #8]
 80119f6:	b192      	cbz	r2, 8011a1e <_scanf_i+0xb6>
 80119f8:	6832      	ldr	r2, [r6, #0]
 80119fa:	1c51      	adds	r1, r2, #1
 80119fc:	6031      	str	r1, [r6, #0]
 80119fe:	7812      	ldrb	r2, [r2, #0]
 8011a00:	f805 2b01 	strb.w	r2, [r5], #1
 8011a04:	6872      	ldr	r2, [r6, #4]
 8011a06:	3a01      	subs	r2, #1
 8011a08:	2a00      	cmp	r2, #0
 8011a0a:	6072      	str	r2, [r6, #4]
 8011a0c:	dc07      	bgt.n	8011a1e <_scanf_i+0xb6>
 8011a0e:	4631      	mov	r1, r6
 8011a10:	4650      	mov	r0, sl
 8011a12:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8011a16:	4790      	blx	r2
 8011a18:	2800      	cmp	r0, #0
 8011a1a:	f040 8085 	bne.w	8011b28 <_scanf_i+0x1c0>
 8011a1e:	f10b 0b01 	add.w	fp, fp, #1
 8011a22:	f1bb 0f03 	cmp.w	fp, #3
 8011a26:	d1cb      	bne.n	80119c0 <_scanf_i+0x58>
 8011a28:	6863      	ldr	r3, [r4, #4]
 8011a2a:	b90b      	cbnz	r3, 8011a30 <_scanf_i+0xc8>
 8011a2c:	230a      	movs	r3, #10
 8011a2e:	6063      	str	r3, [r4, #4]
 8011a30:	6863      	ldr	r3, [r4, #4]
 8011a32:	4945      	ldr	r1, [pc, #276]	; (8011b48 <_scanf_i+0x1e0>)
 8011a34:	6960      	ldr	r0, [r4, #20]
 8011a36:	1ac9      	subs	r1, r1, r3
 8011a38:	f000 f8e9 	bl	8011c0e <__sccl>
 8011a3c:	f04f 0b00 	mov.w	fp, #0
 8011a40:	68a3      	ldr	r3, [r4, #8]
 8011a42:	6822      	ldr	r2, [r4, #0]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d03d      	beq.n	8011ac4 <_scanf_i+0x15c>
 8011a48:	6831      	ldr	r1, [r6, #0]
 8011a4a:	6960      	ldr	r0, [r4, #20]
 8011a4c:	f891 c000 	ldrb.w	ip, [r1]
 8011a50:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011a54:	2800      	cmp	r0, #0
 8011a56:	d035      	beq.n	8011ac4 <_scanf_i+0x15c>
 8011a58:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8011a5c:	d124      	bne.n	8011aa8 <_scanf_i+0x140>
 8011a5e:	0510      	lsls	r0, r2, #20
 8011a60:	d522      	bpl.n	8011aa8 <_scanf_i+0x140>
 8011a62:	f10b 0b01 	add.w	fp, fp, #1
 8011a66:	f1b9 0f00 	cmp.w	r9, #0
 8011a6a:	d003      	beq.n	8011a74 <_scanf_i+0x10c>
 8011a6c:	3301      	adds	r3, #1
 8011a6e:	f109 39ff 	add.w	r9, r9, #4294967295
 8011a72:	60a3      	str	r3, [r4, #8]
 8011a74:	6873      	ldr	r3, [r6, #4]
 8011a76:	3b01      	subs	r3, #1
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	6073      	str	r3, [r6, #4]
 8011a7c:	dd1b      	ble.n	8011ab6 <_scanf_i+0x14e>
 8011a7e:	6833      	ldr	r3, [r6, #0]
 8011a80:	3301      	adds	r3, #1
 8011a82:	6033      	str	r3, [r6, #0]
 8011a84:	68a3      	ldr	r3, [r4, #8]
 8011a86:	3b01      	subs	r3, #1
 8011a88:	60a3      	str	r3, [r4, #8]
 8011a8a:	e7d9      	b.n	8011a40 <_scanf_i+0xd8>
 8011a8c:	f1bb 0f02 	cmp.w	fp, #2
 8011a90:	d1ae      	bne.n	80119f0 <_scanf_i+0x88>
 8011a92:	6822      	ldr	r2, [r4, #0]
 8011a94:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8011a98:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8011a9c:	d1bf      	bne.n	8011a1e <_scanf_i+0xb6>
 8011a9e:	2310      	movs	r3, #16
 8011aa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011aa4:	6063      	str	r3, [r4, #4]
 8011aa6:	e7a2      	b.n	80119ee <_scanf_i+0x86>
 8011aa8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8011aac:	6022      	str	r2, [r4, #0]
 8011aae:	780b      	ldrb	r3, [r1, #0]
 8011ab0:	f805 3b01 	strb.w	r3, [r5], #1
 8011ab4:	e7de      	b.n	8011a74 <_scanf_i+0x10c>
 8011ab6:	4631      	mov	r1, r6
 8011ab8:	4650      	mov	r0, sl
 8011aba:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011abe:	4798      	blx	r3
 8011ac0:	2800      	cmp	r0, #0
 8011ac2:	d0df      	beq.n	8011a84 <_scanf_i+0x11c>
 8011ac4:	6823      	ldr	r3, [r4, #0]
 8011ac6:	05d9      	lsls	r1, r3, #23
 8011ac8:	d50d      	bpl.n	8011ae6 <_scanf_i+0x17e>
 8011aca:	42bd      	cmp	r5, r7
 8011acc:	d909      	bls.n	8011ae2 <_scanf_i+0x17a>
 8011ace:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011ad2:	4632      	mov	r2, r6
 8011ad4:	4650      	mov	r0, sl
 8011ad6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011ada:	f105 39ff 	add.w	r9, r5, #4294967295
 8011ade:	4798      	blx	r3
 8011ae0:	464d      	mov	r5, r9
 8011ae2:	42bd      	cmp	r5, r7
 8011ae4:	d028      	beq.n	8011b38 <_scanf_i+0x1d0>
 8011ae6:	6822      	ldr	r2, [r4, #0]
 8011ae8:	f012 0210 	ands.w	r2, r2, #16
 8011aec:	d113      	bne.n	8011b16 <_scanf_i+0x1ae>
 8011aee:	702a      	strb	r2, [r5, #0]
 8011af0:	4639      	mov	r1, r7
 8011af2:	6863      	ldr	r3, [r4, #4]
 8011af4:	4650      	mov	r0, sl
 8011af6:	9e01      	ldr	r6, [sp, #4]
 8011af8:	47b0      	blx	r6
 8011afa:	f8d8 3000 	ldr.w	r3, [r8]
 8011afe:	6821      	ldr	r1, [r4, #0]
 8011b00:	1d1a      	adds	r2, r3, #4
 8011b02:	f8c8 2000 	str.w	r2, [r8]
 8011b06:	f011 0f20 	tst.w	r1, #32
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	d00f      	beq.n	8011b2e <_scanf_i+0x1c6>
 8011b0e:	6018      	str	r0, [r3, #0]
 8011b10:	68e3      	ldr	r3, [r4, #12]
 8011b12:	3301      	adds	r3, #1
 8011b14:	60e3      	str	r3, [r4, #12]
 8011b16:	2000      	movs	r0, #0
 8011b18:	6923      	ldr	r3, [r4, #16]
 8011b1a:	1bed      	subs	r5, r5, r7
 8011b1c:	445d      	add	r5, fp
 8011b1e:	442b      	add	r3, r5
 8011b20:	6123      	str	r3, [r4, #16]
 8011b22:	b007      	add	sp, #28
 8011b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b28:	f04f 0b00 	mov.w	fp, #0
 8011b2c:	e7ca      	b.n	8011ac4 <_scanf_i+0x15c>
 8011b2e:	07ca      	lsls	r2, r1, #31
 8011b30:	bf4c      	ite	mi
 8011b32:	8018      	strhmi	r0, [r3, #0]
 8011b34:	6018      	strpl	r0, [r3, #0]
 8011b36:	e7eb      	b.n	8011b10 <_scanf_i+0x1a8>
 8011b38:	2001      	movs	r0, #1
 8011b3a:	e7f2      	b.n	8011b22 <_scanf_i+0x1ba>
 8011b3c:	08011f9c 	.word	0x08011f9c
 8011b40:	08010ead 	.word	0x08010ead
 8011b44:	0800d64d 	.word	0x0800d64d
 8011b48:	080125a0 	.word	0x080125a0

08011b4c <__swhatbuf_r>:
 8011b4c:	b570      	push	{r4, r5, r6, lr}
 8011b4e:	460c      	mov	r4, r1
 8011b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b54:	4615      	mov	r5, r2
 8011b56:	2900      	cmp	r1, #0
 8011b58:	461e      	mov	r6, r3
 8011b5a:	b096      	sub	sp, #88	; 0x58
 8011b5c:	da0c      	bge.n	8011b78 <__swhatbuf_r+0x2c>
 8011b5e:	89a3      	ldrh	r3, [r4, #12]
 8011b60:	2100      	movs	r1, #0
 8011b62:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011b66:	bf0c      	ite	eq
 8011b68:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011b6c:	2340      	movne	r3, #64	; 0x40
 8011b6e:	2000      	movs	r0, #0
 8011b70:	6031      	str	r1, [r6, #0]
 8011b72:	602b      	str	r3, [r5, #0]
 8011b74:	b016      	add	sp, #88	; 0x58
 8011b76:	bd70      	pop	{r4, r5, r6, pc}
 8011b78:	466a      	mov	r2, sp
 8011b7a:	f000 f8e9 	bl	8011d50 <_fstat_r>
 8011b7e:	2800      	cmp	r0, #0
 8011b80:	dbed      	blt.n	8011b5e <__swhatbuf_r+0x12>
 8011b82:	9901      	ldr	r1, [sp, #4]
 8011b84:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011b88:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011b8c:	4259      	negs	r1, r3
 8011b8e:	4159      	adcs	r1, r3
 8011b90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b94:	e7eb      	b.n	8011b6e <__swhatbuf_r+0x22>

08011b96 <__smakebuf_r>:
 8011b96:	898b      	ldrh	r3, [r1, #12]
 8011b98:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011b9a:	079d      	lsls	r5, r3, #30
 8011b9c:	4606      	mov	r6, r0
 8011b9e:	460c      	mov	r4, r1
 8011ba0:	d507      	bpl.n	8011bb2 <__smakebuf_r+0x1c>
 8011ba2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011ba6:	6023      	str	r3, [r4, #0]
 8011ba8:	6123      	str	r3, [r4, #16]
 8011baa:	2301      	movs	r3, #1
 8011bac:	6163      	str	r3, [r4, #20]
 8011bae:	b002      	add	sp, #8
 8011bb0:	bd70      	pop	{r4, r5, r6, pc}
 8011bb2:	466a      	mov	r2, sp
 8011bb4:	ab01      	add	r3, sp, #4
 8011bb6:	f7ff ffc9 	bl	8011b4c <__swhatbuf_r>
 8011bba:	9900      	ldr	r1, [sp, #0]
 8011bbc:	4605      	mov	r5, r0
 8011bbe:	4630      	mov	r0, r6
 8011bc0:	f7fa fdcc 	bl	800c75c <_malloc_r>
 8011bc4:	b948      	cbnz	r0, 8011bda <__smakebuf_r+0x44>
 8011bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bca:	059a      	lsls	r2, r3, #22
 8011bcc:	d4ef      	bmi.n	8011bae <__smakebuf_r+0x18>
 8011bce:	f023 0303 	bic.w	r3, r3, #3
 8011bd2:	f043 0302 	orr.w	r3, r3, #2
 8011bd6:	81a3      	strh	r3, [r4, #12]
 8011bd8:	e7e3      	b.n	8011ba2 <__smakebuf_r+0xc>
 8011bda:	89a3      	ldrh	r3, [r4, #12]
 8011bdc:	6020      	str	r0, [r4, #0]
 8011bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011be2:	81a3      	strh	r3, [r4, #12]
 8011be4:	9b00      	ldr	r3, [sp, #0]
 8011be6:	6120      	str	r0, [r4, #16]
 8011be8:	6163      	str	r3, [r4, #20]
 8011bea:	9b01      	ldr	r3, [sp, #4]
 8011bec:	b15b      	cbz	r3, 8011c06 <__smakebuf_r+0x70>
 8011bee:	4630      	mov	r0, r6
 8011bf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011bf4:	f000 f8be 	bl	8011d74 <_isatty_r>
 8011bf8:	b128      	cbz	r0, 8011c06 <__smakebuf_r+0x70>
 8011bfa:	89a3      	ldrh	r3, [r4, #12]
 8011bfc:	f023 0303 	bic.w	r3, r3, #3
 8011c00:	f043 0301 	orr.w	r3, r3, #1
 8011c04:	81a3      	strh	r3, [r4, #12]
 8011c06:	89a3      	ldrh	r3, [r4, #12]
 8011c08:	431d      	orrs	r5, r3
 8011c0a:	81a5      	strh	r5, [r4, #12]
 8011c0c:	e7cf      	b.n	8011bae <__smakebuf_r+0x18>

08011c0e <__sccl>:
 8011c0e:	b570      	push	{r4, r5, r6, lr}
 8011c10:	780b      	ldrb	r3, [r1, #0]
 8011c12:	4604      	mov	r4, r0
 8011c14:	2b5e      	cmp	r3, #94	; 0x5e
 8011c16:	bf0b      	itete	eq
 8011c18:	784b      	ldrbeq	r3, [r1, #1]
 8011c1a:	1c4a      	addne	r2, r1, #1
 8011c1c:	1c8a      	addeq	r2, r1, #2
 8011c1e:	2100      	movne	r1, #0
 8011c20:	bf08      	it	eq
 8011c22:	2101      	moveq	r1, #1
 8011c24:	3801      	subs	r0, #1
 8011c26:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8011c2a:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011c2e:	42a8      	cmp	r0, r5
 8011c30:	d1fb      	bne.n	8011c2a <__sccl+0x1c>
 8011c32:	b90b      	cbnz	r3, 8011c38 <__sccl+0x2a>
 8011c34:	1e50      	subs	r0, r2, #1
 8011c36:	bd70      	pop	{r4, r5, r6, pc}
 8011c38:	f081 0101 	eor.w	r1, r1, #1
 8011c3c:	4610      	mov	r0, r2
 8011c3e:	54e1      	strb	r1, [r4, r3]
 8011c40:	4602      	mov	r2, r0
 8011c42:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011c46:	2d2d      	cmp	r5, #45	; 0x2d
 8011c48:	d005      	beq.n	8011c56 <__sccl+0x48>
 8011c4a:	2d5d      	cmp	r5, #93	; 0x5d
 8011c4c:	d016      	beq.n	8011c7c <__sccl+0x6e>
 8011c4e:	2d00      	cmp	r5, #0
 8011c50:	d0f1      	beq.n	8011c36 <__sccl+0x28>
 8011c52:	462b      	mov	r3, r5
 8011c54:	e7f2      	b.n	8011c3c <__sccl+0x2e>
 8011c56:	7846      	ldrb	r6, [r0, #1]
 8011c58:	2e5d      	cmp	r6, #93	; 0x5d
 8011c5a:	d0fa      	beq.n	8011c52 <__sccl+0x44>
 8011c5c:	42b3      	cmp	r3, r6
 8011c5e:	dcf8      	bgt.n	8011c52 <__sccl+0x44>
 8011c60:	461a      	mov	r2, r3
 8011c62:	3002      	adds	r0, #2
 8011c64:	3201      	adds	r2, #1
 8011c66:	4296      	cmp	r6, r2
 8011c68:	54a1      	strb	r1, [r4, r2]
 8011c6a:	dcfb      	bgt.n	8011c64 <__sccl+0x56>
 8011c6c:	1af2      	subs	r2, r6, r3
 8011c6e:	3a01      	subs	r2, #1
 8011c70:	42b3      	cmp	r3, r6
 8011c72:	bfa8      	it	ge
 8011c74:	2200      	movge	r2, #0
 8011c76:	1c5d      	adds	r5, r3, #1
 8011c78:	18ab      	adds	r3, r5, r2
 8011c7a:	e7e1      	b.n	8011c40 <__sccl+0x32>
 8011c7c:	4610      	mov	r0, r2
 8011c7e:	e7da      	b.n	8011c36 <__sccl+0x28>

08011c80 <__submore>:
 8011c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c84:	460c      	mov	r4, r1
 8011c86:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011c88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011c8c:	4299      	cmp	r1, r3
 8011c8e:	d11b      	bne.n	8011cc8 <__submore+0x48>
 8011c90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011c94:	f7fa fd62 	bl	800c75c <_malloc_r>
 8011c98:	b918      	cbnz	r0, 8011ca2 <__submore+0x22>
 8011c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8011c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ca6:	63a3      	str	r3, [r4, #56]	; 0x38
 8011ca8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8011cac:	6360      	str	r0, [r4, #52]	; 0x34
 8011cae:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8011cb2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8011cb6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8011cba:	7043      	strb	r3, [r0, #1]
 8011cbc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011cc0:	7003      	strb	r3, [r0, #0]
 8011cc2:	6020      	str	r0, [r4, #0]
 8011cc4:	2000      	movs	r0, #0
 8011cc6:	e7ea      	b.n	8011c9e <__submore+0x1e>
 8011cc8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8011cca:	0077      	lsls	r7, r6, #1
 8011ccc:	463a      	mov	r2, r7
 8011cce:	f7ff fbef 	bl	80114b0 <_realloc_r>
 8011cd2:	4605      	mov	r5, r0
 8011cd4:	2800      	cmp	r0, #0
 8011cd6:	d0e0      	beq.n	8011c9a <__submore+0x1a>
 8011cd8:	eb00 0806 	add.w	r8, r0, r6
 8011cdc:	4601      	mov	r1, r0
 8011cde:	4632      	mov	r2, r6
 8011ce0:	4640      	mov	r0, r8
 8011ce2:	f7fd f924 	bl	800ef2e <memcpy>
 8011ce6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8011cea:	f8c4 8000 	str.w	r8, [r4]
 8011cee:	e7e9      	b.n	8011cc4 <__submore+0x44>

08011cf0 <_raise_r>:
 8011cf0:	291f      	cmp	r1, #31
 8011cf2:	b538      	push	{r3, r4, r5, lr}
 8011cf4:	4604      	mov	r4, r0
 8011cf6:	460d      	mov	r5, r1
 8011cf8:	d904      	bls.n	8011d04 <_raise_r+0x14>
 8011cfa:	2316      	movs	r3, #22
 8011cfc:	6003      	str	r3, [r0, #0]
 8011cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8011d02:	bd38      	pop	{r3, r4, r5, pc}
 8011d04:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011d06:	b112      	cbz	r2, 8011d0e <_raise_r+0x1e>
 8011d08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011d0c:	b94b      	cbnz	r3, 8011d22 <_raise_r+0x32>
 8011d0e:	4620      	mov	r0, r4
 8011d10:	f000 f852 	bl	8011db8 <_getpid_r>
 8011d14:	462a      	mov	r2, r5
 8011d16:	4601      	mov	r1, r0
 8011d18:	4620      	mov	r0, r4
 8011d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d1e:	f000 b839 	b.w	8011d94 <_kill_r>
 8011d22:	2b01      	cmp	r3, #1
 8011d24:	d00a      	beq.n	8011d3c <_raise_r+0x4c>
 8011d26:	1c59      	adds	r1, r3, #1
 8011d28:	d103      	bne.n	8011d32 <_raise_r+0x42>
 8011d2a:	2316      	movs	r3, #22
 8011d2c:	6003      	str	r3, [r0, #0]
 8011d2e:	2001      	movs	r0, #1
 8011d30:	e7e7      	b.n	8011d02 <_raise_r+0x12>
 8011d32:	2400      	movs	r4, #0
 8011d34:	4628      	mov	r0, r5
 8011d36:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011d3a:	4798      	blx	r3
 8011d3c:	2000      	movs	r0, #0
 8011d3e:	e7e0      	b.n	8011d02 <_raise_r+0x12>

08011d40 <raise>:
 8011d40:	4b02      	ldr	r3, [pc, #8]	; (8011d4c <raise+0xc>)
 8011d42:	4601      	mov	r1, r0
 8011d44:	6818      	ldr	r0, [r3, #0]
 8011d46:	f7ff bfd3 	b.w	8011cf0 <_raise_r>
 8011d4a:	bf00      	nop
 8011d4c:	200002d0 	.word	0x200002d0

08011d50 <_fstat_r>:
 8011d50:	b538      	push	{r3, r4, r5, lr}
 8011d52:	2300      	movs	r3, #0
 8011d54:	4d06      	ldr	r5, [pc, #24]	; (8011d70 <_fstat_r+0x20>)
 8011d56:	4604      	mov	r4, r0
 8011d58:	4608      	mov	r0, r1
 8011d5a:	4611      	mov	r1, r2
 8011d5c:	602b      	str	r3, [r5, #0]
 8011d5e:	f7f2 fb17 	bl	8004390 <_fstat>
 8011d62:	1c43      	adds	r3, r0, #1
 8011d64:	d102      	bne.n	8011d6c <_fstat_r+0x1c>
 8011d66:	682b      	ldr	r3, [r5, #0]
 8011d68:	b103      	cbz	r3, 8011d6c <_fstat_r+0x1c>
 8011d6a:	6023      	str	r3, [r4, #0]
 8011d6c:	bd38      	pop	{r3, r4, r5, pc}
 8011d6e:	bf00      	nop
 8011d70:	20005b88 	.word	0x20005b88

08011d74 <_isatty_r>:
 8011d74:	b538      	push	{r3, r4, r5, lr}
 8011d76:	2300      	movs	r3, #0
 8011d78:	4d05      	ldr	r5, [pc, #20]	; (8011d90 <_isatty_r+0x1c>)
 8011d7a:	4604      	mov	r4, r0
 8011d7c:	4608      	mov	r0, r1
 8011d7e:	602b      	str	r3, [r5, #0]
 8011d80:	f7f2 fb15 	bl	80043ae <_isatty>
 8011d84:	1c43      	adds	r3, r0, #1
 8011d86:	d102      	bne.n	8011d8e <_isatty_r+0x1a>
 8011d88:	682b      	ldr	r3, [r5, #0]
 8011d8a:	b103      	cbz	r3, 8011d8e <_isatty_r+0x1a>
 8011d8c:	6023      	str	r3, [r4, #0]
 8011d8e:	bd38      	pop	{r3, r4, r5, pc}
 8011d90:	20005b88 	.word	0x20005b88

08011d94 <_kill_r>:
 8011d94:	b538      	push	{r3, r4, r5, lr}
 8011d96:	2300      	movs	r3, #0
 8011d98:	4d06      	ldr	r5, [pc, #24]	; (8011db4 <_kill_r+0x20>)
 8011d9a:	4604      	mov	r4, r0
 8011d9c:	4608      	mov	r0, r1
 8011d9e:	4611      	mov	r1, r2
 8011da0:	602b      	str	r3, [r5, #0]
 8011da2:	f7f2 fad0 	bl	8004346 <_kill>
 8011da6:	1c43      	adds	r3, r0, #1
 8011da8:	d102      	bne.n	8011db0 <_kill_r+0x1c>
 8011daa:	682b      	ldr	r3, [r5, #0]
 8011dac:	b103      	cbz	r3, 8011db0 <_kill_r+0x1c>
 8011dae:	6023      	str	r3, [r4, #0]
 8011db0:	bd38      	pop	{r3, r4, r5, pc}
 8011db2:	bf00      	nop
 8011db4:	20005b88 	.word	0x20005b88

08011db8 <_getpid_r>:
 8011db8:	f7f2 babe 	b.w	8004338 <_getpid>

08011dbc <_malloc_usable_size_r>:
 8011dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011dc0:	1f18      	subs	r0, r3, #4
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	bfbc      	itt	lt
 8011dc6:	580b      	ldrlt	r3, [r1, r0]
 8011dc8:	18c0      	addlt	r0, r0, r3
 8011dca:	4770      	bx	lr

08011dcc <_init>:
 8011dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dce:	bf00      	nop
 8011dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011dd2:	bc08      	pop	{r3}
 8011dd4:	469e      	mov	lr, r3
 8011dd6:	4770      	bx	lr

08011dd8 <_fini>:
 8011dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dda:	bf00      	nop
 8011ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011dde:	bc08      	pop	{r3}
 8011de0:	469e      	mov	lr, r3
 8011de2:	4770      	bx	lr
