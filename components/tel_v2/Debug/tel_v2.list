
tel_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005400  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  080055f0  080055f0  000155f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800581c  0800581c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800581c  0800581c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800581c  0800581c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800581c  0800581c  0001581c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005820  08005820  00015820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000318c  20000060  08005884  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200031ec  08005884  000231ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017dec  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003970  00000000  00000000  00037eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001438  00000000  00000000  0003b828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000faa  00000000  00000000  0003cc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bd9e  00000000  00000000  0003dc0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019573  00000000  00000000  000599a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0c1c  00000000  00000000  00072f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000566c  00000000  00000000  00113b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001191a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000060 	.word	0x20000060
 800020c:	00000000 	.word	0x00000000
 8000210:	080055d8 	.word	0x080055d8

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000064 	.word	0x20000064
 800022c:	080055d8 	.word	0x080055d8

08000230 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <MX_CAN_Init+0x64>)
 8000236:	4a18      	ldr	r2, [pc, #96]	; (8000298 <MX_CAN_Init+0x68>)
 8000238:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800023a:	4b16      	ldr	r3, [pc, #88]	; (8000294 <MX_CAN_Init+0x64>)
 800023c:	2204      	movs	r2, #4
 800023e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000240:	4b14      	ldr	r3, [pc, #80]	; (8000294 <MX_CAN_Init+0x64>)
 8000242:	2200      	movs	r2, #0
 8000244:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000246:	4b13      	ldr	r3, [pc, #76]	; (8000294 <MX_CAN_Init+0x64>)
 8000248:	2200      	movs	r2, #0
 800024a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 800024c:	4b11      	ldr	r3, [pc, #68]	; (8000294 <MX_CAN_Init+0x64>)
 800024e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000252:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000254:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <MX_CAN_Init+0x64>)
 8000256:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 800025a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800025c:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <MX_CAN_Init+0x64>)
 800025e:	2200      	movs	r2, #0
 8000260:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000262:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <MX_CAN_Init+0x64>)
 8000264:	2200      	movs	r2, #0
 8000266:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000268:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <MX_CAN_Init+0x64>)
 800026a:	2200      	movs	r2, #0
 800026c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800026e:	4b09      	ldr	r3, [pc, #36]	; (8000294 <MX_CAN_Init+0x64>)
 8000270:	2200      	movs	r2, #0
 8000272:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000274:	4b07      	ldr	r3, [pc, #28]	; (8000294 <MX_CAN_Init+0x64>)
 8000276:	2200      	movs	r2, #0
 8000278:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <MX_CAN_Init+0x64>)
 800027c:	2200      	movs	r2, #0
 800027e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000280:	4804      	ldr	r0, [pc, #16]	; (8000294 <MX_CAN_Init+0x64>)
 8000282:	f000 fda5 	bl	8000dd0 <HAL_CAN_Init>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800028c:	f000 fb58 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	2000007c 	.word	0x2000007c
 8000298:	40006400 	.word	0x40006400

0800029c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b08a      	sub	sp, #40	; 0x28
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a4:	f107 0314 	add.w	r3, r7, #20
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a25      	ldr	r2, [pc, #148]	; (800034c <HAL_CAN_MspInit+0xb0>)
 80002b8:	4293      	cmp	r3, r2
 80002ba:	d143      	bne.n	8000344 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80002bc:	4b24      	ldr	r3, [pc, #144]	; (8000350 <HAL_CAN_MspInit+0xb4>)
 80002be:	69db      	ldr	r3, [r3, #28]
 80002c0:	4a23      	ldr	r2, [pc, #140]	; (8000350 <HAL_CAN_MspInit+0xb4>)
 80002c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002c6:	61d3      	str	r3, [r2, #28]
 80002c8:	4b21      	ldr	r3, [pc, #132]	; (8000350 <HAL_CAN_MspInit+0xb4>)
 80002ca:	69db      	ldr	r3, [r3, #28]
 80002cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002d0:	613b      	str	r3, [r7, #16]
 80002d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002d4:	4b1e      	ldr	r3, [pc, #120]	; (8000350 <HAL_CAN_MspInit+0xb4>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a1d      	ldr	r2, [pc, #116]	; (8000350 <HAL_CAN_MspInit+0xb4>)
 80002da:	f043 0308 	orr.w	r3, r3, #8
 80002de:	6193      	str	r3, [r2, #24]
 80002e0:	4b1b      	ldr	r3, [pc, #108]	; (8000350 <HAL_CAN_MspInit+0xb4>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	f003 0308 	and.w	r3, r3, #8
 80002e8:	60fb      	str	r3, [r7, #12]
 80002ea:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80002ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002f2:	2300      	movs	r3, #0
 80002f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f6:	2300      	movs	r3, #0
 80002f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002fa:	f107 0314 	add.w	r3, r7, #20
 80002fe:	4619      	mov	r1, r3
 8000300:	4814      	ldr	r0, [pc, #80]	; (8000354 <HAL_CAN_MspInit+0xb8>)
 8000302:	f001 f8b1 	bl	8001468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000306:	f44f 7300 	mov.w	r3, #512	; 0x200
 800030a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800030c:	2302      	movs	r3, #2
 800030e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000310:	2303      	movs	r3, #3
 8000312:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000314:	f107 0314 	add.w	r3, r7, #20
 8000318:	4619      	mov	r1, r3
 800031a:	480e      	ldr	r0, [pc, #56]	; (8000354 <HAL_CAN_MspInit+0xb8>)
 800031c:	f001 f8a4 	bl	8001468 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000320:	4b0d      	ldr	r3, [pc, #52]	; (8000358 <HAL_CAN_MspInit+0xbc>)
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	627b      	str	r3, [r7, #36]	; 0x24
 8000326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000328:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800032c:	627b      	str	r3, [r7, #36]	; 0x24
 800032e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000330:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000334:	627b      	str	r3, [r7, #36]	; 0x24
 8000336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800033c:	627b      	str	r3, [r7, #36]	; 0x24
 800033e:	4a06      	ldr	r2, [pc, #24]	; (8000358 <HAL_CAN_MspInit+0xbc>)
 8000340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000342:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000344:	bf00      	nop
 8000346:	3728      	adds	r7, #40	; 0x28
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	40006400 	.word	0x40006400
 8000350:	40021000 	.word	0x40021000
 8000354:	40010c00 	.word	0x40010c00
 8000358:	40010000 	.word	0x40010000

0800035c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of canMessageQueue */
  canMessageQueueHandle = osMessageQueueNew (10, sizeof(uint16_t), &canMessageQueue_attributes);
 8000360:	4a28      	ldr	r2, [pc, #160]	; (8000404 <MX_FREERTOS_Init+0xa8>)
 8000362:	2102      	movs	r1, #2
 8000364:	200a      	movs	r0, #10
 8000366:	f002 faef 	bl	8002948 <osMessageQueueNew>
 800036a:	4603      	mov	r3, r0
 800036c:	4a26      	ldr	r2, [pc, #152]	; (8000408 <MX_FREERTOS_Init+0xac>)
 800036e:	6013      	str	r3, [r2, #0]

  /* creation of imuMessageQueue */
  imuMessageQueueHandle = osMessageQueueNew (10, sizeof(uint16_t), &imuMessageQueue_attributes);
 8000370:	4a26      	ldr	r2, [pc, #152]	; (800040c <MX_FREERTOS_Init+0xb0>)
 8000372:	2102      	movs	r1, #2
 8000374:	200a      	movs	r0, #10
 8000376:	f002 fae7 	bl	8002948 <osMessageQueueNew>
 800037a:	4603      	mov	r3, r0
 800037c:	4a24      	ldr	r2, [pc, #144]	; (8000410 <MX_FREERTOS_Init+0xb4>)
 800037e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of StartDefaultTask */
  StartDefaultTaskHandle = osThreadNew(startDefaultTask, NULL, &StartDefaultTask_attributes);
 8000380:	4a24      	ldr	r2, [pc, #144]	; (8000414 <MX_FREERTOS_Init+0xb8>)
 8000382:	2100      	movs	r1, #0
 8000384:	4824      	ldr	r0, [pc, #144]	; (8000418 <MX_FREERTOS_Init+0xbc>)
 8000386:	f002 f973 	bl	8002670 <osThreadNew>
 800038a:	4603      	mov	r3, r0
 800038c:	4a23      	ldr	r2, [pc, #140]	; (800041c <MX_FREERTOS_Init+0xc0>)
 800038e:	6013      	str	r3, [r2, #0]

  /* creation of readCANTask */
  readCANTaskHandle = osThreadNew(read_CAN_task, NULL, &readCANTask_attributes);
 8000390:	4a23      	ldr	r2, [pc, #140]	; (8000420 <MX_FREERTOS_Init+0xc4>)
 8000392:	2100      	movs	r1, #0
 8000394:	4823      	ldr	r0, [pc, #140]	; (8000424 <MX_FREERTOS_Init+0xc8>)
 8000396:	f002 f96b 	bl	8002670 <osThreadNew>
 800039a:	4603      	mov	r3, r0
 800039c:	4a22      	ldr	r2, [pc, #136]	; (8000428 <MX_FREERTOS_Init+0xcc>)
 800039e:	6013      	str	r3, [r2, #0]

  /* creation of transmitCANTask */
  transmitCANTaskHandle = osThreadNew(transmit_CAN_task, NULL, &transmitCANTask_attributes);
 80003a0:	4a22      	ldr	r2, [pc, #136]	; (800042c <MX_FREERTOS_Init+0xd0>)
 80003a2:	2100      	movs	r1, #0
 80003a4:	4822      	ldr	r0, [pc, #136]	; (8000430 <MX_FREERTOS_Init+0xd4>)
 80003a6:	f002 f963 	bl	8002670 <osThreadNew>
 80003aa:	4603      	mov	r3, r0
 80003ac:	4a21      	ldr	r2, [pc, #132]	; (8000434 <MX_FREERTOS_Init+0xd8>)
 80003ae:	6013      	str	r3, [r2, #0]

  /* creation of readIMUTask */
  readIMUTaskHandle = osThreadNew(read_IMU_task, NULL, &readIMUTask_attributes);
 80003b0:	4a21      	ldr	r2, [pc, #132]	; (8000438 <MX_FREERTOS_Init+0xdc>)
 80003b2:	2100      	movs	r1, #0
 80003b4:	4821      	ldr	r0, [pc, #132]	; (800043c <MX_FREERTOS_Init+0xe0>)
 80003b6:	f002 f95b 	bl	8002670 <osThreadNew>
 80003ba:	4603      	mov	r3, r0
 80003bc:	4a20      	ldr	r2, [pc, #128]	; (8000440 <MX_FREERTOS_Init+0xe4>)
 80003be:	6013      	str	r3, [r2, #0]

  /* creation of transmitIMUTask */
  transmitIMUTaskHandle = osThreadNew(transmit_IMU_task, NULL, &transmitIMUTask_attributes);
 80003c0:	4a20      	ldr	r2, [pc, #128]	; (8000444 <MX_FREERTOS_Init+0xe8>)
 80003c2:	2100      	movs	r1, #0
 80003c4:	4820      	ldr	r0, [pc, #128]	; (8000448 <MX_FREERTOS_Init+0xec>)
 80003c6:	f002 f953 	bl	8002670 <osThreadNew>
 80003ca:	4603      	mov	r3, r0
 80003cc:	4a1f      	ldr	r2, [pc, #124]	; (800044c <MX_FREERTOS_Init+0xf0>)
 80003ce:	6013      	str	r3, [r2, #0]

  /* creation of readGPSTask */
  readGPSTaskHandle = osThreadNew(read_GPS_task, NULL, &readGPSTask_attributes);
 80003d0:	4a1f      	ldr	r2, [pc, #124]	; (8000450 <MX_FREERTOS_Init+0xf4>)
 80003d2:	2100      	movs	r1, #0
 80003d4:	481f      	ldr	r0, [pc, #124]	; (8000454 <MX_FREERTOS_Init+0xf8>)
 80003d6:	f002 f94b 	bl	8002670 <osThreadNew>
 80003da:	4603      	mov	r3, r0
 80003dc:	4a1e      	ldr	r2, [pc, #120]	; (8000458 <MX_FREERTOS_Init+0xfc>)
 80003de:	6013      	str	r3, [r2, #0]

  /* creation of transmitGPSTask */
  transmitGPSTaskHandle = osThreadNew(transmit_GPS_task, NULL, &transmitGPSTask_attributes);
 80003e0:	4a1e      	ldr	r2, [pc, #120]	; (800045c <MX_FREERTOS_Init+0x100>)
 80003e2:	2100      	movs	r1, #0
 80003e4:	481e      	ldr	r0, [pc, #120]	; (8000460 <MX_FREERTOS_Init+0x104>)
 80003e6:	f002 f943 	bl	8002670 <osThreadNew>
 80003ea:	4603      	mov	r3, r0
 80003ec:	4a1d      	ldr	r2, [pc, #116]	; (8000464 <MX_FREERTOS_Init+0x108>)
 80003ee:	6013      	str	r3, [r2, #0]

  /* creation of kernelLEDTask */
  kernelLEDTaskHandle = osThreadNew(kernel_LED_task, NULL, &kernelLEDTask_attributes);
 80003f0:	4a1d      	ldr	r2, [pc, #116]	; (8000468 <MX_FREERTOS_Init+0x10c>)
 80003f2:	2100      	movs	r1, #0
 80003f4:	481d      	ldr	r0, [pc, #116]	; (800046c <MX_FREERTOS_Init+0x110>)
 80003f6:	f002 f93b 	bl	8002670 <osThreadNew>
 80003fa:	4603      	mov	r3, r0
 80003fc:	4a1c      	ldr	r2, [pc, #112]	; (8000470 <MX_FREERTOS_Init+0x114>)
 80003fe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}
 8000404:	080057c0 	.word	0x080057c0
 8000408:	200000c4 	.word	0x200000c4
 800040c:	080057d8 	.word	0x080057d8
 8000410:	200000c8 	.word	0x200000c8
 8000414:	080056a0 	.word	0x080056a0
 8000418:	08000475 	.word	0x08000475
 800041c:	200000a4 	.word	0x200000a4
 8000420:	080056c4 	.word	0x080056c4
 8000424:	08000485 	.word	0x08000485
 8000428:	200000a8 	.word	0x200000a8
 800042c:	080056e8 	.word	0x080056e8
 8000430:	0800052d 	.word	0x0800052d
 8000434:	200000ac 	.word	0x200000ac
 8000438:	0800570c 	.word	0x0800570c
 800043c:	0800053d 	.word	0x0800053d
 8000440:	200000b0 	.word	0x200000b0
 8000444:	08005730 	.word	0x08005730
 8000448:	0800054d 	.word	0x0800054d
 800044c:	200000b4 	.word	0x200000b4
 8000450:	08005754 	.word	0x08005754
 8000454:	0800055d 	.word	0x0800055d
 8000458:	200000b8 	.word	0x200000b8
 800045c:	08005778 	.word	0x08005778
 8000460:	0800056d 	.word	0x0800056d
 8000464:	200000bc 	.word	0x200000bc
 8000468:	0800579c 	.word	0x0800579c
 800046c:	0800057d 	.word	0x0800057d
 8000470:	200000c0 	.word	0x200000c0

08000474 <startDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startDefaultTask */
void startDefaultTask(void *argument)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800047c:	2001      	movs	r0, #1
 800047e:	f002 fa35 	bl	80028ec <osDelay>
 8000482:	e7fb      	b.n	800047c <startDefaultTask+0x8>

08000484 <read_CAN_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_CAN_task */
void read_CAN_task(void *argument)
{
 8000484:	b5b0      	push	{r4, r5, r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  while (1) {

    /* Wait for thread flags to be set in the CAN Rx FIFO0 Interrupt Callback */
    osThreadFlagsWait(CAN_READY, osFlagsWaitAll, osWaitForever);
 800048c:	f04f 32ff 	mov.w	r2, #4294967295
 8000490:	2101      	movs	r1, #1
 8000492:	2001      	movs	r0, #1
 8000494:	f002 f996 	bl	80027c4 <osThreadFlagsWait>

    /* If CAN Rx FIFO0 is not empty */
    if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) != 0) {
 8000498:	2100      	movs	r1, #0
 800049a:	481e      	ldr	r0, [pc, #120]	; (8000514 <read_CAN_task+0x90>)
 800049c:	f000 feb4 	bl	8001208 <HAL_CAN_GetRxFifoFillLevel>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d031      	beq.n	800050a <read_CAN_task+0x86>

      /* There are multiple CAN IDs being passed through the filter, pull out the current message */
      rx_status = HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &can_rx_header, current_can_data);
 80004a6:	4b1c      	ldr	r3, [pc, #112]	; (8000518 <read_CAN_task+0x94>)
 80004a8:	4a1c      	ldr	r2, [pc, #112]	; (800051c <read_CAN_task+0x98>)
 80004aa:	2100      	movs	r1, #0
 80004ac:	4819      	ldr	r0, [pc, #100]	; (8000514 <read_CAN_task+0x90>)
 80004ae:	f000 fd8a 	bl	8000fc6 <HAL_CAN_GetRxMessage>
 80004b2:	4603      	mov	r3, r0
 80004b4:	461a      	mov	r2, r3
 80004b6:	4b1a      	ldr	r3, [pc, #104]	; (8000520 <read_CAN_task+0x9c>)
 80004b8:	701a      	strb	r2, [r3, #0]

      /* Check the rx status */
      if (rx_status != HAL_OK) {
 80004ba:	4b19      	ldr	r3, [pc, #100]	; (8000520 <read_CAN_task+0x9c>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <read_CAN_task+0x42>
	  Error_Handler();
 80004c2:	f000 fa3d 	bl	8000940 <Error_Handler>
      }

      /* Package into CAN_msg_t */
      current_can_message.header = can_rx_header;
 80004c6:	4a17      	ldr	r2, [pc, #92]	; (8000524 <read_CAN_task+0xa0>)
 80004c8:	4b14      	ldr	r3, [pc, #80]	; (800051c <read_CAN_task+0x98>)
 80004ca:	4614      	mov	r4, r2
 80004cc:	461d      	mov	r5, r3
 80004ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

      /* Copy all bytes of data */
      for (uint8_t i = 0; i < 8; i++) {
 80004da:	2300      	movs	r3, #0
 80004dc:	73fb      	strb	r3, [r7, #15]
 80004de:	e00a      	b.n	80004f6 <read_CAN_task+0x72>
	current_can_message.data[i] = current_can_data[i];
 80004e0:	7bfa      	ldrb	r2, [r7, #15]
 80004e2:	7bfb      	ldrb	r3, [r7, #15]
 80004e4:	490c      	ldr	r1, [pc, #48]	; (8000518 <read_CAN_task+0x94>)
 80004e6:	5c89      	ldrb	r1, [r1, r2]
 80004e8:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <read_CAN_task+0xa0>)
 80004ea:	4413      	add	r3, r2
 80004ec:	460a      	mov	r2, r1
 80004ee:	771a      	strb	r2, [r3, #28]
      for (uint8_t i = 0; i < 8; i++) {
 80004f0:	7bfb      	ldrb	r3, [r7, #15]
 80004f2:	3301      	adds	r3, #1
 80004f4:	73fb      	strb	r3, [r7, #15]
 80004f6:	7bfb      	ldrb	r3, [r7, #15]
 80004f8:	2b07      	cmp	r3, #7
 80004fa:	d9f1      	bls.n	80004e0 <read_CAN_task+0x5c>
      }

      /* Add CAN message onto canMessageQueue */
      osMessageQueuePut(canMessageQueueHandle, &current_can_message, 0U, 0U);
 80004fc:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <read_CAN_task+0xa4>)
 80004fe:	6818      	ldr	r0, [r3, #0]
 8000500:	2300      	movs	r3, #0
 8000502:	2200      	movs	r2, #0
 8000504:	4907      	ldr	r1, [pc, #28]	; (8000524 <read_CAN_task+0xa0>)
 8000506:	f002 faa5 	bl	8002a54 <osMessageQueuePut>
    }

    /* Enables Interrupts */
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800050a:	2102      	movs	r1, #2
 800050c:	4801      	ldr	r0, [pc, #4]	; (8000514 <read_CAN_task+0x90>)
 800050e:	f000 fea2 	bl	8001256 <HAL_CAN_ActivateNotification>
    osThreadFlagsWait(CAN_READY, osFlagsWaitAll, osWaitForever);
 8000512:	e7bb      	b.n	800048c <read_CAN_task+0x8>
 8000514:	2000007c 	.word	0x2000007c
 8000518:	200001b8 	.word	0x200001b8
 800051c:	2000019c 	.word	0x2000019c
 8000520:	200000cc 	.word	0x200000cc
 8000524:	200000d0 	.word	0x200000d0
 8000528:	200000c4 	.word	0x200000c4

0800052c <transmit_CAN_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_CAN_task */
void transmit_CAN_task(void *argument)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN transmit_CAN_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000534:	2001      	movs	r0, #1
 8000536:	f002 f9d9 	bl	80028ec <osDelay>
 800053a:	e7fb      	b.n	8000534 <transmit_CAN_task+0x8>

0800053c <read_IMU_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_IMU_task */
void read_IMU_task(void *argument)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN read_IMU_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000544:	2001      	movs	r0, #1
 8000546:	f002 f9d1 	bl	80028ec <osDelay>
 800054a:	e7fb      	b.n	8000544 <read_IMU_task+0x8>

0800054c <transmit_IMU_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_IMU_task */
void transmit_IMU_task(void *argument)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN transmit_IMU_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000554:	2001      	movs	r0, #1
 8000556:	f002 f9c9 	bl	80028ec <osDelay>
 800055a:	e7fb      	b.n	8000554 <transmit_IMU_task+0x8>

0800055c <read_GPS_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_GPS_task */
void read_GPS_task(void *argument)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN read_GPS_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000564:	2001      	movs	r0, #1
 8000566:	f002 f9c1 	bl	80028ec <osDelay>
 800056a:	e7fb      	b.n	8000564 <read_GPS_task+0x8>

0800056c <transmit_GPS_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_GPS_task */
void transmit_GPS_task(void *argument)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN transmit_GPS_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000574:	2001      	movs	r0, #1
 8000576:	f002 f9b9 	bl	80028ec <osDelay>
 800057a:	e7fb      	b.n	8000574 <transmit_GPS_task+0x8>

0800057c <kernel_LED_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_kernel_LED_task */
void kernel_LED_task(void *argument)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  while (1) {

    /* Get the kernel status */
    kernel_status = osKernelGetState();
 8000584:	f002 f81e 	bl	80025c4 <osKernelGetState>
 8000588:	60f8      	str	r0, [r7, #12]

    /* Check if the kernel status is "Running" */
    if (kernel_status == osKernelRunning) {
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	2b02      	cmp	r3, #2
 800058e:	d103      	bne.n	8000598 <kernel_LED_task+0x1c>

      /* If running, toggle the LED */
      HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 8000590:	2102      	movs	r1, #2
 8000592:	4803      	ldr	r0, [pc, #12]	; (80005a0 <kernel_LED_task+0x24>)
 8000594:	f001 f914 	bl	80017c0 <HAL_GPIO_TogglePin>
    }

    /* Delay */
    osDelay(KERNEL_LED_DELAY);
 8000598:	20c8      	movs	r0, #200	; 0xc8
 800059a:	f002 f9a7 	bl	80028ec <osDelay>
    kernel_status = osKernelGetState();
 800059e:	e7f1      	b.n	8000584 <kernel_LED_task+0x8>
 80005a0:	40010800 	.word	0x40010800

080005a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005aa:	f107 0310 	add.w	r3, r7, #16
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005b8:	4b49      	ldr	r3, [pc, #292]	; (80006e0 <MX_GPIO_Init+0x13c>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a48      	ldr	r2, [pc, #288]	; (80006e0 <MX_GPIO_Init+0x13c>)
 80005be:	f043 0320 	orr.w	r3, r3, #32
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b46      	ldr	r3, [pc, #280]	; (80006e0 <MX_GPIO_Init+0x13c>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0320 	and.w	r3, r3, #32
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d0:	4b43      	ldr	r3, [pc, #268]	; (80006e0 <MX_GPIO_Init+0x13c>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a42      	ldr	r2, [pc, #264]	; (80006e0 <MX_GPIO_Init+0x13c>)
 80005d6:	f043 0310 	orr.w	r3, r3, #16
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	4b40      	ldr	r3, [pc, #256]	; (80006e0 <MX_GPIO_Init+0x13c>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f003 0310 	and.w	r3, r3, #16
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e8:	4b3d      	ldr	r3, [pc, #244]	; (80006e0 <MX_GPIO_Init+0x13c>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a3c      	ldr	r2, [pc, #240]	; (80006e0 <MX_GPIO_Init+0x13c>)
 80005ee:	f043 0304 	orr.w	r3, r3, #4
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b3a      	ldr	r3, [pc, #232]	; (80006e0 <MX_GPIO_Init+0x13c>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f003 0304 	and.w	r3, r3, #4
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000600:	4b37      	ldr	r3, [pc, #220]	; (80006e0 <MX_GPIO_Init+0x13c>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a36      	ldr	r2, [pc, #216]	; (80006e0 <MX_GPIO_Init+0x13c>)
 8000606:	f043 0308 	orr.w	r3, r3, #8
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b34      	ldr	r3, [pc, #208]	; (80006e0 <MX_GPIO_Init+0x13c>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0308 	and.w	r3, r3, #8
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_GPIO_DIO7_Pin|RADIO_GPIO_DIO9_SLEEP_Pin|RADIO_GPIO_DIO11_Pin|RADIO_GPIO_DIO10_Pin, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2178      	movs	r1, #120	; 0x78
 800061c:	4831      	ldr	r0, [pc, #196]	; (80006e4 <MX_GPIO_Init+0x140>)
 800061e:	f001 f8b7 	bl	8001790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USER_LED_Pin|SDL_CS_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2112      	movs	r1, #18
 8000626:	4830      	ldr	r0, [pc, #192]	; (80006e8 <MX_GPIO_Init+0x144>)
 8000628:	f001 f8b2 	bl	8001790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RADIO_GPIO_DIO4_Pin|RADIO_GPIO_DIO3_Pin|RADIO_GPIO_DIO2_Pin, GPIO_PIN_SET);
 800062c:	2201      	movs	r2, #1
 800062e:	f24a 0101 	movw	r1, #40961	; 0xa001
 8000632:	482e      	ldr	r0, [pc, #184]	; (80006ec <MX_GPIO_Init+0x148>)
 8000634:	f001 f8ac 	bl	8001790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RADIO_GPIO_DIO12_Pin|RADIO_GPIO_DIO6_Pin|RADIO_DIO8_SLEEP_CONTROL_Pin, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	f245 0102 	movw	r1, #20482	; 0x5002
 800063e:	482b      	ldr	r0, [pc, #172]	; (80006ec <MX_GPIO_Init+0x148>)
 8000640:	f001 f8a6 	bl	8001790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_GPIO_DIO1_Pin|RADIO_GPIO_DIO0_Pin, GPIO_PIN_SET);
 8000644:	2201      	movs	r2, #1
 8000646:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800064a:	4826      	ldr	r0, [pc, #152]	; (80006e4 <MX_GPIO_Init+0x140>)
 800064c:	f001 f8a0 	bl	8001790 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = RADIO_GPIO_DIO7_Pin|RADIO_GPIO_DIO9_SLEEP_Pin|RADIO_GPIO_DIO11_Pin|RADIO_GPIO_DIO10_Pin
 8000650:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000654:	613b      	str	r3, [r7, #16]
                          |RADIO_GPIO_DIO1_Pin|RADIO_GPIO_DIO0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000656:	2301      	movs	r3, #1
 8000658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065e:	2302      	movs	r3, #2
 8000660:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000662:	f107 0310 	add.w	r3, r7, #16
 8000666:	4619      	mov	r1, r3
 8000668:	481e      	ldr	r0, [pc, #120]	; (80006e4 <MX_GPIO_Init+0x140>)
 800066a:	f000 fefd 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USER_LED_Pin|SDL_CS_Pin;
 800066e:	2312      	movs	r3, #18
 8000670:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	2301      	movs	r3, #1
 8000674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	2302      	movs	r3, #2
 800067c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067e:	f107 0310 	add.w	r3, r7, #16
 8000682:	4619      	mov	r1, r3
 8000684:	4818      	ldr	r0, [pc, #96]	; (80006e8 <MX_GPIO_Init+0x144>)
 8000686:	f000 feef 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RTC_SYNC_Pin|SDL_CD_Pin;
 800068a:	230c      	movs	r3, #12
 800068c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	f107 0310 	add.w	r3, r7, #16
 800069a:	4619      	mov	r1, r3
 800069c:	4812      	ldr	r0, [pc, #72]	; (80006e8 <MX_GPIO_Init+0x144>)
 800069e:	f000 fee3 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = RADIO_GPIO_DIO4_Pin|RADIO_GPIO_DIO12_Pin|RADIO_GPIO_DIO6_Pin|RADIO_GPIO_DIO3_Pin
 80006a2:	f24f 0303 	movw	r3, #61443	; 0xf003
 80006a6:	613b      	str	r3, [r7, #16]
                          |RADIO_DIO8_SLEEP_CONTROL_Pin|RADIO_GPIO_DIO2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a8:	2301      	movs	r3, #1
 80006aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b0:	2302      	movs	r3, #2
 80006b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	4619      	mov	r1, r3
 80006ba:	480c      	ldr	r0, [pc, #48]	; (80006ec <MX_GPIO_Init+0x148>)
 80006bc:	f000 fed4 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006c0:	2304      	movs	r3, #4
 80006c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	4619      	mov	r1, r3
 80006d2:	4806      	ldr	r0, [pc, #24]	; (80006ec <MX_GPIO_Init+0x148>)
 80006d4:	f000 fec8 	bl	8001468 <HAL_GPIO_Init>

}
 80006d8:	bf00      	nop
 80006da:	3720      	adds	r7, #32
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40021000 	.word	0x40021000
 80006e4:	40011000 	.word	0x40011000
 80006e8:	40010800 	.word	0x40010800
 80006ec:	40010c00 	.word	0x40010c00

080006f0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_I2C1_Init+0x50>)
 80006f6:	4a13      	ldr	r2, [pc, #76]	; (8000744 <MX_I2C1_Init+0x54>)
 80006f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_I2C1_Init+0x50>)
 80006fc:	4a12      	ldr	r2, [pc, #72]	; (8000748 <MX_I2C1_Init+0x58>)
 80006fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_I2C1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_I2C1_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_I2C1_Init+0x50>)
 800070e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000712:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_I2C1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <MX_I2C1_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_I2C1_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_I2C1_Init+0x50>)
 800072e:	f001 f861 	bl	80017f4 <HAL_I2C_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000738:	f000 f902 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	200000f4 	.word	0x200000f4
 8000744:	40005400 	.word	0x40005400
 8000748:	000186a0 	.word	0x000186a0

0800074c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_I2C2_Init+0x50>)
 8000752:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <MX_I2C2_Init+0x54>)
 8000754:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_I2C2_Init+0x50>)
 8000758:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <MX_I2C2_Init+0x58>)
 800075a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_I2C2_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_I2C2_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_I2C2_Init+0x50>)
 800076a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800076e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <MX_I2C2_Init+0x50>)
 8000772:	2200      	movs	r2, #0
 8000774:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_I2C2_Init+0x50>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <MX_I2C2_Init+0x50>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_I2C2_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_I2C2_Init+0x50>)
 800078a:	f001 f833 	bl	80017f4 <HAL_I2C_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000794:	f000 f8d4 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000148 	.word	0x20000148
 80007a0:	40005800 	.word	0x40005800
 80007a4:	000186a0 	.word	0x000186a0

080007a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 0318 	add.w	r3, r7, #24
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a2b      	ldr	r2, [pc, #172]	; (8000870 <HAL_I2C_MspInit+0xc8>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d124      	bne.n	8000812 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c8:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <HAL_I2C_MspInit+0xcc>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a29      	ldr	r2, [pc, #164]	; (8000874 <HAL_I2C_MspInit+0xcc>)
 80007ce:	f043 0308 	orr.w	r3, r3, #8
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b27      	ldr	r3, [pc, #156]	; (8000874 <HAL_I2C_MspInit+0xcc>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f003 0308 	and.w	r3, r3, #8
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPS_SCL_Pin|GPS_SDA_Pin;
 80007e0:	23c0      	movs	r3, #192	; 0xc0
 80007e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007e4:	2312      	movs	r3, #18
 80007e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e8:	2303      	movs	r3, #3
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ec:	f107 0318 	add.w	r3, r7, #24
 80007f0:	4619      	mov	r1, r3
 80007f2:	4821      	ldr	r0, [pc, #132]	; (8000878 <HAL_I2C_MspInit+0xd0>)
 80007f4:	f000 fe38 	bl	8001468 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007f8:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <HAL_I2C_MspInit+0xcc>)
 80007fa:	69db      	ldr	r3, [r3, #28]
 80007fc:	4a1d      	ldr	r2, [pc, #116]	; (8000874 <HAL_I2C_MspInit+0xcc>)
 80007fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000802:	61d3      	str	r3, [r2, #28]
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <HAL_I2C_MspInit+0xcc>)
 8000806:	69db      	ldr	r3, [r3, #28]
 8000808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000810:	e029      	b.n	8000866 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a19      	ldr	r2, [pc, #100]	; (800087c <HAL_I2C_MspInit+0xd4>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d124      	bne.n	8000866 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <HAL_I2C_MspInit+0xcc>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a14      	ldr	r2, [pc, #80]	; (8000874 <HAL_I2C_MspInit+0xcc>)
 8000822:	f043 0308 	orr.w	r3, r3, #8
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <HAL_I2C_MspInit+0xcc>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f003 0308 	and.w	r3, r3, #8
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8000834:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800083a:	2312      	movs	r3, #18
 800083c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800083e:	2303      	movs	r3, #3
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000842:	f107 0318 	add.w	r3, r7, #24
 8000846:	4619      	mov	r1, r3
 8000848:	480b      	ldr	r0, [pc, #44]	; (8000878 <HAL_I2C_MspInit+0xd0>)
 800084a:	f000 fe0d 	bl	8001468 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <HAL_I2C_MspInit+0xcc>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	4a08      	ldr	r2, [pc, #32]	; (8000874 <HAL_I2C_MspInit+0xcc>)
 8000854:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000858:	61d3      	str	r3, [r2, #28]
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_I2C_MspInit+0xcc>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
}
 8000866:	bf00      	nop
 8000868:	3728      	adds	r7, #40	; 0x28
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40005400 	.word	0x40005400
 8000874:	40021000 	.word	0x40021000
 8000878:	40010c00 	.word	0x40010c00
 800087c:	40005800 	.word	0x40005800

08000880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000884:	f000 fa42 	bl	8000d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000888:	f000 f815 	bl	80008b6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088c:	f7ff fe8a 	bl	80005a4 <MX_GPIO_Init>
  MX_CAN_Init();
 8000890:	f7ff fcce 	bl	8000230 <MX_CAN_Init>
  MX_SPI1_Init();
 8000894:	f000 f85a 	bl	800094c <MX_SPI1_Init>
  MX_UART5_Init();
 8000898:	f000 f928 	bl	8000aec <MX_UART5_Init>
  MX_I2C1_Init();
 800089c:	f7ff ff28 	bl	80006f0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80008a0:	f7ff ff54 	bl	800074c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80008a4:	f000 f94c 	bl	8000b40 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80008a8:	f001 fe5a 	bl	8002560 <osKernelInitialize>
  MX_FREERTOS_Init();
 80008ac:	f7ff fd56 	bl	800035c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80008b0:	f001 feaa 	bl	8002608 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <main+0x34>

080008b6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b090      	sub	sp, #64	; 0x40
 80008ba:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008bc:	f107 0318 	add.w	r3, r7, #24
 80008c0:	2228      	movs	r2, #40	; 0x28
 80008c2:	2100      	movs	r1, #0
 80008c4:	4618      	mov	r0, r3
 80008c6:	f004 fda1 	bl	800540c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d8:	2301      	movs	r3, #1
 80008da:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e6:	2301      	movs	r3, #1
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ea:	2302      	movs	r3, #2
 80008ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008f4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fa:	f107 0318 	add.w	r3, r7, #24
 80008fe:	4618      	mov	r0, r3
 8000900:	f001 f8bc 	bl	8001a7c <HAL_RCC_OscConfig>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800090a:	f000 f819 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090e:	230f      	movs	r3, #15
 8000910:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000912:	2302      	movs	r3, #2
 8000914:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800091a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800091e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2102      	movs	r1, #2
 8000928:	4618      	mov	r0, r3
 800092a:	f001 fb29 	bl	8001f80 <HAL_RCC_ClockConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000934:	f000 f804 	bl	8000940 <Error_Handler>
  }
}
 8000938:	bf00      	nop
 800093a:	3740      	adds	r7, #64	; 0x40
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	e7fe      	b.n	8000948 <Error_Handler+0x8>
	...

0800094c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000950:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_SPI1_Init+0x64>)
 8000952:	4a18      	ldr	r2, [pc, #96]	; (80009b4 <MX_SPI1_Init+0x68>)
 8000954:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <MX_SPI1_Init+0x64>)
 8000958:	f44f 7282 	mov.w	r2, #260	; 0x104
 800095c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_SPI1_Init+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_SPI1_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_SPI1_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_SPI1_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_SPI1_Init+0x64>)
 8000978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800097c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_SPI1_Init+0x64>)
 8000980:	2208      	movs	r2, #8
 8000982:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <MX_SPI1_Init+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_SPI1_Init+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <MX_SPI1_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_SPI1_Init+0x64>)
 8000998:	220a      	movs	r2, #10
 800099a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_SPI1_Init+0x64>)
 800099e:	f001 fc7d 	bl	800229c <HAL_SPI_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009a8:	f7ff ffca 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200001c0 	.word	0x200001c0
 80009b4:	40013000 	.word	0x40013000

080009b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a1b      	ldr	r2, [pc, #108]	; (8000a40 <HAL_SPI_MspInit+0x88>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d12f      	bne.n	8000a38 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009d8:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <HAL_SPI_MspInit+0x8c>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a19      	ldr	r2, [pc, #100]	; (8000a44 <HAL_SPI_MspInit+0x8c>)
 80009de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <HAL_SPI_MspInit+0x8c>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <HAL_SPI_MspInit+0x8c>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	4a13      	ldr	r2, [pc, #76]	; (8000a44 <HAL_SPI_MspInit+0x8c>)
 80009f6:	f043 0304 	orr.w	r3, r3, #4
 80009fa:	6193      	str	r3, [r2, #24]
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <HAL_SPI_MspInit+0x8c>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	f003 0304 	and.w	r3, r3, #4
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SDL_CLK_Pin|SDL_MOSI_Pin;
 8000a08:	23a0      	movs	r3, #160	; 0xa0
 8000a0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	4619      	mov	r1, r3
 8000a1a:	480b      	ldr	r0, [pc, #44]	; (8000a48 <HAL_SPI_MspInit+0x90>)
 8000a1c:	f000 fd24 	bl	8001468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDL_MISO_Pin;
 8000a20:	2340      	movs	r3, #64	; 0x40
 8000a22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SDL_MISO_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 0310 	add.w	r3, r7, #16
 8000a30:	4619      	mov	r1, r3
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <HAL_SPI_MspInit+0x90>)
 8000a34:	f000 fd18 	bl	8001468 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a38:	bf00      	nop
 8000a3a:	3720      	adds	r7, #32
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40013000 	.word	0x40013000
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40010800 	.word	0x40010800

08000a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	4a10      	ldr	r2, [pc, #64]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6193      	str	r3, [r2, #24]
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a74:	61d3      	str	r3, [r2, #28]
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <HAL_MspInit+0x4c>)
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	210f      	movs	r1, #15
 8000a86:	f06f 0001 	mvn.w	r0, #1
 8000a8a:	f000 fcc4 	bl	8001416 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40021000 	.word	0x40021000

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <HardFault_Handler+0x4>

08000aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <MemManage_Handler+0x4>

08000aae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000aba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr

08000ac6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aca:	f000 f965 	bl	8000d98 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ace:	f003 fc7f 	bl	80043d0 <xTaskGetSchedulerState>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d001      	beq.n	8000adc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ad8:	f004 fa3e 	bl	8004f58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_UART5_Init+0x4c>)
 8000af2:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <MX_UART5_Init+0x50>)
 8000af4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <MX_UART5_Init+0x4c>)
 8000af8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000afc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_UART5_Init+0x4c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_UART5_Init+0x4c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <MX_UART5_Init+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_UART5_Init+0x4c>)
 8000b12:	220c      	movs	r2, #12
 8000b14:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <MX_UART5_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_UART5_Init+0x4c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_UART5_Init+0x4c>)
 8000b24:	f001 fc3e 	bl	80023a4 <HAL_UART_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000b2e:	f7ff ff07 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000218 	.word	0x20000218
 8000b3c:	40005000 	.word	0x40005000

08000b40 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_USART1_UART_Init+0x4c>)
 8000b46:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <MX_USART1_UART_Init+0x50>)
 8000b48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <MX_USART1_UART_Init+0x4c>)
 8000b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_USART1_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_USART1_UART_Init+0x4c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_USART1_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_USART1_UART_Init+0x4c>)
 8000b66:	220c      	movs	r2, #12
 8000b68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <MX_USART1_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_USART1_UART_Init+0x4c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_USART1_UART_Init+0x4c>)
 8000b78:	f001 fc14 	bl	80023a4 <HAL_UART_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b82:	f7ff fedd 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000260 	.word	0x20000260
 8000b90:	40013800 	.word	0x40013800

08000b94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0320 	add.w	r3, r7, #32
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART5)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a3e      	ldr	r2, [pc, #248]	; (8000ca8 <HAL_UART_MspInit+0x114>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d13d      	bne.n	8000c30 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000bb4:	4b3d      	ldr	r3, [pc, #244]	; (8000cac <HAL_UART_MspInit+0x118>)
 8000bb6:	69db      	ldr	r3, [r3, #28]
 8000bb8:	4a3c      	ldr	r2, [pc, #240]	; (8000cac <HAL_UART_MspInit+0x118>)
 8000bba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000bbe:	61d3      	str	r3, [r2, #28]
 8000bc0:	4b3a      	ldr	r3, [pc, #232]	; (8000cac <HAL_UART_MspInit+0x118>)
 8000bc2:	69db      	ldr	r3, [r3, #28]
 8000bc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bc8:	61fb      	str	r3, [r7, #28]
 8000bca:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bcc:	4b37      	ldr	r3, [pc, #220]	; (8000cac <HAL_UART_MspInit+0x118>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	4a36      	ldr	r2, [pc, #216]	; (8000cac <HAL_UART_MspInit+0x118>)
 8000bd2:	f043 0310 	orr.w	r3, r3, #16
 8000bd6:	6193      	str	r3, [r2, #24]
 8000bd8:	4b34      	ldr	r3, [pc, #208]	; (8000cac <HAL_UART_MspInit+0x118>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	f003 0310 	and.w	r3, r3, #16
 8000be0:	61bb      	str	r3, [r7, #24]
 8000be2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be4:	4b31      	ldr	r3, [pc, #196]	; (8000cac <HAL_UART_MspInit+0x118>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4a30      	ldr	r2, [pc, #192]	; (8000cac <HAL_UART_MspInit+0x118>)
 8000bea:	f043 0320 	orr.w	r3, r3, #32
 8000bee:	6193      	str	r3, [r2, #24]
 8000bf0:	4b2e      	ldr	r3, [pc, #184]	; (8000cac <HAL_UART_MspInit+0x118>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f003 0320 	and.w	r3, r3, #32
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0a:	f107 0320 	add.w	r3, r7, #32
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4827      	ldr	r0, [pc, #156]	; (8000cb0 <HAL_UART_MspInit+0x11c>)
 8000c12:	f000 fc29 	bl	8001468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c16:	2304      	movs	r3, #4
 8000c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c22:	f107 0320 	add.w	r3, r7, #32
 8000c26:	4619      	mov	r1, r3
 8000c28:	4822      	ldr	r0, [pc, #136]	; (8000cb4 <HAL_UART_MspInit+0x120>)
 8000c2a:	f000 fc1d 	bl	8001468 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c2e:	e036      	b.n	8000c9e <HAL_UART_MspInit+0x10a>
  else if(uartHandle->Instance==USART1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a20      	ldr	r2, [pc, #128]	; (8000cb8 <HAL_UART_MspInit+0x124>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d131      	bne.n	8000c9e <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c3a:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <HAL_UART_MspInit+0x118>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	4a1b      	ldr	r2, [pc, #108]	; (8000cac <HAL_UART_MspInit+0x118>)
 8000c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c44:	6193      	str	r3, [r2, #24]
 8000c46:	4b19      	ldr	r3, [pc, #100]	; (8000cac <HAL_UART_MspInit+0x118>)
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	4b16      	ldr	r3, [pc, #88]	; (8000cac <HAL_UART_MspInit+0x118>)
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	4a15      	ldr	r2, [pc, #84]	; (8000cac <HAL_UART_MspInit+0x118>)
 8000c58:	f043 0304 	orr.w	r3, r3, #4
 8000c5c:	6193      	str	r3, [r2, #24]
 8000c5e:	4b13      	ldr	r3, [pc, #76]	; (8000cac <HAL_UART_MspInit+0x118>)
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	f003 0304 	and.w	r3, r3, #4
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RADIO_TX_Pin;
 8000c6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RADIO_TX_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 0320 	add.w	r3, r7, #32
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480f      	ldr	r0, [pc, #60]	; (8000cbc <HAL_UART_MspInit+0x128>)
 8000c80:	f000 fbf2 	bl	8001468 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RADIO_RX_Pin;
 8000c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RADIO_RX_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 0320 	add.w	r3, r7, #32
 8000c96:	4619      	mov	r1, r3
 8000c98:	4808      	ldr	r0, [pc, #32]	; (8000cbc <HAL_UART_MspInit+0x128>)
 8000c9a:	f000 fbe5 	bl	8001468 <HAL_GPIO_Init>
}
 8000c9e:	bf00      	nop
 8000ca0:	3730      	adds	r7, #48	; 0x30
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40005000 	.word	0x40005000
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	40011000 	.word	0x40011000
 8000cb4:	40011400 	.word	0x40011400
 8000cb8:	40013800 	.word	0x40013800
 8000cbc:	40010800 	.word	0x40010800

08000cc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cc0:	f7ff ff0e 	bl	8000ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc4:	480b      	ldr	r0, [pc, #44]	; (8000cf4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cc6:	490c      	ldr	r1, [pc, #48]	; (8000cf8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cc8:	4a0c      	ldr	r2, [pc, #48]	; (8000cfc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a09      	ldr	r2, [pc, #36]	; (8000d00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cdc:	4c09      	ldr	r4, [pc, #36]	; (8000d04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cea:	f004 fbed 	bl	80054c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cee:	f7ff fdc7 	bl	8000880 <main>
  bx lr
 8000cf2:	4770      	bx	lr
  ldr r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000cfc:	08005824 	.word	0x08005824
  ldr r2, =_sbss
 8000d00:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d04:	200031ec 	.word	0x200031ec

08000d08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC1_2_IRQHandler>
	...

08000d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_Init+0x28>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <HAL_Init+0x28>)
 8000d16:	f043 0310 	orr.w	r3, r3, #16
 8000d1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f000 fb6f 	bl	8001400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d22:	200f      	movs	r0, #15
 8000d24:	f000 f808 	bl	8000d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d28:	f7ff fe90 	bl	8000a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40022000 	.word	0x40022000

08000d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_InitTick+0x54>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x58>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 fb79 	bl	800144e <HAL_SYSTICK_Config>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00e      	b.n	8000d84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b0f      	cmp	r3, #15
 8000d6a:	d80a      	bhi.n	8000d82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	f000 fb4f 	bl	8001416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d78:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <HAL_InitTick+0x5c>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e000      	b.n	8000d84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000004 	.word	0x20000004

08000d98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <HAL_IncTick+0x1c>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <HAL_IncTick+0x20>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	4a03      	ldr	r2, [pc, #12]	; (8000db8 <HAL_IncTick+0x20>)
 8000daa:	6013      	str	r3, [r2, #0]
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	20000008 	.word	0x20000008
 8000db8:	200002a8 	.word	0x200002a8

08000dbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc0:	4b02      	ldr	r3, [pc, #8]	; (8000dcc <HAL_GetTick+0x10>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	200002a8 	.word	0x200002a8

08000dd0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e0ed      	b.n	8000fbe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d102      	bne.n	8000df4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff fa54 	bl	800029c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f042 0201 	orr.w	r2, r2, #1
 8000e02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e04:	f7ff ffda 	bl	8000dbc <HAL_GetTick>
 8000e08:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e0a:	e012      	b.n	8000e32 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e0c:	f7ff ffd6 	bl	8000dbc <HAL_GetTick>
 8000e10:	4602      	mov	r2, r0
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	2b0a      	cmp	r3, #10
 8000e18:	d90b      	bls.n	8000e32 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2205      	movs	r2, #5
 8000e2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e0c5      	b.n	8000fbe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0e5      	beq.n	8000e0c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f022 0202 	bic.w	r2, r2, #2
 8000e4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e50:	f7ff ffb4 	bl	8000dbc <HAL_GetTick>
 8000e54:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e56:	e012      	b.n	8000e7e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e58:	f7ff ffb0 	bl	8000dbc <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	2b0a      	cmp	r3, #10
 8000e64:	d90b      	bls.n	8000e7e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2205      	movs	r2, #5
 8000e76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e09f      	b.n	8000fbe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1e5      	bne.n	8000e58 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	7e1b      	ldrb	r3, [r3, #24]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d108      	bne.n	8000ea6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	e007      	b.n	8000eb6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000eb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	7e5b      	ldrb	r3, [r3, #25]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d108      	bne.n	8000ed0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	e007      	b.n	8000ee0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ede:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	7e9b      	ldrb	r3, [r3, #26]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d108      	bne.n	8000efa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f042 0220 	orr.w	r2, r2, #32
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	e007      	b.n	8000f0a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f022 0220 	bic.w	r2, r2, #32
 8000f08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	7edb      	ldrb	r3, [r3, #27]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d108      	bne.n	8000f24 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f022 0210 	bic.w	r2, r2, #16
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	e007      	b.n	8000f34 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f042 0210 	orr.w	r2, r2, #16
 8000f32:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	7f1b      	ldrb	r3, [r3, #28]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d108      	bne.n	8000f4e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f042 0208 	orr.w	r2, r2, #8
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	e007      	b.n	8000f5e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 0208 	bic.w	r2, r2, #8
 8000f5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	7f5b      	ldrb	r3, [r3, #29]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d108      	bne.n	8000f78 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f042 0204 	orr.w	r2, r2, #4
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	e007      	b.n	8000f88 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f022 0204 	bic.w	r2, r2, #4
 8000f86:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689a      	ldr	r2, [r3, #8]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	431a      	orrs	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	691b      	ldr	r3, [r3, #16]
 8000f96:	431a      	orrs	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	ea42 0103 	orr.w	r1, r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	1e5a      	subs	r2, r3, #1
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	430a      	orrs	r2, r1
 8000fac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b087      	sub	sp, #28
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	60f8      	str	r0, [r7, #12]
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fda:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fdc:	7dfb      	ldrb	r3, [r7, #23]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d003      	beq.n	8000fea <HAL_CAN_GetRxMessage+0x24>
 8000fe2:	7dfb      	ldrb	r3, [r7, #23]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	f040 8103 	bne.w	80011f0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d10e      	bne.n	800100e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d116      	bne.n	800102c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001002:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e0f7      	b.n	80011fe <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	2b00      	cmp	r3, #0
 800101a:	d107      	bne.n	800102c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001020:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e0e8      	b.n	80011fe <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	331b      	adds	r3, #27
 8001034:	011b      	lsls	r3, r3, #4
 8001036:	4413      	add	r3, r2
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0204 	and.w	r2, r3, #4
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d10c      	bne.n	8001064 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	331b      	adds	r3, #27
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	4413      	add	r3, r2
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	0d5b      	lsrs	r3, r3, #21
 800105a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	e00b      	b.n	800107c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	331b      	adds	r3, #27
 800106c:	011b      	lsls	r3, r3, #4
 800106e:	4413      	add	r3, r2
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	08db      	lsrs	r3, r3, #3
 8001074:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	331b      	adds	r3, #27
 8001084:	011b      	lsls	r3, r3, #4
 8001086:	4413      	add	r3, r2
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0202 	and.w	r2, r3, #2
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	331b      	adds	r3, #27
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	4413      	add	r3, r2
 800109e:	3304      	adds	r3, #4
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0308 	and.w	r3, r3, #8
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2208      	movs	r2, #8
 80010ae:	611a      	str	r2, [r3, #16]
 80010b0:	e00b      	b.n	80010ca <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	331b      	adds	r3, #27
 80010ba:	011b      	lsls	r3, r3, #4
 80010bc:	4413      	add	r3, r2
 80010be:	3304      	adds	r3, #4
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 020f 	and.w	r2, r3, #15
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	331b      	adds	r3, #27
 80010d2:	011b      	lsls	r3, r3, #4
 80010d4:	4413      	add	r3, r2
 80010d6:	3304      	adds	r3, #4
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	0a1b      	lsrs	r3, r3, #8
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	331b      	adds	r3, #27
 80010ea:	011b      	lsls	r3, r3, #4
 80010ec:	4413      	add	r3, r2
 80010ee:	3304      	adds	r3, #4
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	0c1b      	lsrs	r3, r3, #16
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	4413      	add	r3, r2
 8001104:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	011b      	lsls	r3, r3, #4
 8001118:	4413      	add	r3, r2
 800111a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	0a1a      	lsrs	r2, r3, #8
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	3301      	adds	r3, #1
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	011b      	lsls	r3, r3, #4
 8001132:	4413      	add	r3, r2
 8001134:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	0c1a      	lsrs	r2, r3, #16
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	3302      	adds	r3, #2
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	4413      	add	r3, r2
 800114e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	0e1a      	lsrs	r2, r3, #24
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	3303      	adds	r3, #3
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	011b      	lsls	r3, r3, #4
 8001166:	4413      	add	r3, r2
 8001168:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	3304      	adds	r3, #4
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	4413      	add	r3, r2
 8001180:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	0a1a      	lsrs	r2, r3, #8
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	3305      	adds	r3, #5
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	011b      	lsls	r3, r3, #4
 8001198:	4413      	add	r3, r2
 800119a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	0c1a      	lsrs	r2, r3, #16
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	3306      	adds	r3, #6
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	011b      	lsls	r3, r3, #4
 80011b2:	4413      	add	r3, r2
 80011b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	0e1a      	lsrs	r2, r3, #24
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	3307      	adds	r3, #7
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d108      	bne.n	80011dc <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f042 0220 	orr.w	r2, r2, #32
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	e007      	b.n	80011ec <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	691a      	ldr	r2, [r3, #16]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f042 0220 	orr.w	r2, r2, #32
 80011ea:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80011ec:	2300      	movs	r3, #0
 80011ee:	e006      	b.n	80011fe <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
  }
}
 80011fe:	4618      	mov	r0, r3
 8001200:	371c      	adds	r7, #28
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr

08001208 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f893 3020 	ldrb.w	r3, [r3, #32]
 800121c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800121e:	7afb      	ldrb	r3, [r7, #11]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d002      	beq.n	800122a <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001224:	7afb      	ldrb	r3, [r7, #11]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d10f      	bne.n	800124a <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d106      	bne.n	800123e <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	e005      	b.n	800124a <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800124a:	68fb      	ldr	r3, [r7, #12]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr

08001256 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001256:	b480      	push	{r7}
 8001258:	b085      	sub	sp, #20
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001266:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d002      	beq.n	8001274 <HAL_CAN_ActivateNotification+0x1e>
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	2b02      	cmp	r3, #2
 8001272:	d109      	bne.n	8001288 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6959      	ldr	r1, [r3, #20]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	430a      	orrs	r2, r1
 8001282:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001284:	2300      	movs	r3, #0
 8001286:	e006      	b.n	8001296 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
  }
}
 8001296:	4618      	mov	r0, r3
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr

080012a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012bc:	4013      	ands	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d2:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	60d3      	str	r3, [r2, #12]
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <__NVIC_GetPriorityGrouping+0x18>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	0a1b      	lsrs	r3, r3, #8
 80012f2:	f003 0307 	and.w	r3, r3, #7
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	6039      	str	r1, [r7, #0]
 800130e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	db0a      	blt.n	800132e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	490c      	ldr	r1, [pc, #48]	; (8001350 <__NVIC_SetPriority+0x4c>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	440b      	add	r3, r1
 8001328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800132c:	e00a      	b.n	8001344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4908      	ldr	r1, [pc, #32]	; (8001354 <__NVIC_SetPriority+0x50>)
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	3b04      	subs	r3, #4
 800133c:	0112      	lsls	r2, r2, #4
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	440b      	add	r3, r1
 8001342:	761a      	strb	r2, [r3, #24]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000e100 	.word	0xe000e100
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	; 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f1c3 0307 	rsb	r3, r3, #7
 8001372:	2b04      	cmp	r3, #4
 8001374:	bf28      	it	cs
 8001376:	2304      	movcs	r3, #4
 8001378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3304      	adds	r3, #4
 800137e:	2b06      	cmp	r3, #6
 8001380:	d902      	bls.n	8001388 <NVIC_EncodePriority+0x30>
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3b03      	subs	r3, #3
 8001386:	e000      	b.n	800138a <NVIC_EncodePriority+0x32>
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	f04f 32ff 	mov.w	r2, #4294967295
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43da      	mvns	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	401a      	ands	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	43d9      	mvns	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	4313      	orrs	r3, r2
         );
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3724      	adds	r7, #36	; 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013cc:	d301      	bcc.n	80013d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ce:	2301      	movs	r3, #1
 80013d0:	e00f      	b.n	80013f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d2:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <SysTick_Config+0x40>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013da:	210f      	movs	r1, #15
 80013dc:	f04f 30ff 	mov.w	r0, #4294967295
 80013e0:	f7ff ff90 	bl	8001304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <SysTick_Config+0x40>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ea:	4b04      	ldr	r3, [pc, #16]	; (80013fc <SysTick_Config+0x40>)
 80013ec:	2207      	movs	r2, #7
 80013ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	e000e010 	.word	0xe000e010

08001400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff49 	bl	80012a0 <__NVIC_SetPriorityGrouping>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001428:	f7ff ff5e 	bl	80012e8 <__NVIC_GetPriorityGrouping>
 800142c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	68b9      	ldr	r1, [r7, #8]
 8001432:	6978      	ldr	r0, [r7, #20]
 8001434:	f7ff ff90 	bl	8001358 <NVIC_EncodePriority>
 8001438:	4602      	mov	r2, r0
 800143a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff5f 	bl	8001304 <__NVIC_SetPriority>
}
 8001446:	bf00      	nop
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff ffb0 	bl	80013bc <SysTick_Config>
 800145c:	4603      	mov	r3, r0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001468:	b480      	push	{r7}
 800146a:	b08b      	sub	sp, #44	; 0x2c
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147a:	e179      	b.n	8001770 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800147c:	2201      	movs	r2, #1
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	69fa      	ldr	r2, [r7, #28]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	429a      	cmp	r2, r3
 8001496:	f040 8168 	bne.w	800176a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	4a96      	ldr	r2, [pc, #600]	; (80016f8 <HAL_GPIO_Init+0x290>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d05e      	beq.n	8001562 <HAL_GPIO_Init+0xfa>
 80014a4:	4a94      	ldr	r2, [pc, #592]	; (80016f8 <HAL_GPIO_Init+0x290>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d875      	bhi.n	8001596 <HAL_GPIO_Init+0x12e>
 80014aa:	4a94      	ldr	r2, [pc, #592]	; (80016fc <HAL_GPIO_Init+0x294>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d058      	beq.n	8001562 <HAL_GPIO_Init+0xfa>
 80014b0:	4a92      	ldr	r2, [pc, #584]	; (80016fc <HAL_GPIO_Init+0x294>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d86f      	bhi.n	8001596 <HAL_GPIO_Init+0x12e>
 80014b6:	4a92      	ldr	r2, [pc, #584]	; (8001700 <HAL_GPIO_Init+0x298>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d052      	beq.n	8001562 <HAL_GPIO_Init+0xfa>
 80014bc:	4a90      	ldr	r2, [pc, #576]	; (8001700 <HAL_GPIO_Init+0x298>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d869      	bhi.n	8001596 <HAL_GPIO_Init+0x12e>
 80014c2:	4a90      	ldr	r2, [pc, #576]	; (8001704 <HAL_GPIO_Init+0x29c>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d04c      	beq.n	8001562 <HAL_GPIO_Init+0xfa>
 80014c8:	4a8e      	ldr	r2, [pc, #568]	; (8001704 <HAL_GPIO_Init+0x29c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d863      	bhi.n	8001596 <HAL_GPIO_Init+0x12e>
 80014ce:	4a8e      	ldr	r2, [pc, #568]	; (8001708 <HAL_GPIO_Init+0x2a0>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d046      	beq.n	8001562 <HAL_GPIO_Init+0xfa>
 80014d4:	4a8c      	ldr	r2, [pc, #560]	; (8001708 <HAL_GPIO_Init+0x2a0>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d85d      	bhi.n	8001596 <HAL_GPIO_Init+0x12e>
 80014da:	2b12      	cmp	r3, #18
 80014dc:	d82a      	bhi.n	8001534 <HAL_GPIO_Init+0xcc>
 80014de:	2b12      	cmp	r3, #18
 80014e0:	d859      	bhi.n	8001596 <HAL_GPIO_Init+0x12e>
 80014e2:	a201      	add	r2, pc, #4	; (adr r2, 80014e8 <HAL_GPIO_Init+0x80>)
 80014e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e8:	08001563 	.word	0x08001563
 80014ec:	0800153d 	.word	0x0800153d
 80014f0:	0800154f 	.word	0x0800154f
 80014f4:	08001591 	.word	0x08001591
 80014f8:	08001597 	.word	0x08001597
 80014fc:	08001597 	.word	0x08001597
 8001500:	08001597 	.word	0x08001597
 8001504:	08001597 	.word	0x08001597
 8001508:	08001597 	.word	0x08001597
 800150c:	08001597 	.word	0x08001597
 8001510:	08001597 	.word	0x08001597
 8001514:	08001597 	.word	0x08001597
 8001518:	08001597 	.word	0x08001597
 800151c:	08001597 	.word	0x08001597
 8001520:	08001597 	.word	0x08001597
 8001524:	08001597 	.word	0x08001597
 8001528:	08001597 	.word	0x08001597
 800152c:	08001545 	.word	0x08001545
 8001530:	08001559 	.word	0x08001559
 8001534:	4a75      	ldr	r2, [pc, #468]	; (800170c <HAL_GPIO_Init+0x2a4>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d013      	beq.n	8001562 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800153a:	e02c      	b.n	8001596 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	623b      	str	r3, [r7, #32]
          break;
 8001542:	e029      	b.n	8001598 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	3304      	adds	r3, #4
 800154a:	623b      	str	r3, [r7, #32]
          break;
 800154c:	e024      	b.n	8001598 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	3308      	adds	r3, #8
 8001554:	623b      	str	r3, [r7, #32]
          break;
 8001556:	e01f      	b.n	8001598 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	330c      	adds	r3, #12
 800155e:	623b      	str	r3, [r7, #32]
          break;
 8001560:	e01a      	b.n	8001598 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d102      	bne.n	8001570 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800156a:	2304      	movs	r3, #4
 800156c:	623b      	str	r3, [r7, #32]
          break;
 800156e:	e013      	b.n	8001598 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d105      	bne.n	8001584 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001578:	2308      	movs	r3, #8
 800157a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69fa      	ldr	r2, [r7, #28]
 8001580:	611a      	str	r2, [r3, #16]
          break;
 8001582:	e009      	b.n	8001598 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001584:	2308      	movs	r3, #8
 8001586:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69fa      	ldr	r2, [r7, #28]
 800158c:	615a      	str	r2, [r3, #20]
          break;
 800158e:	e003      	b.n	8001598 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
          break;
 8001594:	e000      	b.n	8001598 <HAL_GPIO_Init+0x130>
          break;
 8001596:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	2bff      	cmp	r3, #255	; 0xff
 800159c:	d801      	bhi.n	80015a2 <HAL_GPIO_Init+0x13a>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	e001      	b.n	80015a6 <HAL_GPIO_Init+0x13e>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3304      	adds	r3, #4
 80015a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	2bff      	cmp	r3, #255	; 0xff
 80015ac:	d802      	bhi.n	80015b4 <HAL_GPIO_Init+0x14c>
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	e002      	b.n	80015ba <HAL_GPIO_Init+0x152>
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	3b08      	subs	r3, #8
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	210f      	movs	r1, #15
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	fa01 f303 	lsl.w	r3, r1, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	401a      	ands	r2, r3
 80015cc:	6a39      	ldr	r1, [r7, #32]
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	fa01 f303 	lsl.w	r3, r1, r3
 80015d4:	431a      	orrs	r2, r3
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 80c1 	beq.w	800176a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015e8:	4b49      	ldr	r3, [pc, #292]	; (8001710 <HAL_GPIO_Init+0x2a8>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4a48      	ldr	r2, [pc, #288]	; (8001710 <HAL_GPIO_Init+0x2a8>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6193      	str	r3, [r2, #24]
 80015f4:	4b46      	ldr	r3, [pc, #280]	; (8001710 <HAL_GPIO_Init+0x2a8>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001600:	4a44      	ldr	r2, [pc, #272]	; (8001714 <HAL_GPIO_Init+0x2ac>)
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	089b      	lsrs	r3, r3, #2
 8001606:	3302      	adds	r3, #2
 8001608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	220f      	movs	r2, #15
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	4013      	ands	r3, r2
 8001622:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a3c      	ldr	r2, [pc, #240]	; (8001718 <HAL_GPIO_Init+0x2b0>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d01f      	beq.n	800166c <HAL_GPIO_Init+0x204>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a3b      	ldr	r2, [pc, #236]	; (800171c <HAL_GPIO_Init+0x2b4>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d019      	beq.n	8001668 <HAL_GPIO_Init+0x200>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a3a      	ldr	r2, [pc, #232]	; (8001720 <HAL_GPIO_Init+0x2b8>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d013      	beq.n	8001664 <HAL_GPIO_Init+0x1fc>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a39      	ldr	r2, [pc, #228]	; (8001724 <HAL_GPIO_Init+0x2bc>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d00d      	beq.n	8001660 <HAL_GPIO_Init+0x1f8>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a38      	ldr	r2, [pc, #224]	; (8001728 <HAL_GPIO_Init+0x2c0>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d007      	beq.n	800165c <HAL_GPIO_Init+0x1f4>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a37      	ldr	r2, [pc, #220]	; (800172c <HAL_GPIO_Init+0x2c4>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d101      	bne.n	8001658 <HAL_GPIO_Init+0x1f0>
 8001654:	2305      	movs	r3, #5
 8001656:	e00a      	b.n	800166e <HAL_GPIO_Init+0x206>
 8001658:	2306      	movs	r3, #6
 800165a:	e008      	b.n	800166e <HAL_GPIO_Init+0x206>
 800165c:	2304      	movs	r3, #4
 800165e:	e006      	b.n	800166e <HAL_GPIO_Init+0x206>
 8001660:	2303      	movs	r3, #3
 8001662:	e004      	b.n	800166e <HAL_GPIO_Init+0x206>
 8001664:	2302      	movs	r3, #2
 8001666:	e002      	b.n	800166e <HAL_GPIO_Init+0x206>
 8001668:	2301      	movs	r3, #1
 800166a:	e000      	b.n	800166e <HAL_GPIO_Init+0x206>
 800166c:	2300      	movs	r3, #0
 800166e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001670:	f002 0203 	and.w	r2, r2, #3
 8001674:	0092      	lsls	r2, r2, #2
 8001676:	4093      	lsls	r3, r2
 8001678:	68fa      	ldr	r2, [r7, #12]
 800167a:	4313      	orrs	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800167e:	4925      	ldr	r1, [pc, #148]	; (8001714 <HAL_GPIO_Init+0x2ac>)
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	089b      	lsrs	r3, r3, #2
 8001684:	3302      	adds	r3, #2
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d006      	beq.n	80016a6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001698:	4b25      	ldr	r3, [pc, #148]	; (8001730 <HAL_GPIO_Init+0x2c8>)
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	4924      	ldr	r1, [pc, #144]	; (8001730 <HAL_GPIO_Init+0x2c8>)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	608b      	str	r3, [r1, #8]
 80016a4:	e006      	b.n	80016b4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016a6:	4b22      	ldr	r3, [pc, #136]	; (8001730 <HAL_GPIO_Init+0x2c8>)
 80016a8:	689a      	ldr	r2, [r3, #8]
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	4920      	ldr	r1, [pc, #128]	; (8001730 <HAL_GPIO_Init+0x2c8>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d006      	beq.n	80016ce <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <HAL_GPIO_Init+0x2c8>)
 80016c2:	68da      	ldr	r2, [r3, #12]
 80016c4:	491a      	ldr	r1, [pc, #104]	; (8001730 <HAL_GPIO_Init+0x2c8>)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	60cb      	str	r3, [r1, #12]
 80016cc:	e006      	b.n	80016dc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016ce:	4b18      	ldr	r3, [pc, #96]	; (8001730 <HAL_GPIO_Init+0x2c8>)
 80016d0:	68da      	ldr	r2, [r3, #12]
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	43db      	mvns	r3, r3
 80016d6:	4916      	ldr	r1, [pc, #88]	; (8001730 <HAL_GPIO_Init+0x2c8>)
 80016d8:	4013      	ands	r3, r2
 80016da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d025      	beq.n	8001734 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <HAL_GPIO_Init+0x2c8>)
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	4910      	ldr	r1, [pc, #64]	; (8001730 <HAL_GPIO_Init+0x2c8>)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
 80016f4:	e025      	b.n	8001742 <HAL_GPIO_Init+0x2da>
 80016f6:	bf00      	nop
 80016f8:	10320000 	.word	0x10320000
 80016fc:	10310000 	.word	0x10310000
 8001700:	10220000 	.word	0x10220000
 8001704:	10210000 	.word	0x10210000
 8001708:	10120000 	.word	0x10120000
 800170c:	10110000 	.word	0x10110000
 8001710:	40021000 	.word	0x40021000
 8001714:	40010000 	.word	0x40010000
 8001718:	40010800 	.word	0x40010800
 800171c:	40010c00 	.word	0x40010c00
 8001720:	40011000 	.word	0x40011000
 8001724:	40011400 	.word	0x40011400
 8001728:	40011800 	.word	0x40011800
 800172c:	40011c00 	.word	0x40011c00
 8001730:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001734:	4b15      	ldr	r3, [pc, #84]	; (800178c <HAL_GPIO_Init+0x324>)
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	43db      	mvns	r3, r3
 800173c:	4913      	ldr	r1, [pc, #76]	; (800178c <HAL_GPIO_Init+0x324>)
 800173e:	4013      	ands	r3, r2
 8001740:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d006      	beq.n	800175c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800174e:	4b0f      	ldr	r3, [pc, #60]	; (800178c <HAL_GPIO_Init+0x324>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	490e      	ldr	r1, [pc, #56]	; (800178c <HAL_GPIO_Init+0x324>)
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	4313      	orrs	r3, r2
 8001758:	600b      	str	r3, [r1, #0]
 800175a:	e006      	b.n	800176a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_GPIO_Init+0x324>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	43db      	mvns	r3, r3
 8001764:	4909      	ldr	r1, [pc, #36]	; (800178c <HAL_GPIO_Init+0x324>)
 8001766:	4013      	ands	r3, r2
 8001768:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	3301      	adds	r3, #1
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	fa22 f303 	lsr.w	r3, r2, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	f47f ae7e 	bne.w	800147c <HAL_GPIO_Init+0x14>
  }
}
 8001780:	bf00      	nop
 8001782:	bf00      	nop
 8001784:	372c      	adds	r7, #44	; 0x2c
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	40010400 	.word	0x40010400

08001790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	807b      	strh	r3, [r7, #2]
 800179c:	4613      	mov	r3, r2
 800179e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017a0:	787b      	ldrb	r3, [r7, #1]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017a6:	887a      	ldrh	r2, [r7, #2]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017ac:	e003      	b.n	80017b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017ae:	887b      	ldrh	r3, [r7, #2]
 80017b0:	041a      	lsls	r2, r3, #16
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	611a      	str	r2, [r3, #16]
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017d2:	887a      	ldrh	r2, [r7, #2]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4013      	ands	r3, r2
 80017d8:	041a      	lsls	r2, r3, #16
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	43d9      	mvns	r1, r3
 80017de:	887b      	ldrh	r3, [r7, #2]
 80017e0:	400b      	ands	r3, r1
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	611a      	str	r2, [r3, #16]
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
	...

080017f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e12b      	b.n	8001a5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d106      	bne.n	8001820 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7fe ffc4 	bl	80007a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2224      	movs	r2, #36	; 0x24
 8001824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0201 	bic.w	r2, r2, #1
 8001836:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001846:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001856:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001858:	f000 fcda 	bl	8002210 <HAL_RCC_GetPCLK1Freq>
 800185c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4a81      	ldr	r2, [pc, #516]	; (8001a68 <HAL_I2C_Init+0x274>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d807      	bhi.n	8001878 <HAL_I2C_Init+0x84>
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4a80      	ldr	r2, [pc, #512]	; (8001a6c <HAL_I2C_Init+0x278>)
 800186c:	4293      	cmp	r3, r2
 800186e:	bf94      	ite	ls
 8001870:	2301      	movls	r3, #1
 8001872:	2300      	movhi	r3, #0
 8001874:	b2db      	uxtb	r3, r3
 8001876:	e006      	b.n	8001886 <HAL_I2C_Init+0x92>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4a7d      	ldr	r2, [pc, #500]	; (8001a70 <HAL_I2C_Init+0x27c>)
 800187c:	4293      	cmp	r3, r2
 800187e:	bf94      	ite	ls
 8001880:	2301      	movls	r3, #1
 8001882:	2300      	movhi	r3, #0
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e0e7      	b.n	8001a5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4a78      	ldr	r2, [pc, #480]	; (8001a74 <HAL_I2C_Init+0x280>)
 8001892:	fba2 2303 	umull	r2, r3, r2, r3
 8001896:	0c9b      	lsrs	r3, r3, #18
 8001898:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68ba      	ldr	r2, [r7, #8]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	4a6a      	ldr	r2, [pc, #424]	; (8001a68 <HAL_I2C_Init+0x274>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d802      	bhi.n	80018c8 <HAL_I2C_Init+0xd4>
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	3301      	adds	r3, #1
 80018c6:	e009      	b.n	80018dc <HAL_I2C_Init+0xe8>
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018ce:	fb02 f303 	mul.w	r3, r2, r3
 80018d2:	4a69      	ldr	r2, [pc, #420]	; (8001a78 <HAL_I2C_Init+0x284>)
 80018d4:	fba2 2303 	umull	r2, r3, r2, r3
 80018d8:	099b      	lsrs	r3, r3, #6
 80018da:	3301      	adds	r3, #1
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6812      	ldr	r2, [r2, #0]
 80018e0:	430b      	orrs	r3, r1
 80018e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	495c      	ldr	r1, [pc, #368]	; (8001a68 <HAL_I2C_Init+0x274>)
 80018f8:	428b      	cmp	r3, r1
 80018fa:	d819      	bhi.n	8001930 <HAL_I2C_Init+0x13c>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	1e59      	subs	r1, r3, #1
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	fbb1 f3f3 	udiv	r3, r1, r3
 800190a:	1c59      	adds	r1, r3, #1
 800190c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001910:	400b      	ands	r3, r1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00a      	beq.n	800192c <HAL_I2C_Init+0x138>
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	1e59      	subs	r1, r3, #1
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	fbb1 f3f3 	udiv	r3, r1, r3
 8001924:	3301      	adds	r3, #1
 8001926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800192a:	e051      	b.n	80019d0 <HAL_I2C_Init+0x1dc>
 800192c:	2304      	movs	r3, #4
 800192e:	e04f      	b.n	80019d0 <HAL_I2C_Init+0x1dc>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d111      	bne.n	800195c <HAL_I2C_Init+0x168>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	1e58      	subs	r0, r3, #1
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6859      	ldr	r1, [r3, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	440b      	add	r3, r1
 8001946:	fbb0 f3f3 	udiv	r3, r0, r3
 800194a:	3301      	adds	r3, #1
 800194c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001950:	2b00      	cmp	r3, #0
 8001952:	bf0c      	ite	eq
 8001954:	2301      	moveq	r3, #1
 8001956:	2300      	movne	r3, #0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	e012      	b.n	8001982 <HAL_I2C_Init+0x18e>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	1e58      	subs	r0, r3, #1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6859      	ldr	r1, [r3, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	0099      	lsls	r1, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001972:	3301      	adds	r3, #1
 8001974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001978:	2b00      	cmp	r3, #0
 800197a:	bf0c      	ite	eq
 800197c:	2301      	moveq	r3, #1
 800197e:	2300      	movne	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_I2C_Init+0x196>
 8001986:	2301      	movs	r3, #1
 8001988:	e022      	b.n	80019d0 <HAL_I2C_Init+0x1dc>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10e      	bne.n	80019b0 <HAL_I2C_Init+0x1bc>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	1e58      	subs	r0, r3, #1
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6859      	ldr	r1, [r3, #4]
 800199a:	460b      	mov	r3, r1
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	440b      	add	r3, r1
 80019a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80019a4:	3301      	adds	r3, #1
 80019a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ae:	e00f      	b.n	80019d0 <HAL_I2C_Init+0x1dc>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	1e58      	subs	r0, r3, #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6859      	ldr	r1, [r3, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	0099      	lsls	r1, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019c6:	3301      	adds	r3, #1
 80019c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	6809      	ldr	r1, [r1, #0]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69da      	ldr	r2, [r3, #28]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6911      	ldr	r1, [r2, #16]
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68d2      	ldr	r2, [r2, #12]
 8001a0a:	4311      	orrs	r1, r2
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	430b      	orrs	r3, r1
 8001a12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	695a      	ldr	r2, [r3, #20]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 0201 	orr.w	r2, r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2220      	movs	r2, #32
 8001a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	000186a0 	.word	0x000186a0
 8001a6c:	001e847f 	.word	0x001e847f
 8001a70:	003d08ff 	.word	0x003d08ff
 8001a74:	431bde83 	.word	0x431bde83
 8001a78:	10624dd3 	.word	0x10624dd3

08001a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e272      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 8087 	beq.w	8001baa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a9c:	4b92      	ldr	r3, [pc, #584]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d00c      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aa8:	4b8f      	ldr	r3, [pc, #572]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 030c 	and.w	r3, r3, #12
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	d112      	bne.n	8001ada <HAL_RCC_OscConfig+0x5e>
 8001ab4:	4b8c      	ldr	r3, [pc, #560]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac0:	d10b      	bne.n	8001ada <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac2:	4b89      	ldr	r3, [pc, #548]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d06c      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x12c>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d168      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e24c      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae2:	d106      	bne.n	8001af2 <HAL_RCC_OscConfig+0x76>
 8001ae4:	4b80      	ldr	r3, [pc, #512]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a7f      	ldr	r2, [pc, #508]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	e02e      	b.n	8001b50 <HAL_RCC_OscConfig+0xd4>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10c      	bne.n	8001b14 <HAL_RCC_OscConfig+0x98>
 8001afa:	4b7b      	ldr	r3, [pc, #492]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a7a      	ldr	r2, [pc, #488]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	4b78      	ldr	r3, [pc, #480]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a77      	ldr	r2, [pc, #476]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e01d      	b.n	8001b50 <HAL_RCC_OscConfig+0xd4>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b1c:	d10c      	bne.n	8001b38 <HAL_RCC_OscConfig+0xbc>
 8001b1e:	4b72      	ldr	r3, [pc, #456]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a71      	ldr	r2, [pc, #452]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	4b6f      	ldr	r3, [pc, #444]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a6e      	ldr	r2, [pc, #440]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	e00b      	b.n	8001b50 <HAL_RCC_OscConfig+0xd4>
 8001b38:	4b6b      	ldr	r3, [pc, #428]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a6a      	ldr	r2, [pc, #424]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	4b68      	ldr	r3, [pc, #416]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a67      	ldr	r2, [pc, #412]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d013      	beq.n	8001b80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7ff f930 	bl	8000dbc <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b60:	f7ff f92c 	bl	8000dbc <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b64      	cmp	r3, #100	; 0x64
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e200      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b72:	4b5d      	ldr	r3, [pc, #372]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0f0      	beq.n	8001b60 <HAL_RCC_OscConfig+0xe4>
 8001b7e:	e014      	b.n	8001baa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7ff f91c 	bl	8000dbc <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b88:	f7ff f918 	bl	8000dbc <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b64      	cmp	r3, #100	; 0x64
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e1ec      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9a:	4b53      	ldr	r3, [pc, #332]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x10c>
 8001ba6:	e000      	b.n	8001baa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d063      	beq.n	8001c7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bb6:	4b4c      	ldr	r3, [pc, #304]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00b      	beq.n	8001bda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bc2:	4b49      	ldr	r3, [pc, #292]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
 8001bca:	2b08      	cmp	r3, #8
 8001bcc:	d11c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x18c>
 8001bce:	4b46      	ldr	r3, [pc, #280]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d116      	bne.n	8001c08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bda:	4b43      	ldr	r3, [pc, #268]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d005      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x176>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d001      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e1c0      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf2:	4b3d      	ldr	r3, [pc, #244]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4939      	ldr	r1, [pc, #228]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c06:	e03a      	b.n	8001c7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d020      	beq.n	8001c52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c10:	4b36      	ldr	r3, [pc, #216]	; (8001cec <HAL_RCC_OscConfig+0x270>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c16:	f7ff f8d1 	bl	8000dbc <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1e:	f7ff f8cd 	bl	8000dbc <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e1a1      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c30:	4b2d      	ldr	r3, [pc, #180]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	4927      	ldr	r1, [pc, #156]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	600b      	str	r3, [r1, #0]
 8001c50:	e015      	b.n	8001c7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c52:	4b26      	ldr	r3, [pc, #152]	; (8001cec <HAL_RCC_OscConfig+0x270>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff f8b0 	bl	8000dbc <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c60:	f7ff f8ac 	bl	8000dbc <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e180      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c72:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d03a      	beq.n	8001d00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d019      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c92:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c98:	f7ff f890 	bl	8000dbc <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca0:	f7ff f88c 	bl	8000dbc <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e160      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f000 face 	bl	8002260 <RCC_Delay>
 8001cc4:	e01c      	b.n	8001d00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f876 	bl	8000dbc <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd2:	e00f      	b.n	8001cf4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd4:	f7ff f872 	bl	8000dbc <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d908      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e146      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	42420000 	.word	0x42420000
 8001cf0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf4:	4b92      	ldr	r3, [pc, #584]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1e9      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 80a6 	beq.w	8001e5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d12:	4b8b      	ldr	r3, [pc, #556]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10d      	bne.n	8001d3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d1e:	4b88      	ldr	r3, [pc, #544]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	4a87      	ldr	r2, [pc, #540]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d28:	61d3      	str	r3, [r2, #28]
 8001d2a:	4b85      	ldr	r3, [pc, #532]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d36:	2301      	movs	r3, #1
 8001d38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3a:	4b82      	ldr	r3, [pc, #520]	; (8001f44 <HAL_RCC_OscConfig+0x4c8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d118      	bne.n	8001d78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d46:	4b7f      	ldr	r3, [pc, #508]	; (8001f44 <HAL_RCC_OscConfig+0x4c8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a7e      	ldr	r2, [pc, #504]	; (8001f44 <HAL_RCC_OscConfig+0x4c8>)
 8001d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d52:	f7ff f833 	bl	8000dbc <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d5a:	f7ff f82f 	bl	8000dbc <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b64      	cmp	r3, #100	; 0x64
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e103      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6c:	4b75      	ldr	r3, [pc, #468]	; (8001f44 <HAL_RCC_OscConfig+0x4c8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d106      	bne.n	8001d8e <HAL_RCC_OscConfig+0x312>
 8001d80:	4b6f      	ldr	r3, [pc, #444]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	4a6e      	ldr	r2, [pc, #440]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6213      	str	r3, [r2, #32]
 8001d8c:	e02d      	b.n	8001dea <HAL_RCC_OscConfig+0x36e>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10c      	bne.n	8001db0 <HAL_RCC_OscConfig+0x334>
 8001d96:	4b6a      	ldr	r3, [pc, #424]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	4a69      	ldr	r2, [pc, #420]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001d9c:	f023 0301 	bic.w	r3, r3, #1
 8001da0:	6213      	str	r3, [r2, #32]
 8001da2:	4b67      	ldr	r3, [pc, #412]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	4a66      	ldr	r2, [pc, #408]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	f023 0304 	bic.w	r3, r3, #4
 8001dac:	6213      	str	r3, [r2, #32]
 8001dae:	e01c      	b.n	8001dea <HAL_RCC_OscConfig+0x36e>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2b05      	cmp	r3, #5
 8001db6:	d10c      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x356>
 8001db8:	4b61      	ldr	r3, [pc, #388]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	4a60      	ldr	r2, [pc, #384]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001dbe:	f043 0304 	orr.w	r3, r3, #4
 8001dc2:	6213      	str	r3, [r2, #32]
 8001dc4:	4b5e      	ldr	r3, [pc, #376]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	4a5d      	ldr	r2, [pc, #372]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	6213      	str	r3, [r2, #32]
 8001dd0:	e00b      	b.n	8001dea <HAL_RCC_OscConfig+0x36e>
 8001dd2:	4b5b      	ldr	r3, [pc, #364]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	4a5a      	ldr	r2, [pc, #360]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	f023 0301 	bic.w	r3, r3, #1
 8001ddc:	6213      	str	r3, [r2, #32]
 8001dde:	4b58      	ldr	r3, [pc, #352]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	4a57      	ldr	r2, [pc, #348]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	f023 0304 	bic.w	r3, r3, #4
 8001de8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d015      	beq.n	8001e1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df2:	f7fe ffe3 	bl	8000dbc <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df8:	e00a      	b.n	8001e10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfa:	f7fe ffdf 	bl	8000dbc <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e0b1      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e10:	4b4b      	ldr	r3, [pc, #300]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0ee      	beq.n	8001dfa <HAL_RCC_OscConfig+0x37e>
 8001e1c:	e014      	b.n	8001e48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1e:	f7fe ffcd 	bl	8000dbc <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e24:	e00a      	b.n	8001e3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e26:	f7fe ffc9 	bl	8000dbc <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e09b      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3c:	4b40      	ldr	r3, [pc, #256]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1ee      	bne.n	8001e26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e48:	7dfb      	ldrb	r3, [r7, #23]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d105      	bne.n	8001e5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e4e:	4b3c      	ldr	r3, [pc, #240]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	4a3b      	ldr	r2, [pc, #236]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 8087 	beq.w	8001f72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e64:	4b36      	ldr	r3, [pc, #216]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 030c 	and.w	r3, r3, #12
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d061      	beq.n	8001f34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69db      	ldr	r3, [r3, #28]
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d146      	bne.n	8001f06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e78:	4b33      	ldr	r3, [pc, #204]	; (8001f48 <HAL_RCC_OscConfig+0x4cc>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7e:	f7fe ff9d 	bl	8000dbc <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e86:	f7fe ff99 	bl	8000dbc <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e06d      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e98:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1f0      	bne.n	8001e86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eac:	d108      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eae:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	4921      	ldr	r1, [pc, #132]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ec0:	4b1f      	ldr	r3, [pc, #124]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a19      	ldr	r1, [r3, #32]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	430b      	orrs	r3, r1
 8001ed2:	491b      	ldr	r1, [pc, #108]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <HAL_RCC_OscConfig+0x4cc>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ede:	f7fe ff6d 	bl	8000dbc <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee6:	f7fe ff69 	bl	8000dbc <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e03d      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ef8:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x46a>
 8001f04:	e035      	b.n	8001f72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f06:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <HAL_RCC_OscConfig+0x4cc>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0c:	f7fe ff56 	bl	8000dbc <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f14:	f7fe ff52 	bl	8000dbc <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e026      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0x498>
 8001f32:	e01e      	b.n	8001f72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d107      	bne.n	8001f4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e019      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40007000 	.word	0x40007000
 8001f48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d106      	bne.n	8001f6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d001      	beq.n	8001f72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40021000 	.word	0x40021000

08001f80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0d0      	b.n	8002136 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b6a      	ldr	r3, [pc, #424]	; (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b67      	ldr	r3, [pc, #412]	; (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 0207 	bic.w	r2, r3, #7
 8001faa:	4965      	ldr	r1, [pc, #404]	; (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b63      	ldr	r3, [pc, #396]	; (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0b8      	b.n	8002136 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d020      	beq.n	8002012 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fdc:	4b59      	ldr	r3, [pc, #356]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	4a58      	ldr	r2, [pc, #352]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fe6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d005      	beq.n	8002000 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ff4:	4b53      	ldr	r3, [pc, #332]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	4a52      	ldr	r2, [pc, #328]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ffe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002000:	4b50      	ldr	r3, [pc, #320]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	494d      	ldr	r1, [pc, #308]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d040      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d107      	bne.n	8002036 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002026:	4b47      	ldr	r3, [pc, #284]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d115      	bne.n	800205e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e07f      	b.n	8002136 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d107      	bne.n	800204e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800203e:	4b41      	ldr	r3, [pc, #260]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d109      	bne.n	800205e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e073      	b.n	8002136 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204e:	4b3d      	ldr	r3, [pc, #244]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e06b      	b.n	8002136 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800205e:	4b39      	ldr	r3, [pc, #228]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f023 0203 	bic.w	r2, r3, #3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4936      	ldr	r1, [pc, #216]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	4313      	orrs	r3, r2
 800206e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002070:	f7fe fea4 	bl	8000dbc <HAL_GetTick>
 8002074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002076:	e00a      	b.n	800208e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002078:	f7fe fea0 	bl	8000dbc <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f241 3288 	movw	r2, #5000	; 0x1388
 8002086:	4293      	cmp	r3, r2
 8002088:	d901      	bls.n	800208e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e053      	b.n	8002136 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	4b2d      	ldr	r3, [pc, #180]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 020c 	and.w	r2, r3, #12
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	429a      	cmp	r2, r3
 800209e:	d1eb      	bne.n	8002078 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020a0:	4b27      	ldr	r3, [pc, #156]	; (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d210      	bcs.n	80020d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ae:	4b24      	ldr	r3, [pc, #144]	; (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f023 0207 	bic.w	r2, r3, #7
 80020b6:	4922      	ldr	r1, [pc, #136]	; (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020be:	4b20      	ldr	r3, [pc, #128]	; (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d001      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e032      	b.n	8002136 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020dc:	4b19      	ldr	r3, [pc, #100]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	4916      	ldr	r1, [pc, #88]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d009      	beq.n	800210e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	490e      	ldr	r1, [pc, #56]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 800210a:	4313      	orrs	r3, r2
 800210c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800210e:	f000 f821 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8002112:	4602      	mov	r2, r0
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	490a      	ldr	r1, [pc, #40]	; (8002148 <HAL_RCC_ClockConfig+0x1c8>)
 8002120:	5ccb      	ldrb	r3, [r1, r3]
 8002122:	fa22 f303 	lsr.w	r3, r2, r3
 8002126:	4a09      	ldr	r2, [pc, #36]	; (800214c <HAL_RCC_ClockConfig+0x1cc>)
 8002128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <HAL_RCC_ClockConfig+0x1d0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe fe02 	bl	8000d38 <HAL_InitTick>

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40022000 	.word	0x40022000
 8002144:	40021000 	.word	0x40021000
 8002148:	080057f0 	.word	0x080057f0
 800214c:	20000000 	.word	0x20000000
 8002150:	20000004 	.word	0x20000004

08002154 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002154:	b480      	push	{r7}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	2300      	movs	r3, #0
 8002168:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800216e:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f003 030c 	and.w	r3, r3, #12
 800217a:	2b04      	cmp	r3, #4
 800217c:	d002      	beq.n	8002184 <HAL_RCC_GetSysClockFreq+0x30>
 800217e:	2b08      	cmp	r3, #8
 8002180:	d003      	beq.n	800218a <HAL_RCC_GetSysClockFreq+0x36>
 8002182:	e027      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002184:	4b19      	ldr	r3, [pc, #100]	; (80021ec <HAL_RCC_GetSysClockFreq+0x98>)
 8002186:	613b      	str	r3, [r7, #16]
      break;
 8002188:	e027      	b.n	80021da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	0c9b      	lsrs	r3, r3, #18
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	4a17      	ldr	r2, [pc, #92]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002194:	5cd3      	ldrb	r3, [r2, r3]
 8002196:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d010      	beq.n	80021c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021a2:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	0c5b      	lsrs	r3, r3, #17
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	4a11      	ldr	r2, [pc, #68]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021ae:	5cd3      	ldrb	r3, [r2, r3]
 80021b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a0d      	ldr	r2, [pc, #52]	; (80021ec <HAL_RCC_GetSysClockFreq+0x98>)
 80021b6:	fb03 f202 	mul.w	r2, r3, r2
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	e004      	b.n	80021ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a0c      	ldr	r2, [pc, #48]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021c8:	fb02 f303 	mul.w	r3, r2, r3
 80021cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	613b      	str	r3, [r7, #16]
      break;
 80021d2:	e002      	b.n	80021da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <HAL_RCC_GetSysClockFreq+0x98>)
 80021d6:	613b      	str	r3, [r7, #16]
      break;
 80021d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021da:	693b      	ldr	r3, [r7, #16]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	371c      	adds	r7, #28
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000
 80021ec:	007a1200 	.word	0x007a1200
 80021f0:	08005808 	.word	0x08005808
 80021f4:	08005818 	.word	0x08005818
 80021f8:	003d0900 	.word	0x003d0900

080021fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002200:	4b02      	ldr	r3, [pc, #8]	; (800220c <HAL_RCC_GetHCLKFreq+0x10>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	20000000 	.word	0x20000000

08002210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002214:	f7ff fff2 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 8002218:	4602      	mov	r2, r0
 800221a:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_RCC_GetPCLK1Freq+0x20>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	0a1b      	lsrs	r3, r3, #8
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	4903      	ldr	r1, [pc, #12]	; (8002234 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002226:	5ccb      	ldrb	r3, [r1, r3]
 8002228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800222c:	4618      	mov	r0, r3
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40021000 	.word	0x40021000
 8002234:	08005800 	.word	0x08005800

08002238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800223c:	f7ff ffde 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 8002240:	4602      	mov	r2, r0
 8002242:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	0adb      	lsrs	r3, r3, #11
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	4903      	ldr	r1, [pc, #12]	; (800225c <HAL_RCC_GetPCLK2Freq+0x24>)
 800224e:	5ccb      	ldrb	r3, [r1, r3]
 8002250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002254:	4618      	mov	r0, r3
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40021000 	.word	0x40021000
 800225c:	08005800 	.word	0x08005800

08002260 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002268:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <RCC_Delay+0x34>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <RCC_Delay+0x38>)
 800226e:	fba2 2303 	umull	r2, r3, r2, r3
 8002272:	0a5b      	lsrs	r3, r3, #9
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	fb02 f303 	mul.w	r3, r2, r3
 800227a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800227c:	bf00      	nop
  }
  while (Delay --);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1e5a      	subs	r2, r3, #1
 8002282:	60fa      	str	r2, [r7, #12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f9      	bne.n	800227c <RCC_Delay+0x1c>
}
 8002288:	bf00      	nop
 800228a:	bf00      	nop
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	20000000 	.word	0x20000000
 8002298:	10624dd3 	.word	0x10624dd3

0800229c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e076      	b.n	800239c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d108      	bne.n	80022c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022be:	d009      	beq.n	80022d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	61da      	str	r2, [r3, #28]
 80022c6:	e005      	b.n	80022d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d106      	bne.n	80022f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7fe fb62 	bl	80009b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800230a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	431a      	orrs	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002344:	431a      	orrs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002358:	ea42 0103 	orr.w	r1, r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002360:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	0c1a      	lsrs	r2, r3, #16
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f002 0204 	and.w	r2, r2, #4
 800237a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	69da      	ldr	r2, [r3, #28]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800238a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e042      	b.n	800243c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d106      	bne.n	80023d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7fe fbe2 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2224      	movs	r2, #36	; 0x24
 80023d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f82b 	bl	8002444 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	695a      	ldr	r2, [r3, #20]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800240c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800241c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2220      	movs	r2, #32
 8002428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2220      	movs	r2, #32
 8002430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	4313      	orrs	r3, r2
 8002472:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800247e:	f023 030c 	bic.w	r3, r3, #12
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6812      	ldr	r2, [r2, #0]
 8002486:	68b9      	ldr	r1, [r7, #8]
 8002488:	430b      	orrs	r3, r1
 800248a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699a      	ldr	r2, [r3, #24]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a2c      	ldr	r2, [pc, #176]	; (8002558 <UART_SetConfig+0x114>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d103      	bne.n	80024b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80024ac:	f7ff fec4 	bl	8002238 <HAL_RCC_GetPCLK2Freq>
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	e002      	b.n	80024ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80024b4:	f7ff feac 	bl	8002210 <HAL_RCC_GetPCLK1Freq>
 80024b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4613      	mov	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	009a      	lsls	r2, r3, #2
 80024c4:	441a      	add	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d0:	4a22      	ldr	r2, [pc, #136]	; (800255c <UART_SetConfig+0x118>)
 80024d2:	fba2 2303 	umull	r2, r3, r2, r3
 80024d6:	095b      	lsrs	r3, r3, #5
 80024d8:	0119      	lsls	r1, r3, #4
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	009a      	lsls	r2, r3, #2
 80024e4:	441a      	add	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80024f0:	4b1a      	ldr	r3, [pc, #104]	; (800255c <UART_SetConfig+0x118>)
 80024f2:	fba3 0302 	umull	r0, r3, r3, r2
 80024f6:	095b      	lsrs	r3, r3, #5
 80024f8:	2064      	movs	r0, #100	; 0x64
 80024fa:	fb00 f303 	mul.w	r3, r0, r3
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	3332      	adds	r3, #50	; 0x32
 8002504:	4a15      	ldr	r2, [pc, #84]	; (800255c <UART_SetConfig+0x118>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002510:	4419      	add	r1, r3
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	009a      	lsls	r2, r3, #2
 800251c:	441a      	add	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	fbb2 f2f3 	udiv	r2, r2, r3
 8002528:	4b0c      	ldr	r3, [pc, #48]	; (800255c <UART_SetConfig+0x118>)
 800252a:	fba3 0302 	umull	r0, r3, r3, r2
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	2064      	movs	r0, #100	; 0x64
 8002532:	fb00 f303 	mul.w	r3, r0, r3
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	3332      	adds	r3, #50	; 0x32
 800253c:	4a07      	ldr	r2, [pc, #28]	; (800255c <UART_SetConfig+0x118>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	f003 020f 	and.w	r2, r3, #15
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	440a      	add	r2, r1
 800254e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002550:	bf00      	nop
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40013800 	.word	0x40013800
 800255c:	51eb851f 	.word	0x51eb851f

08002560 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002566:	f3ef 8305 	mrs	r3, IPSR
 800256a:	60bb      	str	r3, [r7, #8]
  return(result);
 800256c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10f      	bne.n	8002592 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002572:	f3ef 8310 	mrs	r3, PRIMASK
 8002576:	607b      	str	r3, [r7, #4]
  return(result);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d109      	bne.n	8002592 <osKernelInitialize+0x32>
 800257e:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <osKernelInitialize+0x60>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d109      	bne.n	800259a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002586:	f3ef 8311 	mrs	r3, BASEPRI
 800258a:	603b      	str	r3, [r7, #0]
  return(result);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002592:	f06f 0305 	mvn.w	r3, #5
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	e00c      	b.n	80025b4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800259a:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <osKernelInitialize+0x60>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d105      	bne.n	80025ae <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80025a2:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <osKernelInitialize+0x60>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	e002      	b.n	80025b4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80025ae:	f04f 33ff 	mov.w	r3, #4294967295
 80025b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80025b4:	68fb      	ldr	r3, [r7, #12]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	200002ac 	.word	0x200002ac

080025c4 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 80025ca:	f001 ff01 	bl	80043d0 <xTaskGetSchedulerState>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d004      	beq.n	80025de <osKernelGetState+0x1a>
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d105      	bne.n	80025e4 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 80025d8:	2302      	movs	r3, #2
 80025da:	607b      	str	r3, [r7, #4]
      break;
 80025dc:	e00c      	b.n	80025f8 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 80025de:	2303      	movs	r3, #3
 80025e0:	607b      	str	r3, [r7, #4]
      break;
 80025e2:	e009      	b.n	80025f8 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 80025e4:	4b07      	ldr	r3, [pc, #28]	; (8002604 <osKernelGetState+0x40>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d102      	bne.n	80025f2 <osKernelGetState+0x2e>
        state = osKernelReady;
 80025ec:	2301      	movs	r3, #1
 80025ee:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 80025f0:	e001      	b.n	80025f6 <osKernelGetState+0x32>
        state = osKernelInactive;
 80025f2:	2300      	movs	r3, #0
 80025f4:	607b      	str	r3, [r7, #4]
      break;
 80025f6:	bf00      	nop
  }

  return (state);
 80025f8:	687b      	ldr	r3, [r7, #4]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	200002ac 	.word	0x200002ac

08002608 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800260e:	f3ef 8305 	mrs	r3, IPSR
 8002612:	60bb      	str	r3, [r7, #8]
  return(result);
 8002614:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10f      	bne.n	800263a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800261a:	f3ef 8310 	mrs	r3, PRIMASK
 800261e:	607b      	str	r3, [r7, #4]
  return(result);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d109      	bne.n	800263a <osKernelStart+0x32>
 8002626:	4b11      	ldr	r3, [pc, #68]	; (800266c <osKernelStart+0x64>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d109      	bne.n	8002642 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800262e:	f3ef 8311 	mrs	r3, BASEPRI
 8002632:	603b      	str	r3, [r7, #0]
  return(result);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <osKernelStart+0x3a>
    stat = osErrorISR;
 800263a:	f06f 0305 	mvn.w	r3, #5
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	e00e      	b.n	8002660 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002642:	4b0a      	ldr	r3, [pc, #40]	; (800266c <osKernelStart+0x64>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d107      	bne.n	800265a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800264a:	4b08      	ldr	r3, [pc, #32]	; (800266c <osKernelStart+0x64>)
 800264c:	2202      	movs	r2, #2
 800264e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002650:	f001 fa5c 	bl	8003b0c <vTaskStartScheduler>
      stat = osOK;
 8002654:	2300      	movs	r3, #0
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	e002      	b.n	8002660 <osKernelStart+0x58>
    } else {
      stat = osError;
 800265a:	f04f 33ff 	mov.w	r3, #4294967295
 800265e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002660:	68fb      	ldr	r3, [r7, #12]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	200002ac 	.word	0x200002ac

08002670 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002670:	b580      	push	{r7, lr}
 8002672:	b092      	sub	sp, #72	; 0x48
 8002674:	af04      	add	r7, sp, #16
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002680:	f3ef 8305 	mrs	r3, IPSR
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002688:	2b00      	cmp	r3, #0
 800268a:	f040 8094 	bne.w	80027b6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800268e:	f3ef 8310 	mrs	r3, PRIMASK
 8002692:	623b      	str	r3, [r7, #32]
  return(result);
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	2b00      	cmp	r3, #0
 8002698:	f040 808d 	bne.w	80027b6 <osThreadNew+0x146>
 800269c:	4b48      	ldr	r3, [pc, #288]	; (80027c0 <osThreadNew+0x150>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d106      	bne.n	80026b2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80026a4:	f3ef 8311 	mrs	r3, BASEPRI
 80026a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f040 8082 	bne.w	80027b6 <osThreadNew+0x146>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d07e      	beq.n	80027b6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80026bc:	2318      	movs	r3, #24
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80026c0:	2300      	movs	r3, #0
 80026c2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80026c4:	f107 031b 	add.w	r3, r7, #27
 80026c8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80026ca:	f04f 33ff 	mov.w	r3, #4294967295
 80026ce:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d045      	beq.n	8002762 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <osThreadNew+0x74>
        name = attr->name;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80026f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <osThreadNew+0x9a>
 80026f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fa:	2b38      	cmp	r3, #56	; 0x38
 80026fc:	d805      	bhi.n	800270a <osThreadNew+0x9a>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <osThreadNew+0x9e>
        return (NULL);
 800270a:	2300      	movs	r3, #0
 800270c:	e054      	b.n	80027b8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	089b      	lsrs	r3, r3, #2
 800271c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00e      	beq.n	8002744 <osThreadNew+0xd4>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	2bb7      	cmp	r3, #183	; 0xb7
 800272c:	d90a      	bls.n	8002744 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002732:	2b00      	cmp	r3, #0
 8002734:	d006      	beq.n	8002744 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d002      	beq.n	8002744 <osThreadNew+0xd4>
        mem = 1;
 800273e:	2301      	movs	r3, #1
 8002740:	62bb      	str	r3, [r7, #40]	; 0x28
 8002742:	e010      	b.n	8002766 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10c      	bne.n	8002766 <osThreadNew+0xf6>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d108      	bne.n	8002766 <osThreadNew+0xf6>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d104      	bne.n	8002766 <osThreadNew+0xf6>
          mem = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002760:	e001      	b.n	8002766 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002768:	2b01      	cmp	r3, #1
 800276a:	d110      	bne.n	800278e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002774:	9202      	str	r2, [sp, #8]
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002780:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 ffde 	bl	8003744 <xTaskCreateStatic>
 8002788:	4603      	mov	r3, r0
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	e013      	b.n	80027b6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800278e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002790:	2b00      	cmp	r3, #0
 8002792:	d110      	bne.n	80027b6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002796:	b29a      	uxth	r2, r3
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	9301      	str	r3, [sp, #4]
 800279e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f001 f828 	bl	80037fc <xTaskCreate>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d001      	beq.n	80027b6 <osThreadNew+0x146>
          hTask = NULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80027b6:	697b      	ldr	r3, [r7, #20]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3738      	adds	r7, #56	; 0x38
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	200002ac 	.word	0x200002ac

080027c4 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08e      	sub	sp, #56	; 0x38
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027d0:	f3ef 8305 	mrs	r3, IPSR
 80027d4:	61fb      	str	r3, [r7, #28]
  return(result);
 80027d6:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10f      	bne.n	80027fc <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027dc:	f3ef 8310 	mrs	r3, PRIMASK
 80027e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d109      	bne.n	80027fc <osThreadFlagsWait+0x38>
 80027e8:	4b3f      	ldr	r3, [pc, #252]	; (80028e8 <osThreadFlagsWait+0x124>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d109      	bne.n	8002804 <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80027f0:	f3ef 8311 	mrs	r3, BASEPRI
 80027f4:	617b      	str	r3, [r7, #20]
  return(result);
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 80027fc:	f06f 0305 	mvn.w	r3, #5
 8002800:	637b      	str	r3, [r7, #52]	; 0x34
 8002802:	e06b      	b.n	80028dc <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	da03      	bge.n	8002812 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800280a:	f06f 0303 	mvn.w	r3, #3
 800280e:	637b      	str	r3, [r7, #52]	; 0x34
 8002810:	e064      	b.n	80028dc <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d002      	beq.n	8002822 <osThreadFlagsWait+0x5e>
      clear = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	633b      	str	r3, [r7, #48]	; 0x30
 8002820:	e001      	b.n	8002826 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800282e:	f001 fa89 	bl	8003d44 <xTaskGetTickCount>
 8002832:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8002834:	f107 0210 	add.w	r2, r7, #16
 8002838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800283c:	2000      	movs	r0, #0
 800283e:	f001 fe53 	bl	80044e8 <xTaskNotifyWait>
 8002842:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	2b01      	cmp	r3, #1
 8002848:	d137      	bne.n	80028ba <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800284a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4013      	ands	r3, r2
 8002850:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002856:	4313      	orrs	r3, r2
 8002858:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00c      	beq.n	800287e <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002868:	4013      	ands	r3, r2
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	429a      	cmp	r2, r3
 800286e:	d032      	beq.n	80028d6 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10f      	bne.n	8002896 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8002876:	f06f 0302 	mvn.w	r3, #2
 800287a:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800287c:	e02e      	b.n	80028dc <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d128      	bne.n	80028da <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d103      	bne.n	8002896 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800288e:	f06f 0302 	mvn.w	r3, #2
 8002892:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8002894:	e022      	b.n	80028dc <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8002896:	f001 fa55 	bl	8003d44 <xTaskGetTickCount>
 800289a:	4602      	mov	r2, r0
 800289c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 80028a2:	6a3a      	ldr	r2, [r7, #32]
 80028a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d902      	bls.n	80028b0 <osThreadFlagsWait+0xec>
          tout  = 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ae:	e00e      	b.n	80028ce <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 80028b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b8:	e009      	b.n	80028ce <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d103      	bne.n	80028c8 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 80028c0:	f06f 0302 	mvn.w	r3, #2
 80028c4:	637b      	str	r3, [r7, #52]	; 0x34
 80028c6:	e002      	b.n	80028ce <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80028c8:	f06f 0301 	mvn.w	r3, #1
 80028cc:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1af      	bne.n	8002834 <osThreadFlagsWait+0x70>
 80028d4:	e002      	b.n	80028dc <osThreadFlagsWait+0x118>
            break;
 80028d6:	bf00      	nop
 80028d8:	e000      	b.n	80028dc <osThreadFlagsWait+0x118>
            break;
 80028da:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80028dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3738      	adds	r7, #56	; 0x38
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	200002ac 	.word	0x200002ac

080028ec <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028f4:	f3ef 8305 	mrs	r3, IPSR
 80028f8:	613b      	str	r3, [r7, #16]
  return(result);
 80028fa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10f      	bne.n	8002920 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002900:	f3ef 8310 	mrs	r3, PRIMASK
 8002904:	60fb      	str	r3, [r7, #12]
  return(result);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d109      	bne.n	8002920 <osDelay+0x34>
 800290c:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <osDelay+0x58>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b02      	cmp	r3, #2
 8002912:	d109      	bne.n	8002928 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002914:	f3ef 8311 	mrs	r3, BASEPRI
 8002918:	60bb      	str	r3, [r7, #8]
  return(result);
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <osDelay+0x3c>
    stat = osErrorISR;
 8002920:	f06f 0305 	mvn.w	r3, #5
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	e007      	b.n	8002938 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d002      	beq.n	8002938 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f001 f8b6 	bl	8003aa4 <vTaskDelay>
    }
  }

  return (stat);
 8002938:	697b      	ldr	r3, [r7, #20]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	200002ac 	.word	0x200002ac

08002948 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002948:	b580      	push	{r7, lr}
 800294a:	b08c      	sub	sp, #48	; 0x30
 800294c:	af02      	add	r7, sp, #8
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002954:	2300      	movs	r3, #0
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002958:	f3ef 8305 	mrs	r3, IPSR
 800295c:	61bb      	str	r3, [r7, #24]
  return(result);
 800295e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002960:	2b00      	cmp	r3, #0
 8002962:	d16f      	bne.n	8002a44 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002964:	f3ef 8310 	mrs	r3, PRIMASK
 8002968:	617b      	str	r3, [r7, #20]
  return(result);
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d169      	bne.n	8002a44 <osMessageQueueNew+0xfc>
 8002970:	4b37      	ldr	r3, [pc, #220]	; (8002a50 <osMessageQueueNew+0x108>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b02      	cmp	r3, #2
 8002976:	d105      	bne.n	8002984 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002978:	f3ef 8311 	mrs	r3, BASEPRI
 800297c:	613b      	str	r3, [r7, #16]
  return(result);
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d15f      	bne.n	8002a44 <osMessageQueueNew+0xfc>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d05c      	beq.n	8002a44 <osMessageQueueNew+0xfc>
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d059      	beq.n	8002a44 <osMessageQueueNew+0xfc>
    mem = -1;
 8002990:	f04f 33ff 	mov.w	r3, #4294967295
 8002994:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d029      	beq.n	80029f0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d012      	beq.n	80029ca <osMessageQueueNew+0x82>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	2b4f      	cmp	r3, #79	; 0x4f
 80029aa:	d90e      	bls.n	80029ca <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00a      	beq.n	80029ca <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	68b9      	ldr	r1, [r7, #8]
 80029bc:	fb01 f303 	mul.w	r3, r1, r3
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d302      	bcc.n	80029ca <osMessageQueueNew+0x82>
        mem = 1;
 80029c4:	2301      	movs	r3, #1
 80029c6:	623b      	str	r3, [r7, #32]
 80029c8:	e014      	b.n	80029f4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d110      	bne.n	80029f4 <osMessageQueueNew+0xac>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10c      	bne.n	80029f4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d108      	bne.n	80029f4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d104      	bne.n	80029f4 <osMessageQueueNew+0xac>
          mem = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	623b      	str	r3, [r7, #32]
 80029ee:	e001      	b.n	80029f4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d10b      	bne.n	8002a12 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691a      	ldr	r2, [r3, #16]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2100      	movs	r1, #0
 8002a04:	9100      	str	r1, [sp, #0]
 8002a06:	68b9      	ldr	r1, [r7, #8]
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f9e1 	bl	8002dd0 <xQueueGenericCreateStatic>
 8002a0e:	6278      	str	r0, [r7, #36]	; 0x24
 8002a10:	e008      	b.n	8002a24 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d105      	bne.n	8002a24 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8002a18:	2200      	movs	r2, #0
 8002a1a:	68b9      	ldr	r1, [r7, #8]
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 fa4e 	bl	8002ebe <xQueueGenericCreate>
 8002a22:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00c      	beq.n	8002a44 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <osMessageQueueNew+0xf0>
        name = attr->name;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	61fb      	str	r3, [r7, #28]
 8002a36:	e001      	b.n	8002a3c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8002a3c:	69f9      	ldr	r1, [r7, #28]
 8002a3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a40:	f000 fe24 	bl	800368c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3728      	adds	r7, #40	; 0x28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200002ac 	.word	0x200002ac

08002a54 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08a      	sub	sp, #40	; 0x28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	603b      	str	r3, [r7, #0]
 8002a60:	4613      	mov	r3, r2
 8002a62:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a6c:	f3ef 8305 	mrs	r3, IPSR
 8002a70:	61fb      	str	r3, [r7, #28]
  return(result);
 8002a72:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10f      	bne.n	8002a98 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a78:	f3ef 8310 	mrs	r3, PRIMASK
 8002a7c:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d109      	bne.n	8002a98 <osMessageQueuePut+0x44>
 8002a84:	4b2b      	ldr	r3, [pc, #172]	; (8002b34 <osMessageQueuePut+0xe0>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d12e      	bne.n	8002aea <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a8c:	f3ef 8311 	mrs	r3, BASEPRI
 8002a90:	617b      	str	r3, [r7, #20]
  return(result);
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d028      	beq.n	8002aea <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d005      	beq.n	8002aaa <osMessageQueuePut+0x56>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <osMessageQueuePut+0x56>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8002aaa:	f06f 0303 	mvn.w	r3, #3
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002ab0:	e039      	b.n	8002b26 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8002ab6:	f107 0210 	add.w	r2, r7, #16
 8002aba:	2300      	movs	r3, #0
 8002abc:	68b9      	ldr	r1, [r7, #8]
 8002abe:	6a38      	ldr	r0, [r7, #32]
 8002ac0:	f000 fb5c 	bl	800317c <xQueueGenericSendFromISR>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d003      	beq.n	8002ad2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8002aca:	f06f 0302 	mvn.w	r3, #2
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002ad0:	e029      	b.n	8002b26 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d026      	beq.n	8002b26 <osMessageQueuePut+0xd2>
 8002ad8:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <osMessageQueuePut+0xe4>)
 8002ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	f3bf 8f4f 	dsb	sy
 8002ae4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002ae8:	e01d      	b.n	8002b26 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <osMessageQueuePut+0xa2>
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d103      	bne.n	8002afe <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8002af6:	f06f 0303 	mvn.w	r3, #3
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
 8002afc:	e014      	b.n	8002b28 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002afe:	2300      	movs	r3, #0
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	68b9      	ldr	r1, [r7, #8]
 8002b04:	6a38      	ldr	r0, [r7, #32]
 8002b06:	f000 fa3b 	bl	8002f80 <xQueueGenericSend>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d00b      	beq.n	8002b28 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8002b16:	f06f 0301 	mvn.w	r3, #1
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1c:	e004      	b.n	8002b28 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8002b1e:	f06f 0302 	mvn.w	r3, #2
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
 8002b24:	e000      	b.n	8002b28 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002b26:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3728      	adds	r7, #40	; 0x28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	200002ac 	.word	0x200002ac
 8002b38:	e000ed04 	.word	0xe000ed04

08002b3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4a06      	ldr	r2, [pc, #24]	; (8002b64 <vApplicationGetIdleTaskMemory+0x28>)
 8002b4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	4a05      	ldr	r2, [pc, #20]	; (8002b68 <vApplicationGetIdleTaskMemory+0x2c>)
 8002b52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2280      	movs	r2, #128	; 0x80
 8002b58:	601a      	str	r2, [r3, #0]
}
 8002b5a:	bf00      	nop
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr
 8002b64:	200002b0 	.word	0x200002b0
 8002b68:	20000368 	.word	0x20000368

08002b6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4a07      	ldr	r2, [pc, #28]	; (8002b98 <vApplicationGetTimerTaskMemory+0x2c>)
 8002b7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	4a06      	ldr	r2, [pc, #24]	; (8002b9c <vApplicationGetTimerTaskMemory+0x30>)
 8002b82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b8a:	601a      	str	r2, [r3, #0]
}
 8002b8c:	bf00      	nop
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	20000568 	.word	0x20000568
 8002b9c:	20000620 	.word	0x20000620

08002ba0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f103 0208 	add.w	r2, r3, #8
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f103 0208 	add.w	r2, r3, #8
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f103 0208 	add.w	r2, r3, #8
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr

08002bde <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr

08002bf6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b085      	sub	sp, #20
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	601a      	str	r2, [r3, #0]
}
 8002c32:	bf00      	nop
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c52:	d103      	bne.n	8002c5c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	e00c      	b.n	8002c76 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3308      	adds	r3, #8
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	e002      	b.n	8002c6a <vListInsert+0x2e>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d2f6      	bcs.n	8002c64 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	1c5a      	adds	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	601a      	str	r2, [r3, #0]
}
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6892      	ldr	r2, [r2, #8]
 8002cc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6852      	ldr	r2, [r2, #4]
 8002ccc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d103      	bne.n	8002ce0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	1e5a      	subs	r2, r3, #1
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr
	...

08002d00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10a      	bne.n	8002d2a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d18:	f383 8811 	msr	BASEPRI, r3
 8002d1c:	f3bf 8f6f 	isb	sy
 8002d20:	f3bf 8f4f 	dsb	sy
 8002d24:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d26:	bf00      	nop
 8002d28:	e7fe      	b.n	8002d28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002d2a:	f002 f897 	bl	8004e5c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d36:	68f9      	ldr	r1, [r7, #12]
 8002d38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d3a:	fb01 f303 	mul.w	r3, r1, r3
 8002d3e:	441a      	add	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	68f9      	ldr	r1, [r7, #12]
 8002d5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d60:	fb01 f303 	mul.w	r3, r1, r3
 8002d64:	441a      	add	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	22ff      	movs	r2, #255	; 0xff
 8002d6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	22ff      	movs	r2, #255	; 0xff
 8002d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d114      	bne.n	8002daa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d01a      	beq.n	8002dbe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	3310      	adds	r3, #16
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f001 f959 	bl	8004044 <xTaskRemoveFromEventList>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d012      	beq.n	8002dbe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d98:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <xQueueGenericReset+0xcc>)
 8002d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	f3bf 8f4f 	dsb	sy
 8002da4:	f3bf 8f6f 	isb	sy
 8002da8:	e009      	b.n	8002dbe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	3310      	adds	r3, #16
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff fef6 	bl	8002ba0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	3324      	adds	r3, #36	; 0x24
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fef1 	bl	8002ba0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002dbe:	f002 f87d 	bl	8004ebc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002dc2:	2301      	movs	r3, #1
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	e000ed04 	.word	0xe000ed04

08002dd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08e      	sub	sp, #56	; 0x38
 8002dd4:	af02      	add	r7, sp, #8
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10a      	bne.n	8002dfa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de8:	f383 8811 	msr	BASEPRI, r3
 8002dec:	f3bf 8f6f 	isb	sy
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002df6:	bf00      	nop
 8002df8:	e7fe      	b.n	8002df8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10a      	bne.n	8002e16 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e04:	f383 8811 	msr	BASEPRI, r3
 8002e08:	f3bf 8f6f 	isb	sy
 8002e0c:	f3bf 8f4f 	dsb	sy
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e12:	bf00      	nop
 8002e14:	e7fe      	b.n	8002e14 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <xQueueGenericCreateStatic+0x52>
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <xQueueGenericCreateStatic+0x56>
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <xQueueGenericCreateStatic+0x58>
 8002e26:	2300      	movs	r3, #0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10a      	bne.n	8002e42 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e30:	f383 8811 	msr	BASEPRI, r3
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	f3bf 8f4f 	dsb	sy
 8002e3c:	623b      	str	r3, [r7, #32]
}
 8002e3e:	bf00      	nop
 8002e40:	e7fe      	b.n	8002e40 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d102      	bne.n	8002e4e <xQueueGenericCreateStatic+0x7e>
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <xQueueGenericCreateStatic+0x82>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <xQueueGenericCreateStatic+0x84>
 8002e52:	2300      	movs	r3, #0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10a      	bne.n	8002e6e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5c:	f383 8811 	msr	BASEPRI, r3
 8002e60:	f3bf 8f6f 	isb	sy
 8002e64:	f3bf 8f4f 	dsb	sy
 8002e68:	61fb      	str	r3, [r7, #28]
}
 8002e6a:	bf00      	nop
 8002e6c:	e7fe      	b.n	8002e6c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002e6e:	2350      	movs	r3, #80	; 0x50
 8002e70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b50      	cmp	r3, #80	; 0x50
 8002e76:	d00a      	beq.n	8002e8e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	61bb      	str	r3, [r7, #24]
}
 8002e8a:	bf00      	nop
 8002e8c:	e7fe      	b.n	8002e8c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00d      	beq.n	8002eb4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ea0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68b9      	ldr	r1, [r7, #8]
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f843 	bl	8002f3a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3730      	adds	r7, #48	; 0x30
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b08a      	sub	sp, #40	; 0x28
 8002ec2:	af02      	add	r7, sp, #8
 8002ec4:	60f8      	str	r0, [r7, #12]
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10a      	bne.n	8002ee8 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed6:	f383 8811 	msr	BASEPRI, r3
 8002eda:	f3bf 8f6f 	isb	sy
 8002ede:	f3bf 8f4f 	dsb	sy
 8002ee2:	613b      	str	r3, [r7, #16]
}
 8002ee4:	bf00      	nop
 8002ee6:	e7fe      	b.n	8002ee6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d102      	bne.n	8002ef4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
 8002ef2:	e004      	b.n	8002efe <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	fb02 f303 	mul.w	r3, r2, r3
 8002efc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	3350      	adds	r3, #80	; 0x50
 8002f02:	4618      	mov	r0, r3
 8002f04:	f002 f8aa 	bl	800505c <pvPortMalloc>
 8002f08:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00f      	beq.n	8002f30 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	3350      	adds	r3, #80	; 0x50
 8002f14:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f1e:	79fa      	ldrb	r2, [r7, #7]
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	4613      	mov	r3, r2
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	68b9      	ldr	r1, [r7, #8]
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 f805 	bl	8002f3a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002f30:	69bb      	ldr	r3, [r7, #24]
	}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3720      	adds	r7, #32
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b084      	sub	sp, #16
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	60f8      	str	r0, [r7, #12]
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	607a      	str	r2, [r7, #4]
 8002f46:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d103      	bne.n	8002f56 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	e002      	b.n	8002f5c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f68:	2101      	movs	r1, #1
 8002f6a:	69b8      	ldr	r0, [r7, #24]
 8002f6c:	f7ff fec8 	bl	8002d00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	78fa      	ldrb	r2, [r7, #3]
 8002f74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f78:	bf00      	nop
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08e      	sub	sp, #56	; 0x38
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10a      	bne.n	8002fb2 <xQueueGenericSend+0x32>
	__asm volatile
 8002f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa0:	f383 8811 	msr	BASEPRI, r3
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002fae:	bf00      	nop
 8002fb0:	e7fe      	b.n	8002fb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d103      	bne.n	8002fc0 <xQueueGenericSend+0x40>
 8002fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <xQueueGenericSend+0x44>
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e000      	b.n	8002fc6 <xQueueGenericSend+0x46>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10a      	bne.n	8002fe0 <xQueueGenericSend+0x60>
	__asm volatile
 8002fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fce:	f383 8811 	msr	BASEPRI, r3
 8002fd2:	f3bf 8f6f 	isb	sy
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002fdc:	bf00      	nop
 8002fde:	e7fe      	b.n	8002fde <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d103      	bne.n	8002fee <xQueueGenericSend+0x6e>
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <xQueueGenericSend+0x72>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <xQueueGenericSend+0x74>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10a      	bne.n	800300e <xQueueGenericSend+0x8e>
	__asm volatile
 8002ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffc:	f383 8811 	msr	BASEPRI, r3
 8003000:	f3bf 8f6f 	isb	sy
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	623b      	str	r3, [r7, #32]
}
 800300a:	bf00      	nop
 800300c:	e7fe      	b.n	800300c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800300e:	f001 f9df 	bl	80043d0 <xTaskGetSchedulerState>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d102      	bne.n	800301e <xQueueGenericSend+0x9e>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <xQueueGenericSend+0xa2>
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <xQueueGenericSend+0xa4>
 8003022:	2300      	movs	r3, #0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10a      	bne.n	800303e <xQueueGenericSend+0xbe>
	__asm volatile
 8003028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302c:	f383 8811 	msr	BASEPRI, r3
 8003030:	f3bf 8f6f 	isb	sy
 8003034:	f3bf 8f4f 	dsb	sy
 8003038:	61fb      	str	r3, [r7, #28]
}
 800303a:	bf00      	nop
 800303c:	e7fe      	b.n	800303c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800303e:	f001 ff0d 	bl	8004e5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304a:	429a      	cmp	r2, r3
 800304c:	d302      	bcc.n	8003054 <xQueueGenericSend+0xd4>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b02      	cmp	r3, #2
 8003052:	d129      	bne.n	80030a8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	68b9      	ldr	r1, [r7, #8]
 8003058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800305a:	f000 fa07 	bl	800346c <prvCopyDataToQueue>
 800305e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	2b00      	cmp	r3, #0
 8003066:	d010      	beq.n	800308a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306a:	3324      	adds	r3, #36	; 0x24
 800306c:	4618      	mov	r0, r3
 800306e:	f000 ffe9 	bl	8004044 <xTaskRemoveFromEventList>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d013      	beq.n	80030a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003078:	4b3f      	ldr	r3, [pc, #252]	; (8003178 <xQueueGenericSend+0x1f8>)
 800307a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	f3bf 8f4f 	dsb	sy
 8003084:	f3bf 8f6f 	isb	sy
 8003088:	e00a      	b.n	80030a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800308a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308c:	2b00      	cmp	r3, #0
 800308e:	d007      	beq.n	80030a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003090:	4b39      	ldr	r3, [pc, #228]	; (8003178 <xQueueGenericSend+0x1f8>)
 8003092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	f3bf 8f4f 	dsb	sy
 800309c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80030a0:	f001 ff0c 	bl	8004ebc <vPortExitCritical>
				return pdPASS;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e063      	b.n	8003170 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d103      	bne.n	80030b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030ae:	f001 ff05 	bl	8004ebc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e05c      	b.n	8003170 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d106      	bne.n	80030ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030bc:	f107 0314 	add.w	r3, r7, #20
 80030c0:	4618      	mov	r0, r3
 80030c2:	f001 f823 	bl	800410c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030c6:	2301      	movs	r3, #1
 80030c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030ca:	f001 fef7 	bl	8004ebc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030ce:	f000 fd8d 	bl	8003bec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030d2:	f001 fec3 	bl	8004e5c <vPortEnterCritical>
 80030d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030dc:	b25b      	sxtb	r3, r3
 80030de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e2:	d103      	bne.n	80030ec <xQueueGenericSend+0x16c>
 80030e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030f2:	b25b      	sxtb	r3, r3
 80030f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f8:	d103      	bne.n	8003102 <xQueueGenericSend+0x182>
 80030fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003102:	f001 fedb 	bl	8004ebc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003106:	1d3a      	adds	r2, r7, #4
 8003108:	f107 0314 	add.w	r3, r7, #20
 800310c:	4611      	mov	r1, r2
 800310e:	4618      	mov	r0, r3
 8003110:	f001 f812 	bl	8004138 <xTaskCheckForTimeOut>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d124      	bne.n	8003164 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800311a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800311c:	f000 fa9e 	bl	800365c <prvIsQueueFull>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d018      	beq.n	8003158 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003128:	3310      	adds	r3, #16
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	4611      	mov	r1, r2
 800312e:	4618      	mov	r0, r3
 8003130:	f000 ff38 	bl	8003fa4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003134:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003136:	f000 fa29 	bl	800358c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800313a:	f000 fd65 	bl	8003c08 <xTaskResumeAll>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	f47f af7c 	bne.w	800303e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003146:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <xQueueGenericSend+0x1f8>)
 8003148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	f3bf 8f6f 	isb	sy
 8003156:	e772      	b.n	800303e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800315a:	f000 fa17 	bl	800358c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800315e:	f000 fd53 	bl	8003c08 <xTaskResumeAll>
 8003162:	e76c      	b.n	800303e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003164:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003166:	f000 fa11 	bl	800358c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800316a:	f000 fd4d 	bl	8003c08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800316e:	2300      	movs	r3, #0
		}
	}
}
 8003170:	4618      	mov	r0, r3
 8003172:	3738      	adds	r7, #56	; 0x38
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	e000ed04 	.word	0xe000ed04

0800317c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08e      	sub	sp, #56	; 0x38
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
 8003188:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800318e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10a      	bne.n	80031aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003198:	f383 8811 	msr	BASEPRI, r3
 800319c:	f3bf 8f6f 	isb	sy
 80031a0:	f3bf 8f4f 	dsb	sy
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031a6:	bf00      	nop
 80031a8:	e7fe      	b.n	80031a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d103      	bne.n	80031b8 <xQueueGenericSendFromISR+0x3c>
 80031b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <xQueueGenericSendFromISR+0x40>
 80031b8:	2301      	movs	r3, #1
 80031ba:	e000      	b.n	80031be <xQueueGenericSendFromISR+0x42>
 80031bc:	2300      	movs	r3, #0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10a      	bne.n	80031d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80031c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c6:	f383 8811 	msr	BASEPRI, r3
 80031ca:	f3bf 8f6f 	isb	sy
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	623b      	str	r3, [r7, #32]
}
 80031d4:	bf00      	nop
 80031d6:	e7fe      	b.n	80031d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d103      	bne.n	80031e6 <xQueueGenericSendFromISR+0x6a>
 80031de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <xQueueGenericSendFromISR+0x6e>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <xQueueGenericSendFromISR+0x70>
 80031ea:	2300      	movs	r3, #0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10a      	bne.n	8003206 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80031f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f4:	f383 8811 	msr	BASEPRI, r3
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	61fb      	str	r3, [r7, #28]
}
 8003202:	bf00      	nop
 8003204:	e7fe      	b.n	8003204 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003206:	f001 feeb 	bl	8004fe0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800320a:	f3ef 8211 	mrs	r2, BASEPRI
 800320e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003212:	f383 8811 	msr	BASEPRI, r3
 8003216:	f3bf 8f6f 	isb	sy
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	61ba      	str	r2, [r7, #24]
 8003220:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003222:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003224:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800322a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322e:	429a      	cmp	r2, r3
 8003230:	d302      	bcc.n	8003238 <xQueueGenericSendFromISR+0xbc>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b02      	cmp	r3, #2
 8003236:	d12c      	bne.n	8003292 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800323e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	68b9      	ldr	r1, [r7, #8]
 8003246:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003248:	f000 f910 	bl	800346c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800324c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003254:	d112      	bne.n	800327c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	2b00      	cmp	r3, #0
 800325c:	d016      	beq.n	800328c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800325e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003260:	3324      	adds	r3, #36	; 0x24
 8003262:	4618      	mov	r0, r3
 8003264:	f000 feee 	bl	8004044 <xTaskRemoveFromEventList>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00e      	beq.n	800328c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00b      	beq.n	800328c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	e007      	b.n	800328c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800327c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003280:	3301      	adds	r3, #1
 8003282:	b2db      	uxtb	r3, r3
 8003284:	b25a      	sxtb	r2, r3
 8003286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800328c:	2301      	movs	r3, #1
 800328e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003290:	e001      	b.n	8003296 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003292:	2300      	movs	r3, #0
 8003294:	637b      	str	r3, [r7, #52]	; 0x34
 8003296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003298:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80032a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80032a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3738      	adds	r7, #56	; 0x38
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08c      	sub	sp, #48	; 0x30
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80032b8:	2300      	movs	r3, #0
 80032ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80032c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10a      	bne.n	80032dc <xQueueReceive+0x30>
	__asm volatile
 80032c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ca:	f383 8811 	msr	BASEPRI, r3
 80032ce:	f3bf 8f6f 	isb	sy
 80032d2:	f3bf 8f4f 	dsb	sy
 80032d6:	623b      	str	r3, [r7, #32]
}
 80032d8:	bf00      	nop
 80032da:	e7fe      	b.n	80032da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d103      	bne.n	80032ea <xQueueReceive+0x3e>
 80032e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <xQueueReceive+0x42>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <xQueueReceive+0x44>
 80032ee:	2300      	movs	r3, #0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10a      	bne.n	800330a <xQueueReceive+0x5e>
	__asm volatile
 80032f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f8:	f383 8811 	msr	BASEPRI, r3
 80032fc:	f3bf 8f6f 	isb	sy
 8003300:	f3bf 8f4f 	dsb	sy
 8003304:	61fb      	str	r3, [r7, #28]
}
 8003306:	bf00      	nop
 8003308:	e7fe      	b.n	8003308 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800330a:	f001 f861 	bl	80043d0 <xTaskGetSchedulerState>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d102      	bne.n	800331a <xQueueReceive+0x6e>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <xQueueReceive+0x72>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <xQueueReceive+0x74>
 800331e:	2300      	movs	r3, #0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10a      	bne.n	800333a <xQueueReceive+0x8e>
	__asm volatile
 8003324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003328:	f383 8811 	msr	BASEPRI, r3
 800332c:	f3bf 8f6f 	isb	sy
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	61bb      	str	r3, [r7, #24]
}
 8003336:	bf00      	nop
 8003338:	e7fe      	b.n	8003338 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800333a:	f001 fd8f 	bl	8004e5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800333e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003342:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	2b00      	cmp	r3, #0
 8003348:	d01f      	beq.n	800338a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800334a:	68b9      	ldr	r1, [r7, #8]
 800334c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800334e:	f000 f8f7 	bl	8003540 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	1e5a      	subs	r2, r3, #1
 8003356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003358:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800335a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00f      	beq.n	8003382 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003364:	3310      	adds	r3, #16
 8003366:	4618      	mov	r0, r3
 8003368:	f000 fe6c 	bl	8004044 <xTaskRemoveFromEventList>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d007      	beq.n	8003382 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003372:	4b3d      	ldr	r3, [pc, #244]	; (8003468 <xQueueReceive+0x1bc>)
 8003374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003382:	f001 fd9b 	bl	8004ebc <vPortExitCritical>
				return pdPASS;
 8003386:	2301      	movs	r3, #1
 8003388:	e069      	b.n	800345e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d103      	bne.n	8003398 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003390:	f001 fd94 	bl	8004ebc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003394:	2300      	movs	r3, #0
 8003396:	e062      	b.n	800345e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339a:	2b00      	cmp	r3, #0
 800339c:	d106      	bne.n	80033ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800339e:	f107 0310 	add.w	r3, r7, #16
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 feb2 	bl	800410c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033a8:	2301      	movs	r3, #1
 80033aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033ac:	f001 fd86 	bl	8004ebc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033b0:	f000 fc1c 	bl	8003bec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033b4:	f001 fd52 	bl	8004e5c <vPortEnterCritical>
 80033b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033be:	b25b      	sxtb	r3, r3
 80033c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c4:	d103      	bne.n	80033ce <xQueueReceive+0x122>
 80033c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033d4:	b25b      	sxtb	r3, r3
 80033d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033da:	d103      	bne.n	80033e4 <xQueueReceive+0x138>
 80033dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033e4:	f001 fd6a 	bl	8004ebc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033e8:	1d3a      	adds	r2, r7, #4
 80033ea:	f107 0310 	add.w	r3, r7, #16
 80033ee:	4611      	mov	r1, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fea1 	bl	8004138 <xTaskCheckForTimeOut>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d123      	bne.n	8003444 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033fe:	f000 f917 	bl	8003630 <prvIsQueueEmpty>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d017      	beq.n	8003438 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340a:	3324      	adds	r3, #36	; 0x24
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	4611      	mov	r1, r2
 8003410:	4618      	mov	r0, r3
 8003412:	f000 fdc7 	bl	8003fa4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003418:	f000 f8b8 	bl	800358c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800341c:	f000 fbf4 	bl	8003c08 <xTaskResumeAll>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d189      	bne.n	800333a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003426:	4b10      	ldr	r3, [pc, #64]	; (8003468 <xQueueReceive+0x1bc>)
 8003428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	f3bf 8f4f 	dsb	sy
 8003432:	f3bf 8f6f 	isb	sy
 8003436:	e780      	b.n	800333a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800343a:	f000 f8a7 	bl	800358c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800343e:	f000 fbe3 	bl	8003c08 <xTaskResumeAll>
 8003442:	e77a      	b.n	800333a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003446:	f000 f8a1 	bl	800358c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800344a:	f000 fbdd 	bl	8003c08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800344e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003450:	f000 f8ee 	bl	8003630 <prvIsQueueEmpty>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	f43f af6f 	beq.w	800333a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800345c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800345e:	4618      	mov	r0, r3
 8003460:	3730      	adds	r7, #48	; 0x30
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	e000ed04 	.word	0xe000ed04

0800346c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003478:	2300      	movs	r3, #0
 800347a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003480:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10d      	bne.n	80034a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d14d      	bne.n	800352e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	4618      	mov	r0, r3
 8003498:	f000 ffb8 	bl	800440c <xTaskPriorityDisinherit>
 800349c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	605a      	str	r2, [r3, #4]
 80034a4:	e043      	b.n	800352e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d119      	bne.n	80034e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6898      	ldr	r0, [r3, #8]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	461a      	mov	r2, r3
 80034b6:	68b9      	ldr	r1, [r7, #8]
 80034b8:	f002 f82c 	bl	8005514 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	441a      	add	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d32b      	bcc.n	800352e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	609a      	str	r2, [r3, #8]
 80034de:	e026      	b.n	800352e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	68d8      	ldr	r0, [r3, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	461a      	mov	r2, r3
 80034ea:	68b9      	ldr	r1, [r7, #8]
 80034ec:	f002 f812 	bl	8005514 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	425b      	negs	r3, r3
 80034fa:	441a      	add	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d207      	bcs.n	800351c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	425b      	negs	r3, r3
 8003516:	441a      	add	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b02      	cmp	r3, #2
 8003520:	d105      	bne.n	800352e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	3b01      	subs	r3, #1
 800352c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003536:	697b      	ldr	r3, [r7, #20]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	2b00      	cmp	r3, #0
 8003550:	d018      	beq.n	8003584 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	441a      	add	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	429a      	cmp	r2, r3
 800356a:	d303      	bcc.n	8003574 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68d9      	ldr	r1, [r3, #12]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	461a      	mov	r2, r3
 800357e:	6838      	ldr	r0, [r7, #0]
 8003580:	f001 ffc8 	bl	8005514 <memcpy>
	}
}
 8003584:	bf00      	nop
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003594:	f001 fc62 	bl	8004e5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800359e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035a0:	e011      	b.n	80035c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d012      	beq.n	80035d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3324      	adds	r3, #36	; 0x24
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 fd48 	bl	8004044 <xTaskRemoveFromEventList>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80035ba:	f000 fe1f 	bl	80041fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	dce9      	bgt.n	80035a2 <prvUnlockQueue+0x16>
 80035ce:	e000      	b.n	80035d2 <prvUnlockQueue+0x46>
					break;
 80035d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	22ff      	movs	r2, #255	; 0xff
 80035d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80035da:	f001 fc6f 	bl	8004ebc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80035de:	f001 fc3d 	bl	8004e5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035ea:	e011      	b.n	8003610 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d012      	beq.n	800361a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3310      	adds	r3, #16
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 fd23 	bl	8004044 <xTaskRemoveFromEventList>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003604:	f000 fdfa 	bl	80041fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003608:	7bbb      	ldrb	r3, [r7, #14]
 800360a:	3b01      	subs	r3, #1
 800360c:	b2db      	uxtb	r3, r3
 800360e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003610:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003614:	2b00      	cmp	r3, #0
 8003616:	dce9      	bgt.n	80035ec <prvUnlockQueue+0x60>
 8003618:	e000      	b.n	800361c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800361a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	22ff      	movs	r2, #255	; 0xff
 8003620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003624:	f001 fc4a 	bl	8004ebc <vPortExitCritical>
}
 8003628:	bf00      	nop
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003638:	f001 fc10 	bl	8004e5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	2b00      	cmp	r3, #0
 8003642:	d102      	bne.n	800364a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003644:	2301      	movs	r3, #1
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	e001      	b.n	800364e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800364e:	f001 fc35 	bl	8004ebc <vPortExitCritical>

	return xReturn;
 8003652:	68fb      	ldr	r3, [r7, #12]
}
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003664:	f001 fbfa 	bl	8004e5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003670:	429a      	cmp	r2, r3
 8003672:	d102      	bne.n	800367a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003674:	2301      	movs	r3, #1
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	e001      	b.n	800367e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800367e:	f001 fc1d 	bl	8004ebc <vPortExitCritical>

	return xReturn;
 8003682:	68fb      	ldr	r3, [r7, #12]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003696:	2300      	movs	r3, #0
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	e014      	b.n	80036c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800369c:	4a0e      	ldr	r2, [pc, #56]	; (80036d8 <vQueueAddToRegistry+0x4c>)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10b      	bne.n	80036c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80036a8:	490b      	ldr	r1, [pc, #44]	; (80036d8 <vQueueAddToRegistry+0x4c>)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80036b2:	4a09      	ldr	r2, [pc, #36]	; (80036d8 <vQueueAddToRegistry+0x4c>)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	4413      	add	r3, r2
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80036be:	e006      	b.n	80036ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	3301      	adds	r3, #1
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b07      	cmp	r3, #7
 80036ca:	d9e7      	bls.n	800369c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80036cc:	bf00      	nop
 80036ce:	bf00      	nop
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr
 80036d8:	20000a20 	.word	0x20000a20

080036dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80036ec:	f001 fbb6 	bl	8004e5c <vPortEnterCritical>
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036f6:	b25b      	sxtb	r3, r3
 80036f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fc:	d103      	bne.n	8003706 <vQueueWaitForMessageRestricted+0x2a>
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800370c:	b25b      	sxtb	r3, r3
 800370e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003712:	d103      	bne.n	800371c <vQueueWaitForMessageRestricted+0x40>
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800371c:	f001 fbce 	bl	8004ebc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003724:	2b00      	cmp	r3, #0
 8003726:	d106      	bne.n	8003736 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	3324      	adds	r3, #36	; 0x24
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	68b9      	ldr	r1, [r7, #8]
 8003730:	4618      	mov	r0, r3
 8003732:	f000 fc5b 	bl	8003fec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003736:	6978      	ldr	r0, [r7, #20]
 8003738:	f7ff ff28 	bl	800358c <prvUnlockQueue>
	}
 800373c:	bf00      	nop
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003744:	b580      	push	{r7, lr}
 8003746:	b08e      	sub	sp, #56	; 0x38
 8003748:	af04      	add	r7, sp, #16
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10a      	bne.n	800376e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	623b      	str	r3, [r7, #32]
}
 800376a:	bf00      	nop
 800376c:	e7fe      	b.n	800376c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800376e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10a      	bne.n	800378a <xTaskCreateStatic+0x46>
	__asm volatile
 8003774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003778:	f383 8811 	msr	BASEPRI, r3
 800377c:	f3bf 8f6f 	isb	sy
 8003780:	f3bf 8f4f 	dsb	sy
 8003784:	61fb      	str	r3, [r7, #28]
}
 8003786:	bf00      	nop
 8003788:	e7fe      	b.n	8003788 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800378a:	23b8      	movs	r3, #184	; 0xb8
 800378c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	2bb8      	cmp	r3, #184	; 0xb8
 8003792:	d00a      	beq.n	80037aa <xTaskCreateStatic+0x66>
	__asm volatile
 8003794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003798:	f383 8811 	msr	BASEPRI, r3
 800379c:	f3bf 8f6f 	isb	sy
 80037a0:	f3bf 8f4f 	dsb	sy
 80037a4:	61bb      	str	r3, [r7, #24]
}
 80037a6:	bf00      	nop
 80037a8:	e7fe      	b.n	80037a8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80037aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01e      	beq.n	80037ee <xTaskCreateStatic+0xaa>
 80037b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d01b      	beq.n	80037ee <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037be:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80037c8:	2300      	movs	r3, #0
 80037ca:	9303      	str	r3, [sp, #12]
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	9302      	str	r3, [sp, #8]
 80037d0:	f107 0314 	add.w	r3, r7, #20
 80037d4:	9301      	str	r3, [sp, #4]
 80037d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	68b9      	ldr	r1, [r7, #8]
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 f851 	bl	8003888 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037e8:	f000 f8ec 	bl	80039c4 <prvAddNewTaskToReadyList>
 80037ec:	e001      	b.n	80037f2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80037f2:	697b      	ldr	r3, [r7, #20]
	}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3728      	adds	r7, #40	; 0x28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08c      	sub	sp, #48	; 0x30
 8003800:	af04      	add	r7, sp, #16
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	4613      	mov	r3, r2
 800380a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800380c:	88fb      	ldrh	r3, [r7, #6]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4618      	mov	r0, r3
 8003812:	f001 fc23 	bl	800505c <pvPortMalloc>
 8003816:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00e      	beq.n	800383c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800381e:	20b8      	movs	r0, #184	; 0xb8
 8003820:	f001 fc1c 	bl	800505c <pvPortMalloc>
 8003824:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	631a      	str	r2, [r3, #48]	; 0x30
 8003832:	e005      	b.n	8003840 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003834:	6978      	ldr	r0, [r7, #20]
 8003836:	f001 fcd5 	bl	80051e4 <vPortFree>
 800383a:	e001      	b.n	8003840 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800383c:	2300      	movs	r3, #0
 800383e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d017      	beq.n	8003876 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800384e:	88fa      	ldrh	r2, [r7, #6]
 8003850:	2300      	movs	r3, #0
 8003852:	9303      	str	r3, [sp, #12]
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	9302      	str	r3, [sp, #8]
 8003858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385a:	9301      	str	r3, [sp, #4]
 800385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	68b9      	ldr	r1, [r7, #8]
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 f80f 	bl	8003888 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800386a:	69f8      	ldr	r0, [r7, #28]
 800386c:	f000 f8aa 	bl	80039c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003870:	2301      	movs	r3, #1
 8003872:	61bb      	str	r3, [r7, #24]
 8003874:	e002      	b.n	800387c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003876:	f04f 33ff 	mov.w	r3, #4294967295
 800387a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800387c:	69bb      	ldr	r3, [r7, #24]
	}
 800387e:	4618      	mov	r0, r3
 8003880:	3720      	adds	r7, #32
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003898:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	461a      	mov	r2, r3
 80038a0:	21a5      	movs	r1, #165	; 0xa5
 80038a2:	f001 fdb3 	bl	800540c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80038a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80038b0:	3b01      	subs	r3, #1
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	f023 0307 	bic.w	r3, r3, #7
 80038be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80038ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ce:	f383 8811 	msr	BASEPRI, r3
 80038d2:	f3bf 8f6f 	isb	sy
 80038d6:	f3bf 8f4f 	dsb	sy
 80038da:	617b      	str	r3, [r7, #20]
}
 80038dc:	bf00      	nop
 80038de:	e7fe      	b.n	80038de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038e0:	2300      	movs	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]
 80038e4:	e012      	b.n	800390c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	4413      	add	r3, r2
 80038ec:	7819      	ldrb	r1, [r3, #0]
 80038ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	4413      	add	r3, r2
 80038f4:	3334      	adds	r3, #52	; 0x34
 80038f6:	460a      	mov	r2, r1
 80038f8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	4413      	add	r3, r2
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d006      	beq.n	8003914 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	3301      	adds	r3, #1
 800390a:	61fb      	str	r3, [r7, #28]
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	2b1f      	cmp	r3, #31
 8003910:	d9e9      	bls.n	80038e6 <prvInitialiseNewTask+0x5e>
 8003912:	e000      	b.n	8003916 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003914:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800391e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003920:	2b37      	cmp	r3, #55	; 0x37
 8003922:	d901      	bls.n	8003928 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003924:	2337      	movs	r3, #55	; 0x37
 8003926:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800392c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003932:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8003934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003936:	2200      	movs	r2, #0
 8003938:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393c:	3304      	adds	r3, #4
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff f94d 	bl	8002bde <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003946:	3318      	adds	r3, #24
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff f948 	bl	8002bde <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800394e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003952:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003956:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800395a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800395e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003962:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003966:	2200      	movs	r2, #0
 8003968:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800396c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396e:	2200      	movs	r2, #0
 8003970:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003976:	3364      	adds	r3, #100	; 0x64
 8003978:	224c      	movs	r2, #76	; 0x4c
 800397a:	2100      	movs	r1, #0
 800397c:	4618      	mov	r0, r3
 800397e:	f001 fd45 	bl	800540c <memset>
 8003982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003984:	4a0c      	ldr	r2, [pc, #48]	; (80039b8 <prvInitialiseNewTask+0x130>)
 8003986:	669a      	str	r2, [r3, #104]	; 0x68
 8003988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398a:	4a0c      	ldr	r2, [pc, #48]	; (80039bc <prvInitialiseNewTask+0x134>)
 800398c:	66da      	str	r2, [r3, #108]	; 0x6c
 800398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003990:	4a0b      	ldr	r2, [pc, #44]	; (80039c0 <prvInitialiseNewTask+0x138>)
 8003992:	671a      	str	r2, [r3, #112]	; 0x70
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	68f9      	ldr	r1, [r7, #12]
 8003998:	69b8      	ldr	r0, [r7, #24]
 800399a:	f001 f96b 	bl	8004c74 <pxPortInitialiseStack>
 800399e:	4602      	mov	r2, r0
 80039a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80039a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80039aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039b0:	bf00      	nop
 80039b2:	3720      	adds	r7, #32
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	200030ac 	.word	0x200030ac
 80039bc:	20003114 	.word	0x20003114
 80039c0:	2000317c 	.word	0x2000317c

080039c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80039cc:	f001 fa46 	bl	8004e5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80039d0:	4b2d      	ldr	r3, [pc, #180]	; (8003a88 <prvAddNewTaskToReadyList+0xc4>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	3301      	adds	r3, #1
 80039d6:	4a2c      	ldr	r2, [pc, #176]	; (8003a88 <prvAddNewTaskToReadyList+0xc4>)
 80039d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80039da:	4b2c      	ldr	r3, [pc, #176]	; (8003a8c <prvAddNewTaskToReadyList+0xc8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d109      	bne.n	80039f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80039e2:	4a2a      	ldr	r2, [pc, #168]	; (8003a8c <prvAddNewTaskToReadyList+0xc8>)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80039e8:	4b27      	ldr	r3, [pc, #156]	; (8003a88 <prvAddNewTaskToReadyList+0xc4>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d110      	bne.n	8003a12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80039f0:	f000 fc28 	bl	8004244 <prvInitialiseTaskLists>
 80039f4:	e00d      	b.n	8003a12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80039f6:	4b26      	ldr	r3, [pc, #152]	; (8003a90 <prvAddNewTaskToReadyList+0xcc>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d109      	bne.n	8003a12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80039fe:	4b23      	ldr	r3, [pc, #140]	; (8003a8c <prvAddNewTaskToReadyList+0xc8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d802      	bhi.n	8003a12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a0c:	4a1f      	ldr	r2, [pc, #124]	; (8003a8c <prvAddNewTaskToReadyList+0xc8>)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a12:	4b20      	ldr	r3, [pc, #128]	; (8003a94 <prvAddNewTaskToReadyList+0xd0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3301      	adds	r3, #1
 8003a18:	4a1e      	ldr	r2, [pc, #120]	; (8003a94 <prvAddNewTaskToReadyList+0xd0>)
 8003a1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a1c:	4b1d      	ldr	r3, [pc, #116]	; (8003a94 <prvAddNewTaskToReadyList+0xd0>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a28:	4b1b      	ldr	r3, [pc, #108]	; (8003a98 <prvAddNewTaskToReadyList+0xd4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d903      	bls.n	8003a38 <prvAddNewTaskToReadyList+0x74>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	4a18      	ldr	r2, [pc, #96]	; (8003a98 <prvAddNewTaskToReadyList+0xd4>)
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4a15      	ldr	r2, [pc, #84]	; (8003a9c <prvAddNewTaskToReadyList+0xd8>)
 8003a46:	441a      	add	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4610      	mov	r0, r2
 8003a50:	f7ff f8d1 	bl	8002bf6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a54:	f001 fa32 	bl	8004ebc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a58:	4b0d      	ldr	r3, [pc, #52]	; (8003a90 <prvAddNewTaskToReadyList+0xcc>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00e      	beq.n	8003a7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a60:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <prvAddNewTaskToReadyList+0xc8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d207      	bcs.n	8003a7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a6e:	4b0c      	ldr	r3, [pc, #48]	; (8003aa0 <prvAddNewTaskToReadyList+0xdc>)
 8003a70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a7e:	bf00      	nop
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20000f34 	.word	0x20000f34
 8003a8c:	20000a60 	.word	0x20000a60
 8003a90:	20000f40 	.word	0x20000f40
 8003a94:	20000f50 	.word	0x20000f50
 8003a98:	20000f3c 	.word	0x20000f3c
 8003a9c:	20000a64 	.word	0x20000a64
 8003aa0:	e000ed04 	.word	0xe000ed04

08003aa4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003aac:	2300      	movs	r3, #0
 8003aae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d017      	beq.n	8003ae6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ab6:	4b13      	ldr	r3, [pc, #76]	; (8003b04 <vTaskDelay+0x60>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <vTaskDelay+0x30>
	__asm volatile
 8003abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac2:	f383 8811 	msr	BASEPRI, r3
 8003ac6:	f3bf 8f6f 	isb	sy
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	60bb      	str	r3, [r7, #8]
}
 8003ad0:	bf00      	nop
 8003ad2:	e7fe      	b.n	8003ad2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ad4:	f000 f88a 	bl	8003bec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ad8:	2100      	movs	r1, #0
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 fd64 	bl	80045a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ae0:	f000 f892 	bl	8003c08 <xTaskResumeAll>
 8003ae4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d107      	bne.n	8003afc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003aec:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <vTaskDelay+0x64>)
 8003aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003afc:	bf00      	nop
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	20000f5c 	.word	0x20000f5c
 8003b08:	e000ed04 	.word	0xe000ed04

08003b0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08a      	sub	sp, #40	; 0x28
 8003b10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b1a:	463a      	mov	r2, r7
 8003b1c:	1d39      	adds	r1, r7, #4
 8003b1e:	f107 0308 	add.w	r3, r7, #8
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff f80a 	bl	8002b3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b28:	6839      	ldr	r1, [r7, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	9202      	str	r2, [sp, #8]
 8003b30:	9301      	str	r3, [sp, #4]
 8003b32:	2300      	movs	r3, #0
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	2300      	movs	r3, #0
 8003b38:	460a      	mov	r2, r1
 8003b3a:	4924      	ldr	r1, [pc, #144]	; (8003bcc <vTaskStartScheduler+0xc0>)
 8003b3c:	4824      	ldr	r0, [pc, #144]	; (8003bd0 <vTaskStartScheduler+0xc4>)
 8003b3e:	f7ff fe01 	bl	8003744 <xTaskCreateStatic>
 8003b42:	4603      	mov	r3, r0
 8003b44:	4a23      	ldr	r2, [pc, #140]	; (8003bd4 <vTaskStartScheduler+0xc8>)
 8003b46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b48:	4b22      	ldr	r3, [pc, #136]	; (8003bd4 <vTaskStartScheduler+0xc8>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b50:	2301      	movs	r3, #1
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	e001      	b.n	8003b5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d102      	bne.n	8003b66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003b60:	f000 fd76 	bl	8004650 <xTimerCreateTimerTask>
 8003b64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d11b      	bne.n	8003ba4 <vTaskStartScheduler+0x98>
	__asm volatile
 8003b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b70:	f383 8811 	msr	BASEPRI, r3
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	f3bf 8f4f 	dsb	sy
 8003b7c:	613b      	str	r3, [r7, #16]
}
 8003b7e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b80:	4b15      	ldr	r3, [pc, #84]	; (8003bd8 <vTaskStartScheduler+0xcc>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3364      	adds	r3, #100	; 0x64
 8003b86:	4a15      	ldr	r2, [pc, #84]	; (8003bdc <vTaskStartScheduler+0xd0>)
 8003b88:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b8a:	4b15      	ldr	r3, [pc, #84]	; (8003be0 <vTaskStartScheduler+0xd4>)
 8003b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b92:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <vTaskStartScheduler+0xd8>)
 8003b94:	2201      	movs	r2, #1
 8003b96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003b98:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <vTaskStartScheduler+0xdc>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b9e:	f001 f8eb 	bl	8004d78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ba2:	e00e      	b.n	8003bc2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003baa:	d10a      	bne.n	8003bc2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8003bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb0:	f383 8811 	msr	BASEPRI, r3
 8003bb4:	f3bf 8f6f 	isb	sy
 8003bb8:	f3bf 8f4f 	dsb	sy
 8003bbc:	60fb      	str	r3, [r7, #12]
}
 8003bbe:	bf00      	nop
 8003bc0:	e7fe      	b.n	8003bc0 <vTaskStartScheduler+0xb4>
}
 8003bc2:	bf00      	nop
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	08005688 	.word	0x08005688
 8003bd0:	08004215 	.word	0x08004215
 8003bd4:	20000f58 	.word	0x20000f58
 8003bd8:	20000a60 	.word	0x20000a60
 8003bdc:	2000005c 	.word	0x2000005c
 8003be0:	20000f54 	.word	0x20000f54
 8003be4:	20000f40 	.word	0x20000f40
 8003be8:	20000f38 	.word	0x20000f38

08003bec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003bf0:	4b04      	ldr	r3, [pc, #16]	; (8003c04 <vTaskSuspendAll+0x18>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	4a03      	ldr	r2, [pc, #12]	; (8003c04 <vTaskSuspendAll+0x18>)
 8003bf8:	6013      	str	r3, [r2, #0]
}
 8003bfa:	bf00      	nop
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	20000f5c 	.word	0x20000f5c

08003c08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c12:	2300      	movs	r3, #0
 8003c14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c16:	4b42      	ldr	r3, [pc, #264]	; (8003d20 <xTaskResumeAll+0x118>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10a      	bne.n	8003c34 <xTaskResumeAll+0x2c>
	__asm volatile
 8003c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c22:	f383 8811 	msr	BASEPRI, r3
 8003c26:	f3bf 8f6f 	isb	sy
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	603b      	str	r3, [r7, #0]
}
 8003c30:	bf00      	nop
 8003c32:	e7fe      	b.n	8003c32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c34:	f001 f912 	bl	8004e5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c38:	4b39      	ldr	r3, [pc, #228]	; (8003d20 <xTaskResumeAll+0x118>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	4a38      	ldr	r2, [pc, #224]	; (8003d20 <xTaskResumeAll+0x118>)
 8003c40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c42:	4b37      	ldr	r3, [pc, #220]	; (8003d20 <xTaskResumeAll+0x118>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d162      	bne.n	8003d10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c4a:	4b36      	ldr	r3, [pc, #216]	; (8003d24 <xTaskResumeAll+0x11c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d05e      	beq.n	8003d10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c52:	e02f      	b.n	8003cb4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003c54:	4b34      	ldr	r3, [pc, #208]	; (8003d28 <xTaskResumeAll+0x120>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	3318      	adds	r3, #24
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff f823 	bl	8002cac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	3304      	adds	r3, #4
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff f81e 	bl	8002cac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c74:	4b2d      	ldr	r3, [pc, #180]	; (8003d2c <xTaskResumeAll+0x124>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d903      	bls.n	8003c84 <xTaskResumeAll+0x7c>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c80:	4a2a      	ldr	r2, [pc, #168]	; (8003d2c <xTaskResumeAll+0x124>)
 8003c82:	6013      	str	r3, [r2, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c88:	4613      	mov	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4a27      	ldr	r2, [pc, #156]	; (8003d30 <xTaskResumeAll+0x128>)
 8003c92:	441a      	add	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	3304      	adds	r3, #4
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	f7fe ffab 	bl	8002bf6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca4:	4b23      	ldr	r3, [pc, #140]	; (8003d34 <xTaskResumeAll+0x12c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d302      	bcc.n	8003cb4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003cae:	4b22      	ldr	r3, [pc, #136]	; (8003d38 <xTaskResumeAll+0x130>)
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cb4:	4b1c      	ldr	r3, [pc, #112]	; (8003d28 <xTaskResumeAll+0x120>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1cb      	bne.n	8003c54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003cc2:	f000 fb61 	bl	8004388 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003cc6:	4b1d      	ldr	r3, [pc, #116]	; (8003d3c <xTaskResumeAll+0x134>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d010      	beq.n	8003cf4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003cd2:	f000 f845 	bl	8003d60 <xTaskIncrementTick>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003cdc:	4b16      	ldr	r3, [pc, #88]	; (8003d38 <xTaskResumeAll+0x130>)
 8003cde:	2201      	movs	r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f1      	bne.n	8003cd2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003cee:	4b13      	ldr	r3, [pc, #76]	; (8003d3c <xTaskResumeAll+0x134>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003cf4:	4b10      	ldr	r3, [pc, #64]	; (8003d38 <xTaskResumeAll+0x130>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d009      	beq.n	8003d10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d00:	4b0f      	ldr	r3, [pc, #60]	; (8003d40 <xTaskResumeAll+0x138>)
 8003d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d10:	f001 f8d4 	bl	8004ebc <vPortExitCritical>

	return xAlreadyYielded;
 8003d14:	68bb      	ldr	r3, [r7, #8]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20000f5c 	.word	0x20000f5c
 8003d24:	20000f34 	.word	0x20000f34
 8003d28:	20000ef4 	.word	0x20000ef4
 8003d2c:	20000f3c 	.word	0x20000f3c
 8003d30:	20000a64 	.word	0x20000a64
 8003d34:	20000a60 	.word	0x20000a60
 8003d38:	20000f48 	.word	0x20000f48
 8003d3c:	20000f44 	.word	0x20000f44
 8003d40:	e000ed04 	.word	0xe000ed04

08003d44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003d4a:	4b04      	ldr	r3, [pc, #16]	; (8003d5c <xTaskGetTickCount+0x18>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003d50:	687b      	ldr	r3, [r7, #4]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr
 8003d5c:	20000f38 	.word	0x20000f38

08003d60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d66:	2300      	movs	r3, #0
 8003d68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d6a:	4b51      	ldr	r3, [pc, #324]	; (8003eb0 <xTaskIncrementTick+0x150>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f040 808e 	bne.w	8003e90 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d74:	4b4f      	ldr	r3, [pc, #316]	; (8003eb4 <xTaskIncrementTick+0x154>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d7c:	4a4d      	ldr	r2, [pc, #308]	; (8003eb4 <xTaskIncrementTick+0x154>)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d120      	bne.n	8003dca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d88:	4b4b      	ldr	r3, [pc, #300]	; (8003eb8 <xTaskIncrementTick+0x158>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <xTaskIncrementTick+0x48>
	__asm volatile
 8003d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d96:	f383 8811 	msr	BASEPRI, r3
 8003d9a:	f3bf 8f6f 	isb	sy
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	603b      	str	r3, [r7, #0]
}
 8003da4:	bf00      	nop
 8003da6:	e7fe      	b.n	8003da6 <xTaskIncrementTick+0x46>
 8003da8:	4b43      	ldr	r3, [pc, #268]	; (8003eb8 <xTaskIncrementTick+0x158>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	4b43      	ldr	r3, [pc, #268]	; (8003ebc <xTaskIncrementTick+0x15c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a41      	ldr	r2, [pc, #260]	; (8003eb8 <xTaskIncrementTick+0x158>)
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	4a41      	ldr	r2, [pc, #260]	; (8003ebc <xTaskIncrementTick+0x15c>)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	4b40      	ldr	r3, [pc, #256]	; (8003ec0 <xTaskIncrementTick+0x160>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	4a3f      	ldr	r2, [pc, #252]	; (8003ec0 <xTaskIncrementTick+0x160>)
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	f000 fadf 	bl	8004388 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003dca:	4b3e      	ldr	r3, [pc, #248]	; (8003ec4 <xTaskIncrementTick+0x164>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d34e      	bcc.n	8003e72 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dd4:	4b38      	ldr	r3, [pc, #224]	; (8003eb8 <xTaskIncrementTick+0x158>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <xTaskIncrementTick+0x82>
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <xTaskIncrementTick+0x84>
 8003de2:	2300      	movs	r3, #0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d004      	beq.n	8003df2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003de8:	4b36      	ldr	r3, [pc, #216]	; (8003ec4 <xTaskIncrementTick+0x164>)
 8003dea:	f04f 32ff 	mov.w	r2, #4294967295
 8003dee:	601a      	str	r2, [r3, #0]
					break;
 8003df0:	e03f      	b.n	8003e72 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003df2:	4b31      	ldr	r3, [pc, #196]	; (8003eb8 <xTaskIncrementTick+0x158>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d203      	bcs.n	8003e12 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e0a:	4a2e      	ldr	r2, [pc, #184]	; (8003ec4 <xTaskIncrementTick+0x164>)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6013      	str	r3, [r2, #0]
						break;
 8003e10:	e02f      	b.n	8003e72 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	3304      	adds	r3, #4
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fe ff48 	bl	8002cac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d004      	beq.n	8003e2e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	3318      	adds	r3, #24
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7fe ff3f 	bl	8002cac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e32:	4b25      	ldr	r3, [pc, #148]	; (8003ec8 <xTaskIncrementTick+0x168>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d903      	bls.n	8003e42 <xTaskIncrementTick+0xe2>
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3e:	4a22      	ldr	r2, [pc, #136]	; (8003ec8 <xTaskIncrementTick+0x168>)
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4a1f      	ldr	r2, [pc, #124]	; (8003ecc <xTaskIncrementTick+0x16c>)
 8003e50:	441a      	add	r2, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	3304      	adds	r3, #4
 8003e56:	4619      	mov	r1, r3
 8003e58:	4610      	mov	r0, r2
 8003e5a:	f7fe fecc 	bl	8002bf6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e62:	4b1b      	ldr	r3, [pc, #108]	; (8003ed0 <xTaskIncrementTick+0x170>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d3b3      	bcc.n	8003dd4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e70:	e7b0      	b.n	8003dd4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e72:	4b17      	ldr	r3, [pc, #92]	; (8003ed0 <xTaskIncrementTick+0x170>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e78:	4914      	ldr	r1, [pc, #80]	; (8003ecc <xTaskIncrementTick+0x16c>)
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	440b      	add	r3, r1
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d907      	bls.n	8003e9a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	617b      	str	r3, [r7, #20]
 8003e8e:	e004      	b.n	8003e9a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003e90:	4b10      	ldr	r3, [pc, #64]	; (8003ed4 <xTaskIncrementTick+0x174>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3301      	adds	r3, #1
 8003e96:	4a0f      	ldr	r2, [pc, #60]	; (8003ed4 <xTaskIncrementTick+0x174>)
 8003e98:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003e9a:	4b0f      	ldr	r3, [pc, #60]	; (8003ed8 <xTaskIncrementTick+0x178>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003ea6:	697b      	ldr	r3, [r7, #20]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	20000f5c 	.word	0x20000f5c
 8003eb4:	20000f38 	.word	0x20000f38
 8003eb8:	20000eec 	.word	0x20000eec
 8003ebc:	20000ef0 	.word	0x20000ef0
 8003ec0:	20000f4c 	.word	0x20000f4c
 8003ec4:	20000f54 	.word	0x20000f54
 8003ec8:	20000f3c 	.word	0x20000f3c
 8003ecc:	20000a64 	.word	0x20000a64
 8003ed0:	20000a60 	.word	0x20000a60
 8003ed4:	20000f44 	.word	0x20000f44
 8003ed8:	20000f48 	.word	0x20000f48

08003edc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ee2:	4b2a      	ldr	r3, [pc, #168]	; (8003f8c <vTaskSwitchContext+0xb0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003eea:	4b29      	ldr	r3, [pc, #164]	; (8003f90 <vTaskSwitchContext+0xb4>)
 8003eec:	2201      	movs	r2, #1
 8003eee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ef0:	e046      	b.n	8003f80 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003ef2:	4b27      	ldr	r3, [pc, #156]	; (8003f90 <vTaskSwitchContext+0xb4>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003ef8:	4b26      	ldr	r3, [pc, #152]	; (8003f94 <vTaskSwitchContext+0xb8>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60fb      	str	r3, [r7, #12]
 8003efe:	e010      	b.n	8003f22 <vTaskSwitchContext+0x46>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10a      	bne.n	8003f1c <vTaskSwitchContext+0x40>
	__asm volatile
 8003f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0a:	f383 8811 	msr	BASEPRI, r3
 8003f0e:	f3bf 8f6f 	isb	sy
 8003f12:	f3bf 8f4f 	dsb	sy
 8003f16:	607b      	str	r3, [r7, #4]
}
 8003f18:	bf00      	nop
 8003f1a:	e7fe      	b.n	8003f1a <vTaskSwitchContext+0x3e>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	491d      	ldr	r1, [pc, #116]	; (8003f98 <vTaskSwitchContext+0xbc>)
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	4613      	mov	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0e4      	beq.n	8003f00 <vTaskSwitchContext+0x24>
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4a15      	ldr	r2, [pc, #84]	; (8003f98 <vTaskSwitchContext+0xbc>)
 8003f42:	4413      	add	r3, r2
 8003f44:	60bb      	str	r3, [r7, #8]
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	605a      	str	r2, [r3, #4]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	3308      	adds	r3, #8
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d104      	bne.n	8003f66 <vTaskSwitchContext+0x8a>
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	605a      	str	r2, [r3, #4]
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	4a0b      	ldr	r2, [pc, #44]	; (8003f9c <vTaskSwitchContext+0xc0>)
 8003f6e:	6013      	str	r3, [r2, #0]
 8003f70:	4a08      	ldr	r2, [pc, #32]	; (8003f94 <vTaskSwitchContext+0xb8>)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f76:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <vTaskSwitchContext+0xc0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3364      	adds	r3, #100	; 0x64
 8003f7c:	4a08      	ldr	r2, [pc, #32]	; (8003fa0 <vTaskSwitchContext+0xc4>)
 8003f7e:	6013      	str	r3, [r2, #0]
}
 8003f80:	bf00      	nop
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bc80      	pop	{r7}
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	20000f5c 	.word	0x20000f5c
 8003f90:	20000f48 	.word	0x20000f48
 8003f94:	20000f3c 	.word	0x20000f3c
 8003f98:	20000a64 	.word	0x20000a64
 8003f9c:	20000a60 	.word	0x20000a60
 8003fa0:	2000005c 	.word	0x2000005c

08003fa4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10a      	bne.n	8003fca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb8:	f383 8811 	msr	BASEPRI, r3
 8003fbc:	f3bf 8f6f 	isb	sy
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	60fb      	str	r3, [r7, #12]
}
 8003fc6:	bf00      	nop
 8003fc8:	e7fe      	b.n	8003fc8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fca:	4b07      	ldr	r3, [pc, #28]	; (8003fe8 <vTaskPlaceOnEventList+0x44>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	3318      	adds	r3, #24
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fe fe32 	bl	8002c3c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003fd8:	2101      	movs	r1, #1
 8003fda:	6838      	ldr	r0, [r7, #0]
 8003fdc:	f000 fae4 	bl	80045a8 <prvAddCurrentTaskToDelayedList>
}
 8003fe0:	bf00      	nop
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	20000a60 	.word	0x20000a60

08003fec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10a      	bne.n	8004014 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004002:	f383 8811 	msr	BASEPRI, r3
 8004006:	f3bf 8f6f 	isb	sy
 800400a:	f3bf 8f4f 	dsb	sy
 800400e:	617b      	str	r3, [r7, #20]
}
 8004010:	bf00      	nop
 8004012:	e7fe      	b.n	8004012 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004014:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <vTaskPlaceOnEventListRestricted+0x54>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3318      	adds	r3, #24
 800401a:	4619      	mov	r1, r3
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f7fe fdea 	bl	8002bf6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004028:	f04f 33ff 	mov.w	r3, #4294967295
 800402c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	68b8      	ldr	r0, [r7, #8]
 8004032:	f000 fab9 	bl	80045a8 <prvAddCurrentTaskToDelayedList>
	}
 8004036:	bf00      	nop
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	20000a60 	.word	0x20000a60

08004044 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10a      	bne.n	8004070 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800405a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405e:	f383 8811 	msr	BASEPRI, r3
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	60fb      	str	r3, [r7, #12]
}
 800406c:	bf00      	nop
 800406e:	e7fe      	b.n	800406e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	3318      	adds	r3, #24
 8004074:	4618      	mov	r0, r3
 8004076:	f7fe fe19 	bl	8002cac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800407a:	4b1e      	ldr	r3, [pc, #120]	; (80040f4 <xTaskRemoveFromEventList+0xb0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d11d      	bne.n	80040be <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	3304      	adds	r3, #4
 8004086:	4618      	mov	r0, r3
 8004088:	f7fe fe10 	bl	8002cac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004090:	4b19      	ldr	r3, [pc, #100]	; (80040f8 <xTaskRemoveFromEventList+0xb4>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d903      	bls.n	80040a0 <xTaskRemoveFromEventList+0x5c>
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	4a16      	ldr	r2, [pc, #88]	; (80040f8 <xTaskRemoveFromEventList+0xb4>)
 800409e:	6013      	str	r3, [r2, #0]
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a4:	4613      	mov	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4a13      	ldr	r2, [pc, #76]	; (80040fc <xTaskRemoveFromEventList+0xb8>)
 80040ae:	441a      	add	r2, r3
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	3304      	adds	r3, #4
 80040b4:	4619      	mov	r1, r3
 80040b6:	4610      	mov	r0, r2
 80040b8:	f7fe fd9d 	bl	8002bf6 <vListInsertEnd>
 80040bc:	e005      	b.n	80040ca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	3318      	adds	r3, #24
 80040c2:	4619      	mov	r1, r3
 80040c4:	480e      	ldr	r0, [pc, #56]	; (8004100 <xTaskRemoveFromEventList+0xbc>)
 80040c6:	f7fe fd96 	bl	8002bf6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ce:	4b0d      	ldr	r3, [pc, #52]	; (8004104 <xTaskRemoveFromEventList+0xc0>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d905      	bls.n	80040e4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80040d8:	2301      	movs	r3, #1
 80040da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80040dc:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <xTaskRemoveFromEventList+0xc4>)
 80040de:	2201      	movs	r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	e001      	b.n	80040e8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80040e4:	2300      	movs	r3, #0
 80040e6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80040e8:	697b      	ldr	r3, [r7, #20]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	20000f5c 	.word	0x20000f5c
 80040f8:	20000f3c 	.word	0x20000f3c
 80040fc:	20000a64 	.word	0x20000a64
 8004100:	20000ef4 	.word	0x20000ef4
 8004104:	20000a60 	.word	0x20000a60
 8004108:	20000f48 	.word	0x20000f48

0800410c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004114:	4b06      	ldr	r3, [pc, #24]	; (8004130 <vTaskInternalSetTimeOutState+0x24>)
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800411c:	4b05      	ldr	r3, [pc, #20]	; (8004134 <vTaskInternalSetTimeOutState+0x28>)
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	605a      	str	r2, [r3, #4]
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	20000f4c 	.word	0x20000f4c
 8004134:	20000f38 	.word	0x20000f38

08004138 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b088      	sub	sp, #32
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10a      	bne.n	800415e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414c:	f383 8811 	msr	BASEPRI, r3
 8004150:	f3bf 8f6f 	isb	sy
 8004154:	f3bf 8f4f 	dsb	sy
 8004158:	613b      	str	r3, [r7, #16]
}
 800415a:	bf00      	nop
 800415c:	e7fe      	b.n	800415c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10a      	bne.n	800417a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	60fb      	str	r3, [r7, #12]
}
 8004176:	bf00      	nop
 8004178:	e7fe      	b.n	8004178 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800417a:	f000 fe6f 	bl	8004e5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800417e:	4b1d      	ldr	r3, [pc, #116]	; (80041f4 <xTaskCheckForTimeOut+0xbc>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004196:	d102      	bne.n	800419e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004198:	2300      	movs	r3, #0
 800419a:	61fb      	str	r3, [r7, #28]
 800419c:	e023      	b.n	80041e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	4b15      	ldr	r3, [pc, #84]	; (80041f8 <xTaskCheckForTimeOut+0xc0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d007      	beq.n	80041ba <xTaskCheckForTimeOut+0x82>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d302      	bcc.n	80041ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80041b4:	2301      	movs	r3, #1
 80041b6:	61fb      	str	r3, [r7, #28]
 80041b8:	e015      	b.n	80041e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d20b      	bcs.n	80041dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	1ad2      	subs	r2, r2, r3
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff ff9b 	bl	800410c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80041d6:	2300      	movs	r3, #0
 80041d8:	61fb      	str	r3, [r7, #28]
 80041da:	e004      	b.n	80041e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80041e2:	2301      	movs	r3, #1
 80041e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80041e6:	f000 fe69 	bl	8004ebc <vPortExitCritical>

	return xReturn;
 80041ea:	69fb      	ldr	r3, [r7, #28]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3720      	adds	r7, #32
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20000f38 	.word	0x20000f38
 80041f8:	20000f4c 	.word	0x20000f4c

080041fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004200:	4b03      	ldr	r3, [pc, #12]	; (8004210 <vTaskMissedYield+0x14>)
 8004202:	2201      	movs	r2, #1
 8004204:	601a      	str	r2, [r3, #0]
}
 8004206:	bf00      	nop
 8004208:	46bd      	mov	sp, r7
 800420a:	bc80      	pop	{r7}
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	20000f48 	.word	0x20000f48

08004214 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800421c:	f000 f852 	bl	80042c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004220:	4b06      	ldr	r3, [pc, #24]	; (800423c <prvIdleTask+0x28>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d9f9      	bls.n	800421c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004228:	4b05      	ldr	r3, [pc, #20]	; (8004240 <prvIdleTask+0x2c>)
 800422a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004238:	e7f0      	b.n	800421c <prvIdleTask+0x8>
 800423a:	bf00      	nop
 800423c:	20000a64 	.word	0x20000a64
 8004240:	e000ed04 	.word	0xe000ed04

08004244 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800424a:	2300      	movs	r3, #0
 800424c:	607b      	str	r3, [r7, #4]
 800424e:	e00c      	b.n	800426a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4a12      	ldr	r2, [pc, #72]	; (80042a4 <prvInitialiseTaskLists+0x60>)
 800425c:	4413      	add	r3, r2
 800425e:	4618      	mov	r0, r3
 8004260:	f7fe fc9e 	bl	8002ba0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3301      	adds	r3, #1
 8004268:	607b      	str	r3, [r7, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b37      	cmp	r3, #55	; 0x37
 800426e:	d9ef      	bls.n	8004250 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004270:	480d      	ldr	r0, [pc, #52]	; (80042a8 <prvInitialiseTaskLists+0x64>)
 8004272:	f7fe fc95 	bl	8002ba0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004276:	480d      	ldr	r0, [pc, #52]	; (80042ac <prvInitialiseTaskLists+0x68>)
 8004278:	f7fe fc92 	bl	8002ba0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800427c:	480c      	ldr	r0, [pc, #48]	; (80042b0 <prvInitialiseTaskLists+0x6c>)
 800427e:	f7fe fc8f 	bl	8002ba0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004282:	480c      	ldr	r0, [pc, #48]	; (80042b4 <prvInitialiseTaskLists+0x70>)
 8004284:	f7fe fc8c 	bl	8002ba0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004288:	480b      	ldr	r0, [pc, #44]	; (80042b8 <prvInitialiseTaskLists+0x74>)
 800428a:	f7fe fc89 	bl	8002ba0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800428e:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <prvInitialiseTaskLists+0x78>)
 8004290:	4a05      	ldr	r2, [pc, #20]	; (80042a8 <prvInitialiseTaskLists+0x64>)
 8004292:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004294:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <prvInitialiseTaskLists+0x7c>)
 8004296:	4a05      	ldr	r2, [pc, #20]	; (80042ac <prvInitialiseTaskLists+0x68>)
 8004298:	601a      	str	r2, [r3, #0]
}
 800429a:	bf00      	nop
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20000a64 	.word	0x20000a64
 80042a8:	20000ec4 	.word	0x20000ec4
 80042ac:	20000ed8 	.word	0x20000ed8
 80042b0:	20000ef4 	.word	0x20000ef4
 80042b4:	20000f08 	.word	0x20000f08
 80042b8:	20000f20 	.word	0x20000f20
 80042bc:	20000eec 	.word	0x20000eec
 80042c0:	20000ef0 	.word	0x20000ef0

080042c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042ca:	e019      	b.n	8004300 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80042cc:	f000 fdc6 	bl	8004e5c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80042d0:	4b10      	ldr	r3, [pc, #64]	; (8004314 <prvCheckTasksWaitingTermination+0x50>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3304      	adds	r3, #4
 80042dc:	4618      	mov	r0, r3
 80042de:	f7fe fce5 	bl	8002cac <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042e2:	4b0d      	ldr	r3, [pc, #52]	; (8004318 <prvCheckTasksWaitingTermination+0x54>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	4a0b      	ldr	r2, [pc, #44]	; (8004318 <prvCheckTasksWaitingTermination+0x54>)
 80042ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042ec:	4b0b      	ldr	r3, [pc, #44]	; (800431c <prvCheckTasksWaitingTermination+0x58>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3b01      	subs	r3, #1
 80042f2:	4a0a      	ldr	r2, [pc, #40]	; (800431c <prvCheckTasksWaitingTermination+0x58>)
 80042f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80042f6:	f000 fde1 	bl	8004ebc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f810 	bl	8004320 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004300:	4b06      	ldr	r3, [pc, #24]	; (800431c <prvCheckTasksWaitingTermination+0x58>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1e1      	bne.n	80042cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004308:	bf00      	nop
 800430a:	bf00      	nop
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	20000f08 	.word	0x20000f08
 8004318:	20000f34 	.word	0x20000f34
 800431c:	20000f1c 	.word	0x20000f1c

08004320 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3364      	adds	r3, #100	; 0x64
 800432c:	4618      	mov	r0, r3
 800432e:	f001 f875 	bl	800541c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8004338:	2b00      	cmp	r3, #0
 800433a:	d108      	bne.n	800434e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004340:	4618      	mov	r0, r3
 8004342:	f000 ff4f 	bl	80051e4 <vPortFree>
				vPortFree( pxTCB );
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 ff4c 	bl	80051e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800434c:	e018      	b.n	8004380 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8004354:	2b01      	cmp	r3, #1
 8004356:	d103      	bne.n	8004360 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 ff43 	bl	80051e4 <vPortFree>
	}
 800435e:	e00f      	b.n	8004380 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8004366:	2b02      	cmp	r3, #2
 8004368:	d00a      	beq.n	8004380 <prvDeleteTCB+0x60>
	__asm volatile
 800436a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436e:	f383 8811 	msr	BASEPRI, r3
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	60fb      	str	r3, [r7, #12]
}
 800437c:	bf00      	nop
 800437e:	e7fe      	b.n	800437e <prvDeleteTCB+0x5e>
	}
 8004380:	bf00      	nop
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800438e:	4b0e      	ldr	r3, [pc, #56]	; (80043c8 <prvResetNextTaskUnblockTime+0x40>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <prvResetNextTaskUnblockTime+0x14>
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <prvResetNextTaskUnblockTime+0x16>
 800439c:	2300      	movs	r3, #0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d004      	beq.n	80043ac <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80043a2:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <prvResetNextTaskUnblockTime+0x44>)
 80043a4:	f04f 32ff 	mov.w	r2, #4294967295
 80043a8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80043aa:	e008      	b.n	80043be <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80043ac:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <prvResetNextTaskUnblockTime+0x40>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	4a04      	ldr	r2, [pc, #16]	; (80043cc <prvResetNextTaskUnblockTime+0x44>)
 80043bc:	6013      	str	r3, [r2, #0]
}
 80043be:	bf00      	nop
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bc80      	pop	{r7}
 80043c6:	4770      	bx	lr
 80043c8:	20000eec 	.word	0x20000eec
 80043cc:	20000f54 	.word	0x20000f54

080043d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80043d6:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <xTaskGetSchedulerState+0x34>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d102      	bne.n	80043e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80043de:	2301      	movs	r3, #1
 80043e0:	607b      	str	r3, [r7, #4]
 80043e2:	e008      	b.n	80043f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043e4:	4b08      	ldr	r3, [pc, #32]	; (8004408 <xTaskGetSchedulerState+0x38>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d102      	bne.n	80043f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80043ec:	2302      	movs	r3, #2
 80043ee:	607b      	str	r3, [r7, #4]
 80043f0:	e001      	b.n	80043f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80043f2:	2300      	movs	r3, #0
 80043f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80043f6:	687b      	ldr	r3, [r7, #4]
	}
 80043f8:	4618      	mov	r0, r3
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bc80      	pop	{r7}
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	20000f40 	.word	0x20000f40
 8004408:	20000f5c 	.word	0x20000f5c

0800440c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004418:	2300      	movs	r3, #0
 800441a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d056      	beq.n	80044d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004422:	4b2e      	ldr	r3, [pc, #184]	; (80044dc <xTaskPriorityDisinherit+0xd0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	429a      	cmp	r2, r3
 800442a:	d00a      	beq.n	8004442 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800442c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004430:	f383 8811 	msr	BASEPRI, r3
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	60fb      	str	r3, [r7, #12]
}
 800443e:	bf00      	nop
 8004440:	e7fe      	b.n	8004440 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10a      	bne.n	8004460 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	60bb      	str	r3, [r7, #8]
}
 800445c:	bf00      	nop
 800445e:	e7fe      	b.n	800445e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004464:	1e5a      	subs	r2, r3, #1
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004472:	429a      	cmp	r2, r3
 8004474:	d02c      	beq.n	80044d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800447a:	2b00      	cmp	r3, #0
 800447c:	d128      	bne.n	80044d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	3304      	adds	r3, #4
 8004482:	4618      	mov	r0, r3
 8004484:	f7fe fc12 	bl	8002cac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004494:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a0:	4b0f      	ldr	r3, [pc, #60]	; (80044e0 <xTaskPriorityDisinherit+0xd4>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d903      	bls.n	80044b0 <xTaskPriorityDisinherit+0xa4>
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	4a0c      	ldr	r2, [pc, #48]	; (80044e0 <xTaskPriorityDisinherit+0xd4>)
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b4:	4613      	mov	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4a09      	ldr	r2, [pc, #36]	; (80044e4 <xTaskPriorityDisinherit+0xd8>)
 80044be:	441a      	add	r2, r3
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	3304      	adds	r3, #4
 80044c4:	4619      	mov	r1, r3
 80044c6:	4610      	mov	r0, r2
 80044c8:	f7fe fb95 	bl	8002bf6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80044cc:	2301      	movs	r3, #1
 80044ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80044d0:	697b      	ldr	r3, [r7, #20]
	}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20000a60 	.word	0x20000a60
 80044e0:	20000f3c 	.word	0x20000f3c
 80044e4:	20000a64 	.word	0x20000a64

080044e8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80044f6:	f000 fcb1 	bl	8004e5c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80044fa:	4b29      	ldr	r3, [pc, #164]	; (80045a0 <xTaskNotifyWait+0xb8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d01c      	beq.n	8004542 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8004508:	4b25      	ldr	r3, [pc, #148]	; (80045a0 <xTaskNotifyWait+0xb8>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	43d2      	mvns	r2, r2
 8004514:	400a      	ands	r2, r1
 8004516:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800451a:	4b21      	ldr	r3, [pc, #132]	; (80045a0 <xTaskNotifyWait+0xb8>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

				if( xTicksToWait > ( TickType_t ) 0 )
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00b      	beq.n	8004542 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800452a:	2101      	movs	r1, #1
 800452c:	6838      	ldr	r0, [r7, #0]
 800452e:	f000 f83b 	bl	80045a8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004532:	4b1c      	ldr	r3, [pc, #112]	; (80045a4 <xTaskNotifyWait+0xbc>)
 8004534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004542:	f000 fcbb 	bl	8004ebc <vPortExitCritical>

		taskENTER_CRITICAL();
 8004546:	f000 fc89 	bl	8004e5c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d005      	beq.n	800455c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004550:	4b13      	ldr	r3, [pc, #76]	; (80045a0 <xTaskNotifyWait+0xb8>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800455c:	4b10      	ldr	r3, [pc, #64]	; (80045a0 <xTaskNotifyWait+0xb8>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d002      	beq.n	8004570 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800456a:	2300      	movs	r3, #0
 800456c:	617b      	str	r3, [r7, #20]
 800456e:	e00a      	b.n	8004586 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004570:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <xTaskNotifyWait+0xb8>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	43d2      	mvns	r2, r2
 800457c:	400a      	ands	r2, r1
 800457e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
				xReturn = pdTRUE;
 8004582:	2301      	movs	r3, #1
 8004584:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004586:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <xTaskNotifyWait+0xb8>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		}
		taskEXIT_CRITICAL();
 8004590:	f000 fc94 	bl	8004ebc <vPortExitCritical>

		return xReturn;
 8004594:	697b      	ldr	r3, [r7, #20]
	}
 8004596:	4618      	mov	r0, r3
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	20000a60 	.word	0x20000a60
 80045a4:	e000ed04 	.word	0xe000ed04

080045a8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045b2:	4b21      	ldr	r3, [pc, #132]	; (8004638 <prvAddCurrentTaskToDelayedList+0x90>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045b8:	4b20      	ldr	r3, [pc, #128]	; (800463c <prvAddCurrentTaskToDelayedList+0x94>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3304      	adds	r3, #4
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fe fb74 	bl	8002cac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ca:	d10a      	bne.n	80045e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d007      	beq.n	80045e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045d2:	4b1a      	ldr	r3, [pc, #104]	; (800463c <prvAddCurrentTaskToDelayedList+0x94>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3304      	adds	r3, #4
 80045d8:	4619      	mov	r1, r3
 80045da:	4819      	ldr	r0, [pc, #100]	; (8004640 <prvAddCurrentTaskToDelayedList+0x98>)
 80045dc:	f7fe fb0b 	bl	8002bf6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045e0:	e026      	b.n	8004630 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4413      	add	r3, r2
 80045e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045ea:	4b14      	ldr	r3, [pc, #80]	; (800463c <prvAddCurrentTaskToDelayedList+0x94>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d209      	bcs.n	800460e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045fa:	4b12      	ldr	r3, [pc, #72]	; (8004644 <prvAddCurrentTaskToDelayedList+0x9c>)
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	4b0f      	ldr	r3, [pc, #60]	; (800463c <prvAddCurrentTaskToDelayedList+0x94>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3304      	adds	r3, #4
 8004604:	4619      	mov	r1, r3
 8004606:	4610      	mov	r0, r2
 8004608:	f7fe fb18 	bl	8002c3c <vListInsert>
}
 800460c:	e010      	b.n	8004630 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800460e:	4b0e      	ldr	r3, [pc, #56]	; (8004648 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	4b0a      	ldr	r3, [pc, #40]	; (800463c <prvAddCurrentTaskToDelayedList+0x94>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3304      	adds	r3, #4
 8004618:	4619      	mov	r1, r3
 800461a:	4610      	mov	r0, r2
 800461c:	f7fe fb0e 	bl	8002c3c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004620:	4b0a      	ldr	r3, [pc, #40]	; (800464c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	429a      	cmp	r2, r3
 8004628:	d202      	bcs.n	8004630 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800462a:	4a08      	ldr	r2, [pc, #32]	; (800464c <prvAddCurrentTaskToDelayedList+0xa4>)
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	6013      	str	r3, [r2, #0]
}
 8004630:	bf00      	nop
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	20000f38 	.word	0x20000f38
 800463c:	20000a60 	.word	0x20000a60
 8004640:	20000f20 	.word	0x20000f20
 8004644:	20000ef0 	.word	0x20000ef0
 8004648:	20000eec 	.word	0x20000eec
 800464c:	20000f54 	.word	0x20000f54

08004650 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08a      	sub	sp, #40	; 0x28
 8004654:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800465a:	f000 facb 	bl	8004bf4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800465e:	4b1c      	ldr	r3, [pc, #112]	; (80046d0 <xTimerCreateTimerTask+0x80>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d021      	beq.n	80046aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004666:	2300      	movs	r3, #0
 8004668:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800466a:	2300      	movs	r3, #0
 800466c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800466e:	1d3a      	adds	r2, r7, #4
 8004670:	f107 0108 	add.w	r1, r7, #8
 8004674:	f107 030c 	add.w	r3, r7, #12
 8004678:	4618      	mov	r0, r3
 800467a:	f7fe fa77 	bl	8002b6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	9202      	str	r2, [sp, #8]
 8004686:	9301      	str	r3, [sp, #4]
 8004688:	2302      	movs	r3, #2
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	2300      	movs	r3, #0
 800468e:	460a      	mov	r2, r1
 8004690:	4910      	ldr	r1, [pc, #64]	; (80046d4 <xTimerCreateTimerTask+0x84>)
 8004692:	4811      	ldr	r0, [pc, #68]	; (80046d8 <xTimerCreateTimerTask+0x88>)
 8004694:	f7ff f856 	bl	8003744 <xTaskCreateStatic>
 8004698:	4603      	mov	r3, r0
 800469a:	4a10      	ldr	r2, [pc, #64]	; (80046dc <xTimerCreateTimerTask+0x8c>)
 800469c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800469e:	4b0f      	ldr	r3, [pc, #60]	; (80046dc <xTimerCreateTimerTask+0x8c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80046a6:	2301      	movs	r3, #1
 80046a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10a      	bne.n	80046c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	613b      	str	r3, [r7, #16]
}
 80046c2:	bf00      	nop
 80046c4:	e7fe      	b.n	80046c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80046c6:	697b      	ldr	r3, [r7, #20]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	20000f90 	.word	0x20000f90
 80046d4:	08005690 	.word	0x08005690
 80046d8:	080047fd 	.word	0x080047fd
 80046dc:	20000f94 	.word	0x20000f94

080046e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	; 0x28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80046ee:	2300      	movs	r3, #0
 80046f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10a      	bne.n	800470e <xTimerGenericCommand+0x2e>
	__asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	623b      	str	r3, [r7, #32]
}
 800470a:	bf00      	nop
 800470c:	e7fe      	b.n	800470c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800470e:	4b1a      	ldr	r3, [pc, #104]	; (8004778 <xTimerGenericCommand+0x98>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d02a      	beq.n	800476c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2b05      	cmp	r3, #5
 8004726:	dc18      	bgt.n	800475a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004728:	f7ff fe52 	bl	80043d0 <xTaskGetSchedulerState>
 800472c:	4603      	mov	r3, r0
 800472e:	2b02      	cmp	r3, #2
 8004730:	d109      	bne.n	8004746 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004732:	4b11      	ldr	r3, [pc, #68]	; (8004778 <xTimerGenericCommand+0x98>)
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	f107 0110 	add.w	r1, r7, #16
 800473a:	2300      	movs	r3, #0
 800473c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800473e:	f7fe fc1f 	bl	8002f80 <xQueueGenericSend>
 8004742:	6278      	str	r0, [r7, #36]	; 0x24
 8004744:	e012      	b.n	800476c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004746:	4b0c      	ldr	r3, [pc, #48]	; (8004778 <xTimerGenericCommand+0x98>)
 8004748:	6818      	ldr	r0, [r3, #0]
 800474a:	f107 0110 	add.w	r1, r7, #16
 800474e:	2300      	movs	r3, #0
 8004750:	2200      	movs	r2, #0
 8004752:	f7fe fc15 	bl	8002f80 <xQueueGenericSend>
 8004756:	6278      	str	r0, [r7, #36]	; 0x24
 8004758:	e008      	b.n	800476c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800475a:	4b07      	ldr	r3, [pc, #28]	; (8004778 <xTimerGenericCommand+0x98>)
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	f107 0110 	add.w	r1, r7, #16
 8004762:	2300      	movs	r3, #0
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	f7fe fd09 	bl	800317c <xQueueGenericSendFromISR>
 800476a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800476e:	4618      	mov	r0, r3
 8004770:	3728      	adds	r7, #40	; 0x28
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20000f90 	.word	0x20000f90

0800477c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af02      	add	r7, sp, #8
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004786:	4b1c      	ldr	r3, [pc, #112]	; (80047f8 <prvProcessExpiredTimer+0x7c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	3304      	adds	r3, #4
 8004794:	4618      	mov	r0, r3
 8004796:	f7fe fa89 	bl	8002cac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d122      	bne.n	80047e8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	18d1      	adds	r1, r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	6978      	ldr	r0, [r7, #20]
 80047b0:	f000 f8c8 	bl	8004944 <prvInsertTimerInActiveList>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d016      	beq.n	80047e8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047ba:	2300      	movs	r3, #0
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	2300      	movs	r3, #0
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	2100      	movs	r1, #0
 80047c4:	6978      	ldr	r0, [r7, #20]
 80047c6:	f7ff ff8b 	bl	80046e0 <xTimerGenericCommand>
 80047ca:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10a      	bne.n	80047e8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80047d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d6:	f383 8811 	msr	BASEPRI, r3
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	60fb      	str	r3, [r7, #12]
}
 80047e4:	bf00      	nop
 80047e6:	e7fe      	b.n	80047e6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	6978      	ldr	r0, [r7, #20]
 80047ee:	4798      	blx	r3
}
 80047f0:	bf00      	nop
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	20000f88 	.word	0x20000f88

080047fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004804:	f107 0308 	add.w	r3, r7, #8
 8004808:	4618      	mov	r0, r3
 800480a:	f000 f857 	bl	80048bc <prvGetNextExpireTime>
 800480e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	4619      	mov	r1, r3
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 f803 	bl	8004820 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800481a:	f000 f8d5 	bl	80049c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800481e:	e7f1      	b.n	8004804 <prvTimerTask+0x8>

08004820 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800482a:	f7ff f9df 	bl	8003bec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800482e:	f107 0308 	add.w	r3, r7, #8
 8004832:	4618      	mov	r0, r3
 8004834:	f000 f866 	bl	8004904 <prvSampleTimeNow>
 8004838:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d130      	bne.n	80048a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10a      	bne.n	800485c <prvProcessTimerOrBlockTask+0x3c>
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	429a      	cmp	r2, r3
 800484c:	d806      	bhi.n	800485c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800484e:	f7ff f9db 	bl	8003c08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004852:	68f9      	ldr	r1, [r7, #12]
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff ff91 	bl	800477c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800485a:	e024      	b.n	80048a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d008      	beq.n	8004874 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004862:	4b13      	ldr	r3, [pc, #76]	; (80048b0 <prvProcessTimerOrBlockTask+0x90>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	bf0c      	ite	eq
 800486c:	2301      	moveq	r3, #1
 800486e:	2300      	movne	r3, #0
 8004870:	b2db      	uxtb	r3, r3
 8004872:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004874:	4b0f      	ldr	r3, [pc, #60]	; (80048b4 <prvProcessTimerOrBlockTask+0x94>)
 8004876:	6818      	ldr	r0, [r3, #0]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	4619      	mov	r1, r3
 8004882:	f7fe ff2b 	bl	80036dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004886:	f7ff f9bf 	bl	8003c08 <xTaskResumeAll>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10a      	bne.n	80048a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004890:	4b09      	ldr	r3, [pc, #36]	; (80048b8 <prvProcessTimerOrBlockTask+0x98>)
 8004892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	f3bf 8f6f 	isb	sy
}
 80048a0:	e001      	b.n	80048a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80048a2:	f7ff f9b1 	bl	8003c08 <xTaskResumeAll>
}
 80048a6:	bf00      	nop
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20000f8c 	.word	0x20000f8c
 80048b4:	20000f90 	.word	0x20000f90
 80048b8:	e000ed04 	.word	0xe000ed04

080048bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80048c4:	4b0e      	ldr	r3, [pc, #56]	; (8004900 <prvGetNextExpireTime+0x44>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	bf0c      	ite	eq
 80048ce:	2301      	moveq	r3, #1
 80048d0:	2300      	movne	r3, #0
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	461a      	mov	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d105      	bne.n	80048ee <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048e2:	4b07      	ldr	r3, [pc, #28]	; (8004900 <prvGetNextExpireTime+0x44>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	e001      	b.n	80048f2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80048f2:	68fb      	ldr	r3, [r7, #12]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bc80      	pop	{r7}
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	20000f88 	.word	0x20000f88

08004904 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800490c:	f7ff fa1a 	bl	8003d44 <xTaskGetTickCount>
 8004910:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004912:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <prvSampleTimeNow+0x3c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	429a      	cmp	r2, r3
 800491a:	d205      	bcs.n	8004928 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800491c:	f000 f908 	bl	8004b30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	e002      	b.n	800492e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800492e:	4a04      	ldr	r2, [pc, #16]	; (8004940 <prvSampleTimeNow+0x3c>)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004934:	68fb      	ldr	r3, [r7, #12]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	20000f98 	.word	0x20000f98

08004944 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004952:	2300      	movs	r3, #0
 8004954:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	429a      	cmp	r2, r3
 8004968:	d812      	bhi.n	8004990 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	1ad2      	subs	r2, r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	429a      	cmp	r2, r3
 8004976:	d302      	bcc.n	800497e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004978:	2301      	movs	r3, #1
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	e01b      	b.n	80049b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800497e:	4b10      	ldr	r3, [pc, #64]	; (80049c0 <prvInsertTimerInActiveList+0x7c>)
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	3304      	adds	r3, #4
 8004986:	4619      	mov	r1, r3
 8004988:	4610      	mov	r0, r2
 800498a:	f7fe f957 	bl	8002c3c <vListInsert>
 800498e:	e012      	b.n	80049b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	429a      	cmp	r2, r3
 8004996:	d206      	bcs.n	80049a6 <prvInsertTimerInActiveList+0x62>
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	429a      	cmp	r2, r3
 800499e:	d302      	bcc.n	80049a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80049a0:	2301      	movs	r3, #1
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	e007      	b.n	80049b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049a6:	4b07      	ldr	r3, [pc, #28]	; (80049c4 <prvInsertTimerInActiveList+0x80>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	3304      	adds	r3, #4
 80049ae:	4619      	mov	r1, r3
 80049b0:	4610      	mov	r0, r2
 80049b2:	f7fe f943 	bl	8002c3c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80049b6:	697b      	ldr	r3, [r7, #20]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3718      	adds	r7, #24
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	20000f8c 	.word	0x20000f8c
 80049c4:	20000f88 	.word	0x20000f88

080049c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b08e      	sub	sp, #56	; 0x38
 80049cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049ce:	e09d      	b.n	8004b0c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	da18      	bge.n	8004a08 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80049d6:	1d3b      	adds	r3, r7, #4
 80049d8:	3304      	adds	r3, #4
 80049da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80049dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10a      	bne.n	80049f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80049e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e6:	f383 8811 	msr	BASEPRI, r3
 80049ea:	f3bf 8f6f 	isb	sy
 80049ee:	f3bf 8f4f 	dsb	sy
 80049f2:	61fb      	str	r3, [r7, #28]
}
 80049f4:	bf00      	nop
 80049f6:	e7fe      	b.n	80049f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80049f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049fe:	6850      	ldr	r0, [r2, #4]
 8004a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a02:	6892      	ldr	r2, [r2, #8]
 8004a04:	4611      	mov	r1, r2
 8004a06:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	db7e      	blt.n	8004b0c <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d004      	beq.n	8004a24 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fe f944 	bl	8002cac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a24:	463b      	mov	r3, r7
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7ff ff6c 	bl	8004904 <prvSampleTimeNow>
 8004a2c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b09      	cmp	r3, #9
 8004a32:	d86a      	bhi.n	8004b0a <prvProcessReceivedCommands+0x142>
 8004a34:	a201      	add	r2, pc, #4	; (adr r2, 8004a3c <prvProcessReceivedCommands+0x74>)
 8004a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3a:	bf00      	nop
 8004a3c:	08004a65 	.word	0x08004a65
 8004a40:	08004a65 	.word	0x08004a65
 8004a44:	08004a65 	.word	0x08004a65
 8004a48:	08004b0d 	.word	0x08004b0d
 8004a4c:	08004ac1 	.word	0x08004ac1
 8004a50:	08004af9 	.word	0x08004af9
 8004a54:	08004a65 	.word	0x08004a65
 8004a58:	08004a65 	.word	0x08004a65
 8004a5c:	08004b0d 	.word	0x08004b0d
 8004a60:	08004ac1 	.word	0x08004ac1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	18d1      	adds	r1, r2, r3
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a72:	f7ff ff67 	bl	8004944 <prvInsertTimerInActiveList>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d047      	beq.n	8004b0c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a82:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d13f      	bne.n	8004b0c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	441a      	add	r2, r3
 8004a94:	2300      	movs	r3, #0
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	2300      	movs	r3, #0
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a9e:	f7ff fe1f 	bl	80046e0 <xTimerGenericCommand>
 8004aa2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d130      	bne.n	8004b0c <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aae:	f383 8811 	msr	BASEPRI, r3
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	f3bf 8f4f 	dsb	sy
 8004aba:	61bb      	str	r3, [r7, #24]
}
 8004abc:	bf00      	nop
 8004abe:	e7fe      	b.n	8004abe <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10a      	bne.n	8004ae4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	617b      	str	r3, [r7, #20]
}
 8004ae0:	bf00      	nop
 8004ae2:	e7fe      	b.n	8004ae2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae6:	699a      	ldr	r2, [r3, #24]
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	18d1      	adds	r1, r2, r3
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004af0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004af2:	f7ff ff27 	bl	8004944 <prvInsertTimerInActiveList>
					break;
 8004af6:	e009      	b.n	8004b0c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d104      	bne.n	8004b0c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004b02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b04:	f000 fb6e 	bl	80051e4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004b08:	e000      	b.n	8004b0c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8004b0a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b0c:	4b07      	ldr	r3, [pc, #28]	; (8004b2c <prvProcessReceivedCommands+0x164>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	1d39      	adds	r1, r7, #4
 8004b12:	2200      	movs	r2, #0
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fe fbc9 	bl	80032ac <xQueueReceive>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f47f af57 	bne.w	80049d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004b22:	bf00      	nop
 8004b24:	bf00      	nop
 8004b26:	3730      	adds	r7, #48	; 0x30
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	20000f90 	.word	0x20000f90

08004b30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b36:	e045      	b.n	8004bc4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b38:	4b2c      	ldr	r3, [pc, #176]	; (8004bec <prvSwitchTimerLists+0xbc>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b42:	4b2a      	ldr	r3, [pc, #168]	; (8004bec <prvSwitchTimerLists+0xbc>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	3304      	adds	r3, #4
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7fe f8ab 	bl	8002cac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d12e      	bne.n	8004bc4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d90e      	bls.n	8004b96 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b84:	4b19      	ldr	r3, [pc, #100]	; (8004bec <prvSwitchTimerLists+0xbc>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	4610      	mov	r0, r2
 8004b90:	f7fe f854 	bl	8002c3c <vListInsert>
 8004b94:	e016      	b.n	8004bc4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b96:	2300      	movs	r3, #0
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f7ff fd9d 	bl	80046e0 <xTimerGenericCommand>
 8004ba6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10a      	bne.n	8004bc4 <prvSwitchTimerLists+0x94>
	__asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	603b      	str	r3, [r7, #0]
}
 8004bc0:	bf00      	nop
 8004bc2:	e7fe      	b.n	8004bc2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bc4:	4b09      	ldr	r3, [pc, #36]	; (8004bec <prvSwitchTimerLists+0xbc>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1b4      	bne.n	8004b38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004bce:	4b07      	ldr	r3, [pc, #28]	; (8004bec <prvSwitchTimerLists+0xbc>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004bd4:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <prvSwitchTimerLists+0xc0>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a04      	ldr	r2, [pc, #16]	; (8004bec <prvSwitchTimerLists+0xbc>)
 8004bda:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004bdc:	4a04      	ldr	r2, [pc, #16]	; (8004bf0 <prvSwitchTimerLists+0xc0>)
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	6013      	str	r3, [r2, #0]
}
 8004be2:	bf00      	nop
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20000f88 	.word	0x20000f88
 8004bf0:	20000f8c 	.word	0x20000f8c

08004bf4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004bfa:	f000 f92f 	bl	8004e5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004bfe:	4b15      	ldr	r3, [pc, #84]	; (8004c54 <prvCheckForValidListAndQueue+0x60>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d120      	bne.n	8004c48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004c06:	4814      	ldr	r0, [pc, #80]	; (8004c58 <prvCheckForValidListAndQueue+0x64>)
 8004c08:	f7fd ffca 	bl	8002ba0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004c0c:	4813      	ldr	r0, [pc, #76]	; (8004c5c <prvCheckForValidListAndQueue+0x68>)
 8004c0e:	f7fd ffc7 	bl	8002ba0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004c12:	4b13      	ldr	r3, [pc, #76]	; (8004c60 <prvCheckForValidListAndQueue+0x6c>)
 8004c14:	4a10      	ldr	r2, [pc, #64]	; (8004c58 <prvCheckForValidListAndQueue+0x64>)
 8004c16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c18:	4b12      	ldr	r3, [pc, #72]	; (8004c64 <prvCheckForValidListAndQueue+0x70>)
 8004c1a:	4a10      	ldr	r2, [pc, #64]	; (8004c5c <prvCheckForValidListAndQueue+0x68>)
 8004c1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004c1e:	2300      	movs	r3, #0
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	4b11      	ldr	r3, [pc, #68]	; (8004c68 <prvCheckForValidListAndQueue+0x74>)
 8004c24:	4a11      	ldr	r2, [pc, #68]	; (8004c6c <prvCheckForValidListAndQueue+0x78>)
 8004c26:	2110      	movs	r1, #16
 8004c28:	200a      	movs	r0, #10
 8004c2a:	f7fe f8d1 	bl	8002dd0 <xQueueGenericCreateStatic>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	4a08      	ldr	r2, [pc, #32]	; (8004c54 <prvCheckForValidListAndQueue+0x60>)
 8004c32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004c34:	4b07      	ldr	r3, [pc, #28]	; (8004c54 <prvCheckForValidListAndQueue+0x60>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d005      	beq.n	8004c48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c3c:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <prvCheckForValidListAndQueue+0x60>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	490b      	ldr	r1, [pc, #44]	; (8004c70 <prvCheckForValidListAndQueue+0x7c>)
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fe fd22 	bl	800368c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c48:	f000 f938 	bl	8004ebc <vPortExitCritical>
}
 8004c4c:	bf00      	nop
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	20000f90 	.word	0x20000f90
 8004c58:	20000f60 	.word	0x20000f60
 8004c5c:	20000f74 	.word	0x20000f74
 8004c60:	20000f88 	.word	0x20000f88
 8004c64:	20000f8c 	.word	0x20000f8c
 8004c68:	2000103c 	.word	0x2000103c
 8004c6c:	20000f9c 	.word	0x20000f9c
 8004c70:	08005698 	.word	0x08005698

08004c74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	3b04      	subs	r3, #4
 8004c84:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	3b04      	subs	r3, #4
 8004c92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	f023 0201 	bic.w	r2, r3, #1
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	3b04      	subs	r3, #4
 8004ca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ca4:	4a08      	ldr	r2, [pc, #32]	; (8004cc8 <pxPortInitialiseStack+0x54>)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	3b14      	subs	r3, #20
 8004cae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	3b20      	subs	r3, #32
 8004cba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bc80      	pop	{r7}
 8004cc6:	4770      	bx	lr
 8004cc8:	08004ccd 	.word	0x08004ccd

08004ccc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004cd6:	4b12      	ldr	r3, [pc, #72]	; (8004d20 <prvTaskExitError+0x54>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cde:	d00a      	beq.n	8004cf6 <prvTaskExitError+0x2a>
	__asm volatile
 8004ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	60fb      	str	r3, [r7, #12]
}
 8004cf2:	bf00      	nop
 8004cf4:	e7fe      	b.n	8004cf4 <prvTaskExitError+0x28>
	__asm volatile
 8004cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfa:	f383 8811 	msr	BASEPRI, r3
 8004cfe:	f3bf 8f6f 	isb	sy
 8004d02:	f3bf 8f4f 	dsb	sy
 8004d06:	60bb      	str	r3, [r7, #8]
}
 8004d08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d0a:	bf00      	nop
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0fc      	beq.n	8004d0c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d12:	bf00      	nop
 8004d14:	bf00      	nop
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bc80      	pop	{r7}
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	2000000c 	.word	0x2000000c
	...

08004d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d30:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <pxCurrentTCBConst2>)
 8004d32:	6819      	ldr	r1, [r3, #0]
 8004d34:	6808      	ldr	r0, [r1, #0]
 8004d36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004d3a:	f380 8809 	msr	PSP, r0
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f04f 0000 	mov.w	r0, #0
 8004d46:	f380 8811 	msr	BASEPRI, r0
 8004d4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004d4e:	4770      	bx	lr

08004d50 <pxCurrentTCBConst2>:
 8004d50:	20000a60 	.word	0x20000a60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d54:	bf00      	nop
 8004d56:	bf00      	nop

08004d58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004d58:	4806      	ldr	r0, [pc, #24]	; (8004d74 <prvPortStartFirstTask+0x1c>)
 8004d5a:	6800      	ldr	r0, [r0, #0]
 8004d5c:	6800      	ldr	r0, [r0, #0]
 8004d5e:	f380 8808 	msr	MSP, r0
 8004d62:	b662      	cpsie	i
 8004d64:	b661      	cpsie	f
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	f3bf 8f6f 	isb	sy
 8004d6e:	df00      	svc	0
 8004d70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d72:	bf00      	nop
 8004d74:	e000ed08 	.word	0xe000ed08

08004d78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d7e:	4b32      	ldr	r3, [pc, #200]	; (8004e48 <xPortStartScheduler+0xd0>)
 8004d80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	22ff      	movs	r2, #255	; 0xff
 8004d8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d98:	78fb      	ldrb	r3, [r7, #3]
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	4b2a      	ldr	r3, [pc, #168]	; (8004e4c <xPortStartScheduler+0xd4>)
 8004da4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004da6:	4b2a      	ldr	r3, [pc, #168]	; (8004e50 <xPortStartScheduler+0xd8>)
 8004da8:	2207      	movs	r2, #7
 8004daa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004dac:	e009      	b.n	8004dc2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004dae:	4b28      	ldr	r3, [pc, #160]	; (8004e50 <xPortStartScheduler+0xd8>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	4a26      	ldr	r2, [pc, #152]	; (8004e50 <xPortStartScheduler+0xd8>)
 8004db6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004db8:	78fb      	ldrb	r3, [r7, #3]
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004dc2:	78fb      	ldrb	r3, [r7, #3]
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dca:	2b80      	cmp	r3, #128	; 0x80
 8004dcc:	d0ef      	beq.n	8004dae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004dce:	4b20      	ldr	r3, [pc, #128]	; (8004e50 <xPortStartScheduler+0xd8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f1c3 0307 	rsb	r3, r3, #7
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	d00a      	beq.n	8004df0 <xPortStartScheduler+0x78>
	__asm volatile
 8004dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dde:	f383 8811 	msr	BASEPRI, r3
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	60bb      	str	r3, [r7, #8]
}
 8004dec:	bf00      	nop
 8004dee:	e7fe      	b.n	8004dee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004df0:	4b17      	ldr	r3, [pc, #92]	; (8004e50 <xPortStartScheduler+0xd8>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	021b      	lsls	r3, r3, #8
 8004df6:	4a16      	ldr	r2, [pc, #88]	; (8004e50 <xPortStartScheduler+0xd8>)
 8004df8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004dfa:	4b15      	ldr	r3, [pc, #84]	; (8004e50 <xPortStartScheduler+0xd8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e02:	4a13      	ldr	r2, [pc, #76]	; (8004e50 <xPortStartScheduler+0xd8>)
 8004e04:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e0e:	4b11      	ldr	r3, [pc, #68]	; (8004e54 <xPortStartScheduler+0xdc>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a10      	ldr	r2, [pc, #64]	; (8004e54 <xPortStartScheduler+0xdc>)
 8004e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e1a:	4b0e      	ldr	r3, [pc, #56]	; (8004e54 <xPortStartScheduler+0xdc>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a0d      	ldr	r2, [pc, #52]	; (8004e54 <xPortStartScheduler+0xdc>)
 8004e20:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e24:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e26:	f000 f8b9 	bl	8004f9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e2a:	4b0b      	ldr	r3, [pc, #44]	; (8004e58 <xPortStartScheduler+0xe0>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e30:	f7ff ff92 	bl	8004d58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e34:	f7ff f852 	bl	8003edc <vTaskSwitchContext>
	prvTaskExitError();
 8004e38:	f7ff ff48 	bl	8004ccc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	e000e400 	.word	0xe000e400
 8004e4c:	2000108c 	.word	0x2000108c
 8004e50:	20001090 	.word	0x20001090
 8004e54:	e000ed20 	.word	0xe000ed20
 8004e58:	2000000c 	.word	0x2000000c

08004e5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
	__asm volatile
 8004e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	607b      	str	r3, [r7, #4]
}
 8004e74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e76:	4b0f      	ldr	r3, [pc, #60]	; (8004eb4 <vPortEnterCritical+0x58>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	4a0d      	ldr	r2, [pc, #52]	; (8004eb4 <vPortEnterCritical+0x58>)
 8004e7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e80:	4b0c      	ldr	r3, [pc, #48]	; (8004eb4 <vPortEnterCritical+0x58>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d10f      	bne.n	8004ea8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e88:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <vPortEnterCritical+0x5c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00a      	beq.n	8004ea8 <vPortEnterCritical+0x4c>
	__asm volatile
 8004e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	603b      	str	r3, [r7, #0]
}
 8004ea4:	bf00      	nop
 8004ea6:	e7fe      	b.n	8004ea6 <vPortEnterCritical+0x4a>
	}
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bc80      	pop	{r7}
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	2000000c 	.word	0x2000000c
 8004eb8:	e000ed04 	.word	0xe000ed04

08004ebc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ec2:	4b11      	ldr	r3, [pc, #68]	; (8004f08 <vPortExitCritical+0x4c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10a      	bne.n	8004ee0 <vPortExitCritical+0x24>
	__asm volatile
 8004eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ece:	f383 8811 	msr	BASEPRI, r3
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	607b      	str	r3, [r7, #4]
}
 8004edc:	bf00      	nop
 8004ede:	e7fe      	b.n	8004ede <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004ee0:	4b09      	ldr	r3, [pc, #36]	; (8004f08 <vPortExitCritical+0x4c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	4a08      	ldr	r2, [pc, #32]	; (8004f08 <vPortExitCritical+0x4c>)
 8004ee8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004eea:	4b07      	ldr	r3, [pc, #28]	; (8004f08 <vPortExitCritical+0x4c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d105      	bne.n	8004efe <vPortExitCritical+0x42>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	f383 8811 	msr	BASEPRI, r3
}
 8004efc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr
 8004f08:	2000000c 	.word	0x2000000c
 8004f0c:	00000000 	.word	0x00000000

08004f10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f10:	f3ef 8009 	mrs	r0, PSP
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	4b0d      	ldr	r3, [pc, #52]	; (8004f50 <pxCurrentTCBConst>)
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f20:	6010      	str	r0, [r2, #0]
 8004f22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004f26:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f2a:	f380 8811 	msr	BASEPRI, r0
 8004f2e:	f7fe ffd5 	bl	8003edc <vTaskSwitchContext>
 8004f32:	f04f 0000 	mov.w	r0, #0
 8004f36:	f380 8811 	msr	BASEPRI, r0
 8004f3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004f3e:	6819      	ldr	r1, [r3, #0]
 8004f40:	6808      	ldr	r0, [r1, #0]
 8004f42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f46:	f380 8809 	msr	PSP, r0
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	4770      	bx	lr

08004f50 <pxCurrentTCBConst>:
 8004f50:	20000a60 	.word	0x20000a60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f54:	bf00      	nop
 8004f56:	bf00      	nop

08004f58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f62:	f383 8811 	msr	BASEPRI, r3
 8004f66:	f3bf 8f6f 	isb	sy
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	607b      	str	r3, [r7, #4]
}
 8004f70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f72:	f7fe fef5 	bl	8003d60 <xTaskIncrementTick>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f7c:	4b06      	ldr	r3, [pc, #24]	; (8004f98 <xPortSysTickHandler+0x40>)
 8004f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	2300      	movs	r3, #0
 8004f86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	f383 8811 	msr	BASEPRI, r3
}
 8004f8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f90:	bf00      	nop
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	e000ed04 	.word	0xe000ed04

08004f9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004fa0:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <vPortSetupTimerInterrupt+0x30>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004fa6:	4b0a      	ldr	r3, [pc, #40]	; (8004fd0 <vPortSetupTimerInterrupt+0x34>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004fac:	4b09      	ldr	r3, [pc, #36]	; (8004fd4 <vPortSetupTimerInterrupt+0x38>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a09      	ldr	r2, [pc, #36]	; (8004fd8 <vPortSetupTimerInterrupt+0x3c>)
 8004fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb6:	099b      	lsrs	r3, r3, #6
 8004fb8:	4a08      	ldr	r2, [pc, #32]	; (8004fdc <vPortSetupTimerInterrupt+0x40>)
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004fbe:	4b03      	ldr	r3, [pc, #12]	; (8004fcc <vPortSetupTimerInterrupt+0x30>)
 8004fc0:	2207      	movs	r2, #7
 8004fc2:	601a      	str	r2, [r3, #0]
}
 8004fc4:	bf00      	nop
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr
 8004fcc:	e000e010 	.word	0xe000e010
 8004fd0:	e000e018 	.word	0xe000e018
 8004fd4:	20000000 	.word	0x20000000
 8004fd8:	10624dd3 	.word	0x10624dd3
 8004fdc:	e000e014 	.word	0xe000e014

08004fe0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004fe6:	f3ef 8305 	mrs	r3, IPSR
 8004fea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2b0f      	cmp	r3, #15
 8004ff0:	d914      	bls.n	800501c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004ff2:	4a16      	ldr	r2, [pc, #88]	; (800504c <vPortValidateInterruptPriority+0x6c>)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ffc:	4b14      	ldr	r3, [pc, #80]	; (8005050 <vPortValidateInterruptPriority+0x70>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	7afa      	ldrb	r2, [r7, #11]
 8005002:	429a      	cmp	r2, r3
 8005004:	d20a      	bcs.n	800501c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	607b      	str	r3, [r7, #4]
}
 8005018:	bf00      	nop
 800501a:	e7fe      	b.n	800501a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800501c:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <vPortValidateInterruptPriority+0x74>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005024:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <vPortValidateInterruptPriority+0x78>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	429a      	cmp	r2, r3
 800502a:	d90a      	bls.n	8005042 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005030:	f383 8811 	msr	BASEPRI, r3
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	603b      	str	r3, [r7, #0]
}
 800503e:	bf00      	nop
 8005040:	e7fe      	b.n	8005040 <vPortValidateInterruptPriority+0x60>
	}
 8005042:	bf00      	nop
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr
 800504c:	e000e3f0 	.word	0xe000e3f0
 8005050:	2000108c 	.word	0x2000108c
 8005054:	e000ed0c 	.word	0xe000ed0c
 8005058:	20001090 	.word	0x20001090

0800505c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08a      	sub	sp, #40	; 0x28
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005064:	2300      	movs	r3, #0
 8005066:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005068:	f7fe fdc0 	bl	8003bec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800506c:	4b58      	ldr	r3, [pc, #352]	; (80051d0 <pvPortMalloc+0x174>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005074:	f000 f910 	bl	8005298 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005078:	4b56      	ldr	r3, [pc, #344]	; (80051d4 <pvPortMalloc+0x178>)
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4013      	ands	r3, r2
 8005080:	2b00      	cmp	r3, #0
 8005082:	f040 808e 	bne.w	80051a2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d01d      	beq.n	80050c8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800508c:	2208      	movs	r2, #8
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4413      	add	r3, r2
 8005092:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	2b00      	cmp	r3, #0
 800509c:	d014      	beq.n	80050c8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f023 0307 	bic.w	r3, r3, #7
 80050a4:	3308      	adds	r3, #8
 80050a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f003 0307 	and.w	r3, r3, #7
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00a      	beq.n	80050c8 <pvPortMalloc+0x6c>
	__asm volatile
 80050b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	617b      	str	r3, [r7, #20]
}
 80050c4:	bf00      	nop
 80050c6:	e7fe      	b.n	80050c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d069      	beq.n	80051a2 <pvPortMalloc+0x146>
 80050ce:	4b42      	ldr	r3, [pc, #264]	; (80051d8 <pvPortMalloc+0x17c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d864      	bhi.n	80051a2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80050d8:	4b40      	ldr	r3, [pc, #256]	; (80051dc <pvPortMalloc+0x180>)
 80050da:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80050dc:	4b3f      	ldr	r3, [pc, #252]	; (80051dc <pvPortMalloc+0x180>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050e2:	e004      	b.n	80050ee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d903      	bls.n	8005100 <pvPortMalloc+0xa4>
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1f1      	bne.n	80050e4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005100:	4b33      	ldr	r3, [pc, #204]	; (80051d0 <pvPortMalloc+0x174>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005106:	429a      	cmp	r2, r3
 8005108:	d04b      	beq.n	80051a2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800510a:	6a3b      	ldr	r3, [r7, #32]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2208      	movs	r2, #8
 8005110:	4413      	add	r3, r2
 8005112:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	1ad2      	subs	r2, r2, r3
 8005124:	2308      	movs	r3, #8
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	429a      	cmp	r2, r3
 800512a:	d91f      	bls.n	800516c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800512c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4413      	add	r3, r2
 8005132:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <pvPortMalloc+0xf8>
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	613b      	str	r3, [r7, #16]
}
 8005150:	bf00      	nop
 8005152:	e7fe      	b.n	8005152 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	1ad2      	subs	r2, r2, r3
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005166:	69b8      	ldr	r0, [r7, #24]
 8005168:	f000 f8f8 	bl	800535c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800516c:	4b1a      	ldr	r3, [pc, #104]	; (80051d8 <pvPortMalloc+0x17c>)
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	4a18      	ldr	r2, [pc, #96]	; (80051d8 <pvPortMalloc+0x17c>)
 8005178:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800517a:	4b17      	ldr	r3, [pc, #92]	; (80051d8 <pvPortMalloc+0x17c>)
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	4b18      	ldr	r3, [pc, #96]	; (80051e0 <pvPortMalloc+0x184>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	429a      	cmp	r2, r3
 8005184:	d203      	bcs.n	800518e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005186:	4b14      	ldr	r3, [pc, #80]	; (80051d8 <pvPortMalloc+0x17c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a15      	ldr	r2, [pc, #84]	; (80051e0 <pvPortMalloc+0x184>)
 800518c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	4b10      	ldr	r3, [pc, #64]	; (80051d4 <pvPortMalloc+0x178>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	431a      	orrs	r2, r3
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	2200      	movs	r2, #0
 80051a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80051a2:	f7fe fd31 	bl	8003c08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <pvPortMalloc+0x16a>
	__asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	60fb      	str	r3, [r7, #12]
}
 80051c2:	bf00      	nop
 80051c4:	e7fe      	b.n	80051c4 <pvPortMalloc+0x168>
	return pvReturn;
 80051c6:	69fb      	ldr	r3, [r7, #28]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3728      	adds	r7, #40	; 0x28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	2000309c 	.word	0x2000309c
 80051d4:	200030a8 	.word	0x200030a8
 80051d8:	200030a0 	.word	0x200030a0
 80051dc:	20003094 	.word	0x20003094
 80051e0:	200030a4 	.word	0x200030a4

080051e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d048      	beq.n	8005288 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80051f6:	2308      	movs	r3, #8
 80051f8:	425b      	negs	r3, r3
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	4413      	add	r3, r2
 80051fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	4b21      	ldr	r3, [pc, #132]	; (8005290 <vPortFree+0xac>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4013      	ands	r3, r2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10a      	bne.n	8005228 <vPortFree+0x44>
	__asm volatile
 8005212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	60fb      	str	r3, [r7, #12]
}
 8005224:	bf00      	nop
 8005226:	e7fe      	b.n	8005226 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00a      	beq.n	8005246 <vPortFree+0x62>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	60bb      	str	r3, [r7, #8]
}
 8005242:	bf00      	nop
 8005244:	e7fe      	b.n	8005244 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	4b11      	ldr	r3, [pc, #68]	; (8005290 <vPortFree+0xac>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4013      	ands	r3, r2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d019      	beq.n	8005288 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d115      	bne.n	8005288 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	4b0b      	ldr	r3, [pc, #44]	; (8005290 <vPortFree+0xac>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	43db      	mvns	r3, r3
 8005266:	401a      	ands	r2, r3
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800526c:	f7fe fcbe 	bl	8003bec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	4b07      	ldr	r3, [pc, #28]	; (8005294 <vPortFree+0xb0>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4413      	add	r3, r2
 800527a:	4a06      	ldr	r2, [pc, #24]	; (8005294 <vPortFree+0xb0>)
 800527c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800527e:	6938      	ldr	r0, [r7, #16]
 8005280:	f000 f86c 	bl	800535c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005284:	f7fe fcc0 	bl	8003c08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005288:	bf00      	nop
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	200030a8 	.word	0x200030a8
 8005294:	200030a0 	.word	0x200030a0

08005298 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800529e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80052a4:	4b27      	ldr	r3, [pc, #156]	; (8005344 <prvHeapInit+0xac>)
 80052a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f003 0307 	and.w	r3, r3, #7
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00c      	beq.n	80052cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	3307      	adds	r3, #7
 80052b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 0307 	bic.w	r3, r3, #7
 80052be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	4a1f      	ldr	r2, [pc, #124]	; (8005344 <prvHeapInit+0xac>)
 80052c8:	4413      	add	r3, r2
 80052ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052d0:	4a1d      	ldr	r2, [pc, #116]	; (8005348 <prvHeapInit+0xb0>)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80052d6:	4b1c      	ldr	r3, [pc, #112]	; (8005348 <prvHeapInit+0xb0>)
 80052d8:	2200      	movs	r2, #0
 80052da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	4413      	add	r3, r2
 80052e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80052e4:	2208      	movs	r2, #8
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	1a9b      	subs	r3, r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f023 0307 	bic.w	r3, r3, #7
 80052f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4a15      	ldr	r2, [pc, #84]	; (800534c <prvHeapInit+0xb4>)
 80052f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80052fa:	4b14      	ldr	r3, [pc, #80]	; (800534c <prvHeapInit+0xb4>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2200      	movs	r2, #0
 8005300:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005302:	4b12      	ldr	r3, [pc, #72]	; (800534c <prvHeapInit+0xb4>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2200      	movs	r2, #0
 8005308:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	1ad2      	subs	r2, r2, r3
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005318:	4b0c      	ldr	r3, [pc, #48]	; (800534c <prvHeapInit+0xb4>)
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	4a0a      	ldr	r2, [pc, #40]	; (8005350 <prvHeapInit+0xb8>)
 8005326:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	4a09      	ldr	r2, [pc, #36]	; (8005354 <prvHeapInit+0xbc>)
 800532e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005330:	4b09      	ldr	r3, [pc, #36]	; (8005358 <prvHeapInit+0xc0>)
 8005332:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005336:	601a      	str	r2, [r3, #0]
}
 8005338:	bf00      	nop
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	bc80      	pop	{r7}
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	20001094 	.word	0x20001094
 8005348:	20003094 	.word	0x20003094
 800534c:	2000309c 	.word	0x2000309c
 8005350:	200030a4 	.word	0x200030a4
 8005354:	200030a0 	.word	0x200030a0
 8005358:	200030a8 	.word	0x200030a8

0800535c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005364:	4b27      	ldr	r3, [pc, #156]	; (8005404 <prvInsertBlockIntoFreeList+0xa8>)
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	e002      	b.n	8005370 <prvInsertBlockIntoFreeList+0x14>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	429a      	cmp	r2, r3
 8005378:	d8f7      	bhi.n	800536a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	4413      	add	r3, r2
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	429a      	cmp	r2, r3
 800538a:	d108      	bne.n	800539e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	441a      	add	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	441a      	add	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d118      	bne.n	80053e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	4b14      	ldr	r3, [pc, #80]	; (8005408 <prvInsertBlockIntoFreeList+0xac>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d00d      	beq.n	80053da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	441a      	add	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	e008      	b.n	80053ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80053da:	4b0b      	ldr	r3, [pc, #44]	; (8005408 <prvInsertBlockIntoFreeList+0xac>)
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	e003      	b.n	80053ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d002      	beq.n	80053fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053fa:	bf00      	nop
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	bc80      	pop	{r7}
 8005402:	4770      	bx	lr
 8005404:	20003094 	.word	0x20003094
 8005408:	2000309c 	.word	0x2000309c

0800540c <memset>:
 800540c:	4603      	mov	r3, r0
 800540e:	4402      	add	r2, r0
 8005410:	4293      	cmp	r3, r2
 8005412:	d100      	bne.n	8005416 <memset+0xa>
 8005414:	4770      	bx	lr
 8005416:	f803 1b01 	strb.w	r1, [r3], #1
 800541a:	e7f9      	b.n	8005410 <memset+0x4>

0800541c <_reclaim_reent>:
 800541c:	4b29      	ldr	r3, [pc, #164]	; (80054c4 <_reclaim_reent+0xa8>)
 800541e:	b570      	push	{r4, r5, r6, lr}
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4604      	mov	r4, r0
 8005424:	4283      	cmp	r3, r0
 8005426:	d04b      	beq.n	80054c0 <_reclaim_reent+0xa4>
 8005428:	69c3      	ldr	r3, [r0, #28]
 800542a:	b143      	cbz	r3, 800543e <_reclaim_reent+0x22>
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d144      	bne.n	80054bc <_reclaim_reent+0xa0>
 8005432:	69e3      	ldr	r3, [r4, #28]
 8005434:	6819      	ldr	r1, [r3, #0]
 8005436:	b111      	cbz	r1, 800543e <_reclaim_reent+0x22>
 8005438:	4620      	mov	r0, r4
 800543a:	f000 f879 	bl	8005530 <_free_r>
 800543e:	6961      	ldr	r1, [r4, #20]
 8005440:	b111      	cbz	r1, 8005448 <_reclaim_reent+0x2c>
 8005442:	4620      	mov	r0, r4
 8005444:	f000 f874 	bl	8005530 <_free_r>
 8005448:	69e1      	ldr	r1, [r4, #28]
 800544a:	b111      	cbz	r1, 8005452 <_reclaim_reent+0x36>
 800544c:	4620      	mov	r0, r4
 800544e:	f000 f86f 	bl	8005530 <_free_r>
 8005452:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005454:	b111      	cbz	r1, 800545c <_reclaim_reent+0x40>
 8005456:	4620      	mov	r0, r4
 8005458:	f000 f86a 	bl	8005530 <_free_r>
 800545c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800545e:	b111      	cbz	r1, 8005466 <_reclaim_reent+0x4a>
 8005460:	4620      	mov	r0, r4
 8005462:	f000 f865 	bl	8005530 <_free_r>
 8005466:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005468:	b111      	cbz	r1, 8005470 <_reclaim_reent+0x54>
 800546a:	4620      	mov	r0, r4
 800546c:	f000 f860 	bl	8005530 <_free_r>
 8005470:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005472:	b111      	cbz	r1, 800547a <_reclaim_reent+0x5e>
 8005474:	4620      	mov	r0, r4
 8005476:	f000 f85b 	bl	8005530 <_free_r>
 800547a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800547c:	b111      	cbz	r1, 8005484 <_reclaim_reent+0x68>
 800547e:	4620      	mov	r0, r4
 8005480:	f000 f856 	bl	8005530 <_free_r>
 8005484:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005486:	b111      	cbz	r1, 800548e <_reclaim_reent+0x72>
 8005488:	4620      	mov	r0, r4
 800548a:	f000 f851 	bl	8005530 <_free_r>
 800548e:	6a23      	ldr	r3, [r4, #32]
 8005490:	b1b3      	cbz	r3, 80054c0 <_reclaim_reent+0xa4>
 8005492:	4620      	mov	r0, r4
 8005494:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005498:	4718      	bx	r3
 800549a:	5949      	ldr	r1, [r1, r5]
 800549c:	b941      	cbnz	r1, 80054b0 <_reclaim_reent+0x94>
 800549e:	3504      	adds	r5, #4
 80054a0:	69e3      	ldr	r3, [r4, #28]
 80054a2:	2d80      	cmp	r5, #128	; 0x80
 80054a4:	68d9      	ldr	r1, [r3, #12]
 80054a6:	d1f8      	bne.n	800549a <_reclaim_reent+0x7e>
 80054a8:	4620      	mov	r0, r4
 80054aa:	f000 f841 	bl	8005530 <_free_r>
 80054ae:	e7c0      	b.n	8005432 <_reclaim_reent+0x16>
 80054b0:	680e      	ldr	r6, [r1, #0]
 80054b2:	4620      	mov	r0, r4
 80054b4:	f000 f83c 	bl	8005530 <_free_r>
 80054b8:	4631      	mov	r1, r6
 80054ba:	e7ef      	b.n	800549c <_reclaim_reent+0x80>
 80054bc:	2500      	movs	r5, #0
 80054be:	e7ef      	b.n	80054a0 <_reclaim_reent+0x84>
 80054c0:	bd70      	pop	{r4, r5, r6, pc}
 80054c2:	bf00      	nop
 80054c4:	2000005c 	.word	0x2000005c

080054c8 <__libc_init_array>:
 80054c8:	b570      	push	{r4, r5, r6, lr}
 80054ca:	2600      	movs	r6, #0
 80054cc:	4d0c      	ldr	r5, [pc, #48]	; (8005500 <__libc_init_array+0x38>)
 80054ce:	4c0d      	ldr	r4, [pc, #52]	; (8005504 <__libc_init_array+0x3c>)
 80054d0:	1b64      	subs	r4, r4, r5
 80054d2:	10a4      	asrs	r4, r4, #2
 80054d4:	42a6      	cmp	r6, r4
 80054d6:	d109      	bne.n	80054ec <__libc_init_array+0x24>
 80054d8:	f000 f87e 	bl	80055d8 <_init>
 80054dc:	2600      	movs	r6, #0
 80054de:	4d0a      	ldr	r5, [pc, #40]	; (8005508 <__libc_init_array+0x40>)
 80054e0:	4c0a      	ldr	r4, [pc, #40]	; (800550c <__libc_init_array+0x44>)
 80054e2:	1b64      	subs	r4, r4, r5
 80054e4:	10a4      	asrs	r4, r4, #2
 80054e6:	42a6      	cmp	r6, r4
 80054e8:	d105      	bne.n	80054f6 <__libc_init_array+0x2e>
 80054ea:	bd70      	pop	{r4, r5, r6, pc}
 80054ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80054f0:	4798      	blx	r3
 80054f2:	3601      	adds	r6, #1
 80054f4:	e7ee      	b.n	80054d4 <__libc_init_array+0xc>
 80054f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054fa:	4798      	blx	r3
 80054fc:	3601      	adds	r6, #1
 80054fe:	e7f2      	b.n	80054e6 <__libc_init_array+0x1e>
 8005500:	0800581c 	.word	0x0800581c
 8005504:	0800581c 	.word	0x0800581c
 8005508:	0800581c 	.word	0x0800581c
 800550c:	08005820 	.word	0x08005820

08005510 <__retarget_lock_acquire_recursive>:
 8005510:	4770      	bx	lr

08005512 <__retarget_lock_release_recursive>:
 8005512:	4770      	bx	lr

08005514 <memcpy>:
 8005514:	440a      	add	r2, r1
 8005516:	4291      	cmp	r1, r2
 8005518:	f100 33ff 	add.w	r3, r0, #4294967295
 800551c:	d100      	bne.n	8005520 <memcpy+0xc>
 800551e:	4770      	bx	lr
 8005520:	b510      	push	{r4, lr}
 8005522:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005526:	4291      	cmp	r1, r2
 8005528:	f803 4f01 	strb.w	r4, [r3, #1]!
 800552c:	d1f9      	bne.n	8005522 <memcpy+0xe>
 800552e:	bd10      	pop	{r4, pc}

08005530 <_free_r>:
 8005530:	b538      	push	{r3, r4, r5, lr}
 8005532:	4605      	mov	r5, r0
 8005534:	2900      	cmp	r1, #0
 8005536:	d040      	beq.n	80055ba <_free_r+0x8a>
 8005538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800553c:	1f0c      	subs	r4, r1, #4
 800553e:	2b00      	cmp	r3, #0
 8005540:	bfb8      	it	lt
 8005542:	18e4      	addlt	r4, r4, r3
 8005544:	f000 f83c 	bl	80055c0 <__malloc_lock>
 8005548:	4a1c      	ldr	r2, [pc, #112]	; (80055bc <_free_r+0x8c>)
 800554a:	6813      	ldr	r3, [r2, #0]
 800554c:	b933      	cbnz	r3, 800555c <_free_r+0x2c>
 800554e:	6063      	str	r3, [r4, #4]
 8005550:	6014      	str	r4, [r2, #0]
 8005552:	4628      	mov	r0, r5
 8005554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005558:	f000 b838 	b.w	80055cc <__malloc_unlock>
 800555c:	42a3      	cmp	r3, r4
 800555e:	d908      	bls.n	8005572 <_free_r+0x42>
 8005560:	6820      	ldr	r0, [r4, #0]
 8005562:	1821      	adds	r1, r4, r0
 8005564:	428b      	cmp	r3, r1
 8005566:	bf01      	itttt	eq
 8005568:	6819      	ldreq	r1, [r3, #0]
 800556a:	685b      	ldreq	r3, [r3, #4]
 800556c:	1809      	addeq	r1, r1, r0
 800556e:	6021      	streq	r1, [r4, #0]
 8005570:	e7ed      	b.n	800554e <_free_r+0x1e>
 8005572:	461a      	mov	r2, r3
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	b10b      	cbz	r3, 800557c <_free_r+0x4c>
 8005578:	42a3      	cmp	r3, r4
 800557a:	d9fa      	bls.n	8005572 <_free_r+0x42>
 800557c:	6811      	ldr	r1, [r2, #0]
 800557e:	1850      	adds	r0, r2, r1
 8005580:	42a0      	cmp	r0, r4
 8005582:	d10b      	bne.n	800559c <_free_r+0x6c>
 8005584:	6820      	ldr	r0, [r4, #0]
 8005586:	4401      	add	r1, r0
 8005588:	1850      	adds	r0, r2, r1
 800558a:	4283      	cmp	r3, r0
 800558c:	6011      	str	r1, [r2, #0]
 800558e:	d1e0      	bne.n	8005552 <_free_r+0x22>
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	4408      	add	r0, r1
 8005596:	6010      	str	r0, [r2, #0]
 8005598:	6053      	str	r3, [r2, #4]
 800559a:	e7da      	b.n	8005552 <_free_r+0x22>
 800559c:	d902      	bls.n	80055a4 <_free_r+0x74>
 800559e:	230c      	movs	r3, #12
 80055a0:	602b      	str	r3, [r5, #0]
 80055a2:	e7d6      	b.n	8005552 <_free_r+0x22>
 80055a4:	6820      	ldr	r0, [r4, #0]
 80055a6:	1821      	adds	r1, r4, r0
 80055a8:	428b      	cmp	r3, r1
 80055aa:	bf01      	itttt	eq
 80055ac:	6819      	ldreq	r1, [r3, #0]
 80055ae:	685b      	ldreq	r3, [r3, #4]
 80055b0:	1809      	addeq	r1, r1, r0
 80055b2:	6021      	streq	r1, [r4, #0]
 80055b4:	6063      	str	r3, [r4, #4]
 80055b6:	6054      	str	r4, [r2, #4]
 80055b8:	e7cb      	b.n	8005552 <_free_r+0x22>
 80055ba:	bd38      	pop	{r3, r4, r5, pc}
 80055bc:	200031e8 	.word	0x200031e8

080055c0 <__malloc_lock>:
 80055c0:	4801      	ldr	r0, [pc, #4]	; (80055c8 <__malloc_lock+0x8>)
 80055c2:	f7ff bfa5 	b.w	8005510 <__retarget_lock_acquire_recursive>
 80055c6:	bf00      	nop
 80055c8:	200031e4 	.word	0x200031e4

080055cc <__malloc_unlock>:
 80055cc:	4801      	ldr	r0, [pc, #4]	; (80055d4 <__malloc_unlock+0x8>)
 80055ce:	f7ff bfa0 	b.w	8005512 <__retarget_lock_release_recursive>
 80055d2:	bf00      	nop
 80055d4:	200031e4 	.word	0x200031e4

080055d8 <_init>:
 80055d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055da:	bf00      	nop
 80055dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055de:	bc08      	pop	{r3}
 80055e0:	469e      	mov	lr, r3
 80055e2:	4770      	bx	lr

080055e4 <_fini>:
 80055e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e6:	bf00      	nop
 80055e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ea:	bc08      	pop	{r3}
 80055ec:	469e      	mov	lr, r3
 80055ee:	4770      	bx	lr
